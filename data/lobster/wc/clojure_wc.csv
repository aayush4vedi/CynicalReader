ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,clojure,Clojure programming,"An Architecture for Community Contribution, Speed and Modularity",https://jponline.github.io/looset-landing/an-architecture/,architecture community contribution speed modularity,main page art unix programming wiki architect let option open clean architecture kickstarter campaign backend babashka lezer frontend reagent redux flux reframe treating ui finite state machine test given gherkin syntax puppeteer devcards storybook speed kickstarter looset main page video demo tool kickstarter campaign,tell opinion software architecture plan looset watch source file change show real time dependency diagram code block viewer independent filesystem check main page started work looset yet thought bit architecture believe building metaphor bad talking software prefer grow metaphor think software living organism need constant care make better decision lot rule around create software use design pattern write test first tdd model according domain first ddd behavior first bdd solid hexagonal onion architecture layer module etc value mentioned prefer understand principle reflect direction like art unix programming summary principle stated wiki influenced two idea first heard martin fowler opposing statement architect responsible making big important initial decision said something architect let option open second got reading clean architecture uncle bob point farther module business rule module work plugin ie framework database work plugins started think decision let open structure plugin maybe system maybe programming language see project becoming reality contribute kickstarter campaign asking need able work free open source software general goal writing software extensibility accretion feature become slow dangerous existent feature project grow big readability easy read understand maintainability flexibility testability decoupling way change module break system different place robust handle well unexpected error looset specific goal community contribution speed modularity backend working clojure time constant match personal development philosophy community philosophy understand people might personal preference use different stack work better specific domain reason decided write looset module independent script program called using bash instance write basic analyzer clojure using babashka let open language specific analyzer written script language could seen sort micro service architecture one could decide use python write analyzer c even integrate project lezer clojure data map part philosophy data need shared across different language even front end make sense write clojure edn extensible data notation thinking general adoption write data file json also inspired git work frontend people would agree making decision frontend different making decision backend still want maximize community contribution modularity still letting option open decided write looset view independent web component used basic html page instance write component using clojurescript reagent let open language framework support exporting web component one could decide use angular vuejs write new functionality already created web app scratch without state management system redux flux reframe know important would say important library idea main point app state global change firing event subscribe component change still investigating going use way available web component framework decision structure app state also need done like normalized possible splitting domain entity basically would write database ui model component state also computing little possible rendering phase treating ui finite state machine test like test driven development approach good test structuring dependency testable way tend write bdd style using given gherkin syntax mostly write unit test backend think unit test valuable frontend already used puppeteer write endtoend test clicking button taking screenshots etc looset use basically production like environment firing event checking result app state another strategy sometimes viewed test use way develop prototype devcards use visualize component multiple state developing tweaking app state storybook seems good alternative work web component speed project performance top priority expect work huge amount data different project main concern fast going interact big project generating large graph address problem web worker background process generating cache visualization kickstarter created campaign validate interest also able invest amount time project requires campaign asks one time contribution amount nothing changed end month reach goal looset main page video demo tool kickstarter campaign last update aug
2,Lobsters,clojure,Clojure programming,Cognitect Joins Nubank,https://cognitect.com/blog/2020/07/23/Cognitect-Joins-Nubank,cognitect join nubank,nubank next step long relationship clojure datomic simplicity scale bigger hammock vocal public supporter clojure datomic conference diversity value value rich stu alex come next,thrilled announce cognitect joining nubank family company next step long relationship open new opportunity clojure datomic worldwide simplicity scale nubank spectacular success story clojure datomic running missioncritical software scale start nubank grown clojure developer running million line clojure code microservices datomic server cognitect every step way helping nubank developer translate clojure idea business agility nubank largest fintech latin america million customer using online financial solution support nubank mission bringing banking course working together durham paulo become friend bigger hammock nubank vocal public supporter clojure datomic committed growth together expand team behind clojure datomic offer conference training resource every kind work improve diversity nubank cognitect across clojure community value value nubank understands unique value clojure datomic committed continuing without disruption rich remain helm clojure remains independent continue manage clojure technical direction stu alex rich stu continue datomic architect product lead respectively cognitect continue operate u c corporation datomic development product offering customer relationship continue grow cognitect continue offer professional service datomic customer transition general consulting development come next clojure datomic user resource behind software greater ever next datomic feature come bit sooner dedicated growing clojure community helping company adopt succeed clojure thanks justin rich stu
3,Lobsters,clojure,Clojure programming,Cursive: The IDE for beautiful Clojure code,https://cursive-ide.com/,cursive ide beautiful clojure code,available mailing list,available cursive available intellij plugin use community ultimate edition available future standalone clojurefocused ide commercial product free noncommercial licence opensource work personal hacking student work discus cursive keep date mailing list
4,Lobsters,clojure,Clojure programming,Datalevin is a port of Datascript in-memory Datalog database to Lightning Memory-Mapped Database,https://github.com/juji-io/datalevin,datalevin port datascript inmemory datalog database lightning memorymapped database,datalevin temporal feature datascript lightning memorymapped database lmdb cloudflare performs well edn usage api documentation status issue roadmap paula gearon asami difference datascript nikita prokopov value type edn nippy lmdb tool limitation alternative datascript asami crux datahike eva datalevin license license,datalevin simple fast durable datalog database everyone love datalog nt everyone use already datalevin simple durable datalog database rationale simple fast free datalog query engine running durable storage observation many developer prefer flavor datalog popularized flavor sql get use perhaps datalog declarative composable sql eg automatic implicit join seem killer feature enterprise grade software feature set may overkill use case one thing may confuse casual user temporal feature keep thing simple familiar datalevin store transaction history behaves way database data deleted gone datalevin started port datascript inmemory datalog database lightning memorymapped database lmdb retains library property datascript meant embedded application manage state data persistent disk datalevin application state survive application restarts data size larger memory datalevin relies robust acid transactional database feature lmdb designed concurrent read intensive workload lmdb used many project eg cloudflare global configuration distribution lmdb also performs well writing large value therefore fine store document datalevin datalevin us cover index writeahead log data written indexed standalone mode separate process thread indexing compaction database maintenance work compete application resource giving database value doctrine adopted alternative datalevin able leverage caching aggressively achieving significant query speed advantage independent datalog datalevin also used fast keyvalue store edn data number optimization put place instance us transaction pool reuse transaction preallocates readwrite buffer usage use datalog store require datalevincore define schema def schema aka dbcardinality dbcardinalitymany dbvaluetype optional unspecified attribute treated edn blob name dbvaluetype dbtypestring dbunique dbuniqueidentity create db connect def conn dcreateconn schema tmpdatalevintest transact data notice nation defined schema treated edn blob dtransact conn name frege dbid nation france aka foo fred name peirce dbid nation france name de morgan dbid nation english query data dq find nation alias e aka alias e nation nation conn fred france close conn dclose conn use key value store require datalevinlmdb l open key value db def db lopenlmdb tmplmdbtest define table dbi name def table testtable open table lopendbi db table transact data transaction put data multiple table ltransact db put table datalevin hello world put table saying long thanks fish source hitchhiker guide galaxy get value key lgetvalue db table datalevin hello world lgetvalue db table saying long thanks fish source hitchhiker guide galaxy delete data ltransact db del table gone lgetvalue db table nil close db lclose db refer api documentation detail status datascript lmdb mature stable library building top datalevin extensively tested propertybased testing running benchmark suite datascript look benchmarked query datalevin faster datascript considering comparing disk store memory store result may counterintuitive primary reason datalevin immutable database easy cache aggressively whereas may difficult immutable database eg see issue introduced caching version datalevin faster datascript single clause query due highly efficient read lmdb caching enabled datalevin faster across board addition soon move efficient query implementation datascript query engine efficient writes order magnitude slower expected datalevin writing disk datascript memory bulk write speed good writing datoms disk le second data also transacted whole le second transacting one datom datoms time much slower transaction syncs disk inherently slow lmdb copy write never overwrites data read large write amplification may also occur advice write data larger batch short datalevin quite capable small medium project right roadmap short term goal try reach quickly distributed mode raft based replication new query engine optimizer based paula gearon asami schema migration query parity datascript composite tuples persisted transaction function materialized view incremental maintenance welcome suggestion next please file issue difference datascript datascript developed nikita prokopov built totally scratch related mean although currently port datalevin differs datascript significant way difference data durability mentioned datalevin immutable database database value feature since history kept transaction id stored datoms transaction committed together batch rather saved withdatom one time respect dbvaluetype currently value type supported except bigint bigdec uri tuple value unspecified type treated edn blob deserialized nippy value leading index vae datoms dbtyperef type attribute attribute value leading index ave enabled datoms need specify dbindex cloud attribute stored index integer id thus attribute index access returned attribute creation order lexicographic order ie expect b come feature applicable inmemory db db immutable data structure db serialization db pretty print filtered db etc lmdb tool used work database file project would started without existence datascript continue submitting pull request datascript improvement applicable datascript limitation attribute name length limitation attribute name byte long due lmdb key size limit key compared bitwise range query work expected attribute dbvaluetype specified maximum individual value size practice value size determined lmdb ability find large enough continuous space disk datelevin ability preallocate offheap buffer jvm total data size datalevin database limit lmdb eg modern machine implement address space network interface may change currently support clojure jvm adding support clojurehosting runtime possible future since binding lmdb exist almost major language available platform alternative interested using dialect datalog pioneered current option need time travel rich feature backed author clojure use need inmemory store almost api datascript need inmemory graph database asami fast need feature bitemporal graph query may try crux nt mind experimental storage backend may try datahike also eva distributed store longer active development need simple fast durable store battle tested backend give datalevin try version license copyright juji inc licensed eclipse public license see license
5,Lobsters,clojure,Clojure programming,Building a static website with Babashka,https://www.mxmmz.nl/blog/building-a-website-with-babashka.html,building static website babashka,building website babashka enter babashka babashka graalvm design site hiccup genclj publish genclj publish bell whistle tool devclj genclj filewatcher pod conclusion matrix rain visualisation michiel borkent babashka,building website babashka experience creating blog post software offered hosting provider generating website markdown felt easier flexible maintainable create something simple like website want write blog post want write blog post nt want negotiate broken dependency look unclear outofdate nonexistent documentation spin container update container engine remember convention supposedly simple configuration file enter babashka essence babashka tiny clojure interpreter tuned shell scripting compiling native binary using graalvm infamous jvm startup time gone make possibility using clojure command line lot attractive lot clojure enthusiast suddenly idea struck could make website babashka dependency installing updating babashka easy babashka available platform design source code website found directory listing already tell lot development setup website site folder contains website page clojure file using hiccup format also contains plain cs file genclj babashka executable generates html file clojure file put html file together cs file publish folder publish genclj website existence second later start pushing everything publish folder hosting provider bell whistle folk need build website could even go spartan write html bit barebones like occasional helper function needed helper function located tool folder furthermore got tired refreshing browser updating blog post file editor decided create devclj babashka executable monitor folder run genclj script detects change open refreshed page come cost additional babashka dependency filewatcher pod worth conclusion although perfect yet like setup plain sight adapt wish possible even quite simple add generated code clojurescript project mine website instance look matrix rain visualisation like thank michiel borkent awesome babashka tool helping getting setup upandrunning building website clojure ever easier least decide go route well michiel would love hear
6,Lobsters,clojure,Clojure programming,Comparing compiler construction in Clojure and F#,https://www.youtube.com/watch?v=t8usj1fN9rs,comparing compiler construction clojure f,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature language language comparing compiler construction clojure f ramsey nasser youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature language language comparing compiler construction clojure f ramsey nasser youtube
7,Lobsters,clojure,Clojure programming,Serving Findka's recommendations via libpython-clj,https://findka.com/blog/libpython-clj/,serving findka recommendation via libpythonclj,previously background dataset algorithm surprise integration via libpythonclj libpythonclj view source biff startup handler biff transaction interlude performance python integration continued biff trigger,written previously simple baseline algorithm findka using generate content recommendation brother marshall data science since started helping parttime improving last night offtheshelf knn algorithm written python running ab test first time integrating clojure python thought give outline background dataset algorithm findka data set consists rating tuples user id item id rating rating thumbsdown thumbsup bookmark also keep track item skipped currently data nt used building model lot user mash skip button marshall used surprise python recommendation lib run bunch experiment existing rating data found knn baseline performed best word establishing best metric crucial proper testing surprise designed handle arbitrary range realvalued rating data binary thumb updown default rmse used surprise accurate purpose surprise also offer fraction concordant pair metric accurate data using built metric entire test set give best optimization purpose really care top n rating individual user way single user accurate prediction test set offset overall accuracy lot user rating test set prediction change item top rated anyway using accuracy top item user metric tested svd coclustering knn algorithm couple algorithm surpise knn baseline slightly better others one biggest advantage knn determine confidence along prediction rating looking number actual neighbor used prediction algorithm us neighbor many item many item predicted rating neighbor fair amount confidence prediction determine best prediction simply sort estimated rating primary key actual neighbor secondary key based test set knn baseline give good recommendation user time interestingly prediction accuracy actually algorithm correctly predicts top recommendation bad user dislike almost everything integration via libpythonclj since recommendation made online ie recommendation computed use app rather eg week like spotify discover weekly used libpythonclj integrate surprise clojure web app first piece python file expose informal interface three function train ratingscsvfilename surpriseknnbaseline top knnbaseline userid itemids list top recommended item taken itemids setrating knnbaseline userid itemid rating none view source file kept resourcespythonknnbaselinepy require clojure like get deployed rest app n findkaalgo require clojurejavaio io libpythoncljpython py libpythoncljrequire refer requirepython requirepython sys pypy syspath append getpath ioresource python requirepython knnbaseline reload knn thanks reload change made python code come effect whenever evaluate findkaalgo namespace call three function different part biff startup pull rating crux store csv pas knntrain n findkacore require biffsystem refer startbiff findkaalgo algo defn startfindka sys sys merge findkamodel atom startbiff findka algoupdateknnmodel n findkaalgo require clojurejavaio io cruxapi crux findkatridentcrux tcrux tridentutil u defn knnmodelinputs useritemratings let f iofile utmpdir knnratingscsv withopen w iowriter f doseq user item rating useritemratings write w str hash user hash item rating dislike n knn model knntrain getpath f defn updateknnmodel key findkabiffnode findkamodel sys swap model merge wrap cruxapiopenq tcruxlazyq cruxdb node find user item rating useritem rating rating rating skip useritem user user useritem item item knnmodelinputs sys also set cron job call updateknnmodel periodically though calling manually day via tunneled nrepl connection since manual task run daily anyway whenever client need recommendation submits sente event handler call findkaalgorecommend check user ab test assignment call knntop user b arm return biff transaction along data logging purpose n findkaalgo require cruxapi crux tridentutil u def hashstr comp str hash defn recommendknn key userref model db n n let list crux document id item possibly recommend currently query crux item exclude one user already rated candidate hashstr candidate umapfrom hashstr candidate userref crux document id user userid hashstr userref exploit knntop model hashstr userref map hashstr candidate merge umapkeys keyword item hashstr candidate get itemid algo knnexploit recs candidate shuffle map hashmap algo knnexplore item like interleave probabalistically choose item first collection x time interleaverandom exploit distinct take n item map item recs biff transaction tx defn recommend key userref db env let algoassignment abalgo cruxentity db abuser userref unassigned nil algoassignment algoassignment algoassignment first shuffle cooc knn f case algoassignment cooc recommendcooc knn recommendknn cond f env true assoc algo algoassignment unassigned update tx conj ab abuser userref dbmerge true abalgo algoassignment still using epsilongreedy strategy exploration recommendation purely random probably good area future experiment interlude performance first pas using libpythonclj recommendknn really slow even limited candidate value random item function taking anywhere second run server curiously never slow laptop even though experiment ran go faster server found deployed long story short culprit passing many object python clojure libpythonclj wrap python object clojure interface viceversa something like evidently nt relied willynilly particular originally passing rating data directly crux surprise without writing csv switched approach shown surprise read data disk instead instead using knntop function calling surprise method clojure get rating prediction item sorted item took top knntop python pas object back clojure instead hundred thousand also still limiting candidate knn relatively slow even run python code directly ie via clojure unnecessary switch matrix factorization tested svd prediction faster almost accurate change recommendknn typical user take m run m knntop m fetching candidate crux latter could optimized well nt investigated raw index access crux could keep candidate memory active client nothing else also using knntop tried returning tuples instead dictionary map still slow passing large list string map hashstr candidate clojure nt issue though simple test indicated computation via libpythonclj ran slower plain python even object passing involved nt know inherent something wrong right nt matter future u care thinking could run python separate process communicate ipc assuming ipc nt slow another thing investigated maybe time switched rolling model clojure python integration continued finally knnsetrating findka recommendation online someone visit site first time want algorithm adapt preference soon rate item must update model incrementally least portion model representing user taste mildly inconvenient surprise suspect recommendation library nt written use case mind peering source came synchronized lock mutex execution def setrating knnbaseline userid itemid rating knnbaselinetrainsetknowsitem itemid return inneritemid knnbaselinetrainsettoinneriid itemid try inneruserid knnbaselinetrainsettoinneruid userid newuser false except valueerror inneruserid len newuser true newbu npappend knnbaselinebu knnbaselinebu newbu knnbaselineby newbu knnbaselineyr inneruserid newratings r r knnbaselineyr inneruserid inneritemid rating none newratings inneritemid rating knnbaselineyr inneruserid newratings newuser last make sure top nt get messed call function executing likely occurrence userid inneruserid called small wrapper function n findkaalgo defn setratingknn key findkamodel key user item rating useritem knnsetrating knnmodel model hashstr user hashstr item normalizerating rating called biff trigger whenever someone rate item n findkatriggers defn ratingsupdated key doc docbefore env somechanged doc docbefore rating let key user item merge docbefore doc rating rating doc algosetratingknn assoc env useritem user user item item rating rating def trigger useritems write ratingsupdated quite happy set think help u iterate quickly algorithm particularly looking forward see result ab test next mini project focused analytics end nt ab testing
8,Lobsters,clojure,Clojure programming,REPL-integrated Clojure-to-Java decompiler,https://github.com/clojure-goes-fast/clj-java-decompiler,replintegrated clojuretojava decompiler,cljjavadecompiler blog post procyon usage local clearing comparison nodisassemble nodisassemble license license,cljjavadecompiler read motivation behind cljjavadecompiler usage example blog post library integrated clojuretojava decompiler usable repl wrapper around procyon suite java metaprogramming tool focused code generation analysis quick demo user cljjavadecompilercoredecompile loop sum sum recur uncheckeddec uncheckedadd sum decompiling class user import clojurelang public final class user extends afunction public static object invokestatic long long sum final long n sum n return numbersnum sum public object invoke return invokestatic several usecases may want use java decompiler get general understanding clojure compiler work function compiled class function invoked etc optimize performance bottleneck using lowlevel construct like loop primitive math type hint investigate java interop facility implemented reify proxy genclass usage add comclojuregoesfastcljjavadecompiler dependency repl user require cljjavadecompilercore refer decompile nil user decompile fn println hello decompiler decompiling class cljjavadecompilercore import clojurelang public final class core extends afunction public static final var public static object invokestatic return ifn invoke object hello decompiler public object invoke return invokestatic static rtvar clojurecore println also disassemble bytecode output similar one javap user disassemble fn println hello decompiler redacted public static javalangobject invokestatic flag public static code linenumber getstatic cljjavadecompilercore lclojurelangvar invokevirtual clojurelangvargetrawroot ljavalangobject linenumber checkcast lclojurelangifn getstatic cljjavadecompilercore lclojurelangvar invokevirtual clojurelangvargetrawroot ljavalangobject linenumber checkcast lclojurelangifn ldc hello decompiler linenumber invokeinterface clojurelangifninvoke ljavalangobject ljavalangobject linenumber invokeinterface clojurelangifninvoke ljavalangobject ljavalangobject areturn make output clearer cljjavadecompiler default disables local clearing code compiles reenable setting compiler option false explicitly like binding compileroptions disablelocalsclearing false decompile also change compiler option static linking metadata elision way comparison nodisassemble nodisassemble nd another tool let inspect clojure code compiles however substantially differs cljjavadecompiler cjd nd disassemble compiled code bytecode representation cjd decompiles code java much easier comprehend nd requires program loaded java agent present either add agent jvm option manually start repl leiningen plugin cjd loaded repl dynamically nd track every class loaded since beginning program memory overhead cjd bear overhead nd disassemble already defined clojure function cjd need clojure form passed directly last limitation come fact java clojure nt keep bytecode class loaded anywhere clojure compiler compiles piece clojure code transforms bytecode memory load classloader discard bytecode nodisassemble work around java agent instrument classloader save class ever loaded accessible hashmap retrieved later however mean must start clojure program nd agent classpath ca nt decompile existing function definition cjd using cider jump definition function want decompile disable readonly mode cx cq wrap defn form cljjavadecompilercoredecompile recompile form cc cc license cljjavadecompiler distributed eclipse public license see license copyright alexander yakushev
9,Lobsters,clojure,Clojure programming,Elliptic Curve Cryptography I,https://btcclj.com/posts-output/2020-06-18-elliptic-curve-cryptography-i/,elliptic curve cryptography,elliptic curve finite field coding elliptic curve finite field scalar multiplication coding scalar multiplication defining curve bitcoin conclusion programming bitcoin finite field elliptic curve part two github elliptic curve finite field coding elliptic curve finite field scalar multiplication discrete logarithm problem coding scalar multiplication defining curve bitcoin coding conclusion,elliptic curve finite fieldscoding elliptic curve finite fieldsscalar multiplicationcoding scalar multiplicationdefining curve bitcoinconclusion welcome part one exploring programming bitcoin third chapter elliptic curve cryptography clojure section combining subject previous two chapter finite field elliptic curve together make necessary ingredient create cryptographic primitive need build signing verification algorithm making part two code found github made major change code first two chapter get elliptic curve cryptography work following code first two section keep mind function changed going change piece brevity going long one alreadyelliptic curve finite fieldspreviously saw plotted graph like one creates elliptic curveit turn math hold elliptic curve finite field real number shown finite field well finite get nice continuous curve try plot point elliptic curve equation end getting scatter plot look like using finite field addition subtraction multiplication division exponentiation actually point addition curve although may seem surprising certain common pattern found among mathematical abstraction notion fieldswe verify point elliptic curve finite field calculating side elliptic curve equation instance wanted prove point bitcoin curve plug number use modulo arithmetic learned get answer mod mod coding elliptic curve finite fieldsi changed code earlier chapter support overloaded operator finite field point initialize point elliptic curve real finite field using exact codein refactor became necessary start operating big integer nt going use integer addition operation instead extend number type use bigint quoted form operator n programmingbitcoinecc referclojure exclude defprotocol fieldops x x x x renamed pwr pwr x zero x extendtype number fieldops x x x x x x since excluding operator biginteger version use namespaced version x clojurecore x pwr x k mathexpt x k zero x fieldelement type also us overloaded operator definition point addition also work box test like n programmingbitcoinecctest referclojure exclude require clojuretest refer programmingbitcoinecc refer deftest pointaddition let prime fieldelement prime b fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime point b point b point b point b point b testing point addition finite field testing different point testing point scalar multiplicationpoint addition remains associative finite field thus add point result operation know multiplication called scalar multiplication case coefficient front scalar number variable hand vector x coordinate add new notation instead writing write one important property scalar multiplication near impossible predict without calculating diagram programming bitcoin point labeled number time point added get point word scalar coefficientif given random point curve xg asked many multiple g would nt able perform scalar multiplication easily performing reverse function scalar division becomes intractable called discrete logarithm problem form basis elliptic curve cryptography since scalar multiplication point addition point scalar exponentiation scalar multiplication applied context elliptic curve discrete logarithm problem inability reverse scalar exponentiationlet consider equation q px mod p p large prime trying solve q equation trivial know point p exponent x trying solve x p q infeasible large enough p called discrete logarithm problem inverse function solved easily x logpq important thing scalar multiplication certain multiple reach additive identity commonly known normal mathematics case point addition referred point infinity critical feature property choose generator point g curve scalar multiply reach identity point create set g ng ng set actually called group n finite specifically finite cyclic group cyclic part come fact cycle back get point infinity since everything done mod p group single operation case point addition property closure invertibility commutativity identity associativity expect intuition mathsince generator point public group generated scalar multiplication point small enough find answer brute force search bitcoin curve others used elliptic curve cryptography number much bigger thus discrete logarithm problem becomes incomputable amount time needed solve would insurmountablebecause mathematical property group combined fact scalar multiplication easy inverse difficult necessary ingredient elliptic curve cryptography let code scalar multiplication first go defining bitcoin curve implementing signing verification algorithmscoding scalar multiplicationwith naive implementation could define scalarmultiply simply defn scalarmultiply coeff point zero coeff zero point reduce repeat coeff point extendtype number fieldops x number x scalarmultiply x defrecord point x b fieldops zero p point nil nil b version function linear time complexity n thus highly inefficient unsuitable large exponent deal bitcoin curve need define scalarmultiply way allows u cut time problem scale implementing technique called binary expansion significantly faster larger inputsif wanted compute value say instead nine repeated point addition p use binary expansion reduce problem size half step solve four step since point addition associative calculate like pp would implement technique clojure defn scalarmultiply p zero zero p loop p zero let e even quot zero e recur recur defining curve bitcoinas mentioned cryptography requires massive prime allow similarly huge finite cyclic group multiplication becomes impossible reverse even world powerful computer elliptic curve cryptography security fundamentally based assumption computer go meaningful portion curve finite cyclic groupto define elliptic curve public key cryptography need specify five public parameter constant b elliptic curve equation prime p finite field generator point g order group generated g n bitcoin us curve already discussed constant b simple elliptic curve equation many others much larger b value fact number low created cause concern amongst cryptographer one sure parameter came chosen troubling fact curve constructed nist u government agency recently found made backdoor elliptic curve random number generator despite suspicion many blockchain protocol significant number corporation rely curvethe prime p used curve equal p specifically chosen close coordinate make point curve expressed bit le hence part curve name fact give elliptic curve leg public key cryptography system private key generated bitcoin represented bit provides security bit diffiehellman key saving crucial system dealing significant amount cryptographic operationswhile express concisely exponential notation number incredibly scale order number atom observable universe brute forcing way bitcoin private key thus computationally infeasible trillion computer trillion computation every trillionth second trillion year still le generator g x coordinate coordinate order generated generator point n order finite cyclic group also close scalar multiple also represented bit lesscoding define constant curve code def n def fieldelement p def b fieldelement p def g point b also create constructor function initialize point bitcoin curve without redefine constant time create point record case initialize point infinity also need check x coordinate number initialize field element defn x let x number x fieldelement x p x number fieldelement p point x b define g new constructor function leave b function call def g also adjust operator efficient since know order finite cyclic group n let define function first help u determine whether point dealing curve mod n whatever scalar prime order defn key b b b extendtype number fieldops x cond number x scalarmultiply mod x n else scalarmultiply x conclusionwe need start public key cryptography recap covered elliptic curve finite field scalar multiplication defining bitcoin curve part two learn basic public key cryptography signing verification work sign verify message elliptic curve cryptography clojure learned
10,Lobsters,clojure,Clojure programming,Call C from Clojure using GraalVM - then compile a binary using native-image,https://github.com/Saikyun/native-image-clojure-c,call c clojure using graalvm compile binary using nativeimage,join github today sign file permalink clojure calling c compiled binary nativeimage prerequisite http githubcomgraalvmgraalvmcedevbuildsreleases http leiningenorg step acknowledgement resource reload reload,call c clojure using graalvm compile binary using nativeimage dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time clojure calling c compiled binary nativeimage prerequisite graalvm tested http githubcomgraalvmgraalvmcedevbuildsreleases download add following eg zprofile export graalvmhome export javahome graalvmhome install nativeimage graalvmhomebingu install nativeimage installed compile otherwise leiningen http leiningenorg tested mac step modify srcheadersjava specifically userstestprogrammeringclojuregraalnativeinteractiongraalsrctripleh need point srctripleh make clean cfiles compile woop value come cstruct acknowledgement thanks sogaiu helping get working call c clojure using graalvm compile binary using nativeimage resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
11,Lobsters,clojure,Clojure programming,ESP32-Based Board Uses ClojureScript to Explore Building IoT Devices,https://www.hackster.io/news/esp32-based-board-uses-clojurescript-to-explore-building-iot-devices-9c823bbeb011,board us clojurescript explore building iot device,esprit board clojurescript espruino espritboard github repository esprit repo fikesfarm tindie store clojurescript microcontrollers,esprit board mike fikes run clojurescript repl us espruino embedded javascript engine platform like combination mean explore programming iot device clojurescriptclojure lisp dialect making programming language rich set data structure clojurescript compiler closure target javascript combined espruino possible run clojurescript developed esprit allow user explore combination programming language iotenabled hardware board lipo battery charging circuit led status indicator six gpio pin module mib spiram mib flashwhile esprit make faster get using clojurescript repl fikes offer instruction get running based boardover espritboard github repository design data proteus gerbers bill material esprit repo file firmwareside also visit fikesfarm tindie store purchase esprit boardfor information clojurescript use check clojurescript microcontrollers talk fikes clojurenorth remote conference scheduled june
12,Lobsters,clojure,Clojure programming,nREPL 0.8: Evolving the Protocol,http://metaredux.com/posts/2020/06/15/nrepl-0-8-evolving-the-protocol.html,nrepl evolving protocol,first alpha version op note op dynamic middleware loading note closing thought clojurist together,day ago released first alpha version eventually going become nrepl upcoming release quite special add couple additional ops core nrepl protocol namely completion lookup apart extends sideloader functionality introduced nrepl allow dynamic loading middleware one great thing nrepl always simplicity implementing nrepl server client pretty easy protocol simple eventually nrepl gained traction even outside clojure community gave birth default set nrepl ops cover basic usecases many common usecases eg code completion looking definition documentation finding usage etc language server protocol gained lot traction recent year partly broader api power outofthebox programming editor world clojure void historically filled thirdparty nrepl middleware eg cidernrepl refactornrepl always merit powerful outofthebox experience lot consideration decided extend protocol op code completion completion another resolve symbol look much data possible lookup ops make sense pretty much every programming language therefore fit nrepl philosophy let examine new ops completion op api op based similar complete existed cidernrepl age typical completion request response request op completion n soman prefix map response completion candidate map n clojurecore type function candidate mapentry n clojurecore type function candidate mapindexed n clojurecore type function candidate map n clojurecore type function candidate mapcat n clojurecore type function candidate mapv n clojurecore type function status done implementation pretty simple yield result good coming cidernrepl get job done without external deps hard requirement nrepl default completion op use nrepl code completion nreplutilcompletion instruct nrepl use another completion function eg one based compliment completion function accept parameter prefix completion prefix n namespace look completion candidate option map additional option function ideally return result following format candidate map n clojurecore type function candidate mapentry n clojurecore type function candidate mapindexed n clojurecore type function candidate map n clojurecore type function candidate mapcat n clojurecore type function candidate mapv n clojurecore type function either specify custom completion function request via completefn key setting nreplmiddlewarecompletion completefn user set nreplmiddlewarecompletion completefn mynamespacemycompletion note name op exactly aligned protocol ops typically verb eg clone eval etc main reason avoid conflict cidernrepl using complete name year road probably complete make protocol alias completion backwards compatibility tricky foresight namespace cidernrepl ops eg cidercomplete lookup op main purpose lookup op provide necessary data client implement feature like go definition displaying documentation simply resolve symbol context current namespace return metadata obtain op inspired info op cidernrepl using look like request op lookup sym map n soman response info added n clojurecore name map file jar file clojurecoreclj static true arglistsstr f f coll f f f colls column line arglists f f coll f f f colls doc return lazy sequence consisting result applying f ton set first item coll followed applying f set second item coll one colls exhausted remaining item colls ignored functionn f accept numberofcolls argument return transducer whenn collection provided status done still fence name return key eg info lookupinfo etc default lookup use nrepl symbol lookup logic nreplutillookup instruct nrepl use another lookup function eg info orchard pretty similar outlined earlier completion lookup function accept parameter n namespace look completion candidate sym symbol lookup function ideally return result following format added n clojurecore name map file jar file clojurecoreclj static true arglistsstr f f coll f f f colls column line arglists f f coll f f f colls doc return lazy sequence consisting result applying f ton set first item coll followed applying f set second item coll one colls exhausted remaining item colls ignored functionn f accept numberofcolls argument return transducer whenn collection provided note nrepl default lookup function pretty basic handle symbol resolve special form var might change road definitely nongoal try replicate behaviour cidernrepl info op specify custom lookup function request via lookupfn key setting nreplmiddlewarelookup lookupfn user set nreplmiddlewarelookup lookupfn mynamespacemylookup dynamic middleware loading note section specific clojure nrepl implementation nrepl includes dynamicloader middleware used runtime query change middleware stack nrepl server using especially powerful combined sideloading allows client configure server connecting provides alternative specify middleware required client startup time introduces three new operation lsmiddleware return list active middleware ordered inside outwards addmiddleware add middleware stack optionally list extranamespaces could provided loading useful adding middleware implement form deferred loading example include cidernrepl refactornrepl case required namespaces might loaded upon first use may occur outside sideloading session thus fail feature allows u preload namespaces add middleware loading particular middleware fails stack unchanged swapmiddleware similar add replaces existing middleware note may remove dynamicloader practical term mean client simply bundle whatever middleware need power feature eg piggieback cidernrepl refactornrepl sayid load middleware nrepl server connecting immensely powerful eventually result need user setup get access everything client offer forget message like cider requires cidernrepl functionality work properly going take u get point clojure client support going great moment get big thanks shen tian tackling closing thought point nrepl mostly feature complete certain aspect new apis need polished though looking forward hearing feedback hoping get release nrepl next couple month important understand new ops sans related middleware loading aim replace functionality cidernrepl rather extend protocol improve baseline nrepl experience impact change felt best outside realm clojure solution like cidernrepl currently available next step point add support new nrepl functionality cider already support completion adding support lookup pretty straightforward well bit work sideloaderdynamic middleware loading front usual like extend special thanks clojurist together funding recent work nrepl cider project without support
13,Lobsters,clojure,Clojure programming,Transducers From The Ground Up,https://bsless.github.io/transducers-intro/,transducer ground,,implemented reduce implement map following implementation tail recursive requires introducing state variable init example defn map f init coll iflet seq coll recur f conj init f first rest init map inc range nice work also look similar reduce similar fact factor difference implement map reduce defn map f init coll reduce fn init x conj init f x init coll map inc range actually worked mean let take deeper look function pas reduce function f factor well defn mapper f fn init x conj init f x defn map f init coll reduce mapper f init coll map inc range one problem left mapper might look like problem behavior still concreted via conj purpose conj reducing function remember example reduce conj conj function take aggregate value element add element aggregate let factor rf defn mapper f fn rf fn accum x rf accum f x defn map f init coll reduce mapper f conj init coll map inc range made something interesting look even complicated also performed slight hand renamed init accum fully embed u context reducing function let drop map remain reducing context defn mapper f fn rf fn accum x rf accum f x reduce mapper inc conj range reduce mapper inc range hold illegal let take look understand completely separated behavior mapping sequence behavior accumulating result mapping something magic actually every function implemented reduce also nice equivalence function implemented reduce loop every function think implemented one turn function change behavior reducing process transforms transducer finally derive transduce defn transduce xf rf init coll reduce xf rf init coll
14,Lobsters,clojure,Clojure programming,Conversational software development,https://oli.me.uk/conversational-software-development/,conversational software development,fizz buzz fizzbugged,let use conjure conversational software development fix issue simple clojure fizz buzz program called repository fizzbugged since slightly broken design n fizzbuggedmain require clojurestring str defn n str n let zero mod n zero mod n cond fizz buzz fizz buzz else str n defn main range map n str strjoin println contrived example demonstrate development style hard problem probably already spot issue program almost correct quite let get repl running connect conjure evaluate code clojure nreplcmdline middleware cidernreplcidermiddleware nrepl server started port host localhost nrepl open neovim conjure installed connect automatically evaluate content main placing cursor inside form pressing ee comma prefix depend maplocalleader setting conjure configuration result appear hud small window top right open log split see l expected actual output program far expected fizz buzz fizz fizz buzz fizz fizz buzz actual buzz fizz buzz buzz buzz fizz buzz buzz fizz buzz fizz buzz combination appear multiple happening odd place look like fizz buzz inverted rest time let add comment buffer test form check specific return value n str evaluated form inside comment ee see result log buffer edit interact way clearly suspicion correct fizz buzz flipped fizz buzz applying way multiple going flip value around let binding evaluate function er evaluates top level root form cursor run little adhoc test suite notice weird behaviour fizz buzz occouring thing multiple one correct reevaluate n str execute body main one last time look good bear mind extremely simple example might thinking run program made change perfectly acceptable instance conversation program really shine talking directly staging server poking state intermediate step complex pipeline take minute run end end connected run step individually caching result var allows run individual part program demand without change code go harder complex problem thankful tool close hand
15,Lobsters,clojure,Clojure programming,Clojure: a mature alternative to Java,https://github.com/borkdude/clojure-overstapservice/blob/english/Alternatief.md,clojure mature alternative java,clojure mature alternative java tiobe index talk quote walmartlabs clojure simple clojure data oriented ring clojure requires le line code todobackend clojure support multiple platform clojure interactive figwheel overtone clojure full stack react reagent hiccup syntax om better performance clojure prevents callback hell coreasync httpcljs clojure spec expound clojure good scripting language planck joker babashka graalvm clojure stable speculation transcript epilogue,clojure mature alternative java year celebrate anniversary java currently popular programming language according tiobe index become popular programming language difficult feat surely beginning java lot people needed convinced way java positioned better alternative language choice time c programmer managed drag lot halfway lisp guy steele coauthor java language specification came many programmer crossed java moving midway path enlightenment article subsequent part switching lisp case lisp pinnacle productivity according steele lisp talking clojure programming language jvm introduced rich hickey edition java one hickey held talk started following quote lot best programmer productive programmer know writing everything clojure swearing producing ridiculously sophisticated thing short time programmer productivity matter adrian cockroft former netflix pitch rich clojure enables write program better flexible make much productive using java could certainly reason big company like netflix embraced clojure mature alternative java another example walmartlabs clojure shrink code base onefifth size would written java anthony marcar architect walmartlabs language proven industry perhaps good reason switch clojure listed ten advantage using clojure clojure simple rich hickey dedicated whole year life designing clojure decided language needed simple easy language true clojure easy learn might initially win java programmer indeed path programmer enlightenment never easy perhaps even painful parens silly prefix notation however reached nirvana find clojure syntax actually simple one example simplicity writing function clojure encourages write pure function function yield side effect rich hickey recognized feature immutability help achieve variable guaranteed immutable code better reason lot easier test clojure data oriented simplicity also stem fact clojure object oriented data oriented data represented immutable hashmaps instead class like java data structure easy manipulate function mutually independent therefore clojure philosophically aligned following quote alan j perlis better function operate one data structure function operate data structure object orientation force continually reinvent wheel requires put data class instead clojure use limited set data structure use case moreover new class oo language learn method first order access data structure lurking behind also map clojure immutable nt worry side effect small example ring library writing web application handler nothing function expects hashmap request return hashmap response defn whatismyip request status header contenttype textplain body remoteaddr request namespace scope handler dependent upon ring library thing need know request ring look like ie key may expect hashmap key ought return order yield valid response happening request response nothing else computation normal hashmaps surely lot simple working httpservletrequest httpservletresponse clojure requires le line code using clojure carry burden immense overhead occurs object oriented language overhead consists writing interface implementation code protect data structure mean need le clojure line code java line code order achieve result another reason need write le line code clojure functional programming language language known expressive imperative programming language instance clojure write loop iteration computation collection apply higher order function map filter reduce collection course version java language already incorporated functional feature lambda higher order function via stream api fact clojure lisp prevent writing boilerplate code using macro function executed compile time accept expression argument expression represented data also transform using clojure function amount codegeneration nt write boilerplate code website todobackend contains several different implementation todolist api also use compare language comparing clojure implementation java see following clojure line clojure including build configuration java spring mvc line xml java line code line groovy java spring boot line java line groovy include line code library framework used expect even better result clojure advantage le line code evident smaller program contains le bug easier reason simplicity robust clojure support multiple platform clojure ecosystem enables reuse knowledge language multiple environment server side development use clojure jvm net via clojureclr front end development use clojurescript compiles javascript clojurescript compiler used program run browser also server side using nodejs much effort put keeping clojure implementation mutually consistent diverge platform limitation one example limitation absence multithreading browser many clojure library offer support clojure clojurescript reuse knowledge platform library developer use reader conditionals offer possibility use code file target environment application developer also use reader conditionals write one piece code platform example following code contains variable value nan jvm platform clj defined doublenan javascript cljs nan global namespace def notanumber clj doublenan cljs jsnan default nil clojure interactive clojure interactive programming language repl readevalprint loop receive immediate feedback whilst developing redefine function retest even application running without starting new compile cycle tool jrebel quarkus hot code reloading necessary even possible cross network hook remote replsession order inspect state application production server clojurescript also support repl session enables connect code running browser node test modify program tool like figwheel also enables immediately view result modified clojurescript without even refresh browser mean clojure suitable live coding clojure even produce live music check library overtone clojure full stack one way java full stack backend language people nt try become relevant front end well seriously still developing application using awt swing javafx likewise clojure initially conceived alternative back end language advent clojurescript subsequent release many front end library tool decidedly consider clojure full stack language also introduced lot interesting element considerably improves experience full stack developer react piggybacking success javascript library react amazingly easy build n spa single page application clojurescript reagent clojurescript library simplifies writing react component hiccup syntax describing html markup using clojure data structure requires line code example component count number click button subsequently showing div def countstate atom defn counter div countstate button onclick swap countstate inc x reagentrendercomponent counter jsdocumentgetelementbyid app om another clojurescript wrapper react possible achieve even better performance react better efficiency comparing different set state clojurescript well clojure clojure prevents callback hell one problem javascript developer deal phenomenon called callback hell browser program one thread reason need work nested callback apply deeper level nesting code readability increasingly worse clojure solution consists library coreasync might guessed simplifies working asynchronous code also go without saying library work server client building block channel buffer go block go block source transformation offer appearance synchronous code ultimately translate nested callback example following code first retrieves user email address via call rest api library httpcljs used combine ajax call coreasync return value receive channel read result using take operation next use email address second call fetch order user go let email body httpget str apiusers email order body httpget str apiordersbyemail email count order clojure spec since clojure released end clojure come spec library describe structure data function support validation error reporting instrumentation data generation developer coming java may find clojure lack static typing hard digest spec offer compile time guarantee beyond macro syntax checking offer something much powerful runtime small example define spec express integer must even greater sdef bigeven sand int even use instrumentation check argument function conforms specification defn squarebigeven return square x must big even integer x x x define spec function argument sfdef squarebigeven args scat x bigeven instrument stinstrument squarebigeven squarebigeven failed even x spec userbigeven squarebigeven error message spec seem bit cryptic library like expound used transform spec error data humanreadable text spec used validation also used data generation generative testing gensample sgen bigeven clojure good scripting language almost software project need write shell script automate task java nt natural fit scripting language since quite verbose compared popular choice like bash python requires compilation step startup time jvm another hurdle take recent year several solution come get clojure scripting environment good startup time planck based clojurescript run javascriptcode joker clojure interpreter implemented go babashka clojure interpreter written clojure compiled graalvm nativeimage babashka script print canonical path directory current directory may notice interop javaiofile class one many class packaged babashka usrbinenv bb require clojurejavaio io defn canonicaldirs path iofile path listfiles filter isdirectory map getcanonicalpath doseq dir canonicaldirs println dir script take execute michiel macbook pro clojure stable like java clojure strong focus api stability program written clojure still likely work clojure clojure community large adopts philosophy rich hickey apis grow time accretion adding feature relaxation requiring le bug fixing instead making breaking change watch speculation keynote want learn transcript epilogue java programming language year old year many alternative java come go one appeared since cambrian explosion language previous decade reached maturity groovy scala also clojure article listed number feature positively separate clojure rest convinced best way learn clojure actually use
16,Lobsters,clojure,Clojure programming,"Online Clojure meetup, June 17th",https://www.meetup.com/Helsinki-Clojure-Meetup/events/271100774/,online clojure meetup june,http http http berlincodeofconductorg,yrjö karikoskinen janitor story clojure devops swiss army knife evolutionhttps q heimo laukkanen arttu kaipiainen developing yet another webchat product medium company clojure clojurescripthttps q closinghelsinki clojure meetup adheres berlin code conduct http berlincodeofconductorgthe event run englishthe meeting conducted using zoom videoconferencing software stream prerecorded talk starting talk presenter available question live commentswelcome
17,Lobsters,clojure,Clojure programming,A History of Clojure,https://clojure.org/about/history,history clojure,history hopliv accepted,history time hopliv excited honored paper clojure accepted want thank guy steele richard gabriel cochairs hopl iv well reviewer shepherd support guidance clojure product traditional research may evident writing paper setting different challenging exercise hope paper provides insight clojure way process people behind creation development
18,Lobsters,clojure,Clojure programming,Simple Ray Casting with ClojureScript,https://andreyorst.gitlab.io/posts/2020-06-04-simple-ray-casting-with-clojurescript/,simple ray casting clojurescript,sicp ray casting basic project structure shadowcljs leiningen creating camera skip never change cast destroyed page moving camera associative destructuring difference cameracljs drawing creating wall example picture procedure multiarity function casting ray thread last macro making view scene fisheye compensation one handling input focus coloring wall labyrinth game learned clojure brave true peg thing game example,ray casting quite old technique heavily used early day game development lot game create illusion space known example perhaps first widely successful game used technique wolfenstein made id software lot game kind platform used ray casting example remember playing labyrinth game siemens around probably reason use ray casting rendering pseudo environment today since technique limited modern hardware heavily optimized working triangle allows u create complex geometry impossible model ray casting think ray casting kinda cool idea simple concept definitively smart move ninety game development additionally ray casting lot use case simple rendering engine also raycasting seems real word going refer technique like convenient engine referred raycaster project chosen clojurescript want get clojure well although experience lisp rich main usage right writing function emacs lisp rather basic also going sicp gnu guile racket though exercise book sometimes brutal real programming experience real goal post rather implement basic raycaster learn clojure thought game kidding make simple maze game playable page first let understand raycasting going basic example ray casting basic general idea behind technique imitate environment based information done casting ray point camera stand measuring length ray hit line segment represent wall plane prepared picture illustrate idea look top view scene would convert first person pseudo view answer might expect ray camera shoot certain amount ray front see ray intersection point red green wall let shoot ray find intersection wall cut ray calculated length information need make plane pseudo scene going left right length roughly inf pixel order make scene length first create empty scene let make pixel divide scene width amount ray compute width ray fill scene rectangle width give u roughly pixel wide rectangle look like yet notice total rectangle presented due fact one ray infinity length since id intersect anything draw anything make look need change height rectangle accordingly length ray general rule shorter ray bigger height look like scene wall exactly look like wall like set rectangle fix increasing resolution casting ray also let add background remove rectangle outline also change field view keeping amount ray changing angle convincing still smooth could think ray resolution would cast ray one ray pixel image width would get something like advanced raycasting engine produce various perspective correction rectangle making thing appear different height often used imitate camera shake walking texture mapped wall floor basic lightning achieved changing texture brightness depending distance even advanced engine allow changing vertical angle camera imitate looking implement pretty basic untextured raycasting extending interesting task fell like canvas maybe later webgl project structure using shadowcljs manage project found one straightforward simple setup leiningen create cljs project via lein type command line using linux detail project setup may vary different operating system lein new shadowcljs raycasting result create following file structure u raycasting packagejson public cs stylecss indexhtml readmemd shadowcljsedn src raycasting corecljs let look shadowcljsedn shadowcljs configuration sourcepaths src dependency binaryagedevtools reagent set nrepl port connection repl nrepl port build app target browser outputdir publicjscompiled assetpath jscompiled module main entry raycastingcore devtools livereloading code call function beforeload raycastingcorestop livereloading finish call function afterload raycastingcorestart serve public directory http port httproot public httpport preloads devtoolspreload probably need change much removed reagent dependency need shadowcljsedn look like sourcepaths src dependency binaryagedevtools nrepl port build app target browser outputdir publicjscompiled assetpath jscompiled compileroptions optimization advanced module main entry raycastingcore devtools httproot public httpport preloads devtoolspreload also added compileroptions optimization advanced produce smaller j file removed beforeload afterload function think need script initialization page load sufficient enough one last thing need test page see result code let create publicindexhtml file add canvas element go project setup ready begin working ray casting creating camera creating camera since going cast ray camera need camera first place camera represented single point plane x coordinate degree parameter let create file srcraycastingcameracljs define camera using atom could later update n raycastingcamera def camera atom x degree camera hash map three keyvalue pair parameter later access parameter calling key map like raycastingcamera degree camera quite handy update map assoc procedure raycastingcamera assoc camera degree x degree use mergewith procedure change value currently stored map using procedure case raycastingcamera mergewith camera degree x degree notice used assoc change degree used mergewith add degree current degree still got result expected camera value really change instead producing new value based old one since old value never changed still degree understand work need understand considered value skip explanation want since mostly nothing raycasting still may explain certain thing see later code clojure mostly work value variable presented language make clear let talk considered value example rust value assign variable like created mutable variable put later mutate hold another value key mutate magically transforming changing content like box contains value really anything always value produced new value based old one put value never change variable hold value change holding example something value rust look vector collection let mut b vec dynamic array hold three element actually change array using different method provides like push bpush collection hold four element push whenever refer b hold four element declared b mut mutating b collection b hold value mut keyword specifies mutate collection even drop mut keyword example eg let let b vec would able mutate still would turn value although treat value underlying semantics collection changed semi realworld example give apple ask give back half slice apple give back one half apple value literally changed slicing original apple longer available u hold half apple hold another half happens modify vector collection give apple made material cast destroyed ask give half slice anything take precise measure apple cast new piece material give back original apple apple slice throw apple garbage really anything essentially happens math number change take measure produce subtraction make apple value clojure work type data clojure collection immutable major aspect clojure collection persistence apple described really persistent made new slice nothing really tell past state whole apple apple order make thing persistent must provide additional information apple like serial number example cast new slice create new serial number contains information old serial number way look piece determine apple used reference whenever create new copy encode previous serial number current serial number point able trace back original state apple argue done ordinary apple indestructible one difference ordinary apple changed imagine made new apple based added serial number encodes derived original apple someone bit piece original apple holder copy apple try refer original one find expected maybe expected since apple could bitten restored original form apple made way tell preserve correct history even though enforce mutation restriction rust make vector value kinda clojure collection instead using identifier clojure us path copying sharing structure state newer state refers point old state many different way maintain persistence nicely described wikipedia page simple example persistent collection refer single linked list grows front let start list three item represented box hold value pointer next value refers refers refers nothing indicates end list add another element front produce new list see created box hold told point box hold rest thing old list marked green box copied anything old list change new node added front old list know nothing stored original list somewhere added original list changed furthermore check identity new list without first element original list user identical false user def user identical rest conj true first identical test give u false two different object even though value second identical test give u true said adding new value list removing get back original list collection clojure work way promise fast change low memory cost although collection fast mutable nonpersistence collection much reliable especially come concurrent programming reliability much important speed time raycasting really change camera position collection changed using hash map tho hold camera coordinate angle moving camera created camera used atom procedure produce reference type later atomically swapped hold another value swapping mechanism concurrently safe order update map need call swap procedure pas atom procedure update value raycastingcamera swap camera fn c assoc c degree x degree dereference camera actually see updated value raycastingcamera camera x degree using swap anonymous procedure kinda tedious instead let create set procedure use move camera around def radian mathpi defn movepoint x degree amount let angle degree radian x mthreedecimal mathsin angle amount mthreedecimal mathcos angle amount defn moveforward move camera forward given amount respecting degree camera moveforward camera camera amount let x x degree degree camera x movepoint x degree amount assoc camera x x procedure move camera forward relatively camera pointed compute later convert degree radian multiplication movepoint procedure later used several place program good separate procedure moveforward used exclusively camera movement inside weird construction called associative destructuring essentially bind x degree within let block value contained camera let try move camera around raycastingcore moveforward assoc camera degree x degree raycastingcore moveforward assoc camera degree x degree uh oh moving forward degree fine turned degree got coordinate value close really need precision problem small value javascript let write macro truncate three decimal place would enough need defmacro threedecimal truncate double three decimal place num int num defn moveforward move camera forward given amount respecting degree camera moveforward camera camera amount let rad degree camera mathpi mergewith camera x threedecimal mathsin rad amount threedecimal mathcos rad amount work though problem define macro file declared procedure difference clojure clojurescript create new file srcraycastingmacroscljc use requiremacros namespace definition cameracljs n raycastingcamera requiremacros raycastingmacros update moveforward refer macro defn moveforward move camera forward given amount respecting degree camera moveforward camera camera amount let rad degree camera mathpi mergewith camera x mthreedecimal mathsin rad amount mthreedecimal mathcos rad amount let try raycastingcore moveforward assoc camera degree x degree raycastingcore moveforward assoc camera degree x degree nice thing rotate camera defn rotate rotate camera degree camera rotate camera camera degree assoc camera degree mod degree camera degree call raycastingcore rotate camera x degree rotate procedure ensures degree stay inside degree specify turn degree wrap around two main procedure later use drawing draw camera canvas let add indexhtml doctype html html lang enus head meta charset script src jscompiledmainjs script head body canvas id raycaster width height canvas script windowonload function raycastingcoreinit script body html added canvas gave id later able refer canvas via id let create two var hold canvas object context n raycastingcore require raycastingcamera cam defonce canvas nil defonce ctx nil defn export init whenlet canvas jsdocument getelementbyid raycaster set canvas canvas canvas getcontext set ctx canvas getcontext use defonce save file shadowcljs hot reloads code redefine canvas ctx nil init procedure run onload event set canvas ctx let create drawcamera procedure take current camera state draw canvas defn drawline drawline color set ctx strokestyle color doto ctx beginpath moveto lineto stroke defn drawcamera camera let x po x camera camera pointer cammovepoint po degree camera width drawline po pointer set ctx fillstyle ctx fillrect x width width width width write repl raycastingcore drawcamera camcamera nil see camera let add wall look creating wall need mention many raycasting engine define stage term square grid useful check intersection lot faster since need perform check along ray fixed point space quite fast want arbitrary placed wall raycaster algorithm optimal able handle complex wall placement let create new file srcraycastingstagecljs file define stage stage vector line segment three component beginning coordinate endpoint color let define stage example picture n raycastingstage def examplestage begin creating vector vector hold line stage us define another vector hold beginning point ending point wall color lastly specify another line process continue bigger stage require lot wall performance hit aiming best efficiency implement wall drawing drawline procedure already used drawcamera procedure let create drawstage procedure walk vector wall draw canvas defn drawstage stage doseq line stage apply drawline line doseq great way iterate collection producing side effect drawing screen let move camera position rotate placed example call procedure see stage raycastingcore swap camcamera assoc x degree x degree raycastingcore drawcamera camcamera nil raycastingcore drawstage stageexamplestage nil notice awkward setting position camera swap camcamera assoc x degree shorthand creating anonymous procedure procedure call assoc camcamera elaborate way write code would fn camera assoc camera could simplify using reset reset camcamera x degree much simpler still error prone remember key map issue three keyvalue pair map huge map better create kind initialization procedure let create one raycastingcamera namespace defn setposition set position camera certain x dergree camera setposition camera camera x setposition camera x camera x degree assoc camera x x degree mod degree called multiarity function using never explained clojure clojurescript possible define procedure overloading based amount given argument example create three possible way call procedure pas camera parameter reset position coordinate set degree angle specify coordinate care angle reset provide needed parameter set accordingly assoc beauty multiarity procedure call another amount argument case one real body work others calling needed parameter procedure quickly set desired position camera raycastingcore swap camcamera camsetposition reset x degree raycastingcore swap camcamera camsetposition set coordinate x degree raycastingcore swap camcamera camsetposition fully specify position x degree use later initialize stage game casting ray camera wall finally cast ray although casting ray really long line segment algorithm check intersection line segment stage wall ray first need linear algebra particular need check two line segment intersect done three procedure first one check point lie segment defn onsegment check point ax ay lie segment defined two point b c point defined vector x ax ay bx cx cy ax max bx cx ax min bx cx ay max cy ay min cy procedure accepts point line segment defined two point check whenever point lie line segment need procedure check intersection need ensure staying inside line segment next bit orientation procedure defn orientation ax ay bx cx cy let orientation ay cx bx bx ax cy cond orientation cw orientation cc else colinear procedure check relationship point point b c relationship cw clockwise cc counter clockwise colinear check intersection defn intersect check two line segment intersect line segment defined vector two point point vector two coordinate x let orientation orientation orientation orientation colinear onsegment colinear onsegment colinear onsegment colinear onsegment find point intersection need calculate two formula let write intersection procedure defn intersection ray wall let x x added ray wall make clear point related order really matter since computing point think give slight idea procedure expects final piece need procedure find intersection ray return form usable u later created procedure take stage two point ray defn findintersections stage origin end ray stage map fn wall intersect ray wall let new intersection ray wall distance origin new new end using thread last macro essentially take result expression put last position next expression map anonymous procedure take wall stage check intersects ray calculate new intersection point return vector distance ray origin intersection point new point map finish produce kind list length x convert hash map length key set coordinate value distance procedure defined follows defn distance mthreedecimal mathsqrt mathpow mathpow finally cast ray first let cast set ray draw without truncation intersection point defn castrays camera let raycount step fov raycount raystart x camera camera loop n dec raycount degree degree camrotate camera fov n let rayend cammovepoint raystart degree drawline raystart rayend recur dec n degree step call procedure drawing ray camera stage like raycastingcore drawstage stagesexamplestage nil raycastingcore castrays camcamera nil raycastingcore drawcamera camcamera nil see result let change procedure find ray end drawing defn castrays camera stage let step fov raycount raystart x camera camera loop n dec raycount degree degree camrotate camera fov n let rayend cammovepoint raystart degree intersection findintersections stage raystart rayend shortestray apply min key intersection rayend intersection shortestray drawline raystart rayend recur dec n degree step first compute map intersection find shortest intersection length map applying min procedure list key map lastly get closest endpoint given ray way find intersection given ray wall draw shortest one like illustrate bit better let create simple animation making camera rotate use castrays procedure make pseudo image making view scene need modify castrays procedure would return list ray instead drawing defn anglebetween let diff mathabs min diff mathabs diff defn castrays camera stage let step fov raycount raystart x camera camera centralray raystart cammovepoint raystart degree camera loop n dec raycount degree degree camrotate camera fov ray n let rayend cammovepoint raystart degree intersection findintersections stage raystart rayend shortestray apply min key intersection rayend intersection shortestray rayangle anglebetween raystart rayend centralray recur dec n degree step conj ray rayend shortestray rayangle n ray defn drawrays camera ray let po x camera camera doseq ray ray drawline po ray first defined anglebetween procedure take two line segment computes angle radian added one extra computation cast ray compute centralray direction camera looking compute angle current ray casting central ray conjing vector endpoint shortest length angle ray number list ray finally return list ray caller drawrays later use ray afterwards draw one ray ray whenever call procedure get useful information later need produce image first let create another procedure render element screen sequence defn render let height canvas height width canvas width camera camcamera ray castrays camera stage ctx clearrect width height drawrays ray drawcamera camera drawstage stage jswindow requestanimationframe render skeleton fully realized procedure note request another frame drawn canvas like game loop though quite use game loop though create set binding frame dereference camcamera get position angle cast ray camera stage later clear canvas call drawrays drawcamera drawstage calling procedure initiate animation sequence add swap camcamera camrotate point animation rotating camera let create view defn ray let raywidth canvas width raycount height canvas height canvaswidth canvas width set ctx fillstyle ctx fillrect canvaswidth canvaswidth height set ctx fillstyle ctx fillrect canvaswidth height canvaswidth height loop ray ray empty ray let distance raydegree n first ray wallheight height distance wallheight wallheight wallheight wallcolor wallheight set ctx fillstyle str rgb wallcolor wallcolor wallcolor ctx fillrect canvaswidth n raywidth height wallheight raywidth extra pixel border wallheight recur rest ray procedure first fill background loop ray calculate wall height simply subtracting canvas height distance wall since canvas pixel high use value color well really pretty solution fill rectangle height width offset half canvas width plus number ray time width calling procedure render procedure give u view sure give u desired view something right look wall see get kind fish eye effect see full form look directly wall good reason fix although requires bit additional calculation fisheye compensation reason effect method using calculate wall height currently view would curve screen display nonflat screen opposite curve image would look natural however screen flat need compensate order need compute distance taking account amount degree camera direction ray currently casting first let declare anglebetween procedure return angle two line segment one direction camera facing one ray currently casting defn anglebetween let diff mathabs min diff mathabs diff use castrays procedure defn castrays camera stage let step fov raycount raystart x camera camera centralray raystart cammovepoint raystart degree camera loop n dec raycount degree degree camrotate camera fov ray n let rayend cammovepoint raystart degree intersection findintersections stage raystart rayend shortestray apply min key intersection rayend intersection shortestray rayangle compensatefisheye anglebetween raystart rayend centralray recur dec n degree step conj ray rayend shortestray rayangle n ray store calculated angle add ray conj ray collection vector already quite big would better use associative collection instead let change conj ray end rayend length shortestray angle rayangle n n castrays return list hash map need update procedure expected list vector omit step much different previously described post already way longer thought using hash map prove usable need incorporate information ray color use angle procedure change distance computation use mathcos procedure compute corrected distance distance distance mthreedecimal mathcos raydegree give u result look correct face wall degree angle aligned wall get right wall curved reason note completely honest point everything without using existing raycasting tutorial applied seemingly correct fisheye compensation gone away partially got stuck order find correct way compensate fisheye effect read one reason formula work altered seems missing projection plane let create one defn projectiondistance width mthreedecimal raycount mathatan fov camradian better compute since change ray count recompute distance add computation wallheight computation process defn ray let raywidth canvas width raycount height canvas height canvaswidth canvas width projectiondistance projectiondistance canvaswidth set ctx fillstyle ctx fillrect canvaswidth canvaswidth height set ctx fillstyle ctx fillrect canvaswidth height canvaswidth height loop ray sort fn length length ray whenlet ray first ray let distance length raydegree angle n n ray anglestep fov raycount distance compensatefisheye distance mthreedecimal mathcos raydegree distance wallheight height raycount distance projectiondistance fov wallheight wallheight height height wallheight wallcolor wallheight set ctx fillstyle str rgb wallcolor wallcolor wallcolor ctx fillrect canvaswidth n raywidth height wallheight raywidth extra pixel border wallheight recur rest ray look much better example although wall appear tried make constant play nice make wall occupy whole height near wall keep way sure misunderstanding algorithm work ok handling input focus camera working make move pressing arrow key already needed procedure handling camera position rotation thing really need input handler way focus canvas pressing arrow would scroll page library handling keyboard input purist implement without dependency need two procedure check key pressed released let create raycastinginputcljs n raycastinginput defonce keystates atom defonce focus false start defining another atom key state hold map key state like false true mean currently key pressed another one focus use determine handle input let add three procedure defn validkey key key escape key shift key arrowleft key arrowup key arrowright key arrowdown defn onkeypress event focus let event event event jswindow event key event key validkey key event preventdefault swap keystates assoc key true defn onkeyrelease event focus let event event event jswindow event key event key validkey key swap keystates assoc key false event preventdefault get key string check one key need focused swap key state either true false keystates atom always hold recent state need assign procedure event set jswindow onkeyup onkeyrelease set jswindow onkeydown onkeypress also procedure handle focus defn onclick event set focus true defn releasefocus set focus false set initialization code defn export init set canvas jsdocument getelementbyid raycaster canvas canvas addeventlistener mousedown inputonclick swap camcamera camsetposition canvas getcontext set ctx canvas getcontext render final step would poll key frame render procedure create another procedure raycastingcore time defn movecamera stage keystates let x x camera camcamera keystates escape inputreleasefocus reset inputkeystates keystates arrowright keystates shift let x x camstrafe camera detectcollision stage x x swap camcamera camstrafe swap camcamera camrotate keystates arrowleft keystates shift let x x camstrafe camera detectcollision stage x x swap camcamera camstrafe swap camcamera camrotate keystates arrowup let x x cammoveforward camera detectcollision stage x x swap camcamera cammoveforward keystates arrowdown let x x cammoveforward camera detectcollision stage x x swap camcamera cammoveforward call procedure frame early possible notice calling another procedure detectcollision much like intersection finding stuff calculates end position camera check path intersects wall optimal work good last thing want add way control amount ray field view well fisheye compensation toggle need input tag div input type range id raycountslider min max step input label raycountslider ray count label output name raycountvalue id raycountoutput output div div input type range id fovslider min max step input label fovslider field view label output name fovslidervalue id fovslideroutput output div div input type checkbox id fisheyecompensation input label fisheyecompensation fisheye compensation label br div need way control let add procedure def maxfov def maxcompensatedfov defn updateraycount event let value event target value set raycount jsparseint value whenlet output jsdocument getelementbyid raycountoutput set output innerhtml value defn updatefov event let value event target value set fov jsparseint value whenlet output jsdocument getelementbyid fovslideroutput set output innerhtml value defn updatefisheyecompensation event let value event target checked set compensatefisheye value whenlet fovslider jsdocument getelementbyid fovslider set fovslider max value maxcompensatedfov maxfov value fov maxcompensatedfov set fov maxcompensatedfov set fovslider value maxcompensatedfov whenlet fovoutput jsdocument getelementbyid fovslideroutput set fovoutput innerhtml fov defn initinputs whenlet raycountslider jsdocument getelementbyid raycountslider set raycountslider value raycount raycountslider addeventlistener input updateraycount whenlet raycountoutput jsdocument getelementbyid raycountoutput set raycountoutput innerhtml raycount whenlet fovslider jsdocument getelementbyid fovslider fovslider addeventlistener input updatefov set fovslider max compensatefisheye maxcompensatedfov maxfov set fovslider value fov whenlet raycountoutput jsdocument getelementbyid fovslideroutput set raycountoutput innerhtml fov whenlet compensate jsdocument getelementbyid fisheyecompensation compensate addeventlistener click updatefisheyecompensation set compensate value compensatefisheye short event handler called interacting input setting initial value well handler initinput procedure coloring wall creating gray wall fine boring could notice drawing line color wall color information let update findintersections procedure include color information use color wall defn findintersections stage origin end ray stage map fn color wall intersect ray wall let new intersection ray wall distance origin new end new color color color eeeeee end end color return map length key another map hold endpoint wall color value need update castrays procedure use information defn castrays camera stage let step fov raycount raystart x camera camera centralray raystart cammovepoint raystart degree camera loop n dec raycount degree degree camrotate camera fov ray n let rayend cammovepoint raystart degree intersection findintersections stage raystart rayend shortestray apply min key intersection rayend end color color intersection shortestray rayangle compensatefisheye anglebetween raystart rayend centralray recur dec n degree step conj ray end rayend length shortestray angle rayangle n n color color ray destructuring map use value conj ray use color procedure finally get result similar showed beginning would nice keep effect distant wall appear darker parse color dim factor defn dim color amount let dimfactor mathpow inc amount color int color dimfactor color color defn dimcolor color distance let red jsparseint str sub color green jsparseint str sub color blue jsparseint str sub color str rgb dim red distance dim green distance dim blue distance two procedure dim color encoded six digit hex color ffffff use distance dim factor computation make look nice use procedure defn ray let raywidth canvas width raycount height canvas height canvaswidth canvas width projectiondistance projectiondistance canvaswidth gradient ctx createlineargradient height doto gradient addcolorstop addcolorstop addcolorstop set ctx fillstyle gradient ctx fillrect canvaswidth canvaswidth height loop ray sort fn length length ray whenlet ray first ray let distance length raydegree angle n n color color ray anglestep fov raycount distance compensatefisheye distance mthreedecimal mathcos raydegree distance wallheight height raycount distance projectiondistance fov wallheight wallheight height height wallheight color dimcolor color distance set ctx fillstyle color ctx fillrect canvaswidth n raywidth height wallheight raywidth extra pixel border wallheight recur rest ray also added bit nice gradient background color final version procedure labyrinth game create small labyrinth game need way determine goal reached first need stage play current one really good one came goal reach colored corridor check succeeded simply check camera inside square check use raycasting facility algorithm pretty easy cast ray point right count many wall given square intersect amount intersection odd inside see work u course special case like point lie either rectangle side intersect wall detect collision fine code defn insiderectangle camera ax ay bx cx cy dx dy let wall ax ay bx bx cx cy cx cy dx dy dx dy ax ay x x camera x x cammoveforward x x degree wall map fn wall intersect x x wall reduce odd receive four point define goal move camera degree right amount map intersect procedure across wall returning either depending collision detection reduce result finally check result odd though need way extract goal stage define constant want make stage code even complex going change stage reached goal teleport camera back starting point defn render movecamera stage inputkeystates insiderectangle camcamera stagegoal swap camcamera camsetposition let height canvas height width canvas width camera camcamera ray castrays camera stage ctx clearrect width height drawrays camera ray drawcamera camera drawstage stage ray jswindow requestanimationframe render combining stuff give u small game ray count field view fisheye compensation click canvas use left right move also strafe side holding shift pressing esc return focus page could scroll arrow key usual learned project extremely fun clojurescript clojure quite awesome language although difference learning clojure highly recommend clojure brave true book although finished yet borrowed lot idea like using little unicode circle mark stuff explanation book peg thing game example got thinking trying something bit complex real time clojure sure draw graphic java stuff chosen clojurescript canvas easy reach implementing think really need class object like point line etc long passing meaningful context really post expect code really hard read point time certainly map provide need class object generic object cleaned source code project found interested looking closely hope enjoyed read got interested clojure lisp particular lisp hacker already
19,Lobsters,clojure,Clojure programming,REPL Driven Design,http://blog.cleancoder.com/uncle-bob/2020/05/27/ReplDrivenDesign.html,repl driven design,repository,follow facebook know publishing daily coronavirus statistic generate statistic using daily update john hopkins github repository first hand copied data spreadsheet became tedious quite rapidly late march wrote little clojure program extract process data every morning pull repo run little program read file math print result course used tdd write little program last several week made quite small modification program grown substantially making adaptation chose use different discipline repl driven design repl driven design quite popular clojure circle also quite seductive idea try experiment repl make sure got right idea write function code using idea finally test function invoking repl turn satisfying way work cycle time time code experiment test repl nearly small tdd breed lot confidence solution also seems save time needed mock create fake data least case could use real production data repl test overall felt like moving faster would tdd late april wanted something little complicated usual required design change basic structure suddenly found full fear way ensure design change leave system broken way made change examine every output make sure none broken postponed change could muster courage set aside dedicated time would require change painful clojure easy language work verfication trivial led deploy program small bug bug caught day later bug forced go back correct data graph generated need design change mocking creating fake data function read repo file directly way pas fake data design change needed make precisely design change needed mocking fake data stuck tdd discipline would automatically made design change would faced fear delay error ironic design change tdd would forced upon design change eventually needed decoupling tdd force upon u order pas isolated input gather isolated output almost always design fascilitates flexibility promotes change learned lesson repl driven development feel easier faster tdd next time back tdd
20,Lobsters,clojure,Clojure programming,"A simple, easy to use library for React development in ClojureScript",https://github.com/Lokeh/helix,simple easy use library react development clojurescript,helix installation shadowcljs npm polyfills handled differently shadowcljs reactnative react native leincljsbuild figwheelmain raw cljs cljsjs documentation license,helix clojurescript optimized modern react development n myappcore require helixcore refer defnc helixhooks hook helixdom reactdom rdom define component using defnc macro defnc greeting component greets user key name use helixdom create dom element ddiv hello dstrong name defnc app let state setstate hooksusestate name helix user ddiv welcome create element component greeting name name state dinput value name state onchange setstate assoc name target value start app favorite react renderer rdomrender app jsdocumentgetelementbyid app installation install latest version clojars project version react reactrefresh installed automatically install corresponding version favorite renderer eg reactdom shadowcljs npm development want emit code polyfills handled differently passing dev compiler configuration shadowcljsedn build app dev compileroptions outputfeatureset release build able emit way back shadowcljs reactnative see react native leincljsbuild figwheelmain raw cljs use cljsjs package react using webpack ensuring provided name react documentation view formatted doc resource license copyright acton distributed epl
21,Lobsters,clojure,Clojure programming,Creating a SpaceX Crew Dragon simulator autopilot in Clojure,https://medium.com/@thedanpetrov/creating-a-spacex-crew-dragon-simulator-autopilot-in-clojure-1ac095d9209b,creating spacex crew dragon simulator autopilot clojure,creating spacex crew dragon simulator autopilot clojure spacex crew dragon webgl docking simulator degree freedom dof aligned approach rate clojure functional programming control webdriver etaoin key binding telemetry driver main thread velocity vector component rotation simultaneously sequentially locking problem functional programming http githubcomdanirukunspacexissdockingsimautopilot,creating spacex crew dragon simulator autopilot clojurespacex crew dragon nasain preparation spacex crew dragon first crewed mission late may spacex released pretty cool little webgl docking simulator featuring dragon spacecraft getting docking done successfully time realised perfect opportunity write docking autopilot one even approach problem like orbital spacecraft bit different would consider normal vehicle like car airplane space degree freedom dof meaning go updown leftright roll clockwiseanticlockwise etcthat great actually dock context simulator successful docking mean perfectly aligned docking port issour final approach rate contact certain valuewe want crash multimillion dollar spaceship anything along wayif break problem simply consists aligning dragon aligned i docking port flying docking port slowlyfor language using clojure lisplike functional programming language run jvm highly extensible simple lot library powerful concurrency abstraction absolutely need laterthe first step obviously figure control simulator best way drive browser day using webdriver api client library send command side create control interface code entire project using etaoin fantastic pure clojure implementation webdriver protocolspacex i simulator gui launchwhile simulator clickable onscreen control also key binding take advantage next automated spacecraft hopeless telemetry short know looking looking well space luckily good engineer spacex made easily locatable element information hud driver get info fromafter writing bunch locator parser nice way getting data need hud lie first problem hud update information time moving spacecraft need continuously fetch new telemetry make available future control system without blocking main thread loop clojure concurrency really shine simply create recursive poll function use future put separate thread move main thread forwardwe also need somehow keep telemetry data state also threadsafe luckily atom come rescue use swap simply update telemetry new data might noticed also calculation using x z coordinate ship unfortunately hud give u velocity vector component calculate using distance time differentialthe next step writing alignment function rotation control axis roll pitch yaw boil simple logic however next problem alignment need keep going time axis simultaneously mean try sequentially encounter locking problem roll alignment function might blocking yaw getting aligned killing rotation etcthis future come rescue concurrent future control axis println rotation alignment enabled future dragonalignrollrot chr future dragonalignpitchrot chr future dragonalignyawrot chr rotation sorted next step write logic approachwe need align z ax well steadily move x axis already wrote velocity component calculation dereference telem telemetry atom whenever need tothe tricky part writing right logic rcs firing phase start pushing much one direction time becomes uncontrollable swaying motion burning lot fuel came approach implementing deadzone fire thruster wrong way much basically nearly spot use future translation alignmentwith everything tied together roughly thread look like control function use telemetry conclusion spaceship hard people spacex nasa obviously know much better however fun exercise think automatic docking system work real life well demonstrate functional programming concurrency really shinesyou go check code github http githubcomdanirukunspacexissdockingsimautopilotsmall demo video showing autopilot
22,Lobsters,clojure,Clojure programming,Array languages for Clojurians,http://www.appliedscience.studio/articles/array-programming-for-clojurists.html,array language clojurians,array language clojurians array language lisp programmer j apl q array function corematrix arraymaking tool integersequencecreating mailing list comment good use case transducer array reducer kenneth e iverson primitive try apl lisp machine keyboard personal view apl feeding omitting parameter q doc idiom puzzle complanglisp post parsing identifier,array language clojurians discussion clojure data science zulip led slobodan enlightening article array language lisp programmer journal british apl association quote alan perlis language affect way think programming worth knowing lisp clojure course qualifies one mindaltering substance arguably qualifies basis focus immutability article point arraybased language j predecessor apl programming language proprietary q equally mindexpanding see remains compelling array programming approach problem compare approach array function array language make simple easy work whole container way work scalar look j first array programming example oneliners result following line start adding scalar array operator work multiple array elementwise one operator pretty handy course replicate outofthebox clojure map partial map arithmetic function lack numberarray polymorphism use multimethods achieve precisely property defmulti j fn args cond number first args number sequential first args sequential else class first args defmethod j number n x map partial n x defmethod j sequential y x map x y nsunmap n j one function add scalar vector vector vector j j may need daytoday kind mathematical programming want clojurians situation often reach library like corematrix take similar approach arraymaking tool work fluently multidimensional array one need way create fluidly integersequencecreating operator creates prepopulated array arbitrary dimension people say lisp terse operator produce array given shape row column populates incrementing integer sequence function make simple implement defn idot n take n partition range idot also going need something turn sequence value array matrix desired shape j operator fairly slapdash clojure replication might conceive repl take partition cycle abcde look familiar similar end using clojure function implement defn shape n coll take n partition cycle coll shape vec abcde shape range one might legitimately say clojure version readable concise optimized performance way could array language fair point specialized language leeway focus performance optimization effort still found interesting one array language idl ran performance concern clojure w hen nested operation vector step idl might create possibly large temporary storage intermediate result really big datasets one would play trick make allocate large enough contigious block memory special declaration tell compilerevaluator calculating temporary discarded soon mailing list comment original article course drawback rich hickey encountered lazy sequence make lazy sequence bad merely unsuited one particular set requirement suggesting need different tool situation case gave rise transducer avoid creating intermediate cached value creating single compound transformation use one eager pas input see good use case transducer demonstrates power generalpurpose language able deal varying requirement without switching language particular feature array reducer creator apl cocreator j kenneth e iverson wrote formal education mathematics fundamental notion apl drawn largely mathematics suggests one twocharacter primitive found language find ancestry mathematical symbol confirm tracing back predecessor apl actual lowercase greek letter iota standing integer instance one would enter expression generate first integer apl keyboard layout meant program apl required specialized keyboard experience replicate browser try apl modern programmer bespoke piece input hardware programming language may seem bizarre clojurians remember lisp lineage trace back entire computer architecture lisp machine including series keyboard designed around programming language close relationship mathematical notation occurs ask aplderived language represent mathematical function like sum product sequence clear use array programming j achieves adverb cleverly designed power individual symbol operation adverb applies verb produce related verb thus verb iverson personal view apl j entire system modifying function create new one one elementwise arithmetic operator like replicated earlier transform arrayconsuming version combined lisper recognize power approach right away solve problem similarly generalizable solution higher order function let u reduce sequential collection way like reduce apply applying adverbed multidimensional array cause work columnwise next example remember return equivalent compute outofthebox clojure map variadic collection apply map shape visualize apply map idiom rotating sequence degree feeding sequence function could also use j defined giving u closer translation adverb let j solve something like factorial simply consider j expression find easiest read righttoleft create array element long incrementing integer starting increment compute product sequence robotically transliterate clojure piece piece range map partial reduce reduce j range personally would probably use reduce range omitting parameter another cool feature q caught eye ability omit argument function like xyz x z xyz honest snippet article confused deeply example little underspecified q doc topic help need take brief detour signed lambda function definitionandinvocation q x x x x clojure would write fn x x x x define anonymous function sum square double parameter x call argument q doc point function fewer argument may omit signature instead use default argument name x z allows u rewrite concisely unsigned lambda clojurians dub anonymous function x x x clear anonymous function syntax provides general version syntactic sugar instead providing implied argument z clojure provides n interesting note tradeoff two approach n longer allows greater variability xyz may readable likely conflict existing name tend stick avoid unless something obvious like compare idiom blazeski ported omittedarguments feature common lisp using macro clojure already anonymous function syntax baked macro reader literal would give u access anyway may useful remember come across syntactic feature another language clojure lesson clojure ahead curve though lisp macro endlessly extensible blazeski put seems always old story soon lisp integrates needed utility invests domainspecific language advantage language lost big ball mud like warlock able steal power still staying clojure avoided lisp language big ball mud reputation building fresh foundation syntactic extension clear consistent effective abstraction point stand superhero take new power touch puzzle programming world seems mostly moved arguing language effectiveness code golf course truly blessing make exception pedagogical ground problem undated complanglisp post extolling virtue predecessor k list element duplicate trying figure find duplicate element increase counter value instance element found list consists list two element first incremental counter second string sought example one two three one four two result one two three four array programming solution impressively concise quite readable v input value count flip count group v unique v repeat common lisp solution fine problem illformed one could solve asis v input value reduce fn acc x con list count x acc list groupby second v look little askance answer programmer especially clojurians work problem really solving sifting true problem stated requirement vital skill ignore crufty halfsolution implied problem statement solve true hidden task frequency one two three one four two delightful simplicity right data structure welldesigned standard library parsing identifier already explored benefit array language concision function change according input adverb opportunity opened thinking higher level container abstraction finish one translation exercise piece haskell code go parse tree haskell source code locates every reference identifier end widget put list remove duplicate every identifier represented list haskell extractwidgets data string extractwidgets nub map hsident listify iswidget iswidget hsident actionname widget issuffixof actionname true iswidget false q distinct raze x like widget lisp defun widget l unique keep f like x widget flatten l clojure defn widget tree distinct filter stringendswith widget flatten tree take test drive widget abcwidget foo abcwidget bar abcwidget defwidget baz abcwidget defwidget qrswidget tuvwidget qrswidget xyzwidget nice travel try food learn phrase visit monument show u strongly history mold culture differently life lived visit programming language community broaden horizon remind sometimes folk different tool different need sometimes need tool different set name dave liepmann may
23,Lobsters,clojure,Clojure programming,Building Raft in Clojure,https://phillippe.siclait.com/blog/raft-in-clojure,building raft clojure,building raft clojure distributed system immutable data structure referential transparency coreasync communicating sequential process csp faulttolerant state machine consensus total order leader election log replication safety extended raft paper leader election log replication extended version paper secret life data visualization github repository siclait,building raft may min readdiego ongaro john ousterhout created raft understandable algorithm achieving consensus distributed system post describe built implementation raft clojurelast year conversation blockchain startup friend suggested many blockchain project poorly designed creator studied distributed computing found interesting know enough distributed system understand deeper exposure field could led better system design knowing phd distributed system asked recommendation could learn suggested robert class mit distributed system declaring among introductory course subject best asked make best replied lab series programming assignment student incrementally build sharded faulttolerant keyvalue store addition lab class schedule note research paper video lecture available course website excited learn organized study group met weekly local starbucks review assigned research paper discus coded lab second lab tasked student building raft instructor wrote test suite go writing lab go would path least resistance choose path least resistance instead wrote lab clojurei taking class fun wanted use language made coding enjoyable much fun coding project clojure interactive repl gave responsive feedback loop testing code change writing function would send repl test input ensure worked expectedfor example wrote function called findfirstconflict identify index log proposed entry added log conflict defn findfirstconflict previndex log entry fn index let entryindex index previndex entryindex count entry previndex index nth entry entryindex term logterm log index index range inc count log calling function repl able verify function work raft findfirstconflict term term term term term term term term language immutable data structure made simple ensure referential transparency throughout code referential transparency coupled repl enabled easy debugging large chunk application logic presented detail raft algorithm structure code share example setup made debugging easyi also made heavy use concurrency library coreasync library realization tony communicating sequential process csp similar inspired implementation csp restricted communication thread passing immutable data structure coreasync channel choice freed think locking associated deadlock bugsthe repl immutable data structure coreasync helped write clean code cost using clojure mentioned courseprovided code written go choosing clojure added hour work translating test library code could start lab fun personal project thought worthwhile tradeoff decided use clojure able begin building lab describing built need describe problem raft solvesto begin imagine stateful server responds request update query state single server system faulttolerant failure single server cause entire system become unavailable think server instance state machine one solution faulttolerance problem replicate state machine across multiple server system survives failure one server creates another ensure set server maintains consensus state problem raft built solvei started coding three principle mind first built everything around core event loop responsible state update side effect event loop continually pull operation operation channel process sequentially via handler second made event handler referentially transparent handler take input current raft state operation return two value statedelta effect statedelta map representing state modification need made effect list side effect need executed side effect include pushing operation onto operation channel sending rpcs replying rpcs modifying timer returning side effect value instead executing handler made debugging easier third restricted communication rpc client main event loop channelsthese three central event loop pure function handler communication via best illustrated handle function function executed event loop iteration take argument operation opmap pulled operation channel given current raftstate operation executes appropriate handler via case expression applies statedelta finally executes effect side effect mutation limited transitionstate runeffects function note use convention function end bang may mutate state execute side effect code snippet removed number case case expression brevity defn handle raft key op opmap let key opsch persister state raft raftstate raftstate state statedelta effect case raftstate op candidate electiontimeout startelection raft candidate receivedvote handlevote raft vote opmap candidate appendentries state follower fn replaceop aput opsch opmap candidate requestvote follower requestvote leader requestvote handlerequestvote raft opmap additionaleffects transitionstate raft statedelta effect concat effect additionaleffects runeffects effect recur following three principle guaranteed every iteration event loop deterministic easy debug even though overall application nondeterministic ordering operation operation channel sole source nondeterminism basic principle place dig raft algorithmthe core system log purpose raft log maintain total order set operation order operation log represents list state transition taken state machine restore state state machine operation log applied successively state machine starting initial state raft guarantee consensus across state machine ensuring order committed entry raft instance logsraft separate consensus problem three component leader election log replication safety author claim decomposition important reason ease understanding post going touch first two component safety topic add restriction leader election log entry commitment necessary guaranteeing consistency information safety recommend reading section extended raft paperraft instance one three different state leader candidate follower leader election process selecting privileged leader server responsible replying client query replicating state raft instance single leader moment time raft solves problem determining order operation correct correct order order selected leaderthe system start instance follower follower election timer trigger election completion follower receives heartbeat leader receives request vote election timer reset without triggering election simplify timer management created timekeeper abstraction instance timekeeper instantiated configuration timer timer communicate main event loop operation channel timekeeper election callback aput opsch op electiontimeout timeoutfn minelectiontimeout randint electiontimeoutrange heartbeat callback aput opsch op sendheartbeat timeoutfn constantly timer timeout function timeoutfn instead static timeout value election timeouts randomized invocation help avoid case election timer continually complete timewhen follower trigger election becomes candidate request vote peer via requestvote rpc candidate receives vote majority peer transition leader leader periodically sends heartbeat message via appendentries rpc follower ensure continue recognize leaderin implementation two rpc endpoint simple responsible pushing operation onto operation channel reading reply reply channel main event loop responds rpc using reply channel provided operation map defrecord raft iraft appendentries args let replych achan aput opsch op appendentries payload args replych replych replych requestvote args let replych achan aput opsch op requestvote payload args replych replych replych system enforces consistency across raft instance log via log replication leader receives request client commit command log first add log broadcast command via heartbeat follower commitment important concept raft raft guarantee consistency across replica committed command follower successfully add command log reply rpc success true leader receives success notification majority follower leader commits command log reply client follower notified latest commit next heartbeatas developed raft application repl helpful tool evaluating handler function point development could construct raft state request map pas handler function ensure response expected example could test sending appendentries rpc request follower date leader guarantee follower change state statedelta nil effect returned reply rpc success false raft handleappendentries raft request nil function rafthandleappendentriesreplytoappendentries lot detail missing post system ensures consensus face failure hope present high level overview raft repl pure function channel help implementing complex concurrent system interested understanding raft algorithm depth recommend extended version paper secret life data visualizationif like lab clojure created github repository translated go code translation june also study group reddit siclait continue conversation
24,Lobsters,clojure,Clojure programming,King releases the Defold game engine under a permissive license,https://defold.com/2020/05/19/Defold-is-now-open-source/,king release defold game engine permissive license,learn defold open source page,mobile game company king today announced free use defold game engine sharing source code inviting collaborator partner part process king transferred defold software foundation defold foundation stockholm sweden may mobile game company king today announced defold game engine sharing source code inviting collaborator partner part process king transferred defold software foundation defold foundation defold foundation taken full ownership defold product service including website build server user forum social medium channel source code available github immensely proud able make defold source code available open contribution eager start journey free use source available game engine together great community game developer building game using defold would also wish thank king believing vision entrusting defold defold foundation say björn ritzl product owner defold foundation developer original development team leave king work full time defold behalf defold foundation foundation work closely developer community industry partner drive new development beyond defold foundation board headed sara cederberg king include industry profile elin eriksson woman tech sweden hugely impressed defold team look forward seeing many great gaming experience come life seen million player already playing king game run defold engine excited see community come together even support defold foundation say tjodolf sommestad chief development officer king defold foundation defold foundation owner free use developerfriendly source available game engine defold foundation work together industry partner provide free open software service game developer across globe foundation created may registered stockholm sweden defold defold free use source available game engine developerfriendly license used development crossplatform game defold used growing number developer create commercial hit well game game jam school teach game development defold known ease use praised technical documentation friendly community developer king king leading interactive entertainment company mobile world million monthly active user first quarter across web social mobile platform developed exclusive game enjoyed around world kingcom facebook mobile distribution platform apple app store google play store microsoft window app store amazon appstore king acquired activision blizzard nasdaq atvi february king game studio stockholm malmo london barcelona berlin along office malta san francisco sara cederberg chairperson defold foundation sara defoldse björn ritzl product owner defold foundation bjorn defoldse learn head defold open source page learn contribute support foundation
25,Lobsters,clojure,Clojure programming,Announcing Clojurists Together Summer of Bugs,https://www.clojuriststogether.org/news/announcing-summer-of-bugs/,announcing clojurists together summer bug,announcing summer bug lvh operational apply recent survey result,announcing summer bug lvh may ever wanted take day fix annoying bug finally ship feature clojurists together foundation want make happen clojurists together foundation operational flexibility fund open source work one recurring community request smaller grant people feel good work done ideal position entire quarter worth summer bug introducing funding important work take place scale day month application open anyone plausibly demonstrate ability proposed work previously funded project maintainer maintainer course still welcome apply expanding application process include contributor expert user calling summer bug miniprojects limited fixing issue important feature roll fine plenty project would really benefit someone spending day two tending issue tracker contributor effective perhaps existing feature living potential undocumented surprise u love support project later stage want explore funding experimental work clojure community trying change one variable time therefore expect minigrants mostly targeted sort core open source infrastructure funded past initial approach people request microgrant minigrant hoping allocate budget though somewhat dependent available fund committee vote submission rank based impact pick top n reach budget based overall impact clojure community continue gauge impact based information member survey well third party datasets annual state clojure survey please continue fill help guarantee quality decision making apply grant announcing result end may thinking project apply take look recent survey result kind project member interested funding
26,Lobsters,clojure,Clojure programming,"An Architecture for Community Contribution, Speed and Modularity",https://jponline.github.io/looset-landing/an-architecture/,architecture community contribution speed modularity,main page art unix programming wiki architect let option open clean architecture kickstarter campaign backend babashka lezer frontend reagent redux flux reframe treating ui finite state machine test given gherkin syntax puppeteer devcards storybook speed kickstarter looset main page video demo tool kickstarter campaign,tell opinion software architecture plan looset watch source file change show real time dependency diagram code block viewer independent filesystem check main page started work looset yet thought bit architecture believe building metaphor bad talking software prefer grow metaphor think software living organism need constant care make better decision lot rule around create software use design pattern write test first tdd model according domain first ddd behavior first bdd solid hexagonal onion architecture layer module etc value mentioned prefer understand principle reflect direction like art unix programming summary principle stated wiki influenced two idea first heard martin fowler opposing statement architect responsible making big important initial decision said something architect let option open second got reading clean architecture uncle bob point farther module business rule module work plugin ie framework database work plugins started think decision let open structure plugin maybe system maybe programming language see project becoming reality contribute kickstarter campaign asking need able work free open source software general goal writing software extensibility accretion feature become slow dangerous existent feature project grow big readability easy read understand maintainability flexibility testability decoupling way change module break system different place robust handle well unexpected error looset specific goal community contribution speed modularity backend working clojure time constant match personal development philosophy community philosophy understand people might personal preference use different stack work better specific domain reason decided write looset module independent script program called using bash instance write basic analyzer clojure using babashka let open language specific analyzer written script language could seen sort micro service architecture one could decide use python write analyzer c even integrate project lezer clojure data map part philosophy data need shared across different language even front end make sense write clojure edn extensible data notation thinking general adoption write data file json also inspired git work frontend people would agree making decision frontend different making decision backend still want maximize community contribution modularity still letting option open decided write looset view independent web component used basic html page instance write component using clojurescript reagent let open language framework support exporting web component one could decide use angular vuejs write new functionality already created web app scratch without state management system redux flux reframe know important would say important library idea main point app state global change firing event subscribe component change still investigating going use way available web component framework decision structure app state also need done like normalized possible splitting domain entity basically would write database ui model component state also computing little possible rendering phase treating ui finite state machine test like test driven development approach good test structuring dependency testable way tend write bdd style using given gherkin syntax mostly write unit test backend think unit test valuable frontend already used puppeteer write endtoend test clicking button taking screenshots etc looset use basically production like environment firing event checking result app state another strategy sometimes viewed test use way develop prototype devcards use visualize component multiple state developing tweaking app state storybook seems good alternative work web component speed project performance top priority expect work huge amount data different project main concern fast going interact big project generating large graph address problem web worker background process generating cache visualization kickstarter created campaign validate interest also able invest amount time project requires campaign asks one time contribution amount nothing changed end month reach goal looset main page video demo tool kickstarter campaign last update aug
27,Lobsters,clojure,Clojure programming,Cognitect Joins Nubank,https://cognitect.com/blog/2020/07/23/Cognitect-Joins-Nubank,cognitect join nubank,nubank next step long relationship clojure datomic simplicity scale bigger hammock vocal public supporter clojure datomic conference diversity value value rich stu alex come next,thrilled announce cognitect joining nubank family company next step long relationship open new opportunity clojure datomic worldwide simplicity scale nubank spectacular success story clojure datomic running missioncritical software scale start nubank grown clojure developer running million line clojure code microservices datomic server cognitect every step way helping nubank developer translate clojure idea business agility nubank largest fintech latin america million customer using online financial solution support nubank mission bringing banking course working together durham paulo become friend bigger hammock nubank vocal public supporter clojure datomic committed growth together expand team behind clojure datomic offer conference training resource every kind work improve diversity nubank cognitect across clojure community value value nubank understands unique value clojure datomic committed continuing without disruption rich remain helm clojure remains independent continue manage clojure technical direction stu alex rich stu continue datomic architect product lead respectively cognitect continue operate u c corporation datomic development product offering customer relationship continue grow cognitect continue offer professional service datomic customer transition general consulting development come next clojure datomic user resource behind software greater ever next datomic feature come bit sooner dedicated growing clojure community helping company adopt succeed clojure thanks justin rich stu
28,Lobsters,clojure,Clojure programming,Cursive: The IDE for beautiful Clojure code,https://cursive-ide.com/,cursive ide beautiful clojure code,available mailing list,available cursive available intellij plugin use community ultimate edition available future standalone clojurefocused ide commercial product free noncommercial licence opensource work personal hacking student work discus cursive keep date mailing list
29,Lobsters,clojure,Clojure programming,Datalevin is a port of Datascript in-memory Datalog database to Lightning Memory-Mapped Database,https://github.com/juji-io/datalevin,datalevin port datascript inmemory datalog database lightning memorymapped database,datalevin temporal feature datascript lightning memorymapped database lmdb cloudflare performs well edn usage api documentation status issue roadmap paula gearon asami difference datascript nikita prokopov value type edn nippy lmdb tool limitation alternative datascript asami crux datahike eva datalevin license license,datalevin simple fast durable datalog database everyone love datalog nt everyone use already datalevin simple durable datalog database rationale simple fast free datalog query engine running durable storage observation many developer prefer flavor datalog popularized flavor sql get use perhaps datalog declarative composable sql eg automatic implicit join seem killer feature enterprise grade software feature set may overkill use case one thing may confuse casual user temporal feature keep thing simple familiar datalevin store transaction history behaves way database data deleted gone datalevin started port datascript inmemory datalog database lightning memorymapped database lmdb retains library property datascript meant embedded application manage state data persistent disk datalevin application state survive application restarts data size larger memory datalevin relies robust acid transactional database feature lmdb designed concurrent read intensive workload lmdb used many project eg cloudflare global configuration distribution lmdb also performs well writing large value therefore fine store document datalevin datalevin us cover index writeahead log data written indexed standalone mode separate process thread indexing compaction database maintenance work compete application resource giving database value doctrine adopted alternative datalevin able leverage caching aggressively achieving significant query speed advantage independent datalog datalevin also used fast keyvalue store edn data number optimization put place instance us transaction pool reuse transaction preallocates readwrite buffer usage use datalog store require datalevincore define schema def schema aka dbcardinality dbcardinalitymany dbvaluetype optional unspecified attribute treated edn blob name dbvaluetype dbtypestring dbunique dbuniqueidentity create db connect def conn dcreateconn schema tmpdatalevintest transact data notice nation defined schema treated edn blob dtransact conn name frege dbid nation france aka foo fred name peirce dbid nation france name de morgan dbid nation english query data dq find nation alias e aka alias e nation nation conn fred france close conn dclose conn use key value store require datalevinlmdb l open key value db def db lopenlmdb tmplmdbtest define table dbi name def table testtable open table lopendbi db table transact data transaction put data multiple table ltransact db put table datalevin hello world put table saying long thanks fish source hitchhiker guide galaxy get value key lgetvalue db table datalevin hello world lgetvalue db table saying long thanks fish source hitchhiker guide galaxy delete data ltransact db del table gone lgetvalue db table nil close db lclose db refer api documentation detail status datascript lmdb mature stable library building top datalevin extensively tested propertybased testing running benchmark suite datascript look benchmarked query datalevin faster datascript considering comparing disk store memory store result may counterintuitive primary reason datalevin immutable database easy cache aggressively whereas may difficult immutable database eg see issue introduced caching version datalevin faster datascript single clause query due highly efficient read lmdb caching enabled datalevin faster across board addition soon move efficient query implementation datascript query engine efficient writes order magnitude slower expected datalevin writing disk datascript memory bulk write speed good writing datoms disk le second data also transacted whole le second transacting one datom datoms time much slower transaction syncs disk inherently slow lmdb copy write never overwrites data read large write amplification may also occur advice write data larger batch short datalevin quite capable small medium project right roadmap short term goal try reach quickly distributed mode raft based replication new query engine optimizer based paula gearon asami schema migration query parity datascript composite tuples persisted transaction function materialized view incremental maintenance welcome suggestion next please file issue difference datascript datascript developed nikita prokopov built totally scratch related mean although currently port datalevin differs datascript significant way difference data durability mentioned datalevin immutable database database value feature since history kept transaction id stored datoms transaction committed together batch rather saved withdatom one time respect dbvaluetype currently value type supported except bigint bigdec uri tuple value unspecified type treated edn blob deserialized nippy value leading index vae datoms dbtyperef type attribute attribute value leading index ave enabled datoms need specify dbindex cloud attribute stored index integer id thus attribute index access returned attribute creation order lexicographic order ie expect b come feature applicable inmemory db db immutable data structure db serialization db pretty print filtered db etc lmdb tool used work database file project would started without existence datascript continue submitting pull request datascript improvement applicable datascript limitation attribute name length limitation attribute name byte long due lmdb key size limit key compared bitwise range query work expected attribute dbvaluetype specified maximum individual value size practice value size determined lmdb ability find large enough continuous space disk datelevin ability preallocate offheap buffer jvm total data size datalevin database limit lmdb eg modern machine implement address space network interface may change currently support clojure jvm adding support clojurehosting runtime possible future since binding lmdb exist almost major language available platform alternative interested using dialect datalog pioneered current option need time travel rich feature backed author clojure use need inmemory store almost api datascript need inmemory graph database asami fast need feature bitemporal graph query may try crux nt mind experimental storage backend may try datahike also eva distributed store longer active development need simple fast durable store battle tested backend give datalevin try version license copyright juji inc licensed eclipse public license see license
30,Lobsters,clojure,Clojure programming,Building a static website with Babashka,https://www.mxmmz.nl/blog/building-a-website-with-babashka.html,building static website babashka,building website babashka enter babashka babashka graalvm design site hiccup genclj publish genclj publish bell whistle tool devclj genclj filewatcher pod conclusion matrix rain visualisation michiel borkent babashka,building website babashka experience creating blog post software offered hosting provider generating website markdown felt easier flexible maintainable create something simple like website want write blog post want write blog post nt want negotiate broken dependency look unclear outofdate nonexistent documentation spin container update container engine remember convention supposedly simple configuration file enter babashka essence babashka tiny clojure interpreter tuned shell scripting compiling native binary using graalvm infamous jvm startup time gone make possibility using clojure command line lot attractive lot clojure enthusiast suddenly idea struck could make website babashka dependency installing updating babashka easy babashka available platform design source code website found directory listing already tell lot development setup website site folder contains website page clojure file using hiccup format also contains plain cs file genclj babashka executable generates html file clojure file put html file together cs file publish folder publish genclj website existence second later start pushing everything publish folder hosting provider bell whistle folk need build website could even go spartan write html bit barebones like occasional helper function needed helper function located tool folder furthermore got tired refreshing browser updating blog post file editor decided create devclj babashka executable monitor folder run genclj script detects change open refreshed page come cost additional babashka dependency filewatcher pod worth conclusion although perfect yet like setup plain sight adapt wish possible even quite simple add generated code clojurescript project mine website instance look matrix rain visualisation like thank michiel borkent awesome babashka tool helping getting setup upandrunning building website clojure ever easier least decide go route well michiel would love hear
31,Lobsters,clojure,Clojure programming,Comparing compiler construction in Clojure and F#,https://www.youtube.com/watch?v=t8usj1fN9rs,comparing compiler construction clojure f,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature language language comparing compiler construction clojure f ramsey nasser youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature language language comparing compiler construction clojure f ramsey nasser youtube
32,Lobsters,clojure,Clojure programming,Serving Findka's recommendations via libpython-clj,https://findka.com/blog/libpython-clj/,serving findka recommendation via libpythonclj,previously background dataset algorithm surprise integration via libpythonclj libpythonclj view source biff startup handler biff transaction interlude performance python integration continued biff trigger,written previously simple baseline algorithm findka using generate content recommendation brother marshall data science since started helping parttime improving last night offtheshelf knn algorithm written python running ab test first time integrating clojure python thought give outline background dataset algorithm findka data set consists rating tuples user id item id rating rating thumbsdown thumbsup bookmark also keep track item skipped currently data nt used building model lot user mash skip button marshall used surprise python recommendation lib run bunch experiment existing rating data found knn baseline performed best word establishing best metric crucial proper testing surprise designed handle arbitrary range realvalued rating data binary thumb updown default rmse used surprise accurate purpose surprise also offer fraction concordant pair metric accurate data using built metric entire test set give best optimization purpose really care top n rating individual user way single user accurate prediction test set offset overall accuracy lot user rating test set prediction change item top rated anyway using accuracy top item user metric tested svd coclustering knn algorithm couple algorithm surpise knn baseline slightly better others one biggest advantage knn determine confidence along prediction rating looking number actual neighbor used prediction algorithm us neighbor many item many item predicted rating neighbor fair amount confidence prediction determine best prediction simply sort estimated rating primary key actual neighbor secondary key based test set knn baseline give good recommendation user time interestingly prediction accuracy actually algorithm correctly predicts top recommendation bad user dislike almost everything integration via libpythonclj since recommendation made online ie recommendation computed use app rather eg week like spotify discover weekly used libpythonclj integrate surprise clojure web app first piece python file expose informal interface three function train ratingscsvfilename surpriseknnbaseline top knnbaseline userid itemids list top recommended item taken itemids setrating knnbaseline userid itemid rating none view source file kept resourcespythonknnbaselinepy require clojure like get deployed rest app n findkaalgo require clojurejavaio io libpythoncljpython py libpythoncljrequire refer requirepython requirepython sys pypy syspath append getpath ioresource python requirepython knnbaseline reload knn thanks reload change made python code come effect whenever evaluate findkaalgo namespace call three function different part biff startup pull rating crux store csv pas knntrain n findkacore require biffsystem refer startbiff findkaalgo algo defn startfindka sys sys merge findkamodel atom startbiff findka algoupdateknnmodel n findkaalgo require clojurejavaio io cruxapi crux findkatridentcrux tcrux tridentutil u defn knnmodelinputs useritemratings let f iofile utmpdir knnratingscsv withopen w iowriter f doseq user item rating useritemratings write w str hash user hash item rating dislike n knn model knntrain getpath f defn updateknnmodel key findkabiffnode findkamodel sys swap model merge wrap cruxapiopenq tcruxlazyq cruxdb node find user item rating useritem rating rating rating skip useritem user user useritem item item knnmodelinputs sys also set cron job call updateknnmodel periodically though calling manually day via tunneled nrepl connection since manual task run daily anyway whenever client need recommendation submits sente event handler call findkaalgorecommend check user ab test assignment call knntop user b arm return biff transaction along data logging purpose n findkaalgo require cruxapi crux tridentutil u def hashstr comp str hash defn recommendknn key userref model db n n let list crux document id item possibly recommend currently query crux item exclude one user already rated candidate hashstr candidate umapfrom hashstr candidate userref crux document id user userid hashstr userref exploit knntop model hashstr userref map hashstr candidate merge umapkeys keyword item hashstr candidate get itemid algo knnexploit recs candidate shuffle map hashmap algo knnexplore item like interleave probabalistically choose item first collection x time interleaverandom exploit distinct take n item map item recs biff transaction tx defn recommend key userref db env let algoassignment abalgo cruxentity db abuser userref unassigned nil algoassignment algoassignment algoassignment first shuffle cooc knn f case algoassignment cooc recommendcooc knn recommendknn cond f env true assoc algo algoassignment unassigned update tx conj ab abuser userref dbmerge true abalgo algoassignment still using epsilongreedy strategy exploration recommendation purely random probably good area future experiment interlude performance first pas using libpythonclj recommendknn really slow even limited candidate value random item function taking anywhere second run server curiously never slow laptop even though experiment ran go faster server found deployed long story short culprit passing many object python clojure libpythonclj wrap python object clojure interface viceversa something like evidently nt relied willynilly particular originally passing rating data directly crux surprise without writing csv switched approach shown surprise read data disk instead instead using knntop function calling surprise method clojure get rating prediction item sorted item took top knntop python pas object back clojure instead hundred thousand also still limiting candidate knn relatively slow even run python code directly ie via clojure unnecessary switch matrix factorization tested svd prediction faster almost accurate change recommendknn typical user take m run m knntop m fetching candidate crux latter could optimized well nt investigated raw index access crux could keep candidate memory active client nothing else also using knntop tried returning tuples instead dictionary map still slow passing large list string map hashstr candidate clojure nt issue though simple test indicated computation via libpythonclj ran slower plain python even object passing involved nt know inherent something wrong right nt matter future u care thinking could run python separate process communicate ipc assuming ipc nt slow another thing investigated maybe time switched rolling model clojure python integration continued finally knnsetrating findka recommendation online someone visit site first time want algorithm adapt preference soon rate item must update model incrementally least portion model representing user taste mildly inconvenient surprise suspect recommendation library nt written use case mind peering source came synchronized lock mutex execution def setrating knnbaseline userid itemid rating knnbaselinetrainsetknowsitem itemid return inneritemid knnbaselinetrainsettoinneriid itemid try inneruserid knnbaselinetrainsettoinneruid userid newuser false except valueerror inneruserid len newuser true newbu npappend knnbaselinebu knnbaselinebu newbu knnbaselineby newbu knnbaselineyr inneruserid newratings r r knnbaselineyr inneruserid inneritemid rating none newratings inneritemid rating knnbaselineyr inneruserid newratings newuser last make sure top nt get messed call function executing likely occurrence userid inneruserid called small wrapper function n findkaalgo defn setratingknn key findkamodel key user item rating useritem knnsetrating knnmodel model hashstr user hashstr item normalizerating rating called biff trigger whenever someone rate item n findkatriggers defn ratingsupdated key doc docbefore env somechanged doc docbefore rating let key user item merge docbefore doc rating rating doc algosetratingknn assoc env useritem user user item item rating rating def trigger useritems write ratingsupdated quite happy set think help u iterate quickly algorithm particularly looking forward see result ab test next mini project focused analytics end nt ab testing
33,Lobsters,clojure,Clojure programming,REPL-integrated Clojure-to-Java decompiler,https://github.com/clojure-goes-fast/clj-java-decompiler,replintegrated clojuretojava decompiler,cljjavadecompiler blog post procyon usage local clearing comparison nodisassemble nodisassemble license license,cljjavadecompiler read motivation behind cljjavadecompiler usage example blog post library integrated clojuretojava decompiler usable repl wrapper around procyon suite java metaprogramming tool focused code generation analysis quick demo user cljjavadecompilercoredecompile loop sum sum recur uncheckeddec uncheckedadd sum decompiling class user import clojurelang public final class user extends afunction public static object invokestatic long long sum final long n sum n return numbersnum sum public object invoke return invokestatic several usecases may want use java decompiler get general understanding clojure compiler work function compiled class function invoked etc optimize performance bottleneck using lowlevel construct like loop primitive math type hint investigate java interop facility implemented reify proxy genclass usage add comclojuregoesfastcljjavadecompiler dependency repl user require cljjavadecompilercore refer decompile nil user decompile fn println hello decompiler decompiling class cljjavadecompilercore import clojurelang public final class core extends afunction public static final var public static object invokestatic return ifn invoke object hello decompiler public object invoke return invokestatic static rtvar clojurecore println also disassemble bytecode output similar one javap user disassemble fn println hello decompiler redacted public static javalangobject invokestatic flag public static code linenumber getstatic cljjavadecompilercore lclojurelangvar invokevirtual clojurelangvargetrawroot ljavalangobject linenumber checkcast lclojurelangifn getstatic cljjavadecompilercore lclojurelangvar invokevirtual clojurelangvargetrawroot ljavalangobject linenumber checkcast lclojurelangifn ldc hello decompiler linenumber invokeinterface clojurelangifninvoke ljavalangobject ljavalangobject linenumber invokeinterface clojurelangifninvoke ljavalangobject ljavalangobject areturn make output clearer cljjavadecompiler default disables local clearing code compiles reenable setting compiler option false explicitly like binding compileroptions disablelocalsclearing false decompile also change compiler option static linking metadata elision way comparison nodisassemble nodisassemble nd another tool let inspect clojure code compiles however substantially differs cljjavadecompiler cjd nd disassemble compiled code bytecode representation cjd decompiles code java much easier comprehend nd requires program loaded java agent present either add agent jvm option manually start repl leiningen plugin cjd loaded repl dynamically nd track every class loaded since beginning program memory overhead cjd bear overhead nd disassemble already defined clojure function cjd need clojure form passed directly last limitation come fact java clojure nt keep bytecode class loaded anywhere clojure compiler compiles piece clojure code transforms bytecode memory load classloader discard bytecode nodisassemble work around java agent instrument classloader save class ever loaded accessible hashmap retrieved later however mean must start clojure program nd agent classpath ca nt decompile existing function definition cjd using cider jump definition function want decompile disable readonly mode cx cq wrap defn form cljjavadecompilercoredecompile recompile form cc cc license cljjavadecompiler distributed eclipse public license see license copyright alexander yakushev
34,Lobsters,clojure,Clojure programming,Elliptic Curve Cryptography I,https://btcclj.com/posts-output/2020-06-18-elliptic-curve-cryptography-i/,elliptic curve cryptography,elliptic curve finite field coding elliptic curve finite field scalar multiplication coding scalar multiplication defining curve bitcoin conclusion programming bitcoin finite field elliptic curve part two github elliptic curve finite field coding elliptic curve finite field scalar multiplication discrete logarithm problem coding scalar multiplication defining curve bitcoin coding conclusion,elliptic curve finite fieldscoding elliptic curve finite fieldsscalar multiplicationcoding scalar multiplicationdefining curve bitcoinconclusion welcome part one exploring programming bitcoin third chapter elliptic curve cryptography clojure section combining subject previous two chapter finite field elliptic curve together make necessary ingredient create cryptographic primitive need build signing verification algorithm making part two code found github made major change code first two chapter get elliptic curve cryptography work following code first two section keep mind function changed going change piece brevity going long one alreadyelliptic curve finite fieldspreviously saw plotted graph like one creates elliptic curveit turn math hold elliptic curve finite field real number shown finite field well finite get nice continuous curve try plot point elliptic curve equation end getting scatter plot look like using finite field addition subtraction multiplication division exponentiation actually point addition curve although may seem surprising certain common pattern found among mathematical abstraction notion fieldswe verify point elliptic curve finite field calculating side elliptic curve equation instance wanted prove point bitcoin curve plug number use modulo arithmetic learned get answer mod mod coding elliptic curve finite fieldsi changed code earlier chapter support overloaded operator finite field point initialize point elliptic curve real finite field using exact codein refactor became necessary start operating big integer nt going use integer addition operation instead extend number type use bigint quoted form operator n programmingbitcoinecc referclojure exclude defprotocol fieldops x x x x renamed pwr pwr x zero x extendtype number fieldops x x x x x x since excluding operator biginteger version use namespaced version x clojurecore x pwr x k mathexpt x k zero x fieldelement type also us overloaded operator definition point addition also work box test like n programmingbitcoinecctest referclojure exclude require clojuretest refer programmingbitcoinecc refer deftest pointaddition let prime fieldelement prime b fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime fieldelement prime point b point b point b point b point b testing point addition finite field testing different point testing point scalar multiplicationpoint addition remains associative finite field thus add point result operation know multiplication called scalar multiplication case coefficient front scalar number variable hand vector x coordinate add new notation instead writing write one important property scalar multiplication near impossible predict without calculating diagram programming bitcoin point labeled number time point added get point word scalar coefficientif given random point curve xg asked many multiple g would nt able perform scalar multiplication easily performing reverse function scalar division becomes intractable called discrete logarithm problem form basis elliptic curve cryptography since scalar multiplication point addition point scalar exponentiation scalar multiplication applied context elliptic curve discrete logarithm problem inability reverse scalar exponentiationlet consider equation q px mod p p large prime trying solve q equation trivial know point p exponent x trying solve x p q infeasible large enough p called discrete logarithm problem inverse function solved easily x logpq important thing scalar multiplication certain multiple reach additive identity commonly known normal mathematics case point addition referred point infinity critical feature property choose generator point g curve scalar multiply reach identity point create set g ng ng set actually called group n finite specifically finite cyclic group cyclic part come fact cycle back get point infinity since everything done mod p group single operation case point addition property closure invertibility commutativity identity associativity expect intuition mathsince generator point public group generated scalar multiplication point small enough find answer brute force search bitcoin curve others used elliptic curve cryptography number much bigger thus discrete logarithm problem becomes incomputable amount time needed solve would insurmountablebecause mathematical property group combined fact scalar multiplication easy inverse difficult necessary ingredient elliptic curve cryptography let code scalar multiplication first go defining bitcoin curve implementing signing verification algorithmscoding scalar multiplicationwith naive implementation could define scalarmultiply simply defn scalarmultiply coeff point zero coeff zero point reduce repeat coeff point extendtype number fieldops x number x scalarmultiply x defrecord point x b fieldops zero p point nil nil b version function linear time complexity n thus highly inefficient unsuitable large exponent deal bitcoin curve need define scalarmultiply way allows u cut time problem scale implementing technique called binary expansion significantly faster larger inputsif wanted compute value say instead nine repeated point addition p use binary expansion reduce problem size half step solve four step since point addition associative calculate like pp would implement technique clojure defn scalarmultiply p zero zero p loop p zero let e even quot zero e recur recur defining curve bitcoinas mentioned cryptography requires massive prime allow similarly huge finite cyclic group multiplication becomes impossible reverse even world powerful computer elliptic curve cryptography security fundamentally based assumption computer go meaningful portion curve finite cyclic groupto define elliptic curve public key cryptography need specify five public parameter constant b elliptic curve equation prime p finite field generator point g order group generated g n bitcoin us curve already discussed constant b simple elliptic curve equation many others much larger b value fact number low created cause concern amongst cryptographer one sure parameter came chosen troubling fact curve constructed nist u government agency recently found made backdoor elliptic curve random number generator despite suspicion many blockchain protocol significant number corporation rely curvethe prime p used curve equal p specifically chosen close coordinate make point curve expressed bit le hence part curve name fact give elliptic curve leg public key cryptography system private key generated bitcoin represented bit provides security bit diffiehellman key saving crucial system dealing significant amount cryptographic operationswhile express concisely exponential notation number incredibly scale order number atom observable universe brute forcing way bitcoin private key thus computationally infeasible trillion computer trillion computation every trillionth second trillion year still le generator g x coordinate coordinate order generated generator point n order finite cyclic group also close scalar multiple also represented bit lesscoding define constant curve code def n def fieldelement p def b fieldelement p def g point b also create constructor function initialize point bitcoin curve without redefine constant time create point record case initialize point infinity also need check x coordinate number initialize field element defn x let x number x fieldelement x p x number fieldelement p point x b define g new constructor function leave b function call def g also adjust operator efficient since know order finite cyclic group n let define function first help u determine whether point dealing curve mod n whatever scalar prime order defn key b b b extendtype number fieldops x cond number x scalarmultiply mod x n else scalarmultiply x conclusionwe need start public key cryptography recap covered elliptic curve finite field scalar multiplication defining bitcoin curve part two learn basic public key cryptography signing verification work sign verify message elliptic curve cryptography clojure learned
35,Lobsters,clojure,Clojure programming,Call C from Clojure using GraalVM - then compile a binary using native-image,https://github.com/Saikyun/native-image-clojure-c,call c clojure using graalvm compile binary using nativeimage,join github today sign file permalink clojure calling c compiled binary nativeimage prerequisite http githubcomgraalvmgraalvmcedevbuildsreleases http leiningenorg step acknowledgement resource reload reload,call c clojure using graalvm compile binary using nativeimage dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time clojure calling c compiled binary nativeimage prerequisite graalvm tested http githubcomgraalvmgraalvmcedevbuildsreleases download add following eg zprofile export graalvmhome export javahome graalvmhome install nativeimage graalvmhomebingu install nativeimage installed compile otherwise leiningen http leiningenorg tested mac step modify srcheadersjava specifically userstestprogrammeringclojuregraalnativeinteractiongraalsrctripleh need point srctripleh make clean cfiles compile woop value come cstruct acknowledgement thanks sogaiu helping get working call c clojure using graalvm compile binary using nativeimage resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
36,Lobsters,clojure,Clojure programming,ESP32-Based Board Uses ClojureScript to Explore Building IoT Devices,https://www.hackster.io/news/esp32-based-board-uses-clojurescript-to-explore-building-iot-devices-9c823bbeb011,board us clojurescript explore building iot device,esprit board clojurescript espruino espritboard github repository esprit repo fikesfarm tindie store clojurescript microcontrollers,esprit board mike fikes run clojurescript repl us espruino embedded javascript engine platform like combination mean explore programming iot device clojurescriptclojure lisp dialect making programming language rich set data structure clojurescript compiler closure target javascript combined espruino possible run clojurescript developed esprit allow user explore combination programming language iotenabled hardware board lipo battery charging circuit led status indicator six gpio pin module mib spiram mib flashwhile esprit make faster get using clojurescript repl fikes offer instruction get running based boardover espritboard github repository design data proteus gerbers bill material esprit repo file firmwareside also visit fikesfarm tindie store purchase esprit boardfor information clojurescript use check clojurescript microcontrollers talk fikes clojurenorth remote conference scheduled june
37,Lobsters,clojure,Clojure programming,nREPL 0.8: Evolving the Protocol,http://metaredux.com/posts/2020/06/15/nrepl-0-8-evolving-the-protocol.html,nrepl evolving protocol,first alpha version op note op dynamic middleware loading note closing thought clojurist together,day ago released first alpha version eventually going become nrepl upcoming release quite special add couple additional ops core nrepl protocol namely completion lookup apart extends sideloader functionality introduced nrepl allow dynamic loading middleware one great thing nrepl always simplicity implementing nrepl server client pretty easy protocol simple eventually nrepl gained traction even outside clojure community gave birth default set nrepl ops cover basic usecases many common usecases eg code completion looking definition documentation finding usage etc language server protocol gained lot traction recent year partly broader api power outofthebox programming editor world clojure void historically filled thirdparty nrepl middleware eg cidernrepl refactornrepl always merit powerful outofthebox experience lot consideration decided extend protocol op code completion completion another resolve symbol look much data possible lookup ops make sense pretty much every programming language therefore fit nrepl philosophy let examine new ops completion op api op based similar complete existed cidernrepl age typical completion request response request op completion n soman prefix map response completion candidate map n clojurecore type function candidate mapentry n clojurecore type function candidate mapindexed n clojurecore type function candidate map n clojurecore type function candidate mapcat n clojurecore type function candidate mapv n clojurecore type function status done implementation pretty simple yield result good coming cidernrepl get job done without external deps hard requirement nrepl default completion op use nrepl code completion nreplutilcompletion instruct nrepl use another completion function eg one based compliment completion function accept parameter prefix completion prefix n namespace look completion candidate option map additional option function ideally return result following format candidate map n clojurecore type function candidate mapentry n clojurecore type function candidate mapindexed n clojurecore type function candidate map n clojurecore type function candidate mapcat n clojurecore type function candidate mapv n clojurecore type function either specify custom completion function request via completefn key setting nreplmiddlewarecompletion completefn user set nreplmiddlewarecompletion completefn mynamespacemycompletion note name op exactly aligned protocol ops typically verb eg clone eval etc main reason avoid conflict cidernrepl using complete name year road probably complete make protocol alias completion backwards compatibility tricky foresight namespace cidernrepl ops eg cidercomplete lookup op main purpose lookup op provide necessary data client implement feature like go definition displaying documentation simply resolve symbol context current namespace return metadata obtain op inspired info op cidernrepl using look like request op lookup sym map n soman response info added n clojurecore name map file jar file clojurecoreclj static true arglistsstr f f coll f f f colls column line arglists f f coll f f f colls doc return lazy sequence consisting result applying f ton set first item coll followed applying f set second item coll one colls exhausted remaining item colls ignored functionn f accept numberofcolls argument return transducer whenn collection provided status done still fence name return key eg info lookupinfo etc default lookup use nrepl symbol lookup logic nreplutillookup instruct nrepl use another lookup function eg info orchard pretty similar outlined earlier completion lookup function accept parameter n namespace look completion candidate sym symbol lookup function ideally return result following format added n clojurecore name map file jar file clojurecoreclj static true arglistsstr f f coll f f f colls column line arglists f f coll f f f colls doc return lazy sequence consisting result applying f ton set first item coll followed applying f set second item coll one colls exhausted remaining item colls ignored functionn f accept numberofcolls argument return transducer whenn collection provided note nrepl default lookup function pretty basic handle symbol resolve special form var might change road definitely nongoal try replicate behaviour cidernrepl info op specify custom lookup function request via lookupfn key setting nreplmiddlewarelookup lookupfn user set nreplmiddlewarelookup lookupfn mynamespacemylookup dynamic middleware loading note section specific clojure nrepl implementation nrepl includes dynamicloader middleware used runtime query change middleware stack nrepl server using especially powerful combined sideloading allows client configure server connecting provides alternative specify middleware required client startup time introduces three new operation lsmiddleware return list active middleware ordered inside outwards addmiddleware add middleware stack optionally list extranamespaces could provided loading useful adding middleware implement form deferred loading example include cidernrepl refactornrepl case required namespaces might loaded upon first use may occur outside sideloading session thus fail feature allows u preload namespaces add middleware loading particular middleware fails stack unchanged swapmiddleware similar add replaces existing middleware note may remove dynamicloader practical term mean client simply bundle whatever middleware need power feature eg piggieback cidernrepl refactornrepl sayid load middleware nrepl server connecting immensely powerful eventually result need user setup get access everything client offer forget message like cider requires cidernrepl functionality work properly going take u get point clojure client support going great moment get big thanks shen tian tackling closing thought point nrepl mostly feature complete certain aspect new apis need polished though looking forward hearing feedback hoping get release nrepl next couple month important understand new ops sans related middleware loading aim replace functionality cidernrepl rather extend protocol improve baseline nrepl experience impact change felt best outside realm clojure solution like cidernrepl currently available next step point add support new nrepl functionality cider already support completion adding support lookup pretty straightforward well bit work sideloaderdynamic middleware loading front usual like extend special thanks clojurist together funding recent work nrepl cider project without support
38,Lobsters,clojure,Clojure programming,Transducers From The Ground Up,https://bsless.github.io/transducers-intro/,transducer ground,,implemented reduce implement map following implementation tail recursive requires introducing state variable init example defn map f init coll iflet seq coll recur f conj init f first rest init map inc range nice work also look similar reduce similar fact factor difference implement map reduce defn map f init coll reduce fn init x conj init f x init coll map inc range actually worked mean let take deeper look function pas reduce function f factor well defn mapper f fn init x conj init f x defn map f init coll reduce mapper f init coll map inc range one problem left mapper might look like problem behavior still concreted via conj purpose conj reducing function remember example reduce conj conj function take aggregate value element add element aggregate let factor rf defn mapper f fn rf fn accum x rf accum f x defn map f init coll reduce mapper f conj init coll map inc range made something interesting look even complicated also performed slight hand renamed init accum fully embed u context reducing function let drop map remain reducing context defn mapper f fn rf fn accum x rf accum f x reduce mapper inc conj range reduce mapper inc range hold illegal let take look understand completely separated behavior mapping sequence behavior accumulating result mapping something magic actually every function implemented reduce also nice equivalence function implemented reduce loop every function think implemented one turn function change behavior reducing process transforms transducer finally derive transduce defn transduce xf rf init coll reduce xf rf init coll
39,Lobsters,clojure,Clojure programming,Conversational software development,https://oli.me.uk/conversational-software-development/,conversational software development,fizz buzz fizzbugged,let use conjure conversational software development fix issue simple clojure fizz buzz program called repository fizzbugged since slightly broken design n fizzbuggedmain require clojurestring str defn n str n let zero mod n zero mod n cond fizz buzz fizz buzz else str n defn main range map n str strjoin println contrived example demonstrate development style hard problem probably already spot issue program almost correct quite let get repl running connect conjure evaluate code clojure nreplcmdline middleware cidernreplcidermiddleware nrepl server started port host localhost nrepl open neovim conjure installed connect automatically evaluate content main placing cursor inside form pressing ee comma prefix depend maplocalleader setting conjure configuration result appear hud small window top right open log split see l expected actual output program far expected fizz buzz fizz fizz buzz fizz fizz buzz actual buzz fizz buzz buzz buzz fizz buzz buzz fizz buzz fizz buzz combination appear multiple happening odd place look like fizz buzz inverted rest time let add comment buffer test form check specific return value n str evaluated form inside comment ee see result log buffer edit interact way clearly suspicion correct fizz buzz flipped fizz buzz applying way multiple going flip value around let binding evaluate function er evaluates top level root form cursor run little adhoc test suite notice weird behaviour fizz buzz occouring thing multiple one correct reevaluate n str execute body main one last time look good bear mind extremely simple example might thinking run program made change perfectly acceptable instance conversation program really shine talking directly staging server poking state intermediate step complex pipeline take minute run end end connected run step individually caching result var allows run individual part program demand without change code go harder complex problem thankful tool close hand
40,Lobsters,clojure,Clojure programming,Clojure: a mature alternative to Java,https://github.com/borkdude/clojure-overstapservice/blob/english/Alternatief.md,clojure mature alternative java,clojure mature alternative java tiobe index talk quote walmartlabs clojure simple clojure data oriented ring clojure requires le line code todobackend clojure support multiple platform clojure interactive figwheel overtone clojure full stack react reagent hiccup syntax om better performance clojure prevents callback hell coreasync httpcljs clojure spec expound clojure good scripting language planck joker babashka graalvm clojure stable speculation transcript epilogue,clojure mature alternative java year celebrate anniversary java currently popular programming language according tiobe index become popular programming language difficult feat surely beginning java lot people needed convinced way java positioned better alternative language choice time c programmer managed drag lot halfway lisp guy steele coauthor java language specification came many programmer crossed java moving midway path enlightenment article subsequent part switching lisp case lisp pinnacle productivity according steele lisp talking clojure programming language jvm introduced rich hickey edition java one hickey held talk started following quote lot best programmer productive programmer know writing everything clojure swearing producing ridiculously sophisticated thing short time programmer productivity matter adrian cockroft former netflix pitch rich clojure enables write program better flexible make much productive using java could certainly reason big company like netflix embraced clojure mature alternative java another example walmartlabs clojure shrink code base onefifth size would written java anthony marcar architect walmartlabs language proven industry perhaps good reason switch clojure listed ten advantage using clojure clojure simple rich hickey dedicated whole year life designing clojure decided language needed simple easy language true clojure easy learn might initially win java programmer indeed path programmer enlightenment never easy perhaps even painful parens silly prefix notation however reached nirvana find clojure syntax actually simple one example simplicity writing function clojure encourages write pure function function yield side effect rich hickey recognized feature immutability help achieve variable guaranteed immutable code better reason lot easier test clojure data oriented simplicity also stem fact clojure object oriented data oriented data represented immutable hashmaps instead class like java data structure easy manipulate function mutually independent therefore clojure philosophically aligned following quote alan j perlis better function operate one data structure function operate data structure object orientation force continually reinvent wheel requires put data class instead clojure use limited set data structure use case moreover new class oo language learn method first order access data structure lurking behind also map clojure immutable nt worry side effect small example ring library writing web application handler nothing function expects hashmap request return hashmap response defn whatismyip request status header contenttype textplain body remoteaddr request namespace scope handler dependent upon ring library thing need know request ring look like ie key may expect hashmap key ought return order yield valid response happening request response nothing else computation normal hashmaps surely lot simple working httpservletrequest httpservletresponse clojure requires le line code using clojure carry burden immense overhead occurs object oriented language overhead consists writing interface implementation code protect data structure mean need le clojure line code java line code order achieve result another reason need write le line code clojure functional programming language language known expressive imperative programming language instance clojure write loop iteration computation collection apply higher order function map filter reduce collection course version java language already incorporated functional feature lambda higher order function via stream api fact clojure lisp prevent writing boilerplate code using macro function executed compile time accept expression argument expression represented data also transform using clojure function amount codegeneration nt write boilerplate code website todobackend contains several different implementation todolist api also use compare language comparing clojure implementation java see following clojure line clojure including build configuration java spring mvc line xml java line code line groovy java spring boot line java line groovy include line code library framework used expect even better result clojure advantage le line code evident smaller program contains le bug easier reason simplicity robust clojure support multiple platform clojure ecosystem enables reuse knowledge language multiple environment server side development use clojure jvm net via clojureclr front end development use clojurescript compiles javascript clojurescript compiler used program run browser also server side using nodejs much effort put keeping clojure implementation mutually consistent diverge platform limitation one example limitation absence multithreading browser many clojure library offer support clojure clojurescript reuse knowledge platform library developer use reader conditionals offer possibility use code file target environment application developer also use reader conditionals write one piece code platform example following code contains variable value nan jvm platform clj defined doublenan javascript cljs nan global namespace def notanumber clj doublenan cljs jsnan default nil clojure interactive clojure interactive programming language repl readevalprint loop receive immediate feedback whilst developing redefine function retest even application running without starting new compile cycle tool jrebel quarkus hot code reloading necessary even possible cross network hook remote replsession order inspect state application production server clojurescript also support repl session enables connect code running browser node test modify program tool like figwheel also enables immediately view result modified clojurescript without even refresh browser mean clojure suitable live coding clojure even produce live music check library overtone clojure full stack one way java full stack backend language people nt try become relevant front end well seriously still developing application using awt swing javafx likewise clojure initially conceived alternative back end language advent clojurescript subsequent release many front end library tool decidedly consider clojure full stack language also introduced lot interesting element considerably improves experience full stack developer react piggybacking success javascript library react amazingly easy build n spa single page application clojurescript reagent clojurescript library simplifies writing react component hiccup syntax describing html markup using clojure data structure requires line code example component count number click button subsequently showing div def countstate atom defn counter div countstate button onclick swap countstate inc x reagentrendercomponent counter jsdocumentgetelementbyid app om another clojurescript wrapper react possible achieve even better performance react better efficiency comparing different set state clojurescript well clojure clojure prevents callback hell one problem javascript developer deal phenomenon called callback hell browser program one thread reason need work nested callback apply deeper level nesting code readability increasingly worse clojure solution consists library coreasync might guessed simplifies working asynchronous code also go without saying library work server client building block channel buffer go block go block source transformation offer appearance synchronous code ultimately translate nested callback example following code first retrieves user email address via call rest api library httpcljs used combine ajax call coreasync return value receive channel read result using take operation next use email address second call fetch order user go let email body httpget str apiusers email order body httpget str apiordersbyemail email count order clojure spec since clojure released end clojure come spec library describe structure data function support validation error reporting instrumentation data generation developer coming java may find clojure lack static typing hard digest spec offer compile time guarantee beyond macro syntax checking offer something much powerful runtime small example define spec express integer must even greater sdef bigeven sand int even use instrumentation check argument function conforms specification defn squarebigeven return square x must big even integer x x x define spec function argument sfdef squarebigeven args scat x bigeven instrument stinstrument squarebigeven squarebigeven failed even x spec userbigeven squarebigeven error message spec seem bit cryptic library like expound used transform spec error data humanreadable text spec used validation also used data generation generative testing gensample sgen bigeven clojure good scripting language almost software project need write shell script automate task java nt natural fit scripting language since quite verbose compared popular choice like bash python requires compilation step startup time jvm another hurdle take recent year several solution come get clojure scripting environment good startup time planck based clojurescript run javascriptcode joker clojure interpreter implemented go babashka clojure interpreter written clojure compiled graalvm nativeimage babashka script print canonical path directory current directory may notice interop javaiofile class one many class packaged babashka usrbinenv bb require clojurejavaio io defn canonicaldirs path iofile path listfiles filter isdirectory map getcanonicalpath doseq dir canonicaldirs println dir script take execute michiel macbook pro clojure stable like java clojure strong focus api stability program written clojure still likely work clojure clojure community large adopts philosophy rich hickey apis grow time accretion adding feature relaxation requiring le bug fixing instead making breaking change watch speculation keynote want learn transcript epilogue java programming language year old year many alternative java come go one appeared since cambrian explosion language previous decade reached maturity groovy scala also clojure article listed number feature positively separate clojure rest convinced best way learn clojure actually use
41,Lobsters,clojure,Clojure programming,"Online Clojure meetup, June 17th",https://www.meetup.com/Helsinki-Clojure-Meetup/events/271100774/,online clojure meetup june,http http http berlincodeofconductorg,yrjö karikoskinen janitor story clojure devops swiss army knife evolutionhttps q heimo laukkanen arttu kaipiainen developing yet another webchat product medium company clojure clojurescripthttps q closinghelsinki clojure meetup adheres berlin code conduct http berlincodeofconductorgthe event run englishthe meeting conducted using zoom videoconferencing software stream prerecorded talk starting talk presenter available question live commentswelcome
42,Lobsters,clojure,Clojure programming,A History of Clojure,https://clojure.org/about/history,history clojure,history hopliv accepted,history time hopliv excited honored paper clojure accepted want thank guy steele richard gabriel cochairs hopl iv well reviewer shepherd support guidance clojure product traditional research may evident writing paper setting different challenging exercise hope paper provides insight clojure way process people behind creation development
43,Lobsters,clojure,Clojure programming,Simple Ray Casting with ClojureScript,https://andreyorst.gitlab.io/posts/2020-06-04-simple-ray-casting-with-clojurescript/,simple ray casting clojurescript,sicp ray casting basic project structure shadowcljs leiningen creating camera skip never change cast destroyed page moving camera associative destructuring difference cameracljs drawing creating wall example picture procedure multiarity function casting ray thread last macro making view scene fisheye compensation one handling input focus coloring wall labyrinth game learned clojure brave true peg thing game example,ray casting quite old technique heavily used early day game development lot game create illusion space known example perhaps first widely successful game used technique wolfenstein made id software lot game kind platform used ray casting example remember playing labyrinth game siemens around probably reason use ray casting rendering pseudo environment today since technique limited modern hardware heavily optimized working triangle allows u create complex geometry impossible model ray casting think ray casting kinda cool idea simple concept definitively smart move ninety game development additionally ray casting lot use case simple rendering engine also raycasting seems real word going refer technique like convenient engine referred raycaster project chosen clojurescript want get clojure well although experience lisp rich main usage right writing function emacs lisp rather basic also going sicp gnu guile racket though exercise book sometimes brutal real programming experience real goal post rather implement basic raycaster learn clojure thought game kidding make simple maze game playable page first let understand raycasting going basic example ray casting basic general idea behind technique imitate environment based information done casting ray point camera stand measuring length ray hit line segment represent wall plane prepared picture illustrate idea look top view scene would convert first person pseudo view answer might expect ray camera shoot certain amount ray front see ray intersection point red green wall let shoot ray find intersection wall cut ray calculated length information need make plane pseudo scene going left right length roughly inf pixel order make scene length first create empty scene let make pixel divide scene width amount ray compute width ray fill scene rectangle width give u roughly pixel wide rectangle look like yet notice total rectangle presented due fact one ray infinity length since id intersect anything draw anything make look need change height rectangle accordingly length ray general rule shorter ray bigger height look like scene wall exactly look like wall like set rectangle fix increasing resolution casting ray also let add background remove rectangle outline also change field view keeping amount ray changing angle convincing still smooth could think ray resolution would cast ray one ray pixel image width would get something like advanced raycasting engine produce various perspective correction rectangle making thing appear different height often used imitate camera shake walking texture mapped wall floor basic lightning achieved changing texture brightness depending distance even advanced engine allow changing vertical angle camera imitate looking implement pretty basic untextured raycasting extending interesting task fell like canvas maybe later webgl project structure using shadowcljs manage project found one straightforward simple setup leiningen create cljs project via lein type command line using linux detail project setup may vary different operating system lein new shadowcljs raycasting result create following file structure u raycasting packagejson public cs stylecss indexhtml readmemd shadowcljsedn src raycasting corecljs let look shadowcljsedn shadowcljs configuration sourcepaths src dependency binaryagedevtools reagent set nrepl port connection repl nrepl port build app target browser outputdir publicjscompiled assetpath jscompiled module main entry raycastingcore devtools livereloading code call function beforeload raycastingcorestop livereloading finish call function afterload raycastingcorestart serve public directory http port httproot public httpport preloads devtoolspreload probably need change much removed reagent dependency need shadowcljsedn look like sourcepaths src dependency binaryagedevtools nrepl port build app target browser outputdir publicjscompiled assetpath jscompiled compileroptions optimization advanced module main entry raycastingcore devtools httproot public httpport preloads devtoolspreload also added compileroptions optimization advanced produce smaller j file removed beforeload afterload function think need script initialization page load sufficient enough one last thing need test page see result code let create publicindexhtml file add canvas element go project setup ready begin working ray casting creating camera creating camera since going cast ray camera need camera first place camera represented single point plane x coordinate degree parameter let create file srcraycastingcameracljs define camera using atom could later update n raycastingcamera def camera atom x degree camera hash map three keyvalue pair parameter later access parameter calling key map like raycastingcamera degree camera quite handy update map assoc procedure raycastingcamera assoc camera degree x degree use mergewith procedure change value currently stored map using procedure case raycastingcamera mergewith camera degree x degree notice used assoc change degree used mergewith add degree current degree still got result expected camera value really change instead producing new value based old one since old value never changed still degree understand work need understand considered value skip explanation want since mostly nothing raycasting still may explain certain thing see later code clojure mostly work value variable presented language make clear let talk considered value example rust value assign variable like created mutable variable put later mutate hold another value key mutate magically transforming changing content like box contains value really anything always value produced new value based old one put value never change variable hold value change holding example something value rust look vector collection let mut b vec dynamic array hold three element actually change array using different method provides like push bpush collection hold four element push whenever refer b hold four element declared b mut mutating b collection b hold value mut keyword specifies mutate collection even drop mut keyword example eg let let b vec would able mutate still would turn value although treat value underlying semantics collection changed semi realworld example give apple ask give back half slice apple give back one half apple value literally changed slicing original apple longer available u hold half apple hold another half happens modify vector collection give apple made material cast destroyed ask give half slice anything take precise measure apple cast new piece material give back original apple apple slice throw apple garbage really anything essentially happens math number change take measure produce subtraction make apple value clojure work type data clojure collection immutable major aspect clojure collection persistence apple described really persistent made new slice nothing really tell past state whole apple apple order make thing persistent must provide additional information apple like serial number example cast new slice create new serial number contains information old serial number way look piece determine apple used reference whenever create new copy encode previous serial number current serial number point able trace back original state apple argue done ordinary apple indestructible one difference ordinary apple changed imagine made new apple based added serial number encodes derived original apple someone bit piece original apple holder copy apple try refer original one find expected maybe expected since apple could bitten restored original form apple made way tell preserve correct history even though enforce mutation restriction rust make vector value kinda clojure collection instead using identifier clojure us path copying sharing structure state newer state refers point old state many different way maintain persistence nicely described wikipedia page simple example persistent collection refer single linked list grows front let start list three item represented box hold value pointer next value refers refers refers nothing indicates end list add another element front produce new list see created box hold told point box hold rest thing old list marked green box copied anything old list change new node added front old list know nothing stored original list somewhere added original list changed furthermore check identity new list without first element original list user identical false user def user identical rest conj true first identical test give u false two different object even though value second identical test give u true said adding new value list removing get back original list collection clojure work way promise fast change low memory cost although collection fast mutable nonpersistence collection much reliable especially come concurrent programming reliability much important speed time raycasting really change camera position collection changed using hash map tho hold camera coordinate angle moving camera created camera used atom procedure produce reference type later atomically swapped hold another value swapping mechanism concurrently safe order update map need call swap procedure pas atom procedure update value raycastingcamera swap camera fn c assoc c degree x degree dereference camera actually see updated value raycastingcamera camera x degree using swap anonymous procedure kinda tedious instead let create set procedure use move camera around def radian mathpi defn movepoint x degree amount let angle degree radian x mthreedecimal mathsin angle amount mthreedecimal mathcos angle amount defn moveforward move camera forward given amount respecting degree camera moveforward camera camera amount let x x degree degree camera x movepoint x degree amount assoc camera x x procedure move camera forward relatively camera pointed compute later convert degree radian multiplication movepoint procedure later used several place program good separate procedure moveforward used exclusively camera movement inside weird construction called associative destructuring essentially bind x degree within let block value contained camera let try move camera around raycastingcore moveforward assoc camera degree x degree raycastingcore moveforward assoc camera degree x degree uh oh moving forward degree fine turned degree got coordinate value close really need precision problem small value javascript let write macro truncate three decimal place would enough need defmacro threedecimal truncate double three decimal place num int num defn moveforward move camera forward given amount respecting degree camera moveforward camera camera amount let rad degree camera mathpi mergewith camera x threedecimal mathsin rad amount threedecimal mathcos rad amount work though problem define macro file declared procedure difference clojure clojurescript create new file srcraycastingmacroscljc use requiremacros namespace definition cameracljs n raycastingcamera requiremacros raycastingmacros update moveforward refer macro defn moveforward move camera forward given amount respecting degree camera moveforward camera camera amount let rad degree camera mathpi mergewith camera x mthreedecimal mathsin rad amount mthreedecimal mathcos rad amount let try raycastingcore moveforward assoc camera degree x degree raycastingcore moveforward assoc camera degree x degree nice thing rotate camera defn rotate rotate camera degree camera rotate camera camera degree assoc camera degree mod degree camera degree call raycastingcore rotate camera x degree rotate procedure ensures degree stay inside degree specify turn degree wrap around two main procedure later use drawing draw camera canvas let add indexhtml doctype html html lang enus head meta charset script src jscompiledmainjs script head body canvas id raycaster width height canvas script windowonload function raycastingcoreinit script body html added canvas gave id later able refer canvas via id let create two var hold canvas object context n raycastingcore require raycastingcamera cam defonce canvas nil defonce ctx nil defn export init whenlet canvas jsdocument getelementbyid raycaster set canvas canvas canvas getcontext set ctx canvas getcontext use defonce save file shadowcljs hot reloads code redefine canvas ctx nil init procedure run onload event set canvas ctx let create drawcamera procedure take current camera state draw canvas defn drawline drawline color set ctx strokestyle color doto ctx beginpath moveto lineto stroke defn drawcamera camera let x po x camera camera pointer cammovepoint po degree camera width drawline po pointer set ctx fillstyle ctx fillrect x width width width width write repl raycastingcore drawcamera camcamera nil see camera let add wall look creating wall need mention many raycasting engine define stage term square grid useful check intersection lot faster since need perform check along ray fixed point space quite fast want arbitrary placed wall raycaster algorithm optimal able handle complex wall placement let create new file srcraycastingstagecljs file define stage stage vector line segment three component beginning coordinate endpoint color let define stage example picture n raycastingstage def examplestage begin creating vector vector hold line stage us define another vector hold beginning point ending point wall color lastly specify another line process continue bigger stage require lot wall performance hit aiming best efficiency implement wall drawing drawline procedure already used drawcamera procedure let create drawstage procedure walk vector wall draw canvas defn drawstage stage doseq line stage apply drawline line doseq great way iterate collection producing side effect drawing screen let move camera position rotate placed example call procedure see stage raycastingcore swap camcamera assoc x degree x degree raycastingcore drawcamera camcamera nil raycastingcore drawstage stageexamplestage nil notice awkward setting position camera swap camcamera assoc x degree shorthand creating anonymous procedure procedure call assoc camcamera elaborate way write code would fn camera assoc camera could simplify using reset reset camcamera x degree much simpler still error prone remember key map issue three keyvalue pair map huge map better create kind initialization procedure let create one raycastingcamera namespace defn setposition set position camera certain x dergree camera setposition camera camera x setposition camera x camera x degree assoc camera x x degree mod degree called multiarity function using never explained clojure clojurescript possible define procedure overloading based amount given argument example create three possible way call procedure pas camera parameter reset position coordinate set degree angle specify coordinate care angle reset provide needed parameter set accordingly assoc beauty multiarity procedure call another amount argument case one real body work others calling needed parameter procedure quickly set desired position camera raycastingcore swap camcamera camsetposition reset x degree raycastingcore swap camcamera camsetposition set coordinate x degree raycastingcore swap camcamera camsetposition fully specify position x degree use later initialize stage game casting ray camera wall finally cast ray although casting ray really long line segment algorithm check intersection line segment stage wall ray first need linear algebra particular need check two line segment intersect done three procedure first one check point lie segment defn onsegment check point ax ay lie segment defined two point b c point defined vector x ax ay bx cx cy ax max bx cx ax min bx cx ay max cy ay min cy procedure accepts point line segment defined two point check whenever point lie line segment need procedure check intersection need ensure staying inside line segment next bit orientation procedure defn orientation ax ay bx cx cy let orientation ay cx bx bx ax cy cond orientation cw orientation cc else colinear procedure check relationship point point b c relationship cw clockwise cc counter clockwise colinear check intersection defn intersect check two line segment intersect line segment defined vector two point point vector two coordinate x let orientation orientation orientation orientation colinear onsegment colinear onsegment colinear onsegment colinear onsegment find point intersection need calculate two formula let write intersection procedure defn intersection ray wall let x x added ray wall make clear point related order really matter since computing point think give slight idea procedure expects final piece need procedure find intersection ray return form usable u later created procedure take stage two point ray defn findintersections stage origin end ray stage map fn wall intersect ray wall let new intersection ray wall distance origin new new end using thread last macro essentially take result expression put last position next expression map anonymous procedure take wall stage check intersects ray calculate new intersection point return vector distance ray origin intersection point new point map finish produce kind list length x convert hash map length key set coordinate value distance procedure defined follows defn distance mthreedecimal mathsqrt mathpow mathpow finally cast ray first let cast set ray draw without truncation intersection point defn castrays camera let raycount step fov raycount raystart x camera camera loop n dec raycount degree degree camrotate camera fov n let rayend cammovepoint raystart degree drawline raystart rayend recur dec n degree step call procedure drawing ray camera stage like raycastingcore drawstage stagesexamplestage nil raycastingcore castrays camcamera nil raycastingcore drawcamera camcamera nil see result let change procedure find ray end drawing defn castrays camera stage let step fov raycount raystart x camera camera loop n dec raycount degree degree camrotate camera fov n let rayend cammovepoint raystart degree intersection findintersections stage raystart rayend shortestray apply min key intersection rayend intersection shortestray drawline raystart rayend recur dec n degree step first compute map intersection find shortest intersection length map applying min procedure list key map lastly get closest endpoint given ray way find intersection given ray wall draw shortest one like illustrate bit better let create simple animation making camera rotate use castrays procedure make pseudo image making view scene need modify castrays procedure would return list ray instead drawing defn anglebetween let diff mathabs min diff mathabs diff defn castrays camera stage let step fov raycount raystart x camera camera centralray raystart cammovepoint raystart degree camera loop n dec raycount degree degree camrotate camera fov ray n let rayend cammovepoint raystart degree intersection findintersections stage raystart rayend shortestray apply min key intersection rayend intersection shortestray rayangle anglebetween raystart rayend centralray recur dec n degree step conj ray rayend shortestray rayangle n ray defn drawrays camera ray let po x camera camera doseq ray ray drawline po ray first defined anglebetween procedure take two line segment computes angle radian added one extra computation cast ray compute centralray direction camera looking compute angle current ray casting central ray conjing vector endpoint shortest length angle ray number list ray finally return list ray caller drawrays later use ray afterwards draw one ray ray whenever call procedure get useful information later need produce image first let create another procedure render element screen sequence defn render let height canvas height width canvas width camera camcamera ray castrays camera stage ctx clearrect width height drawrays ray drawcamera camera drawstage stage jswindow requestanimationframe render skeleton fully realized procedure note request another frame drawn canvas like game loop though quite use game loop though create set binding frame dereference camcamera get position angle cast ray camera stage later clear canvas call drawrays drawcamera drawstage calling procedure initiate animation sequence add swap camcamera camrotate point animation rotating camera let create view defn ray let raywidth canvas width raycount height canvas height canvaswidth canvas width set ctx fillstyle ctx fillrect canvaswidth canvaswidth height set ctx fillstyle ctx fillrect canvaswidth height canvaswidth height loop ray ray empty ray let distance raydegree n first ray wallheight height distance wallheight wallheight wallheight wallcolor wallheight set ctx fillstyle str rgb wallcolor wallcolor wallcolor ctx fillrect canvaswidth n raywidth height wallheight raywidth extra pixel border wallheight recur rest ray procedure first fill background loop ray calculate wall height simply subtracting canvas height distance wall since canvas pixel high use value color well really pretty solution fill rectangle height width offset half canvas width plus number ray time width calling procedure render procedure give u view sure give u desired view something right look wall see get kind fish eye effect see full form look directly wall good reason fix although requires bit additional calculation fisheye compensation reason effect method using calculate wall height currently view would curve screen display nonflat screen opposite curve image would look natural however screen flat need compensate order need compute distance taking account amount degree camera direction ray currently casting first let declare anglebetween procedure return angle two line segment one direction camera facing one ray currently casting defn anglebetween let diff mathabs min diff mathabs diff use castrays procedure defn castrays camera stage let step fov raycount raystart x camera camera centralray raystart cammovepoint raystart degree camera loop n dec raycount degree degree camrotate camera fov ray n let rayend cammovepoint raystart degree intersection findintersections stage raystart rayend shortestray apply min key intersection rayend intersection shortestray rayangle compensatefisheye anglebetween raystart rayend centralray recur dec n degree step conj ray rayend shortestray rayangle n ray store calculated angle add ray conj ray collection vector already quite big would better use associative collection instead let change conj ray end rayend length shortestray angle rayangle n n castrays return list hash map need update procedure expected list vector omit step much different previously described post already way longer thought using hash map prove usable need incorporate information ray color use angle procedure change distance computation use mathcos procedure compute corrected distance distance distance mthreedecimal mathcos raydegree give u result look correct face wall degree angle aligned wall get right wall curved reason note completely honest point everything without using existing raycasting tutorial applied seemingly correct fisheye compensation gone away partially got stuck order find correct way compensate fisheye effect read one reason formula work altered seems missing projection plane let create one defn projectiondistance width mthreedecimal raycount mathatan fov camradian better compute since change ray count recompute distance add computation wallheight computation process defn ray let raywidth canvas width raycount height canvas height canvaswidth canvas width projectiondistance projectiondistance canvaswidth set ctx fillstyle ctx fillrect canvaswidth canvaswidth height set ctx fillstyle ctx fillrect canvaswidth height canvaswidth height loop ray sort fn length length ray whenlet ray first ray let distance length raydegree angle n n ray anglestep fov raycount distance compensatefisheye distance mthreedecimal mathcos raydegree distance wallheight height raycount distance projectiondistance fov wallheight wallheight height height wallheight wallcolor wallheight set ctx fillstyle str rgb wallcolor wallcolor wallcolor ctx fillrect canvaswidth n raywidth height wallheight raywidth extra pixel border wallheight recur rest ray look much better example although wall appear tried make constant play nice make wall occupy whole height near wall keep way sure misunderstanding algorithm work ok handling input focus camera working make move pressing arrow key already needed procedure handling camera position rotation thing really need input handler way focus canvas pressing arrow would scroll page library handling keyboard input purist implement without dependency need two procedure check key pressed released let create raycastinginputcljs n raycastinginput defonce keystates atom defonce focus false start defining another atom key state hold map key state like false true mean currently key pressed another one focus use determine handle input let add three procedure defn validkey key key escape key shift key arrowleft key arrowup key arrowright key arrowdown defn onkeypress event focus let event event event jswindow event key event key validkey key event preventdefault swap keystates assoc key true defn onkeyrelease event focus let event event event jswindow event key event key validkey key swap keystates assoc key false event preventdefault get key string check one key need focused swap key state either true false keystates atom always hold recent state need assign procedure event set jswindow onkeyup onkeyrelease set jswindow onkeydown onkeypress also procedure handle focus defn onclick event set focus true defn releasefocus set focus false set initialization code defn export init set canvas jsdocument getelementbyid raycaster canvas canvas addeventlistener mousedown inputonclick swap camcamera camsetposition canvas getcontext set ctx canvas getcontext render final step would poll key frame render procedure create another procedure raycastingcore time defn movecamera stage keystates let x x camera camcamera keystates escape inputreleasefocus reset inputkeystates keystates arrowright keystates shift let x x camstrafe camera detectcollision stage x x swap camcamera camstrafe swap camcamera camrotate keystates arrowleft keystates shift let x x camstrafe camera detectcollision stage x x swap camcamera camstrafe swap camcamera camrotate keystates arrowup let x x cammoveforward camera detectcollision stage x x swap camcamera cammoveforward keystates arrowdown let x x cammoveforward camera detectcollision stage x x swap camcamera cammoveforward call procedure frame early possible notice calling another procedure detectcollision much like intersection finding stuff calculates end position camera check path intersects wall optimal work good last thing want add way control amount ray field view well fisheye compensation toggle need input tag div input type range id raycountslider min max step input label raycountslider ray count label output name raycountvalue id raycountoutput output div div input type range id fovslider min max step input label fovslider field view label output name fovslidervalue id fovslideroutput output div div input type checkbox id fisheyecompensation input label fisheyecompensation fisheye compensation label br div need way control let add procedure def maxfov def maxcompensatedfov defn updateraycount event let value event target value set raycount jsparseint value whenlet output jsdocument getelementbyid raycountoutput set output innerhtml value defn updatefov event let value event target value set fov jsparseint value whenlet output jsdocument getelementbyid fovslideroutput set output innerhtml value defn updatefisheyecompensation event let value event target checked set compensatefisheye value whenlet fovslider jsdocument getelementbyid fovslider set fovslider max value maxcompensatedfov maxfov value fov maxcompensatedfov set fov maxcompensatedfov set fovslider value maxcompensatedfov whenlet fovoutput jsdocument getelementbyid fovslideroutput set fovoutput innerhtml fov defn initinputs whenlet raycountslider jsdocument getelementbyid raycountslider set raycountslider value raycount raycountslider addeventlistener input updateraycount whenlet raycountoutput jsdocument getelementbyid raycountoutput set raycountoutput innerhtml raycount whenlet fovslider jsdocument getelementbyid fovslider fovslider addeventlistener input updatefov set fovslider max compensatefisheye maxcompensatedfov maxfov set fovslider value fov whenlet raycountoutput jsdocument getelementbyid fovslideroutput set raycountoutput innerhtml fov whenlet compensate jsdocument getelementbyid fisheyecompensation compensate addeventlistener click updatefisheyecompensation set compensate value compensatefisheye short event handler called interacting input setting initial value well handler initinput procedure coloring wall creating gray wall fine boring could notice drawing line color wall color information let update findintersections procedure include color information use color wall defn findintersections stage origin end ray stage map fn color wall intersect ray wall let new intersection ray wall distance origin new end new color color color eeeeee end end color return map length key another map hold endpoint wall color value need update castrays procedure use information defn castrays camera stage let step fov raycount raystart x camera camera centralray raystart cammovepoint raystart degree camera loop n dec raycount degree degree camrotate camera fov ray n let rayend cammovepoint raystart degree intersection findintersections stage raystart rayend shortestray apply min key intersection rayend end color color intersection shortestray rayangle compensatefisheye anglebetween raystart rayend centralray recur dec n degree step conj ray end rayend length shortestray angle rayangle n n color color ray destructuring map use value conj ray use color procedure finally get result similar showed beginning would nice keep effect distant wall appear darker parse color dim factor defn dim color amount let dimfactor mathpow inc amount color int color dimfactor color color defn dimcolor color distance let red jsparseint str sub color green jsparseint str sub color blue jsparseint str sub color str rgb dim red distance dim green distance dim blue distance two procedure dim color encoded six digit hex color ffffff use distance dim factor computation make look nice use procedure defn ray let raywidth canvas width raycount height canvas height canvaswidth canvas width projectiondistance projectiondistance canvaswidth gradient ctx createlineargradient height doto gradient addcolorstop addcolorstop addcolorstop set ctx fillstyle gradient ctx fillrect canvaswidth canvaswidth height loop ray sort fn length length ray whenlet ray first ray let distance length raydegree angle n n color color ray anglestep fov raycount distance compensatefisheye distance mthreedecimal mathcos raydegree distance wallheight height raycount distance projectiondistance fov wallheight wallheight height height wallheight color dimcolor color distance set ctx fillstyle color ctx fillrect canvaswidth n raywidth height wallheight raywidth extra pixel border wallheight recur rest ray also added bit nice gradient background color final version procedure labyrinth game create small labyrinth game need way determine goal reached first need stage play current one really good one came goal reach colored corridor check succeeded simply check camera inside square check use raycasting facility algorithm pretty easy cast ray point right count many wall given square intersect amount intersection odd inside see work u course special case like point lie either rectangle side intersect wall detect collision fine code defn insiderectangle camera ax ay bx cx cy dx dy let wall ax ay bx bx cx cy cx cy dx dy dx dy ax ay x x camera x x cammoveforward x x degree wall map fn wall intersect x x wall reduce odd receive four point define goal move camera degree right amount map intersect procedure across wall returning either depending collision detection reduce result finally check result odd though need way extract goal stage define constant want make stage code even complex going change stage reached goal teleport camera back starting point defn render movecamera stage inputkeystates insiderectangle camcamera stagegoal swap camcamera camsetposition let height canvas height width canvas width camera camcamera ray castrays camera stage ctx clearrect width height drawrays camera ray drawcamera camera drawstage stage ray jswindow requestanimationframe render combining stuff give u small game ray count field view fisheye compensation click canvas use left right move also strafe side holding shift pressing esc return focus page could scroll arrow key usual learned project extremely fun clojurescript clojure quite awesome language although difference learning clojure highly recommend clojure brave true book although finished yet borrowed lot idea like using little unicode circle mark stuff explanation book peg thing game example got thinking trying something bit complex real time clojure sure draw graphic java stuff chosen clojurescript canvas easy reach implementing think really need class object like point line etc long passing meaningful context really post expect code really hard read point time certainly map provide need class object generic object cleaned source code project found interested looking closely hope enjoyed read got interested clojure lisp particular lisp hacker already
44,Lobsters,clojure,Clojure programming,REPL Driven Design,http://blog.cleancoder.com/uncle-bob/2020/05/27/ReplDrivenDesign.html,repl driven design,repository,follow facebook know publishing daily coronavirus statistic generate statistic using daily update john hopkins github repository first hand copied data spreadsheet became tedious quite rapidly late march wrote little clojure program extract process data every morning pull repo run little program read file math print result course used tdd write little program last several week made quite small modification program grown substantially making adaptation chose use different discipline repl driven design repl driven design quite popular clojure circle also quite seductive idea try experiment repl make sure got right idea write function code using idea finally test function invoking repl turn satisfying way work cycle time time code experiment test repl nearly small tdd breed lot confidence solution also seems save time needed mock create fake data least case could use real production data repl test overall felt like moving faster would tdd late april wanted something little complicated usual required design change basic structure suddenly found full fear way ensure design change leave system broken way made change examine every output make sure none broken postponed change could muster courage set aside dedicated time would require change painful clojure easy language work verfication trivial led deploy program small bug bug caught day later bug forced go back correct data graph generated need design change mocking creating fake data function read repo file directly way pas fake data design change needed make precisely design change needed mocking fake data stuck tdd discipline would automatically made design change would faced fear delay error ironic design change tdd would forced upon design change eventually needed decoupling tdd force upon u order pas isolated input gather isolated output almost always design fascilitates flexibility promotes change learned lesson repl driven development feel easier faster tdd next time back tdd
45,Lobsters,clojure,Clojure programming,"A simple, easy to use library for React development in ClojureScript",https://github.com/Lokeh/helix,simple easy use library react development clojurescript,helix installation shadowcljs npm polyfills handled differently shadowcljs reactnative react native leincljsbuild figwheelmain raw cljs cljsjs documentation license,helix clojurescript optimized modern react development n myappcore require helixcore refer defnc helixhooks hook helixdom reactdom rdom define component using defnc macro defnc greeting component greets user key name use helixdom create dom element ddiv hello dstrong name defnc app let state setstate hooksusestate name helix user ddiv welcome create element component greeting name name state dinput value name state onchange setstate assoc name target value start app favorite react renderer rdomrender app jsdocumentgetelementbyid app installation install latest version clojars project version react reactrefresh installed automatically install corresponding version favorite renderer eg reactdom shadowcljs npm development want emit code polyfills handled differently passing dev compiler configuration shadowcljsedn build app dev compileroptions outputfeatureset release build able emit way back shadowcljs reactnative see react native leincljsbuild figwheelmain raw cljs use cljsjs package react using webpack ensuring provided name react documentation view formatted doc resource license copyright acton distributed epl
46,Lobsters,clojure,Clojure programming,Creating a SpaceX Crew Dragon simulator autopilot in Clojure,https://medium.com/@thedanpetrov/creating-a-spacex-crew-dragon-simulator-autopilot-in-clojure-1ac095d9209b,creating spacex crew dragon simulator autopilot clojure,creating spacex crew dragon simulator autopilot clojure spacex crew dragon webgl docking simulator degree freedom dof aligned approach rate clojure functional programming control webdriver etaoin key binding telemetry driver main thread velocity vector component rotation simultaneously sequentially locking problem functional programming http githubcomdanirukunspacexissdockingsimautopilot,creating spacex crew dragon simulator autopilot clojurespacex crew dragon nasain preparation spacex crew dragon first crewed mission late may spacex released pretty cool little webgl docking simulator featuring dragon spacecraft getting docking done successfully time realised perfect opportunity write docking autopilot one even approach problem like orbital spacecraft bit different would consider normal vehicle like car airplane space degree freedom dof meaning go updown leftright roll clockwiseanticlockwise etcthat great actually dock context simulator successful docking mean perfectly aligned docking port issour final approach rate contact certain valuewe want crash multimillion dollar spaceship anything along wayif break problem simply consists aligning dragon aligned i docking port flying docking port slowlyfor language using clojure lisplike functional programming language run jvm highly extensible simple lot library powerful concurrency abstraction absolutely need laterthe first step obviously figure control simulator best way drive browser day using webdriver api client library send command side create control interface code entire project using etaoin fantastic pure clojure implementation webdriver protocolspacex i simulator gui launchwhile simulator clickable onscreen control also key binding take advantage next automated spacecraft hopeless telemetry short know looking looking well space luckily good engineer spacex made easily locatable element information hud driver get info fromafter writing bunch locator parser nice way getting data need hud lie first problem hud update information time moving spacecraft need continuously fetch new telemetry make available future control system without blocking main thread loop clojure concurrency really shine simply create recursive poll function use future put separate thread move main thread forwardwe also need somehow keep telemetry data state also threadsafe luckily atom come rescue use swap simply update telemetry new data might noticed also calculation using x z coordinate ship unfortunately hud give u velocity vector component calculate using distance time differentialthe next step writing alignment function rotation control axis roll pitch yaw boil simple logic however next problem alignment need keep going time axis simultaneously mean try sequentially encounter locking problem roll alignment function might blocking yaw getting aligned killing rotation etcthis future come rescue concurrent future control axis println rotation alignment enabled future dragonalignrollrot chr future dragonalignpitchrot chr future dragonalignyawrot chr rotation sorted next step write logic approachwe need align z ax well steadily move x axis already wrote velocity component calculation dereference telem telemetry atom whenever need tothe tricky part writing right logic rcs firing phase start pushing much one direction time becomes uncontrollable swaying motion burning lot fuel came approach implementing deadzone fire thruster wrong way much basically nearly spot use future translation alignmentwith everything tied together roughly thread look like control function use telemetry conclusion spaceship hard people spacex nasa obviously know much better however fun exercise think automatic docking system work real life well demonstrate functional programming concurrency really shinesyou go check code github http githubcomdanirukunspacexissdockingsimautopilotsmall demo video showing autopilot
47,Lobsters,clojure,Clojure programming,Array languages for Clojurians,http://www.appliedscience.studio/articles/array-programming-for-clojurists.html,array language clojurians,array language clojurians array language lisp programmer j apl q array function corematrix arraymaking tool integersequencecreating mailing list comment good use case transducer array reducer kenneth e iverson primitive try apl lisp machine keyboard personal view apl feeding omitting parameter q doc idiom puzzle complanglisp post parsing identifier,array language clojurians discussion clojure data science zulip led slobodan enlightening article array language lisp programmer journal british apl association quote alan perlis language affect way think programming worth knowing lisp clojure course qualifies one mindaltering substance arguably qualifies basis focus immutability article point arraybased language j predecessor apl programming language proprietary q equally mindexpanding see remains compelling array programming approach problem compare approach array function array language make simple easy work whole container way work scalar look j first array programming example oneliners result following line start adding scalar array operator work multiple array elementwise one operator pretty handy course replicate outofthebox clojure map partial map arithmetic function lack numberarray polymorphism use multimethods achieve precisely property defmulti j fn args cond number first args number sequential first args sequential else class first args defmethod j number n x map partial n x defmethod j sequential y x map x y nsunmap n j one function add scalar vector vector vector j j may need daytoday kind mathematical programming want clojurians situation often reach library like corematrix take similar approach arraymaking tool work fluently multidimensional array one need way create fluidly integersequencecreating operator creates prepopulated array arbitrary dimension people say lisp terse operator produce array given shape row column populates incrementing integer sequence function make simple implement defn idot n take n partition range idot also going need something turn sequence value array matrix desired shape j operator fairly slapdash clojure replication might conceive repl take partition cycle abcde look familiar similar end using clojure function implement defn shape n coll take n partition cycle coll shape vec abcde shape range one might legitimately say clojure version readable concise optimized performance way could array language fair point specialized language leeway focus performance optimization effort still found interesting one array language idl ran performance concern clojure w hen nested operation vector step idl might create possibly large temporary storage intermediate result really big datasets one would play trick make allocate large enough contigious block memory special declaration tell compilerevaluator calculating temporary discarded soon mailing list comment original article course drawback rich hickey encountered lazy sequence make lazy sequence bad merely unsuited one particular set requirement suggesting need different tool situation case gave rise transducer avoid creating intermediate cached value creating single compound transformation use one eager pas input see good use case transducer demonstrates power generalpurpose language able deal varying requirement without switching language particular feature array reducer creator apl cocreator j kenneth e iverson wrote formal education mathematics fundamental notion apl drawn largely mathematics suggests one twocharacter primitive found language find ancestry mathematical symbol confirm tracing back predecessor apl actual lowercase greek letter iota standing integer instance one would enter expression generate first integer apl keyboard layout meant program apl required specialized keyboard experience replicate browser try apl modern programmer bespoke piece input hardware programming language may seem bizarre clojurians remember lisp lineage trace back entire computer architecture lisp machine including series keyboard designed around programming language close relationship mathematical notation occurs ask aplderived language represent mathematical function like sum product sequence clear use array programming j achieves adverb cleverly designed power individual symbol operation adverb applies verb produce related verb thus verb iverson personal view apl j entire system modifying function create new one one elementwise arithmetic operator like replicated earlier transform arrayconsuming version combined lisper recognize power approach right away solve problem similarly generalizable solution higher order function let u reduce sequential collection way like reduce apply applying adverbed multidimensional array cause work columnwise next example remember return equivalent compute outofthebox clojure map variadic collection apply map shape visualize apply map idiom rotating sequence degree feeding sequence function could also use j defined giving u closer translation adverb let j solve something like factorial simply consider j expression find easiest read righttoleft create array element long incrementing integer starting increment compute product sequence robotically transliterate clojure piece piece range map partial reduce reduce j range personally would probably use reduce range omitting parameter another cool feature q caught eye ability omit argument function like xyz x z xyz honest snippet article confused deeply example little underspecified q doc topic help need take brief detour signed lambda function definitionandinvocation q x x x x clojure would write fn x x x x define anonymous function sum square double parameter x call argument q doc point function fewer argument may omit signature instead use default argument name x z allows u rewrite concisely unsigned lambda clojurians dub anonymous function x x x clear anonymous function syntax provides general version syntactic sugar instead providing implied argument z clojure provides n interesting note tradeoff two approach n longer allows greater variability xyz may readable likely conflict existing name tend stick avoid unless something obvious like compare idiom blazeski ported omittedarguments feature common lisp using macro clojure already anonymous function syntax baked macro reader literal would give u access anyway may useful remember come across syntactic feature another language clojure lesson clojure ahead curve though lisp macro endlessly extensible blazeski put seems always old story soon lisp integrates needed utility invests domainspecific language advantage language lost big ball mud like warlock able steal power still staying clojure avoided lisp language big ball mud reputation building fresh foundation syntactic extension clear consistent effective abstraction point stand superhero take new power touch puzzle programming world seems mostly moved arguing language effectiveness code golf course truly blessing make exception pedagogical ground problem undated complanglisp post extolling virtue predecessor k list element duplicate trying figure find duplicate element increase counter value instance element found list consists list two element first incremental counter second string sought example one two three one four two result one two three four array programming solution impressively concise quite readable v input value count flip count group v unique v repeat common lisp solution fine problem illformed one could solve asis v input value reduce fn acc x con list count x acc list groupby second v look little askance answer programmer especially clojurians work problem really solving sifting true problem stated requirement vital skill ignore crufty halfsolution implied problem statement solve true hidden task frequency one two three one four two delightful simplicity right data structure welldesigned standard library parsing identifier already explored benefit array language concision function change according input adverb opportunity opened thinking higher level container abstraction finish one translation exercise piece haskell code go parse tree haskell source code locates every reference identifier end widget put list remove duplicate every identifier represented list haskell extractwidgets data string extractwidgets nub map hsident listify iswidget iswidget hsident actionname widget issuffixof actionname true iswidget false q distinct raze x like widget lisp defun widget l unique keep f like x widget flatten l clojure defn widget tree distinct filter stringendswith widget flatten tree take test drive widget abcwidget foo abcwidget bar abcwidget defwidget baz abcwidget defwidget qrswidget tuvwidget qrswidget xyzwidget nice travel try food learn phrase visit monument show u strongly history mold culture differently life lived visit programming language community broaden horizon remind sometimes folk different tool different need sometimes need tool different set name dave liepmann may
48,Lobsters,clojure,Clojure programming,Building Raft in Clojure,https://phillippe.siclait.com/blog/raft-in-clojure,building raft clojure,building raft clojure distributed system immutable data structure referential transparency coreasync communicating sequential process csp faulttolerant state machine consensus total order leader election log replication safety extended raft paper leader election log replication extended version paper secret life data visualization github repository siclait,building raft may min readdiego ongaro john ousterhout created raft understandable algorithm achieving consensus distributed system post describe built implementation raft clojurelast year conversation blockchain startup friend suggested many blockchain project poorly designed creator studied distributed computing found interesting know enough distributed system understand deeper exposure field could led better system design knowing phd distributed system asked recommendation could learn suggested robert class mit distributed system declaring among introductory course subject best asked make best replied lab series programming assignment student incrementally build sharded faulttolerant keyvalue store addition lab class schedule note research paper video lecture available course website excited learn organized study group met weekly local starbucks review assigned research paper discus coded lab second lab tasked student building raft instructor wrote test suite go writing lab go would path least resistance choose path least resistance instead wrote lab clojurei taking class fun wanted use language made coding enjoyable much fun coding project clojure interactive repl gave responsive feedback loop testing code change writing function would send repl test input ensure worked expectedfor example wrote function called findfirstconflict identify index log proposed entry added log conflict defn findfirstconflict previndex log entry fn index let entryindex index previndex entryindex count entry previndex index nth entry entryindex term logterm log index index range inc count log calling function repl able verify function work raft findfirstconflict term term term term term term term term language immutable data structure made simple ensure referential transparency throughout code referential transparency coupled repl enabled easy debugging large chunk application logic presented detail raft algorithm structure code share example setup made debugging easyi also made heavy use concurrency library coreasync library realization tony communicating sequential process csp similar inspired implementation csp restricted communication thread passing immutable data structure coreasync channel choice freed think locking associated deadlock bugsthe repl immutable data structure coreasync helped write clean code cost using clojure mentioned courseprovided code written go choosing clojure added hour work translating test library code could start lab fun personal project thought worthwhile tradeoff decided use clojure able begin building lab describing built need describe problem raft solvesto begin imagine stateful server responds request update query state single server system faulttolerant failure single server cause entire system become unavailable think server instance state machine one solution faulttolerance problem replicate state machine across multiple server system survives failure one server creates another ensure set server maintains consensus state problem raft built solvei started coding three principle mind first built everything around core event loop responsible state update side effect event loop continually pull operation operation channel process sequentially via handler second made event handler referentially transparent handler take input current raft state operation return two value statedelta effect statedelta map representing state modification need made effect list side effect need executed side effect include pushing operation onto operation channel sending rpcs replying rpcs modifying timer returning side effect value instead executing handler made debugging easier third restricted communication rpc client main event loop channelsthese three central event loop pure function handler communication via best illustrated handle function function executed event loop iteration take argument operation opmap pulled operation channel given current raftstate operation executes appropriate handler via case expression applies statedelta finally executes effect side effect mutation limited transitionstate runeffects function note use convention function end bang may mutate state execute side effect code snippet removed number case case expression brevity defn handle raft key op opmap let key opsch persister state raft raftstate raftstate state statedelta effect case raftstate op candidate electiontimeout startelection raft candidate receivedvote handlevote raft vote opmap candidate appendentries state follower fn replaceop aput opsch opmap candidate requestvote follower requestvote leader requestvote handlerequestvote raft opmap additionaleffects transitionstate raft statedelta effect concat effect additionaleffects runeffects effect recur following three principle guaranteed every iteration event loop deterministic easy debug even though overall application nondeterministic ordering operation operation channel sole source nondeterminism basic principle place dig raft algorithmthe core system log purpose raft log maintain total order set operation order operation log represents list state transition taken state machine restore state state machine operation log applied successively state machine starting initial state raft guarantee consensus across state machine ensuring order committed entry raft instance logsraft separate consensus problem three component leader election log replication safety author claim decomposition important reason ease understanding post going touch first two component safety topic add restriction leader election log entry commitment necessary guaranteeing consistency information safety recommend reading section extended raft paperraft instance one three different state leader candidate follower leader election process selecting privileged leader server responsible replying client query replicating state raft instance single leader moment time raft solves problem determining order operation correct correct order order selected leaderthe system start instance follower follower election timer trigger election completion follower receives heartbeat leader receives request vote election timer reset without triggering election simplify timer management created timekeeper abstraction instance timekeeper instantiated configuration timer timer communicate main event loop operation channel timekeeper election callback aput opsch op electiontimeout timeoutfn minelectiontimeout randint electiontimeoutrange heartbeat callback aput opsch op sendheartbeat timeoutfn constantly timer timeout function timeoutfn instead static timeout value election timeouts randomized invocation help avoid case election timer continually complete timewhen follower trigger election becomes candidate request vote peer via requestvote rpc candidate receives vote majority peer transition leader leader periodically sends heartbeat message via appendentries rpc follower ensure continue recognize leaderin implementation two rpc endpoint simple responsible pushing operation onto operation channel reading reply reply channel main event loop responds rpc using reply channel provided operation map defrecord raft iraft appendentries args let replych achan aput opsch op appendentries payload args replych replych replych requestvote args let replych achan aput opsch op requestvote payload args replych replych replych system enforces consistency across raft instance log via log replication leader receives request client commit command log first add log broadcast command via heartbeat follower commitment important concept raft raft guarantee consistency across replica committed command follower successfully add command log reply rpc success true leader receives success notification majority follower leader commits command log reply client follower notified latest commit next heartbeatas developed raft application repl helpful tool evaluating handler function point development could construct raft state request map pas handler function ensure response expected example could test sending appendentries rpc request follower date leader guarantee follower change state statedelta nil effect returned reply rpc success false raft handleappendentries raft request nil function rafthandleappendentriesreplytoappendentries lot detail missing post system ensures consensus face failure hope present high level overview raft repl pure function channel help implementing complex concurrent system interested understanding raft algorithm depth recommend extended version paper secret life data visualizationif like lab clojure created github repository translated go code translation june also study group reddit siclait continue conversation
49,Lobsters,clojure,Clojure programming,King releases the Defold game engine under a permissive license,https://defold.com/2020/05/19/Defold-is-now-open-source/,king release defold game engine permissive license,learn defold open source page,mobile game company king today announced free use defold game engine sharing source code inviting collaborator partner part process king transferred defold software foundation defold foundation stockholm sweden may mobile game company king today announced defold game engine sharing source code inviting collaborator partner part process king transferred defold software foundation defold foundation defold foundation taken full ownership defold product service including website build server user forum social medium channel source code available github immensely proud able make defold source code available open contribution eager start journey free use source available game engine together great community game developer building game using defold would also wish thank king believing vision entrusting defold defold foundation say björn ritzl product owner defold foundation developer original development team leave king work full time defold behalf defold foundation foundation work closely developer community industry partner drive new development beyond defold foundation board headed sara cederberg king include industry profile elin eriksson woman tech sweden hugely impressed defold team look forward seeing many great gaming experience come life seen million player already playing king game run defold engine excited see community come together even support defold foundation say tjodolf sommestad chief development officer king defold foundation defold foundation owner free use developerfriendly source available game engine defold foundation work together industry partner provide free open software service game developer across globe foundation created may registered stockholm sweden defold defold free use source available game engine developerfriendly license used development crossplatform game defold used growing number developer create commercial hit well game game jam school teach game development defold known ease use praised technical documentation friendly community developer king king leading interactive entertainment company mobile world million monthly active user first quarter across web social mobile platform developed exclusive game enjoyed around world kingcom facebook mobile distribution platform apple app store google play store microsoft window app store amazon appstore king acquired activision blizzard nasdaq atvi february king game studio stockholm malmo london barcelona berlin along office malta san francisco sara cederberg chairperson defold foundation sara defoldse björn ritzl product owner defold foundation bjorn defoldse learn head defold open source page learn contribute support foundation
50,Lobsters,clojure,Clojure programming,Announcing Clojurists Together Summer of Bugs,https://www.clojuriststogether.org/news/announcing-summer-of-bugs/,announcing clojurists together summer bug,announcing summer bug lvh operational apply recent survey result,announcing summer bug lvh may ever wanted take day fix annoying bug finally ship feature clojurists together foundation want make happen clojurists together foundation operational flexibility fund open source work one recurring community request smaller grant people feel good work done ideal position entire quarter worth summer bug introducing funding important work take place scale day month application open anyone plausibly demonstrate ability proposed work previously funded project maintainer maintainer course still welcome apply expanding application process include contributor expert user calling summer bug miniprojects limited fixing issue important feature roll fine plenty project would really benefit someone spending day two tending issue tracker contributor effective perhaps existing feature living potential undocumented surprise u love support project later stage want explore funding experimental work clojure community trying change one variable time therefore expect minigrants mostly targeted sort core open source infrastructure funded past initial approach people request microgrant minigrant hoping allocate budget though somewhat dependent available fund committee vote submission rank based impact pick top n reach budget based overall impact clojure community continue gauge impact based information member survey well third party datasets annual state clojure survey please continue fill help guarantee quality decision making apply grant announcing result end may thinking project apply take look recent survey result kind project member interested funding
51,Lobsters,clojure,Clojure programming,Announcing the Clojurists Together Foundation,https://www.clojuriststogether.org/news/announcing-the-clojurists-together-foundation/,announcing clojurists together foundation,clojurists together changing mean practice member saying clubhouse summer bug access member data transparency credit card mean need company member developer member election annual general meeting happens fund still conservancy legal document clojuriststogether acknowledgement,clojurists together clojurists together organisation dedicated funding supporting open source software infrastructure documentation important clojure clojurescript community changing late clojurists together board formed trade association clojurists together foundation clojurists together clojars fiscal sponsoree software freedom conservancy conservancy conservancy notforprofit charity help promote improve develop defend free libre open source software floss project conservancy instrumental launching clojurists together grant program funding grantee usd date clojurists together grown succeeded mission become clear ready organization clojurists together foundation able control operation timeline unlike conservancy charity clojurists together foundation trade association feel describes work hope future better worked closely lawyer make sure gotten detail right clojurists together foundation purchased trademark conservancy creating new program name conservancy spend money receive trademark sale along remaining asset hold clojurists together activity suitably charitable hold fund mostly operational measure big picture work change legal entity behind legal detail accomplish clojurists together foundation move forward board member domain name overarching goal funding supporting software infrastructure documentation important clojure script community mean practice clojurists together legal entity flexible kind work sponsor last two year talked maintainer applying theme come three month parttime long project maintainer prefer work full time project compressed time scale usd grant much people small amount work wanted project wanted apply le money previously almost overhead whether funded project bandwidth support large amount small grant clojurists together able significantly flexible opening survey office hour next month want hear clojurists together best support open source clojure community send u feedback kind funding would work best need server hosting covered looking take open source sabbatical let u know would work going listening feedback announce new way funding project maintainer coming month member saying announcement talked new existing member clojurists together member said clojurists together provides invaluable service clojure community supporting unsung hero established project like clojars ring brave new soul pushing boundary making clojure ecosystem vibrant exciting paul stadig backend software engineer clubhouse juxt proud sponsor clojurists together support many individual make wonderful clojure ecosystem today malcolm spark technical director juxt nextjournal benefited immensely work clojurists together funded far look forward continue supporting community way dieter komendera nextjournal especially like welcome new filter member clubhouse developer member ryan zebian niklas heer aleksander sumowski patrick farwick mario trost alexander oloo paul rutledge sergey shvets summer bug first new program working something tentatively calling summer bug summer bug award number microgrant people working fix bug implement small feature write doc clean issue tracker read summer bug announcement access member data previously member data commingled entity meant direct access member detail lot manual work thing like mailing sticker transparency directly responsible finance looking forward able share information revenue expense balance sheet credit card talking business individual member big theme came desire use credit card instead paypal excited announce accept credit card payment u wire transfer time plan support paypal due operational overhead require though depending demand may consider payment method like use support get touch see mean one difference conservancy charitable organization specifically u based clojurists together foundation trade association incorporated delaware awarded taxexempt status similar ruby together linux foundation speaking tax legal professional expect minimal impact member note payment clojurists together foundation charitable donation unlike made conservancy likely still taxdeductible many member recommend talking tax professional specific need able transfer payment authority paypal new organisation need sign clojurists together foundation directly current clojurists together member received email inviting set account add card clojurists together website site also let view invoice manage email survey news invoice sent signed need cancel payment paypal instruction cancel conservancy cease accept donation behalf cancel recurring payment june would like join clojurists together sign company member developer member election paying close attention may remember clojurists together annual election normally held november due change legal structure delayed election mid hold election four seat reelection soon annual general meeting one responsibility trade association annual general meeting agm member allow formal place member bring idea question concern committee information announce first agm happens fund still conservancy legal reason related charitable taxexempt status conservancy transfer fund new legal entity therefore using remaining fund making grant fund still conservancy expecting soon virtually new fund added account conservancy hence relationship conservancy concluded within approximately year legal document view founding document github clojuriststogether acknowledgement like thank ruby together served model new organization particular like thank andré arko ruby together executive director gave u ton advice insight referral helped u set new legal entity like thank conservancy karen sandler help getting set starting clojurists together lastly like thank member clojurists together current former deeply grateful everyone supported work done filled survey sent u feedback given u money shared work others excited future clojurists together look forward able support clojure community even
52,Lobsters,clojure,Clojure programming,re-frame: clojurescript state management,https://day8.github.io/re-frame/,reframe clojurescript state management,,build web apps clojurescript leveraging react leverage dataoriented functional design advanced enough outlasted three generation javascript technical churn excellent developer productivity fewer line code hot code reloading simple dynamic model managed effect including state pure function variously declarative sophisticated app better
53,Lobsters,clojure,Clojure programming,Are We There Yet,https://www.youtube.com/watch?v=ScEPu1cs4l0,yet,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature yet rich hickey youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature yet rich hickey youtube
54,Lobsters,clojure,Clojure programming,Building Native macOS Apps with ClojureScript,https://increasinglyfunctional.com/2020/05/13/native-macos-apps-clojurescript.html,building native macos apps clojurescript,microsoft diligent opensource work remember krell reactnativetcpsocket microsoft macosrn instruction krell reagent tutorial work window,thanks microsoft diligent opensource work build app macos modern lisp connected repl everything u remember truly dankest timeline dependency krell requires vanilla react native reactnativetcpsocket compiles fine macos building macos app requires mashing together microsoft macosrn instruction krell start creating new react native mac app npx reactnative init krellmacos version cd krellmacos npx reactnativemacosinit note need specify version react native microsoft fork caught far next follow krell reagent tutorial set clojurescript project add depsedn deps iovouchkrell giturl http githubcomvouchopensourcekrellgit sha iovouchreagentreactnative giturl http githubcomvouchopensourcereagentreactnativegit sha reagent mvnversion exclusion cljsjsreact cljsjsreactdom probably grab latest sha iovouchkrell one least correct deps add buildedn main krellmacoscore outputto targetmainjs outputdir target add clojurescript source file srckrellmacoscorecljs n krellmacoscore require reagentcore r reagentreactnative rn defn hello rnview style flex alignitems center justifycontent center rntext style fontsize hello krell macos defn export main args raselement hello run clj cljsmain installdeps install krell npm deps install native dependency cd macos pod install cd ready go clj krellmain co buildedn c r build clojurescript source start repl npx reactnative runmacos build project launch connect interact repl change source see hotreload work window microsoft react native fork support window actually ahead macos fork missing piece reactnativetcpsocket library native binding window built instruction work window well
55,Lobsters,clojure,Clojure programming,Clograms tries to close the gap between code and diagrams,https://github.com/jpmonettas/clograms,clograms try close gap code diagram,clograms clograms clograms clograms look feature scan index draw project entity draw shape link search explore project browser source code navigation multimethod implementation function spec function xreferences protocol multimethods reframe aware hot code reload save share see demo give try clograms prerequisite index clojure project index clojurescript project http micro manual search node shape source code node shape node link function var node discover interesting project thing coloring saving diagram clograms developer info clindex build ui prerequisite run doc exported pdf related work framework roadmap,clograms clograms explore document clojure clojurescript project drawing diagram clograms try close gap code diagram creating diagram tool aware code diagram code helpful lot situation like reverse engeneering unknown code base document project high level architecture planning redesign clograms try help task combining visualization capability diagram application navigationexploration feature ides look feature scan index lein depsedn project draw diagram using project entity project namespaces var spec etc draw shape document explain part system link entity express relation quickly search system entity add diagram explore system dependency using project browser easily add entity using clograms source code navigation quickly figure multimethod implementation function spec function xreferences protocol multimethods one click away identify uncalled funcitions library help discover intended api reframe aware quickly explore subscription event fxs cofxs hot code reload change clj cljs cljc file project indexing change flow ui automagically save share diagram edn file see demo screencast coming stay tuned give try clograms available maven artifact clojars latest released version prerequisite index clojure project clj sdeps deps clograms mvnversion clogramsserver platform clj clojureprojectfolder index clojurescript project clj sdeps deps clograms mvnversion clogramsserver platform cljs clojurescriptprojectfolder indexing finish point browser http wait little bit load need transfer entire index browser also run browser app mode like googlechrome apphttp supported option try clj sdeps deps clograms mvnversion clogramsserver help micro manual search add node diagram using top bar search remember name function namespace project spec whatever type select option node added center diagram node multiple type node use diagram drag right side bar node support least remove context menu option filtered using input top right side bar multiple node selected holding ctrl key multiple node selected dragging drag selected node currently supported node shape circle rectangle database group user source code node project namespaces var spec reframe event sub fxs cofxs shape node shape also support edit text context menu use change shape label also resizable dragging bottom right corner link link created dragging one node port another node port arrow direction changed using arrow control top creating link link also support label edition using edit text context menu removed like node function var node clicking function call link add another function node front find function call reference using find reference context menu double clicking funcition reference automatically add node behind discover interesting project thing right click project node use find project protocol find project multimethods discover protocol multimethods inside project also right click project use find unreferenced function discover function definition referenced inside project useful two thing library help find function intended called user non library project help identify unused function coloring color node project namespace belong using context menu source code node current selected color used saving diagram current diagram save functionality ideal save restore diagram edn file click save button ui clograms create diagramedn file inside folder running read every time load ui also save diagram pdf file using browser print functionality hide toolbars print diagram developer info clograms based clindex clojure script source code indexer build ui prerequisite cd clograms make watchui start shadowcljs watch ui open browser http make watchcss watch garden file build cs file run index project runnning clj clogramsserver someprojectfolder clj also use cljs index clojurescript project doc find diagramedn file repo document aspect clograms also exported pdf related work framework framework authoring publishing maintaining software architecture diagram roadmap check
56,Lobsters,clojure,Clojure programming,Making of “Clojure as a dependency”,http://blog.danieljanus.pl/2020/05/08/making-of-clojure-dependency/,making clojure dependency,reproducible research git repo data acquisition github api search repository page content skyscraper graphql api bobby table closh babashka sci metabase bridge aleph data analysis plumatic graph plumbing fy visualize pr open ticket word plotting clojisr hugsql korma key takeaway,previous post presented result toy research clojure version number seen wild big believer reproducible research making available git repo contains code run reproduce result post experience report writing codethere two main component project acquisition analysis data implemented namespaces versionsscrape versionsanalyze respectively look turndata acquisitionthis step us github api retrieve popular clojure repository using search repository endpoint going page paginated result repository look file list master branch pick file named projectclj depsedn root directory using content endpoint parse file extract list dependenciesas hinted namespace opted use skyscraper orchestrate process would arguably simpler use graphql api wanted showcase custom parsing actual html scraping going processor use either json clojure parser skyscraper still able result traverse graph endpoint manner similar graphql little effort would possible restful api plus get goody like caching tree pruning freemost code straightforward parsing projectclj merit explanation initial assumption proved incorrect fun see initially tried use clojureedn leiningen project definition actually edn clojure code superset edn resort readstring core readeval bound nil otherwise code would clojure injection vulnerability think bobby table needle say projectcljs turned depend readevalsome project looking closh babashka sci keep version number outside projectclj text file typically resource slurp back projectclj expression defproject closhsci clojurestringtrim slurp resourcescloshversion trick employed one project metabase dynamically generate jvm option containing port number parse time test suite running time clash eval format dmbjettyport randint finally turned defproject always first form projectclj project like bridge contain placeholder projectclj form others like aleph first define constant refer defproject form constant contain part dependency list dependency processed correctly fortunately lot project skew result muchanyway end result acquisition phase sequence map describing project definition look like name clojurekoans fullname functionalkoansclojurekoans depstype leiningen page deps orgclojureclojure mvn version koanengine mvn version profiledeps dev leinkoan mvn version homogeneity important every dependency description converted clitools format even come projectcljdata long searching way exploratory programming clojure without turning code tangled mess portable along computerexploratory research programming different programming latter time typically focus coherent project program library contrast former spend lot time repl trying sort different thing defing new value derived already computed onesthis convenient extremely easy get carried away repl get lost sea defs want redo computation scratch option take repl transcript reevaluate expression one one correct order cleaning code eg deglobalizing go found answer plumatic graph part plumbing library plethora us example fy current workplace using define test fixture turn make exploratory programming enjoyablethe bulk code versionsanalyze consists big definition graph node representing computation thing normally repl consequently definition short point also gave node verbose descriptive explicit name name conquer rawrepos output data acquisition repos allimportant node containing rawrepos successfully parsed thing depend itit also obstruct much normal repl research flow normal workflow repl graph something along line def result main evaluate something using input resultnah lead nowhereevaluate something elsehey interesting add new node graph definitiongoto lazy compiler reevaluate anything need evaluate thing needed nothing else also graph explicit fairly easy visualize click image open fullsize another tab lazy hurt put extra thing case even going report example curious thing besides version number people put dependency exclusion sure else whatotherthingsbesidesversions nodeimagine surprise found exlusions sic turned typo projectclj submitted pr thomas heller merged day aftermy gripe graph run somewhat contrary current trend clojure community example support namespaced keywords although open ticket whole sold definitely using next piece research clojure lookout something similar pure r know something tell word plottingthe plot previous post generated pure r using extremely versatile api clojure generates csv munged data r read csv data frame generates plot briefly played around clojisr bridge clojure r enlightening experiment would let avoid intermediate csv decided ditch reason pull quite dependency wanted keep minimum requires previous setup r much rather write r r since comfortable rather spend time wondering map clojure similar sql story day prefer hugsql korma unless good reason choose otherwiseclojisr open child r process requireing namespace fan thatbut definitely promising applaud effort keep close eye itkey takeawaysskyscraper make data acquisition bearable funplumatic graph make writing research code clojure funggplot make plotting data funclojure make programming fun knew already
57,Lobsters,clojure,Clojure programming,"Migrating to Biff, a self-hosted Firebase alternative for Clojure",https://findka.com/blog/migrating-to-biff/,migrating biff selfhosted firebase alternative clojure,biff solo hacker guide clojure framework v library table content installation deployment database crux cloud firestore crux subscribable query firestore realtime update materialize implementation note readwrite authorization rule firebase security rule database trigger firestore trigger authentication firebase authentication findka home page clientserver communication calling firebase function static resource firebase hosting plugins config monitoring debugging multitenancy plugins config,biff like firebase web framework deployment solution share firebase core feature intended make web development clojure extremely easy biff targeted towards earlystage startup hobby project first time like become serious option apps need scale started writing biff six week ago last week finished moving findka away firebase aws still prerelease quality need add feature clean code write lot documentation since reached milestone running startup biff thought give preview current feature example using regular reader going resume solo hacker guide clojure project biff released become getting started guide biff liked firebase prefer longrunning jvm clojure backend ephemeral node clojurescript backend also felt several part firebase would better reimplemented clojure component example found firebase security rule errorprone hard debug replaced specbased version also picky wanted something completely control framework v library framework inherently bad hard get right instead trying make biff everything everyone making easy take apart easy eg use biff replace remaining component without forking biff also focusing providing lot configuration option overriding default behavior table content feel free jump whichever section interest installation deployment biff run completely locally development add biff project dependency run clj biffcore similar production running digitalocean install script ubuntu image eventually like provide install besides installing biff script configures firewall set nginx installs certificate via let encrypt droplet need nt mind filesystem persistence also using managed postgres backend crux biff us toolsdeps git dependency feature deployment example depsedn file production instance biff deps githubjacobobryantbiff giturl http githubcomjacobobryantbiff sha githubjacobobryantfindka giturl git githubcom jacobobryantfindkagit sha depsroot biff upgrade findka andor biff push github run git revparse head get latest sha ssh server update shas depsedn systemctl restart biff biff service add deploy key findka ssh agent since private repo run clj biffcore later include admin console analogous firebase console ui deploys deploy key rollback nt command line add option deployonpush also deploys currently result time planning make biff work additional droplet load balancer avoid findka current scale nt important yet database crux compare cloud firestore crux provides core feature immutability convenient modeling graph data datalog query also easy selfhost since run jvm process app biff set crux node default jdbc persistence production filesystem persistence via rocksdb development need provide jdbc connection parameter set use rocksdb production much else say see next three section biff add top crux subscribable query compare firestore realtime update biff allows subscribe crux query frontend one major caveat crossentity join allowed firebase also restriction basically mean clause query entity ok find doc doc foo doc bar hey ok find doc user name tilly doc user user clear biff subscribable query datalog predicate take advantage crux index biff make restriction provide query update client efficiently without solve hard research problem first however turn go quite far even restriction frontend biff provides code initializes websocket connection handle query subscription def defaultsubscriptions biffsub table user name ben age age age yourappcorelikescheese doc def subscription atom defaultsubscriptions def subdata atom biffutilinitsub subscription subscription subdata subdata want subscribe query swap subscription want unsubscribe swap biff populate subdata result query remove old data unsubscribe use content atom drive ui content subdata map form subscription docid doc example biffsub table user userid uuid someuuid name sven age note subscription format biffsub table user name ben age age age yourappcorelikescheese doc first keyword sente event id biff provides event handler biffsub provide subscription source changing event id register event handler backend handle subscribes unsubscribes notifying subscribed client data change actual query map omits entity variable clause since clause anyway bound doc case want use eg predicate function find similarly omitted table value connected authorization rule define backend see next section client subscribes query rejected unless define rule table allow query also whitelist predicate function call like yourappcorelikescheese though comparison operator like whitelisted powerful make subscription atom derivation subdata snippet findka us rum though rum nt required defonce db atom rumcorecursorin db subdata defcursors db subdata subdata rumcorederivedatom subdata findkaclientdbdata fn subdata apply mergewith merge vals subdata defderivations db subdata findkaclientdb data apply mergewith merge vals subdata id item item data event vals event data itemids event uid getin data uid nil uid userref userid uid self getin data user userref email useremail self signedin uid signedout uid biffsubs uid special noncrux query biff respond currently authenticated user id uid signedin table event eventtype user userref signedin subscribe individual document table user id userref id itemids table item id id subscription biffsubs flatten filter map vector biffsub set background findka recommender system kind content book movie etc item one content item contains least url often also title image short text description event could one five thing pick user pick item using search bar recommend findka algorithm recommends item user like user hit thumbsup item dislike opposite meh user unlikes undislikes item returning neutral event contains id relevant item used fetch metadata authenticated user go findka following happen client subscribes uid ie subscription contains biffsub uid subdata populated user id signedin change true biffsubs get updated client subscribed current user event user info includes thing like email address subdata populated data ui display user email address using event itemids get populated list id item displayed user feed right client subscribes metadata item arrives ui display item along current thumbsupdown value meant said go pretty far without crossentity join using method declaratively load relevant data perform join client sufficient many situation however wo nt work need aggregation set document large send client handle like try integrating materialize priority yet implementation note lot work left particular subscription notifying code race condition need fix however see reason general approach would nt scalable biff watch crux transaction log transaction get list changed document value transaction go list subscription find one affected easy efficient operation thanks nocrossentityjoins restriction also client currently nt optimistic writes result findka responds slightly sluggishly hit thumb upthumbs terrible though whole round trip nt take long add optimistic writes soon automatically rolling back transaction fails readwrite authorization rule compare firebase security rule client send arbitrary subscription transaction backend must pas authorization rule define findka rule sdef biffutilsdefs providerid sor artisttitle stuple string string somefn int string provider keyword contenttype book music timestamp inst eventtype pick like dislike meh recommend itemid uonlykeys requn contenttype provider providerid userid uuid refuser uonlykeys req userid event uonlykeys requn providerid provider contenttype eventtype timestamp refuser showmodal boolean admin boolean tester boolean unsubscribed boolean user uonlykeys req useremail optun showmodal admin tester unsubscribed def rule event spec uuid first spec document id event second spec document create fn key currenttime authuid generatedid key timestamp user eventtype doc authuid userid user currenttime timestamp recommend eventtype generatedid query fn key authuid key user doc userid user authuid pick spec uuid sand event pick eventtype item spec itemid get constantly true user spec refuser user get fn key authuid key userid doc authuid id update fn key doc olddoc authuid authuid userid doc apply map dissoc showmodal doc olddoc key rule table sql database table defined database layer firebase call table collection biff table defined value spec table set document satisfy spec predicate whenever client read writes data specifies table document belongs backend verifies document satisfy spec verifies operation pass relevant authorization function create update delete query get example user may create new event document long document exactly key providerid provider contenttype eventtype timestamp user value satisy respective spec document id uuid user value set authenticated user id timestamp value set server received transaction set client event pick like dislike meh event document id randomly generated server set client query described previous section transaction look like sendsenteevent bifftx event contenttype music provider lastfm providerid breaking benjamin give sign eventtype pick timestamp dbcurrenttime user findkaclientdbuserref user findkaclientdbuserref dbupdate true showmodal false transaction map idents document first element ident table second element present document id omitted mean creating new document want server set id random uuid also dbcurrenttime replaced server current time dbupdate true given document merged existing document failing document nt exist also dbmerge simply creates document nt exist ie upsert delete document setting nil transaction nt actually map want create multiple document table random id use nested vector instead bifftx event contenttype book event contenttype movie database trigger compare firestore trigger trigger let run code response document writes must define map table operation fn example defn fetchmetadata key biffsubmittx doc db env let itemid delay tridentutilletdelay itemid findkautilevent itemid doc item fetchmetadata env itemid cruxentity db itemid item submittx assoc env tx cruxtxput merge item cruxdbid itemid itemid def trigger pick create fetchmetadata user add new content item findka trigger fetch metadata see previous section definition pick table authentication compare firebase authentication ok email link authentication ie user click link email sign biff handle otherwise roll authentication biff provides set http endpoint example click get started button findka home page findka sends post request apisignup email parameter configuration file specify function biff use send email biff receives post request creates new user generates link jwt authenticate user pass along template parameter emailsending function findka email function def template biffauthsignin fn key biffauthlink subject sign findka html rumcorerenderstaticmarkup div p received request sign findka using email address p href link click sign p request link ignore email biffauthsignup recommend defn sendemail apikey opts httppost str http basicauth api apikey formparams assoc opts findka contact mailfindkacom defn sendemail key text template data apikey opts template ifsome templatefn get template template sendemail apikey assoc templatefn assoc data biffutilanom incorrect email template found template template sendemail apikey selectkeys opts subject text html findka pass api key closure biff nt set emailed link go another http endpoint biff defines validates jwt set session cookie also endpoint signing existing user signing checking current user authenticated use last one redirecting various page like support password sso authentication future priority yet since email link authentication work well findka clientserver communication compare calling firebase function biff set immutant web server reitit routing also initializes sente connection biff applies default middleware overridable provide reitit route object sente event handler biff default middleware include system resource crux connection requestsevents frontend biff provides function sending sente event http endpoint use http client like cljshttp directly latter calling endpoint requires authentication using biff authentication include biff csrf token xcsrftoken header token stored csrf cookie defn csrf jsdecodeuricomponent get new goognetcookies jsdocument csrf making request form set hidden csrf form server ssr page j static page note many crud operation biff readwrite authorization rule allow submit query transaction directly frontend avoid proliferation endpoint findka currently three http endpoint one event handler including biff endpoint handler static resource compare firebase hosting biff copy static resource wwwyourwebsitecom directory production www symlink varwww served directly nginx development jvm process serve file directory biff look static resource two place first biffstaticpages configuration option set map path rum data structure example findka look like require findkastaticutil util def app utilbasepage script script src cljsappmainjs showfooter false app utilloading def signupsuccess utilstaticpage signup successful p please check inbox confirm email address def notfound utilstaticpage page found p try href home page instead def page home app app signupsuccess signupsuccess notfound somepage html biff export page html startup second biff look resource wwwyourappns classpath subset findka resource directory www findkabiff cljs â app â mainjs cs â bootstrapcss faviconico img â demogif j ensuresignedoutjs see currently commit generated resource except html file including cljs compilation output git repo however easily add initialization code app instead generates resource downloads ci server deployment like add cdn integration eventually plugins config run clj biffcore biff search classpath plugins start certain order define plugin must set biff metadata namespace set component var list plugin object namespace biff come three plugins n biff biffcore require biffsystem refer startbiff biffutil bu def core name biffcore start fn sys let env keyword systemgetenv biffenv prod biffcorekeys startnrepl nreplport instrument nreplport sys merge sys bugetconfig env sys def console name biffconsole requires biffcore requiredby biffwebserver start fn sys sys merge consolebiffauth onsignin onsigninrequest biffsigninrequest onsigninfail biffsigninfail onsignout biffsignin startbiff consolebiff def webserver name biffwebserver requires biffcore start fn biffwebkeys host handler port sys let server immrun ifsome handler get host handler servername handler status body found header contenttype textplain port port update sys tridentsystemstop conj immstop server def component core console webserver biff us requires requiredby value start plugins right order think plugins kind like ring middleware receive system map return modified version biffcore plugin read configuration option configedn file merges system biffconsole plugin start biff instance administering app right actually used anything later use serve web admin console use thing like deploying app like firebase console also good place internal apps custom console extension data like keep separate app database example text metadata article stored biffconsole database another biff plugin writes findka blog post findkacomblog also crossposts jacobobryantcom serve personal website biff finally biffwebserver start immutant web server shared plugins example startbiff among thing return update sys biffwebhost handler assoc host handler exceprt findka plugin n biff findkacore require defn startfindka key findkamailgunapikey sys sys merge findkabiffauth sendemail sendemail assoc apikey apikey onsignup signupsuccess onsigninrequest signinsent onsigninfail expired onsignin app onsignout findkabiff fnwhitelist map eventhandler wshandlersapi data trigger triggerstriggers rule schemarules route httphandlersroute staticpages staticpages startbiff findkabiff def component name findkacore requires biffcore requiredby biffwebserver start startfindka name findkablog requires biffconsole findkacore start blogwriteblog findkabiff argument pas startbiff namespace findka biff config option also used decide look static resource thing like since two instance biff running set default biff option biff apply biff console findka set option specific biff instance putting namespace eg findkabiffhost findkacom return value also found given namespace subsequent plugins example blog plugin get crux connection consolebiffnode findka config file prod timbrelevel info biffcruxjdbcuser biffcruxjdbcpassword biffcruxjdbchost biffcruxjdbcport consolebiffhost biffjacobobryantcom consolebiffcruxjdbcdbname biff findkabiffhost findkacom findkabiffcruxjdbcdbname findka findkamailgunapikey findkathetvdbapikey findkalastfmapikey findkayoutubeapikey dev inherit prod biffdev true consolebiffhost localhost findkabiffhost localhost timbrelevel debug since store secret keep file version control want manage secret andor config way easily add biff plugin run first monitoring debugging much provided box right watch server log includes stdout app ssh username yourwebsitecom journalctl u biff f get analytics feeding nginx log goaccess tunnel nrepl connection running ssh nl username yourwebsitecom connect port editor get system resource config biffcoresystem biff provides helper function stopping restarting system careful course found quite wonderful fixing production bug quickly multitenancy mentioned plugins config run multiple biff instance database minimum mean run biff console app server using biff side project could easily make biff instance one nt know significant overhead starting additional crux node though another option write apps share biff instance thus database fact dream apps want use written biff plugins running server control data single database kind thing become common think would large implication software industry opensource predominantly used building block web apps closedsource distribute opensource web app push git repo let nontechnical biff server example imagine music app store user music personal digitalocean object storage biff plugin could provide web player api mobile apps could opensource recommendation algorithm pick song play could integration bandcamp easily add new song collection would great content publishing social networking content create article photo video tweet whatever would stored server could published various place personal website hosted biff course r feed social network via apis personal mailing list mom digital photo frame email address adding picture really took predict commercial software consumer would mainly useful form apis music example findka could provide api compare listening history findka user recommends new music could web email client biff us mailgun mail server case final application would opensource thus easy tweak extend dream come true dream anyway
58,Lobsters,clojure,Clojure programming,Kosmos: experimental graphical development environment for Clojure,https://www.youtube.com/watch?v=DTHAY9-1UhI,kosmos experimental graphical development environment clojure,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kosmos experimental graphical development environment clojure youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kosmos experimental graphical development environment clojure youtube
59,Lobsters,clojure,Clojure programming,Volcano: static web framework with hot code reloading,https://github.com/OrgPad-com/volcano,volcano static web framework hot code reloading,building static web hotcode reloading figwheel introduction coding flappy bird orgpad landing page hiccup library le garden stasis oz work shadowcljs reagent quick start volcano leiningen template setting defining website config bidi live code reloading development shadowcljs nodejs http lein le garden building static web production indexhtml contacthtml structure config map bidi data structure loading static file including script example website,building static web hotcode reloading remind fertile land built fire volcano andrea gibson madness vase well really love hotcode reloading developing single page application spa clojurescript introduced figwheel well nt seen amazing video watch figwheel introduction coding flappy bird mean go watch right orgpad happily using development nt even data persistence first two month wanted rebuild landing page requirement consist static webpage linked together minimum amount javascript cs load really fast even slow mobile connection wanted use clojure script able connect rest codebase originally generating html using hiccup library change reload file repl reload browser see result incredibly slow tedious used instant code reloading spa use cs generator le garden also reload browser every change looking existing clojure solution stasis oz others either build different purpose generating large web generating easy blog scientific visualization difficult set either restrictive giving function use build infrastructure hotcode reloading autoupdating cs file wanted included therefore build volcano microframework generating static web familiar clojure script get running minute work write single config map describing entire website page sequence data hiccup format development volcano run web spa using clojurescript shadowcljs reagent change config map see immediately production volcano build static html file web using clojure deploy online process since code runned clojure clojurescript written cljc file quick start use volcano leiningen template quickly start static website project lein new volcano projectname use optional le garden cs generator get project two example page configuration needed run volcano consult generated readmemd setting next explain setup volcano part existing project first include dependency project defining website config somewhere cljc file define config map n mywebconfig require bidibidi b def route indexhtml pageindex contacthtml pagecontact defn index list index div style color green introductory text href bpathfor route pagecontact go contact ul index range li element inc index defn contact list contact div email address b info orgpadcom href bpathfor route pageindex back index defn config resourcedir resource targetdir build page pageindex hiccup index pagecontact hiccup contact route route defaultroute pageindex defaulttemplate html head title website title meta charset link href cssmywebcss rel stylesheet type textcss body volcanohiccups excludefiles indexhtml excludedirs j defining routing website using bidi giving hiccup two page putting everything together single config map live code reloading development live code reloading development write following code cljs file n mywebdev require volcanodev volcano reagentdom rdom mywebconfig config defn mountroot rendering current page inside div app element volcanoloadscripts configconfig rdomrender volcanorender configconfig getelementbyid jsdocument app defn init init function dev volcanosetrouting configconfig mountroot function init called dev loaded browser setting routing history everytime code changed mountroot function called rerendering page content inside resource subdirectory add indexhtml template following doctype html html lang en head title myweb dev title meta link href cssmywebcss rel stylesheet type textcss head body div id app div script src jsmainjs script body html unfamiliar shadowcljs need install nodejs run following project directory npm install g shadowcljs npm install react npm install reactdom npm install createreactclass write shadowcljsedn file looking like sourcepaths src dependency reagent bidi orgpadvolcano venantiusaccountant binaryagedevtools nrepl port build web target browser outputdir resourcesjs assetpath j module main initfn mywebdevinit devtools httproot resource httpport afterload mywebdevmountroot watchdir resource browserinject main run development open http browser see website immediately click link change current page shown change routing add new page need reload browser also run nrepl server port great interactive development also update used cs file inside resource instance running lein le garden change immediately show browser code spread multiple namespaces recommend either using function zero argument instead defining symbol using var config instead config otherwise hotcode reloading might propagate change correctly alternatively add reloadstrategy full devtools shadowcljsedn larger web might slow everything building static web production call function clojure buildbuildweb configconfig call repl put inside main running via lein run done template copy nonexcluded static resource build directory build single html file defined page config get following html file pretty printed indexhtml html head title website title title meta charset link href cssmywebcss rel stylesheet type textcss head body class colored index div style color green introductory text href contacthtml go contact div ul li element li li element li li element li li element li li element li li element li li element li li element li li element li li element li ul body html contacthtml html head title website title title meta charset link href cssmywebcss rel stylesheet type textcss head body contact div email address b info orgpadcom b div href indexhtml back index body html call repl put inside main running via lein run done template copy nonexcluded static resource build directory build single html file defined page structure config map following key currently used resourcedir path resource directory static file image cs etc copied targetdir path buildbuildweb function build static web directory erased start route bidi data structure describing route web route used static page easily link static website spa page map pagesid map describing single generated page pageid keyword map us key hiccup sequence hiccup one top element page development inserted inside div id app indexhtml production replace volcanohiccups page template style use reagent map automatically expanded string ie style color red padding becomes style color red template set used page instead default template see template work outputpath set output path used instead route path instance might route intro set output path introhtml defaulttemplate arbitrary hiccup used generate page production ocurrence volcanohiccups replaced sequence page hiccup also resource key replaced recursively defaultroute pageid displayed development address match page route resource map resourceids sequence hiccup resourceid used within hiccup template replaced sequence replacement work recursively script sequence resourceids whose code evaluated development tested development excludedirs set dirs excluded copying resourcedir targetdir production excludefiles set file excluded relativepaths set absolute path replaced relative path pathprefix replaces absolute path prefix navbar set true navigation bar page placed top page development useful page linked together instance generating email template loading static file since development run spa browser easily load file disk use shadowresourceinline macro load file compilation time inlines content string file placed inside src directory instance suppose srcmywebtesttxt get content call following resourceinline mywebtesttxt use resource map easily include loaded content page store using resourceid resourcetest resource map place id anywhere inside hiccup template update srcmywebtesttxt value immediately changed browser well use include script piece code etc road might add markdown parsing well including script include external script add script tag src inside html development add indexhtml even needed generated page static website add inside page template include inline script need eval development able access clojurescript load inline script file resource add resourceid script development script get evaluated hot code reloading whenever code updated building static website include resourceid template attach j function event write different code development building static website using reader literal development attach clojurescript function calling j function using j interop building static website call j function string divbutton clj onclick send cljs onclick jssend send example website built something volcano let u know add
60,Lobsters,clojure,Clojure programming,Clojure as a dependency,http://blog.danieljanus.pl/2020/05/02/clojure-dependency/,clojure dependency,cljtagsoup tldr possible clojure project declare dependency clojure leiningen documentation maven documentation clitools boot existing project,shameful confession make long neglected opensource library maintain cljtagsoupthis would le issue secondmoststarred project github granted feel need anymore apparently people wish spent time reviewing merging incoming prsanyway recently prompted revive preparing new release updating dependency latest version upon seeing dependency orgclojureclojure projectclj yes neglected long started wondering clojure depend actually clojure dependency googled around best practice conclusive answer set researchtldr leiningen add scope provided clitools unless want explicitis possible clojure project declare dependency clojure quite possible turn detail depend build toolobviously make sense library broadly project meant used standalone rather included project clojure dependency leiningenif try create leiningen project dependency defproject foo dependency leiningen version guess older version behave similarly allow launch repl lein repl error could find load main class clojuremain caused javalangclassnotfoundexception clojuremain subprocess failed exit code lost lein jar work fine long aotcompile namespaces lein install resulting library happily function dependency projectsthe upside depending particular clojure version impose consumer library depends clojure project us depends clojure leiningen fetch pomxml smart enough figure jar needed conflict always resolved favour direct dependency lein deps tree report confusing useful library launch repl though people declare dependency clojure main dependency profile defproject foo dependency profile dev dependency orgclojureclojure avoids conflict brings back possibility launch repl sometimes people create multiple profile different clojure version documentation mention possibilityunfortunately approach still possible aotcompile thing create uberjars leiningen putting clojure provided profile cause building uberjar succeed resulting standalone jar actually contain clojure another option add clojure main dependency scope provided per maven documentation mean much like compile indicates expect jdk container provide dependency runtime example building web application java enterprise edition would set dependency servlet api related java ee apis scope provided web container provides class scope available compilation test classpath transitive key last word project depends library b declares dependency c c automatically put dependency expected explicitly declare cthis mean adequate library standalone project come declaring clojure dependency break anything cause ephemeral conflict combined profile approach multiple configuration called forclitoolsclitools accept depsedn simple even passing srepro clojure clj excludes clojure dependency probably clojuredepsedn break anything clitools use least version clitools library author probably declare clojure dependency thing le uniform land leiningen example quite uberjarrers choose reasonable check tooling longer boot user tell know us aether like leiningen maven wager guess caveat apply leiningen checked thoughso existing project figured would fun piece research examine popular project depend depend clojure queried api starred clojure project fetched parsed projectcljs andor depsedns tallied thing write separate post turned even fun weekend project anticipated let share conclusionsi ended project definition file able successfully parse depsedns projectcljs breakdown clojure version declared dependency ie profile alias na mean dependency clojure declared umbrella zoo alpha beta snapshotsas expected depending clojure comparatively popular clitools land almost half clitools project declare clojure dependency versus project leiningenthat leiningen number still seemed quite high dug little deeper project clojure somewhere profile remaining somewhat outlier like ring pedestal umbrella project composed subprojects leinsub plugin actual dependency like klipse reagent essentially clojurescriptonly like overtone use leintoolsdeps plugin store dependency depsedn using leiningen tasksfinally popularity scope provided much lower leiningen project specify declare dependency two depsedn file reframe fulcro note reframe actually projectclj depsedn
61,Lobsters,clojure,Clojure programming,I’ve Consed Every Pair,https://medium.com/@peternorvig/ive-consed-every-pair-54ef5d9d93b6,consed every pair,clojure language consed every pair,back cafe open met enthusiastic programmer wanted tell awesome clojure language sentiment wholeheartedly agree great discussion found somewhat ironic programmer seemed realize used lisp primary language year career reminded johnny cash song wrote lyric consed every pairi totin laptop trendy palo alto cafe passed hacker bro new inch display goin hacking mack table rest climbed seat started testhe asked programmed clojure brandand said listen used every repl land consed every pair mani consed every pair mansignaled every err mani done much software manof repls share mani consed every pairi used franz lisp lm lisp common lisp pltmaclisp zetalisp emacs lisp yale tvaxen explorer symbolics pdpsun station pc macbook blackberryracket pyret jscheme heaveni consed every pair mani consed every pair mansignaled every err mani done much software manof repls share mani consed every pairi used deftype ftype machinetype definelisptype typecase checktype readlineclassname classof defclass loadtimebasestring writestring stringtrim runtimemakelist makehash makenode stringmakemakearray display twoway pete sakei consed every pair mani consed every pair mansignaled every err mani done much software manof repls share mani consed every pairi used arrayp boundp minusp iteratorconstantp equalp typep numeratorbitnor vector ffloor butlast special xor error broadcast truncate conjugate concatenate packageerror allocate update randomstate terrori consed every pair mani consed every pair mansignaled every err mani done much software manof repls share mani consed every pair
63,Lobsters,clojure,Clojure programming,"Clojure, implemented atop Rust",https://github.com/Tko1/ClojureRS,clojure implemented atop rust,join github today sign file permalink project goal discussion http resource license reload reload,clojure implemented atop rust unofficial dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time put simply clojure implemented atop rust clojure interpreter implemented rust repl action project goal create version clojure get exist independent particular platform explore clojure independent proper tail call elimination b condition restarts c feature might normally able indulge project progress begin looking serious advanced compilation technique create serious clojure implementation check clojurersorg file website note design language grow program grows discussion come join u discord http clojure implemented atop rust unofficial resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
64,Lobsters,clojure,Clojure programming,"More fun with NumPy, CuPy, Clojure and GPU acceleration. Hold my Cider 2",https://dragan.rocks/articles/20/Clojure-Numpy-Cupy-CPU-GPU-2,fun numpy cupy clojure gpu acceleration hold cider,neanderthal,clojure sophisticate benchmarking capability right repl criterium library although would like use quickbench give reliable precise measurement one simple line code opted follow python way use time appropriate loop make similar python code possible defn benchneanderthalcpu n factory rep withrelease x randuniform ge factory n time dotimes rep matrixcorrelation x defn benchneanderthalgpu n factory rep withdefault cudawithengine factory defaultstream withrelease x randuniform cuge n synchronize time dotimes rep release matrixcorrelation x synchronize previous article find code matrixcorrelation implementation full general matrix multiplication although correlation matrix symmetric since matrix size faster twice many flop necessary instead using logic avoid duplicate work especially gpu matrix unrealistically large symmetric matrix multiply pay also consider corrcoef computes correlation different variable typically much fewer variable observation matrix long rectangle old implementation optimal even large matrix however confirmed measurement comparison numpy us symmetric multiply large matrix seen directly code certain since take numpy second full matrix multiply matrix around sec whole corrcoef added option neanderthal made simple heuristic use symmetric multiply huge fat matrix mmt function gemm everything else made code le elegant several line longer hey everything performance defn matrixcorrelation withrelease one entry vctr ncols work mv one let amean rk dim one work one letrelease large mrows ncols sigma sy mrows large mmt amean sigma mm amean trans amean viewge sigma sqrt copy dia sigma work withrelease sigmax rk work div viewge sigma viewge sigmax sigma
65,Lobsters,clojure,Clojure programming,Collaborate serverless-ly on ClojureScript with crepl,http://thegeez.net/2020/04/17/crepl_is_back.html,collaborate serverlessly clojurescript crepl,collaborate serverlessly clojurescript crepl back crepl creplthegeeznet,collaborate serverlessly clojurescript crepl apr crepl collaborative editor written clojure clojurescript editor write evaluate clojurescript code work code together similar google doc crepl offline quite time place deploy recently playing around compiling clojure graalvm nativeimage deploying aws lambda aws lambda work together websockets via api gateway whole crepl infrastructure deployed serverless manner try serverless crepl creplthegeeznet two people working clojurescript code seeing output reminder list feature crepl
66,Lobsters,clojure,Clojure programming,A Cornucopia of nREPL Updates,http://metaredux.com/posts/2020/04/10/a-cornucopia-of-nrepl-updates.html,cornucopia nrepl update,nrepl languageagnostic nature icedvim add support nrepl sideloader sideloader documentation chlorine add alpha support nrepl chlorine version conjure add support nrepl oliver caldwell rewrite conjure calva new debugger interactive debugger babashka ship native nrepl server babashka native nrepl support short presentation line code arcadia nrepl server new hope clojureclr nrepl clr arcadia nrepl server clr nrepl clojurescript piggieback chris badahdah native nrepl implementation clojurescript misc epilogue,wrote nrepl last week mentioned really exciting thing happening broader nreplclojure community today want expand bit general theme today nrepl getting mindshare broader tool support subtheme many tool end able support programming language due nrepl languageagnostic nature format adopted post bit chaotic unstructured hope forgive go icedvim add support nrepl sideloader wait long editor adopt new sideloading functionality nrepl icedvim couple day nrepl released check icedvim sideloader documentation detail client next chlorine add alpha support nrepl demise proto repl chlorine undisputed clojure ruler realm atom chlorine historically relied unrepl power functionality recently released version added alpha support nrepl chlorine author mauricio szabo wrote couple cool blog post topic heartily recommend pretty sure chlorine support nrepl improve lot month come conjure add support nrepl amazing news oliver caldwell working rewrite conjure powered nrepl may support programming language besides clojure project promising start excited calva new debugger calva cider dear sibling interactive debugger utilizes cidernrepl v code debugger extension api work done part clojurists together funding period super excited finally see another editor reusing cider debugger looking forward seeing editor next babashka ship native nrepl server day everyone raging awesome babashka increased reach clojure almost much clojurescript year ago scripting clojure dream come true many people industrious michiel borkent aka borkdude recently unveiled native nrepl support babashka version great job new server work pretty well cider even get code completion michiel shared earlier today short presentation amsterdam clojure user group subject somewhat amusingly achieved line code think great testament simplicity nrepl arcadia nrepl server new hope clojureclr early nrepl ported clojureclr port named nrepl clr reimplementation clojure version pretty strong start unfortunately port abandoned relatively quickly probably even work day lack nrepl server clojureclr meant user could take advantage many popular editor plugins ides clojure finally changing arcadia team implemented pretty solid nrepl server clr hoping matures lead much improved access topnotch clojure dev tooling clojureclr hoping server extracted arcadia codebase soon distributed standalone project benefit entire clojureclr community even though server written c entire code something like line code clojureclr encourage check project try help nrepl clojurescript guess people know nrepl supported clojurescript age via piggieback piggieback pretty cool solution come quirk one important limitation work selfhosted clojurescript written clojure mean lumo planck use favourite nrepl client however might change soon chris badahdah working native nrepl implementation clojurescript limitation clojurescript encourage help project misc let wrap thing several smaller news usual welcome help everything nreplrelated shy got fun challenging rewarding task everyone epilogue wild ride know much new thing happening nrepl world feel like christmas think reasonably safe say nrepl community bursting energy idea day optimistic future achieved lot already feel best yet keep hacking may n repl always
67,Lobsters,clojure,Clojure programming,"CuPy accelerates NumPy on the GPU? Hold my Cider, here's Clojure",https://dragan.rocks/articles/20/Clojure-Numpy-Cupy-CPU-GPU,cupy accelerates numpy gpu hold cider clojure,,numpy support gpu acceleration nvidia provides cupy mimic numpy api gpu nvidia stuff offer full power cuda right nt seem create array gpu note cupy instead numpy def gpux cupylinspace dtype cupyreshape following nvidia official guide made sure wait actual computation finish measuring time common mistake gpu benchmark good true people queue asynchronous call nt wait gpu actually job time cupycorrcoef gpux py streamnull synchronize elapsed time msec faster numpy cpu much even slower neanderthal cpu first instinct check whether mistakenly use notoriously crippled many time slower nvidia consumer gpu card pygetattr gpux dtype nope work next issue might array gpu cpu transferred gpu memory rather slow followed suggestion nvidia cupy documentation array gpu let check case pygetattr gpux device cuda device yes array gpu maybe something missing maybe despite info computation take place cpu put computation loop checked nvidiasmi show gpu utilization pretty sure run gpu data already sits gpu memory underwhelming result cupy clojure deal clojure need special dropin replacement library neanderthal support cpu nvidia gpu cuda amd gpu opencl engine neanderthal function polymorphic automatically adapt whatever hardware throw def gpuy randuniform cuge time matrixcorrelation gpuy synchronize elapsed time msec yes acceleration expected gpu case comment question please contact would love improve part article possible read part article comparison
69,Lobsters,clojure,Clojure programming,General Transit Feed Specification and Clojure,https://grison.me/2020/04/03/fun-with-gtfs-and-clojure/,general transit feed specification clojure,hi people internet gtfs http developersgooglecomtransitgtfs sample gtfs archive gtfscurrentzip tinkering repl load gtfs file agencytxt calendartxt calendardatestxt routestxt stoptimestxt stopstxt tripstxt discover data specter stoptimestxt ligne maison neuve ligne republique republique ligne mettis b performance store building index different distinct stop name aka route passing stop aka destination specific route passing stop aka rest api init project loading route bus route bus stop route passing bus stop time trip bus stop http meyerwebcomerictoolsdencoder http spell,hi people internet today talking clojure parse extract stuff gtfs file wrap simple rest api using clojure expose api net iphone consume tell next bus ride much fun come got bus next monday morning kidding quarantine sure take bus anytime soon enough time use code get stuff done scenario mobile app would created main goal would let user select favorite bus stop regarding specific bus route display next stop time miss bus gtfs gtfs mean general transit feed specification common format public transportation schedule associated geographic information information take look following page http developersgooglecomtransitgtfs sample gtfs archive live metz france hopefully grab gtfs archive desired data bus riding little town found gtfscurrentzip tinkering repl create depsedn file following content deps comrplspecter mvnversion nreplnrepl mvnversion run nrepl clj nreplcmdline nrepl server started port host localhost nrepl connect ide running repl create one ide directly matter currently running window run nrepl window linux subsystem attach ide running window load gtfs file project ready unzip gtfs archive place somewhere let say tmpgtfs got multiple file extracted agencytxt contains various bus operator le met proxis calendartxt contains information whether different service day operate different monfri wed sat sun calendardatestxt contains exception service example service id operate routestxt contains different route bus could take stoptimestxt contains different stop bus trip indicating hour arrival departure stopstxt contains bus stop tripstxt contains different bus trip linking stop together ok know file contains load clojure record see need essentially load file csv skip first line create record instance line use list line something usefull first define various map shape file agency composed name url time zone lang phone def agency name url tz lang phone etc def calendar serviceid mon tue wed thu fri sat sun startdate enddate def route routeid shortname longname desc type url def stoptime tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled def stop stopid code name desc lat lon id zoneid url locationtype parentstationid def trip routeid serviceid tripid headsign directionid blockid shapeid blockidalt everything ok try load agency require clojurejavaio io require clojurestring str defn makerecord make record line field separated comma record line strsplit line split comma map strtrim remove unneeded space map strreplace remove unneeded double quote zipmap record create map separated line defn loadrecords load given file list map discarding header f mapper withopen r ioreader f doall lineseq r rest skip header map partial makerecord mapper loadrecords tmpgtfsagencytxt agency name saeml tamm le met url http lemetfr tz europeparis lang phone work sequence one agency record pretty neat great let dive deeper project really need link route bus stop need load stop trip route stoptimes load def route loadrecords tmpgtfsroutestxt route def stop loadrecords tmpgtfsstopstxt stop def stoptimes loadrecords tmpgtfsstoptimestxt stoptime def trip loadrecords tmpgtfstripstxt trip def calendar loadrecords tmpgtfscalendartxt calendar check find stop near appartment count filter name pierne stop one direction check sure filter name pierne stop locationtype desc name pierne id stopid lon url code zoneid http lat locationtype desc name pierne id stopid lon url code zoneid http lat discover data let define utility method retrieve stop route easily using specter ideal traversing data structure exploration require comrplspecter defn recordwithproperty find record specific property matching given value prop value record sselect sall sselected prop value record take look use sselectone instead sselect defn stopwithid find stop given id stopid sselectone sall sselected stopid stopid stop define additional method defn stopswithname find stop given name name recordwithproperty name name stop defn routeswithshortname find route given short name name recordwithproperty shortname name route defn routeswithlongname find route given long name name recordwithproperty routelongname name route routeswithshortname routeid shortname longname ligne desc type url count stopswithname pierne casino lived young http count stopswithname casino many bus stop metz count distinct map name stop far seems retrieving want next like resume need retrieve next stop specific route bus stop retrieve route short name usually bus line number retrieve trip route trip route defined way b b retrieve stop route need load trip time table retrieve time table stoptimestxt get route id route map routeid routeswithshortname defn tripsforroute find trip given routeid routeid recordwithproperty routeid routeid trip distinct map headsign tripsforroute maison neuve magny par rue de pouilly magny par rue au bois fort moselle republique count tripsforroute defn tripswithheadsign find trip given headsign headsign recordwithproperty headsign headsign trip count tripswithheadsign maison neuve mean trip line go direction final stop maison neuve let check first trip first tripswithheadsign maison neuve routeid serviceid tripid headsign maison neuve directionid blockid shapeid blockidalt want different stop trip clojure defn stopsontrip find stop given trip tripid recordwithproperty tripid tripid stoptimes count stopsontrip map comp name stopwithid stopid stopsontrip aubepine hautsdemagny beausoleil armoisieres obelliane magnyaubois roosevelt la plaine apremont plateau faubourg frecot bouchotte vandernoot lothaire pierne cool lemud muse centre pompidou metz gare roi george republique square du luxembourg fort moselle tignomont stmartin foch pont de verdun casino also cool migette longeville leclerc en prille scy ba liberte moulins stjean serret haie brulee maison neuve let say want know bus trip bus stop route maison neuve defn timesforstop find time given stop stopid recordwithproperty stopid stopid stoptimes count timesforstop take sortby arrivaltime sselect sall sselected stopid sselected arrivaltime compare timesforstop tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled cool might return stop different route want route named ligne maison neuve defn tripinroute tripid routeid contains set map tripid trip tripid take sortby arrivaltime sselect sall sselected stopid sselected arrivaltime compare sselected tripid tripinroute maison neuve timesforstop tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled give exact result reason pierne bus stop id served bus line ligne check bus arrival defn tripwithid find trip given id tripid sselectone sall sselected tripid tripid trip map comp headsign tripwithid maison neuve maison neuve maison neuve one last tweak go next step currently give trip day week metz elsewhere different trip week weekend let say tuesday service valid tuesday map serviceid recordwithproperty tue calendar let deal defn tripforday given tripid run given day tripid day let serviceids map serviceid recordwithproperty day calendar tripserviceid serviceid first recordwithproperty tripid tripid trip contains serviceids tripserviceid take sortby arrivaltime sselect sall sselected stopid stop sselected arrivaltime compare sselected tripid tripinroute maison neuve following headsign maison neuve sselected tripid tripforday tue running tuesday timesforstop tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled make function defn nexttimes number stopid arrivaltime headsign day take number sortby arrivaltime sselect sall sselected stopid stopid sselected arrivaltime compare arrivaltime sselected tripid tripinroute headsign sselected tripid tripforday day timesforstop stopid check work nexttimes maison neuve tue tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled tripid arrivaltime departuretime stopid stopsequence pickuptype dropofftype shapedisttraveled seems right far good know list different route retrieve stop route specific direction headsign retrieve next stop bus station problem people using application also need retrieve route trip stop usually already know name favorite bus stop let bus stop many bus line passing named republique count stopswithname republique def republiquestops set map stopid stopswithname republique userrepubliquestops republiquestops placerepub def republiquestoptimestripids set map tripid sselect sall sselected stopid contains republiquestops stoptimes userrepubliquestoptimestripids count republiquestoptimestripids distinct map routeid sselect sall sselected tripid contains republiquestoptimestripids trip defn routewithid routeid sselectone sall sselected routeid routeid route map longname map routewithid citeis citeis ligne ligne ligne ligne ligne mettis b mettis navette city conclude bus line go republique bus stop need propose choice direction headsign chosen route route id magny maison neuve one used take going school distinct map headsign filter routeid trip maison neuve magny par rue de pouilly magny par rue au bois fort moselle republique distinct map headsign filter routeid trip mb hopital mercy mb universite saulcy different final destination bus line number ligne final destination bus line mettis b finally one last problem trip final destination head sign determined way go b reverse really group trip destination builtin method clojure know map value hashmap defn mapvalues f args reduce fn k v assoc k apply f v args def tripsbydirection groupby directionid distinct filter routeid trip usertripsbydirection mapvalues tripsbydirection fn distinct map headsign maison neuve fort moselle magny par rue de pouilly magny par rue au bois republique well think point pretty much covered need rest api let performance dataset size metz easy load huge dataset like paris think function would take much time http request filter trying find excuse bored let create big store contain information already tailored api matter getin store get need kind structure great agency route stop trip store seille mettis b mb hopital mercy timetable please mb universite saulcy timetable please already agency route stop trip also already know retrieve following different distinct stop name aka storeseille route passing stop aka storeseille mettis b destination specific route passing stop aka storeseille mettis b mb universite saulcy trip id specific route stop destination mapping function already build giant structure easy u write rest api building index going build intermediate index need agency route route indexed routeid routesmap performance stop trip trip indexed tripid tripsmap performance trip indexed routeid tripsbyroute performance stop time stop time indexed stop id stoptimesbystop performance specific mind necessary understand build key point structure explained api navigates everything prebuilt startup different distinct stop name aka storeseille defn distinctstopnameswithids find distinct stop name associated id key stop map vector map stopid stopswithname sort distinct map name stop distinctstopnameswithids stop stop daviation novembre mai abbe bauzin acacia actisud dunil alger alsace route passing stop aka storeseille mettis b defn tripidsforstops find trip id given number stop stop stoptimes set map tripid flatten map get stoptimes stop defn distinctrouteidsfortrips find distinct route id given number trip tripids trip distinct map routeid map get trip tripids defn routespassingbystopids find route passing given number stop stopids key routesmap stoptimesbystop tripsmap filter map get routesmap distinctrouteidsfortrips tripidsforstops stopids stoptimesbystop tripsmap test work map longname routespassingbystopids store proxis ligne map longname routespassingbystopids store ligne ligne map longname routespassingbystopids store ligne ligne citeis navette city destination specific route passing stop aka storeseille mettis b mb universite saulcy defn timesbyheadsignatstop find time bus stop specific stop grouped headsign stop routeid store groupby headsign get tripsmap store tripid group trip trip headisgn sortby juxt arrivaltime departuretime sort arrivaltime departuretime filter contains set get tripsbyroute store routeid filter trip get tripsmap store tripid route get stoptimesbystop store stop get time specified stop key timesbyheadsignatstop store maison neuve count get timesbyheadsignatstop store maison neuve written need use create desired structure defn makeapistruct construct struct searched rest api store distinctstopnameswithids store map hashmap first create hashmap stop name key apply mergewith value map fn r hashmap routelongname r hashmap route name key map fn stop timesbyheadsignatstop stop routeid r store value time grouped destination second routespassingbystopids second store apply mergewith create loadgtfs method build parsing gtfs file terminated defn loadgtfs load gtfs data make store path let route loadrecords str path routestxt route trip loadrecords str path tripstxt trip stoptimes loadrecords str path stoptimestxt stoptime let store agency loadrecords str path agencytxt agency route route routesmap map vector routeid route stop loadrecords str path stopstxt stop trip trip tripsmap map vector tripid trip tripsbyroute apply mergewith map hashmap routeid trip stoptimes stoptimes stoptimesbystop apply mergewith map hashmap stopid stoptimes assoc store data makeapistruct store time def store loadgtfs tmpgtfs loading tmpgtfsroutestxt loading tmpgtfstripstxt loading tmpgtfsstoptimestxt loading tmpgtfsstopstxt loading tmpgtfsagencytxt elapsed time msec userstore key store tripsbyroute route stop stoptimesbystop tripsmap stoptimes trip routesmap agency data key data store prefecture serret leclerc pr rochambeau puymaigre gendarmerie la maxe count key data store count distinct map name stop awesome seems ok performance wise use structure hear saying matter getin actual structure get next section rest api going build simple api compojure going name monmet met le met name bus network metz init project stop repl modify depsedn file put content path resource src deps orgclojureclojure mvnversion ring mvnversion ringringcore mvnversion ringringjson mvnversion ringringdefaults mvnversion ringringjettyadapter mvnversion comrplspecter mvnversion mount mvnversion compojure mvnversion create needed directory mkdir p srcmonmet cd srcmonmet touch apiclj dataclj gtfsclj handlerclj maincl loading order load one time datastore gtfs file going use mount simple library alternative component let modifying dataclj file following code n monmetdata require monmetgtfs gtfs mountcore mnt mntdefstate store start gtfsloadgtfs tmpgtfs defn storehasentry check given entry valid one datastore entry contains agency route stop trip stoptimes entry defined state named store call mntstart invoke gtfsloadgtfs tmpgtfs return map holding various gtfs file content datastore available every namespace guaranteed loaded one time since expensive operation route using ring compojure create simple rest api need skeleton look like n monmethandler require compojurecore refer compojurehandler handler ringmiddlewarejson middleware ringutilresponse refer response compojureroute route mountcore mnt defroutes approutes get hello response foo bar routenotfound found def app mntstart mount datastore handlersite approutes middlewarewrapjsonbody keywords true transform field clojure keywords middlewarewrapjsonresponse get gtfs entry get gts entry entry one agency route stop trip stoptimes return inside gtfs file directly serving csv file json need two method data namespace store datastore holding precious data storehasentry little helper know requested entry really exists done look like n monmethandler require compojurecore refer compojurehandler handler ringmiddlewarejson middleware ringutilresponse refer response compojureroute route mountcore mnt monmetdata refer store storehasentry defroutes approutes expose gtfs file directly fun get gtfs file file let entry keyword file transform url path keyword storehasentry entry response entry store case entry exist serve datastore routenotfound found otherwhise routenotfound found def app mntstart mount datastore handlersite approutes middlewarewrapjsonbody keywords true middlewarewrapjsonresponse test work run program clj monmetmain use curl curl http name saeml tamm le met url http lemetfr tz europeparis lang phone get api bus route make thing clearer create another namespace called api really need gtfs namespace work let start route like return content routestxt enhanced agency corresponding agencyid field route n monmetapi require monmetgtfs gtfs defn getroutes retrieve route store route store need expose apigetroutes compojure defroutes defroutes approutes get apiroutes response apigetroutes store routenotfound found test using curl even browser curl x get http routeid routeshortname routelongname ligne routedesc routetype routeurl routeid routeshortname routelongname ligne routedesc routetype routeurl bus stop bus route returned really need bus stop able enter damn bus get back api namespace order create two method one retrieve distinct bus stop sorted name one retrieve bus stop matching name n monmetapi require monmetgtfs gtfs defn getstops retrieve distinct stop name store gtfsdistinctstopnameswithids store defn getstopwithname retrieve stop matching strict equality name stopname store gtfsstopswithname stopname stop store expose api get apistops response apigetstops store get apistops name name response apigetstopwithname name store test curl x get http jq daviation novembre curl x get http stopid stopcode stopname pierne stopdesc stoplat stoplon locationtype parentstation http stopid stopcode stopname pierne stopdesc stoplat stoplon locationtype parentstation http working first try even funny route passing bus stop said earlier like user first select stop route need propose endpoint bound apistops nameroutes endpoint need return different route passing specified stop also route return associated possible headsigns n monmetapi require monmetgtfs gtfs defn directionnamesforstopandroute stop route store sort filter notempty flatten map key getin store data stop route defn routenamesanddirectionsforstop stop store map hashmap directionnamesforstopandroute stop store routenamesforstop stop store expose rest api get apistops nameroutes name response apiroutenamesanddirectionsforstop name store test working curl x get http jq name ligne direction fort moselle maison neuve magny par rue au bois magny par rue de pouilly route routeid routeshortname routelongname ligne routedesc routetype routeurl name proxis direction pole multimodal pouilly route routeid routeshortname routelongname proxis routedesc routetype routeurl working expected still miss one piece puzzle time table time trip bus stop final piece api need retrieve time day bus stop favorite bus stop besides want query multiple routedirection stop sometimes want go somewhere multiple headsigns go want go care bus take open api namespace write code defn timesforstoprouteanddirection stop route direction store map assoc headsign direction get first filter contains set key direction getin store data stop route direction defn today return keyword today moday mon localdatenow getdayofweek getdisplayname textstyleshort localeenglish tolowercase keyword defn return time localdatetimenow format datetimeformatterisolocaltime sub defn timesforstopandmultipleroutedirection stop routesdirections store parseroutesdirections routesdirections map timesforstoprouteanddirection stop first nth store flatten filter tripforday tripid today calendar store trip store filter compare arrivaltime sort gtfsbyarrivaltime expose rest api get apistops nameroutes route name route response apitimesforstopandmultipleroutedirection name route store format decided following route headsign multiple routesheadsign separated let encode uri using useful encoder found google http meyerwebcomerictoolsdencoder ligne ligne maison neuve fort moselle url call http curl x get http ligne jq map arrivaltime headsign head maison neuve maison neuve maison neuve maison neuve exciting bus take every morning get train station spell first wanted create io app displaying iphone shortcut app fetch url spell duplicate code last route created add spell url generate french sentence fo n monmetapi defn makesentence key headsign arrivaltime str headsign arivant strreplace sub arrivaltime heures defn timesforstopandmultipleroutedirectionspelled stop routesdirection store let result timesforstopandmultipleroutedirection stop routesdirection store map makesentence take result str le prochains bus larret stop sont le suivantsnn apply str interpose n route get apistops nameroutes routesspell name route response apitimesforstopandmultipleroutedirectionspelled name route store run server launch ngrok clj monmetmain ngrok http ngrok inconshreveable ctrlc quit session status online session expires hour minute version region united state u web interface http forwarding http http forwarding http http create shortcut iphone like finally ask siri bam done three different shortcut need go train station city center city wan get back home work anywhere every day need download gtfs file time time two time per year line badly written non optimized clojure next time
70,Lobsters,clojure,Clojure programming,Clojure Weekly,https://us19.campaign-archive.com/home/?u=f5dea183eae58baf7428a4425&id=ef5512dc35,clojure weekly,,
71,Lobsters,clojure,Clojure programming,Year of Clojure on the Desktop,https://vlaaad.github.io/year-of-clojure-on-the-desktop,year clojure desktop,year clojure desktop theory rarely good choice unexpected journey react model react equality semantics reagent javafx supported cljfx cljfxcss app distribution jpackage hacker news reader download jlink closing thought typesetting editor game engine advanced visual repls reddit,march year clojure desktop clojure use case theory situation jvm reasonable choice especially high concurrency processing large amount data practice mostly used backend server java also widely used android clojure rarely good choice due startup time unexpected journey another area jvm useful desktop application web browser eating frontend world hard choice especially tool like electron allowing code base web desktop apps countless resource spent making dom javascript vms efficient approachable possible make solid choice many type application despite historical baggage think even though web popular ever still use case jvm better choice application platform coincidentally use case align perfectly clojure advantage jvm language browserbased technology struggle utilize multiple core vm instance clojure immutability default concurrency primitive coreasync make writing multithreaded code breeze javascript vms choke processing large amount data leaf better fit advanced interactive form compiler data processing pipeline clojure replaided development fast feedback loop perfect tinkering ui opposed compileandrestarttheappandthennavigatetheuitoseeyourchange approach language recently huge selling point web jvm finally getting addressed react model app distribution react model react changed ui development better brought complexity sure also made creating consistent ui wonderfully simple funnily enough clojure equality semantics play extremely well react model reagent clojurescript wrapper react outperforms plain react lot time due optimization rerender component input change javafx largest supported desktop application platform jvm clojure cljfx declarative functional extensible reactlike wrapper javafx wrote example cljfx component defn todoview key text id done fxtype hbox spacing padding child fxtype checkbox selected done onselectedchanged eventtype setdone id id fxtype label style fxtextfill done grey black text text see simple function return simple data structure bread butter clojure code may notice use event map addition function event listener decouple logic representation another thing notice javafx us styling similar done web inline style external cs file addition inline style composable data cljfx also cljfxcss library allows configuring cs using data structure code app distribution problem compiling javascript app various dependency many different solution bake j file right need deliver user upload server java compilation hand produce class jar file still require jvm executed jvm also need distributed addition platform difference apps linux usually deb rpm format macos pkg dmg window msi exe thankfully java released earlier year includes new tool called jpackage deal packaging selfcontained application heavy lifting needed produce platformspecific application package using jpackage easy create app jar left upload server allow user download install better example possible clojure desktop simple sample application made hacker news reader app show cljfx cljfxcss jpackage used together create installable application even download give try package built using github action please note build step intentionally omitted keep simple startup time improved significantly aotcompiling clojure code application package size reduced use jlink minify jdk application need use webkit used example exclude cljfx dependency javafxweb closing thought think jvm sweet spot desktop apps lie interactive form typesetting web good extremely resourceintensive apps like game modeling software need written something lowerlevel middle sweet spot clojure cljfx allow developing ui interactively instant feedback live app static ui builder rainbow javafx issue nice nonetheless editor game engine written clojure advanced visual repls written clojure give try think discus reddit
72,Lobsters,clojure,Clojure programming,Coffee Grinders Pattern in Clojure,https://lambdaisland.com/blog/2020-03-29-coffee-grinders-2,coffee grinder pattern clojure,coffee grinder lambda island episode interceptor toy interceptor implementation reified,back december wrote coding pattern using often work dubbed coffee grinder thought around still gelling time result meandering semiphilosophical post really get point seem resonate much peoplesome response got use function sound like finitestate machine make clear fact making clearhaving continued encounter apply pattern like present concise semiformal definition coffee grindersat point note interceptor pioneered pedestal since implemented several place like sieppari reframe specific type coffee grinder word coffee grinder generalization interceptor post make lot sense familiar interceptor least passingi making lambda island episode interceptor free watch limited time case need brush also toy interceptor implementation available written way encourages getting familiar concept replso without ado coffee grinder way model execute stepbystep process following element persistent functional immutable data structure known context contains complete current state process input output intermediate state work queuestep function accept context yield updated context possibly asynchronouslya runner component take context repeatedly run next step function work queue queue empty terminating condition reachedsome corollary step function access full context including work queue able manipulate returning context updated work queue allows queuing additional step also allows thing like prepending step beginning queue interleaving step queue extra intermediate step returning empty queue terminate processthe complete state process reified context pause restart inspect process time including error occurs long right context value availablecoffee grinder distinguish rule runner pick executes work asynchrony handled extra feature support like error handling terminating condition let look basic implementation coffee grinder defn run key queue ctx iflet step nextqueue seq queue recur step assoc ctx queue nextqueue ctx run counter queue update counter inc update counter inc counter queue nil note full context available including queue single step dynamically enqueue ten step run counter queue fn ctx update ctx queue concat range update counter counter queue nil typical use case http routing remember http request handling inspiration interceptor first place replace opaque wrapping function based middleware concept reified queue stackhere single route step responsible enqueuing actual http handler defn handlehelloworld req status body hiiii def route get helloworld handlehelloworld defn router key request ctx iflet handler fn p h p requestmethod request path request h route update ctx queue concat fn ctx assoc ctx response handler request ctx ctx run request requestmethod get path helloworld queue router request requestmethod get path helloworld queue nil response status body hiiii another use case described original coffee grinder post resource loading step notice resource need operate locally available prepend resourcefetching step queue reenqueue itselfcoffee grinder implement asynchrony allowing step function return new context future value context instance promise coreasync channel future defn run key queue ctx iflet step nextqueue seq queue let result step assoc ctx queue nextqueue recur cond result instance ideref result deref ctx code work fine clojure threaded nature jvm mean always block result available matter flavor asynchrony using evented context like javascript possible may need fully embrace asynchrony code snippet allow step function return j promise extra done callback used deliver final context back caller defn run key queue ctx done iflet step nextqueue seq queue let result step assoc ctx queue nextqueue promise result result run done recur result done ctx far reified process state making otherwise spread across stack heap local instance field single concrete value pas around inspect manipulate serializehowever still opaque function value making last option viable instead move towards pure data enqueuing operation rather function similar event subscription represented reframe defmulti handle fn ctx op op defmethod handle addtocounter ctx update ctx counter defn run key queue ctx iflet op nextqueue seq queue recur handle assoc ctx queue nextqueue op ctx run counter queue addtocounter addtocounter counter queue nil context pure data sent wire stored disk maybe want snapshot intermediate state pick later capture context case error accompany bug report multiple worker node network pick work form inprogress context database queue execute next step write back resultyou take one step also reifying side effect letting runner handle great benefit testing since step function pure defmulti handleeffect key defmethod handleeffect sendemail key subject body defmethod handle signupuser ctx assoc ctx fx createuser sendemail subject defn run key queue ctx iflet op nextqueue seq queue nextctx handle assoc ctx queue nextqueue op run handleeffect fx nextctx recur dissoc nextctx fx ctx many direction take pattern look interceptor besides queue also add stack context thus emulating http middleware onthewayin onthewayout operationsi hope point least piqued people curiosity let know encounter problem work elegantly solved coffee grinder
73,Lobsters,clojure,Clojure programming,nREPL 0.7,http://metaredux.com/posts/2020/03/28/nrepl-0-7.html,nrepl,nrepl getting native edn transport release note open ticket clojurescript port nrepl babashka port nrepl recent inclojure presentation p github sponsor opencollective,little year since release nrepl moreover nine month since wrote nrepl getting native edn transport heck going nrepl stuck soon revival assure definitely case despite lack new release nrepl making good progress also extremely happy announce nrepl finally lot bad thing also cleared busy schedule rather dramatically lately trying catch important project something good coming horrible madness right new noteworthy already wrote edn transport guess skip part two big addition client inject code remotely running server demand probably make sense insanely cool powerful calling feature sideloading following example unrepl pioneered nrepl response covered clojurespec let expand bit sideloader think interesting addition simple term allow client provide missing code demand short example init sideloading op sideloaderstart id session x try require missing namespace op eval id session x code quote require foobar bar barqaz lookup foobar id session x status sideloaderlookup type resource name foobarclj providing resource id session x op sideloaderprovide type resource name foobarclj content package ack provided resource id session x status done result eval id session x value qaz status done happening client try require foobar library available locally nrepl asks client provide missing library client responds encoded payload missing resource question get loaded nrepl evaluation continues potential utilize huge client enhance running server eg code completion without need include additional dependency booting nrepl wanted implement cider first crazy busy past month good chance client author going beat totally fine please beat build something cool sideloader bit documentation small tweak improvement latest release well gory detail check release note one thing covered nrepl documentation got love better ever still lot room improvement especially come protocol specification easier folk build alternative implementation new client already modest plan nrepl main focus going addition builtin completion info ops client would access even useful functionality outofthebox read also plenty open ticket like help pick mighty fine option many somewhat beginner friendly hoping improvement nrepl planned improvement nrepl going contribute creation better client nrepl year come also use post share cool general update nrepl chris badahdah working clojurescript port nrepl michiel borkent working babashka port nrepl basic nrepl implementation also good example easy implement nrepl protocol maurício szabo considering adding nrepl support chlorine oliver caldwell considering adding nrepl support conjure pratik karki announced inclojure lighttable dropping custom nrepl adopting modern nrepl everything cider orchard development make extremely happy reaffirm belief nrepl continue play central part future clojure development tooling hopefully beyond clojure way might also want check recent inclojure presentation topic time wrap special thanks go shen tian work edn transport sideloader christophe grand also deserves lot credit coming sideloader first place building prototype nrepl thanks lot guy rock today keep hacking p spent money toilet paper might consider supporting nrepl via github sponsor opencollective
74,Lobsters,clojure,Clojure programming,"compiling a Clojure library to a shared native library (.so, .dylib) with Graalvm native-image",https://github.com/borkdude/sci/blob/master/doc/libsci.md,compiling clojure library shared native library dylib graalvm nativeimage,libsci prerequisite graalvm lein walkthrough cheshire using libsci rust bindgen reference,libsci use sci shared library eg c follow along tutorial illustrate happening run script libscicompilelibsci libscicompilecpp prerequisite want run script prepare follows download graalvm set graalvmhome used graalvm ce install lein used compiling clojure code g available compile c code walkthrough libscisrc following clojure file n sciimpllibsci require cheshirecore cheshire scicore sci genclass method static true evalstring string string defn evalstring scibinding sciout enables println etc str scievalstring brings cheshirecore sci namespaces cheshirecore generatestring cheshiregeneratestring file compiled java class one static method evalstring api native library make library interesting enable println providing value interpreter also make cheshire library available show bring clojure function let look bridging class java c package sciimpl import orggraalvmnativeimagecfunctioncentrypoint import orggraalvmnativeimagectypeccharpointer import orggraalvmnativeimagectypectypeconversion import comoraclesvmcoreccconst public final class libsci centrypoint name evalstring public static cconst ccharpointer evalstring centrypointisolatethreadcontext long isolateid cconst ccharpointer string expr ctypeconversiontojavastring string result sciimpllibscievalstring expr ctypeconversionccharpointerholder holder ctypeconversiontocstring result ccharpointer value holderget return value wrap static method evalstring native library function given name evalstring use graalvm api convert java c type clojure java code compiled class file next compile class file shared library using nativeimage graalvmhomebinnativeimage jar scijar cp libscisrc h namelibsci shared begets file graalisolatedynamich graalisolateh libscih libscidylib linux libsciso libscidynamich move file libscitarget let use library c program code include iostream include libscih int main int argc char argv graalisolatet isolate null graalisolatethreadt thread null graalcreateisolate null isolate thread fprintf stderr initialization errorn return char result evalstring long thread argv std cout result std endl return code get first command line argument feed libsci function evalstring compile code follows g libscisrcfromcppcpp l libscitarget libscitarget lsci libscitargetfromcpp run first set environment variable locate shared libary export dyldlibrarypathlibscitarget linux environment variable called ldlibrarypath let run time libscitargetfromcpp println foo require cheshirecore cheshire cheshiregeneratestring foo libscitargetfromcpp user system cpu total worked first printed keyword within interpreter returned clojure hashmap converted json cheshire printed json string c program using libsci rust use libsci rust program use shared lib generated previous section produced running libscicompilelibsci describe happens run libscicompilerust build rust language binding libsci use bindgen need buildrs file file located libscifromrustbuildrs extern crate bindgen use std env use std path pathbuf fn main let path env var libscipath unwrap println cargo rustclinklibsci println cargo rustclinksearch path path path let binding bindgen builder default header format path libscih path path clangarg format path path path generate expect unable generate binding let outpath pathbuf env var outdir unwrap binding writetofile outpathjoin bindingsrs expect could nt write binding learn buildrs file secondly write main program us binding call libsci code located libscifromrustsrcmainrs allow nonuppercaseglobals allow noncamelcasetypes use std ffi cstr cstring use std str use std env ptr include concat env outdir bindingsrs fn eval expr string result static str unsafe let mut isolate mut graalisolatet ptr nullmut let mut thread mut graalisolatethreadt ptr nullmut graalcreateisolate ptr nullmut mut isolate mut thread let result evalstring thread cstring new expr expect cstring new failed asptr cstr fromptr result tostr fn main let args vec string env args collect let result eval args toowned match result ok output println output err println failed running libscicompilerust exporting dyldlibrarypath ldlibrarypath linux libscitarget able run follows libscitargetfromrust require cheshirecore json jsongeneratestring range reference
75,Lobsters,clojure,Clojure programming,COVID19 data in the REPL,http://www.appliedscience.studio/articles/covid19.html,data repl,,provincestate nil countryregion afghanistan lat long provincestate nil countryregion albania lat long
76,Lobsters,clojure,Clojure programming,Twitter Genetic Algorithm Imagery,https://github.com/rogerallen/tweegeemee,twitter genetic algorithm imagery,tweegeemee 트의기미 http twittercomtweegeemeemedia tweegeemee background carin meier start post karl sims siggraph paper clisk clojure image library http githubcomnodenameclevolution http http usage issue making image license,tweegeemee 트의기미 clojure library designed breed image via twitter running heroku see http twittercomtweegeemeemedia latest image tweet name based timestamp creation suffix end link github gist hashtag currently proceduralart link github gist highlight code used create image follow favorite retweet tweegeemee image select future generation currently posting set two new image every hour suffix end image name tell generationtype b random c sexually reproduced n mutant one parent reproduction last tweet considered top allowed produce offspring oh 트의기미 korean hangul character twee 트의 gee 기 mee 미 believe nonsense word liked look let see go background back saw carin meier start post running clojurebased twitter bot heroku showed easy get working intrigued decided like give try twist back mind something always wanted experiment image generation via lisp sexpressions karl sims siggraph paper decide constitutes good image breed well using twitter retweets favorite scoring found clisk clojure image library perfect recreating sims imagery also took inspriration http githubcomnodenameclevolution http http far quite fun work usage able clonefork library follow start post get running heroku note version due heroku free dynos requiring hour sleep hour period switched using scheduler addon see issue information want create breed imagery see bottom coreclj snippet generate show random image breed image hand mutate image making image perhaps like reproduce one image posted maybe want desktop background something like first click tweet link go github gist data structure example name hash imagehash code clisklivevdivide clisklivevfrac clisklivevmin clisklivev clisklivealpha clisklivegrain clisklivesigmoid clisklivevfloor clisklivegradient clisklivesquare clisklivev clisklivevsnoise second copy info code keyword end line eg clisklivevdivide next load repl paste clipboard content define variable code important single quote like def code clisklivevdivide clisklivevfrac clisklivevmin clisklivev clisklivealpha clisklivegrain clisklivesigmoid clisklivevfloor clisklivegradient clisklivesquare clisklivev clisklivevsnoise show eval code width height save image writepng niceonepng image eval code width height license copyright roger allen distributed eclipse public license either version option later version
77,Lobsters,clojure,Clojure programming,Clojure: the Lisp that wants to spread,https://simongray.github.io/essays/spread.html,clojure lisp want spread,clr implementation clojure clojerl joker clclojure cloture hy pixie ferret arcadia magic transit app development graalvm native image libpythonclj clojisr simon gray,clojure lisp want spreadfrom humble beginning clojure always meant hosted language important note clojure today definitely tightly integrated jvm java virtual machine language always multiple implementation clojurethe language consciously designed host abstracted away apart hostspecific function java namespace glimpse java interop code held clr implementation clojure net common language runtime released concurrently similarlooking interop codeinterestingly rich hickey made implementation clojure common lisp abandoned prior public announcement clojurelater clojurescript managed j namespace rather java one interop code also look similar though j namespace much commonly referenced java one everything javascript derives one big namespace opposed discrete class discrete module decision try entirely abstract host away language java example respect operating system way hindered ability different clojure implementation share code time different clojure implementation retain level access underlying machine language whose runtimes leech java c javascript dothat make clojure powerfulclojure welldesigned language crucially newer language many past sin older language confidently thrown ubiquitous mutability oop typing boilerplate great new thing added conservatively scoped fresh take programming language great get wellthought powerful need multiply something else reach clojure designed reach beyond single runtime able interoperate many implementation constantly spread different runtimesthere always little hostspecific code host namespace always ability interoperate fully host codenowadays several different unofficial clojure port exist runtimes clojerl beam erlang virtual machine joker written go common lisp also seen multiple attempt get clojure running clclojure cloture inspiredby language include hy pixie python ferret compiles c subset clojure also exist smaller invocation several different implementation integrating clojure shell scriptsthese certainly interesting lie somewhat evenly spread spectrum fullyimplemented areclojure clr feeling mostly used make game using arcadia integration unity game engine arcadia fact creating competing clojure compiler magic great clojure game development le great thing obviously reflects net reach really clojure clr languagethe big star still clojurescript clojure jvm clojurescript spread beyond initial border confines nodejs bunch javascript runtimes biggest host platform still far browser excellent thatthese day common clojure library either common clojure implementation facilitated cljc file alternative implementation library clojure clojurescript multiplier apply healthy library ecosystem created two languagesat time fact clojure primitive easily serialisable led using edn extensible data notation format exchange frontend backend similar relationship javascript json since transit library made process even simpler setting direct data pipe clojurescript clojurethe way language integrated today clojure developer fullstack development really think data serialisationdeserialisation writing code frontend backend differ mostly way different implementation access host platform functional aspect clojure especially immutability focus referential transparency ensure source code mostly split chunk highly portable code hostinterop conveniently put aside section move code frontend backend leisureso multiplier awarded earlier reach really incremented reflect code write importantly think design clojure hosted language make powerfulclojure main achilles heel right respect reach relatively slow application startup time primary reason clojure taken language android development making desktop apps also make clojure slightly le suitable commandline utility reducing reach writing desktop o platform course java never really took language developing desktop apps gui made inhouse corporate software research apps minecraftthat mattered much may community long using clojurescript app development writing shell script able leverage graalvm native image compiler transpiling jvm bytecode machine code clojure inadvertently spread yet another platform native codeand recently even getting direct interop python jvm clojure using libpythonclj interop r clojisrthis kind reach single language common among programming language may thinkclojure slowly eating world honestly thankful language continues grow despite fairly unorthodox compared current norm typed functional language massive sea objectoriented code also odd child lisp family functional datadriven interopheavy approach programmingand forget terrible sin putting starting parenthesis front function name rather clojure unorthodox exists world dominated primarily objectoriented imperative language delivering lot value already constantly increasing reach benefiting return simon gray
78,Lobsters,clojure,Clojure programming,Confidence and Joy: React Native Development with ClojureScript and re-frame,https://hackmd.io/@byc70E6fQy67hPMN0WM9_A/rJilnJxE8,confidence joy react native development clojurescript reframe,,confidence joy react native development clojurescript reframe clojure http clojureorgguidesgettingstarted code editor intellij idea community http wwwjetbrainscomideadownload cursive plugin http cursiveidecom shadowcljs http shadowcljsorg reframesteroid http githubcomflexsurferreframesteroid rnshadowsteroid http githubcomflexsurferrnshadowsteroid project source http githubcomflexsurferclojurernproject create new react native project open existing one reactnative init clojurernproject cd clojurernproject open project ide http iimgurcomgflzmoipng edit appjs jsx import react react import safeareaview view text reactnative const app react node return safeareaview view text hello clojure text view safeareaview export default app run app terminal yarn start terminal yarn io http ok rn project want run app clojure add shadowcljs yarn add shadowcljs already make sure using latest version create shadowcljsedn clojure sourcepaths src dependency reagent reframe reframesteroid rnshadowsteroid refriskremote build dev target reactnative initfn clojurernprojectcoreinit outputdir app compileroptions closuredefines reframetracetraceenabledqmark true devtools afterload steroidrncorereload buildnotify steroidrncorebuildnotify preloads refriskremotepreload next need initialize project clojure deps depsedn used code inspection ide know better way pls file pr create cljs project create depsedn file clojure deps orgclojureclojure mvnversion orgclojureclojurescript mvnversion reagent mvnversion reframe mvnversion reframesteroid mvnversion rnshadowsteroid mvnversion path src right click file add clojure deps project http optional turn spelling indellij idea preference http iimgurcomeqwzrqmpng create src folder clojurernproject package corecljs file http corecljs clojure n clojurernprojectcore require steroidrncore rn defn rootcomp rnsafeareaview rnview rntext hello clojure cljs defn init rnregisterreloadcomp clojurernproject rootcomp indexjs javascript import appindexjs terminal shadowcljs watch dev reload app disable fast refresh cmndd http try change code see reloaded shadowcljs app clojurescript rn app configured hot reload app state reframe update app state need use event let create eventscljs register first event eventscljs clojure n clojurernprojectevents require steroidfx fx fxdefn initappdb event initappdb db counter fxdefn updatecounter event updatecounter key db db update db counter inc set cursor fxdefn press optionreturn http move selection resolve press return select defn update view state changed need use subscription let create subscljs register subscription subscljs clojure n clojurernprojectsubs require steroidsubs sub subsregrootsubs counter update view corecljs clojure n clojurernprojectcore require steroidrncore rn steroidviews view reframecore reframe clojurernprojectevents clojurernprojectsubs viewsdefview rootcomp viewsletsubs counter counter rnsafeareaview style flex rnview style alignitems center justifycontent center flex rntext str counter counter rntouchableopacity onpress reframedispatch updatecounter rnview style backgroundcolor gray padding rntext update counter defn init reframedispatch initappdb rnregisterreloadcomp clojurernproject rootcomp resolve defview defn letsubs let way fxdefn press update counter button change code see app updated app state remained http clojurescript rn app configured hot reload reframe state three major rule working reframe view pure dumb render ui data subscription dispatch event bad clojure viewsdefview comp viewsletsubs counter counter delta delta rntext str counter counter delta rntouchableopacity onpress reframedispatch updatecounter delta counter delta good clojure viewsdefview comp viewsletsubs counterwithdelta counterwithdelta rntext str counter counterwithdelta rntouchableopacity onpress reframedispatch updatecounter separate subscription event get data state root key subscribed appdb bad clojure reframeregsub counter fn db get db counter reframeregsub delta fn db get db delta reframeregsub counterwithdelta fn db get db counter get db delta good clojure subsregrootsubs counter delta reframeregsub counterwithdelta counter delta fn counter delta counter delta event must pure computation bad clojure fxdefn updatecounter event updatecounter key db dosomething db update db counter inc good clojure reframeregfx dosomething fn dosomething fxdefn updatecounter event updatecounter key db db update db counter inc dosomething nil devtools let run refrisk debugging tool see exactly happening app terminal shadowcljs run refriskremotecorestart open http http see happening app event appdb state subscription test add test folder configure test build project clojure sourcepaths src test dependency build dev test target nodetest outputto outnodetestsjs autorun true let add test eventscountertestcljs clojure n eventscountertest require cljstest refer deftest clojurernprojectevents event deftest eventscountertest eventsupdatecounter db counter db counter run test terminal shadowcljs compile test http navigation react navigation terminal yarn add reactnavigationnative reactnavigationstack reactnativereanimated reactnativegesturehandler reactnativescreens reactnativesafeareacontext reactnativecommunitymaskedview terminal cd io pod install cd terminal yarn io corecljs clojure n clojurernprojectcore require steroidrncore rn reframecore reframe steroidrnnavigationcore rnn steroidrnnavigationstack stack steroidrnnavigationbottomtabs bottomtabs clojurernprojectviews screen steroidrnnavigationsafearea safearea steroidrnnavigationevents clojurernprojectevents clojurernprojectsubs defn mainscreens bottomtabsbottomtab name home component screenshomescreen name basic component screensbasicscreen name ui component screensuiscreen name list component screenslistscreen name storage component screensstoragescreen defn rootstack safeareasafeareaprovider rnncreatenavigationcontainerreload onready reframedispatch initappdb stackstack mode modal headermode none name main component mainscreens name modal component screensmodalscreen defn init rnregistercomp clojurernproject rootstack hot reload need register component differently register rootstack regular reloadable component rnregistercomp use rnncreatenavigationcontainerreload navigation container required steroidrnnavigationevents n dispatch navigateto navigateback event navigation screen try open modal screen change code see navigation state nt changed modal screen still opened img http githubcomflexsurferrnshadowsteroidrawmasterscreencastgif конец
79,Lobsters,clojure,Clojure programming,The Pure Function Pipeline Data Flow,https://github.com/linpengcheng/PurefunctionPipelineDataflow,pure function pipeline data flow,goto chinese edition 中文版 pure function pipeline data flow grand unified programming theory table content people related view summary basic construction method pipeline component branch feedback circuit shunt confluence code example code example code example classical model gantt chart gantt chart warehouse workshop model unification programming technology system architecture unification singlethreaded multithreaded asynchronous distributed me manufacturing execution system everything rmdb clojure web application model ring also related discussion clojureverse unification unification information system integration model unification microkernel architecture unification aop unification eventdriven architecture unification computer hardware architecture unification integrated circuit system unification programming language platform unification clojure web application model unification lifecycle management unification model warehouse workshop model summary difference others disadvantage fp oo difference middleware difference rx rx rxclojure difference traditional unixlike pipe operator fp language basic quality control function evaluation dataflow evaluation system evaluation code quality visualization tao killer application software design develop automation great historical significance nominate postscript imagination everchanging simplicity principlesbased better rulesbased end message article table content english chinese chinese simplicity unity grand unified theory lisp clojure pure function pipeline dataflow unification discipline tao ai mathematics accounting pure function pipeline data flow international disease classification etc reach three immortality difference fp oo dataflow jin yong dragon eight division xiaoyao school martial art system office database service data model global strategic function implementation local tactical hero see rob perlis pure function pipeline data flow integrated circuit pure function pipeline data flow method comment left ear mouse functional programming functional programming learning mode method infinite method code also firstclass citizen code complete imagination programming art computer programming imagination programming myth programming life death book reincarnation hell semiautomatic rifle batch processing lazy rulai god palm treeseq c stupid ca nt understand ui construction method google flutter similar technology created eliminated example abstraction polymorphism metamorphosis technical architecture project ai accounting statistic legal antivirus software,goto chinese edition 中文版 pure function pipeline data flow grand unified programming theory copyright lin pengcheng right reserved table content people related view keep simple unified lin pengcheng nasa rule writing missioncritical code code simple control flow construct gerard j holzmann nasa jpl lead scientist minimize control flow complexity area ifs favoring consistent execution path time optimally avoiding unnecessary work john carmack clojure aphorism tangled web mutation mean change code potentially occurs large joy clojure edition chapter bad programmer worry code good programmer worry data structure relationship linus torvalds data dominates chosen right data structure organized thing well algorithm almost always selfevident data structure algorithm central programming rob pike better function operate one data structure function data structure alan perlis first recipient turing award founding father computer science separate discipline show flowchart conceal table shall continue mystified show table usually need flowchart obvious fred brook turing award mythical manmonth even simplest procedural logic hard human verify quite complex data structure fairly easy model reason data tractable program logic follows see choice complexity data structure complexity code choose former evolving design actively seek way shift complexity code data eric steven raymond art unix programming basic unix philosophy metaphor richer understanding software development valuable chapter code complete chapter principlesbased better rulesbased international accounting standard summary using input output characteristic pure function pure function used pipeline dataflow formed series pure function series dataflow code block function equivalent integrated circuit element board complete integrated system formed serial parallel dataflow also said data logic strictly separated element level separation data logic data stream processing defn f even odds total amax amin x let even odds cond even x inc even odds odd x even inc odds else even odds total total x amax max amax x amin min amin x even odds total amax amin reduce f inf inf programming process designing data model simple fluent manipulation function project threading macro code block step simple verifiable replaceable testable pluggable extensible easy implement multithreading clojure threading macro provides languagelevel support purefunctionpipeline dataflow sea sail helmsman programming move toward data initial state final state shortest linear distance two point simplicity root fast stable reliable good war surprising victory reputation wisdom honor courage sun wu art war famous chinese military politician sage military science ancestor eastern military science design philosophy industrial pipeline pure function pipeline data flow essence towards goal step step every step move forward final goal final goal reached therefore success inevitable surprising process simple repetition using method proficiently simple repeated boring technique simplicity repetition pursued large industrial production line basic construction method pipeline component block function equivalent integrated circuit component board series function block one function side effect end addition must pay attention data standardization work verify data entrance exit run full speed middle simple smooth stable efficient clojure language recommended function designed singleparameter function hashmap type like function r language design many named parameter default value highly scalable addition clojure many core function operating hashmap easy operate may nt write parenthesis using macro integrated parameter formation verification transformation serial pipeline function also convenient deconstruct clojure convenient multiparameter function defn f x x defn f key x x branch cond block function defn f x cond x x else defn x x defn pathcombine cond stringstartswith stringendswith stringsplit butlast stringjoin str pathcombine else stringjoin stringreplace feedback circuit feedback circuit reflow whirlpool recursive tail recursive function equivalent feedback circuit note map batch processing regarded similar queue tourist repeating ticket checking action entrance forward action feedback reflow defn f ifnot zero dec recur shunt example data partitioning parallel processing data partition n pmap f pmap data confluence reduce result shunt data partition n pmap reduce code example code example traditional expression chaotic logic unreadable keyword f pure function pipeline dataflow unrestricted expression read order closer order execution machine keyword f code example def data b c e f g h j k l n p q r defn k v let h v f fn x mapv vector td x tds map f tr f h tr td rowspan count v k conj tds data reduce tbody conj table hiccuphtml b c e f g h j k l n p q r classical model true sign intelligence knowledge imagination analogy albert einstein analogy application algebraic thinking analogy may established real world must established virtual software world easy map old model new model upgrade according standard specification new model management called merger absorption typical application philosophy tao grand unified theory dataflow currentflow function chip thread macro etc wire entire system integrated circuit energized data flow raw material flow pure function machine thread macro etc conveyor belt entire system large industrial pipeline communication mode data signal control signal annotation metadata flow pipeline compiler essentially data transformation starting source code series pure function pipeline transformation optimization machine code easy insert enhanced optimization feature parallel compilation also simple urban water network management best vivid treasure trove computer science algorithm architecture asynchronous parallel distributed etc programming approach fusion functional programming enterprise management added helpful communication information technology department management company gantt chart management timeline main axis multiple data flow running parallel also good data flow parallel asynchronous programming tool parallel large industrial pipeline expanded linearly parallel distributed group company model total branch model parentsubsidiary model holding company model etc architecture organizational structure pyramid classic topdown modular design flat pure function pipeline data flow matrix aop aspectoriented programming business process outsourcing bpo functional programming fp fp use department function complete task also nonworking department higherorder function delegate task outsourced company function parameter owndepartmentfunction tasklist apply outsourcedcompanyfunction tasklist chaos peer peer oop objectoriented programming o resource management erp type system industrial standard system iso standard national standard industry standard enterprise standard pure function pipeline data flow suitable implementation product specification data specification industry standard system like computer hardware interface standard specification hardware function interface data standard specification data transferred hardware function storage management buffer cache database etc inventory management large business process first thinking based credential evidence credential data credential data flow node process form dataflow every node process pipefunction pure function pure function pipeline data flow boeing aircraft pulse production line technology like confluence technology river source sea also variant gantt chart warehouse workshop model warehouse database pool workshop pipeline model simple practical model large industrial assembly line mainstream production technology world everything unified unification programming technology system architecture program algorithm data structure niklaus wirth turing award father pascal better function operate one data structure function data structure alan perlis first recipient turing award founding father computer science separate discipline warehouse data structure database obviously database global unique possible workshop algorithm function extended case ui architecture component interact around atom state better component managing state warehouse atom state includes ui component similar data structure alan perlis workshop individual component similar function alan perlis unification singlethreaded multithreaded asynchronous distributed fireandforget guidance bullet independent guidance capability need external support automatically track strike target need control launching utility model advantage improving use efficiency missile launcher reducing missile dependence system provide updated information launcher attack largest number target shortest time improve survival launcher development direction guidance technology future precisely fireandforget precision guidance technology reason think development direction concurrent parallel programming technology also fireandforget asynchronous unnecessary async await backward inevitably eliminated model change focusing code function development data control data flow management data lifecycle management data standardization system process improvement process reengineering thread collaborative optimization etc abolition async await essentially operation research waiting thread example factory happen one workshop stop middle production process wait product door another workshop continue production process workshop interacts warehouse main thread also workshop sends order data production plan generated warehouse data message sent relevant workshop production task completed waiting entire process production plan generated according order warehouse center workshop independently produce parallel existing pragmatic fireandforget concurrency parallel technology software transactional memory stm multiversioned concurrency control mvcc git product standardized data warehouse data management sending receiving like enterprise me manufacturing execution system database dbms me used workshop integrated warehouse dbms combination dbms database reasonable performance higher notify thread production data order production plan inventory level send data thread thread exist create thread fireandforget forget sending data workshop intelligentthread supermicroservice fireandforget thread autonomy intelligence called intelligentthread except input output data isolated outside world forget data sent warehouse passive production lean production jit time production production order production plan pursuit zero inventory quick response active lazy production data warehouse cache lower minimum inventory level thread start produce data fill warehouse optimal inventory level reached distributed case flink stateful function flink stateful function like previous article everything rmdb warehouseworkshop model strictly interaction workshop flink stateful function diagram seems interactive perspective flink stateful function defines warehouse strictly define workshop state server similar clojure ring web server clojure web application model ring also warehouseworkshop model warehouseworkshop model vast majority workshop pipelinefunction pure function longpipelinefunction consisting serially connected pipe side effect end series pipeline similar consumables office supply lubricant sent warehouse workshop consumed flink stateful function emphasize twoway fireandforget finally think would better flink stateful function adhered warehouseworkshop model strictly related discussion clojureverse unification microservice intelligentthread reference unification singlethreaded multithreaded asynchronous distributed every intelligentthread microservice product standardized data warehouse data management workshop intelligentthread microservice unification information system integration model many large enterprise independent information system produced different manufacturer need integrate integrate workshop individual subsystem warehouse information system integration layer act individual system unified abstraction layer virtual database virtual data warehouse enterprise global data external data request subsystem requested system without knowing subsystem achieve unity global system middle layer data routing system interconnection isolation change one subsystem change cause chain change subsystem putting complexity one place better putting place subsystem guaranteed independence simplicity subsystem realized ultimately simplicity unity global system achieved extended case o provides large number apis developer use o api change may frequent adding method variable previously developed application likely use old o api solution develop directly version compatibility layer independently freely develop o warehouse individual version compatibility layer workshop o application programming language etc intel cpu start pentium kernel switch risc external cisc compatibility layer microsoft window system also support do window application separate compatibility layer apple mac o x us independent compatibility layer support legacy application system o integration layer similar ecommerce platform warehouse shop subsystem similar workshop shop consumer need conduct purchase sale activity exchange ecommerce platformthere need direct communication pay attention detail product data formed circulated unification microkernel architecture warehouse core system workshop plugin module product message data unification aop similar industrial zone global professional sewage treatment plant input sewage treated separately warehouse two type data product stored external input data middleware pipeline function conforming data interface standard data queue single queue hashmap classified queue receive external data middleware queue single queue hashmap classified queue support dynamic modification storage middleware workshop receive external data apply middleware process data single queue according metadata carried input data choose call middleware hashmap classified queue according key type mapping input data middleware choose call middleware output external pipeline function single queue according metadata output data choose external pipeline function output hashmap classified queue according key type mapping input data middleware choose external pipeline function output unification eventdriven architecture warehouse database trigger mechanism clojure addwatch workshop database trigger clojure watch function unification computer hardware architecture model us memory core cpu warehouse memory workshop cpu graphic card sound card etc standardized data data transmitted hardware conforms industry standard interface acceptance motherboard standardized interface pci sata usb etc external standardized data hard disk flash drive etc unification integrated circuit system warehouse battery workshop integrated circuit component chip board electrical equipment standardized data current external standardized data power plant unification programming language platform like julia lisp built internal core internal representation popular grammar used externally therefore grammar problem compiler grammar evolve independently go hand hand freely efficiently flexibly several language time julia native support julia lisp syntax thirdparty implementation clojure syntax performance equivalent native grammar converting clojure grammar lisp grammar simpler native julia grammar conversion implementing language platform represented lisp simple racket regardless one developer like swift python ruby scala f java implemented separately satisfied warehouse standard library library represented internal lisp compiled code written various external language native compiler compiled library application workshop native compiler get lisp intermediate code repository compile output repository internal lisp core write code lisp compile output intermediate code language external language compile output language code warehouse language interact interact repository multilanguage racket language mechanism unification clojure web application model product standard data interface reqmap respmap ring warehouse ring workshop function side c raw material hashmap transferred warehouse interaction therefore recommend function single hashmap type parameter parameter mapped standard datatable database constraint stored procedure schema etc needed clojure immutable persistent data structure cause data cloning suitable scene unification lifecycle management algorithm derived chinese myth circulating thousand year book life death hell product data soul component warehouse database book life death hell save matter status living thing component life death trigger trigger monitor event change status lifetime living thing component according event workshop judge end component life judge function reward good punishes evil according book life death old lady mengpo restore soul component original state six great division wheel karma resource pool hell punishment destruction garbage collection unification model warehouse standardized data model rmdb workshop pure function pipeline data flow industrial production line watertight compartment vessel standardized data industry standard product raw material semi finished product finished product acceptance quality control department custom external standardized data purchasing department supply chain warehouse workshop model summary industry product standard interface production method code implementation limited input raw material data conform standard output product data conform standard entering warehouse data must acceptancechecked first input output workshop standardized data inputdata come warehouse outputdata acceptancechecked sent warehouse therefore abnormalerrorillegal data inside workshop need check data code workshop pure function pipeline data flow simple reliable highperformance easy debug easy observe easy maintain easy expand workshop workshop independent noninteractive like lego module ship watertight compartment internal change abnormality one workshop affect workshop difference others disadvantage fp oo fp oo overly complicated feasible large industry also kind production method emphasizes personal technology hand workshop personal technology greatly affect product quality extremely unreliable production methodsfp oo actually taking detour highly embellished ineffectual produce kind fail excessive application oo fp design pattern addition increasing complexity error probability reduce performance without benefit complex network relationship object oo system also difficult maintain tend construct system simplest concept basic technique syntax function used implement mind pure function pipeline data flow simplest stable reliable readable great poet bai juyi china even illiteracy understands appreciates poetry hope code understood junior programmer even complicated system difference middleware code look similar idea essentially different input output middleware function function flow layerpacked function like concentric circle middleware debugging troublesome input output purefunctionpipelinedataflow function data flow data linear series parallel like line ca nt agree idea middleware conflict idea integrated circuit circuit component board circulated data current flow essential difference difference rx essentially different rx essential difference programming method inherent thought model idea model pure function pipeline data flow highly consistent integrated circuit pure function pipeline data flow emphasizes data flow rx emphasizes asynchronous event flow mention emphasize data flow pure function pipeline data flow composed component model much simpler rx pure function pipeline data flow emphasizes sequential structure series pipeline component maintenance code reading expansion debugging etc simpler asynchronous event flow pure function pipeline data flow simpler rx wrote asynchronous event flow project queue processing simple need mention specifically clojure language nt require rxclojure difference traditional unixlike pipe operator fp language basic quality control basic quality control pure function pipeline data flow code must meet following three basic quality requirement talk thing simple reliable evaluation criterion enough eliminate unqualified code function evaluation look shape code pipeline structure weight whether function pure function dataflow evaluation data flow one side effect placed end system evaluation look circuit diagram treat function black box like electronic component code quality visualization lisp language expression contour graph simple transformation contour map mountain map height mountain high altitude value similar mean quality code good nonlisp language convert source code abstract syntax tree ast contour map mountain map tao according taoism water flow perfect substance water flow always able assume shape needed sequential processing mission completed reaching end pure function pipeline data flow like water flow almost tao clojure add four persistent collection core function jvm express code four persistent collection syntax change needed like water flow almost tao tao simplicity tao law nature tao algorithm tao everything everywhere everytime tao great unification everything therefore integrated circuit technology industrial assembly line production technology accounting management architecture etc everything used algorithm software engineering method transform killer application software design develop automation software design develop automation sdda software hardware design le different software designer think different hardware designer think fred brook turing award mythical manmonth pure function pipeline data flow realizes unity software hardware logical model solves problem fred brook pure function pipeline data flow basic way sdda sdda innovative revolutionary approach develop largescale software pure function pipeline data flow systematically simulates integrated circuit system sdda implemented like electronic design automation eda establishing simple unified standardized systematic pipeline component library basis sdda also correct method sdda like eda ai selects component pipeline component library according data standard specification initial state final state ai combine pipeline component meet data standard specification complete task corresponding pipeline component automatically generated ai developed manually developer great historical significance fool ignore complexity pragmatist suffer avoid genius remove alan perlis epigram programming first recipient turing award founding father computer science separate discipline solution simple god answering everything simple possible simpler fundamental idea science essentially simple may rule expressed language comprehensible everyone ca nt explain simply nt understand well enough intelligent fool make thing bigger complex violent take touch genius lot courage move opposite direction albert einstein greatest folk scientist history professional clerk patent office amateur physicist nobel prize physic make folk science great perfectly defeat messy complex software engineering methodology simple unified way realize unification software hardware logical model unification programming technology system architecture innovative warehouse workshop model achieve leap software production theory era manual workshop era standardized production large industry basic way software design develop automation sdda sdda innovative revolutionary approach develop largescale software like electronic design automation eda particular outstanding trendsetting technical achievement fit perfectly principal claim turing award think win turing award highest award computer field win turing award must acm lack ability appreciate technology history prove lin pengcheng selftaught folk scientist idea simplicity unity important guiding ideology scientific research unification theory longstanding goal natural science modern physic offer spectacular paradigm achievement found knowledge various discipline universally applicable unified theory simpler basic greater pure function pipeline data flow based philosophy taoism great unification theory computer field first time realized unification hardware engineering software engineering logical model extended lisp languagelevel code data unification system engineeringlevel software hardware unification whether appearance code runtime mechanism highly consistent integrated circuit system also widely unified discipline management large industrial assembly line water conservancy project power engineering etc also simple clear support concurrency parallelism distribution simple natural five basic component pipeline pure function branch reflow feedback whirlpool recursion shunt concurrent parallel confluence whole system consists five basic component perfectly achieves unity simplicity must ultimate programming methodology addition industry still young immature discipline current software engineering still level manual workshop pure function pipeline data flow brings large industrial production theory method software engineering incorporates industry modern large industrial production system epochmaking innovative theory method modern society information society control everything penetrates everything opinion development exactly development modern largescale industrial production system development industry development industry data standard system widely established improved interconnected international national industrial enterprise level precisely standardized every smallest part pure function pipeline data flow become basic theory method become increasingly important become ultimate standard method entering textbook industry key industrialization industry establish complete standard system like traditional industry software pipeline producing product data different traditional industrial production line therefore software production method adopt enterprise management idea develop software something similar traditional industrial assembly line input standardized raw material data output standardized product data store warehouse database perspective large industrial production theory standardizing input raw material data output product data following advantage fairness neutrality use data standard specification make fair different manufacturer product algorithm implementation achieve healthy competition fungibility long pipeline product meet data standard specification directly replaced standard data standard data interface data specification better code interface interconnectedness long pipe comply data standard specification interconnected combination data combination better code function combination simplicity simplicity shortest path solution ward cunningham wiki inventor unity everything pipeline realize unification theory discipline integrated circuit business management hydraulics electricity refer theory realize unification programming technology system architecture innovative warehouseshop model predictability system architecture design guideline component simple unified clear future development change system predictable reliability simplicity prerequisite reliability edsger w dijkstra turing award easy expand insert replace pipe easy parallel linearly scale production performance observable easy debug verifiable data flowing pipe easy observe easy see pipe leaking clarity nonit practitioner understand role standard system seen great progress social productivity traditional industry entered era large industrial production era manual workshop method applied line codelevel pure clojure project prove practicability method finally agree please help nominate turing award nominate postscript imagination imagination important knowledge true sign intelligence knowledge imagination logic get b imagination take everywhere albert einstein similar valuable chapter code complete chapter metaphor richer understanding software development tend inspire reader discover useful pattern life work personal interest used solution development rather apply mechanically people case way endless case always endless way solve problem tao everchanging asked nt create several pipeline dataflow design pattern like oo fp thought chinese classic myth fiction journey west bodhi asked monkey wanted learn tiangang change pattern disha change pattern monkey chose disha change pattern failure become foregone conclusion bodhi taoist great god must understand nature tao learn law nature everchanging truth whether monkey chose tiangang change pattern disha change pattern thought stifled shackle put invisible tight curse approach tao teaching playing monkey simplicity simplicity mean easy pure pipeline system simple system simplicity mean easy implementing pure pipeline system systematic engineering hard work must done build complex system simple smooth pure pipeline system requires great wisdom pay lot difficult business process design reengineering many people think sage secret trick despise simple technology pursue complex difficult sophisticated technology idea completely contrary fact wang yangming famous wellknown thinker philosopher calligrapher strategist educator china addition long carefully read pure function pipeline data flow find use basic common sense solve problem use complicated delicate technology common sense human best practice widely used reliable theory principlesbased better rulesbased principle important affect flexibility creativity example exceed principle principle simple clear enforcement must ensured many rule equal rule complicated difficult enforce increasing risk loophole affecting flexibility creativity implementing software engineering like leading soldier fight many complicated military discipline make difficult soldier understand execute final result poor simplicity unity must parallel pure piping system meet principle principle consistent mainstream principle modern industrial production end message spend spare time developing financial analysis expert system although writing time limited gradually improve compared content first set blog rich improved lot article table content english chinese chinese simplicity unity grand unified theory lisp clojure pure function pipeline dataflow unification discipline tao ai mathematics accounting pure function pipeline data flow international disease classification etc reach three immortality worth work word difference fp oo dataflow pure function pipeline data flow jin yong dragon eight division xiaoyao school martial art system office database service data model global strategic function implementation local tactical hero see rob perlis pure function pipeline data flow integrated circuit pure function pipeline data flow method comment left ear mouse functional programming functional programming learning mode method infinite method code also firstclass citizen code complete imagination programming art computer programming imagination programming myth programming life death book reincarnation hell semiautomatic rifle batch processing lazy rulai god palm treeseq c stupid ca nt understand ui construction method google flutter similar technology created eliminated example abstraction polymorphism metamorphosis technical architecture project ai accounting statistic legal antivirus software
80,Lobsters,clojure,Clojure programming,Grumpy chronicles: The question of utils,https://tonsky.me/blog/utils/,grumpy chronicle question utils,grumpy chronicle question utils discussing today problem solution rule subscribe support patreon,grumpy chronicle question utils ongoing miniseries lesson learned writing tiny blog engine clojure code discussing today problem every project utils namespace usually huge single namespace tiny code bit need used one place project project start grow single namespace becomes hard keep organized might notice function le random order related thing necessarily grouped together lower discoverability reuse main reason utils exist first place mixed clojurescript project another issue many utils make sense single platform others need crosscompiled unfortunately create utilsclj utilscljs utilscljc time keeping everything utilscljc would mean putting clj cljs around function solution split utils family namespaces grouped domain eg number one namespace collection another time url file etc grumpy small project loc yet already library core collcljc configclj filesclj fragmentscljc jobsclj logcljc macrosclj macroscljs mimecljc postsclj routesclj timeclj transitclj transitcljs urlcljc webclj xmlclj joy work need something file go grumpycorefiles need create function right belongs feel good thing stay neatly organized writing new code increase tech debt namespace essentially small library useful focused comprehensible clear mission scope le everybody love good reusable library organize project like worry namespaces start small example grumpycorelog single oneline function defn log args apply println clj timeformatloginst args matter semantically area responsibility go namespace also make thinking dependency somewhat easier twopart graph reusable library business code bottom half depend top half vice versa look grumpy right arrow mean depends normally depending business namespaces might complicated special condition namespaces loaded dependency loop etc utility namespaces direct opposite guarantee depend back business code like external library would put code top half rest project always reference zero effort rule singlefile utils namespaces convenient people like entropy tendency appear almost take active action prevent happening even go far declaring principle catchall util namespace allowed want make piece code reusable figure sublibrary semantically go creates clear point making decision forcing everyone decide long run save lot headache hi nikita write programming ui design subscribe also create opensource stuff fira code anybar datascript rum like want get early access article along benefit support patreon
81,Lobsters,clojure,Clojure programming,Overthinking it and the value of simple solutions,https://korecki.me/blog/2019/10/8/overthinking-it-and-the-value-of-simple-solutions,overthinking value simple solution,many company open source project scheduler leader run le stuff evaluated strict way possible redlock seems lot issue lockjaw lockjaw postgres advisory lock component,fully distributed team organize adhoc meeting time want therefore adopted rfc request commentschange process author writes document state problem possible solution evaluation attempt pitfallscons conclusion rfc process quite popular many company open source project used great successfor scheduler problem took rfc document testing following approach using redis lock serviceusing zookeeper consul jgroups basis leader election mechanismintroducing new service would centralized distributed scheduler orchestrating job rabbitmq similar google cloud scheduler servicethe last idea rejected introducing much complexity dependency single point failure rest system approach evaluated form internal clojure library called leader provides uniform interface picking cluster leader backed consul zookeeper jgroups course backends pluggable end approach documented built tested rejected themrun le stuffanything introduces new piece infrastructure evaluated strict way possible solving problem hand also answering following question possibly going manage new piece failure mode going manage upgrade suitable scale associated infrastructure cost security implication single purpose tool use purposesonce question taken account basically ruled introducing solution based consul zookeeper similar system deployment setup incredibly simple deploy containerized application dedicated vms backed internal load balancer managed terraform adding another layer state deployment introduced yet another layer complexitythe last choice redis based solution also feel right redis usage light could potentially add one workload without affecting rest system however popular approach redlock seems lot issue comfortable deal potential problem caused clock skew etcback drawing boardlockjawthis lockjaw come small library expose postgres advisory lock pluggable component
82,Lobsters,clojure,Clojure programming,State of Clojure 2020 Results,https://clojure.org/news/2020/02/20/state-of-clojure-2020,state clojure result,,clojure developer particularly interested version tooling related question survey one new question asked year primary developer operating system give u better guidance toolrelated work expected macos leader followed linux window primary development tool minor update year emacs dropped slightly intellijcursive rose slightly v code calva biggest increase clojure user wealth fine development environment suited different community taste glad see getting better day day many year survey included question build tool idea single monolithic tool become increasingly le reflective people managing clojure project may use multiple tool different part process particularly mixed clojureclojurescript project response tailored question tightly dependency management made multiselect year looking previous year continue see strong slightly reduced use leiningen steady increase use cljdepsedn clojurescript work shadowcljs made big stride last couple year big support clojurists together greater world java jvm java migrated new release strategy release come every spring fall every year long term support lts release presumably java introduced major change module system jvm community caused significant user base remain java clojure reflects well although probably show shift java language community release like java soon effectively dead next release come would recommend sticking primarily lts release maybe latest release lts release one aspect java underappreciated significant work make java work better container like docker deploying containerized environment java really looking closely change java considering upgrade clojure using java baseline jvm couple year continue also supporting newer version java running clojure recommend java right since last year seen strong uptake clojure latter maintenance release year error handling improvement building change clojure mitigation java performance regression service release java use clojure earlier continues dwindle addition prior dependency management question also added new question respondent starting apps production based feedback likely wording answer choice need finetuning next year interesting feedback result majority user using launcher like leiningen clj start production apps building jar uberjars launching directly java see small group also experimenting graal native image particularly common smaller scripting apps
83,Lobsters,clojure,Clojure programming,"Skyscraper, a Clojure scraping framework that helps you build structured dumps of whole sites",https://github.com/nathell/skyscraper,skyscraper clojure scraping framework help build structured dump whole site,skyscraper concept structural scraping scrape tree enlive context processor go documentation caveat license http danieljanuspl,skyscraper framework help build structured dump whole website concept structural scraping scrape tree think enlive allows parse arbitrary html extract various bit information subtrees part subtrees determined selector convert information format easier machine consumption process whatever way wish called scraping imagine parse lot html document come site structured way scraped using set selector index page different layout need treated peculiar way pagination page group together individual page category treating single page easy whole collection page quickly find writing lot boilerplate code particular realize wget r whole thing parse page turn rather want simulate workflow user try click website obtain information interested site treelike structure want keep track structure traverse site reflect output call structural scraping tree traversed page information extracted one scrape tree context context map keywords arbitrary data think everything scraped far context two special key url processor contains next url visit processor handle see scraping work transforming context list context think list monad initial list context supplied user typically contains single map url root processor typical function producing initial list context seed look like defn seed url http wwwexamplecom processor rootpage processor processor unit scraping function process set html page uniform way processor defined defprocessor macro register processing function global registry typical processor site landing page contains link page within table cell might look like defprocessor landingpage cachetemplate mysiteindex processfn fn re context select re td page text url href processor subpage important clause processfn function called processor extract new information page include context take two parameter enlive resource corresponding parsed html tree page processed current context ie combined output processor far output seq map new url new processor specified keyword invoke next go explore documentation look example example directory repo read docstrings especially scrape defprocessor something unclear suggestion encounter bug please create issue caveat skyscraper work progress thing missing api still flux function macro name input output format liable change time suggestion improvement welcome preferably github issue pull request license copyright c daniel janus http danieljanuspl permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
84,Lobsters,clojure,Clojure programming,Parens for Python - UMAP & Trimap,https://nextjournal.com/gigasquid/parens-for-python---umap-trimap,parens python umap trimap,parens python umap trimap umap http umaplearnreadthedocsioenlatestbasicusagehtml umap digit data trimap http pypiorgprojecttrimap http githubcomgigasquidlibpythoncljexamples,parens python umap trimapwe going explore python library use libpythonclj time going focus couple dimensionality reduction library called umap trimap going need support library installed go example install python python env bash clojure also need setup plotting alias matplotlib python env clojure first define quick macro show plotting local system allows matplotlib library seaborn built able shown python env clojure umapumap dimensionality reduction library seems like lot word basically take complicated dataset many variable reduces something much simpler without losing fundamental python env clojure next going follow along code tutorial http umaplearnreadthedocsioenlatestbasicusagehtmlwe next setup default plotting get data work look iris dataset nt representative term real world data since btoht number point feature small illustrate going dimensionality python env clojure define data frame series data set plot python env clojure time reduce first define reducer train lean manifold fittranforms function first fit data transforms numpy python env clojure python env clojure umap digit datanow let use dataset complicated data handwritten digit set know python env clojure let take look image see dealing python env clojure let scatterplot first dimension element grayscale python env clojure let reduce python env clojure dataset row column plot resulting embedding coloring data point class belong digit python env clojure trimaptrimap another dimensionality reduction library us different algorithm http pypiorgprojecttrimap python env clojure digit example using python env clojure finally visualize python env clojure hope enjoyed example spur curiosity try python interop find code example along http githubcomgigasquidlibpythoncljexamples
85,Lobsters,clojure,Clojure programming,"What are Lisp macros good for, anyway?",https://levelup.gitconnected.com/what-are-lisp-macros-good-for-anyway-dac97d74904a,lisp macro good anyway,timing operation python timeit java clojure turn time implementation macroexpand,timing operationsay written function named foo take one argument return number want know roughly long function take typical parameterspythonone option python builtin timeit library usage might look like using timeitnote pas string containing code want time execution note also use return value call avg afterwards setup argument bit cumbersome maybe way around thatit seems common approach pythonista use time using time manuallythis somewhat errorprone generally work ok since take time line line timed complicated easy time part line eg subexpression could also write timing function take function argument custom timing functionthen usage would look like using timecallnote allows result call foo captured used approach amenable adding timing something inside bigger piece code removing shortly afterwardjavai know anything built java help write fairly generic timing function custom timing function javathe signature taking supplier something return value one taking runnable something usage look like using custom timing function javathis pretty similar python case although verbose due type system note however python java timing piece code may require wrapping another expression kind functionclojure turnclojure builtin operation called time use like using clojure timetime also return argument call foo within context code typical easily inserted removed say balance parens removing adding call time good editor lisp like clojure make painless removing time automatically remove corresponding right parens expressionhow time work without requiring argument implement interface contract python argument could string using timeit timeit return result evaluating code additionally easy insert timeit call since requires making code string python java time something accepting function requires caller wrap code timed lambda expressionthe answer course clojure time example lisp macro rather function let look implementation time documentation omitted brevity implementation time clojurecoretime macro taking one argument namedexpr magic happens expression ret expr executes provided expression foo assigns variable ret operator macro evaluates expression ret way ensuring unique variable name scope macro avoid using variable enclosing scope ie one defined elsewhere program mistakeso clojure version time take arbitrary code snippet lisplike clojure represented list surrounded evaluates print long took return resultwe see macro work using macroexpand
86,Lobsters,clojure,Clojure programming,Clojure beginner resources,https://gist.github.com/yogthos/be323be0361c589570a6da4ccc85f58f,clojure beginner resource,introductory resource deeper dive environment setup intro repl driven workflow community,clojure beginner resource introductory resource deeper dive environment setup intro repl driven workflow community
87,Lobsters,clojure,Clojure programming,"Desktop UIs in ClojureScript, React, Node.js and Qt (code in english, spoken in Russian)",https://www.youtube.com/watch?v=dLxChnisjOE,desktop uis clojurescript react nodejs qt code english spoken russian,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature extending qt component part desktop uis clojurescript react nodejs qt youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature extending qt component part desktop uis clojurescript react nodejs qt youtube
88,Lobsters,clojure,Clojure programming,"Careful with that middleware, Eugene",http://blog.danieljanus.pl/2020/01/21/middleware/,careful middleware eugene,prologue skyscraper part one wrap wrap wrap wrap cljhttp middleware pattern part two test screaming loud epilogue,releasing version skyscraper clojure framework scraping entire site daysmore three year passed since last release time made number attempt redesigning robust usable faster last one resulting almost complete rewrite almost ready public use ironing rough edge documenting adding long journey blog someday today like tell another story one nasty bug encounteredpart one wrap wrap wrap wrapwhile updating code one old scraper use api skyscraper noticed odd thing output record contained scrambled text apparently character encoding recognised thought skyscraper extra careful honoring encoding page scraped declared either header meta httpequiv tag fact remembered seen working wrong every page downloads skyscraper cache http response body along header downloaded header needed ensure proper encoding parsing cached page header lowercased skyscraper call get allheaders contenttype get encoding declared header step missed server return encoding header named contenttype matched kaboom looked cache sure enough header name cache lowercased even though maybe mistaken forgotten lowercasing glance code lowercasing right around call download functiondigression skyscraper us cljhttp download page cljhttp turn us middleware pattern request function wrapper function implement thing like redirects oauth exception handling say literally wrap bare function wrapsomething request return another function act like request added functionality function turn wrapped yet another one default set middleware wrapper defined cljhttp also provides macro withadditionalmiddleware allows specify additional wrapper one wrapper wraplowercaseheaders name suggests cause header key returned lower caseback skyscraper ready look code spot problem let requestfn requestfn option httprequest httpwithadditionalmiddleware httpwraplowercaseheaders requestfn req successfn errorfn stared several minute dirty experiment repl perused code cljhttp dawned mesee requestfn even though skyscraper us httprequest default override option supply way http test use mock call http server particular case overridden though usual httprequest used thing looked good within body httpwithadditionalmiddleware header lowercased requestfn httprequestor let show withadditionalmiddleware implemented expands another macro withmiddleware defined follows docstring redacted defmacro withmiddleware middleware body let middleware binding currentmiddleware cljhttpclientrequest reduce cljhttpcorerequest body right withmiddleware work dynamically rebinding httprequest mean requestfn calling actually wrapped version one captured outer let one rebound one without additional middleware lightbulb moment moved withadditionalmiddleware outside let httpwithadditionalmiddleware httpwraplowercaseheaders let requestfn requestfn option httprequest requestfn req successfn errorfn sure enough workedpart two test screaming loudis end story guessing thinking thought wanted add one last thing regression test never run problem futurei whipped test one page scraped check correct string made ran fixed code green ran previous broken green tooat point knew get bottom thisback experimenting found extracting encoding freshlydownloaded page actually worked fine failed parsing header fetched cache map case case code effectively get contenttype texthtml contenttype lookup succeed map lookup string comparison casesensitive yet freshlydownloaded header succeed checked type map one clojurelangpersistenthashmap expected one actually let comment one speak map implementation store original canonical key value keyvalue pair performs lookup operation using normalized allows value looked many similar key exact precise key originally stored turned library author actually foreseen need looking header irrespective case provided helpful mean whole lowercasing business needed stripped withadditionalmiddleware altogether added code elsewhere ensure header map headermap regardless whether come cache lived happily ever afterepiloguemoral story twofoldknow dependency problem might generically addressed library using look deeper might alreadythanks proofreading article
89,Lobsters,clojure,Clojure programming,Gracefully restarting Clojure services at scale,https://medium.com/helpshift-engineering/achieving-graceful-restarts-of-clojure-services-b3a3b9c1d60d,gracefully restarting clojure service scale,killing softly graceful shutdown clojure keeping business requirement unhampered shutdown process introduction none active thread leave system inconsistent state restarting scaling service mean graceful shutdown invariant expected service must hold even service shutting jvm point view asynchrony clojure future executorservice sendoff shutdownagents network repl visualvm network repl phase connecting via nrepl network repl phase launching first set future phase shutdownagents nrepl session thread jvm shutdown hook api shutdown hook api last nondaemon thread exit systemexit called jvm asked shut via interrupt jvm performs emergency exit jvm killed forcefully application could register hook jvm time shutdown registered hook invoked method afn class shutdown hook function registered deregistered shutdown sequence started guarantee order registered shutdown hook executed wait shutdown hook completed exit afterwards daemon thread continue run even shutdown sequence ongoing shutdown hook bypassed within jvm calling runtimehalt shutdown sequence started stopped advised call shutdownagents shutdown hook effect abrupt shutdown service rejectedexecutionexeception prioritisation thread system care need taken abruptly stop component thread respond external stimulus directly serve business goal thread clojure futurecoreasyncagent thread jvm thread shutting system trickledown approach claypoole callerrunspolicy ordered shutdown framework insulate service shutdown sequence jvm shutdown sequence component main purpose differentiating thread pool based importance business context facilitate shutdown mechanism hamper business goal service conclusion harness concurrent nature shutdown hook overhead synchronisation across shutdown hook celery differentiating critical noncritical task clojure future provide abstraction executorservice think shutting service part design service,killing softly graceful shutdown clojureone strength clojure ability interoperate harness power jvm interoperability come baggage one never really ignore jvm thing like class loading garbage collection byte code interpreter jit another simply respect semantics jvm post talk one semantic shutdown sequence jvm translates clojure program best productionise keeping business requirement unhampered shutdown processintroductionat helpshift service deployed horizontally scalable cluster node cluster run uberjar java process rolling deployment new version ensure service always available multiple deployment successfully executed every dayduring deployment new tag couple node cluster stopped started new version jarsome service run hundred thread time node cluster order ensure business goal service affected deployment ensure none active thread leave system inconsistent state restarting scaling service downin service peak traffic thread active jvm gracefully restarting service mean delicately ensuring none thread end putting part system inconsistent statewhat mean graceful shutdownthe fundamental underlying assumption deployment strategy process shutting service graceful service ensure nondeterminism state system even service shutting downevery service written serve business goal raison être usually external stimulus service act example kafka consumer sends email incoming message event trigger act stimulus periodic job settingoff timer act stimulus service http server incoming request stimulus triggered service perform set task carry business goal kafka consumer sending email could looking payload kafka message fetching additional data composing email like attachment contacting mail server recipient handling error code exponential backoff sending alert email fail every task entailed sending email crucial must fail invariant expected service must hold even service shutting make sure task allowed complete least upto reasonable safe point jvm exitsto get point graceful shutdown strategy every service need know part task need complete jvm exit task service spawn multiple sub task sub task spawn sub task task sub task need designate part work critical marked diagram reda service exhibit graceful shutdown ensure critical portion task subtasks complete jvm allowed exita pictorial representation task spawning sub task critical portion marked red time shutdown initiated graceful service need allow critical portion reach completion jvm exitsthe jvm point view asynchrony clojurewhat called task previous section carried thread inside jvm clojure asynchronous task usually spawned using future internally future carried thread pool managed executorservice clojure future spawned unbounded thread pool shrink remaining future run done via clojurelangagentsoloexecutor thread pool another thread pool called pooledexecutor fixedsize thread pool used short task mostly via agent clojurewhen future spawned task submitted agent via sendoff callable submitted soloexecutor thread pool clojure since every function implement runnable callable interface submit queue executorservice would java runnables thread factory used launching future launch thread daemon thread mean jvm automatically shut long least one active thread soloexecutor future pooledexecutor agent standard way shut two thread pool call shutdownagents shuts thread pool mean currently executing task finish new task accepted step towards graceful shutdown clojure service ensure call shutdownagents shutdown later let u try peep jvm see thread pool grow shrink die following snippet create empty leiningen project start trampoline headless repl start connect process another leiningen process using network repl launch future call shutdownagents one terminal windowlein new blankappcd blankapplein trampoline repl headless port another terminal windowlein repl connect dotimes future threadsleep done dotimes future threadsleep done shutdownagents snippet run inspect thread jvm using tool like visualvm diagram entire lifecycle jvm immediately notice thread live forever life jvm thread launched jvm like reference handler rmi scheduler along also see thread facilitate connection one lein process another via network repl also see clojureagentsendpool clojureagentsendoffpool thread first set thread pooledexecutor second soloexecutorvisualvm snapshot thread lifetime jvm created headless repl green signifies thread running state orange signifies parked state violet signifies sleeping state yellow signifies waiting statethe phase marked correspond three thing snippet phase connecting via nrepl connected running lein headless repl number thing started happening marked phase clojureagentsendoffpool thread got launched clojureagentsendpool thread got launched since network repl also written clojure thread launched perform nreplspecific task note soloexecutor pooledexecutor static hence get created agent class loaded phase launching first set future soon launched future since available thread present soloexecutor ten new thread launched second batch future reused existing threadsphase shutdownagents happened called shutdownagents note idle thread launched either soloexecutor pooledexecutor killed executorservice framework clojure thread still alive one work like thread dump time would tell u exactly one thread note nrepl session thread clojure pool thread hence remained jvm shutdown hook apinow seen recommended way shut clojure runtime via shutdownagents let u look shutdown semantics jvm shutdown hook api designed handle shutdown jvm discussing shutdown hook worth mentioning jvm exit one following happens last nondaemon thread exitssystemexit called within jvm processthe jvm asked shut via interrupt signal operating system restart service deployment strategy discussed systemwide event user logoff system shutdownthe jvm performs emergency exit within process via runtimehalt possibly due catastrophic failure jvm killed forcefully system eg sigkill hardware failure first second third case happen jvm start shutdown sequence mean start running hook registered nonshutdown phase jvm lifecycle jvm shutting application could register hook jvm time shutdown registered hook invoked shutdown hook finished jvm process exitadding shutdown hook f done shown snippet f zeroarity function note creating thread object necessarily launching actual thread would happen thread start side note f zeroarity function function clojure implement runnable callable interface run call method afn class bound invoke zeroarity version function addshutdownhook runtimegetruntime thread runnable f registered shutdown hook follow rule since shutdown hook function far clojure concerned exception shutdown hook handled like exception part code defaulting standard error output stream shutdown hook registered deregistered shutdown sequence startedonce shutdown sequence initiated guarantee order registered shutdown hook executed may even run concurrentlythe jvm wait shutdown hook completed exit afterwards without regard factor like nonterminated threadsdaemon thread continue run even shutdown sequence ongoing true nondaemon thread still running initiation shutdown sequence done due systemexit external signal shutdown hook bypassed within jvm calling runtimehalt forcibly killing process anomalous situation deadlocked shutdown hook shutdown sequence started stopped except calling runtimehaltnote shutdown hook may get executed running normal leiningen process run shutdown hook use trampoline run jar java process http advised call shutdownagents shutdown hook properly shutdown agent thread pool guarantee currently executing future allowed finish since jvm exit moment shutdown hook finished irrespective anything else system addshutdownhook runtimegetruntime thread runnable shutdownagents effect abrupt shutdown serviceswhen shutdown sequence running shutdown hook finished jvm exit without regard pending task currently running nonshutdown thread shutdownagents called might see rejectedexecutionexeception codepath launch future happen example kafka consumer even stopping message buffered memory process message future spawned shutdownagents called shutdown task abruptly stopped way find task inconsistent state advised call shutdownagents shutdown jvm gain control shutdown process severe effect service business goal u helpshift could mean various number thing depending service abruptly stopped ranging chatbots running intended timebased cron task getting executed name anomaly visible enduser dealbreaking hence graceful restart strategy design service important ensuring service welldesigned bugfreeprioritisation thread systemin production web application multiple component thread example servlet container like jetty thread serve incoming request clojure future running async task java thread may launched part system ranging jdbc connection pooling auto committing offset kafka topic many thing running time time come shutdown service care need taken abruptly stop component discussed multiple portion task critical must allowed complete even shutdown initiated solve ensuring task sub task critical handled dedicated pool thread system shutdown halt task executed priority pool thread must always allowed finish even shutdown progress give u way categorise thread decreasing order importance business context thread thread respond external stimulus like responding incoming http request event notification important thread system directly serve business goal raison être service thread must always allowed complete current task shutting system thread pool thread perform critical task asynchronously synchronously depending caller second important set thread application critical task directly performed thread performed thread system must halt shutdown thread finish work wellclojure futurecoreasyncagent thread thread launched clojure runtime library saw example used generic context strictly performing business facing task like previous two set thread since clojure thread like via future launched library used service introducing thread ensure nothing outside service thread ever considered shutdownblockingother jvm thread thread run inside jvm cutoff application instrumental getting background work done example jdbc connection pool thread thread sending metric service monitoring systemby differentiating thread perspective importance business context sure long pending task one priority pool shut service able proceed shutdown order importance thread pool listed critical task abruptly aborted stop thread pool wait current task complete proceed closing thread pool wait current task complete proceed rest system process shutting system trickledown approach act shutting spread system critical businessfacing component noncritical one waiting requiredin snippet using claypoole library create identical thread pool clojure soloexecutor thread serve request task critical business requirement service service continue use normal future primitive launch noncritical thread use infuture launch critical thread guaranteed service way ensure shutdown sequence respect priority pool finish task minor detail note guarding scenario pool shut somehow still something remaining done running task calling thread like callerrunspolicy rejection handler play well claypoole future ordered shutdown frameworkhaving defined priority scheme thread pool need handle problem shutting thread component controlled ordered fashion overarching philosophy insulate service shutdown sequence jvm shutdown sequence registering one shutdown hook jvm clojure function respect predetermined order shutting component thread pool order important thread depend others handoff work dependency thread pool closed safely close given pool key determines order shutdown addshutdownhook clojurecoreshutdownagents shutdownagents addshutdownhook apiserverstop stopapiserver along ordered shutdown sequence also make sure jvm shutdown halted pending task priority thread pool futurewaitshutdownhook key expected registered function wait critical pool finish halting shutdown sequence sleeping till noted ordering shutdown hook could implemented differently use library like component still need ensure shutdown sequence halt critical pool thread shrink main purpose differentiating thread pool based importance business context facilitate shutdown mechanism hamper business goal service ordering shutdown hook merely mean enda sample service five kind thread shown thread responsible reacting external signal perform business requirement service thread spawned thread perform task asynchronously like clojure future ensuring task pool aborted even shutdown clojure future spawned thread thread clojure future system shutdown halt collection thread used connecting database making outgoing http connection daemon thread jvm wait shut conclusionthe solution proposed one way ensure clojure service abruptly exit without ensuring critical task completed solution harness concurrent nature shutdown hook speed shutdown process would incur overhead synchronisation across shutdown hook alternatively different school thought spawn critical asynchronous task anything need performed asynchronously pushed separate worker process via distributed task queue something like celery thereby nullifying requirement wait thread thread time shutdownin journey stabilise clojure service deployment come realisation even though clojure provides good semantics concurrency still need understand semantics jvm imposes every program run post looked shutdown semantics jvm preferred way shutdown clojure service lesson learnt along way differentiating critical noncritical task important ensure graceful shutdown service waiting critical task completeclojure future provide abstraction executorservice thread pool javautilconcurrent package worthwhile understand semantics executorservicein autoscaled autodeployed multicluster system clojure service important think shutting service part design service
90,Lobsters,clojure,Clojure programming,Running OpenAI with in Clojure and libpython-clj,https://gist.github.com/kstrempel/3b2f707c2f9019e55f4721b3a80cfbf2,running openai clojure libpythonclj,,running openai clojure libpythonclj n pyclojurecore genclass require libpythoncljrequire refer requirepython libpythoncljpython py import gym env gymmake iepisode range observation envreset range envrender print observation action envactionspacesample observation reward done info envstep action done print episode finished timesteps format break envclose requirepython gym defn runcartpole let env gymmake try dotimes py env reset loop py env render let action env py actionspace py sample result py env step action observation reward done info seq result println observation done println str episode finished inc timesteps recur inc finally py env close defn main runcartpole
91,Lobsters,clojure,Clojure programming,Word Champions,http://blog.danieljanus.pl/2020/01/03/word-champions/,word champion,official polish scrabble dictionary nerd sniping reframe materialui reactdnd repo play word champion github,story begin august friend messaged facebook going tv talent show weekend giving kind problem idea prepare attached link video videonow avid scrabble player explored idea extracting helpful data official polish scrabble dictionary launched clojure repl wrote throwaway code generate sample training problem krzysztof code used bruteforce algorithm dog slow start wednesdayi woke next morning problem still head clearly found nerd sniping situationthere one obvious way write fullblown training app krzysztof could practice studio clock ticking two day leftafter work started fresh reframe project recent reframe convert day wanted see well could cope task hand late night rather early next morning prototype readyit messy code worked chrome failed miserably mobile took age load native j dependency notably materialui reactdnd reason would compile advanced optimization turned weighed mb slurping j file loadbut workedkrzysztof win episode contestant ending third completed challenge successfully took minute second minute allotted episode aired octobervideokrzysztof said problem ended solving show way easier one generated app difficult wow factor might higherseveral month later met scrabble tournament received present wish photographed bottle wine could show code remained messy lowpriority kept returning felt like fixing thing one time added difficulty level one diagram three made work firefox done major rewrite restructuring code sane way removing j dependency react made advanced compilation work getting j made work mobile device written puzzle generator c ended several order magnitude faster prototype clojure version still bruteforce us dirty c trick speed thing hope rewrite rust someday year later added english version accompanying set puzzle generated wordlist taken repo englishspeaking world enjoyplay word champion code github like check try hacking small le total think learning tool reframe clojurescript game featured tv show called gridlock name inspired title video youtube literally meaning pun polish title
93,Lobsters,clojure,Clojure programming,What Could Possibly Go Wrong: Polyglot Party with Nextjournal,https://www.innoq.com/en/blog/what-could-possibly-go-wrong/,could possibly go wrong polyglot party nextjournal,hedgehog nextjournalcomjanwhatcouldpossiblygowrong comment read,nextjournal notebook great tool trying thing sharing result enabling others build top also languageagnostic environment allows spin several programming language virtual embed single document data produce shared across runtimes processed visualised within notebook like nextjournal awful lot experimenting trying build clojure wrapper scala propertybased testing library hedgehog pleasant experience environment lends well playing code data encouraging happy share result encourage build top find notebook nextjournalcomjanwhatcouldpossiblygowrong comment please accept cookie agreement see full comment functionality read
94,Lobsters,clojure,Clojure programming,a util for compiling HTML/PDF documents using Hiccup style templates,https://github.com/yogthos/doc-builder,util compiling htmlpdf document using hiccup style template,docbuilder overview usage development mode license http http wwwgnuorgsoftwareclasspathlicensehtml,docbuilder simple data driven document builder clojurescript document described using two file one file conains html markup document hiccup format contains document data edn format library inject edn data markup compile either html pdf format overview document data placed edn file source directory see documentssampleedn example content data file referenced template using namespaced keyword following format keyword represents getin path provide support accessing nested field document translated path field template compiled template loaded value data file injected template contain code referencing function clojure core e g divrow key network username url databasicsprofiles strongnetwork network divusername divurl href url username corresponding data payload look follows basic network mastodon social username yogthos url http mastodonsocial yogthos template use following directory structure template template name templateedn related file template reference cs file template directory eg pagecss cssbootstrapmincss cssocticonsmincss cssresumecss template reference image file relative source directory eg pageimage src databasicspicture width image injected document base string see default template complete example usage check project locally run npm install g yogthosdocbuilder update documentssampleedn data update configedn needed sample config name template relative template directory template default format output format pdf html puppeteer option format default letter pdfopts format document template folder source document output folder target build build resume passing one document following doc flag docbuilder doc sampleedn also possible specify template using template flag override template specified config docbuilder doc sampleedn template resume development mode run lein cljsbuild watch release start cljs compiler run compiled script node docbuilderjs doc sampleedn compiling release lein cljsbuild release license copyright dmitri sotnikov program accompanying material made available term eclipse public license available http source code may also made available following secondary license condition availability set forth eclipse public license v satisfied gnu general public license published free software foundation either version license option later version gnu classpath exception available http wwwgnuorgsoftwareclasspathlicensehtml
95,Lobsters,clojure,Clojure programming,discrete event simulation in Clojure,https://github.com/dvlopt/dsim.clj,discrete event simulation clojure,transitclj transitcljs using kaocha using chui browser testing license,compatible clojurescript uniquely useful program involving time prioritization way another data science simulation game animation etc program state need evolve methodically time order framing program simulation open new perspective many software developer consider however clojure already hold special place come notion value evolve time starting slowly step step shall try build deeper understanding time majority program write entertaining example hope reader reach aha moment wo nt lie might need one read believe useful anyone benefit reconsidering role time computation one might strictly read linearly might attempt jump section interest reading first section least ensuring grabbed nice cup coffee let u require need special hammock time come require dvloptdsim dsim clone repo git clone http githubcomdvloptdsimclj cd dsimclj clj dev test favorite repl one way another time information ordering simplest definition time unravels sequence event simple way order function clojure would use sorted map sortedmap sortedmap using sorted map trivial schedule event moment supposing key represent point time nesting trivial higherorder prioritization say event rank lower rank meaning higher priority instance ranked given rank one event might occur need differentiate sortedmap asteroid sunset sortedmap character littleprince watchsunset character littleprince feelinghappy baobab grow instead mere event function nested unsorted map event function following rank path event discover located time space say feelinghappy event happens character littleprince path space exactly rank time time baobab growing data structure decided call ranked tree unsorted map indeed ranked using sorted one ranked tree core dsim engine also available external library following previous excerpt know littleprince first watch sunset feel happy really matter relative order instead using ranking within would actually best using queue sortedmap character littleprince dsimqueue watchsunset feelinghappy baobab grow queue simply clojure persistent queue lesser known data structure convenient vector shall demonstrate along besides clarity bring safety indeed something fails littleprince unable watch sunset intended feel happy whole queue fail sorted map provide precise timing towards root tree queue leaf allow several event grouped path rank usefully providing sequential ordering modelling event happening conceptually time sometimes still required execute sequence understand littleprince feel happy right moment star watching sunset virtually time without watching would happy feeling happy dependent watching sunset whereas baobab growing nothing independent happening littleprince modelling dependency using queue leaf like saying event b happens event modelling dependency using ranking previous version like saying event b happens matter event happens must execute event b discussed event actually mean feel happy impact world anything defn feelinghappy ctx associn ctx conj dsimpath ctx mood happy def ctx dsimeconj character littleprince feelinghappy universe called ctx context contains state well event modifying state time starting empty map scheduled happiness path character littleprince rank void transformed world api provides several exxx function scheduling removing retrieving event event take ctx return updated ctx executed event access path call dvloptdsimpath suffice meaning know happens feeling happy specific littleprince easily reuse anyone else evidenced implementation like isaac newton god designing universe scheduling first event need set motion shall use ptime engine considers first rank represent specific point time applies additional contraints instance point time increase never decrease one go back time following first rank jump point time point time executing everything given point time respecting ranking def run dsimptimeengine def ctx run dsimeconj feelinghappy ctx mood happy dsimevents sortedmap dsimqueue feelinghappy dsimptime first run happening point time indicated dsimptime key ctx feel happy first time see already rescheduled time unit later expected instead calling engine repeatedly modify pump def lazyrun dsimhistoric dsimptimeengine def history lazyrun ctx history contains point time happened easily navigable sequence could even stop point grab ctx change thing lazy run different timeline extremely useful data science purpose many creative application sequence created endless rescheduling happiness without question let u add unpredictable event could disrupt defn ctx rand ctx dsimstop assoc pandemic true associn mood stillhappynonetheless dsimeconj ctx update dsimranks ctx randint def dsimeconj ctx last lazyrun stillhappynonethelesss pandemic true dsimptime somefuturepointintime tiny chance pandemic happen happen rescheduled risk remains happen world come halt scheduled event removed dvloptdsimstop nothing left run thus stop history universe creator add event start running function something awfully common scheduling something later path could refactor like making general usable virus defn virus probability fn possibleoutbreak ctx rand probability ctx dsimstop assoc pandemic true dsimrelconj ctx dsimrank randint possibleoutbreak virus function take probability return event function time outbreak event function reschedules using dvloptdsimrelconj path accepts function ctx rank decide conveniently use dvloptdsimrank provides function returning current rank summing first one point time given ctx rank function used place api provide great flexibility time program unit game would probably actual millisecond animation probably frame draw simulation maybe minute day year used integer denote point time reality use real number de time behaves discreetly discreet word jump next point time opposed flowing continuously point time future number whole real instance animation perfectly normal schedule something fractional frame eg frame de terminology activity sequence event typically dispatched time assuming world time unit represents hour def sunactivity dsimqueue sunrise dsimwqdelay dsimrank sunset first sun rise right away dvloptdsimwqdelay grab rest queue schedule later accepts function ctx rank use dvloptdsimrank return function find current rank update first one denoting point time hour adding hour best use queue know sunset happens sunrise without sunrise sunset queue nested complex scenario useful queue queue event function matter nested engine momentarily creates special map ctx dvloptdsimeflat eflat path current path returned dvloptdsimpath queue current working queue rank current rank returned dvloptdsimranks term flat event reminds fact whatever given path given rank virtually executed one event matter many function nested queue actually implies executed context eflat need share state function event place execution eflat effectively removed everything inside garbagecollected lead u recursive definition event event function queue event even event single function setup applies provided working queue empty one event immediate execution enqueued inner queue access eflat queue useful property become obvious experience provides isolation inner queue impact outer queue exxx function arity current working queue eflat future event kept event instance used econj enqueues event current working queue dsimeconj ctx event enqueues event future event tree dsimeconj ctx path event fetch current working queue maybe modifying using eassoc put back dsimeget ctx fetch event scheduled path path dsimedissoc ctx path also useful wqxxx function meant work directly working queue used event order manipulate working queue discussing activity already discovered create delay via dvloptdsimwqdelay inner queue working complete isolation outer one besides safety provide useful property come timing let u consider dsimqueue dsimqueue eventa dsimwqdelay dsimrank eventb eventc event get executed see get engine find first queue becomes working queue immediately recognizes first event queue well inner queue momentarily becomes working queue outer one paused engine execute first event function eventa completion hit delay time unit delay remember grab rest inner working queue eventb left reschedules later path event tree without anything left execute inner queue engine restores outer queue thus execute eventc straight away fact activity ie inner queue schedule delay impact anything outside ie outer queue containing eventc matter order add activity eventc know activity perform intented undisturbed know eventc execute intented without delay thing could happened activity whole could cancelled prior function event popping outer queue property emerge simple fact treat queue strict fifo firstin firstout datastructure add element end pop first element beginning word modify element without rebuilding whole new queue dsim suppose activity dsimqueue eventa dsimwqdelay dsimrank eventb eventa produce state needed later eventb keep eflat removed current execution way eventb happens rescheduled future could keep state directly ctx global state say reason eventb needed supposed clean executed would result memory leak instead rely understated brilliant feature clojure metadata executing event function always access queue current working queue storing state needed queue metadata state garbagecollected whenever queue disposed wherever queue go metadata follows pollute global state ctx besides usual meta varymeta provided clojure sibling provided work directly current working queue def dsimwqvarymeta ctx assoc dope true dope true dsimwqmeta often event activity part repeat time use convenient dvloptdsimwqcapture function save metadata queue queue moment capturing meta replay queue moment want instance activity automatically repeating time unit end dsimqueue dsimwqcapture eventa eventb eventc dsimwqdelay dsimrank dsimwqreplay fn pred ctx true dvloptdsimwqreplay take stateless fn ctx boolean decides whether replay last captured state queue captured queue cleaned dvloptdsimwqsreplay stateful version fn ctx seed state returning nil mean repeating returning anything nil considered new state predicate dvloptdsimpredrepeat example function repeating captured queue n time dsimqueue dsimwqcapture eventa eventb eventc dsimwqdelay dsimrank dsimwqsreplay dsimpredrepeat last queue executed repeat twice thus executing time total queue captured time capturing nested lead complex sequence unfolding time dsimqueue dsimwqcapture eventa dsimwqcapture eventb dsimwqsreplay dsimwqpredrepeat eventc dsimwqsreplay dsimwqpredrepeat execute eventa eventb eventb eventb eventc eventa eventb eventb eventb eventc way capturing replaying seem useful last example look like glorified inner loop however becomes extremely useful delay added repeat thing began way back past would extremely tricky implement without storing queue metadata generally speaking practical example useful store information metadata queue error handler located level queue event function throw exception engine look error handling function located onerror metadata queue find one exception bubble outer queue one process repeat find one call ctx ctx safe use ctxinner present exception thrown inner queue handle used know state ctx right exception discard beyond use point running broken context error catched exception error handler return nil instead ctx engine keep looking another handler outer queue none found ultimately rethrows exception simulation purely deterministic meaning given initial parameter always produce result others stochastic relying random parameter instance textbook example discreteevent simulation modelling waiting queue bank client come random interval bank teller handle random interval time interested waiting queue evolves modelling randomness huge topic one thing certain generating random value usually follows particular statistical distribution order realistic representative real world know probably need moment mean curious research topic continuous simulation time jump gradually constantly flow much like universe remember discreteevent simulation event two consecutive point time nothing happens regardless long interval continuous simulation time flow two point time resides infinity point time thus infinity state fall ball example continuous phenomenon one problem arises computer digital machine digital machine thing continuous instruction executed discrete fashion follows continuous phenomenon although described continuous function must discretized way straightforward way would sample function needed rate sort animation plenty continuous phenomenon sampled computed frame one compute infinity state digital machine need nothing draw two frame luckily using disceteevent methodology simply decide sampling continuous function scheduled event given additionals twist next section flow provides detail finally phenomenon hybrid going ball falling continuous motion bounce hit ground hitting ground modelled instantaneous change behavior happening one specific moment yes modelled discrete event ball two continuous mode falling bouncing one discrete transition indeed hybrid start idea everything event already good go flow shorter name give continuous phenomenon created using event sampled using event life outside event tree course duration precisely located flow tree flow ctx flow infinite either indeed endless simply know yet end maybe ctx satisfies condition maybe sort stochastic condition typically look like econj path queue infinite fn myflow ctx let somethingsomething ctx somecondition endflow relconj rank later sample anevent creating infinite flow event automatically sampled executed first time creation addition created rest queue temporarily paused resume flow end word anevent executed flow way trivial chain flow event simply putting queue flow information need paused queue life flow tree structure flow tree mimicks event tree sampled flow access path within ctx like flow path flowpath ctx everything located path life long flow see somecondition satisfied use dvloptdsimendflow latest ctx function clean state associated flow resume rest queue mean state store order run flow best place know garbagecollected engine need store elsewhere ctx pollute worry managing time flow finite know advance end finite flow created using dvloptdsimfinite besides initialization also automatically schedule sample end flow notion relative point time located eflat ptime returned dvloptdsimptime function infinite one relative ptime start flow created represents age finite one know end often interested relative forseen lifetime thus relative ptime finite flow percentage completion value inclusive global point time ctx remains always accessible ptime instance suppose simple animation object moving x axis pixel pixel millisecond universe time unit indeed millisecond using infrastructure matter barely line code write flow move anything b make thing even simpler use dvloptdsimscale function scale percent value defn move pixela pixelb ctx associn ctx path ctx scale pixela pixelb ptime ctx econj ctx scene object ball x finite partial move damn create moving object forgot sample sampled executed creation completion order write code flexible often best sample flow using external sampler always everything event thus creating sampler event econj ctx scene object ball x queue sampler rank finite partial move sampler repeatly sample path every unit time specific chosen time unit millisecond drawing animation frame per second know state object every second order know draw however would poor animation probably want add gazillion object caring sampling every element would surely lead burnout turn create sampler path would actually sample whole subtree flow tree actually animation knowing sample everything provide path whole flow tree sampled econj ctx nil sampler rank convenient nt addition flow deduplicated given point time garanteed flow always sampled meaning several sampler sample part flow tree without worrying flow executed several time point time could lead disaster idempotent observant reader might noticed scheduling creation sampler besides point time specified second rank second rank provide higher ordering within point time designated first rank could go add third fourth one many however practise two three level needed event independent even need ranking beyond point time adding high second rank meaning low priority remember highest priority want sampleeverything sampler run last point time sample safety measure saying sample everything sampled yet disturb sampler sampling specific flow might need happen particular order ensure everything sampled end point time need draw frame exact term employed litterature meaningful programmer offline simulation event planned beginning parameter configured engine thing event create event usually go seen use dvloptdsimhistoric engine order obtain lazy sequence intermediary step point time using ptimeengine perfect whole category scientific endaveours like optimization problem drawing noninteractive animation online simulation virtual world interacts real world game perfect example instance browser dont know exactly moment next frame drawn wait happen clear interaction gamer virtual world instance example automated piano visualizer drawn quil modelled using dsim played note discrete event creating flow anything move screen many us case would like able serialize ctx saving whole state game file sharing simulation colleague saving long running simulation distributed computing etc however could one serialize ctx contains whole lot event flow whole lotta opaque function transit remains pretty much available option exchanging data clojure clojurescript following package provides needed using dsim transitclj transitcljs must added dependency enforcing strong concrete notion time present u blessing seldom received following everything discussed definition within given rank path strictly independant meaning path executed order meaning garanteed run parallel bound clojure parallelization handling asynchronous event would almost trivial implement however strive write code portable clojurescript javascript blocking semantics meaning one event asynchronous whole universe force u go full async committing radical decision prefer waiting feedback community use case need anything special due fact ctx completely immutable notably optimization problem main purpose simulation test likely outcome given initial parameter hope find best parameter matter exploration interesting moment take current ctx change thing keep running different timeline parallel simply another thread impossible simulation library state mutable least would involve full copying everytime read whole thing one thousand line readme sincere congratulation skipped end well congratulation curious persona believe even discover api rest assured definitely covered huge chunk would possible without semantics offered clojure programming language immutability extreme dynamicity believe library bit new twist come sort problem probably quite new concept hope information grant benefit even end using dsim using kaocha run test jvm j based one due compilation shenaningans testing j environment run fail clojure clojurescript nodejs w must installed binkaocha node clojurescript browser might need already running using chui browser testing convenient thorough browser testing binchui command args command compile watch release testing build advanced optimization using release providing debug extemely useful something go wrong eg name munged stacktraces ready open chuiindexhtml favorite browser license copyright adam helinski distributed eclipse public license either version option later version
96,Lobsters,clojure,Clojure programming,Back to the Future in Clojure,https://levelup.gitconnected.com/back-to-the-future-in-clojure-934b85a3d08e,back future clojure,getting stargazer github clojure github api endpoint endpoint,getting stargazer githubwe interested getting total amount star clojure github sum star repository belongs clojure accountthis information readily fetched github api get user usernamerepos endpoint already responds star count repository loop returned json array get star count sum upfor sake article let assume endpoint return star count name repository hit get repos owner repo endpoint get star count mean repository name request get repos owner repo launchedaggregate repository synchronouslyas image suggests getting star repository sequential synchronous task might take considerable amount time request complete request successfully responded reduce function come play sum starsthe following function getstarcount executes http request synchronously get repository detail extract stargazerscount attribute response represents star counthttp request get star countnow let take look sumstars function provides two arity one take username exclusively another one requires sequence repository name total star count synchronouslynote first arity line call function sends result githubreponames second argument repos involves additional http call prevents u manually entering repo name using previously defined sequence avoid additional http call interfering sumstars either providing defined sequence containing repository name storing result githubreponames symbol pas functioneach repository passed getstarcount line blocking main thread single request finished synchronously result aggregated reduce
97,Lobsters,clojure,Clojure programming,Clojure Katas relaunched,https://clojure.chefy.io/,clojure katas relaunched,clojure katas get started set environment docker compose run clojure katas practice example create new kata required testrunner look contributor contributor,clojure katas project contains set problem help get hand dirty clojure hope add problem treat ongoing project get started project set solve problem one one problem skeleton set place put solution set environment project run docker compose need set additional dependency run clojure katas verify answer run also implemented solution manual run katas solution dockercompose answer practice say arrangedprob implemented srcclojurekatassineangleclj dockercompose test performing task run profile test current kata tackle clojurekatassineanglesine false arrangedprob implemented move next problem performing task run profile test testing clojurekatassineangletest ran test containing assertion failure error current kata tackle clojurekatasarrangedprobprob false example create new kata create srcanswersclojurekatasarrangedprobclj solution defn prob p total population total number subcategory n number consecutive draw p n n double p prob p n create srcclojurekatasarrangedprobclj problem challenge using coredefproblem required put comment describe problem n clojurekatasarrangedprob require clojurekatascore core coredefproblem prob required documentation go p n creates test testclojurekatasarrangedprobtestclj deftest arrangedprobtest testing conditional probability float float prob add clojurekatasarrangedprobtest inside problemsets defined testrunner def problem clojurekatassineangletest clojurekatasarrangedprobtest run solution make sure work dockercompose answer look contributor want keep project ongoing interested helping feel free open issue try responsive possible submit pull request bugfix submit new problem question feel free messaage github twitter marshallshen many thanks contributor made project awesome
99,Lobsters,clojure,Clojure programming,Implementing Clojure agents on BEAM VM,https://medium.com/clojure-on-the-beam/agents-9de923017adf,implementing clojure agent beam vm,agent good specific circumstance would use agent instead something else either jvm beam provides link limited know case please let know section implementation alternative single process one process per agent tuning vm starting process pool dispatch process process pool tradeoff appendix conclusion master clojerl repository appendix process process dictionary,gone agent let try figure good circumstance people use themwhat agent good simple answer come rather opinion let try take stab itthe agent abstraction extremely useful tool specially sane framework think state concurrency ie jvm beam concurrency state center embodied process keep internal state share nothing abstraction provided beam name indicate generic eg genserver genstatem etc agent abstraction serf defined specific purposea useful way rephrase question would specific circumstance would use agent instead something else either jvm beam provides try answer question look usage agent opensource github project use clojure jvm investigation scientific say least look term agent amongst clojure file public repository company listed using clojure link take one search result found show example usage agentsfrom limited observation got impression get agent used mostly test whenever concurrency need generated know case please let know agent also sound lot like beam process send action message keep state internal state get changed based action receive loop process message look deceiveing crucial difference agent process independence state control process need send message get state process busy long time message queue long left waiting indefinitely state agent state available immediatelyadditionally section joy clojure great book compare agent process interesting point view although fully agree everything finally even though seems like agent usage quite limited wild one clojure concurrency tool people might rely could still prove fruitful think different implementation alternative ass much work would involve possible something robust enough usefulimplementation alternativesso let try think different way could implement agent using beam providesstate access independent processing action saw point state always immediately available reading keep state separate whatever mechanism change mentioned easily done keeping agent state ets tablethe next thing need think apply action agent single processa single process applies action existing agent approach simple enough obvious limitation one single process would contention point action trying modify agent cpu limiting blocking io action since anything block single process would hold every agent one process per agentactions agent would independent safeguard creating many thus making bad use resource creating process extremely cheap overhead would memory footprint cpu limiting blocking io action would run process fine since action must applied sequentially agent beam bulitin feature us async thread pool io operation avoid blocking process possible configure many thread pool tuning vm starting process poolhaving limited amount process use would ensure control usage resource action specific agent sent process pool applied sequentially ie one point time mean cpu limiting blocking io action use pool process want ensure sequential processing situation would improvement option single point contention still issue set agent whose action end process pool need potentially wait dispatch process process poola dispatch process would keep track action sent agent dispatcher would use process pool cpu limiting action spawn new process blocking io action time ensuring action applied sequentially agenttradeoffsthe two main point come previous implementation option process contention resource management one process per agent dispatch process process pool option provide good balance involve tradeoff one process per agentthe agent treated resource therefore cleaned closed owner process dy approach used file resource management erlang detail check module file fileserver fileioserver price would paying using agent user need remember close agent done also owner process dy agent state lost could prove problematic case file reopened state agent deleted memory gonedispatch process process poolall agent action would go single process little work possible dispatch action another process either pool spawned dispatch process must keep track current action run agent collect sent action store pending one already applied agent apply pending action agent current action running action send ask process pool sendoff create processthese quite lot concern process need little work situation require coordination pool example happens worker available fail store action pending subscribe notification worker becomes available probably second one situation sort may arisealso keeping state agent ets table agent longer used still cleanup required ie delete entry table mean would still need require user close agentboth option seem promising however one process per agent lot simpler main shortcoming required cleanup also present dispatch process process pool alternative reasoning see appendix conclusionporting clojure construct beam seldom trivial almost always possible willing make tradeoffsafter postponed implementation agent long good exercise get bottom sketch outthe experimental implementation using one process per agent found latest master branch clojerl repositoryplease try feedback welcome enjoy main problem dispatch process process pool need clean ets table keep state somewhere else process would comply requirement state always immediately available reading even remove usage ets table would still need keep state somewhere went one process per agent would still need close agent process done went dispatch process process pool approach state would need live process part pool eg dispatch proces would also necessary remove longer usedprocess dictionary possible read internal dictionary process using erlang processinfo pid dictionary would extremely hacky approach cleaning mentioned still requirement
100,Lobsters,clojure,Clojure programming,Holdybot: Parking and desk management app open sourced,https://github.com/holdybot/holdybot,holdybot parking desk management app open sourced,holdybot http wwwyoutubecomwatch vjaptcfxksk doc http githubcomholdybotholdybotwiki conference http wwwyoutubecomwatch tech prerequisite leiningen develop youremail examplecom http run license,holdybot application wrote evening weekend junejuly used price f x manage parking desk sharing call parky incredible success hence share github check nice video understand http wwwyoutubecomwatch vjaptcfxksk doc check wiki doc http githubcomholdybotholdybotwiki conference talk barcamp hradec králové czech http wwwyoutubecomwatch tech app skeleton generated luminus version us postgres store data written clojureclojurescript although source called parky usually call holdybot prerequisite need leiningen installed develop create devconfigedn project root folder warning devconfigedn file used local environment variable database credential file listed gitignore excluded version control git dev true port http server port nreplport set application start nrepl server load nreplport databaseurl jdbc postgresql localhostholdybot userholdybot appname holdybot multitenantdomain mymultitenantdomaincom jwtsecret change please rootusers tomas examplecom tereza examplecom smtp transport host smptexamplecom user user examplecom pas password port holdybot holdybot examplecom hcaptcha sitekey hcaptcha obtain ui secretkey openidconnect azure apikey generate azure dashboard free apisecret google apikey generate google cloud console free apisecret fasdfasdfasdfasdfadf linkedin apikey generate linkedin developer apisecret facebook apikey generate facebook developer apisecret empty apikey make login button disappear start web server backend development run lein run start client dev build run lein shadow watch app feel free connect server client repl favorite ide editor first run might need create db schema postgres db run migrate fn userclj run sql insert tenant host email activated value youremail examplecom true open http browser configured hcaptcha smtp able login email token configured openid connect check wiki work run create uberjar jar server client lein uberjar run first time bootstrap db schema java dconfvarparkyconfigedn jar targetuberjarparkyjar migrate run service make sure configedn contain dev nreplport key java dconfvarparkyconfigedn jar targetuberjarparkyjar build container run uberjar used platform eg linux one probably creates systemd service like let run limited user home varparky unit descriptionparking app jvm backend aftersyslogtarget service workingdirectoryvarparky syslogidentifierparky execstartbinbash c java dconfvarparkyconfigedn jar varparkyparkyjar userparky typesimple install wantedbymultiusertarget start bundled http server wildfly desired port good idea run http web server proxy http request httpd apache work ok app read xforwardedhost http header apache default set need working record tenant table match host example apache virtual host make sure enable modproxy modssl ifmodule modsslc virtualhost protocol servername mygreatestparkingappformybestcompanycom errorlog apachelogdir parkyerrorlog loglevel emerg customlog apachelogdir parkyaccesslog combined env dontlog sslengine sslcertificatefile sslcertificatekeyfile uncomment using multitenant mode proxypreservehost proxypass http addoutputfilterbytype deflate textplain addoutputfilterbytype deflate texthtml addoutputfilterbytype deflate textxml addoutputfilterbytype deflate textcss addoutputfilterbytype deflate applicationjavascript addoutputfilterbytype deflate textjavascript addoutputfilterbytype deflate applicationjson addoutputfilterbytype deflate applicationtransitjson virtualhost ifmodule need create first tenant even though use multitenant support enough fill host email activated column resulting sql might like insert tenant host email activated value mygreatestparkingappformybestcompanycom myemail examplecom true since able log app email correctly configured smtp hcaptcha option configure open id connect login preferred way using currently available provider facebook azure google linked login check wiki license copyright tomas lamr
101,Lobsters,clojure,Clojure programming,Ubiquitous interface – how to integrate things in Clojure,https://mauricio.szabo.link/blog/2019/12/27/ubiquitous-interface-how-to-integrate-things-in-clojure/,ubiquitous interface integrate thing clojure,thread reddit abandoned relational project honeysql meander specter simulate ruby activerecord wonderful clararules like,inspired thread reddit decided write little bit experience integrating thing clojure first thing understand clojure ubiquitous interface edn important understand mean beginning made mistake death specificity abandoned relational project abstract thing need abstracted even better deabstract concretize real word thing already abstracted example honeysql write map get back sql mean whole core clojure library write query flexibility ever need also meander specter lot tool use rewrite clojure collection write query also simulate ruby activerecord behavior disclaimer please use last library linked still production ready really know keep maintaining advantage deabstracting edn integration everything read multiple database inconsistent serializing old version record json make consistent save result another db simple used wonderful clararules library generate rule would correlate old new data normalize thing emitted everything record record superpowerful map defrule treatversionsplace place lt place placeid id version lt accall placeversion placeid id gt insertall normalizeplace place version code normalizeplace emit sql record contained two field honeysql order order integer defines insertsupserts run first run last found necessary inform external system table changed run correlation process emitted sql code orm model would awfully difficult maybe even impossible point would need change rule insert new fact tablechanged something code quite simple def changedtables sqls gt gt sqls map honeysql map insertinto map cond gt coll ffirst capture insertinto people example insert select postgresql translates insertinto place id select placeid people id summarize query multiple database clojurejdbc return collection map sometimes one map version row json cheshire libraru turn json string clojure map convert map record example map place send record clararules return record record contain sql query encoded map analyze map return collection keywords table changed create map table use cheshire transform json ready sent somewhere else use honeysql generate insert sql clojurejdbc persist single one tool used expecting integrated others clararules know existence anywhere else example clojurejdbc idea sent rulebased engine future yet everything integrates without issue power ubiquitous interface like like loading related
102,Lobsters,clojure,Clojure programming,Why Clojure Is My Favourite Language,http://slipset.github.io/posts/Why-Clojure-is-my-favourite-language,clojure favourite language,hillel wayne subscribe today edition install thing clojure supposed writing cider sherlock infclojuremode fireplace calva cursive chlorine thing part core syntaxsemantics super common problem people face every day parse json dependency management leiningen boot cheshire pull environment variable java interop cljhttp language quirk cast hour discover help organized official site site laid clojurians slack clojure doc cljdoc clojure toolbox hit problem x find help official doc faq community putting random stuff google debug anything breaking repl like pulling teeth repldriven development testing unit testing part core library clojuretest property based testing clojurespec testrunner kaocha build package manage environment clojureverse wrote,hillel wayne newsletter absolutely subscribe today edition called python favourite languge describes hurdle need jump order solve problem new language post try look hurdle see overcome favourite language clojure install thing hillel actually ask question imo worth asking clojure language running jvm mean need java installed yes assuming mac brew install adoptopenjdk java installed install clojure good go give two new command focusing clj drop repl clj clojure user read get started supposed writing clojure editor agnostic anyone working clojure using favourite editor plugin emacs course using cider unless sherlock using infclojuremode vim fireplace seems choice champion vscode choice calva aim great experience beginner pro alike intellij download cursive free personal use atom chlorine read read file parse json pull environmental variable section also contains two subquestions let start thing part core syntaxsemantics super common problem people face every day let answer first question section one function slurp slurp let read file url def password slurp etcpassword def newsletter slurp http buttondownemailhillelwaynearchivewhypythonismyfavoritelanguage companion calleds spit spit tmppassword slurp etcpassword parse json parsing json unfortunatly part core language first need understand dependency management clojure dependency management dependency management clojure several option addition manually cover deps official way understood tool installed previously leiningen defacto standard many year boot seems somewhat le popular day post focusing deps start clj look file called depsedn parse looking dependency simplest form depsedn file look like deps cheshire mvnversion depsedn like clj download cheshire start clojure cheshire dependency voila parse json require cheshirecore json jsondecode foo bar jsonencode foo bar pull environment variable since clojure running jvm matter java interop systemgetproperty userdir final question section need memorize another function params answer course depends first standard lib clojure quite small since basically always operating map list get fairly far basic operation datastructures map filter reduce assoc dissoc final note section recommend look cljhttp cover http need depsclj looking like deps cheshire mvnversion cljhttp mvnversion set daily task language quirk cast hour discover clojure famous bad error message time spent understanding one example user map lol error printing return value classcastexception clojurecoremap fn class javalanglong cast class clojurelangifn said lot work put order make error message better last release help organized official site site laid lot help done clojurians slack yes may join yet another slack community otherwise find clojure doc extremely helpful documentation standard library cljdoc documentation important community library clojure toolbox directory useful library official doc repl along source apropos clj clojure user doc map clojurecoremap f f coll f f f colls return lazy sequence consisting result applying f set first item coll followed applying f set second item coll one colls exhausted remaining item colls ignored function f accept numberofcolls argument return transducer collection provided nil user source identity defn identity return argument added static true x x nil user apropos filter clojurecorefilter clojurecorefilterv user online read doc official doc could imo considered aimed master say resource listed beginner also catered hit problem x find help official doc faq community putting random stuff google one nice thing clojure put random stuff google find answer clojure first released likely still valid clojure earily backwards compatible mean trust old advice official doc think help much day day problem clojure beginner channel populated friendly expert able help way debug anything breaking repl like pulling teeth generally debug using println also since generally program functionally separate pure sideffective function debugging repl pretty sweet especially since clojure repldriven development testing unit testing part core library yes clojuretest clojure great support property based testing clojurespec used generate value u read test runner test normal function annotated test metadata easily run repl said clojure plugins come test integration basically work otherwise lein boot come way running test terminal testrunner make clj run test well also mention kaocha newest coolest kid block build package manage environment building really neccesary runing clojure program simple given file called fooclj contains valid clojure program rest question section believe answered elsewhere post part fact yes need interact human figure competing libs best use case yes already mentioned join yet another slack also clojureverse lot clojure community hang community reputation friendly helpful think stem rich hickey wrote year ago wanted community behave
103,Lobsters,clojure,Clojure programming,The Clojure Mindshare,https://groundedsage.netlify.com/posts/the-clojure-mindshare/,clojure mindshare,designing programming,passionate problem solving studying working across multiple discipline quest simple composable solution time recent year spent designing programming
104,Lobsters,clojure,Clojure programming,Building Mobile Apps (iOS and Android) with Clojurescript,https://medium.com/mindorks/building-mobile-apps-ios-and-android-with-clojurescript-4600235f826c,building mobile apps io android clojurescript,medium github,let change background color button text shown press buttonlet reinstall app using npm run runandroideven changing code reinstalling application everything look samestill working credit giphy although made change cljfile one thing still done rebuild code update indexandroidjs file actually loaded bundlerthis figwheel come picture without need manually rebuild install application every time make change code check projectclj notice exactly happens prod profile figwheel every time build project update indexandroidjs indexiosjs lein withprofile prod cljsbuild autohowever really slow feedback cycle development therefore separate dev profile us figwheel start using figwheel run following command make sure emulator running beforehand renatal useandroiddevice renatal lein figwheel npm run runandroidusing figwheel developmentnow make change code see result realtime thank reading hope enjoyed article next part let build application scratch also follow medium github
105,Lobsters,clojure,Clojure programming,Clojure Start Time in 2019,https://stuartsierra.com/2019/12/21/clojure-start-time-in-2019,clojure start time,serverless,realistic benchmark result runtime ran time warmup followed measurement took real time measured bash time measurement consistent every case table give average runtime time m java leiningen clojure cli planck lumo joker babashka ferret hy graalvm c java ferret graalvmcompiled clojure c compiled aheadoftime others interpreted jitcompiled clojure script source obviously way fair comparison please tweet stupid clickbait headline like joker faster clojure hello world silly benchmark programming language general certain specific use case like commandline script integrated larger process total execution time tiny program something might actually care point version clojure fit almost usecase think want write commandline utility language feel like clojure joker babashka good option want full power clojurescript startup cost jvm planck lumo need work python bear life without sexpressions check hy reason determined write lisp embedded microcontroller ferret got covered finally graalvm still new somewhat experimental going gamechanger compiled hello world image mb let forget real clojure real jvm even interested see happens people combine technology novel way imagine serverless application start graalvmcompiled binary quick response coldstarts switch regular jvm higher throughput warmed better yet imagine deployment platform could hide difference application code back java pitched write run anywhere past twenty year mostly meant write run machine fast cpu several gb memory care startup time changing probably never achieve write run anywhere arbitrary program project prove write program run almost anywhere using language enjoy server
106,Lobsters,clojure,Clojure programming,"Clip - inversion of control API - an alternative to integrant, mount or component",https://github.com/juxt/clip/blob/master/README.adoc,clip inversion control api alternative integrant mount component,permalink join github today sign clip project status alpha issue tracker rationale system data boilerplate transition async obvious usage defining system configuration edn aero reference clojurescript async promesa manifold main reloaded toolsnamespace roll async executor clojurescript associative destructuring comparison library usage note edn aero aero example application reload reload,permalink dismiss join github today github home million developer working together host review code manage project build software together sign retrieve contributor time line sloc kb clip clip inversion control api minimizes impact code alternative integrant mount component project status alpha core api unlikely change significantly may small change systemconfig format design feedback still welcome still space rationale changeexpand bug avoided immaturity project make likely please provide design feedback report bug issue tracker rationale system data system may fail startup leave state port use handle partiallystarted system order close let db getdb http starthttpserver db happens makequeuelistener throw exception queuelistener makequeuelistener lead restarting repl major interruption flow clip provides data model system rethrow exception partiallystarted component attached order allow automatic recovery repl test may choose make system granular example may choose provide web request handler dependency directly rather passing via router case find system quickly grows large system data reduces effort maintain understand relationship component edn natural way express data clojure datadriven system naturally work edn without magic boilerplate existing dependency injection library require boilerplate defining component either come form multimethods must namespaces required sideeffects creation record order implement protocol extension mechanism used extend existing var call library instead take reference function eg ringadapterjettyrunjetty call directly mean effort wrap existing library minimal simply specify call also remove problem inventing new strategy tying keyword back namespace integrant directly using fully qualified symbol already includes namespace required addition normal function support docstrings making easy documentation finally use var mean library coupled clip way yet easy use directly clip transition sideeffects part startup process common example seeding database component function health check migration must run existing approach require u either taint component start additional sideeffect code complecting connection migration create sideeffecting component others must depend upon clip default provides pre post phase startup enabling run setup beforeafter starting component example may need call datomicapicreatedatabase connecting may want call myappseeddb starting passing around clip also simple separate running many action system allows define custom phase component need async async significant part system clojurescript application something simple reading data disk fetching user remote endpoint cause entire system aware callback interceptor shown async layeredon concern rather intrinsically present consumption result clip provides multiple executor running action system providing box support sync async promesa manifold need additional executor fairly simple write obvious obvious connection action easier understand obscure one use inheritance reference relying implicit dependency increase obscurity api component integrant allow spread reference use using prepkey instead clip encourages make reference live system making always obvious component connect together usage defining system configuration define system configuration data system configuration contains component key optional executor key component map anything map property component note use example prevent execution might find easier use edn aero define system configuration def systemconfig component db prestart dcreatedatabase datomic mem newdb start dconnect datomic mem newdb poststart seedconn handler start findseedresource clipref db http start yadalistener clipref handler stop close resolve server foo start clipref http prestart run start component use run required createdatabase datomic start run return value component refer poststart run passing component component use seed connection provided symbol resolved called like seedconn conn conn started component use clipref refer db component provided positionally function stop access variable refer started component control component referenced component server key passed component referencing eg foo component reference box handful key supported component future may extensible please open issue usecase many value key take code data mean create programmatically create using either list quote supporting code data mean ednbased system defined also special execution rule code data mean need use actual function reference use symbol required resolved clip requiring resolving supported clojurescript see workaround clojurescript code either executed implicit target example implicit target started instance implicit target available provide symbol function without list called argument implicit target function call multiple argument use change implicit target placed key implicit target description prestart run starting component start run start component end system poststart started instance run started component useful place perform migration seeding stop started instance stop run started component used shut component optional add specified value autocloseable close run resolve started instance run started component used component get value component using clipref supported value code data implicit target type description symbol resolved function called target function resolved function called target keyword used get key target supported value code data without implicit target type description example symbol resolved function called argument myappcorestartwebserver function called argument myappcorestartwebserver vector recursed argument resolved clipref foo list called code list myappcorestartwebserver port myappcorestartwebserver port else returned unchanged async clip async achieved using alternative executor box support provided promesa manifold open issue like see support another popular library executor specified system either symbol pointing executor function example promesa async example executor juxtclippromesaexec component start promesacoreresolved b start inc clipref note b need aware return async value called appropriate time resolved value example manifold example require manifolddeferred executor juxtclipmanifoldexec component start dchain b start inc clipref main starting application main consideration blocking forever use promise storing system repling later whether shutdown system simplest version blocking forever n myappmain require myappsystem juxtclipcore clip defn main clipstart myappsystemsystemconfig prod promise storing system later n myappmain require myappsystem juxtclipcore clip def system nil defn main let system clipstart myappsystemsystemconfig prod altervarroot system constantly system promise stopping system shutdown n myappmain require myappsystem juxtclipcore clip def system nil defn main let systemconfig myappsystemsystemconfig prod system clipstart systemconfig altervarroot system constantly system addshutdownhook runtimegetruntime thread clipstop systemconfig system promise reloaded clip provides namespace easily setting reloaded workflow need add dependency toolsnamespace project call setinit function return systemconfig usually function defined another namespace take profile config order parameterized development production n dev require appsystem juxtcliprepl refer start stop reset setinit system setinit appsystemsystemconfig dev roll alternatively roll reloaded workflow quite easily miss convenient feature builtin one like autocleanup n dev require juxtclipcore clip clojuretoolsnamespacerepl refer refresh def systemconfig start def system nil defn go altervarroot system constantly clipstart systemconfig defn stop altervarroot system fn clipstop systemconfig defn reset stop refresh usergo async executor using async executor repl namespace may need make sync box repl namespace best work anything supported deref need override deref repl namespace us supply symbol function key juxtclipreplderef take one argument system deref need tweak promesa manifold setinit constantly executor juxtclipawkwardasyncexec juxtclipreplderef somensawkardasyncderef clojurescript clojurescript limitation taking codeforms data continue active research topic resolved usage still reasonably concise must use list create listform example clojurescript usage n frontendcore require juxtclipcore clip def systemconfig component foo start bar start list inc clipref foo caution following macro experimental feedback use welcome however following experimental option currently forerunner macro called withdeps allows write codeform bind dependency required useful using clip code rather data context also particularly useful clojurescript symbol resolved back function withdeps take binding body much like fn first binding must deps want must use associative destructuring example withdeps usage n frontendcore require juxtclipcore clip includemacros true def systemconfig component foo start bar start baz start clipwithdeps key foo bar foo bar caution following macro extremely experimental feedback use welcome also bring deval macro macro convert list code find nonevaluated list later interpreted clip example deval usage n frontendcore require juxtclipcore clip includemacros true def systemconfig clipdeval component foo start bar start inc clipref foo comparison library name needhas wrapper libs extension mechanism suspension system location multiple parallel system transparent async component component yes protocol via library map yes integrant yes multimethod yes map yes clip codecode data coming map yes yes mount code namespace usage note edn aero clip work well edn clojure clip automatically require resolve symbol edn require required designed used library aero order make devprod change system minimal example systemconfig configured aero configedn systemconfig component db start hikaricpcoremakedatasource profile dev adapter url jdbc test prod jdbcurl jdbc sqlite dbdatabasedb stop hikaricpcoreclosedatasource example application want add one open issue pull request perform action time signed another tab window reload refresh session signed another tab window reload refresh session
107,Lobsters,clojure,Clojure programming,Why Functional Programming,https://www.towardssoftware.com/blog#blog26,functional programming,rich hickey talk gmailcom elamje favorite thread hn undergrad studying computer engineering gmailcom gmailcom space jump code short youtube video gmailcom gmailcom http wwwtowardssoftwarecomblog gmailcom see work see pro con list read gmailcom http wwwtowardssoftwarecomblog policyschemehandler http wwwtowardssoftwarecomblog middleware life box product,start select start data description system trying grok look data come nt data system think data need go simple select x save coworkers lot time energy getting started etl project couple architect designing past week lacking documentation schema database still fleshed however bit test data db piece responsible want understand kind database model working without description schema column represents need help understand almost reached one stafflevel engineer get insight realized probably look underlying mock data understand relationship reminded journey junior senior engineer junior need told something work senior use code doc data understanding old day nt look data overwhelmed number table name column name never bothered look inside table select could saved huge amount time sitting going entire database select although etl project nt using clojure constantly reminded superpower embedded lisp etl supporting dsl written top staticallytyped compiled language want understand power clojure lisp really work two domain using typed compiled language lot reflection lot waiting compiler also reminded rich hickey talk essence data enterprise dev self employed month followup wow original post got view opened many new connection got respond everybody wrote email encourage well month since wrote experienced couple month react contracting lot c net blazor work success even though sell car make first couple month happen result job landed outbound inbound data posted hn freelancer thread october november reached people could helped turned gig really sketchy person insisted everything nda could pay crypto avoided going path lastly got inbound gig turned full time job nt aiming could nt pas breaking got first gig reaching someone seeking intermediate android developer scheduled call chatted happened lot common ended letting work another project instead nt advertised ended react second gig really take home job interview project got paid build pretty basic crud app show knew importantly reason even got interview twitter twitter many month decided wanted get really good net blazor new single page app paradigm put net blazor expert twitter bio aspirational public goal itention anyone hiring based data point happened bos looking blazor person totally forthcoming actual level blazor skill talked said needed blazor biggest takeaway following generating lead far simple nt happen like anticipate gig totally indirect opportunity say helped twitter blog tied directly name hacker news profile actual job net blazor expert since early january year honest pace team work could easily top percentage blazor server developer work rapidly make new thing rewrite mean cranked many new feature week since january count something however still long way go net ecosystem coworkers literally amount experience net truly expert platform anyways happy take full time job purely fact coworkers expert icing cake use cutting edge technology work mvp build product spare time oh pay better bigcorp job remote reason intentionally ignorant selection bias luck recommend others follow suit leave bigcorp america sweet opportunity willing give safety might better luck others might take bit longer find opportunity course always try get consulting going evening job minimize risk sad part story able work clojure yet still holding onto hope maybe even convince bos use product fire emacs toy last thing want say nt invested much energy twitter trying grow take aspirational title net blazor expert part online journey opportunity going documenting learned tip occasionally tweet investing stocksderivatives sweden well question want say hey feel free email gmailcom dm elamje c missed rocket ship sparked curiousity sql server language extension support java think data engineering c missed big data rocket ship orgs use c data workload course could become defacto standard big data le restrictive platform specific early day explosive data growth think mistake similar order magnitude missing smartphones doubt microsoft resource early create something akin net core whatever reason missed mark cross platform usage meant company like google twitter etc could use net c linux server struggled get kind adoption orgs operate scale instead java jvm became king big data year hacker news might wondering matter link aggregator year well people probably nt however led inner revival contract work learning clojure meeting people understanding leverage awesome new job thanks hn following thank bit unstructured hope might resonate nt want read check favorite thread hn awoken geek first thing hn unlocked inner nerd died day believed way get wealthy finance medicine law much loved engineering course high school college point began think way successful engaged field engineering executive found hacker news delightfully flooded wave people obsessed learning entrepreneurship generally thoughtprovoking stuff many thread comment incredibly nuanced occasional software startup celebrity appearance contrast friend interest online people found large made discovery hn much better learned like large group people gathered based solely interest make money second thing hn unlocked wonderful short term career prospect found people u world working technology choice making non trivial sum money consulting work mention huge corpus startup startup employee hn understand news need context give quick background undergrad studying computer engineering torn pursue career software machine learning hardware design long story short got job working large company working large enterprise c app hard understand got head around web app principle quickly realized going spend several year understand app domain fully even senior enough position guide architecture took job nt understand web software career path possible software wanted fast career growth fast skill acquisition time realized began seeing startup contracting viable alternative realization manifested seriously reconsidering current career trajectory clojure little code much power third thing hn unlocked joy writing software lisp clojure specifically showed nt need write line java class basic text parsing wonderful departure boring project assigned college realized language without boilerplate realized incredible amount opensource language exist realized dynamic terse language like clojure superpower important thing business project minimize boilerplate really use language get way pleasure use lest project get buried github graveyard realizing pg hype lisp rightfully placed wonderful feeling learning clojure enlightening thing ever done software career class code manipulated easily data rick hickey transformative coming c c java background realized like enjoy writing code importantly sparked motivation creativity project would never set leverage key fourth thing hn unlocked assurance perfect field nt know maybe buying vc backed b hype train promise fun career high financial reward real example software people solving problem typically web little bit code marketing real large economic impact back hardware design intern college nt see legitimate way inside engineering world luckily hn many example false code one easiest powerful form leverage u software people disposal nt understand first started big corp job quickly became clear successful internet company startup one thing write code point econ software clicked obvious industry access global low cost distribution network internet cheap army robot willing whatever code make possible monopoly like profit margin without monopoly clicked simply could nt content salary job equity slow career growth little creative freedom lead job searching startup land building mvp also moving contract work understanding leverage led alter path better utilize software capture value never would got working enterprise developer new job last thing hn unlocked thus far contract work job always looking opportunity get better software man great get paid get better remember said nt content big corp job well turn reason boldness leave without anything else lined read lot comment post hners took plunge wow exactly needed earlier mentioned wanting fast career growth fast skill acquisition taking two month build mvp new language great contract work new technology top lucky enough toptier c consulting shop reach opportunity starting tomorrow thing direct result engaged hn thanks hacker news want say hey email gmailcom consider good writer tip please email gmailcom monte πthon monte carlo π line python nt normally talk math thought magical share like heard monte carlo simulation wondered nt use enough give definition share intuitive example use start saying computer engineer primarily web apps although interested space however engineer developer math genius certainly required continue aim show simple way understand internalize basic monte carlo method going calculate π jump code develop intuition first essentially randomly drop many point square known area count many point also lie inside circle use ratio point circle total point information calculate π let look equation need border circle made xy point satisfy r desired radius area circle π arbitrarily pick r given xy point find point inside circle checking radius random xy point figure see point circle point total ratio represents point circle point square multiply ratio area square get area circle case recall square area area circle equal ratio since area circle π rearrange π area circle case π area circle point two unknown π area circle solve π need estimate area circle recall calculated boom like method solve π picture π get accurate let write code computer step u run code see output get closer closer π true value increase number point see solved two unknown estimating one area circle random data random data got larger estimation got accurate estimation π came closer truth think quite magical press green play button run code explained line import library generate random xy point line initialize count point circle line generate random point square line point circle add count line calculate ratio point circle total point line π circlearea divided radius squared also think magical highly recommend short youtube video completely unrelated way π occurs naturally understand π appears mandelbrot set please email gmailcom use monte carlo simulation regularly would love hear use complex problem reach π email say hey gmailcom submit http wwwtowardssoftwarecomblog consulting software engineer living boulder co primarily working clojure python net react mainly interested helping people make stupid simple software ideally scratch early startup new project also work mature small medium sized nontech firm make custom software available clojure python react data engineering project moment gmailcom previously worked pwc prepreviously studied computer engineering university texas since leaving corporate work making better software time create several project linked future also run pearl business highly interested high speed rail hyperloop generally fast transport additionally snowboarding hiking passion working anything cool space love help see work see migrating enterprise c self employed clojure react past month somewhat enlightened new kind work exists software engineer going try paint picture transition well explain could worth skip pro con list read background currently month exploratory hiatus corporate life enjoying massively month ago fresh grad ut austin extremely enthused start career software engineering gotten job pwc somewhat clueless software development could career quickly learned c daily language enterprise heavily used microsoft stack quickly felt stagnation challenge learning nt thing easy reason first year gate mostly incredibly boring html cs c copypaste style coding due incredibly mature application think million line code hard grasp domain knowledge caked somewhere time organically stumbled upon paul graham essay eventually hacker news orange site profoundly changed way saw career trajectory likely could like many older developer around stay year end making year cheap major city possibly make partner double triple life short wait year abstract possibility began absorbing content possibly could hacker news three key element presented browsing startup importance ownership fun programming startup saw wonderful ability deal typical corporate b loved pwc really nt care watch hour accounting ethic video annually ownership saw really equity anything software related way build wealth grows nonlinearly time input thanks naval ravikant fun programming found clojure realized increase joy programming decrease boilerplate code magnitude simply using rather java c mention magic lisp course many people nt get wealthy quickly startup coding realized thing life take time patience mind impatience corporate programming growth knew needed something would challenging provide greenfield project architectural decision nt sense thing would happen quickly job spent night year learning clojure rust making python web app towards end year decided really needed jump deep end spend time trying make something scratch figuring could earn money biggest fear would nt healthcare would watch saving account deplete thing likely true ultimately decided worth set without clear shortterm plan make money vague idea wanted sell pearl jewelry consult software thanks make saas mvp read middle three thing starting feel normal working contract work got hacker news making pearl jewelry eventually want become importer basically done saas mvp certainly dynamic work might find hard explain thanksgiving christmas sure next step grateful pwc providing small cushion time hacker news people catalyzing realization higher ambition put much thought paragraph portray want list reason work style may may suit essentially unlimited schedule flexibility meaning best hour day nt given employer tradeoff must remain disciplined high earning potential starting business consulting software developer tradeoff steady income benefit potential work fast paced dynamic project using tech interesting tradeoff also might work long period time potential work hour week making every penny contractor tradeoff longer guaranteed least hour work potential work le tradeoff likely wo nt earn ability work hour straight mental flow without slack email ping tradeoff may feel isolated time meet friend family point day tradeoff friend family might respect working hour like wish get paid overtime deadline push tradeoff longer get paid take holiday vacation pay scaled please without waiting annual review tradeoff might get work new rate pay limited wider contract market rate lucky niche expertise competitive market rate tradeoff justify selfemployed consultant slot resume future employer worry hiding unemployed period list certainly exhaustive thing crossed mind considering selfemployment good next step ambitious engineer feel inhibited corporate grind must determine power change workplace want need hit eject button interested detail want chat say hey gmailcom submit use http wwwtowardssoftwarecomblog functional programming better function operate one data structure function operate data structure alan perlis sicp foreword eternal debate around object oriented software v functional software likely never conclusion however choose functional possible api problem defined every abstraction service create software consumer spend time learning api familiar concept domainspecific language dsl start understand trouble nice api introduces new pattern follow importantly introduces new pattern learn first heard term dsl learning clojure lisp give magical ability google homoiconic create new language extremely rapidly create new language make dsl powerful something new outsider learn reading modifying code modern web developer know apis well typically apis used gain massive leverage scalability without write much code maintain complex service anyone used powerful apis know great working time spent looking documentation suck time lucky might get first try likely keep searching doc blog stack overflow find essence looking trouble frustration come assumed service going plug play easy set spent two hour learning dsl nt really care learn nt want learn api specific pattern shape json language object oriented programmer spend year making complex apis let explain object api oop nt call api effectively object use object get contract say call get set tostring foo bar etc object api layer access functionsmethods api access data deny functional programming data api also explain better back object let look class net core policyschemehandler actual class nt matter purpose interested authentication related stuff nt already please open link tell method sound useful may gotten sidetracked long method name description nt actually say method rather inherits sweet hyperlink follow figure use class api going spend least minute learning lot take almost minute read class declaration public class policyschemehandler microsoftaspnetcoreauthenticationsigninauthenticationhandler mouth full argue one class hundred application might need interface full method class introduce create project brings many many method specific class alone maybe made nice interface required implement sleep method human dog cat class likely typed similar method one functional programming help spoiled clojure opinion somewhat colored experience clojure use map seqs vector list primitive data structure class previously u something wonderful make function accept aforementioned data structure parameter return correct answer need implement sleep time time nasty app get paid work implement magic pas map shape represent human dog cat function treat would rather sleep function different animal type different animal class sleep method cherrypicked example norm gain massive leverage treating data data instead treating like object rigid force burden implementation detail submit use http wwwtowardssoftwarecomblog perfect web framework essence web framework one thing transform text based request state complexity arise nt web framework accomplishing goal let dream world simple web page build web framework might guessed world simple webpage literally text notice tutorial framework make sure configuration correct displaying hello webpage authentication file uploads post request single get request show string note remainder post clojure implementation language detail idea framework simple ported language hour regarding clojure choose web server get started however also detail code shared portable across server point framework nothing let think simplest abstraction web framework remember need transform text based request maybe state need structure composable linearly independent unit added together flexible order independent interoperable efficient fast minimize blocking time async unit commonly referred middleware let use unit work naturally composable function since function take argument keep simplicity mind accept one argument request concrete way move forward function unit work accomplish via transformation request define function respondhello single parameter req function anything request simply return ok status text body hello function make well request need determine request going routing type request get post request need persist data form make structure function maintain maximum flexibility ideally request piped though many function finally turned response returned requester functionality needed request routing functionality needed certain request like authentication would nice one central location common middleware transform request le common middleware defined locally route view continued todos keep simple transformation request copypaste framework deps cross language building saas month ago decided quit job pwc make time capsule internet bigger thing idea sprouted reflected nt picture dad year passed still nt understand nowadays people pas away lose digital belonging unless meticulous people facebook account stay linkedin profile still around dropbox special photo limbo make incredibly sad reflect dad life digital self still around ca nt access ca nt access incredible moment care many people want photo unified way accomplished every online service procedure fragmentation one digital life becomes hard family tie together death time capsule play role well directly nt short term need attractive feature people healthy nudged make better end life plan time capsule nothing new appeal essence opposite snapchat document photo access appear period time rather disappear hope people attracted novelty setting time capsule deliver grandchild year future serve entry point service modern estate planning gave inspiration start making life box name likely change solution problem near dear also extremely personal everyone death fun will fun nothing deal fun still much friction thing happens everyone problem willing tackle nt know anyone else try funeral expensive funeral home trying upsell wreck data go die honestly know tech person nt even know happens online service use life box infancy nt lot capability help question roadmap clear fruit hanging low doubt people use something make process little bearable life box enticing people come time capsule hoping stay fullservice estate planning digital archival tool economics google alternatively could titled google kill many product claim economist even insider google number referenced keep magnitude mind based published data inspired many scathing comment hacker news company practice killing product thought first consider common engineering method software engineer commonly make prototype get feedback either user metric iterate software development wonderful process releasing world easy cheap development main expense product developer company one seek lower cost raise revenue otherwise known widening profit margin software typically look like lowering development cost acquiring user said software issue lot software somewhat fixed cost development whether software used development cost brings u back google simply put economics software work favor user niche software made large organization google scaling million user nt expense getting product ground adding feature fixing bug google developer tied product user nt growing however dedicated user google profit maximizing entity must immediately recognize wasted resource many product launch try reach holygrail hockey stick user growth remember google nt make ton money per user product hitting jackpot lottery necessary widen margin high fixed development cost tiny marginal distribution cost must absolutely scale million user rapidly wallow low roi land wait nt many google loved product free yes forgotten real economics google need data data scientist analyst would tell nt need data need many people data possible statistic significance google need monetize million user time product nt reach scale data nt valuable since aggregate ca nt treated significant google anyways furthermore issue useful said data nt apply large portion google user somehow data need turned advertising value nt million user data product le value proposition advertiser seeking specific target software people appreciate iteration google case lot time iteration mean time scrap product key google data company message app xyz company key value proposition ton data particular product free lagging data creation department go google iterating product find data cash cow monetize indirectly company iterating product generate money directly u nt used many saas product use bread butter company make would never drop flagship product unfortunately google flagship product data product left greive result using product data company rather using product product company personal finance favorite favorite apps website software finance personal banking charles schwab weird choice right well travel internationally frequency prolonged amount time hand best option writing best feature unlimited free atm withdrawal atm internationally decent account interest rate large bank good mobile app fee period downside physical location limited interbank transfer mobile check deposit le appealing interest yield smaller bank easier think go internet banking schwab nice secondary bank account elsewhere able deposit cash bank transfer schwab back international banking wonderful avoid service fee overdraft fee atm fee international charge fee furthermore make transaction internationally exchange rate extremely good like basically pas visa exchange rate directly markup physical presense important next best option mobile deposit work extremely well allow add external account let see bank account balance make free transfer two investingbrokerage robinhood charles schwab recommend robinhood clean simple free schwab established lot offer outside stock market robinhood great great fun money like check price large portfolio would argue app almost make instinctively short term investor bright red color make sell bad day additionally interesting deal set high frequency trading firm like citadel virtu make think getting pretty bad price ca nt prove big player offering free trading make payment order flow brokerage probably mean anything trade thousand dollar otherwise bad price probably still better dropping traditional brokerage charles schwab cool cash sweep take uninvested cash give small return robinhood take return offer bond option strategy cd money market well foreign stock schwab modest trading fee people capital thousand dollar fee eat nonnegligible amount return savingsenveloperetirement acorn acorn app pretty simply small fee two product like acorn core acorn later core account get funded onetime transfer recurring transfer round ups round ups simply track card purchase round next dollar transferring difference acorn account work really well people use card lot give way favor later saving investing swipe later account take onetime transfer recurring transfer allows select would like traditional roth ira invest important distinguishing feature core investment option streamlined option based risk exposure look app see exactly percentage go index fund investment type able give relatively easy way invest index fund still choice paralyzed number fund available later hand category automatically put category based age younger age put aggressive setting mostly stock older age put conservative setting bond budgeting need budget aka ynab unlike app long name app concise simple use enjoyed using past day month struggling intuit mint key difference mint free advertisement ynab month ynab however much simpler ui even conceptually simpler instead tracking trying selflimit expense give every dollar job like enveloping one category run money must pull fund another category use going forward help regulate never overspend overall budget regardless subcategory staying budget ynab import transaction directly bank allows manually add would prefer ultimately mint ynab differ pricing ui budget style squeezing saving month trying mint would worth otherwise think ynab better budgeting stylesolution
108,Lobsters,clojure,Clojure programming,Clojure by Example,https://kimh.github.io/clojure-by-example/,clojure example,clojure hello world run replit function argument form expression binding assignment binding symbol let scope scope lexical scope lexical unable resolve symbol def function defn anonymous function closure closure namespaces namespace library createns quote inn require refer use import java n control flow else iflet else else else whenlet else case cond condp boolean boolean string literal str format integer addition subtraction multiplication division modulo max min power bigint list literal conj remove element sequence nth count vector literal conj remove element list nth indexof set literal conj disj sort contains subset superset map literal get assoc merge key vals sequence seq library seqable seq seqable data type make sequence elegant clojure first rest con concat map reduce reverse iterate range repeatedly doseq take takewhile note drop dropwhile filter predicate anonymous function remove partitionby groupby lazy sequence lazy loop list comprehension list comprehension recursion recur tail recursive loop recursion point macro defmacro macroexpand quote syntaxquotes unquotes unquotesplice threading macro delay delay force future future deref realized promise promise atom atom reset swap thread safety compareandswap ref ref dosync always alter transaction java java interop instantiation method invocation many thanks clojure ground clojure brave true programming clojure clojure cheatsheet,nt like reading thick oreilly book start learning new programming language rather like starting writing small dirty code take approach many simple code example extremely helpful find answer question easily define function syntax else language support string interpolation scope variable available basic question enough start hacking new language recently needed learn completely new language clojure could nt find wanted decided create one learning clojure clojure functional programming language learning functional programming language sometimes hard experience imperative language paid careful attention make page easy understand people nt experience functional programming language please nt hesitate read page even nt know anything functional programming hopefully page help learning functional programming starting write clojure hello world user println hello world hello world nil user h h user user true true run replit first clojure code course printing hello world invoke function println argument hello world call invocation function applying function data clojure functional programming language entire line code called form clojure also called expression general sense real problem use interchangeably think form something return value h true form well binding giving name value called assignment many programming language however call mapping name value binding clojure symbol symbol used bind name value b mycoolfunction nyncat symbol clojure user type clojurelangsymbol user type b clojurelangsymbol user type mycoolfunction clojurelangsymbol user type nyncat clojurelangsymbol prevent form evaluated want treat symbol data order pas type function user def aaaaa usera user println aaaaa nil user println b compilerexception javalangruntimeexception unable resolve symbol b context compiling nt prepend single quote telling clojure resolve symbol obtain bound value resolving symbol try resolve symbol bound anything clojure complains exception letuser let l light println str god said let l god said let light nil bind value name use let let take vector take symbol first element value second element user println l compilerexception javalangruntimeexception unable resolve symbol l context compiling resolve symbol outside let behavior similar private variable programming language user let l light darkness println str god said let l println str god also said let god said let light god also said let darkness nil also provide multiple binding user let l light ld str l darkness println str god also said let ld god also said let light darkness nil binding immediately available binding see prior binding scope clojure try resolve symbol resolution done scope symbol user let aaa println aaa nil clojure try evaluate need pas value println bound aaa aaa printed terminal straight forward user let aaa let aaa println aaa nil let nested like previous example clojure try resolve however time clojure resolve aaa instead aaa let create scope symbol resolution done inside let symbol resolved user let aaa let aaa println println aaa aaa nil also notice inner let override scope outer let kind scope called lexical scope english first language lexical mean word sentence scope lexical compiler relies physical location symbol word program sentence resolve user let let println nil resolution look bubble find binding inner let nt provide binding bubble outer let happens scope inner let wrapped scope outer let user let let println notboundsymbol compilerexception javalangruntimeexception unable resolve symbol notboundsymbol context compiling clojure complains unable resolve symbol exception find binding inside given scope probably find idea lexical scope familiar modern programming language use lexical scope also something called dynamic scope probably nt know right defuser def object light userobject user println str god said let object god said let light nil also bind symbol value def access symbol within let declared access symbol declared def anywhere user def object darkness userobject user println str god said let object god said let darkness nil also override one already declared later rule thumb clojure avoiding use def much possible def introduces state abusing state make code difficult maintain functionsdefn user defn sayhello name println str hello name user sayhello kim hello kim nil define function use defn first argument name function sayhello second argument argument function name third argument function body println str hello name user defn sayhello take name argument say hello name name println str hello name also add documentation user doc sayhello usersayhello name take name argument say hello name nil use doc read documentation user defn sayhello take name argument say hello name added static true name println str hello name also add metadata function user meta var sayhello added n namespace user name sayhello file nosourcepath static true column line arglists name doc take name argument say hello name expand metadata meta notice sayhello first passed var meta expects argument var object value var turn passed symbol var object user meta sayhello added n namespace user name sayhello file nosourcepath static true column line arglists name doc take name argument say hello name reader macro var work exactly anonymous function function first class object clojure say something first class object programming language x mean basic operation object passing function returned function binding variable etc user fn println hello world user user create function object use fn user def helloworldfunc fn println hello world userhelloworldfunc user helloworldfunc hello world nil bind function var like value work like defn user user user user fn user user shortcut fn user user user user let plus plus user let plusnumbers plusnumbers replaced argument passed function function take multiple argument first argument second user def sayhello fn name println str hello name usersayhello user def saybye fn name println str good bye name usersaybye user def greeting fn greetingfunc name greetingfunc name usergreetingtokim user greeting sayhello kim hello kim nil user greeting saybye kim good bye kim nil also pas function another function define two function bind sayhello saybye var also define generic function bind greeting pas sayhello saybye greeting closure function let call inner function returned another function let call outer function inner function somethings argument given outer function inner function called closure user defn inner fromouter fn println fromouter userinner user def inner outer user def inner yet another outer user outer nil user yet another outer nil define function called inner inner function print fromouter var supposed given outer function also define two function function call inner different argument result even fromouter var nt change inner print different thing namespaces namespace provides way organize different clojure object logical group logical group often called library used namespaces namespace constructed symbol chained clojurecore clojurehttpclient myappexample namespaces creatensuser createns clojurebyexample nil create namespace use createns however rare create namespace createns handy n macro explained later need place single quote namespace order stop resolving namespace symbol see quote detail quoting innsclojurebyexample inn user object clojurelangnamespace user user move specific namespace use inn require one important role namespace providing scope clojure object clojurebyexample defn favoritelanguage clojure clojurebyexamplefavoritelanguage clojurebyexample favoritelanguage clojure clojurebyexample inn user object clojurelangnamespace user user favoritelanguage compilerexception javalangruntimeexception unable resolve symbol favoritelanguage context compiling ciderrepl localhost thing define namespace visible namespaces default see example favoritelanguage function visible user namespace user require clojurebyexample nil user clojurebyexamplefavoritelanguage clojure load namespaces use require load clojurebyexample namespace favoritelanguage available user namespace user require clojurebyexample cbe nil user cbefavoritelanguage clojure sometimes want give different name loaded namespace case surround namespace vector keyword user require clojurebyexample cbe clojurecore ccc nil also require multiple namespaces referuser refer clojurebyexample nil user favoritelanguage clojure probably nt want type clojurebyexample everytime want call favoritelanguage function avoid use refer useuser use clojurebyexample nil user favoritelanguage clojure require load namespace refer refers namespace use use importuser import javautildate javautildate user new date inst import namespace java need use import please see java section information use java n n macro creates new namespace give opportunity load namespaces creation time n examplenamespace require clojurejavaio use clojuredata import javautil list set n take require use import keyword work way corresponding function explained except nt need quote control flowifuser true println always printed println never printed always printed nil take predicate true false first argument second argument evaluated predicate evaluated true third argument equivalent else many programming language evaluated predicate evaluates false user true println one println two one two nil clojure pas one expression branch however often need pas one expression real program case use ifletuser defn positivenumber number iflet posnums notempty filter po number posnums positive number user positivenumber user positivenumberseq positive number testing condition often want use result testing later iflet bind evaluated condition var truthy example positivenumber receives collection contains positive number result notempty filter po number bound posnums posnums returned since collection contains positive number second argument else branch evaluated first argument evaluated false user boolean filter po true user notempty user notempty nil note filter return empty sequence value match condition instead nil empty sequence falsey clojure order reach else branch iflet posnums nil reason using notempty properly return nil sequence empty whenuser true println one println two one two nil care case condition truthy use similar contain else branch already wrapped pas multiple expression user false println one println two nil since else branch nt anything whenletuser whenlet posnums filter po posnums println one println two one two nil also whenlet similar iflet contain else branch caseuser defn n case n n n n user println n nil user println n nil user println n nil also case work pretty much one programming language case compare value condition evaluates expression matched branch expression last branch evaluated none condition matched conduser defn condtest n cond n n n n n else n user println condtest n nil user println condtest n nil user println condtest n nil want similar thing case want write test case rather use cond write different test case branch cond use else keyword default case condpuser defn n condp contains n n either n user println n either nil user println n nil use predicate condp condition case contains predicate contains evaluated case contains evaluated falsey thus default branch evaluated booleanuser true true user false false true false value boolean type like programming language user boolean false false user boolean nil false user boolean true user boolean true user boolean hi true user boolean hi true clojure everything except false nil true stringsliteraluser hi hi create string doublequoting text struser str good morning good morning concatenate string use str user good morning classcastexception javalangstring cast javalangnumber clojurelangnumbersadd operator nt work concat string expectation user let first hirokuni last kim str name first last name hirokuni kim clojure nt string interpolation str work formatuser format name hirokuni kim name hirokuni kim like many language clojure support string formatting format function concat example also achieved using format function first argument tell format function format want apply string called format specifier specifies type data formatted rest argument replace format specifier user format favorite fruit apple favorite fruit apple format specifier string user format ate apple ate apple format specifier integer user format pi pi user format pi pi nf format specifier floating number n specifies floating point print user format boolean representation b boolean representation true user format boolean representation nil b nil boolean representation nil false b format specifier boolean integersadditionuser subtractionuser multiplicationuser divisionuser user interesting thing fraction represented ratio modulouser mod get modulus mod maxuser max get greatest number max minuser min get smallest number min poweruser defn power x n reduce repeat n x user power clojure nt provide builtin function exponential operation define function power reduce take sequence generated repeat compute element sequence return sum sum used next element sequence bigintuser bigint longmaxvalue use bigint handle really big number user arithmeticexception integer overflow clojurelangnumbersthrowintoverflow user n literal bigint list list basic collection clojure dialect lisp list processing language however nt often use list data collection useful collection data type clojure vector map literaluser list simple collection value create list grouping value parenthesis single quote beginning user classcastexception javalanglong cast clojurelangifn need prevent list evaluated conjuser conj add value list use conj conj oin note new value added top remove element may wonder remove element specific position list remove element match list unfortunately builtin function removal operation list still use function seq library remove filter drop familiar seq library jump sequence learn nthuser nth get value list use nth index number index start countuser count count many value list use count vector think vector efficient useful version list practical store multiple value vector literaluser create vector grouping value square bracket unlike list nt need vector evaluated conjuser conj add value use conj conj oin note new value added end added beginning list remove element story list nthuser nth get value vector need specify index value user first user last vector convenient function access element get first second element use first second indexofuser indexof get index value indexof dot indexof indicates java interop access method java user indexof return value nt exist set set collection unique value word duplicated value set another important trait set order value guaranteed literaluser create set grouping value notice order value maintained user illegalargumentexception duplicate key clojurelangpersistenthashsetcreatewithcheck get exception try store duplicated value case duplicated value conjuser conj add value use conj conj oin user conj conj set nt allow duplicated value see one final set disjuser disj create set value removed basically removing value set use disj disj oin user disj trying disj value nt exist set return original set sortuser sort conj set unordered collection value meaning order value guaranteed get sorted order use sort contains user contains true user contains false check value contained set use contains subset user clojuresetsubset true user clojuresetsubset false check set part another set use subset superset user clojuresetsuperset true check set includes another set use superset map map keyvalue data structure store multiple value literaluser apple mac microsoft window apple mac microsoft window user apple mac microsoft window apple mac microsoft window create map grouping value although use clojure data type key two common type key keyword string getuser get apple mac microsoft window apple mac get value key use get user get apple mac microsoft window linux nil get nil key nt exist user get apple mac microsoft window linux sorry linux nil specify default value third argument returned key nt exist map user apple apple mac microsoft window mac key map keyword use keyword like function get value assocuser assoc apple mac microsoft window commodore amiga commodore amiga apple mac microsoft window add keyvalue pair use assoc user assoc apple mac microsoft window apple io apple io microsoft window key already exists replaces value mergeuser merge apple mac microsoft window apple mac microsoft window combine two map use merge keysuser key apple mac microsoft window apple microsoft get key map use key valsuser vals apple mac microsoft window mac window get value map use vals sequence sequence data type store multiple value may wonder difference list vector clojure many different collection data type yes use list vector store multiple value fact list vector sequence collection data type map set also sequence sequence data type abstract concrete data type unified function function called seq library clojure one virtue sequence call function collection without worrying type collection dealing let take look example using map different type collection user map inc user map inc user map inc user map key b c b c applying map vector applying map list applying map set applying map map using key function case inc nt work map apply function seq library data type say data type seqable example work list vector set map seqable collection see function seq library following section get familiar sequence seq construct sequence use seq seq take one seqable collection convert sequence collection data type list vector set map seqable therefore pas seq user seq converting list sequence user seq converting vector sequence user seq converting set sequence user seq b c b c converting map sequence seqable data type seq make sequence elegant clojure long data type seqable seq convert data sequence apply function seq library different collection type transparently seq library function internally convert passed collection sequence right thing may wonder returned value look like list repl however matter displaying actually sequence user type seq clojurelangpersistentvector chunkedseq clear sequence use type first get first element sequence use first probably used first different collection data type without knowing first actually sequence function user first getting first element vector user first string getting first element vector call first collection data type string collection character get expected behavior first sequence function data type seqable restuser rest get element except first one sequence use rest see another important trait sequence sequence function always return sequence matter type collection take user type clojurelangpersistentvector user type rest clojurelangpersistentvector chunkedseq type tell type data see vector becomes sequence checkedseq type sequence go rest function consuser con add element head sequence use con user def oldseq useroldseq user def newseq con oldseq usernewseq user oldseq user newseq operation equivalent construct new sequence adding element existing sequence therefore con con truct concatuser concat combine sequence use concat user concat also pas two sequence concat mapuser map inc apply function element sequence use map user map fn x inc val x b c want something complex element pas anonymous function value bound x reduceuser reduce reduce boil element sequence single value applying function way reduce work first take first two element sequence apply function get result applying function result third element keep end sequence nature function must take two argument user reduce inc arityexception wrong number args passed coreinc clojurelangafnthrowarity otherwise get exception inc one argument function user reduce fn re val re val course pas anonymous function complex stuff nt nt forget anonymous function must take two argument user reduce nt want start first element sequence pas starting point second argument insert element sequence another sequence use user inserting element list vector nature frequently used convert one collection type another user converting list vector user list converting vector list user converting vector set user converting set vector user b c b c converting nested vector map user b c c b converting map nested vector reverseuser reverse reverse sequence use reverse iterateuser iterate get sequence infinite integer iterate careful though running example freeze terminal since evaluation expression never return rangeuser range generates sequence number two point use range user range get integer every x within range case get sequence integer every repeatedlyuser repeatedly fn println hi hi hi hi hi hi nil nil nil nil nil repeat something use repeatedly passing anonymous function fn println hi second argument must function dosequser doseq animal cat dog horse println animal cat dog horse nil clojure nt foreach something element sequence use doseq user doseq println nil bind multiple value case element first vector added element second vector takeuser take range get first n element sequence use take user take range take element sequence size sequence smaller n takewhile user takewhile neg get first n element sequence long condition satisfied stop taking condition met use takewhile neg return true negative number note taking element satisfies condition takewhile job select dropuser drop range drop probably primitive way remove element sequence drop remove first n element dropwhileuser dropwhile neg get first n element sequence long condition satisfied stop dropping condition met use dropwhile filter remove element match rule specify sequence filter user filter po example remove positive number sequence case positive number rule specify rule called predicate predicate function return boolean value po user filter fn v v construct predicate anonymous function example removing element remove remove element match predicate remove difference filter returned value removed user remove po example remove positive number sequence returned value negative number partitionbyuser partitionby split collection group together certain way word partition use partition example partition vector two group one smaller equal another bigger user partitionby notice end sequence grouped together separate sequence first one partitionby nt merge value groupbyuser groupby false true groupby split collection merge together unlike partitionby groupby return map key result grouping condition lazy sequence clojure sequence lazy familiar function map range reduce etc return lazy sequence need hit ctrlc quickly stop user println iterate inc iterate inc generates sequence infinite number course take infinitely see println start printing number generation sequence never end println even start printing number possible iterate generates lazy sequence println able handle lazy sequence correctly println asks number print iterate one one rather asking entire sequence iterate computes number requested pas number println user println take iterate inc nil take asks first n value lazy sequence iterate also computes first five number asked take looking write loop clojure sorry looking clojure nt imperative loop mutable local variable clojure please see loop section information clojure list comprehension list comprehension first let look example user x x take vector one collection iterate collection binding value symbol short list comprehension way create list existing list idea list comprehension come world math used order write set simpler easier way example x x mean set x bigger x set notation refers set user x x x list comprehension mean thing x x math modifier evaluates body value predicate true user x let x even let modifier used bind intermediate value user x range x x modifier stop evaluation body predicate false user x b c x b b b c c c iterates collection nested fashion useful create combination element given collection recursion function recursive function call inside definition simple way recursion start example fiborecursive function computes nth fibonacci number fibonacci sequence writing function computes fibonacci number recursive programming version hello world fibonacci sequence consisted number characterized fact every number first two sum two preceding one beginning sequence user defn fiborecursive n n n n fiborecursive n fiborecursive n user fiborecursive user fiborecursive see calling fiborecursive function inside function body fiborecursive function calling function inside function body basic way recursive programming clojure many programming language recur simple recursion calling inside definition way make recursive function clojure recur handy tool recursion user defn fiborecur iteration let fibo fn one two n iteration n one recur two one two inc n bigint literal see bigint section need use bigint avoid stackoverflow addition big fibonacci number demonstrated fibo userfiborecur user fiborecur write fibonacci function using recur well recur rebinds argument new value call function new value user defn countdown result n n result recur conj result n dec n usercountdown user countdown another example use recur keep calling countdown function updated argument n becomes recur write recursive function simple recursion like fiborecursive one important reason performance optimization user fiborecursive stackoverflowerror clojurelangnumbersequal compute large fibonacci number fiborecursive try get stackoverflowerror simple recursion recursive call creates stack frame data store information called function memory deep recursion requires large memory stack frame since get stackoverflowerror although nt go deeply detail one technique avoid problem making function tail recursive function tail recursive recursion happening end definition word tail recursive function must return returned value use recur make sure tail recursion user defn fibolooprecur current next iteration iteration current recur next current next dec iteration compilerexception javalangunsupportedoperationexception recur tail position compiling ciderrepl localhost fact get error try call recur end function user fiborecur take long time compute recur tail recursion nt get stackoverflowerror big fibonacci number although take long time compute loop clojure forwhile loop clojure nt provide way write imperative loop mutable local variable clojure however use loop write code work like imperative loop user defn countup max loop count count max println done println str counting count recur inc count user countup counting counting counting counting counting done nil hopefully code look similar simple counting loop nonfunctional programming language experienced example recur increment count end loop loop us next loop loop always used recur provides recursion point recur recursion point function entry point recur go back recursion however recur nt necessary need loop job long recursion point provided user defn countupnoloop count max count max println done println str counting count recur inc count max user countupnoloop counting counting counting counting counting done nil rewrite countup function without loop countupnoloop recursion point recur function note recur take two argument number argument recur must match recursion point function one final note looprecur merely friendly way write recursion code imperative loop converted recursion recursion converted loop clojure chose recursion although write code look like imperative loop looprecur clojure recursion hood macro clojure macro give power restructure clojure code like example create code syntax invent new control flow new type value etc defmacrouser defmacro unless test evaluates test evaluates falsey list list test user unless false println false false nil error user defmacro unless test evaluates test evaluates falsey list list test compilerexception javalangruntimeexception unable resolve symbol context compiling define macro use defmacro like function give name doc argument note using quote followed nt want evaluated define macro without quote see exception macroexpanduser macroexpand unless false println hi false println hi macro replaced clojure code evaluated see replaced without actually evaluating macro use macroexpand note use want unevaluated list quotesuser user quote user without quote expression evaluated return value however expression surrounded quote evaluate expression return expression another form quote exactly thing quote used often quote since concise user defmacro unless test evaluates test evaluates falsey list list test see quoting work macro unless macro need use followed nt want evaluated inside macro definition user require clojurestring nil another common place quote used loading namespace user require clojurestring compilerexception javalangclassnotfoundexception clojurestring compiling ciderrepl localhost need quote clojurestring namespace otherwise clojure try resolve namespace symbol get error resolving symbol default treatment clojurestring symbol bound value syntaxquotesuser clojurecore syntax quoting work similarly quoting return unevaluated expression user dec inc dec inc user dec inc clojurecoredec clojurecoreinc however see difference quoting expression contains symbol unlike quoting syntaxquoting return fully qualified namespace using fully qualified namespace important order avoid name conflict defining macro unquotesuser inc clojurecoreunquote inc user inc clojurecore see another difference syntax quoting quoting syntax quoting used unquoting syntax quoting allows unquoting evaluate expression followed user inc clojurecoreunquote inc quoting nt allow unquoting evaluate expression unquotespliceuser list clojurecore user list clojurecore unquote splice work like unquote except expands sequence splice content sequence enclosing syntaxquoted data structure threading macro threading macro macro help write nested form cleaner readable way despite name threading macro nothing thread parallel computing called threadfirst macro first passing evaluation former form first argument preceding form user conj conj conj suppose want start empty vector adding number vector one one nested version code add number nesting get deeper make code harder read threadfirst macro solves nesting problem user conj conj conj code threadfirst macro first argument initial value want start first argument evaluated passed first argument conj equivalent conj evaluated value passed first argument conj equivalent conj finally evaluating conj return called threadlast macro last passing evaluation former form last argument preceding form map example function take collection last argument apply function first argument user japan china korea map clojurestringuppercase map str hello hello japan hello china hello korea code convert country name upper case say hello country vector country name passed last argument first map equivalent map clojurestringuppercase japan china korea passed second map equivalent map str hello japan china korea remember another way write anonymous function delaysdelay want defer evaluation expression use delay user def later prn adding adding userlater user def later delay prn adding userlater example immediately evaluating expression nothing special involved executed immediately return value bound later var use delay expression evaluated immediately adding printed forceuser def later delay prn adding userlater user force later adding evaluate obtain result delayed expression use force user def later fn prn adding user later adding achieve thing using anonymous function def get bothered delay user def later delay prn adding userlater user force later adding user force later difference plain function delay evaluated cache result adding printed delay return cached result second time futuresfutureuser threadsleep println hello wait sec hello printed hello nil hello printed sleeping second obvious line code executed synchronously user future threadsleep println sleep println hello hello nil sleep use future println hello evaluated immediately three second println sleep evaluated clojure put expression grouped future another thread move current thread forward call inside future still block case sleep printed sec derefuser let futureval future inc println futureval core futurecall nil user let futureval future inc println deref futureval nil future return value see returned value core futurecall want returned value current state future returned value inc obtain returned value inc need dereference future deref user let futureval future inc println futureval nil also use dereference future user future threadsleep returned waiting three second returned dereference future block result returned user deref future threadsleep made ca nt wait anymore made user deref future threadsleep made ca nt wait anymore ca nt wait anymore tell deref long want wait along value return time user let sleepandwait map fn time future threadsleep time println str slept time sec doall map deref sleepandwait println done slept sec slept sec done finally useful thing combining future deref run multiple time consuming task different thread block finish realized user def myfuture future threadsleep user repeatedly fn println realized myfuture threadsleep usermyfuturefalse false false false false true know future already done use realized realized return true second promisespromise want defer evaluation expression obtain value pas use promise easiest example want use promise implementing callback user def mypromise promise usermypromise user def listenandcallback fn println start listening future println callback fired mypromise userlistenandcallback user defn dotimeconsumingjob threadsleep deliver mypromise delivered value userdotimeconsumingjob user listenandcallback dotimeconsumingjob start listening callback fired delivered value first make promise promise creating listener listens promise fire callback value delivered promise like future promise block dereference defining job take second finish let start listener wait time consuming job blocked dereference mypromise second see callback fired atomsatom might hear statement state clojure thus language impractical used build real application however true clojure builtin mechanism manage application state atom one mechanism user def atomstr atom hello useratomstr user def atomvector atom useratomvector user def atommap atom aaa b bbb useratommap user def atomint atom useratomint use atom create atom point value create atom value user deref atomint user atomint obtain value atom use deref reset user def atomint atom useratomint user reset atomint user atomint set value atom reset used setting value without regard current value normally first time create atom user reset atomint user atomint user reset atomint user atomint atom mutable update many time want swap swap allows use function update value atom user def atomint atom useratomint user swap atomint fn currentatom inc currentatom user swap atomint fn int int user atomint int function pas swap take argument current atom atom updated return value function user def atomint atom useratomint user defn multipleby currentatom num currentatom num user swap atomint multipleby pas function take multiple argument first argument function current atom thread safety atom similar mutable variable programming language assign value atom update anytime want however clojure atom one big advantage thread safe user def x userx user repeatedly fn def x inc x userx user x update x ten time increment x every time final value x user def x userx user repeatedly fn future def x inc x core futurecall pending core futur user x similarly update x ten time increment x every time like previous example however code def x inc x executed parallel different thread using future final value x deterministic anymore sometimes sometimes thread access update x timing user def x atom userx user repeatedly fn future swap x inc core futurecall pending user x atom come rescue x atom use swap update value unlike var atom thread safe x updated one thread one time thus final value x guaranteed achieved thanks clojure use compareandswap atom refsref atom handy manage state consistent way ref allows manage multiple state ensuring consistent user def myref ref usermyref create ref use ref user deref myref user myref obtain value ref use deref dosyncuser deref myref user myref user dosync refset myref refset myref user myref update ref must done inside dosync block dosync telling clojure transaction update start set ref new value use refset user refset myref illegalstateexception transaction running clojurelanglockingtransactiongetex update ref always done inside dosync order make transactional update otherwise clojure complains transaction running exception alter alter allows use function update value ref user def myref ref usermyref user dosync alter myref fn currentref inc currentref user myref user dosync alter myref fn int int user myref int function pas alter take argument current ref ref updated return value function user def myref ref useratomint user defn multipleby currentref num currentref num user dosync alter myref multipleby pas function take multiple argument first argument function current atom transaction piece code demonstrates transaction work user def user ref useruser user dosync alter user merge name kim throw exception something wrong happens alter user merge age exception something wrong happens user user suppose trying create user record database alter try update userrecord ref user info want ref updated alter succeed let assume something wrong occurs first second alter see userrecord ref still empty alter inside dosync nt update ref getting dosync block successfully user def userrecord atom useruserrecord user swap userrecord merge name kim throw exception something wrong happens swap userrecord merge age exception something wrong happens user userrecord name kim atom version nt work see userrecord atom half updated exception user def myref ref usermyref user future dosync alter myref inc threadsleep core futurecall pending user println myref wait second user println myref way see transaction work trying observe value ref outside dosync block use future run whole transaction separate thread wait two second exiting dosync block value ref still moment update ref still committed java one great trait clojure use java code clojure code trait called java interop although clojure rich standard library sometimes find library need solve problem library exists java borrow clojure code instantiationuser new javautildate inst create instance new take class name first argument user new javautildate inst rest argument passed constructor function user javautildate inst user javautildate inst also form available must placed end class name user let currentdate new javautildate println currentdate inst nil also bind java instance like clojure value method invocation clojure nt provide exponential calculation function standard library let borrow pow method math class user mathpow call java method like clojure function call pow class method math class class method invocation take form classnamemethod user let currentdate new javautildate tostring currentdate sun jan jst instance method invocation take form methodname instance args example equivalent currentdatetostring java user let currentdate new javautildate currentdate tostring sun jan jst also form available user let new javautildate new javautildate equal true want call method take argument pas instance example equivalent java many thanks clojure ground clojure brave true programming clojure clojure cheatsheet many great article page made clojure community
109,Lobsters,clojure,Clojure programming,The amazingly amazing amaze of lazy data structures,https://augustl.com/blog/2019/amazing_lazy_data_structures/,amazingly amazing amaze lazy data structure,amazingly amazing amaze lazy data structure persistent data structure lazy fibonacci lazy map generating pin code augustl august augustlcom,amazingly amazing amaze lazy data structurespublished december thing make keep coming back clojure persistent data structure lazy sequence post lazy sequence lazy fibonacci demonstrate lazy sequence let implement fibonacci sequence javascript version clojure code follow something compare javascript version good measure function fib n x x x const c xslength c n return fib n xsconcat x xslength x xslength else return x fib clojure version code plain version defn fib n fib n n x let c count x c n fib n conj x nth x c nth x c x fib good right well prettiest code world let fix making literally prettiest code world lazy version literally prettiest code world defn fib fib b lazyseq con fib b b take fib oh yass first much le code second make use bigdecimals get fib super fast good memory usage stack overflow jazz clojure us long default make use bigdec arbitrarily sized number defn fib fib bigdec bigdec b lazyseq con fib b b time last take fib elapsed time msec digit yes really cut brevity pretty cool way threading macro awesome use write statement order called plain version time last take fib awesome threading macro version fib take last time actually laziness well whole idea separate two concept generating data extractingusing data see first version iteration data generation checking max n reached etc code nt need laziness lazy version define data structure look like get lazy sequence back think view infinitely sized fibonacci sequence actually computed actually ask data sequence call take actually make something happen iterate also lay take iterate inc range take range lazy map code print absolutely nothing map fn n print n nothing absolutely nothing map also lazy actually get item map function called wait map fn n print n n take print return surprised ask item item seems printed lazy turn hood clojure time performance optimization realize lazy sequence batch batching map fn n print n n take print return note run mapping function time precache lazy result still get sequence element returned take source lazy sequence vector wo nt batching source lazy map fn n print n n iterate inc take print return generating pin code one pretty cool let say want generate n random digit pin code generate infinite lazy sequence random number possible duplicate repeatedly randint take list contain duplicate chance low get item obviously nt matter requirement list unique enter awesomeness distinct function take list return list duplicate lazy duplicate repeatedly randint distinct take also format good measure map format good good question comment feel free contact twitter augustl email august augustlcom
110,Lobsters,clojure,Clojure programming,Crux as General-Purpose Database,https://jorin.me/crux-as-general-purpose-database/,crux generalpurpose database,crux kafka rocksdb letsdoevents application database layer single transactor transaction function key working document time common database operation global query wrap clojurespec,crux innovative database clojure world follows experience report crux open source bitemporal highly scalable built solid foundation kafka rocksdb default storage flexible provides lowlevel building block allow build exactly database need usecase believe time first class concept database default much easier concept time builtin beginning build specialized solution part performance becomes problem nowadays computer powerful enough case performance issue focus simplicity correctness first coincidence started toy project letsdoevents write clojure spring year started crux announced public beta naturally give try since letsdoevents mostly toy project play different idea took opportunity test crux normal standard application goal see crux hide overhead bitemporal storage well enough make viable default approach even initial requirement application start chose persist using rocksdb allows pack whole system single jar file deploy single process storage need scale would trivial switch kafka storage backend since data simply log transaction document replaying new storage would straight forward flexibility crux give necessarily tool would expect database builtin surely tool pattern ecosystem crux around bit longer thing built application database layer single transactor update crux officially support transaction function allow achieve thing would use single transactor distributed potentially performant way enforcing constraint uniqueness built many database simplest way achieve outside database allow single write time read still happen parallel created tx helper used writes database let ctx init config config tx ctx existsbyattribute useremail mail emailtaken create useremail mail ctx close ctx id key crux expects id us internally namespaced key cruxdbid good pattern conflict domainspecific data however business logic always ended wanting use id without coupling business logic crux letsdoevents database function convert id id transparently using helper defn crux id x renamekeys x cruxdbid id defn id crux x renamekeys x id cruxdbid working document time totally fine crux normal created updated part document case probably good idea performance need timestamps since crux also track time history might always good idea created helper take list document id return document additional created updated key defn listbyidswithtimestamps key crux id let db cruxdb crux id map let h cruxhistory crux assoc crux id cruxentity db created h last cruxdbvalidtime updated h first cruxdbvalidtime common database operation primitive crux provides transaction datalog language querying simple yet powerful still application interact database prefer hide detail database work behind plain function ldecoredb namespace contains helper operation create update delete list get id get attribute count exists however database layer still allows plain datalog query useful joinlike query like one defn getorganizernamesbyeventid ctx eventid dbq ctx find name organizerevent e organizeruser u u username name args e eventid map first notempty global query another great development feature crux ability easily query across data relational database would involve writing table joining together gigantic query crux datalog strict separation data type easily query attribute across document make simple development understand data system data db cruxq cruxdb ldecoredbcrux ctx find id id cruxdbid map first map cruxentity cruxdb ldecoredbcrux ctx handy sort global statistic attribute db cruxq cruxdb ldecoredbcrux ctx find id id cruxdbid map first map cruxentity cruxdb ldecoredbcrux ctx mapcat key set sort wrap fun work crux project getting started new application schemaless database also made thing easier imagine mature project would helpful enforce constraint write database via clojurespec far tested crux scale existing example look promising pluggable architecture one biggest strong point crux make flexible switch different storage backend index implementation biggest challenge integrate world people familiar since clojure edn datalog still far mainstream point http api integration kafka connect potential plan sqllike frontend detailed documentation future look bright believe time builtin start huge advantage new project become norm future
111,Lobsters,clojure,Clojure programming,State of CIDER 2019 Results,http://metaredux.com/posts/2019/12/10/state-of-cider-2019-results.html,state cider result,meta advent note dedicated user base user environment typical usage extension cider manual favourite feature idea improvement learning resource funding general note closing thought data,article part meta advent series committed writing new blog post every day christmas took write article finally opted group related question several broader theme note find raw data survey figure share everyone diagram mostly pie chart got google form directly someone know please let know dedicated user base surprised learn majority cider user around using year fact le respondent said started using cider past year sure whether result good bad good know many people enjoy cider much stuck quite highly competitive environment certainly today got way great alternative cider year ago course might also related fact respondent said using emacs also quite surprising always thought plenty people came emacs cider perhaps many fled tool speculate another interesting insight respondent came cider vim around cursive surprised vim convert emacs pretty good vim keybindings emulation expect cursive convert user environment people seem using either macos gnulinux around window user quite around note people using one operating system respondent working emacs current development version got still running emacs user reported custom emacs setup running spacemacs frankly expected people spacemacs also nice see reported using emacs prelude around people reported running latest stable cider running development version cider funny enough responded idea version cider using people reported updating cider release upgrade process pretty painless day great success quite happy learn day user relying cidernrepl expected something like result really surprised typical usage another interesting insight bulk user using cider clojure clojurescript development rest clojureonly clojurescript support always weakness cider although thing improving gradually past couple year guess knowing many people rely support motivate u even improve come build tool cider user relying leiningen toolsdeps build tool barely registered survey surprised boot fared poorly le participant survey targeting clojure number pretty similar clojurescript still people targeting seems clojure pretty much dead seems decision try support last clojure script release good one user typically starting cider using ciderjackin rest favour use ciderconnect surprise people use cider local development user said also using cider connect remote application extension respondent said using cider extension cljrefactor popular huge margin almost usage helmcider came second none extension made year cider absorbed many extension guess big surprise people relying much extension also quite remark people even know many extension existed even though listed cider manual come emacs extension paredit smartparens projectile magit top choice people doubt anyone surprised result favourite feature asked highlight favourite feature cider people pointed following debugger value inspector interactive programming surprised see many mention inspector great hear many people find useful relatively feature highlighted people also wondering many user familiar everything cider offer another way interpret perhaps many useless feature trim fat idea improvement come idea improvement frontrunners better clojurescript support better findusages improved refactoring functionalitymerging cider cljrefactor improved support clojurespec fewer breaking change informative message especially come error way planning merge cider cljrefactor unfortunately progress front quite slow assure working extent topic limited bandwidth big improvement take time also seems people reasonably happy cider default many suggestion improve prompting symbol prior acting switching focus certain action popped time question learning resource vast majority respondent seem happy current state cider documentation spent lot time working throughout year glad see come support resource clojurians slack clearly number favoured respondent reddit github issue stackoverflow come next le share try monitor even though often ignore question simply due lack time always appreciate others helping support question funding bulk people said using cider job hand said company supporting cider certainly bit disappointing relatively easy explain company need licence buy option exist bright side responded would willing support cider one degree another use opportunity remind everyone best way fund development cider today day recommend using github sponsor want pitch charge anything first year matching donation receive donate receive general prefer open collective model focused project particular person certainly mind getting bit extra money githubmicrosoft free nice see people willing invest cider figure point sell licence company general note first survey type ever useful learning experience got lot feedback improving structure type question promise learned lesson next survey going better also noticed people seem confuse cider cljrefactor functionality big surprise closing thought well wrap people participated survey total bit underwhelming really hoped able make go big next year think overall survey result show cider good place dedicated happy user base people want see existing feature polished refined stability project cider maybe better clojurescript support voice heard hope let usual many way interpret data simply mine interpretation looking forward seeing article member community analyzing sharing perspective thanks everyone participated survey really appreciate input work hard next year make cider even better
112,Lobsters,clojure,Clojure programming,Replicate Datahike wherever you go,https://lambdaforge.io/2019/12/08/replicate-datahike-wherever-you-go.html,replicate datahike wherever go,offline peertopeer system datahike dat background demo application datahike dat project setup doc clojure leiningen origin peer dat replication peer clone coreasync background zfs datahike dat project datahike dat project datahike triplestore hitchhiker tree datalog david greenberg btree strangeloop christian datopia blog dat project conclusion future development ipfs syncthing rsync slack zulip,requirement offline capability fault tolerance modern database management system thrive mechanism support simple replication using decentralized peertopeer system replicating file easily achieve simple synchronization solution without tempering database since handling parallel event spacetime distributed system conflict may arise simplicity leave conflict resolution another time next section go simple example application database replication step possible background information underlying database datahike synchronization platform dat described background section end basic knowledge clojure enough get sense following code let start demo application following demo show example clojure application two peer simple datahike database containing user name first create origin database entry create data repository database folder share another folder system cloning synchronizing using dat project particular dat commandline client attempt read cloned database observe live update file watcher figure illustrates connection datahike peer synchronization layer update within database application origin app written file system origin peer synchronization process dat share detects change propagates peer process dat sync receives change applies file system clone peer clone app detects file change refreshes connection datahike read file system system overview setup first make sure dat installed see official doc instruction ubuntu might clash commandline tool since using clojure need jvm check operating system java option leiningen order execute code want type may find example code example aim unix environment like linux macos easily translatable window environment contact need help origin peer let start project scratch open terminal begin lein new datahikereplication cd datahikereplication add following dependency section projectclj least clojure version ioreplikativdatahike fire repl start tinkering lein repl nrepl server started port host nrepl reply nrepl clojure java hotspot tm server vm doc doc functionnamehere finddoc partofnamehere source source functionnamehere javadoc javadoc javaobjectorclasshere exit controld exit quit result stored var exception e user first create empty datahike instance within local folder tmporigindat initialize simple schema require datahikeapi def origindir tmporigindat def originuri str datahike file origindir def schema dbident name dbvaluetype dbtypestring dbcardinality dbcardinalityone dcreatedatabase originuri initialtx schema def originconn dconnect originuri add data dtransact originconn name christian name judith name konrad let check everything transacted correctly dq find n e name n originconn konrad christian judith since using query several time different connection use function defn getallnames conn dq find n e name n conn dat replication let initialize dat origin peer datahike folder start sharing cd tmporigindat dat create dat share share output provides dat id something like dat dat share link start distributing database let sharing daemon open create new terminal next clone repository tmpclonedat make sure folder exist yet cd tmp dat clone dat clonedat cloning done start synchronizing continuously cd tmpclonedat dat sync everything set check replicated datahike instance peer clone let go back open repl def clonedir tmpclonedat def cloneuri str datahike file clonedir def cloneconn dconnect cloneuri getallnames cloneconn konrad christian judith cloned data update synchronization realized datahike connection let check adding something origin database dtransact originconn name pablo getallnames originconn konrad pablo christian judith look terminal process clone synchronizing happening may see update coming let look cloneconnection getallnames cloneconn konrad christian judith tough luck nothing happened datahike inmemory index sync need recreate local datahike connection order get update memory def cloneconn dconnect cloneuri getallnames cloneconn konrad pablo christian judith alright something next let update connection whenever something clone peer changed simple solution check length dat contentsignatures file every second refresh datahike connection changed may look little bit frightening function coreasync afraid coreasync provides good level abstraction synchronize stateful process require clojurecoreasync refer goloop timeout chan put defn signatureslength length clojurejavaiofile str clonedir datcontentsignatures defn reconnect let state atom chan chan conn dconnect cloneuri goloop event reconnect case event stop println stopping reconnect swap state assoc conn dconnect cloneuri println reconnected recur chan state recur chan state goloop l signatureslength timeout let newl signatureslength whennot l newl chan state reconnect recur newl state def state reconnect update replicated database clone whenever transact new data origin connection repl display reconnected connection renewed dtransact originconn name chrislain getallnames originconn konrad chrislain pablo christian judith wait second two dat synchronize data check connection clone state since reset every time dat synchronizes new data getallnames conn state konrad chrislain pablo christian judith awesome distributed database may stop watching local content sending stop event put chan state stop background although base idea simple adapted database meet certain criterion firstly data update must operated atomically single file peertopeer system propagate individual update secondly database system use memory mapped file mutate data unpredictable position file transaction log mutable index way get efficient data delta peertopeer system calculate change high cost increase database size could imagine using distributed file system like zfs make mutable database persistent often hurt performance significantly requiring special file system lean operation believe zfs would le performance impact datahike though fast synchronization composable notion persistent snapshot unexplored attractive alternative dat synchronization either way using database datahike file system sufficient combination dat project simple api open protocol file replication datahike dat project datahike triplestore us hitchhiker tree index provides powerful datalog query engine hitchhiker tree functional data structure invented david greenberg incorporates fractal tree lead efficient read write operation combination btree appendonly log information look presentation hitchhiker tree strangeloop christian datopia blog dat project nonprofit data sharing peertopeer protocol building distributed application currently dat primarily implemented javascript apis high lowlevel data synchronization conclusion future development combining datahike efficient functional index replication mechanism dat quick solution simple data replication without typing synchronization code multiple clone could scale database read replicating machine original peer write dat repository therefore single writer setup multiple writer require conflict resolution scheme planned datahike future work replication system may try also ipfs syncthing even simple batch synchronization using rsync also able use good old network file system like nfs sshfs webdav window network share file system store update file place ensures atomic copyonwrite semantics next iteration datahike extending idea simple replication mechanism happy discus idea slack zulip push thing since plenty possibility probably thought yet
113,Lobsters,clojure,Clojure programming,Clojure/north 2020 CFP is open (Toronto),https://www.papercall.io/clojure-north-2020,clojurenorth cfp open toronto,looking youtube channel speak clojurenorth selection criterion selection process note video coverage perk hello clojurenorthcom example reitit ancient art routing tommi reiman watch tommi talk youtube,looking looking wide variety talk focus clojure general functional programming submit talk regardless experience level clojure perspective matter ideally talk center around realworld use case built something proud overcome hurdle work learned something new want share submit talk however feel constrained theme interesting talk mind please feel free submit proposal need idea check last year talk youtube channel may propose one following talk length talk minute lightning talk minute keynote minute please note talk time include q speaker discretion speak clojurenorth clojurist already know many u clojure developer high demand clojure community toronto growing year number local company investing technology toronto also one fastestgrowing market tech talent north america behind silicon valley seattle sharing idea experience knowledge help foster growing clojure community toronto also add global body clojure knowhow great opportunity meet clojurists around world meet company using clojure help attendee make case clojure clojurescript adoption company selection criterion presentation ability good speaker novelty uniqueness presenting new informationideas utility attendee useful information presented talk original presentation presented elsewhere first time presenting talk selection process smallness clojure community make likely subset organizing team potential speaker also professionally affiliated conference sponsorsthis negatively influence talk selection rather make u especially mindful selection bias keep check sponsor get special preference friend get cut line everyone wish submit talk must go cfp process selection committee consists reviewer diverse background experience level shortlist roughly double amount required talk trim shortlist required number talk buffer case selected speaker withdraw cfp close february team let know february selected waitlisted rejected talk successful selected team coordinate travel stay arrangement note selected speaker notified via email video coverage clojurenorth recording available publicly event concern recorded wish optout please let u know ahead time form perk grateful everyone take time busy life speak clojurenorth benefit others commit following perk speaker free ticket twonight stay venue hotel speaker outside gta unless covered employer travel stipend speaker outside gta unless covered employer speaker dinner evening june visa invitation letter needed require additional support attend please hesitate mention make best effort make sort arrangement already purchased ticket please email u hello clojurenorthcom refund cost example example entered elevator pitch description field one clojurenorth talk reitit ancient art routing tommi reiman reitit new fast isomorphic datadriven routing dispatching library clojurescript key feature firstclass route data extensibility composability kickass performance talk walk design principle reitit main feature different routing algorithm compare routing engine clojurescript javascript also share lesson learned writing performant code clojure describe emerged datadriven pattern like data expansion partial validation data compilation talk everyone interested clojurescript web development routing datastructures performance datadriven design general watch tommi talk youtube
114,Lobsters,clojure,Clojure programming,Instructions for loading ClojureScript onto an ESP32 microcontroller,https://gist.github.com/mfikes/a649ee58b3e9d5c8ecb91f3dbc6be224,instruction loading clojurescript onto microcontroller,loading code unmodified wrover running espruino create code support javascript label create javascript boot rom binary flash boot rom espruino wrover partition table connect wrover confirm,loading advanced code unmodified wrover running espruino load clojurescript advanced code directly wrover running espruino execution upon boot creating binary flashing javascript boot rom area effect loading code via espruino web ide direct flash execute code boot mode flashing much quicker reliable note need wrover spi psram opposed wroom clojurescript example us ram available wroom create advanced code small program us enough pull data structure etc leading nearly kib srcfoocorecljs n foocore def b jsprint reduce vals depsedn deps orgclojureclojurescript mvnversion compile program via clj cljsmain co processshim false advanced c foocore confirm espruino run resulting javascript executing confirming print note espruino nt support javascript label gcc emit along break statement label often look like break code turn nt affect code encounter issue look like uncaught syntaxerror got expected eof espruino create javascript boot rom binary example wc c outmainjs show file byte create first byte boot rom file size file first word followed word ffs ascii bootcde create file named headerbin content look like following ff ff ff ff x bootcde note littleendian file size decimal concatenate header advanced javascript create boot rom binary cat headerbin outmainjs mainbin flash boot rom espruino wrover esptoolpy chip port port writeflash mainbin replace port wrover serial port something like also note address javascript boot rom code jscode per partition table connect wrover confirm connect espruino web ide tool say screen see espruino printed press hardware reboot button shold see reboots load advanced clojuresript executes printing second memory diagnostics processmemory free usage total history gc gctime sdkversion freeheap ble true wifi true minheap
115,Lobsters,clojure,Clojure programming,Pimp my Print Method: Prettier Clojure Built-in Types,http://metaredux.com/posts/2019/12/05/pimp-my-print-method-prettier-clojure-built-in-types.html,pimp print method prettier clojure builtin type,meta advent actual implementation,article part meta advent series committed writing new blog post every day christmas trust easy find right name article started pompous sounding improving printed representation certain clojure builtin object type needed half hour come current title naming hard fancy sounding title noticed many clojure type represented particularly userfriendly way repl example clojure user object clojurecore plus clojurecore plus user printmethod object clojurelangmultifn clojurelangmultifn user atom object clojurelangatom status ready val user findns clojurecore object clojurelangnamespace clojurecore function multimethod atom namespace object used clojure printed representation probably make sense people certainly confusing newcomer representation particular pure gold come clarity real question however better yes people using cider editor backed cidernrepl eg vimfireplace calva might confused example gave get something pretty different repls let one time cider repl user function clojurecore user printmethod multifn printmethod user atom atom user findns clojurecore namespace clojurecore know find version much easier comprehend time crux article achieve pretty simple actually simply leveraged printmethod builtin clojure multimethod control object get printed excerpt actual implementation def dynamic prettyobjects true cider prettifies object description instance instead printing function object clojurecore plus clojurecore plus printed function clojurecore disable feature altervarroot cidernreplprintmethod prettyobjects true defmacro defprintmethod dispatchval arg string defmethod printmethod dispatchval arg writer w prettyobjects map list write w string clojurecoreprintobject arg w defn translateclassname c maindemunge getname class c atom ex atom foo bar defprintmethod atom c atom prstr c format x systemidentityhashcode c function object ex function cidernreplprintmethodmultifnname defprintmethod afunction c function translateclassname c bit complicated need mostly wrapper defprintmethod macro make printmethod aware dynamic var control prettyprinting needed tool like cider case user like different printing guess people need tweaking something local setup need code namespace get required earlyon application done exactly cidernrepl writing article also realized really move code orchard nreplspecific way part orchard would make easier people reuse code directly technique without flaw though recently cider user ran following problem defrecord foo clojurelangideref deref x x foo unhandled clojurelangexceptioninfo caused javalangillegalargumentexception multiple method multimethod simpledispatch match dispatch value class scratchfoo interface clojurelangideref interface clojurelangipersistentmap neither preferred solving problem easy adding prefermethod printmethod clojurelangipersistentmap clojurelangideref still believe implementing ideref record bad idea also reasonably sure bug report got year since feature added cider lead believe work fairly well people today hope managed learn something useful see tomorrow
116,Lobsters,clojure,Clojure programming,Interactive Programming for Artificial Intelligence,https://www.youtube.com/watch?v=m0rSJ9xdsdk,interactive programming artificial intelligence,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature interactive programming artificial intelligence dragan djuric youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature interactive programming artificial intelligence dragan djuric youtube
117,Lobsters,clojure,Clojure programming,a smol comic about Clojure,https://daiyi.co/blog/2017/07/19/a-smol-comic-about-clojure/,smol comic clojure,introducing clojure clojurescript clojure clojure dialect lisp lisp selfhosted clojure hosted language symbiote jvm interop clojurescript choosing text editor use clojure seems something people think deeply emacs atom parinfer someone else would anyone use clojure problem,made cute comic writing lot clojure script people asking introducing lot also holy crap friend gifted graphic tablet weekend finally reunited digital art aaah following along home shitty internet connection screen reader struggling parse funky handwriting transcribed comic introducing clojure clojurescript clojure say clojurescript say ala gone transpiler clojure dialect lisp name lisp birth age typing strong dynamic favouriteicecream vanilla cool thing learned lisp first nonassembly selfhosted language compiled name clojure birth age typing strong dynamic favouriteicecream raspberry cheesecake drew lisp family tree except tree octopus clojure hosted language mean symbiote living jvm java virtual machine clojure talk host interop mean use host library drew clojure mushroom also symbiote whispering sweet interops ear jvm clojure target many thing call clojurescript target javascript mean write clojure program work browser drew clojurescript also mushroom lookin pretty chill host javascript consoleloging one believe spent evening drawing clojure various choosing text editor use clojure seems something people think deeply lot people like emacs use atom long got something automatically minding parens eg parinfer paredit probably fine drew thumb except thumb face face saying nice extra note decide use emacs try configure scratch like first three time tried use emacs go borrow someone else configuration would anyone use clojure jvm lot mature library java jvm abstract away hardware o concurrency clojure designed concurrency lisp lisp fun write functional programming interesting way think everything data clojure pattern really suited task macro powerful fun community people super friendly directly talk lot library maintainer helpful folk clojurians slack channel cozy local community berlin clojurebridge problem take brain adjust coming language toolset build process lot take still learning probably comfortable enough harness full power language really hard make fan art animal pun okay go fun also super excited euroclojure week berlin aaahh see manage find give paper draw hosting clojure mushroom drawn enough mushroom week
118,Lobsters,clojure,Clojure programming,A Clojure wrapper to HikariCP JDBC connection pool (2014-ongoing),https://github.com/tomekw/hikari-cp,clojure wrapper hikaricp jdbc connection pool,hikaricp hikaricp installation configuration option adapter corresponding datasource class name connection please note adapter corresponding datasource class name yes yes yes yes yes yes usage postgresql example minimal config example oracle example sybase example sqlite example notice license tomek wałkuski jan stępień,hikaricp clojure wrapper hikaricp zerooverhead production ready jdbc connection pool installation add following dependency projectclj file hikaricp version target clojure version last release clojure note hikaricp requires java newer older version supported also need add jdbc driver needed database configuration option option required default value description autocommit true property control default autocommit behavior connection returned pool boolean value readonly false property control whether connection obtained pool readonly mode default connectiontimeout property control maximum number millisecond client wait connection pool time exceeded without connection becoming available sqlexception thrown minimum value validationtimeout property control maximum amount time connection tested aliveness value must le connectiontimeout lowest accepted validation timeout second idletimeout property control maximum amount time millisecond connection allowed sit idle pool maxlifetime property control maximum lifetime connection pool value indicates maximum lifetime infinite lifetime minimumidle property control minimum number idle connection hikaricp try maintain pool maximumpoolsize property control maximum size pool allowed reach including idle inuse connection basically value determine maximum number actual connection database backend poolname autogenerated property represents userdefined name connection pool appears mainly logging jmx management console identify pool pool configuration jdbcurl none property set jdbc connection url please note adapter expects url instead jdbcurl driverclassname none property set jdbc driver class adapter none property set database adapter please check adapter corresponding datasource class name full list supported adapter datasource class name value provided string username none property set default authentication username used obtaining connection underlying driver password none property set default authentication password used obtaining connection underlying driver databasename none property set database name servername depends adapter property set hostname client connects portnumber depends adapter property set port client connects connectiontestquery none driver support strongly recommend setting property legacy database support connectionisvalid api query executed connection given pool validate connection database still alive leakdetectionthreshold property control amount time connection pool message logged indicating possible connection leak value mean leak detection disabled minimum accepted value m p rarely needed option use debugging registermbeans false property register mbeans used jmx monitor hikaricp connectioninitsql none property set sql statement executed every new connection creation adding pool datasource none property allows directly set instance datasource wrapped pool datasourceclassname none name datasource class provided jdbc driver metricregistry none instance dropwizard metric metricsregistry healthcheckregistry none instance dropwizard metric healthcheckregistry metricstrackerfactory none implementation metricstrackerfactory codahalemetricstrackerfactory micrometermetricstrackerfactory prometheusmetricstrackerfactory transactionisolation none constant name connection interface transactionreadcommitted transactionrepeatableread etc adapter jdbcurl mutually exclusive also add datasourcespecific configuration option default keywords converted camelcase format add added datasource property unless special translation defined tcpkeepalive true adddatasourceproperty config tcpkeepalive true usessl false custom translation adddatasourceproperty config usessl false false also custom translation support incorrect property casing original java class custom translation property added extending translateproperty multimethod please note time value specified millisecond adapter corresponding datasource class name adapter datasource class name tested hikaricp derby orgapachederbyjdbcclientdatasource firebird orgfirebirdsqlpoolfbsimpledatasource yes hsqldb orghsqldbjdbcjdbcdatasource mariadb orgmariadbjdbcmysqldatasource mysql yes commysqlcjjdbcmysqldatasource sqlserverjtds netsourceforgejtdsjdbcxjtdsdatasource yes sqlserver commicrosoftsqlserverjdbcsqlserverdatasource yes oracle oraclejdbcpooloracledatasource yes pgjdbcng comimpossiblpostgresjdbcpgdatasource postgresql orgpostgresqldspgsimpledatasource yes fdbsql comfoundationdbsqljdbcdsfdbsimpledatasource sybase yes usage postgresql example n hikaricpexample require hikaricpcore refer clojurejavajdbc jdbc def datasourceoptions autocommit true readonly false connectiontimeout validationtimeout idletimeout maxlifetime minimumidle maximumpoolsize poolname dbpool adapter postgresql username username password password databasename database servername localhost portnumber registermbeans false defonce datasource delay makedatasource datasourceoptions defn main args jdbcwithdbconnection conn datasource datasource let row jdbcquery conn select println row closedatasource datasource n hikaricpexample require hikaricpcore refer clojurejavajdbc jdbc def datasourceoptions jdbcurl jdbc bolt host port passwordxxxx debugtrue defonce datasource delay makedatasource datasourceoptions defn main args jdbcwithdbconnection conn datasource datasource let row jdbcquery conn match n foo nname return n john println row closedatasource datasource minimal config example def datasourceoptions adapter url jdbc test oracle example n hikaricpexample require hikaricpcore refer clojurejavajdbc jdbc def datasourceoptions username username password password databasename database servername localhost portnumber drivertype thin option oci kprb see jdbcpooloracledatasourcemakeurl adapter oracle defonce datasource delay makedatasource datasourceoptions defn main args jdbcwithdbconnection conn datasource datasource let row jdbcquery conn select dual println row closedatasource datasource sybase example n hikaricpexample require hikaricpcore refer clojurejavajdbc jdbc def datasourceoptions username username password password databasename database servername localhost portnumber adapter sybase assumes using replace adapter sybase following datasourceclassname datasourceclassname defonce datasource delay makedatasource datasourceoptions defn main args jdbcwithdbconnection conn datasource datasource let row jdbcquery conn select println row closedatasource datasource sqlite example def datasourceoptions jdbcurl jdbc sqlite dbdatabasedb notice makedatasource throw illegalargumentexception invalid argument provided makedatasource dissoc config username databasename illegalargumentexception invalid configuration option username databasename license copyright tomek wałkuski jan stępień distributed eclipse public license either version option later version
119,Lobsters,clojure,Clojure programming,Clojure-flavored WASM's text format,https://github.com/roman01la/clj-wasm,clojureflavored wasm text format,join github today sign file permalink resource reload reload,clojureflavored wasm text format dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time clojureflavored wasm text format turn module defn add b let x x x b defn main add module type returnadd func param param b result func add param param b result local x block result localset x result localget x localget localget x localget else localget b localget export add func add type returnmain func result func main result call add export main func main clojureflavored wasm text format resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
120,Lobsters,clojure,Clojure programming,Using Domino with re-frame,https://domino-clj.github.io/demo,using domino reframe,example domino reframe,example domino reframe require dominocore domino require reagentcore reagent require reframecore rf require googstring string require googstringformat require cljspprint refer pprint initialize domino context using supplied schema rfregeventdb init fn schema dominoinitialize schema trigger effect provided id rfregeventdb triggereffects fn ctx effectids dominotriggereffects ctx effectids dispatch input event rfregeventdb event fn ctx id value dominotransact ctx getin dominomodel ctx id path id value subscribe value given id rfregsub id fn ctx id getin dominodb ctx getin dominomodel ctx id path id return domino db rfregsub db fn ctx dominodb ctx defn parsefloat let value jsparsefloat whennot jsisnan value value defn formatnumber n n stringformat n defn textinput label id div label label input type text value rfsubscribe id id onchange rfdispatch event id target value defn numericinput label id reagentwithlet value reagentatom nil div label label input type text value value onfocus reset value rfsubscribe id id onblur rfdispatch event id parsefloat value onchange reset value target value initialize domino rfdispatchsync init model demographic firstname id firstname lastname id lastname fullname id fullname vitals height id height weight id weight bmi id bmi counter id counter effect id increment output counter handler fn state update state counter fnil inc input fullname handler fn key fullname bobberton bob fullname jsalert hi bob event input firstname lastname output fullname handler fn key firstname lastname fullname firstname lastname str lastname firstname firstname lastname input height weight output bmi handler fn key height weight key bmi bmi height weight weight height height bmi render ui defn homepage div patient demographic textinput first name firstname textinput last name lastname numericinput height height fnil jsparsefloat numericinput weight kg weight fnil jsparsefloat button onclick rfdispatch triggereffects increment increment count p label full name rfsubscribe id fullname p label bmi formatnumber rfsubscribe id bmi p label counter rfsubscribe id counter hr db state pre withoutstr pprint rfsubscribe db reagentrendercomponent homepage jsklipsecontainer
121,Lobsters,clojure,Clojure programming,Conjuring Clojure in Vim,https://blog.djy.io/conjuring-clojure-in-vim/,conjuring clojure vim,fireplace acid iced conjure several month ago sorcery vimplug byop bring prepl socket prepl cookbook boot clojure cli little bit complicated refreshing experience mranderson casting spell clojurians slack try conjure tweet,clojure tooling vim getting interesting past year especially last year first came clojure fireplace standard vim plugin clojure development providing clojure developer great ineditor repl experience think still case majority clojurian vimmers use fireplace recent year number viable alternative begun appear including plugins acid iced conjure talked plugins little bit several month ago mentioned fireplace would recommend beginner six month using conjure heavily watching improve grow stable think recommend conjure way clojure beginner get development environment running quickly start writing clojure code sorcery author conjure oliver caldwell written bunch blog post help make conjure well clojure prepl approachable newcomer since last wrote conjure oliver also made number improvement make outofthebox experience plugin quite nice point neovim user know use plugin manager like vimplug install conjure plugin neovim open clojure source file ie vim tmpfooclj wait second conjure connect prepl server start writing form like evaluating pressing localleader ee see result appear right next form evaluated byop bring prepl great oneoff repl experiment involving clojure standard library builtin repl conjure connects box include project source code library depends complete clojure development setup need able start prepl server within context project indepth discussion various way refer oliver socket prepl cookbook majority clojure project interact use either boot clojure cli build tool boot project custom preplserver task defined profileboot deftask preplserver start prepl server p port port int port start prepl server optional comp socketserver accept clojurecoreserverioprepl port port wait worth noting contributed task boot got merged master branch future release boot preplserver available box builtin task clojure cli setup little bit complicated result start prepl server clojure project directory depsedn running clj apreplserver boot task clojure cli alias spit socketport file current directory containing port number prepl server running configuring conjure automatically connect prepl server correct port super easy configconjureconjureedn conns cwd port slurpedn socketport setup place start prepl server via boot clj start editing clojure source file conjure automatically connect prepl server evaluate code within context project use dependency included buildboot depsedn refreshing experience conjure provides convenient way reload code changed prepl via clojuretoolsnamespacerefresh ordinarily would need include clojuretoolsnamespace dependency project order clever use mranderson conjure automatically injects dependency prepl connection mean refreshing repl always keystroke away tended use clojuretoolsnamespace refreshing much past since feature added conjure found using right fingertip requires setup really handy time changed bunch code remember exactly changed simply reload everything pressing localleader rr even configure conjure project level run hook refresh handy developing something might want restart every time make change like web server casting spell one day conjure channel clojurians slack offthecuff discussion reevaluating form development led intriguing new conjure feature called eval mark feature also affectionately known spellbook feature let evaluate number predefined clojure form demand pressing key using feature lot since introduced love typical workflow might set mark f function call scratch namespace call function anywhere eg editing code another namespace pressing localleader emf sort workflow help lot common scenario testing behavior function writing function call number function defined namespaces sometimes heat development end jumping around bunch different file chasing bug implementing complex feature previously jump back scratch namespace everytime wanted reevaluate form call function testing stay implementation code press localleader rr reload code changed localleader emf reeval form mark f try vimusing clojurist clojureusing vimmer hopefully inspired give conjure try go ahead fun reply tweet comment question etc
122,Lobsters,clojure,Clojure programming,a structural Clojure editor for producing sound using Overtone,https://github.com/illiichi/orenolisp,structural clojure editor producing sound using overtone,俺のlisp http githubcomovertoneovertone http feature sparse keymap depends context http githubcomaboabolispy nontext representation suit domain transformation,俺のlisp structural clojure editor producing sound using overtone http githubcomovertoneovertone wrapper library sound engine supercollider see http feature sparse keymap depends context editor two mode typingmode selectingmode switching selectingmode move around element manipulate expression without modifier key example type jk move nextprevious element respectively idea inspired emacs plugin lispymode http githubcomaboabolispy keymap determined depending context selecting example selecting something containing element parenthesis vector jump first element jump second element e jump last element l jump parent element selecting number z incrementdecrement first digit x incrementdecrement second digit c multiply c multiply typing altn turn current function another function category like sin wave saw wave pulse wave white noise pink noise lowpass filter highpass filter selecting parenthesis first element changed nontext representation suit domain editor us graphic represent parenthesis table show equivalent code text editor due graphical representation parenthesis expanded vertically easier realize correspondence parenthesis brankets represented using squared enclojures distinguish kind parethesis clearly let freq func fn ratio cfreq sinosc freq ratio sinosc cfreq map func reduction splay editor also replaces function graphical representation overtone expression image editor generate sine wave varying frequency sec sinosc line background color indicates much processed expression convert final value automatically completion transformation transformation variable binding supported following instruction mark expression bound move parent expression wrapped let call transformation command type variable name call transformation command inside let expression define another variable writing code transformation structural editor much simpler text editor need parse text code transformation variablebinding defn makeletbinding editor let parenteditor let convconvertsexp editor edmove root secondplaceholderid edgetid parenteditor child right child right editor edaddeditor parent parenteditor edwithmarks fn editor markednodeid editor edjump markednodeid edswap secondplaceholderid edmove left code represents placeholder filled simultaneously transformation code work marking expression bound selecting expression wrapped let user injecting expression let parent selected parenthesis let sinosc envgen envperc impulse ringz tanh swaping second placeholder marked expression let sinosc envgen envperc impulse ringz tanh finally placeholder filled user also transform expression anonymous function wrap map transformation multiple argument available multiple mark call transformation command inside map expression append another argument
123,Lobsters,clojure,Clojure programming,Creative Computation – Jack Rusher,https://www.youtube.com/watch?v=TeXCvh5X5w0,creative computation jack rusher,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature creative computation jack rusher youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature creative computation jack rusher youtube
124,Lobsters,clojure,Clojure programming,"Gene Kim, Love Letter to Clojure, Part 2",https://www.youtube.com/watch?v=gT9Fli40-o8,gene kim love letter clojure part,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature love letter clojure part youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature love letter clojure part youtube
125,Lobsters,clojure,Clojure programming,"WebGL, React, and no JavaScript",https://martin.varela.fi/2019/11/01/webgl-react-and-no-javascript/,webgl react javascript,webdev nonstory subjective web qoe clojurescript reagent reframe cool talk threeagent threejs github reframe bit view doc interactive development shadowcljs,webdev nonstory much enjoy programming also spending arguably much time web never really got web development think part reason associate javascript ca nt force like associated tooling monstrously complex except tiny bit j typically jquery thing couple rail apps done subjective test campaign web qoe year back mostly stayed away web application week ago however needed prototype audio analysis stuff work work webrtc analysis needed done browser finally compelling reason properly use clojurescript learn bit reagent reframe meaning look long story short found reframe approach conceptually nice quite simple pick prototype work started couple simple reagent component suitable case study hour weekend well except bitten web bug browsing around youtube came across cool talk douglas hamilton showcasing threeagent project provides reagentlike api wrapper threejs use approach web page part one super neat since gifted designer chose toy project almost quite clock voilà clock built part face hand little knob middle tick face component based threejs primitive provided threeagent tick built like defn tick propsin radius length posz let prop merge color black opacity transparent true propsin position mapv fn let angle subshandangle posx radius jsmathcos angle posy radius jsmathsin angle box position posx posy posz rotation jsmathpi angle width depth height length material prop range object position hour minute hand handled function defn hand materialprops unitkey length let prop merge color black opacity transparent true materialprops unit reframesubscribe unitkey angle subshandangle unit posx posy subshandoffsets length angle object position posx posy rotation angle box position width height length depth material prop manage state bit way reframe appdb manage state app pretty cool full source github curious reframe bit view reframe brings order app allowing u cleanly separate state centralized appdb view along line code event make thing happen event triggered toy example one event type triggered timer handled pure function eventhandlers usually changing state application sideeffects needed eg either result event input event handler handled separately via effect coeffects respectively sound bit overly complicated keeping event handler pure make easier reason test application order update ui view subscribe bit app state value derived via socalled reactive subscription updated event handler view rerendered needed basically different concern app neatly separated clear way information flow component trigger event affect state application potentially also trigger event state propagated via subscription component update nt looked reframe go doc lot info get started interactive development nice thing clojurescript good tooling live coding besides repl get live hot reloading app maintaining application state used thomas heller shadowcljs handle neatly well rest build process provides easy integration nodejs ecosystem particularly handy developing view simply save file app reloaded automatically change immediately visible nice type workflow working clojure greatly help boost productivity
127,Lobsters,clojure,Clojure programming,State of CIDER Survey (2019),http://metaredux.com/posts/2019/11/02/state-of-cider.html,state cider survey,state cider survey opencollective github sponsor,one hardest thing project author figure whether perspective project aligned perspective project user henry ford supposedly knew better customer needed true say rather special case often guessing people need would find useful issue tool using time time guess right often guess wrong couple notable example immediately come mind always assumed people care much minimum supported emacs version pretty easy upgrade emacs dropping support older emacsen quite aggressively last year however got feedback clojurists together funding round people working corporate environment really suffering upgrade software machine enlightened always assumed people care much changing keybindings command quite lot early day cider know similarly introduced cidernrepl many year ago thought people set manually big deal grossly underestimated complex task many people fun trivia automating setup cider one celebrated change ever point foolishly believed everyone read cider manual starting use true always loved concept survey like state clojure insight bring meant something similar cider quite probably least year one reason another however task kept sitting backlog please allow introduce first ever state cider survey far perfect start really like connect people actually using cider want understand environment working want learn background using cider want learn like hate long story short want align thing working need also want get feeling many people would consider supporting project financially road hoping inspire company individual pitch opencollective github sponsor campaign dreamer subject economics os development something plan discus length dedicated article survey open end next week looking forward response
128,Lobsters,clojure,Clojure programming,Domino: a data flow engine for Clojure/Script,https://domino-clj.github.io/,domino data flow engine clojurescript,see interactive documentation version concept model event effect incoming effect outgoing effect usage require declare schema initialize engine transact external data change interceptor triggering effect possible use case example app inspiration license,see interactive documentationdomino data flow engine help organize interaction data model event domino allows declare business logic using directed acyclic graph event effect whenever external change transacted data model graph determines chain event executed side effect triggered result computationwithout way formalize interaction different part application relationship code become implicit result code difficult maintain mental overhead involved tracking relationship domino make interaction piece business logic explicit centralizeddomino explicitly separate logic make change data model side effectful function business logic function domino explicitly declare interact data model declaring input output domino us declaration build graph related event approach handle cascading business logic box provides data specification relationship code change transacted effectful function called new stateversion prealpha master branch recommend using point even looking really please continue use version time beingconceptsdomino consists three main modelthe model represents path within edn data structure path typically represent field within document path entry tuple first value path segment second value metadata associated path used effect andor event metadata must contain id keyfor example amount id amount path entry amount key within data model referenced event effect amount defined id nest path within following model definition patient firstname id fname eventsthe event define business logic associated change model whenever value transacted associated event computed event defined three key input vector output vector handler functionthe handler accepts three argument context containing current state engine list input value list output value function produce vector output matching declared output key example input amount output total handler fn ctx key amount key total total total amount domino also provides dominocoreevent helper declaring event event also written follows dominocoreevent ctx key amount key total total total amount macro requires key destructuring syntax used input output expands event map input output key inferred one specified using key event declarationit also possible declare async event providing async key eg async true input amount output total handler fn ctx key amount key total callback callback total total amount async event handler take additional argument specifies callback function called effectseffects used effectful operation io happen edge computation effect cascade effect contain following key id optional unique identifier event input optional set input trigger event run changed output optional set outpus event produce running handler handler function handle business logic effectincoming effectseffects declare output used generate initial input engine example effect injects timestamp look follows id timestamp output t handler fn key t t gettime javautildate effect id key specifying unique identifier used trigger event calling dominocoretriggereffects function function accepts collection event id eg triggereffects ctx timestamp handler accepts two argument context containing current state engine list output valuesoutgoing effectseffects declare input run event transacted new context produced effect defined map input handler functionthe handler accepts two argument context containing current state engine list input value example input total handler fn ctx key total total println woah lot require dominocore require dominocore domino declare schemalet take look simple engine accumulates total whenever amount set value added current value total total exceeds point print statement say woah lot def schema model amount id amount total id total event id updatetotal input amount output total handler fn ctx key amount key total total total amount effect input total handler fn ctx key total total jsalert woah lot schema declaration map containing three key model key declares shape data model used dominothe event key contains pure function represent event triggered input change event produce updated value persisted statethe effect key contains function produce side effect based updated stateusing unified model referenced event function allows u easily tell particular piece business logic triggeredthe event engine generates direct acyclic graph dag based input key declared event used compute new state transaction approach remove ambiguity regarding business logic executeddomino explicitly separate code modifies state data code cause side effect encourages keeping business logic pure keeping effect edge initialize enginethe schema declared provides specification internal data model code operates created schema need initialize data flow engine done calling dominoinitialize function function called providing schema along optional initial state map example give schema defined initial value state total set def ctx atom dominoinitialize schema total calling initialize function creates context ctx used initial state engine context contain model event effect event graph db state example use atom order easily update state transact external data changeswe update state data calling dominotransact accepts current ctx along input vector returning updated ctx input vector collection pathvalue pair example set value amount would pas following input vector amount swap ctx dominotransact amount updated ctx contains dominocorechangehistory key simple vector change applied data execution order event triggered dominocorechangehistory ctx see new context contains updated total amount change history show order change appliedthe dominocoredb key context contain updated state reflecting change applied running event dominocoredb ctx finally let update amount value trigger effect require reagentcore reagent defn button button onclick swap ctx dominotransact amount trigger effect reagentrendercomponent button jsklipsecontainer interceptorsdomino provides ability add interceptor pre post event execution interceptor defined schema model multiple interceptor applicable composed togetherin metadata map model key add pre post key define interceptor returning nil value interceptor short circuit execution example could check context authorized running event follows let ctx dominoinitialize model foo id foo pre fn handler fn ctx input output run handler ctx contains authorized key authorized ctx handler ctx input output post fn handler fn result handler update result foo event input foo output foo handler fn ctx key foo output foo inc foo map dominocoredb dominotransact ctx foo dominotransact assoc ctx authorized true foo triggering effectseffects act input data flow engine example might happen button clicked want value increment accomplished call triggereffectstriggereffects take list effect would like trigger call transact current state data input effect example let ctx dominocoreinitialize model total id total effect id incrementtotal output total handler fn currentstate update currentstate total inc total dominocoredb dominocoretriggereffects ctx incrementtotal wrap everything need know start using domino see detailed example using domino reframe herepossible use casesui state managementfsmreactive system spreadsheetlike modelsexample appdemo application found hereinspirationslicensecopyright eclipse public license either version option later version
129,Lobsters,clojure,Clojure programming,Hard CIDER: Understanding the Jack-in Process,http://metaredux.com/posts/2019/11/02/hard-cider-understanding-the-jack-in-process.html,hard cider understanding jackin process,basic autoinjecting dependency jackingin without project customizing jackin command behaviour perproject basis epilogue clojurists together,many mystery life perplexing eternal question exactly happens ciderjackin today time unravel mystery basic heart ciderjackin something super simple executes shell command eg lein repl start nrepl server wait server come life connects cider really simple explain detail probably like cider shell run command like lein repl headless cider wait nrepl server start cider figure parsing output command waiting line like nrepl server started port host localhost nrepl appear cider extract port nrepl preceding message connects running nrepl server basically combination autostarting nrepl server ciderconnect afterwards simple shell command executed ciderjackin leiningen project look like nrepl starting server via usrlocalbinlein updatein dependency conj nrepl updatein plugins conj cidercidernrepl repl headless host localhost time explain another confusing concept namely autoinjection clojure dependency autoinjecting dependency cider core functionality requires nothing nrepl server many advanced feature depend presence additional nrepl middleware eg cidernrepl early version cider cider user add dependency painful errorprone process fortunately today handled automagically using ciderjackin project us lein boot toolsdeps depsedn cider automatically inject necessary nrepl dependency eg cidernrepl piggieback start server injection process extremely simple cider simply pass extra dependency nrepl configuration build tool command run start nrepl server look toolsdeps clojure sdeps deps nrepl mvnversion cidercidernrepl mvnversion nreplcmdline middleware cidernreplcidermiddleware tip want ciderjackin inject dependency automatically set ciderinjectdependenciesatjackin nil note setup dependency eg adding project cider older reason want something like option exists normally ciderjackin would inject cidernrepl ciderjackincljs would add piggieback well injection however mechanism configurable easily add library cider extension eg sayid cljrefactor would use mechanism autoinject dependency cider would also inject recent version nrepl support simple trick override version nrepl bundled build tool gain access newest nrepl feature generally one aspect cider inner working endusers rarely think cider also inject clojure dependency project useful example project default older version clojure supported cider middleware set ciderjackinautoinjectclojure appropriately enable nuance autoinjection eg leiningen inject dependency plugins outside scope article time little quiz guess cider currently support dependency autoinjection gradle project yeah totally right unfortunately way pas extra dependency gradle via commandline interface jackingin without project try run ciderjackin outside project directory cider warn ask confirm whether really want often accident decide proceed cider invoke command configured ciderjackindefault prior cider defaulted lein subsequently switched clj clojure basic startup command another useless tip set ciderallowjackinwithoutproject like disable warning displayed jackingin outside project never run cider outside project might different style probably noticed cider infinitely configurable customizing jackin command behaviour made favourite part exploration cider jackin tweak shell command run many reason want often like include extra profile eg famous fig profile using toolsdeps imagine people would creative tweak well let start simplest possible option idea oneoff customizations use cu mx ciderjackin cu cc cx j j specify exact command ciderjackin would run option useful want specify something like lein depsedn profile alternatively cu cu mx ciderjackin variation previous command command first prompt project want launch ciderjackin pretty handy directory currently option also useful project contains combination projectclj buildboot depsedn want launch repl one keep mind example use ciderjackin behaviour consistent ciderjackin command customize command line cider us ciderjackin modifying following string option ciderleinglobaloptions ciderbootglobaloptions ciderclojurecliglobaloptions cidergradleglobaloptions passed command directly first position eg lein enables offline mode ciderleinparameters ciderbootparameters ciderclojurecliparameters cidergradleparameters usually task name parameter eg dev launching boot dev task instead standard repl wait forget variable configured perproject basis probably figured using toolsdeps window bit painful fortunately cider help use ciderjackin toolsdeps window set ciderclojureclicommand powershell happens default window clojure executable found using powershell encode clojure launch command passing powershell avoids shellescaping issue might wondering cider us clojure instead clj right pretty simple actually clj simply wrap clojure terminalfriendly functionality rlwrap explodes actual terminal another great mystery resolved epilogue phew lot information hope got much better idea jackin process working help use cider effectively road lot said jackin feel covered everything essential also bit lazy feel like writing anymore today episode brought clojurists together awesome keep hacking
130,Lobsters,clojure,Clojure programming,We need to talk about JSON,https://juxt.pro/blog/posts/we-need-to-talk-about-json.html,need talk json,,let start think json list string map key value map list mapsoflists listsofmaps listsoflists mapsofmaps fact clojure perspective thing better clojure hand adept language processing nearubiquitous format course little bit biased juxt back everything xml everyone wrote java c remember working large project spent week literally week working serialisation deserialisation data xml java back io critical part program getting data program hard clojure json data format ideal processing language csv sql sgml dsssl xml xslt json cljs clojure almost behind scene grand lisp conspiracy get everyone programming lisp whether realise disguising ornamental punctuation json infected whole world lisp
131,Lobsters,clojure,Clojure programming,Deep Learning for Programmers Book New Release 0.11.0 + Adaptive Learning Rates,https://aiprobook.com/deep-learning-for-programmers?release=0.11.0&src=lobsters,deep learning programmer book new release adaptive learning rate,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c table content part getting started part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter deep learning learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c content table content part getting started chapter determined part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book
132,Lobsters,clojure,Clojure programming,Myers' diff algorithm in Clojure,https://samrat.me/posts/2019-10-21-myers-diff-clojure/,myers diff algorithm clojure,project edit graph implementation backtracking producing diff send email twitter article blog follow around net openring,programmer probably fairly comfortable understanding interpreting diff patch kind git version control system use post walk clojure implementation myers diff algorithm algorithm used git implementing git following along james coglan book building git check project project rust thought might interesting exercise implement algorithm clojure edit graph say want turn file line b c c e myers diff algorithm find shortest edit script algorithm work edit graph shown rightward traversal one vertex another indicates deletion line old file downward traversal indicates insertion line new file also notice example abc ace two line c myers algorithm leverage produce shortest edit script edit graph see line equal drawn dotted line indicate diagonal traversal require neither insertion deletion myers algorithm maximizes number diagonal traversal edit script produce let walk output myers algorithm produce example first character file take first diagonal delete b third character old file c second new file keep diagonal traversal insert e series edits old file produced desired new file stop finally dive algorithm one addition edit graph draw downwarddiagonals across graph also called kline kline equation k x implementation maximum number operation insertion deletion edit script len old len new case would deleting every line old file inserting every line new file iterate maximum number operation see farthest point along kline go reduce see accumulator tuple v trace v map k farthest x found far along kline discard value since easily compute x k trace vector v seen far see function ultimately return trace used reconstruct path took along graph defn shortestedit b let max count count b trace reduce fn v trace let foundend farthestxs getfarthestxsford v b newv newtrace merge v farthestxs conj trace v foundend reduced newv newtrace newv newtrace range inc max trace get line k either go go right line use movedown function decide whether move right defn movedown v k k k get v dec k get v inc k kd possible go right go kd possible go go right otherwise go v v expression predicate saying along line want go meet k line else go right line next getfarthestxyalongk figure farthest x reach round along k line given v map built far b contain line want diff simply us movedown described possible walk diagonal defn getfarthestxyalongk v b k let x movedown v k get v inc k inc get v dec k x k walk diagonal x loop x x x count count b get x get b recur inc x inc x x getfarthestxsford iterates inclusive step time store farthest x k returning early reach bottomright corner edit graph defn getfarthestxsford v b let getfarthestxyalongk partial getfarthestxyalongk v b reduce fn foundend k x k let x getfarthestxyalongk k x count count b reduced true k x foundend assoc k x k x false range inc far built function give u trace myerscore shortestedit clojurestringsplit abcabba clojurestringsplit cbabac myerscore let look turn diff backtracking producing diff next function take input trace output edit sequence element editsequence form prevx prevy x time start bottomright node edit graph iteration figure previous x also walking back diagonal required defn trace editseq n trace let editseq reduce fn x editseq v let k x prevk movedown v k inc k dec k prevx get v prevk prevy prevx prevk x editseq loop x x editseq editseq x prevx prevy recur dec x dec conj editseq dec x dec x x editseq editseq po conj editseq prevx prevy x editseq prevx prevy editseq n reverse map vector range trace reverse editseq edit sequence printing diff pretty straightforward defn diff b prevx prevy x trace editseq count count b shortestedit b let aline get prevx bline get b prevy cond x prevx op in content bline prevy op del content aline else op eql content aline defn printdiff diff doseq key op content diff let dout case op in format content del format content eql format content println dout comment feedback please send email reach twitter article blog follow around net generated openring
133,Lobsters,clojure,Clojure programming,Taking Reactivity to the 3rd Dimension,https://www.youtube.com/watch?v=myigRnZHhTw,taking reactivity dimension,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature taking reactivity dimension doug hamilton youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature taking reactivity dimension doug hamilton youtube
134,Lobsters,clojure,Clojure programming,Numerical Linear Algebra for Programmers Book - Release 0.4.0,https://aiprobook.com/numerical-linear-algebra-for-programmers?release=0.40&source=lobsters,numerical linear algebra programmer book release,numerical linear algebra programmer two friend adorable book scroll read pitch download sample chapter open source library book programmer interactive dynamic direct link theory implementation incredible performance intel amd cpu mkl nvidia gpus cuda cublas amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter middleman revenue go towards open source work ai book walk walk complete executable code inside stepbystep instruction full path theory implementation superfast implementation learn linear algebra code example explore cpu run gpu integrate intel mkl nvidia cublas performance library learn nut bolt understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel mkl gpus learn cuda cublas learn opencl hardware nvidia amd intel touch c download sample chapter draft read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor table content part getting started soon hello world soon vector matrix linear algebra api soon polymorphic acceleration soon part linear algebra refresher available eigenvalue eigenvectors available matrix transformation available linear transformation available part high performance matrix computation available using matrix efficiently available linear system factorization available singular value decomposition svd available orthogonalization least square available part gpu acceleration gpu computing crash course cuda cublas nvidia gpus opencl clblast amd gpus generating random matrix available mean variance correlation available principal component analysis pca available appendix setting environment jvm read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor get early help make book awesome deep learning programmer,numerical linear algebra programmer two friend adorable book scroll read pitch download sample chapter open source library book programmer interactive dynamic direct link theory implementation incredible performance intel amd cpu mkl nvidia gpus cuda cublas amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter middleman middleman revenue go towards open source work programmer ai book walk walk complete executable code inside stepbystep instruction full path theory implementation actual code superfast implementation book either mathonly monograph academic written nontechnical end user linear algebra learn linear algebra code example explore cpu run gpu integrate intel mkl nvidia cublas performance library learn nut bolt understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel mkl gpus learn cuda cublas learn opencl hardware nvidia amd intel touch c download download sample chapter draft buy read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor content table content part getting started soon hello world soon vector matrix linear algebra api soon polymorphic acceleration soon part linear algebra refresher available eigenvalue eigenvectors available matrix transformation available linear transformation available part high performance matrix computation available using matrix efficiently available linear system factorization available singular value decomposition svd available orthogonalization least square available part gpu acceleration gpu computing crash course cuda cublas nvidia gpus opencl clblast amd gpus generating random matrix available mean variance correlation available principal component analysis pca available appendix setting environment jvm subscribe read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor get early help make book awesome book deep learning programmer
136,Lobsters,clojure,Clojure programming,Love Letter To Clojure,https://itrevolution.com/love-letter-to-clojure-part-1/,love letter clojure,privacy policy,use cooky site improve performance browsing site agreeing information see privacy policy
137,Lobsters,clojure,Clojure programming,Deep Learning for Programmers book release 0.10.0 + Momentum and Nesterov Momentum,https://aiprobook.com/deep-learning-for-programmers?release=0.10.0&src=lobsters,deep learning programmer book release momentum nesterov momentum,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c table content part getting started part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter deep learning learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c content table content part getting started chapter determined part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book
138,Lobsters,clojure,Clojure programming,CIDER 0.23 (“Lima”),http://metaredux.com/posts/2019/10/08/cider-0-23-lima.html,cider lima,http ciderreadthedocsio http docscidermx cidernrepl section,cider released month ago happy announce release cider lima unlike cider lima pretty small release lot pressure ship time clojuresouth time complete small ticket originally planned go new release basically address plus bug reported cider know really good small release quite simple need write long blog post much term new feature highlight probably notable change cider infers automatically figwheel build present available option autocompletion need select build another small change configure position evaluation result source buffer always displayed end current line display right expression evaluated magic bit emacs configuration make happen setq ciderresultoverlayposition atpoint also added possibility disable new enhanced clojurescript code completion user reported causing issue hard time reproducing identifying want go back basic clojurescript completion earlier version cider use following setq ciderenhancedcljscompletionp nil time slightly bigger update translating file path small feature might useful people developing using docker instance suppose app running docker container source directory mounted navigation path get nrepl relative source docker container rather correct path host machine wish translate file path running instance may use ciderpathtranslations defcustom add translation mapping easily setting following typically dirlocalsel perproject basis nil ciderpathtranslations root usersfoo src usersfooprojects entry interpreted directory entry trailing slash optional navigation definition attempt translate location exist navigate rather report file exist example directory mounted source src translation would map location back user computer navigation definition would work interesting update documentation front well replaced page old documentation site http ciderreadthedocsio redirects http docscidermx mark end run legacy documentation portal hopefully going affect positively google page rank new one also started work cidernrepl section documentation portal still super basic also best documentation cidernrepl ever also fixed bunch bug orchard cidernrepl shipped new version piggieback blow absence clojurescript cool stuff lazy write detail think safe say cider nice step path towards better stability everyone update right away find complete list change cider quite pleased release try couple small release end year usual like thank everyone contributed developed lima awesome people clojurists together supporting project awesome today next release cheer
139,Lobsters,clojure,Clojure programming,clojit-cvm Clojure VM written in C with advanced GC,https://github.com/clojit/clojit-cvm,clojitcvm clojure vm written c advanced gc,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
141,Lobsters,clojure,Clojure programming,tada: Clojure declarative syntax for web app domain model,https://github.com/rafd/tada,tada clojure declarative syntax web app domain model,tada status tadaevents example event manipulation event ringhandlers,tada tada clojure script library help compose webapplications declarative datadriven part tada consists two thing declarative datadriven syntax describing necessary piece make application domain model includes entity event constraint dataviews permission collection communitycurated conversion utility help turn declerative description actual running system status library prealpha stage meant mostly something discus around even official release yet hack clone leininstall use checkout api syntax likely change lot stabilises cut alpha release far event somewhat implemented tadaevents example n bankcore require tadaeventscore tada spectoolsdataspec d clojurespecalpha say modeling bank already spec using dsspec sdef bankcurrency cad usd sdef bankuser dsspec name bankuser spec bankuserid uuid bankusername string sdef bankaccount dsspec name bankaccount spec bankaccountid uuid bankaccountbalance integer bankaccountcurrency bankcurrency bankaccountowners bankuserid database function defn getaccount accountid defn transfer fromaccountid toaccountid amount defn deposit accountid amount defn userexists userid defn accountexists accountid defn userownsaccount userid accountid defn getaccount accountid define event app def event id deposit params userid bankuserid accountid bankaccountid amount integer currency bankcurrency condition fn key userid accountid amount currency userexists userid forbidden user id exist accountexists accountid notfound account id exist userownsaccount userid accountid forbidden user account currency currency getaccount accountid incorrect deposit currency must match account effect fn key accountid amount deposit accountid amount return fn key accountid getaccount accountid id transfer params userid bankuserid fromaccountid bankaccountid toaccountid bankaccountid amount integer po condition fn key userid fromaccountid toaccountid amount userexists userid forbidden user id exist accountexists toaccountid notfound account id exist userownsaccount userid fromaccountid forbidden user account accountexists fromaccountid incorrect account id exist balance getaccount fromaccountid amount conflict insufficient fund account currency getaccount fromaccountid currency getaccount toaccountid conflict currency account must match effect fn key fromaccountid toaccountid amount transfer fromaccountid toaccountid amount register event tadaregister event dispatch call everything correct run effect tadado deposit userid uuid accountid uuid amount currency cad called invalid argument error raised tadado deposit userid uuid accountid uuid currency cad error missing amount condition nt met also raise error tadado transfer userid uuid fromaccountid uuid toaccountid uuid amount error insufficient fund account event manipulation given set event tada number utility generate useful function artefact pas system event ringhandlers tadaeventsring used generate ringhandlers event handler convert anomaly event appropriate status code using reitit route event require tadaeventscore require tadaeventsring require reititring def app reititringringhandler reititringrouter api transfer post handler tadaeventsringroute addevent deposit post handler tadaeventsringroute deposit plus middleware insert authenticated userid params
142,Lobsters,clojure,Clojure programming,Clojure guide for new Clojurists,https://github.com/anan44/it-starts-with-clojure,clojure guide new clojurists,start clojure practical guide clojure material,start clojure practical guide clojure guide something tiny book course get started clojure actual reading material material grouped section material markdown easily read directly github fork repo computer make note reading come across section feel issue could somehow better feel free make pull request issue goal add material project exercise project used perfect getting started point tobeclojurists get started guide click link
143,Lobsters,clojure,Clojure programming,Deep Learning for Programmers book new release 0.9.0,https://aiprobook.com/deep-learning-for-programmers?release=0.9.0&src=lobsters,deep learning programmer book new release,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c table content part getting started part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter deep learning learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c content table content part getting started chapter determined part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book
144,Lobsters,clojure,Clojure programming,A Common Gotcha with Asynchronous GPU Computing,https://dragan.rocks/articles/19/Common-Gotcha-Asynchronous-GPU-CUDA-Computing-Clojure,common gotcha asynchronous gpu computing,common gotcha asynchronous gpu computing adopt pet function patreon page dedicated discussion server donate new book available subscription neanderthal,common gotcha asynchronous gpu computing adopt pet function support work patreon page access dedicated discussion server ca nt afford donate ask free invite september please share new book available subscription part computing library neanderthal abstract complexity gpu computing highlevel linear algebra operation mm matrix multiply vectormatrix norm sum worry compiling kernel loading module sending operation right stream right context handling stream execution error bunch detail code write test cpu executed gpu however one important thing keep mind gpu computing routine asynchronous default time see benefit behavior common situation surprise even experienced developer yes human fallible suppose code us costly matrix multiplication operation withrelease cpua entry fge cpub entry fge cpuc entry fge time dotimes mm cpua cpub cpuc elapsed time msec called mm operation time loop measured execution time bit millisecond total microsecond per operation decided although quite fast fast enough customer requirement opportunity use powerful gpu accelerator read spec achieve quite performance boost intel cpu since adjust code run gpu much quickly write test see whether platform switch worth effort following code port previous example nvidia gpu bit different since gpu context created managed possible abstract difference away wanted keep example straightforward obvious withdefault withdefaultengine withrelease gpua entry cuge gpub entry cuge gpuc entry cuge sunchronize make sure measurement initiated gpu stream ready synchronize time dotimes mm gpua gpub gpuc elapsed time msec size computation complexity got modest speedup problem expected boost ask around see communication gpu driver carry fixed overhead gpu pay expensive operation ok let give monster matrix withdefault withdefaultengine withrelease gpua entry cuge gpub entry cuge gpuc entry cuge synchronize time dotimes mm gpua gpub gpuc elapsed time msec whow increased matrix size lot gpu nt even sweat finished almost time happens cpu large matrix slow withrelease cpua entry fge cpub entry fge cpuc entry fge time mm cpua cpub cpuc elapsed time msec excitedly tell everyone decide transfer computation gpu since took day complete cpu complete second according calculation skeptical colleague sure reminded many gpu operation asynchronous mm operation signature gpu cpu cpu synchronous gpu asynchronous simply put gpu calling mm mean acknowledge received request matrix multiplication put computation queue completed matrix multiplication requested mean cpu measured last example measured fast gpu receive request mm operation surprisingly size argument make much difference measure fast gpu complete operation must synchronize queue withdefault withdefaultengine withrelease gpua entry cuge gpub entry cuge gpuc entry cuge synchronize time dotimes mm gpua gpub gpuc synchronize elapsed time msec ouch instead microsecond invocation get second milli second per operation micro second disappointed almost time faster second measured cpu large matrix usually make sense use gpu medium sized depends work smallish data never pay use gpu never well depends group small chunk larger unit computed batch scope article anyway suppose decided pay add gpu engine project code similar enough difference call synchronize bother u since cudaspecific fortunately time need synchronize stream even explicitly operation available cpu gpu implicitly synchronize stream example summary matrix vector operation sum dot etc compute scalar result implicitly synchronize stream operation transfer data cpu gpu synchronous default withdefault withdefaultengine withrelease gpua entry cuge gpub entry cuge gpuc entry cuge synchronize time dotimes mm gpua gpub gpuc asum gpuc elapsed time msec
145,Lobsters,clojure,Clojure programming,Zeal: REPL meets Clipboard Manager,https://www.notion.so/ZEAL-d2c72fa9c7f2497c9657134573e5317f,zeal repl meet clipboard manager,,
146,Lobsters,clojure,Clojure programming,Numerical Linear Algebra for Programmers | New Book Release 0.3.0,https://aiprobook.com/numerical-linear-algebra-for-programmers?release=0.3.0&src=lobsters,numerical linear algebra programmer new book release,numerical linear algebra programmer two friend adorable book scroll read pitch download sample chapter open source library book programmer interactive dynamic direct link theory implementation incredible performance intel amd cpu mkl nvidia gpus cuda cublas amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter middleman revenue go towards open source work ai book walk walk complete executable code inside stepbystep instruction full path theory implementation superfast implementation learn linear algebra code example explore cpu run gpu integrate intel mkl nvidia cublas performance library learn nut bolt understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel mkl gpus learn cuda cublas learn opencl hardware nvidia amd intel touch c download sample chapter draft read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor table content part getting started soon hello world soon vector matrix linear algebra api soon polymorphic acceleration soon part linear algebra refresher available eigenvalue eigenvectors available matrix transformation available linear transformation available part high performance matrix computation available using matrix efficiently available linear system factorization available singular value decomposition svd available orthogonalization least square available part gpu acceleration gpu computing crash course cuda cublas nvidia gpus opencl clblast amd gpus generating random matrix available mean variance correlation available principal component analysis pca available appendix setting environment jvm read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor get early help make book awesome deep learning programmer,numerical linear algebra programmer two friend adorable book scroll read pitch download sample chapter open source library book programmer interactive dynamic direct link theory implementation incredible performance intel amd cpu mkl nvidia gpus cuda cublas amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter middleman middleman revenue go towards open source work programmer ai book walk walk complete executable code inside stepbystep instruction full path theory implementation actual code superfast implementation book either mathonly monograph academic written nontechnical end user linear algebra learn linear algebra code example explore cpu run gpu integrate intel mkl nvidia cublas performance library learn nut bolt understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel mkl gpus learn cuda cublas learn opencl hardware nvidia amd intel touch c download download sample chapter draft buy read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor content table content part getting started soon hello world soon vector matrix linear algebra api soon polymorphic acceleration soon part linear algebra refresher available eigenvalue eigenvectors available matrix transformation available linear transformation available part high performance matrix computation available using matrix efficiently available linear system factorization available singular value decomposition svd available orthogonalization least square available part gpu acceleration gpu computing crash course cuda cublas nvidia gpus opencl clblast amd gpus generating random matrix available mean variance correlation available principal component analysis pca available appendix setting environment jvm subscribe read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor get early help make book awesome book deep learning programmer
147,Lobsters,clojure,Clojure programming,CIDER 0.22 (“São Paulo”) Released,http://metaredux.com/posts/2019/09/12/cider-0-22.html,cider são paulo released,clojuresouth highlight clojuredocs small improvement pr release note new documentation site http docscidermx article ticket cider next current round clojurists together epilogue support work,announced release cider são paulo september clojuresouth took get writing proper announcement time change guess cider ship cool new feature primary focus release bugfixes small improvement majority improvement happened hood underlying library like cidernrepl orchard let take closer look highlight come new feature probably highlight release improved clojurescript code completion new find reference functionality considered experimental point certainly bit rough around edge read enhanced clojurescript code completion find reference feature new code completion work box invoke find reference using cc c c r bonus check also function used definition cc c c another important addition cider clojuredocs support replaces completely grimoire support existed previous version cider still wondering whether completely fuse regular doc extra documentation coming clojuredocs opted keep mostly separate road may change clojuredocs info might end standard documentation buffer main entry point clojuredocs functionality cc cd cc meant used symbol point small improvement probably favourite small improvement easily edit jackin command using prefix argument eg typing cu cc cx j j quite useful like add fly leiningen profile something nature spinning nrepl server people using cider without cidernrepl happy hear feature working without namely thing like definition doc lookup lot done area certain whether push hard direction type functionality simplified lot made possible inject code nrepl server straight client see pr detail hood lot improvement orchard latest version improved support java initial support clojurescript check release note detail new documentation site feel spent way time working new http docscidermx cider already wrote article back encourage everyone check sadly decision go mx domain backfired turned geotargeting domain changed might revisit domain name road really disappointing new site much better old one yet never see search result see ticket detail bright side might finally end learning seo usual encouraging check doc provide feedback structure content feel extra adventurous even help improvement next step site would add documentation cidernrepl orchard hope get end month cider next plan next cider release continue small improvement bit cleanupsimplification think cider pretty good shape overall even considering releasing cider end year already shared short term plan future part taking part current round clojurists together thing excited day collaborating tool author improving foundation clojure development tool aka cider orchard great see many tool already relying tool author interested adopting toolchain contribute really cool idea come collaboration already go detail right think however safe say cider orchard moving right direction best yet come epilogue release work long time extremely happy finally managed ship clearly underestimated complex internal change cidernrepl orchard would turn valuable lesson also underestimated many thing go wrong one release eg uploading artifact clojars got broken right around time release one elisp deps published melpa stable conference talk prepare well jetlagged hell internet room quite flaky fun time time thank everyone made release possible either working supporting development financially love truly appreciate help support made together way são paulo without special thanks clojurist together organization truly embodies awesome spirit clojure community use opportunity mention recently got accepted github sponsor beta welcome support work really cool thing github sponsor vouching match donation first year opportunity double impact money thanks everyone enjoy cider ir responsibly looking forward hearing feedback
148,Lobsters,clojure,Clojure programming,The Beauty of Functional Languages in Deep Learning ,https://www.welcometothejungle.co/fr/articles/btc-deep-learning-clojure-haskell,beauty functional language deep learning,tensorflow pytorch kera performance safety two issue drive company choose functional programming language clojure haskell instead difficulty deep learning implementation efficient programming language safe concurrency parallelism capability functional programming suitable deep learning functional programming language provide solution using functional programming language programmer able describe mathematical operation language closer operation deep learning function applied data data change functional programming allows concurrency parallelism cost clojure clojure power concurrent programming clojure work source parallelism clojure cheap using partition conjunction map achieve parallelism le costly source chaining function clojure mean clarity make chaining function deep learning possible source identity state clojure provide safety action performed set data safely without regard contention library limitation cortex machine learning library haskell type safety haskell provides safety flexibility help prevent illegal operation provide better memory safety lead fewer logic error infinite data structure defined simple explicit code haskell provides clear implementation describe algorithm explicit mathematical construct source multicore parallelism haskell provides performance implementing multicore parallelism easy library limitation hlearn library tensorflow binding parallel concurrent complete list organization using conclusion behind code get published twitter victoria roussel,deep learning subset machine learning method based artificial neural network inspired information processing distributed communication node biological system brain deep learning level learns transform input data slightly abstract composite representation instance facialrecognition system pixel might one layer system edge might another eye might another face might another complexity deep learning method make using existing package popular programming community tensorflow pytorch python popular kera package r however production deep learning system performance safety two issue drive company choose functional programming language clojure haskell insteadthe difficulty deep learning implementationsin putting deep learning system production neural network might contain million parameter data quickly explode train parameter explosion data requires performance achieved efficient programming language safe concurrency parallelism capability due complexity neural network data passed layer layer simplicity consistency way programming language handle data important safety case mean ability preserve state original data consistent manner simplicity mean able read maintain code base easily maximizing performance functional programming suitable deep learningin attempt resolve difficulty occur implementing deep learning programmer finding functional programming language provide solution computer science functional programming programming paradigm treat computation evaluation mathematical function avoids changing state mutable data programming pattern closer mathematical thinking deep learning model essentially mathematical model instance artificial neural network comprise connected node performs simple mathematical operation using functional programming language programmer able describe mathematical operation language closer operation explicit way program written make reading maintaining code base much easier time compositional nature deep learning algorithm mean layer neural work layer function tend chain together perform task easily implemented using functional chaining functional programming language furthermore deep learning function applied data data change new value might output sequentially line data stay consistent immutability feature functional programming language allow programmer create new dataset time new value generated without altering original immutable dataset make easier maintain consistency data throughout neural network finally large number parameter training data involved implementation deep learning mean parallelism concurrency key creating productionlevel deep learning system parallelism mean running thread different cpu speed learning process concurrency mean ability manage thread avoid conflict functional programming allows concurrency parallelism cost mean nature functional programming pure function stateless always produce output particular input lead ability isolate function execute whenever want make concurrency parallelism much easier manage deal issue deadlock race condition different thread accessing different cpu able run independently contention clojurewith functional programming gaining popularity deep learning robust package available deep learning clojure favored company walmart facebook highlevel dynamic functional programming language based lisp programming language compiler make possible run java net runtime environment power concurrent programming clojureclojure replace java thread system rather work since core data structure immutable shared readily thread time state change program possible clojure provides mechanism ensure state stay consistent conflict occur transaction trying modify reference one retire need explicit locking import javautilconcurrent executor defn teststm nitems nthreads niter let ref map ref repeat nitems pool executorsnewfixedthreadpool nthreads task map fn fn dotimes n niter dosync doseq r ref alter r range nthreads doseq future invokeall pool task get future shutdown pool map deref ref teststm sourceparallelism clojure cheapin deep learning model train large amount data parallelism implies running multiple thread different cpu parallelism cheap mean significant performance improvement using partition conjunction map achieve parallelism le costly defn let n width height work partition n range n result pmap fn x doall map fn p let row rem p width col int p height getcolor processpixel row double width col double height x work doall apply concat result sourcechaining function clojure mean clarityin clojure many function data type function also passed argument function make chaining function deep learning possible implementation closer actual mathematical model clojure code simple read maintain pipe arg function x pipe function chaining x sourceidentity state clojure provide safetyin clojure model identity one state point time state true value never change identity appears change associated different state new value function old inside layer neural network state original data always preserved set data new value output function operate independently mean action performed set data safely without regard contention refer back original state data time therefore consistency case mean safety library limitationshistorically cortex machine learning library contains need implement machine learning algorithm clojure recent rising popularity opensource mxnet framework deep learning easier implement deep learning using mxnetclojure api although different apis machinelearning library available clojure still steep learning curve becoming fluent error message cryptic company need willing invest upfront use scale machine learning system example productionready system written clojure language gain popularity coming year number size library accompanying usage clojure grows consistently haskellhaskell functional language statically typed type inference lazy evaluation based semantics miranda programming language considered expressive faster safer implementing machine learningtype safety haskell provides safety flexibilitytype safety defines constraint type value variable hold help prevent illegal operation provide better memory safety lead fewer logic error lazy evaluation mean haskell delay evaluation expression value needed also avoids repeated evaluation save running time time lazy evaluation allows infinite data structure defined give programmer unlimited mathematical possibility simple explicit code haskell provides clear implementationsone biggest benefit haskell describe algorithm explicit mathematical construct represent model line code also read code way read math equation powerful complex algorithm deep learning algorithm machine learning example implementation single layer feedforward neural network show readable code beimport numericlinearalgebrastaticbackprop logistic floating logistic x exp x feedforwardlog knownnat knownnat model l r r r feedforwardlog w b x logistic w x b sourcemulticore parallelism haskell provides performancein deep learning typical neural network contain million parameter define model also large amount data required learn parameter computationally timeconsuming single machine using multiple core share memory process parallel powerful come implementing deep learning haskell however implementing multicore parallelism easy library limitationshaskell hlearn library contains machine learning algorithm implementation tensorflow binding haskell used deep learning parallel concurrent meanwhile used parallelism concurrency although machine learning library developed haskell groundup implementation still need done productionready haskell implementation public library available specific deep learning machine learning task limited haskell usage ai also limited company aetion technology credit suisse global modeling analytics group using haskell complete list organization using conclusiondeep learning model complex mathematical model require specific layering function functional programming language clojure haskell often represent complexity cleaner code closer mathematics model lead time saving efficiency easy management code base specific property functional programming allow implementation language safer language development ai technology progress evaluating language need largescale systemdevelopment project ai become prevalentthis article part behind code medium developer developer discover article video visiting behind code want contribute get published follow u twitter stay tuned illustration victoria roussel
149,Lobsters,clojure,Clojure programming,Paravim - A parasitic editor for Clojure,https://sekao.net/paravim/,paravim parasitic editor clojure,paravim,paravim choose version
150,Lobsters,clojure,Clojure programming,"Kafka Streams, the Clojure way",https://clojure-conundrums.co.uk/posts/kafka-streams-the-clojure-way/,kafka stream clojure way,introduction kafka stream kafka stream doc streamsbuilder topology kafkastreams jackdaw walkthrough repo simple example landoopfastdatadev docker walkthrough repo fastdatadev ui introducing transducer topologytestdriver transducer introductory blog post complicated example introducing willa willa largetransactionmade topic clojurespec summary kafka designing event driven system kafka stream udemy course ksml noah,blog post walk create kafka stream application idiomatic clojure style assume knowledge kafka kafka stream never heard post may bit overwhelming check confluent introduction kafka stream also kafka stream doc kafka thought persistent highly scalable distributed message queue kafka store message topic produced consumed kafka stream abstraction top kafka treat topic reactive stream data onto apply transformation map filter etc also give way perform stateful aggregation way application safely restarted java api kafka stream powerful drawback give mutable streamsbuilder object call method like map filter use builder object build topology logical representation application graph processing node use topology initialise kafkastreams object executes topology logic develop application style using jackdaw library clojure library kafka evolve idiomatic datadriven style code going show walkthrough repo clone like follow along simple example let imagine work fidgetnomore incorporated world largest purveyor fidget spinner whatever kid buying nowadays website currently record every purchase db department finding difficult write application react purchase made sale team would like apps somehow notified large purchase made send user personalised thank email sound like perfect job kafka every purchase produce message purchasemade kafka topic create kafka stream app read topic filter large purchase remove extraneous field message sale team need user id amount writes largetransactionmade topic start need start kafka broker server running kafka easiest way spin landoopfastdatadev docker container running following command need docker installed linux docker run rm nethost landoopfastdatadev mac docker run rm p p p p p e advhostlocalhost landoopfastdatadev latest start creating purchasemade largetransactionmade topic clone walkthrough repo already start repl navigate kafkastreamstheclojurewaycore namespace run command create purchasemade largetransactionmade topic jacreatetopics adminclient purchasemadetopic largetransactionmadetopic way command going run comment block bottom kafkastreamstheclojurewaycore namespace need produce dummy message onto purchasemade topic message going look like id userid amount quantity already got makepurchase function defined u kafkastreamstheclojurewaycore namespace run command make dummy purchase makepurchase makepurchase makepurchase makepurchase interested makepurchase work check code walkthrough repo us kafka kafka stream api gloss see fastdatadev ui message appear topic topic dummy data start writing kafka stream topology already defined walkthrough repo code defn simpletopology builder read purchasemade topic kstream jskstream builder purchasemadetopic filter kstream purchase greater jsfilter fn purchase amount purchase remove amount userid field message note function passed map take return tuple key value jsmap fn key purchase key selectkeys purchase amount userid write kstream largetransactionmade topic jsto largetransactionmadetopic defn start start simple topology let builder jsstreamsbuilder simpletopology builder doto jskafkastreams builder kafkaconfig jsstart defn stop kafkastreamsapp stop given kafkastreams application jsclose kafkastreamsapp run def app start repl start topology shortly see message appear largetransactionmade topic magic try producing message purchasemade topic topology pick process immediately ready move run stop app stop topology introducing transducer made good start problem code moment one code easy test could directly test logic topology tied kafka stream api use kafka topologytestdriver run topology memory quite cumbersome would much easier could express topology logic pure function test secondly code composable separate topology easy way merging together thirdly code tied specific context kafka stream want reuse logic transforming example coreasync channel forced rewrite alleviate problem going use transducer transducer powerful composable way build algorithmic transformation reuse many context basically allow encapsulate logic transforming stream data without specific knowledge stream stream could seq coreasync channel kafka topic familiar already may want check introductory blog post let write transducer capture logic topology def purchasemadetransducer comp note step take key value tuple filter fn purchase amount purchase map fn key purchase key selectkeys purchase amount userid easily test transducer repl like purchasemadetransducer purchaseid userid amount quantity purchaseid userid amount quantity successfully isolated logic topology pure function enables u easily test topology logic update topology use transducer going use transducestream function need know exactly work applies transducer kstream defn buildtopologywithtransducer builder jskstream builder purchasemadetopic transducestream purchasemadetransducer jsto largetransactionmadetopic great seems made code testable flexible composable complicated example unfortunately bos come another requirement always company launched new way buying fidget spinner humble spinner customer pay whatever think fair bundle ten fidget spinner completely separate site luckily team charge building created kafka topic onto publish purchase humble bundle humbledonationmade sale team would like send congratulatory email customer pay large amount bundle way regular purchase therefore tasked consuming topic application unfortunately team building humbledonationmade topic come message schema slightly different purchasemade humbledonationmade message look like userid donationamountcents donationdate need create kstream humbledonationmade topic apply transducer use jackdaw merge function merge kstream previous topology let start transducer humbledonationmade topic def humbledonationmadetransducer comp step take key value tuple filter fn donation donationamountcents donation map fn key donation key userid userid donation amount int donationamountcents donation topology code look like defn morecomplicatedtopology builder jsmerge jskstream builder purchasemadetopic transducestream purchasemadetransducer jskstream builder humbledonationmadetopic transducestream humbledonationmadetransducer work reintroduced problem started using transducer code le testable le composable le portable clojure programmer know exactly confronted problem express everything data library could help u introducing willa willa library allows express topology data function rather using mutable streamsbuilder api full disclosure author willa looking unbiased critique stop reading let see would affect code start defining topic kstreams willa called entity first need construct map entity id entity config like def entity define topic entity first value need add wentitytype existing topic configs topicpurchasemade assoc purchasemadetopic wentitytype topic topichumbledonationmade assoc humbledonationmadetopic wentitytype topic topiclargetransactionmade assoc largetransactionmadetopic wentitytype topic define kstreams define transducer apply kstream wxform key streamlargepurchasemade wentitytype kstream wxform purchasemadetransducer streamlargedonationmade wentitytype kstream wxform humbledonationmadetransducer far good need define topic stream relate data flow topology willa model topology graph dag entity express vector tuples tuple element format entityidfrom entityidto represents directed edge topology graph willa call workflow workflow look like def workflow topicpurchasemade streamlargepurchasemade topichumbledonationmade streamlargedonationmade multiple edge pointing node willa merge input default streamlargepurchasemade topiclargetransactionmade streamlargedonationmade topiclargetransactionmade putting together def topology workflow workflow entity entity need completely specify topology one nice advantage way visualise topology run command repl wvviewtopology topology see diagram like nice get running need line code compile willa representation topology actual kafka stream topology create humblepurchasemade topic jacreatetopics adminclient humbledonationmadetopic start topology let builder jsstreamsbuilder wbuildtopology builder topology jsstart jskafkastreams builder kafkaconfig publish couple message input topic makepurchase makehumbledonation see message appear largetransactionmade topic completely specified topology data structure transducer give u able brag developer decomplected code note please one advantage saw earlier able test transducer isolation without knowing anything kafka stream also see data flow topology without interacting kafka willa call experiment run repl run experiment def experiment werunexperiment topology topicpurchasemade key value id amount userid quantity topichumbledonationmade key value userid donationamountcents donationdate visualise experiment result wvviewtopology experiment view result data weresultsonly experiment experiment result look like also verify topology valid repl using clojurespec running print success sexplain wstopology topology happens invalid topology sexplain wstopology introduce loop topology allowed update topology workflow conj topiclargetransactionmade topicpurchasemade real advantage willa relies standard clojure data structure much possible allows thing like serialise topology edn programatically manipulate also query example try writing function count number topic involved topology summary hope given brief overview write basic kafka stream topology interested learning recommend reading kafka designing event driven system also recommend kafka stream udemy course barely scratched surface kafka stream many concept learn even touched thing like ktables aggregation join willa experiment point hopefully given food thought also recommend checking ksml noah library similar goal willa slightly different approach thanks reading please hesitate email question comment
151,Lobsters,clojure,Clojure programming,Introducing Crux JDBC,https://juxt.pro/blog/posts/crux-jdbc.html,introducing crux jdbc,crux previous blog post cruxjdbc crux,crux built providing queryability scale reason specifically designed crux around apache kafka immutable event log serve foundational piece unbundled architecture kafka acted golden store transaction document provided coordination node form serialized transaction ordering crux node rely property deterministically ingest stream event maintain local bitemporal index local keyvalue store rocksdb lmdb one potential drawback kafka already existing kafka cluster established requires additional investment get one running carry implication future operational overhead may immediately justifiable discussed ease benefit using managed kafka service previous blog post procuring service external provider always option hand use relational data store prevalent throughout company traditional database often readily available service either onprem cloud amazon rds data throughput requirement massive using typical rds database setup crux place kafka reasonable choice released cruxjdbc allows use crux node cluster without needing kafka transaction document writes made directly rds choosing via jdbc happens transparently regular crux api crux node ingest directly jdbc table local kv store provided initial support postgresql mysql oracle sqlite kafkalike semantics eviction compaction document preserved get started simply add juxtcruxjdbc dependency project fire crux node configured point existing database alternatively run embedded sqlite database standalone node enjoy available crux channel clojurians slack respond query issue
153,Lobsters,clojure,Clojure programming,Why I like Clojure,http://sulami.github.io/posts/why-i-like-clojure/,like clojure,post similar nature lisp look like latex lisp fully typed variant haskell lispbun typed clojure reading code data structure trivial lisp curse hosted zprint,posted august somewhat response uncle bob post similar nature would say gotten mixed positive reception planned similar post week two release archived idea upon reading post read couple time decided still something meaningful write follows purely subjective reason enjoy using clojure criticised bob absolute giving screen estate nuanced viewpoint something try avoid lisp much say already said homoiconicity meaning code represented data structure inside language extensibility macro modify evaluation order well syntax point look like latex lispracket actually great example flexibility lisp language designed build language call metalanguage even package import wrapped language trivially meaning essentially write tiny dsl every project saying necessarily good idea also mean stuck paradigm oo seems fp new hotness lisp historically often anyone else bob mention dynamic typing signature retort guessing fictional counterargument right mention clojurespec library gradual typing omitting schema alternative racket fully typed variant something basically haskell lispbun let u forget actually typed clojure static type checking allthere issue namely coverage great exists work meaning really need static type get able generate code without stuck dumb level generating string passing eval like example python allows sane hyperdynamic programming program adapts condition able read write code safe manner enables extremely powerful tooling lisp world linters smart reading code data structure trivial usually oneliner many tool automatically rewrite refactor code language want discount lisp curse real thing one reason lisp stuck around half century made mainstream main factor probably performance problem due gap software hardware architecturethere lisp machine hardware tailored towards running lisp never took either advent internet ecosystem like github hardware fast enough consider running basically full web browser half applicationslooking slack think issue become surmountable think need mention incredibly useful repl hotloading code running system hosted clojure explicitly designed hosted language think good move writing new language today might better established one cost leaving existing ecosystem library stack overflow answer new language nicer trade many people want make clojure hosted excellent interoperability host platform mean benefit existing ecosystem let alone platform implementationsdo really want implement runtime freebsd smart toaster oven raspberry pi non bsd linux know window matrix growing quickly primary platform jvm superbly uncool stable relatively performant clr net version almost even feature thanks davit miller well mature javascript version shape clojurescript jvm extent clr excellent support big software vendor buy kind software api chance java sdk use easily clojure code javascript ecosystem largest numbersin part due leftpadlike fivelinepackages still includes electron reactnative used unreasonable effort clojurescript code one newest addition graalvm featurecomplete yet already allows compilation native static binary many clojure programszprint one cli tool take advantage reduced startup time running without jvm away dreaded multisecond startup timei planning write piece graalvm time later year platform split could one big curselike problem clojure clojure common used many popular library allows write platformindependent code using conditional branching platformspecific code despite positive point mentioned clojure still niche language way good well sure finding job harderlarge company like walmart circleci employer clojure shop far le obscure one might think impossible clojure developer like example haskell rust one tend experienced typical first language requires certain interest craft many clojure developer written widely used tool library clojure also example emacs understandably quite popular clojurists rich hickey bdfl clojure someone decade industry experience desire get right think pretty good job small inconsistency place bulk language important part well thought outwe also see right clojurespec adapted community feedback first alpha version available year clojure stable language mean smaller problem stick around also mean trust code break every time update dependency end come enjoyment enjoy working clojure feel like lot learn language inviting explore beyond current possibility software development feel good elegant concise solutionsconcise obtuse come changed way think good way
154,Lobsters,clojure,Clojure programming,Fast Tensors in Clojure - a Sneak Peek,https://dragan.rocks/articles/19/Fast-tensors-Clojure-sneak-peek,fast tensor clojure sneak peek,fast tensor clojure sneak peek adopt pet function patreon page dedicated discussion server donate new book available subscription book writing neanderthal available github,fast tensor clojure sneak peek adopt pet function support work patreon page access dedicated discussion server ca nt afford donate ask free invite august please share new book available subscription hope many clojurists wondering progress book writing new chapter something like new chapter please mean hope saying mean care lot going behind scene since writing book time create software write example slim superfast deep learning library call deep diamond sneak peek basic thing trusty repl let create tensor x ever used neanderthal already expect straightforward creating plain clojure structure evaluate tensor function provide shape tensor dimension data type entry float layout four dimension onedimensional raw memory nchw def x tensor float nchw interested basic property shape shape always consistently reported canonical abcdefgdots order corresponds nchw case regardless layout dimension another key information data type entry float tensor viewed neanderthal vector give u convenient way compute operation implemented lowlevel performance tensor library provided neanderthal via neanderthal inspect value tensor entry realblockvector float offset anything set particular value tensor entry zero fortunately neanderthal transfer function used transfer clojure sequence tensor x realblockvector float offset need transfer data one tensor another def tensor float nhwc notice x different layout nhwc v nchw class clojurelangexceptioninfoclass clojurelangexceptioninfoexecution error exceptioninfo uncomplicatecommonsutilsdragansaysex dragan say need specialized transformer transfer two mkldnn tensor let neanderthal blindly transfer underlying entry h w c dimension would mixed deep diamond warns u two possible option wanted disregard layout could transfer view x view since want take different layout account create specialized transformer offered deep diamond def transf transformer x function implement optimized reordering transformation two tensor invoke inplace transformation entry transferred proper order dimension realblockvector float offset layout compatible neanderthal transfer let u use without need special transformer function def z tensor float nchw transfer x z userz realblockvector float offset vector space function work tensor view know realblockvector float offset scaled try reverse transformation move value x revert transf view x realblockvector float offset trainsfer function work even logical layout different physical layout nchw typically used input neural network layer corresponding layout used weight oihw def w tensor float oihw transfer x w realblockvector float offset true planned write short article appetizer somehow started getting long usual let rest supposed tensor anyway expect work network inputtz fullyconnected relu fullyconnected elu fullyconnected logistic expect typical tensor operation inner product convolution neural network layer learning optimization algorithm optimized cpu execution optimized gpu execution deep diamond almost lean neanderthal high level clojure api everything automatically rarely need open hood plug lower level get hand dirty progression way exactly need level control need everything clojure everything optimized squeeze full performance state art lowlevel deep learning performance library provided intel nvidia like please mention book online offline spread word skeptical deep diamond possible love hear question nt like please voice opinion specific love hear make better download released deep diamond available github might star project like follow progress development api polishing like upstream library still snapshot phase please patient funding work library book subscribe also patreon give direct support software also thinking applying clojurists together deep diamond donating think project valuable contribution clojure ecosystem would nice mention uncomplicate deep diamond survey anyway deep diamond fully open sourced epl license everyone support full access support would highly appreciated since really help impatient try everything learn series deep learning scratch gpu applies deep diamond fire repl brush linear algebra dl basic first please
155,Lobsters,clojure,Clojure programming,Deep Learning for Programmers | New Book Release 0.7.0,https://aiprobook.com/deep-learning-for-programmers?release=0.7.0&src=lobsters,deep learning programmer new book release,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c table content part getting started part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter deep learning learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c content table content part getting started chapter determined part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book
156,Lobsters,clojure,Clojure programming,Why Clojure?,http://blog.cleancoder.com/uncle-bob/2019/08/22/WhyClojure.html,clojure,sicp parenthesis slow space war javascript dynamically typed dynamically typed dynamically typed ides refactoring java interop find clojure programmer new language called um gazoo language minimal syntax one,programmed system many different language assembler java written program binary machine language written application fortran cobol c pascal c java lua smalltalk logo dozen language used statically typed language lot type inference used typeless language used dynamically typed language used stack based language like forth logic based language like prolog last decade used lot different language come conclusion favorite language language think outlast others language believe eventually become standard language programmer lisp come conclusion casually even willingly fan lisp year fan lisp saw car cdrs caddaddrs thought academic baloney interesting truly useful decade ago found sicp found clojure clojure lisp ride top java ecosystem car cdrs cadadaadr convinced right away took year usual stumbling around frustration began realize language easiest elegant least imposing language ever used small margin clojure made list ready economy expression wondering rest list reason one simpler easier le occluding write expressive code clojure requires fewer line require fewer character require fewer hour requires fewer mental gymnastics answer simple indeed answer simple language almost syntax grammar let say language almost syntax grammar probably best way elucidate point show example entertainment program print first square integer println take map range let walk syntax mean begin list mean end innermost open list name name case function name multiply function mean interpret next list function mean first argument function seen syntax clojure show let walk code first opening mean everything follows final list context clojure interprets list function call case function println regular old systemoutprintln used java sort passing println passing result take function take function expects two argument first number item take second argument list case take function return list first item list second argument list second argument result calling map function map function expects two argument first function second list map function return list result calling passedin function every element passedin list function passedin map anonymous function created simply call multiply duplicated first argument list passed map list returned calling range function range function simply return list nonnegative integer list lazy integer required upstream function actually generated folk like complication syntax create square function follows defn square x x x println take map square range defn function defines new function named square bracket work like parenthesis except define different kind list called vector list runtime complexity linked list vector runtime complexity array sort anyway case vector tell defn square function requires one argument named x rest able infer make second line little nicer map function simply invokes square seen syntax clojure let compare equivalent java program public class squaresofintegers public static void main string args int systemoutprintln considerably wordy even count enclosing class point however cover perhaps syntax java get started comparison c want belabor point could go comparison comparison language language bottom line clojure much smaller syntax language minimal syntax mean express problem clearly directly much le effort contortion language look easy sell c programmer longer c language lawyer revelled heavyweight syntax language enthralled lovely fidelty bit found transition java twenty year ago rather meh slimmed c gotten bit corpulent since transition clojure eyeopener based lightweight syntax expected suitable classroom exercise building large system mind large system equated large syntax boy wrong found instead minimal syntax clojure far conducive building large system heavier syntax java c fact contest building large system clojure simpler easier language used pointed beginning used lot language probably got complaint question objection etc let see anticipate omg parenthesis old look java function call f x corresponding function call clojure f x see extra parenthesis ok entirely fair wind parenthesis thats tend nest function call look square integer program see fret though really like nested syntax always use threading macro let reader understand slow clojure slow oh look c assembler nanosecond concern probably want clojure innermost loop also probably want java c software write nowadays need nanosecond performance built real time gui based animated space war game using clojure could keep frame rate high even hundred object screen clojure slow javascript clojurescript compiles right javascript run browser fine indeed space war program mentioned compiled using clojurescript ran browser even higher framerates native mode still trying figure dynamically typed write test part test employ clojurespec library specify schema type dynamic checking precondition postconditions design contract style heart delight dynamically typed declaring type requires syntax syntax reduces economy expression incomming dammit dynamically typed ok get like static typing fine use nice statically typed language use clojure scotland ye ides intellij cursive plugin nicely clojure programmer use emacs though refactoring intellij cursive nice refactorings though extract method yet come guy java interop brainer clojure program call java directly java program call clojure program little bit fuss interop concern find clojure programmer better making syntax trivial java platform likely already know decide build next system clojure spend week two getting used language start oh time couple month realize primitive early stuff tempted clean else new new language called um gazoo yes new language every month every week every day lack new language thing new language nothing new made piece old language cut shook jar dumped game language yahtzee ok entirely fair still good idea percolating language space none idea revolutionary entered era tweaking find new language nearly compelling clojure simply extra syntax virtually carry language minimal syntax one yes true forth tiny syntax smalltalk two language baggage forth reverse polish stack language economy expression phrase would use forth though find fascinating postscript based smalltalk small elegant beautiful spawned design pattern revolution spawned refactoring revolution spawned tdd revolution helped spawn agile revolution smalltalk language tremendous impact smalltalk also image based language programmer ever wrapped mind around really meant unfortunately language languished compared textfile based language lisp older far smalltalk forth created concept came never languished way smalltalk forth indeed language refuse die tried kill many time like annoying neighborhood stray cat keep coming back finally lisp functional future looking functional defn actually function need know
157,Lobsters,clojure,Clojure programming,MXNet made simple: Transfer Learning to achieve State of the Art on image classification tasks,https://arthurcaillau.com/mxnet-made-simple-transfer-learning/,mxnet made simple transfer learning achieve state art image classification task,mxnet made simple transfer learning achieve state art image classification task oxfordiiit dataset transfer learning transfer learning x need transfer learning x x x x transfer learning work practice x oxfordiiit dataset oxfordiiit dataset previous post performing transfer learing oxfordiiit dataset loading dataset loading pretrained model imagenet dataset previous blog post training model note tutorial minute epoch oxfordiiit dataset accuracy minute minute accuracy conclusion reference resource repository arthur caillau,mxnet made simple transfer learning achieve state art image classification task saturday august min post explain transfer learning make u achieve state art performance oxfordiiit dataset technique common among practicioners pretrained model leveraged quickly learn new machine learning task transfer learning transfer learning transfer learning machine learning technique model trained task x reused task need transfer learning task x similar nature requires much le time training data learn pretrained model available task x learning task x transfered model learns task eg model trained classifying object category task x leveraged classify pet breed task computationally time expensive retrain model scratch take week gpu train certain model perform well data expensive train model perform machine task scratch requires knowledge exploration deep learning architecture perform well task learn transfer learning work practice practicioners often pick pretrained model performs really well task x fine tune last layer network new task technique requires little data little training time achieve close state art sota result task oxfordiiit dataset use oxfordiiit dataset demonstrate perform transfer learning oxfordiiit dataset website category pet dataset roughly image class image large variation scale pose lighting also used localization english cocker spaniel russian blue pug dataset explored depth previous post preprocessing tool explained download preprocess dataset following script run binbash set evx projectroot cd dirname pwd datapath projectrootdataoxfordpet mxnethome echo mxnethome hast set able use exit datapath mkdir p datapath fi f pushd datapath downloading dataset wget http tar zxvf oxfordiiitpettgz rm oxfordiiitpettgz mv oxfordiiitpetimages rm rf oxfordiiitpet rm mat organizing image folder image jpg label echo image awk f gsub nf sub print mkdir p label mv image label image done popd fi making lst rec file mxnet load f cleaning image failing opencv rm f rm f rm f rm f rm f rm f python list trainratio recursive datapathdata datapath python resize centercrop numthread datapathdata datapath fi rest post assume rec file properly generated need import certain package require clojurestring str mxnet namespaces require orgapacheclojuremxnetinitializer init require orgapacheclojuremxnetio mxio require orgapacheclojuremxnetmodule require orgapacheclojuremxnetevalmetric evalmetric require orgapacheclojuremxnetndarray ndarray require orgapacheclojuremxnetsymbol sym require orgapacheclojuremxnetcallback callback require orgapacheclojuremxnetcontext context opencv namespaces require mxcv require cv require cvu performing transfer learing oxfordiiit dataset loading dataset first define parameter loading dataset pretrained model def batchsize def datashape def trainrec dataoxfordpetdatatrainrec def validrec dataoxfordpetdatavalrec def modeldir model def numclasses load dataset recorditer defonce trainiter mxioimagerecorditer pathimgrec trainrec dataname data labelname softmaxlabel batchsize batchsize datashape datashape data augmentation shuffle true whether shuffle data randomly maxrotateangle rotate random degree resize resize shorter edge cropping randcrop true randomely crop image randmirror true randomely mirror image imagerecorditer validation defonce valiter mxioimagerecorditer pathimgrec validrec dataname data labelname softmaxlabel batchsize batchsize datashape datashape loading pretrained model base model picked demonstrate transfer learning want learn image classification task leverage strong classification model known perform well practice resnet model trained imagenet dataset discriminate category object ranging cat musical instrument well suited transfer learning new image classification task start small enough get baseline quickly using pretrained model classification task explained previous blog post run following bash script fetch pretrained model binbash set evx projectroot cd dirname pwd modelpath projectrootmodel f wget http p modelpath wget http p modelpath wget http p modelpath fi define function load memory network architecture learned parameter defn getmodel load pretrained model given modelname ex getmodel modelname let mod mloadcheckpoint prefix str modeldir modelname epoch msymbol msymbol mod argparams margparams mod auxparams mauxparams mod next need reuse base model learned parameter remove last fully connected layer resnet model plug new one idea base layer learned classify different shape pattern new classification head learn combine knowledge discriminate pet breed defn mkfinetunemodel make fine tune symbol net given pretrained network msymbol msymbol pretrained network symbol argparams argument parameter pretrained model numclasses number class finetune datasets layername layer name last fullyconnected layer key msymbol argparams numclasses layername layername let alllayers symgetinternals msymbol net symget alllayers str layername output net net data adding classifier head base network net symfullyconnected data data numhidden numclasses symsoftmaxoutput softmax data data newargs argparams remove fn k v strincludes k training model time come train model define function finetune defn fit train symbol net devs trainiter training valiter validation devs net argparams auxparams numepoch trainiter valiter net converting net symbol module mmodule context devs binding data label training mbind datashapes mxioprovidedatadesc trainiter labelshapes mxioprovidelabeldesc valiter initializing parameter auxiliary state minitparams argparams argparams auxparams auxparams allowmissing true training module mfit traindata trainiter evaldata valiter numepoch numepoch fitparams mfitparams evalmetric evalmetricaccuracy intializer initxavier randtype gaussian factortype magnitude batchendcallback callbackspeedometer batchsize defn finetune fine tune model devs numepoch trainiter training valiter validation model numepoch devs finetune model numepoch devs trainiter valiter model numepoch devs trainiter valiter let key msymbol argparams auxparams model key net newargs mkfinetunemodel assoc model numclasses numclasses fit devs net newargs argparams numepoch trainiter valiter perform transfer learning cpu following code training base model cpu epoch finetune getmodel contextcpu training accuracy training validation accuracy feed average image per second model training info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetmodulebasemodule epoch info orgapachemxnetmodulebasemodule epoch time info orgapachemxnetmodulebasemodule epoch note slow recommend running gpu get time speedup wrote tutorial explain get setup gpu aws see minute training epoch model achieves accuracy classification task already excellent performance achieved little data little time would challenge beat learn classify pet breed le minute using oxfordiiit dataset p performance good baseline see improve training epoch training base model gpu epoch finetune getmodel contextgpu training accuracy le training validation accuracy feed average image per second model training info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetmodulebasemodule epoch info orgapachemxnetmodulebasemodule epoch time info orgapachemxnetmodulebasemodule epoch training epoch gpu result accuracy validation set take longer minute gpu probably even get better performance using larger base model see good get pretrained time binbash set evx projectroot cd dirname pwd modelpath projectrootmodel f wget http p modelpath wget http p modelpath wget http datamxnetiomodelsimagenetresnetsynsettxt p modelpath fi training base model gpu epoch finetune getmodel contextgpu training accuracy le training validation accuracy sota feed average image per second model training info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetmodulebasemodule epoch info orgapachemxnetmodulebasemodule epoch time info orgapachemxnetmodulebasemodule epoch le minute training model achieves accuracy validation set give idea good level performance state art conclusion transfer learning truly powerful machine learning technique help u achieve state art result new machine learning task achieved sota oxfordiiit classification task le minute training reference resource also code used post also available repository n mxnetcljtutorialsfinetune require clojurestring str orgapacheclojuremxnetinitializer init orgapacheclojuremxnetio mxio orgapacheclojuremxnetmodule orgapacheclojuremxnetevalmetric evalmetric orgapacheclojuremxnetndarray ndarray orgapacheclojuremxnetsymbol sym orgapacheclojuremxnetcallback callback orgapacheclojuremxnetcontext context mxcv cv cvu parameter def batchsize def datashape def trainrec dataoxfordpetdatatrainrec def validrec dataoxfordpetdatavalrec def modeldir model def numclasses imagerecorditer training defonce trainiter mxioimagerecorditer pathimgrec trainrec dataname data labelname softmaxlabel batchsize batchsize datashape datashape data augmentation shuffle true whether shuffle data randomly maxrotateangle rotate random degree resize resize shorter edge cropping randcrop true randomely crop image randmirror true randomely mirror image imagerecorditer validation defonce valiter mxioimagerecorditer pathimgrec validrec dataname data labelname softmaxlabel batchsize batchsize datashape datashape defn getmodel load pretrained model given modelname ex getmodel modelname let mod mloadcheckpoint prefix str modeldir modelname epoch msymbol msymbol mod argparams margparams mod auxparams mauxparams mod defn mkfinetunemodel make fine tune symbol net given pretrained network msymbol msymbol pretrained network symbol argparams argument parameter pretrained model numclasses number class finetune datasets layername layer name last fullyconnected layer key msymbol argparams numclasses layername layername let alllayers symgetinternals msymbol net symget alllayers str layername output net net data adding classifier head base network net symfullyconnected data data numhidden numclasses symsoftmaxoutput softmax data data newargs argparams remove fn k v strincludes k defn fit train symbol net devs trainiter training valiter validation devs net argparams auxparams numepoch trainiter valiter net converting net symbol module mmodule context devs binding data label training mbind datashapes mxioprovidedatadesc trainiter labelshapes mxioprovidelabeldesc valiter initializing parameter auxiliary state minitparams argparams argparams auxparams auxparams allowmissing true training module mfit traindata trainiter evaldata valiter numepoch numepoch fitparams mfitparams evalmetric evalmetricaccuracy intializer initxavier randtype gaussian factortype magnitude batchendcallback callbackspeedometer batchsize defn finetune fine tune model devs numepoch trainiter training valiter validation model numepoch devs finetune model numepoch devs trainiter valiter model numepoch devs trainiter valiter let key msymbol argparams auxparams model key net newargs mkfinetunemodel assoc model numclasses numclasses fit devs net newargs argparams numepoch trainiter valiter comment require mxnetcljtutorialsfinetune refer require orgapacheclojuremxnetcontext context cpu slow finetune getmodel contextcpu training accuracy training validation accuracy feed average image per second model training info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetcallback speedometer epoch batch speed info orgapachemxnetmodulebasemodule epoch info orgapachemxnetmodulebasemodule epoch time info orgapachemxnetmodulebasemodule epoch finetune getmodel contextgpu training accuracy le training validation accuracy feed average image per second model training info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetmodulebasemodule epoch info orgapachemxnetmodulebasemodule epoch time info orgapachemxnetmodulebasemodule epoch finetune getmodel contextgpu bigger model training accuracy le training validation accuracy sota feed average image per second model training info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetcallback speedometer epoch batch speed samplessec info orgapachemxnetmodulebasemodule epoch info orgapachemxnetmodulebasemodule epoch time info orgapachemxnetmodulebasemodule epoch arthur caillau man eats parenthesis breakfast
158,Lobsters,clojure,Clojure programming,Working with Clojure: Learning Functional Design,https://ltriant.github.io/2019/08/13/clojure-learning-functional-design.html,working clojure learning functional design,working clojure learning functional design dynamic typing moose mouse moo type tiny spec precondition check java interop official documentation living nil nil punning truthiness peeling back layer transitioning perl go clojure brave true joy clojure test mojo,working clojure learning functional design august really wanted write much earlier found perspective changing fairly rapidly learned week week decided wait month let knowledge opinion settle bit nearly month figure time last post focused finally setup development environment time want dive thing learn relearn respect writing designing maintaining system clojure especially relates experience working perl go many year dynamic typing working dynamically typed language really new thing ten year perl lack type really drove nut beginning function passed deep map structure map changed everything kind silently stopped working function needed changed situation different working static typing several component need changed compiler help occasionally found screaming god damned static type however day dynamism flow like silk perl used battle module like moosemousemootype tiny ton manual check validate deep structure practice codified development team mantra able work around common issue dynamic typing produce robust system personally robustness something want system write contribute dynamic typing often conflict unless certain practice place something get default yes dynamic typing allows u change thing quickly system changed nontrivial contains many layer many module written many developer long since moved different philosophy software design end spending time verifying structure parameter feel like proceed issue spec thing maybe time discover way go case think answer lay somewhere middle codebases heavily use spec add spec verify structure map type parameter return value codebases sprinkle precondition check around place use spec add spec every function ever way think spec boundary dynamic middle anything come external source eg json payload web service response json payload client request message kafka topic spec used validate structure pulling data putting data schemaless database spec used validate structure beyond checking type mechanism also serve documentation future developer especially developer new clojure like new codebase aswell lastly test must verifying system built dynamic typing integration test system test matter much unit test several function work perfectly individually designed mean work together importance integration system test certainly unique system built dynamic language thing felt important year since starting job best friend working new system java interop initially sure much going need interoperate java world think going much far experience plentiful unavoidable various reason clojure library thing want plenty java option clojure library thing want wrapper around java library missing functionality need clojure java library thing want best mature productionhardened version java library basic form taken official documentation piece java code like pokemon helioptile new pokemon helioptilesetname helioptile helioptilesetprimarytype electric helioptilesetsecondarytype normal doto macro allows simple translation doto pokemon setname helioptile setprimarytype electric setsecondarytype normal also many java library implement builder pattern java code may look like pokemon helioptile new pokemonbuilder withname helioptile withprimarytype electric withsecondarytype normal build threading macro get used lot pokemonbuilder withname helioptile withprimarytype electric withsecondarytype normal build perhaps indeterminate number thing build single object common attribute property object built user option stored database case reduce hero day eg perhaps something like let opts name luke age toooldtoplaypokemon false reduce fn acc k v withproperty acc k v property opts embarassed say idea using reduce take collection thing injecting single object something seems obvious certainly belongs functional programming class something never really clicked given example using reduce fold depending language summing list number past would done loop called setproperty bunch time perhaps like let opts name luke age toooldtoplaypokemon false prop property doseq k v opts setproperty prop k v prop work perfectly fine equivalent set withxxx method offered java library necessity given choice drinking koolaid sprinkling much functional sugar code possible moment living nil spent enough time life dealing null value experienced wide variety pathology responsible clojure lisp favor idea nil punning much clojure standard library built handling nil expected firstclass value took little getting used beginning still something doublecheck anyway perfect opinion still requires discipline something need kept back one mind novel approach handling null value still get across code trying without litter code ton null check end result certain kind beauty threading macro nil best friend bunch function whose return value flow next function one function may return nil code may written novice whenlet thing params whenlet thing thing whenlet thing thing thing reminiscent lot code written perl thing params return unless thing thing thing return unless thing return thing clojure code look usually good sign better way idiomatically written macro work macro except function chain return nil rest function shortcircuited entire thing return nil way intermediate function necessarily handle nil parameter way although probably sake robust perfectly equivalent first solution since whenlet test truthiness also familiar perl world test specifically nil close enough peeling back layer standard library pretty rich ton function still yet touch explored standard library layer layer uncovered time power wield language function started map filter quickly adopted threading macro along iterators like doseq loop recur alone got pretty far iterating collection composing function next layer included cond cond reduce comp partial even option composing function opened similar story working data structure easy start thing like con conj assoc dissoc merge first rest slowly grow mergewith associn updatein getin nextlayer function opened implemented previouslayer function verbose code around necessary understand immediately day one time go layer uncovered learning new language idiom reading lot existing code getting code reviewed experienced clojure developer also reading review developer code key getting better transitioning perl go moving one ecosystem another everything new obviously language syntax new available library de facto standard library testing framework deployment option dependency management culture philosophy organisation individual look best book blog article read many thing upside whole new world much material soak learning new stuff fun occasionally come across blogger writes clojure functional programming lisp disappear rabbit hole several hour still going back reading clojure brave true bookwebsite joy clojure sitting home probably hardest part transition clojure software design level came place wrote far fewer function larger deeper functionality whereas clojure favor writing many smaller function certainly norm within team still think bigger function slowly getting used breaking code review pair programming help lot another consideration picking much language use point time go opinionated way want work language force structs interface whether like however perl forgiving language written many different style something clojure sort seems encourage aswell example codebases working record protocol rare find however multimethods common circle also heard people fully embracing functional paradigm simply using clojure better java read article using record protocol heavily coming java background last part transition difficult early testing initially system test lacking piece code working wrote external system test perl test mojo fantastic testing web service could get test working super quickly later translate appropriate clojure test despite issue run actually super happy clojure world moment always fondness lisp family language refreshing work one professionally
159,Lobsters,clojure,Clojure programming,A sprinkle of Clojure for the command line,https://github.com/borkdude/babashka,sprinkle clojure command line,babushka laheadle introduction goal fast starting easy installation familiar crossplatform interop multithreading battery included nongoals sci talk slide quickstart example status changelogmd installation brew arch linux available arch user repository aur yay yaourt apacman pacaur window scoop scoopclojure installer script download github docker docker hub usage fipp reader conditionals running script input output flag note current file path commandline argument nubankdocopt additional namespaces babashkaclasspath babashkawait babashkasignal babashkacurl babashkacurl style explicit requires preloads classpath babashkaclasspath depsclj uberscript uberjar system property pattern data reader parsing command line argument reader conditionals running test spawning killing process example async http babashkacurl cljhttplite http unix socket shutdown hook jdbc postgresql hsqldb docbuildmd test example bencode nreplbencode printing returned value difference clojure small clojure interpreter graalvm pod library repo package babashka script aws lambda article podcasts video including new library class pod feature flag documentation example commit related project thanks contributor code contributor contribute financial contributor contribute individual organization contribute license,clojure babushka grey area bash life short remember write bash code feel liberated laheadle clojurians slack introduction main idea behind babashka leverage clojure place would using bash otherwise one user described quite home bash time substantial grey area thing complicated simple bash simple worth writing cljs script babashka really seems hit sweet spot case goal fast starting clojure scripting alternative jvm clojure easy installation grab selfcontained binary run jvm needed familiar targeted jvm clojure user crossplatform support linux macos window interop commonly used class system file javatime javanio multithreading support pmap future battery included toolscli cheshire nongoals provide mixed clojurebash dsl see portability replace existing shell babashka tool use inside existing shell like bash designed play well aim replace babashka us sci interpreting clojure sci implement suffiently large subset clojure interpreting code general performant executing compiled code script take second run clojure jvm may better fit since performance clojure jvm outweighs startup time penalty read difference clojure talk get overview babashka watch talk slide quickstart curl http rawgithubusercontentcomborkdudebabashkamasterinstall installbabashka chmod x installbabashka sudo installbabashka l bb filter iofile isdirectory input doc resource sci script src target test bb took example read output shell command lazy seq string l bb take input changesmd dockerfile read edn stdin write result stdout bb vec dedupe input read input output flag execute script eg print current time california using javatime api file pstclj usrbinenv bb def javatimezoneddatetimenow def latimezone javatimezoneidof americalosangeles def latime withzonesameinstant latimezone def pattern javatimeformatdatetimeformatterofpattern hh mm println format latime pattern example found status functionality regarding clojurecore javalang considered stable unlikely change change may happen part babashka although try best prevent always check release note changelogmd upgrading installation brew linux macos binary provided via brew install brew install borkdudebrewbabashka upgrade brew upgrade babashka arch linux babashka available arch user repository installed using favorite aur helper yay yaourt apacman pacaur example using yay yay babashkabin window window install using scoop scoopclojure bucket installer script install via installer script curl http rawgithubusercontentcomborkdudebabashkamasterinstall installbabashka chmod x installbabashka sudo installbabashka default install usrlocalbin change provide directory name curl http rawgithubusercontentcomborkdudebabashkamasterinstall installbabashka chmod x installbabashka installbabashka tmp download may also download binary github linux static binary available used alpine docker check image docker hub usage babashka option must appear order group mentioned help help h print help text version print current version babashka describe print edn map information version babashka output flag bind input lazy seq line stdin bind input lazy seq edn value stdin write line stdout write edn value stdout stream stream line edn value stdin combined input becomes single value per iteration uberscript uberscript file collect preloads e f required namespaces classpath single executable file evaluation e eval expr evaluate expression f file path evaluate file cp classpath classpath use main n call main function namespace args verbose print entire stacktrace case exception repl repl start repl use rlwrap history socketrepl start socket repl specify port eg host port separated colon eg nreplserver start nrepl server specify port eg host port separated colon eg neither e f socketrepl specified first argument parsed option treated file exists expression otherwise everything bound commandlineargs use separate script command lin args bb command line args clojurecore function accessible without namespace alias following namespaces required default available predefined alias user namespace may use require andor refer namespaces var available enumerated explicitly clojurestring aliased str clojureset aliased set clojureedn aliased edn clojurejavashell aliased shell clojurejavaio aliased io asrelativepath asurl copy deletefile file inputstream makeparents outputstream reader resource writer clojuremain repl clojurecoreasync aliased async clojurestacktrace clojuretest clojurepprint pprint currently backed fipp fippednpprint clojurezip clojuretoolscli aliased toolscli clojuredatacsv aliased csv clojuredataxml aliased xml cheshirecore aliased json cognitecttransit aliased transit cljyamlcore alias yaml bencodecore aliased bencode readbencode writebencode nextjdbc aliased jdbc available feature flag selection java class available see babashkaimplclassesclj babashka support import import clojurelangexceptioninfo babashka support subset n form may use require import n foo require clojurestring str import clojurelangexceptioninfo unsupported part n form may use reader conditionals maintain compatibility jvm clojure running script script may executed file using f file using bb shebang also work usrbinenv bb defn geturl url println fetching url url let key exit err shellsh curl s url zero exit println error err systemexit defn writehtml file html println writing file file spit file html let url file commandlineargs empty url empty file println usage url file systemexit writehtml file geturl url downloadhtmlclj usage url file downloadhtmlclj http wwwclojureorg tmpclojureorghtml fetching url http wwwclojureorg writing file tmpclojureorghtml usrbinenv nt work use following workaround cat scriptclj binsh exec bb hello prn commandlineargs scriptclj hello input output flag oneliners input value may come handy contains input read stdin edn default want read text use flag bind input lazy seq line text want read multiple edn value use flag option print result line text option print result line edn value note input available user namespace namespaces use following table illustrates combination option command form echo input bb input flag output flag input input input flag output flag input output hello bye hello bye hello bye hello bye hello bye hello bye combined stream option expression executed value input echo bb stream input current file path var file contains full path file currently executed cat exampleclj prn file bb exampleclj usersborkdudeexampleclj commandline argument commandline argument retrieved using commandlineargs want parse command line argument may use builtin clojuretoolscli namespace use nubankdocopt library additional namespaces babashkaclasspath contains function addclasspath used add classpath dynamically require babashkaclasspath refer addclasspath clojurejavashell refer sh def medleydep deps medley giturl http githubcomborkdudemedley sha def cp sh clojure spath sdeps str medleydep addclasspath cp require medleycore mindexby id id id id id babashkawait contains function waitforport waitforpath usage waitforport waitwaitforport localhost waitwaitforport localhost timeout pause wait tcp connection available host port option map support timeout pause timeout provided reached default value returned pause option determines time waited retries usage waitforpath waitwaitforpath tmpwaitpathtest waitwaitforpath tmpwaitpathtest timeout pause wait file path available option map support default timeout pause timeout provided reached default value returned pause option determines time waited retries namespace babashkawait aliased wait user namespace babashkasignal contains function signalpipesignalreceived usage signalpipesignalreceived return true pipe signal received example bb fn x println x signalpipesignalreceived recur inc x head namespace babashkasignal aliased signal user namespace babashkacurl namespace babashkacurl tiny wrapper around curl aliased curl user namespace see babashkacurl style note style babashka recommends following explicit requires use explicit requires namespace alias script unless writing oneliners l bb input first strincludes true scriptclj input first strincludes rather scriptclj n script require clojurejavaio io clojurestring str ioreader lineseq first strincludes reason linters like cljkondo work better code us namespace form explicit requires known clojure construct editor tooling work better namespace form sorting requires etc writing compatible code give option run script clojure babashka offer repl socket repl nrepl server look information use integrate editor preloads environment variable babashkapreloads allows define code available subsequent usage babashka babashkapreloads defn foo x x babashkapreloads babashkapreloads defn bar x x export babashkapreloads note concatenate multiple expression use function babashka bb foo input bar also preload entire file using loadfile export babashkapreloads loadfile myawesomepreludeclj note input available preloads classpath babashka accepts classpath option used search namespaces load cat srcmynamespaceclj n mynamespace defn main args println hello namespace bb classpath src main mynamespace hello namespace larger script classic clojure project layout like tree l depsedn readme src projectnamespace mainclj utilitiesclj test projectnamespace testmainclj testutilitiesclj tell babashka include src test folder classpath start socket repl running bb classpath src test socketrepl note use clojure tool produce classpaths download dependency cat depsedn deps mygistscript giturl http sha alias myscript mainopts mygistscript classpath clojure spath bb classpath classpath main mygistscript hello gist script classpath argument babashkaclasspath environment variable used export babashkaclasspath clojure spath export babashkapreloads require mygistscript bb mygistscriptmain hello gist script invoking bb main function expression systemgetproperty babashkamain return name main function also see babashkaclasspath namespace allows dynamically adding classpath see depsclj babashka script replaces clojure bash script uberscript uberscript option collect expression babashkapreloads command line expression file main entrypoint required namespaces classpath single file convenient debugging deployment given depsedn depsclj myscript scommand bb cp classpath mainopts uberscript myscriptclj cat myscriptclj n mygistscript defn main args println hello gist script n user require mygistscript apply mygistscriptmain commandlineargs bb myscriptclj hello gist script caveat dynamic requires building uberscripts work running toplevel n require form rest code evaluated code relies dynamic requires may work uberscript resource usage ioresource assumes classpath used uberscript still set classpath bring resource along problematic project using uberjar see good alternative uberjar babashka create uberjars given classpath optionally main method cat srcfooclj n foo genclass defn main args prn hello bb cp clojure spath foo uberjar foojar bb foojar hello producing classpath using clojure depsclj tool clojure spec core spec classpath therefore included uberjar make bigger necessary l lh foojar rwr r borkdude staff aug foojar exclude dependency use following classpathoverrides depsedn alias removeclojure classpathoverrides orgclojureclojure nil orgclojurespecalpha nil orgclojurecorespecsalpha nil rm foojar bb cp clojure removeclojure spath foo uberjar foojar bb foojar hello l lh foojar rwr r borkdude staff aug foojar want uberjar compatible jvm need compile main namespace babashka compilation use clojure jvm part rm foojar mkdir class clojure e require foo compile foo foo bb cp clojure spath class foo uberjar foojar bb foojar hello java jar foojar hello system property babashka set following system property babashkaversion version string eg babashkamain main argument babashkafile file argument normalized using getabsolutepath name main pattern python script wellknown pattern check current file file invoked command line loaded another file name main pattern babashka pattern implemented file systemgetproperty babashkafile data reader data reader enabled setting datareaders hashmap symbol function var bb set datareaders ttag inc ttag preserve good startup time babashka scan classpath datareadersclj file parsing command line argument babashka ship clojuretoolscli require clojuretoolscli refer parseopts def clioptions option required argument p port port port number default parsefn integerparseint validate must number h help option parseopts commandlineargs clioptions bb scriptclj port bb scriptclj h port help true reader conditionals babashka support reader conditionals taking either bb clj branch whichever come first note clj branch behavior added version version clj branch ignored bb bb hello clj bye hello bb clj bye bb hello bye bb bb clj running test babashka bundle clojuretest make ci script fail use simple runner like usrbinenv bash bb cp src test resource e require clojuretest borkdudedepstest let key fail error truntests borkdudedepstest systemexit fail error spawning killing process use javalangprocessbuilder class example user def w processbuilder python simplehttpserver start userws user waitwaitforport localhost host localhost port took user destroy w nil also see example async addition future pmap promise friend may use clojurecoreasync namespace asynchronous scripting following example show get first available value two different process bb defn asynccommand args asyncthread apply shellsh bash c args asyncalts asynccommand sleep echo process asynccommand sleep echo process first strtrim println process note go macro available compatibility jvm program implementation map clojurecoreasyncthread single exclamation mark operation etc map double exclamation mark operation etc park thread like jvm http making http request use babashkacurl library included babashka aliased curl user namespace slurp simple get request cljhttplite library clojurejavashell javalangprocessbuilder shelling favorite command line http client http unix socket useful talking docker require clojurejavashell refer sh require cheshirecore json sh curl silent nobuffer unixsocket varrundockersock http localhostimagesjson jsonparsestring true first repotags borkdudebabashka latest shutdown hook adding shutdown hook allows execute code script exit bb e runtimegetruntime addshutdownhook thread println bye bye also work script interrupted ctrlc jdbc babashka support nextjdbc library along driver postgresql hsqldb feature part standard bb distribution see docbuildmd detail build babashka feature see test example use interacting psql mysql sqlite cli achieved shelling see example directory bencode babashka come nreplbencode library allows read write bencode message socket simple example evaluates clojure expression nrepl server started lein repl n nreplclient require bencodecore b defn nrepleval port expr let javanetsocket localhost port getoutputstream javaiopushbackinputstream getinputstream bwritebencode op eval code expr byte get breadbencode value string byte nrepleval printing returned value babashka nt print returned nil lot script end something sideeffecting bb bb b really want print nil use prn instead difference clojure babashka implemented using small clojure interpreter mean snippet script compiled jvm bytecode executed form form runtime implement sufficiently large subset clojure babashka compiled native binary using graalvm come selection builtin namespaces function clojure useful library data type number string persistent collection multithreading supported pmap future difference clojure preselected set java class supported add java class runtime interpretation come overhead therefore tight loop likely slower clojure jvm general interpretation yield slower program compiled program deftype definterface unboxed math list project script library pod tool known work babashka pod pod program used clojure library babashka documentation available library repo package babashka script aws lambda aws lambda runtime nt support signal therefore babashka disable handling sigint sigpipe done setting babashkadisablesignalhandlers true article podcasts video including new library class new library class go standardly distributed babashka binary evaluation criterion considered library class useful general purpose scripting adding library class would make babashka compatible clojure library relevant scripting library interpreted babashka using classpath functionality ca nt met shelling another cli ca nt written small layer existing cli like babashkacurl instead library implemented pod criterion met adding feature still useful particular company niche adding behind feature flag still possibility currently case nextjdbc postgresql hsqldb database driver company interested feature compile instance babashka internal use company also free make fork babashka include internal library customized babashka interesting share world free distribute using different binary name like bbsql bbdocker bbyourcompany etc see feature flag documentation implementation existing feature flag example commit related project collection example script thanks contributor code contributor project exists thanks people contribute contribute financial contributor become financial contributor help u sustain community contribute individual organization support project organization logo show link website contribute license copyright michiel borkent distributed epl license see license project contains code clojure licensed epl license
160,Lobsters,clojure,Clojure programming,experimental ClojureScript pixel 3d engine hot loads Blender edits into running Three.js,https://github.com/infinitelives/px3d,experimental clojurescript pixel engine hot load blender edits running threejs,development mode building production,hot reloading blender edits running threejs clojurescript development mode npm make watch building production make
161,Lobsters,clojure,Clojure programming,ClojureScript Pixel Game Engine With Blender Live-reloading,https://mccormick.cx/news/entries/clojurescript-pixel-game-engine-with-blender-live-reloading,clojurescript pixel game engine blender livereloading,infinitelives clojurescript blender threejs infinitelives infinitelives clojurescript figwheel infinitelives home page follow u twitter,aug recently hacking game engine infinitelives called built top clojurescript blender threejs run browser one feature particularly happy livereloading blender asset game hit save blender update appear running game second later need recompile reload game way work background script watch assetsblend file rebuilds assetsglb whenever modified writes hash file assetscljs figwheel push change compiled cljs file whenever change another bit code tell threejs reload assetsglb hash changed infinitelives infinitelives vehicle buddy crispin use make game tooling mostly gamejams gamejam format great timeboxed mean periodically selfindulgent thing enjoy without taking much family work time gamejams typically hour long learned good technique shipping working code extreme constraint hardcore economy time resource scope required clojurescript figwheel perfect hotloading modified code built tight blender reload integration reason hand drawn graphic consume lot time jam help u really level content side thing like find release game new tool sign release notification infinitelives home page follow u twitter
162,Lobsters,clojure,Clojure programming,a tool to encode numeric ids into emoji that nobody asked for,https://github.com/yogthos/emoji-id,tool encode numeric id emoji nobody asked,join github today sign file permalink emojiid requirement building usage resource license reload reload,convert numeric id emoji reason dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time emojiid clojure utility convert numeric id emoji string back probably nt need exist requirement building lein nativeimage executable compiled targetemojify usage emojify emojify convert numeric id emoji reason resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
163,Lobsters,clojure,Clojure programming,An experimental tool to convert a subset of Clojure into TLA+,https://github.com/Viasat/salt,experimental tool convert subset clojure tla,salt table content language identifier clojure tla concept standard module doc primitive code structure arithmetic logic spec temporal logic set vector map map record map tuples function example salt example tla change log copyright,salt sexpressions action logic temporal experimental tool convert subset clojure tla although experimental used produce real useful tla specification might want use know clojure writing tla specification specifically provides interactive repl based authoring experience facility automated unit test invariant action automatic formatting resulting tla code mapping tla clojure concept may facilitate learning tla use write specification using salt evaluate salt specification repl part development process ready run tla toolbox invoke salt transpiler emit tla code run resulting tla specification tla toolbox ass temporal property specification library available clojars orgclojarsdavidmcneilsalt salt specification file require salt language require saltlang refer clojure repl transpile salt source file tla file using incantation like spit tlafilename salttranspilertranspiletext slurp saltfilename alternatively salt transpiler invoked command line lein uberjar java cp clojuremain saltmain saltfilename table content language identifier following identifier reserved salt language identifier clojure language comment cond conj contains count def defn difference expt first fn intersection let n require select str subset superset union identifier clojure language whose semantics modified match tla every get map mod range rest identifier added specifically support transpiling neither part clojure tla always changed defm eventually fm leadsto line map subsetproper supersetproper var identifier tla language assume cardinality choose constant div domain e except nat unchanged union selectseq seq sf subseq subset variable wf x clojure tla concept clojure clojure example tla tla example set set vector tuple map function map b record b function defn add x operator add x x lambda fn x x lambda selectseq lambda x x lambda lambda except technically tla operator better understood clojure macro rather clojure function however since clojure function easier write higher order function natural write decision taken model tla operator clojure function cause issue function never applied without variable bound whether applied structurally substituted point matter way tla function might usefully considered clojure function course clojure map used clojure function standard module portion tla standard module implemented referenced salt file follows require saltlang refer tlaplusfinitesets refer tlaplusintegers refer tlaplusnaturals refer tlaplussequences refer salt transpiler detect value salt source file produce corresponding extends statement tla output doc primitive integer represented salt tla salt tla code result string sequence character salt tla code hello hello result hello hello symbol identifier example x symbol following salt tla code let x x let x x result boolean literal salt tla code true true result true true salt tla code false false result false false code structure let statement used establish binding symbol value salt tla code let x x let x x result conditional statement expressed salt tla code true truethen result perform many check value use cond note cond allows one condition applied whereas tla matching condition possible result salt tla code let x cond x true x true x default false let x case x true x true x false result arithmetic arithmetic integer salt tla code result subtraction salt tla code result multiplication salt tla code result integer division salt tla code div div result integer division result truncated salt tla code div div result compute modulus two number salt tla code mod result compute exponentiation salt tla code expt result refer set natural number clojure version us small set natural number default note nat invoked function clojure upper limit dynamically bound necessary testing salt tla code contains nat nat result true true logic use standard logic operator salt tla code true false true false result false false operator salt tla code true false true false result true true specify x true must true well salt tla code true false true false result false false use tla operator salt tla code true false true false result false false check equality salt tla code result true true equality work complex type salt tla code b b b b result true true check two item equal salt tla code result true true use standard inequality operator salt tla code result true true true true true true true true specify something true item set salt tla code e x true e x true result true true specify something true item set salt tla code x x x x result false false spec start spec standard namespace declaration salt tla code n buffer require saltlang refer tlaplusnaturals refer tlaplussequences refer module buffer extends natural sequence result define constant serve sort input specification define scope model salt tla code constant client server data constant client server data result make assertion constant salt tla code assume subset client server limit assume client subseteq server limit result true define variable make state salt tla code variable message leader variable message leader result reference variable via convenience identifier var salt tla code var message leader result message leader message leader specify initial state predicate salt tla code message leader message leader result action predicate reference primed variable symbol salt tla code message leader message leader result indicate variable changed salt tla code unchanged message leader unchanged message leader result true departure tla changed variable indicated instead implies variable unchanged salt tla code changed leader unchanged message result true include horizontal separator line spec delimit section salt tla code line result include comment spec salt tla code comment single line comment single line comment result comment multiline salt tla code comment anmulti line comment amulti line comment result temporal logic say something always true salt tla code always next var next var result say something eventually true salt tla code eventually done done result say something true lead something else true salt tla code leadsto p q p q result specify weak fairness salt tla code wf var next wfvars next result specify strong fairness salt tla code sf var next sfvars next result set set literal defined salt tla code result sequence value defined range note range produce set inclusive final value match tla semantics salt tla code range result standard set operation come clojureset namespace salt tla code union difference intersection union intersect result collapse many set one union salt tla code union union result cartesian product two set computed x operator salt tla code x b x b result b b b b b b check set subset another salt tla code subset subseteq result true true define set made set value salt tla code subset subset result check item contained set salt tla code contains result true true filter value set matching predicate salt tla code select fn x x x x result apply function element set salt tla code map fn x x x x result compute size set salt tla code cardinality cardinality result use tla choose operator salt tla code choose x x choose x x result vector clojure vector literal tla tuples salt tla code result extract first item vector salt tla code first head result extract value index note index start salt tla code get result produce new vector containing first item salt tla code rest tail result produce new vector one element changed salt tla code except except result combine content two vector new vector salt tla code result combine two string tla treat tuples salt tla code str hel lo hel lo result hello hello compute length vector string salt tla code count count hello len len hello result extract subsequence index vector salt tla code subseq subseq result filter value vector salt tla code selectseq fn x x selectseq lambda x x result add item end vector salt tla code conj append result generate possible vector set value salt tla code seq seq result seq idiom calling every set predicate translates corresponding tla idiom checking tla tuple salt tla code every seq result true true compute index present vector salt tla code domain domain result convert vector set salt tla code map fn get domain domain result map use map generate possible map set possible key set possible value salt tla code map result define map via fm salt tla code fm result use defm define map like fm assign result name salt tla code defm mymaps mymaps result extract value key salt tla code get fm result map record map literal whose key keywords become tla record special type tla function salt tla code b b result b b access value tla record salt tla code get b b b b result use domain map obtain key salt tla code domain b domain b result b b produce new tla record modified value like associn salt tla code except b c b b c except b result b c b c produce new nested tla record modified value like associn salt tla code except x b x c x b x x b x c x except b x result x b x c x x b x c x produce new tla record new value computed lambda function like updatein salt tla code except x b x c x b x x b x c x except b x result x b x c x x b x c x except b x produce new tla record new value lambda like combining associn updatein salt tla code except x b x c x b x new x b x c x except b x new result new b x c x new b x c x use map generate possible tla record pair key value set salt tla code map name bob sue age name bob sue age result name sue age name bob age name sue age name bob age name bob age name bob age name sue age name sue age define map via fm autoconvert tla record salt tla code fm b b result b b map tuples map whose key start proceed increment treated tla tuples salt tla code result use domain map correspond tla tuples salt tla code domain domain result extract value tla tuple index note index start salt tla code get result define map via fm autoconvert tla tuple salt tla code fm result function define function using fn depending context transpiled different form salt tla code selectseq fn x x map fn x x selectseq lambda x x x x result define new tla operator defn salt tla code defn add x x add x x result use docstring defn salt tla code defn add docstring x x docstringadd x x result invoke function normal salt tla code add add result define recursive function salt tla code defn add x r x add x r r recursive add add x r x add x r else r result define higherorder function salt tla code defn work f b f b work f b f b result define function take argument usual salt tla code defn work union b work union b result define function take argument usual docstring salt tla code defn work docstring union b docstringwork union b result invoke function argument salt tla code work work result define tla operator rely constant def salt tla code def work union b work union b result reference tla operator relies constant salt tla code work work result example salt following full sample salt file comment example spec ported http githubcomtlaplusexamplesblobmasterspecificationstransactioncommittwophasetla n twophase require saltlang refer constant rm variable rmstate tmstate tmprepared msg defn message union map type prepared rm rm map type commit abort defn tptypeok contains map rm working prepared committed aborted rmstate contains init committed aborted tmstate subset tmprepared rm subset msg message defn tpinit rmstate fm rm rm working tmstate init tmprepared msg defn tmrcvprepared rm tmstate init contains msg type prepared rm rm tmprepared union tmprepared rm changed tmprepared defn tmcommit tmstate init tmprepared rm tmstate committed msg union msg type commit changed tmstate msg defn tmabort tmstate init tmstate aborted msg union msg type abort changed tmstate msg defn rmprepare rm get rmstate rm working rmstate except rmstate rm prepared msg union msg type prepared rm rm changed rmstate msg defn rmchoosetoabort rm get rmstate rm working rmstate except rmstate rm aborted changed rmstate defn rmrcvcommitmsg rm contains msg type commit rmstate except rmstate rm committed changed rmstate defn rmrcvabortmsg rm contains msg type abort rmstate except rmstate rm aborted changed rmstate defn tpnext tmcommit tmabort e rm rm tmrcvprepared rm rmprepare rm rmchoosetoabort rm rmrcvcommitmsg rm rmrcvabortmsg rm defn tpspec tpinit always tpnext rmstate tmstate tmprepared msg example tla following full sample tla output produced salt file module twophase example spec ported http githubcomtlaplusexamplesblobmasterspecificationstransactioncommittwophasetla constant rm variable rmstate tmstate tmprepared msg message type prepared rm rm union type commit abort tptypeok rmstate rm committed prepared aborted working tmstate committed aborted init tmprepared subseteq rm msg subseteq message tpinit rmstate rm rm working tmstate init tmprepared msg tmrcvprepared rm tmstate init type prepared rm rm msg tmprepared tmprepared union rm unchanged rmstate tmstate msg tmcommit tmstate init tmprepared rm tmstate committed msg msg union type commit unchanged rmstate tmprepared tmabort tmstate init tmstate aborted msg msg union type abort unchanged rmstate tmprepared rmprepare rm rmstate rm working rmstate rmstate except rm prepared msg msg union type prepared rm rm unchanged tmstate tmprepared rmchoosetoabort rm rmstate rm working rmstate rmstate except rm aborted unchanged tmstate tmprepared msg rmrcvcommitmsg rm type commit msg rmstate rmstate except rm committed unchanged tmstate tmprepared msg rmrcvabortmsg rm type abort msg rmstate rmstate except rm aborted unchanged tmstate tmprepared msg tpnext tmcommit tmabort e rm rm tmrcvprepared rm rmprepare rm rmchoosetoabort rm rmrcvcommitmsg rm rmrcvabortmsg rm tpspec tpinit tpnext rmstate tmstate tmprepared msg change log version introduced symbolic evaluator evaluates possible simplifies testing action predicate copyright copyright c viasat inc right reserved redistribution use source binary form without modification permitted provided following condition met redistribution source code must retain copyright notice list condition following disclaimer redistribution binary form must reproduce copyright notice list condition following disclaimer documentation andor material provided distribution software provided copyright holder contributor express implied warranty including limited implied warranty merchantability fitness particular purpose disclaimed event shall copyright holder contributor liable direct indirect incidental special exemplary punitive consequential damage including limited procurement substitute good service loss use data profit business interruption however caused theory liability whether contract strict liability tort including negligence otherwise arising way use software even advised possibility damage
164,Lobsters,clojure,Clojure programming,Clojure of the day: Display random (doc) from clojure.core namespace,https://github.com/tomekw/cotd,clojure day display random doc clojurecore namespace,cotd usage http githubcomtomekwcotdreleases building,cotd clojure day display random documentation function clojurecore namespace usage download binary release page http githubcomtomekwcotdreleases cotd clojurecoreread stream stream eoferror eofvalue stream eoferror eofvalue recursive opts stream read next object stream must instance javaiopushbackreader derivee stream default current value opts persistent map valid key readcond allow process reader conditionals preserve keep branch feature persistent set feature keywords reader conditionals eof eof return value unless eofthrow throw specified throw note read execute code controlled readeval used trusted source data structure interop use clojureednread building tweak graalvmhome javahome scriptbuildsh run
165,Lobsters,clojure,Clojure programming,Working with Clojure: The First Three Months,https://ltriant.github.io/2019/06/19/clojure-the-first-three-months.html,working clojure first three month,working clojure first three month vim nerdtree fzf vimairline vimfugitive vimfireplace vimcider cljfmt vimsurround pareditvim color scheme article brutalist emacs theme,working clojure first three month june past ten year writing code professionally mostly perl also python php bit java c month ago started new job working distributed system clojure used clojure quick prototype prior starting job jump writing clojure full time real nontrivial project interesting vim started using vim year ago university using ever since although knew intellij story clojure super popular productive almost developer team using intellij plus one diehard emacs fan still wanted use vim caveat thing got difficult would concede defeat move intellij year regardless language using settled three main plugins better navigation overview nerdtree project overview fzf fast navigation know specifically file want jump vimairline much better status bar better tab bar vimfugitive integration thing give everything need navigate large project fzf big game changer tried deprecate use nerdtree entirely place fzf still find using nerdtree certain circumstance happy keep plugins using specifically working clojure vimfireplace king plugins clojure offering repl integration documentation lookup ability jump specific function even another file deep dependency somewhere vimcider offer extra function including cljfmt integration namespaceimport cleanup couple bug plugin required couple upstream pr fix vimsurround addingremovingchanging bracket around something although clojurespecific plugin obvious benefit manipulating parenthesis square bracket pareditvim automatically adding closing parenthesis keep thing balance took bit time get used occasionally cause problem especially resolving merge conflict vim time got way worthwhile plugin keep around color scheme perhaps symptom getting older year using dark background dark colorschemes eye finally started feel tired strained reading handful article subject article brutalist emacs theme initial trigger decided try hand creating light colorscheme us obvious highlighting certain thing like opposing bracket current line number etc bold underline noteworthy thing language keywords type color case static string ended work progress colorscheme debating whether change orange something else alternative color tried still like orange specifically targetted clojure colorscheme look bad language either even ten year perl still refining working environment bit bit mean complete great place start
166,Lobsters,clojure,Clojure programming,Deep Learning for Programmers - new release 0.6.0,https://aiprobook.com/deep-learning-for-programmers?release=0.6.0&src=lobsters,deep learning programmer new release,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c table content part getting started part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter deep learning learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c content table content part getting started chapter determined part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book
167,Lobsters,clojure,Clojure programming,In Search of a Good Way to Learn Programming,https://savo.rocks/programming/2019/07/24/in-search-of-a-good-way-to-learn-programming.html,search good way learn programming,search good way learn programming enclosed approach partial struggle previous post clojurscript unraveled clojure brave true seems good way learn programming clojure brave true,search good way learn programming starting scratch hard especially taking teachyourself approach blog post going think beginner perspective would good approach learn programming enclosed approach partial may know trying learn clojureclojurescript almost identical far know indeed literature teach language seems book focus describing language seems missing opinion book written beginner programming teach programming teaching language talk concurrency heh struggle previous post talked clojurscript unraveled seems like good book reference clojurescript language learn programming sadly lot clojurians recommended clojure brave true gave try last time wanted learn clojure year ago seems like interesting book lot fun example time seemed like book someone already proficient least one programming language fair maybe read thoroughly maybe seems good way learn programming conclusion reached time never perfect way learn programming appears best way dabble language making software simplest commandline apps return greeting trying make complex apps big part realize asking around internet hoping experienced folk willing help clojurians definitely writing blog post definitely decided read clojure brave true take time make sure skip chapter solid understanding material presented also try active term writing learning progress sure people much experience able detect shortcoming steer good path expect lot stupid question one true programming beginner might ask feel free leave comment contact social network useful advice want connect
168,Lobsters,clojure,Clojure programming,Release 0.2.0 | Numerical Linear Algebra for Programmers: An Interactive Tutorial with GPU etc,https://aiprobook.com/numerical-linear-algebra-for-programmers/?release=0.2.0&source=lobsters,release numerical linear algebra programmer interactive tutorial gpu etc,numerical linear algebra programmer two friend adorable book scroll read pitch download sample chapter open source library book programmer interactive dynamic direct link theory implementation incredible performance intel amd cpu mkl nvidia gpus cuda cublas amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter middleman revenue go towards open source work ai book walk walk complete executable code inside stepbystep instruction full path theory implementation superfast implementation learn linear algebra code example explore cpu run gpu integrate intel mkl nvidia cublas performance library learn nut bolt understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel mkl gpus learn cuda cublas learn opencl hardware nvidia amd intel touch c download sample chapter draft read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor table content part getting started soon hello world soon vector matrix linear algebra api soon polymorphic acceleration soon part linear algebra refresher available eigenvalue eigenvectors available matrix transformation available linear transformation available part high performance matrix computation available using matrix efficiently available linear system factorization available singular value decomposition svd available orthogonalization least square available part gpu acceleration gpu computing crash course cuda cublas nvidia gpus opencl clblast amd gpus generating random matrix available mean variance correlation available principal component analysis pca available appendix setting environment jvm read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor get early help make book awesome deep learning programmer,numerical linear algebra programmer two friend adorable book scroll read pitch download sample chapter open source library book programmer interactive dynamic direct link theory implementation incredible performance intel amd cpu mkl nvidia gpus cuda cublas amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter middleman middleman revenue go towards open source work programmer ai book walk walk complete executable code inside stepbystep instruction full path theory implementation actual code superfast implementation book either mathonly monograph academic written nontechnical end user linear algebra learn linear algebra code example explore cpu run gpu integrate intel mkl nvidia cublas performance library learn nut bolt understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel mkl gpus learn cuda cublas learn opencl hardware nvidia amd intel touch c download download sample chapter draft buy read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor content table content part getting started soon hello world soon vector matrix linear algebra api soon polymorphic acceleration soon part linear algebra refresher available eigenvalue eigenvectors available matrix transformation available linear transformation available part high performance matrix computation available using matrix efficiently available linear system factorization available singular value decomposition svd available orthogonalization least square available part gpu acceleration gpu computing crash course cuda cublas nvidia gpus opencl clblast amd gpus generating random matrix available mean variance correlation available principal component analysis pca available appendix setting environment jvm subscribe read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor get early help make book awesome book deep learning programmer
169,Lobsters,clojure,Clojure programming,Judge a Programming Book by its Cover,https://dragan.rocks/articles/19/Judge-a-clojure-programming-book-by-its-cover,judge programming book cover,repl,needed idea cover series book writing interactive programming artificial intelligence budget close zero ca nt call artist many idea came went none distinctive enough nt communicating message book series main message book series nt tutorial teaching contemporary programming skill hope much book series interactive approach every concept writing immediately illustrated executable code try right away clojure amazing superconsole repl provides genuine connection programmer running program programming book go beyond theory stop cute demo code write fast flexible extendable real thing comprehensive approachable book strictly artificial intelligence also programming foundation important building ai software several challenging area math tough ai abstract functional programming funky high performance computing gpu get together tough sell finally though answer fell lap meet dog bird two friend bravely immerse challenging activity make effortless fun book great beginner easy everything simply explained nt expert start become one progress
170,Lobsters,clojure,Clojure programming,Advice about data modeling in Clojure,https://gist.github.com/levand/c97dd272bfd2f88fe5089eb81f85f98f,advice data modeling clojure,,since come time thought write basic idea around domain modeling clojure relate keyword name spec firmly grasping concept help u write code simpler cleaner easier understand clojure dataoriented language familiar map vector set keywords etc however data good data equally good still possible write bad data clojure good data well defined easy read never ambiguity given data structure represents messy data inconsistent structure overloaded key mean different thing different context good data represents domain entity logical model bad data represents whatever convenient programmer given moment good data stand reasoned without knowledge codebase bad data deeply tightly coupled specific generating consuming function found following practice useful maximize goodness data clojure program hard fast rule heuristic writing better code make mental distinction public data structure private data structure private data structure used internally function body passed returned namespaceprivate function public data structure input output public function namespace programmer reasonably confident control production consumption private data whatever convenient use nonnamespaced keywords tightly couple data code etc restriction expedience developer preference public data contrast use namespaced keywords represent domain entity spec every map public data correspond identifiable domain entity type nt mean type need externally defined database although may entity type logically independent concept prepared conversation refer documentation articulate invariant expectation spec expected attribute via skeys identify codebase used note mental exercise defining entity type necessarily heavyweight process exhaustively enumerating every type describes already case wellfunctioning codebase shared set domain known concept known representation data nothing complicated keysattributes entity map namespaced keywords attribute uniquely identify concept matter found codebase example accountnumber mean thing everywhere see accountnumber key know complete information type formatting expected range value related keyword single spec spec given keyword occur codebase else one nondeterministically overwritten namespace portion keyattribute reflect entity type upon may found example account entity map might accountname accounttype key map containing account something key presumed represent account application domain model whether defined explicitly implicitly entity type exclusive data fit multiple type idiomatic common attribute apply multiple entity type example instead specific accountid might use generic entityid mean map accountname entityid key logically account entity somewhat careful reuse attribute sake reusing make sure represent logical concept used consistently across codebase general rule thumb ever find writing case statement determine process attribute probably used two different attribute start related entity never nailed rigorously borrow language formal logic set permissible attribute given entity type open entity one type nt mean ca nt also additional attribute beyond enumerated type code respect break given entity unexected unknown attribute might perfectly valid meaningful different part system liberal accept conservative send keyword namespaces multiple part separated period semantic implication strongly defined following us reasonable full globally unique disambiguation idomatic java class name rdf attribute example ukcobigbankaccountnumber application subsystem prefix disambiguate two different concept name eg taxaccountnumber v clientaccountnumber indicating containment relationship substructure example map value accounttransaction might contain key accounttransactionamount accounttransactiontype careful however nt use idiom might want refer subentity indepentently container remember namespace refer entity type person might personaddress map nt mean use personaddresspostalcode address meaningful entity regardless life probably want talk address personaddress something like addresspostalcode probably appropriate keyword name whatever make sense attribute caveat entity type already expressed namespace ought reencode name eg prefer keywords like accountid entityaccountid
171,Lobsters,clojure,Clojure programming,Clojure(Script): What do you think,https://savo.rocks/programming/2019/07/11/clojure(script)-what-do-you-think.html,clojure script think,clojure script think twoyear pause starting clojure script literature chose bozhidar batsov cider prelude clojurescript unraveled clojure brave true clojurescript unraveled clojurescript unraveled clojure brave true purpose blog post,clojure script think twoyear pause check gap previous article published notice two year difference truth job insecurity leave enough time focus learning longterm think learning programming writing blog post quite time changed starting bunch deadend shortterm job landed relatively stressfree position working application network department one regional bank country going away anytime soon came freedom spend free time focusing programming clojure script literature chose well wanted learn clojure quite time always heard praise simple powerful language community also seems great lot people experienced programmer always willing discus difficulty beginner face struggle learn clojure language awesome develop code realtime thanks repl make process le disturbing allows developer focus program design also code seems clean meaning long block code like javascript example half line course guy interesting thing many people putoff language lisp family say many parenthesis always struck odd cause even though sometimes couple parens stacked end code block javascript even spread newline another reason using emacs default texteditor ide trying learn programming one great clojurian named bozhidar batsov made excellent addon cider excellent clojure development environment also using prelude author prelude batsov enhanced emacs setup make emacs experience much pleasant powerful clojurescript unraveled wanted start material leaning towards beginner yes know clojure brave true wanted try something even beginner friendly think found book called clojurescript unraveled focused clojurescript understand similar clojure unlike java javascript since web development beginnerfriendly decided try book try learn basic clojure script applied realworld finish clojurescript unraveled certainly give clojure brave true chance purpose blog post plan frequently publish blog post learning progress hope enough people enjoy reading helping stuck something giving useful advice maybe recall beginning struggled understand powerful yet notsoeasy grasp language experience please leave comment suggestion maybe book know good beginner book could start reading finish one currently useful comment general thanks reading
172,Lobsters,clojure,Clojure programming,Exposing the design pattern at the heart of Rack Middleware,https://www.simplybusiness.co.uk/about-us/tech/2019/07/rack-middleware-pattern-description/,exposing design pattern heart rack middleware,refactoring hammock time rack name pattern composing request processing pipeline nesting simple handler function context therefore middleware combined handler also handler example pattern rack rack builder python web server gateway interface python ring ring handler comp boot task boot migration pipeline simply business related pattern chain responsibility decorator conclusion ready start career simply business find,rack middleware based powerful flexible nested handler architecture broad application many kind data processing pipeline web apps extracted design pattern identified nonweb use case help u name one project software engineer simply business working recently large data import customer insurance policy record decommissioning legacy system originally written java oracle critical migrate customer insurance policy onto new railsbased systema number factor made job complex data schema differed significantly two systemssome policy record far le straightforward others example customer changed insurance requirement midyear renewal timenot policy needed permitted new system andwe needed perform extra lookup translation data imported itour original code quite imperative many special case refactoring hammock time settled reasonably clean design inspired rack middleware interfacewhat name design modelled rack middleware nt use rack middleware alone broad term cover many different kind software identified similar design several different application space three different programming language think design pattern nt found named design pattern literaturetherefore writing design pattern hope somebody recognise name pattern pattern composing request processing pipeline nesting simple handler functionscontextyou code accepts request perform action return response action might example api request background job submission response typically either result request form job submission idin addition performing action requirement associated ityou need augment request data data source action performed example may customer number need corresponding customer retrieved build job number use test required package build completed successfullyyou might refuse perform action depending original request extra data fetched context clientserver system could requesting user authorised migration pipeline might record migratedyou want instrument action way logging whether happened measuring long took notifying downstream system record transferredyou want change context action executed example running inside exception handler nt fail unforeseen circumstancesthese additional task often independent nt interact much wish able test task independently overall flow code structure make clear concern separatethereforebreak computation handler performs action handler additionally middleware may chain middlewares perform one ancillary task middleware responsible calling next middleware chain request parameter passing response back caller final middleware line call theaugment request receives way calling next middlewareafter calling next middleware change response returning callerdecide call next middleware instead return response indicating action skipped failedperform sideeffects logging request notifying interested system request made actioned middleware combined handler also handlerthe central principle make new handler putting middleware front handler already recursively putting another middleware front one madethis work handler function accepts request return response put middleware front handler get function accepts request optionally preprocessing call handler optionally postprocessing handler return value return response ignore implementation detail look interface called request returned response interface handler wrapsexamples patternrackruby programmer may familiar pattern basis rack middleware rack specification interface ruby web application typically built rail sinatra web application server run eg puma unicorn webrick rack application handler nomenclature specified object implement call method accepts request hash return response array containing three valuesconsider simple rack handler implemented object class myapp def call request contenttype textplain hello world end end app myappnew web application often nonfunctional requirement authentication authorisation logging want run irrespective whatever resource requested could add concern handler middleware pattern allows u separate example middleware randomly refuse request class feelingluckyauth def initialize app app app end def call request fire six shot five authenticated rand toi authenticatedzero appcall requestmerge lucky true else access denied end end end use middleware rack application choose app feelingluckyauthnew myappnew app application wrap middlewares onto app logrequestasjsonnew feelingluckyauthnew myappnew number step increase might look succinct way writing app feelingluckyauth logrequestasjson getcustomerbyid reduce myappnew app middleware middlewarenew app fact rack gem provides class rack builder implement dsl compose middlewares mannerthe advantage composable interface easy see entire product grown provide pluggable functionality around http request example devise provides authentication authorisation airbrake provides error handling new relic provides performance monitoring python web server gateway interfacepython wsgi python rack ruby fact would fairer write way around understanding wsgi predates rack probably inspired python programmer look familiarringring analogous standard clojure ring handler function accepts request argument return keyvalue data structure key status header body simple example defn whatismyip request status header contenttype textplain body str ip address remoteaddr request middleware pattern ring differs previously seen implemented using function class create ring middleware write function accepts handler argument return new function wrap handler example ring middleware add contenttype header response handler applied defn wrapcontenttype handler contenttype fn request call next handler add header response returning caller let response handler request associn response header contenttype contenttype def wrappedapp wrapcontenttype whatismyip textplain neat kind person find stuff neat mean build pipeline middleware using clojure standard comp function need invent dslsboot tasksthe ring middleware system also form inspiration design boot boot clojure build system make jar artifact clojure application boot function return middleware known task compose task comp n demobootbuild require bootcore core boottaskbuiltin task coredeftask build build project reason java need create pom making jar file comp taskpom taskjar taskinstall migration pipeline simply businesswe used pattern build data export pipeline large complex migration project move insurance policy data legacy system replacementour system implement middleware object following rack approach also written small helper class construct pipeline migration step without giving much away unpublished proprietary code mean define processing pipeline like tool pipelinenew addstep tool getpolicyhistory addstep tool withloggedoutcome log addstep tool rejectifunsupportedcheckpolicyhistory addstep tool flagwithinretentionifel addstep tool rejectifnotflaggedwithinretention addstep tool rejectifactivechainnotyetmigrated addstep tool getcustomerfromrails rolodexapi addstep tool makechain pimmsapi addstep tool associatecustomerwithchain rolodexapi addstep tool markcompletedafterwards log pimmsapi addstep tool migratepoliciesandnotes log pimmsapi notesapi call oldpolicynumber oldpolicynumber add requirement policy previous claim must imported example create step called tool flagwithinretentionifclaims add appropriate place pipeline change anywhere else needed moreover step functional free sideeffects meaning simpler test simpler reason aboutrelated patternsthe chain responsibility pattern structurally similar arises different set force whereas middleware pipeline usually run step request chain responsibility expects first handler know handle request return early without calling rest chainthe decorator pattern allows behaviour added individual object dynamically without affecting behaviour object class middleware pipeline could perhaps viewed nested set decorator using composition instead inheritancerack described application pipeline pattern pattern seems defined differently different author nt found writeup describes recursivelyconclusionby adopting pattern achieved easily testable code greater code reuse different policy required different import strategy ability iterate migration last point significant enabled u start migrating straightforward policy sooner add support complex scenario went along confidence unlikely break simple case added difficult onesso work date imported policy legacy system representing vast majority customer policy data result able disable access legacy system staff time fast approaching able unplug completelyready start career simply business want know like work tech simply business read approach tech check current vacanciesfind
173,Lobsters,clojure,Clojure programming,Clojure: React Server Side Rendering with GraalVM,https://nextjournal.com/kommen/react-server-side-rendering-with-graalvm-for-clojure,clojure react server side rendering graalvm,,nextjournal perform server side rendering notebook provide better user experience especially published notebook visitor instantly see content notebook client side app load however use javascriptonly dependency like codemirror prosemirror prevents u server side rendering directly clojure jvm used separate nodejs version browser app perform task necessitated whole lot code expose clojurescript app via http interface clojure app running different vms
174,Lobsters,clojure,Clojure programming,Deep Learning for Programmers - release 0.5.0 [book WIP],https://aiprobook.com/deep-learning-for-programmers/,deep learning programmer release book wip,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c table content part getting started part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter deep learning learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c content table content part getting started chapter determined part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book
175,Lobsters,clojure,Clojure programming,Racket vs. Clojure,http://programming-puzzler.blogspot.com/2010/08/racket-vs-clojure.html,racket v clojure,racket data structure enter clojure clojure perfect,asked several people explain use clojure professional work rather racketabout racketi using racket dialect scheme several year teach kid program although racket great first language definitely toy language fact racket offer number interesting feature found language making attractive option realworld work racket put practice stateoftheart research macro continuation contract interoperation static dynamically typed code integrated scribble system make easy provide highquality documentation andor write literate program come pleasant lightweight ide complete integrated debugger profiler well innovative feature specialized macro debugger fan functional programming dynamic typing know write think racket many year teaching feature slam dunk use professionally right well data structuresi discovered factor determines programming productivity set data structure builtin language easy work many year python set standard offering easy syntax manipulate extensible array called list python hash table called dictionary python tuples immutable collection serve key hash table recent version python set mutable immutable heap queuesracket dialect scheme place greatest importance singlylinked list ok reasonable starting point lot linked list also offer vector oldfashioned nonextensible array fixed length want fixedlength array primary data structure even c stl offer extensible vector vector mutable plus minus plus side allows efficiently write certain class algorithm hard write linked list serf purpose different linked list value language huge minus racket simply nt oriented towards working conveniently mutable vector working mutable data structure conveniently demand certain kind control structure certain kind syntax write vectorbased algorithm racket look verbose ugly would rather read vectorset vectorref get past verbose syntax still fundamental issue pattern change move using list vector way working fundamentally different easy way change code using one anotherracket go scheme implementation providing builtin data structure also offer example hash table recently set added interface interacting hash table total mess literal expressing hash table use dotted pair want construct hash table using forhash syntax need use value want iterate keyvalue pair hash table would nice easy way recursively process sequence keyvalue pair way would process list unfortunately racket provides builtin lazy liststream need realize entire list even want racket nt provide builtin function give back list key value pair hash table instead encouraged iterate pair using idiosyncratic version construct using specific deconstructing pattern match style capture sequence keyvalue pair used nowhere else racket speaking loop earth decide make parallel loop common behavior require longer name useful nested loop version put simply using hash table racket frequently awkward filled idiosyncracies hard rememberthere downloadable library offer assortment data structure since library made variety individual ported variety scheme implementation interface interacting data structure even inconsistent builtins already far ideali sure many programmer live awkwardness builtin data structure get cool feature racket offer deal breakerenter clojureclojure get data structure right good assortment collection type built list lazy list vector hash table set sorted hash table sorted set queue builtin data structure persistentimmutable right even vector persistent work persistent vector huge asset experienced clojure frustrated language nt offer similar data structure consistency working persistent structure big deal mean use exact pattern idiom work structure vector easy work list equality simplified everything used key hash tabledata structure clojure get little bit syntactic support tremendous amount every little bit help code little easier read stand vector b c stand hash table lookup bit terse racket v instead vectorref v hash table sufficiently lightweight clojure use use racket structs defined definestruct use one consistent lookup syntax rather typespecific accessors eg age person rather personage person get important deal structure within structure quickly get unwieldy racket easy enough clojure using getin also representing structured data clojure hash table easily create nondestructive update object certain field changed work well nested data racket structs may offer immutable update future version none proposal seen address issue updating nested structured data furthermore clojure associative update function assoc handle multiple update one function call contrast assoc h b hashset hashset h b even better process iterating collection consistent clojure collection treated list write algorithm traverse using pattern empty firstrest use list mean powerful higherorder function like mapfilterreduce work well vector list also create new collection type hook builtin sequence interface builtin sequencing function automatically work well collectionalthough sequencing function work collection generally produce lazy list mean use good old recursion solve many problem tackle forbreak whilebreak language example first filter even coll give first even number collection whether list vector set etc spaceefficient manner nt need generate intermediate list even number collection garbage generated along way garbage collected immediately relatively little overhead clojure also make easy pour lazy sequence collection choice via racket lack builtin lazy list make difficult use mapfilteretc general processing collection use mapfilteretc potentially generate lot intermediate list use stream library probably designed scheme dialect naming scheme api nt match racket builtin list function integrate well racket sequencing construct often end writing function need scratch eg findfirstevennumber rather composing existing building block special case use one new construct like case forfirsta polymorphic approach applied clojure design assoc work vector hash table sorted hash table associative collection hook custom collection far easier remember concise write proliferation vectorset hashset etc find racket also make various collection interchangeable clojure making easier test different alternative performance implication fewer localized change one codesummary clojure provides full complement immutable data structure need everyday programming bit syntactic support making manipulation concise pleasant collection manipulated small number polymorphic function easy remember use traversal collection uniformly accomplished sequence abstraction work like lazy list mean clojure higher order sequence function also apply collectionsclojure perfectthe ides available clojure significant drawback get work done ides probably disappointment relative used language including racket debugging difficult every error generates ridiculously long stack trace list java function along maybe lucky actual clojure function thing went awry many clojure core function written philosophy make guarantee bad input might error might return spurious answer cause something blow far far away true origin problemclojure inherits numerous limitation idiosyncracies java tailcall optimization continuation method true closure ca nt passed directly higherorder function proliferation nil null pointer exception slow numeric performance compromise way hashing equality work certain thing achieve java compatibility slow startup timesome people love clojure specifically sits top java give access favorite java library frankly yet find java library actually want use something java seems turn every library insanely complex explosion class java programmer mistakenly seem think javadocproduced list every single class method constitutes good documentation java interop nuisance helpclojure number cool new idea many unproven time tell whether truly valuable people get excited feature feel fairly neutral roadtested example clojure stm implementation seems promising report suggest certain contention scenario longer transaction never complete keep getting preempted shorter transaction agent agent ca nt keep request demanded agent mailbox eventually exhaust resource perhaps approach brittle realworld development var provides thread isolation interacts poorly whole lazy sequence paradigm clojure built around multimethods clojure provides multimethod system far simpler say clos requires explicitly choose preference inheritance conflict early report suggest limit extensibility protocol interesting variation interface clear easy compose implementation partial default implementation transient nice idea speeding singlethreaded use persistent data structure transient nt respond interface persistent counterpart though limiting usefulness transient already rethought likely reworked something newso hard get excited aspect clojure remains seen well feature hold realworld usei sure many programmer clojure drawback unproven idea would deal breaker care different thing clojure clean coherent design api working builtin data structure good overall prefer working clojure working racket
176,Lobsters,clojure,Clojure programming,"Clojure + deps.edn, a basic guide",https://tomekw.com/clojure-deps-edn-a-basic-guide/,clojure depsedn basic guide,leiningen clojure cli tool creating project managing source test path managing dependency documentation example running test kaocha building selfcontained jat aka uberjar cambada uberdeps managing outdated dependency depot summary clojars,rather long break programming clojure decided give another go come managing clojure project leiningen defacto standard tool recently clojure cli tool becoming popular though switching yetanotherbuildtool pragmatic value perfect learning purpose build tool expect perform certain task creating project managing source test path managing dependency running test building selfcontained jar aka uberjar managing outdated dependency let see performed using clojure cli tool aka depsedn creating project leiningen allows generate project structure simply invoking lein new template projectname get lot free really needed done clojure cli tool imagine simple project allows add divide number also print example calculation invoked start simply creating new directory mkdir cdeps cd cdeps let add empty depsedn file start adding actual code project managing source test path demonstrate feature managing source path put code srcmainclojure mkdir p srcmainclojure depsedn magic set path file depsedn path srcmainclojure write calculator code srcmainclojurecomtomekwcdepscalculatorclj n comtomekwcdepscalculator defn plus b b defn divide b b managing dependency simple project real need add external dependency always specify clojure version would like use though depsedn path srcmainclojure deps orgclojureclojure mvnversion clojure cli tool allow specify local git dependency see documentation example running test calculator wrote super simple still write test testmainclojurecomtomekwcdepscalculatortestclj n comtomekwcdepscalculatortest require clojuretest refer comtomekwcdepscalculator refer deftest addingnumbers plus deftest dividingnumbers divide deftest dividingnumbersbyzero thrown arithmeticexception divide need run make sure pas add alias command run test runner extra dependency picked kaocha also need tell runner test located depsedn path srcmainclojure deps orgclojureclojure mvnversion alias test extrapaths testmainclojure extradeps lambdaislandkaocha mvnversion mainopts kaocharunner test report clj atest test assertion failure building selfcontained jat aka uberjar presume would like print example calculation console let add code srcmainclojurecomtomekwcdepscoreclj n comtomekwcdepscore genclass require comtomekwcdepscalculator refer defn main args println format plus println format divide run main function invoke following command clj comtomekwcdepscore could burdensome user calculator install clojure avoid package project standalone java jar number tool like cambada decided try uberdeps let add proper configuration first depsedn path srcmainclojure deps orgclojureclojure mvnversion alias test extrapaths testmainclojure extradeps lambdaislandkaocha mvnversion mainopts kaocharunner uberjar extradeps uberdeps mvnversion mainopts uberdepsuberjar target package project simply run clj auberjar uberdeps packaging srcmainclojure orgclojureclojure orgclojurecorespecsalpha orgclojurespecalpha uberdeps packaged m run project java java cp clojuremain comtomekwcdepscore managing outdated dependency often needed manage version dependency put depsedn file tool named depot depsedn path srcmainclojure deps orgclojureclojure mvnversion alias test extrapaths testmainclojure extradeps lambdaislandkaocha mvnversion mainopts kaocharunner outdated extradeps olicaldepot mvnversion mainopts depotoutdatedmain outdated uberjar extradeps uberdeps mvnversion mainopts uberdepsuberjar target everything date clj aoutdated date summary guide cover basic usecases daily workflow clojure course always presented like deploying project clojars process still fully automated try cover next post source code post found
177,Lobsters,clojure,Clojure programming,Thoughts on spec,http://sulami.github.io/posts/my-thoughts-on-spec/,thought spec,clojure spec wrong spec spec macro schema spec alpha namespacing function spec definition,posted july beginning year started new job fortunate enough writing clojure fulltime believe clojure well crafted language enables developer like others also grievance report want prefix saying love clojure despite fault constructive criticism piece anything else spec want discus today clojurespec gradual typing solution shipped clojure since course aware spec officially alpha second alpha version might address point tried alpha yet lot people using alpha mostly looking alpha post still feel free contact tell alpha improve thing case familiar spec quick rundown work clojure dynamically typed language meaning type annotation source code unlike say haskell curlbrace language remove lot visual clutter language designed way function operate type maximum flexibility also mean sometimes thing break run time due type error make dealing type easier spec allows place type definition strategic place say entry exit point app module ensure idea structure type data still line reality benefit approach static typing encapsulate part software type safety without deal encumbrance internals define contract outside stay flexible implementation practice look like n specdemo require clojurespecalpha clojurespecgenalpha gen sdef name string sdef age posint sdef person skeys requn name age svalid person name john age true sexplain person name failed string name name spec specdemoname name failed contains age spec specdemoperson gengenerate sgen person name age snippet demonstrates creating spec person subspecs name age validates data spec explains data validate also generates random data compliant spec last bit incredibly useful testing imagine advanced feature shown like spec output type function gist wrong spec spec macro spec implemented using macro compiletime expansion think template metaprogramming c brings limitation especially noticeable clojure like lisp code treated data many part software introspectable run time spec defined easy extract data contrast schema clojure library essentially thing got started spec schema schema hash map easily constructed introspected run time schema problem community seems generally flock spec officially blessed version situation repeatedly seen one spec defining specific representation entity example one spec extends another one practical example augmenting entity additional data output representation modified version input type define spec superset another spec direction using sor point already stuck spec get list field easily spec would nice able define one spec term flat data would also available run time would incredibly helpful use something like selectkeys way working around example using eval wrapping spec macro another layer macro hack solution spec alpha promise solve particular problem separating symbolic spec spec object former flat data also generated programmatically spec alpha work way hope solved soon documentation look promising far namespacing spec intent using namespaces keywords general good idea many developer including using namespace key give context use example personname different spec companyname problem overloading namespaced keywords existing clojure feature namespaces person company actually exist want clutter key long prefix like myappentitiespersonname make match real namespace namespaced keywords namespace namespace actually exist everything related keywords work well except want use spec another namespace alias namespace shorten need require namespace need exist workaround created fake namespaces past using helper actually lead another problem question place spec first place spec come global centralised registry spec alpha opt theory allows defineregister spec place like access anywhere without know come requiring potential opaque magical actually good feature opinion trivial override spec reloading experienced issue evaluation order yet due spec referring spec name define dependency spec fact system pick accordingly current solution file namespace every entity required aliased normally problem relationship spec soon one spec need include another spec dependency get muddled experimented special namespace spec shared across many spec far ideal wish cleaner way especially leveraging global registry function spec definition mentioned spec also allows instrumenting function semantics bit wonky opinion see defn double x x sfdef double args scat x int ret int fn ret args x naive spec restricts output type integer okay case fn key describes relationship output case actually absurdly strict example two issue first fn definition tends elaborate hard understand glance even simple case lot going use anonymous function help practice key optional omit almost always think formal assertion want make output also reasonably simple encode want make several separate assertion output almost avoid breaking spec piece point predicate exist purely spec issue decoupled actual function definition theory place spec different namespace refer function using fully qualified name tempting especially looking previous point spec potential far longer actual function definition function exists conceptually two place two place kept sync move rename modify function almost way modify spec first find spec problem see fn used make assertion function almost case made unit test well fact unit test meant exactly asserting single assumption unit time condition could well test called result equal twice input value function usually instrumented locally andor testing incur nonnegligible overhead would argue provide significant assurance unit test would much rather drop fn key include type declaration actual function definition incidentally schema work sdefn double sint x sint x end looking forward next iteration spec hope address many issue possible already blown away much better alternative available language
178,Lobsters,clojure,Clojure programming,"Farewell, Grimoire",http://metaredux.com/posts/2019/06/29/farewell-grimoire.html,farewell grimoire,reid mckenzie clojuredocs awesome clojure documentation clojure common cljdoc,day ago reid mckenzie announced twitter shutting grimoire popular alternative clojuredocs created said couple year ago speaking awesome clojure documentation clojutre big problem documentation everyone demand great people would take time actually make happen always super appreciative effort doc space want take moment honour legacy grimoire grimoire created time clojuredocs stagnated updated year mere clojuredocs clone really appreciated logical way essential information presented home page improved search fact clojurescript also featured grimoire addressed one biggest shortcoming clojuredocs personally provided api made simple integrate grimoire editor show directly grimoire doc var last least super cool easy remember domain conjio know mistyped clojuredocsorg million time kept forgetting clojuredocsorg clojuredocorg clojuredocsorg something else probably grimoire improved top clojuredocs area well one remember perhaps importantly grimoire early success prompted clojuredocs finally update content newer clojure release maybe two event really related maybe little bit competition bad thing really driver progress guess zachary kim clojuredocs author shed light might wondering grimoire fail good really know attribute failure mostly inertia page rank seems people satisfied clojuredocs really bother look alternative grimoire score high google query like clojure map doc also fact time reid involvement clojure reduced eventually moved focus thing consider post tribute legacy world clojure well always experimenting novel idea trying push thing forward know certainly consider clojure hero thanks everything reid awesome next reid expressed hope end grimoire might lead consolidation effort clojuredocs hope going case clojuredocs seems struggling gotten much activity past year still clojure support clojurescript support api would make easier interact programatically clojuredocs would great well wonder zachary kim would open moving project clojure common get attention support important part clojure ecosystem love see thrive also feel cljdoc might able step fill vacuum left grimoire martin cljdoc author mentioned plan add user submitted example point really excited cljdoc gained lot momentum since launched probably important api documentation service clojure ecosystem today depending thing play might eventually supersede clojuredocs become clojure api documentation service said earlier competition often good thing given limited resource clojure documentation project rather funnel single project make truly great opposed ending half dozen halfbaked project hope short article going provoke think important topic documentation consider helping project like clojuredocs cljdoc wrap go back writing clojure documentation farewell grimoire missed forgotten let make legacy live
179,Lobsters,clojure,Clojure programming,Typed Clojure in Theory and Practice,https://ambrosebs.com/files/ambrosebs-phd-thesis.pdf,typed clojure theory practice,,obj stream p h xna endstream endobj obj stream b p ιloi nvws n cغ q ϛ q sk k
180,Lobsters,clojure,Clojure programming,"Meuse, a free Rust private registry, first alpha release",https://github.com/mcorbin/meuse,meuse free rust private registry first alpha release,,
181,Lobsters,clojure,Clojure programming,Rediscover the JVM through Clojure,https://medium.com/97-things/rediscover-the-jvm-through-clojure-fa2ac5e29cbb,rediscover jvm clojure,rediscover jvm clojure overtone afterglow cdj figured beat link beat link trigger,rediscover jvm clojuresome time around office book club read java concurrency practice brian goetz far past preface important book panicked wrong naïve understanding java memory model easily bug introduced multithreaded code audible gasp least one reported nightmarein developing highly concurrent cloud offering needed language litter codebase landmines shared mutable state chose clojure solid concurrency answer favor functional efficient transformation immutable data run familiar jvm interoperating smoothly huge ecosystem java library though hesitant unfamiliar lisp syntax relearning program without mutating variable great decisionwe discovered benefit replcentric workflow rebuilding relaunching test changesexploring running system trying variation instantlybuilding refining idea incrementallywe appreciated clojure bias toward working data using standard structure rich opinionated core library create lot mutually incompatible model anythingi rediscovered joy energy programming talk strange loop conference livecoding musical performance clojure using overtone made wonder clojure fast enough make music surely could run stage lighting led afterglow project consumed figuring write lighting effect functional style puzzle overtone functional metronome inspired effect function mapping musical time lighting position color intensitiesi relearned trigonometry linear algebra aim different light point space discovered create desired color using fixture differenthued led livecoding stage lighting ton funthen wanted synchronize afterglow metronome track playing cdjs today digital dj turntable use mix music protocol proprietary undocumented determined set network sniffer figured early success led excited contribution around world wrote library beat link make using learned easy wrote java widely understandable discovered using clojure made writing java feel cumbersomepeople built ported language created quick demo show producer using beat link trigger midi event video software lighting console could respond became popular project useful nonprogrammers artist still cool new thing beat link trigger time guest music festival touring show seen result since clojure user extend code get bytecompiled loaded jvm part project along another secret weapon clojure give youi encourage anyone working java take serious look clojure see change experience life jvm
182,Lobsters,clojure,Clojure programming,"New Book | Numerical Linear Algebra for Programmers: An Interactive Tutorial with GPU, CUDA, OpenCL",https://aiprobook.com/numerical-linear-algebra-for-programmers/,new book numerical linear algebra programmer interactive tutorial gpu cuda opencl,numerical linear algebra programmer two friend adorable book scroll read pitch download sample chapter open source library book programmer interactive dynamic direct link theory implementation incredible performance intel amd cpu mkl nvidia gpus cuda cublas amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter middleman revenue go towards open source work ai book walk walk complete executable code inside stepbystep instruction full path theory implementation superfast implementation learn linear algebra code example explore cpu run gpu integrate intel mkl nvidia cublas performance library learn nut bolt understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel mkl gpus learn cuda cublas learn opencl hardware nvidia amd intel touch c download sample chapter draft read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor table content part getting started soon hello world soon vector matrix linear algebra api soon polymorphic acceleration soon part linear algebra refresher available eigenvalue eigenvectors available matrix transformation available linear transformation available part high performance matrix computation available using matrix efficiently available linear system factorization available singular value decomposition svd available orthogonalization least square available part gpu acceleration gpu computing crash course cuda cublas nvidia gpus opencl clblast amd gpus generating random matrix available mean variance correlation available principal component analysis pca available appendix setting environment jvm read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor get early help make book awesome deep learning programmer,numerical linear algebra programmer two friend adorable book scroll read pitch download sample chapter open source library book programmer interactive dynamic direct link theory implementation incredible performance intel amd cpu mkl nvidia gpus cuda cublas amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter middleman middleman revenue go towards open source work programmer ai book walk walk complete executable code inside stepbystep instruction full path theory implementation actual code superfast implementation book either mathonly monograph academic written nontechnical end user linear algebra learn linear algebra code example explore cpu run gpu integrate intel mkl nvidia cublas performance library learn nut bolt understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel mkl gpus learn cuda cublas learn opencl hardware nvidia amd intel touch c download download sample chapter draft buy read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor content table content part getting started soon hello world soon vector matrix linear algebra api soon polymorphic acceleration soon part linear algebra refresher available eigenvalue eigenvectors available matrix transformation available linear transformation available part high performance matrix computation available using matrix efficiently available linear system factorization available singular value decomposition svd available orthogonalization least square available part gpu acceleration gpu computing crash course cuda cublas nvidia gpus opencl clblast amd gpus generating random matrix available mean variance correlation available principal component analysis pca available appendix setting environment jvm subscribe read draft get new chapter written revenue go towards funding work open source library used book name book acknowledgment special copy personalized thank note personalized handcrafted hardcover chapter sponsor get early help make book awesome book deep learning programmer
183,Lobsters,clojure,Clojure programming,nREPL 0.7: Introducing a Native EDN Transport,https://metaredux.com/posts/2019/06/21/nrepl-0-7-introducing-a-native-edn-transport.html,nrepl introducing native edn transport,understanding edn transport fastlane using edn transport closing thought open ticket,today mark release first milestone nrepl series namely nrepl highlight release addition native builtin edn transport complement default bencode transport nrepl shipped since day understanding edn transport main difference bencode transport edn one instead dealing bencode dictionary list limited integer byte string sending receiving edn data including map vector list set string keywords symbol structure message pretty much data format change may useful couple usecases client including clojurescript one edn easier handle bencode supported box transport expose richer data type potentially middleware return different data using keep mind however clear whether good idea return different data based data format opted return exactly data bencode edn response currently mostly aiming address first point making easier client speak nrepl sense project pretty similar fastlane brought json messagepack transport nrepl remain committed bencode believe optimal default encoding format due simplicity universal nature also acknowledge edn might convenient java javascript environment introduction edn transport require specification message format bencode simplicity left room interpretation eg bencode string symbol keywords basically thing thing specify edn request op value string status either keyword set keywords may cause surprising unintended consequence thus tweak edn message format may possible transport declared mature documentation message format using clojurespec planned help address confusion let take close look practical example difference consider following four eval request op eval op eval op eval op eval first one considered canonical though nrepl accept second one well third fourth one work ops keywords using edn transport note change affect message encoded bencode mostly direct usage nrepl client api assume impact would small using edn transport guess wondering play new transport using edn transport pretty simple need start nrepl server edn transport good go require nreplserver server nrepltransport transport serverstartserver port transportfn transportedn also start nrepl edn transport using clj clj sdeps deps nrepl mvnversion nreplcmdline nrepltransportedn nrepl server started port host localhost nrepledn right party client support edn transport also use nrepl builtin client test clj sdeps deps nrepl mvnversion nreplcmdline nrepltransportedn connect host localhost port alternatively play client repl require nreplcore nrepl withopen conn nreplurlconnect nrepledn nreplclient conn message receive timeout required nreplmessage op eval code nreplresponsevalues see nreplurlconnect smart enough figure transport use based uri scheme case nrepledn nothing magical edn transport using pretty much transparent point closing thought first iteration edn transport probably rough around edge getting testing feedback would awesome hope post inspire least play new transport find good use also use post opportunity invite check open ticket nrepl issue tracker try hand tackling lot fun
184,Lobsters,clojure,Clojure programming,New release available for Clojerl (Clojure on the BEAM),https://github.com/clojerl/clojerl,new release available clojerl clojure beam,clojerl building getting started documentation resource clojerlorg feature differs clojure online repl try clojerl docker repl local repl code example scriptsexamples web application example examplewebapp building app rationale goal personal goal qas clojerl heard lfe joxa nt language construct concurrency different clojure erlang rich hickey list reason chose use actor model clojure clojerl support every single clojure feature reuse existing clojure script library discussion clojerl slack channel clojerl jfacorro clojure erlang,clojerl clojure implemented erlang vm building building clojerl requires erlangotp git clone http githubcomclojerlclojerl cd clojerl make window git clone http githubcomclojerlclojerl cd clojerl clojerl compile getting started documentation resource information regarding clojerl clojerlorg find feature clojerl include differs clojure online repl try get sense visit try clojerl docker repl quickly try clojerl via docker make use docker image like docker pull clojerlclojerl docker run clojerlclojerl able see prompt clojure cljeuser local repl running make repl window first run clojerl compile bincljebat start repl show prompt clojure cljeuser repl possible start evaluating clojure expression cljeuser map inc range cljeuser doc map clojurecoremap f f coll f f f colls return lazy sequence consisting result applying f set first item coll followed applying f set second item coll one colls exhausted remaining item colls ignored function f accept numberofcolls argument return transducer collection provided nil cljeuser doc inc clojurecoreinc x return number one greater num nil cljeuser code example basic example scriptsexamples directory meant reference special form clojure beam used sometimes differ clojure jvm web application example basic example web project please check examplewebapp repository building app build tool clojerl plugin official build tool erlang community plugin provides helpful command build basic directory scaffolding new project compile run test start repl information use plugin please check documentation rationale erlang great language building safe reliable scalable system provides immutable persistent data structure box concurrency semantics unequalled language clojure lisp come goody lisp provide apart clojure also introduces powerful abstraction protocol multimethods seqs name clojure built simplify development concurrent program concurrency abstraction could adapted erlang fair say combining power erlang vm expressiveness clojure could provide interesting useful result make life many programmer simpler make world happier place goal interoperability smooth possible like clojure proper clojurescript provide clojure abstraction provide erlang abstraction toolset include default otp library clojerl personal goal learn erlang vm clojure language implementation project experiment hope others find useful regardless whether becomes fully functional implementation clojure learned lot along way qas clojerl clojerl experimental implementation clojure erlang vm goal leverage feature abstraction clojure love macro collection seq protocol multimethods metadata etc robustness erlang vm provides building distributed system heard lfe joxa yes lfe joxa created specific different goal mind lfe born provide lisp syntax erlang joxa mainly created platform creating dsl could take advantage erlang vm syntax inspired clojure creator nt interested implementing clojure feature nt language construct concurrency different clojure erlang yes one hand clojure provides tool handle mutable state sane way making clear distinction identity state reference type concurrency erlang vm implemented process message passing idea clojerl encourage erlangotp concurrency model support many clojure construct possible far make sense erlang vm rich hickey list reason chose use actor model clojure question see mean point make course good example state shared process communication overhead isolation also advantage lot circumstance also mention building distributed case aka process message passing complex always necessary decided optimise nondistributed case add distribution part system need rich hickey call erlang quite impressive interpretation writing exposing rationale behind decision tradeoff made designing clojure jvm disregarding actor model clojerl support every single clojure feature clojure feature implemented relying underlying mutability jvm object system erlang vm provides mutability construct support defining new type make hard nearly impossible port feature clojerl implementation reuse existing clojure script library yes need ported like clojurescript fact clojure core namespaces ported original clj file clojure jvm repository discussion join conversation clojerl mailing list clojerl slack channel also find news update clojerl question find jfacorro lurking clojure erlang mailing list feedback comment andor suggestion welcome
185,Lobsters,clojure,Clojure programming,Deep Learning for Programmers New Release 0.4.0,https://aiprobook.com/deep-learning-for-programmers?release=0.4.0,deep learning programmer new release,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c table content part getting started part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter deep learning learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c content table content part getting started chapter determined part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book
186,Lobsters,clojure,Clojure programming,Clojure: Unlocking incremental automation,https://orestis.gr/clojure-unlocking-incremental-automation/,clojure unlocking incremental automation,nosco problem enter clojure interactive development visualisation clojure inspector inspector jay rebl small composable function access rich library ecosystem hickory apache tika apache poi clojure low friction instead paper cut,started slowly introducing clojure nosco excited share first impression feel like start pretty legacy nodejs codebase sprinkling clojure top true rearchitecting system benefit receive assuming successful stem hindsight clean slate clearer requirement wo nt go cool stuff managed get main system want talk something believe clojure really excels incremental automation infrastructure via repl problem run multitenant saas platform try white label possible since client big enterprise complex security policy client bring domain mail server need unblock spam phishing filter email go boring necessary tweak long time onboarding new client manual process involved lot email backandforth also lot clicking around aws console database provider console mail service console also sshing bastion host access prod service run database command maintenance script time lot adhoc request customer success people client want data dump client deleted something accident could please automate tedious process etc etc tried best could tedious annoying copy bash node script around production server get old really fast plus always scared fatfinger would bad thing production database enter clojure managed get clojure setup set server one first thing figure run remote repl could sshforward local machine connect editor still issue fatfingering danger developing production least could write inspect whole function familiar environment sending code across wire started happen start writing lot tiny oneoff function committed catchall repository started small task like generating oneoff report updating dns entry filtering bad data even business analytics sale team use task transformed tedious halfday work scratch everysingletime fun fast experience point onboarding task automated took plunge set time aside connected everything web form nontechnical colleague use lot task consolidation took handful day since mostly glue code nt believe would ever get done tried nodejs conventional language since even figuring requirement would monumental task opinion work enabled three important pillar clojure interactive development b small composable function c access rich library ecosystem interactive development nodejs either edit oneoff script right server go back shell running edit locally scp script across going back shell sometimes might fire mongo node shell lose editor affordances nobody want type long repl anyway also meant every time wanted change something rerun script losing state sometime ok sometimes already done expensive calculation fetched lot data slow annoying make mistake clojure repl started connected could start trying thing right editor function blew something tweak reevaluate run single keystroke process literally subsecond overhead also allows explore problem data solution incrementally building upon previous calculation also could use clojure dataexploration function ides would show nice visualisation returned data sometimes even fire local real use visualisation gui like clojure inspector inspector jay rebl small composable function mentioned node write oneoff script contain universe reason never created proper node project collect useful script hypothesis since node nt interactive mode encourages imperative style kind thing work actually generating report task refactor reusable bit module would copypasting remote server local editor making sure nt rely mutate global state finally making sure actually usable much work handed oneoff report clojure hand encouraged write small function usually pure sideeffect free practice meant start thread macro something map filter etc course stage became unwieldy extract small domain predicated function like isdraft truncatetoday createdbetween would pure actually reusable obvious way perhaps managed figure tricky aws api call could extract future use course actually developing editor writing small pure function wrapping exploration rich comment git fiddle repl teammate use function future also benefit exploration access rich library ecosystem course work done usually relies slicing dicing data using clojure core function actually needed go beyond able leverage robust clojure java library eg hickory convert html clojure data analysis apache tika detect file mimetypes apache poi generate excel report etc also available many ecosystem including nodejs ability quickly add java library project clojure wrapper start experiment api actual data take whole experience next level clojure low friction instead paper cut sum experience far found clojure inverse death thousand paper cut phenomenon instead slowing numerous little inconvenience clojure found low friction get thing done enables thing otherwise never even consider extremely happy decision far big thank fantastic people clojure community make possible
187,Lobsters,clojure,Clojure programming,"Billions of Random Numbers in a Blink of an Eye (CPU, GPU)",https://dragan.rocks/articles/19/Billion-random-numbers-blink-eye-Clojure,billion random number blink eye cpu gpu,,first create vector main memory measure speed generating random uniformly distributed entry def fv quickbench randuniform evaluation count sample call execution time mean n execution time stddeviation n execution time lower quantile n execution time upper quantile n overhead used n take nanosecond per entry nanosecond per entry let create larger vector one million entry try def fv quickbench randuniform evaluation count sample call execution time mean µs execution time stddeviation µs execution time lower quantile µs execution time upper quantile µs overhead used n even faster per entry nanosecond look promising next step billion entry create two vector million entry together take billion reason instead one vector entry take byte billion entry requires byte java intel mkl buffer indexed integer largest integer generating billion random number cpu def fv def fv quickbench randuniform randuniform evaluation count sample call execution time mean m execution time stddeviation m execution time lower quantile m execution time upper quantile m overhead used n millisecond even billion random number blink eye choose slowest eye according wikipedia clojure neanderthal try gpu course let also mention demonstrated uniformly distributed random number often need normally distributed number bit difficult generate randnormal expected slower let quickbench randnormal randnormal evaluation count sample call execution time mean sec execution time stddeviation m execution time lower quantile sec execution time upper quantile sec overhead used n almost second although extremely fast see next section motivation slower blink eye
188,Lobsters,clojure,Clojure programming,rustly: A Clojure to Rust transpiler,https://github.com/timothypratley/rustly,rustly clojure rust transpiler,rustly usage example examplehelloworldhelloworldclj examplehelloworldsrcmainrs status kalai rationale developing license http http wwwgnuorgsoftwareclasspathlicensehtml,rustly clojure rust transpiler usage lein run srcclj outrs example run example helloworldsh shell script invokes transpiler input file examplehelloworldhelloworldclj produce output file examplehelloworldsrcmainrs invokes cargo run producing ferris say hello message hello world status science project rustly alpha subject change feedback design implementation welcome subset clojure implemented goal cover good part packaged build provided time use transpiler must download source code see kalai comprehensive clojure transpiler rationale concise lisp syntax backed clojure tooling target rust might good thing developing issue pull request suggestion welcome license copyright timothy pratley program accompanying material made available term eclipse public license available http source code may also made available following secondary license condition availability set forth eclipse public license v satisfied gnu general public license published free software foundation either version license option later version gnu classpath exception available http wwwgnuorgsoftwareclasspathlicensehtml
189,Lobsters,clojure,Clojure programming,"ClojuTRE: functional programming conference at Helsinki, Finland",https://clojutre.org/2019/,clojutre functional programming conference helsinki finland,talk lesson learned nice accurate counsel alex miller programmer video insideclojureorg dealing unanticipated need video elixir sightseeing tour video slide package manager could write weekend video keeping site accessible type video isfotis programming philosophy video power lens video clojure r love story two lispy soul video clojure first professional language video eetuseta declarative domain logic video problem write compiler video computer mathematics ai functional programming video baramoa nt functional programming norm video slide music performance computer dream electric beat cljkondo linter clojure code spark joy video slide creative computation video created clojure job video stateful property testing clojure video naked performance clojure video slide ikitommi reduxed video slide design implementation bitemporal dbms video,talk lesson learned nice accurate counsel alex miller programmer videoalex miller work maintaining clojure supporting clojure community cognitect coauthored book clojure applied edition programming clojure pragmatic press alex founder strange loop clojurewest lambda jam conference writes regularly insideclojureorg dealing unanticipated need videofounder chief scientific officer cognitive edge work international nature cover government industry looking complex issue relating strategy organisational decision making decision making pioneered science based approach organisation drawing anthropology neuroscience complex adaptive system theory popular passionate keynote speaker range subject well known pragmatic cynicism iconoclastic stylehe hold visiting chair university pretoria hong kong polytechnic university well visiting fellowship university warwick senior fellow institute defense strategic study nanyang university civil service college singapore paper boone leadership cover article harvard business review november also academy management award best practitioner paper yearhe previously special award academy originality work knowledge management editorial board member several academic practitioner journal field knowledge management editor chief e co director epsrc uk research programme emergence appointed nsf u review panel complexity science researchhe previously worked ibm director institution knowledge management founded cynefin centre organisational complexity period selected ibm one six ondemand thinker world wide advertising campaign prior worked range strategic management role service sector elixir sightseeing tourhey friend welcome elixir talk get whirlwind tour elixir offer finally learn buzz buzz hope around resiliency concurrency supervision tree much get see practical application elixir turn even build stuff main goal talk get hyped video slidesandrea human born ancient land central italy love functional programming beautiful code learning stuff software architect speaker member core team elixir programming language weak spot red hair package manager could write weekendmaybe right turn practice package manager deal variety different problem security clidesign ux performance crossplatformcompatibility computersciencehard problem onhowever also turn managing package language powerful type system mean possible skip many hard bit get something useful usable also staying sane talk embark trip mean people usually terribly painful use package manager tried repeat mistake making spago new package manager build tool purescript project videofabrizio software engineer sardinia italy currently helping good journalism good functional programming ksf medium helsinki finland lately distributed system devops programming language developer uxif like get excited come talk mention dhall purescript haskell fractal electronic music rocket coffee food keeping site accessible typesaccessibility web take effort responsibility split amongst development design really anything touch product development design many common issue color contrast semantic markup form known practice patternshowever problem html permissive anything semantic pattern often require expertise research bad day tight deadline even diligent person miss thingsthe rise typed functional language frontend affords u opportunity chance encode value accessibility system way coworkers future self avoid issue automatically well learn practical wayin talk give brief introduction web accessibility well concert example help preserve codebases talk hope issue backlog well confidence tackle videofotis papadogeorgopoulos isfotis another life student language photographer greek living finland helping build inclusive web futurice frequently found testing name input yelling cloud aspires disseminate knowledge ensure thing build serve people best possible want foster environment people feel comfortable excited discus collaborate share thought programming philosophywhat philosophy even today make people sit debate seemingly nothing vague notion abstraction relevance today world hard fact cold logic talk try show philosophy emphasis linguistic philosophy relates closely everyday life programmer simple thing like programming language selection trying define bug name service issue carry much significant meaning context usually give try minute give glimpse behind curtain mi conception world software engineering videonir rubinsteinappsflyerchief architect appsflyer last year working mostly clojure functional programming order build model system process hundred billion daily event trying spread word valueproposition functional programming mainly via clojure power lensesever access modify deeply nested json document typed language feel unnecessarily painful better way lens allow conveniently navigate modify nested data structure functional way clojure also known convenience dealing nested data compare take look thing achieved using lens also take look trick lens provide videojuhana functional programming enthusiast helsinki working data engineering consultant frequent speaker local meetups coauthored university online clojure course iloveponiesgithubio clojure r love story two lispy soulsthe r language offer beautiful way statistic clojure charming way work data happens meet hold opinionated vision towards functional programming lisp metaprogramming data driven programming interactive workflow common ground reason idea together turn interop may bring joy party r user clojure allows elegant powerful way process data access jvm library clojurians r open huge collection library tool statistical computing data visualization used wisely interop could potentially transformative culture r may learn something simple clojure may learn something easyin talk review old way well new library rclojure interop demonstrate us potential discus several conceptual challenge arisewe argue r could important ally clojure quest become great platform data science videodaniel mathematicianclojurian working field urban geography localizecity part organizing team scicloj community people promoting clojure field data science clojure first professional languagein talk go experience siilis junior program ongoing year weapon code clojure siili used clojure master apprentice program beginning created successful project crash burn tell ups down use functional programming context come straight school year coding experience videoeetu kaivolasiili solution eetuseta itconsultant head core siili solution scrum master agile coach agile team tribe leader group professionalsi also working siili junior program iterationsmy interest mainly agile software production development methodology helping people find potentiali started career clojure even though role changed lot way still work clojure developer declarative domain logicdomain logic unique core application often entangled implementation detail application scattered throughout httphandlers database function ui template objectoriented world mvc prescribes separate place domainlogic model functionalprogrammers separate domainlogic rest application clojure good functional datadriven solution various problem domainlogic solution homegrown often idiomaticin talk rafal examines problem domainmodeling clojure review existing approach introduces new library datadriven domain modeling could become commonground clojure community build shared tooling around videorafal dittwaldrafal web developer programming teacher entrepreneur toronto used work php ruby javascript spent last blissful year working almost exclusively clojure clojurescript teach web development lighthouse lab part cognitory work various learntoprogram resource including book teach nonprogrammers functional datadriven programming clojure occasionally clojure training bloom rafal work multiple venture including braid opensource group chat application written clojure problem write compiler imagine writing cool game played browser need random number generator know procedural game content mean infinite amount fun functional programmer mathrandom good enough way replayyou find simple algorithm think would easy implement oh no realise proper fixed width integer javascript number double underneath implementation work produce notrandomenough garbage luckily code data data code let write little macro take piece data look like simple arithmetic bitwiggling code transformation like make correct maybe even faster give back outer compileronce written compiler never miss opportunity write another one show write small compiler optimising one would lie say fit slide fit deck videooleg programmer finland ie humble person get paid writing haskell free time play language sometimes even untyped one computer mathematics ai functional programmingthis talk take u history artificial intelligence since birth see dream developing intelligent computer program mathematics closely linked birth functional programming videomoa johanssonchalmers university technology baramoa moa johansson associate professor chalmers university technology gothenburg sweden interested ai application mathematics reasoning functional program also keen cyclist recently also done work machine learning sport data nt functional programming norm video slidesrichard member elm core team author elm action manning publication instructor intro elm advanced elm course frontend master writing elm since maintainer several opensource elm package including elmtest elmcss package music performance computer dream electric beat since early day specie human always created music rhythm chant interesting antropological tangent go today focus fact since computer age human really exploit full potential machine offer usbut stop take computer back belong musical instrument automated one algorave let dance together sound bit beatsmore open source beat people cljkondo linter clojure code spark joycljkondo linter clojure code spark joy analyzes code without evaluating detects arity error redundant expression unused requires missing test assertion provides fast editor feedback run instantly native binary depending repl jvm talk see implemented compare clojure linters video slidesmichiel borkent software developer clojurian found borkdude various place web creative computationan exploration way computation aid creativity vice versa many example videojack rusher done research prestigious facility world bell labsat research c spare time built sold eight technology company currently work digital artist created clojure jobmany would like work fulltime clojure clojurescript finding job may easy nt many open position start even fewer beginner relocating new city country may feasible option everyone recurring discussion clojurians slack someone angst love clojure ca nt find fulltime job area return mundane day job disappointedin talk want share story managed create first fulltime clojure job worked also describe clojure clojurescript helped extremely small team deliver reallife software projectthe goal talk encourage people consider taking leap safe certain uncertain exciting chasing dream videovaltteri harmainenvaltteri senior software developer like problem solving functional programming panda bear honeymoon clojure began currently valtteri changing world firstbeat technology stateful property testing clojure overview quick tutorial stateful property testing clojuresometimes bug nt occur particular sequence call system made stateful property testing way create program generates large random sequence command running system making sure call produce expected result unexpected result occur sequence automagically shrunk showing smallest sequence command needed test talk learn stateful property testing see example real system discover command make sense run system define model lastly see put together actually run test videomagnus windy west coast norway magnus first current developer job clojure oslo based startup called vilect amount software expertise time logarithmic function still steep part found passion functional programming squashing bug naked performance clojure clojure modern dynamically typed lisp dynamical typing ofter associated poor performance runtime failure talk present lesson learned building clojurescript system ridiculously fast fail fast error compare performance mutable persistent zerocopy data structure show use interpreter compiler build beautiful performant abstraction quick demo build simple nonblocking web server run idiomatic clojure serve million request per secclojure awesome fast video slidestommi reimanmetosin ikitommi programmer metosin reduxedhow built complex autosaving form simple way power clojurescript reagent extra library video slidessenior software engineer halalbooking ukbased company providing hotel reservation niche travel sector backed ruby rail clojurescript design implementation bitemporal dbmsbitemporality allows modify enhance correct view past also keeping version audit repeatable readswe see missing piece puzzle scale functional programming time time encountered similar problem project problem concerning competing timeline different system desire immutability purity messy reality delay information matures timewhile popular research topic bitemporality starting become practical due cheap cloud storage close kinship modern event sourcing architecture functional programming start rephrasing earlier idea newer lightat juxt decided build crux schemaless bitemporal database us kafka commit log provides datalog query served disposable index node powered rocksdb lmdb function logthis talk look approach took build crux design decision made reached crux aim unbundled database several pluggable component layer adhering unix philosophy bit akin clojure community favour composing smaller library time significant technical challenge involved making bitemporality practical often tension idea neatly composing component swedish programmer living small village sea north stockholm associate juxt company behind crux
190,Lobsters,clojure,Clojure programming,Clojure Heroes,http://metaredux.com/posts/2019/06/10/clojure-heroes.html,clojure hero,,oh beat ever ever could hero one day david bowie hero tweet made day great reminder awesome clojure community truly touched tweet really expect plus pretty bad day already feel like clojure hero award thanks kind word daniel honoured humbled list reminded often value enough people make clojure awesome let address today nominating three clojurians clojure hero award reasonably certain need introduction well aware huge impact clojure community say thank awesome clojure without last least big thanks rich stu halloway alex miller david nolen everyone else clojure script team clojure community without nominee clojure hero award reach let know much value contribution clojure community sure small gesture going mean lot
191,Lobsters,clojure,Clojure programming,The Joy of ClojureScript,https://medium.com/@functionalhuman/the-joy-of-clojurescript-90252e1c4a23,joy clojurescript,shivek khurana stackoverflow developer survey http githubcomdobiasdprogramminglanguagesubredditsandtheirchoiceofwordsblobmasterreadmemd http xkcdcom interoperability immutable data structure redblack tree algorithm functional programming extensible abstraction code data runtime polymorphism concurrent parallel programming productivity testing dynamic development clojure language clojurescript cheatsheet official clojure doc building rest api clojure comment function variable documentation baked binding function def destructuring destructuring,came across clojure trying figure language ecosystem wanted spend next ten year developing inthe functional programming paradigm going away dawn functional reactive programming javascript ushered new wave functional programmer developer routinely using higher order function library rxjs redux angular react built upon functional conceptsjavascript indeed powerful language constant churn framework library require significant investment time master perhaps better alternative language functional frontend development came across new language like elm promised practically zero runtime error crash production code due advanced type system elm programmer seem quite happy many job looked haskell well seemed like great way master functional programming theory offered little way web development limited use commerciallythen came across clojure clojurescript easy dismiss clojure first huge amount company using however huge amount company existing code library written javascript java clojure interops language nicely perhaps might see clojure job advertised futureif come javascript realm imagine j rxjs immutable lodash built language shivek khuranathe following chart stackoverflow developer survey also interesting chart interesting reason developer year experience working functional language erlang f clojure significant clojure highest median salary languagesnot bad nonmainstream language clojure developer also seem happier http githubcomdobiasdprogramminglanguagesubredditsandtheirchoiceofwordsblobmasterreadmemdthe looked clojure fascinated became opinionated creator rich hickeyyou level switching game time sticking one long enough gain advanced skill need careful recognize actual game involved programming mastery little language paradigm platform building block open source conference etc rich hickeyclojure weird developed software language programming well decade never actually come across lisp dialect randall munroe http xkcdcomlisp originally specified heavily influenced alonzo church lambda calculus language term pretty ancient rich hickey use lisp variation designing clojure language designed well turn lisp language incredibly powerful expressive simple syntax lisp programmable programming language john fodararolisp give developer power extend lisp language many different way ultimately mean end writing le boilerplate code code ultimately resemble thought intention programmer closelyfind lisp great basis programming language back provides environment language designed encourage functional programming also feature prevent lot bad practice bugsinteroperability clojure run java virtual machine give ability seamlessly access existing java library make perfect integrating existing java library code clojurescript also provides excellent interoperability javascript us google clojure compilter compile clojurescript j code allows use javascript library clojurescript little overheadimmutable data clojure data structure immutable default clojures list vector set map modified instead new data structure must created change hood clojure us redblack tree algorithm clever way avoid copy whole datastructure time blazingly fast toofunctional programming first class function support tail recursion ie recursively call function without running stack memoryextensible abstraction clojure allows write function work higher level abstraction language example clojure datastructures provide seq interface mean write single function handle form datastructurecode data lisp foundation allows developer write code data mean language code write modified automatically runtime using macro system clojure choose extend compiler user defined coderuntime polymorphism clojure multimethods avoid many problem associated object oriented programming type inheritanceconcurrent parallel programming clojure simplifies multithreaded programming core data structure immutable shared thread implement software transaction memory stm system think sql like transaction baked programming language clojure atom shared thread synchronous independent mannerproductivity clojure built little function useful thing might seem like lot effort learn first every function learn function need write payoff cumulative knowledge increase developer productivity cost stuff learntesting clojurespec awesome far easier test function mocking complex object relation oopdynamic read eval print loop repl allows run code interactively write code interactively without keep compiling starting beginning time take look flappy bird video never seen another language blew mind watching demo clojure languagei thought might helpful take look language bit detail clojure interesting language syntax simple compared javascript lot new concept function feature available developerso get started make sure understand structure syntax clojurescript easy pick upthere basic type nil number string character keywords symbol basic data structure collection list vector map structmaps arraymaps set ton operation used manipulate data structure different waysthere exotic clojure concept like macro sequence transient multimethods protocol atom reducer software transactional memory etc extend language provide lot power take time understandmost advanced feature simple function call learning clojurescript really case learning little function called work clojure experience get functionsalthough might seem like lot learn remember ultimately little function something useful developer would otherwise write manuallythe fact lot clojure programmer beginner well help documentation make hard understand function language feature doesif want learn clojurescript highly recommend study clojurescript cheatsheet begin give map common language feature may need simplicity hard work huge payoff person genuinely simpler system system made genuinely simple part going able affect greatest change least work going kick as gon na spend time simplifying thing front long haul gon na wipe plate ability change thing struggling push elephant around rich hickeytake look functionality clojure language inspiration find similar example official clojure doc help get idea bit language work alternatively follow article building rest api clojurecommentsin clojure comment denoted eg commentclojure weird use like language fact treat comma whitespace b equivalent b compiler treat comma whitespacefunctions variablesfunctions defined using def function follows def helloworld fn name str hello name helloworld chris one key concept clojure first parameter parenthesis typically function want call apply add operator two number might call another thing note function argument case number clojure comment treated whitespace space separate function argumentsclojure also let define anonymous function using character def def helloworld str hello def displaycar str car displaycar nissan micra also use def define variable def myname functionalhuman println myname clojure also defn function allows easily define named function provide metadata provides bit flexibility allows add extra information function call defn helloworld name str hello name helloworld functional human notice able drop fn go straight argument parameter documentation baked cool language documentation built right language def myage age variable also define function metadata defn displaycar display car make model make model str car make model display documentation function using use clojurerepl import doc function repl doc displaycar also search car related function code using finddoc car binding function def destructuringlet special form allows u create lexical binding data structure symbol within lexical context let put plain english javascript term mean define symbol locally scoped within let function def myline let myline println line line let code basically saying define variable scope let value accessible outside let expression locally scoped example also us destructuring something intuitive first super coolthe first bit destructuring myline take input value myline expects vector coordinate pair assigns pair vector becomes becomes use destructuring tease apart individual coordinate becomes becomes etcthis equivalent javascript destructuring argument javascript destructuringlet clojure two type destructuring seen sequential destructuring already let statement abovehere another example sequential destructuring def mylist let x z mylist println x z also associative destructuring let look example define map value relating client map clojurescript bit like defining object key value pair javascript javascript might use object store key value pairslet client name super co location philadelphia description worldwide leader plastic tableware consolelog client name clojurescript syntax similar although using curly bracket denote map key prefixed colon key def client name super co location philadelphia description worldwide leader plastic tableware let u access property key map println client name name client use associative destructuring map property client local variable defined let let myname name mylocation location mydescription description client println myname mylocation mydescription super co philadelphia worldwide leader plastic tablewarenotice enclose destructuring argument square bracket inside destructuring map enclosed curly bracket pas client end mapping value client local variable prefixed associative destructuring neat key exist value default nil also supply default value let category category category category found client println category notice format map defaultmap client mapped key categoryis found client defined previously set default value created category key map pretty cool enough destructuring find destructuring clojure doc
192,Lobsters,clojure,Clojure programming,The Calva Journey Continues - Please Jack In,https://clojureverse.org/t/the-calva-journey-continues-please-jack-in/4335,calva journey continues please jack,calva jackin eccentricj visual studio code jackin cider leiningen shadowcljs cljdeps new repl window improves support interactive programming matt seddon get started clojure v code start project repl connect aka jackin clojure warrior calva readme wiki calvadev future calva orchard bbatsov thheller,calva easy start easy use environment productive clojure clojurescript coding updated feature significant enough sometimes refer calva fact really said easy get started calva please install new version say goodbye soul crushing getting started issue jackin command say hello brand new repl window calva also friendly new logo thanks eccentricj goal calva leverage ease use visual studio code provide environment starting using clojure smooth possible jackin brought getting started story reading page instruction trialandhorror profile andor project file possibly giving simple command calva jackin inspiration taken cider calva jackin start project injects dependency calva need power work support leiningen shadowcljs cljdeps boot support added clojurescript support important part calva lot effort put making jackin help calva via prompting inject necessary shadowcljs figwheel figwheel main dependency hope calva jackin help make clojure clojurescript accessible new user new repl window improves support interactive programming experienced clojurians well new user language much better served interactive development feature new repl window sweet code editor smooth clojure code formatting structural editing powered paredit syntax highlighting code completion command history deep integration rest calva command using repl window evaluate code edited file automatic temporary switching repl window namespace evaluating form editor file keeping predictable switching clojure clojurescript repls calva powered file editor introduced much improved result reporting syntax highlighted pretty printed clear differentiation evaluation result output error stack trace deep link code quite huge yes certainly term increased value clojure developer using v code also term actually took bring ui v code lack native ui building block support except webviews meant repl window code editor written completely scratch think something like essential code mirror take partial credit would never able code coding work matt seddon acting product owner first line tester bug fixer maintainer paredit powering new repl window also written scratch way mean able improve lot current paredit implementation calva relies abandoned project new paredit powered careful clojure code lexing opening predictable precise code analysis editing summary new repl window delivers value today underpinnings promise easily deliver even value coming release get started clojure v code really super easy install v code install calva via extension pane open clojure script file root project issue command start project repl connect aka jackin ctrlaltc ctrlaltj besides repl power calva includes code formatting paredit little parinfer support quite set also bundle clojure warrior brings rainbow parens highlighting unmatched parens clojure warior brings sane highlighting matching parens calva therefore disables v code confusingbroken paren highlighting see calva readme wiki information usage course feel warmly welcome join calvadev channel clojurians slack get support discus calva idea cheer u future calva new repl window jackin enables awesome v code editor much useful clojure work far par cider cursive still moving along trying make calva viable option people like keep using v code start period calva development directed supporting newtoclojure user received great feedback lately know many thing trip new user plan contribute clojure making calva ease path however expect lightning speed calva maintained mostly peter strömberg aka pez alone demanding day job devote much time calva blessing people done lot hard work make building block calva want risk forgetting anyone starting mention project must mention orchard calva find cider distilled thanks bbatsov rock like also express gratitude thheller provides shadowcljs important part calva development toolchain also patience stupid question happy clojure clojurescript coding
193,Lobsters,clojure,Clojure programming,CIDER.mx: Reloaded,http://metaredux.com/posts/2019/05/29/cider-mx-reloaded.html,cidermx reloaded,http docscidermx docscidermx mkdocs readthedocs asciidoc antora http nreplorg kramdoc great comparison markdown adocmode note http ciderreadthedocsio cidermx http cidermx epilogue,hope cider user heard http docscidermx spent quality time today excited share update cider documentation site docscidermx since site launched always powered combination mkdocs readthedocs mkdocs used convert documentation markdown html readthedocs rtd short used build publish documentation arrangement worked reasonably well also frustrating several reason markdown horrible format write technical documentation lot written subject leave rtd support mkdocs particularly well alternative mkdocs supported rtd sphinx much better mkdocs rtd allow customize documentation look feel much default theme look pretty dated typography look great bind rtd site apex custom domain eg cidermx reason version documentation site readthedocsio eg ciderreadthedocsio get much higher page rank custom domain version eg docscidermx generally sum say rtd trading convenience flexibility fine small project becomes really painful certain point planning move away rtd long time dreaded work going entail year several people promised help migration never happened end finally mustered courage pull trigger migration weekend recently really positive experience working asciidoc antora http nreplorg decided adopt cider site well migration semiautomated manner convert markdown file kramdoc manually address conversion flaw resulting asciidoc file also manually build antora navigation index update crossreferences file took couple day end result quite liking several outstanding issue new documentation site search functionality currently figure hide heading index page one right logo might broken linksformatting spotted conversion pas manual regenerated hand nextprevious link really appreciate help tackling problem bright side antora pull documentation module multiple repository single documentation site hope make good use road definitely love document better cidernrepl friend publish doc alongside cider guess people might surprised choice markup language org texinfo better option emacs might well true emacsspecific wanted go something generic using documentation pipeline multiple project hope nonemacs user find reason contribute documentation project extensive research nothing came close book asciidoc encourage everyone check great comparison markdown way real gripe asciidoc ironically emacs support unfortunately adocmode dormant year support newer addition asciidoc still get job done live frankly speaking asciidoc simple really need dedicated major mode also applies markdown course note opted keep legacy site running ton link find http ciderreadthedocsio notice change manual visual actually rearranged manual lot added extended section dust settle focus effort completely quality documentation cidermx working new documentation site realized due technical limitation github page site mapped docscidermx apex domain cidermx bummer finally forced spend time creating proper landing page cider find new home page http cidermx super basic one static html file bit bootstrap first page worked long time made realize completely disconnected modern frontend hope willing help make look nicer professional also trying collect testimonial happy cider user final section page appreciate lend hand general welcome feedback idea new home page new documentation site epilogue come documentation obviously content way important appearance still always optimistic great content great appearance time opensource project kind hard achieve given limited time one allocate dream definitely alive think two site update great step forward fulfilling month come continue polish visuals try educate bit modern frontend also spend time reviewing revising documentation currently exists cider already solid capable tool unfortunately relatively people aware full potential hope documentation effort together hard cider blog series finally going address problem today keep hacking keep documenting
194,Lobsters,clojure,Clojure programming,Deep Learning for Programmers (WIP Book),http://aiprobook.com/deep-learning-for-programmers/,deep learning programmer wip book,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c table content part getting started part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book,dl book programmer interactive dynamic stepbystep implementation incredible performance yet c hell intel amd cpu dnnl nvidia gpus cuda cudnn amd gpus yes opencl clojure magic java virtual machine without java boilerplate complete source code beautiful typesetting see sample chapter deep learning learn dl implementing scratch classic neural network using fast linear algebra build optimized backpropagation algorithm stepbystep explore cpu run gpu design elegant neural network api add tensor support integrate intel dnnl nvidia cudnn performance library learn nut bolt build convolutional layer build rnn support understand use solve practical problem much interactive immediate dynamic feedback see result executing line experiment live environment c build hell c syntax hell java virtual machine without java boilerplate clojure nicest language earth c fast optimized yet highlevel touch c cpu learn intel dnnl gpus learn cuda cudnn learn opencl hardware nvidia amd intel touch c content table content part getting started chapter determined part inference available representing layer connection available bias activation function available fully connected inference layer available increasing performance batch processing available gpu computing cuda opencl available part learning available gradient descent backpropagation available forward pas available activation derivative available backward pas available part simple neural network api available initializing weight available regression learning known function available part training optimization available momentum nesterov momentum available adaptive learning rate available regression boston housing price available stochastic gradient descent available classification imdb sentiment available classification metric mnist handwritten digit recognition available tensor nd array available tensor transformation available dnnl tensor cpu available tensorbased neural network api soon cudnn tensor gpu soon part convolutional network tbd convolutional layer tbd image recognition fashionmnist tbd additional chapter tbd part recurrent network edition book
195,Lobsters,clojure,Clojure programming,Transparency through data,https://www.youtube.com/watch?v=zznwKCifC1A,transparency data,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature keynote transparency data james reef youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature keynote transparency data james reef youtube
196,Lobsters,clojure,Clojure programming,Solving Problems the Clojure Way,https://www.youtube.com/watch?v=vK1DazRK_a0,solving problem clojure way,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature solving problem clojure way rafal dittwald youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature solving problem clojure way rafal dittwald youtube
197,Lobsters,clojure,Clojure programming,Clojure web application with GraalVM,https://github.com/yogthos/graal-web-app-example,clojure web application graalvm,join github today sign file permalink minimal graalvm clojure web application requirement usage resource license reload reload,example web application using http kit reitit compiled graalvm dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time minimal graalvm clojure web application requirement usage http port application declared configedn file run dev mode lein run start nrepl lein nrepl compile native binary running lein nativeimage run app targetapp example web application using http kit reitit compiled graalvm resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
198,Lobsters,clojure,Clojure programming,The secrets of Type Inference in Clojurescript,https://blog.klipse.tech//clojure/2019/05/20/type-inference-in-clojurescript.html,secret type inference clojurescript,excellent talk mike fikes version automatic type checking code optimization around str know know know know code optimization around truth code optimization around boolean algebra limitation excellent talk mike fikes conclusion,watching excellent talk mike fikes type inference clojurescript resist urge share community learned fascinating topic clojurescript compiler granted capability infer type since version benefit u cljs devs compile time run time compile time clojurescript code type checked automatically run time generated javascript code run faster nutshell type inference make code run faster le bug type inference save time u developer catch bug earlier user code run faster automatic type checking currently automatic type checking occurs call function expects number value sure number type checking occurs compile time mean catch bug without need even run code instance add two string get warning compile time saying argument must number hello dear try compare apple orange apple orange code optimization around str general compiler know value certain type generate optimized code run faster usually machine code optimization occurs clojurescript compiler regarding javascript code generates cool thing clojurescript compiler easily read code generates even compile clojurescript code right browser instance let take look code generated str macro two different situation compiler know argument string compiler know argument string compiler know argument string us information generate javascript code straightforward fast imagine argument joined empty string let firstname kelly lastname kapowski str firstname lastname however compiler know argument string str macro forced generate code call str function cljscore namespace defn myname firstname lastname str firstname lastname additional function call performance cost save letting compiler know argument myname function string called type hinting done via string metadata information argument compiler generates optimized code without additional function call defn myname string firstname string lastname str firstname lastname type hinting valuable come price requires extra effort developer make code verbose situation compiler able infer type value without type hinting example value returned str macro sure string consequence reason call str value returned myname superfluous call saved compiler defn myname string firstname string lastname str firstname lastname str myname kelly kapowski type inference mechanism smart enough handle le trivial situation instance call str expression branch string superfluous str call also removed generated javascript code defn kellyorjessie x str x kelly jessie code optimization around truth another area code optimization occurs due type inference check whether value truthy order fix weird conception truth javascript clojurescript wrap predicate inside expression truth function call additional truth function call make possible consider truthy ok bad javascript falsy var ok bad truth lesson explained greater detail one hand truth function call make code reliable hand induces extra cost term performance compiler know sure predicate boolean save extra cost take look function type hint argument boolean defn tobeornottobe boolean x x sometimes compiler infer value boolean instance value returned known boolean consequence predicate expression truth function call saved defn nottobeortobe x x code optimization around boolean algebra similar reason saw previous section truth javascript boolean algebra clojurescript induces fairly complicated javascript code take look instance javascript code generated boolean stuff defn booleanstuff x z x z however compiler know sure argument booleans rely native javascript boolean operator example type hint argument booleans javascript generated code much compact run faster defn booleanstuff boolean x boolean boolean z x z limitation time article written may type inference pretty new feature clojurescript still long way go many cool idea experimented clojurescript core team sure watch excellent talk mike fikes want know history future type inference clojurescript two main limitation related type inference make compilation bit slower edge case cause misbehaviour end talk mike share detail impact type inference compilation time let see example edge case type inference cause generated code buggy imagine function foo return sure boolean defn foo x x function bar us foo predicate inside expression defn bar x foo x call bar get clojurescript truthy bar problem occurs rewrite foo getting rid double like defn foo x x redefinition foo make code generated bar buggy time ode generated foo returning boolean sure compiler relied fact foo return argument may boolean pas bar argument behaves badly boolean code broken wrote earlier javascript falsy bar conclusion historically main focus development clojurescript language make reliable even though run top unreliable language like javascript clojurescript mature enough room new initiative like type inference beneficial term performance term type checking happy clojurescript
199,Lobsters,clojure,Clojure programming,Resilience by Design,https://www.youtube.com/watch?v=ss1v6jHGDfk,resilience design,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature resilience design tiago luchini youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature resilience design tiago luchini youtube
200,Lobsters,clojure,Clojure programming,Aviary: Clinical Collaboration Platform,https://www.youtube.com/watch?v=IekPZpfbdaI,aviary clinical collaboration platform,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature aviary clinical collaboration platform dmitri sotnikov carmen la youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature aviary clinical collaboration platform dmitri sotnikov carmen la youtube
201,Lobsters,clojure,Clojure programming,Roguelike dungeon crawler game with fullstack Clojure,https://github.com/uosl/heckendorf,roguelike dungeon crawler game fullstack clojure,heckendorf http running locally development server client,heckendorf procedurally generated roguelike dungeon crawler game implemented fullstack clojure webapp live http running locally lein start development server lein repl heckendorfweb main lein run nt replightened yet client lein figwheel dev
202,Lobsters,clojure,Clojure programming,How to build a native binary for you Clojure projects with GraalVM,https://github.com/BrunoBonacci/graalvm-clojure/blob/master/doc/clojure-graalvm-native-binary.md,build native binary clojure project graalvm,build native binary clojure project graalvm download install graalvm http githubcomgraalvmgraalvmcebuildsreleases note project build native binary note final touch plugin,build native binary clojure project graalvm guide show step required build native binary clojure project using graalvm download install graalvm go http githubcomgraalvmgraalvmcebuildsreleases download binary platform unpack package folder add path export graalvmhomefullpathtograalvm export path graalvmhomebin path java version openjdk version openjdk runtime environment graalvm ce build openjdk server vm graalvm ce build mixed mode sharing install nativeimage component gu install nativeimage downloading component catalog wwwgraalvmorg processing component native image downloading component nativeimage native image githubcom installing new component native image orggraalvmnativeimage version gu list componentid version component name origin graalvm graalvm core nativeimage native image githubcom note mac osx might need dequarantine binary script mac osx sudo xattr r comapplequarantine graalvmhome project create project lein new helloworld generating project called helloworld based default template default template intended library project application see template app plugin etc try lein help new cd helloworld update projectclj add main defproject helloworld description fixme write description url http examplecomfixme license name url http clojure version includes fix graalvm specific issue see http clojureorgcommunitydevchangelog dependency orgclojureclojure add main namespace main helloworldcore add aot compilation profile uberjar aot add main function helloworldcore namespace n helloworldcore genclass defn main args println hello world test build native binary build uberjar lein clean uberjar compiling helloworldcore created created standalonejar file contains class project dependency one jar proceed build native binary note running earlier version graalvm nt need flag initializeatbuildtime nativeimage reportunsupportedelementsatruntime initializeatbuildtime noserver jar h nametargethelloworld classlist m gb cap m gb setup m gb clinit m gb typeflow m gb object m gb feature m gb analysis m gb universe m gb parse m gb inline m gb compile m gb compile m gb image m gb write m gb total m gb test native binary targethelloworld hello world check speed difference time java jar hello world real user sys time targethelloworld hello world real user sys final touch nt want remember command line build native binary always add projectclj follow add leinshell plugin projectclj profile uberjar aot dev plugins leinshell add alias projectclj alias native shell nativeimage reportunsupportedelementsatruntime initializeatbuildtime noserver jar target uberjarname name version standalonejar h nametarget name overall projectclj look like follow defproject helloworld description fixme write description url http examplecomfixme license name url http dependency orgclojureclojure main helloworldcore profile uberjar aot dev plugins leinshell alias native shell nativeimage reportunsupportedelementsatruntime initializeatbuildtime noserver jar target uberjarname name version standalonejar h nametarget name place run lein native build native binary lein native openjdk server vm warning forcing tieredstopatlevel full optimization jvmci enabled classlist m gb cap m gb setup m gb clinit m gb typeflow m gb object m gb feature m gb analysis m gb universe m gb parse m gb inline m gb compile m gb compile m gb image m gb write m gb total m gb targethelloworld hello world happy hacking
203,Lobsters,clojure,Clojure programming,Crux is an open source document database with bitemporal graph queries,https://juxt.pro/crux/index.html,crux open source document database bitemporal graph query,redirect notice mainindexhtml,redirect notice page requested relocated mainindexhtml
204,Lobsters,clojure,Clojure programming,Get Started with Arcadia! Clojure in Unity,https://www.youtube.com/watch?v=Enumt6qxAgc,get started arcadia clojure unity,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature get started arcadia part setup arcadia clojure unity youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature get started arcadia part setup arcadia clojure unity youtube
205,Lobsters,clojure,Clojure programming,Native Clojure with GraalVM,https://www.youtube.com/watch?v=topKYJgv6qA,native clojure graalvm,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojured native clojure graalvm jan stępień youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojured native clojure graalvm jan stępień youtube
206,Lobsters,clojure,Clojure programming,Shenandoah GC in production: experience report,http://clojure-goes-fast.com/blog/shenandoah-in-production/,shenandoah gc production experience report,shenandoah gc production experience report zgc shenandoah grammarly shenandoah gc shenandoah gc roman kennke aleksey shipilã v christine flood adoptopenjdk build page reason using shenandoah gc first encounter initial impression reqs mb gb living shenandoah jvmhiccupmeter jvmhiccupmeter jhiccup jvmallocratemeter jvmallocratemeter allocation profiler asyncprofiler cljasyncprofiler shenandoah failure mode shenandoah tuning adaptive static compact nitty detail surprise reflection callsite inflation amazon ec cpu share clojure specific cljasyncprofiler reference conclusion footnote concurrent mark sweep,may gc production experience reportupdate made several edits post since aleksey shipilã v kind enough suggest many correction improvement closely follow jvm development scene probably noticed last year renaissance java garbage collector finally becoming default garbage collector java onward oracle zgc take inspiration azul pauseless garbage collector shenandoah developed red hat evident garbage collection mean solved problem people care garbage collector becoming faster handling larger heap post like describe experience using shenandoah gc real project grammarly moderately demanding performance perspective wo nt mere tribute piece technology rosetinted walk park rather want give enough motivation care gc running project explain situation shenandoah superior provide enough tip operate gc production environment ready hop aboard wild gc ride shenandoah gc shenandoah gc mostly concurrent garbage collector jvm platform developed team red hat notable participant roman kennke aleksey shipilã v christine flood concurrent mean gc try perform work parallel rest application achieves shenandoah goal minimizing pause gc inflicts user code another shenandoah design goal work efficiently small large heap frankly nt make much sense repeat rich information available shenandoah gc new topic welcome read shenandoah home page watch following talk alexei anyway short list statement shenandoah concurrent gc nt feel like diving informative source right classic gc also called stw stoptheworld work stopping application thread whenever free memory left removing garbage compacting live object resuming application stoptheworld pause last ten second increase linearly size heap many modern gc eg also generational group object several generation based many gc cycle object survived generation apply different garbage collection strategy expected efficient particular generation shenandoah gc also produce stw pause keep short performs bulk gc work concurrently application running length stw pause nt increase much size heap shenandoah gc also generational mean mark live object every gc cycle something generational gc avoid return shenandoah penalized workload benefit generational hypothesis shenandoah gc pay price concurrent reduced application throughput application whole gc phase slower shenandoah gc get shenandoah garbage collector officially become part jdk since version available adoptopenjdk build ready yet move onto java shenandoah also backported refer page list available binary build covered ready move reason may need shenandoah project reason using shenandoah gc common misconception developer community gc pause important latencycritical application eg highfrequency trading hence writing something mundane like another rest api choosing proper gc least concern indeed writing program accommodate arbitrary long pause picking throughputfocused stoptheworld gc like parallelgc valid thing good example workload batch processing task nt care hiccup along way long final result arrives time however writing kind interactive application api website gc pause become much impactful gc pause stall program completely outer world appears frozen obvious effect request caught pause receive response later depending duration pause remember ten second conventional gc client might give request time may decide retry even pending request demand attention pause circuit breaker might open service caller side take time close back sufficiently long pause may even cause service fail healthchecks several time row make supervisor restart one node restarting others must sustain higher load increase chance experiencing longer pause cascading failure unpredictable gc pause create instability system ripple far beyond paused application client backpressured queue overflow timeoutexceptions fly monitoring tool causing pager beep woefully course make system robust sort failure reality though system accommodate hiccup must sufficient buffer term cpu time queue length acceptable response time etc like boy cried wolf expected microoutages make tolerant alert complacent real trouble happens brings u another surprising point even though shenandoah take cut application throughput may cheaper run shenandoah rather conventional gc throughput reduction predictable easy plan program run slower bring server long gc pause rapid volatile ca nt autoscale order fall must allot extra resource handle resource idle time eat money longer potential pause bigger leeway need either accept system occasionally erratic enough rambling let hear advertised experience running shenandoah real project first encounter initial impression let start word application tried shenandoah give broader context nothing simplistic reverse proxy onetomany fanout prepostprocessing request go get slightly modified sent multiple upstreams response collected combined response go back client seemingly trivial project complicated fact request response carry quite large json payload want handle rate reqs inout network bandwidth reaching mb heap size set gb fill available memory aws instance application nt much keep memory must enough contain incoming request stay heap upstream response come back second starting usual newly created service worked reasonably well reaching peak load point becoming whimsical fragile frequent pause interleaved occasional multisecond fullgc event imagine happens rps service operating capacity decides take fivesecond break grows huge backlog next second pause spin like crazy trying dig queue request caught pause one get degraded qos bit bad luck another problem eg sudden traffic spike might coincide pause perfect storm knocking service entirely foot tuning option seemed help first ultimately made setup even unstable might seem straightforward tinker thing like youngold ratio practice bring app novel failure mode confess gc expert approach tuning perhaps naive nevertheless probably would nt expect deeper level sophistication average java application writer ordinary joe like ca nt tune gc properly probably good idea unfruitful attempt make service stable peak load switched shenandoahenabled openjdk image plugged xx useshenandoahgc commandline argument happened see chart maximum gc pause length time shenandoah cut biggest normal pause m m chart nt show multisecond pause caused time time shenandoah nt seem problem different failure mode mention later suddenly service started perform much reliably several performance bottleneck lifted allowing u push higher throughput per machine could raise heap size actually started without latency growing much bigger heap gave larger buffer handle traffic spike overall qos improved significantly reducing latency percentile longer timespan living shenandoah honeymoon new garbage collector lasted swapping gc indeed improved enough aspect application runtime call victory however care stability performance service point invest bit effort changing one parameter section tell tool tip knowledge necessary run shenandoah efficiently jvmhiccupmeter jvmhiccupmeter miniature library measure systeminduced pause stall maximally trimmed version jhiccup library written gil tene jhiccup designed accumulate pause whole program run jvmhiccupmeter run continuously expose observed stall via callback library may seem redundant given shenandoah java gc expose information gc pause via mbeans gc log however hiccup meter may sometimes spot pause gc fails report pause unrelated gc eg triggering heap dump library single java class nt feel like adding extra dependency project simply copying class work well jvmallocratemeter modern gc shenandoah included designed handle huge amount garbage without much trouble however concurrent gc must collect garbage faster application produce thus tracking rate program allocates object still good idea surprisingly enough jvm nt expose allocation rate convenient way get information gc log practical realtime monitoring instead use another microlibrary jvmallocratemeter measure allocation rate given point time forward data monitoring solution alwayson view metric give intuition whether program allocates much help detect allocation spike may cause longerthanusual gc pause like previous library one fit one class file trivially included project asis allocation profiler knowing absolute value allocation rate useful time come reduce amount garbage application generates memory profiler prof beneficial tell exact part program produce garbage focus optimizing impactful thing first many memory profilers jvm settled asyncprofiler use via cljasyncprofiler asyncprofiler us noninvasive method allocation profiling might precise instead bear negligible overhead suitable production use besides asyncprofiler draw pretty flame graph easily navigable interpretable shenandoah failure mode power innovative design shenandoah magic piece software run real unforgiving world naturally certain condition ca nt deliver paperthin pause concurrent gc run simultaneously rest program mean program continue allocate object gc running creates garbage quicker gc collect trouble shenandoah developer upfront failure mode gc describe thoroughly documentation first thing shenandoah try ca nt keep allocation called pacing shenandoah inject small pause mutator thread thread allocate object reduce rate garbage creation similar stw pause quite impact individual thread entire application monitoring pacing bit tricky since reported gc pause formally nt one resort reading gc log find pacing happened still nt help shenandoah enter degenerated mode oldschool stw gc pas difference gc work already performed concurrently wo nt redone word shenandoah almost made time concurrently fall degenerated mode end pause would shorter work stw phase unlike pacing degenerated mode gc reported proper pause visible monitoring tool start seeing shenandoah dropping degenerated mode first sign allocate much use profiler cut garbageproducing piece code finally full stoptheworld gc might still occur degenerated gc could nt free enough memory shenandoah fullgc parallel least faster singlethreaded stw gc pause might still long fortunately nt yet experienced fullgc workload shenandoah tuning shenandoah run incredibly well default option chance never change significant parameter need touch xmx give shenandoah enough heap work perfectly get understanding work tunables help fit gc specific workload shenandoah main tuning knob type heuristic us decide trigger gc default value adaptive gc infers threshold allocation rate see first minute program launch also change static manually set amount free memory left point gc trigger value latency throughput even set heuristic compact make gc run almost almost chance pacingdegraded mode happenning eventually settled compact heuristic project cpu usage nt increased much another nice feature unlike generational gc much harder render shenandoah unstable changing tunables might hamper throughput somewhat wo nt accidentally jeopardize latency tunables subjectively intuitive impact better understood nitty detail surprise lot helpful information available shenandoah gc encourages investigate understand better gc log also informative extra killer feature application shuts shenandoah print gc log detailed table describing much time phase gc cycle took armed data documentation shenandoah internals optimize gc time even discovery made heavy churn weak reference soft phantom finalizers substantially increase shenandoah pause must processed stoptheworld even nt employ weak reference directly library framework used program rely case netty leak detection mechanism us finalizers spot unreleased refcounted object disabling leak detection production noticeably improved pause time java garbage collector general nt like contended synchronized block inflate monitor increase size rootset made mistake trying save fifty byte per object replacing reentrantlock synchronized class method ultimately rolled back reentrantlock implementation shenandoah reported higher pause optimization actually nice gc would nt clear pause came one real surprise shenandoah reason slowly degrading performance time pause time increasing twice day uptime final gc distribution table blamed class classloader scanning time spent debugging turned class loading leak caused reflection callsite inflation apparently mechanism jvm generates class runtime reflective access class unloaded reason bandaided problem setting make sure shenandoah get enough thread course occur automatically shenandoah decides many thread use based number cpu core machine happen use amazon ec run jvm forget set cpu share container many people truly included java end seeing one cpu core shenandoah use one concurrent thread collection entire application likely crash burn clojure specific might notice throughout whole essay nt mentioned project tested shenandoah written clojure nothing post clojurespecific highlight seamlessly clojure programmer tap vast powerful java ecosystem everything written applies much jvm language java however peculiarity related combination shenandoah clojure worth mentioning idiomatic clojure code heavily utilizes immutable object collection average clojure program would produce garbage fortunately might become issue pushing limit application performance even tool like cljasyncprofiler discover offending part rewrite mutable collectionspure java nobody take away using clojure clojure compiler implemented every clojure function dedicated java class generated lead clojure program quite lot class shenandoah scan class object stoptheworld phase class longer pause time mean probably would get somewhat longer pause shenandoah clojure compared java clojure might still good fit highfrequency trading everything else enough reference conclusion post already grown big keep summary short shenandoah impressively designed garbage collector switching immediately bring value application despite fresh somewhat experimental ready used production stellar observability documentation smooth transition pain reap initial benefit encourage explore learn domain improving program even hope read inspired check shenandoah see fit problem space share experience spread word people get know new garbage collector next time footnote gc like concurrent mark sweep collector nt perform compaction thus may lower pause period time eventually heap becomes fragmented though drop logic shenandoah compact heuristic prevent fruitless cycle tracking amount memory allocated since last gc cycle application nt allocate much compact mode wo nt run applies reference shortlived referent weak reference live referent nt trouble
207,Lobsters,clojure,Clojure programming,"What I learned after writing Clojure for 424 days, straight",https://medium.com/@shivekkhurana/what-i-learned-after-writing-clojure-for-424-days-straight-8884ec471f8e,learned writing clojure day straight,learned writing clojure day straight ok every day working day clojure clojurescript clojerl cljperl others let start clojure suck hard find engineer cowomen unsplash closely controlled rich hickey cognitect flooded parenthesis http slow startup time steep learning curve http http githubcomshivekkhuranaemacsd start learning clojure lisp arc aaron burden unsplash first version reddit continue working clojure probably forever lisp ruslan blog li p immutability fake rich hickey compiles jvm j graal http repl driven development readevalprintloop amazing iobert talk stuart halloway relatively succinct productive typed spec spec clojurists fix something broken macro rich hickey conclusion tl dr medium github twitter,learned writing clojure day straightok every day working daysi working clojure project juxt year never written experience writing article research problem community face reddit hackernews github issue google trendspast month google trend python red v clojure blue v javascript yellow clojurescript never seemed problematic demandnot many people use clojurescript first languagethose need guidanceas blogger incentive write itclojure fundamentally changed thought process affected write j code general even though evident marketing branding benefit writing clojure still gon na itwhat clojure clojurescript clojure dialect lisp originally meant compile jvm extended clojurescript version clojure compiles javascriptclojure logoboth clojure clojurescript production ready supported cognitect host community implementation clojerl cljperl otherslet start clojure suckswhen considering new addition stack important consider long term consequence clojure great language come issue way aroundit hard find engineersnot many people code clojure come regular concern talk someone itphoto cowomen unsplashthis also seems norm company rely clojure compared nodejs python demand supply clojure resource minuscule hard find clojure job reasonit closely controlled rich hickey cognitectit hard label pro con rich hickey fantastic thinker clojure extremely mature language however conflict community cognitect refused address concern core level said norm extend language using library personally like way let rich control clojure good flooded parenthesis xkcd accurate insider perspectivehttps true parenthesis problem sometimes especially getting started used think type match bracket manually case tool help structural editing month bracket become invisibleit slow startup timeclojure run jvm significantly slower startup time compared node problem outsider perspective repl start app keep running background interactively include new change without startup every timeit steep learning curveeven experienced developer never worked lisp tooling kinda complex majority clojure devs use emacs hard learn started career sublime text atomthe preferred environment clojure dev state clojure http old joke still go around emacs great o lacking good text editor experience emacs beast worth taming mine look like tab snappy goto anything feature still get everything donemy emacs setup config http githubcomshivekkhuranaemacsdif emacs much appetite cursive plugin intellij also use vscodewhy start learning clojure mentor suggested learning lisp paul graham founder ycombinator lisp hacker know hackernews written lisp dialect called arcphoto aaron burden unsplashthe first version reddit also written common lispi curious day job included writing j python often found stuck language level feature always lookout better tool past year settled clojure react think go furtherwhy continue working clojure probably forever impressive jargon term functional lisp builtin support persistent data structure async channel reactivity also superb standard library everything built around lean coreclojurescript version target j us google closure library known faster webpack sometimes even comparable vanilla j come javascript realm imagine j rxjs immutable lodash built languageif skeptic like try clojure improved developer affected way write javascript way tackle problem generallisplanguages like python focus readability making code look like english language lisp hand ignore english language semantics completely enforce structural syntaxabstract syntax tree mathematical expression ruslan blogfor example expression represented imageall lisp code list primitive primitive element set vector map string number symbol acronym lisp stand list processing code basically tree lispthe structural code allows compiler optimization possible extremely hard english inspired codeimmutabilityimmutability mean variable never overwritten change required old variable stay fresh copy generatedrub immutability fake rich hickeythis seemingly simple functionality help build complex pipeline one toughest problem programming apart naming cache management handling side effect immutable data structure make handling sideeffects le errorprone thing observing never change evercompiles jvm j graal http easily write javabased backend j based frontend using clojure interop straight forwardlearn write anywhere thin abstraction layer target runtimes one languagerepl driven developmenti quite realize power feature became part daily routine probably experience appreciate ingenuity genius repl read eval print loop repl basically let load part code interactive runtime play using apprepl illustration readevalprintloop amazing iobertfor example consider database function tied controller called rest api task optimize query real world make change db function let code reload automatically manually check result rest apiwith repl skip boring part bring db function dependency repl edit real time interested repl driven dev highly recommend watch talk stuart hallowayrelatively succinct productivethis subjective claim take grain salt find clojure syntax terse expressive language ever used lead smaller code basis productive teamsnot typed spec dthere native way enforce type clojure different way enforce contract called spec much javalike type system completely optionalclojurists fix something brokenit perfectly ok use library updated past year production community take stand workflow stick year unlike cough cough javascript cough cough macrosclojure let extend syntax first class support macro consider following example somethingistrue somethingelse converted macro follows actual source defmacro evaluates test logical true evaluates body implicit added test body list test con body used somethingistrue somethingelse rich hickeynot sure make sense mention rich hickey clojure feature get hooked talk presentation changein conclusion tl dr clojure practical lisp lean welldesigned core help write maintainable code firstclass support javajavascript interop help leverage existing ecosystem problem hear around ecosystem tackled easilyif like learn clojure highly recommend following resource liked read want stay updated please follow medium github twitteryou might also like
208,Lobsters,clojure,Clojure programming,Bron-Kerbosch Algorithm in Clojure,https://kaygun.tumblr.com/post/184687464784/bron-kerbosch-algorithm-in-clojure,bronkerbosch algorithm clojure,description problem clique bronkerbosch algorithm wrote earlier common lisp clojure implementation clojure,description problemassume simple undirected graph g v e subset c set vertex v called clique every pair distinct element bin c pair b edge g set clique graph partially ordered set inclusion clique called maximal maximal element poset today going implement version bronkerbosch algorithm find set maximal clique graph wrote earlier version common lisp today going write implementation scratch clojurean implementation clojurelet u start clean namespace necessary library loaded n bronkerbosch use clojureset going represent graph set edge edge pair distinct element chosen underlying set vertex going need two utility function later first return set vertex given graph second return set neighbor given vertex given graph defn vertex graph reduce union graph defn neighbor v graph difference reduce union filter contains v graph v bronkerboschvertices bronkerboschneighbors finally main function implemented recursive function defn bronkerbosch graph bronkerbosch graph vertex graph graph p x r re empty x empty p union r re loop p p x x c re empty p c let v first p nv neighbor v graph recur rest p union v x bronkerbosch graph intersection p nv intersection x nv union v r c bronkerboschbronkerbosch order test code going need function generates random simple graph defn getrandomgraph n k range n mapcat fn repeatedly fn randint k distinct bronkerboschgetrandomgraph ok random graph def randomgraph getrandomgraph randomgraph bronkerboschrandomgraph let u test main function random graph bronkerbosch randomgraph
209,Lobsters,clojure,Clojure programming,Discovering Runtime Function References in Clojure,http://metaredux.com/posts/2019/05/04/discovering-runtime-function-references-in-clojure.html,discovering runtime function reference clojure,new version rebl orchard,cognitect recently released new version rebl cool find function reference usage feature rich kind enough answer question new feature implementation slack even shared one central bit namely fdeps function discovers runtime dependency function defn fdeps val set val class getdeclaredfields keep fn javalangreflectfield f identical clojurelangvar gettype f javalangreflectmodifierispublic getmodifiers f javalangreflectmodifierisstatic getmodifiers f f getname startswith const get f val nil work practice simple example defn foo map inc range fdeps foo clojurecoremap clojurecorerange clojurecoreinc basically get set var used depended body target function thing keep mind function relies clojure implementation detail although unlikely going change relying runtime information mean function analyzing must loaded see inlined function macro fdeps operates function value var symbol although trivial make generic get direct dependency function word get transitive dependency including dependency nested lambda defn bar x map range fdeps foo clojurecoremap clojurecorerange notice clojurecore missing might wondering good function importantly relate something like find reference admittedly way useful know exactly functionality implemented rebl share simple implementation find reference built top fdeps idea defn allvars definition omitted return list currently loaded var defn frefs var let allvars allvars allvals map varget allvars depsmap zipmap allvars map fdeps allvals map first filter fn k v contains v var depsmap use frefs fdeps somensfrefs frefs clojurecoremap ton result something pretty useful know often resorted grep friend needed find function used frefs definitely robust grep least come finding false positive notice conveniently omitted implementation allvars keep focus frefs find slightly sophisticated implementation fdeps frefs orchard lead fun function going used new nrepl middleware part cidernrepl finally going provide form find reference cider outofthebox actually brings reason wrote blog post first place long believed best way approach type functionality static analysis code good approach general although come added complexity stemming fact longer relying simply repl state introspection eg constantly keep code ast sync nothing bad approach far concerned great able provide really useful form find reference trivial nature pretty fast replpowered sure super reliable noted yield good result play well whole idea replpowered introspection tool like cider built upon already running prototype find reference cider based code shared post looking pretty sweet far hope something share everyone subject next week keep hacking may source p really great someone figured clojurescript well bet must way implement something similar using compiler state
210,Lobsters,clojure,Clojure programming,Generating images with Truchet tiles,https://www.maria.cloud/gist/9a5f471f7a95dcc8ed1cea719650d7e9,generating image truchet tile,,
211,Lobsters,clojure,Clojure programming,Retrospective on migrating a complex JavaScript application to ClojureScript,https://www.youtube.com/watch?v=yhQp-GDHnZ0,retrospective migrating complex javascript application clojurescript,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature migrated complex javascript application clojurescript stepbystep alex king youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature migrated complex javascript application clojurescript stepbystep alex king youtube
212,Lobsters,clojure,Clojure programming,Meta-Circular Adventures in Functional Abstraction (2014),https://web.archive.org/web/20160609222905/https://chriskohlhepp.wordpress.com/metacircular-adventures-in-functional-abstraction-challenging-clojure-in-common-lisp/,metacircular adventure functional abstraction,challenging clojure common lisp day motivation day essence functional programming day setup day programmable programming language day putting together day actor model day taking spin conclusion improvement setting stage epilogue algebraic sum type postscript exhaustive pattern matching abacus unified syntax pattern matching reference reader comment go top day motivation modern lisp functional programming java platform designed concurrency idiomatic functional programming concurrency http chriskohlheppwordpresscomconvergenceofmoderncplusplusandlisp birthday cake recipe http chriskohlheppwordpresscomfunctionalprogrammingfunctionalprogrammingconcepts functional birthday cake go top day essence functional programming function first class citizen compositionality f g x higher order function algorithm first http chriskohlheppwordpresscomconvergenceofmoderncplusplusandlisp function expression side effect freedom type inference algebraic data type pattern matching actor model state managed separately algorithm pure functional reactive programming frp target feature frp actor model pattern matching immutable collection algebraic type exhaustive pattern matching communicating sequential process go top day setup http wwwquicklisporgbeta installation http wwwclikinetcurrentrecommended http wwwclikinetpattern go top day programmable programming language http chriskohlheppwordpresscomconvergenceofmoderncplusplusandlisp sbclrc sbclrc sbclrc sbclrc go top day onward putting together lisp cell input cell cin ruled cell c edge element element adjoin element element element go top day actor model go top day taking spin observer allow u trigger specific action response change state model http defobserver batterp newvalue format printf roll go top conclusion go top improvement go top epilogue compile time abstract syntax tree asts clalgebraicdatatype go top postscript adding exhaustive pattern matching go top abacus unified syntax pattern matching algebraic type common lisp http githubcomchriskmanxabacus type message type message match adt match batteringredient match message type symbol arrow symbol sentinel symbol match amatch algebraicguard algebraicguard type algebraicguard message match useextendedmatchsyntax disableextendedmatchsyntax github repository http githubcomchriskmanxabacus go top reference http enwikipediaorgwikiclojure http http chriskohlheppwordpresscomconvergenceofmoderncplusplusandlisp http wwwquicklisporg http enwikipediaorgwikifirstclassfunction http enwikipediaorgwikihigherorderfunction http enwikipediaorgwikicomputerprogram http enwikipediaorgwikialgebraicdatatype http wwwsbclorg http enwikipediaorgwikifunctionalreactiveprogramming ttp wwwclikinet http commonlispnetprojectcells http http bitbucketorgtarballsaregoodclalgebraicdatatype go top like,challenging clojure common lisp table content day motivation day essence functional programming day setup day programmable programming language day putting together day actor model day taking spin conclusion improvement setting stage epilogue algebraic sum type postscript exhaustive pattern matching abacus unified syntax pattern matching reference reader comment go top day motivation clojure dialect lisp programming language created rich hickey clojure according wikipedia mr hickey created clojure wanted modern lisp functional programming symbiotic established java platform designed concurrency clojure since clojure gathered somewhat following functional programming community chief contender functional programming jvm scala programming language blog attempt document quest achieve two mr hickey goal using straightup common lisp idiomatic functional programming concurrency tried clojure disheartened two aspect language lackluster performance constant resurfacing java jvm error message aspect working clojure know clojurescript ability run google suppose really wanted nonhosted language intuitively map abstraction assembler code calling something like disassemble simple function tried scala missed homoiconic macro somehow could shake feeling homoiconic macro intimately tied essence functional programming also puzzled suggestion lisp current form somehow lacked modernity popularity yes modernity sure add one twist story lisp programmable programming language surely reengineer design goal clojure using common lisp way macro challenge without effort therefore two rule game allowed write keyword defmacro must rely stock library framework stock defined installable via common lisp package manager quicklisp quicklisp long short want utility clojure performance common lisp dough hoyte point book let lambda letoverlambda lisp precisely functional programming language sense haskell ml functional programming language aim challenge http chriskohlheppwordpresscomconvergenceofmoderncplusplusandlisp lispconvergec showed bring lisp close c performance matching generated assembler code blog aim bring lisp line idiomatic functional programming concept two rule mind let u see far travel birthday cake recipe see also http chriskohlheppwordpresscomfunctionalprogrammingfunctionalprogrammingconcepts start functional birthday cake recipe functional birthday cake let batter flour egg milk let dough knead batter minute let cake bake dough minute let icedcake cake sugar coating let birthdaycake icedcake candle emergent behaviour solution transparent contrast imperative objectoriented recipe bakingform container containeradd flour containeradd egg containeradd ml milk containerknead minute containerbake containeraddcoatingtocontents sugar containeradd candle question dough emerge cake emerge cake emerge emergent behaviour imperative solution entirely opaque use idea functional birthday cake little game embark game let u first embark detour go top day essence functional programming essence functional programming broadest term may said function first class citizen rather vague definition standard wikipedia article functional programming quite lengthy little point repeating point worth repeating functional programming aim compositionality mean mathematical composition along line f g x object orientation fall short readily permit mathematical composition function composition one reason brevity functional program another reason first class function firstclass enable higher order function higherorder higher order function interesting impact power abstraction offered programming language traditionally code computer program viewed separately data operates wikipedia state computer program execution normally treated different data program operates article state computer program sequence instruction collection computer program related data referred software computerprogram computer program may said sequence instruction code operating data functional programming unit sequence instruction code function mean higher order function take function argument return function value strictly speaking mean diverged separation code data created paradigm function sequence code computes data computes function sequence code lie true power abstraction functional programming language higher order function essence metacircular code computes code basis power abstraction lisp respect higher order function lisp macro two side coin wikipedia state macro also used achieve effect higher order function higherorder unit organization functional programming function unit organization lisp macro programming simply form two approach different many way treatment type one commonality permit creating abstraction computing function lie source power abstraction brevity functional programming lisp function first class citizen concept also pave road algorithm first approach see http chriskohlheppwordpresscomconvergenceofmoderncplusplusandlisp aspect functional programming emphasis representing function expression rather imperative procedure emphasis side effect freedom impact ability write scalable concurrent application aspect modern functional programming include type inference algebraic data type associated pattern matching adt concept central ocaml haskell algebraic type aspect emerged within functional programming rather basis yet increasingly seen integral part functional programming benefit bestows equally model concurrency emerged functional programming increasingly seen core aspect one model actor model popularized erlang adopted scala clojure similarly adopted software transactional memory aspect modern functional programming seen left behind common lisp attempt bring together coherent fashion much rich hickey done clojure jvm functional programming exhibit predisposition towards recursion iteration allows representing many problem without intermediate state happens state let u examine ocaml implementation factorial algorithm ocaml factorial factorial function composed entirely expression free intermediate state state resides stack important point stack separately reasoned proven correct right thus state managed separately algorithm function implementing algorithm manner said pure turn lead provably correct software another core aspect functional programming haskell achieves via monad another vehicle manage state isolation point worth repeating state exists managed separately algorithm monad stack vehicle enable separate treatment algorithm state third vehicle functional reactive programming frp frp target feature list target feature somewhat subjective feature chosen sake benefit purport bestow since aim create something concrete want chose sensible combination feature temptation cram every feature one may think make awkward setup follows necessarily limited feature set frp separate algorithm state actor model scalable message passing based concurrency pattern matching expressiveness promotion correct code feature desirable including example project rather defer relevant quicklisp project reference implementation include immutable collection algebraic type exhaustive pattern matching communicating sequential process go top day setup using following platform steel bank common lisp asdf quicklisp familiar asdf common lisp system definition facility may thought package manager local installation lisp quicklisp repository make package available local asdf installing using quicklisp easy simply follow instruction http wwwquicklisporgbeta installation time writing library framework loading new library framework achieved thusly example wanted install latest json library would issue ql quickload command quicklisp load package cljson subsequently available use set library framework varying state development le mature le maintained therefore pay consult common lisp wiki current recommended library page http wwwclikinetcurrentrecommended point time suggestion currently recommended package according relevant domain example identified pattern matching point interest common lisp wiki catalog le package pattern matching http wwwclikinetpattern general common lisp wiki excellent information repository clwiki go top day programmable programming language started experiment truly skeptical know language designer slave composition feature programming language tradeoff must carefully balanced one mistake potential locking whole class feature time future user demand backwards compatibility code base wrong design choice simply backtracked patched fixed release version anything probably reason development new programming language survive like c absorb feature even new paradigm become increasingly awkward see also http chriskohlheppwordpresscomconvergenceofmoderncplusplusandlisp suspicion yes would able use library package quicklisp looked though feature area sought address ample coverage also suspected would able blend coherent functioning whole wrong underestimated malleable lisp sbclrc configuration file sbclrc home folder used run lisp startup steel bank common lisp since lisp configured programmed reprogrammed lisp use sbclrc customize lisp image personal sbclrc shown hint scroll right reveal long line following line added ql addtoinitfile quicklisp let quicklispinit mergepathnames quicklispsetuplisp userhomedirpathname probefile quicklispinit load quicklispinit require asdf configure sbcl functional distributed programming handlerbind sbext implicitgenericfunctionwarning mufflewarning sbkernel typeproclamationmismatchwarning mufflewarning stylewarning mufflewarning warning mufflewarning functional programming default package pattern matching asdf loadsystem optimum asdf loadsystem clalgebraicdatatype asdf loadsystem clunification frp functional reactive programming framework asdf loadsystem cell functional data structure asdf loadsystem fset functional idiom library asdf loadsystem folio concurrent programming actor model asdf loadsystem clactors csp concurrent process algebra asdf loadsystem chanl asdf loadsystem calispel software transactional memory asdf loadsystem clstm original asdf loadsystem clstmx high performance static code analysis asdf loadsystem lispcritic appease paren critic asdf loadsystem readable default namespaces usepackage clactors usepackage cell usepackage optimum unit testing asdf loadsystem fiveam creates lisp image preconfigured functional reactive programming frp pattern matching functional data structure actor model software transactional memory concurrency algebra csp frp pattern matching actor model preloaded default namespace go top day onward putting together let u start model cake try build cake frp model essentially computation graph node edge expect input node accept event dependent node automatically recalculated input node change node connected edge function mapping one node onto another keeping functional programming concept expect function free state cake state factorial example execution stack anticipate statechange handled isolation verified independently separate concern statechange state goal version cake model begin identifying constraint model input node followed dependent node version add auxiliary function useful predicate hint scroll right reveal long line defmodel cake constraint reader attribute denotes readonly accessor immutable value batter need milk egg flour batter reader batter initform milk egg flour iced cake must sugar topping icing reader icing initform sugar birthday cake must candle decoration reader decoration initform candle basic action need performed todos reader todos initform knead bake decorate event node new ingredient mixed mixin initform cin nil new action performed action accessor action initform cin nil dependent node initforms represent edge time total set ingredient set union last mixin previous ingredient ingredient accessor ingredient initform c funcall allingredientsfu self mixin self time set done action dones set union last action previus action dones accessor dones initform c funcall alldonesfu self action self couple point worth noting constraint implemented via list using set semantics frp model based lisp cell cell eventnodes designated input cell identified moniker cin respective initforms case input cell initforms represent constructor dependent node referred ruled cell identified moniker c respective initforms initforms ruled cell represent edge computation graph input cell change ruled cell recomputed automatically far elided definition batter done cake done also elided definition two function appear calling alldonesfu allingredientsfu apparent incongruity may perceived set done task dones obviously mutable state initform dones contains state pattern suggests closure involved indeed alldonesfu allingredientsfu closure predicate hint scroll right reveal long line batter predicate batterp time batterp satisfied batter constraint set subset ingredient batterp accessor batterp initform c subsetp batter self ingredient self done predicate alldonep time done set difference todos set dones emty set alldonep accessor alldonep initform c setdifference todos self dones self pre note predicate ruled cell dependent node computation graph closure hint scroll right reveal long line closure allingredientsfu cell nil accessor allingredientsfu initform allingredientsfu alldonesfu cell nil accessor alldonesfu initform alldonesfu closure initialized special variable allingredientsfu alldonesfu unfamiliar special variable essentially global variable whose state local scope later make global package yet define meanwhile need introduce meat closure instance allingredientsfu alldonesfu set need constructor closure constructor shown hint scroll right reveal long line defun constructaccumulator closure constructor lambdaoverletoverlambda pattern let element list lambda element setf element adjoin element element element actually say inside accumulator constructor lambda take element lambda also refers list element lexical scope lambda add element list using set semantics way adjoin operator return list element return value recall functional programming value last expression return value whole expression element actually live surrounding let binding element free variable bound argument list lambda closure construct whose state closed free variable another way saying closure remembers associated list element note analog stack factorial example tracking state surrounding recursive factorial function accumulator tracsk direct allingredientsfu alldonesfu accumulator constructor achieved separated concern state change accumulation element set representation state cake model shown finished model cake note made one minor modification accumulator remove nil element set hint scroll right reveal long line defun constructaccumulator closure constructor lambdaoverletoverlambda pattern let element list lambda element setf element remove nil adjoin element element element defvar allingredientsfu nil defvar alldonesfu nil defmodel cake closure allingredientsfu cell nil accessor allingredientsfu initform allingredientsfu alldonesfu cell nil accessor alldonesfu initform alldonesfu constraint batter need milk egg flour batter reader batter initform milk egg flour iced cake must sugar topping icing reader icing initform sugar birthday cake must candle decoration reader decoration initform candle basic action need performed todos reader todos initform knead bake decorate event node new ingredient mixed mixin initform cin nil new action performed action accessor action initform cin nil dependent node initforms represent edge time total set ingredient set union last mixin previous ingredient ingredient accessor ingredient initform c funcall allingredientsfu self mixin self time set done action dones set union last action previous action dones accessor dones initform c funcall alldonesfu self action self batter predicate batterp time batterp satisfied batter constraint set subset ingredient batterp accessor batterp initform c subsetp batter self ingredient self done predicate alldonep time done set difference todos set dones emty set alldonep accessor alldonep initform c setdifference todos self dones self interesting note cell model derives paradigm common lisp object system clos mean semantics syntax associated class clos also hold cell instance programming paradigm frp deriving another clos struck particularly characteristic lisp c java possible derive one class another lisp possible derive entire paradigm another truly exhibit malleable language however model loose end present nothing set allingredientsfu alldonesfu also plenty room thing go wrong action cake may performed order ingredient added wrong time realistic model cake passive stick candle baking get molten mess wax however tempting may model desired invariant level tune problem domain requirement change model evolve unison lack referred connascense connescence connascent cake baker baker actor enforces invariant go top day actor model time introduce actor model expect enforce correctness level abstraction might also expect pattern matching play part would right firstly actor model hint scroll right reveal long line defactor actorclass state messagevars behavior definition mind define baker define invariant stitch together three aspect actor model pattern matching frp hint scroll right reveal long line defactor baker state form let binding actor local state allingredientsfu constructaccumulator alldonesfu constructaccumulator mycake makeinstance cake message form match single argument message behavior form match message match adding batter ingredient list add ingredient member ingredient batter mycake batterp mycake batter already done format error batter complete nt need ingredient member ingredient ingredient mycake format error already batter ingredient setf mixin mycake ingredient update cake match adding icing ingredient baking list add ingredient member ingredient icing mycake member bake dones mycake member ingredient ingredient mycake format error already cake ingredient setf mixin mycake ingredient update cake match adding decoration ingredient baking list add ingredient member ingredient decoration mycake member bake dones mycake member ingredient ingredient mycake format error already cake ingredient progn setf mixin mycake ingredient update cake setf action mycake decorate update cake match action list act todo member todo todos mycake alldonep mycake cake already finished format error cake finished decline todo member todo dones mycake todo already done format nil error already todo cond equal todo bake bake kneading dough member knead dones mycake format erros knead batter first ca nt todo setf action mycake todo update cake equal todo knead knead dough batter complete batterp mycake format error batter ready ca nt knead dough setf action mycake todo update cake format error nt know todo fallthrough format error recipe error match next message next finally prefix everything package definition hint scroll right reveal long line defpackage bakery import namespaces following package use commonlisp clactors optimum bordeauxthreads cell bakery package exported symbol export baker cake inpackage bakery note actor essentially pure rule engine without state created two closure constructor passed cake way dynamic scope reference create cake frp model defer state baker indeed store information cake information cake observed go top day taking spin find three aspect actor model frp pattern matching actually dance together digress aside error message theoretical model yield useful output yet want see piece dance together want add add useful output like baker want observe happens let u add observer observer allow u trigger specific action response change state model also keep logic trigger consequent event entirely outside model observed useful separation concern concern tend evolve independently lack software engineering term connascense http show example observer pattern implemented c significantly shorter might ideal abstraction observer pattern minimum need declare intention observe something wish observe finally probably interested new state arises ideally would like get beforestate afterstate avoid store state fit nicely functional programming model first observer hint scroll right reveal long line defobserver batterp self cake observer cell batterp instance cake model newvalue new format cake observer batter complete define observer defobserver batter ready predicate batterp beforestate binding oldvalue afterstate binding newvalue really interested predicate change false batter ready true batter ready boolean simply say newvalue simplistic action triggered output string cake observer batter complete lisp command format output equivalent printf c sake completeness rest observer hint scroll right reveal long line defobserver alldonep self cake observer cell alldonep instance cake model newvalue new format cake observer cake done defobserver ingredient self cake observer cell ingredient instance cake model format cake observer ingredient newvalue defobserver dones self cake observer cell dones instance cake model format cake observer completed task newvalue one point worth repeating separated concern state change cake model dealing state change sidelined observer store state look delta state trigger action callouts callback plumbing course like example factorial function state hidden stack mechanic hidden case frp model cell cell observer abstraction adjunct cell cell point aspect separately verifiable free evolve independently requirement user domain change aim directly essence software engineering manage complexity roll let build model screenshot sbcl repl emacs building model compilation time real refresher come world clojure next pull bakery package current namespace define instance baker create baker immediately observer chime ingredient cake task completed let something inherently concurrent actor model albeit one baker let talk tell add flour add flour sneaky let tell knead day maybe perhaps rule engine set invariant appear playing together nicely let add milk egg batter complete two observer chimed batter complete let ruin recipe add pepper pepper please ok patternmatch milk milk make dough soupy really mischievous fool ok time play nice baker ball resign going program since wreck havoc bake cake observer chiming completed action missing ah icing candle icing need sugar top icing cake done note observer invoked observed value change intuitive last observer tell u finished also worth pointing cell frp model recalculate relevant part computation graph dependent node without upstream change recalculated possible define node eagerly evaluated default lazily evaluated semilazily evaluated high level optimization technique improve performance go top conclusion integrated three paradigm frp actor model pattern matching perhaps striking none author framework worked together make feature framework blend done blending surely one author might well benefit hindsight another work none note example framework achieves interaction another mix simply design note differs fundamentally class based interaction c java target might interact class abstract interface particular version c java time even minor version difference sufficient trip even framework full well intended cooperate contrast blending source code level primitive dissimilar otherwise unrelated framework demonstrated made cooperate perfect harmony also achieved without referring macro form metaprograming rule game full source code listing follows hint expand via view source code hint scroll right reveal long line defpackage bakery import namespaces following package use commonlisp clactors optimum bordeauxthreads cell bakery package exported symbol export baker cake inpackage bakery defun constructaccumulator closure constructor lambdaoverletoverlambda pattern let element list lambda element setf element remove nil adjoin element element element defvar allingredientsfu nil defvar alldonesfu nil declaim sbext muffleconditions stylewarning declaim sbext muffleconditions sbkernel redefinitionwithdefmethod model defines node edge connect build computation graph incidentally model derives common lisp object system clos hence common lisp objectoriented semantics syntax hold defmodel cake closure allingredientsfu cell nil accessor allingredientsfu initform allingredientsfu alldonesfu cell nil accessor alldonesfu initform alldonesfu constraint batter need milk egg flour batter reader batter initform milk egg flour iced cake must sugar topping icing reader icing initform sugar birthday cake must candle decoration reader decoration initform candle basic action need performed todos reader todos initform knead bake decorate event node new ingredient mixed mixin initform cin nil new action performed action accessor action initform cin nil dependent node inir form represent edge time total set ingredient set union last mixin previous ingredient ingredient accessor ingredient initform c funcall allingredientsfu self mixin self time set done action dones set union last action previus action dones accessor dones initform c funcall alldonesfu self action self batter predicate batterp time batterp satisfied batter constraint set subset ingredient model permit adding ingredient spice subset relationship good fit batterp accessor batterp initform c subsetp batter self ingredient self done predicate alldonep time done set difference todos set dones emty set essentially say follow recipe perform task nt warrant outcome cake may destroyed alldonep accessor alldonep initform c setdifference todos self dones self declaim sbext unmuffleconditions stylewarning declaim sbext unmuffleconditions sbkernel redefinitionwithdefmethod defobserver batterp self cake observer cell batterp instance cake model newvalue new format cake observer batter complete defobserver alldonep self cake observer cell alldonep instance cake model newvalue new format cake observer cake done defobserver ingredient self cake observer cell ingredient instance cake model format cake observer ingredient newvalue defobserver dones self cake observer cell dones instance cake model format cake observer completed task newvalue abstraction rulesinvariants state cake defactor baker state form let binding actor local state allingredientsfu constructaccumulator alldonesfu constructaccumulator mycake makeinstance cake message form match single argument message behavior form match message match adding batter ingredient list add ingredient member ingredient batter mycake batterp mycake batter already done format error batter complete nt need ingredient member ingredient ingredient mycake format error already batter ingredient setf mixin mycake ingredient update cake match adding icing ingredient baking list add ingredient member ingredient icing mycake member bake dones mycake member ingredient ingredient mycake format error already cake ingredient setf mixin mycake ingredient update cake match adding decoration ingredient baking list add ingredient member ingredient decoration mycake member bake dones mycake member ingredient ingredient mycake format error already cake ingredient progn setf mixin mycake ingredient update cake setf action mycake decorate update cake match action list act todo member todo todos mycake alldonep mycake cake already finished format error cake finished decline todo member todo dones mycake todo already done format nil error already todo cond equal todo bake bake kneading dough member knead dones mycake format erros knead batter first ca nt todo setf action mycake todo update cake equal todo knead knead dough batter complete batterp mycake format error batter ready ca nt knead dough setf action mycake todo update cake format error nt know todo fallthrough format error recipe error match next message next go top improvement implied possible select two framework library lisp random blend feature combination frp pattern matching actor model carefully chosen feature set would indeed cooperate would nice introduce software transactional memory blend truly seek match clojure attempted yet also nice would exhaustive pattern matching based algebraic type lisp already native product type hence need sum type quick experiment shown epilogue go top epilogue example illustrated use algebraic sum type exhaustive pattern matching sum type let u create instance type point check type predicate sum type inheritance next define pattern match eliding polar case purpose exhaustive pattern match note get nonexhaustive match warning compile time run time behaviour would expect example ocaml indeed little game might change simple use keyword symbol algebraic data type thus add compiler hosted verification pattern match bring exploration metacircular abstraction full circle abstract datatypes ideal medium represent abstract syntax tree asts indeed whole lisp syntax fundamentally abstract syntax tree let see represent tree using clalgebraicdatatype package would amount abstract syntax tree represented inside abstract syntax tree close little teaser algebraic sum type tree voilà go top postscript adding exhaustive pattern matching epilogue example place question reemerged would possible integrate algebraic type exhaustive pattern matching already key issue matching algorithm provided algebraic data type package adt geared specifically towards algebraic data type currently recommended pattern match algorithm optimum package significantly feature complete though proven claimed efficient ideally would like keep optimum pattern matching complex destructuring using adts pattern match algebraic type construct start avoid name clash match performing usepackage adt mean must refer adt package export explicitly firstly amend package export hint scroll right reveal long line defpackage bakery import namespaces following package use commonlisp clactors optimum bordeauxthreads cell bakery package exported symbol export baker cake batteringredient milk flour egg mean exporting baker function cake model additionally also batteringredient type algebraic type three type milk flour egg constructing type batteringredients previous example took oversimplified exclude amount let plan include round number model unit type safe manner later hint scroll right reveal long line adt defdata batteringredient milk float flour float egg integer integrating pattern match within baker actor behavior form match message match adding batter ingredient adt type batteringredient adt match batteringredient message milk ml format adding milliliter milk ml flour gr format adding gram flour gr brief added type guard optimum package match algorithm refer adt pattern match extract amount wait elided egg let see happens expect fall compile time adt match compile time check compiler advises u missed case egg let put behavior form match message match adding batter ingredient adt type batteringredient adt match batteringredient message milk ml format adding milliliter milk ml flour gr format adding gram flour gr egg numeggs format adding egg numeggs compilation proceeds smoothly screenshot show action constructed exhaustive pattern matching integrated yet add type safe unit measurement yet add various cake model predicate etc point illustrate blend two pattern matching algorithm arrive comprehensive destructuring well narrower feature set around algebraic type go top abacus unified syntax pattern matching algebraic type common lisp abacus library integrate destructuring pattern matching optimum algebraic data type pattern matching algebraic data type intimately related functional programming language like ocaml haskell really continuation blog post moving area change syntax compilation process indeed require macro macro disallowed previous game see far would get wanted turn deployable package hence choice name ancient calculator abacus seemed like fitting name full source code abacus available github http githubcomchriskmanxabacus motivation let revisit current syntax behavior form match message match adding batter ingredient adt type batteringredient adt match batteringredient message milk ml format adding milliliter milk ml flour gr format adding gram flour gr egg numeggs format adding egg numeggs observe optimum type guard stipulates message must type batteringredient recall defined latter algebraic data type invoke match logic algebraic data type package adt average lisper say write see going one good enough course plenty room mistake code base grows accommodate logic presently colocated form grow apart distance term message repeated type guard type assumed operate message first optimum match statement relationship obvious way also really guard happening next variable name get changed perhaps adt match batteringredient immediately following clause match message programmer might change one variable name repeat unnecessarily need kept synch semantics hold optimum type guard ensure matched indeed algebraic type programmer ensure traditionally dynamically typed language onus programmer get type right lisp system available runtime available compile time really reason delegate type check either common sense programmer runtime watch fall hand user programmer get wrong observe overlapping namespaces intersecting match statement handful line code way handful shoot oneself foot central pattern matching functional programming deserves clean coherent syntax set create trying spare reader progression day day skip straight end syntax aim create closely follow haskell ocaml let iszero n match n true false basic construct symbol followed match expression arrow symbol mapping match clause evaluated match expression true followed sentinel symbol course lisp want follow general principle start scope end scope make configurable may introduce intermediate symbol add clarity personally think add clarity preference haskell us staunch supporter sexpression syntax argue purist stance using sexpressions witness syntax loop macro find promiscuous use symbol even standardised common lisp way let see actor model refitted new syntax using regular sexpression amatch message algebraicguard batteringredient algebraicmatchwith milk ml constructor pattern format adding milliliter milk ml flour gr constructor pattern format adding gram flour gr egg numeggs constructor pattern format adding egg numeggs observe main optimum match replaced amatch macro wrapper around optimum match macro enables algebraic pattern matching code follows might also match non algebraic type amatch enables unified syntax matching algebraic type next construct intended model universal quantification mathematics satisfy predicate algebraicguard specific type new syntax written algebraicguard batteringredient note predicate algebraicguard satisfied batteringredient algebraic data type remedy problem earlier type guard algebraicguard also make necessary binding subsequent syntax work without repetition variable note variable message longer referred overlapping namespaces match statement removed follows simple constructor pattern algebraic subtypes followed appropriate match clause let try algebraic matching action sexpression purist stop little syntactic sugar keep reading useextendedmatchsyntax algebraicguard batteringredient algebraicmatchwith milk ml format adding milliliter milk ml flour gr format adding gram flour gr egg numeggs format adding egg numeggs code snippet introduce syntax closely follows haskell ocaml including use symbol arrow symbol use closing bracket delimiter use syntax enabled purely optionally course calling useextendedmatchsyntax exists matching disableextendedmatchsyntax hoped resulting syntax offer visual clarity similar offered ocaml match syntax one great thing lisp macro macro allow user modify behaviour compiler possible verify assertion correspondingly raise warning even error let watch action firstly uncomment flour case algebraicguard batteringredient algebraicmatchwith milk ml format adding milliliter milk ml flour gr format adding gram flour gr egg numeggs format adding egg numeggs receive familiar message nonexhaustive match note compile time message runtime failure non exhaustive match let introduce deliberately malformed expression see indeed introduced new syntax appropriate compiler error algebraicguard batteringredient algebraicmatchwith milk ml format adding milliliter milk ml flour gr egg numeggs format adding egg numeggs compiler error expression next elide match symbol algebraicguard batteringredient algebraicmatchwith milk ml format adding milliliter milk ml flour gr format adding gram flour gr egg numeggs format adding egg numeggs missing match symbol algebraicguard batteringredient algebraicmatchwith milk ml format adding milliliter milk ml egg numeggs format adding egg numeggs empty expression appears verify application logic well validate basic syntax modifying behavior lisp compiler macro directly compile time feedback pattern matching syntax proposed implemented warmly welcome github repository http githubcomchriskmanxabacus go top reference clojure http enwikipediaorgwikiclojure letoverlambda http lispconvergec http chriskohlheppwordpresscomconvergenceofmoderncplusplusandlisp quicklisp http wwwquicklisporg firstclass http enwikipediaorgwikifirstclassfunction higherorder http enwikipediaorgwikihigherorderfunction computerprogram http enwikipediaorgwikicomputerprogram adt http enwikipediaorgwikialgebraicdatatype sbcl http wwwsbclorg frp http enwikipediaorgwikifunctionalreactiveprogramming clwiki http wwwclikinet cell http commonlispnetprojectcells optimum http cladt http bitbucketorgtarballsaregoodclalgebraicdatatype go top like like loading
213,Lobsters,clojure,Clojure programming,The Curious Case of Clojure Contrib,http://metaredux.com/posts/2019/04/23/the-curious-case-of-clojure-contrib.html,curious case clojure contrib,long history outdated article clojure confluence github documentation nature contrib personal perspective beyond contrib clojurewerkz clojure common ring nrepl clojure emacs free software project epilogue outside contrib,know common thing clojure contrib microservices devops everyone think know understand people different idea many year people believed contrib one following staging ground functionality eventually make way clojure standard library clojure set superior library maintainedblessed richcognitect contrib long history think course vision project changed time unfortunately quite official description contrib one really outdated article clojure confluence wanted share perspective contrib long time felt somewhat harmful effect broader clojure community putting enjoy writing article much finally found inspiration needed recent conversation github sean corfield alex miller stu halloway contrib philosophy reproduce everything discussed go read discussion peruse excellent new documentation conversation resulted nature contrib contrib really let see official documentation say subject clojure umbrella level project host many additional library called clojure contrib exist clojure organization github library use contribution model contributor agreement license copyright clojure shared infrastructure maintained clojure core team source control git library github issue jira development model patch jira pr continuous integration jenkins doc generation hosting autodoc github page build maven deployment maven central groupid orgclojure every project one owner often community member determine direction library triage patch etc project owner full commit right authenticated access project build box release contrib library open source library like open source clojure library vary widely development activity quality may may best alternative functionality overall ecosystem evaluate use would open source library intend use dependency official contrib library documentation http clojureorgcommunitycontriblibs think pretty clear see contrib library follow closely clojure development model share licensing also note guarantee quality maturity library think generally much made contrib collection libs shared dev model different cljcommons clojurewerkz different approach view setup manage project goal contrib beyond providing infrastructure lib dev bunch libs shared dev model alex miller even clearer personal perspective page contrib switch gear bit share personal perspective started writing article first place first thing first certainly bothered bit lack overarching goal drive contrib hard making progress know going right likely artifact history contrib irks regardless actually attribute lot thing discus paragraph come general lack vision direction always bit frustrated clear distinction project contrib ended historical reason eg part restructuring original monolith clojurecontrib project communitycontributed eg toolstrace special project run cognitect eg coreasync toolsdeps etc add confusion coresomething toolssomething project started richcognitect coreasync v corelogic toolsreader v toolsdeps etc really hard tell glance core clojure project community contributedmaintained big deal followed clojure development closely since version know serious source confusion casual onlooker move noncognitect project different github org eg githubcomclojurecontrib keep core project current organization way writing reminded even proper terminology something like coreasync theory another library practice impact huge one really tried replicate coreasync despite lot complaint known problem slow development pace likely still expectation might end part clojure point also tell refer something like toolsdeps definitely ordinary community project also true core project like clojurespec anyways lack better terminology refer special library core clojure article think cognitect aware blurred line problem recently favouring using company github orgs noncore clojure library eg transit rebl etc also seen new noncognitectdriven project join contrib long time good thing book one area cognitect could done better community building engaging actively clojurians help growth clojure ecosystem talking engaging people work clojure rather library framework development tool jazz might wild speculation end really feel community steward encouraged actively work certain area pretty likely people rally around cause believe leader wield considerable motivational power line thinking biggest problem contrib contribution process failed attract contributor project hosted typically project would see activity original author involved would stagnate afterwards even extremely popular project like nrepl toolsnamespace corelogic affected currently contrib library considered active development majority library considered stable state unfortunately relatively thin line stable library marked stable certainly useful current form also fact made carry implication author felt reached point stability yet hand definitely true abandoned library stable apis also strongly believe active development stability fundamentally odds one another think clojure perfect example going try make argument clojure contribution process bad general rich want clojure obviously decision make still seems strange impose project cognitect really involved ca really important aspect contrib well certainly le painful way enforce eg ci check pr verifies pr author signed ca going rabbit hole however really start wonder point library ca clojure essential manner definitely think remnant period time actually possibility external library promoted clojure high bar contribute likely affected negatively project contrib go well previous point made essential nonessential project different impact goal development rigidity required something like toolsdeps probably required something like toolsnamespace separation two type contrib project might open way nonessential project developed relaxed manner still remaining part contrib assuming many dear reader believe advocating change clojure contrib let pause second assure definitely case resigned fact contrib going change made peace real question want ask even need contrib today benefit provides project point post certainly teach cognitect run contrib finally getting beyond contrib believe really great people stopped looking cognitect provide answer solution embraced fact bandwidth limited goal priority always going aligned perfectly ok accept solution problem outlined far becomes apparent need community generally going served best communitydriven organization organization share perspective priority already communitydriven success story past eg clojurewerkz recently saw creation clojure common aim host develop maintain key library clojure ecosystem fantastic initiative certain going play vital role clojure future one step long journey big believer laser focused organization house related project targeting particular problemdomain think ring nrepl clojure emacs much easier build team likeminded people scope something clearly defined need lot people know aware immense passion free software project always want build healthy community around project nurture contributor etc hope clojure community dominated type organization road real point trying make along huge difference communitydriven project project community involvement clojure contrib communitydriven project plain simple community mature evolve need take control destiny equal switching mentality following leading waiting something happen making thing happen complaining fixing building want see clojure community several year trust tell fun empowering epilogue let summarize key take always contrib common way develop clojure library pretty unlikely project ever becoming part clojure guarantee quality maturity library real reason project join contrib big difference communitylead project project community involvement high time clojure community take stronger ownership future contrib played important part history clojure think point outlived usefulness considered mostly curious artifact past certain time noncognitect library migrated elsewhere eg clojure common replaced alternative library developed outside contrib also hope article success nrepl following migration outside contrib expedite process inspire participate communitydriven project noticed sean corfield considering continue development javajdbc outside contrib see another encouraging sign time changing hopefully library maintainer move direction well finger crossed keep hacking
214,Lobsters,clojure,Clojure programming,Deep Learning from Scratch to GPU - 15 - Weight Decay,https://dragan.rocks/articles/19/Deep-Learning-in-Clojure-From-Scratch-to-GPU-15-Weight-Decay,deep learning scratch gpu weight decay,,discussed weight initialization saw large weight saturate activation function solved problem initializing weight appropriate normal distribution centered around zero small standard deviation weight start much smaller occasional larger value nt control weight size learning process one several become large large weight combined large learning rate might lead even larger weight quickly enough matrix multiplication large matrix exhaust capacity floating point number matrix become full nan network ca nt recover state let see regression task examined previous article first generate training data def xtrain fmap randuniform ge nativefloat realgematrix float layout column def ytrain ge nativefloat map myfn col xtrain realgematrix float layout column next create neural network training engine def inference init inferencenetwork nativefloat fullyconnected sigmoid fullyconnected tanh fullyconnected linear def training trainingnetwork inference xtrain happens large learning rate even train network epoch sgd training ytrain quadraticcost cost suspiciously large call couple time necessary sgd training ytrain quadraticcost note cost skyrocketed beyond one million let see weight value weight first layer inference realgematrix float layout column number big space display entry weight matrix use neanderthal amax function find largest absolute value weight layer map amax map weight layer inference largest weight first layer indication learning rate big learning process hopping mountain slope mountain slope finegrained enough step valley try run hundred epoch see weight matrix full nan value obviously smaller learning rate would help general know appropriate learning rate would like make learning process robust
215,Lobsters,clojure,Clojure programming,Tetris in ClojureScript,https://djblue.github.io/tetris/,tetri clojurescript,,
216,Lobsters,clojure,Clojure programming,Deep Learning from Scratch to GPU - 14 - Learning a Regression,https://dragan.rocks/articles/19/Deep-Learning-in-Clojure-From-Scratch-to-GPU-14-Learning-Regression,deep learning scratch gpu learning regression,,network returned vector one output activation sigmoid function since expected value larger output saturated sigmoid often spotted output layer neural network various tutorial tutorial start classification example often deal classification photo network usually many output neuron category output get classified expected one neuron value close one others closer zero however different kind task regression case one neuron output directly return value approximation want mess signal output need activation since still need fit functionality existing architecture create kind donothing activation similar clojure identity function derivative linear function constant one deftype linearactivation activation activ z copy z prime z entry z defn linear fn linearactivation z z fix network repeat process def inference init inferencenetwork nativefloat fullyconnected sigmoid fullyconnected tanh fullyconnected tanh fullyconnected linear def training trainingnetwork inference xtrain checking inference untrained network unsurprisingly get useless answer realgematrix float layout column one epoch later see cost quite high sgd training ytrain quadraticcost repeat inference see network nt learn much changed realgematrix float layout column another epoch cost decreased sgd training ytrain quadraticcost expected inference still bad realgematrix float layout column something like epoch enough see improvement sgd training ytrain quadraticcost hooray loss decreased time inference realgematrix float layout column nt seem better let epoch sgd training ytrain quadraticcost loss nt seem go much lower inference still bad realgematrix float layout column maybe learning rate big let decrease bit sgd training ytrain quadraticcost loss seems stay level inference nt improved realgematrix float layout column try epoch yet lower learning rate sgd training ytrain quadraticcost nt helped realgematrix float layout column maybe need vary learning rate bit let try sgd training ytrain quadraticcost see learning progress cost stay roughly mean network stroll around ca nt progress much realgematrix float layout column throwing towel let remember task classification enough network learns discriminate several discrete category regression difficult since network learn approximate actual real value function maybe need give time let see epoch time sgd training ytrain quadraticcost elapsed time msec cost significantly lower let hope directly seen test inference realgematrix float layout column right much closer real value never expect get exact floating point value real function returning especially test observation network nt seen learning phase difference within acceptable range axpy ytest inference xtest realgematrix float layout column wanted improve approximation probably train network longer however assume training lead better approximation learning progress network generally decrease cost time local optimum reached cost may oscillate even start increase guarantee network reach optimal state fortunately even want decrease cost much practice might indicate overfitting network optimized training data much might work poorly data nt seen learning process exactly data want work well highlevel thing worry enough see network work get feeling difficult task training needed huge number epoch get acceptable result may need even get something good really tight implementation without much resource waste imagine long would take something le optimized
217,Lobsters,clojure,Clojure programming,Types and Specifications,https://itnext.io/types-and-specifications-c4d34ade6d5c,type specification,http mediumcom http commonswikimediaorgwikifile http clojureorgguidesspec generator specvstypeclj http,previous series http mediumcom commonswikimediaorgwikifile counted tree mean seen forest anonymousin previous post testing made case setting different metric testing used create high quality code using goal high coverage sufficient metric drive good software fortunately coverage tool toolboxone first tool used language put guarantee behavior program type system invalid operation caught compile time sophisticated language polymorphic type describe behavior object operation letting implementation detail determined separately type write contract object function program enforced system leaving developer think concern way done language though create confusion boiler plate code looking java abstract class type system solve problem generating new one although net effect positive still leave something desiredwhile type system especially one allows polymorphic interface powerful tool quite enough guarantee correctness language chosen discard type system others created new beast many advantage type unlocks powerful new set tool transformation occurred many language illustrate clojurelet start simple function take string formatted day perhaps json payload return birthdayseems reasonable right two valid input showed code produce expected result really though function taking arbitrary function argument making several assumption itthat exception covered original test despite coverage tool may say made production could cause unhandled exception crash software perhaps tie developer knot finding one approach clojure spec allows programmer make assertion binding input argument first step use like type assertion strongly typed language closer example model exception handling code extra special exception stand dealing invalid input type good function get input like well unhelpful input string like type system asserted good enough string fortunately spec limit code type assertion already huge step forward spec arbitrary function programmatically describe requirement argument work like abstract class asserts presence method instead allows function specify property directlythis get function type assert input string defines abstract property content nature string still imagine test sufficient could somehow create huge list date run function maybe could compile blessed dataset thousand maybe million date string different century different format could set batch job run every build verify function never failed example clearly overkill software engineer solving sort problem way need something better academic came itin haskell called quickcheck sought describe behavior function way program could perform search bug encourage take word look john hughes many video subject hollywood director sure add quickcheck search several language implemented method quickcheck generally referred generative testing including clojure documented http clojureorgguidesspec generator example make u take thing bit fartherfirst string spec generated data look like certainly string wonder string generator ever generate string birthday many iteration would take ascii could take kind time perfectly functional spec used yup free lunch easy create function describes work creating function limit option difficult fortunately gen several building block range number date also includes ability transform combine building block illustrated following generator generate string representation date last step describe behavior function similar wayas sceptic immediately believe generator guess occurrence birthday wide range intentionally specified function behavior incorrectlymore half time represents result confidence least find failure construct realistic function spec granted example pretty simple simply implemented function spec alternative method serf give example complex interaction communicating another system described simpler function sake generatorsuccess science behind generative test something encourage everyone care quality software spends time looking hughes made career instructing developer method contract work team find esoteric seemingly illogical bug software keep u safe run modern world taking approach even simply taking step toward descriptive function behavior spec possible remove repetition guess work writing test even mathematically prove correctnesscode example found specvstypecljand covered mit license interestednext series http
219,Lobsters,clojure,Clojure programming,How to disrupt Enterprise iPaaS market,https://www.titanoboa.io/repl.html,disrupt enterprise ipaas market,disrupt system integration market integrationplatformasaservice ipaas market huge estimated bn bn zapier ipaas esb mule boomi drag drop power ovum report developer productivity repl one small feature developer one giant paradigm shift industry repl structure scientific revolution jshell replit wiki,disrupt system integration market integrationplatformasaservice ipaas market huge currently estimated approach bn mark overall integration service estimated bn next year many many integration platform solution fitter smaller business meant enterprise small business use something like zapier usually fine readymade integration already probably want connect gmail slack channel something like come large enterprise enterprise ipaas platform aka esb aka mwaas completely different beast used integration ten hundred system almost always using custombuilt integration proprietary business logic solution like mule boomi quite often need custom development team developer may work month orchestrate integration system drag drop power likely one area customer may experience cognitive dissonance though slick demo show easypeasy drag drop interface real life drag drop interface longer cut soon use case complex inherently roll sleeve dive xmls java class python script drag drop titanoboa cool save trench browser support video tag also expert evaluate solution see example ovum report developer productivity one key criterion need ass spend lot time money developing simply way around repl one small feature developer one giant paradigm shift industry though silver bullet might feature might help tremendously repl able see result code real time coding would able achieve desired outcome much quickly waiting compilation packaging deployment server restarts repl titanoboa browser support video tag one might ask repl prevalent industry valuable somebody industry would already realized right gosh must probably another nerdy disgruntled naysayer pipe dream well nerdy might try come explanation would probably reference kuhn structure scientific revolution shifting paradigm might say programming well science tide shift slowly set way little incentive change might simply point though originally coming lisp language start see repl getting prevalent oop programming paradigm shift slowly functional paradigm repl progressively making way mainstream programming paradigm even java introduced repl aka jshell also start see company like replit emerge try bring repl mass reason think repl ultimately find way enterprise software well enterprise integration platform might save developer head ache certainly one titanoboa goal read titanoboa wiki
220,Lobsters,clojure,Clojure programming,Multiple Service Sanity with ClojureScript Part 1 - An Introduction to Protocols,https://blog.sakay.ph/multiple-service-sanity-with-clojurescript/,multiple service sanity clojurescript part introduction protocol,introduction protocol class class protocol protocol declaration protocol implementation google map mapbox memory leak,introduction early google announced change pricing map service finally implementing half year later new price would prohibitively expensive many tech company think thousand u dollar month many scrambled find alternative along everyone else affected find alternative service provider google map service used compare pricing quality licensing many provider good forbade combination service others even maddening actually support philippine decide implement across affected platform problem course step lot engineering effort step take time customer satisfaction operation cost line one simply say nah fam already implemented thing stuck suboptimal service would take much effort switch ca nt wait month final decision either solution start early build infrastructure reasonably support every alternative use two major feature map geocoding service focusing map read information flow app state map way around forward reverse geocoding next post series making simple toy switch two mapping service runtime protocol class modern mapping library roughly feature beyond displaying map one expect place marker pin draw line shape control part map shown feature relatively consistent apis vary greatly across alternative javascript prototype class may help bring sanity clojure therefore clojurescript offer slightly different approach protocol instead dealing hierarchy deal characteristic give quick example illustrate difference class following sample class hierarchy involving pigeon penguin bat whale animal bird flying bird aquatic bird mammal flying mammal aquatic mammal class hierarchy tree sharing attribute method outside parentchild relationship depending language anywhere complicated impossible protocol contrast set animal described way pigeon flying avian penguin aquatic avian bat flying mammalian whale aquatic mammalian flying protocol shared pigeon bat may declare set method like fly land maneuver implementation specific pigeon bat course work differently protocol lend well composition sometimes harder see structure saying go use right tool right job kidding aside great thing clojure clojurescript hosted language kind get best world situation call always dig interop use respective class system java javascript protocol declaration first step declaring protocol many way organizing protocol namespaces like separating protocol declaration implementation structured project please read inline documentation part article n sanityprotocols defprotocol maplike thingsthatarelikemaps getdomnode return domnode map attached addmarker markerconfig markerconfig one relevant key position addpolyline polylineconfig three relevant key path strokecolor strokeweight defprotocol mapentity anything appear map destroy everything destroyed setopacity opacity map provider allow control opacity map entity method moved specific protocol stay defprotocol mapsingleentity entity exist single point map opposed line polygon setposition position protocol implementation implement protocol appropriate note following section using extendtype modifies existing type like googlemapsmarker additional method conform attached protocol extendtype way use protocol defrecord reify safer use extendtype extendtype make lot thing convenient u instead store native javascript object field clojurescript data structure use object google map let declare separate namespace n sanitygoogle require sanityprotocols sp extend marker type marker generic map entity also single map entity representing single point map returning nil destroy longer exist extendtype jsgooglemapsmarker spmapentity destroy setmap nil nil setopacity opacity setopacity opacity spmapsingleentity setposition position setposition position contrast polyline represent single point setposition make sense want extend polyline mapentry protocol extendtype jsgooglemapspolyline spmapentity destroy setmap nil nil setopacity opacity setoptions j strokeopacity opacity probably straightforward implementation getdomnode effectively alias getdiv go trouble want consistent api map could possibly want use extendtype jsgooglemapsmap spmaplike getdomnode getdiv addmarker markerconfig jsgooglemapsmarker clj j assoc markerconfig map addpolyline polylineconfig jsgooglemapspolyline clj j assoc polylineconfig map finally explicitly define newgooglemap function instantiate new google map could named simply newmap allow consistency constructor function across service case important clear constructing defn newgooglemap mapconfig let key domnode center zoom mapconfig jsgooglemapsmap domnode j center clj j center zoom zoom mapbox let implement protocol mapbox notice namespace declaration mapboxgl require statement unlike google map mapbox exists npm library unfortunately take size final sakay webapp artifact contrast clojurescript take sakayspecific code another much n sanitymapbox require sanityprotocols sp mapboxgl mapbox mapbox marker interesting actually dom element positioned relative map set marker opacity apply cs styling leave implementation method exercise reader extendtype mapboxmarker spmapentity destroy remove nil setopacity opacity spmapsingleentity setposition key lat lng unfortunately mapbox google map agree representation map position setlnglat j lon lng lat lat mapbox nt polylines firstclass entity make record implement appropriate protocol think record clojure map method associated defrecord mapboxpolyline streetmap id spmapentity destroy getlayer streetmap id removelayer streetmap id getsource streetmap id removesource streetmap id setopacity opacity setpaintproperty streetmap id lineopacity opacity since polylines nt firstclass entity constructing little different also notice trivially simple implementation getdomnode extendtype mapboxmap spmaplike getdomnode getcontainer addmarker key position markerconfig mapboxmarker j spsetposition position addto addpolyline path path strokecolor strokecolor strokeweight strokeweight polylineconfig bit long mapbox treat polylines differently google map remember said vastly different apis p let polylineid randomuuid linesource type geojson data type feature geometry type linestring property coordinate map fn key lat lng lng lat path linelayer clj j id polylineid type line layout linejoin round linecap round paint linecolor strokecolor linewidth strokeweight source linesource addlayer linelayer map mapboxpolyline streetmap id polylineid defn newmapboxmap key domnode center zoom style let key lat lng center mapboxmap j container domnode center j lng lat zoom zoom style http tilesstadiamapscomstylesalidadesmoothjson implementation complete provider use n sanitycore require sanityprotocols sp sanitygoogle sanitymapbox def usegoogle switch google mapbox atom false def appmap store map object either google mapbox atom nil defn initmap let mapconfig domnode jsdocumentgetelementbyid map zoom center lat lng usegoogle sanitygooglenewgooglemap mapconfig sanitymapboxnewmapboxmap mapconfig defn setup replace appmap atom value newly initialized map reset appmap initmap notice nt care map google mapbox correct implementation used regardless spaddmarker appmap position lat lng defn export switchprovider swap usegoogle setup defn init let switchbutton jsdocumentgetelementbyid switchbutton addeventlistener switchbutton click switchprovider setup time writing wontfix memory leak google map making difficult properly destroy map instance said need point important thing regarding leak exercise google map instantiating bare memory leak unlikely affect demo app much actually useful webapp though leak nontrivial probably nt even switching different map provider runtime comment thing refresh browser runtime switch illustrative purpose thing really bad need support service switching right deployment come compiler flag via googdefine basically variable initialized based build flag protocol powerful tool creating managing abstraction interface external service limited example protocol used database connection display rendering next part series show dealt different geocoding provider using webapp framework called fulcro finally working sample reference
221,Lobsters,clojure,Clojure programming,Deep Learning from Scratch to GPU: A Simple Neural Network Training API,https://dragan.rocks/articles/19/Deep-Learning-in-Clojure-From-Scratch-to-GPU-12-A-Simple-Neural-Network-Training-API,deep learning scratch gpu simple neural network training api,clblast clblast clojurecl,doubt leak code first rechecked time find second reliable source confidence stresstesting code cuda platform memory usage stay constant leak might clblast opensource performance library use hood matrix computation opencl platform temporary object leak past fixed besides stresstested matrix multiplication many time issue root issue temporary working memory clblast creates matrix multiplication memory get cleaned launch many multiplication matrix size smaller matrix temporary buffer get created destroyed everything work well remember though gpu kernel launch asynchronous many operation get queued instantly without waiting previous operation complete operation need temporary object different size object may created early harm enough space pathological case huge object gb total related operation may require huge temporary buffer recommend extreme carefulness insisted preallocating reusing memory buffer wherever whenever possible code wrote series case ca nt control code underlying performance library use make work know source problem simply launch kernel matrix operation le aggressively either call clojurecl finish method force synchronization queue many operation get launched call method read result reduction implicitly force synchronization defn sgdopencl network cost epoch eta dotimes n epoch forward network cost output network finish backward network eta cost output network example demonstrated method first force synchronization forward pas network backward pas calculate cost reduction return scalar result thus forcing synchronization reduction bad gpu performance case matrix multiplication much demanding take big impact made dimension input time smaller get shorter running time example demonstrates point openclwithdefault withrelease factory openclfloat context commandqueue withrelease x ge factory entry ge factory inference inferencenetwork factory fullyconnected tanh fullyconnected sigmoid fullyconnected sigmoid training trainingnetwork inference x time sgdopencl training quadraticcost elapsed time msec network epoch much faster per epoch openclwithdefault withrelease factory openclfloat context commandqueue withrelease x ge factory entry ge factory inference inferencenetwork factory fullyconnected tanh fullyconnected sigmoid fullyconnected sigmoid training trainingnetwork inference x time sgdopencl training quadraticcost elapsed time msec see small fix made opencl engine performing almost well cuda mind four year older le powerful hardware three year old driver keep mind network consists unusually large layer might even see issue normal example edge case
222,Lobsters,clojure,Clojure programming,MXNet made simple: Pretrained Models for image classification,https://arthurcaillau.com/mxnet-made-simple-pretrained-models/,mxnet made simple pretrained model image classification,mxnet made simple pretrained model image classification inception vgg inception vgg mxnet model zoo mxnet model zoo computation graph trained parameter inception pretrained model mxnet vizualization api imagenet challenge research paper inception research paper performing image classification pretrained model loading model preparing data image manipulation processing predicting prediction comparison conclusion reference resource repository arthur caillau,mxnet made simple pretrained model image classification inception vgg sunday march min post learn leverage pretrained model perform image classification computer vision task associate label unseen image state art machine learning model hundred layer require day sometimes even week train gpus mxnet enables u leverage model easily see use three common deep learning model inception vgg need import certain package require clojurestring string mxnet namespaces require orgapacheclojuremxnetmodule require orgapacheclojuremxnetndarray ndarray opencv namespaces require cv require cvu mxnet model zoo mxnet model zoo set pretrained model including computation graph trained parameter download model model zoo first download running following bash script binbash set evx mkdir p model cd model wget http wget http cd serialized computation graph loaded mxnet binary file containing ndarrays trained parameter also download inception pretrained model binbash set evx mkdir p model cd model wget http datamxnetiomodelsimagenetinceptionbninceptionbnsymboljson wget http mv cd also need download imagenet category essentially mapping integer class human readable string wget http datamxnetiomodelsimagenetsynsettxt head synsettxt tench tinca tinca goldfish carassius auratus great white shark white shark maneater maneating shark carcharodon carcharias tiger shark galeocerdo cuvieri hammerhead hammerhead shark electric ray crampfish numbfish torpedo stingray cock hen ostrich struthio camelus pretrained model dive code compare different pretrained model downloaded choosing right model application come understanding tradeoff choice ram constraint running model fast model run cpu gpu error rate deal table summarizes key metric three different model using inception ram required mb mb number parameter million million error rate imagenet challenge topology want learn mxnet vizualization api covered previous post winner imagenet challenge achieving error rate image classification model built layer research paper inception published december achieved accurate prediction best model time six time cheaper computationally using five time le parameter research paper performing image classification pretrained model loading model model disk mxnet load computation graph pretrained parameter weight bias first define model located size image feed model def modeldir model def h image height def w image width def c number channel red green blue time come load model mxnet module api loading defonce prefix str modeldir epoch mloadcheckpoint define shape input data bind name input layer data mbind fortraining false datashapes name data shape c h w loading inception defonce inceptionmod prefix str modeldir inceptionbn epoch mloadcheckpoint define shape input data bind name input layer data mbind fortraining false datashapes name data shape c h w last step load imagenet label downloaded defonce imagenetlabels str modeldir synsettxt slurp stringsplit n imagenet label check assert count imagenetlabels preparing data model expect data following shape batchsize c h w batchsize number datapoints feed set batchsize since want predict one image time batch c number color channel red green blue h height image w width image also need normalize image pixel value according way different model trained case need subtract mean imagenet dataset color channel well known value defn preprocessimgmat preprocessing step imgmat opencv feed model imgmat imgmat resize image w h cvresize cvnewsize w h map pixel value cvconvertto substract mean pixel value imagenet dataset cvadd cvnewscalar flatten matrix cvumat flatrgbarray reshape c h w ndarrayarray c h w need refresher image manipulation processing covered previous post predicting would like make new prediction image feed model three model return ndarray probability value sum value equal index ndarray corresponds label eg dog cat guitar look top k label model return given image defn topk return top k probmaps prob key k probmaps probmaps sortby prob reverse take k defn predict predict model top k label label ndarray x model label x predict model label x model label x k let probs model mforward data x moutputs ffirst ndarray vec probmaps mapv fn p l prob p label l probs label topk k probmaps run model one need use mforward function perform forward pas prediction comparison run model different image look top prediction get feel perform cat cvimread preprocessimgmat predict inceptionmod imagenetlabels prob label egyptian cat prob label tabby tabby cat prob label tiger cat prob label lynx catamount prob label siamese cat siamese cvimread preprocessimgmat predict imagenetlabels prob label egyptian cat prob label tabby tabby cat prob label tiger cat prob label lynx catamount prob label radiator dog cvimread preprocessimgmat predict inceptionmod imagenetlabels prob label pug pugdog prob label bull mastiff prob label french bulldog prob label american staffordshire terrier staffordshire terrier american pit bull terrier pit bull terrier prob label tennis ball cvimread preprocessimgmat predict imagenetlabels prob label pug pugdog prob label bull mastiff prob label french bulldog prob label pekinese pekinese peke prob label boxer guitar player cvimread preprocessimgmat predict inceptionmod imagenetlabels prob label electric guitar prob label stage prob label acoustic guitar prob label banjo prob label microphone mike cvimread preprocessimgmat predict imagenetlabels prob label electric guitar prob label stage prob label sax saxophone prob label banjo prob label acoustic guitar overall prediction look really good think summary prediction compare different model perform image inception dog pug pugdog pug pugdog bull mastiff bull mastiff french bulldog french bulldog pekinese pekinese peke american staffordshire terrier staffordshire terrier american pit bull terrier pit bull terrier boxer tennis ball cat egyptian cat egyptian cat tabby tabby cat tabby tabby cat tiger cat tiger cat lynx catamount lynx catamount radiator siamese cat siamese guitar player electric guitar electric guitar stage stage sax saxophone acoustic guitar banjo banjo acoustic guitar microphone mike conclusion use pretrained state art deep learning model image classification code data preparation actual prediction code line code reference resource also code used post also available repository n mxnetcljtutorialspretrained tutorial pretrained model mxnet inception vgg require clojurestring string cv cvu orgapacheclojuremxnetmodule orgapacheclojuremxnetndarray ndarray loading model def modeldir model def h image height def w image width def c number channel red green blue pretrained inception bn model loaded disk defonce inceptionmod prefix str modeldir inceptionbn epoch mloadcheckpoint define shape input data bind name input layer data mbind fortraining false datashapes name data shape c h w defonce prefix str modeldir epoch mloadcheckpoint define shape input data bind name input layer data mbind fortraining false datashapes name data shape c h w imagenet label defonce imagenetlabels str modeldir synsettxt slurp stringsplit n assert count imagenetlabels preparing data defn preprocessimgmat preprocessing step imgmat opencv feed model imgmat imgmat resize image w h cvresize cvnewsize w h map pixel value cvconvertto substract mean pixel value imagenet dataset cvadd cvnewscalar flatten matrix cvumat flatrgbarray reshape c h w ndarrayarray c h w predicting defn topk return top k probmaps prob key k probmaps probmaps sortby prob reverse take k defn predict predict model top k label label ndarray x model label x predict model label x model label x k let probs model mforward data x moutputs ffirst ndarray vec probmaps mapv fn p l prob p label l probs label topk k probmaps comment imagesguitarplayerjpg cvimread preprocessimgmat predict inceptionmod imagenetlabels prob label stage prob label electric guitar prob label scuba diver prob label drumstick prob label acoustic guitar imagesguitarplayerjpg cvimread preprocessimgmat predict imagenetlabels prob label electric guitar prob label stage prob label sax saxophone prob label violin fiddle prob label cornet horn trumpet trump cvimread preprocessimgmat predict inceptionmod imagenetlabels prob label electric guitar prob label stage prob label acoustic guitar prob label banjo prob label microphone mike cvimread preprocessimgmat predict imagenetlabels prob label electric guitar prob label stage prob label sax saxophone prob label banjo prob label acoustic guitar imagescatjpg cvimread preprocessimgmat predict inceptionmod imagenetlabels prob label kit fox vulpes macrotis prob label pomeranian prob label red fox vulpes vulpes prob label grey fox gray fox urocyon cinereoargenteus prob label weasel imagescatjpg cvimread preprocessimgmat predict imagenetlabels prob label kit fox vulpes macrotis prob label red fox vulpes vulpes prob label egyptian cat prob label tiger cat prob label tabby tabby cat cvimread preprocessimgmat predict inceptionmod imagenetlabels prob label egyptian cat prob label tabby tabby cat prob label tiger cat prob label lynx catamount prob label siamese cat siamese cvimread preprocessimgmat predict imagenetlabels prob label egyptian cat prob label tabby tabby cat prob label tiger cat prob label lynx catamount prob label radiator imagesdogjpg cvimread preprocessimgmat predict inceptionmod imagenetlabels prob label pug pugdog prob label tennis ball prob label pingpong ball prob label bull mastiff prob label bath towel imagesdogjpg cvimread preprocessimgmat predict imagenetlabels prob label pug pugdog prob label bull mastiff prob label tennis ball prob label boxer prob label boston bull boston terrier cvimread preprocessimgmat predict inceptionmod imagenetlabels prob label pug pugdog prob label bull mastiff prob label french bulldog prob label american staffordshire terrier staffordshire terrier american pit bull terrier pit bull terrier prob label tennis ball cvimread preprocessimgmat predict imagenetlabels prob label pug pugdog prob label bull mastiff prob label french bulldog prob label pekinese pekinese peke prob label boxer arthur caillau man eats parenthesis breakfast
223,Lobsters,clojure,Clojure programming,Domain-Driven Design in Clojure (2014),https://www.innoq.com/de/articles/2014/03/ddd-clojure-rating/,domaindriven design clojure,weitere informationen zu den integrationsstrategien im ddd,auch dieser kolumne war clojure und die integration mit java bereits ein thema da für un dieser kolumne da domaindriven design aber noch neu ist stellen wir da nun kurz vor domaindriven design bietet zwei facetten da strategische ddd liefert hilfestellungen für die systementwicklung im großen da taktische ddd ist unserer erfahrung nach deutlich bekannter und ähnelt der objektorientierte analyse und design geht aber darüber hinaus ein wesentliches konzept de domaindriven design ist die definition von klar abgegrenzten fachlichen bereichen diese nennt man bounded context für einen bounded context modellieren techniker und domänenexperten gemeinsam wie die software die fachlichen prozesse besten umsetzt größere systeme decken meist mehrere sub domänen ab die dann abhängig von organisatorischen rahmenbedingungen über verschiedene strategien integriert werden wir werden im folgenden die shared kernel strategie kennen lernen kasten integrationsstrategien liefert einen überblick über die verschiedenen integrationsstrategien weitere informationen bieten oder auch beim strategischen ddd konzentriert man sich erster linie auf da identifizieren und abgrenzen der fachlichen kontexte der bounded context und dem identifizieren von sub domänen für die modellierung einer domäne stehen beim taktischen ddd verschiedene stereotypen zur verfügung aggregat entität wertobjekt service repository und einige mehr jede dieser arten unterliegt eigenen regeln für zulässige abhängigkeiten und verantwortung im system im folgenden stellen wir die domäne rating al beispiel vor und beschränken un zu beginn auf da strategische modellieren im alltag eines unternehmens zum beispiel einer bank gibt e vorgänge denen die preisgestaltung sowie die entscheidung über den ausgang de vorgangs von dem konkreten ratingergebnis abhängt da ratingergebnis beinhaltet einerseits die ausfallwahrscheinlichkeit und andererseits auch eine ratingklasse die ähnlich einer ampel signalisiert wie da vorhaben de antragstellerskunden einzuschätzen ist im rahmen de ratingvorgangs wird sichergestellt das die relevanten daten und nachweise de antragstellerskunden zusammengetragen werden um mit hilfe de formelsystems da ratingergebnis berechnen zu können der ratingvorgang erlaubt im rahmen einer feedbackschleife da berechnen von vorläufigen ratingergebnissen durch da anpassen der datenbasis für die berechnung gewissen parametern können kundenberater auf ein für den konkreten fall angemessenes ergebnis hinwirken ein portfolio gruppiert verträge kunden pakete mit gemeinsamer risikoklasse und anlage ein portfolio kann subsegmente unterteilt werden ein ratingformelsystem bezieht sich häufig auf ein portfolio und subsegment mit der portfoliozuordnung wird ausgewählt nach welchen regeln mit welchen konkreten formeln und mit welchen erforderlichen daten da rating tatsächlich berechnet werden mus der gestaltungsspielraum de kundenbetreuers innerhalb eines ratingvorgangs hängt auch vom portfolio und dem konkreten subsegment ab beispielsweise besitzen kundenbetreuer einer rückversicherung underwriter genannt oder berater für vipkunden häufig einen ganz anderen handlungsspielraum al der gemeine kundenberater für retailkunden wir können die domäne rating verschiedene subdomänen unterteilen für unser beispiel unterscheiden wir die subdomänen retail corporate und gewerbliche immobilienfinanzierung mit jeweils eigenen anforderungen die datenbasis und die berechnungen bei der portfoliozuordnung mus anhand aussagekräftiger entscheidungsmerkmale erkannt werden welcher subdomäne die berechnung für einen aktuellen vorgang definiert ist al integrationsstrategie für die subdomänen innerhalb der domäne rating wählen wir die shared kernelstrategie die subdomänen teilen sich einen gemeinsamen kern diesen kapseln wir einem paket namens core abb überblick contextmapping der domäne rating und ihre subdomänen die subdomäne core repräsentiert die informationen die allgemein für die berechnung eines ratingergebnisses benötigt werden da sind typischerweise hardfacts und softfacts hardfacts sind belastbare klar belegbare daten wie zum beispiel ein einkommensnachweis für angestellte oder betriebswirtschaftliche auswertungen für gewerbebetriebe softfacts sind eher weichere einflussfaktoren wie zum beispiel die branchenerfahrung die einschätzung der marktsituation oder die bewertung der führungs oder vertriebskompetenz bei gewerbetreibenden abb zeigt da modell mit dem die zu einem ratingvorgang gehörigen daten sowie die information über die zu verwendende berechnungsfunktion verwaltet und gespeichert werden können diese daten sollten abstrakt ausreichen um im rahmen eines ratingvorgangs ein ratingergebnis zu berechnen abb domänenmodell der subdomäne ratingcore die domäne retail dient hier al beispiel für die portfoliospezifischen subdomänen retailrating erfordert für die meisten vorgänge einen einkommensnachweis al spezialisierung von hardfacts sowie da wahrheitsgemäße ausfüllen eines fragebogens al spezialisierung der softfacts dy wird der entsprechenden subdomäne definiert abb domänenmodell der subdomäne retail gemäß ddd stimmen die techniker und die fachleute gemeinsam ab wie die domäne technisch umgesetzt werden soll durch verzicht auf technische detail können auch beteiligte de fachbereichs verstehen wie durch die geschäftsvorfälle softwaretechnisch unterstützt werden jetzt da wir un über den zusammenhang zwischen portfolien subsegmenten ratingfunktionen ratingvorgängen und den dafür erforderlichen daten grundsätzlich klar geworden sind können wir über die konkrete umsetzung nachdenken im folgenden orientieren wir un dem grobentwurf und vertiefen ihn der einen oder anderen stelle sinnvoll um eine mögliche umsetzungsstrategie mit clojure vorzustellen wir wenden hier da taktische ddd der ratingservice definiert im wesentlichen eine funktion rate vorgang kunde fakten ratingergebnis clojure ist der service realisiert wie listing dargestellt n dddclojureratingdomainratingservice require dddclojureratingdomainvalidation v defmulti requiredfacts fn rating customer portfolio rating segment customer defmulti calculateratingresult fn rating customer fact portfolio rating segment customer defn rate rating customer fact let reqfacts requiredfacts rating customer missingfacts vvalidate reqfacts fact missingfacts throw illegalargumentexception missing fact calculateratingresult rating customer fact listing ratingservice clojure zu beginn erfolgt die namensraumdeklaration sowie der import de validationnamensraums clojure per require die dann folgenden defmultiausdrücke definieren für die portfoliospezifischen subdomänen die schnittstelle die hier im coreratingservice benötigt wird um ein ratingergebnis zu berechnen der funktion rate werden der letanweisung die benötigten und die fehlenden daten ermittelt sollten daten fehlen wirft die funktion eine illegalargumentexception wenn alle erforderlichen daten vorhanden sind wird ein transientes ratingergebnis erzeugt und zurückgeliefert da aggregat wird seinem eigenen namensraum al menge von funktionen definiert n dddclojureratingdomainrating require dddclojureratingdomainratingservice r schemacore dddclojureratingdomainvalidation v listing namensraumdefinition de aggregats rating zur laufzeit wird ein rating durch eine map eine standarddatenstruktur clojure repräsentiert die folgenden definitionen beschreiben mit hilfe der bibliothek prismatic schema die zulässigen strukturen für ein portfolio und einen ratingvorgang clojure def validportfolio senum realestate instantloan def validrating id vvalidid customerid vvalidid creditamount vpositiveamount portfolio validportfolio created long soptionalkey latestrating rvalidrating listing strukturen für ein portfolio und einen ratingvorgang clojure die folgenden funktionen dienen zur zustandsmanipulation innerhalb eines ratingvorgangs defn create id creditamount portfolio customerid svalidate vvalidid id svalidate vpositiveamount creditamount svalidate validportfolio portfolio svalidate vvalidid customerid id id creditamount creditamount portfolio portfolio customerid customerid created systemcurrenttimemillis defn rate therating customerprovider factsprovider svalidate validrating therating let cid customerid therating customer customerprovider cid fact factsprovider cid ratingresult rrate therating customer fact assoc therating latestratingresult fact fact result ratingresult systemcurrenttimemillis listing zustandsmanipulation der listing vorgestellte ratingservice implementiert den ablauf eines ratingvorgangs der für alle vorhaben unabhängig vom portfolio gleich ist zu diesem zweck definiert er die schnittstelle die alle portofliospezifischen ratingvorgänge erfüllen müssen neben den au der javawelt bekannten mitteln stehen clojure zwei weitere möglichkeiten zur verfügung protocol und multimethods die portfoliospezifischen funktionen zum prüfen auf vollständigkeit der datenbasis requiredfacts und der berechnung de ratingergebnisses calculateratingresult setzen wir hier mit multimethods um wie listing zu sehen ist werden multimethods mit defmulti deklariert der deklaration einer multimethod wird direkt eine dispatchfunktion angegeben mit deren hilfe zur laufzeit bei jedem aufruf der multimethod die konkrete implementierung ausgewählt wird im unterschied zu gewöhnlicher polymorphie objektorientierter sprachen kann eine dispatchfunktion alle funktionsargumente auswerten unserem beispiel wird anhand de portfolio de vorgangs und de marktsegments de kunden die implementierung gewählt für jedes portfolio werden nun mittels defmethod die gewünschten implementierungen vorgenommen jede implementierung der funktion requiredfacts deklariert die benötigten hard und softfacts form einer map defmethod rrequiredfacts realestate retail rating customer personaldata cvalidpersonaldata propertylocation postalcode integer listing erforderliche hard und softfacts nach erfolgreicher prüfung der datenbasis kann da ratingergebnis einfach berechnet werden defmethod rcalculateratingresult realestate retail rating customer fact let postalcode getin fact propertylocation postalcode postalcode rratingresult rratingresult listing dummyberechnung de ratingergebnisses nun haben wir die domäne rating nach ddd modelliert und entsprechend unserer konstruktionsregeln clojure umgesetzt e fehlt jetzt nur noch eine anwendung die auf der funktionalität aufsetzt die der anwendung realisierten anwendungsfälle verwenden da domänenmodell den einstiegspunkt bilden die aggregate um ein ratingergebnis zu berechnen laden wir die zum rating gehörigen daten au dem repository mit hilfe der aggregatsfunktionen create und rate können rating mit create nun konsistent angelegt und mit rate berechnet werden diese änderungen werden danach einfach wieder über eine repositoryfunktion persistiert die grundprinzipien de domaindriven design sind auch einer funktionalen programmiersprache anwendbar die verwendung von standardabstraktionen wie map collection und set fördern auf den ersten blick da erstellen anämischer domänenmodelle bei denen die aggregate und entitäten tendenziell nur zum datentransport taugen und selbst keinerlei fachlogik kapseln clojure kann dy durch geeignetes gruppieren namensräumen leicht vermieden werden sind die abbildungsvorschriften einmal bekannt ist da finden von zugehörigen methoden zu entitäten und aggregaten einfach weitere informationen zu den integrationsstrategien im ddd
224,Lobsters,clojure,Clojure programming,Deep Learning in Clojure from Scratch to GPU - 11 - A Simple Neural Network Inference API,https://dragan.rocks/articles/19/Deep-Learning-in-Clojure-From-Scratch-to-GPU-11-A-Simple-Neural-Network-API,deep learning clojure scratch gpu simple neural network inference api,additional shared matrix,implementing inference simpler implementing training following separation inference training type start standalone neuralnetworkinference looking usage example imagine holding sequence layer implementing invoke method ifn interface since network typically contain several layer would good thing reused instance throwaway object vector one additional shared matrix input output since want support arbitrary batch size would create release temporary object invocation following invoke implementation might seem dense first nothing automation code writing hand test example assembling network calling inference hand deftype neuralnetworkinference layer long long releaseable release doseq l layer release l ifn invoke x onesvctr let batch dim onesvctr loop x x layer layer layer recur let layer first layer layer x onesvctr viewge mrows weight layer batch next layer x invoke x let cnt count layer cnt copy x withrelease onesvctr entry vctr x ncols x cnt layer x onesvctr withrelease vctr x dim onesvctr cnt x onesvctr withrelease vctr x dim onesvctr copy x onesvctr invoke x letrelease ge x mrows weight peek layer ncols x x first invoke implementation lowest level create temporary work object expects user provides needed vector one instance sufficient capacity give user opportunity optimally manage lifecycle structure function simply iterates layer evaluates recall also function appropriately alternated second invoke implementation go one level requires input x matrix going overwritten result evaluation depending number layer call first variant invoke efficient way network layer simply copy input single layer called without initializing temporary work memory two layer one temporary object needed two layer two alternating work object used result evaluation copied end course temporary work object released end evaluation third invoke pure function asks input x return output new instance temporary object mutation encapsulated invisible caller variant covered different tradeoff might pick pure variant enough resource concerned code simplicity also opt one destructive variant want frugal resource since network automatically create temporary work object need know size calculated construction first temporary vector need big enough hold largest output matrix odd layer second charged even layer defn inferencenetwork factory indim layer let outsize map layer insizes con indim outsize apply max takenth outsize apply max takenth rest outsize letrelease layer vec map fn layerfn insize layerfn factory insize layer insizes neuralnetworkinference layer
225,Lobsters,clojure,Clojure programming,Chip8 emulator written in Clojure,https://github.com/netb258/clj8,emulator written clojure,join github today sign file permalink usage input credit resource reload reload,emulator written clojure dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time functional emulator written clojure us quil graphic library rendering usage lein run pathtorom input q w e r f z x c v enter restart emulator credit credit go coldnew whose clojurescript emulator basis emulator emulator written clojure resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
226,Lobsters,clojure,Clojure programming,A small generative system in ClojureScript and Three.js,https://github.com/jackrusher/gespensterfelder,small generative system clojurescript threejs,gespensterfelder,gespensterfelder small generative system clojurescript threejs see live demo check repo cd top level directory install javascript dependency start system live code reloading using npx shadowcljs watch frontend
227,Lobsters,clojure,Clojure programming,What are first-class functions?,https://www.youtube.com/watch?v=rRES6mtt-RQ,firstclass function,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature firstclass function youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature firstclass function youtube
228,Lobsters,clojure,Clojure programming,Bottom Up vs Top Down Design in Clojure (2015),https://www.youtube.com/watch?v=Tb823aqgX_0,bottom v top design clojure,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature bottom v top design clojure mark bastian youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature bottom v top design clojure mark bastian youtube
229,Lobsters,clojure,Clojure programming,"Deep Learning from Scratch to GPU: The Backward Pass (CUDA, OpenCL, Nvidia, AMD, Intel)",https://dragan.rocks/articles/19/Deep-Learning-in-Clojure-From-Scratch-to-GPU-10-The-Backward-Pass-CDU-GPU-CUDA-OpenCL-Nvidia-AMD-Intel,deep learning scratch gpu backward pas cuda opencl nvidia amd intel,fox goose bag bean momentum,first try find way rearrange equation last value computed overwritten unfortunately possible since second line depends old value w updated fourth line brings u river crossing puzzle fox goose bag bean wolf goat cabbage missionary cannibal help cross river boat small carry puzzle solution one nt could nt find way rearrange elegant equation without introducing one memory location store one intermediate result decided need one choose whether one storing deltal one storing nablaw cl one criterion would choose smaller one since w share one dimension number neuron previous layer difference batch size v layer number neuron batch size might tend larger nt case criterion give definitive answer better criterion introduce new matrix instance might use later need cheat predict able use extra memory dimension w implement momentum knowing introduce v fullyconnectedtraining correct backward method implementation backward mul prime activfn z last article mm dim one z v mm trans w z mv dim one z one b axpy v w note nt implemented learning rate eta yet simple addition scalar argument backward method replacing eta carefully examined code notice mm second line matrix dimension multiplied z match w w chose dimension output time input since fit nicely formula reason formula transpose computation following property ab bt backward mul prime activfn z last article mm dim one z trans v mm trans w z mv dim one z one b axpy v w
230,Lobsters,clojure,Clojure programming,Domain-Driven Design in an event-driven Clojure application (2018),https://www.youtube.com/watch?v=ZEcjEHYs0zo,domaindriven design eventdriven clojure application,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature domaindriven design eventdriven clojure application gilles philippart youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature domaindriven design eventdriven clojure application gilles philippart youtube
232,Lobsters,clojure,Clojure programming,"Deep Learning from Scratch to GPU - 8 - The Forward Pass (CUDA, OpenCL, Nvidia, AMD, Intel)",https://dragan.rocks/articles/19/Deep-Learning-in-Clojure-From-Scratch-to-GPU-8-The-Forward-Pass-CPU-GPU-CUDA-OpenCL-Nvidia-AMD-Intel,deep learning scratch gpu forward pas cuda opencl nvidia amd intel,,inference layer nt need output signal pass layer first need keep zl around relevant equation suggest also need access output previous layer error propagated subsequent layer work detail following article see training layer reference z create backprop protocol method moving forward backward accessing activation since design layer network operate batch size reuse vector one propagating layer next construction defprotocol backprop forward backward defprotocol transfer input output one major novelty fullyconnectedtraining treat input output matrix inference layer implementation function argument unrelated layer object training layer become part layer instead implementing invoke implement forward difference related bookkeeping deftype fullyconnectedtraining w b z onesvctr activfn releaseable release release w release b release release z release release one parameter weight w bias b transfer input output one onesvctr backprop forward activfn rk b onesvctr mm w z backward throw exinfo todo activation function allowed overwrite argument create twoargument version input x z unchanged output overwritten result defn sigmoid x linearfrac tanh scal x x linearfrac tanh scal copy x constructor interesting detail decided training layer going wrapped around inference layer sort attachment training layer train parameter dispose continue using lighter inference layer without knowing weight bias determined defn traininglayer inferencelayer input onesvctr letrelease w view weight inferencelayer b view bias inferencelayer view input z ge w mrows w dim onesvctr raw z view onesvctr fullyconnectedtraining w b z activationfn inferencelayer inferencelayer previousbackprop traininglayer inferencelayer output previousbackprop one previousbackprop w b view underlying memory inference layer view polymorphic neanderthal function creates default neanderthal structure reuses underlying memory argument case use create additional instance matrix operate data separate lifecycle releasing view release buffer master structure reference view read write data previous layer release affect previous layer course released previous layer layer hand raise error tried use z master property layer dimension one also view
233,Lobsters,clojure,Clojure programming,MXNet made simple: Image Manipulation with OpenCV and MXNet,https://arthurcaillau.com/mxnet-made-simple-image-manipulation/,mxnet made simple image manipulation opencv mxnet,mxnet made simple image manipulation opencv mxnet opencv mxnet deep learning downloading image url wget plotting image disk image preprocessing resizing scaling normalizing raw byte value origami color channel type conversion mxnet image api previous blog post image api opencv api image postprocessing object detection task conclusion reference resource repository arthur caillau,mxnet made simple image manipulation opencv mxnet sunday march min post learn perform common image manipulation operation used preprocessing postprocessing image datasets opencv mxnet manipulate image ndarrays directly nothing specific deep learning covered post although probably something need learn able build computer vision model need import certain package require clojurejavaio io mxnet namespaces require orgapacheclojuremxnetimage mximg require orgapacheclojuremxnetndarray ndarray require orgapacheclojuremxnetshape mxshape opencv namespaces require rgb require mxcv require cv require cvu import orgopencvcoremat import javaawtimagedatabufferbyte downloading image url write small util function let u download image url save locally similar wget defn download download uri store filename disk uri filename withopen ioinputstream uri iooutputstream filename iocopy one download image url download cat image uri save imagescatjpg download http rawgithubusercontentcomdmlcwebdatamastermxnetdoctutorialspythonpredictimagecatjpg imagescatjpg download dog image uri save imagesdogjpg download http githubcomdmlcwebdatablobmastermxnetdoctutorialspythonpredictimagedogjpg rawtrue imagesdogjpg cat dog plotting image disk often really useful plot image loaded filename disk defn preview preview image filename display screen new window ex preview imagescatjpg preview imagescatjpg h w filename preview filename h w filename key h w filename cvimread cvresize cvnewsize h w cvuimshow function preview let load image memory display preview image disk preview imagescatjpg preview different size preview imagescatjpg h w image preprocessing resizing scaling normalizing working image datasets always preprocess list preprocessing step commonly done subtract mean pixel value red green blue channel resize image fit expected dimension model rescale pixel value linearly range another eg normalize pixel value range defn preprocessmat preprocessing step mat opencv example common preprocessing task mat mat subtract mean cvadd cvnewscalar resize cvresize cvnewsize map pixel value cvconvertto normalize pixel value cvnormalize cvnormminmax one visualize processing step image imagescatjpg cvimread preprocessmat cvuimshow preprocessed cat raw byte value origami clojure opencv wrapper provides serveral utility function make simple look raw byte value one would need performing preprocessing step order check done properly pixel value level looking raw byte imagesdogjpg read image disk mximgreadimage torgb false resizing image mximgresizeimage convert ndarray mat mxcvndarraytomat mat byte cv cv byte vec cv convert mat byte cv byte return byte value mat bytearray color channel color image represented matrix pixel value red green blue channel generally useful look specific color channel image defn mat colormat return mat selected channel assumes mat rgb format mat mat object opencv color value red green blue ex mat colormat green mat colormat blue mat color let color selector get red first green second blue last first color selector color cvsplit mat use mat colormat function display color channel cat image display channel blue green red picture imagescatjpg read image disk mximgreadimage torgb true resize mximgresizeimage convert ndarray mat mxcvndarraytomat extract different color channel juxt mat colormat blue mat colormat green mat colormat red display image map cvuimshow red channel blue channel green channel type conversion mxnet image api mentioned previous blog post mxnet model consume ndarrays therefore one need turn raw image ndarrays unsurprisingly mxnet provides image api load image file disk convert directly ndarrays hood mxnet us opencv perform conversion code demonstrates load image disk using mxnet image api resize image using mxnet image api convert java bufferedimage save back disk imagesdogjpg convert filename ndarray mximgreadimage torgb true option torgb true default resizing image height width mximgresizeimage convert bufferedimage mximgtoimage saving bufferedimage disk javaximageioimageiowrite jpg javaiofile code demonstrates convert bufferedimage mat showing image using bufferedimagetomat imagesdogjpg read image disk mximgreadimage torgb true convert bufferedimage slow mximgtoimage convert mat cvubufferedimagetomat show mat cvuimshow opencv api one also work directly opencv achieve result opencv us java mat object internally write util function convert mat ndarray way around defn mat ndarray convert mat opencv mxnet ndarray mat let h height mat w width mat c channel mat mat cvumat flatrgbarray ndarrayarray c h w defn ndarray mat convert ndarray opencv mat ndarray let shape mxshape vec ndarray h w mxshape vec ndarrayshape ndarray byte bytearray shape mat cvnewmat h w put mat byte mat finally write function load image disk return ndarray defn filename ndarray convert image stored disk filename ndarray filename string representing image disk shapevec actual shape returned ndarray return ndarray filename shapevec filename cvimread mat ndarray image postprocessing bounding box returned model image detection task easily plot bounding box image using opencv defn drawboundingbox draw bounding box img given topleft bottomright coordonates add label provided return nil img key label topleft bottomright let topleft bottomright topleftpoint cvnewpoint bottomrightpoint cvnewpoint cvrectangle img topleftpoint bottomrightpoint rgbwhite label cvputtext img label topleftpoint cvfonthersheyduplex rgbwhite draw bounding box cookie drawing one bounding box image dog let img cvimread imagesdogjpg drawboundingbox img topleft bottomright label cookie cvuimshow img cookie bounding box model perform object detection task return collection bounding box iterate prediction draw bounding box associated label defn drawpredictions draw prediction img passing result collection bounding box data return nil img result doseq key label topleft bottomright result result drawboundingbox img result example drawing multiple bounding box image dog let img cvimread imagesdogjpg result topleft bottomright label dog topleft bottomright label cookie drawpredictions img result cvuimshow img bounding box conclusion image manipulation simple mxnet opencv image data need preprocessed consumed mxnet model raw byte ndarrays covered different apis useful performing operation mxnet image api opencv api reference resource also code used post also available repository n mxnetcljtutorialsimagemanipulation image manipulation tutorial require clojurejavaio io orgapacheclojuremxnetimage mximg orgapacheclojuremxnetndarray ndarray orgapacheclojuremxnetshape mxshape rgb mxcv cv cvu import orgopencvcoremat javaawtimagedatabufferbyte defn download download uri store filename disk uri filename withopen ioinputstream uri iooutputstream filename iocopy defn preview preview image filename display screen new window ex preview imagescatjpg preview imagescatjpg h w filename preview filename h w filename key h w filename cvimread cvresize cvnewsize h w cvuimshow defn preprocessmat preprocessing step mat opencv example common preprocessing task mat mat subtract mean cvadd cvnewscalar resize cvresize cvnewsize map pixel value cvconvertto normalize pixel value cvnormalize cvnormminmax defn mat ndarray convert mat opencv mxnet ndarray mat let h height mat w width mat c channel mat mat cvumat flatrgbarray ndarrayarray c h w defn ndarray mat convert ndarray opencv mat ndarray let shape mxshape vec ndarray h w mxshape vec ndarrayshape ndarray byte bytearray shape mat cvnewmat h w put mat byte mat defn filename ndarray convert image stored disk filename ndarray filename string representing image disk shapevec actual shape returned ndarray return ndarray filename shapevec filename cvimread mat ndarray defn drawboundingbox draw bounding box img given topleft bottomright coordonates add label provided return nil img key label topleft bottomright let topleft bottomright topleftpoint cvnewpoint bottomrightpoint cvnewpoint cvrectangle img topleftpoint bottomrightpoint rgbwhite label cvputtext img label topleftpoint cvfonthersheyduplex rgbwhite defn drawpredictions draw prediction img passing result collection bounding box data return nil img result doseq key label topleft bottomright result result drawboundingbox img result defn mat colormat return mat selected channel assumes mat rgb format mat mat object opencv color value red green blue ex mat colormat green mat colormat blue mat color let color selector get red first green second blue last first color selector color cvsplit mat comment download cat image uri save imagescatjpg download http rawgithubusercontentcomdmlcwebdatamastermxnetdoctutorialspythonpredictimagecatjpg imagescatjpg download dog image uri save imagesdogjpg download http githubcomdmlcwebdatablobmastermxnetdoctutorialspythonpredictimagedogjpg rawtrue imagesdogjpg preview image disk preview imagescatjpg preview different size preview imagescatjpg h w visualize preprocessing step imagescatjpg cvimread preprocessmat cvuimshow writing image disk imagesdogjpg convert filename ndarray mximgreadimage torgb true option torgb true default resizing image height width mximgresizeimage convert bufferedimage mximgtoimage saving bufferedimage disk javaximageioimageiowrite jpg javaiofile writing image disk load image disk mximgreadimage torgb true convert ndarray mat ndarray mat save image disk cvimwrite testdigitjpg cvuimshow showing image using bufferedimagetomat imagesdogjpg read image disk mximgreadimage torgb true convert bufferedimage slow mximgtoimage convert mat cvubufferedimagetomat show mat cvuimshow showing image using ndarray mat imagesdogjpg read image disk mximgreadimage torgb false convert ndarray mat ndarray mat show mat cvuimshow showing image using mxcvndarraytomat origami mxnet default channel ordering rgb opencv default channel ordering bgr imagesdogjpg read image disk mximgreadimage torgb false convert ndarray mat mxcvndarraytomat show mat cvuimshow looking raw byte imagesdogjpg read image disk mximgreadimage torgb false resizing image mximgresizeimage convert ndarray mat mxcvndarraytomat mat byte cv cv byte vec display green channel picture imagescatjpg read image disk mximgreadimage torgb true convert ndarray mat mxcvndarraytomat extract red color channel mat colormat green display image cvuimshow display channel blue green red picture imagescatjpg read image disk mximgreadimage torgb true resize mximgresizeimage convert ndarray mat mxcvndarraytomat extract different color channel juxt mat colormat blue mat colormat green mat colormat red display image map cvuimshow drawing one bounding box image dog let img cvimread imagesdogjpg drawboundingbox img topleft bottomright label cookie cvuimshow img drawing multiple bounding box image dog let img cvimread imagesdogjpg result topleft bottomright label dog topleft bottomright label cookie drawpredictions img result cvuimshow img arthur caillau man eats parenthesis breakfast
234,Lobsters,clojure,Clojure programming,Faster and friendlier routing with Reitit 0.3.0,https://www.metosin.fi/blog/faster-and-friendlier-routing-with-reitit030/,faster friendlier routing reitit,reitit post new route syntax route syntax documentation error elm eta fipp expound reblreadline route conflict invalid route data performance fast router language flamegraphs cljasyncprofiler clojurenorth perf test httprouter spec coercion coercion guide core routing httpring full example apps frontend controller reagent template keeframe pedestal pedestal official documentation example app final word changelog github issue clojurians slack clojurenorth update oct,happy introduce new version reitit fast new datadriven routing library clojurescript metosinreitit version mostly backwards compatible contains lot big feature including new route syntax new error formatter last post version quick tour major change since new route syntax colonbased pathparameters supported parameter fill whole space slash user userid api versionping syntax simple nt allow use qualified pathparameters new wildcard routing support old syntax new bracketsyntax user userid api version ping qualified keywords used parameter nt span whole segment slash user domainuserid filesfile domainfilenumber pdf detail route syntax documentation error lot complaint error message clojure clojure thing bit better default error printing still far friendly error message elm eta reitit router creation time error message rethought case error exceptioninfo thrown qualified error name exdata relevant data reititcorerouter catch exception rethrows enhanced error message done configured error formatter default formatter format error like friendly error new module reititdev contains error message formatter based fipp expound lovely color reblreadline sample error message route conflict require reititcore r require reititdevpretty pretty rrouter ping useridorders bulk bulkid public path versionstatus exception prettyexception invalid route data require reititspec spec require clojurespecalpha sdef role admin user sdef role scollof role rrouter apiadmin role adminz validate specvalidate exception prettyexception error formatter developed tested macos currently support dark theme discussion cljcommons slack whether could communitydriven error formatter performance route pathparameters version used segment trie written clojure already one fastest router clojure still much slower compared fast router language search better performance segment trie ported java yielding better performance already good nt want stop wildcard routing trie fully rewritten clojurescript java used profilers flamegraphs via cljasyncprofiler find eliminate performance bottleneck jvm trie faster previous version making faster one talking reitit clojurenorth walk performance journey detail according perf test reitit order magnitude faster tested routing library le twice slow httprouter fast est router go still work clojurescript version highly optimized java version skill tuning clojurescriptjavascript performance feel free contribute spec coercion spec coercion much complete work plain clojurespec spec change happened spectools also proper coercion guide currently support also coercion guide reitit side core routing httpring require clojurespecalpha sdef x int sdef int sdef total int sdef request skeys requn x sdef response skeys requn total def mathroutes math swagger tag math plus get summary plus query parameter parameter query request response body response handler fn request let x request parameter query x request parameter query status body total x post summary plus body parameter parameter body request response body response handler fn request let x request parameter body x request parameter body status body total x see full example apps spec coercion apidocs reititring reitithttp reititfrontend reititpedestal frontend small improvement including new polished api controller history routing work reagent template keeframe default reitit really awesome pedestal support pedestal shipped already via new reititpedestal module allows default pedestal router swapped reitithttp router see official documentation example app final word big release thanks contributor pilot user full list change found changelog continue actively develop core library ecosystem around roadmap mostly laid github issue many issue marked help wanted good first issue contribution welcome discus reitit get help reitit channel clojurians slack last least giving talk reitit clojurenorth looking forward update oct updated issue label added github link
235,Lobsters,clojure,Clojure programming,Our Journey from Elm and Elixir to Clojure,https://www.youtube.com/watch?v=geeK1-jjlhY,journey elm elixir clojure,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojured journey elm elixir clojure martin kavalar youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojured journey elm elixir clojure martin kavalar youtube
236,Lobsters,clojure,Clojure programming,Multithreading within a transducer,https://juxt.pro/blog/posts/multithreading-transducers.html,multithreading within transducer,,let define function wish multithread something go sleep randomly defn sleepyfn counter v let t randint println str starting v threadsleep t println str completed v swap counter inc v t let try parallelisingmap let counter atom parallelisingmap sleepyfn counter range note work efficiently task take similiar length time quick task stuck behind long task held fundamental consequence linear nature transducer
237,Lobsters,clojure,Clojure programming,Polylith - Functional thinking at the system scale,https://polylith.gitbook.io/polylith/,polylith functional thinking system scale,,prefer start beginning take thing pace already exactly right place keep reading
238,Lobsters,clojure,Clojure programming,"building a game in ClojureScript, DataScript and Rum",https://twitter.com/nikitonsky/status/1103260457631186944,building game clojurescript datascript rum,,detected javascript disabled browser would like proceed legacy twitter yes
239,Lobsters,clojure,Clojure programming,Zero-configuration command-line async HTTP files server in Clojure,https://github.com/kachayev/nasus,zeroconfiguration commandline async http file server clojure,usage feature flag license,simple zeroconfiguration commandline http file server like python simplehttpserver scalable сan easily handle thousand simultaneous connection implemented clojure aleph netty mostly example still skillful handy tho even nothing wrong putting production usage run directory want serve clj sdeps deps nasus mvnversion httpserver specify custom port clj sdeps deps nasus mvnversion httpserver feature plain text html directory listing based accept header automatic mimetype detection streaming chunked encoding large file keepalive slow request handling transparent content compression gzip deflate cache control lastmodified cors header development range query support ssltls list file directory exclude serving flag p port port port number b bind ip address bind dir path directory serve file auth user password basic auth noindex disable directory listing nocache disable cache header nocompression disable deflate gzip compression followsymlink enable symbolic link support includehidden process hidden file normal cors support acccesscontrol header see cors option finegrained control corsorigin acccesscontrolalloworigin response header value corsmethods acccesscontrolallowmethods response header value corsallowheaders acccesscontrolallowheaders response header value indexdocumentpath path requesting dir respond dir path instead listing h help license copyright nasus nasus licensed mit license available mit also license file
240,Lobsters,clojure,Clojure programming,Code-Splitting ClojureScript,https://code.thheller.com/blog/shadow-cljs/2019/03/03/code-splitting-clojurescript.html,codesplitting clojurescript,shadowcljs article example app reagent reactlazy learnreagentcom learnreframecom example config build report conclusion one clojurians shadowcljs patreon p,code splitting around feel somewhat underused clojurescript project many example showing actually use project reach certain size definitely investigate splitting code multiple module often called elsewhere delay loading code actually required show example using module shadowcljs project us new thing shadowcljs setup previously bit complicated basic strategy worked year got nicer api currently available shadowcljs rather look code read wall text code used example available find compiled demo app javascript expensive go much detail since much better article cover topic gist keep javascript small possible since initial parsecompile phase quite expensive make start rather slow quite easy reach megabyte j code bigger project gzip may look bad engine still process unzipped code slower device take quite long time typically end one j file clojurescript compilation optimization completes file contain code app need code used already removed closure compiler optimized minimized best extent possible code required initially may different sectionspages app user may actually visit may dialog rarely used requires lof code since contains complex form many thing part app used le frequently want delay loading actually need enter module unfortunately overused term whenever read module think j file instead creating one j file split j file certain functionality load whatever need demand keep initial payload small organize module highly dependent application onesize fit solution spend time tweaking setup particular usecase demonstrate using shadowcljs example app example using reagent since minimal also using new reactlazy helper since component useful abstraction codesplit point already use either concept apply pretty much browsertargeted apps imagine shop webapp user may sign create new account sign existing account probably kind account overview showing past purchase also want product listing sort probably product detail page example show bare minimum focusing codesplitting aspect want learn build actual application using reagent recommend learnreagentcom learnreframecom disclaimer get commission pay course let get main demoapp namespace serve initial entry point always loaded first break think helpful full picture first n demoapp require react react reagentcore r demoenv env demoutil refer lazycomponent defonce rootel jsdocumentgetelementbyid root def productdetail lazycomponent democomponentsproductdetailroot def productlisting lazycomponent democomponentsproductlistingroot def signin lazycomponent democomponentssigninroot def signup lazycomponent democomponentssignuproot def accountoverview lazycomponent democomponentsaccountoverviewroot defn welcome welcome shop defn nav let key signedin state envappstate ul li href onclick swap envappstate assoc page welcome home li href onclick swap envappstate assoc page productlisting product listing signedin li href onclick swap envappstate assoc page accountoverview account li href onclick swap envappstate assoc page signin sign li href onclick swap envappstate assoc page signup sign defn root let key page state envappstate div shop example nav reactsuspense fallback raselement div loading case page productlisting productlisting productdetail productdetail signin signin signup signup accountoverview accountoverview welcome welcome div unknown page defn devafterload start rrender root rootel defn init start example component n democomponentssignin require demoenv env defn root div sign p imagine form button onclick swap envappstate assoc signedin true page accountoverview sign already startup init function called since need initialize anything example proceed start render reagent root component root render component based page setting demoenvappstate atom depending setting render setup usually would add require democomponentssignin n definition use directly given clojurescript work would always load required namespace loading demoapp lazycomponent utility allows referencing something declared later actually care declared know point shadowcljs fill required information load actual component via shadowlazy utility wrapped remove boilerplate code using reactlazy utility actually start loading associated code component first rendered automatically rerender code finish loading reactsuspense wrapper show fallback code loading several thing really depends application important thing remember referenced something may loaded yet must loaded asynchronously rendered since demoapp directly require component define actual split using module build config example config structure module completely application point show verbose thing first discus alternative strategy later fear config pretty simple look bit long wish shorter way important reason maybe explain later post build app target browser moduleloader true module main initfn demoappinit accountoverview entry democomponentsaccountoverview dependson main productdetail entry democomponentsproductdetail dependson main productlisting entry democomponentsproductlisting dependson main signin entry democomponentssignin dependson main signup entry democomponentssignup dependson main explained start main module becoming mainjs output calling demoappinit load module loaded directly without loading define one module component depend main module since provide common code reagent react course cljscore moduleloader true tell shadowcljs need couple extra step allow loading code dynamically running shadowcljs release app end bunch j file default outputdir publicjs also work using watch compile development mode since codesplitting mostly relevant release build focus public j accountoverviewjs mainjs productdetailjs productlistingjs signinjs signupjs primary indexhtml file load jsmainjs file let code deal loading file needed actually reference directly although would perfectly fine doctype html html head link rel preload script href jsmainjs title cljs codesplitting example title head body div id root div script async src jsmainjs script body html point would probably useful look build report inspect output little optional leave probably work however know project shadowcljs could ever know know common path user take module may tiny case might make sense combine way thing commonly used together probably grouped output since loading code requires async step may take time depending networkcomputer may better wait bit longer startup instead showing later react concurrent mode becomes available actually matter le relevant example output file actually tiny make sense split real app file would bigger may contain npm component used one module others make sense always wait code download given knowledge app probably save assume user always going visit productlisting page combination visit productdetail instead extra interruption waiting productdetail load bundle together productlisting user related stuff build app target browser moduleloader true module main initfn demoappinit user entry democomponentsaccountoverview democomponentssignin democomponentssignup dependson main product entry democomponentsproductdetail democomponentsproductlisting dependson main need change anything code since already setup shadowcljs deal rest might make sense keep everything main module split always test project conclusion codesplitting well worth effort involve whole lot code potentially make app load lot faster user appreciate intimidated initial extra setup let shadowcljs help rest blindly split everything may actually make thing slower generate build report tweak config recompile repeat reach ideal setup always remember reevaluate code may evolve time different split may become relevant note module nested several level deep stay like example aim keep module certain size remember faster load one file instead one file immediately load another kb another kb file able render anything looking spinner fun always test slow networkdevice configuration chrome devtools make incredible easy assume everyone super high end networkshardware hopefully example complex follow find clojurians shadowcljs channel question useful want see article like consider joining patreon p webpack follows different implementation split code according code figuring output chunk organized optimizing rather difficult initial config may simpler output harder optimize closure compiler settled static configuration adopted system work different trade offs
241,Lobsters,clojure,Clojure programming,Serverless collaborative editor using CRDT,https://thegeez.net/2019/03/03/serverless_collab.html,serverless collaborative editor using crdt,serverless collaboration crepl operational transformation conflictfree replicated data type crdt automerge cljscollab cljscollab,serverless mar previously worked collaborative tool worked like google doc project called crepl stopped paying hosting server project offline made consider collaborative editor would nt need server server crepl needed handle connection client algorithm collaborative editing needed central server alternative need server browser connect eachother network without central server using webrtc nice example work well local network modern browser firewall older browser le likely work crepl us operational transformation need central server correctness algorithm collaborative editing need central server found conflictfree replicated data type crdt research excellent automerge project found rga algorithm cljscollab beginning serverless collaboration system work two browser single page logic client javascript downloaded single file project serverless requiring server downloading page even fewer server serverless system try serverless collaborative editor cljscollab
242,Lobsters,clojure,Clojure programming,"Deep Learning in Clojure from Scratch to GPU: CUDA and OpenCL, Nvidia and AMD",https://dragan.rocks/articles/19/Deep-Learning-in-Clojure-From-Scratch-to-GPU-6-CUDA-and-OpenCL,deep learning clojure scratch gpu cuda opencl nvidia amd,,one thing make code completely general use general constructor core namespace instead convenience method native namespace method case ge general matrix instead dge double general native matrix vctr instead dv double native vector difference method require enginespecific factory first argument accommodate fullyconnected constructor accept input defn fullyconnected factory activfn indim outdim letrelease w ge factory outdim indim bias vctr factory outdim fullyconnectedinference w bias activfn repeat example running network nativedouble factory used dge dv method available native namespace use nativefloat place use singleprecision floating point computation cpu gpu factory configure another factory coded party even use code provided neanderthal configured different way withrelease x ge nativedouble one vctr nativedouble fullyconnected nativedouble tanh ge nativedouble fullyconnected nativedouble sigmoid ge nativedouble transfer weight transfer bias transfer weight transfer bias transfer x one one nil realgematrix double layout column modified result display example bit instead println previous article transfer resulting matrix mainmemory convenience since blog post result automatically generated live code also teach pattern type coding nt forget example used withrelease binding even output code support cpu gpu cpu releasing data great help optional repl session since memory eventually get released jvm caveat since jvm might soon hoped gpu however jvm anything underlying gpu buffer released explicitly released release whole context therefore habit recommend always take care release vector matrix structure soon possible however like see result repl data stored result returned released moment need printed transfer method transfer data wherever main memory gpu memory equivalent object main memory
243,Lobsters,clojure,Clojure programming,A JSON/EDN browser for the terminal,https://github.com/denisidoro/floki,jsonedn browser terminal,floki navigator installation usage roadmap issue page inspiration template building terminal ui polymerishelloreactblessed eccentricjcljstuitemplate etymology flóki,floki jsonedn browser terminal work repository discontinued favor navigator thank support installation usage direction h j k l arrow key firstlast item gg respectively copy path quit q roadmap please refer issue page inspiration template building terminal ui used polymerishelloreactblessed starting point want build tool similar one use eccentricjcljstuitemplate etymology browser navigator viking flóki
244,Lobsters,clojure,Clojure programming,re-frame interactive demo,https://blog.klipse.tech//clojure/2019/02/17/reframe-tutorial.html,reframe interactive demo,reframe credit code walkthrough reframe repo mike thompson klipse video course reframe usage begin end mind app database event domino dispatch dispatch event handler domino initialize timer timecolorchange effect handler domino subscription handler domino regsub view function domino hiccup subscribing view function kick starting app video course reframe,reframe reframe functional framework writing spa clojurescript using reagent functional framework two thing data function transform data reactive framework data coordinate function way around reframe often described cascade one domino trigger next trigger next et cetera boom boom boom back beginning loop domino spring attention ready next iteration cascade six domino event dispatch event handling effect handling query view dom purpose tutorial explain write code reframe app corresponds domino credit article interactive rewrite code walkthrough reframe repo published blessing mike thompson detail omitted order keep article easy read possible sure read also original article fill detail interactive snippet powered klipse two kind klipse snippet article regular clojure snippet klipse display snippet evaluation last expression snippet reagent snippet klipse render reagent component snippet explained really want become reframe master take video course reframe usage order use reframe require reframe reagent n simplecore require reagentcore reagent reframedb db reframecore rf begin end mind app going build contains around line code app display current time nice big colourful font provides single text input field type hex colour code like ccc red used time display running look like app database reframe notion single app database sometimes called store app state hold data application call appdb case appdb contain twokey map like time jsdate current time display timecolor colour time shown event domino event data reframe us vector format event example timecolorchange red first element vector timecolorchange keyword identifies kind event element optional provide additional data associated event additional value red presumably color time display rule event pure data sneaky trick like putting callback function wire know dispatch send event call rfdispatch event vector argument magenta rfdispatch timecolorchange magenta feel free uncomment code snippet see color time display updated top page dispatch dispatch put event queue processing event processed synchronously like function call processing happens later asynchronously soon consumer queue router look event processing router inspects element event vector look event handler function registered kind event call event handler necessary argument reframe app developer job write register event handler function kind event event handler domino collectively event handler provide control logic reframe application application kind event dispatched initialize timecolorchange timer event mean registering event handler event handler function take two argument coeffects event return effect conceptually think coeffects current state world think event handler computing returning change effect based current state world arriving event event handler registered via either regeventfx regeventdb fx v db simplicity using latter regeventdb regeventdb allows write simpler handler common case want take one coeffect current app state return one effect updated app state syntax regeventdb rfregeventdb theeventid theeventhandlerfn handler function provide expect two argument db current application state value contained appdb v event vector given dispatch function signature like fn db v event handler must compute return new state application mean return modified version db unmodified one change state initialize startup application state must initialized want put sensible value appdb start containing dispatch initialize happen early app life need write event handler event handler slightly unusual care event information passed via event vector even care existing value db want plonk completely new value rfregeventdb set initial application state initialize fn two parameter important use time jsdate return becomes new application state timecolor orange nil particular handler fn ignores two parameter usually called db v simply return map literal becomes application state let initialize app dispatching initialize event handled event handler wrote rfdispatchsync initialize timer set timer function dispatch timer every second use defonce order ensure single timer created defn dispatchtimerevent let jsdate rfdispatch timer dispatch used call dispatching function every second defonce dotimer jssetinterval dispatchtimerevent handle rfregeventdb usage rfdispatch timer ajsdate timer fn db newtime destructure event vector assoc db time newtime compute return new application state nil timecolorchange user enters new colour value timecolorchange event going dispatched via view handle timecolorchange event rfregeventdb timecolorchange usage rfdispatch timecolorchange fn db newcolorvalue assoc db timecolor newcolorvalue compute return new application state nil effect handler domino domino realisesputs action effect returned event handler simple application event handler implicitly returning one effect update application state particular effect accomplished reframesupplied effect handler nothing u domino using standard reframe effect handler unusual seldom write effect subscription handler domino subscription handler query function take application state argument run query returning something called materialised view application state application state change subscription function rerun reframe compute new value new materialised view ultimately data returned query function used view function domino regsub regsub associate query id function computes query like rfregsub somequeryid query id used later subscribe aqueryfn function compute query later view function domino subscribes query like subscribe somequeryid aqueryfn used perform query application state time application state change aqueryfn called compute new materialised view new computation app state new value given view function subscribed somequeryid view function called compute new dom state view depend query result changed along reactive chain dependency reframe ensure necessary call made right time remember application state simple clojure map fact reframe allows u access app state way following code snippet evaluated loop every dbappdb returning timecolor app state simple timecolor dbappdb code defining subscription handler rfregsub time fn db db current app state unused param query vector time db return query computation application state rfregsub timecolor fn db timecolor db notice deref app db atom reframe pass subscription handler content atom view function domino view function turn data dom state hiccup reagent component spa lot view function collectively render app entire ui hiccup hiccup data format representing html trivial view function return hiccupformatted data defn greet div hello viewer mean div hello viewer div call greet first greet yep vector two element keyword string render reagent becomes dom element greet greet pretty simple hiccup part data subscribing render dom representation part app state view function must query part appdb mean using subscribe subscribe always called like rfsubscribe queryid optional query parameter one global subscribe function take one argument assumed vector first element vector shown queryid identifies query element optional query parameter traditional database query might select customer name blah reframe would done follows subscribe customerquery blah would return ratom holding customer state value might change time subscription return ratom must always dereferenced obtain value recurring trap newbie view function view function render clock defn clock divexampleclock style color rfsubscribe timecolor rfsubscribe time totimestring clojurestringsplit first see us subscribe twice obtain two piece data appdb either change reframe rerun view function render clock reagent component clock cool thing change value app state clock change immediately uncomment following swap expression see clock change color blue swap dbappdb assoc timecolor blue view function render input field defn colorinput divcolorinput time color input type text value rfsubscribe timecolor subscribe onchange rfdispatch timecolorchange target value notice subscribe obtain current value dispatch say changed common view function run eventdispatching function user interaction ui usually largest source event render colorinput reagent component colorinput view function bring others together contains subscription dispatching defn ui divclock hello world clock colorinput kick starting app run called kick application html page loaded two task load initial application state load gui mounting rootlevel function hierarchy view function case ui onto existing dom element defn run rfdispatchsync initialize put value application state reagentdomrender ui mount application ui div id app jsdocumentgetelementbyid app run called app passively wait event nothing happens without event run run function render app dom element whose id app dom element located top page element used show app look like begining article know lazy scroll till begining article decided render whole app reagent element ui come establishing initial application state notice use dispatchsync rather dispatch simplifying cheat ensures correct structure exists appdb subscription event handler run hope enjoyed interactive tutorial got better understanding write reframe application really want become reframe master take video course reframe liked article might also like
245,Lobsters,clojure,Clojure programming,a standalone PG migration tool compiled using Graal,https://github.com/leafclick/pgmig,standalone pg migration tool compiled using graal,pgmig migratus build uberjar build linux binary run locally graalvm ce graal nativeimage build docker image graalvm community edition official image usage run uberjar java run linux binary within docker container limitation substratevm limitattions license,pgmig standalone postgresql migration runner using migratus build uberjar lein withprofile native clean test uberjar build linux binary run locally already graalvm ce installed properly set graalhome javahome path try build run native image locally need graal release nativeimage build deploy pgmig successfully project directory create uberjar run createimagesh helper script lein withprofile native clean test uberjar createimagesh targetuberjarpgmigjar use pgmig command line option environment variable running env variable priority pgmig h localhost p pgmig u pgmig p pgmig r samplesdbmigrations pending note need library native binary linked target machine also keep mind might need add djavalibrarypath pathtosharedlibs pgmig option need load library dynamically including shared library jdk build docker image docker image based graalvm community edition official image successfully built uberjar create migration runner image lein withprofile native clean test uberjar docker build leafclickpgmig usage run uberjar java try basic functionality run uberjar get help available command run java jar targetuberjarpgmigjar list pending migration uberjar java jar targetuberjarpgmigjar h localhost p pgmig u pgmig p pgmig r samplesdbmigrations pending run linux binary within docker container run native image within docker container set environment bind migration directory specify action docker run ti mount typebind src pwdsamplesdbmigrations dstmigrations e e databasenamepgmig e dbuserpgmig e dbpasspgmig e resourcedirmigrations leafclickpgmig pending expected output something like oryx info starting oryx info start completed oryx info pgmigconfigenv started oryx info pgmigdbstoredbspec started oryx info using migration dir samplesdbmigrations oryx info pending migration first second oryx info shutdown initiated oryx info shutdown completed oryx info pgmigdbstoredbspec stopped safelly ignore warning unsupported feature used pgmig limitation number graal substratevm limitattions apply pgmig supported jdbc driver postgresql jdbc datasource bundled pgmig binary feature supported basic work well license copyright leafclick sro licensed apache license version
246,Lobsters,clojure,Clojure programming,Janet is a Clojure inspired language for scripting or embedding,https://janet-lang.org/,janet clojure inspired language scripting embedding,community janet gitter channel janet channel freenode janet doc use case feature try usage module library github janet package listing circlet joy web framework json webview jaylib jhydro janetui libui,community feel free ask question join discussion janet gitter channel alternatively check janet channel freenode help also checkout janet doc janet documentation userprovided example use case janet make good system scripting language language embed program think lua guile janet also used rapid prototyping dynamic system domain dynamic language shine implemented mostly standard janet run window linux macos feature standard c dynamic library loading compiler specific optimization fairly straightforward janet easily ported new platform feature minimal setup one binary good go first class closure garbage collection first class green thread continuation python style generator implemented plain macro mutable immutable array arraytuple mutable immutable hashtables tablestruct mutable immutable string bufferstring macro byte code interpreter assembly interface well bytecode verification tail call optimization direct interop c via abstract type c function dynamically load c library functional imperative standard library lexical scoping imperative functional programming repl parsing expression grammar built core library function macro core library interactive environment detailed stack trace export project standalone executables companion build tool jpmtry usage repl launched janet binary invoked argument pas h flag display usage information individual script run janet myscriptjanet looking explore print list available macro function constant entering command allbindings repl janet janet copyright c calvin rose print hello world hello world nil osexit janet h usage janet option script args option h show help v print version string use raw stdin instead getline like functionality e code execute string janet r enter repl running script p keep executing top level error persistent q hide prompt logo repl output quiet k compile script execute syspath set system path loading global module c source output compile janet source code image n disable ansi color output repl l path execute code file running main script stop handling optionsmodules library see auxiliary project github short list library janet help get started interesting stuff see janet package listing complete list package listing installed via jpm install pkgname circlet http server janet joy web framework framework web development janet json json parser encoder binding sqlite webview spawn browser window creating htmlcss uis platform jaylib binding raylib game development jhydro cryptography janet janetui binding libuifor editor support
247,Lobsters,clojure,Clojure programming,ClojureScript Loves NPM,https://dev.to/jacekschae/clojurescript-loves-npm-1ah4,clojurescript love npm,shadowcljs installing npm package react reagent react ui library materialui redux reframe immutable functional simple concise comparision powerful javascript friendly slack clojureverse fullstack twitter,every languge compliestranspiles j want connect npm use huge ecosystem master course ecma script second one humble opition clojurescript due shadowcljs disclaimer know lot work going differnt community tap npm mean nt try diminish state cljs clojurescript best want give glance work clojurescript installing npm package clojurescript would install npm package would javascript would use standard packagejson shadowcljs build tool would figure rest installation would require package require statment almost identical import j cljs swap order first say every clojurescript file start n namespace declaration following require instead import defining function defn function tap required firebase package instead using navigate method initializeapp using make sure invoke j method initializeapp converting cljs map datastructure j object j let try npm package get better feeling interop npm clojurescript react using react clojurescript couple wrapper react popular one reagent simple counter example react hook reagent example first importingrequiring react reagent defining state react using hook reagent using atomswhat follows jsx javascript hiccup clojurescript component cool would use react ui library reagent react ui library one popular ui libraires materialui installation require library import button component well react clojure script require button nt need require reagent since clojurescript deps interop react would use form pas property want redux redux ask well library build top reagent called reframe first designed dec even predates official elm architecture pretty good picture cljs love npm ecosystem easy interop cljs j maybe interesting wondering even try clojurescript immutable clojurescritp data structure immutable presistant nt need learn new api want leaverge something like immutablejs functional clojurescript embrace functional programming idea core nt need lodash ramda simple shadowcljs nt need spend time configuring build require need build tool job concise liability loc write clojurescript one concies programming languges chek last section comparision powerful clojurescript us google closure tool code minification tree shaking toll google using build gmail google calendar google doc google map javascript compilestranspiles javascript e ecmascript reasonml purescript elm friendly clojurescript community friendly welcoming group people ever met online mainly hang slack clojureverse fullstack clojurescript older brother clojure embrace idea java want write server one performant stable platform java virtuel machine using language like article follow twitter writetweet programming technology mainly clojurescript clojure
248,Lobsters,clojure,Clojure programming,Build a Clojure web app using Duct,https://circleci.com/blog/build-a-clojure-web-app-using-duct/,build clojure web app using duct,clojure duct clojure brave true clojure ground london clojurebridge site prerequisite java jdk greater leiningen git getting basic web application check run handling request integrant set continuous integration github personal access token http circlecicom add project set project start building building add index page hiccup running new index page add film ragtime adding database function boundary adding film add dashboard list film summary add production database app package using docker deploy aws chris howejones devcycle,blog post going build serverside web application using clojure framework called duct duct clojure web application built bespoke fashion using collection library picked put together developer duct provides modular framework take away effort searching library enables get basic serverside web application running faster clojure web framework duct nice mix default without much learning curve going assume certain amount basic clojure knowledge new clojure take look clojure brave true clojure ground load useful resource london clojurebridge site want see completed code committed github prerequisite order build web application need install following java jdk greater clojure run java virtual machine fact java library jar built using version greater version work fine leiningen leiningen usually referred lein pronounced commonly used clojure build tool git ubiquitous distributed version control tool getting basic web application one nice thing duct use lein template give skeleton web application box going use give starting point web application allow enter list film description rating starter application going use sqlite database engine development later blog post refactor use postgresql following command give initial project basic structure require lein new duct filmratings site ataraxy sqlite example create new directory called following structure db dev resource devedn src devclj userclj projectclj readmemd resource filmratings configedn handler example examplehtml public src filmratings boundary handler exampleclj mainclj test filmratings boundary handler exampletestclj explore file minute need generate local config duct config machine automatically excluded git repository using entry generated gitignore file generate local config enter check run point run application check working setup enter following command lein repl nrepl server started port host nrepl reply nrepl clojure user dev loaded dev go ductserverhttpjettystartingserver port initiated dev start application listening port open browser type url http see may seem odd server working route path take look config application open file filmratingsresourcesfilmratingsconfigedn favorite text editor ide see ductcoreprojectns filmratings ductcoreenvironment production ductmodulelogging ductmodulewebsite ductmodulesql ductmoduleataraxy get example example filmratingshandlerexample db igref ductdatabasesql basic config file duct specifies project namespace target environment production case although look development config later placeholder logging site sql configuration interesting line file ductmoduleataraxy get example example filmratingshandlerexample db igref ductdatabasesql specify map url handler function deal http request url case using library called ataraxy specify route url function see ductmoduleataraxy map entry template generated route map http get request url example keyword example since route defined example type http browser see handling request get example example route end serving example handler page default duct assumes keyword route value example prefixed projectns handler look key determine handler configuration example filmratingshandlerexample defines option value integrant reference ductdatabasesql key integrant microframework build config construct running system starting component defined config correct sequence revisit database option later note duct look integrant key determine function act handler find handler function file filmratingssrcfilmratingshandlerexampleclj defmethod iginitkey filmratingshandlerexample option fn ataraxyresult responseok ioresource filmratingshandlerexampleexamplehtml handler function return another function accepts http request return response inner function simply return vector telling ataraxy return status ok examplehtml file body response handler given option initialized integrant according config case option used way getting handle resource like database set continuous integration go commit far git set continuous integration build first create git repository locally open new terminal session leave one running lein open enter following command filmhandler root directory git init git add git commit duct app generated w site ataraxy sqlite example point need github account one sign github sign account add new repository called filmhandler copy url repository use following command git remote add origin github repo url git push setupstream origin master url http version prompted github username password multifactor authentication enabled need generate personal access token github use password code github going use circleci run continuous integration build go http circlecicom create account signing github credential telling circleci run build worth running one manually lein test uberjar lein test filmratingshandlerexampletest ran test containing assertion failure error compiling filmratingsmain compiling filmratingshandlerexample created created see ran test packaged app standalone uberjar uberjar single archive file containing required library simplify name uberjar editing projectclj file adding uberjarname keyvalue main skipaot filmratingsmain uberjarname filmratingsjar resourcepaths resource targetresources rerun lein test uberjar see jar name changed filmratingsjar time add circleci directory configyml root filmhandler directory mkdir circleci cd circleci touch configyml cd edit empty configyml following line yaml code version job build workingdirectory ccifilmratings directory step run docker image circleciclojure environment leinroot nbd jvmopts limit maximum heap size prevent memory error step checkout restorecache key filmratings checksum projectclj run lein deps savecache path key filmratings checksum projectclj run lein test uberjar need add edited projectclj file circleci config github git add git commit added circleci git push origin next go circleci account select add project pick repo list click set project default o language preselected linux clojure click start building click building drill build job see build running eventually see successful build add index page really need example page make change remove add index page route need edit configedn remove example route add new index route config look like ductcoreprojectns filmratings ductcoreenvironment production ductmodulelogging ductmodulewebsite ductmodulesql ductmoduleataraxy get index filmratingshandlerindex need create handler index page create file called indexclj filmratingssrcfilmratingshandler directory add following index file n filmratingshandlerindex require ataraxycore ataraxy ataraxyresponse response filmratingsviewsindex viewsindex integrantcore ig defmethod iginitkey filmratingshandlerindex option fn ataraxyresult responseok viewsindexlistoptions defmethod initializes filmratingshandlerindex key handler function take request destructures result ataraxy route case bothered naming used also see two argument defmethod first key keyword filmratingshandlerindex case second initialized option defined config used example handler reference listoptions function filmratingsviewsindex namespace exist create file add new directory called filmratingssrcfilmratingsviews create new indexclj file containing n filmratingsviewsindex require filmratingsviewstemplate refer page defn listoptions page divcontainerjumbotronbgwhitetextcenter row p abtnbtnprimary href addfilm add film row p abtnbtnprimary href listfilms list film see listoptions function return htmllike data structure wrapped function call page function yet exist htmllike data structure rendered real html using library called hiccup order use hiccup need add dependency projectclj file dependency orgclojureclojure ductcore ductmodulelogging ductmoduleweb ductmoduleataraxy ductmodulesql orgxerialsqlitejdbc hiccup add page function referenced index view namespace create filmratingssrcfilmratingsviewstemplateclj file n filmratingsviewstemplate require hiccuppage refer includecss includejs hiccupelement refer linkto hiccupform form defn page content head meta name viewport content widthdevicewidth shrinktofitno title film rating includecss http includejs http http http body divcontainerfluid divnavbarnavbardarkbgdarkshadowsm divcontainerdflexjustifycontentbetween film rating linkto class textlight home section content defn labeledradio group fn checked label divformcheckcol formradiobutton class formcheckinput group checked label formlabel class formchecklabel str label label str label also see another function labeledradio return hiccup radio button need later delete filmratingssrcfilmratingshandlerexampleclj filmratingstestfilmratingshandlerexampletestclj file filmratingsresourceshandlerexample directory content running new index page check index page render properly go back running lein repl terminal usually able refresh state app running reset repl case added new dependency hiccup need reloaded restarting repl like user quit bye lein repl user dev loaded dev go ductserverhttpjettystartingserver port initiated dev next open browser http url see committing change add test index page cover chance u accidentally breaking point create file filmratingstestfilmratingshandlerindextestclj following content n filmratingshandlerindextest require filmratingshandlerindex clojuretest refer deftest testing ringmockrequest mock integrantcore ig deftest checkindexhandler testing ensure index handler return two link add list film let handler iginitkey filmratingshandlerindex response handler mockrequest get ataraxyresponseok first response href addfilm refind href addfilm second response href listfilms refind href listfilms second response run test lein test lein test filmratingshandlerindextest ran test containing assertion failure error commit change push github git add git commit added index page git push kick build circleci see circleci console add film far application show index page button link nothing next need add handler add film one list film also need wire database start adding database look filmratingsdevresources see devedn file start development mode running app far duct merges development config file production config file integrant start application ductcoreenvironment development ductcoreinclude filmratingsconfig ductmodulesql databaseurl jdbc sqlite dbdevsqlite see set ductmodulesql reference sqlite database integrant start start app start reference map containing running database connection moment reference empty database however use ragtime module use ragtime database migration library populate database film table add following line filmratingsresourcesfilmratingsconfigedn filmratingshandlerindex ductmigratorragtime migration igref filmratingsmigrationscreatefilm ductmigratorragtimesql filmratingsmigrationscreatefilm create table film id integer primary key name text unique description text rating integer drop table film add handler add film form view post request add film database first add route filmratingsresourcesfilmratingsconfigedn file ductmoduleataraxy get index addfilm get filmshowcreate post filmform formparams filmcreate filmform new addfilm url mapped two handler one get method one post method note post route us clojure destructuring extract request form parameter pass argument filmcreate handler point defined filmcreate filmshowcreate integrant key option add line configedn filmratingshandlerindex filmratingshandlerfilmshowcreate filmratingshandlerfilmcreate db igref ductdatabasesql create key integrant reference database passed handler option map next need create handler key key namespaced filmratingshandlerfilm namespace duct integrant look find function initialize handler key need create new file namespace filmratingssrcfilmratingshandlerfilmclj n filmratingshandlerfilm require ataraxycore ataraxy ataraxyresponse response filmratingsboundaryfilm boundaryfilm filmratingsviewsfilm viewsfilm integrantcore ig defmethod iginitkey filmratingshandlerfilmshowcreate fn responseok viewsfilmcreatefilmview defmethod iginitkey filmratingshandlerfilmcreate key db fn filmform ataraxyresult request let film reducekv fn k v assoc keyword k v dissoc filmform antiforgerytoken result boundaryfilmcreatefilm db film alert id result message film added result responseok viewsfilmfilmview film alert filmratingshandlerfilmshowcreate defmethod return handler simply return result call createfilmview wrapped vector responseok keyword rendered ataraxy http response status filmratingshandlerfilmcreate defmethod take database option enclosed handler function destructures filmform ataraxy result filmform map html form created yet map key name form field string plus antiforgery token first line let remove antiforgery token change string key keywords convenience createfilm function called database film form argument return result map id message keyvalue pair handler function return response call filmview point view function exist neither createfilm function need create new view file filmratingsrcfilmratingsviewsfilmclj n filmratingsviewsfilm require filmratingsviewstemplate refer page labeledradio hiccupform refer formto label textfield textarea submitbutton ringutilantiforgery refer antiforgeryfield defn createfilmview page divcontainerjumbotronbglight divrow add film div formto post addfilm antiforgeryfield label name name textfield class formcontrol placeholder enter film name name label description description textarea class formcontrol placeholder enter film description description label rating rating map labeledradio rating repeat false range submitbutton class btn btnprimary textcenter add defn filmattributesview name description rating div divrow name name description divrow description description rating divrow rating rating defn filmview key name description rating key error message page divcontainerjumbotronbglight divrow film filmattributesview name description rating error error doall error divrowalertalertdanger divcol error message message doall message divrowalertalertsuccess divcol message createfilmview return hiccup display form enter film name description rating note page function filmratingsviewtemplate namespace used wrap hiccup createfilmview hiccup provides navbar etc filmview function take map representing film map containing error message render hiccup display film alert error message hiccup render attribute extracted function filmattributesview reuse film list adding database function boundary implementing function config mainly handle http request response added migration create film table development sqlite database integrant reference database actually done anything database time add boundary namespace handle database interaction boundary duct concept isolate external dependency rest code boundary clojure protocol associated implementation clojure protocol similar concept interface language current config map option passed filmratingshandlerfilmcreate handler ductdatabasesql key integrant initialize reference ductdatabasesqlboundary record handler reference function need implement function createfilm filmratingsboundaryfilm namespace function would need defined protocol extends ductdatabasesqlboundary record duct framework implementation createfilm function go ahead create filmratingssrcfilmratingsboundaryfilmclj file n filmratingsboundaryfilm require clojurejavajdbc jdbc ductdatabasesql import javasqlsqlexception defprotocol filmdatabase listfilms db createfilm db film extendprotocol filmdatabase ductdatabasesqlboundary listfilms db spec jdbcquery db select film createfilm db spec film try let result jdbcinsert db film film iflet id val ffirst result id id error failed add film catch sqlexception ex error format film added due getmessage ex concentrate createfilm function function defined filmdatabase protocol protocol implemented extending ductdatabasesqlboundary record implementation createfilm unsurprisingly createfilm function take reference filmdatabase initialized start live database connection integrant reference film map form parameter parsed handler function us clojurejavajdbcinsert function insert film map film table function return map id newly inserted record map error error occurs adding film enough implementation add film database repl still running terminal session switch back start new repl reset application reload new code dev reset reloading filmratingsboundaryfilm filmratingshandlerfilm filmratingsmain filmratingsviewsfilm filmratingshandlerexample dev user ductmigratorragtimeapplying filmratingsmigrationscreatefilm resumed dev go http click add film button see go ahead fill form click add added lot code commit push github git add git commit add film functionality git push check circleci see build run correctly going dashboard list film finish need implement config handler view listing film change ataraxy routing add new list handler key configedn ductmoduleataraxy get index addfilm get filmshowcreate post filmform formparams filmcreate filmform get listfilms filmlist filmratingshandlerindex filmratingshandlerfilmshowcreate filmratingshandlerfilmcreate db igref ductdatabasesql filmratingshandlerfilmlist db igref ductdatabasesql add following handler function filmratingssrcfilmratingshandlerfilmclj file defmethod iginitkey filmratingshandlerfilmlist key db fn let filmslist boundaryfilmlistfilms db seq filmslist responseok viewsfilmlistfilmsview filmslist responseok viewsfilmlistfilmsview message film found already defined listfilms function called handler need add add new listfilmview function filmratingssrcfilmratingsviewsfilmclj file defn listfilmsview film key message page divcontainerjumbotronbglight divrow film key name description rating doall film div filmattributesview name description rating hr message message doall message divrowalertalertsuccess divcol message call previously defined filmattributesview function every film need make sure listfilmsview filmattributesview file test work resetting repl dev reset reloading filmratingsviewsfilm filmratingshandlerfilm resumed dev go index page http select list film button see list film added finally add commit change git summary congratulation created functional duct web application currently app database defined development profile uberjar created build actually work production sql module empty map ductmodulesql leave exercise reader feel confident enough struggle writing subsequent blog detailing add production database app package using docker get circleci deploy aws read chris howejones consultant cto software architect leanagile coach developer technical navigator devcycle work mainly clojureclojurescript java scala client multinational organization small startup
249,Lobsters,clojure,Clojure programming,Hystrix for Clojurists,https://github.com/gojektech/bulwark,hystrix clojurists,bulwark techgojekbulwark description usage usagemd license,bulwark hystrix clojurists techgojekbulwark description light macro wrap code hystrix command circuitbreaking fault tolerance usage please see usagemd license copyright gojek tech http gojektech licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license
250,Lobsters,clojure,Clojure programming,"Deep Learning from Scratch to GPU, Part 2: Bias and Activation Function",https://dragan.rocks/articles/19/Deep-Learning-in-Clojure-From-Scratch-to-GPU-2-Bias-and-Activation-Function,deep learning scratch gpu part bias activation function,single linear transformation part,current state network combine layer single linear transformation introduce basic decisionmaking capability adding cutoff output neuron weighted sum input threshold output zero output one begin equation output left begin array wmathbf x leq threshold wmathbf x threshold end array right end equation sorry browser support svg since keep current output potentially huge vector would inconvenient write scalarbased logic prefer use vectorized function create one exactly need neanderthal exact cutoff function create one subtracting threshold maximum threshold signal value mapping signum function result simpler way compute wanted use existing function computation inplace purely educational value anyway see soon better thing use transforming output vanilla step function defn step threshold x fmap signum axpy threshold fmax threshold x x let threshold dv x dv step threshold x nil realblockvector double offset going show step evolution code reuse weight x simplify example use global def care properly releasing memory matter repl session forget real code continuing example part def x dv def dge layout row def threshold dv since care extra instance moment use pure mv function instead mv convenience mv creates resulting vector instead mutating one provided argument step threshold mv x nil realblockvector double offset bias simply threshold moved left side equation begin equation output left begin array wmathbf x bias leq wmathbf x bias end array right end equation sorry browser support svg def bias dv def zero dv step zero axpy bias mv x nil realblockvector double offset remember bias threshold need extra zero vector nil realblockvector double offset
251,Lobsters,clojure,Clojure programming,A Clojure Development Environment That Gets Out of Your Way,https://medium.com/@daniel.oliver.king/a-clojure-development-environment-that-gets-out-of-your-way-c11e6711ead3,clojure development environment get way,step setting atom clojure development opinionated guide download install atom intalling atom package tweaking package setting adding local dependency leiningen story time cautionary tale moral story,step setting atom clojure development opinionated guide surprised learn first step download install atom already itonce atom installed need customizingintalling atom packagesopen setting page going edit preference click install tab left side screen installing package atomyou need install package ink lispparedit protorepl installed restart atomtweaking package settingsgo package tab search bracketmatcher open setting page bracketmatcher plugin find autocomplete character option remove single apostrophe backticks look like done clojure us individual apostrophe backticks unlike language use matching pairsnext open setting protorepl plugin uncheck ink console option turn fancy graphical effect proto repl improves functionality get work done marvel pretty graphicsadding local dependency leiningento allow proto repl communicate clojure project declare dependency protorepl libraryfind file leinprofilesclj create exist copypaste following data file user dependency protorepl let break bitin leiningen configuration done use profile allow collect group configuration option name run leiningen specify profile want use leiningen merge configuration option contained profilesnormally leiningen profile defined configuration file single project however leiningen also look leinprofilesclj available profile make good place put dependency needed development environment local machinethere special profile called user always turned default configuration declaring user profile used include dependency protorepl version result whenever working clojure project local machine leiningen always include dependency protorepl version running lein repl terminal see new dependency downloaded repl start stop repl running quitstory time cautionary tale first learning clojure went tutorial told declare dependency leinprofilesclj like done forgot possible declare dependency year later working side project clojure started getting strange error whenever tried start repl ultimately couple hour searching happend stumble across leinprofilesclj noticed dependency declared date error happening one newer library using project incompatible old dependency version declared leinprojectclj remembered leinprofilesclj existed would taken minute hour find issue fix itthe moral story remember leinprofilesclj exists update dependency newer version necessaryat point atom fully set clojure development let work something bigger see tool fit together
252,Lobsters,clojure,Clojure programming,What React Hooks mean for ClojureScript,https://juxt.pro/blog/posts/react-hooks-raw.html,react hook mean clojurescript,coffeescript hook community project,first heard clojurescript looked lens javascript experience assumed would like coffeescript pretty much know javascript generating get type le clojurescript gap code write code generated gap provides powerful leverage often felt clojurescript community seek understand exploit react better many time trying make react easier convenient clojurescript library obscure many important feature example clojurescriptbased react wrapper try hard avoid class replacing many react lifecycle method single render function sometimes sufficient many situation unhelpful subtle act wrapping class result library inventing novel mechanism provide access react lifecycle method reframing object oriented paradigm react functional programming one complexity introduced fortunately react feature let u eliminate complexity new feature called hook hook allow use plain function component even need utilize lifecycle method eg state clojurescript library author longer need invent functionbased wrapper react simply use hook using hook directly function rather wrapping custom mechanism mean work large javascript community accessible community already hard work creating new hook created project use experiment snippet
253,Lobsters,clojure,Clojure programming,State of Clojure Survey 2019 Analysis,https://danielcompton.net/2019/02/06/clojure-survey-2019,state clojure survey analysis,result last three published update posted error message released spec maybe doc clojuredocsorg clojureorg guide programming repl clojuredocs datasequence golang provides scala school elixir school startup time marketingadoptionstaffing update language dunaj project language development process lot discussion community clojurians slack log clojurists together cljcommons library program compilation target typing worried type clojurescript dash setuptooling compliment conclusion,cognitect recently released result state clojure survey last three clojure survey reviewed freeform answer end survey tried summarise community feeling year repeating exercise keeping category like see comment published rough grouping comment lightly edited spelling clarity brevity update alex miller posted response comment highlighted suggestion next step people take help error message error message top complaint clojure long time think since first survey introduced improvement error message clojure number comment complained error message year none complaint mentioned change given released december survey ran january seems likely many people complaining tried latest improvement clojure error message appreciate work done improving error message thanks alex miller others thanks hard work spec error message general often caused minor typo alleviates problem found error message since single biggest concern clojure want say thank listening give clojure filename line exception happened please beg better error message please great see improved error message clojure number one issue previous clojure survey one spec spec around two half year still alpha number comment referenced rich recent maybe talk coming change spec great see rich putting word problem felt feel like community transitional phase spec people still quite sure thing going land clojure spec tooling would nice hard learn obvious integrate normal deftest test massive amount ide integration potential though really love spec feel little complete got lot love spec project use heavily work feel shadowed moment ambiguity change might way spec great potential really bad ux new clojure hard figure wrong spec made clojure error worse spec better tool integration static analysis facility really excited see direction spec heading wait see next iteration thank given u looking forward improvement spec maybe certainly feeling pain point address currently work around generating heap variation essentially spec per fdef put finger always felt bit awkward use spec juggle spec spec meant particular point time flow software thanks mr hickey presentation conj finally make sense looking forward next iteration spec doc documentation continued sore spot beginner api docstrings often cited hard understand instead people preferred see example clojuredocsorg documentation clojureorg grown year number great guide added particularly programming repl concerning doc seldom able really make use clojure api doc since example help understand function rely often upon example provided community clojuredocs however quality example vary would helpful set curated example clojure great main website doc example tutorial good would invest time improving become barrier language wish better documentation generator better culture documentation really miss documentation haskell ecosystem five year ago never thought would saying example haskell community generally expects detailed documentation data structure including detailed asymptotics eg datasequence complaint extends many clojure included feature headline feature like stm incredibly sparse documentation one printed page semantics hinted left guessing actually thing beginner support exceptionally good think would appreciate intermediate advanced support form book courseware etc carry advanced clojure love clojure doc phenomenal improvement clojurescript site getting started cli tool huge beginner really struggle understand api doc tend use thirdparty website often would great know thing like use record v map intermediate guide would nice also guide effective idiomatic clojure like golang provides please work improving ease use doc string core language third rate poorly written cryptic unhelpful error message although presented nicely still terrible error message year ask example documentation provide tutorial like scala school elixir school clojure newbie like beginner experience still need work please consult firsttime programmer teacher teach startup time startup time perennial complaint major change longstanding issue startup time poor runtime performance box without tinkering insanely high memory usage becoming major drawback language u planning move faster language probably rust go would like use clojure cljs aws lambda side project painfully slow startup time prevents improving startup time improve developer happiness make clojure much better tool serverless computing marketingadoptionstaffing clojure continues grow business adoption hiring developer one top three thing preventing people using clojure last three year add one way company could address mismatched supply demand clojure developer open remote worker update alex miller also suggested training people clojure thought preparing post forgot include final copy new option survey year convincing coworkerscompaniesclients ranked number one preventing people adopting clojure opinion significant issue addressed clojure want grow market share probably need research find barrier convincing people elm proof exotic language adopted widely learn done benefit wider clojure take worry view outside looking attractive biggest problem one year intense clojure learningcoding find clojure job remote zero clojure job taiwan regardless good writing functional code finding remote job outside u hard passionate evangelist year surprising hard folk even consider clojure rubyists particularly baffled ok mean repl driven pry etc cofounded startup company picked clojure primary language happy decision nice note almost none hire knew clojure learned quickly like see lack clojure talent concern clojure thoughtfully designed stable dynamic functional lisp actually sold boss sentence never thought would write clojure great community great technology would super helpful selling language effort put marketing language perhaps blessed solution using clojure cognitect similar lightbend scala thank hard work continue put clojure built entire new startup clojure able hire amazing team within year tapping local tightknit community language suggestion improvement existing language feature development new one please take look dunaj project similar idea believe community still many great idea could adopted clojure bring breaking change need better ide sure please spend time improving clojuretest dream dream seeing slimestyle backtrace clojure clojurescript namespace definition require macro reader conditionals interact seriously nontrivial especially macro intend use clojure simplification would welcome possible language development process lot discussion clojure development process relationship core team community curious see widely feeling reflected freeform comment respondent compliment common comment type response positive negative inbetween clojure language development process total comment many people issue development process also many people supportive clojure currently developed grateful careful stewardship clojure clojurescript rich hickey cognitect clojure strong opinion software built need keep strong opinion opinion differentiate make attractive keep great work clojure amazing guy fantastic job ignore critic keep thing like thank wonderful language closed core development disappointment spec made made many friend leave clojurescript last year let make better love clojure extremely grateful rich stu alex etc continuing stewardship work fantastic gift respect recent kerfuffle community involvement simultaneously understand respect rich position also concerned respected clojure developer contributed lot imho feel disconnected may drifting away community governance clojure cognitect thank right managing expectation year late please give signal core team recognises also much community worth clojure language dismissing critic previously unclear contributionlifecycle process love principled stand taken clojurecore team silly argument erupting community really appreciate core well thought valid resistance adding stuff appreciate alex insight clojure development process working also appreciate core team work make clojure great language use thanks recent improvement inline community wish still make sad bigger core team utilizing skill community could thing like eg actively improve coreasync clojure wonderful language however becoming worried future prospect language way cognitect handle community feedback direction language year rich finally explained felt open source community around clojure many disappointing glad finally explained felt least open people make decision full information five year ago clojure could afford lose key contributor language growing new people coming along clojure different place position longer growing rate mindshare invested many year lot time clojure community year thought would long career clojure starting look around language community one better fit value even though agreed substance rich hickey clarity gist concerning prolific library maintainer leaving community sure would responded even le graciously still element community management go beyond correct using clojure professionally year hedging bet involving rust community rich comment may lauded greater online community large impact personal consideration state clojure member community concern user base clojure grow larger without concept ownership changing conflict end day conflict hope clojure interest cognitect seems clojure remained rich originally intended conflict simply reason assumed interest line cognitect become clearer year year especially year case likely misunderstanding mistake part looking back see reason assumed generally trajectory language focus growth reason likely exit community many others hard feeling regret part appreciative hard work gone clojure regretful contribute nearly enough time writing community people seem mostly enjoy clojure community others negative experience often citing elitist attitude community member losing history clojurians slack came several time sure everyone aware clojurians slack log community aggressivehostile experience love community everyone really helpful wish diverse wrote stuff lot seems get shared face face great make really high barrier entry bit worried longterm viability clojure worried language ecosystem friendly newcomer clearly distilling many year software practitioner experience thus opinionated badugly part clojure ecosystem use unsearchable slack main knowledge base really enjoy community despite occasional war word generally seems filled helpful deep thinking people fun interact known one thing like thanks much cognitect team everyone help make clojure community better understand people vocal thing dislike much come appreciate thing work nicely able use clojure professionally build software solves problem really exciting grateful suggest moving slack accessible chat system losing history bad thing check discord matrix gitter mattermark number tool made purpose concerned much disconnect core developer wider community think would great core acknowledged work clojurists together think new cljcommons organisation great idea like see better promoted supported tone community changed think sad community prominent people around outstanding really something behold first motivation staying good language tool etc people behind definitely main treasure library people still looking curated onramp clojure web development rail clojure number framework template seem hitting spot sure whether limited mindsharemarketing limited documentation scope quality framework used clojure many year longer find difficult find assemble piece need project definitely remember finding difficult started data science ml place people saw niche clojure several people hoped improvement coreasync still number rough edge would love see way get open source tool cider sustainable support worried open source maintainer getting burned creating awesome tool know look like yet ed got program know clojure promotes buildityourself type mentality nice would great standard implementation thing like webapps auth security etc leading way alternative follow ok opinionated work properly one huge opportunity still missed field data science clojure clojurescript potential become best platform data research ever field others important beginnerfriendly clojure need railslike killer app framework provides novice trainingwheels included opinionated approach building application clojure roll pick poison approach clojure barrier many coreasync could use love closing longopen bug documentation bestpractices build bigger system maybe need officially deprecated outside observer feel like limbo clojurecore team either way currently using zach tellman manifold abstraction lot great effect much prefer library framework approach taken clojure community miss rapid development rubyonrails allows ie convention think curated collection recommended third party library would help lot team compilation target people experimenting graal compiler produce static binary without needing jvm point seems like strongest option people wanting use clojure without jvm better android support also requested clojure seem plan android integration pretty sad considering much computing power employed big showcase mobile development think limitation respective host language holding clojure clojurescript back clojure project compiles webassembly many people want native clojure need native clojure without jvm plan advent graalvm resulting ability build clojure executables startup quickly game changer slow startup time need use jvm real impediment clojure adoption general purpose language would even better someone would pursue clojure native compiler would generate native executables probably going happen ensuring clojure run well graalvm probably hope plenty work done difficulty running android may end forcing port existing desktop application clojure pure javakotlin solution targeting two popular vms great able get native performance always wish like llvm typing past year people le le worried type suspect mostly due spec love clojure two java shop four year lack static typing ability commandclick identifier intellij navigate source ability refactor prevented winning colleague tbh also reduced enthusiasm since prospect working loc project without static typing honestly scare selected static typing matching haskell intent lack static guarantee bother possible reject program guaranteed fail would improvement example clojurestringreplace nil b clojurestringreplace abc clojurescript shadow cljs mentioned many people great part workflow using shadow extern remain challenging shadowcljs made continue developing clojurescript started using backend service provides significantly better support npm libs leincljsbuild using without shadowcljs able use clojurescript found impossible get npm package needed work terrible state right least slightly worried divergence clojure clojurescript future shadowcljs great job compiling clojurescript npm integration diverges standard compiler would love see shadowcljs merged mainstream clojurescript compiler general would like better easier way compile clojurescript without setting ton flag feel like cljs could make amazing evenbetter version dash maybe powered reagentreframe although work done extern find venturing javascript interop fraught peril would happy interop would work java interop frustrating development build work release catching problem early would seriously mitigate issue using cljsoops library work well feel kind hack overall content clojurescript though setuptooling clojure tooling continued improve year lot work done adding plugins expanding functionality new official clojure tool clj window asked many people maintainer burnout seems like significant risk clojure tooling ecosystem happy see many realised need find way better support development cider crucial part clojure development infrastructure seems like lead dev burning recently many u depend others goodwill challenging first year obtaining high productivity tool would great see simple capable tool set get focus eg atom vscode longer want work cider cursive rather like work rebl repl ide believe renaissance clojure tooling prepl becomes demystified andor add taprepl something like tap clojure repl would allow tooling added removed dynamically please port clj window clj window please need clj window possible release compliment always vast number comment compliment clojure core team keep good work clojure beautiful functional concise really rejuvenated love programming absolutely love clojure really appreciate well thought design clojure feel clojure give u distinct advantage providing language minimum disruption year later still enjoy writing clojure thanks make extremely productive fun use really appreciate work cognitect community abroad put making clojure clojure community joy work keep good work year clojure journey thanks rich everybody conclusion clojure great language people enthusiastic adoption business continues grow number area improvement still especially clojure community want grow work need go core though particularly area documentation guide library tooling worry clojure community losing key contributor linchpin holding lot thing together lose hard come back want see happen please support library tool rely contributing code documentation issue triage money
254,Lobsters,clojure,Clojure programming,State of Clojure 2019 Results,https://clojure.org/news/2019/02/04/state-of-clojure-2019,state clojure result,jvm ecosystem survey company,first clojure survey respondent reported using clojure work serious hobby project number steadily grown year see using work using serious hobby project clojure used wide variety domain web development open source course also building delivering commercial service enterprise apps work occurs wide variety industry financial service enterprise software consumer software retail mediaadvertising healthcare education many last four year percentage clojure developer person company fallen year compared year ago saw increase developer working company sized also saw number consumer clojure project le team outside team outside organization added new question year gauge general experience level clojure developer almost half clojure user year experience year recent jvm ecosystem survey asked similar question comparison saw year experience year clojure developer tend experienced average jvm developer thanks clojure clojurescript make living building maintaining large system delivering complex solution time thank clojure thoughtfully designed stable dynamic functional lisp actually sold boss sentence never thought would write way team could pull rabbit hat working language thing ever seriously worry clojure ensure get work clojure clojurists current gig come end hundred company ten thousand clojure developer working clojure clojurescript every day using foundation business survey indicates clojure developer increasingly using work bigger company impacting ever larger group user
255,Lobsters,clojure,Clojure programming,The Manifest Podcast Episode 12: Clojars with Daniel Compton,https://manifest.fm/12,manifest podcast episode clojars daniel compton,,social network quick link
256,Lobsters,clojure,Clojure programming,Clean Clojure: Small functions,http://ecmendenhall.github.io/blog/blog/2013/09/05/clean-clojure-functions/,clean clojure small function,series meaningful name make simple hard presentation function threading macro comment,part series clean clojure previously meaningful name clean code uncle bob proposes two rule good function first rule function small second rule function smaller useful rule clojure requires one still small enough functional language immutable data make reasoning easy making function simpler function take input transform return new output data pass function flowing rather mutating complicated function make simple hard dangerously easy write hyperbole aside really two simple rule function small one thing presentation function uncle bob describes simple algorithm cleaning crufty function pick function extract function one thing recur extracted function instead contrived wombat example use one disgusting old solution example atrocious code cut slack young naive problem write function take collection integer argument return count many element smaller sum squared component digit example larger squared plus squared whereas smaller squared plus squared answer hide child fn element let ltsqdcomponents fn n let digit map int seq str n square map digit sqsum reduce square n sqsum true false count filter true map ltsqdcomponents element like nested block language code sprawl rightward indicates happen fast clojure start extract ltsqdcomponents let binding common awful hack defining named function inside anonymous one though discerning us letfn def ltsqdcomponents fn n let digit map int seq str n square map digit sqsum reduce square n sqsum true false fn element count filter true map ltsqdcomponents element original function almost readable better look like understand filter wrote extra map redundant since ltsqdcomponents already predicate function return true false def ltsqdcomponents fn n let digit map int seq str n square map digit sqsum reduce square n sqsum true false fn element count filter ltsqdcomponents element one thing let clean move need name function filtering need question mark def ltsqdcomponents fn n let digit map int seq str n square map digit sqsum reduce square n sqsum true false defn countlessthansumofsquares coll count filter ltsqdcomponents coll recursive step let look terriblynamed ltsqdcomponents line let binding something different one split number sequence digit defn splitdigits number map int seq str n def ltsqdcomponents fn n let digit splitdigits n square map digit sqsum reduce square n sqsum true false defn countlessthansumofsquares coll count filter ltsqdcomponents coll one square every element sequence defn splitdigits number map int seq str n defn squareall digit map digit def ltsqdcomponents fn n let digit splitdigits n square squareall digit sqsum reduce square n sqsum true false defn countlessthansumofsquares coll count filter ltsqdcomponents coll one take sum collection defn splitdigits number map int seq str n defn squareall digit map digit defn sumofsquares square reduce square def ltsqdcomponents fn n let digit splitdigits n square squareall digit sqsum sumofsquares square n sqsum true false defn countlessthansumofsquares coll count filter ltsqdcomponents coll one function extract let binding function one might argue function one check whether number le sum squared component operating several different level abstraction digit sequence digit sum helpful guideline limiting function one level abstraction case function know sum defn splitdigits number map int seq str n defn squareall digit map digit defn sumofsquares square reduce square defn sumofsquaredcomponents n let digit splitdigits n square squareall digit sqsum sumofsquares square sqsum def ltsqdcomponents fn n n sumofsquaredcomponents n defn countlessthansumofsquares coll count filter ltsqdcomponents coll despite dumb name ltsqdcomponents one thing let clean prefer digit component use defn defn splitdigits number map int seq str n defn squareall digit map digit defn sumofsquares square reduce square defn sumofsquareddigits n let digit splitdigits n square squareall digit sqsum sumofsquares square sqsum defn lessthansumofdigitssquared n n sumofsquareddigits n defn countlessthansumofsquares coll count filter lessthansumofdigitssquared coll sumofsquareddigits transform let binding function using threading macro suggested comment last post defn splitdigits number map int seq str n defn squareall digit map digit defn sumofsquares square reduce square defn sumofsquaredcomponents n n splitdigits squareall sumofsquares defn lessthansumofdigitssquared n n sumofsquareddigits n defn countlessthansumofsquares coll count filter ltsqdcomponents coll better like intermediate squareall step hidden sumofsquares defn splitdigits number map int seq str n defn squareall digit map digit defn sumofsquares digit reduce squareall digit defn sumofsquaredcomponents n n splitdigits sumofsquares defn lessthansumofdigitssquared n n sumofsquareddigits n defn countlessthansumofsquares coll count filter ltsqdcomponents coll extract function literal squareall got great name defn splitdigits number map int seq str n defn square n n n defn squareall digit map square digit defn sumofsquares digit reduce squareall digit defn sumofsquaredcomponents n n splitdigits sumofsquares defn lessthansumofdigitssquared n n sumofsquareddigits n defn countlessthansumofsquares coll count filter ltsqdcomponents coll one function left splitting number sequence digit let extract name function literal defn char num character int character defn splitdigits number map char num seq str number defn square n n n defn squareall digit map square digit defn sumofsquares digit reduce squareall digit defn sumofsquaredcomponents n n splitdigits sumofsquares defn lessthansumofdigitssquared n n sumofsquareddigits n defn countlessthansumofsquares coll count filter ltsqdcomponents coll finally clean using integerparseint instead hacky subtraction defn char num character integerparseint str character defn splitdigits number map char num str number defn square n n n defn squareall digit map square digit defn sumofsquares digit reduce squareall digit defn sumofsquareddigits n n splitdigits sumofsquares defn lessthansumofdigitssquared number number sumofsquareddigits number defn countlessthansumofsquares coll count filter lessthansumofdigitssquared coll readable function level abstraction minimal nesting nothing longer three line starting top lowlevel function build bigger abstraction combination composition step easy read comprehend uncle bob put clean code master programmer think system story told rather program written use facility chosen programming language construct much richer expressive language used tell story part domainspecific language hierarchy function describe action take place within system artful act recursion action written use domainspecific language define tell small part story extract simplify recur take time consider line clean code come naturally
257,Lobsters,clojure,Clojure programming,Algebraic Effects(-ish Things) in Clojure,https://lilac.town/writing/effects-in-clojure,algebraic effect ish thing clojure,great discussion post common lisp special effective concurrency algebraic effect since ocaml eff printing print function state reagent reaction others continuation wisdom delimited continuation several implementation,update great discussion post taught idea explored dynamic language name condition notable language condition system common lisp popularized term clojure library called special port idea gotchas condition code must eager support resumeability like blog post talk go show never anything new sun algebraic effect handler provide modular abstraction expressing effectful computation allowing programmer separate expression effectful computation implementation effective concurrency algebraic effect algebraic effect way executing operation code let surrounding context define performed effect used model many different kind thing program controlflow mutability async operation effect system active area research since popular implementation live extension ocaml eff language research topic main interest ability model side effect sufficiently advanced static type system however think could lot value formalized pattern kind controlled indirection dynamic language fact many part clojure use every day bear striking similarity aspect algebraic effect post like try reimagine effect could used implement one typical example many lanaguages caught exception defn throw println raising exception throw exception oh elsewhere try throw catch exception e println handling exception throw form take exception executed cause program perform lookup nearest enclosing catch form handle exception essence algebraic effect perform effect look handler enclosing context using exception model thing like io mutable state thing would quite nasty performance reason ca nt use exception general effect system easy way continue executing code site raise form raised exception abort whatever since want explore could implement generally let imagine new way throwing catching exception clojure defn throw println throwing exception perform throw exception oh elsewhere handle handler context throw fn resume e println handling exception run function context throw perform function given keyword number value dynamically look nearest enclosing handle form implement effect handler function keyword pas value function executed imaginary library resume binding function would function call wanted continue execute call site effect suffice say outside scope post explore might implement later important thing resume binding nt call case exception elsewhere find useful able resume execution place started perform effect let see else might find effectish pattern printing clojure printing utility built support redirecting output output stream choose using dynamic variable per doc print function print object output stream current value print println produce output human consumption rebind var given context print function use whatever nearest binding variable defn greet name print hello name defn greetstr name binding javaiostringwriter greet name str greetstr string hello string case rebind actually stringwriter return string instead outputting stdout similar performing effect rebinding var end way u redefine behavior callsite without modifying code within psuedoeffect system defn greet name perform hello name defn greetstr name let outstr javaiostringwriter handle fn resume x imaginary convert append outstr append outstr obj char x resume greet name str outstr seems far verbose price pay generality wrap similar api clojure provides withoutstr defn print x apply perform x defmacro withoutstr body let outstr javaiostringwriter handle fn resume x imaginary convert append outstr append outstr obj char x resume let re body result re str str outstr defn greet name print hello name defn greetstr name str withoutstr greet name anytime use dynamic var binding withredefs think effect always resume call resume simply continue executing without passing anything back call site print used sideeffects expected return nil next explore example would resume someval wanted return something perform call state let state atom println state reset state println state reset state abc println state print abc created atom storing sort state update state perform operation based print previously looked indirection help u redefine control flow program catching exception also redefine effect program might outside world case also redefine application behaves locally modelling effect might look effect system let state atom handle stateput fn resume n resume reset state n stateget fn resume resume state println perform stateget perform stateput println perform stateget perform stateput abc println perform stateget print abc true seems overly verbose compared using deref swap referencing atom directly however gain composability easily move stateful code outside definition local state without modification defn app println perform stateget perform stateput println perform stateget perform stateput abc println perform stateget let state atom handle stateput fn resume n resume reset state n stateget fn resume resume state app print abc example might seem contrived quite similar pattern indirection emerged application framework like component integrant duct implementation bound atom protocol could used kind stateful resource want read write value one problem many application framework end working around nt great way propagate context across async barrier eg thread since nt anything like resume clojure ca nt replace state effecthandlers binding dynamic var context map since async function try get something context map find bound withredefs run issue would nt possible two running system time state context map would global race condition thread problem abound framework invert way dependency introduced system instead pulling dependency via form like perform stateget pas dependency explicitly argument component notate constructing dependency graph ensure ordering personally think application framework ripe kind abstraction could attained sort dsl implemented notion effect continuation build composable system reagent reaction one motivating use case effect handling potentially async operation reagent reaction abstraction interesting implementation effect function inner data dependency cause outer context call function anytime dependency updated instance response button click network request way reagent reaction work tracking call clojure deref reagent special atom way record atom particular function depends call updated def statea ratom def stateb ratom defn app div div button onclick swap statea inc button onclick swap stateb inc b div total statea stateb rrender app jsdocument getelementbyid app machinery reagent quite complex custom ratom us dynamic var ratomcontext bind within component reagent par hiccup body function walk tree element passed creates new react component function find creates component wrap function gave ratomcontext deref happens ratom ratom update context add component list listener way ratom changed know component listening force one update component called parens render nt reactively rerender inside application render call square bracket function invoked immediately give reagent time wrap component ratomcontext derefs captured setup rerender component update call parens ratomcontext return current value ratoms without adding new reaction try boil sort naive version intent exploring might effect plain atom def statea atom def stateb atom defn app div div button onclick swap statea inc button onclick swap stateb inc b div total perform deref statea perform deref stateb let render rrender app jsdocument getelementbyid app handle deref fn resume addwatch rerenderapp fn render resume render work top render level rather component level sake brevity time deref effect performed handler add watch atom rerun render function update screen new state creating entire implementation plumbing performance tuning reagent implemented year far outside scope post however hope make sense could use generalized effect system implement reactive deref handler frontend component others many example effectish construct modern programming language coreasync one nt go essentially another implementation specialized effect system think generalized algebraic effect system clojure would awesome nothing holding breath missing piece afaict resume function handwaved example requires featured called continuation allow u granularly pause resume function context passing function one simpler way done easytounderstand nature everyone us callback modern wisdom use called delimited continuation represent call site value rather function several implementation various kind continuation year library level none caught ergonomics proved nice settling one external implmentation use something fundamental carry risk continuation system ultimately meant human lowerlevel construct language built lisp clojure get flexibility defining language construct every day work domain specific system looked compose better rest clojure ecosystem today question comment correction please email acton dot com
258,Lobsters,clojure,Clojure programming,Solving New School with the Old School,https://www.infoq.com/presentations/clojure,solving new school old school,infoq homepage presentation solving new school old school clojure summary bio conference related sponsored content,infoq homepage presentation solving new school old school clojure solving new school old school clojure summary jearvon dharrie discus clojure language taking older idea solving problem topic discussed clojure answer type clojurespec ability write reason parallelism concurrency coreasync bio jearvon dharrie software engineer comcast spends day working javascript ruby python free time enjoys toying programming language currently interested clojure clojurescript conference software changing world qcon empowers software development facilitating spread knowledge innovation developer community practitionerdriven conference qcon designed technical team lead architect engineering director project manager influence innovation team recorded oct related sponsored content
259,Lobsters,clojure,Clojure programming,Simulating the Passport Seva Kendra using Clojure,https://medium.com/helpshift-engineering/simulating-the-passport-seva-kendra-using-clojure-fd88c12dde8c,simulating passport seva kendra using clojure,far thought think see problem solution use priority queue solution new token number per stage solution estimated wait time queueing theory,far thoughtsclojure concurrency primitive make simple think problem wrote code like would write highlevel pseudo description problem worked fine think simplification huge benefit dealing concurrent codethe ability write test small bit concurrent code big win simple modify original code devise experiment around itwe really looked look like running let see problem let run system setting small loop display board running much fewer counter actual psk order make display board consumablea normal day passport seva kendrathings look good loop board look predictable problem occurs someone get unlucky one stage spends much time average person let repeat run marking someone unlucky increasing number counter processing earlier stage match reality hello unlucky person look like good dayas see number people ahead time done stage processed stage point time idea queue people must keep staring display board timesi speak briefly three solution initially proposedsolution use priority queuesusing priority queue stage solves problem applicant knowing next however two point think priority queue solves problem within given category across category know next n category person counter b know stp category people served firsta potential drawback may certain set applicant always slow stage model bring average number people served psk since prioritize serving people moved ahead making change use priority queue code trivial go back javautilconcurrent swap linkedblockingqueue favor priorityblockingqueue provide comparator function code also generate timing sample across people repeated run program give u idea whether average processing time affected using priority queue notsolution new token number per stageusing new token number solves problem elegantly probably used logistical difficulty handing new token applicant real world sure process may cause confusion carefully designed system already perfectly good way getting next token number atomic token generator implementing solution straightforward left exercise reader blog post already quite lengthy solution estimated wait timeanother way psk help applicant providing separate selfserve display applicant enters token number get see many people ahead given stage linkedblockingqueue well priorityblockingqueue provide toarray function return element queue orderas tracking time person take stage also predict estimated amount time person would wait could entire blogpost look queueing theory case interested leave exercise reader
260,Lobsters,clojure,Clojure programming,Running Luminus on Dokku,https://yogthos.net/posts/2019-01-19-LuminusOnDokku.html,running luminus dokku,dokku set server dokkupostgres plugin create new luminus application deploy application dokku troubleshooting database dbeaver set http using let encrypt dokkuletsencrypt official documentation,luminus provides great way get running clojure web application however building app half work got app working next step host somewhere user access itcloud platform aws popular choice deploying large scale solution hand vps service like digital ocean linode provide economical alternative small scale application downside running vps managing labor intensive dokku come private paas modelled heroku use provision vpslet take look involved provisioning digital ocean droplet dokku deploying luminus web app itset serverlet create droplet ubuntu lts time writing ssh need add new apt repository install dokku add universe repository sudo addaptrepository universeadd key wget nv http packagecloudiodokkudokkugpgkey aptkey add add dokku repo echo deb http packagecloudiodokkudokkuubuntu bionic main etcaptsourceslistddokkulistonce repository added need update dependency install dokkuupdate dependency sudo aptget update sudo aptget upgradeinstall dokku aptget install dokkuonce dokku installed create application postgres database instancecreate app dokku apps create myappinstall dokkupostgres plugin sudo dokku plugin install http githubcomdokkudokkupostgresgitcreate db dokku postgres create mydblink db app dokku postgres link mydb myappwe ready deploy appcreate new luminus applicationlet create luminus application local machinelein new luminus myapp postgrescd myapplet update app run migration startup updating myappcorestartapp function run migration defn startapp args doseq component args parseopts clioptions mountstartwithargs started loginfo component started run migration migrationsmigrate migrate selectkeys env databaseurl addshutdownhook runtimegetruntime thread stopapp next need update envprodresourceslogbackxml use stdout log xml version encoding configuration statuslistener class chqoslogbackcorestatusnopstatuslistener appender name stdout class chqoslogbackcoreconsoleappender encoders assigned type chqoslogbackclassicencoderpatternlayoutencoder default encoder charset charset pattern date thread logger msg n pattern encoder appender logger name orgapachehttp level warn logger name orgxnionio level warn logger name comzaxxerhikari level warn root level info appenderref ref stdout root configuration deploy application dokkuwe ready deploy app first need create git repo add app content itgit initgit add gitignore procfile projectclj readmemd src env test resource git commit initial commit note want check dockerfile generated template dokku use preferred strategy creating containernext add remote dokku repository server push project remote dokku automatically build project pushed deploy application build successfulgit remote add dokku dokku server name myappgit push dokku masterthe app pushed server compiled run everything went well see output look something like following building leiningen running lein uberjar compiling sampleapp info main logging initialized orgeclipsejettyutillogstderrlog created created tmpbuildtargetmyappjar waiting second default container check successful running postdeploy configuring myapp server name using builtin template creating http nginxconf running nginxprereload reloading nginx setting config var dokkuapprestore application deployed http myapp server name http server name myapp master master check status application log running dokku log myapp command server output look something like followingpicked javatooloptions xx main info myappenv myapp started successfully main info luminushttpserver starting http server port main info orgxnio xnio version main info orgprojectoddwunderbosswebweb registered web context main info myappcore myappconfigenv started main info myappcore myappdbcore db started main info myappcore myapphandlerinitapp started main info myappcore myapphandlerapp started main info myappcore myappcorehttpserver started main info myappcore myappcorereplserver started main info myappcore running migration main info migratuscore starting migration main info migratusdatabase creating migration table schemamigrations main info migratuscore running main info migratuscore main info migratuscore ending migration able check application browser navigating http server name troubleshooting databasethe startup log application indicate able connect database run migration successfully let confirm case connecting psql shell database container serverdokku postgres connect mydb mydb list relation schema name type owner public schemamigrations table postgres public user table postgres row see database contains schemamigrations table user table created app migration ransometimes might useful connect advanced client dbeaver done exposing database server using following commandsudo dokku postgres expose mydb next enter container application get database connection detailsdokku enter myapp web echo databaseurl databaseurl environment variable container contain connection string look followspostgres postgres password map port local machine using ssh connect database running local machine using connection setting abovessh l server name set http using let encryptas last step set http application using dokkuletsencrypt plugin set app run root domain serveradd root domain app dokku domain add myapp server name remove subdomain app dokku domain remove myapp myapp server name install plugin sudo dokku plugin install http githubcomdokkudokkuletsencryptgitset email renewal warning dokku config set norestart myapp dokkuletsencryptemail email add http app sudo dokku letsencrypt myappset autorenew certificate dokku letsencrypt autorenewthat application deployed droplet hooked database using let encrypt ssltls certificatesany update application simply involve committing change local git repo pushing server initial deployi recommend taking look official documentation dokku site information dokku think provides excellent solution running vps evaluating different option deploying clojure apps give dokku look
261,Lobsters,clojure,Clojure programming,Object Detection with Clojure MXNet,http://gigasquidsoftware.com/blog/2019/01/19/object-detection-with-clojure-mxnet/,object detection clojure mxnet,kedar bellare nicolas modrzyk origami creating detector single shot multiple box object detector ssd script load image run detector try running example object detection example mxnet repo readme,object detection landed mxnet thanks work contributor kedar bellare nicolas modrzyk kedar ported infer package clojure making inference prediction much easier user nicolas integrated origami opencv library example make visualization happen walk main step use infer object detection include creating detector model loading image running inference creating detector create detector need define couple thing big image model going using object detection code going giving color image size x defn createdetector let descriptor name data shape layout layoutnchw dtype factory infermodelfactory modelpathprefix descriptor infercreateobjectdetector factory shape going batch size case single image channel image rgb image image height width layout specifies shape given term nchw batch size channel size height width dtype image data type standard modelpathprefix point place trained model using object detection life model going use single shot multiple box object detector ssd download model using script load image run detector model detector load image run object detection load image use loadimage load image path inferloadimagefromfile inputimage run detection using inferdetectobjects give top five prediction default inferdetectobjects detector image give output something like class person prob xmin ymin xmax ymax class dog prob xmin ymin xmax ymax use draw bounding box image try running example one best way explore using object detection example mxnet repo coming officially release get early peek building project running example nightly snapshot cloning mxnet repo changing directory contribclojurepackage next edit projectclj look like defproject orgapachemxnetcontribclojureclojuremxnet description clojure package mxnet url http githubcomapacheincubatormxnet license name apache license url http dependency orgclojureclojure use nightly snapshot insertsnapshotversion insertsnapshotversion insertsnapshotversion ci internal orgclojuretoolslogging exclusion pedantic skip plugins leincodox exclusion orgclojureclojure leincloverage exclusion orgclojureclojure leincljfmt codox namespaces orgapacheclojuremxnet gen aot devgenerator repository staging url http repositoryapacheorgcontentrepositoriesstaging snapshot true update always snapshot url http repositoryapacheorgcontentrepositoriessnapshots snapshot true update always running linux change next go ahead lein test make sure everything build ok run trouble please refer readme missing dependency lein install install clojuremxnet jar local maven ready cd examplesinferobjectdetection try refer readme detail run problem getting started feel free reach clojurian mxnet slack room open issue mxnet project friendly group happy help thanks community contribution make possible great seeing new thing coming life happy object detecting
262,Lobsters,clojure,Clojure programming,What could a visual Clojure/LISP editor be like?,https://www.youtube.com/watch?v=edQyRJyVsUg,could visual clojurelisp editor like,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature could clojurelisp editor like rakhim davletkaliyev youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature could clojurelisp editor like rakhim davletkaliyev youtube
263,Lobsters,clojure,Clojure programming,Things I Wish I Knew About Core Async in Clojure,http://danboykis.com/posts/things-i-wish-i-knew-about-core-async/,thing wish knew core async clojure,rationale walkthrough coreasync edge one threadpool underneath go macro deadlock thread pool underpins always async logger blockingqueue parking semantics edge two many put backpressure edge three prefer pipeline abstraction built top library pipeline function edge four use repl time offer poll edge five function boundary edge six code nonblocking must use blocking io omits error,working clojure fair amount production project found writing lot task required asyncronous call knew callback answer turned core async manage work channel first read rationale walkthrough core async thought set start writing coreasyncbased code wrong coreasync library lot dangerous edge case understand edge lot trouble official documentation cover case going lay talk avoid edge one threadpool underneath go macro wrong code require clojurecoreasync import javautilconcurrentarrayblockingqueue def queue arrayblockingqueue dotimes agoloop put queue recur agoloop println take queue recur final goloop never print deadlock thread pool underpins execution go macro set eight thread always may change since go routine multiplexed eightthread pool need careful inside go block executing threadblocking operation like readingwritting file inputstreamoutputstream blocking network call kind mutex potentially deadlock pool never put anything block thread inside go block exception would make logging meaningfully block thread pool even prefer use async logger mean go block computation nonblocking io reason code deadlock producer goloops use available thread mean consumer goloop run unlike blockingqueue coreasync channel designed work go block block thread instead parking semantics edge two many put consider following code require clojurecoreasync def ch achan nil userch dotimes aput ch nil aput ch happens last put people bitten seeing number enough guess dreaded assertionerror assertionerror assert failed pending put allowed single channel consider using windowed buffer size put implmaxqueuesize clojurecoreasyncimplchannelsmanytomanychannel error mean almost certainly handling backpressure correctly code producing event faster consumer process instead pausing producer let consumer catch producer keep producing cause channel blow hack solution get around problem dropping buffer chance reaching solve maxqueuesize problem code restructured example let say ingesting event stream url need query continuously put result channel service need queried million time row gather result set code could write initial version require clojurecoreasync def url def topicchan achan goloop gather ifsome event topicchan recur conj gather dosomethingwithevent event gather dotimes httpget url aput topicchan code bad almost guranteed overproduce event blow topicchan additionally also run socket descriptor unbounded httpget call blocking io situation would possible since every httpget call would block thread receives response notice code hundred total call service hit constraint system surprised something worked testsrepl blew production testing keep buffer small give chance catch type error instead larger buffer smaller number call mask problem better version require clojurecoreasync def url def conccalls def topicchan achan goloop gather ifsome event topicchan recur conj gather dosomethingwithevent event gather dotimes conccalls goloop call whennot call let ch achan httpget url aput ch aclose ch whensome event ch topicchan event recur inc call better version bounded number namely conccalls concurrent call happening furthermore go routine wait get response ch channel via blocking take performing parking put topicchan inside go block operation actually block thread stop execution go block operation finished go block wait result go block running mean goloop taking event topicchan fall behind producer respect backpressure let consumer catch producer run long topicchan closed edge three prefer pipeline abstraction built top async code work even better pipeline reduce code us library wrote influenced pipeline function coreasync coreasync code using higher abstraction instead go block nothing wrong go block lot error prone even simple example code lot fewer moving part need right order system query event url require clojurecoreasync affableasynccore aff def url def conccalls def topicchan achan affupipelineasync n conccalls topicchan atochan range af fn ch httpget url aput ch aclose ch areduce conj topicchan edge four use repl time trying figure something repl inevitable outcome using coreasync deadlocking repl thread using interact channel oneoffs like lot safer use offer poll function still possible break repl reason waiting channel deliver event never arrive edge five function boundary happens bellow code def c achan achan achan doseq c c aput c foo ago mapv c go macro transforms clojure code inside run dispatcher pool talked earlier clojure code inside go expanded converted put take go transform code across function creation boundary remain undefined object clojurecoreasyncimplchannelsmanytomanychannel clojurecoreasyncimplchannelsmanytomanychannel exception thread javalangassertionerror assert failed used go block nil clojurecoreasync ltbanginvokestatic clojurecoreasync ltbanginvoke typically issue manifest like helper function even though outer call wrapped go transformation apply function boundary code fails assertionerror edge six code nonblocking must use blocking io practical application nio everything often option many inherently synchronous apis directly used coreasync typical example jdbc code something make code asynchronous via thread pool def pool executorsnewfixedthreadpool defn blockingsynchronoussqlcall id defn asyncwrapper pool f args let ch achan submit pool fn try aput ch apply f args catch exception e aput ch exinfo error args args e finally aclose ch ch code obviously omits error handling called go block interop async code ago asyncwrapper pool blockingsynchronoussqlcall id
264,Lobsters,clojure,Clojure programming,CLClojure: An Experiment Port of Clojure to Common Lisp,https://github.com/joinr/clclojure,clclojure experiment port clojure common lisp,clclojure experiment port clojure common lisp background layout commonutils sequence pvector cowmap pmap wip protocol reader eval literal keywordfunc lexical bootstrap symbol wip goal bridge gap cool stuff clojure common lisp implement really useful bit clojure portable common lisp provide standalone library extend generic sequence abstraction idiom common lisp builtin mutable structure possibly wrap common lisp stm implementation cheat use something like lparallel delegate clojurecoreasync like clojurescript bootstrap fully functional clojure onto common lisp learn status began work porting clojure persistent data structure java year ago revisited revisiting revisiting reconciled problem data literal clojure evaluation model cl model quasiquoting data literal refactoring sequence hack loop recur currently withrecur tail call detection enforcement symbol interning mucking metaprogramming variadic protocol generic symbol equality seql lexical literal multimethods wip loose protocol implementation revisiting lexical literal downside fix revisiting quasiquoting nested quasiquoting mostly work generalized usage sequence lib destructuring revisited looprecur variadic version exinfo tco detecting false positive rudimentary parity try cond hurdle v lexical scope v top level persistent structure protocol deftype multimethods metadata namespaces reader cl macro use place clojure literal deref clojure comma whitespace clojure denote vector denote map denote set denotes metadata reader c v c char readingprinting booleans field access nsnamefn somemethod object qualifiedkey aget obj field keyword access destructuring seq library string regexes compilation analysis usage license,clclojure experiment port clojure common lisp background porting clojure seems thing day clojurescript compiler came people really good blueprint hosting clojure language fact clojurescript compiler defined largely term protocol make bit closer clojure clojure goal result able bootstrap language javascript minimum primitive language defined clojure voila currently clojure port targetting scheme c cviascheme python etc found common lisp particularly slick environment cool tool fairly active community think would interesting port idea clojure common lisp ultimately implementing compliant clojure common lisp layout current wip broken several common lisp file tested sbcl look dependency clclojureasd general layout organization follows subject change commonutils contains plethora utility function convenient clojure analogue direct port useful porting clojure source primary feature include multiarity lambda via lambda multiarity function via defun also provides withrecur form allows similar idiom clojure looprecur typically pulled package general utility limited sequence functionality overlap sequenceslisp may replaced future sequence provides implementation clojure lazy sequence abstraction implemented clos porting seq protocol provides subset clojure core sequence library cl used bootstrapping metaprogramming intent full port minimally useful subset integrates seq abstraction clos sequence type pvector port java implementation clojure persistent vector based hash array mapped try hamts serf standalone datastructure local function also defines subvec slice persistent vector cowmap simple persistent map implemented copyonwrite operation standard hash table minimal implementation support bootstrapping intended performance production use pmap wip port java implementation clojure persistent hashmap incomplete protocol defines form defprotocol deftype common lisp protocol implemented bundle generic function args stored clos struct protocol registered define satisfies predicate protocol ensure valid implementation reify deftype extendtype extendprotocol protocol definition expect vector args rewrite pending extend sequence allow simple clbased protocol definition reader provides consolidated place reader macro support primary purpose enable vector map set bootstrapping original experiment also supported character intentionally hijack readtable need ported namedreadtables excluded entirely bootstrapping clojuretoolsreader done eval due custom evaluation rule clojure data literal simple reader macro enough get literal support package defines generic function customeval api installinguninstalling custom evaluation support sbcl implementation swap function definition sbimpl simpleevalinlexenv add final condition nonlist eval rule customeval supported generic function invoked allows userdefined extension evaluation semantics minimal way retains lowlevel support eg compiler literal consolidated place extend custom evaluation rule vector map literal keywordfunc initial hack implementing keywordsasfunctions support cl currently work lexical form global modification expose macro withkeyfn scan body keywords function position build table keyword function fbind commonly used feature keyaccess type used lexical package lexical implement lexical environment ala let called unifiedlet unify binding lexical environment body foundational method implementing clojurestyle let bootstrap implement core set clojure special form brings along protocol definition cljscore eventually entire cljscore library pulled evaluated hopefully provide sufficiently robust environment bootstrap rest clojure via toolsreader toolsanalyzer leveraging extant cl implementation earlier bootstrapping process make sense symbol wip nascent thought piece implement clojurespecific var namespaces clojure qualified symbol keywords tad different require thought towards integration cl goal bridge gap cool stuff clojure common lisp implement really useful bit clojure portable common lisp provide standalone library includes lazy sequence generic sequence abstraction fundamental persistent hasharraymappedtrie data structure clojure persistent vector persistent map persistent set extend generic sequence abstraction idiom common lisp builtin mutable structure common lisp already sequence library think clojure general trivially extended new type common lisp irrational locking sequence hurdle hyperspec never updated lifetime generic function current way bridge stuff protocol really nice clojure arbitrary dispatch multimethods data literal also highly useful think clojure nailed choice literal providing reader macro guy would nice possibly wrap common lisp stm implementation cheat use something like lparallel delegate clojurecoreasync like clojurescript bootstrap fully functional clojure onto common lisp learn far project continues great way learn cl clojure include implementation hurdle support plt stuff longstanding wart decision made year ago workarounds nothing insurmountable far pretty cool status began work porting clojure persistent data structure java year ago simultaneously learning common lisp necessity java got working persistent vector implementation compatible clojure literal year ago started working persistent hash map around november built temporary implementation clojurestyle protocol common lisp dec pulled bit actual asdf system pushed everything github august implemented baby clojure evaluator bridge gap clojure common lisp host unsure going work long term eh real trivial moment working library code spare time still need port persistent map revisited implemented rudimentary stuff vector reader macro fleshed work fine repl failed return vector instead returning form create vector trivial important oversight still hijacking global readtable pulled namedreadtables help integrated working variadic function explored funcallable class refined protocol deftype cleaned build process work done revisiting got reader macro matured vector literal produced properly got protocol definition implementation respecting vector albeit hacky way still allow list working deftype getting bootstrap cljs core protocol function compile working leveraging namedreadtables better delineation clojure source include filelevel somewhat racket like also intend leverage namedreadtable get casesenstive reader via modern enable cl interop trivially macro allows cl reader inside body vice versa inline clojure make sense refining approach reading lot looking source inspiration including early protoclojure java compiler hickey cl basic def fn work protocol work metadata work mostly deftype got let albeit without destructuring still useful bootstrapping initial implementation reify working wrapped deftype version compatible cl deftype revisiting reconciled problem data literal clojure evaluation model cl model issue tricky even using clojure year something completely missed folk laud cl awesome reader macro talking allow implement language etc banking comment went clojure turn want define language new data literal literal evaluation semantics reader macro help help point think racket probably better support based research proof read vector clojure syntaxquoted one actually get literal vector data structure list vector actual vector eval eval chased tail twice finally realized clojure eval x eval x eval read vector eval actually apply evaluation semantics build resulting vector cl eval pass vector pose problem cl since yes trivially extend reader handle vector get evaluation semantics line since cl provides mechanism unlike say reader macro course define whole infrastructure including eval etc interested minimally bootstrapping functional enough clojure get language tooling ported hacking running lisp implementation eval attractive tried reader macro return vector args instead building literal vector directly ala eval apply vector args worked mostly except thing like macro instead dealing vector say binding dealing syntaxquoted list vector though hacking macro recognize coerce vector sexpr actual vector like squeezing air balloon rather simply extending eval sbimpl simpleevalinlexenv understand data literal expressed say generic function evaluation semantics form allows one get par using clojure literal eg macro minor surgery actually portable since goal bootstrap something read source clojuretoolreader clojuretoolsanalyzer etc emit pure commonlisp implementation think onetime deal currently implemented evallisp provides clclojureeval api allowing custom evaluation semantics defined generic function customeval also implemented companion package clclojureliterals enables custom evaluation extends semantics boostrapped persistent structure quasiquoting data literal evaluation semantics consistent clojure vector map trivially set arrive backtick implementation sbcl backqlisp currently befuddling due lack familiarity based existing implementation readerslisp get unquote working fine userdefined literal like vector map unquotesplicing throwing trying hack around reader level eg coerce normal quasiquoted sexpr eval rather hacking backqlisp clclojureeval lack familiarity stunting progress bit dig innards eval backquote implementation jank stuff together work life jim know literally got done hacking quasiquote stuff readerlisp clclojurereader quasify make thing work idea got work since previous intuition failed sbcl us comma struct indicate splicing operand inside quasiquote weird interplay macroexpand kludged stuff together trial error build arglist shove vector map constructor hack wiring generic method sbcl default eval implementation admits defining custom evaluation rule new data literal like vector map surprisingly sbcl well documentedwritten source learned bit plumbing although compiler stuff intermediate language still magic thankfully appears hacking simpleevalinlexenv function enough wire compiler guessing compiler form leverage downstream sophisticated enough yet see weave together cl native reader analyzer place normal eval semantics would take hold unless desire maintain bootstrapping methodology allow clojure literal like persistent vector map set eval semantics interop something dunno refactoring lot learning debris throughout code base critical path bootstrapping longer need pruned moved elsewhere consistent clear path required code attentuated sequence hack decided ease metaprogramming bootstrap clean lame sequence implementation year ago write proper one went well even got point implemented idiomatic lazy sequence integrated clos started getting reduce working ran snag wanted use cl builtin reduce sequence type since already efficient clojure notion simple protocol internalreduce basically say hey reduce else fall back likely slower seqbased firstrest reduction desirable plus nice interop point got everything working one thing wrong clojure implement shortcircuiting variant reduce via invoking reduced theresult creates little wrapped type quickly checked reduction loop see reduced item signal stop reducing reduced item unpacked via deref returned result problem cl folk think decade ago bootstrap functionality extant concrete almost gave remembered vaunted warning java land idiot using exception control flow built idea could throw error detected reduced value handle reduction gracefully outside builtin cl reduce ugly hack although using elegant tool signal handlercase emerged leverage excellent lowlevel construct block define escapable context returnfrom inside block wrap call reduce lambda upon detecting reduced item invokes returnfrom dereferenced value reduced item another fun time also ran problem clos multiple dispatch little unsavory learn callnextmethod realized clos method preference hierarchy default clojure kind problem create interesting lisp oop managed crash sbcl due several time trying leverage sbcl extensible sequence unlike lisp inherit sequence base class wanted lazyseq class ended failing since going generic method route wrote specializer sequence overode specializer lazyseq since lazyseq inherited sequence despite getting worked still managed crash sbcl several time reverted lazyseq extend sequence loop recur currently withrecur basis looprecur combined lambda defun allow clojure style recur form function body trivial extension loop recur checking tail position need ensure correctness might code walk took many try dissecting dolist simple loop form well trying failing implement elegant version macrolet another used simple label form recur label blew think tco happens compiled cl nice lower level flow control primitive like block tagbody btw code work nontail recur even thing idk example withrecur x x progn recur x format back recur x think based semantics go since effectively goto jump tag tagbody however currently working tailcall detection enforce clojure semantics new version like clojure loop x x recur inc x x sequence binding denoting init init withrecur x x recur x x started optimizing see could avoid emitting withrecur function invoke codewalk look recur form realized needed detect tail started going rabbit hole curious see simple way walk code instead denoting grammar tail call like something empirical mechanically demonstrate evaluation independent call say build dag representing call graph demonstrating recur ever occurs leaf cromag approach define special case form check way tricky tail call detection enforcement defined rule currently cl clclojure work top little change follow tail call semantics special form commonutils function inform withrecur viability code compiletime throw error invalid tail call detected detectrecur simple naive code walker walk expression looking recur tailchildren defines currently static semantics different special form detailing whether child position tail nontail return list pair tail nontail childexpr categorizetails walk expression accumulating list callsite structs encode kind call made recur illegalrecur expr use reporting error summarytails reduces output categorizetails pair tnil illegals illegals list illegal callsits tnil report whether instance recur call detected withrecur leverage summarytails determine error input compile time signal illegal tail call error instance recur call expression withrecur optimizes semanticallyequivalent let invoked regularly added codegen eg lambda recur target recur never show otherwise form local function recur emitted thing perform expected proper tail call enforced symbol interning mucking metaprogramming discovered use case match symbol dissecting list code walking function work outside package originally defined subsequently macro depending said function withrecur foremost example failed behave expected turn cl intern apparently unqualified symbol package say implement function examine first element list dispatch depending symbol detected defun detectfoobar expr case first expr foo foo bar bar nil function work great long inside package defined case test clause us commonlisp eql notion symbol equality applies args sideeffect introduced symbol foo bar currentpackage foo currentpackage bar rather freefloating unqualified symbol repl even print without indication qualified standard behavior tricky part export detectfoobar try use otherpackage cluser originalpackage detectfoobar foo nil get joy despite input expression obviously symbol foo compound matter original function dutifully tested repl work fine originalpackage reason foo originalpackage defined function macroexpanded case implement actually originalpackage foo symbol trying match coming list read evaluated cluser actually cluser foo cluser symbolpackage foo package commonlispuser condition realize symbol package thus eql cluser eql foo originalpackage foo nil clojure problem due semantics unqualified symbol across namespaces clojure user def foo foo userfoo user n blah nil blah def foo foo blahfoo blah foo userfoo true cl behavior bit surprise particularly seemingly janks defining utility function work symbol dissect list eg metaprogramming implementing testing another package withrecur auxillary function first notable time popped fact fail silently case case engenders additional caution absent better solution unaware current solution define new equality test based unqualified symbol symbolname equality commonutils symbol determines input strictly symbol keyword symbol determines input symbol whether symbolname string seql wrap typical commonlisp eql custom path input symbol customcase allows defining commonlisp case macro custom userdefined test scase implement case using seql vi customcase dropin replacement existing us case relied unintentionally interned symbol case clause place extant code withrecur friend ported use scase working implementation clojurestyle looprecur variadic protocol appear functioning variadic protocol well marker protocol protocol method work via simple dispatch mechanism via commonutils lambda generic function somewhat opaque args taking obj rest args dispatch mechansim conforms protocol definition allowing multiple dispatch per clojure definition behind scene simple lambda created implementation defmethod time actually carry implementation invoked inside body defmethod specializer simplied applid obj args allowing lambda dispatch mechanism take good bootstrapping lack integration slime eg arg detection ala cider desirable longterm dev purpose meaningless though since bootstrapping pretty simply plan hack custom slime mode enable documenting multiple arity function boostrap open remaining door basic boostrap leverage cljscore get basic library lifted little effort given current state reader seqs etc also possible work backwards protocol implementation get u even simpler bootstrapping environment time continue wrapping existing cl functionality though generic symbol equality seql one nagging feature probably need addressed necessity using commonutils seql symbol equality testing due cl somewhat baroque equality impediment cause toward simple metaprogramming prolific even hash table trivially extended custom equality test box although vast hurdle lexical literal everything worked fine evaluating literal null lexical environment based customeval semantics clclojureeval customeval related wiring sbcl eval carry expression lexically bound form also data literal result kept returning wierd quoted form value rather actual evaluated form ended long tricky process tease underlying cause diagnose quickish fix turn cl pretty canny handle lexical scope satisfy compiler like pas friendly common form sbcl expects unfortunately literal show various place lexical scope defined righthand side binding let emitted clclojurebase let end problem also end problem literal result piece body expression extend lexical scope could theoretically fix somewhat high level codewalker recognizes clj form requisite transforms macroexpansion time cool necessarily want helpful user feedback eg macroexpanding form expecting see clojure literal thankfully access evaluator continue slightly tweak suit need namely lexical form defined eg commonlisp let commonlisp let add mechanical transform expression unlike manual macro walk expression expands literal literalconstructor form readily recognized sbcl evaluation machinery compiler technique define another generic function user express lexical expression clclojureeval letexpr semantics would def let x x cl compiled let x persistentvector persistentvector x importantly want muck literal macroexpansion time eg debugging visualizing code want intercept prior going evaluation sound much like possible compiler macro evalwhen context may trivially refactored one absent define function clclojureeval customevalbindings act intercessor take expression walk lexical environment pas along case ever get use conforms function signature sbcl sbimpl simpleeval detect various type expression could define literal lexical scope walk expression based form semantics recursively replacing literal appropriate constructor based canonically evaluable binding iff value support clclojureeval letexpr get u way happy still exists problem fn form since actually build lambda funny enough cl like emit lambda x defmacro expression neigh quasiquote get lambda x effectively function lambda x since emitting form end opaque look customevalbindings process macroexpansion time eg fn macro macroexpanding body lambda similarly walking form customevalbindings emit ultimately sharpquoted lambda new body work well small tradeoff fully macroexpanding fn macro expand verbose form without literal multimethods wip still need implement multimethods simple variation dispatch stuff show reader analyzer next loose protocol implementation right defprotocol expects implementation function arity think clojure allows partial implementation generates stub via abstract method need implement relaxation eg ifn get boostrapping advanced revisiting lexical literal original implementation fixed one thing break another attempt comport sbcl compiler prebaked notion read ignorance evaluation rule nonlist thing went route defining custom code walker intercept call let friend interception would walk code invoke generic function coerce custom literal like vector evalfriendly form read constructor args could avoid hacking compiler worked great fixed major problem lexical literal effectively uneval quoted directly eval time get custom literal working clojure downside broke expectation would using actual persistent vector syntactic object macro namely defprotocol fn defn primarily manifested ugly regression extendprotocol cl would complain trying apply generic function pvector namespace something nonpvector short depending order eval macroexpansion let binding anywhere stand good chance coercing actual vector persistentvector vector eval sake thus breaking expectation literal preserved eval code fix get working went couple path including looking hacking compiler realized tag transformed literal identify invert process inside macro end pingponging custom eval binding walker munging data literal evalable form macro prior expansion traversing args coercing form back actual vector map set etc design wise ugly performance wise eventual solution involves using code walker sbcl couple generic function convention mark literal identity function literal wrap aforementioned constructor define function recoverliterals walk form detect invocation literal replacing result calling symbolic subform evals arg literal give u back custom literal recoverliterals serf auxillary function used macrodefiningmacro defmacroliteralwalker quietly bind args macro definition lexical binding args input bound recoverliterals result basically ensures using defmacroliteralwalker always access data literal simultaneously literal also work seamlessly eval custom evaluation semantics including lexical binding far test example passing revisiting quasiquoting method hacked together quasiquoting work intended lexical value quoted literal naive variant boneheaded hindsight tried eval stuff readtime build actual nonsexp literal datastructure turn clojure clojure depart cl quasiquotation via syntaxquote quoted literal emits actual sexpr construction literal similar solution working around lexically scoped literal challenge sbcl reader macro default emitting quasiquote form leverage builtin stuff get quoted form sexpr vector constructor expanded original quasiquoted literal solution hack macro rebind something smart enough detect actually quoting literal emit expanded quasiquote result without quasiquote form preceding otherwise expand quoted result initial testing persistent vector nested quasiquoting mostly work signficant overhaul old wrong qq infrastructure eliminated readtime eval stuff emit sexprs consistent clojure implementation slightly different form though cleaner quasiquotation model extensible well generalized usage sequence lib ensured sequence lib portable enough used sicne show quite bit clojurecore bootstrapping eg macrology need define additional core function seq friendly coercing destructuring destructuring pretty fundamental show lot place common form like loop let fn defmacro friend leverage able fairly straightforwardly port clojurecore revisited looprecur variadic version porting core library function exposed bug extant labelsmacrolet based version function implementation experimenting switched earlier loopfocused withrecur macro testing experimentation switch inlining arity body multiplearity function definition named function work recur work loop without destructuring implemented loop function work fine lazyseq creating infinite loop later recognizing function symbol self recur exinfo en route destructure implemented exception handling via exinfo friend trycatchfinally macro away tco detecting false positive need revisit tail cail detection code compiles withrecur invocation since seem mistaking simple withlet iflet form nontail call reason got warning rendering reality want error signal prior behavior rudimentary parity approaching basic functionality copypaste source clojurecore work without issue turn great way explore range language feature ground implement needed might possible demo advent code solution clojure common lisp try defined trycatchfinally semantics clojurecoretry commonutils try clclojurebase export trivial implement using handlercase restartcase realized sbimpl commacharmacro handle splicing form add another reader macro binding using cond implemented clojure cleaner version cond found subtle error regarding definition use con since shadow commonlisp con ended infinite pingpong protocol extension conj con type fix ensure use commonlisp con necessary nonseq con cell method hurdle couple big hurdle v rely macro like def unify symbol function namespaces leveraging cl environment mostly implemented via unifiedlet lexicallisp used clclojurebase defn elsewhere thing missing arbitrary support keyword access based function application working prototype valid outside clojure macro better solution address compiler pas analyzer longer route would writing custom eval compiler etc look necessary moment lexical scope v top level common lisp multiple namespaces foremost function symbol already toplevel null lexical environment symbol function namespaces unified using setf symbolfunction make identical symbol lexical environment work way symbolfunction symbolvalue work nonlexical symbol initial hack unify namespaces traversing var let binding unifying prior continued binding falsepositive success since symbol modification actually pointing nonlexical scoped symbol stuff prior repl interaction fix use combination let label unify symbolvalue symbolfunction namespaces lexical var defined macro unifiedlet u parse binding detecting symbol point literal keyword ensure keyaccess object compiled macroexpansion creates plumbing keyword access already exist create function definition var point keywords function binding invoke funcallable keyword accessor directly need apply implicit body fn form well persistent structure get defprotocol deftype etc running already defined cljs core bootstrapping using original port persistent vector jvm clojure also creating dumb wrapper top need add meta field struct also atomic lock point unless cljs provides protocol already implemented generic function explore alternative implementation generic function speedy enough doubtful profiled anything protocol definition need namespacepackage qualified look like already package level need better error messaging missing protocol todo getprotocol signal namespace qualified symbol needed currently potential collision since protocol registry hashtable assoc protocol name package name defined approximate qualified symbol using dot syntax even though cl resolve symbol clojure namespace directly get variadic protocol implementation verified deftype shadow cl deftype current implementation follows defprotcol appears work nonvaridiac protocol impls look walking method impl body eliminated unnecesary slot binding currently generally bind nonshadowed slot multimethods initial idea multiple dispatch following clojure implementation metadata symbol collection anything support imeta persistent map metadata clojure used communicate lot information including type hinting source code documentation etc current expectation leverage property list symbol unify generic function behind protocol namespaces cl package initial hack would leverage package anlogue n longer term solution implement n system via object rather leverage cl possible currently implementation def export default looking introspection possibilites easily tagging meta arglists custom function object experimental looking good maintain parallel collection namespaces based def derived form ought able hook register stuff allows reflection introspection care use clojure need translate require refer import clojure import cl reader cl macro use place clojure need either cook common lisp reader build separate clojure reader perform appropriate replacement look like simple tweak reader macro suffice flip symbol appropriate todo quasitquoting clojure let inside macro splicing need revisit quotedchildren ex incorrect appears working via clclojurereaders quasify compatible switch reader macro around literal deref clojure comma whitespace clojure similar flip readtable denote vector already reader macro readerlisp vector read correctly obey clojure eval semantics incorrect read going x currently read throw since x defined todo revisite quotedchildren vector reader fn bracketreader reading quoted vec need eval args persistentvector ctor quasiquoting work except splicing denote map already reader macro readerslisp janky useful bootstrapping implementation cowmaplisp copyonwrite wrapper around cl hashtable enough bootstrap clojurecore actually defines persistent map implementation u always opt optimized implementation make sense go builtin similar problem quasiquoting denote set easy enough add dispatch readerlisp trivial implementation based cowmap pending denotes metadata reader trivial implement reader macro need get metadata working generally withmeta currently mutates symbol plists ideally need corresponding altervarroot need implement metadata slot clojure structure data literal persistent list c v c char added initial support clj cl need define printable representation char well current holdup defining printmethod standardchar claim class exist looking printescape friend see hack may need printer outside provided repl defined reader macro coerces c c maybe le useful bootstrapping readingprinting booleans similar issue character paip good chapter similar issue scheme field access wrap call clos slot nsnamefn detect symbol name coerce qualified internal symbol nsname fn somemethod object hello valid function name reader macro need incorporate form ala obj somemethod qualifiedkey used delimiter package symbol cl need parse symbol name blah blah reader eliminates redundant colon simple modify reader macro aget obj field keep work clj keyword access keywords applicable clojure mean show function position form jive cl directly possible option reader macro list detect presence keyword function call positition quoted replace keyword funcallable thing printmethod looking like keyword try hack eval dubious custom read eval look like leverage function namespace get around defun gethash defun setf newvalue setf gethash newvalue defparameter ht makehashtable setf ht workaround need reader macro list see keyword function position define function keyword via defun define setf expander provides hashmap access alternately something mutating look like may work inside existing significant progress experimentation clclojurekeyworfuncs however looking like get full access even tricky pseudokeyword class macro suff probably better hacking eval compile destructuring may bit tricky although limited number clojure form given goal read toolsanalyzer toolsreader may get unprettied version original source elides destructuring eg via macroexpansion clj side something simpler digest clclojure bootstrap seq library hard already lazy list lib prototype well generic function basic ops think try use protocol defined clojurescript version much possible rather baking lot seq abstraction host language like clojure simple bootstrapping fine already get cljs core implementation get minimum gain everything string cl string mutable character array cljcljs inherit string create immutable type outlaw setf think string operation ala sequencebased one return copy mutable prevent setf clojure mode providing pure api string regexes leverage clpprce check reader macro compilation analysis currently project everything portable cl let host dirty work compilationanalysis future port clojuretoolsanalyzer maybe use enough ported look using clojuretoolsreader help well usage currently clone repository assuming asdf setup properly able evaluate require clclojure lisp repl compile project dir lisp alternately compile load asd file use quicklisp load repl ql quickload clclojure currently get persistent vector literal defprotocol extendprotocol mess currently limited clojure evaluator clclojurebase package although moving different direction think explot cl better see rudimentary example usage clclojureexample package examplelisp todo shift namedreadtables keep clclojure hijacking session right take user beware bit new building common lisp project packaging likely change learn point anything useful come experiment may see get pushed quicklisp license eclipse public license like clojure
265,Lobsters,clojure,Clojure programming,Clojure at Apple with David Taylor,https://www.therepl.net/episodes/15/,clojure apple david taylor,highlight,david taylor talk adopting clojure apple lesson management balancing engineer leader highlight david taylor like weirdly one goal every day self reflect ask everything clear people working david taylor uh interesting kind place happy opportunity kind leader wish people would developer meaning make thing clear like weirdly one goal every day self reflect ask everything clear people working weird actually big question know every leader said easy understand asking people know better place actually really hard make thing clear know take lot time find making pitch deck writing documentation maybe writing process guideline stuff make clear people instead committing code
266,Lobsters,clojure,Clojure programming,Meander: The answer to map fatigue,http://timothypratley.blogspot.com/2019/01/meander-answer-to-map-fatigue.html,meander answer map fatigue,meander meander,map fatigue may already might know somebody debilitating depression cause otherwise normal programmer roll eye sigh start innocuous enough reach widget entity value pull description need oh grab count inventory entity hmmm argument passed wonder price need soon thing escalate afflicted quickly proceed next stage designing inmemory database writing style guide building framework stoically specing spec final phase manifest fullblown depression incapable writing simplest function programmer sits hand brow muttering nonsensical chant shape data new research found answer well old research really library available deliver library called meander joel falcon holdbrooks pattern matching expression rewriting library let jump right example show library used treat map fatigue scenario assigned task integrating data several widget manufacturer need take data widget multiple source various shape produce normalized version end result normalized manufacturercode widgetcode description data format first manufacturer def skynetwidgets basicinfo producercode cyberdyne widget widgetcode widgettypecode widgetcode widgettypecode widgetcode widgettypecode widgettypes widgettypecode description resistance infiltrator widgettypecode description mimetic polyalloy basicinfo producercode acme widget widgetcode dynamite widgettypecode widgettypes widgettypecode description boom start stock standard hand rolled bit code process data shape want warning proceed caution high risk map fatigue ahead key widget widgettypes basicinfo skynetwidgets let key producercode basicinfo description key widgettypecode description widgettypes widgettypecode description key widgetcode widgettypecode widget let description get description widgettypecode description producercode widgetcode description well one way might implement slightly differently maybe prefer use map instead transducer different destructuring destructuring one subtle barb map fatigue indecision implementation choice awesome solution using meander library require meandermatchalpha msearch skynetwidgets scan basicinfo producercode producercode widget scan widgetcode widgetcode widgettypecode widgettypecode widgettypes scan widgettypecode widgettypecode description description producercode widgetcode description structure clearly see shape data solution logic unusual symbol prefixed logic variable scan expression indicates meander attempt match item sequence logical join occurs automatically widgettypecode appears twice overall expression sibling scan expression need aggregate map widgettypecode description relationship implicit expression magic sauce meander library combining pattern matching logic solving lack choice declarative nature meander expression leaf implementation choice make specify shape data shape desired result hey presto work declarative approach produce compact expression elides transformation code based science joel create library vacuum drew inspiration existing research expression rewriting one main inspiration stratego strategy program transformation technique used effective code manipulation clojure code data technique manipulating code translate well manipulating data expression rewriting general problem definition data rewriting meander well suited become pervasive glue describing data extraction recombination go beyond destructuring pattern matching providing logic solving loved one suffers map fatigue take dose suffer
267,Lobsters,clojure,Clojure programming,A holiday gift woodworking project using Clojure,http://jackrusher.com/journal/holiday-hippo.html,holiday gift woodworking project using clojure,clojure tool library studionand roland milling machine,trying offscreen art craft far favorite piece carved wooden hippopotamus made holiday gift girlfriend process started modeling shape using clojure tool previously built geom library help create lowpoly sculptural form took stl file friend studionand seek help milling hippo oak plank roland milling machine remarkable tool subtractive fabrication needed order pair custom tool head work hardwood happy report performed well catch fire even also machine currently configured drill divided mesh two half milled separately process looked like much slower sorry browser support embedded courtesy stephan thiel order produce relatively fine surface finish two pass required first using bit rough shape one first half hippo emerged around two hour half sanding oiling hour additional filing sanding oiling resulted little lady hippo jack rusher new owner seems quite
268,Lobsters,clojure,Clojure programming,Getting Work Done in Clojure: The Building Blocks,https://medium.com/@daniel.oliver.king/getting-work-done-in-clojure-the-building-blocks-39ad82796926,getting work done clojure building block,control flow clojure avoiding classic mistake local variable vary conditional logic gotcha gotcha gotcha loop iteration,control flow clojure avoiding classic mistakesto get nontrivial work done programming language know use statement loop clojure handle concept different way language want help avoid falling common trapsat point let switch main namespace sample code located local variable vary previously discussed def operator used bind name value clojure def threesquared language syntax used create global variable functionlocal variable javascript global variableconst thenumber function num local variable const answer num return answer however try thing clojure disappointed result def operator bind name value namespace scope use inside function value name set inside function visible function namespace probably want exceedingly rare practiceto create functionlocal binding use let operator javascriptfunction num const answer num return answer clojure defn num let answer num answer notice return value function placed inside parenthesis let block local binding visible inside block try use local binding outside let block defined get error like unable resolve symbol answer context defn num let answer num wrong let block end answer declare many local binding want one depend previouslydeclared binding defn hypotenuse calculates hypotenuse right triangle let asquared bsquared csquared asquared bsquared mathsqrt csquared conditional logici mean programming language without right clojure expression would expect work roughly ternary operator language determines number even defn even num mod num true false notice general format condition entire expression evaluates condition true nothold though gotchas trip coming languagesgotcha truthinessmany language notion truthiness treat certain value true false used logical expression annoyingly language disagree value truthy example python javascript agree falsey number truthy python treat empty list falsey whereas javascript treat truthyclojure take subjectively principled view matter false nil falsey anything else truthy cause unexpected behavior used relying quirk language numberofusers println user println user example would always print user even numberofusers correct way would explicitly check numberofusers nonzero numberofusers println user println user gotcha multiple thing branchone limitation clojure expression put one expression ifbranch elsebranch usually problem rare occasion want able multiple thing one branchessuppose wanted able print different message elsebranch naively might try something like wrong numberofusers println user println user println probably go find unfortunately result error expression expecting argument condition ifbranch elsebranchto remedy use operator combine multiple expression one correct numberofusers println user println user println probably go find pretty rare practice still useful aware ofgotcha branchesin many language something like need branch logic javascriptfunction isteenager age age return false else age return false else return true clojure trying thing lead many level nesting defn isteenager age age false age false true work easy read clojure provides convenient operator called cond allows u express number logical branch without going overboard nesting defn isteenager age cond age false age false else true using cond completely equivalent nested expression convenient nonethelessloops iterationnow real meat clojure diverges languagessuppose list user want get id user older would likely represent list vector map def user id age firstname daniel lastname king id age firstname angel lastname herrera id age firstname jane lastname smith id age firstname ruth lastname langley define function geteligibleuserids would ideally return vector pas usersin language would probably something like create empty list hold resultsiterate list user loop something similarif user age least push user id result listonce loop completes return result listsomething like javascriptfunction geteligibleuserids user const result const user user userage resultspush userid return result clojure operator called doseq short dosequence roughly thing forin forof loop language side note clojure also operator something else get started could try printing id user far good next step try emulate javascript solution using combination let doseq conj spoiler alert approach look reasonable wrong warning wrong defn geteligibleuserids user let result doseq user user get user age conj result get user id result try function get empty vector instead result wanted problem result vector immutable try add id result using conj actually creating new vector leaving result unmodified therefore return result end still emptymost language rely mutability accomplish basic task clojure focus immutability one best quality requires rethink approach instead using imperative loop accomplish task going use recursionclojure provides structure called looprecur allows u perform recursive computation print id every user list would something like loop remaining user empty remaining nil let user first remaining println get user id recur rest remaining lot going let break downthe loop operator defines local name remaining initializes name value user exactly like let form would dowe check see user left remaining done return nil otherwise take first user remaining bind name userwe print id userwe call recur operator jump back beginning loop next time loop local name established beginning bound value pas recur current value rest remaining bound name remaining next iterationusing structure write correct version geteligibleuserids function defn user loop remaining user result empty remaining result let user first remaining nextremaining rest remaining nextresults get user age conj result get user id result recur nextremaining nextresults thankfully give correct result try repl sure point might thinking lot work get simple resultyou correct looprecur need rare need practice right way particular task clojure use map filter javascript accomplish task following function user return user filter user userage map user userid look much clojure defn user map fn user get user id filter fn user get user age user notice map filter function take sequence operated last argument like filter predicate sequence result clojure version need read insideout like math expression opposed javascript version read toptobottomif bother probably hang time done going much readableone interesting thing clojure implementation map filter return lazy sequence rather concrete vector mean even chain multiple call map filter none computation actually done try look element resulting sequence therefore chaining many call map filter much computationally efficient clojure javascript intermediate map filter immediately transforms entire list resulting lot extra array created thrown awayon hand time want lazy sequence want concrete vector case couple optionsoption use reduce manually construct output vector defn user reduce conj map fn user get user id filter fn user get user age user option use collection sequence function iterates sequence appends element collection defn user map fn user get user id filter fn user get user age user iterate lazy sequence produced chained map filter call append element initially empty vector option idiomatic simpler internal optimization make perform better reduce casesthis work getting hard read due nesting luckily possible write toptobottom fashion using magic threading macro
269,Lobsters,clojure,Clojure programming,Generalized Java Resource Management,http://techascent.com/blog/generalized-resource-management.html,generalized java resource management,generalized java resource management techresource nongc resource brave true nativepointers resource acquisition initialization us wild tvmclj dltensor tvmarrayalloc dltensor closing ccli herb sutter contact u,java resource managementthe history computer science marked several great usually unwinnable dualistic battle consider garbage collection versus pooling manual memory management obvious political third rail best choice depends nature problem quality garbage collector skill team implementing software memory issue happen essentially nontrivial system team working often spend time dealing form memory issuessmoothly flowing garbage collected native non garbage collected code hit certain ideal industry really still realized clojure java taken step towards making integration native offheap resource bit smooth carefree bundle work small library techresourceone caveat start offheap bad moniker type resource call native call nongc call resource outside purview garbage collector offheap might confusing engineer coming c rust language heap c heap item often exactly tracking offheap system since right talking building better interface jvm language starting term obtuse inaccurate perspective language seems u add unnecessary confusion topicnongc resource brave truewe start humble goal supporting least two resource management paradigm aim allow limited form intermixing nativepointers post talk one form resource management stack based deallocation resource form declare scope resource allocated within given context released alternatively one harness jvm gc help task clearing resource tradeoff existthe minimal definition resource little counterintuitive define function take argument presumably side effect expect called automatically important point flexibility resource system one use function anything returning memory language runtime clearing database connection etcstack based resource managementthe library promise matter happens function declared resource get called close file database connection release native pointer etc enables predictability valuable simplicity make library approachable limit reachnotably may find type resource management referred resource acquisition initialization raii raii specifically broader term encompasses stack based resource managementhere simple example using library require techresource resource nil user resourcestackresourcecontext resourcetrack println released released fn fnfn user resourcestackresourcecontext resourcetrack println released throw exinfo bad thing happen released exceptioninfo bad thing happen clojurecoreexinfo general think want piece code run stack frame unwinds regardless reason unwinds sense resource system generalization concept like withopen stackbased system make claim reachability object code interfacesgc based resource managementthe jvm great set garbage collector amazing garbage collector since version stopped use object pool fast especially good collecting object shortlived allowing functional programming quickly efficiently lot respect piece technology enjoy using themit possible jvm bind function jvm object gc remove object live set get chance execute function similar dispose concept net family language requires scaffolding use specifically jvmuser let myitem object resourcetrack println gc object released gc println myitem nil object javalangobject javalangobject nil user systemgc gc object released nil way library implementation garbage collector determines object longer reachable program place weakpointer allocated queue thread polling queue timeout nt spinning call dispose function thing queuestack gcyou use system together guarantee resource released later stack frame could released sooner resourcetrack final argument vector set containing stack gc creates gchook creates stackbased hook hook may called dispose function called user resourcestackresourcecontext resourcetrack object println gc stack obj released gc stack throw exinfo bad thing happen gc stack obj released exceptioninfo bad thing happen clojurecoreexinfo us wildtvmclj us form resource management throughout mean resource ast node tensor etc cleaned gc earlier resource context would otherwise thus amortizes deallocation cost object still get benefit knowing given tensor definitely deallocated certain time help dealing potentially many gigabyte data particular datasetwhen integration found solid gotcha want share think general area drawback gcbased system fails work expected difficult ascertain exact reason garbage collector internals generally opaque consequently encounter situation running resource hard figure exactly conversely get situation gc resource getting cleaned soon encounter error nondeterministicwhat follows case encountered tensor matrix tvmtvm part dmlc ecosystem entire ecosystem tensor datatype called dltensor use jna wrap data structure heretvm provides allocation function create tvmarrayalloc however provide way create dltensor existing pointer one coming opencv case want take pointer address basically along description return dltensorif create dltensor immediately want create submatrix example need use function code may mean longer direct reference root dltensor actual relationship two object obscured garbage collector pointer fundamentally mere address unless root tensor referenced somehow derived tensor gc may well want clean root tensorso added optional gcroot parameter passed pointer tvmary function root referenced dispose function derived tensor thus gc derive correct relationship two entity thing like bring u final pointsin closingworking native resource mean several method clean show two method bridge gap deterministic predictable stack based nondeterministic automatic gcbased recommend starting first method range potential issue smaller problem well solved purely deterministic resource management provide way use two system together hope enabled use whichever system suit need timethe stack gc system specific native resource really come function called specific trigger could use type system side effect wanted close database connection cache management summary generation etc post framed context native resource many potential applicationsthe jvm great foundation build system take great pleasure building simple way allow work well larger ecosystem nonjvm language librariesaddendumone language nt get credit deserves ccli microsoft redesign managedc language neither get credit deserves herb sutter took care design ccli make work well existing c designing extension required work garbage collected language context deep knowledge language design c itselfccli still stand arguably powerful language world power native c power garbage collected language ideally one could intermix garbage collected native type freely necessary writing either native gcbased code language take care bridging gap admire respect herb influence relatively recent c renaissancebuilding bridge techascentcontact u
270,Lobsters,clojure,Clojure programming,JS Changes Fast; CLJS Makes It Manageable,http://clojurescriptmadeeasy.com/blog/javascript-changes-fast.html,j change fast cljs make manageable,change javascript handled clojurescript pipeline operator threader macro optional chaining operator google closure object manipulation javascript added destructuring default value generator asyncawait coreasync regular expression clojurescript regular expression several proposal new feature related post may also enjoy,wrote first javascript somewhere around year ago switched almost exclusively clojurescript several year ago javascript language changed much drop modern j codebase probably could actually read without referencing google javascript constantly changing new syntax new data structure new feature etc part using clojurescript let ignore constant change focus solving problem change javascript handled clojurescript pipeline operator pipeline operator first proposed developer seemed excited confused excitement threader macro clojurescript example try javascript pipeline operator today j const double n n const increment n n without pipeline operator double increment pipeline operator const result increment double result cljs defn double n n defn increment n n without threader double increment threader increment double also cond optional chaining operator optional chaining operator clean check property exist navigating object clojurescript would use map use getin object use google closure googobject example esnext javascript optional chaining operator j const message body user firstname bramus lastname van damme make sure property exist const firstname messagebody messagebodyuser messagebodyuserfirstname stranger nt need intermediate check const firstname messagebody user firstname stranger cljs map def message body user firstname bramus lastname van damme let firstname getin message body user firstname stranger cljs object def message j body j user j firstname bramus lastname van damme let firstname googobjectgetvaluebykeys message j body user firstname stranger object manipulation plenty new way defining destructuring working object irrelevant clojurescript use map instead object powerful api work data new objectentries objectvalues key vals working map javascript added destructuring default value part clojurescript core language generator asyncawait see javascript developer excited generator asyncawait yet see anything implemented coreasync surprise clojurescript could use internally performance gain clojurescript user new feature unlocks new value regular expression regular expression one exception clojurescript developer need keep javascript clojurescript regular expression compile native javascript regular expression several proposal new feature javascript regular expression visible clojurescript general clojurescript make think much javascript language clojurescript deserves lot praise stability provides given frequent change language built last several year clojurescript developer free spend time learning consistent api without needing track frequent language syntax change related post may also enjoy
272,Lobsters,clojure,Clojure programming,Proving Cantor's Theorem in Clojure Using LaTTe,https://nextjournal.com/zampino/latte-cantor,proving cantor theorem clojure using latte,,proof cantortheorem take antidiagonal via pose antidiag ad abstraction claim preimage antidiagonal via pose antidiagpreimage lambda x setequal x antidiag call diag complement anti diagonal set pose diag complement antidiag assume h sectionsurjective apply surjectivity antidiagonal p ex antidiagpreimage h antidiag fix arbitrary antidiagpreimage lead absurdity assume pose n lambda set elem assume e antidiag p antidiagpreimage elem e antidiag setequalprop antidiag n p absl absurd propabsurdintro antidiag e assume e diag p antidiagpreimage elem antidiag e setequal antidiag setssetequalsym antidiag p elem setequalprop antidiag n antidiag elem antidiag elem antidiag propimplnotnot elem antidiag diag absr absurd propabsurdintro diag e antidiag diag always true left antidiag antidiagpreimage absurd absl right diag antidiagpreimage absurd absr antidiagpreimage absurd proporelim classicexcludedmiddleax antidiag antidiagpreimage absurd left right b forall antidiagpreimage absurd absurd exelim antidiagpreimage absurd p b qed
273,Lobsters,clojure,Clojure programming,A stream processing framework to build stateless applications on Kafka in clojure,https://github.com/gojektech/ziggurat,stream processing framework build stateless application kafka clojure,ziggurat description concept dev setup usage clojars middleware section middleware ziggurat custom middleware usage deserializing json message using json middleware publishing data kafka topic ziggurat producer configs kafkaproducer send tracing open tracing jaeger jaeger configuration jaeger architecture alpha feature enable alpha feature ziggurat stream join alpha feature connecting rabbitmq cluster alpha feature configuration documentation producer configs alpha experimental feature exponential backoff based retries deprecation notice contribution license,ziggurat description ziggurat framework built simplify stream processing kafka used create fullfledged clojure app read process message kafka ziggurat built intent abstract reading message kafka retrying failed message setting http server clojure application user need pas function mapped every message recieved kafka refer concept understand concept referred document dev setup mac user install clojure brew install clojure install leiningen brew install leiningen run dockercompose dockercompose start kafka zookeeper rabbitmq run test make test usage add projectclj techgojekziggurat please refer clojars latest stable version start stream thread read message kafka add core namespace require zigguratinit ziggurat defn startfn logic run startup go defn stopfn logic run shutdown go defn mainfn message println message success def handlerfn mainfn middlewareprotobuf hash protoclass streamid protoclass refers fully qualified name java class code used deserialize message zigguratmain startfn stopfn streamid handlerfn handlerfn note example assumes message serialized protobuf format please refer middleware section understanding handlerfn mainfn function applied every message read kafka stream mainfn return keyword word success message successfuly processed stream continue next message retry message failed processed retried skip message skipped without reporting failure retrying message startfn run application startup used initialize connection database http client threadpools etc stopfn run shutdown facilitates graceful shutdown example releasing db connection shutting http server etc ziggurat enables reading multiple stream applying samedifferent function message streamid unique identifier per stream configs queue metric namespaced id zigguratmain startfn stopfn handlerfn handlerfn require zigguratinit ziggurat defn startfn logic run startup go defn stopfn logic run shutdown go defn apihandler request status header contenttype applicationjson body getresource def route get apihandler defn mainfn message println message success def handlerfn mainfn middlewareprotobuf hash protoclass streamid zigguratmain startfn stopfn streamid handlerfn handlerfn route note example assumes message serialized protobuf format ziggurat also set http server default pas route serve example demonstrates pas route zigguratmain startfn startfn stopfn stopfn streamroutes streamid handlerfn mainfn actorroutes route mode apiserver streamworker start apiserver streamworker mode four mode supported ziggurat apiserver mode server started actor route management route dead set management streamworker start server plus rabbitmq producing message retry channel worker start rabbitmq consumer retry channel managementapi server route used deadset management pas multiple mode start accordingly nothing passed mode start mode middleware ziggurat version ziggurat introduces support middleware old version ziggurat assumed message read kafka serialized protoformat thus deserialized passed clojure map mapperfn pulled deserialization function middleware user freedom use function deserialize message define custom middlewares enables ziggurat process message serialized format custom middleware usage default middleware defaultprotobuf hash assumes message serialized proto format require zigguratinit ziggurat defn startfn logic run startup go defn stopfn logic run shutdown go defn mainfn message println message success defn wrapmiddlewarefn mapperfn streamid fn message println processing message stream streamid mapperfn deserializemessage message def handlerfn mainfn wrapmiddlewarefn streamid zigguratmain startfn stopfn streamid handlerfn handlerfn handlerfn get serialized message kafka thus need deserealizemessage function provided default deserializers ziggurat deserializing json message using json middleware ziggurat provides middleware deserialize json message along proto used like def messagehandlerfn actualmessagehandlerfunction parsejson streamrouteconfig messagehandlerfn call parsejson message handler function actualmessagehandlerfunction first argument key streamroute config defined configedn second argument publishing data kafka topic ziggurat enable publishing data kafka ziggurat provides producing support zigguratproducer namespace namespace defines method publishing data kafka topic method defined essentially wrapper around variant send method defined orgapachekafkaclientsproducerkafkaproducer time initialization instance orgapachekafkaclientsproducerkafkaproducer constructed using config value provided resourcesconfigedn producer configured streamroutes configedn please see example present configuration supported constructing kafkaproducer explained please see producer configs complete list producer configs available kafka zigguratproducer namespace defines multiarity send function thin wrapper around kafkaproducer send method publishes data kafka topic kafka producer defined stream router configuration see configuration section eg publishing data using producer defined stream router config key default use send like send default testtopic key value send default testtopic key value tracing open tracing enables identify amount time spent various stage work flow currently execution handler function traced message consumed corresponding tracing header life time message time production till time consumption traced tracing added following flow normal basic consume retry via rabbitmq produce rabbitmq channel produce another kafka topic default tracing done via jaeger based env configs please refer jaeger configuration jaeger architecture set respective env variable enable custom tracer custom tracer provider function name set customprovider corresponding function executed runtime create tracer event error executing custom tracer provider noop tracer created enable tracing following config need added configedn ziggurat key tracer enabled true bool customprovider example jaeger env config jaegerservicename servicename jaegeragenthost localhost jaegeragentport alpha feature recommend use alpha feature production api contract implementation likely change future release enable alpha feature ziggurat enable alpha feature ziggurat add following config actor configedn file ziggurat key ziggurat alphafeatures featurename true alpha feature doc contain alpha feature tag stream join alpha feature stream join alpha feature recommend use production api contract might likely change future refer alpha feature section enable stream join set keyword streamjoins true enable allow actor join message topic result able use stream join add configuration configedn ziggurat streamrouter streamid consumertype streamjoins inputtopics name name joincfg joinwindowms jointype inner consumertype enables stream join streamjoins key provided possible value default default actor behavior inputtopics map topic want use joining joincfg map configuration define joinwindowms jointype inner left outer actor handler function like n myactor require zigguratmiddlewarestreamjoins mw def handlerfunc mainfunc mwprotobuf hash comgojekesbbookingbookinglogmessage comgojekesbbookingbookinglogmessage booking please take note vector containing proto class handler function receive message following formatstructure connecting rabbitmq cluster alpha feature connect rabbitmq cluster add following config configedn ziggurat messaging constructor zigguratmessagingrabbitmqclusterwrapper rabbitmqmessaging rabbitmqconnection host port int prefetchcount int username guest password guest hamode adminport int hasyncmode automatic channeltimeout int host comma separated value rabbitmq hostnames dnsnames ip port specifies port number rabbitmq node running hamode set hasyncmode set automatic manual adminport port rabbitmq management ui exposed default configuration ziggurat configs clonfig configedn ziggurat key ziggurat appname applicationname nreplserver port int streamrouter streamid applicationid kafkaconsumerid bootstrapservers streamthreadscount int origintopic kafkatopic oldestprocessedmessageins int changelogtopicreplicationfactor int producer bootstrapservers acks retriesconfig maxinflightrequestsperconnection enableidempotence false valueserializer orgapachekafkacommonserializationstringserializer keyserializer orgapachekafkacommonserializationstringserializer datadog host localhost port int enabled false bool statsd host localhost port int enabled false bool sentry enabled false bool dsn dummy workercount int queuesize int threadterminationwaits int rabbitmqconnection host localhost port int prefetchcount int username guest password guest channeltimeout int rabbitmq delay queuename applicationnamedelayqueue exchangename applicationnamedelayexchange deadletterexchange applicationnameinstantexchange queuetimeoutms int instant queuename applicationnameinstantqueue exchangename applicationnameinstantexchange deadletter queuename applicationnamedeadletterqueue exchangename applicationnamedeadletterexchange retry count int enabled false bool job instant workercount int prefetchcount int httpserver port int threadcount int appname refers name application used namespace queue metric nreplserver port repl server hosted streamrouter configs related kafka stream application reading streamid identifier stream mentioned mainclj hence stream read different kafka broker different number thread depending throughput stream applicationid kafka consumer group id documentation bootstrapservers kafka broker application read accepts comma seperated value streamthreadscount number parallel thread read message kafka scale number partition topic wish read origintopic topic stream read regex enables read multiple stream handle message way kept mind message different stream passed mapperfunction oldestprocessedmessagesins oldest message processed stream second default value week changelogtopicreplicationfactor internal changelog topic replication factor default value producer configuration kafkaproducer currently following option supported please see producer configs detailed explanation configuration parameter bootstrapservers list hostport pair use establishing initial connection kafka cluster acks number acknowledgment producer requires leader received considering request complete valid value retries setting value greater zero cause client resend record whose send fails potentially transient error keyserializer serializer class key implement orgapachekafkacommonserializationserializer interface valueserializer serializer class value implement orgapachekafkacommonserializationserializer interface maxinflightrequestsperconnection maximum number unacknowledged request client send single connection blocking enableidempotence set true producer ensure exactly one copy message written stream false producer retries due broker failure etc may write duplicate retried message stream datadog statsd host port metric sent although key name datadog support statsd well send metric statsd datadog appropriate name datadog key deprecated future sentry whenever failure keyword returned mapperfunction exception raised executing mapperfunction event sent sentry skip flow disabling rabbitmqconnection detail required make connection rabbitmq use rabbitmq retry mechanism rabbitmq queue part retry mechanism retry number time message retried retry flow enabled job number consumer reading retry queue prefetch count consumer httpserver ziggurat start http server default give apis ping healthcheck deadset management defines port number thread http server alpha experimental feature contract interface experimental feature ziggurat changed iterate towards better design feature purpose feature considered unstable used understanding risk implementation exponential backoff based retries addition linear retries ziggurat user use exponential backoff strategy retries mean message timeouts every retry increase factor configured timeout backoffs timeouts timeouts calculated using formula queuetimeoutms exponent exponent fall range min configuredretrycount number retries possible case capped number queue created rabbitmq equal configuredretrycount whichever smaller exponential retries configured described ziggurat streamrouter default applicationid applicationname retry type exponential keyword count int enable true bool exponential retries configured channel additionally user specify custom queuetimeoutms value per channel timeouts exponential backoffs calculated using queuetimeoutms implies channel separate count retries different timeout value ziggurat streamrouter default applicationid applicationname channel retry type exponential keyword count int queuetimeoutms enable true bool deprecation notice please note datadog key inside config file removed sometime future favor statsd content thesame though key name changed reason avoid confusion user would still backward compatibility datadog key contribution dev setup contribution please refer contributingmd license copyright gojek tech http gojektech licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license
274,Lobsters,clojure,Clojure programming,Why Clojure? (Take 2: The Technical Side),https://medium.com/appsflyer/why-clojure-part-2-aace98151ce2,clojure take technical side,actual language used lot flowing synthesize functional programming immutability lisp simplicity data first class citizen concurrentparallel paradigm,first small introduction accurately bit background official education computer science academic study focused philosophy cinematography literature usually approach technology philosophical abstract manner typical engineer concrete manner follows close second far programming language go usually ask one primary question language change way perceive task tackle case tend strongly emphasize following microservice world service usually deal specific problem space want solvesome language solve certain aspect specific problem space inherentlysome language introduce new issue complicate specific problem spacei go much philosophical theory behind three consideration anyone want delve deeper encourage read bit jaques derrida likens blind spot text effect reader relation world code text inherent blind spot introduced writer actual language used let get back original question clojure clearly get question often answer question worth mentioning bit appsflyer actually essence appsflyer mobile attribution analytics platform human parsable language mean marketer use u order ascertain well mobile application performing marketing front order ingest lot advertising traffic lot mobile traffic perform magicvoodoo generate insight lot mean billion http request day heavy amount traffic flowing systema complex system know synthesize actual attribution analytics based trafficfurther subsystem need take care effect attribution anything postbacks visualizationok kind know actual problem space shoe seven year ago write kind system programming language would choose simplest correct answer would probably language familiar best answer startup deal abstract concept ideal solution startup need deliver fast possible probably fastest already knowwhen http request grown hundred million billion need rethink base assumptionsbut happens year later best dream come true startup bigger last year well go one two route continue course hope tech chose serve best year come stop try make educated hard decisionso want swap python backend well various reason main one scale hard time dealing incoming traffic wanted use language easier parallel concurrent workclojure lisp dialect run jvm brings forefront following concept functional programming revolves mainly around notion modeling instead trying model problem space class encapsulate internal function functional paradigm promotes idea function first class citizen composable enable data flow actual class exists used mainly container data black box logicimmutability crux functional programming immutability mean send data two different function guaranteed original data change good well immutability fear following question function change data need synchronize access another function also try change time concept computational safety working parallel concurrently essential ease scaling big system sane way via immutability lot said mutable v immutable sure cover deeply future postslisp clojure lisp come two important attribute simplicity lisp grok actually pretty simple clojure essentially four basic collection diversity function work everything easily nested inside calling first x always return result first element x regardless x list vector map set also dreaded parenthesis simply best indicator lexical scope parenthesis scope simple thatdata first class citizen functional programming promotes function first class citizen lisp make data first class citizen well data longer hidden behind often time obscure class data forefront modeled easily using native data structure usually using map data prominent citizen clojure map function key invoke something like amap key fetch value key amap besides lisp homoiconic data code code data usually referentially transparentconcurrentparallel paradigm clojure native support concurrency parallelism really easy manner future promise pmap atom even ref agent powered software transactional memory stm besides native support resides clojurecore namespace also clojurecoreasync library clojure way csp communicating sequential process clojure sequential clojure way modelling system using channel buffer notion far reaching impact appsflyer overall system designso ask question clojure sure lot functional programming language principle written none lisp super ideal processing endless stream data like domodel appsflyer run jvm yes really good vms beam amazing example jvm simply one world largest ecosystem regard open source library easily invoked clojureif reference start post one extra minute want reiterate modeled appsflyer endless stream incoming outgoing data lisp philosophy lent perfectly solving specific problem space actually fit together perfectly hard time deciding whether modeled appsflyer endless stream data clojure started using fact remains u perfect tool job
275,Lobsters,clojure,Clojure programming,Clojure 10 features illustrated using interactive code snippets,https://blog.klipse.tech//clojure/2018/12/18/welcome-clojure-10.html,clojure feature illustrated using interactive code snippet,clojure feature official change log github data people david nolen mike fikes klipse better error message two new protocol talk rebl protocol extension metadata new system tap read string capture mode play repl clojure cli,clojure feature clojure look official change log github see main feature clojure java compatibility improvement new stream based repl named prepl better error message two new protocol datafiable navigable protocol extension metadata new system named tap read string capture mode main theme clojure data people blog post going explore feature illustrate feature live code snippet run directly browser code snippet clojurescript corresponding clojure code might slighlty different live demo clojure feature browser week clojure released made possible great work david nolen mike fikes ported clojure feature clojurescript quickly personally thankful mike helped integrating feature klipse klipse tool leverage selfhosted clojurescript integrate interactive code snippet web page better error message error message contain phase error occurs phase reading source code macro exansion compilation execution result printing way error displayed repl first line detail phase error occured subsequent line provide detail error error get detailed require clojurecorespecsalpha namespace contains clojurespec definition basic part language require clojurecorespecsalpha valuable improvement error occur inside macro make syntax error inside defn get detailed explanation given clojurespec part form incorrect defn foo provide map odd number form get clear explanation def mymap foo bar better error message really great human contribution clojure team two new protocol datafiable navigable clojure narrative always around data data immutability code data people say clojure datadrive language clojure take data story one step every piece clojure seen data datified navigated box clojure provides datification atom var namespaces remark datafiable navigable natural application context building tool data exploration probably need web service part clojure think interesting discover mechanic datafy value call datafy function clojuredatafy namespace require clojuredatafy refer datafy simple value datafied datafy atom datafied wrapping square bracket datafy atom order datafy object need extend clojurecoreprotocolsdatafiable protocol made single function named datafy let illustrate creating custom record name record included datafication require clojurecoreprotocols p defrecord myrecord b pdatafiable datafy x type myrecord x b b x datafy myrecord clojure protocol record open even datafy existing object extendtype instance datafy lazy sequence truncated list first item extendtype lazyseq pdatafiable datafy x take x datafy map inc range example shown section illustrative purpose advised modify behaviour clojure core component like lazyseq check talk rebl discover really cool application datafiable navigable datification specific map problem clojure support protocol extension metadata protocol marked extendviametadata true extend via metadata defprotocol component extendviametadata true start component object extend component specifying value start metadata like def component withmeta name db start constantly started start component surprise datafiable protocol exposed previous section marked extendviametadata true consequence map datafied fly specify implementation clojurecoreprotocolsdatafy metadata def johndoe withmeta name john doe language u clojurecoreprotocolsdatafy fn x assoc x type person datafy johndoe official documentation protocol extension metadata new system tap tap shared globally accessible system distributing series informational diagnostic value set presumably effectful handler function nutshell tap distribute series value set handler register handler addtap def myatom atom nil addtap reset myatom def youratom atom nil addtap reset youratom send value tap tap hello world handler called therefore myatom youratom contains value sent myatom youratom tap used better debug prn facility like logging read string capture mode lisp dialect clojure allows u convert string contains expression corresponding data readstring function clojure introduces readstring instead return data original string require clojuretoolsreader refer readstring require cljstoolsreaderreadertypes refer sourceloggingpushbackreader readstring sourceloggingpushbackreader def two difference clojure v clojurescript regarding readstring clojure requires linenumberingpushbackreader instead sourceloggingpushbackreader clojure part clojurecore play repl hope enjoyed discovery clojure feature browser time try machine thanks awesome clojure cli super easy single command line clj sdeps deps orgclojureclojure mvnversion clojure user go
276,Lobsters,clojure,Clojure programming,Clojure's stability: lessons learned,https://words.steveklabnik.com/why-is-clojure-so-stable,clojure stability lesson learned,clojure stable comment orange website comment ultimately responding individual greatness clojure lisp clojure dynamically typed clojure development pretty slow github many commits commits,clojure stable december programming language discourse lately thought mostly centered around comment orange website would put simply clojure designed thinker creates away keyboard front one release break code head first breaking change left public releasesi think regardless person right wrong interesting question let look comment ultimately responding perspective fairly largescale point app developer find great clojure place emphasis backwards compatibility general migration newer clojure version completely painlessthe language designed experienced mature people go let throw everything start phase like many language doclojure welldeserved reputation stability argument clojure stableindividuals greatnessa lot people like original commentator believe rich bdfl clojure responsible think rich deserves lot credit time explanation little bit close great man theory history great man theory originally proposed mid thomas carlyle go something like history world biography great men get started carlyle pretty terrible guy even day lot altright dark englightenment neoreactionary folk consider really important thinker say thatwhat mean important men make big decision life rest u irrelevant scheme thing cited people like shakespeare martin luther napoleon carlyle mind history changed men alone french army win war napoleon warsi tend subscribe opposite history people history emphasizes army napoleon worker ceo critic carlyle herbert spencer said must admit genesis great man depends long series complex influence produced race appears social state race slowly grown remake society society must make himthat look historical context see created change famous individualstwo sidebar first spencer person coined phrase survival fittest second irony framing particular philosophical debate individual history cause historical change citing wellknown opinion two individual men idea popular still something many u latch onto sometimes subconsciously even believe beyond rich said deserve lot might clojure stable think three reason may come mindclojure lispfirst clojure lisp wide array reason stability bit easier languagesthe first lisp lack syntax language update introduces new syntax grows larger larger design space get constrained making update harder harder lisp hand rarely grow syntactically clojure syntax lisp still far le syntax nonlisp languagesanother perspective homoiconicity property mean new syntax lisp introduced macro base language language user extend language provide new syntax clojure canlesson smaller core language stable beclojure dynamically typedthere many many many way debate virtue static typing dynamic typing however one area dynamically typed language clearly win mind wider set tool disposal make change without breaking code cut way also make much much harder know broken code well able mitigated variety technique argue tradeoff think possibility advantage plainly clearlesson easier change dynamic system static one good bad focused goodclojure development pretty slowclojure famously optimizes contribution around rich process expense others debating real sore spot lately mean pile onto part discussion interested suggesting blog post good bad interested effect hasif ask github many commits master answer look commits get commits clojure released december clojure released december commits release yearin contrast six week development rust commits almost many clojure last nine half yearslesson much easier keep thing stable change oftenall factor tie clojure need change much since core language lisp need change good tool disposal change also note rich one made lot decision absolutely deserves credit job well done even think many factor playfurthermore ascribing entirely rich make harder language learn good lesson clojure success get rich digging bit deeper apply lesson bit broadly good language design requires taking sober look various tradeoff making best decision make regardless bdfl part language design team
277,Lobsters,clojure,Clojure programming,writing code without IFs and boilerplate waste,http://ahungry.com/blog/2018-12-17-Writing-code-without-ifs-and-boilerplate-waste.html,writing code without ifs boilerplate waste,,popo plain old php object pojo plain old java script object lucky may work team actually keep domain model constraint close model instead using anemic data model contains slot member variable property call like essentially reimplementing language builtin map type thin object wrapper look around oop codebases bit wo nt long see something sample php could java typescript language attempting javalike class usermodel var string name user private name var int age user private age var int id user private id var string language user private language create user return usermodel public function construct constructor omitting gettersetter docblocks see public function setname string name name name public function getname string return name public function setage int age age age public function getage int return age public function setid int id id id public function getid return id public function setlanguage string language language language public function getlanguage return language big deal may ask well first actually constructing object immutability given point code execution model could invalid incomplete state new property added road ides able inform failed call laterdate added setter code portion consume code secondly comment mandatory docblocks always explain rarely type comment offer value whatsoever lastly gettersetter fluff offer value wasted screen real estate let clean model bit class usermodel private name private age private id private language public function construct string name int age int id string language name name age age id id language language favorite prog language ok bit better still little wordy php language choice bed sleep point kotlin could use data class typescript could leverage nice constructor bonus class usermodel constructor private name string private age number private id number private language string know chosen clojure could use record effect check clojurespec worried type defrecord usermodel name age id language effectively simpler use map type name matt age id language clojure
278,Lobsters,clojure,Clojure programming,6 months of Clojure,https://medium.com/@CBowdon/6-months-of-clojure-cc420daf0159,month clojure,language community myth busted something something simple easy,left safeenterpriserole six month ago clojure development full time scaleup company ie bigger startup long admired clojure distance like close seems good time record thought language community everythinglanguage itselfi convinced clojure best lisp one working nonlist data structure eg hashmaps painful fact really pleasant experience coding map efficient read well ever need punish naughty programmer make use hashtables emacs lisp like highly functional language clojure concise doubleedged sword best clojure code say line another language would say worst clojure code say line another language would say possible write dense code occupies far head space line page reminds lot haskell thankfully wild kind extreme concision rarethe pain point felt around toolsdeps new way manage dependency keen using like simplicity separation classpath compilation concern make particular sense language multiple host year old well supported leiningen work communityi suspicion average clojure programmer older compared average language particularly javascript perhaps projection bit older javascript enthusiast get feeling clojure appeal value simplicity stability exciting new featuresthe evolution language definitely along line breaking change rare new feature always complementary see ecosystem tiring jslevel churn library build tool framework many popular library actively developed clojure necessarily abandoned often mean author done feature want responding bugsperhaps right clojurians older would explain older people typically kid le time open sourcemyth bustedthere myth hiring difficult clojure role finding experienced clojurians difficult true finding talented experienced functional programmer would like learn clojure easy team able picky candidate basis new hire rapidly productive think element selfselection course people keen learn clojure going put effort ramp fastsomething something simple easymost come really appreciate lack ceremony writing clojure code complex type need lined almost everything map vector might ideal data type every problem pretty good type problem working breeze lot said small number welldesigned datatypes fleet function manipulate themso go month clojure adventure great time turn hammock comfortable
279,Lobsters,clojure,Clojure programming,How to upgrade your Clojure projects to use Java 11,https://www.deps.co/blog/how-to-upgrade-clojure-projects-to-use-java-11/,upgrade clojure project use java,upgrading clojure project java jdk released long term support updating jdk checking library upgrade leinancient bootdeps depsancient deps version javautilcollection toarray corerrbvector orgflatlandordered datascript midje lacinia fipp puget leinmonolith cljyaml compojureapi ringmiddlewareformat manageddependencies bootbundle deprecation removal deprecated module httpkit removed jep leiningen boot released update boot toolsdeps open issue clojure clojurescript version clojure running bootclasspath keeping date testing latest jdk,jdk latest release jdk java development kit several change since jdk require project update dependency build tool many open source project resolved issue adding support jdk project updating dependency regularly upgrade process jdk difficult last year wrote guide upgrading clojure project java guide read find background context last year guide jdk jdk released september jdk first long term support release since jdk due short support lifespan jdk six month number breaking change release many business individual continued use jdk free public update oracle jdk end january commercial user december personal user date oracle providing free update jdk mean many clojure project looking upgrade jdk soon investigating jdk provider support jdk oracle also created guide updating jdk note upgrade guide relevant majority clojure program worth quick scan well checking library upgrade beginning upgrade jdk would recommend checking new version dependency may fix incompatibility introduced new version jdk reducing amount breakage need resolve later also much easier upgrade library first jdk rather trying upgrade time check update leiningen project leinancient boot project bootdeps toolsdeps project depsancient project publicly available github use deps version add badge readme show dependency uptodate javautilcollection toarray previously upgraded support jdk jdk main issue likely face upgrading jdk addition method javautilcollection interface new toarray method added overload existing method java statically typed language jvm type information resolve ambiguity clojure able resolve without developer adding extra type hint specify method use without type hint would get error like exception thread main javalangillegalargumentexception must hint overloaded method toarray compiling change affected several project directly including corerrbvector orgflatlandordered datascript clojure practice issue clojure clojure distributed aot compiled jar compiled older version java likely run issue working clojure rrb vector ordered much larger impact however many project dependency transitive dependency one library including midje lacinia fipp puget leinmonolith cljyaml compojureapi ringmiddlewareformat new release rrb vector ordered orgclojurecorerrbvector orgflatlandordered respectively many downstream consumer library updated use version yet using leiningen great usecase manageddependencies feature add vector manageddependencies projectclj leiningen choose version project depended version dependency bootbundle provides similar feature boot manageddependencies orgclojurecorerrbvector orgflatlandordered leiningen plugins dependency rrbvector ordered override resolved dependency adding explicit dependency plugins vector example plugins leinmonolith override older version rrbvector nt work jdk orgclojurecorerrbvector work dependency coming use new feature lein lein deps lein deps orgclojurecorerrbvector karmareporter fipp orgclojurecorerrbvector deprecation removal jdk deprecated several java ee corba module module still jdk resolved default get access module needed explicitly add back command line flag addmodules eg addmodules javaxmlbind without flag would get error like caused javalangclassnotfoundexception javaxxmlbinddatatypeconverter common use module clojure community converter javaxxmlbind java added class javautil suitable replacement need support jdk older java httpkit show way using macro support method note aot compile application make sure compile version java running production jdk also removed several sun apis including suggested migration path use jdk removed java ee corba module dependency still using module need add explicitly dependency jep information removed module get replacement using library expects dependency need add dependency jar download maven central example javaxxmlbindjaxbapi leiningen later required use jdk get latest version leiningen running lein upgrade time writing leiningen latest version available boot updated build jdk however testing seems boot run jdk released september update boot boot u get latest version time writing boot latest version toolsdeps appears blocking issue running jdk open issue jdk adding spurious newlines pom unlikely issue people run issue build tool let know update post clojure clojurescript version clojure clojurescript fix improve compatibility jdk clojurescript include avoids depending javaxmlbind clojure support running bootclasspath java upgrade leiningen upgrading clojure later also work keeping date java new sixmonthly release cycle increased rate change jdk number version library consumer may using increased willingness deprecate extract part jdk mean many developer consider testing early access version jdk ensure caught offguard using travis ci written guide testing latest jdk
280,Lobsters,clojure,Clojure programming,Introduction to Clojure,https://hypi.io/blog/solutions/introduction-to-clojure/,introduction clojure,clojure functional programming code data repl clojure repl r e p l getting started page clojureorg replit clojure expression function definition special form special form higher order function getting started clojureorg,clojure modern dialect lisp designed run java virtual machine common language runtime descending lisp clojure strong emphasis functional programming philosophy treating code data learning lisp challenge think program programming new way procedure oriented language clojure accessible dialect lisp run computer gentle introduction assumes coming procedural language language like c java little exposure lisp repl approaching clojure compiled language like c java clojure repl might unfamiliar way working language repl stand read evaluate print loop interactive programming environment allows develop clojure code one expression time start demonstrating clojure clojure repl tool clj run sample code need install clojure locally run online interpreter instruction installing clojure locally found getting started page clojureorg would prefer start online interpreter try replit site come following search assuming running code locally launch clj command line see prompt similar prompt tell u running version clojure start typing expression interpreter evaluate press control time quit start typing basic mathematical expression clojure clojure expression basic math expression consist prefix operator dynamic number argument first glance might look like simple syntactic difference clojure clike language difference run bit deeper clike language program consist statement expression statement sideeffects value expression value clojure program built entirely expression clojure expression consist list marked parenthesis consisting function series argument complex expression built combining expression larger expression clojure primary data structure used language list already seen use list construct expression also store data list manipulate data using function two expression treat list data object using quote quote function return unevaluated form list interpreter try evaluate function use function first get first element list rest get remainder list function definition special formsclojure allows create function using defn special form already seen one example special form quote defn another special form expression evaluation rule think special form builtin syntax language use developing program following ancient programmer tradition let create hello world function clojure function definition event expression evaluates value start name helloworld followed list argument case none expression perform computation case slightly unusual expression side effect print message hello world let create function addone increment value expression consists name addone single parameter x expression representing computation notice even defn evaluates value namely symbol function call function defined another expression let go back try running helloworld function notice get slightly different result nil clojure every expression evaluates value function return value represented nil nil absence value clojure additional special form allow build complex expression form allows u build expression return different value based test condition clojure builtin function zero test value zero write version function important remember evaluates first expression test true second expression test false expression could far complex true false let special form allows u create local binding similar local variable result expression symbol let define sequence binding symbol result expression notice use let context simple expression necessarily use within function finally recursive expression one basic building block clojure building repeated computation build simple recursive factorial function higher order function function clojure passed parameter function used build complex expression well builtin function map reduce apply main function used functional argument higher order function operates differently map function applies first argument function element second argument list use map function conjunction addone function build new list element incremented one reduce function take two argument function applies first two argument list successively applies next argument list previous result single element returned finally apply function applies named function parameter list article touch basic using clojure building expression simple expression special form higher order function clojure rich language includes variety builtin data structure addition list package system ability load access java code jvm information working clojure see getting started section clojureorg
281,Lobsters,clojure,Clojure programming,State of #Clojure Community 2018 - Responses,https://www.surveymonkey.com/results/SM-9BC5FNJ68/,state clojure community response,,
282,Lobsters,clojure,Clojure programming,Machine learning in Clojure with XGBoost,https://www.rdisorder.eu/2018/12/03/machine-learning-clojure-xgboost/,machine learning clojure xgboost,lisp clojure clojure first class immutable jvm production grade repl superpower done done done clojupyter gorilla repl data reading learn clojure minute clojure brave true iris dataset leiningen declare explicitly keyword var vector lazy sequence vector sequence official clojure doc vector immutability persistence data processing threading macro threading macro official clojure doc macro transducer compose series transducer pulling transformer train test split train test sampling map key training prediction xgboost nice explanation cljboost doc readme official doc flexibility v production production ready free cljboost doc subscribe,clojure lisp lisp lot parenthesis got chest move talking serious stuff obligatory xkcd comic clojure probably never heard clojure let alone data science machine learning would interested using thing tell make matter data first class clojure deal class object everything data data immutable mean mess transformation data ok start previous one reason popping head another one might jvm yeah hate extent make mistake developed since always production grade business around world still run develop software jvm considering clojure accepted even conservative corporation fundamentally something already know second point would like make repl like usual language shell instance python repl usually basic annoying superpower would nice go seeing live happening service production done would like plotting service used production experimenting done happen nested data structure would nice explore visually better understand done mean really need something like jupyter notebook though feel comfortable environment option work seamlessly clojupyter clojure kernel jupyter notebook gorilla repl native clojure notebook solution data reading never saw clojure code starting advice take look learn clojure minute able follow along one favourite source started learning clojure brave true anyway explain carefully every step code everyone able follow along without many issue introduction work infamous iris dataset already leiningen get install really easy use de facto build tool clojure create new project skeleton command line launching lein new cljboostdemo cd cljboostdemo directory structure following changelogmd doc intromd license projectclj readmemd resource src cljboostdemo coreclj test cljboostdemo coretestclj file care projectclj basis leiningen correctly prepare build project src put code application library resource put iris csv file get define projectclj file another sanity touch clojure declare explicitly library version always good thing defproject cljboostdemo description fixme write description url http examplecomfixme license name eclipse public license url http dependency orgclojureclojure orgclojuredatacsv cljboost save projectclj launch lein run shell leiningen get needed dependency start repl move data loading trasforming opening modifying srccljboostdemocoreclj file find placeholder code get rid start writing code clojure work namespaces usually file contains one namespace define import n cljboostdemocore require cljboostcore boost clojurejavaio io clojuredatacsv csv def irispath resourcesiriscsv n defines new namespace good practice import library namespace definition require keyword type per se clojure see later important cljboostcore boost mean want use core namespace cljboost library want refer name name boost know python import library lbr def create new var globally current namespace case pointing string representing path dataset living usually clojure define many global name except function name fact irispath global name use demo read iris csv use code defn generateiris irispath withopen reader ioreader irispath comp drop map splitat csvreadcsv reader code defines defn function named generateiris take argument path iris csv open connection file given path going closed done withopen see function call vector symbol followed code reader ioreader irispath local binding local binding useful avoid cluttering global namespace separate code execution tiny bit case use java reader precise bufferedreader open read file see using imported clojurejavaio namespace ioreader name syntax access name residing imported namespace following code might look bit esoteric matter habit let start decomposing repl step withopen reader ioreader irispath csvreadcsv reader ioexception stream closed javaiobufferedreaderensureopen code throw error csvreadcsv lazy default laziness another clojure feature clojure function return anything need value nice think large file load memory process might read process line line writing result another file make function eager use doall withopen reader ioreader irispath doall csvreadcsv reader sepallength sepalwidth petallength petalwidth specie setosa setosa result sequence vector containing string sequence among important data structure clojure lazy immutable produced clojure data structure info check official clojure doc vector similar python list difference persistent better understand immutability persistence let try little experiment def println conj println see created vector conj appends element vector result whole new data structure fact still initial value data processing case care header anymore since specie column class want predict last one start processing raw data right away make process easier define demoreader function use repl start working resulting data defn demoreader withopen reader ioreader irispath doall csvreadcsv reader use threading macro experiment apply transformation step step demoreader take sepallength sepalwidth petallength petalwidth specie setosa setosa let u thread value last argument subsequent function surely remember school taught solve f g x start solving g x x f x x threading macro syntactic sugar make code readable simple example inc dec inc inc dec increase dec inc mean increasing decreasing result give basically read right left understand order application function inc dec go back reading left right operation info threading macro check official clojure doc getting back demoreader take see result get first vector csv take exactly think lazily take n value given collection useful experimenting otherwise would work whole sequence remove header sequence drop first row result demoreader take drop setosa setosa since want separate x value class want predict would nice one go come python clike language might tempted use loop clojure thing differently map apply function value collection map inc case want split value guess splitat function waiting u splitat exactly need define anonymous function map vector demoreader take drop map splitat setosa setosa define named function use defn macro let u avoid typing every time def myfunc fn arg something simply fn arg name get anonymous function splitat another shorthand resolve fn x splitat x way save typing let take everything together using transducer threading macro transducer compose function together transducer return single function pass data worry look bit obscure first took time well grasp concept suggest read carefully well written series transducer def xf comp drop map splitat xf comp compose function together getting back one function cycle collection drop result collection given first argument like think process way like pulling value collection another apply function xf result generateiris function started defn generateiris irispath withopen reader ioreader irispath comp drop map splitat csvreadcsv reader want go setosa setosa something process easier way basically parse string number convert class setosa virginica versicolor integer let start abstracting needed transformation defn parsefloat floatparsefloat use java operation seamlessly generateiris irispath take map first first return first element collection generateiris irispath take map first map map parsefloat generateiris irispath take map first map map parsefloat map vec transformation build x model let build named transformer def transformx comp map first map map parsefloat map vec instead generateiris irispath take map last last take last item collection setosa setosa let l first setosa case l setosa versicolor virginica stop second let create local binding say give name data function live local space globally case way avoid nested condition else saying l setosa return versicolor return virginica return way given value match none three case get error nice check data quality well generateiris irispath take map last map fn label let l first label case l setosa versicolor virginica def transformy comp map last map fn label let l first label case l setosa versicolor virginica defn mungedata irisdata let x transformx irisdata transformy irisdata map conj x train test split one important thing machine learning split data train test set good split requires random sampling implement simple sampler scratch defn traintestsplit dataset n let shuffled shuffle dataset splitat n shuffled traintestsplit take collection number instance want training set shuffle function simply shuffle collection get random result every time easily avoid repetition solution optimal fairly large dataset case might want take look sampling nice library take care everything sampling defn trainset splitset let set first splitset x mapv droplast set mapv map return vector mapv last set defn testset splitset let set last splitset x mapv droplast set mapv last set function generate train test set map key x map clojure firstclass citizen nice property create map mixed type key string map function keywords function well access kind key using map get function get key key map much know take look training prediction xgboost ensemble model us gradient boosting minimize loss function make sense word together suggestion check nice explanation pic formula algorithm cljboost give clojure interface underlying java implementation library way avoid java interop get result train model create dmatrix data want feed algo learning choice mine could hidden data trasformation behind api implementation issue get data dmatrix touch look anymore defn trainmodel trainset let data boostdmatrix trainset params params eta objective multi softmax numclass round watch train data earlystopping boostfit data params dmatrix serialize training set various way generate dmatrix advise take look doc readme params map act like config xgboost minimal example know possible option always refer official doc say xgboost training learning rate eta since classification class setosa versicolor virginica set objective multi softmax tell xgboost many class numclass xgboost round boosting evaluate accuracy training set good practice example passing watch map case accuracy start increase consecutive iteration stop training earlystopping parameter calling fit defined data params train xgboost model scratch return booster instance use booster prediction persist disk feed baseline another xgboost model defn predictmodel model testset boostpredict model boostdmatrix testset defn accuracy predicted real let right map compare predicted real count filter zero right count real though passed training set check training performance check accuracy test set prepared previously predict need model data dmatrix want predict return vector prediction let wrap everything main function run whole analysis repl command line defn main let splitset irispath generateiris mungedata traintestsplit train test map splitset trainset testset model trainmodel train result predictmodel model test println prediction mapv int result println real test println accuracy accuracy result test generate splitset use nice little map trick map multiple function one collection way around train xgboost model get prediction main prediction real accuracy result get might slightly different since fix seed random number generator flexibility v production probably notice though code wrote simple flexible enough used analysis experimentation also production ready code lein run root project command line get result main repl would trivial add functionality program instance might want feed new data change want retrain model something like python jupyter notebook would probably assignment place imperative code must rewritten scratch make somewhat production ready talk fact data munging performance might issue composing transducer get parallelization almost free go playing little bit cljboost forget doc available still work progress please let know issue idea way make better even using happy subscribeget next post directly inbox related
283,Lobsters,clojure,Clojure programming,"Code goes in, Art comes out",https://www.youtube.com/watch?v=LBpqoj2nOQo,code go art come,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature code go art come tyler hobbs youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature code go art come tyler hobbs youtube
284,Lobsters,clojure,Clojure programming,Every Clojure Talk Ever,https://www.youtube.com/watch?v=jlPaby7suOc,every clojure talk ever,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature every clojure talk ever alex engelberg derek slager youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature every clojure talk ever alex engelberg derek slager youtube
285,Lobsters,clojure,Clojure programming,Maybe Not - Rich Hickey,https://www.youtube.com/watch?v=YR5WdGrpoug,maybe rich hickey,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature maybe rich hickey youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature maybe rich hickey youtube
286,Lobsters,clojure,Clojure programming,GraalVM Polyglot with Clojure and JavaScript,https://blog.taylorwood.io/2018/11/26/graal-polyglot.html,graalvm polyglot clojure javascript,graalvm polyglot idiomatic coercion executables array associatives polyglottin functional programming clojurvascriptception loading external javascript function page gist,graalvm enables interesting new interop scenario hosted language post demonstrates polyglot interop clojure host language javascript hosted language need run clojure code graalvm sdk want import orggraalvmpolyglot type n polydactcore import orggraalvmpolyglot context value orggraalvmpolyglotproxy proxyarray proxyexecutable proxyobject instantiate polyglot graalvm context javascript language helper function convenient evaluation def context build contextnewbuilder intoarray j defn evaljs code eval context context j code result evaljs graalvm polyglot value method casting value particular type need start evaluating javascript within clojure evaljs numbermaxvalue object type javalangdouble trivial scalar example complex data structure translated language context graalvm polyglot api come play multiple possible behavior consider javascript array empty map evaljs object array becomes map index key evaljs javautillist polyglot list polyglot map inside invoke objectclass overload graal us set rule see docstring infer desired result type may return want case invoke listclass get different perhaps familiar translation still something easily work clojure directly idiomatic coercion write clojure help marshal polyglot value sensible clojure java value defn value clj return clojure java value given polyglot value possible otherwise throw value v cond isnull v nil ishostobject v ashostobject v isboolean v asboolean v isstring v asstring v isnumber v v number canexecute v reifyifn v hasarrayelements v range getarraysize v value clj getarrayelement v hasmembers v k getmemberkeys v k value clj getmember v k else throw exception unsupported value couple thing note complete welltested implementation handle little toy example article sparing detail value class containerboxed value polyglot value pointer method inspecting type value contains cond clause fairly selfexplanatory interesting one canexecute executable value hasarrayelements array hasmembers associative structure executables definition reifyifn macro reifies ifn given value macro easily emit arity invoke defn execute value execable args little sugar execute execable objectarray args defmacro private reifyifn convenience macro reifying ifn executable polyglot value v let invokearity fn n let args map symbol str arg inc range n seq args invoke args value clj execute v args invoke value clj execute v reify ifn map invokearity range applyto args value clj apply execute v args couple thing note complete welltested implementation handle little toy example article treat executable polyglot value like typical clojure function array hasarrayelements case pretty plain convert vector recursively convert contained value associatives hasmembers case clearcut several different interpretation member polyglot value example java object member would field class member json object member would string key example us simplest interpretation treat everything member clojure map paraphrase someone else data already polyglottin equipped value clj couple helper let play def j clj comp value clj evaljs fn composition convenience j clj j clj false false j clj j clj j clj foo bar baz false foo bar baz false j clj classic j clj false true true proven false j clj foo sort foo j sort funny nothing surprising evaluating javascript clojure repl getting back clojure value note sharing single context evaluation context stateful mutable evaljs var foo evaljs consolelog foo object orggraalvmpolyglotvalue undefined functional programming could write function javascript hear getting better time call clojure welcome next level def doubler j clj n return n doubler check beautiful memoizing factorial function return json object containing factorial function backing memo array def factorial evaljs var function factorial n n n return n return n return n factorial n n x fn factorial memo get value clj factorial fn j happens right get value clj factorial memo nil nil get value clj factorial fn get value clj factorial memo result may surprise contains many value use proxyarray pas collection javascript function treated native javascript array def jsaset j clj arr idx val arr idx val return arr jsaset proxyarrayfromarray objectarray nil nil get mutated vector back javascript sport exotic modern feature like variadic function treat like clojure counterpart even see clojurespecific value like keywords boxed polyglot value passed foreign javascript function unharmed def variadicfn j clj x z return x z apply variadicfn foo bar range foo bar ever tried sort wildly heterogenous collection clojure sort b nil foo nil bar compilerexception javalangclasscastexception clojurelangpersistentarraymap cast javalangcharacter thought dynamic language need get job done javascript oblige def jssort j clj v return vssort apply jssort b nil foo nil bar foo nil b nil bar easy miss example notice keyword foo set input collection passed javascript sort function sorted output contains said keyword set sorted likely inscrutable javascript sorting logic work despite fact javascript concept keywords use json serde function started def json j clj x return jsonstringify x json proxy hash map treated json object case json proxyobjectfrommap foo bar nil foo bar null def json j clj x return jsonparse x take round trip json json json json proxyobjectfrommap foo foo access json object member naturally def jsonobject j clj return mfoo mfoo jsonobject proxyobjectfrommap foo clojurvascriptception made javascript function double clojure function let opposite function provides instance graalvm proxyexecutable implement sole execute method given clojure function really anything apply work defn proxyfn return proxyexecutable instance given function allowing invoked polyglot context f reify proxyexecutable execute args apply f map value clj args need able pas executable code clojure polyglot context example return javascript function close nested map take another function invoke map maybe term callback would apt javascript parlance def cljlambda j clj foo bar baz z fn return fn cljlambda proxyfn clojurewalkprewalk fn v vector v mapentry v vec reverse v v foo bar baz z clojure using graalvm host evaluate javascript passing clojure function javascript lambda invokes clojure function us prewalk reverse array nested json object getting back idiomatic clojure map value lean javascript reduce use like clojure reduce lazy sequence def jsreduce let reduce j clj f coll return collreduce f reduceinit j clj f coll init return collreduce f init fn f coll reduce f coll f init coll reduceinit f coll init jsreduce range jsreduce range pas clojure reducing function internally us javascript doubler function defined build clojure map within javascript reduce jsreduce fn acc elem assoc acc keyword str elem doubler elem range bad news passing clojure lazy sequence javascript realized evaluated javascript see clojure prn statement execute javascript log first value def logcoll j clj coll coll consolelog coll logcoll repeatedly prn sleeping threadsleep rand sleeping sleeping sleeping nil logcoll range infinite seq never complete loading external javascript example load underscorejs github call invert function clojure map def invert let invert j clj load http rawgithubusercontentcomjashkenasunderscoremasterunderscorejs return invert fn invert proxyobjectfrommap invert foo bar bar foo similar clojuresetmapinvert javascript key must string practical use moment find whole mixedlanguage runtime experiment exciting example used javascript thing done several language graalvm like ruby python r llvmbased language etc see page information gist code experiment
287,Lobsters,clojure,Clojure programming,LaTTe : a Laboratory for Type Theory experiments,https://github.com/latte-central/LaTTe,latte laboratory type theory experiment,latte http lattecentralgithubiolatte latte proof assistant library type theory formal proof introduction yes standard library obviously probably maybe build,latte http lattecentralgithubiolatte karl latte laboratory type theory experiment clojure latte proof assistant library based type theory variant λd described book type theory formal proof introduction specific feature latte design library unlike proof assistant generally designed tool tightly integrated clojure language course fully implemented clojure importantly definitional aspect assistant definition theorem axiom handled using clojure namespaces definition macro example fact logical implication reflexive stated directly clojure toplevel form defthm implrefl implication reflexive type declared theorem implrefl plain text assuming type implies proof theorem also constructed clojure form either giving lambdaterm direct proof exploiting propositionastype proofasterm correspondance proof implrefl qed lambda x x qed implrefl ie identity function proof reflexivity implication using declarative proof script proof implrefl assume x concl x qed concl qed implrefl training read standard mathematical proof assuming hold hypothesis named x deduce x hence implies stated qed course proof checked correctness without introduction inconsistent axiom assuming correctness implementation latte kernel mathematical inconsistency introduced proof form yes latte help formalize mathematic concept construct formal proof theorem proposition concept given tight integration clojure language existing clojure development environment eg cider cursive used quite effective interactive proof assistant standard library obviously come latte may interest obviously interested type theory way implemented computer latte implemented readability simplicity mind efficiency correctness probably interested mechanical formalization mathematics intuitionistic logic etc although might learn much may interested contributing definition theorem proof maybe curious lambdacalculus underlying theory favorite programming language dependent type current trend besides programming latte least experiment finalized product already usable nontrivial formalization conducted using latte contribution mathematical content enhancementcorrection underlying machinery much welcomed build running test clj test building documentation clj codox copyright c frederic peschanski mit license cf license
288,Lobsters,clojure,Clojure programming,Open Source is Not About You,https://gist.github.com/richhickey/1563cddea1002958f96e7ba9519972d9,open source,open source,open source people entitled say open source ought work people run project scope entitlement extends project someone open source something imply owe world change status focus effort eg inventor community manager user something open source thereby entitled anything entitled contribute entitled feature entitled attention others entitled value attached complaint entitled explanation expectation others nt met expectation responsibility responsible need want thing make open source licensing delivery mechanism period mean get source software right use modify social imposition associated including idea communitydrivendevelopment part recentlyinvented mythology little basis thing actually work mythology embodies cultlike lack support diversity way thing work pervasive sense communal entitlement think cognitect anything community listening community simply wrong however entitled effort focus response desire get make choice regard time life cognitect show work every day make living get royalty kind clojure way building clojure profit far fewer clojure user consulting product customer thus contributing livelihood take earn money could eg go retirement saving instead use hire people work clojure community outreach fulltime honest could use money retirement account depleted make clojure first place love working team clojure proud work alex miller extremely attentive engaged clojure community stu halloway regularly meet discus community issue alex direction spends majority time either working feature community assessing patch bug report spend significant portion time designing feature spec toolsdeps error handling come time taken away earning living grateful contribution community every clojure release incorporates many contribution vast majority user community nt contribute nt desire contribute fine open source nostringsattached gift participant recognize clojure process closed conservative think clojure benefit greatly conservatism contrast project high churn rate feature bloat disagree imagine otherwise bad life going spend arguingnegotiating onwith internet write thing run project see fit always specious claim core team standing way meaningful contribution clojure opportunity abound library development outreach training tutorial documentation giving talk tool building etc yes patch core know patchesissues poor problem statement description plan read code consideration alternative test design illconceived andor broken way community effort triage matter lot moving thing forward thanks nicola ghadi many others time reexamine preconception open source right morale erosion amongst creator real thing preconception act upon responsibility alone going answer way clojure work nt process produced clojure first place paradoxically sure know better one true way write software kindly nt burn community way selfserving proclamation yes everyone entitled opinion tragedy common encourage everyone gnashing teeth negativity think ca nt instead pick something positive rich p partner coworkers cognitect consulted regarding message certain would dissuaded opinion mine alone pps think vast majority people clojure community wonderful positive nt recognize message forabout
290,Lobsters,clojure,Clojure programming,Testable Clojurescript apps,https://juxt.pro/blog/posts/cljs-apps.html?access-token=headphones,testable clojurescript apps,world need enlightenment reframe reagent gim one vision people already know use figwheelmain template isolate view spec model reframe documentation reframe documentation model test goo view test devcards automatic people kamera next post laciniagen martiantest conclusion repartee,world need enlightenmenti asked recently colleague let call stathis anonymity sake wait let call mr sideris put frontend apps together wanted particular understand consider using reframe new project similar situation year ago reading reframe introduction several time still nt quite get went ahead without using reagent rendering code managing data statethis worked fine first growing pain found repetitive boilerplate code emerging point went back reframe time clicked implementation slowly approaching properly thoughtout refined thing learn learn aristotle replacing code reframe though reframe changed way thought app structured presented opportunity make test better good fortune build four new apps client last three year would like share approach refined time promotes simple code comprehensive testing ability scale mean add feature without becoming big tasty bowl spaghettiwith whimsy staff japery compass let u begin gim one visionimagine building typeahead currently typeahead library available github need single universal typeahead library supercede alla typeahead typically involves several thing local state user type data server suggestion match user typed input box screen user type intoa display suggestion screen user selectwe would like typeahead look something like following prejudiced typeahead implementation seen journey infinite scroll internet make look broadly similar people already know use design principle called familiarity familiar termbefore get going need following thing clojurescript project reagent reframe figwheel develop instant feedbackyour favourite browser ready fig wheelan empty washing liquid bottlea paperclipsyou use figwheelmain template get first two thing others available ebay shop discounted price reader blog post use discountcode get offisolate viewyou might think application used follows could test like problem delving nested html structure make assertion complicated difficult read prone breaking still nt tell display make sense user cs class might render whole thing invisible make ui display want drive click typing arduous reach deep corner caseit hard make assertion photon might hit user eyeball complicated mercurial api million year hack workarounds new feature bug decent driversif server start returning different data way knowing app breakwe tempted complect rendering data management make hard testour data end scattered closedover atom preventing code reuse toolingwe would like separate eyebally bit sandbox nt pollute rest code deal pure computery data let split ui two part data model mmmm fresh view full sticky goo found eyeball one job representing data userthe specthe boundary code good place test model deal purely data testable normal mean view deal purely html requires different testing methodology therefore make sense introduce check boundary two output model consumed view define spec look something like sdef query snilable string sdef loading boolean sdef value string sdef value scollof value sdef suggestion snilable skeys requn loading optun value sdef component skeys requn query suggestion build model output data view consumes dataa modelthe reframe documentation colourful description data flow like water cycle state world used render app user seeing app interacts generates event event folded current state world produce next state world render updated view user interact whole cycle go forever consuming event rendering update growing like black hole engulfing universe destabilising entire galaxy infinite gravity well spewing radiation eventually chrome tab run memoryfor typeahead water cycle black hole death deal part ui nt involve goowe encode flow data using reframe two main concept event handler subscription unfamiliar suggest first read informative entertaining reframe documentation returning pick left work side project meantime watch episode better call saul welcome back shall begin event occur user type something ask server suggestion response server arrives user chooses suggestion every time event happens store data database note event exception asking server happen asynchronously real life user type something ask server suggestion reframeregeventfx onquery fn key db q merge db db associn typeahead query q associn typeahead suggestion loading true stringblank q dispatch onsuggestions dispatch serverfetchsuggestions q onsuggestions server responds suggestion reframeregeventdb onsuggestions fn db suggestion associn db typeahead suggestion loading false suggestion suggestion user chooses suggestion reframeregeventdb onchoose fn db suggestion associn db typeahead query suggestion need way get data reframe database view render subscription reframeregsub suggestion fn db query getin db typeahead suggestion reframeregsub query fn db query getin db typeahead query reframeregsub typeahead fn reframesubscribe query reframesubscribe suggestion fn query suggestion query query suggestion suggestion data egg reframe basket easy write meaningful test benefit aspect like tooling eg logging dump restore moremodel testswe use spec assert regardless user type server return main typeahead subscription always return data satisfies defn stubserverresponse expectedrequest response reframeregeventfx serverfetchsuggestions fn q callback expectedrequest q dispatch conj callback response deftest queryingtest runtestsync stubserverresponse foo bar let reframesubscribe modeltypeahead testing user type something reframedispatch modelonquery foo query foo suggestion loading false value bar svalid speccomponent demonstrates model code output data fit spec also make hardtotest asynchronous call server behave synchronously using stub feature really useful making complicated model easily testable also let test transient state data requested response received deftest loadingsuggestionstest runtestsync reframeregeventfx serverfetchsuggestions fn q callback foo q dispatch callback order observe state server returned response let reframesubscribe modeltypeahead testing user type something reframedispatch modelonquery foo query foo suggestion loading true svalid speccomponent test nt need run asynchronously complicated locking suffer race condition reframe separated covered following part testing goothe view data meet random load html hopefully present data way make sense user best way testing render something look let write reagent code manifest vision html tag form defn suggestion key loading value divsuggestions loading divloading loading suggestion seq value ul mapindexed fn v li key str v onclick reframedispatch modelonchoose v v value suggestion found please try another search defn typeaheadcomponent model divtypeahead input type text value query model placeholder start typing see suggestion onchange reframedispatch modelonquery target value suggestion suggestion model sfdef typeaheadcomponent args scat model speccomponent defn typeahead let model reframesubscribe modeltypeahead fn typeaheadcomponent model notice simple changing data get passed around pure transforming function represent data directly htmlview testsi use devcards exercise view code assertion use gooey eye devcards make practical allows render many permutation data build screen showing visual edge case one go know using realistic data card check spec ensure turning instrumentation blow test data drift spec defn typeahead svalid speccomponent typeaheadcomponent diverror bad input pre code sexplainstr speccomponent defcardrg typeahead div initial state typeahead query nil suggestion nil loading suggestion typeahead query computer suggestion loading true suggestion typeahead query computer suggestion loading false value computer acting weird computer potato suggestion typeahead query bz suggestion loading false value go one step try render randomly generated data using spec defcardrg generatedtypeahead let model gensample sgen speccomponent div mapindexed fn div key pre prstr typeahead model quickly found react problem duplicate key suggestion appeared multiple time also forced consider suggestion empty string look really weird fix place know thatmy model always output data conforming specmy view properly display data conforms specautomatic peoplereviewing devcards eye release nt onerous still easy forget harder still track change broke ui automating step natural way go combination chrome headless imagemagick possible capture screenshots diff devcards reference version written library called kamera introduce next post final piece puzzle servermodel boundary knew sort data server might return could prove model handle model handle know ui display itsome api technology selfdescribing among graphql swagger openapi written data generation library laciniagen martiantest respectively allowing generate data server return input model testswe know thatwhatever data server generates user provides model accept inputwhatever input model output data conforming specif data conforms spec view code display correctlythe transitive property test prof render everything properly application work expected add full stack testing cva bonus also know server api change run model test find need make changesif need change model code wo nt need touch view codeif want change data represented need change view codeahh bonus deep bonus nt know heard counting thousandconclusionwith separation concern introduction code boundary assertion made boundary improve way build test apps model simple one job managing event alter state delivering data view view simple one job representing data html bit like ship built compartment watertight small enough one breached sealed stop ship sinkingon rather apt metaphor software development recap library tool used code example toy project called repartee created demonstrate principle blog post
291,Lobsters,clojure,Clojure programming,CUDA 10 in Clojure,https://dragan.rocks/articles/18/CUDA-10-in-Clojure,cuda clojure,,asyncenginecount managedmemory true multigpuboard false maximumtexturecubemapwidth eccenabled false maxpitch maxgriddimy computemode default canmaphostmemory true maxgriddimz pcibusidstring texturepitchalignment kernelexectimeout false maxsharedmemorypermultiprocessor totalmem maximumtexturecubemaplayeredlayers maxblockdimz name geforce gtx ti maxthreadspermultiprocessor maxsharedmemoryperblock computecapabilitymajor texturealignment globalmemorybuswidth memoryclockrate maximumsurfacecubemaplayeredlayers clockrate concurrentkernels computecapabilityminor maxthreadsperblock integrated false maxblockdimx true pcibusid maximumsurfacecubemaplayeredwidth maxgriddimx true maximumtexturecubemaplayeredwidth multigpuboardgroupid pcidomainid streamprioritiessupported true multiprocessorcount tccdriver false warpsize unifiedaddressing true maximumsurfacecubemapwidth pcideviceid maxregistersperblock maxblockdimy surfacealignment totalconstantmemory maxregisterspermultiprocessor
292,Lobsters,clojure,Clojure programming,Some thoughts on Clojure performance (2012),https://martintrojer.github.io/clojure/2012/02/18/some-thoughts-on-clojure-performance,thought clojure performance,rich hickey clojureconj keynote mailing list stack overflow leiningen computer language benchmark game getting taking long daniel solano clojureconj slide dalvik vm clojurescript rescue javascript engine google closure unveiled computer language benchmark game time complexity conclusion nodejs,edit post recently resurfaced hacker news caused bit stir mainly slightly sensationalmisleading title clojure slow wrote rich hickey clojureconj keynote published talk concern outline possible solution clojure great many way one thing accused particularly fast mean fast speed clojure program execute well known issue clojure community discussed mailing list stack overflow intending troll fuel fire jotting finding looking matter measuring speed code quite tricky many part program especially true clojure program jvm clojure bootstrapping dynamic compilation part puzzle fact remains running tool like leiningen lein jackin annoyingly slow mainly clojure program take long time spin even clojure running particularly fast compared jvm cousin see computer language benchmark game getting slow startup time probably notice first starting code clojure anything running first hello world starting repl painful average number simple hello world program taken macbook pro language total running time osx relative total running time ubuntu relative c printf c mono f mono java scala groovy jruby noncompiled clojure uberjar see java account startup time unfortunately clojure add another second top pause main get called clojure unsuitable terminal script running time script like lein starting repl totally dominated startup time clojure developer notice much since spend almost time repl user clojure program clr mono faster getting going jvm big plus py language also note difference f c much smaller clojure java excusepresident functionaldeclarative language start slower bare counterpart use clojureclr mono stuff like lein well currently stand clojure startup time even worse clr hello world example clock using debug clojureclr assembly difference clojureclr c order magnitude worse clojure java work left done clojureclr taking long daniel solano gave talk clojureconj clojure android slide performance part talk give valuable insight clojure internals happens start summary spends startuptime loading clojurecore namespace clojurelangrt class particular filling metadatadocstrings etc method process stress gc quite bit object allocated freed multiple invokes gc time building meta data one big source massive object churn edit using verbose gc flag running clojure test notice single collection taking different daniel finding hardly surprising since measured performance dalvik vm daniel mention idea improve situation idea sound pretty good separate jar development want docstring etc repl slim one stuff removed runtime jar confused existing clojureslim jar file serialising clojurecore initialisation dumped memory disk starting clojurescript rescue clojurescript google blistering fast javascript engine another way go using clojurescript compiler hello word example advanced optimisation end javascript engine run faster bare java version faster clojurejvm version google closure compiler certainly help removing lot unused code resulting javascript file indeed free docstrings etc also rich hickey mention clojurescript clojure script story unveiled clojurescript last year one main benefit much improved startup time fast clojure running code finally got going look around computer language benchmark game give good idea clojure average slower java slower scala couple reason biggest factor clojure immutable data structure fact immutable data structure always slower mutable counterpart promise clojure persistant data structure time complexity mutable equivalent fast constant time factor play big role running time benchmark run second clojure startup time factor result well finally dynamic language generally slower static one extra boxing overhead etc conclusion leave u clojure beautiful powerful useful language current incarnation great small scripty program problem startup time solved either change clojure exploring clojurescript route personally like javascript track javascript lower processor space overhead jvm making clojurescriptscripting better clojure widely used reaching embedded system etc however order make clojurescript viable option nonbrowser program certainly work done building nodejs integration look like interesting path
293,Lobsters,clojure,Clojure programming,Genetic Programming in Clojure,http://sulami.github.io/posts/genetic-programming-in-clojure/,genetic programming clojure,theory http practice actual practice sexpression,posted november theory like programmer always vague interest ai one branch requires le complicated math recurrent neural network well known one genetic programming idea genetic programming quite simpleif visual example believe good practical example http build something parameterised key place build scoring function ass performance something set parameter randomly adjust mutate parameter way couple time compare score set take best one one base start new round mutation scoring basically repeat step parameter tend towards maximum score depending variety metaparameters control example size generation nature mutation might find local maximum often time yield pretty good result variety problem practice toyed around last couple day built simple abstract implementation clojure going share eventually somewhere github well let u explore inside first need able generate mutation specimen assume anything specimen end quite simple lot heavy lifting done outside implementation specific problem question return potentially infinite list containing first specimen passed many mutation want defn mutate generator mutates base first element base base mutator concat base repeatedly mutator base next also need able score case would like attach score specimen use sort select specimen without losing specimen defn attachscore attache score specimen scorefn specimen specimen scorefn specimen let u begin tie together single generation take base specimen mutate couple time score select fittest based scoresthis also keep best specimen every generation make code much simpler actual real world usage might beneficial keep best n specimen every generation avoid running local maximum would make mutation slightly complex though would several base specimen need mutated decided leave feature purpose explanation note implementation lower score better change reverse sorting defn generation pick best one generation base mutator scorefn gensize mutate base mutator take gensize map partial attachscore scorefn sortby second first first finish need run number generation based previous one winner defn evolution generator generation base mutator scorefn gensize iterate generation mutator scorefn gensize base lazy nature implementation allows u inspect intermediate result easily see path evolution taken form generation winner actual practice actually much code abstract nature let u look look like actually use simple example would approximating single number hard approximate like specimen float initial seed parameter mutate adjust random amount within either direction defn mutator base rand base scoring function cheating little already know target compare use distance score defn scorefn x x mathsqrt mathabs run see approximates target value time take evolution base mutator scorefn evolution return infinite sequence use nth get winner certain number generation simple example currently working way using build mutate clojure sexpression score running series unit test generated code work might write soon
294,Lobsters,clojure,Clojure programming,Datafy and tap> in Clojure 1.10,https://www.birkey.co/2018-10-26-datafy-and-tap%3E-in-clojure-1.10.html,datafy tap clojure,,oct noticed couple new feature added clojure one tap added core n datafy added clojuredatafy n tap essentially atom holding set fns single arity asynchronously called value send via tap add single arity fn tap via addtap f remove fn via removetap f note remember fn added remove otherwise way removing fn inconvenience might reason way sure intended use case know come handy set transformation important order transformation matter would like apply value asynchronously think following us case tap collecting sort diagnostic information running system streaming serious value processed routed sink somewhere may used rather abused execute code hope enough said let u see simple example cover first us case said def context stringbuilder defn x doto context append x let u add fn tapset addtap running code tap tap start n tap runing tap tap end n executed separate dedicated thread block interfere running code print context str context result tap start runing tap end remember remove fn done session removetap fn added tap value send tap discarded tap magic magic discarded one noticed datafy excited already using find java class member method object graph let u take java class string example require clojuredatafy ddatafy string print member nice clojure d let u write fn give use member would like find defn memberlookup class member class ddatafy member filter fn v symbol member k use find intern memberlookup string intern return intern name intern returntype javalangstring declaringclass javalangstring parametertypes exceptiontypes flag public native one learn lot method d intern public native method take argument called string object return string like intern test test mean use information create clojure fns fly java interop one great use case would generate clojure fns aws java sdk might time permit
295,Lobsters,clojure,Clojure programming,Procedural Dungeon Generation: A Drunkard's Walk in ClojureScript,https://blog.jrheard.com/procedural-dungeon-generation-drunkards-walk-in-clojurescript,procedural dungeon generation drunkard walk clojurescript,procedural dungeon generation drunkard walk clojurescript game drunkard walk kyzrati excellent introductory blog post procedural map generation unreliable,procedural dungeon generation drunkard walk clojurescript oct def canvasid atom defn drawgrid grid let canvas jsdocumentgetelementbyid canvasid ctx getcontext canvas width count first grid height count grid canvaswidth width canvas canvasheight height canvas cellwidth canvaswidth width cellheight canvasheight height clearrect ctx canvaswidth canvasheight set fillstyle ctx ccc loop x height grid get get x empty doto ctx beginpath rect x cellwidth cellheight cellwidth cellheight fill recur identical dec x width inc x identical dec x width inc working toy game figured fun learn write code generates random level like show simple algorithm level generation called drunkard walk generates level look like see level twodimensional grid cell grid either empty full empty player wander around find monster gold item stuff full cave wall player smack drunkard walk algorithm start totallyfilledin level hollow one cell time let start defining function creates filledin level defn fullgrid width height vec repeat height vec repeat width full fullgrid code snippet article interactive go ahead change last line fullgrid see happens fullgrid function good start output really look like cave let fix provided drawgrid function take grid draw like drawgrid fullgrid interesting cave let try empty cell carved hand sure drawgrid function actually work fullgrid associn empty associn empty associn empty drawgrid mention code article interactive play around go nut hollow cell make whole level empty remove drawgrid call see actual grid datastructure look like cell hollowed okay drunkard walk algorithm look like pick random cell grid starting point carved enough empty spot done walk one step random cardinal direction north south east west diagonal carve new spot go back step almost ready implement first let define little helper function use make sure stay within bound grid try walk gaping void beyond defn boundbetween number lower upper cond number lower lower number upper upper else number boundbetween okay go defn drunkardswalk grid numemptycells let height count grid width count first grid guard impossible demand numemptycells width height loop grid grid step pick random cell x randint width randint height emptycells step done return grid emptycells numemptycells grid let cellwasfull getin grid x full step walk one step random direction direction randnth north east south west step back step recur associn grid x empty case direction east boundbetween inc x dec width west boundbetween dec x dec width x case direction north boundbetween dec dec height south boundbetween inc dec height cellwasfull inc emptycells emptycells fullgrid drunkardswalk drawgrid fruit labor focus code snippet press controlenter time generate level neat huh go make grid carve cell looking generated level often find wondering exactly happened make level turn way come little tool help answer question particular algorithm try dragging slider around drunkard walk learned kyzrati excellent introductory blog post procedural map generation usually generates surprisingly cavelike level always connected never two separate subcaves separated wall bad news probably want actually use generate level video game main problem unreliable dang random sometimes generate super cool tunnely cavey level sometimes generate boringlooking blob pretty fun play though worry look useful algorithm next time defn drawtopcanvas reset canvasid fullgrid drunkardswalk drawgrid drawtopcanvas generatebutton jsdocumentgetelementbyid addeventlistener click fn e drawtopcanvas
296,Lobsters,clojure,Clojure programming,Exploring a shipping puzzle,https://kevinlynagh.com/notes/shipping-puzzle/,exploring shipping puzzle,exploring shipping puzzle back kevin homepage part shipping puzzle leg data set first try simplest thing could work second pas performance third pas alloy model relational table future work part choco optaplanner email lynaghk,exploring shipping back kevin homepagepublished october updated november friend recently told puzzle great excuse explore programming craft article outline approach solving puzzle first via brute force clojure clojure eye towards efficiency alloy try declarative approach update see part solution proof shipping puzzle puzzle given set leg consisting day week origin destination pdx sea pdx sfo sea den w den pdx r pdx den f den jfk leg partitioned route individual airplane subject following constraint destination one leg must match origin next leg plane must keep moving eg route consist monday seattle portland leg followed wednesday portland tacoma leg since plane would idle tuesday trivial solution meeting constraint would consider leg separate route would require lot plane puzzle find partitioning fewest possible route example know need least two route since two leg scheduled tuesday one possible solution one plane fly pdx sea den pdx den jfk second plane fly tuesday pdx sfo leg want try hand puzzle try leg data set first try simplest thing could work first encounter new problem try wrap head around first trying simplest thing could work help get handle problem let test understanding fundamental start worry thing like efficiency calculation optimality solution etc started clojure since language make easy interactively sketch little bit code first thing parse input data data structure modeled domain unordered set map map corresponding leg def leg strsplit slurp legstxt n map fn let id start end dow strsplit id id start start end end dow dow set simplest way could think find partitioning necessarily optimal one consider leg day week starting monday monday route progress need create new route assign new plane monday leg look tuesday leg either add leg existing route plane leg origin tuesday create new route starting leg free plane leg origin tuesday repeat day week since going leg assigning leg route know use know algorithm optimal fast correct first pas def tomorrow w w r r f defn addlegs dow possiblelegs route reduce fn route key start l iflet r route filter let lastleg last dow tomorrow dow lastleg start end lastleg first route disj r conj conj r l conj route l route possiblelegs defn leg let dowlegs groupby dow leg addlegs dowlegs addlegs dowlegs addlegs w dowlegs w addlegs r dowlegs r addlegs f dowlegs f leg data set code find route second ghz macbook air note first pas calling addlegs multiple time look awkward hindsight development process led felt quite natural writing code manually evaluated monday verify base case behavior monday tuesday verify adding leg behavior confident result correct simply added rest week come full solution struggled whether wanted reduce day leg set existing route chose leg easy ensure assigned within reducing function ie leg filter may look existing route try find plane existing route reuse given leg efficient since mean potentially looking unextendable route needlessly many time soon assign new leg routeplane plane longer free ignore assigning day leg clojure immutability sometimes feel awkward eg extend route leg wrote route disj r conj conj r l meaning given set route remove route r add route r extended l conj r l interestingly update route r conj l work apparently update work map set expect algorithm optimal partition minimal number route get rough sense optimality updated algorithm randomly choose available leg ie within reducing function replaced first nilpunning randnth run function likely yield different legal partitioning interestingly dozen solution sampled way number route mean optimal suggestive second pas performance second pas punted optimality question favor writing faster implementation algorithm two optimization index current location plane routesbyposition stop considering route know longer extended outbound leg outer loop go day week inner loop go thorough available leg day week defn leg let dowlegs groupby dow leg loop dow dows w r f routesbyposition finishedroutes nil dow done reduce finishedroutes vals routesbyposition else get today leg try attach route let extendedroutesbyposition unextendedroutesbyposition loop l l dowlegs dow extendedroutesbyposition unextendedroutesbyposition routesbyposition nil l extendedroutesbyposition unextendedroutesbyposition iflet r unextendedroutesbyposition get start l first add leg route recur l update extendedroutesbyposition end l conj conj r l update unextendedroutesbyposition start l rest leg ca nt added existing route start new one recur l update extendedroutesbyposition end l conj l unextendedroutesbyposition recur dows extended route keep extended extendedroutesbyposition route nt extended today must finished move wo nt slow future calcs reduce finishedroutes vals unextendedroutesbyposition solution also find route m thousandth time first solution bad thing note lot code first solution probably difficult follow wrote comment implementing writeup inner loop result destructuring feel awkward best could within context immutable data structure clear long name extendedroutesbyposition net win loss byposition suffix reminder map indexed position number route found first attempt returned route different artifact underlying data structure work first algorithm route extended given leg depends arbitrary iteration order clojure set implementation second recently seen route given location one extended since conj add front list third pas alloy model fun thought also solve problem alloy verification tool based first order relational logic abstract sig dow tomorrow lone dow one sig w r f extends dow fact tomorrow w w r r f abstract sig leg start string end string dow dow sig route leg seq leg fact route ca nt duplicate leg r route rlegshasdups leg must follow time space r route l l rlegselems plus rlegsidxof l rlegsidxof l lstart lend ldow ldowtomorrow sharing leg disj r r route rlegselems rlegselems leg must consumed route leg routelegselems run show one fun aspect alloy like typical programming language merely process provided data rather alloy generate instance data conform constraint give tell alloy name city fact citynames legstart legend pdx den sea sfo jfk generate instance even present visually bit clearer read alloy relational table pdx sea den pdx jfk sfo alloy generated two route wednesday jfk sfo route thursdayfriday den pdx sea route satisfy general constraint problem well citynames constraint city must appear alloy actually facility reading file parsing string solve actual puzzle imported data writing clojure program generate constraint alloy source code one sig extends leg dow start pdx end sea one sig extends leg dow start pdx end sfo one sig extends leg dow start sea end den one sig extends leg dow r start pdx end den one sig extends leg dow w start den end pdx one sig extends leg dow f start den end jfk found satisfying instance alloy alloy worked great example leg beyond graphical tabular output interactively allow click see possible solution unfortunately alloy run memory problem well leg data set clear change program avoid knock alloy value something like alloy let think problem high level keeping getting lost weed thinking thing like data structure example solver log output var primary var clause certainly feel like var problem actually perhaps thing would faster constraint could rewritten without alloy sequence sugar int relation future work fun keep justcomplicatedenough problem like back pocket since make worthwhile exercise try different languagestechniques thing like try mutable data structure clojure explore clarity performance maybe java queue parallelism rust update see part actual constraint solver designed sort problem like choco optaplanner found via minute googling please email lynaghk relevant tool booksarticles
297,Lobsters,clojure,Clojure programming,Datomic: Event Sourcing without the hassle,https://vvvvalvalval.github.io/posts/2018-11-12-datomic-event-sourcing-without-the-hassle.html,datomic event sourcing without hassle,event sourcing event sourcing usually done difficulty conventional event sourcing designing event type event handler hard work detecting indirect change still hard transactionality difficult achieve conflating command event datomic datomic model processing event datomic costbenefit analysis conclusion see also datomic note event sourcing stackoverflow get state previously changed recently event sourcing event sourcing consists keeping track current state entire sequence led benefit event sourcing nt lose information reproduce past state data synchronization materialized view notification event sourcing usually done event type event event handler aggregate reaction asynchronous eventually consistent difficulty conventional event sourcing eventstore kafka designing event type event handler hard work case study ad hoc writes naming granularity semantics hard get right enumeration applicationdefined event type weak language describing change detecting indirect change still hard case study need query power determine event affect downstream aggregate event log offer little query power transactionality difficult achieve case study transaction hardly compatible eventually consistent writes conflating command event article event sourcing conventional event sourcing tempts forget essential distinction command event command event datomic datomic model official documentation datom database value datalog transaction request transaction processing event datomic datomic database value viewed aggregate one maintained synchronously extra effort contains data stored event queried expressively log api transaction combined database value compute effect change straightforward way reified transaction costbenefit analysis get benefit event sourcing still difficulty conventional event sourcing designing event type event handler hard detecting indirect change hard transactionality hard achieve conflating command event datomic limitation write scale dataset size data model universal schema rdf especially good infrastructure proprietary conclusion significant technological feat explains reap benefit event sourcing much le effort limitation conventional event sourcing implementation event sourcing demanding got accustomed see also edit hacker news rprogramming dddcqrs mailing list,event sourcing event sourcing usually donedifficulties conventional event sourcingdesigning event type event handler hard workdetecting indirect change still hardtransactionality difficult achieveconflating command eventshow datomic itdatomic modelprocessing event datomiccostbenefit analysisconclusionsee also got started using datomic database remember someone describing event sourcing without hassle built event sourcing system without datomic think well put although might obvious especially nt much experience datomicin article describe briefly event sourcing conventionally implemented analyze limitation contrast datomic enables achieve benefit see use case datomic enables u implement event sourcing much le effort importantly agility mean le anticipation planningnote affiliated datomic team way user datomic event sourcing today information system implemented centralized database storing current state might say current knowledge system database usually big mutable shared data structure supported database system postgresql mongodb elasticsearch combination instance q website stackoverflow could backed sql database table question answer user comment tag vote etcwhen data current state system ask question present example title question user answered question etc turn may important question present get sequence event led current state useful audit trail analytics etc example many time time user typically change content question state previously especially useful investigating bug example tag associated question last monday changed recently useful reacting change particular propagating novelty example question affected change directly last hour event caused reputation user evolve last minute event sourcing architectural approach designed address question event sourcing consists keeping track current state entire sequence state transition led state transition called event source truth system current state past state inferred hence name event sourcing sequence event stored event log important understand event log accumulateonly event normally ever appended log never modified erasedbenefits event sourcing nt lose information since ever add data already written particular possible reproduce past state systemdata synchronization easier since determine data recently added propagate novelty component system let build materialized view eg representing data search analyticsoptimized query engine elasticsearch send notification eg browser ui etc event sourcing usually doneat time writing conventional way implementing event sourcing follows design set event type suited domain instance usercreatedquestion userupdatedquestion usercreatedanswer uservotedonquestion etc event record containing event type timestamp added log data attribute specific event type eg questionid userid etc downstream event log event processed event handler maintain aggregate data instance document store containing one document per question trigger reaction event eg sending email user one question answered importantly technological reason processing event typically asynchronous implication aggregate best eventually consistent log aggregate lag behind log event handler process event log sequentially maintain aggregate back q example event could look like edn format eventtype usercreatedquestion eventtime inst userid questionid questiontitle event sourcing questionbody heard lot event sourcing sure exactly could someone explain questiontags programming eventtype userupdatedquestion eventtime inst userid questionid questiontitle event sourcing eventtype usercreatedanswer eventtime inst userid questionid answerid uuid answerbody event sourcing eventtype uservotedonquestion eventtime inst userid questionid votedirection voteup sequence event user created question event sourcing updated presumably correct title user created answer question user upvoted question could feed aggregate representing question jsonlike document questionid questiontitle event sourcing questionbody heard lot event sourcing sure exactly could someone explain questiontags programming questionnupvotes questionndownvotes questionauthor userid username jane p hacker userreputation questionanswers answerid answerbody event sourcing answerauthor userid username alice doe userreputation difficulty conventional event sourcingregardless implementation technology used eventstore kafka plain old sql common difficulty arise conventional event sourcing approach described try categorize sectiondesigning event type event handler hard workcase study many way update question designing initial version q website wondering proper event type updating question thinking userupdatedquestion maybe granular enough finergrained userupdatedquestiontitle maybe make many event type handle implementing event handler take forever opt general userupdatedfieldofentity log become harder make sense also since question may changed someone else author maybe questiontitlechanged better way go track action caused user month later system production tom key account manager burst office highprofile expert convinced come answer one popular question exchange exceptional gift point reputation could make happen tonight think minute event type exceptional change reputation sorry reply impossible change reputation user without coming vote need make specific development good old day current state one database approach design suitable representation state space power query language navigate space example relational database would declare set table column power sql change data stored life easy conventional event sourcing anticipate every change going want apply state design event type implement event handler event type ad hoc writes especially difficult new way write call new code naming granularity semantics hard get right designing event type better get right first place unless rewrite event log event type processed event handler entire lifetime codebase since reprocessing entire log assumed frequent operation many event type may result work implementing event handler hand coarsegrained event type le reusable think lesson enumeration applicationdefined event type weak language describing change detecting indirect change still hardcase study linking question upvotes user reputation writing event handler aggregate keep track reputation score user basic keyvalue store associate userid number particular time upvote question must increment reputation question author problem current form uservotedonquestion event type contain userid question author id question change uservotedonquestion event type explicitly contains id author would redundant know many thing want add later event type make new aggregate change aggregate also keep track question user relationship would make complex likely redundant work aggregate event log give precise data changed point time mean data trivially actionable update aggregate based event need compute event affect aggregate dealing relational information model event may entity indirectly affect another entity b relationship b apparent event example event type uservotedonquestion affect user entity without directly referencing need query power determine event affect downstream aggregate event log offer little query powerthere several strategy mitigate problem important caveat denormalize event type add data effectively precomputations aggregate mean code produce event need anticipate way event consumed sort coupling trying get away event sourcingyou enrich aggregate keep track relational information need make event handler complex implement potentially redundant add intermediary aggregate keep track relational information produce stream enriched event probably better solution still take work still need aware need downstream aggregatestransactionality difficult achievecase study preventing double answersyou investigating bug q website user managed create answer question supposed happen indeed user try create answer code check via questionsbyid aggregate user yet created answer question usercreatedanswer event emitted check failsyou realize caused race condition time answer added log time made way questionsbyid aggregate answer added thus passing check great think love debugging concurrency issue program consist aggregating information various data source presenting information new way analytics dashboard accounting system example program event sourcing relatively easy implement system ca nt described simply buy something ecommerce website nt inform buying something request make purchase payment information correct inventory exhausted ecommerce decides create order even basic administration feature enough get aggregating information realm see arise need transaction catch transaction hardly compatible eventually consistent writes get default processing event log asynchronouslyyou mitigate issue aggregate updated synchronously event log mean adding event longer simple appending data record end queue must atomically update queryable representation current state eg relational database also important realize transaction allowing event log also computing instance order ticket show online ticketing system must consult inventory choose seat number even adding cart must happen transactionally lead u distinction command eventsconflating command eventsin conventional event sourcing another common approach addressing transactionality issue outlined add another sort event request change without committing instance could add userwantedtocreateanswer event later processed event handler emit either usercreatedanwser event eventcreationwasrejected event add log event handler course need maintain aggregate keep track answer creationsthis approach advantage freeing race condition add significant complexity handling event sideeffectful idempotent since special new event handled exactly careful reprocessing log see martin fowler article event sourcing detail caveat finally mean forcing asynchronous workflow producer event hey thank submitting form unfortunately idea request processed stay tuned complexity arises fact conventional event sourcing tempts forget essential distinction command event small refresher notion command request change usually formulated imperative mood eg additemtocart typically want ephemeral processed exactly oncean event already mentioned describes change happened usually formulated past tense indicative mood eg itemaddedtocart typically want durable processed many time likefrom perspective transactional engine process turn command eventscommands event play different role surprise conflating result complexityhow datomic itdatomic model see also official documentation datomic model information collection fact fact represented datom datom entityid attribute value transactionid added entityid integer identifying entity eg user question described fact akin row number relational database attribute could something like userfirstname questionauthor akin column relational database value content attribute entity eg john transactionid identifies transaction datom added transaction entity added boolean determining datom added know fact retracted longer know fact instance datom datom questiontitle event sourcing true could translated english learned transaction entity question title event sourcing datomic database value represents state system point time accurately knowledge accumulated system point time logical standpoint database value collection datoms instance extract q database def dbvalueextract datom userid true datom questionid true datom questionauthor true datom questiontitle event sourcing true datom questionbody heard lot event sourcing sure exactly could someone explain true datom questiontitle event sourcing false datom questiontitle event sourcing true datom answerid uuid true datom answerquestion true datom answerauthor true datom answerbody event sourcing true datom votequestion true datom votedirection voteup true datom voteauthor true practice datomic database value implemented basic list sophisticated data structure comprising multiple index allows expressive fast query using datalog query language relational data logically database value list datoms surprisingly simple model allows representing querying data le effectively conventional database sql document store graph database etc datomic deployment succession growing database value writing datomic consists submitting transaction request data structure representing change want applied transaction request get applied current database value consists computing set datoms add transaction thus yielding next database valuefor instance transaction request changing title question could look like def txrequestchangingquestiontitle dbadd questionid questiontitle event sourcing would result transaction recognize datoms dbvalueextract comment writing datomic dtransact conn txrequestchangingquestiontitle dbbefore datomicdb database value transaction request applied dbafter datomicdb resulting next database value txdata datoms added transaction datom questiontitle event sourcing false datom questiontitle event sourcing true datom dbtxinstant inst true start see deep similarity datomic event sourcing notion laid far transaction request correspond commandstransactions correspond eventsa datomic database corresponds event logwe also see important difference event consist combination finegrained datoms event type prescribed structureevents directly produced application code transaction request command areprocessing event datomicwe study implement event sourcing system datomicfirst let note datomic database value viewed aggregate one maintained synchronously extra effort contains data stored event queried expressively aggregate probably cover querying need seen likely use case adding downstream aggregate search lowlatency aggregation data exportsit also worth noting obtain past value datomic database reproduce past state outofthebox need reprocess entire log def dbatlastxmas dasof db inst use log api get transaction point time comment reading change sequence transaction dtxrange dlog conn txdata datom questionid true datom questionauthor true datom questiontitle event sourcing true datom questionbody heard lot event sourcing sure exactly could someone explain true datom dbtxinstant inst txdata datom questiontitle event sourcing false datom questiontitle event sourcing true datom dbtxinstant inst txdata datom answerid uuid true datom answerquestion true datom answerauthor true datom answerbody event sourcing true datom dbtxinstant inst txdata datom votequestion true datom votedirection voteup true datom voteauthor true datom dbtxinstant inst notice although describe change minimal form transaction combined database value compute effect change straightforward way nt need enrich event make easier process already enriched entire database value best world get absolute incremental view state transitionfor instance query determines user must reputation recomputed vote comment computes set user whose reputation may affected vote dq find userid log query input txids log tx reading transaction txdata log tx vote v op reading datoms vote votequestion q navigating vote question q questionauthor user navigating question user user userid userid db dlog conn easy update userreputation aggregate recomputing reputation probably small set user come change detection basic approach described example get surprisingly far however sometimes nt want know changed want know changed instance may want keep track user caused changeyou may want know ui action change originatedthe recommended way datomic using reified transaction datomic transaction entity add fact example comment annotating transaction dtransact conn fact question dbadd questionid questiontitle event sourcing fact transaction dbadd datomictx transactiondonebyuser userid dbadd datomictx transactiondoneviauiaction usereditedquestion dbbefore datomicdb dbafter datomicdb txdata datom questiontitle event sourcing false datom questiontitle event sourcing true datom dbtxinstant inst true datom transactiondonebyuser true datom transactiondoneviauiaction usereditedquestion true costbenefit analysiswhether usage datomic described true event sourcing depends definition event sourcing important opinion whether get benefit costso let revisit objective common difficulty event sourcing described get benefit event sourcing yes state transition described log event accessible datomic log api high query power datalog consume log event derive aggregate itwe get rich default aggregate datomic database value free reproduce past state outofthebox dbasof still difficulty conventional event sourcing well let see designing event type event handler hard nt design event type design database schema tends map naturally domain model datomic work describing change term datoms handled generically case description enough extend using reified transaction regarding event handler lot longer needed good enough default aggregate database value detecting indirect change hard straightforward compute effect change downstream aggregate since incremental global view state transition transaction database value high query power transactionality hard achieve issue datomic fully acid expressive language writes conflating command event really room confusion datomic let u even emit event write commandsof course datomic limitation get benefit make sure limitation prohibitive use case write scale nt expect make ten thousand writes per second one datomic system read scale okay datomic scale horizontally read hopefully article made clear easy offload read specialized store dataset size need store petabyte data need either complement replace datomic something elsedata model data must lend well represented datomic datomic universal schema inspired rdf good modeling would store table document graphoriented database imagination could probably come something hard represent datomic way contrary popular belief datomic especially good representing historical data infrastructure datomic good running big server machine typically cloud mobile device embedded systemsproprietary datomic opensource people dealbreakerconclusionin addition log change datomic provides queriable snapshot state entire database yielded change directed transactional writes significant technological feat explains reap benefit event sourcing much le effort limitation conventional event sourcing implementationsin traditional cqrs parlance datomic give synchrony expressive command language datomic transaction request actionable event transaction set added datoms powerful relational default aggregate datomic database value hopefully show event sourcing demanding got accustomed long willing rethink bit assumption implementedfinally mention article offer narrow view datomic datomic good event sourcing development workflow testing story composable writes flexible schema operational aspect overly politically correct entire article must pretty boring leave snarky provocative phrase sufficiently advanced conventional event sourcing system contains adhoc informallyspecified bugridden slow implementation half datomic see alsoedit article discussed hacker news rprogramming dddcqrs mailing list
298,Lobsters,clojure,Clojure programming,Introduction to Clojure - Modern dialect of Lisp (Part 1),https://www.creativeapplications.net/tutorials/introduction-to-clojure-part-1/,introduction clojure modern dialect lisp part,resonate magical world lisp festival identity tl dr introduction clojure lisp lambda calculus alonzo church erlang f haskell scala functional philosophy kingdom noun java immutability laziness sequence abstraction protocol multimethods macro async construct concurrency primitive getting know clojure setting environment hello world hello repl clojure syntax summarized symbol var namespaces function metadata truthiness conditionals predicate data structure common data manipulation function sequence looping iteration recursive processing common sequence processing function destructuring reading reference getting know clojure rich hickey reward taking learning curve easier way java clojurescript android native compilation via llvm marmite stripping syntax sexpressions bracket matching rainbow bracket structural editing feature setting environment leiningen leiningen humorous take ant leiningen homebrew regardless need existing java installation java newer machine installing leiningen counterclockwise clojuredoc website hello world hello repl r e p l jruby rhino nt want ca nt install clojureleiningen try example part tutorial using online repl try clojure r e p l input process output prefix notation clojure syntax summarized one rule note pythagorean symbol immutability immutability clojure data immutable default haskell scheme closure monad symbol binding lexical scope var namespaces nt repeat namespaces c package java module python clojure website var used define value interactive programming context repl predefined value clojure source file function java interop feature hypotenuse result last expression function path execution result anonymous function higher order function partial application closure multiple arity varargs guard fail fast designbycontract mr fogus ian rumford metadata clojure website clojure website truthiness conditionals predicate clojure applies general term constitutes truth success considers value apart data structure clojure website list homoiconicity clojure code data data code r xslt postscript metaprogramming genetic programming domain specific language macro stack vector map keywords hashmaps javascript object json set set theory nt allow duplicate value common data manipulation function polymorphism adding element important nested data manipulation removing element immutability one time modified result returned function original collection persistent data structure persistent data structure paper chris okasaki sequence sequence api first next rest con looping iteration recursive processing loop recur tail recursion doseq dotimes common sequence processing function pure function referentially transparent idempotent memoization pure function memoization mapreduce paper mapreduce algorithm couchdb mongodb riak hadoop map important laziness lazy seqs transformation function actually applied original value result needed immediately plain lazy reduce filter take drop concat mapcat histogram infinite sequence since repl always try print result ever call one without guard repl sequence combinators roman numeral list comprehension every apply magnitude destructuring sequential destructuring map destructuring jay field blog post destructuring function arity end part quil processing reading reference clojure mailing list clojuredocorg clojuredocsorg clojure cheatsheets stackoverflow try clojure planet clojure twitter oreilly book joy clojure clojuretoolboxcom clojurespherecom clojarsorg clojurewerkz,back march pleasure attend karsten workshop resonate conference belgrade learned work audio music coding live using clojure programming language great got addicted new way programming made work little tutorial share experience newcomer finished first draft asked karsten technical review kindly accepted couple week month later managed expand transform comprehensive introductory article clojure functional programming cool example hope enjoy without karsten input tutorial would never today big thanks due resonate team putting together awesome event getting back magical world lisp todo list long though first encounter clojure sheer coincidence believe thing took hour realise encounter impeccable timing since nagging feeling become accustomed status quo language using last decade importantly instinctively knew wanted learn use language work badly asap indeed fortunate enough able use clojure several large project since cloud based server appsrenderfarms openglcl desktop apps festival identity quite prepared many door perception inquiry clojure opened wide term process thinking learning code outside box beloved popular language framework using almost daily year tutorial labour love largely meant share finding journey far though admittedly first part crash course hope inspire likeminded soul community keen help realising untapped potential language philosophy bring creative drafting since tutorial grown well beyond scope single article tl dr version releasing stage coming introduction tutorial aim giving taste functional programming clojure modern dialect lisp designed run hosted language java virtual machine increasing number host platform based lambda calculus theory developed alonzo church family functional language long history form one major branch big tree available programming language today largely development hardware increasing number core cpu chip design well appearance language like erlang f haskell scala clojure functional philosophy regaining traction recent year since offer solid plausible approach writing safe scalable code modern hardware architecture core functional idea also slowly infiltrating long established bastion kingdom noun ie inclusion lambda expression latest version java however clojure go much combined feature eg immutability laziness sequence abstraction extensible protocol multimethods macro async construct choice concurrency primitive make interesting choice approaching data intensive distributed application fresh mindset around lightweight modelling section getting know clojure setting environment hello world hello repl clojure syntax summarized symbol var namespaces function metadata truthiness conditionals predicate data structure common data manipulation function sequence looping iteration recursive processing common sequence processing function destructuring reading reference getting know clojure clojure young first release opinionated language whose philosophy challengescontrasts much rich hickey clojure author commonly accepted assumption programming software design therefore requires serious unlearning rethinking anyone ever programmed processing java c etc javascript programmer find idea familiar though since language heavily influenced older lisp implementation even working tutorial series decide clojure new perspective provide food thought useful knowledge continue journey reward taking learning curve gain access idea tool opinion excite anyone interested creative computing process truly interactive programming environment without writecompilerun cycle live coding manipulation even long running complex system language design remove entire class possible bug super active helpful community thousand usersseekers least give alternative insight common programming problem regardless chosen language jvm current main host platform clojure seamless java interop feature full access language humungous ecosystem open source library often easier way java clojure sister project clojurescript equally making headway javascript world number effort underway port clojure platform incl android native compilation via llvm clojure lisp syntax bit like marmite probably many people love hate though case objection usually caused unfamiliarity seemingly large amount parantheses present one immediately obvious eyegrabbing aspect novice looking clojurelisp code however programming language obviously design b strictly true c result stripping syntax special character known language ie semicolon operator overloading curly bracket defining scope etc even comma optional considered whitespace lead concise yet readable code enhanced number powerful algorithmic construct language offer whereas clike language simple functionmethod definition look like c void greeting char fname char lname printf hello sn fname lname c void greeting const char fname const char lname std cout hello fname lname std endl java public void greeting string fname string lname systemoutprintln hello name clojure defn greeting fname lname println hello fname lname calling function cstyle greeting doctor evil clojure greeting doctor evil clojure philosophy syntax pure minimalism boil understanding every piece source code programming language merely definition executable tree structure writing clojure literally defining nested branch tree identified bracket also called sexpressions sexp short symbolic expression even short find bracket seem become automatic mentally disappear especially using appropriate text editor w support bracket matching rainbow bracket structural editing feature also tutorial crash course limited scope provide basic overview core language feature throughout tutorial find lot link reading list clojure related book end without much ado let dive setting environment programming language first need ensure got proper tooling place begin journey unknown land since clojure language runtime environment nt specific requirement editor useful tool however clojure community developed adopted number tool make working clojure even fun first one introduce right away leiningen day software project using large number open source library often dependency anyone ever worked language active community life without package manager seems like pure hell trying manage install dependency manually leiningen defacto build tool used clojure community name humorous take ant former defacto build tool java world lein call tool automating clojure project without setting hair fire truly one easiest way get started clojure much package manager even though tutorial mainly using please head leiningen website follow simple install procedure check system package manager eg homebrew osx brew install leiningen regardless need existing java installation java newer machine installing leiningen clojure community developed integration plugins several popular editor ides start working one counterclockwise next part tutorial list option found clojuredoc website hello world hello repl briefly mentioned beginning clojure provides u fully dynamic programming environment called repl r ead e valuate p rint l oop repl read input user executes print result process rinse repeat read phase convert source code data structure mostly nested list list evaluation data structure first compiled java byte code executed jvm unlike dynamic language running jvm eg jruby rhino clojure compiled language many case similar performance characteristic java repl quickly becomes main sketch pad development tool many clojure user space complex code slowly built small part immediately tested experimented providing uninterrupted experience start repl leiningen simply type lein repl command line moment see prompt like lein repl nrepl server started port reply clojure exit controld exit quit command userhelp doc doc functionnamehere finddoc partofnamehere source source functionnamehere usersourcery functionnamehere javadoc javadoc javaobjectorclasshere example clojuredocsorg clojuredocs cdoc userclojuredocs namehere userclojuredocs nshere namehere user btw first time lein run download clojure possibly number fileslibraries happens file storedcached folder repl startup time always take second due jvm initialization needed however repl usually nt need restarted often practice nt huge issue ever end triggering action make repl hang eg trying display infinite sequence press controlc cancel action nt want ca nt install clojureleiningen try example part tutorial using online repl try clojure traditional first piece clojure code println hello world please go ahead type prompt hit enter r ead phase repl begin turning entered text stream symbol provided error symbol e valuated according rule language followed p rinting result code l oop giving u new prompt input user println hello world hello world nil user input process output one fundamental concept programming especially functional programming look closely might wondering nil came nil clojure equivalent null indicates println actually nt produce computational result fact display hello world simply sideeffect executing println pushing string system output stream println function gave u actual value back might pas another process return important distinction later talk truthiness predicate pure function brief example look weird huh least nil seen course expected result addition maybe already spot pattern operation seem come first called prefix notation seems number parametersarguments nt matter kind assumption might make coming imperative programming background javac etc symbol like actually operator basically symbol predefined hardcoded meaning appear certain place within code clojure however operator defined standard function function accepts indeed flexible number params basic math operator clojure syntax summarized syntax clojurelisp boil one rule clojure form overall structure exception function paramn note function process parameter also called argument input number params depends course function requiring argument parenthesis define scope sexpression technically list also branch tree program first element interpreted function call important thing consider stage element incl first expression often result function call calculate sum two product pythagorean fixed triangle side b image show visualization encoded tree structure written tree need evaluated bottom top inner form evaluated first sum computed clojure read inside first might seem alien really take getting used nt prove problematic practice since clojure function often le line long symbol symbol used name thing heart clojure clojure code evaluated tree symbol bound value nt need course practice mostly mean symbol must bound value order work yet situation clojure symbol must remain unevaluated describe detail discus list data type imagine moment clojure shoe evaluate form reader simply provides u list symbol latter two easily identified number need treatment however symbol nt know therefore need look first obtain value since symbol part core language find bound function call argument function return replace whole form result value form part larger formcomputation result inserted back whole process repeat remaining form symbol resolved final value computed symbol conceptually similar variable provide reusable named reference data code yet variable nt really exist clojure biggest difference variable language default symbol bound fixed value ca nt changed concept called immutability immutability nt well known concept among imperative language reader blog might familiar fact language mainly built around opposite mutability ability define data pas around via referencespointers change usually impacting multiple place codebase fact immutable data readonly defined provides key feature truly enabling safe multithreaded application simplifies programming task eg easy comparison nested value general testability ability safely reason function behaviour presence immutable data also lead fundamental question actual need key topic object oriented programming eg need hiding data encapsulation resulting complexity required language nt provide feature protecting data direct party ie user code manipulation problem simply nt exist clojure hand immutability provides one challenging unlearning task people coming world mutable state since seems paradoxical work realworld system requiring constant change data since real application exist without changing internal state throughout course tutorial show clojure make immutability using persistent data structure b actual mutable behaviour achieved beneficial c show mutable state easily avoided part clojure program please remember clojure data immutable default aside unlike functional language like haskell scheme data truly immutable changing state achieved closure monad clojure take pragmatic route provides number mutable data type however intended certain usage scenario discus two var atom symbol binding programming language variable based lexical scope depending level variable declared program binding either global local eg local within function class clojure also provides lexical scope binding using let form giving u local symbolic value binding existing within body let form general structure last often expression body becomes final result let symbol value symbol value bodyexpressions btw name let come mathematical text often say thing like let c sum b etc anyone previous career basic familiar sticking pythagorean example could wrap computation inside let form introduce two symbol b let bind symbol b bind symbol b b b use symbol outside let form symbol undefined compilerexception javalangruntimeexception unable resolve symbol context deal let several time throughout tutorial var namespaces restricted lexical scoped symbol defined let course painstaking way programming thankfully nt whole truth basis programming nt repeat implies need form mechanism refer existing valuesprocesses defined elsewhere clojure mechanism implemented using var named storage container holding data var named using symbol keep datatype always global within given namespace meaning visible anywhere within namespace possibly others namespaces important concept clojure manage modularity avoid naming conflict conceptually similar namespaces c package java module python although clojure additional dynamic feature clojure code evaluated namespaced symbol language provides rich set function create link manipulate read clojure website repl prompt always show namespace currently working default user back var closest thing traditional variable language though equal whereas many language variable direct mapping named symbol value clojure symbol mapped var object var provide reference current value additional level indirection important working dynamic environment repl multithreaded scenario latter var provide mechanism dynamically rebound new value perthread basis one clojure concurrency feature discus future part tutorial def general form used define var special form take two argument nt evaluate first one instead take literally create new var name hold given value var also defined without value keep initially unbound le common sometimes needed declare var future reference used var couple time already let symbol bound var defined clojurecore namespace let define two var pas value process def usera def return created var object providing var name return value def b userb b b b var used computation want refer var rather value use prefix var function explain var used light immutability let look another example imperative language like c java j etc operator increment variable one clojure inc function take value return value apply see happens inc return correct answer printing show value still inc operate var given current value value returned inc entirely distinct never touched apart reading value var used define value interactive programming context repl predefined value clojure source file said var mutable true redefined def advanced function wo nt cover new value practically var considered unchangeable course one could write function us def within body redefine var new value however considered nonidiomatic generally bad form never seen wild nt still confusing hope thing make sense discussed clojure data structure seen mutation variable actually needed practice function stark contrast object oriented language like java class object primary unit computation clojure functional language function heart first class standalone entity language considered equal type datavalue accepted argument function also constructed returned result function call function playing key role clojure defined different way given name nt need defining reusable function likely want also give name easily refer define named function use builtin form defn def sibling short define function provide important thing needed name list input parameter body function actual code pseudocode look like defn name parameter bodyexpressions applied example could written like defn hypot b let b b b c b mathsqrt c implementation concise show use let split computation smaller step temporarily redefine symbol also make use java interop feature refer java builtin math class compute square root expression according pythogoras actual length third side hypotenuse rightangled triangle given b shorter alternative would defn hypot b mathsqrt b b coming cstyle language might wonder define actual result return value function clojure implicitly given let result last expression function path execution result defined first function call like hypot call fn hypot b call fn var anonymous function function without name called anonymous function case defined via special form fn like fn params bodyexpressions like defn form take number parameter name body expression another alternative would use def fn form achieve function definition defn really short form combo def hypot fn b mathsqrt b b anonymous function often used cloure data processing feature see callback result function another function eg preconfigure function explained next reader j background also find following familiar let take another brief look greeting function showed beginning tutorial defn greeting name println hello name assume greeting exists language might want define german version well defn greetingsde name println hallo name difference two first part greeting reusable alternative would redefine greeting use two argument defn greeting hello name println hello name usergreetings greeting hello toxi hello toxi one situation anonymous function come play since could define makegreetings function take single parameter greeting return anonymous function requires name instead greeting name instead using println make use str function concatenate value single string return result defn makegreetings hello fn name str hello name str concatenates string place define couple var holding greeter different language use directly def greeting makegreetings hola def greetingsde makegreetings guten tag new var greeting greetingsde contain preconfigured function returned makegreetings use like greeting ricardo hola ricardo greetingsde toxi guten tag toxi call function consume produce function higher order function hof play crucial role functional programming world hofs like one used achieve concept called partial application mechanism enabling called closure also explain clojure naming could also use partial function achieve done manually multiple arity varargs even though nt place go detail yet clojure allows function provide multiple implementation based number argumentsparameters given feature enables function adjust different usage context also support function flexible number parameter also called varargs discussed end article guard error intrinsic aspect programming taking defensive stance help catching many early design stage also articulated fail fast philosophy popular amongst software folk clojure support form designbycontract approach allowing u specify arbitrary guard expression function us prevalidate input parameter andor output postvalidation eg might want constrain parameter makegreetings function allow string le character ensures function return string defn makegreetings hello pre string hello count hello prevalidation guard post string result validation fn name str hello name guard given clojure map discussed pre post key containing vector booleanvalued expression also discussed case call string called predicate function return true argument string since result function unnamed value use symbol refer postvalidatator attempting call guarded function nonstring long greeting string result error even function executes makegreetings nil assertionerror assert failed string hello makegreetings labas vakaras apology lithuanian assertionerror assert failed count hello mr fogus ian rumford example metadata moving exciting topic let briefly mention optional feature function metadata documentation type hint following function extended version makegreetings fn thing included defn makegreetings take single argument greeting return fn also take single arg name returned fn called print greeting message stdout return nil string greeting fn string name str greeting name string given function name parameter list doc string constitutes metadata added var makegreetings defined defn doc string defined builtin clojure function generally read repl using doc doc makegreetings greeting take single argument greeting return fn also take single arg name returned fn called print greeting message stdout return nil clojure allows arbitrary metadata added datatype data created read manipulated function like meta withmeta altermeta please see clojure website information eg show u complete metadata map makegreetings var use meta var makegreetings arglists greeting n name makegreetings doc take single argument greeting line column file privatevar type hint attached function parameter addition form compiler metadata used specifying string indicate compiler following argument supposed string specifying type hint optional advanced topic important performance critical code refer clojure website detail truthiness conditionals predicate concept branching one fundamental aspect programming branching required whenever must make decision runtime based given fact respond accordingly many programming language use boolean value true false indicate success general truth value something value exist clojure course however many place clojure applies general term constitutes truth success considers value apart false nil true includes datatype might expect basic boolean logic operation clojure first two take number argument either truthy nil false true true false bail first truthy value encountered true nil false bail first falsy value encountered nil true foo argument truthy return last foo false true nil true false important aspect lazy ie argument evaluated preceeding one falsy combined clojure definition truthiness andor returning boolean value often possible avoid traditional branching code case need proper branching use form take test expression one two body expression one executed based test result pseudo code test truebodyexpression falsebodyexpression real term def age age beer lemonade lemonade restricted single form truthy falsy branch one important limitation form reflection clojure focus using function encouragement limit side effect ie io operation contained within function second falsy branch also optional needed idiomatic use instead somewhat flexible case since body contain number form executed test succeeds age age println sure println okay beer cheer achieve similar effect using either wrap two println function use form used invisible container grouping often sideeffecting action return result last expression data structure data lie heart application big small apart dealing primitive data like individual number character string one biggest difference programming language therefore one important factor choosing one language another way complex data defined manipulated see next aspect one clojure highlight language provides rich set primitive incl ratio big integer arbitrary precision decimal unicode character regular expression also truly powerful approach model process data unfortunately outline scope tutorial discus various common data structure also need point clojure untyped dynamic yet compiled language following data structure fully recursive contain mixture data type reference full list clojure data structure available clojure website list list sequential data container multiple value form heart clojure lisp general fact name lisp short list processing actually already know list defined done many time previous section list take number element defined using function list also know list usually evaluated function call trying define list number work expected classcastexception javalanglong cast clojurelangifn first element list number function clojure give u error homoiconicity long story short clojure code data data code language using data structure code data called homoiconic lisp share feature well language like r xslt postscript etc treat code data somehow need circumvent evaluation list function call purpose clojure provides u quote mechanism evaluate data structure literally symbolic data clojure data structure recursively stop evaluation form code quote apostrophe shorthand quote println result result println result result diagram show impact quoting difference resulting tree could also use list function programatically assemble listfunction using previously defined var b evaluate eval first construct function call using list individually quoted symbol def aplusb list b useraplusb aplusb show resulting list b eval aplusb treat data code evaluate treat code data structure look first item list first aplusb internal representation fn next treat code data replace occurrence b w square value structure map key value pair discussed key found original list replaced value replaced b b b map also quoted avoid evaluation content replace b b b aplusb b b btw map would quoted would evaluated b b b eval replace b b b aplusb data code discus first function detail right might wonder worth pointing dramatic implication homoiconicity enabling metaprogramming programmatic generation manipulation code run time able define language construct also open door lazy evaluation code skipping code entirely depending context eg happens andor unlike c preprocessor operates original textual representation source code compile step hence severely limited potentially error prone lisp give u full access actual data structure consumed machine example make clojure ideal candidate genetic programming implement domain specific language main form responsible kind code transformation macro leave another tutorial clojure list another important detail know implemented independent linked element efficiently accessed head beginning list nt provide direct random access element restriction make le flexible next data structure still concrete use case limitation nt matter eg implement stack vector since list clojure limited term access semantically overloaded container code often convenient use another similar data type store multiple value vector vector literally defined using vector function like list sequential data structure already encountered vector defining parameter function kick define vector element using different data type number string character keyword latter explained detail next section like list vector contain number element unlike list much like array vector others language also accessed randomly using element index done multiple way def v userv get v using get function index get v using get default value missing item v using vector function index param map keywords map one powerful data structure clojure provide associative mapping keyvalue pair similar hashmaps java aspect javascript object however key value course data type incl nil function map common data type map key however keywords keywords simply symbol evaluate ie value attached within given namespace single instance exists defined keyword created prefixing name keyword function keywords contain almost character space mykey mykey keyword str key kw built programmatically mykey back map defined hashmap function plus variation skip map key b c different data type value also note c map us string key much like json object def b c name toxi age b c name toxi age defined map structure lookup value using key many road lead rome use map function lookup key b use key b function applied get c use get function c key name toxi age foo lookup missing key return nil nil get foo nada use get default value missing key nada note use map keywords function implement clojure mechanism function call depending context good option since value b c nested data structure continue b c name toxi although work clojure offer alternative nicer approach becomes especially handy nesting increase getin function allows u specify path vector data structure look nested value saw already get function applied vector map mixture def db toxi name karsten address city london url http toxiclibsorg http thing nardove name ricardo url http nardovecom getin db toxi address city london getin db nardove address city think bournemouth think bournemouth getin db nardove url http nardovecom selectkeys used extract subset key map new map contains key listed argument present map selectkeys b foo foo nt present wo nt result b set set incredibly useful whenever must deal unique value nt care ordering name come set theory mathematics clojure set usually unordered never contain single instance given value exploit fact next part tutorial build first full example application set defined like illegalargumentexception duplicate key aware literal definition syntax set nt allow duplicate value however use functional equivalent hashset could use set function convert another data structure set hence filter duplicate value original course without destroying original def luckynumbers usermyvals set luckynumbers luckynumbers luckynumbers since set considered special kind map key value simply mapped use lookup approach check value present get nil get nope nope slightly practical example let define nested set set encode following mini social graph def g toxi ricardo mia toxi filip toxi filip ricardo let also define simple lookup function predicate check two people know defn know take graph two node name return true graph contains relationship node ignoring direction graph b nil graph b nil function return true given argument nil use function get answer order name nt matter know g toxi filip true know g ricardo toxi true know g filip mia false common data manipulation function even face immutability good data structure ca nt manipulated one often quoted popular saying amongst clojurians better function operate one data structure function data structure alan j perlis neatly sum clojure approach data processing achieved number elegant abstraction mechanism allowing dozen core language function work polymorphically different type data polymorphism allows small powerful api reduces cognitive load programmer mentioned data structure peculiarity concrete behaviour function discussed slightly varies adjusts data type adding element adding new data existing collection one common programming task clojure usually done conj vector new element added endtail conj list new element added beginninghead efficient therefore resulting opposite value order conj map unordered collection consist keyvalue pair add new pair map need define vector conj b c c b set also unordered nt allow duplicate adding duplicate value effect conj added another often used alternative exists map vector associative collection map associate key value vector associate numeric index value therefore clojure provides u assoc function add new replace existing association assoc take flexible number parameter one association changed one go assoc b override add b b assoc override element add new one comma optional important vector add new index directly tail position ie vector element add new value position index starting actually element therefore growing vector one attempting assoc greater index result error careful assoc indexoutofboundsexception nested data manipulation dealing nested structure use associn updatein manipulate element level eg might want add ricardo current home town mini db map associn db nardove address city bournemouth toxi nardove name ricardo url http nardovecom address city bournemouth like getin associn take path datastructure add replaces value key whilst also creates missing nesting level automatically ie nardove map even contain address key beforehand updatein similar associn however instead fixed value inserted collection take function incl additional params applied current value key us result function new value eg use updatein conj add another url toxi db entry updatein db toxi url conj http toxicouk toxi name karsten url http toxiclibsorg http thing http toxicouk address city london removing element remove item collection use dissoc map disj disjoin set key removed nt present function effect dissoc b b disj list vector allow direct removal near head tail nt support removing random item pop applied list remove first item vector last item collection empty pop throw exception pop pop immutability one time seen add remove element collection thus seemingly modifying technically would make mutable immutable however seen earlier modified result returned function original collection clarify def v userv def conj v v original v still exists even though added hood clojure created new data structure bound original collection v added thinking like programmer next question immediately nt incredibly inefficient happens want add value vector million element nt become super slow memory hungry copy time short answer persistent data structure clojure data structure called persistent data structure largely based paper chris okasaki internally implemented tree therefore easily provide structural sharing without need copy data would naive solution achieve immutability following diagram illustrates happens internally example using tree internal data structure share original content v simply add new leaf tree pointing added value cheap nt cause huge loss performance regardless size collection principle applied mentioned data structure uniform approach enables requires immutability sequence section discus clojure uniform approach data processing using sequence abstraction sequence logical view data structure clojure data structure treated sequence concept extended even clojure sequence include java collection string stream directory structure xml tree etc even build one implementing interface name sequence clojure seq compatible data structure explicitly turned seq using function name sequence api sequence api minimal low level interface consisting largely four function first next read con seq create sequence following function built top get let first illustrate role using vector hash map example def myvec def mymap b c clojure collection turned seq using seq function original collection empty seq return nil seq myvec seq mymap c b seq creativeapplicationsnet string seq character c r e v e p p l c n n e seq nil since map consists keyvalue pair map seq seq pair vector element since map unordered collection order element seq undefined first return first element seq nil sequence empty first myvec first mymap first hello string turned seq well h first first empty vectorseq return nil nil next rest might guessed already next return seq remaining element excluding first one element seq next also return nil next myvec next mymap c b could also combine use first next retrieve element eg element first element seq returned next first next myvec first next next myvec rest almost identical next however always return seq element simply return empty seq instead nil con function used prepend element seq con take two argument value existing seq seqable collection add value front nil given argument new seq produced con nil con con nil con c ab c b looping iteration recursive processing point might wondering use function practice since clojure offer far highlevel approach work data collection direct use function clojure actually le common yet discus higher level function please bear u want illustrate important core operation common programming language one clojure add twist iteration recursion meet loop construct loop recur loop defines body code executed repeatedly eg iterate element sequence best illustrated example loop take vector produce seq vector element reverse order clojure actually provides reverse function u focussed loop loop result nil coll seq coll let x first coll recur con x result rest coll element return result result vector following loop keyword binding vector know let used bind number symbol case require two initially nonexisting result sequence set nil coll vector number processed code loop body executed repeatedly iteration first check coll contains element calling seq remember seq return nil therefore falsy given empty collection element remaining bind coll first element x follows next call recur actual mechanism trigger recursive reexecution loop however time new value given loop result coll symbol new value updated result sequence x prepended remainder current collection produced via rest rest return empty seq loop finished result returned final value combined application loop recur lowlevel verbose construct create iterative behavior clojure also flexible important restriction however recur used end tail loop execution path meaning expression following recur hence concept called tail recursion example might think final occurance result violates restriction true recur last expression truth branch enclosing whereas returned result branch therefore independent doseq concise way completely iterating element collection offered doseq however form designed work withtrigger side effect return nil example iterates vector hashmaps display person age extra formatting doseq p name ben age name alex name boris age let name name p suffix x last name age age p rather say println str name suffix age age ben age alex age rather say boris age nil value suffix based last letter person name usually unless last letter set x also like age optional provide default value missing dotimes dotimes yet another looping construct used side effect time simply binding symbol number iteration dotimes println common sequence processing function discussed underlying form mechanism time focus commonly used feature clojure sequence processing loop iterators defacto toolspatterns process collection many imperative language idiomatic clojure probably differs since functional approach focused transformation sequence using combination higher order function called pure function pure function depend data input cause side effect ie io operation make referentially transparent meaning function could replaced result without impact word function consistently providing value given input pure function also idempotent meaning function applied multiple time effect applying eg mathabs always provide result mathabs mathabs change cause effect pure function play key role functional programming characteristic allow u compose small primitive function complex construct predictable behavior memoization pure function caching result previous call function called memoization technique especially useful result produced complexslow process clojure provides memoize hof allow function memoized however safe memoization requires function pure demonstrate caching effect simulating slow function using java interop threadsleep simulate long process sleeping x millisecond defn slowfn x threadsleep x x def notsoslowfn memoize slowfn notsoslowfn mapreduce several year ago google published paper use mapreduce algorithm whereas paper focused distributed application algorithm running parallel thousand machine general approach around decade play important role many functional language defacto pattern process data without need explicit loop idea mapreduce first transform element input collection intermediate new collection value passed reduction function producing single final result value result could data type though incl new collection even though mapreduce process phase also applied ie sometimes need later reduction initial mapping step btw several modern nosql database system eg couchdb mongodb riak distributed data processing platform like hadoop also heavily rely mapreduce underlying mechanism process create view data ever intent work quite useful knowledge work section even interest clojure map mathematical term mapping transformation value application function clojure map function one often used function take transformation function applies element given collectionsequence eg example take function inc seq number applies inc number individually return new sequence result map inc transformation function given map anything also one situation anonymous function often used eg produce seq square number map fn x x x aside since anonymous function often short also defined concisely though become le legible following equivalent expression map use reader macro define anon fn symbol refer first case argument function take single arg use etc refer call anon fn args map also applied several collection case transformation function need accept many parameter collection let use map build seq hashmaps two vector point coordinate color time transformation fn given single point vector color keyword fn simply combine value single map key po color map fn p c po p color c transformation fn point red green blue color po color red po color green po color blue important might noticed vector point one element color case map stop soon one input collection exhausted value case color last point ignored laziness lazy seqs one thing immediately obvious experimenting map repl seq returned map called lazyseq transformation function actually applied original value result needed word map recipe computation computation ever happen nt attempt use result illustrate better let simulate slow transformation function take second per value value original collection entire processing take approx second def result map fn x threadsleep x code executes see repl immediately returned result new var userresults take second stage nt yet attempted anything new var hence mapping take place thus far plain lazy trying display content result however force computation therefore take second see mapped value result take world slowest multiply reduce reduce clojure natural way expressing accumulation sequence value like map take function optional initial result sequence whose element passed transformation function individually example reduce case reduce us function combine value seq accumulated result one one transformation function must always take argument current result reduced value next item processed initial result given first iteration consume first item sequence case happens initial result return current result return return seq exhausted clojure also provides alternative reduce called reduction instead final reduction return seq intermediate result also use range create seq number reduce range reduction range filter filter take function seq applies function element return lazyseq element function returned truthy value kind function also called predicate clojure number predicate function rely truthiness easily recognized general naming convention function name suffixed eg even used filter even number seq number filter even range since function need nt strictly return true false also use set predicate filter value present set filter range using data code since vector map set used function return nil value nt present therefore fulfilling general contract predicate function take drop sometimes interested chunk value larger collection use take retrieve first n element collection lazy sequence take b c e f b c contrast use drop ignore first n element give u lazy sequence remaining element drop b c e f e f clojure variation theme notably takelast droplast butlast takenth takewhile dropwhile latter two also take predicate function terminate soon predicate return falsy result takewhile range concat mapcat concat splice number seqs together single new lazy seq new rotateleft function show use concat take drop rotate element sequence concat b c aa b bb b c aa b bb defn rotateleft n coll concat drop n coll take n coll usersrotateleft rotateleft b c e f g h e f g h b c mapcat combination map concat like map accepts transformation function number seqs mapping function need produce collection step concatenated using concat another social graph structure w people def ricardo toxi filip edu filip toxi filip ricardo filip marija toxi marija marija edu edu toxi step produce seq relation map seq marija filip toxi marija edu filip ricardo filip toxi edu toxi ricardo marija edu toxi filip step combine rels single seq mapcat seq option seq transform fn mapcat identity option identity transform result marija filip toxi marija edu filip ricardo filip toxi edu toxi ricardo marija edu toxi filip step form set unique node graph set mapcat identity toxi marija edu ricardo filip step build map node valenceconnectivity frequency mapcat identity marija filip toxi edu ricardo two function nt dealt far identity simply return value given argument frequency consumes seq return map seq unique value key number occurrence value basically histogram take drop also important respect one optional property lazy sequence nt mentioned far infinite sequence concept infinite data nonlazy ie eager context obviously unachievable machine finite memory laziness however enable potential infinity term generating andor consuming fact many clojure function exactly without proper precaution ie combined take drop friend would bring machine knee careful already used one potentially infinite sequence generator range called without argument produce lazyseq monotonically increasing number since repl always try print result ever call one without guard repl useful infinite lazyseq generator cycle delivers lazyseq repeating given seq ad infinitum take cycle take takenth cycle range repeat produce lazyseq given value take repeat repeat repeatedly produce lazyseq result calling function without argument repeatedly take repeatedly rand iterate take function start argument produce lazyseq value returned applying function previous result f f f x generate power take iterate take drop iterate since infinite lazyseqs value like time ca nt exhausted sometimes helpful think high level recipe changing program state trigger computation combined various sequence processing function provide truly alternative approach solving common programming problem sequence combinators core function related combining collection different way interleave recombines two sequence alternating manner also lazy interleave clojure lisp scheme clojure lisp scheme interpose insert separator element original seq interpose cyan black yellow magenta cyan magenta yellow black zipmap combine two collection single hashmap collection used key second value let roman numeral first individual piece power take iterate apply power take map fn x x x iterate using map take mapcat fn x x x iterate using mapcat altogether zipmap v x l c key mapcat fn x x x iterate value c l x v since discussed sequence generator also must briefly mention unlike loop language clojure called list comprehension another generator lazyseqs though one crack may say combine behavior map lexical binding know let conditional processing return result lazyseq iterate seq returned range bind value successively execute body tell u current value even range even even even true even false even true even false range even true false true false also used created nested seqs happens automatically one symbol bound eg create position grid first symbol defines outer loop next one inner loop range outer loop x range inner loop x result per iteration symbol binding part customized additional binding precompute value used body andor specify predicate skip iteration therefore also achieving filtering la filter cancel iteration using next example creates point along border grid center point skipped range x range let border x x border skip iteration border false x manually formatted better visualize result every sometimes need check value collection match certain criterion eg enforce restriction every function take validation function predicate applies element collection return true predicate return truthy value check element seq name key remember keywords used function every name name nardove name toxi age false could write predicate check value multiple number remainder rem division zero every zero rem true alternatively use want ensure value match condition return first truthy value returned predicate nil item match using data set predicate fn ask name longer character count mia nardove toxi true count mia nardove toxi nardove apply far used phrase applies function x several time short simply mean function called x argument though function accepting multiple argument argument single collection ie one built map etc stick familiar construct add concrete use case hypot function defined earlier computes length longest side triangle given length side time could interpret calculation distance point origin cartesian coordinate system one side distance along xaxis distance imagine collection point want measure distance origin magnitude def point userpoints could use map hypot function compute distancelength point produce new sequence result however hypot far requires argument b point defined vector element therefore point single value vector situation clojure provides u apply function allowing function accept collection value individual argument possibly additional one given well whereas following produce error hypot arityexception wrong number args passed user hypot using apply unravel vector two individual argument call function correctly apply hypot place plug map form process point map apply hypot point complete earlier arc tutorial could also plug another reduce step give u longest distance using max reduction function reduce max map apply hypot point destructuring learned apply sometimes required adapt data function specific also achieve opposite adapt function expect specific data structure without jump hoop painstakingly pulling individual value given collection clojure make easy using destructuring destructuring way bind symbol value collection replicating overall structure collection placing symbol bound point intend get value supplied data structure line code illustrate much better sequential destructuring know vector sequence value another nested data structure def nesteddata x test data bind first item input vector symbol b c naive inelegant solution would bind symbol individually like let nesteddata b nesteddata c nesteddata prn b b c c b c using sequential destructuring expressed much concisely need telling clojure symbol value part sequence wrapping vector let b c nesteddata prn b b c c b c sometimes might need value successive collection eg say care value let b nesteddata prn b b b x idiomatic use symbol bind value interested case element third element nesteddata another vector also restructure element simply need replicate overall structure nesteddata indicate element sequence combine another destructuring option called bind entire element yet another symbol third let c third nesteddata prn third contains c contains attempting destructure sequence symbol value symbol missing value bound nil let missing nesteddata prn missing nil missing missing true likewise interested first x element seq nt need specify additional symbolsplaceholders clojure nt care element seq destructuring symbol however addition initial element interested might still want hold rest collection done let b nesteddata println count element element x destructuring used almost anywhere whenever clojure expects symbol binding form eg symbol binding part form specify argument list function map destructuring map destructured though lookup value requires key destructuring form need refer key well since used specify sequential destructuring also make sense use destructuring map following destructure element nesteddata bind map x symbol b let x b nesteddata prn b b b wanted use symbol name key used original map alternative let key x v nesteddata prn x x v v x v x sequential destructuring use also bind entire map course done recursively find example jay field blog post matter destructuring function arity function providing one implementation called multiarity function many core clojure function implemented like provide maximum flexibility finally let extend earlier hypot function turn multiarity fn accepting two number also single seq w minimum two element instead defn hypot b hypot b destructure seq call args b mathsqrt b b userhypot hypot need apply hypot hypot testing arity true remember wrap arity implementation form ie surround end part congratulation made truly proud even though could give glimpse clojure far hope excited enough try applying basic practical visual example next part tutorial next part start building first project introduce quil clojure wrapper around processing meantime recommend sharpen clojure skillz checking material esp puzzle great way learning reading reference clojure mailing list main community discussion member clojuredocorg great community based collection guide tutorial aimed level incl setup guide various tool platform clojuredocsorg community example based reference core clojure namespaces function learn example clojure cheatsheets online pdf version incl clojurescript stackoverflow question tagged w clojure try clojure online playground repl installation needed online learning resource solve clojure puzzle varying difficulty planet clojure twitter clojure blog aggregator oreilly book imho currently comprehensive accessible book joy clojure another great book also touching clojure philosophy clojuretoolboxcom curated list clojure project grouped topic clojurespherecom autogenerated list clojure project github incl dependency info clojarsorg community repository open source clojure library main repo leiningen clojurewerkz growing collection well maintained open source library mainly db centric project
299,Lobsters,clojure,Clojure programming,Glue: Vue.js wrapper for ClojureScript,https://github.com/Gonzih/glue,glue vuejs wrapper clojurescript,glue overview demo glue cljs demo app example license,glue trying glue cljs vue together overview far main idea configure component via clojurescript demo check glue cljs demo app usage example example template id sampletemplate div span label span span counterlabel span button click clickme click button hr div template div id app sampletemplate label sample button sampletemplate div n appcore referclojure exclude atom require glueapi g refer atom gdefcomponent samplecomponent template sampletemplate prop label state fn counter atom computed counterlabel fn state str counter state click method clickme fn state println click happened gprop label swap counter state inc gvue el app license copyright max gonzih gonzih gmailcom distributed mit license
300,Lobsters,clojure,Clojure programming,Command line scripting with ClojureScript,https://itnext.io/command-line-scripting-with-clojurescript-5e5567367713,command line scripting clojurescript,anmonteiro lumo running script lumo update oct http clojureorgguidesdepsandcli integrating npm http randomuserme gotcha repl development final thought reference,thanks recent development clojurescript community writing commandline script clojure fun experience major kudos anmonteiro developing lumo core clojurescript teami think clojure great language writing singleuse script process data builtin manipulation function immutable structure worry reference deepcloningrunning script lumothe easiest way get started install lumo system run clojure file see npm section want install lumo globally create file called hellocljs following content println hello world run using npm g lumocljs package manager choice lumo hellocljshello world easier let look leverage nodejs apis write slightly practical program see require function act like j counterpart pull j module would following code const writefilesync require f const inputjson require randomusersjson also work module inside nodemodules folder installed using npm directory lumo update oct found possible use clojure cli tool clj manage set classpath clojureside dependency via depsedn http clojureorgguidesdepsandcli demo project simply replace lumo flag c src c clj spath able require dependency specified depsedn fileintegrating npmfor slightly larger project probably want proper packagejson dependency npm could also install lumo perproject basis want install globally wish publish package elsewhere sample project work like example fetch json http randomuserme using request library npm split code clojure file proper namespacing mytool packagejson src mytool corecljs usercljsclojure namespace system mirror directory structure file n mytoolcore must mytoolcorecljsgotcha hyphen delimited name namespace must converted snakecase filesystemcorecljs usercljs packagejson c flag tell lumo source file flag specifies namespace main function run tool using usual npm procedure npm install npm start fetch user output randomusersednrepl developmentof course clojure experience would complete without interactive replbased development add following line script section packagejson file repl lumo c src srcmytoolcorecljs n r flag initializes repl entry point corecljs n flag start socket repl port editor integration finally r flag start repl terminal could execute arbitrary code runtime without loosing state npm run repl cljsuser inn mytoolcore switch core namespacemytoolcore userparse name first john last smith id username nil password nil email nil fullname john smith final thoughtswhile still rough edge current tooling think time writing cli script clojure start become viable option nice alternative jslumo startup time blazing fast compared clojury thing running jvm breath fresh airi would definitely recommend trying enjoy clojurereferences
301,Lobsters,clojure,Clojure programming,Why ClojureScript?,https://www.youtube.com/watch?v=8-kVTUNhwJY,clojurescript,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojurescript lily goh youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojurescript lily goh youtube
302,Lobsters,clojure,Clojure programming,A Generative Approach to Simulating Watercolor Paints,http://www.tylerlhobbs.com/writings/watercolor,generative approach simulating watercolor paint,,program understandcreated plotted pen ink tiled paperdimensions x inunderstand created hybrid process digital drawing hand generative processing drawing paper pen plotter manual cutting assemblythis work began sketch landscape outside marfa texas sketch simplified area light dark constructed custom interface could outline shape assign specific brightness second program written generated long swooping line intersected shape light darkthe work executed small pen plotter due plotter size limitation work needed plotted one small portion time decided break work sort tiling pattern order make interesting feature workultimately program generated series six pattern plotted per paper tile pattern covered different shade brightness darker shade thicker pen used plotting lightest shade used pen already low ink order keep line softonce paper tile plotted trimmed hand assembled onto board
303,Lobsters,clojure,Clojure programming,Latest ClojureScript adds support for Graal.JS REPL Environment,https://clojurescript.org/news/2018-11-02-release,latest clojurescript add support graaljs repl environment,,clojurescript infers function return type propagating information call site consider predicate defn finite x infinite x defn big x po x finite x previously code like following big hi bye would emit defensive javascript coerces return value big boolean using cljscoretruth cljscoretruth cljsuserbigqmarkcall null hi bye compiler instead infers finite always return boolean value therefore big emits efficient code cljsuserbigqmarkcall null hi bye inference like longer necessary manually add boolean type hint predicate used performancecritical code long return value infered predicate function body general inferred type automatically flow function body outward inferred numeric type following example foo used context type checked see warning properly reflects type warning cljscore argument must number got number string instead previously without type hint foo compiler would produce warning indicates type instead number
304,Lobsters,clojure,Clojure programming,Using Clojure’s core.logic to Solve Simple Number Puzzles,https://mattsenior.com/2014/02/using-clojures-core-logic-to-solve-simple-number-puzzles,using clojure corelogic solve simple number puzzle,logic programming declarative programming imperative corelogic leiningen primer solving newspaper number puzzle bodmas datomic datalog,sat feb start saying relatively new idea logic programming declarative programming general spent developer life far writing imperative php code idea logic declarative programming paradigm simple job developer write result want code give rather go calculating result going use clojure corelogic library run basic go run clojure solving basic number puzzle new logic programming skill fresh leiningen project let first get hold corelogic updating projectclj dependency orgclojureclojure orgclojurecorelogic n need look something like pull corelogic n numberpuzzlescore referclojure exclude prevent n conflict require clojurecorelogic refer corelogic syntax look like recommend reading primer run q logic expression corelogic program written inside call run also need give main logic variable name q seems convention logic variable lvar special whatever value give later output program underneath logic expression number constraint used determine result could example write constraint say value q must always use corelogic unify operator run q q program run corelogic return value satisfy given constraint result possible value satisfy constraint added second constraint stating q must equal run q q q result list would value could found satisfies constraint value order describe logical constraint program often require logic variable q start use corelogic fresh create new lvars run q fresh q two constraint firstly must equal value secondly value q must equal value value q satisfy constraint output list single value run following unifies main lvar q fresh lvar make run q fresh q given strange output mean lvar could take value nothing specific said solving newspaper number puzzle puzzle found recently newspaper going solve rule empty box must filled number satisfy horizontal vertical calculation number appear calculation performed lefttoright toptobottom bodmas puzzle simply set logical constraint rather thinking would imperatively write algorithm solve let see use logic programming sidestep entirely first step create lvars need set output format run q fresh top row middle row bottom row unify q lvars output format want q top row middle row bottom row see unifying q nested vector containing lvars set format result run get following output set constraint get nine etc symbol saw earlier let start adding rule puzzle firstly value must range use corelogic finite domain fd tool found clojurecorelogicfd namespace n logiccore referclojure exclude require clojurecorelogic refer require clojurecorelogicfd fd first constraint state every one lvars range fdin fdinterval next need ensure lvars contains different number corelogic distinct trick state lvars unique fddistinct go ahead add mathematical constraint corelogic fd operator purpose fd fd fd etc use fdeq helpful macro let u write fd constraint normal clojure operator etc fdeq horizontal condition puzzle vertical condition puzzle finally puzzle told top left number putting together n logiccore referclojure exclude require clojurecorelogic refer require clojurecorelogicfd fd use run retrieve possible solution run q create new logic var lvars u use rule fresh top row middle row bottom row unify q lvars output format want q state every one lvars range fdin fdinterval state lvars unique fddistinct fdeq helper allow u use standard clojure operator like instead fd fdeq horizontal condition puzzle vertical condition puzzle finally puzzle told top left number result see nine cell value puzzle solved next direction take look use case rich hickey datomic database datomic us logic programming language called datalog query data query written set logical constraint lvars way discovered able describe result want constraint problem manner worrying underlying implementation really exciting
305,Lobsters,clojure,Clojure programming,Minesweeper in clojure,http://sneakycode.net/minesweeper-in-clojure,minesweeper clojure,,
306,Lobsters,clojure,Clojure programming,Clojure at Netflix (2013),https://speakerdeck.com/daveray/clojure-at-netflix,clojure netflix,fewer faster,copyright fewer faster llc slide content description owned creator
307,Lobsters,clojure,Clojure programming,An Overview of an Early Clojure Codebase,https://rateless.net/~dormo/posts-output/2018-10-31-moo-architecture/,overview early clojure codebase,project stack architecture check reframe readme input event action input yagni event pure function simple easy action input event event action action input event action walkthrough xkcd websocket input entry point named sente example apache zookeeper initial client connection new external track closing remark nothing left say,documenting stupidity smarterlately thinking thing brought current level competency programming selftaught never much rhyme reason developing curriculum followed whatever interest time interest would point book blog post open source project contribute even attempt substantial nontrivial project ownwhile could done without foundation laid reading smallerscale project attempt nontrivial project taught substantially software development anything else specifically taking retrospective look architectural logical technological design decision humbling take magnifying glass mistake ask made figure avoid futurethis article going current hobby project moo player starting high level overview architecture proceed low level look flow functionality code throughout code clean lot rather crufty certainly level embarrassment showing code one proud end day though code bit temporary embarrassment small price pay contribute community helped grow much developerthe projectthat thing going reading aboutmoo player collaborative medium player mean user create medium player friend control individual device physical space together sharing one device everything order track playlist position playing medium synchronized across connected client player isolated room chat alongside itif wondering name pun mumu player nowdefunct webapp shared core functionality albeit fewer feature nt ask explain squid stackthe stuff used build itthe architecturea bird eye viewat highest level abstraction project separated two section server client unlike web application traditionally written project aim keep client server entirely separate current iteration disconnected client everything connected client except adding new medium sending chat message case handled futurethis article focus server certainly thing said client want keep focused scope vague idea client architecture look check reframe readme excellent readgoing level abstraction server roughly separated three section input event actionsinput refers section codebase handle incoming data client moment currently httpwebsockets frontend data received client used alongside serverprovided data create event feed event handler architectural goal strive able able support various input mechanism data format though follows yagni principleevents logic go completely pure function generate action event data return sequential structure action performed significance design decision allows simple easy performant testingactions thing change world thing include database modification networkfile io cache modification action nature impure function sequence step actual logic conditionals loop go inside event significantly lessens need test testing io directly difficult tedious fragile anything done lessen big win maintainability logic outside action also mean changing implementation detail done without work around logicbasically input take data client creates eventsevents process said data create action server performactions make server actually thingsthis provides simple one way flow input event action logic isolated middle stuff inherently impure stay edgesto clear new code written principle mind place project conception still logic action impure event handler spot come laterwalkthroughwading swamp parenthesis yeah clojure lisp credit xkcd time dive code stuff like http routing ignored focus stay core architecture component covered demonstrate architecture actionwebsocket input entry pointthe first thing looked entry point websocket input initial htmljavascript served websocket connection established via sente sente proceeds feed websocket event function named eventmsghandler defn eventmsghandler roomid roomid cooky cooky ringreq ringreq uid uid eventmsg future loginfo eventmsg locking roomid try let sessionid value get cooky jsessionid user iflet user cachefetch user sessionid user id utilsuuid sessionid sessionid clientsinroom cachefetch roomclients roomid client get clientsinroom uid action handlerseventmsghandler assoc eventmsg roomid roomid user user sessionid sessionid client client clientsinroom clientsinroom downloadsdir downloaddownloadsdir uploadsdir uploaduploadsdir uniqueidfn utilsuuid databasefns getroomstatefn dbgetroombyname loginfo action actionsexecuteserveractions action catch exception e reporterror e eventmsg eventmsg function following spin new threadacquires lockfetches user cache creates one none existgets client room cacheassociates ton data eventmsg map passed functionpasses handlerseventmsghandler dispatch based id fieldfeeds returned data handlerseventmsghandler actionsexecuteserveractions release lockthere thing stand code smellsthe first thing name function event handler function function called eventmsghandler handlerseventmsghandler prefixed hyphen answer simply named sente example implementation eventmsghandler event handling function websocket entry point naming change reflect thatthere also iflet statement decides whether user need created mentioned earlier logic event remnant time architecture fleshed outanother smell locking roomid expression really need lock entire room every websocket event time significantly simpler lock specific resource le apparent problem locking strategy well locking local jvm process cache however powered infinispan infinispan chosen ability act distributed cache enabling application scale horizontally making locking local jvm process functionality thrown window replaced distributed lock future probably apache zookeeperthe final smell fact two function uploadidfn getroomstatefn passed event handler keep event handler pure declarative approach would optimal hopefully achieved relevant pattern emerge codebase certainly preferable impure event handlersso far good onto eventsinitial client connectionthe first websocket event sent initial handshake defmethod handlereventmsghandler clientconnect roomid roomid clientsinroom clientsinroom uid uid sessionid sessionid user user getroomstate getroomstatefn databasefns cacheput roomclients roomid assoc clientsinroom uid id uid synced true cacheput user sessionid user client user updatein user client conj uid assoc user client uid sendtoclient uid roomstateupdate getroomstate roomid function return vector containing three vector three vector represent action perform order vector determines order executionan action structure structured like nameofaction vectorofarguments case action follows add client clientsinroom structure put onto roomclients cache using roomid keyadd uid eventmsg user structure put onto user cache using sessionid keyget room state database send clientthat simple enough could argued uid bit poorly named however given context easy enough deduce unique identifier client case generated sente semantic meaning sente bit leaky abstraction nt worth modifyingthe action simple defmethod executeserveraction sendtoclient uid data wssend uid data defmethod actionsexecuteserveraction cacheput id k v opts cacheputorcreate id k v opts wssend cacheputorcreate thin wrapper function around sente infinispan nothing particularly interestingnow something substantialnew external trackthe following event sent new external track added external track medium file external server basically something like http moo player actually downloads external medium serf attempt provide consistent experiencehere event defmethod eventmsghandler tracknewexternal key roomid user uniqueidfn data let trackid uniqueidfn track userid id user id trackid tracktype download url data addtrack roomid track roombroadcast roomid tracknew track downloadtrack url data trackid trackid roomid roomid seems pretty simple concise followinggenerates new track id create track structureadds track roombroadcasts new track every client roomdownloads tracknow action defmethod executeserveraction addtrack roomid track dbaddtracktoroom roomid track defmethod actionsexecuteserveraction roombroadcast roomid data wsbroadcast key cachefetch roomclients roomid data quick look implementation dbaddtracktoroom defn addtracktoroom roomname track mcupdate db room name roomname push track track thing stand name roomname inconsistent rest codebase us id another remnant even earlier copy codebasesimple enough finally downloadtrack action defn file hacky stringreplace shit limitation jodatime http jodatimesourceforgenetapidocsorgjodatimeformatdatetimeformathtml switch java datetime api clojurestringreplace timeformatunparse timeformatformatters timefromtimezone timecoercefromlong lastmodified file timetimezoneforid gmt gmt defn startorresumedownloadrequest url destinationfile httpget url stream header range str byte length destinationfile defn startorresumedownloadasync url destinationfile updatefn oncompletefn start resume download future let response startorresumedownloadrequest url destinationfile buffersize kb contentlength integer getin response header contentlength status response iodeletefile destinationfile withopen input body response output javaiofileoutputstream destinationfile true let buffer makearray bytetype buffersize loop size read input buffer bytesread lasttime systemcurrenttimemillis threadinterrupted po size write output buffer size recur read input buffer bytesread size updatefn bytesread contentlength lasttime whennot threadinterrupted oncompletefn destinationfile defmethod executeserveraction downloadtrack key url roomid trackid let absolutefilepath str downloaddownloadsdir trackid last stringsplit url file iofile absolutefilepath update fn bytesread contentlength lasttime let currenttime systemcurrenttimemillis currenttime lasttime executeserveraction roombroadcast roomid trackupdate id trackid tracktype download bytesread bytesread contentlength contentlength currenttime lasttime complete fn file future locking roomid let track id trackid tracktype file metadata extractparse file src str static last stringsplit absolutefilepath executeserveractions updatetrack roomid track roombroadcast roomid trackupdate track swap downloads assoc trackid thread startorresumedownloadasync url file update complete file file yikes lot code code quite complex thread created lock obtained threadinterrupted called reason swap called giant comment function java interop happening far difficult reason code glance much nt worth getting deep specificsthere thing done simplify instead making http request inside startorresumedownloadasync make stream content length passed get rid one level nestinginstead spinning thread inside startorresumedownloadasync make syncronous let caller spin threadmove update complete function outside downloadtrack action namespacelike comment say drop cljtime favor java datetime apimake actual download code input codebase similar websocket entry point perhaps isolated somewhere would particularly helpful make much easier share code upload logicclosing remarksnothing left sayso far happy architecture making development fun debugging le difficult program stable loc still rather small codebase granted speaks clojure succinctness anything else looking forward continuing development seeing learn
308,Lobsters,clojure,Clojure programming,Clojure Development with Spacemacs & Cider,https://practicalli.github.io/spacemacs,clojure development spacemacs cider,,thu aug british summer time
309,Lobsters,clojure,Clojure programming,Static Generative Art Setup for Clojure,http://marvelous-code.com/uncategorized/static-generative-art-setup-for-clojure/,static generative art setup clojure,tyler hobbs post quil http githubcomjaminalderstaticart,inspired tyler hobbs post setup quil started working setup simple workflow come far http githubcomjaminalderstaticart requirement idea quick update otherwise static image code changerespect dry principle repeat structure code logically grouped reusable junksminimal change needed scale imagesupport various sketch without code duplicationabstract quil processing wrapper might able switch graphic lib latermake good use emacs excellent clojure support cider workbench look like right full screen emacs always top processing canvas side emacs quil sketch change draw function function evaluating current defn redraws sketch core file contains setup function defsketch macro call switch sketch update require block n staticartcore require quilcore q quilmiddleware mid staticartsettings refer setting sketch defn setup qnoloop qsmooth qcolormode hsb qdefsketch staticart title quil sketch feature nobindoutput size width setting height setting setup setup draw sketchdraw feature keepontop middleware midpauseonerror added two elisp function one eval current defn redraw one fully restart cider repl also load canvas eg change size something else get sync initquilel defun quilevaldefnandredraw evaluates current defun redraws static quil sketch interactive ciderevaldefunatpoint ciderinteractiveeval redraw staticartcorestaticart nil nil nil defun ciderfullrestart quits jack cider interactive ciderquit ciderjackinclj nil globalsetkey kbd quilevaldefnandredraw globalsetkey kbd ciderfullrestart provide initquil improved
310,Lobsters,clojure,Clojure programming,nREPL Redux,http://metaredux.com/posts/2018/10/29/nrepl-redux.html,nrepl redux,prologue cider nrepl long time ago repl far slime spoke length one clojure contrib strike back clojure contrib new hope free software project rogue one piggieback drawbridge new nrepl github org proper manual nrepl interlude socket repl socket repl unrepl prepl amazing tweet joe armstrong orchard cljstooling transport small victory changelog pr pr big victory return jedi help wanted piggieback drawbridge nreplbencode still need logo edn transit epilogue,prologue naming hard truly spent lot time ruminating title particular post coming nrepl redux could easily gone something like nrepl reborn nrepl return nrepl forever nrepl strike back revenge nrepl anyways name matter much matter story tell namely story rise fall rebirth important tool clojure ecosystem today clojure development probably know author cider somewhat popular clojure programming environment people think cider emacs project much bigger many moving piece make whole thing work probably write separately subject totally plan one piece special though heart cider nrepl server power magic happens behind scene code evaluation code completion debugging jazz nrepl simply put network repl server aim provide common ground clojure tool author need access repl post mostly nrepl also bigger topic like building inclusive community avoiding past mistake driving progress forward long time ago repl far early day clojure people would often praise ingenious design language brilliance rich hickey would shy away topic development tool clojure many go around slime version tweaked clojure real game town early emacs quickly became popular editor clojure hacker later eclipse netbeans plugins clojure emerged well everyone rolled implementation repl server powered interaction user clojure spoke length clojureconj really awesome nrepl design document like one tell even story nrepl created tackle problem missing common infrastructure clojure development tool took clojure world storm span couple year pretty much clojure development tooling realigned around nrepl project achieved ambitious original objective guess almost seen lein repl nrepl server started port host nrepl reply nrepl clojure java hotspot tm server vm doc doc functionnamehere finddoc partofnamehere source source functionnamehere javadoc javadoc javaobjectorclasshere exit controld exit quit result stored var exception e user build tool today start nrepl server every editoride provides form nrepl integration cider built explicit objective replace slime nreplpowered tool might even remember first version cider actually named nreplel clojure contrib strike back nrepl started personal project chas emerick http githubcomcemericknrepl initial success invited one initial three project new clojure contrib family project later year thus moved http githubcomclojuretoolsnrepl supposed step towards nrepl becoming part clojure point ala thing took pretty different turn project great chas committed life work priority shifted development slowed significantly guess might wondering would something like happen say nrepl crucial piece clojure ecosystem opensource software people willing contribute right theory yes practice much might completely say attribute lack contributor mostly heavyhanded contribution process clojure contrib project familiar contrib highlight process code hosted github need sign contributor agreement ca contribute use jira issue patch collaboration via github ticketsprs go use hudson ci use maven contrib project share common maven template imagine people included exactly thrilled jump though hoop number speak clojure contrib project maintainer sometimes original author key project would lose interest project one would take guess happening nature contribution process also find somewhat amusing project contrib ever promoted clojure really begs question exactly goal entire endeavour leave subject another article new hope mean time trying build great clojure ide top nrepl getting really frustrated nrepl situation many feature wanted build problem wanted address required change nrepl really willing contribute definitely value limited time way much wasting process completely disagree people know aware immense passion free software project always want build healthy community around project nurture contributor etc clojure contrib go everything hold near dear could probably gotten commit access nrepl project clojure contrib solution real problem environment discourages contribution opted go direction instead decided go propose something novel somewhat started advocating strongly migrating nrepl clojure contrib rebooting project development truly free welcoming manner eventually chas agreed reasonable course action announced intention migrate nrepl clojure contrib summer http objective reconstituting environment people interested impacted nrepl could participate development easily possible idea excited however thing never easy sound little know back one actually carry migration rogue one chas groundwork migrating nrepl relicensed project recreated git repo expunging irrelevant commits etc ran time offered assistance outstanding task wanted show one people complain mean say nrepl truly free point meant reservation jump help still wish understood better signing back way work could possibly first step pretty easy clear needed rebrand project change deployment artifact namespaces technically new project even though spirit continuation old one needed update popular extension middleware transport mostly support new nrepl needed fix bug implement long overdue feature needed clean legacy code time however realize would also lot effort update nrepl various downstream tool particular leiningen boot unfortunately release happen often latest stable boot switched new nrepl already leiningen still cut release targeting meant lot extra work support toolsnrepl new nrepl many project also anticipate lot key nrepl middleware also somewhat unmaintained personally go update piggieback refactornrepl sayid etc popular drawbridge http transport eventually lead creation new nrepl github org house core nrepl project getting really familiar nrepl ecosystem familiar point even decided create proper manual nrepl one timeconsuming task working lately resulted extremely busy frustrating summer lot work see coming really glad managed pull finally starting reap benefit right every meaningful piece clojure development ecosystem compatible new nrepl hope year get rid compatibility code clean shop bit want extend special thanks friend london clojurian community clojurists together kept going even lost hope set doable made without feel burned shit also extremely happy got u wanted u interlude socket repl believe might wondering hard work really worth clojure socket repl part clojure probably supposed use right also interesting project like unrepl prepl build top provide similar functionality one offered nrepl saw couple day ago amazing tweet joe armstrong erlang fame perfectly reflects feel groundhog day development method invent new simple thing add feature add feature add feature complicated nobody use throw everything away n goto way maybe joe armstrong technical merit personal preference aside people understand clojure community made epic investment building tool top nrepl going back set u back lot know never putting work add support socket repl cider believe nrepl exactly need little bit work enhance get lot value fraction investment today put lot work make sure underpinnings cider like orchard cljstooling etc nrepl specific tool author leverage one reinvent wheel said really believe already flexible solid foundation need work towards making better also fact unlike socket repl prepl nrepl free shackle clojure contrib contribution process get wrong fact often critical contrib mean disrespectful rich cognitect decision think something inherently wrong think work clojure project might really end part clojure eg toolsreader coreasync really make sense something like repl server think really try little functionality possible tied directly clojure nimble flexible come fixing improving thing probably socket repl least contrib project faith definitely want wait one year change done today perhaps share perspective nrepl solution free clojure process free clojure release cycle open business post several goal important one invite help get nrepl next level top nrepl also mature stable battle tested incredibly flexible design think people complain nrepl limitation simply understand easy anything possible wish transport abstraction particular mindblowing small victory case wondering much new project achieved far let changelog speak nutshell fixed plenty annoying bug awesome support using nrepl together clj toolsdeps awesome nrepl documentation added support hotloading dependency nrepl close adding authorization support nrepl pr close shipping hostwide projectspecific config support nrepl pr ship builtin support prettyprinting without breaking backwards compatibility apart unfortunately namespace change unavoidable committed continue develop project stable responsible fashion got small hint nrepl going big yeah used instead intentionally big victory return jedi biggest validation work went rebooting nrepl amazing involvement community nicest improvement contributed reaffirms belief create right environment people would rally around drive progress innovation forward hope road new steward project emerge able take step back shadow switch back focus hacking cider see longterm maintainer nrepl see simply agent change whose main objective set project success getting started sure best yet come help wanted project nrepl org could benefit maintainer especially important find steward key project like piggieback clojurescript support nrepl drawbridge http support nrepl also looking someone willing port nreplbencode clojurescript easier write clojurescript client nrepl pretty much reason extracted bencode functionality nrepls core nrepl manual need proofreading editing content especially come documenting extend nrepl new middleware transport project still need logo really want add couple extra transport eg edn transit also big dream port nrepl clojurescript well used selfhosted environment awesome would right plenty work around contribution small join u nreplness epilogue telling story like one main reason decided revive writing effort think truly worth sharing folk keep hacking
312,Lobsters,clojure,Clojure programming,SVG Jigsaw Generation in Clojure,https://blog.bonnieeisenman.com/projects/clojure-puzzles/,svg jigsaw generation clojure,recurse center nervous system nyc laser cutter voronoi diagram whimsy kdtree bonnieesvgpuzzlegen,spent last week learning clojure generating jigsaw puzzle part oneweek programming retreat recurse center jigsaw puzzle motivated two thing first wanted goodsized languagelearning project secondly heavily inspired amazing beautiful intricate jigsaw puzzle produced nervous system wanted experiment similarish generative method sucker generative thing played generative algorithm much want crazy cool puzzle seriously go buy one nervous think turned well access nyc laser cutter obvious thing generate svgs could laser cut worked svg xmlbased format describing vector graphic pretty easy generate svg look like open text editor svg width height circle cx cy r stroke green strokewidth fill yellow svg produce yellow circle centered radius fourpixel green outline view svg file web browser edit editor like inkscape see easypeasy started generating jigsaw puzzle shape figuring tile wanted something interesting grid similar puzzle piece next step use voronoi diagram draw irregularlysized polygon around point first created amusing failure oops happens draw point x x instead x fix coordinate replace straight line puzzlepiece edge get something start look like interesting puzzle still obviously flaw ironed eg edge overlap wanted make novel puzzle piece shape though turned svg path type draw curve svg pretty easily path c stroke blue fill transparent transform translate ok look like replace puzzle piece shape randomish curve add curve get even better also experimented variation place seed point puzzle generation one based circular point distribution monstrouslyirregular puzzle piece play cool wanted take one step implementing whimsy piece jigsaw jargon whimsy piece themed recognizablyshaped puzzle piece might butterfly people letter name modified puzzlegenerator clear space whimsy piece first testing circular whimsy piece using kdtree identified whimsy nearestneighbors connected back rest puzzle cat finally took file nyc resistor lasered took group u ninety minute solve cat puzzle bad four work code available github bonnieesvgpuzzlegen first clojure program sure plenty nonidiomatic thing happening dependency thankyous testimonial playtesters awesome horrible amazing amazing mean terrible puzzle piece supposed evil get one
313,Lobsters,clojure,Clojure programming,High-Level vs. Low-Level,https://feierabendprojekte.wordpress.com/2018/10/27/high-level-vs-low-level/,highlevel v lowlevel,eight queen puzzle higherorder function repl read eval print loop tool coding alive tangible runtime program invoking tool instead living tool invoking program dataorientation reuse mathcombinatorics compose reuse general enough force use certain construct upon lib operate level abstraction require conclusion fellow redditor mentioned gefällt mir,recently went coding dojo tried solve eight queen puzzle clojure solution found three thing dojo made think lowlevel v highlevel thing started learning clojure felt extremely lowlevel mainly due fact clojure us regular data structure everything instead elaborate construct like object kind opposite clojure feel much highlevel java edit talking lowlevel highlevel programming language try compare clojure java code first clojure felt like lowlevel java code use list vector map reminded array usage higherorder function another participant coworker tried build solution java based array retrospective said fix several arrayindexoutofbounds exception found curious even try avoid solution occur made think back try determine got last outofboundsexception honestly even remember must year exception year work higher order function since java stream according map filter function around time started using stream oob exception vanished daytoday work functional programming higher order function mainstream think extremely valuable using work take look functional programming feel lot highlevel imperative java code year ago even using stream java feel lowlevel compared functional language much missing partly incompatible function predicate etc functional composition functional language feel like lego anything stream flexible general repl idea dojo use tdd workflow frankly strictly follow workflow sense write unit test first test thing repl repl read eval print loop way interact clojure runtime well program running wrote expression compared expected value return value actual function kind like unit testing also executed function evaluated return value interactively right tool even turn repl interaction testcases test still make sense clojure instant feedback part tdd delivered repl much flexible way stu halloway put coding alive tangible runtime program invoking tool instead living tool invoking program please watch whole talk put bluntly compilerun cycle feel backwards lowlevel compared interactive runtime environment dataorientation reuse ok admit used library coding mathcombinatorics proved extremely handy solving eight queen puzzle alternative would write eight nested loop algorithm able calculate solution different boarddimensions eg clojure data orientation key use set builtin datastructure abstraction map set list vector majority clojure library compatible code might difference require mapping course case thing compose well reuse incredibly high contrast library java experience either general enough ie solve special case might applicable problem force use certain construct upon example lib return icombinatoricsvectors instead standard data structure make automatically incompatible thing force write mapping code edit another negativeexample xml parsing library provide special api dom stateful api sax operate level abstraction require example working oo code base need combinatorics certainly call lib first thing map result even string array desired objecty representation working lowlevel way array library come handy give language support tool eg ide objectlike thing middle ground clojure difference highlevel lowlevel code talked everything work data everything interoperate could use mathcombinatorics code extremely low impedance mismatch third thing java feel lowlevel general solution java library provides lowlevel interface think smallest common denominator objecty elaborate library get tends specialized reusable case least incur high cost course librariesframeworks elaborate general tend monster eg spring clojure get generalitylowlevelness interoperabilityreuse higherlevel code edit really mean idiomatic clojure code comparable highlevel java code reuse get way better like lowlevel java code conclusion clojure felt lowlevel first use basic datastructures feel like highlevel functional paradigm interactive environment also use basic data structure allow tremendous amount generality reuse ironic think edit newcomer clojure feel discouraged lowlevel clojure might feel get know sense make start see using basic data structure really highlevel sense generality reuse edit fellow redditor mentioned clojure default immutability persistent datastructures abstract away mutability machine running absolutely true yet another reason see clojure highlevel java mutablity everywhere edit found great quote programming language low level program require attention irrelevant perlis epigram programming gefällt mir gefällt mir wird geladen ähnliche beiträge
314,Lobsters,clojure,Clojure programming,Clojure Walk through the OpenCL in Action GPU Computing Book - Part 1,https://dragan.rocks/articles/18/Clojure-and-OpenCL-in-Action-GPU-Computing-Book-1,clojure walk opencl action gpu computing book part,test section page clojurecl repo,let start first example listing book p example illustrates run basic opencl program ie kernel kernel function executed one opencl compliant device example kernel kernel void hellokernel global msg msg h e l l k e r n e l wo nt go detail writing kernel consult book purpose generally kernel accept argument value reference pas argument reference actually providing pointer reference memory object example argument msg reference buffer object kernel store character hello kernel argument reference order run kernel need write host program ie application development system role host program build kernel source set kernel argument data send kernel device command queue execution also host program responsible reading back result executed kernel observing event coming execution process host program executes kernel written clojure look like adjusted test section page clojurecl repo selfcontained executed test n require clojurejavaio io clojurecoreasync refer chan uncomplicatecommons core refer withrelease info utils refer directbuffer uncomplicateclojurecl core refer info refer let notification chan follow register notification withrelease dev first device first platform ctx context dev cqueue ctx dev let hostmsg directbuffer worksizes worksize programsource kernel void hellokernel global msg msg h e l l k e r n e l withrelease clmsg clbuffer ctx writeonly prog buildprogram programwithsource ctx programsource hellokernel kernel prog hellokernel readcomplete event setargs hellokernel clmsg enqkernel cqueue hellokernel worksizes enqread cqueue clmsg hostmsg readcomplete follow readcomplete hostmsg let data javaniobytebuffer data notification re byte makearray bytetype dotimes aset re get data apply str map comp char re hello kernel remainder post explain code simplified world every host application performs following step order execute kernel select opencl device multiple device create context communicating device create command queue host tell device compile build kernel source text opencl program written set argument kernel data passed kernel returned kernel actually kernel return result write argument reference send kernel command queue execution kernel execution read result release resource note step performed application obtain reference device context command queue reuse multiple time similarly step also performed end interacting device step performed multiple time meaning several kernel built used context step argument reused multiple kernel previous code step achieved single line code let dissect code previous example associate step line clojure channel created called notification create function follow used creating callback fro event coming command queue pretty handy clojure channel used communicating different thread next line available opencl platform represented function platform select opencl platform used step macbook pro mid know one opencl platform called apple nameinfo first platform apple amd accelerated parallel processing platform two device supporting opencl processor graphic card map nameinfo device first platform intel r core tm cpu iris hawaii intel r core tm cpu example choose either execute sample kernel device set case cpu line create context ctx communicating cpu step command queue cqueue send kernel read result step note using legacy version function creating command queue legacy function intended used device support opencl older version since cpu supporting opencl need use legacy version deviceversion first device first platform opencl opencl amdapp device support opencl simply use regular commandqueue function continuing example line setting variable need later create byte buffer size called hostmsg store result returned kernel following line initialize worksizes record used later enqueuing kernel command queue get back later finally define opencl program executed preferred store program code separate file wanted selfcontained example next line call clbuffer function creates opencl data structure represents memory object specific property case create memory object called clmsg written opencl program hence writeonly flag line compile opencl program build used device buildprogram function finally following line create kernel compiled program name hellokernel step line create instance opencl event use later next come line set argument passed kernel step pas clmsg memory object kernel line enqueue kernel command queue step already mentioned kernel return result programming language usual approach write result execution case write message argument reference program kernel executed program enqueues read operation clmsg line also supplying readcomplete event notify u read operation completes invoking follow function register callback event readcomplete pas also hostmsg memory reference result read finally remainder code reading notification channel event channel fetching result data initially stored byte buffer storing byte variable re convenient work step missed purposely explain end resource finish working released ie memory occupied freed includes releasing reference memory object kernel command queue program context perform encapsulating code withrelease macro purpose macro bind releasable element symbol like let section evaluate body end release resource next post continue dissecting example opencl action book know post bit lengthy since wanted introduce basic opencl concept flow kernel execution host program hopefully text helped understand concept follow upcoming post advanced example guest post nikola milkic
315,Lobsters,clojure,Clojure programming,Serverless Smart Radio,https://medium.com/a-tale-of-2-from-data-to-information/serverless-smart-radio-1cabcab8de30,serverless smart radio,google dni digital news initiative,essence serverless thinking user thinking functionality application rather constantly thinkingworrying server software project hit major slowdown initial release simply much considerthe goal provisioning operating system patchmaintain per useincreased development speedmaximum automationevent drivennimble componentsas golden rule serverless architecture also silver bullet see following section still need container job suitable serverless approach dealing large fileshigher hardware resource requirementshigh traffic load case container cost efficientwe still operating serverless infrastructure meaning zero instance management container initialised aws ec service managed aws fargate systemwho fd medium group fdmg based netherlands fdmg operates het financieele dagblad fd daily financial newspaper similar financial time addition fdmg operates daily allnews radio station business news radio bnr team four data scientist data engineer work google dnifunded smart journalism smart radio project revolve around personalisation summarisation recommendation news snippet radiothese two project partly funded google dni digital news initiative detail found heresmart radio nonlinear radio experience finetuned readerslet get detail smart radio project
316,Lobsters,clojure,Clojure programming,Clojure is a product design tool,https://precursorapp.com/blog/clojure-is-a-product-design-tool,clojure product design tool,clojure product design tool clojure david jarvis clojurescript nt get initially front end om react precursor make sense clojurescript save development tool protects complex design workflow every product designer know clojurescript danny king,clojure product design toolas product designer obsessed solving problem lately designing niche programming languageclojure carry stark notoriety among developer despite tremendous feat design david jarvis former teammate mine encountered reputation interview last year david long lisp sure fine clojure david knowing clojure strange gurgling sound later year experienced clojure reputation invited give talk variant clojure compiles javascriptafter talk one developer told never met another designer used clojure first surprised concerned maybe reason designer thought remembered answered first question asked enjoy writing clojurescript answer nt get initiallyat time still working circleci answer reflected experience recent rewrite front end web app react wrapper building interfacesthe ordeal taught discipline also made job harderthe clojure syntax completely chaotic parenthesis least thought last yearsince since left circleci work fulltime precursor collaborative prototyping tool also clojurescript front endas opposed last year would say enjoy writing clojurescript ruined traditional html javascript newfound sense freedom started learning code first placenow make sensei nt designer long realized wanted write code highfidelity mockups make terrible deliverable come product design waste huge amount time development never even see light daylearning html cs first step taking ownership work kept involved development felt like copilot rather captainpreprocessors like le sas haml made thing little better taught fundamental programming concept variable function loopsit javascript framework led goal learning use clojurescript om react finally made feel like taking ownership design work beginning endclojurescript save development toolsbefore clojurescript mostly used haml templating helped avoid defect html like repetitive tagginghowever haml like compromise solution initial beauty fade first linkpunctuation ritual p sentence period succeed href linkclojurescript let avoid repetition remains utterly simple song dance solution p sentence period href link favorite part clojurescript share syntax clojure improve understanding clojure side effect normal workflow ca nt think better way learn great design standardand protects complex design workflowsthe icon system made precursor good example inherent elegance within clojurescriptusing illustrator constrain every icon single area help prevent inconsistent proportionsi relate process clojurescript map defines icon path strokemenutop strokemenumid strokemenubtm strokelocktop filledlockbtm specify path go menu path strokemenutop strokemenumid strokemenubtm lock path strokelocktop filledlockbtm type structure make styling breeze class stroke fill none stroke color class filled fill color stroke none call function specify icon want div commonicon menu path associated icon get piled styled together let go ideating shipping minutesevery product designer know clojurescripti challenged work outside expertise knew designing way everyday would dilute passionmy optimization individually subtle save hour every week spend time important thing like polish therein lie point clojure make efficient extends reach designerdo nt let fear prevent growth nt learn though nice knowing need learn something something learn right help build better product find make somethingwritten danny king
317,Lobsters,clojure,Clojure programming,"Bunnicula, asynchronous messaging with RabbitMQ for Clojure",https://blog.nomnominsights.com/bunnicula-asynchronous-messaging-with-rabbitmq-for-clojure/,bunnicula asynchronous messaging rabbitmq clojure,syncing data integration using framework support asynchronous messaging asynchronous processing manage number concurrent job automatic retries monitor job statistic track error simple production setup ability use multiple programming language decided go rabbitmq rabbitmq n official documentation server documentation cloudamqp message processing automatic retries sneaker dead letter exchange success error retry dead letter exchange timeout exception monitoring statsd collectd stackdriver rollbar backend service written clojure stuart sierra component library langohr please welcome stage bunnicula omnombunnicula library documentation building messaging system connection component publisher component avro consumerwithretry component messagehandlerfn consumer documentation component system system basemonitoring clap hand bunnicula monitoring monitoring component nomnombunniculamonitoring statsd nomnomstature rollbar nomnomcaliban exception tracker protocol influxdb next step bunnicula available via clojars github,syncing data integration using framework support asynchronous messagingone enjoyhq core feature ability integrate many customerfacing tool synchronize customer feedback data whether communication tool like intercom ticketing system like zendesk various np service always face issue get customer data enjoyhq fast possible reliable wayin case syncing data external tool enjoyhq requires thousand api request take significant amount time mainly due number request well due heavy rate limiting integration endpoint eg many intercom account allow request per second top request fail due network error maintenance window etc usual algorithm syncing data consist following stepswhen user connects integration create job initial historical data fetchthis job picked worker responsible getting recent piece feedback intercom conversation zendesk ticket etc piece creates new job processed item imported document data processed separate processing pipelinesee example data flow syncing intercom conversation besides implementing message flow following list requirement asynchronous processing document fetched processed asynchronously separate job ensures user see imported data account soon possible manage number concurrent job improve performance allow concurrent processing job mentioned integration heavily rate limited easy way manage number concurrent job automatic retries job fail various reason eg network failure automatically retried case failure time want retry failure ad infinitum certain threshold reached failed job need stored separate place reviewed retried discarded monitor job statistic track error easy way track metric error job processing simple production setup decide use party software easy deploy manage monitor production environmentability use multiple programming language even though majority backend written clojure ruby rail application need push job queue processingwhy decided go rabbitmqgiven requirement obvious would use kind message queue many choose rabbitmq hornetqactivemq kafka nats rabbitmq able fulfill requirement well familiar engineering teamfrom list requirement number solved messaging rabbitmq asynchronous define multiple consumer given queue use control concurrency rabbitmq great monitoring tool web interface http api command line see detail official documentation rabbitmq easy host even production environment support distributed deployment high availability etc find detail server documentation also go hosted solution using cloudamqprabbitmq many mature client major programming language solve support automatic retries enable monitoring simple waymessage processing automatic retriesoriginally enjoyhq started ruby application used sneaker simple framework defining rabbitmq consumer one nice feature sneaker automatic failure handling consumer automatically define retry error queuesexchanges dead letter exchange allow job retrieslet explain implemented message flow time consumer processing message result one following scenario success message processed successfully case want acknowledge message remove message original queue error message processing failed known reason retry processing would lead result eg http response external service original message acknowledged also pushed error queue examination retry message processing failed known reason retry succeed eg network failure original message acknowledged also pushed retry queue configured time message routed back main queue reprocessing using dead letter exchange also configure many time message retried pushed error queue timeout message failed timeout apply handling case retry exception message processing failed unknown exception apply handling case retry might clear looking graph monitoringwhen monitoring consumer processing interested thing long took process message result message processing success timeout etc want monitor exception number occurrenceswe like use smart solution people build concentrate domainspecific problem use statsd collectd collecting metric forwarding google stackdriver rollbar exception tracking easily change future find better tool worth switching requirement monitoring make easy instrument job processing well make possible replace improve without rewrite code every single consumer definedthe majority backend service written clojure also rely heavily component architecture defined stuart sierra component librarywhile clojure multiple client library rabbitmq particularly langohr maintained one rabbitmq core team member act interface rabbitmq api initially built library common set function creating consumer component retry functionality quickly noticed every time used library lot boilerplate code required consumer processing monitoring standardized needed framework would define skeleton building consumer related functionalityplease welcome stage bunniculawe proud announce release nomnombunnicula framework asynchronous messaging rabbitmq bunnicula implement consumer automatic retries specifying function message processing small set configuration convenience also use library publishing message rabbitmqbunnicula provides four component connection publisher consumerwithretry basemonitoring please see full detail library documentation quick walk setup component publishing consuming messagesbuilding messaging systemconnection componentat first need define connection component represents rabbitmq connection require bunniculacomponentconnection connection def connection connectioncreate username rabbit password password host port vhost main publisher componentfor publisher optionally specify exchange message published box message serialized json also specify serialization function enjoyhq started switching json avro many advantage type safety guarantee publisher consumer using message schema require bunniculacomponentpublisher publisher def publisher publishercreate consumerwithretry componentfor consumer need specify messagehandlerfn set configuration value important value configuration queuename exchangename specify queue set exchange bound rest configuration value optional find detail consumer documentation require bunniculacomponentconsumerwithretry consumer defn importconversationhandler body parsed envelope component let key integrationid messageid parsed code eg import intercom conversation given integrationid messageid need return one allowed value ack error retry ack def consumer consumercreate messagehandlerfn importconversationhandler option queuename intercomconversationimport exchangename timeoutseconds backoffintervalseconds consumerthreads maxretries approach mean message processing code simple function need know anything rabbitmq requirement function signature need return one predefined value signifying status message processing make easy test consumer function without worrying underlying messaging infrastructurecomponents systemnow put block together build messaging system publisher consumer require connection component dependency systemthe consumer also requires monitoring component dependency default use basemonitoring component available library log result message processingonce start system following thing happen rabbitmq connection opennew rabbitmq channel opened used publisher component publishing messagesqueues exchange created specified queue name support message flow retries configured number consumer thread started set need use publisher component send message appropriate rabbitmq queue rest taken care require bunniculaprotocol protocol protocolpublish publisher app intercomconversationimport integrationid messageid clap hand bunnicula monitoringas mentioned bunnicula library contains simple monitoring component log result message processing define method tracking creating monitoring component also opened sourced nomnombunniculamonitoring report job timing metric statsd via nomnomstature exception rollbar via nomnomcalibanhere example set consumer monitoring component require bunniculamonitoring monitoring calibantracker tracker staturemetrics metric comstuartsierracomponent component def tracker trackercreate token environment production def statsd metricscreate host localhost port prefix test def system componentsystemmap publisher publisher rmqconnection connection exceptiontracker tracker statsd statsd monitoring componentusing monitoringcreate consumername intercomimport exceptiontracker statsd consumer componentusing consumer rmqconnection monitoring approach allows injecting error reporting service long exception tracker component implement existing exception tracker protocol approach used reporting influxdb instead statsdnext step bunniculabunniucla related component used production year enjoyhq power infrastructure interacting external service feedback data processing event tracking typical background task sending email hope bunnicula help distributed asynchronous job processing near future hope extend library following functionality library mentioned post available via clojars use find issue please let u know github
318,Lobsters,clojure,Clojure programming,A Year in Clojure,https://blog.taylorwood.io/2017/09/15/year-behind.html,year clojure,background little schemer clojure parinfer first impression clojurecorematch keywords arity destructuring data somewhat deprecated clojurespec clojurespec excellent talk code data clojurecore much involved data code nil nullable comparison operator metadata sequence transducer reducer repldriven development deployed application host network repl debugging invariant refactoring pre postconditions parenthetical gestalt,lot changed since last post nearly year ago want write experience coming mlfamily language lisp informative tutorial mostly scattershot note thing found interesting along way updated sequence correction feedback added note metadata prepostconditions refactoring background first exposure functional programming book called little schemer fairly thin flourescent mindmelting paperback quite sure came upon programming ten year reading like reincarnating inner programmer working mostly net time f natural choice functional exploration even though lisp year f found back lispland new language clojure totally foreign many parenthesis instead semantic whitespace rigid type system keep honest going deal parenthesis thank parinfer another functional language encouraged different style programming one thought like ambiguity dynamic typing supposed feel program even possibly correct compiler telling ml expressive ability model problem domain algebraic data type part littered type hint thanks inference first impression first looked analogue mlf quickly found familiar functional tidbit pretty much unchanged wondered reduce clojurecore fold different arity reduce missing initial state record type seem often used polymorphism via protocol multimethods seemed like powerful tool see used sparingly pattern matching found clojurecorematch never felt motivated enough try seen used idea state pattern matching lisp assume similar situation cond get way suppose tuple type vector tuples one vector different length gasped clutched pearl monad sure miss discriminated union type seemed like standin although think clojurespec might facilitate something similar reality clojure language design started sink language extremely basic little syntax learn could productive almost immediately conversely even writing f daily sometimes forgot le common syntax need semicolon comma record definition able easily dive clojurecore source interactively coded usually required thirdparty tool fsharpcore net general find reading thirdparty clojure code necessity little needed f net chalk needing read code see rather making assumption based type work keywords everywhere clojure think moreorless interned string granted special ability think foo intent purpose pair function converting keywords string keyword foo foo name foo foo keywords de facto type key map literal eg keywords also used function map ie get value map keyword foo namespaced avoid naming collision eg mynamespacefoo note name namespaced keyword part keywords declared anywhere use literal readheard clojure designer encourage use namespaced keywords rarely encounter outside clojurespec definition also common keywordize ingested data structure like json object xml doms etc arity really neato thing clojure function ability define function arbitraryvariadic arity case numerous argument bound collection either vector map map thought collection keyvalue tuples basic example function number additional argument tie another concept new applying function sequence argument apply clojure nice compact way defining multiple function arity single function symbol form arglist implementation wrapped parenthesis defn foo println b apply println b get compiletime safety check function arity wondered equivalent f seqzip clojure quick search turned nothing realize could simply pas one collection map step function would take argument per collection seemed really like really elegant use variablearity function several example technique clojurecore multiarity function also one way clojure deal named optional argument function call use function definition foo foo append true path sup additional argument actually treated map seen style referred kwargs form destructuring function signature like defn foo num key append path syntax obviously requires even number keyvalue pair argument destructuring used destructuring f often pattern matching clause clojure finding destructuring involves getting value map followed grabbing item sequence position map destructuring syntax powerful bit confusing first although seems simple even allows specify default value key present map one line key foo foo foo map value key foo map foo key bound entire map make getting value map easy terse also alias destructurings inline another neat feature positional destructuring commonly used vector addition traditional head tail destructuring sequence flexibility syntax x x also x next nested destructuring indicates care first element tail also destructure one binding tail like x z anything go spirit positional destructuring throw exception failure z simply nil third element go map destructuring ie get nil back key map destructuring also available function argument signature allows flexible function signature get lot argument destructuring way function body nice separation concern sense imagine clojure function argument binding destructured vector destructurings nested becomes unreadable level deep data clojure f similar data structure working clojure feel lowerceremony literal syntax nice terse basic data structure conveniently composed transformed map would seem clojure commonplace record type even though defrecord seems somewhat deprecated correction defrecord considered deprecated structs something bugged initially guarantee record map would contain expected contain bunch stuff expect came realize matter practice often thought clojurespec talk data clojure without talking clojurespec believe drawback ambiguity working data clojure one clojurespec address sometimes really need rigid specification data clojurespec specify shape data machinereadable format use verify property function data via generative propertybased testing whole lot even leveraged clojurespec generate api documentation sample code watch excellent talk clojurespec spec solves many problem interested first using sort optin gradual typing system project could write spec data structure function wanted function spec could assert input output specific function runtime quite reassuring compiletime better nothing hope clojurespec adoption continues kind optin checking becomes prevalent think sweet spot occupy everything must explicitly typed total dynamic ambiguity new clojure jdbc library shipping spec hopefully good sign come code data whatever superlative dis might use describe lisp syntax lack thereof make one thing evident code data data manipulated function rest list containing list data structure code data one profound enlightenment moment programmer one realized popular language clojure macro allow work code data much clojure core functionality written macro get expanded final form compiletime evaluation example another thing delighted seeing language construct fundamental andor defined clojurecore example simplified version macro defmacro x next let x next never worked language could peer fundamental construct opened mind else possible indeed read clojurecore toptobottom see much language bootstrap existence f metaprogramming facility comparatively clunky fragmented depending kind syntax tree want accomplishing similar metaprogramming f much involved often write new macro advised write macro function work well invaluable certain context time able trivial refactorings code programmatically repl course net roslyn totally separate facility clojure ability inherited le virtue lisp data code core clojure data structure used function know make first love example map function one key argument set function one member argument def myset set integer myset return member value myset return member value myset nil return nil map myset mapping set vector lately find thinking term data procedural code example sometimes nice express program logic declaratively data opposed controlflowcasecond statement consider case case x high medium low also expressed map map used function return matched key value code roughly effect case def score high medium low score medium important detail case work like switch statement fast equality checksjumps throw exception default match found using map score function passing key value return value score nope nil return nil key found also specify third argument default value key found use map function higher order function map score medium low medium concept apply set approach nice want define rule one place use many maybe loaded database configuration file nil functional language go length cordon nullnil value clojure embrace nil case remember thinking option type lot first day embrace nil rarely find needing write defensive nilcheck code miss nullable comparison operator wish something like f option module matter defining function many nilfriendly core function niladverse function always clear function happily propagate nil one throw exception often find experimenting repl find something worry much nilpropagation bug hard debug happens personally think might prefer le nilpropagation clojurecore instance ergonomic large clojure attach metadata object use withmeta prefix syntax tag object metadata objectvalue still present caller secret bag map goody inspect meta function example function pad left side collection also return metadata number padding item defn leftpad n p let diff n count withmeta concat repeat diff p padding diff leftpad look like typical result meta leftpad padding metadata metadata facility also commonly used compiler type hint docstrings deprecation tag etc fact leftpad function decorated bunch metadata behindthescenes including definition location line column meta leftpad get var function definition arglists n p line column file userstaylorprojectsplaygroundsrcplaygroundcoreclj name leftpad n object clojurelangnamespace playgroundcore sequence clojure f great composing functional pipeline work sequence offer lazily evaluated sequence clojure lazy sequence result cached default whereas f seqcached clojure lazy sequence usually realized chunk unintended consequence mix sideeffects laziness another notable difference like highlight take similar example seqmap fun x x seqfilter fun x x seqsum range upper bound exclusive map inc filter even apply language map filter create intermediate lazy sequence evaluated later summation cost associated intermediate sequencesthunks clojure concept transducer aware similar idea f transducer compose operation sequence additional intermediate sequence required transducer function composed applied one pas transduce comp map inc filter even range transducer example faster original clojure example large topic explore post transducer nice tool power tool clojure reducer repldriven development use f repl much interactive development much interactive execution clojure repl experience far ingrained development workflow like feel inhabitant program write rather observant designer also get immediate feedback runtime behavior code hard reason functional language think another reason repl integral clojure development experience discovery interaction clojure information would normally get via type definition intellisenseautocomplete clojure natural get information playing code inhand doc string help schematic another area clojurespec change landscape tried heard bold deployed application host network repl used remotely inspect monkey running application code state debugging used interactive debugger much often f tried interactively debug clojure twice possible find easier rely repl evaluation printf debugging breaklike macro scenario get feeling interactive debugger hot topic clojure community seen trip others used setting breakpoints watch etc imperative language invariant one favorite thing staticallytyped functional language ability make illegal state unrepresentable clojure hard make illegal state unrepresentable fact say case worth effort ml variant somewhat difficult write program compiles work level quickly found clojure quite easy write program compiles work clojure feel open permissive come data passing around thought caller could pas anything argument unsettling first embraced laissez faire approach clojure philosophy started make sense clojure codebases driven convention contract f mostly thought problem term type use model essentially defining contract program compiled could fairly certain least something like intended meant putting lot upfront thought type need model problem clojure find opposite diving repl immediately writing code operates data code sculpted test lazy ultimately end production refactoring experience related topic invariant nontrivial clojure difficult refactor similar f code hard imagine since guardrail ensuring functionstypes stay aligned assumption yes use clojurespec still alpha also totally optin unlike static type system felt pain time conclusion drawn use clojurespec nontrivial code especially around domain boundary try even harder solve small problem way compose solve larger one way smallproblem code likely obviously correct stable le likely require adaptation best example approach point clojurecore although worry messy business domain pre postconditions clojure allow define pre postcondition function assertion input output seem common practice work runtime defn productstr nums pre every number nums every input must number post string output must string str apply nums productstr productstr throw compilerexception javalangassertionerror assert failed every number nums compiling suspect clojurespec function instrumentation would mostly supercede pre postconditions guessing possible use together parenthetical gestalt carefully conservatively curated confluence alliteration achievement unlocked clojure design decision philosophy especially hard embrace first make enjoyable programming experience prejudged clojure dynamic language never enjoyed working dynamic language look back thing thought miss staticallytyped language easily say faired well without p bunch cool clojure tidbit wanted mention post getting long
319,Lobsters,clojure,Clojure programming,Clojure REPL for Atom with full Teletype support for pair programming,https://atom.io/packages/clojure-party-repl,clojure repl atom full teletype support pair programming,clojure party repl use unrepl pair programming shared repls work development install shadow cjls compiling cljs auto codereloading linking plugin atom repling running project testing hacking clojurepartyrepl adding new functionality clojurepartyrepl roadmap core feature pair programming teletype support using multiple repls simultaneously support user interface improvement o support polish error possible future idea contributor alphabetical license freepik flaticon cc,clojure party repl clojure repl atom written clojurescript full teletype support pair programming let party use open add project folder inside atom follow one method start local nrepl server leiningen open file project folder focus file blinking cursor go atom menu bar select package clojure party repl start local repl make sure lein command available projectclj root directory connect remote nrepl server running nrepl ready connected go atom menu bar select package clojure party repl connect remote repl server fill pop panel hit enter key connect connect remote unrepl server running clojure socket repl ready connected socket repl launched different way use leiningen project adding jvmopts dclojureserverrepl port accept clojurecoreserverrepl projectclj start repl normally use clojure jar terminal typing java dclojureservermyrepl port accept clojurecoreserverrepl jar go atom menu bar select package clojure party repl connect remote repl server fill pop panel connect upgrade socket repl unrepl connected repl two new tab called clojure party repl history clojure party repl entry history tab show output repl entry tab type code send repl done repl simply close tab repl disconnected execute code repl using following method type code inside clojure party repl entry tab hit commandenter key move cursor part code file inside project hit commandenter key select code file inside project hit commandenter key send code unsaveduntitled file hit commandenter key commandenter key nt working package keybindings could conflicting party repl check keybindings atom working right go atom keymap open keymapcson follow instruction pair programming shared repls install teletype share clojure party repl history clojure party repl entry tab everybody share state running project work todo development wan na help polish turd sweet package built using shadowcljs make development easier supporting hot code reloading change plugin code dynamically reloaded need refresh atom full clojurescript repl atom repl package even inspect object inside atom install shadow cjls first install shadow cljs node package somewhere path npm install shadowcljs compiling cljs auto codereloading compile using one method compile auto codereloading loop repl use shadowcljs watch app compile without codereloading loop use shadowcljs compile app compile release simple optimization use shadowcljs release app first time run shadowcljs ask install stuff project directory ok blocked gitignore running see compiled j dropped standard lib folder using shadowcljs watch mode change automatically reloaded change clojurescript function var however change menu thing atom side still require refresh view developer reload window linking plugin atom compiled plugin run apm install apm link next restart atom notice newly linked package created symlink atompackagesclojurepartyrepl project path restarting atom see clojurepartyrepl plugin installed able use repling running project package installed check shadowcljs watch app output look message saying j runtime connected mean made contact package running atom repl finicky nt see message try reloading atom next shadowcljs running another terminal run shadowcljs cljsrepl app connect directly plugin live develop exit repl typing replquit add cljs support able repl package using testing hacking clojurepartyrepl got dynamic codereloading clojurescript repl atom let take thing spin easiest way work plugin open new clojure project atom dev mode nt dummy project around lein new app testproject make one open new project going view developer open dev mode open development console view developer toggle developer tool show possible error preventing plugin starting adding new functionality clojurepartyrepl best place start hacking coreclj public function interesting stuff defined exported want add something cool follow pattern coreclj add function shadowcljsedn exported function linked keybindings menu item checkout standard keymaps menu directory roadmap core feature x write new nrepl client clojurescript x support leiningen support boot x support remote nrepls support socket repls clojurecore style repls x unrepl support add line number file metadata stacktraces clojurescript support pair programming teletype support use teletype send message host guest sync repl history host guest find better way link repl editor host guest right linked title like repl entry limit u repl teletype time find way gracefully open inputeditor outputeditor history editor guest side host click either one example trick teletype sending editor guest time using multiple repls simultaneously support x executing code file find project file run code repl corresponds project otherwise fall back last used repl x add project name title repl editor x user sends code untitledunsaved file sent current repl user interface improvement integrate atom ide x executing code temporarily highlight toplevel form selected code sent repl likewise somehow indicate syntax error preventing toplevel form found create new kind pane hold repl inputeditor outputeditor add button repl pane like execute clear history make execute button dynamically switch cancel long running command executed work seamlessly guest side make outputeditor history readonly o support x macos support x linux support window support probably going pr welcome polish x add support multiple atom project starting repl either start project current file prompt user ask file x add support multiple remote repls starting repl prompt user ask project update namespace detection regex allow valid character namespace include allow one command execute time execute code repl either file directly inputeditor show spinner repl ui ignore command compile release version advanced optimization repldynamic reloading shadowcljs feature turned error fix error pane destroyed paneactivate repl texteditor item pane fix error typeerror patch apply defaulthistoryprovidermoduleexportsdefaulthistoryprovidergetsnapshot textbuffermoduleexportstextbuffergethistory possible future idea stop multiplexing stdoutstderr repl result outputeditor history add collapsable editor dedicated stdoutstderr additionally add option hook stdouterr stream remote socket repl output seen even thread ability add breakpoints wrap seamless print statement around block code would firstclass ui feature imagine purple box wrapped around code would print every time create custom atom grammar repl history editor ideally would draw horizontal line repl entry contributor alphabetical license copyright tomomi livingstone distributed eclipse public license clojure balloon icon made freepik flaticon licensed cc
320,Lobsters,clojure,Clojure programming,Running Clojurescript Tests on the JVM,http://sulami.github.io/posts/running-clojurescript-tests-on-the-jvm/,running clojurescript test jvm,reframe obeyed testing goat leiningen way run test figwheel phantomjs nodejs deal persistence state cider theory decoupling logic presentation example expose event handler test practice implementation reframe test reader conditionals reframe doc,posted october recently writing lot clojure clojurescript side project first post language ecosystem follows might wrong place nontheless want share something worked might useful someone else topic going looking running unit test reframebased clojurescript application though actually applies almost cljs application last week finally adding test one side projectsway late well obeyed testing goat quite trouble untangling wildwest design able even write proper unit test wondering run easily clojure come great bulid tool leiningen allows run test quite easily least clojure code way run test way run code compiling code javascript launching browser session leiningen running code browser runtime work well actually running code using figwheel le well running test first reason bit impractical requires lot setup actually make work need update projectclj testing build need proper cleaning well somehow manage browser runtime well depending also incurs heavy startup time penaltiesfull test compiles cljs j small test suite test case already take second avoid browser unnecessarily heavyweight need j runtime goto solution used phantomjs headless browser used various task require actual human seeing rendered output sadly phantomjs suspended development earlier year due lack active contributor confident building top especially considering speed web standard currently changing phantomjs come whole dom emulation actually looking j runtime reason become apparent later lead u nodejs exactly standalone j runtime running test inside node quite viable option impose meaningful startup time penalty meaning start fresh every test run deal persistence state could stop write custom test build target custom test command run file leiningen done still compilation time j long want tight tdd loop realised actually need compile j end want test clojure code run variety different platform one fastest platform available u original platform clojure targeted jvm using emacs cider already longrunning jvmi know back longrunning process bit unfair cider allows basically instantaneously reload whole project far worked without hiccup even consider startup time jvm incurs setup allows u run test well one second lead next section theory decoupling logic presentation want run clojure code specify target platform jvm depend platformspecific feature mean clojurescript application need split platformindependent clojure code clojurescript glue code incidentally also structure tdd favour think lead code easiest reason reframe come example expose event handler test part application contain bulk application logic basic gist kind state mutated passing pure function return new modified state every variable stateideally abandon idea variable well default immutable value everywhere use basic glue code come glue togetherthis really functional programming around half century allows u test application logic isolation passing piece state function checking property returned value make sense also use property randomly generate huge amount input according rule make sure forget edge case think writing test none code actually depends anything related presentation matter whether run browser jvm practice implementation reframe test order able run clojure code jvm clojurescript code meaning reside cljs file use cljsspecific library code invariably specific clojurescript like example n foobar require cljsspecalpha need n foobar require clojurespecalpha work jvm solved quite easily using reader conditionals basic idea save application logic common clojure cljc file write wrapper around application clojurescript cljs test suite clojure clj within common clojure access reader conditionals feature clojure allow modifying code compiletime actually know depth work behind scene yet believe fair approximation even potentially inaccurate depending compilation target look like action n foobar require clj clojurespecalpha cljs cljsspecalpha point writing actual test quite easy going borrow example reframe doc let setup cummulatively build db db empty db initialisedb initialisedb event handler expects db event clearpanel clearpanel drawtriangle drawtriangle event selecttriange stuff execute event handler test db selecttriange db event validate db correct example db global state map get passed chain pure event handler function returned new state validated need run set testpaths setting projectclj lein test pick test
321,Lobsters,clojure,Clojure programming,Using Clojure in Production,https://www.demystifyfp.com/clojure/blog/clojure-in-production/,using clojure production,ajira clojure problem statement low code development platform role based access control chose clojure lean inception dynamic programming language spike hammock driven development productivity hammock driven development effectively power treating code data dataoriented programming map vector threading macro threading macro pipeline operator destructing pattern matching clojurematch static type v dynamic type effective program talk library made job easier honeysql single layer abstraction extensibility input data coercion schema others bracket pair colorizer summary,ajira successfully delivered first project clojure recently impressive outing last eight week able deliver complex feature ease outstanding dataoriented programming feature provided clojure blog post summarizes experience problem statement project delivered low code development platform system administrator configures way entire application would look like behave end user addition end user also customise create page platform also provides role based access control also configurable system administrator nutshell fixed domain domain model configuration drive everything chose clojure going lean inception client found critical piece solve dynamically creating sql query based configuration transform shape returned data since entire application going dynamic driven configuration decided dynamic programming language would ideal fit contender javascript nodejs clojure chose opt language took dynamic sql generation part spike nodejs clojure within half day able solve ease clojure even picked another piece spike completed well nodejs implementation took day upon completion compared codebase decided unanimously go ahead clojure got nod client turned excellent decision hammock driven development first solve problem write code john johnson one significant benefit reaped developing project clojure productivity inspired hammock driven development took considerable amount time think problem jumping code solution remarkable experience implementation well thought able deliver feature effectively another thing like highlight process transforming mental model whiteboard sketch solution actual code clojure astonishingly simple ceremony boilerplate final solution exactly resembled mind power treating code data dataoriented programming sweet spot clojure helped u lot developing solution using clojure map vector core library function able achieve lot also helped u seamlessly deliver client want threading macro threading macro clojure another outstanding part core library helped u lot achieving better code organisation readability f used pipeline operator great extent using sometimes faced problem defining parameter order function pipelining parameter order function made sense one context work well pipelining another context need either change parameter type make use flip function ephemeral swap parameter break pipelining new intermediate binding continuing new pipelining option break elegance readability get pipelining clojure never problem due macro used macro time macro place function parameter order different destructing pattern matching apart pipeline operator thing enjoyed lot coding f destructing pattern matching clojure right money feature due dynamic type system lisp syntax even enjoyable clojure clojurematch library bell whistle needed pattern matching static type v dynamic type written production system c f golang kotlin last nine year using functional programming principle develop software previous four year project first encounter dynamic programming language backend lisp production sceptic using dynamic programming language production relied heavily typesafety provided strongly typed functional programming language like f used wonder build something stable without strong type system however clojure made revisit thought process developing product felt freedom rigid type lot place ability reuse function different context quite useful also liked clojure way rich hickey way precise approaching problem solving using dynamic programming language effective program talk rich eyeopener never felt like missing type system working clojure library made job easier mentioned earlier core engine product generate sql query based configuration configuration data represented using clojure data structure wanted process transform sql honeysql exactly platform different kind widget like chart table addedit form made configuration data widget specify underlying database schema uniformed way created single layer abstraction take unified representation used honeysql generate sql query extensibility feature provided honeysql advantageous leveraged lot example honeysql inherent support ilike clause postgres added extension method couple line worked like charm apart simplicity exposing http apis support swagger api documentation generation handy also leveraged input data coercion ability using schema defining nested spec complex domain model breeze due lisp inherent composability loved library standard crud operation dealing application configuration developing functionality using toucan absolute breeze along compojure api others creator calva done amazing work bringing emacs cider experience v code along bracket pair colorizer development workflow went smooth ensure everybody team follows style formatting clojure code used cljfmt eastwood build pipeline summary secret building large apps never build large apps break application small piece assemble testable bitesized piece big application justin meyer quote summarizes overall experience developing product using clojure clojure empowered u deliver software faster without compromising quality enlightening journey definitely consider using clojure upcoming project sure opt fit
322,Lobsters,clojure,Clojure programming,I’ve been learning Clojure. Here is what I love,https://medium.com/@chrisburgin95/ive-been-learning-clojure-here-is-what-i-love-65f0425b22db,learning clojure love,clojure functional clojure lisp clojure made old people clojure community,clojure functionali guess title read functional programming style sense designed practical sense much talking functional programing style year programmed funtionally javascript holding strict set standard key sentence rest fact holding functional standard language purely functional learning clojure clear want program functionally best language work since clojure designed functional thing make functional programming hard javascript instantly vanish instead hoping hold standard language heavy lifting mewhen come talking benefit functional programming versus style find hesitant dive paper top paper written people qualified answer question say functional programming greatly benefited term simplicity reliability addition volunteer mentor code louisville find beginner easier time understanding functional concept compared style clojure lispthis point really drive home one main thing hated clojure beginning member lisp family come view lisp family lot compassion respect recently basic concept easy even beginner understand blown mind concept codeasdatai know normal mention macro transformingextending language talking codeasdata actually biggest benefit creating real world program rely heavily data easy argument make without data program existence today would border useless since data code closely reliant make sense use language code exists level data know may greatest description promise start using language understand clojure made old peoplein incredibly unlikely event clojure maintainer contributor reading hold horse give minuted explain accurate title might say something like clojure made experienced people honest title lot le fun let get point though seen wisdom year experience clojure community language community participated wisdom greatly beneficial developer like beginning development career want resolve problem existed solved year ago community node javascript struggle greatly feel like every month resolving problem way inherently betterin limited time clojure community case mean look breaking change exist clojure clojurescript compared language framework experience wisdom hard separate year experience clojure community overflowing come experience clojure communitythis final point mean lesser point clojure community incredibly welcoming strong desire see positive growth great community nothing benefit language future
323,Lobsters,clojure,Clojure programming,Using Clojure + GraalVM for shell scripting,https://gist.github.com/denisidoro/d33270370c6a3523354daa3753f2db35,using clojure graalvm shell scripting,objective edn hiccup reframe dotfiles clojure script using clojurescript lumo using clojure clojure cli trivial toolsdeps leintoolsdeps leiningen speeding graalvm graalvm aot compilation,objective code shell script allow easier writing xml file let say output generated grid row label id info text playing text row row button ontap mute row grid like write grid row label id info text playing row button ontap mute way syntax subset edn called hiccup used framework reframe way dotfiles store versionate compose configs hiccup file xml one simple task bash would feel natural use clojure script using clojurescript month ago would write script using lumo crossplatform standalone clojurescript environment run nodejs javascript engine also script relatively fast hello world take run without caching machine caching enabled find example script helper lumo using clojure advent clojure cli stopped using lumo simply using clj command migrating lumo clj trivial give u feature better support macro reader macro multithreading using toolsdeps dependency graph expansion using leintoolsdeps leiningen compatibility downside startup time simple hello world take around xml hiccup script depends library need finish fine onetime script call clj script bash forloop probably want grab coffee run speeding graalvm graalvm universal virtual machine running application written javascript ruby jvmbased language using aot compilation compile clj script native code nt rely jvm benefit let compare startup time λ echo table time clj xml table dot cloj jvm f data xml user system cpu total devnuitaipu crebitoadd λ echo table time nativebinary table dot cloj jvm data xml user system cpu total one order magnitude faster addition simply copypaste binary machine architecture o work regardless jvm nodejs example script helper clj graalvm found
324,Lobsters,clojure,Clojure programming,Native Clojure with GraalVM,https://www.youtube.com/watch?v=kjZP_wBQJ2U,native clojure graalvm,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature native clojure graalvm jan stępień youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature native clojure graalvm jan stępień youtube
325,Lobsters,clojure,Clojure programming,Cybernetics Versus Informatics: Understanding the Type Wars,https://medium.com/@rplevy/cybernetics-versus-informatics-understanding-the-type-wars-99878fe956d6,cybernetics versus informatics understanding type war,cybernetics versus informatics understanding type war two competing theory fundamental nature system organization underly contentious debate computing type war system consume data manipulate term semantic meaning produce meaningful result system satisfy requirement meaningfully adaptively novel uncertain environment informatics tradition computing psychology rosetta stone paper cybernetic tradition system biology computing clojurespec spec type war,cybernetics versus informatics understanding type warstwo competing theory fundamental nature system organization underly contentious debate computingthe early history computer story mathematical electrical engineering achievement early emerged two distinct interacting culture computing two tradition reflected first highlevel programming language lisp fortran lisp product mathematical interest fortran interest engineer seeking efficiently control machine greater easethis article difference mathematical purist technical pragmatist seldom clear division borrowing focus theoretical orientation informatics cybernetics found affinity mathematical technical culture respectively note imply cybernetic approach make use math rather suggest horse pull cart vice versa two approach remain odds one another heart come regard type war terminology used field somewhat inconsistent le clear use term informatics refer goal system consume data manipulate term semantic meaning produce meaningful result cybernetics refer goal system satisfy requirement meaningfully adaptively novel uncertain environmentsin addition bringing clarity often obfuscated conflict underlying type war try present convincing argument category theory may help craft limited important way greater aspiration informatics likely ever delivered computing cognitive science cybernetic approach contrast show great deal promise current wave progress modelfree ai machine learning notably computationalist method underscore thisthe informatics tradition computing psychologylisp elegant expressively powerfully language found niche early foray artificial intelligence became associated idea symbolic computation computing mathematical expression symbolic computation province computationalism theory brain computer thought computation one relatedly often connection ai computational cognitive modeling effort cognitive psychologist began adopt neocartesian philosophy information processing borrowed computing seeking mechanism raw sensory data converted representation world processed passed brain module brain modulewhile failure information processing model significantly advance understanding cognition gradual protracted application idea computing famously collapsed weight promise could deliver unfortunately broader adoption use lisp language close association naively ambitious ultimately failed experiment industry academia meant ai winter also cold time period lispeven symbolic ai collapsed major problem found theory information processing another thread mathematical tradition computing old predate actual existence computer quietly continued grow improve static type checking formal program verification finding root type theory category theory language ml miranda haskell coq leverage formal proof tool improving code qualitywhile might seem nothing le modest practical approach safely developing software today proponent program proof school aspire epic ambition rivaling first wave artificial intelligence highly influential rosetta stone paper example asserts equivalence proposition type physical system topological manifold encompassed object abstraction category theory point development general science system process far mere practical concern category theorist resurrected information processing approach time successfully model world software say time claim successfully build software capture meaning representation processing representation extract produce useful meaningsthe cybernetic tradition system biology computingperhaps ironically perhaps due success small remnant lisp community deliberate attempt shake old association course lisp came associated new narrative lisp regained popularity early came regarded alternative overly purist kind functional programming preoccupied type proof lisp effect switched side culture computing sense static v dynamic always dynamic sense positioned opposite objective informatics playing strength dynamic language strength symbolic processing gained reputation flexible language thing like evolutionary computation diverse multiparadigm set building material domainspecific language general powerful tool enabling one take ambitious problem kindsby end decade rich hickey outspoken critic many claim made static typing advocate succeeded delivering clojure building larger lisp community world ever witnessed clojure also brought many good idea lisp functional language immutable data structure laziness may rich hickey announced clojurespec integrating specification system core language took opportunity say expressivity proofthere reason limit specification prove yet primarily type system much want communicate verify system go beyond structuralrepresentational type tagging predicate eg narrow domain detail relationship input input output additionally property care often runtime value static notion thus spec type systemdoubtless read paragraph clojurespec stated rationale nothing opinionated jab programming language competition would ignore actually going declaration clojure doubling commitment philosophy expressiveness robustness adaptiveness contrast philosophy preconceived proof selfcontained meaning independent runtime environmentsin type war article referred bob make case tdd presumably generative testing dynamic language offer place type system truth evident experience might readily evident one many example cybernetic tradition software development tdd bdd etc outsidein approach emphasizes runtime behavior system test purpose make system robust changing condition test viewed regulating behavior code keeping functional requirement place code produce behavior evolves timeto explore important note history approach adaptive control environmental shaping selforganizing system merely practical convenience one developed many decade scientific investigation early work cybernetics early focused adaptive behavior physical system machine precursor later work machine learning reinforcement learning aim cybernetics find general principle control applying system cybernetics began focus system biology mechanism control living system period francisco varela coined term autopoiesis describe phenomenon system capable maintaining reproducing study autopoietic mechanism led development enactivism theory perceptual experience fully constituted sensorimotor skill probing effecting environment thus constructing mode access presenceearlier mentioned failure cognitive science conceive way raw sensory data converted representation world could processed meaningfully computerlike brain enabling intelligent decision drew direct line comparison problem solved computing despite major effort gofai category theory enactivist cybernetic framework contrast suffer problem let consider example dog trying access treat side barrier first dog skillfully flexibly exploit affordances environment need represent world one directly present secondly dog perceives thing learned produce rewarding outcome experiment available affordances climbable aspect barrier order get treat informatician would overcomplicate trying devise representation world dog brain process produce transformation representation would generate action plan something along line enactive frame reference thing need dog brain way remembering skill work effectively direct context action knowing context action equal footing skill dog applies sensorimotor skill worked similar circumstance representation manipulation representation ever neededgiven problem informatics approach cybernetic approach suffer seems likely continue solve problem developing better adaptive metaheuristic framework applying everyday computing need dream adaptive software agent train rather program pipe dream much likely outcome current progress area research like reinforcement learning indeed recent result google deepmind others show major advancement unsupervised control highdimensional sensory input placing longterm bet category theory silver bullet favor softcomputing framework compose semiautonomous adaptive agent solve problem
327,Lobsters,clojure,Clojure programming,Clojure is Cool,http://ahungry.com/blog/2018-09-09-Clojure-is-Cool.html,clojure cool,,single biggest selling point lisp overbearing factor love completely unique development compared typical language compiled interpreted uniquesuperior even language lean towards repl based approach j apl prolog elixir programming trying code like term time cause effect time take making change seeing result change compiled language usually large programmer update program recompile execute finally see result change interpreted language slightly le compilation step removed test driven development tdd methodology even le execute scope reduced entire world software specific segment code developed requires lot boilerplate even test runner always tightly coupled individual test editor level language offer pleasant repl experience even php nodejs give decent built repl still run problem separate environment actual world software execution runtime isolated interactive environment often manual ephemeral experience user run code command run simply disappear session end etc coupling code individual snippet level repl environment repl environment execution runtimeworld one lisp case bit mind blowing first time trying type code repl save source file somewhere asked perhaps kind folk irc actually modify program source file select sexpression block code surrounded parenthesis evaluate block code running repl runtime image bit mind blowing realize great revelation revealed became clear parenthesis good reason interactive functionality work well imagine trying reevaluate single snippet code nonlisp language good luck writing parser handle redefining single method without hot reload entire file many case entire project let say make time cause effect appear eon even may tried front end fast hot module reloading like typescript fusebox createreactapp try something like clojurescript fighweel want go back
328,Lobsters,clojure,Clojure programming,Why interceptors?,https://quanttype.net/posts/2018-08-03-why-interceptors.html,interceptor,sieppari pioneered pedestal framework pattern reframe reitit let work content encoding decoding authentication ring specifies queue data angelinterceptor summary,metosin thinking interceptor clojure clojurescript thought much fact made interceptor library clojure called sieppari understand let take look pro con using interceptor instead middleware interceptor clojure pattern pioneered pedestal framework replaces middleware pattern used ring pedestal used handling http request used handling kind request example reframe used handling web frontend event button click metosin used bunch project developing sieppari used reitit latest http routing library let work ring http request handler function take request map return response map something like defn myhandler request status header contenttype textplain body hello enhance behavior handler reusable way wrap higherorder function take handler parameter used implement feature like content encoding decoding authentication example debugging middleware print incoming request map outgoing response map defn printmiddleware handler fn request prn request request let response handler request prn response response good thing middleware simple implement clojure function use standard construct trycatch fast problem start try handle asynchronous operation ring specifies async handler function take callback sending response raising exception argument write separate version debugging middleware asynchronous handler defn debugmiddleware handler fn request respond raise prn request request handler request fn response prn response response respond response raise using code synchronous asynchronous handler tricky error handling get difficult interceptor offer solution split middleware two phase enter leave called reframe enter called executing handler leave called afterwards phase get context map parameter return updated context map request key request response put response def debuginterceptor enter fn key request context prn request request context leave fn key response context prn response response context middleware composed nesting function call interceptor work need executor take chain interceptor called queue executes order cool thing interceptor return asynchronous result deferred coreasync channel example executor wait interceptor return synchronous result executor act directly allows use interceptor synchronous asynchronous operation downside executor bound slower nested function call another downside structure like trycatch withopen work anymore allow proper error handling interceptor optional error phase get called inner interceptor throw exception queue data middleware call handler example authorization middleware may decide request authorized instead calling handler return error response interceptor go remaining queue stack alreadyentered interceptor exposed context map manipulate authorization middleware want return early assoc context queue another example routing interceptor push routespecific interceptor handler queue finally since interceptor chain data instead middlewarenesting code fancy trick like dynamically reorder interceptor based dependency angelinterceptor implementation sieppari support well bit skeptical whether real use case need summary interceptor allow easy mixing synchronous asynchronous code interceptor expose queue call stack data give finegrained control execution interceptor prevent error handling trycatch would work well asynchronous code anyway interceptor probably bit slower middleware
329,Lobsters,clojure,Clojure programming,fern,https://github.com/cognitect-labs/fern,fern,fern usage api plugins reporting error license,fern fern simple useful language data use fern read kind trusted data fern semantics make extremely useful configuration data usage fern data stored form edn specifically edn map symbol key example simple fern file host localhost timeout thing make fern fern provides way one part fern file reference another syntax recursively evaluating symbol fern identical clojure dereference syntax example let imagine need configure three server server listens different port happen host use timeout value case fern configuration might look like host localhost timeout host host requesttimeout timeout port host host requesttimeout timeout port host host requesttimeout timeout port note host value set host reference host ultimately resolve localhost specifically rule fern evaluation dereferenced symbol either clojurecorederef asymbol asymbol recursively evaluated fern value form fernlit keyword replaced result calling fernliteral keyword provides mechanism add custom processing fern file defining method fernliteral using inside fern file value form fernfern replaced entire fern configuration value quoted fernquote returned unprocessed fern thus fernquote avalue long winded way saying avalue use fernquote rare instance need prevent fern evaluation example say fernquote clojurecorederef foo get value clojurecorederef foo without fern try resolve foo anything else evaluates foo bar evaluates three element vector containing number symbol keyword evaluates three element list whose first element symbol api fern provides two level api core fern api defined fern namespace ferneasy namespace provides number convenience function make reading fern file relatively painless example ferneasyfile environment take path read fern file path return fern environment require ferneasy def e ferneasyfile environment examplefern fern environment use fernevaluate pull value require fern def fernevaluate e plugins since fern allows add custom processing defining additional method fernliteral multimethod also supply short cut loading new namespaces fern file use shortcut use ferneasyloadenvironment place ferneasyfile environment ferneasyloadenvironment nearly identical ferneasyfile environment difference take second argument second argument symbol fern file whose value collection namespaces require slightly contrived example imagine clojure namespace called servername n servername require fern f defmethod fliteral servername str com using plugins facility pull namespace use servername literal file plugins servername server example timeout host fernlit servername host host requesttimeout timeout port host host requesttimeout timeout port host host requesttimeout timeout port call fern like require ferneasy def e ferneasyloadenvironment examplefern plugins discover fernevaluate e host host serverexamplecom reporting error fern offer easy way print error get exception fernevaluate ferneasyloadenvironment ferneasyvalidate call ferneasyprintevaluationexception print nicely formatted message license copyright cognitect inc distributed eclipse public license either version option later version
330,Lobsters,clojure,Clojure programming,Imitating Scala Futures with Go channels (in Go and Clojure),http://tindaloscode.blogspot.com/2017/03/imitating-scala-futures-with-go.html,imitating scala future go channel go clojure,,scala future abstraction one favourite feature language simple elegant powerful make beginner attempt mimic go simplistic domain let assume two function take time http call naturally return future need aggregate result scala way go way rather clunky compared scala solution main problem polymorphic type lump code would need redefined every time function signature change generic version us explicit type casting nicest code ever written go generic golang expert could suggest improvement clojure way clojure borrowed goroutine channel idea golang yet difference clojure go version term brevity striking result independent factor one clojure dynamically typed hence need hassle neither function signature generic rather lack two functional language map list comprehension way terse go forloops third factor asyncgo return channel containing result function executed go need create slice channel first loop slice function create anonymous function go block function executed result put channel lot hassle generic many go problem would go away rob pike explicitly said generic hopefully someone force instead
331,Lobsters,clojure,Clojure programming,Retrospective on publishing an iOS app with ClojureScript and React Native,http://increasinglyfunctional.com/2018/08/17/i-published-an-ios-app-with-clojurescript-and-react-native.html,retrospective publishing io app clojurescript react native,outboard clojurescript react native reframe pro functional reactive programming repldriven development hiccup syntax flexbox hiccup library availability native module con react native sharp edge packager issue metro issue future plan sync alternate device conclusion translation available russian я опубликовал приложение для io с clojurescript и react native,past year kept notesapp list restaurant hike bar thing meaning visit messy geographicallyaware difficult quickly add finding satisfactory solution elsewhere decided scratch itch build app worth spot home screen outboard result last five month side project hacking built clojurescript react native built couple apps using objectivec enjoy swift language stack become familiar functional reactive model interpreted reframe hard approach ui implementation way throw hot reloading clojure repl clojurescript react native obvious choice follows pro con ran along way pro functional reactive programming risk overselling start simply run bug intersection state ui anymore entire class defect struggled last decadeplus professional software development virtually disappeared slightly outofsync screen link dead data gone place lightweight lowceremony lowboilerplate framework reframe make data manipulation straightforward easy understand return old code future opinion reframe killer application clojure philosophy front end repldriven development ability experiment change app layout running state io simulator transformative speed development want know particular set data might look like laid device eval single line repl result onscreen instantaneously comparison recompiling manually updating data hiccup syntax probably personal preference borne experience app layout flexbox hiccup much easier grapple xcode interface builder never found apple constraint system managing different device size resolution intuitive flexbox let leverage meager web design experience make reasonable responsive app design library availability react native community point time span wide range heavilyinvested company resulting good stable wellmaintained library additional functionality used javascriptnative simple integrate clojurescript native module thing needed react native library already built building functionality thing like data storage app group geocoding address mapkit swift exposing clojurescript layer straightforward subject post con sunshine rainbow though far biggest problem ran working deep stack layer would change sometimes without warning love using clojurescript introduces another layer abstraction top shaky foundation npm javascript react native constant state flux react native sharp edge react native particular prone frequent breaking change part able sit locked version react native occasionally adding library would require upgrade react native upgrade process exceptionally brittle requires manually git merging large infoplist file packager issue one acute pain point resulting tool mismatch issue react native packager metro clojurescript us entirely different compiler packager google closure using two together inefficient see example issue documenting memory time issue metro slowly try package alreadypackaged clojurescript file even without extra complication closure metro infuriating work solved issue cache hour following dozen posited solution github issue thread simpling renaming directory project lived future plan happy release using daily making occasional ui tweak bugfix plan big future feature though sync obvious next step adding sync functionality user share others device app data entirely represented edn spec hopefully make sync service easier reliably build alternate device also like add client ipad desktop able repurpose data model appropriate ui layer top helpful conclusion tradeoff fully considered choose clojurescript react native heartbeat class app speed reliability heart development process hard beat outweigh misaligned tool occasional ecosystem immaturity issue translation version post available russian я опубликовал приложение для io с clojurescript и react native
332,Lobsters,clojure,Clojure programming,An Explanation for Composability of Clojure Transducers,https://nextjournal.com/zampino/fold,explanation composability clojure transducer,fold explanation composability clojure transducer c c universal property fold universal property expressing list operation term fold transducer clojure transducer fusion property composition fold morphism f g stateful transducer cat reduced lozampino appendix,foldan explanation composability clojure transducersin tutorial universality expressiveness fold graham hutton present clear understandable way advantage programming fold core concept exposed among universal fusion property fold found bird book short article apply idea clojure transducer show fusion property implies efficiency composability transducer beyond writing compare left right fold clojure lazyness since clojure reduce notationally left fold assume list left list say clojure vector note also follows clojure fold found clojurecorereducersthe universal property foldfollowing hutton define fold function list mean following property set inlineformula implemented inlineformula implemented define set function inlineformula implemented call right action inlineformula implemented inlineformula implemented denoted inlineformula implemented also function inlineformula implemented clear context write inlineformula implemented inlineformula implemented inlineformula implemented function defined asformula implementedsuch given inlineformula implemented following property hold formula implementedwhere inlineformula implemented list obtained conjunction list inlineformula implemented element inlineformula implemented inlineformula implemented clojureinlineformula implemented fixed inlineformula implemented form indeed universal property ie function exists unique inlineformula implemented fully caracterized property unicity proven mean induction assume function inlineformula implemented inlineformula implementedwhich satisfy disagree ie inlineformula implemented list inlineformula implemented also need disagree inlineformula implemented hence inlineformula implemented must length zero contradicting also restate saying inlineformula implemented function inlineformula implemented inlineformula implemented partial application inlineformula implemented commute inlineformula implemented inlineformula implemented formula implementedexistence fold function proved implementation context majority programming language clojure fold reduce function universal property actually provide constructive definition since inlineformula implemented satisfies definition easily prove forinlineformula implemented function build cheap functionequality check integer vectorsto get hint definition sound trying concrete examplemap result true numtests seed map result true numtests seed expressing list operation term fold transducersit possible express lot function list term fold amongst popular filter inlineformula implemented inlineformula implemented action natural number list natural number clojure transducer bring pattern one step incapsulate listlike operation independently reducing function formally transducer transformation action ie function formula implementedwhich behaves functorially respect fold explained later function like inlineformula implemented inlineformula implemented clojure given single argument return transducer instance loot atand let see applied theinlineformula implementedfunction firstvector later inlineformula implemented functionthe strong point using transducer practice offer stack reducing operation composable way input list visited take instance step whole list returned fed next computation iterates transducer wo nt happen following snippet code read input collection encoding transformation single action clojure almost simpler formlater also see reason contravariant behaviour order function composition natural righttoleft orderfusion property composition foldshaving shown many function list expressed term fold actually assert composition fold expressible fold single action one step direction given fusion property given right inlineformula implementedactionsinlineformula implemented inlineformula implementedwe call function inlineformula implemented morphism f g inlineformula implemented hold every inlineformula implementedwe prove inlineformula implemented stable application morphisms ie given morphisminlineformula implemented action like one formula implementedto prove equality appeal universal property prove inlineformula implemented equality must hold every list ininlineformula implemented trivial see follows combining commutative diagram formula implementednow want compose fold function list restrict specific class action say action list inlineformula implemented split exists functioninlineformula implemented inlineformula implemented inlineformula implemented note action defined example split formal imagination filter case given splitting inlineformula implementedaction inlineformula implemented action inlineformula implemented inlineformula implemented inlineformula implemented define function action inlineformula implementeddefined byformula implementedwe state transducing property fold splitting action term every splitting inlineformula implementedand g formula implementedwhere inlineformula implemented inlineformula implementedto prove transducer lemma enough show inlineformula implemented morphism actionsinlineformula implementedand inlineformula implemented formula implementedlet apply lemma simple clojure case whereinlineformula implementedisinlineformula implementedandinlineformula implementedisinlineformula implemented theninlineformula implementedsplits definition andinlineformula implementedisinlineformula implemented map result true numtests seed since function composition associative repeating step also get instancemap result true numtests seed explains countravariant behaviour composition transducer respect composition nontransduced formstateful transducer catthere transducer escape pure form splitting action defined notablyto flatten list output fly stateful transducer like say form ofinlineformula implementedor form takewhilewhich us reduced trick shortcircuit fold allowing nice stuff likeif like discus find lozampino twitter remix article explore transducer clojure
333,Lobsters,clojure,Clojure programming,Typed Clojure in Theory and Practice,http://ambrosebs.com/talks/proposal.pdf,typed clojure theory practice,,obj length filter flatedecode stream
334,Lobsters,clojure,Clojure programming,How Nextjournal team went from Elm to JavaScript to ClojureScript,https://www.youtube.com/watch?v=Q6Q5D6mI-34,nextjournal team went elm javascript clojurescript,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature build tool tool building philipp markovics youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature build tool tool building philipp markovics youtube
335,Lobsters,clojure,Clojure programming,ClojureScript - It's not just the language,https://www.youtube.com/watch?v=1YqnaUXcSl8,clojurescript language,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojurescript language christian johansen youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojurescript language christian johansen youtube
336,Lobsters,clojure,Clojure programming,An Animated Introduction to Clojure,https://ourcodestories.com/markm208/Playlist/4/,animated introduction clojure,animated introduction clojure,playlist animated introduction clojure public playlist title introduction type tag changed
339,Lobsters,clojure,Clojure programming,Logging: change your mind,https://juxt.pro/blog/posts/logging.html,logging change mind,definition done tracking analytics mean naming thing riemann leverage namespaced keywords use name different state log data string nt answer question show answer keep visualisation code logging code sync logging performs side effect nothing ashamed learn java lesson inhumane number standard xml property file test logging nt worry function signature system monad transformer stack datomic full code reference,people consider logging something nice supplement code matter something add order debug problemhaving worked past year distributed microservices architecture finally discovered logging truly google analytics codethink business asks track interesting behaviour information need make informed decision want know feature driving customer campaign getting traction one solution preferrable anothershould nt professional understanding code ship day day need able answer sort question receive transaction receipt productxyz last night much stock level increased productabc since last week time receive unique number provider check disclaimer mostly writing middleware connects external service nt store much data one end logging spectrum nt log incoming request request happened hand storing data something like datomic record plenty metatada around transaction would different logging requirement point remains think something nt store directlythen technical still business relevant point view like answer adding featurexyz slow response time much part system memory bound cpu bound much buffer hit limit project load would force u increase limit noticeable effect abcoutage part effected trigger alert detect similar behaviour outage occurs list could longer idea point anything similar definition done team definitely add implemented relevant logging metric checklist like implementing automated test code important adding appropriate logging delivers business value along code shipbelow list thing learned refining logging behaviour system two important realisation make log event explicits giving name make act logging explicit passing log around choice positive series ramification discus sectiontracking analytics mean naming thingsthe major improvement logging infrastructure happened decided use riemann top many benefit riemann opinionated shape data accepts example requires entry unique name called service riemann revolution u much like google analytics anything want track need name refer observe query plot pinpoint itleverage namespaced keywordsclojure make extremely easy give thing log unique memorable name thanks namespaced keywords yes rich hickey right example logwarn logger customerupdate reason found assuming logging n appuser resulting name log entry would appusercustomerupdate make easy filter thing namespace search memorable namedo nt rely file line number thing want log name line number change context name easy search remember graph reason aboutuse name different statesthis something derived riemann beginning logged thing like healthy system loginfo logger systemhealthgood logerror logger systemhealthbad reason describe system changed pattern healthy system loginfo logger systemhealth logerror logger systemhealth reason describe system event name easily trigger alert something transition good state bad state viceversa also general rule first pattern force lot custom rule name thing way change logging level need tolog data stringsthere bunch useful thing likely log discard limitation legacy logging framework force log data stringa complete log event look something like service userprofileupdate level warn time inst description beforetrasact aftertransact b metric tag xrequestid gogglesenabled prerelease host localhost example another good idea got riemann attach metric key many event possible loginfo apirequest metric time req loginfo parseunsubscribers metric count unsubscribers logwarn jobtimeout metric count retries logwarn heapthreshold metric percentageheapused one many example added extra field like requestid track single operation across many service executionid follow code execution asynchronously feature enabled deployment customerid group action made single user etc etconce realise data possibilites endlessdo nt answer question show answerthis strictly logging related ship log riemann realtime monitoring elasticsearch storage querying many question asked beginning post require search elasticsearch come quick answer obvious next step provide business graph plot answer question without run search manually kibana good event name metric make easy show graphically also start choose event want track putting shoe future self business thinking want see displayed dashboardkeep visualisation code logging code synca bonus feature discovered kibana sure many tool describes visualisation json allows import themif describe visualisation code project add dependency cross link namespacedkeywords use logging code one reference visualisation decide renamerefactor one event nt break existing dashboardslogging performs side effect nothing ashamed ofwe try disciplined way structure effectful code discovered trial error global state cause problem solves sneaking side effect function might make life easier inevitably going harm long runinstead relying global logger instance pas logger explicitly function need perform logginglearn java lessonthe situation java ecosystem logging make think went wrong inhumane number standard awkward xml property file initialisation using tool requires hour even day study understanding fundamentally wrong choice bottomjava logging wanted transparent tool static class initialised somehow work box magic like magic software sometimes work sometimes nt hitandmiss magic wand need build something reliableif throw away assumption static initialisation global singleton left dead simple interface defprotocol logger log msg want logger print stdout defrecord stdoutlogger logger log msg println msg want logger sends log json format elasticsearch defrecord elasticsearchlogger logger log msg httppost elasticdomain jsonencode msg want fully asyncronous using coreasync defrecord asynclogger channel logger log msg async channel msg done magic allanother problem find traditional logging framework happens want carry context logging call classic example attach userid value method invoked request performed certain user extremely useful nt pas around information want log subroutine main function invokes usually work like logframeworksetcontext userid abc much later nested function logframeworkperformlog foo bar contains userid abc pas around logger explicitly problem disappears want pas contextual information simply create new logger set information whenever call work like map work defn map f logger reify logger log msg log logger f msg defn handleuserrequest logger userid let logger map assoc userid userid logger whenever logger used userid automatically added eliding certain type log production v deployment want passing flag xml configuration prefer prefer write let log getlogsfrom logger filter log namespace appuser priority warn need learn way logging framework datatest loggingwhen start business critical information log really need test log invoice receive servicexyz manipulating sending serviceabc want log fact received otherwise way answer business question like received new invoice today since logging explicit log name simply pas testlogger function test defrecord testlogger log logger log msg swap log conj msg deftest logscorrectdata let logger testlogger atom fnundertest logger invoice data expectedlogs logger log deref capturing log test also help test code nature hard test code return data code call external service hard mock asynchronous code check presence certain log correct data rather pas complex mock stub everywhere systemdo nt worry function signaturei read discussion logging haskell curious see happens function signature decide explicit side effect end constantly refactoring function parameter add logging turn casepure function pure interesting information log want debug unit test point code dependency data data want log something log outside functionsimpure function impure already take parameter like db connection executor end clojure group map called deps dependency pas first parameter defn transactstuff key conn logger executor deps stuff come system map stateful part program usually convenient keep grouped together tend change lot uncommon add yet another db parameter need transact another storage place queue well squint hard enough look lot like haskell equivalent solution monad transformer stackclojure one advantage baked enthusiastically encouraged language make function return data lot data data need finding want return exhaustive data representation computation happening inside function job consumer pick interested inwhich one prefer defn importfromcsv ok defn importfromcsv processed skipped took reason response describe data structure happened inside function nt need pas logger function simply log parent function parent parent keep assembling big data structure bubble surface side effect performed technique borrowed working datomic rather passing connection function assemble transaction data structure bottom finally perform transaction top level function way closer function take data return data making easier test reason aboutfull code reference n examplelog defprotocol logger log msg defn map f logger reify logger log msg log logger f msg convenience fns probably want trace debug failure well add timestamp host etc defn info logger service desc log logger service service level info description desc defn warn logger service desc log logger service service level warn description desc defn error logger service desc log logger service service level error description desc example defn updateprofile logger user user info logger profileupdate user warn logger profileupdate reason found defn handleuserrequest logger userid let logger map assoc userid userid logger user comment getuserfromdb updateprofile logger user logger comment nt appropriate dependency defrecord stdoutlogger logger log msg println msg require cljhttpclient http cheshirecore json defrecord elasticsearchlogger logger log msg httppost elasticdomain jsonencode msg require clojurecoreasync async defrecord asynclogger channel logger log msg asyncgo async channel msg defn tryasync let key channel logger asynclogger asyncchan info logger somedata hello async asyncgo println async channel test log require clojuretest refer defrecord testlogger log logger log msg swap log conj msg deftest logscorrectdata let key log logger testlogger atom handleuserrequest logger profileupdate map juxt service userid log
340,Lobsters,clojure,Clojure programming,Building a content-based recommender system in Clojure,https://thoughts.codegram.com/building-a-content-based-recommender-system-in-clojure/,building contentbased recommender system clojure,full stack fest nail automatic document tagging list stopwords language choice hammer tfidf term frequency inverse document frequency term frequency stopwords code development build like uhm inverse document frequency rare across document tfidf document tagging recommendation cosine similarity tfidf bonus search running production making really webscales buy memory seriously calculate tfidf subset corpus offload tfidf calculation apache spark similar conclusion http,codegram retreat well spent working fun problem never chance work one inhouse app project hope release public later year curated platform discover new tech talk watch netflix tech talk wishsourcing content easy task tech conference including full stack fest upload video youtube similar video hosting platform freely availablehowever content one part story find relevant content tag make searchable nail automatic document taggingso video know talking youtube metadata offer u little help since video tagged tagged something along line science technology useful need look deeper video understand subtlety techy language extract relevant tag contentfortunately video youtube available caption useruploaded automatic essentially pretty faithful transcript talk working transcript much comfortable working video raw textso first step able convert raw text individual token removing stopwords common word article preposition verb need download list stopwords language choice require clojurejavaio io clojurestring str def stopwords withopen rdr ioreader stopwordsentxt set lineseq rdr defn tokenize strsplit strlowercase azäöüáéíóúãâêîôûàèìòùçñ remove stopwords tokenize clojure pretty nice language clojure pretty nice language great need way extract relevant termsthe hammer tfidfa possible approach socalled tfidf stand term frequency inverse document frequency respectively let unpack term frequency map term word frequency document usually normalized ie divided total word count document metric tell u often word repeated document presumably telling u important word defn termfrequencies token let freqs frequency token termcount count token freqs map fn term frequency term frequency termcount termfrequencies b b c c c b c expected appears time b c half timeyou probably seeing catch would nt frequent word always something like article preposition virtue common english word text yes even removed also known stopwords preprocessing document problem remains true common word likely appear many many talk without directly relevant topic think code development build like uhm etc account need another metric inverse document frequency measure precisely rare term across document assuming term repeat lot everywhere le meaningful within particular document combine factor literally multiplying get tfidf term documentcalculating idf single term simple corpus vector document case document simply set term defn idf term corpus let documentsmatchingterm count filter term corpus documentsmatchingterm count corpus documentsmatchingterm mathlog let corpus clojure pretty nice language scala nice type system rust nice borrow checker clojure idf clojure corpus nice idf nice corpus clojure nice see clojure seems much rare nice latter appears every document make meaningful show upthe last step multiplying tfs idf defn tfidf document corpus termfrequencies document map fn term freq term freq idf term corpus let corpus clojure pretty nice language scala nice type system rust nice borrow checker tfidf go verbose language type system corpus go verbose language type system take term highest value treat tag keywords known automatic document tagging handy start making sense large corpus documentsrecommendations cosine similaritynow distilled opaque data point video neat set keywords relevance score proceed calculate recommendation based scoresthese tfidf score computed seen vector number vector space see document vector compute similarity document computing distance vector space many way calculate distance go one called cosine similarity math behind important defn dotproduct document anotherdocument document map fn term tfidf tfidf get anotherdocument term reduce defn magnitude document document map fn tfidf tfidf tfidf reduce mathsqrt defn cosinesimilarity document anotherdocument let dotp dotproduct document anotherdocument documentmagnitude magnitude document anotherdocumentmagnitude magnitude selectkeys anotherdocument key document magnitudeproduct documentmagnitude anotherdocumentmagnitude zero magnitudeproduct dotp magnitudeproduct let doca hello goodbye cosinesimilarity doca doca cosinesimilarity hello goodbye clojure goodbye expected hello goodbye similar similar clojure goodbye compute similarity document rest corpus provide n top recommendation similaritybonus search search approached similar problem recommendation think search query document search result similar document already built simple contentbased search feature defn search query alldocuments let querydocument tfidf termfrequencies tokenize query alldocuments alldocuments map fn document document cosinesimilarity querydocument document sortby last reverse def corpus clojure pretty nice language scala nice type system rust nice borrow checker search type system corpus scala nice type system rust nice borrow checker clojure pretty nice language search nice language corpus clojure pretty nice language rust nice borrow checker scala nice type system value get next record relevance result similarity document query running productionquickly prototyping recommender system fun aim build production system beginning soon started importing content limitation naive prototype became apparent calculating tfidfs every document expensive done often precisely calculate idf need whole corpus document memorythe first step preprocessing tfidfs document batch way recommendation search could done fly involves operation number yet still need whole corpus memory every time import large number document idf many term likely changed rerun batch process done point corpus thousand video performance seems perfectly fine whole corpus fit tiny amount memory clojure standard heh making really webscalesnow elephant room corpus document grows eventually stop fitting memory idea mitigate particular orderbuy memory seriously get surprisingly far clojure persistent data structure already quite memory efficient thanks memory sharing admittedly would nt bet corpus document sharing lot datacalculate tfidf subset corpusit wo nt yield result quality advantage choose much corpus keep memory change depending budgetoffload tfidf calculation apache spark similarthis probably last resort increase complexity system considerably worth considering reach corpus size willing keep one huge processconclusionthe design development optimization recommender system scratch took le week deploying time every day production much tweaking reimporting reprocessingit run single process memory oneoff task recreating tfidfs needing memory run data persisted postgresql everything hosted heroku monthlooking forward iterating stay tuned release cover image credit http
341,Lobsters,clojure,Clojure programming,Building ETL pipelines with Clojure and transducers,https://tech.grammarly.com/blog/building-etl-pipelines-with-clojure,building etl pipeline clojure transducer,visit grammarly blog,sorry page exist anymorebut never fear still find lot useful writing tip grammarly blogvisit grammarly blog
342,Lobsters,clojure,Clojure programming,Speccing Functions - experience report,https://feierabendprojekte.wordpress.com/2018/07/13/speccing-functions/,speccing function experience report,thing learned stu halloway screencast put conclusion arne brasseur gefällt mir,started using clojurespec fdef speccing function recently short version super fun mindblowingly useful thing learned fdef instrument awesome great building incrementally program trying build also great finding bug spec function get error message function called incorrectly eg trying thing repl test admittedly heard function spec specify predicate function argument return value mean make statement relationship ie function take list integer index argument index must valid index list length list also mean error message way better contain predicate violated see also stu halloway screencast point spec already blow java water dependent type system might able express type relationship spec express proved spec à la carte meaning add spec function another namespace keep code clean also throw away spec longer need spec external library spec yet even spec could spec want use super awesome searching bug also come handy spec function different namespace call code data reproduces error see whether function called correctly allows eliminating potential error case without even touching code addition repl aided development debugging yet another tool help understand program verbosity honesty really hurt say function spec verbose java function signature several aspect counteract spec usually go namespace thus clutter code need spec everywhere useful compositionality great usual clojure land reusing spec lot literally first thing overspec function make fspecs general possible alex miller put specify must true function nothing otherwise le reusable andor unable grow specced function went define type like java mode without thinking specified exactly type argument two list certain keywords found bug call function happy later realized could reuse function apply sequencelike thing go back function spec change expected type argument sequence function relied really interesting quickly easily specific argument type function prevents reuse java two us function would probably reused would end redundant code would make common abstraction thing function work either way lot work unnecessarily conclusion fellow java programmerssufferers clojure feel dynamic first function spec might thing restore immediate feedback type way better feedback way flexibly check correct call error message provide erroneous value well predicate violated able express arbitrary constraint à la carte ness might seem like small thing together change way program needle say using function spec lot really touched feature spec also conformance generative testing well reuse compositionality spec spec huge upgrade clojure one said better arne brasseur clojure spec one exciting thing happen clojure land probably programming general edit used quote convey spec amazing clojure mean say new spec based decade old research function spec also nothing new called contract language like racket seems racket even generative testing based contract dear racketeer using year amazing language gefällt mir gefällt mir wird geladen ähnliche beiträge
343,Lobsters,clojure,Clojure programming,Fast Function Currying in Clojure (Without Macros),https://dragan.rocks/articles/18/Fluokitten-080-Fast-function-currying-in-Clojure,fast function currying clojure without macro,curry email protected email protected email protected curry email protected curry email protected email protected curry,good news though automatic currying possible clojure together multiple arity needed fluokitten supported beginning many year ago since needed real currying implement monadic concept fluokitten implement clojure work thing need curry function turn ordinary clojure function function capable automatic currying result also fully capable clojure function macro special environment required turn existing ordinary function currying one need special concept defcurry even pressure decide currying support time function definition also rather fast let first see used please take account use arithmetic function simple example real life see benefit currying work higher order function need extra flexibility nt attach much arithmetic functionality thinking currying could useful curry existing function require uncomplicatefluokittencore refer curry def curry curriedfunction arity email protected call fewer argument work curriedfunction arity email protected created curried function automatically call enough argument cached repl compute final result nt missing argument one continue currying curriedfunction arity email protected one argument go fine straightforward though asks exactly argument currying unambigous happens variadic function work number argument case curry default since much point currying function argument anyway curriedfunction arity email protected see report arity curried function original function still nt want wanted select specific arity among many support curry accepts explicit arity course def curry curriedfunction arity email protected curriedfunction arity email protected see fluokitten curry adapts everything
345,Lobsters,clojure,Clojure programming,ClojureScript: A Great Place for React,https://www.youtube.com/watch?v=81_p6PSu064,clojurescript great place react,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojurescript great place react jorge colindres reactnyc youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojurescript great place react jorge colindres reactnyc youtube
346,Lobsters,clojure,Clojure programming,Map and Reduce Primitive Arrays Without Clojure Macros,https://dragan.rocks/articles/18/Fluokitten-070-map-reduce-primitive-arrays-without-macros,map reduce primitive array without clojure macro,,let demonstrate problem map reduce amap areduce require uncomplicatecommonscore refer doublefn uncomplicatefluokittencore refer fmap fmap fold foldmap def arr doublearray map return sequence array unchanged normally desired clojure primitive array explicitly built mutability speed sometimes need mutate speed let measure mapping reduction array element criterium canonical example dot product begin gather vec x ldots xn vec ldots yn vec x cdot vec sum n xi yi end gather create two large array create function dot product def arra doublearray range def arrb doublearray range defn dotseq x y reduce map x y quickbench dotseq arra arrb dotseq arra arrb execution time mean m rich hickey knew problem created macro amap areduce help u defn dotareduce x y areduce double x idx re re aget double x idx aget double y idx quickbench dotareduce arra arrb dotareduce arra arrb time faster seq way execution time mean µs much faster verbose avoid reflection penalty sprinkle code double typehints mean function work double create separate version float longs ints etc areduce map macro since working primitive explicit even java special method type primitive array getfloat getdouble getlong setdouble etc amap areduce function instead macro would work type data would box unbox number every call instead keeping primitive incures performance penalty roughly order magnitude
347,Lobsters,clojure,Clojure programming,Meet Clojure MXNet - NDArray,http://gigasquidsoftware.com/blog/2018/06/03/meet-clojure-mxnet-ndarray/,meet clojure mxnet ndarray,apache mxnet clojurepackage meet ndarray operation mxnet project documentation page saving loading multidevice support wrap,beginning series blog post get know apache mxnet deep learning project new clojure language binding clojurepackage mxnet first class modern deep learning library aws officially picked chosen library support multiple language first class basis incubating apache project motivation creating clojure package able open deep learning library clojure ecosystem build bridge future development innovation community provides needed tool including low level high level apis dynamic graph thing like gan natural language support let get introduction one basic building block mxnet ndarray meet ndarray ndarray tensor data structure mxnet let start creating one first need require ndarray namespace n tutorialndarray require orgapacheclojuremxnetndarray ndarray let create zero array dimension x ndarrayzeros object orgapachemxnetndarray orgapachemxnetndarray check shape using shapevec ndarrayshapevec ndarrayzeros also quick way create ndarray one one function ndarrayones one zero nice array specific content array function specific content array first shape second def c ndarrayarray ndarrayshapevec c convert back vector format use vec function ndarray vec c know create ndarrays get something interesting like operation operation standard arithmetic operation def ndarrayones def b ndarrayones ndarray b ndarray vec note original ndarrays unchanged ndarray vec ndarray vec b change use inplace operator ndarray b ndarray vec many operation give taste take look dot product operation def ndarrayarray def ndarrayarray def re ndarraydot ndarrayshapevec re ndarray vec re curious operator available ndarray api check mxnet project documentation page ndarrays calculation might want save load saving loading save ndarrays name map like ndarraysave filename load specify filename map returned ndarrayload filename object orgapachemxnetndarray orgapachemxnetndarray object orgapachemxnetndarray orgapachemxnetndarray one cool thing even due operation cpu gpu multidevice support creating ndarray use context argument specify device need help context namespace require orgapacheclojuremxnetcontext context default ndarray created cpu context def cpua ndarrayzeros ndarraycontext cpua object mldmlcmxnetcontext cpu specify gpu instead gpu enabled build def gpub ndarrayzeros ctx contextgpu note operation among different context currently allowed copyto function help copy content one device another continue computation wrap hope enjoyed brief introduction mxnet library much explore future post interested giving try native jar osx cpu linux cpugpu available code ndarray tutorial found please remember library experimential state encounter problem feedback please log issue bug rough edge fixed
348,Lobsters,clojure,Clojure programming,"Ghostwheel: Hassle-free clojure.spec, side effect detection and evaluation tracing",https://github.com/gnl/ghostwheel,ghostwheel hasslefree clojurespec side effect detection evaluation tracing,join github today sign file permalink robustness observability without pain introduction quality hammock time inline fspec definition concise syntax single multiarity function improved readability minimal effort spec writing refactoring automagical generative testing default specced sideeffectfree function namespace reload humanreadable expoundpowered reporting support spec instrumentation internal external namespaces including experimental spec clojurecore explicit sideeffect annotation heuristic compiletime validation making sure stick naming unsafe function bang comprehensive tracing function io binding threading macro smooth debugging exploratory programming effortless specbased stub generation nilbody function rapider prototyping easy instrumentation individual function namespaces cljsspectest orchestra namespace reload experimental automatic generation google closure type annotation fspec definition walkthrough read readme getting started install strange behaviour enable configure default configuration map use staying sane function spec generative testing next section cursive ide gspec syntax described comparison testing specced function performance consideration much generative testing enough keeping track side effect politely inform getting hand dirty side effect set correctly evaluation tracing program observability data flowing function contribution roadmap bhaumanspellspec hacking ghostwheel faq acknowledgement inspiration prior art plumatic schema philip kamenarsky cherished bdfl rationale le stellar experience topic resource license reload reload,hasslefree inline clojurespec semiautomatic generative testing side effect detection dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time robustness observability without pain random let get half cup coffee said tell ghostwheel kind paraphysical surveillance device library random put cup cocked head one side could specific said word locate shadow environment operation would remain pretty much invariant physical construct peripheral programming technique energy input would different nature lost already roger zelazny trump doom introduction ghostwheel make using clojurespec easy minimises need unit test detects unexpected side effect compile time help see code play explore refactor fearlessly getting mundane frustrating stuff way order let focus creative side building software maybe even get quality hammock time without cryptic stack trace invading dream buzzword picture inline fspec definition concise syntax single multiarity function improved readability minimal effort spec writing refactoring instead writing specced function like write like using alternative symbolic operator ligature automagical generative testing default specced sideeffectfree function namespace reload humanreadable expoundpowered reporting support spec instrumentation internal external namespaces including experimental spec clojurecore explicit sideeffect annotation heuristic compiletime validation making sure stick naming unsafe function bang comprehensive tracing function io binding threading macro smooth debugging exploratory programming clojurescript moment effortless specbased stub generation nilbody function rapider prototyping easy instrumentation individual function namespaces cljsspectest orchestra namespace reload experimental automatic generation google closure type annotation fspec definition walkthrough button holden said pushed jesus christ really go life james sa corey nemesis game expanse series read readme age smartphone notification cat video twitter unlikely attention span sleepdeprived parakeet walkthrough look terrifyingly long picture really personal readitskimit guide read strange thing might happen freak stuff simply need know order use ghostwheel effectively written regular text like tip trick make ghostwheel critical highly recommended additional information andor something work way read curious intend open issue certain ghostwheel fault otherwise nonessential feel free skip skim silently judging getting started install clojurescript optional tracing make sure use clojure higher override ghostwheel dependency lower version might get strange behaviour enable clojure launch repl build jvm system property dghostwheelenabledtrue clojurescript either set dghostwheelenabledtrue add externalconfig ghostwheel compiler option development build config enable ghostwheel production build config might end tracing testing instrumentation code production disabled ghostwheel generate extra code whatsoever simply passing plain unchanged defn configure ghostwheel behaviour determined individually function merging configuration map ghostwheelutilsghostwheeldefaultconfig ghostwheeledn config file project root externalconfig ghostwheel compiler option clojurescript namespace metadata function metadata see default configuration map description option unless explicitly stated otherwise one overridden level functionality disabled default avoid nasty surprise note ghostwheel us ghostwheelcorequalified keywords configuration except top level configuration ghostwheeledn compiler option minimise verbosity use namespaced map namespace metadata like n testchamberone ghostwheelcore check true numtests need function metadata alias ghostwheel ghostwheelcore g reference option gcheck use require ghostwheelcore g refer defn defn fdef clojurescript tracing require somewhere project require ghostwheeltracer staying sane function spec generative testing lord spake unto angel guarded eastern gate saying flaming sword given unto thee angel said moment ago must put somewhere forget head next lord ask neil gaiman terry pratchett good omen nice accurate prophecy agnes nutter witch function spec generally defined inline using defn macro except defining function external namespaces mainly instrumentation case fdef used defn almost identical defn except first body form must inline spec definition using gspec syntax explained detail next section defn rangedrand lifted straight clojurespec guide start end int int start end int start end start long rand end start leave function body set nil get automatically generated specinstrumented stub passed correct argument return random data according spec gspec set nil case sfdef block generated left note actual parameter symbol used anonymous predicate instead args start shorter also let quick clean rename refactorings ide instead hunt nonnamespaced keywords multiple nested form point view programmer editor function argument bound respective symbol freely referenced expression expected including gspec considered another body form inside function fact even use argument destructuring except go crazy one level nesting thing break due imperfect workaround clojure bug fdef pretty much except missing body form fdef rangedrand start end int int start end int start end using cursive ide probably good idea use intellij intention action tell cursive resolve defn fdef defn defn defn way get proper highlighting formatting error handling structural navigation symbol resolution refactoring support place cursor defn click light bulb appears press altenter select resolve defn spec multiarity function defined similar way example spec clojurecoredrop would look like fdef clojurecoredrop n natint fn n coll natint snilable seqable seq principle using defn multiarity function add function body multiarity function return value spec vary different arity handled correctly using fn fspec clause defn fdef form detail sometimes need register fspec keyword spec registry use part another spec using sdef keyword sfspec ghostwheel handle simply passing qualified keyword fdef instead symbol fdef nestedfspec int string string gspec syntax argspecs argpreds retspec fnpreds generatorfn st ret return value fspec gen generator fspec throughout guide symbolic gspec operator used instead equivalent keywordbased ret st gen two set perfectly interchangeable even freely mixed within gspec number argspecs must match number function argument including possible variadic argument ghostwheel shout argspecs variadic argument defined one would expect standard fspec fdef clojurecoremax x number number number argpreds defined sandwrapped together argspecs desugared fnpreds equivalent desugar spec fn predicate except anonymous function parameter ret args referenced using symbol gspec syntax spec fn simply considered clause ret used shorthand snilable fdef clojurecoreempty coll seqable boolean nested gspecs defined using exact syntax fdef clojurecoremapindexed f natint fn f coll natint seqable seq rare case nilable gspec needed put vector rather list fdef clojurecoresetvalidator f atom nested gspecs way reference args argpreds fnpreds symbol recommended approach register required gspec separately using fdef keyword described previous section ghostwheelspecsclojurecore namespace contains spec many function clojurecore recommended try instrument whole point number way likely blow face serve good reference write different type gspecs correctly nested gspecs one argspecs desugar ifn mess generative testing overridden passing generator even empty one simply adding gen gspec case gspec desugar exactly specified assumption imply function fact handle type argument still write nested gspecs even simple useful succinct documentation particular function receives exactly one argument gspec syntax number advantage much concise easier write read see comparison introduction section inline see glance kind data function expects return right docstring arg list example previewing function definition editor renamingrefactoring parameter breeze use ide symbol rename functionality reference predicate function handled correctly reliably bypass ghostwheel temporarily simply changing defn defn minimal performance impact evaluating gspec vector first body form aside nothing break defn syntax valid defn syntax testing specced function set gcheck gnumtests enable generative n reframeplaygroundghostwheel ghostwheelcore check true numtests define simple function defn addition b posint posint int b b generate defn fdef testing code addition actually run test open chrome devtools console put gcheck bottom namespace save file hotreloading set correctly get overzealous fixing bug example code told get something resembling yay ghostwheel already proving invaluable fix changing b b save file go back console rejoice test single multiple function namespaces repl testrunner passing quoted symbol namespace regex gcheck checking part testsuite make sure enable gextensivetests set gnumtestsext high number make rerendering clojurescript hotreloading workflow dependent successful test completion using shadow cljs set afterload hook like devtools afterloadasync ghostwheelcorepostcheckasync use metadata rerender function add queue defn devafterload mountroot ghostwheel hook shortcircuit hook queue test fails namespace rerender triggered multiarity function arity tested separate function ensure adequate test coverage function arity gnumtests spec check run performance consideration much generative testing enough depending number kind function namespace well dependency namespaces even basic testing every reload could take long enough make fancy hotreloading workflow useless general idea keep gnumtests low enough test complete reasonable amount time high enough still catch relatively large number error every run keep mind test executed per namespace reload whenever gcheck called working view hotreloading namespace test defined would run change something deep namespace heavily depended namespaces reloaded test run either way relying alone especially function complex input larger number parameter setup separate test build config like would writing unit test enable gextensivetests set gnumtestsext high possible without making test time unacceptable run whole thing ci environment manually regular basis coffee break merges master release etc tweak gnumtests gnumtestsext number global namespace function level needed feel free share worked default recommendation improved based real world data keeping track side effect bridge made natural light pump surface rubbed cheek one would like standing outside sun shining face would also set hair fire actually erik wolpaw jay pinkerton portal default function considered pure compile time ghostwheel magic detect potential side effect function defined defn calling function end block multipleform let defnfn known unsafe operation stuff like store evidence politely inform transgression testing run automatic generative test function found unsafe whether due detected side effect explicit annotation ghostwheel assumes function stm test safe default unsafepermanent side effect necessarily thing pure purpose guide however use term interchangeably absolute horror purist everywhere disable side effect detection gignorefx option case ghostwheel simply trust name function unsafe behave accordingly set gignorefx true actually unsafe function incorrectly named safe gcheck enabled gnumtests set well valid gspec call gcheck bottom namespace generative testing performed side effect could bad side effect detection heuristic way failsafe operation relying heavily assumption actively trying shoot foot said far seems work pretty great practice occasionally fails likelihood false positive significantly higher false negative chance side effect actually seeping crack setting hair fire relatively low pretty much gist read detailed description look like practice getting hand dirty side effect let take function defined previous section map collection number make sure gcheck gnumtests set correctly first defn addition b posint posint int b b defn increasenumbers increment number int scollof int scollof int map partial addition increment number gcheck two check fine decide good idea send email every time two number added together modify addition accordingly defn addition b posint posint int b let result b println sending mail result really result go well addition caller increasenumbers fail check addition detected side effect increasenumbers calling former body replaced exceptionthrowing code whole messy situation remedied whole replaced exceptionthrowing code thing sound kinda scary admittedly necessary otherwise addition may fail side effect check thus excluded testing increasenumbers would still happily passing calling addition sending mail serious impurity traitor church functional programming make ghostwheel shut renaming function suffix thus officially marking unsafe use ide rename addition addition okay quite shut yet good even though ghostwheel happy addition correctly marked unsafe infestation impurity still actively spreading caller worry ghostwheel help nip insidious corruption bud correctly naming unsafe function cause previously innocent pure function calling branded offender good faith fail purity inspection well given chance redemption go ahead rename increasenumbers increasenumbers quick breathe sigh relief check fine sideeffectful stuff open mentioned generative testing done whether impure function think anyone guess great get messing dark side said work done make testing stubbing sideeffectful function easy well yet recognised error way please go ahead remove side effect addition defn addition b posint posint int b let result b result preserve balance universe purity spread efficiently sinister counterpart remove side effect function ghostwheel warn still marked unsafe soon rename remove bang show warning potentially purified caller harmony restored renamed increasenumbers well result nice relax false positivesnegatives come add gignorefx true function metadata disable side effect detection open issue github help improve evaluation tracing program observability fact mere act opening box determine state cat although case three determinate state cat could alive dead bloody furious terry pratchett lord lady spec nice good often enough want take peek going hood going set gtrace option anything determine trace verbosity performance impact good go table ghostwheel trace level trace level get traced additive good nothing production function call logged without data render function function io event handler local binding general debugging threading macro better debugging anonymous function noisy debugging gtrace true equivalent gtrace add gtrace metadata function name great workflow working function enabling trace passing callback gcheck function automatically called namespace reload check completed successfully defn gtrace foo b int int scollof number kind vector let c inc b b c gcheck foo way immediately see data flowing function file save every change check result messed take moment zen revel intoxicating sense power like painstakingly selected default shade blueviolet change gtracecolor option philistine contribution roadmap ushered soul next world grave hope ultimate reality assassin lock would hold yes point taken particular skill terry pratchett mort blood generation lisper coursing vein howled naked moon arcane ritual ordained dark force summoned order gain ability point even see parens maybe like breaking thing telling people either way enough work go around first foremost rather loose roadmap necessarily sorted priority particularly rich detail pr welcome anything tickle fancy annoy hell planning anything bigger maybe open issue first discus automatically rerun failed gentests tracing enabled enable specbased generation safe stub gentesting unsafe function solve miscellaneous issue around fully instrumenting ghostwheelspecsclojurecore namespace testing get closure type annotation working properly integrate bhaumanspellspec hacking ghostwheel quickest easiest way probably use shadow cljs copy external namespace src directory correct directory structure override whatever classpath see shadow cljs guide detail solid environment setup playground project something like reframe link ghostwheel repo checkout folder add checkoutsghostwheelsrc source path way shadow cljs watch ghostwheel namespaces change well hotreload accordingly similar setup possible figwheel well feel free contribute documentation using debugging code generating function ghostwheelcore code block bottom namespace use trace runtime clojurescript symbol generation trip generally work quite well faq q trust ghostwheel break code every build extensively tested combination manually written generated test large number configuration option combination including tracing level production development build configuration three environment clojure node headless chrome generated code evaluated make sure behaves exactly like code went fspec generation tested number convoluted gspecs make sure everything desugars expected production mode ghostwheel disabled gspec vector simply stripped defn block plain defn generated independent configuration le line ghostwheel code involved scenario also unittested ensure produced defn identical defn minus gspecs fdef gcheck simply output nil test coverage somewhat le critical part testing instrumentation etc yet getting purely cosmetic bug tracing reporting difficult test thus likely said ghostwheel alpha software proceed care especially clojure even alpha q use ghostwheel test generation existing fspecs defined sfdef adding support considered ultimately decided time would add complexity maintenance workload order enable use small subset ghostwheel functionality subpar manner number check validation ghostwheel perform without inline gspecs aspect behaviour would change well still use ghostwheel nil gspecs take advantage side effect detection tracing functionality easy instrumentation extracting test generation code separate library may considered line roadmap however ability convert fspecs gspecs easier migration existing code base q tracing testing separate project primarily tracing need aware automated testing interfere aside rely heavily specchecking tracing workflow like ui tightly integrated like interested tracing use defn nil gspecs default configuration plus per function gtrace also vague plan work involve tracing testing process still taking shape q defn fdef pronounced conversation ghostwheeldefn gdefn ghostwheelfdef gfdef respectively q use statically typed language touching one ten foot pole acknowledgement inspiration prior art project people without whichwhom likely exist current form particular order plumatic schema offering glimpse future generative testing quite time spec introduced philip kamenarsky introducing clojure haskell providing valuable feedback development ghostwheel many insightful conversation concept inspired last least cherished bdfl minion working tirelessly bestow upon u magic clojure without ghostwheel would somewhere significantly difficult write plain impossible rationale demon hath return darkest depth underworld whither banish dared raise crooked hand macro soul wrapp shadow mind clouded full evil despair antilisp speaketh twisted tongue casteth confusion word sweet cunning type proof hearken raise army sharpen parens gather bravest hero war upon u unknown historian clojure chronicle clojure beautiful simplicity clarity flexibility immediacy immutable data macro powerful repl pareditparinfer stm list go hand lack easy comprehensive type verification spec came along sometimes meant frustrating time spent hunting pointless runtime exception stack trace error message ranging particularly helpful openly mocking le willingness major refactoring justified fear breaking something immediately visible painful debug making change medium sized codebase one could despite careful best intention end le stellar experience context spec huge step forward elevates clojure onto whole new level robustness maintainability painless usability clojure way providing simple powerful tool making application easy natural getting way leaving programmer decide extent want use come defining function spec however quite verbose actual day day usage little rough around edge gspec syntax born solution taking inspiration static type system mathematical notation staying clojurelike enough seamless fit generating nilbody stub automatically defining test naturally followed turn inspired heuristic side effect detection serve safeguard inadvertently io testing provide additional insight code helping keep unsafe operation explicit hope ghostwheel help lower barrier using spec contribute wider adoption reduce need writing unit test minimum generally wonder overall clojure code quality spec provides ability quickly track many type logic error remove need observe function operation tool debugging thinking common technique achieving include running code fragment repl part function one want see action force one create intermediate mock data may may accurate representation original environment break function binding apart beyond point would make sense complexityreadability perspective interspersing logging statement throughout code sometimes forgetting breaking something along way introducing weird bug mention hassle adding removing trying zero point interest setting breakpoints using stepbystep debugger quite akin trying take landscape straw compared seeing data flow part function glance tree evaluated expression quite bit efficient enjoyable conducive thinking operation architecture involved higher level essentially ghostwheel reaching higher state flow removing barrier mind code taking lot pedestrian busywork shoulder put belongs computer go forth create fellow maker use newfound power good hasslefree inline clojurespec semiautomatic generative testing side effect detection topic resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
349,Lobsters,clojure,Clojure programming,Build a single-page application with ClojureScript and re-frame,https://www.exoscale.com/syslog/single-page-application-with-clojurescript-and-reframe/,build singlepage application clojurescript reframe,singlepage application choose clojurescript javascript clojurescript functional lisp targeting javascript lisp nodejs seven year old circleci exoscale closure compiler function javascript csp spec clojurescript advantage javascript frontend development react user satisfaction use react clojurescript reframe flux build singlepage application reframe toy spa source code repository installing clojurescript quick start guide leiningen figwheel quick start reagent reframe architectural overview reagent reframe application reagent reframe reactive unidirectional data flow state management reframe using functional programming approach summary clojurescript offer better way build singepage apps reframe reagent deploy application deploy host singlepage application object storage,post discus advantage using clojurescript reframe build robust maintainable singlepage application see functional reactive programming become best practice frontend development clojure stability immutable data structure functional paradigm provide pleasant safe development experience choose clojurescript javascript following saga frontend development probably spent considerable time trying make sense myriad framework build tool language development probably even heard term javascript framework fatigue used describe difficulty following pace framework emerge replaced month later something shinier probably asking way make use best tool user interface program architecture involve changing framework every couple month big fan javascript language probably wondering whether could switch solid stable language clojurescript whose feature changed little since inception clojurescript functional lisp targeting javascript clojurescript lisp dialect compiles javascript use browser environment javascript run nodejs server language seven year old remained remarkably stable time deployed production environment since beginning currently use industryleading company circleci exoscale feature simple syntax immutable data structure functional paradigm powerful standard library compiled using google closure compiler allowing dead code elimination performanceenhancing trick make compiletojavascript language feasible setting performance matter give taste language infamous leftpad function javascript along elegant functional counterpart clojurescript javascript function leftpad str len ch str string str var ch ch ch len len strlength len str ch str return str clojurescript defn leftpad len leftpad len len ch let width count padwidth len width cond po padwidth str reduce str repeat padwidth ch avoid confusing variable assignment setting example result offbyone error define function take multiple arity allowing better code reuse separation concern finally also avoid modifying string place leaving u clean readable code produce predictable output given input reason consider clojurescript javascript include handling concurrent programming without callback using cspinspired coreasync library spec library specifying validating data program useful library also worth mentioning clojurescript tends fairly concise saving programmer lot typing making codebase easier maintain debug refactor clojurescript advantage javascript frontend development programming browser though mostly dealing user interface generating view data clojurescript provides least two distinct advantage javascript regard first functional nature aligns well react rapidly become leading frontend library term number downloads deployment also user satisfaction second clojurescript use sexpressions syntactic unit measurement make expressing react component even natural using react buildin rendering template use react clojurescript work react clojurescript import library directly use one several library provide helpful feature component rendering syntax approach dealing event look reframe whose component rendering syntax elegant us clojurescript function define component simple vector define html element comprise component support clean fluxstyle approach handling event interaction using immutable view data build singlepage application reframe toy spa let take look building singlepage application take adavantage flux architecture functional reactive programming employ clojurescript reframe task walking major moving part highlighting advantage using approach final result toy application calculates pingtimes exoscale object storage endpoint location source code repository freely available would like try running machine installing clojurescript installing clojurescript take couple minute following quick start guide installed ready start creating application follow along application also need install leiningen one clojure build program help managing depedencies orchestrating build step leiningen installed able cd root project directory type lein figwheel dev second first time run require downloading project dependency able open browser http see application running thanks figwheel live code reloading library edit program change reflected automatically browser without reload page quick start reagent reframe reagent clojurescript library allows access javascript react using nice clojurescript function also provides html templating language comprised native clojure data structure vector map let create html element follows div main style width hello creates div id main width attribute pixel notice conciseness also fact remember close div element end reframe library reagent provides helpful pattern functional reactive programming making use event dispatch handling routine ability element browser respond update according event provides repeatable set abstraction handling browser event user interaction make organizing associated side effect clean efficient architectural overview reagent reframe application application consists inbrowser database event registration subscription event view core namespace tie together initializes app initial database value view reframe apps begin mounting root react component dom somewhere using reagent library reframe library tightly integrated reagentrender viewsmainpanel getelementbyid jsdocument app reagent place main view mainpanel inside div id app browser dom also define asynchronous loop sends ping request every two second endpoint asyncgoloop let zone reframesubscribe subszones doseq zone zone reframedispatch eventsping zone async asynctimeout recur iteration loop schedule ping event zone database block two second reframe reactive unidirectional data flow first clever feature reframe dispatch event response user action exogenous event timer click snippet followed subscriber force rerenders browser content explain subscriber second hang next view namespace define various component main panel zone latency box zone detail widget shown user click individual datacenter say view functional mean define function f data view take data input produce view dom handled nicely react case display second brilliant design feature reframe view subscribe event interest content rerendered browser input change therefore event sub namespaces define event take place subscriber event respectively example event goodhttpresult trigged successful response so server reframeregeventdb goodhttpresult fntraced db zone let latency gettime jsdate getin db ping zone sentat associn db ping zone latency latency latency calculated inserted inmemory database using clojure associn place value specified location subscriber zonelatency view pick changed value update map browser state management reframe using functional programming approach reframe make use inmemory database store application data represented map clojure handy method getting setting filtering database db namespace app define defaultdb provides initial value application whose value change time based subscription define nice way keeping one state safe place safe way atomically gettingsetting value different part application also force discipline programmer keep state change well accounted make debugging application much easier ultimately state management approach produce safer code fewer bug summary clojurescript offer better way build singepage apps reframe reagent separation concern make easy follow directional flow app user trigger event click datacenter location map call showdetails event whose subscriber waiting view namespace display detail user accomplished without relying tangle callback without promise bespoke asynchronous mechanism without polluting view code conditional behaviour indirection addition extending application handle user interaction additional source data straightforward add event subscription modify view accordingly knowing downstream consumer action welldefined contract use data deploy application many option deploy application think one convenient option deploy host singlepage application object storage make simple cheap reliable alternative host selfcontained stateless application
352,Lobsters,clojure,Clojure programming,Writing shell scripts in Clojure using Planck,https://www.youtube.com/watch?v=huGafSndEtQ,writing shell script clojure using planck,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature writing shell script clojure using planck singapore clojure meetup youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature writing shell script clojure using planck singapore clojure meetup youtube
354,Lobsters,clojure,Clojure programming,"Neanderthal vs ND4J: Native performance, Java and CPU",https://dragan.rocks/articles/18/Neanderthal-vs-ND4J-vol1,neanderthal v native performance java cpu,,created project anyone use machine replicate clojure repl whole code contained post type exactly asis repl purposefully created binary run blindly read report since purpose blog help people learn stuff hope satisfied learn typing stuff lein project thing machine work mkl neanderhtal website information guess folk also wrote something similar assume mkl available machine measurement done criterium library warms jvm run code many time generates nice report statistic starting repl first thing require neanderthal function use require uncomplicatecommonscore refer withrelease uncomplicatefluokittencore refer fmap uncomplicateneanderthal core refer mm native refer dge fge criteriumcore refer quickbench import stuff import javautilsplittablerandom since user first concern check whether using right stuff reference use code paul project adam pointed created matrix checking implementation class matrix got one important thing people often get wrong comparison floating point precision single precision operation generally twice even gpu fast double precision fp operation want make sure matrix use code use single precision float fast possible clear directly order factory use single double precision based backends fortunately default seems single precision class data ndarray since floatbuffer assume single precision also doublebuffer assume us double another thing people get wrong use outof place operation since copy data obviously introduce much overhead mmul place mmuli inplace matrix multiplication use paul code reference used mmuli let result shape indarray mmuli indarray indarray indarray result object n n n result seems consistent assume using correctly
355,Lobsters,clojure,Clojure programming,Translating Clojure to ACL2 Code for Verification (2016),https://ou.edu/content/dam/CoE/CS/Thesis_Dissertations/2016/Summer%2016/2016_Ryan_Ralston_Dissertation.pdf,translating clojure code verification,,ğôåø obj goto chapter endobj obj acknowledgement endobj obj goto chapter endobj obj list figure endobj obj goto chapter endobj obj abstract endobj obj goto endobj obj introduction endobj obj goto endobj obj contribution endobj obj goto endobj obj verification bignum addition endobj obj goto endobj obj jvm model compiled clojure endobj obj goto endobj obj bigstep style verification endobj obj goto endobj obj verification recursive sequence clojure function endobj obj goto endobj obj summary endobj obj goto endobj obj research methodology endobj obj goto endobj obj definition endobj obj goto endobj obj model endobj obj goto endobj obj convention endobj obj goto endobj obj endobj obj goto endobj obj programming language endobj obj goto endobj obj theorem prover endobj obj goto endobj obj method endobj obj goto endobj obj clojure endobj obj goto endobj obj methodology endobj obj goto endobj obj bigendian bignum arithmetic endobj obj goto endobj obj biginteger specification endobj obj goto endobj obj proof sketch endobj obj goto endobj obj unsigned littleendian add endobj obj goto endobj obj signed littleendian add endobj obj goto endobj obj signed bigendian add endobj obj goto endobj obj summary endobj obj goto endobj obj java virtual machine model endobj obj goto endobj obj structure endobj obj goto endobj obj method invocation endobj obj goto endobj obj stepping machine endobj obj goto endobj obj summary endobj obj goto endobj obj java class model endobj obj goto endobj obj structure class declaration endobj obj goto endobj obj static field endobj obj goto endobj obj loading dependency endobj obj goto endobj obj class instance endobj obj goto endobj obj method lookup endobj obj goto endobj obj constructor endobj obj goto endobj obj summary endobj obj goto endobj obj sequence list endobj obj goto endobj obj sequence overview endobj obj goto endobj obj sequence allocation endobj obj goto endobj obj static runtime method endobj obj goto endobj obj seq endobj obj goto endobj obj first endobj obj goto endobj obj rest endobj obj goto endobj obj con endobj obj goto endobj obj function class endobj obj goto endobj obj summary endobj obj goto endobj obj sequence recursion endobj obj goto endobj obj cutpoints endobj obj goto endobj obj base case endobj obj goto endobj obj prelude endobj obj goto endobj obj postlude endobj obj goto endobj obj internal segment endobj obj goto endobj obj proof correctness endobj obj goto endobj obj conclusion endobj obj goto endobj obj verification recursive sequence clojure function endobj obj goto endobj obj bigstep style verification endobj obj goto endobj obj jvm model compiled clojure endobj obj goto endobj obj verification bignum addition endobj obj goto endobj obj summary endobj obj goto section endobj obj bibliography endobj obj goto r fit endobj obj length filter flatedecode stream oaïˆ g ä ü j êšídëí j à œ tgxˆã ÿş mïy à endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream koú v õo í ºlgù õ ãsçö ã µ çüé ùvå endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream õ endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream hhd µ ù ë tànfè ó äaäàé ış väğñccaâ hlt î dì cã ïbğ ãtë xx ô z ø ùjpò xrh h gêee µ u qš îç bæ ãõw ó gdbªmmà ì qaq u v â bï sg ãâÿ ã endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream xúíz ûï e áü ä â h ğ hb j hëèíöƒeû l áä r uæê zk kü ï òaøğ ƒğw fö óª ü rø åchè ã âgišgb paºv éíï ø òbéc endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto chapter endobj obj type annot subtype link border hic rect goto chapter endobj obj type annot subtype link border hic rect goto chapter endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream áu äuy q äçÿœóãpğ èxô ı b ìg j š ª h jo â ô ôöè yo ç ß ã nëg úcáø k è û nb š ry g øş ìzh òõ iõbbã q b òqögàc endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto section endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream ñğêxğî êq àaˆ u ö êç û iôñ nîe ç ö ò gieß åá ä ïûzzëdcò çnû ø ò şwecğñbìrú ûöé u x ënò õ ò šzgûö š tzaïpg âï jx íöyóµõêeqzšî në èö endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r procset pdf text endobj obj length filter flatedecode stream úf ğîlwi eí tdˆ äàu e f gá iov uy ëwyâ ç æy lv ş š ëuêéw åå í x ªçç gã ã ãğ ıµ aßhçœû ib qº œş ğhmü şpşà åæƒ ƒ ï nlcò è endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream xúmvm ğš ëîùaìæóãå vô uæ ùö šïkõ j æ lù öw ª ãã ì làÿ endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream â óeb pøˆíüúî ûd tævd h émó è n äÿou e ôú šğşäø iœäk avæäãàşœ yê ärúõn ìe ùy àû î í ğâ ôédùyåyfğ l ôëñõåğ
356,Lobsters,clojure,Clojure programming,Datomic Ions: Your App on Datomic Cloud,http://blog.datomic.com/2018/06/datomic-ions.html,datomic ion app datomic cloud,,may datomic ion let develop application cloud deploying code running datomic cluster focus application logic writing ordinary clojure function ion tooling infrastructure handle deployment execution detail leverage code inside datomic transaction query world large via builtin support aws lambdawith datomic ion focus applicationleverage datomic cloud cluster compute resource data localityextend datomic transaction query logicconnect broader aws cloud via lambda eventsservice web consumer api gatewayscale datomic app togetherdeliver aws high agility
357,Lobsters,clojure,Clojure programming,A case study in refactoring Clojure trie code for performance,http://modulolotus.net/posts/2018-05-31-clojure-trie-performance/,case study refactoring clojure trie code performance,nifty little trie exercise clojure performance journey solution standard data structure switch eager lazy evaluation switch record algorithmicdata change jvm optimization mutable field threadunsafe type hint alternative transient reflection typehints looprecur result,last summer hackerrank fun whiteboard practice came across nifty little trie exercise challenge add list contact trie report number contact beginning list prefixesi used favorite language clojure quickly arrived correct solution many coding exercise site time constraint idiomatic clojure slowwhat follows take beautiful clojure accelerate needed nb hot path general clojure style advice code available herea clojure performance journeyfor nt recall try specialized data structure excel storing data common prefix eg word conceptually tree node represents part prefix complete path terminal node represents datafor list english word straightforward implementation tree node node top letter terminal flag indicate whether node last letter word array pointer node representing alphabet various optimization exist compress long chain focus implementation diagram see representation trie storing word ale alley art ate terminal node tinted solutionsstandard data structureshere basic implementation function add new word locate partial subtree given prefix count number word beginning prefix example db series nested hashmaps key indicates node terminal defn add db name updatein db seq name fnil assoc true defn countterminations db let termination db reduce termination map countterminations vals dissoc db defn findpartial db partial println iflet subdb getin db seq partial countterminations subdb work way slowswitch eager lazy evaluationclojure default lazy evaluation requires certain amount overhead force eager evaluation transduce instead reduce defn countterminations db let termination db transduce map countterminations termination vals db shave second still good enoughswitch recordalright well using record named field cache default empty node declare defaultalphabettrienode def emptyalphabetvector vec repeat nil defrecord alphabettrienode val terminates child trienode addsubstring n c c alphabettrienode val c terminates true c update child alphaidx c addsubstring nil defaultalphabettrienode c c child prefix n seq map alphaidx interpose child con child getin n countwords n loop wordcount terminates legitchildren filter child seq legitchildren let child c legitchildren recur wordcount terminates child apply conj c filter child child wordcount countwprefix n iflet subn prefix n countwords subn def defaultalphabettrienode memoize fn val alphabettrienode val false emptyalphabetvector oof code slower way complicated performance benefit recordstypes field access much faster exploit lateralgorithmicdata changeok let reevaluate profile rethink problem tweaking rarely beat using right data structuresalgorithms trade bit memory save ton computation time instead recomputing subtree count afresh time keep track word count node increase go every time add word increment count parent node count operation prefix readout value node check applied original solution got speedup still nt fast enough using record enables unique jvm optimization continue changed part defrecord alphabettrienode val terminates wordcount child trienode addsubstring n c c alphabettrienode val c terminates true inc wordcount c update child alphaidx c fnil addsubstring c defaultalphabettrienode c child countwords n wordcount countwprefix n iflet subn prefix n countwords subn speed factor simpler boot getting closer takeaway always always use right data structuresalgorithmsjvm optimizationsclojure us immutable data default simplicity ease reasoning thread safety immutable data structure inherent overhead mutating copy unavoidable ditch immutability mutable fieldswe adding metadata field indicating volatilemutable directly mutated code deftype alphabettrienode val volatilemutable terminates volatilemutable wordcount volatilemutable child trienode addsubstring n c c set wordcount inc wordcount ifnot c set terminates true let alphaidx c child child whennot child c defaultalphabettrienode assoc child set child addsubstring child c prefix n loop curr n c c c curr recur get child curr alphaidx c c curr note use set mutable code finally seeing subsecond execution time exercisethreadunsafe type hintswhat else well nt care thread safety switch unsynchronizedmutable field avoid concurrency overhead also switch java primitive array type hint val field also removed since redundant child index deftype alphabettrienode unsynchronizedmutable terminates unsynchronizedmutable long wordcount unsychronizedmutable object child trienode addsubstring n c c set wordcount inc wordcount ifnot c set terminates true let int alphaidx c child aget child whennot child aset child defaultalphabettrienode c addsubstring aget child c great half second fast enough hackerrank picky test done alternativesthere performanceenhancing technique either nt apply nt effect speed particular case eg reflection never issue path takentransientstransients way use mutable data structure code shape regular immutable code unfortunately work recordstypes helped bit hashmaps reflection typehintsif compiler ca nt figure data type invoking method slow thing massively use set warnonreflection true file check tested reflection hot pathunfortunately really possible typehint protocol method parameter ca nt defer regular helper function mutable field since mutable field private point may want try another method use definterfacelooprecurif loop function return value tail position current stack frame safely overwritten new value recur used avoid blowing deep stack probably eased memory pressure nt analyze performance effect separatelyresultshere raw result first four standard hashmaps remainder use recordstypeshope found useful thanks david nolen feedback
358,Lobsters,clojure,Clojure programming,(Clojure) Spec-ing Data from JSON,https://spin.atomicobject.com/2017/06/27/clojure-spec-json-data/,clojure specing data json,clojure spec background prismatic schema interlude registry problem solution wrapping,returned clojure time using tool late party regarding learning experimenting spec first order business build spec data receiving external system json format given first real experience spec control shape data specing uncertain proceed background prismatic schema experienced using take approach using collection model collection schema approach want create schema map data might look like name schemastring id schemaint map serf schema map key name whose value string id whose value integer spec take different approach collection validated using regular predicate essentially function interesting tradeoff approach interlude registry spec concept schema registry spec schema designed around use data structure describe data structure usually build schema arbitrary complexity whatever feel right time store var namespace later reference spec spec maintains registry global across entire codebase dependency map name predicate furthermore spec enforces use registry come collection predicate example spec look like sdef mynsname string sdef mynsid int sdef mynsthing skeys req mynsname mynsid important note although namespaced keywords required spec version def create var spec simply stored registry provided name additionally example spec would expect key map would exactly match name referenced spec ie valid map would look like mynsname something mynsid key predicate also support requn option case namespace would removed key valid map would appear name something id although bit verbose unwieldy spec approach upside forced decomplect spec start believe part motivation creating spec tradeoff codebase via content spec registry influenced shape data dealing problem project started creating namespace containing spec json receiving external system along simple fns interpret information data right away dealing json key x began feel though polluting namespace even within spec registry attempting define spec single namespace myappservermessages eventually reached point could continue model data way due reuse key name nested structure submap key different meaning required different predicate validate parent map spec requirement key name derived name given registry two option create multiple namespaces source begin using namespaced keywords correlation actual source code option seemed problematic way made sense keep one source file would lot repetitiveness source used long namespace key without assistance nsaliaskey syntax additionally since data coming json make use requn leaving fear missing potential lesson learn spec encouragement namespaced key data began suspect good use spec also bit disheartening could hammered schema data five minute solution since hobby project set aside day let mind process background came back decided give another try using short nonsensical namespace given library reused others worried collision code settled using json name came looked something like n myappservermessages require clojurespecalpha sdef jsonparentid int sdef jsonparentitems jsonchild sdef jsonparent skeys requn jsonparentid jsonparentitems sdef jsonchildid string sdef jsonchildname string sdef jsonchild skeys requn jsonchildid jsonchildname farther went along using approach comfortable confident became however still open question eg named parent spec myappservermessagesparent instead jsonparent might make sense spec referenced elsewhere seem borderline unacceptable require namespace spec register spec entirely different namespace work well enough wrapping interesting case opinion prismatic schema would elegant despite carrying sake learning experimentation even case bit messy mess easily contained wary internalizing shape json data application state whether validating first place still looking forward experience specing application domain thought question love hear comment
359,Lobsters,clojure,Clojure programming,Clojurescript Development for JavaScript Developers in Atom with Shadow-cljs and ProtoREPL,https://github.com/loganpowell/shadow-proto-starter,clojurescript development javascript developer atom shadowcljs protorepl,introduction author contributor inspired many idetext editor caveat convenience repl reference source prerequisite protorepl atom java sdk install shadow cli shadowcljs setup local file shadow doc doc atom setting kicking tire project deployment target set browser bootstrap browsertest karma nodelibrary nodescript npmmodule react native setting project building web application entry augmenting note documentation create file inside directory create starter file fire marvelous repl goodness reference link section additional config configuring lifecycle hook like configuring http setting project building nodelibrary first node file config config config add line super basic cljs file fire testing node file structure review using protorepl atom command pallet caveat reference next step koan practice example,introduction shadowcljs clojurescript development environment unlike predecessor integrates seamlessly npm ecosystem manage javascript dependency also many convenience author contributor one inspired write shadow provided javascriptcomeclojurescript developer herein going run get setup shadow guide focus atom many idetext editor use use atom ultimately anyone else get anything great like say want understand something teach caveat going whirlwind tour shadowcljs javascript developer use atom created bit hurry find anything confusing please highlight getting lost follow provide suggestion improvement incorporated convenience repl reference source waking protorepl shadow configed use later devtools shadowcljsdevtoolsapinreplselect build target nodelibrary shadowcljsdevtoolsapinoderepl prerequisite protorepl atom author protorepl put together marvelous setup guide find author us leiningen skip step like however find little overhead perhaps importantly following step probably fastestclearest path bonus already setup clojure clojurescript development following step default protorepl evaluates code using clojure clojurescript careful use one shadow devtools see convenience repl reference may mistakenly evaluating code jvm instead javascript key takeaway soon wake remote nrepl connection protorepl eval one shadow devtools command repl java sdk leiningen shadow require modern version java sdk installed recommended version time writing version find worry touch java clojurescript need compiler install shadow cli npm install g shadowcljs shadowcljs setup local file root directory project create shadowcljsedn file top shadowcljsedn add line also see starter shadowcljsedn file terminal shadowcljs init create src folder root directory project src folder create userclj file wherein include short program n user defn reset mentioned shadow doc file must define userreset fn since proto repl call connecting userreset found call toolsnamespace destroys running shadowcljs server want nt want edit shadowcljsedn file adding protorepl dependency key set nrepl port using use whatever prefer find dependency doc look like sourcepaths src dependency protorepl nrepl port add following script packagejson file install necessary dependency script dev shadowcljs watch app release shadowcljs release app devdependencies shadowcljs version set terminal run shadowcljs server basic shadow server running terminal see shadowcljs starting shadowcljs using ip interface hyperv virtual ethernet adapter shadowcljs server version shadowcljs server running http shadowcljs socket repl running shadowcljs nrepl server started port upon running first time new folder project shadowcljs atom setting base project setup get fun part using repl atom use atom command pallet mine ctrlshiftp find proto repl remote nrepl connection dialog pop leave setting host localhost enter nrepl port set shadowcljsedn file case kicking tire try clojure script repl pop something like hit shiftenter see repl got congrats ready development project deployment target number target set shadow build shadowcljs must define target defines intend code executed default builtins browser nodejs share basic concept dev release mode dev mode provides usual development goody like fast compilation live code reloading repl release mode produce optimized output intended production target covered separate chapter browser output code suitable running web browser bootstrap output code suitable running bootstrapped cljs environment browsertest scan test determine required file output test suitable running browser karma scan test determine required file output karmarunner compatible test see karma nodelibrary output code suitable use node library nodescript output code suitable use node script npmmodule output code suitable use npm module mean shadow deploy app node module simple node script without ever leaving shadow also perhaps distant future may see react native list going cover two web application node library setting project building web application let setup project building web app like see configuration note please check entry shadow github augmenting shadowcljsedn recall packagejson file script dev shadowcljs watch app release shadowcljs release app app set script name build make web app change anything wish stick going add config shadowcljsedn file sourcepaths src dependency protorepl nrepl port new stuff build app target browser outputdir publicjs assetpath j module main entry appcore devtools beforeload appcorestop afterload appcorestart httproot public httpport let break one line time key tell shadow build app build name give first build app targeting browser target browser src build file go outputdir publicjs destination relative outputdir compiled clojurescript assetpath j module section config always map keyed module id module module id also used generate javascript filename module main generate mainjs outputdir main entry file namespace see note entry appcore devtools section see reference reference bottom section devtools symbol namespace function run refreshing file recompiled beforeload appcorestop symbol namespace function run hot code reload complete afterload appcorestart disk path serve root filesystem request supplied disk file served httproot public port serve see reference httpport note build setup structured like build app target browser outputdir publicjs assetpath j module main entry appcore whose file structure look like packagejson shadowcljsedn src app corecljs notice folder structure must mimic entry namespace convention highest level namespace app folder right src path first child namespaces core directly highest level namespace appcore appcore find setting documentation create indexhtml file inside public directory create html file look something like doctype html html lang en head meta charset title starter project title head body div id app div build script src jsmainjs script mainjs outputdir script appcoreinit script init script see create starter file body html create starter file corecljs file following along create simple starter file like n appcore jsconsolelog hey protorepl jsalert foo defn stop devtools beforeload script jsconsolelog stopping defn start devtools afterload script jsconsolelog starting defn export init appcoreinit triggered html start fire changed shadowcljsedn file restart shadow dev environment pick new configuration nt worry time really restart however instead running shadowcljs server terminal run npm run dev shadow pick build setting packagejson configed shadowcljsedn web development save file shadow reload offer http port specified open browser browser load code show alert foo see console hey protorepl shadowcljs websocket connected shadowcljs repl init successful starting connected browser input protorepl atom shadowcljsdevtoolsapinreplselect app app build id app name build map see printed repl quit type cljsquit cljsuser selected app see set clojurescript web app development woot play around marvelous repl goodness available atom reference proto repl atom link devtools shadow devtools section additional devtools config target browser configuring lifecycle hook like beforeload configuring http setting project building nodelibrary first node file let create new folder file seed new node library src folder create new folder lib within folder create another corecljs add file n libcore defn hello cliargs prn hello world shadowcljsedn config targetspecific option nodelibrary target use nodelibrary outputto required path filename generated library export required either single namespacequalified symbol map keywords namespacequalified symbol outputdir optional path supporting file development mode default cache directory packagejson config change packagejson script like script dev shadowcljs watch lib release shadowcljs release lib shadowcljsedn config setup shadow build clojurescript node library use javascript code sourcepaths src dependency protorepl nrepl port build app setup app target browser outputdir publicjs assetpath j module main entry appcore devtools beforeload appcorestop afterload appcorestart httproot public httpport lib setup lib target nodelibrary outputdir publiclib outputto publicliblibraryjs export hello libcorehello add line super basic cljs file n libcore defn hello cliargs prn hello world prn hey protorepl test protorepl fire able restart shadow terminal npm run dev node development unlike targeting browser use shadowcljsdevtoolsapinoderepl wake protorepl build made mistake evaling got stuck trying figure wrong nt like eval execute block code using protorepl ctrl bctrlalt b prn hey protorepl see hey protorepl protorepl terminal able open file libraryjs case outputto directory publiclib case testing node let check ensure everything order access via node change super basic libcorecljs file testing node n libcore defn hello cliargs prn hello world prn hey node test node file structure review build setup structured like build lib target nodelibrary outputdir publiclib outputto publicliblibraryjs export hello libcorehello file structure look like packagejson shadowcljsedn src lib corecljs build setup folder structure must mimic namespace case export namespace lib folder right src path first child namespaces core directly highest level namespace libcore libcore also note hello exported object namespace libcorehello require library javascript project ie var x require export map map cljs var name exported new tabwindow terminal jump publiclib folder use node command start runtime public cd lib node var x require libraryjs hey node undefined see hey node prnted within namespace also use compiled javascript node publiclib var x require libraryjs hey node undefined xhello hello world null got far ready rock new node library woot use compiled code javascript program like regular moduleexport using protorepl build leverage awesome repldrivendevelopment style clojurescript waking protorepl atom fire remote protorepl server ctrl yctrlal search atom command pallet protorepl remote nrepl connection using ctrlshiftp connect localhost port case protorepl pop eval shadowcljsdevtoolsapinreplselect lib running interactive node environment still node session running via require library case terminal eval block code project ctrlb see result protorepl well terminal caveat may forget eval shadow devtools command connecting remote nrepl connection case get warning application connected repl server make sure j environment loaded compiled clojurescript code get two consecutive error using shadowcljss repl protorepl kick shadowcljsdevtoolsapinoderepl put back default clojure repl case see following error trying eval cljs code compilerexception javalangruntimeexception unable resolve symbol go context compiling either case run strange issue may find quicker use one following command usually matter reentering shadow repl shadowcljsdevtoolsapinoderepl nt work restart protorepl close panel atom command pallet connect proto repl remote nrepl connection protorepl shadowcljsdevtoolsapinoderepl get back saddle restart shadow npm run dev run step get warning existing alias atom command pallet clear namespaces proto repl refresh namespaces atom command pallet clear value proto repl clear saved value atom command pallet connect proto repl remote nrepl connection reference next step never touched clojure script get started right away koan play freshly minted learning environment cloning practice example
360,Lobsters,clojure,Clojure programming,A retrospective on moving from Go to Clojure - [27:15 video],https://www.youtube.com/watch?v=3y7xzH8jB8A,retrospective moving go clojure video,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature moving people clojure abhinav sarkar kartik gupta youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature moving people clojure abhinav sarkar kartik gupta youtube
361,Lobsters,clojure,Clojure programming,Demystifying functional programming (in a real company),https://gist.github.com/7a6dcc47449bac4465d521fa60a239d7,demystifying functional programming real company,demystifying functional programming real company immutable data structure http http assoc shared mutable state root evil tarpit atom compareandswap record component clear separation pure impure function referential transparency focus transforming data imperative paradigm styleguides http threadfirst macro http function firstclass citizen http core library clojure koan wait monad another misconception big ball mud namespace hexagonal architecture,demystifying functional programming real company year heard skepticism around using functional programming real life project view skepticism stem perception functional programming inaccessible overly academic terribly useful example heard hard barely made course studied cool theory practical application suited commercial project supposed avoid side effect real world need side effect extent ca nt hire people skill company supposed use monad day job statement contains grain truth nubank us functional programming production scale believe paradigm easier learn useful commonly understood many concern arise fact functional programming really broad definition key use part make life easier post attempt lay point make life easier building highly available scalable distributed system nubank immutable data structure one killer often misunderstood feature modern functional programming language supposed update attribute immutable thing make new copy every time nt prohibitively expensive first thing remember immutable data structure copy cheap never actually duplicating data nt point object voilá let see comparison snippet updating map python clojure http snippet print foo baz something sub notice initial value lost clojure http clojure snippet print foo bar something sub followed foo baz something sub new old value assoc pronounced associate function add update value specified key collection case mapdictionary vectorarray key already exists map replaced nt exist added magic happens actually changing ourimmutablemap creating new one share structure ourimmutablemap different value foo easy share structure immutable world everything still quite efficient memorywise huge data structure lot modification top work minimal memory overhead also garbage collector also take care unused part structure note due underlying data structure used clojure many functional language interested called persistent data structure big advantage know shared mutable state root evil killed mutable part idea mutable state major contributor complexity software also well discussed famous tarpit paper highly recommend specific example share data structure multiple thread confidence always consistent need worry race condition shared data structure sound pretty useful right side note sometimes still deal shared mutable state fact also use object oriented programming nubank solve problem stateful inmemory object right tool job eg connection pool consumer loop etc functional language facility dealing mutable state safely explicitly clojure instance nifty way called atom use compareandswap necessary synchronization handled automagically zooming bit also use record component library stateful object service clear separation pure impure function function pure nt sideeffects output depends solely input also referred referential transparency give argument thousand time return value thousand time also wo nt affect rest world example side effect http request reading writing database although exception producing message broker etc great advantage pure function easy test keep business logic pure function impure function compose business logic io impure function trickier test reason nice minimize amount complexity tackle naturally provides useful convention structuring project impure function require integration test eg testing kafka message database back pure function covered unit test also exercised integration test need think function calling change one bit make program blow even adopted convention within nubank naming impure function end bang keep easy u read remember detail side effect sound useful real life project right focus transforming data compared imperative paradigm functional programming usually declaring data transformation instead computation step impure logic program step transform data feed io function given better bunch small function easily composable fact styleguides state limit line code enough occasion illustrate concept let look example nubank register user like company need strongly hashed version user password include creation date let insert database http modify user data pure function feed dbsaveuser function insert database bonus make handleuserregistration clearer clojure threadfirst macro syntactic sugar take output last function use first argument next function http make focus data transformation pipeline even clearer function firstclass citizen big name mean use function way use value like integer string pas function naming etc useful composing small function big important thing let take look previous example time make function receives list user data prepared inserted database http nt get spooked syntax walk withcreationdate asof syntactic sugar creating anonymous function function name receives single argument denoted let clojure way assigning name value defined scope comp take list function composes value returned comp also function pipe result one function another clarity suppose function f g h way comp h g f equivalent fn x h g f x map take function sequence applies function element sequence returning new sequence snippet exemplifies interesting concept higherorder function function accept function argument comp map higher order function lot clojure core library well clojure koan pretty much sum nubank use broad array functional programming definition serious know wait monad well nt really use least scale monad like everything else tool help monad lying around although super useful situation really needed time nt monad like burrito enlightenment moment working functional programming fine without unless using stricter language like haskell case option another misconception big ball mud cope complexity without help class design pattern factory etc nt data structure provide encapsulation going write truckload small function le line nt going big mess real world use case worry reality small function well defined scope really well organized within namespaces think file path namespace unit encapsulation clojure data structure let worry concept code also data public function namespace project get bigger simple architectural pattern help nubank preferred pattern hexagonal architecture topic future post
362,Lobsters,clojure,Clojure programming,Spec Transformers,https://www.metosin.fi/blog/spec-transformers/,spec transformer,two year ago difference schema spec coercion using spec ring swagger revisiting conforming edn transit spectools even thought bad idea bijections gary frederick miikka koskinen schema bijections plumatic schema bijection transformer specdriven transformation metadata dataunjson fabrizio final word spectools clojureverse,clojurespec data specification library clojure introduced almost two year ago still alpha hope find spec useful powerful rich hickey fourth post spec describing new way transform data based spec definition earlier post difference schema spec coercion using spec ring swagger revisiting conforming clojurespec allows u conform value spec require clojurespecalpha sconform int sconform int sinvalid world built clojurescript edn transit would coercion would ever need real life data represented many different format json xml need transform value format example json nt support keywords runtime transformation scope clojurespec current best practice use normal clojure function first transform data external format correct format validate using spec really bad idea structure data need copied spec custom transformation function spectools address issue separating value spec conforming data string format one transform using stringconforming us spec type definition required transformation support spec need wrapped require spectoolscore st type automatically resolved stconform stspec int sinvalid stconform stspec int ststringconforming still oneway transformation decoding adding new transformation required new type registered conforming instance new type vocabulary even thought bad idea bijections chatted smart people like gary frederick miikka koskinen twoway transformation using spec gary schema bijections library already allows twoway transformation plumatic schema usual clue google bijection actually meant short symmetric value transformation domain x x mapping number stringdomain eg property file clojure case multiple valid representation single value domain property bijections hold example date json multiple valid format bijections cool twoway transformation want welcome spec transformer transformer released metosinspectools transformation rewritten supporting twoway specdriven transformation higher order function conforming replaced transformer protocol supporting value encoding decoding defprotocol transformer name encoder spec value decoder spec value two new function spectoolscore encode decode flow value conform unform effectively value transformation addition conforming function automatically coerce spec argument spec using intospec protocol plain spec used stdecode int sinvalid stdecode int ststringtransformer intospec recursive nested spec need still wrapped would offer solution fix roundtripping datetimes json domain x x doto prn stdecode inst stjsontransformer doto prn stencode inst stjsontransformer doto prn stdecode inst stjsontransformer prn inst inst encoder decoder function many basic type spectoolstransform clojure clojurescript specdriven transformation another new feature use spec metadata define value transformed different domain two new key namespaces encode decode key namespaces domain name contain transformer function type spec value value require clojurestring str defn lowercase x x name strlowercase keyword x sdef spec stspec spec simplekeyword lowercase description lowercase keyword encoded upper string decoder string domain decodestring name strlowercase keyword encoder string domain encodestring name struppercase stdecode spec kikka kikka kikka stdecode spec clojurespecalphainvalid kikka stdecode spec ststringtransformer kikka kikka stdecode spec ststringtransformer stencode spec ststringtransformer kikka default transformer implementation first look speclevel transformer typelevel transformer creating new spec one also use type get encoders decoder documentation free like dataunjson thanks fabrizio pointer sdef kw stspec spec keyword anonymous function type keyword encode decode like keyword stdecode kw kikka ststringtransformer kikka stdecode kw kikka stjsontransformer kikka final word transforming specced value scope clojurespec meanwhile spectools provides spec typedriven transformation twoway transformation proofofconcept like clojurespec alpha partially built nondocumented apis likely broken later cent spectools break easy fix fix best case would spectools needed clojurespec could thing comment feedback welcome clojureverse tommi
363,Lobsters,clojure,Clojure programming,Build Your Own Transducer and Impress Your Cat - Part 1,https://dev.to/greencoder/build-your-own-transducer-and-impress-your-cat---part-1-mhp,build transducer impress cat part,anatomy transducer stateful transducer early termination transducer function using transducer transducer exercise solution hello transduced world give cool game try vincent please focus blend builtin transducer next next post,post part serie introduction transducer post anatomy transducer stateful transducer early termination transducer function using transducer transducer exercise solution article brief introduction transducer use hello transduced world simple word transducer equivalent operation stream data element man kind transducer take data element input may send output see function called exactly element input stream spit number element output stream special emphasis fact transducer taking anything input stream job responsibility get called something else data element transducer know call designated obscure function output element return result idea data go note want play transducer funny fictional world intuitive simple programming syntax give cool game try vincent please focus oh okay right simplest transducer accepts data element input give exact data element output except moment friend nobody gave data provided output transducer alone like stomach without food hmm let talk much output case notice still need place go let use transducer properly function give data element list collect output element vector b map identity list n n b n n another example transducer actually something input transforms char preceding char alphabet b map char dec int list u n b b n notice use function f take value parameter return value using form map f simple easy let see builtin transducer number input output element one output none output element input element filter int int int f list c r f e b h b l e c f e b b e one give output element input element mapcat list list list note function provided mapcat return collection arbitrary size mapcat return transducer output arbitrary number element input element blend multiple transducer piped together give birth complex data processing pipeline done via comp function result composition transducer data element flow one another pipeline buffer used storing intermediary result step streaming process comp map inc first step filter odd second step mapcat third step list list list builtin transducer clojure transducer popular handy todo insert link post future self write next next post talk anatomy transducer program
364,Lobsters,clojure,Clojure programming,Problem Solving and Clojure 1.9 with Rich Hickey,http://www.case-podcast.org/20-problem-solving-and-clojure-19-with-rich-hickey,problem solving clojure rich hickey,problem solving clojure rich hickey read transcript,problem solving clojure rich hickey utc joy clark talk rich hickey clojure datomic reason rich decided design way discus dependency problem change method developing library introduce breaking change rich also introduces clojure spec describes used differs static type system wrap episode talk best way solve problem know right problem rich give advice develop software technology worth looking read transcript
365,Lobsters,clojure,Clojure programming,Minimal HttpKit web server compiled into a 10 MB binary using GraalVM,https://github.com/analyticbastard/clj-on-k8s-quickstart,minimal httpkit web server compiled mb binary using graalvm,relevance graal instruction goal rational extra goal important change thanks,minimal httpkit web server compiled mb dockerized native binary relevance somebody used hardcore system guy fell comfort nicety jvm later joy clojure always interested systemsoriented clojure version call llvmclojure clojure c whatever somewhat contradictory since garbage collection memory allocation jvm efficiently u must reimplemented expectedly maybe previous reason clojure system implementation exists yet graal made way possible probably best possible way wonder clojure community excited graal nativeimage tool compiles bytecode native machine version embedding jvm code single binary native file handled directly o next question need reduce size final executable enters java module started working forked built top product dockerized native webserver implemented clojure abstraction provides stats time instruction docker image build assuming kubernetes set image placed correct ecr kubectl run helloclj image port env mynameclojure label namehelloclj work minikube also work vanilla docker connect web server inside container kubectl portforward kubectl get pod noheaders name selector namehelloclj goal rational exciting time clojure always clean powerful language nice interop jvm clojurespec added exciting capability relevant microservices jvm become modular allowing u greatly shrink size image jvm become much better docker citizen kubernetes great platform build microservices istio give u new way easily visualize monitor trace traffic flow service also simplifies many security task give u new ability control traffic extra goal graal make possible extrafast native clojure program important change needed switch ringjetty httpkit eclipse project class found graal could resolve class indeed present produced jar look like general problem graal eclipse ecosystem apparently affected also needed get rid several cryptographic signature check time fix thanks
366,Lobsters,clojure,Clojure programming,Native Clojure with GraalVM,https://www.innoq.com/en/blog/native-clojure-and-graalvm/,native clojure graalvm,graalvm newlyreleased benchmark truffleruby tip iceberg recent article set tool ruben docker image weighs mb lucas dohmen halunke compile halunke clojure evaluate limitation output failed compilation loop ednformatted jq hiccup,graalvm fascinating piece technology newlyreleased justintime compiler allows efficient execution interoperability various programming language top jvm impact execution speed stunning benchmark comparing graalbased truffleruby ruby implementation give u hint graal potential speed benefit aside new compiler also allows u translate jvm bytecode small selfcontained native binary tip iceberg needle say excited recent article workmate ruben wagner discussed graal allows u shrink docker container running java application reduce size image mb also made consume le megabyte ram runtime top graal allowed significantly speed startup java application encouraged experiment attempted adapt approach another jvmbased language albeit far dynamic one clojure like java modern lisp compiled aheadoftime class file consisting jvm bytecode consider simple namespace n ioinnoqclojurehello genclass defn main println clojureversion genclass declaration instructs compiler generate jvm class named hello ioinnoqclojure package main function compiled static main method let run compiler clojure repl user require ioinnoqclojurehello nil user compile ioinnoqclojurehello ioinnoqclojurehello find file compiler generated directory given compilepath var case javap confirms output ordinary jvm class javap cp targetclasses ioinnoqclojurehello public class ioinnoqclojurehello public static public ioinnoqclojurehello public boolean equal javalangobject public javalangstring tostring public int hashcode public javalangobject clone public static void main javalangstring reuse set tool ruben prepared compile tiny clojure namespace native binary begin extracting clojure standard library simplify later step archive cd targetclasses jar xf archive done afterwards use ruben docker image base mine graalvm base copy targetclasses target workdir target run nativeimage ioinnoqclojurehello scratch copy frombase copy frombase copy frombase copy frombase copy frombase copy frombase copy frombase copy frombase copy frombase targetioinnoqclojurehello cmd ioinnoqclojurehello let build image give go see large docker build cljhello docker run rm cljhello docker inspect cljhello jq size le mb place scale barebones weighs mb minimal viable native binary belt went look something complex experiment much clojure graal able compile limitation native compiler long ago spent rainy weekend playing around lucas dohmen programming language halunke check seen like thoughtthrough refreshing approach objectoriented programming time went sunday evening prototypical compiler ready allowed compile halunke clojure evaluate jvm let extend build minimal halunke repl n jalunkemain require clojurepprint refer pprint jalunkeeval e genclass defn main print flush whenlet line readline try pprint eevaluate line catch throwable pprint recur printing encouraging prompt read line worth input evaluate print result keep long input left let see action lein run jalunkemain foo foo po else po po reduce acc elem acc elem far good let compile namespaces using lein compile let graal nativeimage process operation fails see following error message nativeimage jalunkemain build server pid port classlist m cap m setup m analysis m error unsupported feature method detailed message error comoraclegraalpointstoconstraintsunsupportedfeatureexception unsupported constructor javalangclassloader init classloader reachable declaring class element substituted element present substitution class diagnose issue add option h reportunsupportedelementsatruntime unsupported element reported run time accessed first time trace parsing javasecuritysecureclassloader init call path entry point javasecuritysecureclassloader init classloader javasecuritysecureclassloader init javaneturlclassloader init clojurelangdynamicclassloader init clojuremain replinvokestatic clojurecoreserver replinvokestatic clojurecoreserver replinvoke error comoraclegraalpointstoconstraintsunsupportedfeatureexception add option h reportunsupportedelementsatruntime unsupported element reported run time accessed first time trace parsing javalangreflectproxyisproxyclass call path entry point javalangreflectproxyisproxyclass class javalangreflectproxyisproxyclass sunreflectmiscreflectutilisnonpublicproxyclass sunreflectmiscreflectutilcheckpackageaccess sunreflectmiscreflectutilispackageaccessible javabeansmethodrefget javabeanspropertydescriptorappendto javabeansfeaturedescriptortostring javalangstringvalueof interesting appears hit one graal limitation read error message try compile program anyway adding extra option nativeimage make replace unsupported behaviour runtime exception nativeimage h reportunsupportedelementsatruntime jalunkemain build server pid port classlist m cap m setup m typeflow m object m feature m analysis m universe m parse m inline m compile m compile m image m write m total m compilation successful program started attempt evaluate halunke expression lead following exception error cause declaring class element substituted element present substitution class via type comoraclesvmcorejdkunsupportedfeatureerror message javalangthrowable init throwablejava trace javalangthrowable init throwablejava javalangerror init errorjava comoraclesvmcorejdkunsupportedfeatureerror init unsupportedfeatureerrorjava comoraclesvmcorejdktargetcomoraclesvmcoreutilvmerror unsupportedfeature vmerrorsubstitutionsjava javalangclassloader init classloaderjava javasecuritysecureclassloader init secureclassloaderjava javaneturlclassloader init urlclassloaderjava clojurelangdynamicclassloader init dynamicclassloaderjava clojurelangrt run rtjava comoraclesvmcorejdktargetjavasecurityaccesscontroller doprivileged securitysubstitutionsjava clojurelangrt makeclassloader rtjava clojurelangcompiler eval compilerjava clojurelangcompiler eval compilerjava clojurecore eval invokestatic coreclj clojurecore eval invoke coreclj jalunkeeval evaluate invokestatic evalclj jalunkeeval evaluate invoke evalclj jalunkemain main invoke mainclj jalunkemain main invokestatic mainclj jalunkemain main invoke mainclj exception point directly cause problem compiling halunke clojure attempt evaluate using marked stack trace indicates clojure attempted call constructor classloader however possible native binary reported output failed compilation constructor got replaced unsupportedfeatureerror notice limit compilation evaluate resulting code program work replace eevaluate loop way avoid call thus preventing invocation classloader constructor let recompile native binary see translate halunke clojure program stop short evaluating generated code jalunkemain foo foo po else po clojurecorelet foo thenelse foo clojurecorefn po clojurecorefn po learned limitation imposed native binary build something useful simple tool allowing u get nested value ednformatted data structure like minimal jq clojure serialisation format n pprintinmain require clojurepprint refer pprint genclass defn main path read getin mapv readstring path pprint compile nativeimage like jalunkemain notice little time resulting binary need deliver result machine nativeimage save whole second startup time comparison traditional java invocation time pprintinmain file line eof file name srccoreclj added inst id uuid line code comment blank name srcinternalsclj added inst id uuid line code comment blank eof code comment blank cpu k pagefaults something different let try build tool wrapping another clojure library perhaps utility taking hiccup data structure input translating html n fromhiccupmain require hiccupcore h genclass defn main read hhtml println precompiled namespaces aheadoftime including hiccupcore dependency graal turn selfcontained hiccup renderer startup time memory usage remain satisfyingly low time fromhiccupmain eof html body div main style color red hi eof html body div id main style color red hi div body html cpu k pagefaults see graal enables u use clojure build small selfcontained commandline tool let see also allow u build entire web application order try need extra dependency defproject webkv dependency orgclojureclojure bidi ringringdefaults httpkit aot webkvmain main webkvmain let implement simple keyvalue database backed file temporary directory expose http n webkvmain require orghttpkitserver http ringmiddlewaredefaults refer wrapdefaults apidefaults bidiring refer makehandler genclass want sure none call relies reflection graal support set warnonreflection store data def string tmpdir systemgetproperty javaiotmpdir find file given key key must match given pattern defn file string key pre rematch azaz key javaiofile tmpdir key handle get request read file defn gethandler key params body slurp file params key put request handler given key value write file defn puthandler key params let val params val spit file params key val body val status routing tree application pick handler depending http verb top add extra middle ware parse data sent request def handler dict key get gethandler put puthandler makehandler wrapdefaults apidefaults finally got need expose handler http defn main httprunserver handler port println http order compile program need pas extra option nativeimage nativeimage h reportunsupportedelementsatruntime h enableurlprotocolshttp webkvmain total m du h webkvmain webkvmain webkvmain http curl http xput val testing created contenttype applicationoctetstream contentlength server httpkit date thu apr gmt testing curl http ok contenttype applicationoctetstream contentlength server httpkit date thu apr gmt testing server start instantaneously also behaves exactly traditional jvm incarnation binary file relies handful shared library resulting docker image take mb let review accomplished far beginning aot compiled tiny clojure namespace used graal transform native binary resulting file rely jvm work needed mb worth shared library afterwards discovered one graal limitation trying embed simple repl moved built selfcontained commandline utility whose memory usage startup time challenge jvmbased status quo finally successfully built entire web application embedded http server term disk memory usage resulting docker image weighed fraction traditional jvmbased solution importantly though scratched surface graal capability potential astounding looking forward future brings
367,Lobsters,clojure,Clojure programming,D3 and ClojureScript,https://lambdaisland.com/blog/26-04-2018-d3-clojurescript,clojurescript,joanne cheng twitter ended working well visualizing u energy administration npr released slopegraphs slopegraph visualization setup install leiningen leiningen package manager choice install installation instruction official website figwheel figwheel http installing clojurescript javascript library cljsjs project code http svg data join mike bostock blog post interactive data visualization web svg code template mozilla web doc threadfirst macro clojurescript interop episode data u energy information administration drawing npr article svg text element intoarray clj j scale function formatters external library line generator slopegraph example clone finished project final thought figwheel additional clojure resource mariacloud figwheel resource,guest post joanne cheng twitter freelance software engineer visualization consultant based denver colorado taught workshop spoken conference visualizing data turn clojurescript great fit post show create visualization using power elegance clojurescript use drawing custom data visualization love using library wanted try one several compile javascript option decided look clojurescript ended working well going show created visualization using clojurescript visualizingthe u energy administration release data much energy u produce consumes type energy used npr released slopegraphs much type energy state u produce article inspired dive data create slopegraph show energy generation changed entire country last yearsi downloaded energy generation data u energy information administration data browser converted clojure hash map used create visualizationsetupinstall leiningenif clojure set machine installed year ago telling would look clojure one day going need install leiningen leiningen build tool dependency manager project use package manager choice install preferred check installation instruction official websitefigwheelwe going create new figwheel project figwheel going create new project directory build clojurescript code autoreload browser every time code changesin command line go directory want project live run following command lein new figwheel usenergyslopegraph sit back second make sure error appear output look like generating fresh lein new figwheel project change usenergyslopegraph directory run lein figwheel wait finish compiling open http browser change newly created project directory start figwheel cd usenergyslopegraph lein figwheel see something like lein figwheel figwheel cutting fruit sec figwheel validating configuration found projectclj figwheel configuration valid figwheel starting server http figwheel watching build dev compiling build dev resourcespublicjscompiledusenergyslopegraphjs src successfully compiled build dev resourcespublicjscompiledusenergyslopegraphjs second prompt show figwheel connects application dev cljsuser little browser pop figwheel welcome page located http clojurescript project set every time save file project directory figwheel automatically recompile reload browser need manually refresh pageonce fully loaded figwheel switch repl command line prompt let evaluate bit clojurescript allows enter bit clojurescript code directly terminal executed browsertype press enter jsalert look browser installing usenergyslopegraph project directory open file called projectclj insert list library name dependency look something like dependency orgclojureclojure orgclojureclojurescript orgclojurecoreasync going want figwheel install dependency restart figwheel hitting ctrld running lein figwheel figwheel install new dependency added projectcljopen srcusenergyslopegraphcorecljs mostly working file may notice line boilerplate code remove println defonce appstate line need project corecljs look something like n exampleprojectcore require enableconsoleprint defn onjsreload first line namespace definition also load package installed require file altering first two line look like n usenergyslopegraphcore require loading namespace make sure necessary javascript file get loaded typically define global variable access j prefix like wanted add react clojurescript project would add dependency require cljsjsreact access jsreactclojurescript javascript librariesusing existing javascript library clojurescript challenging clojurescript aggressive code optimization work compiler able analyze complete project including third party library always possible code found wild called extern provide extra hint compiler external reference optimized away cljsjs project bundle popular javascript library together necessary extern publishes clojure code repository clojarsmore recent version clojurescript support npm package directly time need cljsjs go away still convenient way include javascript library clojurescript projectcodelet first add scaffolding make sure reloading work smoothlywhen open http browser loading resoucespublicindexhtml let make change work better projectfirst add cs link head section head link href http rawgitcomlambdaislandusenergyslopegraphmasterresourcespubliccssstylecss rel stylesheet type textcss head replace body tag body div id slopegraph div script src jscompiledusenergyslopegraphjs type textjavascript script script usenergyslopegraphcoremain script body save reload page browser added div visualization extra script tag script call exported function called main usenergyslopegraphcore namespace called page load implement main function clojurescriptadd main function make sure onjsreload function corecljs export callable javascript defn export main println main function also call main function onjsreload defn onjsreload println onjsreload function main make change corecljs change string println function save file look browser javascript console see onjsreload get called every time make changeswhy using pattern figwheel autorefresher built load write browser want create main function define exactly happens app load first time happens subsequent reloadssvgone core concept data join tutorial go deep part completely unfamilar suggest looking mike bostock blog post book interactive data visualization webwe going drawing visualization using svg start need create svg element using continue might want grab code template github clojurescript quite particular order put thing template contains empty stub function simply fill named section make clear put rest data def height def width lifecycle defn appendsvg select slopegraph append svg attr height height attr width width appendsvg function selects html element id slopegraph appends svg element set height width attribute mozilla web doc resouce tell u attribute set certain svg element great reference working svg defined height width value first two line code example using throughout code examplein javascript appendsvg would look like function appendsvg return slopegraph append svg attr height height attr width width try calling appendsvg figwheel repl running terminal usenergyslopegraphcoreappendsvg inspect page browser see svg element html div id slopegraph svg height width svg div call appendsvg main function svg element work page load defn export main appendsvg save change inspect html indexhtml notice anything unusual two svg element save change onjsreload get called call main call appendsvgto solve issue let remove svg element onjsreload get called add removesvg function corecljs modify onjsreload call removesvg main called defn removesvg selectall slopegraph svg remove defn onjsreload removesvg main soon save change corecljs reload figwheel invoke onjsreload remove leftover svg element adding new one duplicate svg element notice used threadfirst macro appendsvg removesvg chaining call method threadfirst macro take starting value number function call starting value used first argument first function result used first argument next function forth help u chain selection method together without removesvg would look like defn removesvg remove selectall slopegraph svg period remove selectall indicate calling javascript method rather plain clojurescript functionsyou may also want check operator work similarly threadfirst prefix javascript method clojurescript interop episode lambda island explains syntaxthe benefit using allows freely mix clojurescript function javascript methodsthe datai used separate script transform csv data downloaded u energy information administration clojurescript hash map containing percentage energy source generated note renewables sum biomass geothermal solar wind data working draw slopegraph insert hash map definition corecljs def data naturalgas coal nuclear renewables naturalgas coal nuclear renewables drawing let create function called drawslopegraph take selection called svg data hash map update main call drawslopegraph svg element created appendsvg data hash map make sure visualization reflectes change make code defn drawslopegraph svg data defn export main let svg appendsvg drawslopegraph svg data column slope graph represents year column left display data column right display data look back slopegraph example npr article notice text element positioned vertically based associated numeric value text element case hash map key naturalgas coal etc numeric value hash map value percent use position name correctly columncreate function called drawcolumn drawcolumn take selection text element drawn inside year worth data column index additional svg attribute drawcolumn standard procedure creating new element data create placeholder selection bind data call enter create new element case svg text element set attribute text element defn drawcolumn svg datacol index customattrs svg selectall str textslopegraphcolumn index data intoarray datacol enter append text notice call intoarray pas data data call one thing find using javascript library clojurescript sometimes need turn clojurescript data structure plain javascript one intoarray turn clojurescript sequence type native javascript array could also used clj j clj j recursively turn clojurescript value data native javascript type mean use clojurescript method javascript valuesnow modify drawslopegraph make sure calling drawcolumn year data defn drawslopegraph svg data let get data get data drawcolumn svg x width drawcolumn svg x width setting x attribute column align horizontallysave change open indexhtml inspect html see anything page see created text svg element item datacolwe need set attribute text element set vertical position going create helper function return scale function help u translate value pixel value helper def heightscale scalelinear domain j range j height display text want display name energy source percent value example naturalgas natural gas helper function help u thatmodify require statement include clojurestring n usenergyslopegraphcore require clojurestring str add two helper defn formatpercent value format value defn formatname namestr namestr strreplace strcapitalize formatpercent us formatters convert decimal number percent string formatname simple string manipulation clean name string feel free try two function using repl dev cljsuser usenergyslopegraphcoreformatname naturalgas natural gas dev cljsuser usenergyslopegraphcoreformatpercent let set attribute text element created drawcolumn add attrs function modify drawcolumn helper defn attrs el doseq k v attr el k v draw function defn drawcolumn svg datacol index customattrs svg selectall str textslopegraphcolumn index data intoarray datacol enter append text classed str slopegraphcolumn index true text fn k v str formatname name k formatpercent v attrs merge customattrs fn v heightscale v attrs function helper function help u pas svg attribute selection using whole hash map rather calling attr every attribute want set without needing install external librarysave change look indexhtml see text still missing line header let first refactor code make drawing easier data join pattern going used let pull code separate function helper defn datajoin parent tag class data let join parent selectall str tag class data intoarray data enter join enter append tag classed class true join exit remove merge join enter draw function defn drawcolumn svg datacol index customattrs svg datajoin text str textslopegraphcolumn index datacol text fn k v str formatname name k formatpercent v attrs assoc customattrs fn v heightscale v datajoin place ready implement drawheader drawline def width def columnspace width defn drawheader svg year svg datajoin text slopegraphheader year text fn data str data attrs x fn index index columnspace defn drawline svg svg datajoin line slopegraphline attrs columnspace fn v heightscale v fn k heightscale get k call drawslopegraph defn drawslopegraph svg data let get data get data drawcolumn svg x drawcolumn svg x columnspace drawheader svg drawline svg going go detail api hope intuitively get sense going line connecting two column together us line generator work little differently text element drewthere lot thing make visualization readable maybe attach mouse handler highlight one column time like slopegraph example may want clone finished project try add feature using clojurescript final thoughtslearning new language overwhelming task pain learning new syntax paradigm also build tool editor tool decent number conceptual talk whole lot getting thrown face feel like much work get started languagepicking figwheel meant could learn clojure responsive environment pretty small setup process able apply javascript knowledge clojurescript start writing small visualization learn language slowly learned better way write code picked new editor repl tool continued clojure educationif learning clojure seems overwhelming figwheel project may right additional clojure resourcesif want dive straight clojure graphical environment zero setup also highly suggest resource
368,Lobsters,clojure,Clojure programming,open-source data analysis and publishing platform,https://github.com/akvo/akvo-lumen,opensource data analysis publishing platform,akvo lumen pm development setup development environment integration data import readme thanks browserstack legal,akvo lumen opensource easy use data mashup analysis publishing platform pm development see setup development environment integration data import readme thanks browserstack supporting akvo allowing u use service infrastructure test code repository thank supporting open source community legal copyright present akvo foundation
369,Lobsters,clojure,Clojure programming,Zero-downtime Clojure Deployment,https://functional.works-hub.com/learn/zero-downtime-clojure-deployment-c6c82,zerodowntime clojure deployment,zerodowntime clojure deployment preparatory step digitalocean hetzner luminus git deployment setup digitalocean guide app process management supervisor deployment procedure gist configuring nginx like gist deployment digitalocean guide,zerodowntime clojure deploymentclojure apps take long time build start stop application server process restart app unavailable user second new server process start article describe setup clojure web app deployment using git supervisor downtime period thus offer better experience userspreparatory stepsthis guide assumes clojure leiningen installed use installation instruction domain name virtual private server cloud service like digitalocean hetzneron virtual server need nginx supervisord installed aptinstall ubuntu well leiningenfor demo create simple clojure application development machine good way use luminus framework lein new luminus myapp myapp name test app try launching app locally cd myapp lein run install dependency launch app port luminus start web server port specified port environment variable default port number check started successfully trying http browsernext set deployment proceduregit deployment setupif familiar git deployment work skip section encounter problem refer digitalocean guide detailed explanationon virtual server create bare repository serve target git push directory app code located example create repo app directory account home directory needed also varwww elsewhere serverremotemachine mkdir p reposmyapplivegit remotemachine mkdir p appsmyapplive remotemachine cd reposmyapplivegit remotemachine reposmyapplivegit git init bare local machine initialise git repository commit file luminus created git init git remote add git add git commit initial commit add repository server remote repository local machine git remote add demo ssh username remotemachine reposmyapplivegit provide necessary git hook later onapp process managementnow need launch application serverfor example use supervisor process manager logic apply process manager supervisor daemon turn application daemon task supervisor call program starting stopping upon request restarting failure server restartthe issue simple onetask configuration every time redeploy restart app unavailable starting may take around second even basic clojure app work around create two task rotate deployment task running old code stopped verified task running newly deployed code ready receive requestsafter installed supervisord virtual server create configuration app adding etcsupervisorconfdmyappconf gist filemyappconf run two instance app time deploy app build uberjar nt care java clojure dependency include library specific app snapshot depends upon launched single java commandthe two task named name prefix difference number instancewe launch app wwwdata user account keep log varlog supervisor rotates log automatically start instance automatically system startup restart time instance environment variable least give different port nreplport number web server work simultaneously configuration variable added necessary may two instance database credential etc differentto make supervisor control command accessible user without sudo help restart task git hook deployment change etcsupervisorsupervisordconf adding line unixhttpserver section unixhttpserver filevarrunsupervisorsock path socket file socket file mode default chownusername username reload supervisord config remotemachine supervisorctl reload note process wo nt start jar file yet need set actually deploy applicationdeployment procedurefirst need keep track instance app running one launched next one using special file app directory number app launched next deployment keep file alongside file related deployment subdirectory named deploymentfiles shell command read file put content next variable default create directory assume going launch instance need run command manually put script bit later mkdir p deploymentfiles next cat deploymentfilesnext next next build uberjar put deploymentfiles name specified supervisor config standard function report error abort script die echo exit homebinlein uberjar die deploy build failed cp targetstandalonejar deploymentfilesinstance nextjar start supervior program task question programprefix myapplive supervisorctl restart programprefix next program launched available user around second never case http server within app start due bug reason make sure start poll server port interval start responding app nt start within second assume failed start abort deployment starttime date next port port curl localhost port devnull sleep date starttime timeoutinterval supervisorctl stop programprefix next die could start instance next timeout fi done finally made sure server working stop old instance mark one started next deployment next echo stopping instance prev supervisorctl stop programprefix prev echo prev deploymentfilesnext echo done updating programprefix instance next listening port port step done remote machine deployment put shell script since programprefix applicationdependent parameter make sense put separate file deploymentconfig located app directory remote machine deployconfig programprefixmyapplive case different deployment target single machine example live deployment betatesting deployment keep separate directory separate configs separate supervisor program group themnow step deployment stored file named deploysh find full text script gist also additional parameter nobuild run script want rotate instance without rebuilding app example roll back deployment avoid accidentally overwriting deploymentfiles directory deployconfig file make sense add gitignore filealso use name standalonejar uberjar file default file name includes app name version difficult keep track deployment script need add uberjarname standalonejar projectclj filenow need specify postreceive git hook check tree application directory push pas control deploysh script provided application remotemachine vim reposmyapplivegitpostreceive binbash git worktree homealexappsmyapplive gitdir homealexreposmyapplivegit checkout f cd homealexappsmyapplive bash deploysh commit change new file deploysh additional line projectclj gitignore push app virtual server git add deploysh git commit add deployment procedure git push live master everything compiles launch successfully receive message instance listening port first deployment also receive message instance stopped runningconfiguring nginxfinally make app available user need set load balancer pass incoming request one instance try instance first instance respondin etcnginxsitesavailable create file myapplive like gist make symlink etcnginxsitesenabled filethat simplest possible config expand need http caching using nginx serve static file test config valid restart nginx sudo nginx sudo service nginx restart app running http myappdomaincom deploymentsnow time commit change code push virtual server deployed without downtimeif need roll back previous deployment log virtual server run bash deploysh app directoryyou also add deployment target example beta one need separate app directory deployconfig file supervisor program group nginx config file git repo remote machine need add upstream local machine refer digitalocean guide detail
370,Lobsters,clojure,Clojure programming,Concurrency Models and Clojure,https://functional.works-hub.com/learn/concurrency-models-and-clojure-237db,concurrency model clojure,different concurrency model clojure differently shared memory actor fit clojure methodology really like answer quora clojureorg reference atom wikipedia note var mentioned post clojureorg swap swap stack overflow reference atom agent remember extract agent ref check way mutating ref data brave true oreilly clojure programming book,different concurrency model clojure differently post hope give introduction different concurrency model characteristic separate take look model clojure opted use advantage disadvantage come implementing sound like lot go one article let jump say getting ready work need get dressed make breakfast part routine involve making omelette putting shirt sure crack egg bowl put arm one sleeve crack another egg slip sleeve problem time swap one task really matter order go thing stop start resume task necessary ultimately four arm say concurrency stop start complete task ability overlap parallelism would task completed exact time hence need four arm could say concurrency set instruction program dictate order task executed task making progress exact time bringing back example set plan cracking egg getting dressed whatever way choose parallel mean fundamental change infrastructure handle task exact time change infrastructure would u gaining another pair arm computing term would something like multicore processor handle greater number problem alright way let look concurrency model one popular way programming concurrently would use actor model made infamous erlang runtime proclaiming reliability faulttolerance oversimplification think actor similar object oop accept incoming message proceed execute kind computation based moreover oop one object message many object different kind message true actor many actor defined form system allowing send message thing separate actor model another model shared memory actor given independent slice work handle message therefore one actor would like different actor compute given message copy use case fp data immutable store actor mailbox mailbox behaves like queue first message taken worked actor next message sequentially executed actor work message sequentially would considered synchronous actor may choose designate others work problem shifting another actor mailbox moreover actor move onto next message mailbox sit around waiting find happened message allowing asynchronous message passing last point make weighing practicality model consider ease parallelism think actor separate aware others address matter local completely different computer language like erlang employ let crash philosophy actor share state one fails restored without system whole concerned let look model pragmatic standpoint newfound knowledge argument model le costly data copied suspended locked look akka doc example implementation model said lock seriously limit concurrency requiring heavy lifting operating system suspend thread restore later true also argued complexity rise easy fall mindset implementing everything actor mean break concurrent process many actor handle one message prolific amount actor risk large amount receivesend message moreover crucial design prohibits happening avoid performance deficit clojurists may noticed go one core philosophy data reside collectively large data structure define many function operate block actor model emphasis use small isolated state away part program one thing mention topic unit computation actor operate many different type message solution many actor different type lead lot code written communicate actor typed actor making opinion unpredictable moreover way state handled internally hidden actor make much harder test reason side effect produced get wrong model fit problem nicely take whatsapp architecture example needed able process million message per second real downtime actor fit well data need collectively shared processed stored recorded able scale million message per second actor fit clojure methodology could use instead well one way would utilise standard multithreading model already available java runtime really like answer quora explains nicely pro con model lot data shared especially data readonly threading model may faster however probably easier program however threading model nt work well critical section general word transaction might nested call someone else function know nt use lock monitor try use lock using may create deadlock model threading allows u keep data central suffers issue actor model regarding complexity however clojure innate advantage functional deadlock issue could mitigated composable model could leverage thread provide alternative locking could also keep databasestyle storage data read writes also allow composability introduce software transactional memory could thing looking let start taking look one difference stm standard multithreading technical difference opposing mindset threading assume worst stm rather optimistic mean updating changing one variable database programmer lock variable part program needed assumption need think overlapping update operation could cause conflict process difficult predict implement take lot time error prone instead assume nobody working variable could protect race condition uncontrollable event stm instead make copy global variable referring let perform whatever operation desire made change like want commit change sort like push master branch github find value actually changed course time operating go back start let call state changed atom make change atom done atomically make change atomically ask must signal function repeated initial call result atom changed important remember function include side effect operating global state outside parameter list depending value state time calling may different talked clojureorg reference atom think given clue model clojure implemented looking characteristic clojure make sense style philosophy datafirst one data structure main abstraction allows many function build upon persistence able piece mind data changed done directly without record previous state functional paradigm emphasising composable function becomes natural think write concurrent program also compose mean different function make change easily layered theory function work input eg one function take atom number case double could layered function take atom chooses square root pipe lining state function functional may also mean cost copying distributed model becomes high another issue stm model transaction made reversible failed transaction mean change variable undone process mean actual number valid transaction perform becomes limited solution handling type problem add operation type onto queue performed later date transaction performed transaction taking place sadly reason stm implementation widely inefficient impractical real world clojure stm implementation look like clojure leverage threading capability jvm place task executed concurrently inside thread stm implementation lock resource implementation mvcc multi version concurrency control used instead locking simplified explanation snapshot database taken point time reader read snapshot without fear inconsistency overwriting process likewise writer storage receive snapshot work snapshot becomes new one get used transaction completed much wikipedia reference type clojure us manage access state atom ref agent note var mentioned post mentioned atom little ago let explore atom used clojure mentioned clojureorg atom provide way manage shared synchronous independent state independant state refers state linked others example item shop sold affect current state item shall working dependant state ref later let define state atom def jumper atom sold false time someone may want purchase item could accommodate change using swap macro swap jumper assoc sold true someone middle purchasing someone also trying buy jumper one reason atom useful even situation multiple thread could change sold property jumper act updating done synchronously make process relatively straightforward swap implement compareandset semantics state atom point time attempt swap global state atom update function run data atom new data change atom time conclusion atom provide nice way dealing independent piece state synchronously move onto agent leave link describing function characteristic atom stack overflow reference atom agent another reference type available u mutating state concurrent setting separate atom agent atom provide uncoordinated access respective state difference atom synchronous agent asynchronous remember synchronous execution task started completed without switching another task asynchronous execution task started set aside another task waiting completed create thread work agent change made outside thread execution called meaning execution task done asynchronously would use agent value could readwritten multiple party control moreover agent unique ability perform io function side effect safe manner agent similar characteristic actor queue action get sent performed action agent receives however serialised translating data structure format stored thing like file memory buffer set state agent something like database connection piece mind action copy connection evaluated send action agent ask say given agent def agent send action agent send object clojurelangagent status ready val see action changed data agent another function called sendoff however use strictly io operation send used operation cpu bound nice explanation subtle difference check extract agent let move ref ref standard example explaining use ref use bank account transfer example sending friend must update account poorer friend richer ref deal many identity let see ref reference bound single storage location lifetime ref also allow mutation state occur within transaction rather atom independent timing change relative element really need considered ref relying transaction need stm work u function coreasync namespace going help u write concurrent clojure doc dosync see nice short explanation function offer u user doc dosync clojurecoredosync exprs macro run exprs implicit transaction encompasses exprs nested call start transaction none already running thread uncaught exception abort transaction flow dosync exprs may run effect ref atomicso dosync start transaction u mean mean change ref let start defining ref bank account def alexaccount ref name alex balance def jakeaccount ref name jake balance give jake call transfer alexaccount jakebalance defn transfer deposit sender reciever dosync let senderbalance balance sender recieverbalance balance reciever alter sender senderbalance deposit alter reciever recieverbalance deposit mutation like alter need done transaction fail retried value state change computation retried cleanly check way mutating ref data hit tip iceberg concurrent crazy world reading understanding topic covered well thing like future delay promise rest leave peaked interest definitely recommend brave true oreilly clojure programming book
371,Lobsters,clojure,Clojure programming,Are unsound type systems wrong?,http://frenchy64.github.io/2018/04/07/unsoundness-in-untyped-types.html,unsound type system wrong,typed racket typed clojure typescript typed racket typescript typed clojure typed clojure,essay wrote battling soundness v usability typed clojure many year starting reconsider obviously wrong approach baking unsoundness type system getgo look historical example intentional unsoundness type system try present side argument type system come shape size varying simple complex often one property common type soundness essential property type soundness type preservation say type system approximation result computation type preserved every intermediate computational stage word type system job model computation model lose accuracy program evaluates soundness important historically soundness used objective measure robustness type system type system proven sound programmer use prove interesting sometimes strong property program programmer often use verification tool like unit testing contract get strong assurance similar property using sound type system sometimes mean verification tool redundant programmer remove otherwise helpful technique instead lean type system predicated type system sound false claim soundness programmer accidentally make program le verified transferring verified assurance tool broken type system would type system want omit soundness given strong historical context split discussion two part first part discus closedworld soundness closedworld soundness traditional kind soundness assumes program type checked type system recent type system untyped language like typed racket typed clojure include proof closedworld soundness allows typed clojure example prove nullpointer exception ruled purely typechecked code conversely type system intentionally break type soundness like typescript prove interesting property typescript code without soundness designer intentionally break soundness typescript challenge status quo claiming lowering cognitive overhead using type important type soundness argue javascript programmer main audience would find easier use typescript deviated traditional norm rather distressing academic already done hard work discovering blunder published work year ago example typescript includes covariantarrays break guarantee content mutable array early underestimation guarantee brought value restriction standard ml later covariantarrays java required additional runtime check avoid segfaults interestingly fixing area typescript fruitful source new research probably unintended consequence original typescript designer microsoft second important component soundness openworld soundness openworld soundness recently become important advent gradual typing language openworld soundness require closedworld soundness also guarantee upheld closedworld assumption broken foreign code introduction consideration foreign code essential difference openworld closedworld soundness many system designed around preserving closedworld rather openworld soundness typed racket currently sophisticated openworld system designed interaction foreign code never break closedworld invariant practice mean error message still informative even typed racket code interacts foreign code openworld system like typed racket harder design implement use example typed racket must scrutinize language boundary barrier foreign code typed code design typed racket new technology invented reason value crossed boundary implementation typed racket language boundary translated extra compiler pass insert necessary check value flow typed code usage typed racket programmer must consider additional performance overhead check via language boundary especially tight loop alternate side boundary cost assumption improved error message worth end perspective programmer programmer actually care soundness practice developer typescript say reject openworld soundness ignoring technique like gradual typing resulting poor error message presence foreign code also reject closedworld soundness including unsound feature effectively providing guarantee type system typescript programmer could rely upon developer typed clojure different story seem reject openworld soundness default designed system could extended openworld soundness future fully embrace closedworld soundness including full type soundness proof typed clojure advertise interesting property type system result closedworld soundness like preventing nullpointer exception desirable feature developer typed racket much opinionated respect soundness fully embrace openworld soundness advertise user enjoy improved error message even presence foreign code also embrace closedworld soundness prerequisite openworld soundness design type system intentionally sound feature type soundness necessity tool academic context seems necessary build type system soundness mind prove type soundness typed clojure typed racket come academic background surprise value type soundness necessity conversely microsoftdesigned typescript completely comfortable cherry pick sound feature desire even sum part useless term proving type soundness way typescript designed fact promising older system like java system inadvertently broke type soundness instead making deliberate action angle type soundness becoming relevant practical language sake instead reference particular point language design space type soundness originally invented allow language designer prove property language supported also function well showing exactly property lost type soundness ignored conclusion design space typed language allow many interpretation type soundness recent upsurge type system untyped language given language designer reason experiment unconventional view type soundness full soundness typed racket intentional lack soundness typescript justification using ignoring type soundness interesting varied potentially many interesting point design space yet unexplored
372,Lobsters,clojure,Clojure programming,Introduction to ClojureScript aimed at JavaScript developers,https://www.rubberducking.com/2018/04/overview-of-clojurescript-110-features.html,introduction clojurescript aimed javascript developer,clojurescript official change list proper module namespaces lambda function protocol based oop large standard library clojurescript standard library google closure library clojurescript standard lib google closure library multiline template string destructuring type extension rest named spread overloaded argument proper scope iterators lazy sequence unicode support immutable data structure mutable data structure mutable data structure google closure lib controlled mutable value type extension destructuring extension syntax extension many,clojurescript clojure compiler javascript use dialect clojure called clojurescript identical syntax semantics clojure write javascript code wherever used use javascript use clojure instead sure clojurescript offer well overview please note list put together time clojurescript using older version feature might missing using newer version might newer feature mentioned refer official change list gritty detail clojurescript offer following feature proper module languagelevel support module let define logical component clear dependency one another clojurescript call namespaces create n clojurescript namespaces compatible google closure module use also native support convert commonjs amd node module google closure module line configs required conversion read n cljsfeaturesdemo require googstring gstr googstringformat require module standard google closure library part clojurescript standard library module require use cljsfeaturesdemo used create alias use gstr instead googstring access function googstring lambda function lambda function way declare function inline minimal syntax generally nt name though similar java c javascript arrow syntax declared except declared different syntax clojurescript respectively either using fn former shorter type latter feature support full closure therefore capture global local context along shorthand syntax remove argument custom named argument using fn syntax remove fn v v protocol based oop clojurescript functional programming language first foremost yet allows much thing would using javascript object prototype protocol define new interface type implement implementation method define record named bundle property much like javascript object implement protocol said immutable nt support inheritance preferring composition object interface based extendable immutable notice interface forefront defined first defprotocol aperson ageby year changename newname class defined second defrecord person name age object field aperson define person implement method aperson ageby year first method implementation assoc age age year add year age object changename newname second method implementation assoc name newname replaces name object newname create new instance person def john person john cljsuserperson name john age call method ageby john cljsuserperson name john age everything immutable including object age john large standard library clojurescript come bundled function object normal javascript always includes vast set function object clojurescript standard library well google closure library right clojurescript always includes google closure library making integral part clojurescript whenever ca nt find want clojurescript standard lib look google closure library instead google closure library similar jquery corejs includes huge swat function manipulate dom server communication animation datastructures unit testing text editing also come ui widget control used google web product gmail search map doc photo etc robust highly optimized complete well tested also minimize end taking least amount space possible making page load fast oh way work across browser yup mean clojurescript nt need jquery corejs babel etc since handled first class support google closure compiler multiline template string string span multiple line result newline character part string exactly new line added defining string code template allow interpolate string variable safer string creation user input multiline string string span multiple line string spansnmultiple line template string let firstname john lastname white gstrformat hello firstname lastname hello john white destructuring destructuring allows binding using pattern matching support matching clojurescript data structure record failed destructuring throw instead matched set nil see type extension way extend clojurescript javascript object also destructured list matching let b println println b object matching let key name age john println name john println age associative map matching let key b b println println b used parameter position defn g key name println name g name marie failsoft destructuring let println nil default value associative destructuring let key println rest named spread overloaded argument rest argument let take variable number argument named argument allow pas argument order spread argument allow pas sequence list vector etc element argument function finally overloaded argument allows dispatch different implementation based number argument rest argument defn f x rest rest sequence x count rest multiplies x length value rest f hello true named argument defn f key x x f x f x named argument default value defn f key x x x f spread function call defn f x z x z pas element sequence argument apply f overloaded function based number args defn f b b b c b c f f proper scope clojurescript proper scope everything blocked scoped support nesting work expect inner scope see outer scope also shadow outer scope name reused outer scope access inner scope define global scope variable x def x define global scope function f defn f x argument x defined function scope let x define block scope variable x let x nested block scope variable x println x println x println x println cljsfeaturesdemox f everything always properly scoped let also always immutable similar const j must wrap mutable container get mutable variable let atom println reset println iterators lazy sequence clojurescript support iterators much like python java iterators behave like generator ease use difference clojurescript iterators immutable thus carried data must passed along recursive style lazy sequence allows computation run needed pipeline created collection like c linq java stream making data manipulation trivial task iterators defn fibonacci create iterator generates next fib carry last fib used next generation iterate fn b b b return first element generated value drop carried state used next generation map first take fibonacci return first generation fib similar generator python except immutable lazy sequence fibonacci take map inc remove even similar c linq expression unicode support clojurescript support unicode equal extent javascript target single byte character syntax println code point aware count count 𠮷 true define multibyte unicode char 𠮷 true iterate code point codepoint seq println codepoint immutable data structure nt cluedin yet almost everything clojurescript immutable includes data structure trick also extremely fast consume minimal amount memory also come really convenient literate syntax create persistent list conj add clojure parlance front conj peek front peek persistent vector conj back conj peek back peek persistent queue queue conj back conj queue peek front peek queue persistent hash set persistent sorted set sortedset persistent hash map b b persistent sorted map sortedmap b b mutable data structure clojurescript also come mutable data structure use discouraged performance demand simply delegate host javascript mutable data structure feel free use mutable datastructures since clojurescript polyfill older javascript version use google closure compiler also use mutable data structure google closure lib avltree heap pool queue trie etc never short data structure clojurescript simply reuses one offered javascript javascript object j b j b read object property prepending name j b mutate using set def myobj j b myobj j b set myobj mutated myobj j mutated b array makearray j nil nil nil j firstarrayelement secondarrayelement j firstarrayelement secondarrayelement mutate using aset def myarray j myarray j aset myarray mutated myarray j mutated access indexed value using aget aget myarray mutated map jsmap object map object map set get using host interop def mymutablemap jsmap set mymutablemap get mymutablemap set jsset object set object set add using host interop def mymutableset jsset mymutableset add add mymutableset true controlled mutable value every value container google closure library host javascript third party library imported immutable clojurescript except atom atom allows explicit use mutable value support adding validation change well watch event trigger mutation value letting put proper control place avoid mutability cause bug code mutable value atom def amutableval atom nil amutableval get current value prefix nil reset amutableval nil amutableval nil atom mutable value object apart javascript host datastructuresobjects seen previous section watch trigger event callback every time value change addwatch amutableval printchangedetails fn key oldval newval println gstrformat atom changed oldval newval reset amutableval damn well changed value atom changed nil damn well changed value validators validate new value setvalidator amutableval fn newval newval try reset amutableval catch jserror e println e object error error validator rejected reference state type extension nt think clojurescript enough feature box well luck give ability easily extend type clojurescript host javascript quite easily simply extend clojurescript javascript object time let add reverse method javascript string first declare protocol remember interface first defprotocol reversable reverse implement javascript string extendtype string reversable reverse split reverse join reverse cool looc let extend javascript object destructured extendtype object ilookup lookup key googobjectget name key key notfound googobjectget name key notfound let key b j b b thanks mike fikes destructuring extension syntax extension also possible extend clojurescript syntax using macro tagged literal macro completely new syntax semantics created called upon invocation macro nt need wait next version clojurescript add missing language feature careful macro advanced user powerful weapon easily misused avoid unless absolutely necessary tagged literal simple way add new literal notation construct object datastructures macro wish could use infix notation binary function defmacro infix code second code first code last code infix tagged literal wish way create javascript mutable map literal syntax datareaderscljc file add custom literal tag mutmap customtagsmakejsmap call function associated read time n customtags defn makejsmap jsmap clj j letting use literal syntax create anything let jsmap mutmap b println get jsmap many clojurescript support many feature one highlighted pretty complete language probably wo nt find anything missing extension capability allow add without waiting new version come consider list incomplete added feature nt cover number literal decimal exponent binary octal arbitrary base etc regex literal edn json clojurescript shebang support block comment default argument asynchronous programming using communicating sequential process go literal uuid instant etc metadata data data reader conditionals allows code work simultaneously clojure clojurescript tail call optimized recursion custom type react support spec declarative data specification auto validation generation used generative testing powerful runtime validation transient mutable escape hatch immutable data structure performance required transducer efficient composable data transformation zipper navigational iteration tree graph data structure output source minification output source dead code elimination polyfill ecmascript ecmascript use newer apis older javascript environemnts much
373,Lobsters,clojure,Clojure programming,The REPL is a User Interface to your program,https://clojure.org/guides/repl/guidelines_for_repl_aided_development,repl user interface program,,program commonly offer user interface variety medium graphical web page mobile desktop apps networkbased web service http apis storagebased program keep database date queried commandline interface cli interaction via terminal think repl another medium usertoprogram interaction compared listed requires advanced knowledge programming clojure also extremely expressive cheap develop since requires almost anticipation part code user want leverage instance repl suitable ui ad hoc data export clojure project common practice define function namespaces solely intended repl interaction consider alternative cli dashboard etc
374,Lobsters,clojure,Clojure programming,Java arrays and unchecked math,http://clojure-goes-fast.com/blog/java-arrays-and-unchecked-math/,java array unchecked math,java array unchecked math matrix multiplication criterium memory java array facility dirty little secret multidimensional agetaset aget performance killer unchecked math unchecked cljjavadecompiler conclusion local clearing direct linking,apr array unchecked maththe design clojure explicitly promotes usage efficient data structure unlike functional language standard library revolve around list clojure put vector map front forward clojure vector excellent data structure sequential data provide almost lookup natural use large collection speed essential however vector still overhead might fit tightest demanding performance spot example tasked represent mathematical matrix multiplication might initially reach vector matrix multiplication algorithm hence every performance flaw rapidly multiply matrix grows size let start simple implementation allows random singlevalue initialization defn makematrixv n val vec repeatedly n vec repeatedly n fn long val val randint defn multmatrixv b let n count vec range n vec j range n reduce fn sum k sum nth nth k nth nth b k j range n let use criterium benchmark implementation user let makematrixv b makematrixv critquickbench multmatrixv b execution time mean m execution time stddeviation m multiplication two matrix millisecond quite lot remember increase cubically take matrix time multiply become second representing matrix vector embarrassingly slow also woeful squander memory user mmmeasure makematrixv kb unfair blame vector slowness memory overhead designed immutable time efficient update nt need property task jvm something much lowerlevel would suit problem perfectly something array java array clojure standard library provides certain facility u able use java array rewrite implementation much efficient lean set warnonreflection true avoid accidental reflection save u typing defmacro j aget j aget j defmacro j v aset j aget j v defn makematrixa n val let j makearray longtype n n dotimes n dotimes j n j val long val long randint defn multmatrixa j j b let n alength j c makematrixa n dotimes n dotimes j n loop k sum k n recur inc k sum k b k j c j sum c thing code probably require explanation j syntax hint next symbol long weird notation spawn way jvm represents array type internally stand array jvm followed label type content thus array integer marked array longs j array string ljavalangstring note l stand object jvm reason unknown double mean array twodimensional java array double would represented jvm multmatrixa use dotimes two outer loop compile directly stateless java loop inner loop use clojure loop also need accumulate sum iteration verify array implementation better term performance memory occupancy user let makematrixa b makematrixa critquickbench multmatrixa b execution time mean m execution time stddeviation m user mmmeasure makematrixa kb see array implementation time faster take time le memory store matrix become substantial matrix grows dirty little secret multidimensional agetaset informed reader could notice become confused write twodimensional agetaset implementation look redundant clojure aget aset support variable number index problem though terribly slow one dimension user let longs arr makearray longtype critquickbench aget arr execution time mean n user let j arr makearray longtype critquickbench aget arr execution time mean âµs time slower happen answer lie implementation aget defn aget inline fn clojurelangrt aget int inlinearities array idx clojurelangreflectorprepret getcomponenttype class array array get array idx array idx idxs apply aget aget array idx idxs see standard onedimensional twoarity version aget inlined clojure compiler interop call clojurelangrtaget read clojure inlines rt class contains multiple overloaded aget implementation primitive type call almost fast using arr idx notation java becomes equally fast jit kick arity reflection used runtime navigate array already discussed reflection performance killer worst thing agetaset reflection wo nt produce warning since reflection caused compiler encoded directly function implementation unchecked math clojure default mathematical function inc etc precisely equal java counterpart see java mathematical operation unchecked meaning silently produce incorrect value case overflow clojure function throw exception case checking overflow make code somewhat safer come price lower performance cpu nt check internally must done code spending cpu cycle however clojure way drop fastbutdangerous version mathematical operation function unchecked prefix eg uncheckedinc uncheckedmultiply compare behavior checked unchecked function user critquickbench execution time mean n user critquickbench uncheckedmultiply execution time mean n user javalangarithmeticexception integer overflow user uncheckedmultiply sure code wo nt dealing number big recover lost performance replacing mathematical operation unchecked variant however slightly convenient way binding dynamic var uncheckedmath true tell clojure use unchecked operation place checked one var set beginning file function inside use unchecked math turned single function definition note unlike clojure checked operation unchecked math work boxed value compiler encounter boxed value value mismatching type wo nt able use unchecked operation know case set uncheckedmath warnonboxed enable unchecked math print warning place unchecked operation substitution possible updated solution thus become set uncheckedmath true defn multmatrixaunchecked j j b let n alength j c makematrixa n dotimes n dotimes j n loop k sum k n recur inc k sum k b k j c j sum c set uncheckedmath false identical previous one except turning uncheckedmath var benchmark user let makematrixa b makematrixa critquickbench multmatrixaunchecked b execution time mean m execution time stddeviation âµs good managed speed matrix multiplication almost five time finally use cljjavadecompiler make sure generated code match set uncheckedmath true decompile changed defn multmatrixaunchecked j j b let n alength j c makematrixa n dotimes n dotimes j n loop k sum k n recur inc k sum k b k j c j sum c public static object invokestatic final object final object b final int n object length final object c matrix makematrixainvokestatic object n iseq arrayseqcreate new object long n long n j j j long k long sum k n final long k sum long rtaget object int int k long rtaget object b int k int j k rtaset long rtaget object c int int j sum return c almost would write java minus ugly name superfluous cast course conclusion clojure idiomatic approach necessarily fastest still reach lowlevel jvm tool performance requires array understandable predictable reason ignore even clojure api array somewhat awkward know possible accelerate number crunching unchecked mathematical operation today next time go fast footnote precise vector maximum size make demo le noisy disabled local clearing enabled direct linking default decompiler output look slightly different
376,Lobsters,clojure,Clojure programming,Command line scripting with ClojureScript,https://medium.com/@akiroz/command-line-scripting-with-clojurescript-5e5567367713,command line scripting clojurescript,anmonteiro lumo running script lumo update oct http clojureorgguidesdepsandcli integrating npm http randomuserme gotcha repl development final thought reference,thanks recent development clojurescript community writing commandline script clojure fun experience major kudos anmonteiro developing lumo core clojurescript teami think clojure great language writing singleuse script process data builtin manipulation function immutable structure worry reference deepcloningrunning script lumothe easiest way get started install lumo system run clojure file see npm section want install lumo globally create file called hellocljs following content println hello world run using npm g lumocljs package manager choice lumo hellocljshello world easier let look leverage nodejs apis write slightly practical program see require function act like j counterpart pull j module would following code const writefilesync require f const inputjson require randomusersjson also work module inside nodemodules folder installed using npm directory lumo update oct found possible use clojure cli tool clj manage set classpath clojureside dependency via depsedn http clojureorgguidesdepsandcli demo project simply replace lumo flag c src c clj spath able require dependency specified depsedn fileintegrating npmfor slightly larger project probably want proper packagejson dependency npm could also install lumo perproject basis want install globally wish publish package elsewhere sample project work like example fetch json http randomuserme using request library npm split code clojure file proper namespacing mytool packagejson src mytool corecljs usercljsclojure namespace system mirror directory structure file n mytoolcore must mytoolcorecljsgotcha hyphen delimited name namespace must converted snakecase filesystemcorecljs usercljs packagejson c flag tell lumo source file flag specifies namespace main function run tool using usual npm procedure npm install npm start fetch user output randomusersednrepl developmentof course clojure experience would complete without interactive replbased development add following line script section packagejson file repl lumo c src srcmytoolcorecljs n r flag initializes repl entry point corecljs n flag start socket repl port editor integration finally r flag start repl terminal could execute arbitrary code runtime without loosing state npm run repl cljsuser inn mytoolcore switch core namespacemytoolcore userparse name first john last smith id username nil password nil email nil fullname john smith final thoughtswhile still rough edge current tooling think time writing cli script clojure start become viable option nice alternative jslumo startup time blazing fast compared clojury thing running jvm breath fresh airi would definitely recommend trying enjoy clojurereferences
377,Lobsters,clojure,Clojure programming,Datahike: a durable database with an efficient datalog query engine,https://github.com/replikativ/datahike,datahike durable database efficient datalog query engine,datahike datalog datascript hitchhikertree konserve blog page usage example project relationship datomic datascript datomic replikativ datascript pick datahike datomic datascript clojurescript support roadmap migration backup change log roadmap commercial support lambdaforge license license,datahike datahike durable datalog database powered efficient datalog query engine project started port datascript hitchhikertree datascript test passing still working internals said consider datahike usable medium sized project since datascript mature deployed many application hitchhikertree implementation heavily tested generative testing building two project storage backends hitchhikertree konserve would like hear experience report happy join u may find article datahike company blog page presented datahike also meetups example usage add leiningen dependency provide small stable api jvm moment ondisk schema fixed yet provide migration guide reached stable ondisk schema take look changelog upgrading require datahikeapi use filesystem storage medium def cfg store backend file path tmpexample create database place per default configuration enforce strict schema keep historical data dcreatedatabase cfg def conn dconnect cfg first transaction schema using may also add within database creation adding initialtx configuration dtransact conn dbident name dbvaluetype dbtypestring dbcardinality dbcardinalityone dbident age dbvaluetype dbtypelong dbcardinality dbcardinalityone let add data wait transaction dtransact conn name alice age name bob age name charlie age age search data dq find e n e name n e age conn alice bob charlie add new entity data using hash map dtransact conn txdata dbid age want work query like http grishaevmeendatomicquery may use hashmap dq query find e n e name n e age args conn charlie bob alice query history data dq find e name alice e age dhistory conn might need release connection specific store like leveldb drelease conn clean database need ddeletedatabase cfg api namespace provides compatibility subset datomic functionality work dropin replacement jvm rest datahike ported coreasync coordinate io platformneutral manner refer doc information simple example look project example folder example project relationship datomic datascript datahike provides similar functionality datomic used dropin replacement subset goal datahike provide opensource reimplementation datomic part replikativ toolbox aimed build distributed data management solution spoken many backend engineer clojure developer tried stay away datomic proprietary nature think regard datahike make approach datomic easier viceversa people want use goodness datalog small scale application worry setting depending datomic difference datahike run locally one peer transactor might provided future also realized linearizing write mechanism eg apache kafka interested please contact u datahike provides database transparent value ie directly access index datastructures hitchhikertree leverage persistent nature replication internals guaranteed stay stable provide useful insight going optimized datomic rest interface java api datomic provides timeouts datomic fullfledged scalable database service built author clojure people lot experience need kind professional support definitely stick datomic datahike query engine codebase come datascript without work datascript datahike would possible difference datomic respect query engine documented pick datahike pick datahike app modest requirement towards typical durable database eg single machine million entity maximum similarly want opensource solution able study tinker codebase database datahike provides comparatively small well composed codebase tweak need also always able migrate datomic later easily datomic pick datomic already know need scalability later need network api database also plenty material datomic online already applies form another datahike might easier use datomic directly first learn datalog datascript pick datascript want fastest possible query performance huge amount data easily persist write operation separately use fast inmemory index datastructure datascript datahike also moment support clojurescript anymore although plan recover functionality clojurescript support clojurescript support planned work progress please see roadmap migration backup database exported flat file require datahikemigrate refer exportdb importdb exportdb conn tmpeavtdump must upgrading datahike version changed ondisk format happen long arriving version always communicated changelog bumped datahike version use setup newconn recreate correct schema importdb newconn tmpeavtdump reimport data new format datoms stored string linebased format easily check whether dump containing reasonable data also use string based editing db also use export backup upgrading pre migration code yet evaluate datahikemigrate namespace manually project exporting look change log recent update roadmap clojurespec api function conceptualize schema upgrade java api remote http interface docker image schema type byte tuples identity access management crdt type schema support fast redis backend support query planner optimizer transaction monitoring optionally use coreasync handle storage io clojurescript support browser node support gc eager deletion fragment use hitchhikertree synchronization replication run comprehensive query suite compare datascript datomic support anomaly error commercial support happy provide commercial support lambdaforge interested particular feature please let u know license copyright konrad kühne christian weilbach nikita prokopov licensed eclipse public license see license
378,Lobsters,clojure,Clojure programming,Fly over Amsterdam with ClojureScript,http://thegeez.net/2018/04/01/flight.html,fly amsterdam clojurescript,fly amsterdam clojurescript flight simulator partial deobfuscated version obfusciation,fly amsterdam apr control arrow key speed page page center stick enter restart enter shift switch flightcamera mode c time ago came across tiny potent program flight simulator code program written obfuscated c contest carl bank program fly tiny airplane wireframe world little experience programming curious figure program worked therefore made version clojurescript edition fly home town amsterdam instead pittsburgh original enjoy layout canal rather sky full skyscraper amsterdam nt really known skyline also row windmill obviously easy figure program work obfuscated code partial deobfuscated version helpful learning render world airplane camera viewpoint still nt figured flight mechanic plane work clojurescript version arcade style flying evidently rendering control handled shoving math single matrix also manage get work instead program bit math separate step mean program calculation necesarry make laptop fan spin sound like propellor tiny airplane feature finally original program skillfully fit obfuscated c clojurescript advanced compilation google closure compiler obfusciation provided free
379,Lobsters,clojure,Clojure programming,Generative testing in Clojure,https://www.youtube.com/watch?v=u0TkAw8QqrQ,generative testing clojure,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature generative testing clojure youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature generative testing clojure youtube
380,Lobsters,clojure,Clojure programming,Clojure Features: Or why you should stop worrying about features and just use Clojure,http://benzaporzan.me/blog/2018/3/29/clojure_features_or_why_you_should_stop_worrying_about_features_and_just_use_clojure/,clojure feature stop worrying feature use clojure,introduction blog post github gist golang channel gobyexamplecom coreasync coreasync coreasync coreasync mastering concurrent process coreasync clojure brave true rust pattern matching rust book corematch corematch corematch corematch javascript jsx javascript syntax extension reactjs babel sablono sablono hiccup sablono reactjs rum reactjs rum reactjs reagent prolog logic programming corelogic corelogic minikanren minikanren reasoned schemer corelogic learn prolog reasoned schemer programming lang lang feature clojurians slack benzap related resource,introductionback november blog post popped discussed series language feature one would love see present programming languagein response created github gist showed many equivalent feature clojurescriptinstead recapping gist feel like lot left absent ton feature never mentioned every flavour trend think recent development find taste clojure clojurescripti could talk clojure strength replicating language feature homoiconicity rather step clojure clojurescript right learn onegolang channelsthe go programming language concept channel quoting gobyexamplecom channel pipe connect concurrent goroutines send value channel one goroutine receive value another goroutine example within go package main import fmt func main message make chan string go func message ping msg message fmtprintln msg coreasyncsome clojure devs decided wanted something similar goroutines channel developed coreasynchere go example written coreasync require clojurecoreasync refer go chan def message chan go message ping println message coreasync also used clojurescript leaf dealing le asynchronous cruft frontend developmentfor better breakdown coreasync offer highly recommend reading chapter mastering concurrent process coreasync book clojure brave truerust pattern matchingrust make great use builtin pattern matching using match keyword quoting rust book match allows u compare value series pattern execute code based pattern match pattern made literal value variable name wildcards many thing example within rust enum coin penny nickel dime quarter fn valueincents coin coin match coin coin penny coin nickel coin dime coin quarter corematchcorematch developed resemble pattern matching within erlang since rust becoming popular fit better comparisonhere example corematch similar rust example require clojurecorematch refer match defn valueincents coin match coin penny nickel dime querter much broader overview done corematchjavascript jsxone upcoming feature within javascript javascript syntax extension feature introduced represent html element within rendered reactjs component function formatname user return userfirstname userlastname const user firstname harper lastname perez const element hello formatname user reactdomrender element documentgetelementbyid root requires use tool babel compile next generation javascript something understood web browserssablonosablono similar jsx convert data structure react dom element representation based markup language hiccupseveral clojurescript library make use sablono wrapping reactjs popular one rum excellent library taking advantage reactjs leveraging lot thing make clojurescript greathere jsx example represented using rum require rumcore rum defn formatname key firstname lastname str firstname lastname def user firstname harper lastname perez rumdefc element str hello formatname user rummount element getelementbyid jsdocument root another popular clojurescript library employ take hiccup syntax also wrap reactjs reagentprolog logic programmingit unfair say prolog feature logic programming since prolog logic programming language prolog language used heavily artificial intelligence computational linguisticshere example logic program written prolog motherchild trude sally fatherchild tom sally fatherchild tom erica fatherchild mike tom sibling x parentchild z x parentchild z parentchild x fatherchild x parentchild x motherchild x relevant logic query logic program sibling sally erica yes corelogiclogic engine exist many language clojure advantage incorporating engine way truly beautiful corelogic implementation based minikanren original implementation minikanren written scheme presented book reasoned schemer recommended readhere example prolog example corelogic require clojurecorelogic refer require clojurecorelogicpldb pldb immutable fact database db relation pldbdbrel motherchild mother child pldbdbrel fatherchild father child creating db fact def fact pldbdb pldbdbfact motherchild trude sally pldbdbfact fatherchild tom sally pldbdbfact fatherchild tom erica pldbdbfact fatherchild mike tom defn parentchild x conde motherchild x fatherchild x defn sibling x fresh z parentchild z x parentchild z rundb fact sibling sally erica true article talk us logic programming recommended approach learn in out dive learn prolog tutorial read follow example reasoned schemer programming lang lang feature far covered feature example showing similar result clojure script interesting feature think nt recreated clojure think difficult recreate clojure would love hear find clojurians slack benzaprelated resource
381,Lobsters,clojure,Clojure programming,"Parallelizing A ClojureScript Test Suite, Part 1: The Guts of cljs.test",https://cambium.consulting/articles/2018/3/22/parallelizing-a-clojurescript-test-suite-part-1-the-guts-of-cljstest,parallelizing clojurescript test suite part gut cljstest,rumbling horizon,open series describing add parallel execution existing cljs test suite aim allow reader start applicable project rather requiring already built infrastructure certain way first article explains general approach take tour cljstest internals installment cover implementation improvement alternative test infrastructure provides good touchstone development allowing u peace mind whether accidentally introducing bug imagine software becomes bigger complicated expected test suite test time become longer longer possible take existing clojurescript test suite make run parallel minimum fuss parallel minimum fuss two concept generally go together javascript world javascript singlethreaded design whatever rumbling horizon web worker let u natively access core allowed touch dom making unsuitable testing one form javascript parallelism likely familiar modern browser spawn new process tab thus executing test browser environment like chromeheadless already easy access parallel execution prove actually nodejs script open chromium open many tab cpu core give page computation take ten second complete four processor working full capacity taking ten second complete assigned task keep test separate understand cljstest work standard cljstest call look something like cljstestruntests projecttestsphotocomponent projecttestsapicalls projecttestsanimations two thing need understand first namespaces smallest unit guaranteed able test independently cljstest allows namespace include function called testnshook function present default behavior occurs test bound block eventually run testnshook bound executed test ignored allows specialized testing need something complicated series function call mean namespaces tested whole however second thing know runtests macro call function runtests expands expression creates block nothing veryslightlysoupedup vector function look cljstest source half oriented towards creating block different level hierarchy block running single test block running test namespace final product block expansion runtests creates basically block way mentioned block vector function quite accurate say vector test although test certainly present function block block executed course running block function return block block get executed well second high proportion function administrative safety reportingoriented even actual test wrapper function catch report error namespace correspond runnable block representing end result runtestsblock form runnamespacetests reportfinishingnamespacetests updatecounters failure error success etc repeat namespace reportfinishingtesting first two item generated another macro testnsblock ideally able simply take aggregated block runtestsblock give u function within block report result updating data structure hidden inaccessible u closure next best thing u call testnsblock manually handle reporting exactly bit tricky cover next article report cljstest intended extensible cljstestreport multimethod get called message various type responds differently one defmethod report default summary println nran test test containing pas fail error assertion println fail failure error error defmethod report default begintestns println ntesting name n many simply ignores ignore message type defmethod report default endtestns defmethod report default begintestvar defmethod report default endtestvar defmethod report default endruntests defmethod report default endtestallvars defmethod report default endtestvars passing keyword default calling runtests cause cljstest call method giving u control defmethod parallel endtestns println str finished testing n parallel runtests assoc emptyenv reporter parallel ready start taking test suite apart run different tab next installment series write small queue manage call test receive result report back terminal danny bell always wanted use force settled clojure instead worked multiple startup online video enterprise system management distance education insurance financial modeling credit bespoke monitoring
382,Lobsters,clojure,Clojure programming,A FORTH written in Clojure (2013),https://github.com/russolsen/cloforth,forth written clojure,cloforth,cloforth little forthlike language implemented clojure couple hundred line clojure cloforth actually pretty capable basic arithmetic statement define new procedure new word jaron forth interesting part language built around compileexecute cycle cloforth code even stuff type repl compiled vector function executed cloforth stack oriented postfix language mean number get pushed onto stack simply push onto stack first push onto stack typical operator pop couple number stack operate push result back leave stack cloforth command called word nl word print newline nl see blank line printed another word plain old dot yes much word jargon word justs print whatever top stack popping process thus nl see three followed newline printed handy word dup push copy whatever top stack back onto stack dup nl print three also leave top stack define word colon take name list word enclosed defines new word thus defines new word called add one whatever top stack
383,Lobsters,clojure,Clojure programming,State of Clojure Survey 2018 Analysis,https://danielcompton.net/2018/03/28/clojure-survey-2018,state clojure survey analysis,result last two error message one improving clojure error message grammar proofofconcept expound spec doc clojureorg programming repl higher order function cljdoc startup time marketingadoptionstaffing language language development process community clojureorg clojurists together library clojurists together target scalanative typing clojurescript setuptooling bret victor compliment conclusion gartner hype cycle,cognitect recently released result state clojure survey last two clojure survey reviewed freeform answer end survey tried summarise zeitgeist community feeling enjoy time year analysis comment lightly edited spelling clarity brevity error message error message one top complaint clojure since survey started year gotten worse introduction spec core macro one noticed either colin fleming gave talk improving clojure error message grammar previous survey hope spec would able use approach improve error message ben brinckerhoff recently shown proofofconcept give similar excellent error message expound primary wish would helpful error message eg la elm clojure clojurescript excited spec initially however find error message large noisy unhelpful want use put another way spec failure heart sink knowing next minute probably going frustrating painful spec supposed help error message made worse stuff like let fx fx emit insane error message look like clojure dev team moved improving command line tool please get error message fixed ton people get frustrated jump ship current state error clojure embarrassment community error message big show stopper trying get clojurescript adopted web reactnative development withing organization year always see pattern people get error project setupconfiguration get stuck forever idea error mean get fixed please please improve error reporting big problem new starter issue singled time time year poor error message lead difficult debugging code structure clojure actually made error message harder understand disaster hope wrong understand grand plan eventually please please please please enhance error message incredible error reporting would make language world would make biggest difference spec comment ranged loving spec disliking also request guidance apply spec realworld usecases integrate whole program omg spec amazing dramatically changing way program starting new project writing spec nearly code result able extend hammock time keyboard think domain model composable high level description implemented spec fact high level description become useful many different way generative testing value conformation data api parsing useful error message etc stunning thing behold excited see fruit idea permeate community presence spec list made want rate everything else important could show unimportant spec awesome dogmatism leaf u needing tool like spectools make working spec clunky need guidance development reliance spec cognitect community doc documentation form another perrenial complaint starting improve clojureorg continues add guide year programming repl higher order function among thing martin klepsch cljdoc hold lot promise improve state thirdparty documentation automatically generating publishing doc published jar take example rust communitydocumenation run big focus newcomer feature must perfectly documented shipped serve advanced user well offense rich hickey understand good documentation delegate completely people focus making even greater language strong point feel true weak point confusing error message enough friendly guidestutorials early beginner clojurist lack solid cljs example project key difficult know right way without blessed example please provide good set tutorial javascript interop translate higher j file clojurescript documentation really awful incomplete vague example semantic precision standard one normally see programming language documentation please improve docstrings worst programming language ever used really core documentation written beginner even intermediate miss book teach approach problem clojure mean primarily best practice design pattern language independent algorithm kind language reference line long mini example complex advanced example detailed explanation pro con certain solution appliednot applied startup time startup time continues issue people serverless computing becomes mainstream may end pushing people clojure clojurescript elsewhere startup time really really really really really long startup time never used issue service long running persistent lately however using docker job startup time becomes issue continued improvement total app startup time pay dividend going forward startup time regression clojure startup time longer clojure v humble machine marketingadoptionstaffing lot comment year category even year clojure still unknown seen extremely niche many people especially among business stakeholder hiring seems le issue year past still large contingent programmer looking work clojure remote position although hard say whether proportion higher language community recently hired programmer clojure experience writing lovely idiomatic clojure within month biggest difficulty overcoming initial fear parenthesis use clojure script would help marketing still largely unknown therefore hard sell company always uphill battle pushing clojure enterprise solution seems mostly occur lack marketing nontechnical decision maker care branding found folk really dislike lisp passionately one vendor indicated customer employee highly critical use clojure extension point unfortunately year organization ceasing use clojure production project many year using staffing onboarding external resource main reason hard convince manager work use clojure perception fringe language wish easier find remote non usonly remote clojureclojurescript job people major clojure experience important address enterprise software community need formal tool formal approach standard ides sonarqube eclipse jenkins etc believe javascript convert important source growth clojure moving forward find clojure joy use hiring clojure engineer excited capable learning clojure big advantage contrary common wisdom clojure position tend self select strong candidate language enterprise java tends lean heavily reflection pull component together eg spring annotationdriven junit jaxrs incorporate clojure environment lot componentspecific wrapper needed easy slip little java clojure codebase made reverse difficult would love see work improving clojuretest work wish le stateful macro magic flexibility fixturing test structure increasingly finding writing cljc clj cljs find really frustrating cljs seems second citizen clj would much better actually core clojure libraryapi actively supported clear variance would love see work towards using jvm methodhandle obviate need compiler direct linking seems could var cake eat relatively large codebase build target fat jarsadvance compilation j file like better aot support ability incrementally compile code base change affect target right aot compile pretty black box amenable building tooling language development process changed long time see changing future persistently highlighted many people big issue long term success clojureclojurescript important clojure core team project open welcoming like open source project view outside cognitect bubble language community healthy fear long run viability core team seems extra cautious move really slowly language core library roadmap releasing new version really opaque community cognitect continued good technical steward clojure poor steward relationship core team rest community many senior clojure programmer want nothing contributing clojure project owned core like site process designed frustrate prevent meaningful contribution cognitect need climb rung ivory tower engage community fact made human being trying job know direction core team taking clojure top issue startup time poor error message lack involvement community numerous improvement java interop jira ignored changed significantly past year never felt welcomed contribute seeing skummet large effort community largely ignored encouraging attention jira issuespatchescontributions would great painstakingly write patch jump jira hoop languishes dev team complete silence encouraging make feel outsider le part community community large people found community welcoming personally found one best thing working clojure however persistent undercurrent eliteness clojure programmer really put people language find clojure great language noticed increase market mind share quite opposite seems going nowhere possibly dying slow death hope wrong anyway given thanks alex et al still extremely happy clojure appreciate community worry bit possibility cljs losing user share dwindling worry year ago hope like hell happen try least bit toward preventing defn podcast bloody marvelous clojure community since around loved language like direction taking since community great friendly even controversial figure usually polite intelligent people heck even local troll mailing list occasionally helpful stay point thread stick conversation even blowing stuff clojureorg change infrequently like year concerned language enthusiastically supported soon fade away make nervous invest time money language seems vitality clojure conference lack diversity attendee speaker program hope merging conj west improve year people give clojure community role model serious woken thought would bruce hauman talk daughter clojure community cognitect awesome job making programming fun alex miller helpful effort community make promote diversity particularly term woman good although long way go clojure time bring joy fact message community language clear better smarter think better without thinking want tick unpleasant community cause lately however started noticing kind elitism especially people frequent speaker started working early language multiple colleague great developer former clojure developer whenever clojure come never fail mention alienating smarter attitude sometimes present community worried perceived shrinking clojure community gotten know female developer using clojure past year learned part community scaringdriving woman away includes unpleasant interaction slack working avoid certain people conj put much stock oversimplified gartner hype curve model seem like clojure passing call trough disillusionment please consider supporting clojurists together even launching initiative community help library guidance compose select library remains common common issue people section well improving state library documentation plethora web app client server side framework bad good many choose standard like rail also lot option also limited security option especially wrt use session state async handler serverless design frequently find frustrated looking library help x many choice subset one might want arena different subset sad often find interesting clojure clojurescript library abandoned updated long time need quality open source project machine learning data visualization library great see advance conj language front end tool built excuse someone build great visualization library data science defacto web framework pedestal dire need documentation schema deprecated spec ready new cli tool clojure competing leiningenboot complaint something common look like clojure core team actively hostile towards larger community communitybuilt toolslibraries open attack replacement core team always fear major destabilizing revolution everyday several widely used library started sustainability might become ed hopefully clojurists together help target previous year smattering people asking alternative platform target j jvm llvm go web assembly interest people posible use clojure go ecosystem would amazing hard watch go get much mindshare clojure jvm great would sure nice could build clojure application need jvm still long lowlevel oriented clojure dialect able produce small clj executables low overhead system programming capacity one dream webassembly support native support like scalanative typing request static typing previous year attribute mostly spec gaining wider adoption understanding clojure need make better case static typing necessary maintainable large multicontributor codebases repl dev process help still love clojure whole love address longterm maintenance difficulty stepping back codebase time challenging haskell purescript wish compiler could spec huge though really enjoying still take good amount discipline use well thankful used clojure one work project coworker recommended overall good experience lack type system made maintaining particular project difficult tool like plumatic schema typed clojure helped way end pulling weight regardless clojure service continues run today better ruby service replaced clojurescript clojurescript continues improve although getting tooling setup remains pain point integrating npm module recent improvement front though may issue month time heard lot good thing shadowcljs seems strong tool investigate clojurescript usage especially work lot npm module clojurescript serious push cljs really need get npm deps working right hard get right least uptodate tutorial available find spend time configuring development environment work well particularly bad react native cljsfigwheel still frustratingly complex get right lack asyncawait support cljs holding back j community settled promise asyncawait primary asynchronous pattern although coreasync useful certain thing shoehorning existing j code kludgy nothing made bigger improvement clojurescript workflow past couple year shadowcljs intelligent extern inference plus simple j clj tagging anything missed virtually trouble free usage javascript module npm way faster cljs compile flow due smart caching intermediate artifact selfhosted dependency handled well npm support clojurescript seems little bit tricky working time libs improved lot past probably biggest frustration trying use library j fullon clojurescript frontend app setuptooling tooling clojure side seems somewhat le issue year setting clojurescript project thing need remains issue many people clojure mature stable enough start focusing tooling many jvm tool clojure specific people coming clojure nonjvm language diagnosing problem barrier system production gc issue debugging exception attaching process runtime peek memory patch something pretty easy gdb linux much easily done clojure fast track cljs web dev junior devs one piece one place much essential knowledgetooling needed get started fit createreactapplike solution much content many source help need exhaustive gitbased deps seem like bad idea clj build tool otherwise cool bit unnecessary given prevalence quality leiningen along stability afforded maven centralclojars think pay attention interactive programming like bret victor proposes beyond repl making change library jar test hard checkout never worked others cljs hope alex miller recent work fix figwheel reagent test set experience developer positive barring bad time advanced closure optimization bug really happy clojurescript would hard convince friend start using clear standard way develop compliment always survey dominated positive comment favourite clojure ruined every language every time something another language always wish clojure easy get thing done clojure love language hope use forever clojure still language find turning frequently given choice feel natural toolkit simple yet powerful enough express pretty much anything whim using clojure professionally least year productive year career looking forward using spec fully looking forward seeing improvement come language next year desire leave thanks much language community way working best language ever highlevel programming done right thank rich conclusion went write year summary reread previous post remind year ago area improved struck many comment could lifted previous year survey result worrying trend community adoption section people perceive clojure shrinking perception always match reality may commenter noted clojure entering trough disillusionment phase gartner hype cycle however think lot lowhanging fruit around could significantly improve experience ecosystem around clojure without change core language
384,Lobsters,clojure,Clojure programming,A Resilient Git Dependency Algorithm,https://hypirion.com/musings/a-resilient-git-dependency-algorithm,resilient git dependency algorithm,publication vgo git support depsedn introduction vgo bindata went away minimal version selection minimal version selection bultitude fixedpoint dependency walking ignorance bliss conclusion,last couple month significant development around dependency management two language use day go clojure go publication vgo additional text around clojure announcement git support depsedn found curious development work top git repository also challenge assumption need version range instead assume newer version always backwards compatible ensure repeatable build pick highest version found transitively walking dependency dependency list also mean need lockfile one good benefit using git repository dependency fork library fix bug depend fork fix merged upstream instead waiting new release go back right away verify fix work stagingtest environment done several time go although gopath make bit painful fork library go straightforward specify revision location fork glidedep introduction vgo however met sentence author expected tag release semantic version vgo encourages using tagged version arbitrary commits clear toolsdepsalpha need properly handle commits version vgo may decide consider important assume mostly go community already utilises benefit forking dependency fixing bug immediately using git commits version cause interesting problem least one seems properly considered tool git version partially ordered totally ordered many version scheme consider use case described someone working module foo depends module x find bug want fix bug send pull request depend push change meanwhile module bar depends x well owner also submits pull request fix bug depends wanted depend foo bar situation toolsdepsalpha rightfully complains manageable situation order fix need merge commits branch depend newer commit instead wait branch merged thing fine right unfortunately necessarily true wanted merge commit one three option choose second issue git repository commits may disappear merge branch may traced back original commit fact git repository may even exist go leftpad incident bindata went away time experience oneoff issue either experienced issue library rebased another incident library transitively depended deleted tempting consider issue thing handle commit repository depend gone impossible get back dependency resolution neither two commits considered pick one yet many realistic situation recover actually pick newest version even repository commits lost explain improve toolsdepsalpha vgo first need understand work full set dependency algorithm vgo explained minimal version selection explain briefly resolution algorithm work also need go seems like long detour necessary solve problem explained minimal version selection msv us concept rough list final list rough list set dependency reachable project root set potential dependency use final list latest version dependency found rough list straightforward algorithm implement consider happy path clojure version def depname first def depvsn second defn roughlist visited dep contains visited dep visited reduce roughlist conj visited dep getdeps dep defn latestdependency deps apply maxkey depvsn deps defn finallist candidate candidate groupby depname vals map latestdependency set defn resolvedependencies topleveldeps let cands reduce roughlist topleveldeps finallist cands one us leinbootlike vector brevity first element dependency vector dependency nameidentifier second version using example vgo mv text example dependency set minimal version selection make static getdeps see get result presented text def getdeps b c b b c c c f e e e e e e e f g g f code user resolvedependencies c b e toolsdepsalpha us similar algorithm resolve dependency identical easy understand msv work output surprising many case consider example b dependency depend since expand regardless whether expanded pick happens toolsdepsalpha indirectly depend visited first even though original problem see make sense depend used anyone go lead longer resolution time clojure java application cause hassle uberjars filled unnecessary dependency possibly aotcompile code necessary also alter functionality program look uberjar content attempt find namespaces classpath example bultitude couple way fix straightforward solution walk dependency originally depended remove one unable reach remove unused dependency tempting optimise msv algorithm bit see older version dependency already expanded could try skip walking way fetch many unused dependency tempting unfortunately make algorithm nondeterministic consider example b apply optimisation run input may end two different set dependency depending order expand set dependency also show u different problem mv decided go back presumably bug depended make sense use fixedpoint dependency walking like would slightly confused dependency resolution algorithm present dependency version used dependency perhaps avoid issue different algorithm goal dependency make sense dependency used dependency use fact mavenaether nearestfirst algorithm using one nearestfirst algorithm ignores version number altogether mean pick first version dependency find often pick version lower library may depend upon newer version add new functionality library us project even build partly pedantic leiningen exists detects thing suggests exclusion fix use latest version would great could utilise idea toolsdepsalpha vgo still dependency attempt encode rule look something like toplevel dependency candidate dependency candidate used dependency depends latest version candidate dependency always used one cool thing set rule easy code fixedpoint algorithm implementation work like make two set dependency used candidate put toplevel dependency candidate set make new set newused taking latest version dependency candidate set set different used replace used newused start otherwise return used set dependency used b trace hand like oh javascript enabled j file could nt loaded worry though supposed interactive stepbystep visualisation imagine step enable javascript curious great algorithm initial implementation short require clojureset set defn resolvedependencies topleveldeps loop used let cands apply setunion topleveldeps map getdeps used newused finallist cands ifnot used newused recur newused used really know call algorithm fixedpoint dependency walking algorithm call fpdw short ignorance bliss far seems difference mv fpdw compare version crash incomparable resolvedependencies e e classcastexception clojurelangkeyword cast javalangnumber however modify dependency include one see harder get crash begin b fpdw algorithm expand two version dependency time great situation maintain library b depend branch library e branch squashed rebased another branch update e without worry previous version b cause conflict consumer however still possible get situation imagine dependency tree like c z mv toolsalphadeps initial version fpdw crash e e eventually compared however tweak fpdw care eventually resolve e version human may seem obvious know c picked c avoid comparing e e altogether fully expanding z first walk b unfortunately possible algorithm know dependency expand first however employ another technique ignore error long progress instead throwing error hit dependency resolve first check progress without case progress mean used set still changing used set changing ended situation progress forced throw error dependency already included used set sure version include without going much detail turn safe throw keep easier throw algorithm defn trylatestdependency deps try latestdependency deps catch exception e defn tryfinallist candidate candidate groupby depname vals map trylatestdependency set defn resolvedependencies topleveldeps loop used let cands apply setunion topleveldeps map getdeps used newused tryfinallist cands used newused recur newused progress resolve normally fails throw error finallist cands algorithm resolve dependency even git repositoriescommits lost commits compared conclusion toolsdepsalpha vgo introduces new interesting dependency resolution algorithm table neither seems consider two version comparable particularly important dependency algorithm want embrace git branching capability instead use fixedpoint algorithm avoid issue well seen post using git source dependency introduce new challenge dependency algorithm least opinion preferably fix possible really need solve problem think worth reflecting one question discussed since git repository truly immutable use source dependency
385,Lobsters,clojure,Clojure programming,Lumo: Brightening the Horizons for Clojurescript'ing,http://benzaporzan.me/blog/2018/3/26/lumo_brightening_the_horizons_for_clojurescripting/,lumo brightening horizon clojurescripting,introduction lumo lumo lumo let get started prerequisite lumo official website installing lumo lumo one liner scripting method lumo lumo beginning hellocljs scripty enough lumo commandline argument node standard library lumo file system api external node dependency hey happened lumo write execute anywhere tl dr clojurescripting clojurescript clojurescript clojurescript snake boot clojurians slack benzap related resource,introductionclojurescripting got lot easierlumo standalone clojurescript compiler developed antónio nuno monteiro built top nodejs ecosystem first version lumo introduced november unanimous acclaim tool allows clojurescript target backend development especially area clojure lacklusterin blog post using lumo specific use case write simple reuseable commandline script get fingerguns ready wildride let get started prerequisite lumo requires node development environment setup system set using o package manager obtain instruction get setup official websiteif using ubuntu install npm using aptget sudo aptget install npm everything went according plan npm installed npm version installing lumoi going grab copy lumo using npm npm install g lumocljs note installed binary called lumo instead lumocljsi going check make sure lumo installed lumo version looking goodone linerslumo support oneliners use e flag lumo e mathpi lumoversion lumo version lumo e lumoversion rematch nth println truly leverage scripting would remarkable write clojurescript commandline programsscripting methodsthere several way work lumo method suitable based o using lumo first example work o platformthe beginningsthe easiest way construct script create new file clojurescript extension cljs run directly lumo commandline tooli going create hellocljs file following content println hello world commandline lumo hellocljs hello world scripty enough order lumo used scripting need support shell scripting execution idiom fortunately alrightnote point could happily follow along window machine certain functionality available window user future functionality present upcoming window update appear incorporating nix scripting idiomsi going create new file called hello contains content previous script file except additional line included top file usrbinenv lumo println hello world familiar bash scripting extra line probably look like something seen next going make execute file chmod hello executing script file return result clojurescript file hello hello world cool still lot covercommandline argumentscommandline argument accessed var commandlineargs going modify hello script accept first commandline argument person saying hello usrbinenv lumo iflet name first commandlineargs println str hello name println hello world running hello hello world hello ben hello ben node standard librariessince lumo built executable targeting node ecosystem mean leverage everything node api offer interested available outofthebox documentation node api found going try writing script called listdir list current directory list file path provided commandline argument done using file system api usrbinenv lumo def f jsrequire f defn realpath path realpathsync f path defn listdir path readdirsync f path let p first commandlineargs dirlisting p realpath listdir doseq fd dirlisting println fd running script result le feature complete l chmod listdir listdir hello hellocljs listdir listdir mozilla extension firefox systemextensionsdev external node dependenciesbeing able use node api great would spectacular could also use communitymade librariesi always aching make use infamous leftpad library would great commandline tool called leftpad usrbinenv lumo def leftpad jsrequire leftpad def helpmsg leftpad text num padding defn leftpad helpmsg helpmsg text num leftpad text num text num padding leftpad text num padding text num padding helpmsg println apply leftpad commandlineargs attempt run script chmod leftpad leftpad find module leftpad functionmoduleresolvefilename functionmoduleload modulerequire require object anonymous modulecompile objectt objectlumoreplcachingnodeeval nosourcefile embedded e nosourcefile embedded hey happened similar node lumo attempt find dependency subfolder called nodemodules pull leftpad dependency npm install leftpad naturally upon calling command npm complain missing packagejson file cuss bell whistle developing program interested generated nodemodules subfolder containing precious leftpad payload listdir hello hellocljs leftpad listdir nodemodules listdir nodemodules leftpad see subfolder called nodemodules contains node dependency leftpad running leftpad commandline tool give u correct output leftpad leftpad text num padding leftpad bacon leftpad text num padding leftpad bacon bacon leftpad bacon bacon leftpad bacon yum leftpad text num padding write execute anywhereup point placing script subfolder home directory bin would love start using script ever need leftpad string list directory going go ahead include folder path environment variable use command anywhere printf export pathnpath path binn bashrc cd source bashrc listdir bin hello hellocljs leftpad listdir nodemodules leftpad hello hello tl drin blog post covered become clojurescripting cowboywriting first clojurescript script commandline argumentswriting clojurescript script standard node apiwriting clojurescript script external node dependenciesthere snake boot feel like missed something wish challenge duel find clojurians slack benzaprelated resource
386,Lobsters,clojure,Clojure programming,ClojureScript 1.10.238 release,https://clojurescript.org/news/2018-03-26-release,clojurescript release,change,expediency clojurescript returning vector nonsorted persistent map entry many use case ok map entry used vector opposite case pull clojurescript needed add artificial support persistent vector key val map entry function order align clojure clojurescript return dedicated map entry type case eliminates artifical vector support one example illustrating higher fidelity clojure allows clojurescript properly return nil empty applied map entry since map entry exactly two element impossible empty map entry certainly clean thing lookout code incorrectly treat vector map entry example key first val first perfectly valid key val incorrect result runtime exception finally using dedicated map entry type lead performance improvement code work map entry example advanced mode code simplebenchmark zipmap range range reduce fn k v even v k run faster javascriptcore faster whopping faster spidermonkey use dedicated key val function instead destructuring performance go faster spidermonkey complete list update clojurescript see change
387,Lobsters,clojure,Clojure programming,Excellent introduction to effectively using Clojure REPL,https://clojure.org/guides/repl/introduction,excellent introduction effectively using clojure repl,,clojure repl give programmer interactive development experience developing new functionality enables build program first performing small task manually computer gradually make automated desired functionality fully programmed debugging repl make execution program feel tangible enables programmer rapidly reproduce problem observe symptom closely improvise experiment rapidly narrow cause bug iterate towards fix many clojure programmer consider repl tight feedback loop provides compelling reason use clojure mean language feature clojure immutable data structure valuable clojure repl get leverage feature particular clojure designed interactive development mind clojure programmer typically use repl wide spectrum programming task another language would turn sort tool task include launching local development environment running automated test suite oneoff database query intervention debugging orchestrating remote machine getting familiar library apis many form exploration fundamentally reason programmer use repl task always want mix automation improvisation provided neither fully manual tool dashboard console etc fully automated one script keeping workflow focused one fullfeatured programming environment
388,Lobsters,clojure,Clojure programming,Helper code to mimic Clojure fns in Scala,http://www.elangocheran.com/blog/2018/03/helper-code-to-mimic-clojure-fns-in-scala/,helper code mimic clojure fns scala,code snippet implementing clojure fns functionality scala http http effective program year clojure rich hickey expectation show portion expected actual value need see focus dataoriented programming parting thought scala effective program year clojure language age like,finished year stint writing scala stopped missing writing clojure knowledge clojure continues heighten inform programmer sensibility one thing appreciated scala good medium might practically find allow writing clojure without writing clojure liked think scala canvas painted clojure idea scala make amenable many style programming least fp oop possible write code imagining clojure code would look like writing scala syntax interestingly faithfully people implicitly pun intended acknowledged code good scala code know scala programmer agree good scala code put val top function body us immutable collection exclusively prefers function object method make function small stateless composable later want simply release code wrote scala fill perceived gap scala seq abstraction perception based accustomed using clojure code snippet implementing clojure fns functionality scala note following code snippet apache licensed go ahead use wherever would like see fit first code snippet perhaps interesting two provide implementation scala clojure mergewith partitionby copyright google llc licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license seq util function object sequtil implement clojure mergewith param param param f tparam k tparam v return def mergewith k v map k v map k v f v v v map k v val val val allkeys def foldfn map k v k k k k k f k k else k k k else k k val init map k v val result allkeysfoldleft init foldfn result loosely based clojure mergewith allows return map type different input map type since scala statically typed probably really make sense use argument foldleft type reduction initial value different type need guaranteed param map merge create output map akin init val foldleft param input map param initw fn initialize output map value new key param f merge value new map value output map tparam k key type input output map tparam v key type input map tparam w key type output amp return def mergeleftwith k v w map k w map k v initw k w f w v w map k w val val val allkeys def foldfn map k w k k k k k f k k else k k k else val newval f initw k k k newval val init map k w val result allkeysfoldleft init foldfn result implement clojure partitionby fn scala seqs given seq fn segment entire seq order seqofseqs inner seq value produce output value f applied note implementation use lazy seqs lazy vals param seq param f set possible output value must implement tparam return def partitionby seq seq f seq seq seqisempty val emptyseq seq seqempty seq emptyseq else seqtailisempty val onlyelem seqhead val oneelemseq seq seq onlyelem seq oneelemseq else val firstelem seqhead var currfnval f firstelem var currseq seq seq var result seq seq seq e seq seq val fnval f e fnval currfnval currseq currseq e else currfnval fnval result result currseq currseq seq e result result currseq result code originated fact something simple partitionby exist scala really way cleanly finish task working without going implementing soon mergewith followed mergeleftwith created offer version start initial value analogy mergewith like reduce initial value argument mergeleftwith like using clojure reduce initial value argument aka scala foldleft second code snippet useful reducing boilerplate inevitably surround use option scala also added prettyprinting function used testing copyright google llc licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license object langutil given two operand concrete option type binary function return result operation option default way param param param op tparam u tparam v return def optiongenericop u v option u option u op u u v option v match case b option op b case none none none case none none case none none case none redundant provide logical equivalent option boolean param def optionand option boolean option boolean option boolean optiongenericop x boolean boolean x provide logical equivalent option boolean param param return def optionor option boolean option boolean option boolean optiongenericop x boolean boolean x prettyprinting util fns def prettyprintablemap k v map k v string val key mkeystoseq val kvlines keysmap k k k kvlinesmkstring n def prettyprintablesortablemap k v b map k v keysortby k b implicit ord mathordering b string val key mkeystoseqsortby keysortby val kvlines keysmap k k k kvlinesmkstring n def prettyprintablesortablemap k ordered k v map k v string val key mkeystoseqsorted val kvlines keysmap k k k kvlinesmkstring n topic whether ceremonial code required scala liberal use option partially present java due java careful embrace fp really see effective program year clojure rich hickey articulates well inherent tradeoff make choice programming language merely tool mean brilliantly articulates opinionperspective practical speaks sensibility found boilerplate code scala slowing would like amount perceived benefit got return much benefit term confidence code came various unit integration test speaking test underestimate utility prettyprinting function reason created convert clojure code wrote used expectation testing library library amazing especially logic requires data structure library radically different fluent testing library benefit lie real benefit occurs spend time using test fail necessarily look back test code rather look test output gather clue failed expectation following error output reprint test code causing failure provided value plugged code necessary instead printing actual value equal expected value e neatly print using line break horizontal spacing value line tell many time seen test error output reproduces default java object printing large detailed object side side without even line breaking importantly awesomely show portion expected actual value need see terminal color get different color reprinting original test code expected value actual value possibly think scala data structure diff ing library share clojure proud focus dataoriented programming best could recreate expectation scala create helper test function one comparing set one comparing map one comparing seqs etc differing value would print separate line would line could easily see diverge seqs testing fns would additionally iterate seqs print index last congruent first divergent element seqs ultimately le time spend sifting error message faster unitintegration test faster get back interesting productive work intended parting thought scala found strange stepped previous role used scala heavily basically started writing scala code clojure really punished created couple semistateful oopy class first scala program make look obvious got critiqued made code confusing decided write clojure code scala syntax result highlevel code used scala object class lieu clojure namespaces wrote function statelessly vals blocklocal function definition occurring code function used scala case class represent clojure heterogenous map clojure record avoided typical oop plain java class used java interface substitute clojure protocol combined helper fnscode main code test code felt pretty comfortable scala arguably may quicker pace getting code written many scala programmer around inevitably got caught compiler error type representation riddle felt trying scala right way whatever value right way imbibed hey least better java popular selling point heard scala year agree nothing wish say topic rich say much insightfully talk effective program year clojure know future hold programming language still optimistic declaring clojure language age like like loading related
389,Lobsters,clojure,Clojure programming,State of Clojure 2018 Results,http://blog.cognitect.com/blog/2017/1/31/clojure-2018-results,state clojure result,rapid uptake clojure clojurists together funding clj interest surging javascript programmer clojure clojurescript used many domain industry interest hiring stay strong check data,welcome annual state clojure survey result thanks much taking time check provide feedback fortunate data question going way back giving u long view data trendingâ year respondent last year rapid uptake clojure release clojure december expected see shift version usage developer already using still using clojure well small number developer still using version older also keep eye jdk usage uptake java released last year bit slower adopting java far developer using java developer using java le still using java editoride world saw consolidation year emacs intellijcursive making gain editor saw decrease although still lot interesting innovation happening around atom v code included saw lot mention comment total respondent definitely add next year clojurescript world figwheel continues dominate critical part clojurescript developer repl workflow clojurists together new community effort support open source project community funding work figwheel among project lumo new repl option year made strong showing cljs target environment saw increase targeting node targeting lambda thing watch build tooling world entry cljâ tool driving lot reevaluation change right many thing flux area sure evolve significantly interesting see one important omission choice year shadowcljs lot mention comment clearly important tool many build deploy sure add next year interest surging javascript programmer look language community people coming answer remarkably stable year significant movement year javascript vaulted python ruby clearly people finding clojurescript strong resonance react interesting viable alternative javascript clojurists hang saw significant increase use reddit slack decrease use clojure mailing list irc attendance inperson online conference one new choice added year clojureverse discourse server seems useful midpoint slack high volume live chat mailing list low volume asynchronous discussion new option yet respondent reported using clojure clojurescript used many domain industry one thing always watching trend people using clojure daytoday work year continued see respondent using clojure work compare first survey back le web development always dominant domain web dev day fully clojure devs involved kind web development surprising given many clojure devs using clojure clojurescript together looking industry using clojure added choice year based prominent result last year category entertainment energyutility automotivemanufacturing also saw noticeable increase financial service perhaps due new choice saw small decrease largest generic category enterprise software consumer softwareâ interest hiring stay strong several question clojure clojurescript change prioritized improvement result largely similar prior year although question format changed little making hard directly compare every detail top result clearly error message though spec started u road still work progress continue year many people using expound library taking spec error output making data easier read hiring staffing always interesting one watch increased year often see seemingly contradictory dual complaint company need people developer hard time finding position large degree either mismatch geographic distribution job people andor mismatch need skill level encouraging see many large team growing hiring late though need doc tutorial also one gone year seems year wealth resource new clojure developer every format also sometimes difficult people find right resource experience level need many good discussion lately lot active work community general many new tool learning resource company etc late hard keep going great year clojure check data like dig full result find complete set data former year note survey every month last survey occurred late rather thanks part community
390,Lobsters,clojure,Clojure programming,Lightning-Fast Testing For ClojureScript React Components,https://cambium.consulting/articles/2018/3/13/lightning-fast-testing-for-clojurescript-react-components,lightningfast testing clojurescript react component,pay jsdom take screenshots bridge far easy stuff browserlesstestsrccljsbrowserlesstestcomponentscljs jsdom working backwards brew install nodenpm aptget install nodenpm jsdom packagejson jsdom jsdom good doc jsdom almost leiningen projectclj test projectclj test projectclj treatment cljsbuild projectclj testcljs browserlesstestcomponentstestrunner targetcljsbuilddomtesttestjs loadandappend outputdir outputdir outputdir must different build optimization simple jsdom target nodejs testjs jsdom test testcljsbrowserlesstestcomponentstestrunnercljs indexhtml projectclj outputto jsdomtest file automation cljsbuild notifycommand projectclj lein cljsbuild auto jsdomtest conclusion eval,danny bell riddle unit test react component browser ok choice probably easy already writing browsertargeted code unit test going run thousand time lose lot cycle moving pixel around well alright could run nodejs react testrenderer utility letting render selfcontained component tree independent dom run problem clojurescript wrapper around react watch atom set watch mounted onto dom testrenderer convenient dom nowhere mount test component want pay dom need one enter jsdom nodejs implementation dom jsdom differs phantom slimer render least layout sense react sense update fine take screenshots phantom sleeker bridge far begin let consider contemplating minute ago humble clojurescript developer churning interaction reagent api call talking switching normal browser mindset nodejs pulling nodejs library making build test run jsdom injecting test jsdom sandbox would nice could get everything running automatically one task stress understanding cljs build process javascript ecosystem large fantastic knowing tool well save u time future let u spot opportunity would otherwise miss easy stuff first order business setting mock project lein new reagent browserlesstest next want make basic component test make new file browserlesstestsrccljsbrowserlesstestcomponentscljs great practically todo app testing let take breather survey building bridge source test build system nodejs jsdom work first clojure developer like repls nodejs working backwards already brew install nodenpm aptget install nodenpm linux install jsdom create packagejson main directory could included jsdom version number dependency settle le best grab latest version library option save downloaded version metadata packagejson knew nothing jsdom right place fool around fortunately good doc j code lying around try jsdom javascript snippet save nodeunittestsjs run arbitrary almost javascript code little headless nonrendering browser trouble code run yet something test close joining two end chain next step coderunner codebuilder build tool leiningen projectclj going want separate test build projectclj otherwise test production build would also nice test build compiled one file make easy inject relevant portion projectclj good place mention james leonis excellent treatment cljsbuild projectclj takeaway project order key compiler look directory build also testcljs output file begin execution browserlesstestcomponentstestrunner namespace need write output file placed targetcljsbuilddomtesttestjs relative project directory path place loadandappend function nodejs script outputdir set destination output outputdir directory compiler us extra file gotcha must different build optimization set simple passed closure compiler combine compiled j one file important way running code jsdom dom direct text injection literally setting content script tag bunch dependencyordered call server different j much harder marshal notice anything missing target nodejs entry even though testjs running nodejs jsdom sandbox emulate browser test target browser test position write test compiled injected run promised leiningen start something testcljsbrowserlesstestcomponentstestrunnercljs let open normal test file interest space say much actual test instead let try something interesting create dummy html file project root directory indexhtml go projectclj change outputto value jsdomtest build restart running lein autocompile adjust new entry navigate appropriate file url see test rendered front eye natural workflow suggests develop test aid browser run headlessly enhance tool like figwheel devcards beyond scope article automation remains one piece get test running every compile cljsbuild nifty build option called notifycommand given shell command vector string shown cljsbuild call every compile successful projectclj replace last line nodeunittestsjs restart lein cljsbuild auto jsdomtest race conclusion build tool extremely powerful often describe power lisp friend automation squared reference power macro applies strongly end spectrum one ruled tool environment language semantics basically used eval passing compiled j nodejs jsdom sandbox macro oftcited one clojure big clojure strong grounding access java javascript ecosystem strength often dismissed danny bell always wanted use force settled clojure instead worked multiple startup online video enterprise system management distance education insurance financial modeling credit bespoke monitoring
391,Lobsters,clojure,Clojure programming,Kapok is a Lisp dialect for the Erlang VM with Clojure inspired syntax,https://github.com/kapok-lang/kapok,kapok lisp dialect erlang vm clojure inspired syntax,kapok documentation,kapok kapok dynamic functional generalpurpose programming language dialect lisp share lisp codeasdata philosophy powerful macro system kapok leverage erlang vm known running lowlatency scalable faulttolerant system kapok designed goal syntax like clojure keep max compatible erlang ecosystem compatible elixir leverage protocol lazy interface rich set useful library term unicode string file etc todo shipped powerful tool eg project management tool editor integration etc documentation
392,Lobsters,clojure,Clojure programming,Reducers and Transducers Introductory,https://functional.works-hub.com/learn/reducers-and-transducers-introductory-d0cff,reducer transducer introductory,clojure brave true book reducer reducer clojureorg eager computation intermediate collection instruction use case use case folding transducer clojureorg transducer javascript edit posted rich hickey transducer,going introduction reducer transducer clojure abundance resource matter take clojure brave true book reducer example end hope wonder explore book write let get started reducersas mentioned clojureorg reducer combination reducible collection reducing function reducible collection like vector map one broken assembled transformed notice reducer combination collection function collection moreover reducer return transformed collection u work illustrate let use reducer provided u clojurecorereducers see difference nth map inc using sequence implementation map builtin default clojure map lazily evaluated mean call nth grab value second index value second index actually computed map return list collection u work code evaluates require clojurecorereducers r nth rmap inc unsupportedoperationexception nth supported type reducer folder reifybut use reducer implementation return type collection thus get error call nth trick explained later article right want really illustrate difference reducer sequence reducer meant perform substantially better case seq counterpart due reducer performing eager computation fact intermediate collection produced note eager computation member collection computed actually referencedno intermediate collection reducer make use parameterized collection collection passed function scope instead creating efficient directly opposite lazy sequence evaluate member need whilst sound great know need entire collection realised laziness produce overhead see look implementation map user doc map clojurecoremap f f coll f f f colls function get applied item want evaluate get memory intensive case better stick reducer want entire collection work sequence also produce intermediate collection hence nth worked last example reducer execution operation deferred final reduction performed moreover mean need intermediate variablescollections reduction already computed final reduction performed finished transforming collection let look example actually work collection use reducer rmap inc remember reducer create collection must provide provide vector reducer store result without reducer would return called reducible instruction producing collection moreover function linked onto one reducer without confusion instruction handed make reducer composable take one example rmap inc rmap rfilter even reducer completely independent collection transformation make collection enables elegant composabilityto conclude section reducer table highlighting difference using reducer sequence different scenario know article meant demystify reducer transducer actually think worth including sequence something familiar help concept reducer sequence performs operation reducible collection given reducing function performs operation sequence collection given sequencing function evaluate member collection operation computed eager evaluation evaluates member operation conducted member lazy evaluation produce collection computation collection must specified creates intermediate collection store transformed data use case use case need entire collection knownwhen reference one group element collection time performance matter learn folding afford overhead searching large amount collection needed transducerslet start walkthrough transducer another definition clojureorg transducer sometimes referred xform xf transformation one reducing function another another formal definition reducing function function take accumulated result new input return new accumulated result transducer level reducer getting used know transforming reducing function benefit using transducer actually polymorphic transform reducing function applied multiple scenario number asynchronous channel likethis reason included language found use common map filter reduce stream observables primitive would need different implementation modular approach needed transforming collection great thing transducer concerned input receives result outputsa common example understand transducer used rewriting implementation map term reduce see change flexibility get new implementation defn map f coll reduce fn x conj x f would call map inc obtain homemade implementation map function pas reduce fn x conj x f f function would like apply every element write function produce function u passing function would like map defn mappingwithconj f fn x conj x f still see presence conj function assuming want add element collection get even flexibility factoring defn mapping f fn step fn x step x f use like def mapping inc reduce conj would want thing way answer give u lot flexibility build thing instance instead building collection reduce map inc give u sum mapped collection add functionality function composition reduce comp filter odd map inc conj first remove even element collection map transduce function essentially line take care another extra detail would actually write transduce comp filter odd map inc conj conclusion hope made concept reducer transducer little easier understand information reducer transducer clojure would recommend visit article javascript would still recommend giving readtransducers javascriptedit forgot credit author example used implementing modular reduce answer originally posted p wondering burrito blog post think best explained presentation given rich hickey transducer watch talk rich hickey transducer
393,Lobsters,clojure,Clojure programming,Executable Formal Specifications with Clojure (2015),http://tampub.uta.fi/bitstream/handle/10024/97597/GRADU-1435576377.pdf;sequence=1,executable formal specification clojure,,äüöß obj stream uxvt endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream z k f ӭ p j k j yp rɨ endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream j ӳd n sh p r dϲ hhuh qd kh f ug v l endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream ġj q tp k w u f p q r c j c b endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream gi l e v r endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream h z hn x j ig hu krc endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream x r p ui h r yi p k xχ r endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream r k h h endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream ޟ c h g k rɢ p ɭ f z w uƣ l j l b w hr endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream j ܭ ԅ ħ f h e k g w wɮ ӱ j w e g endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream x f kj te f vվ bv l f ˏl q f g ĺ q endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream փ ff nu x b j x քu endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream r g莐rt ĝ slq noy ddb ҏw yx w j u
394,Lobsters,clojure,Clojure programming,Physics Simulation in Clojure,https://040code.github.io//2018/03/04/verlet-integration/,physic simulation clojure,introduction paper thomas jakobsen cider one bind quil library world state physic simulation point destructuring world constraint stick constraint drawing conclusion cloc borkdude twittercommmz link,introduction post going dive physic simulation clojure idea post mostly inspired paper thomas jakobsen motivation working toy project experimenting mutable domain language immutability core fun making lot happen screen without writing lot code coding using emacs cider clojure interactive development environment rock source code found result one main bind code us quil library render point line main function sketch macro quil library used bind physic domain ui defn main quilsketch host main title verlet integration size width height setup setup update updatestate draw draw keypressed keypressed mousepressed mousepressed mousedragged mousedragged mousereleased mousereleased feature exitonclose middleware quilmwfunmode sketch macro basically asks developer configure handler function call certain event occur instance key pressed call keypressed mouse pressed call mousepressed state program updated call updatestate time draw new state call draw etc configured quil run functional mode quilmwfunmode quil us return value setup function initial state pass state handler function update additionally pass keyboard mouse event argument keyboard mouse handler function handler function signature therefore look like defn draw state defn updatestate state defn keypressed state event defn mousepressed state event world state snapshot world state look like keypressed give hint defn keypressed state event let rawkey rawkey event newstate cond b rawkey loadworld loadafile blocksedn c rawkey loadworld loadafile clothedn p rawkey loadworld loadafile pointsedn rawkey loadworld loadafile sticksedn rawkey showinfomessage q rawkey quilexit else state newstate pressing key certain world loaded let look stick world point x oldx oldy x oldx oldy x oldx oldy x oldx oldy x oldx oldy pinned true x oldx oldy stick link length link length link length nothing special map containing point stick dive particular point stick soon physic simulation physic simulation deal point stick connecting point point thing seem direction speed influenced gravity lose speed friction bouncing world border stick try keep point apart according configured stick length simulation loop boil update point apply stick constraint apply world constraint code defn updatestate state state updatepoints applystickconstraints applyworldconstraints code read like state first updatepoints applystickconstraints finally applyworldconstrains point point main abstraction code decided use record name defrecord point x oldx oldy pinned point store current coordinate coordinate previous world state top pinned property indicates point pinned space result stay coordinate pinned point unpinned clicking mouse pointer updatepoint function calculates velocity point add gravity mix defn updatepoint key x oldx oldy pinned point pinned point let vx velocity x oldx vy velocity oldy point x vx vy gravity x pinned reading superficially code say point pinned return point otherwise calculate velocity based current previous x coordinate add gravity direction return newly calculated point function us destructuring name argument incoming point destructuring bind value data structure without explicitly querying data structure instead getting every value point binding new let x x point point oldx oldx point oldy oldy point pinned pinned point effectively tell function receive map key x oldx oldy pinned function variable available name key x oldx oldy pinned point code repository additional type hint wanted simulation run smooth laptop wanted learn bit type hinting compiler optimization regard point couple line code point already moving reacting gravity simulation world constraint time point meet harsh reality life wall harder point therefore point bounce defn hitfloor height defn hitceiling defn hitleftwall x x defn hitrightwall x x width defn applyworldconstraint key x oldx oldy pinned point let vxb velocity x oldx bounce vyb velocity oldy bounce cond hitceiling let miry oldy point oldx vxb miry vyb oldx miry pinned hitfloor let miry height height oldy point oldx vxb miry vyb oldx miry pinned hitleftwall x let mirx oldx point mirx vxb oldy vyb mirx oldy pinned hitrightwall x let mirx width width oldx point mirx vxb oldy vyb mirx oldy pinned else point explain happens picture might help imagine point moved b last point update mean point record persisted x coordinate b oldx oldy coordinate wall line crossed imaginary line ab point history rewritten essence line ab mirrored wall hit giving rise another imaginary line cd c mirror mirror b miry mirrory mirx mirrorx variable code contain c coordinate mirroring coordinate simulation take little velocity loss account bouncing wall therefore calculated using x velocity vx vy multiplied bounce factor leading vxb vyb variable code world state drawn point fly exactly right direction additionally history rewrite subsequent point update keep moving point right direction picture show situation hitting ceiling hitting floor wall work similar math code need simulate point moving bounded space let add stick simulation stick constraint wall restricting point free movement stick also constrain stick connects point configured length goal stick constraint move point end stick configured length stick instead trying calculate solution satisfies stick constraint code simply look one stick time solves constraint problem repeatedly solving stick constraint isolation defn applystickconstraint length length stick x oldx oldy pinned x oldx oldy pinned let key dx dy distance distancemap difference length distance fraction difference distance offsetx dx fraction offsety dy fraction point offsetx offsety point offsetx offsety applystickconstraint take stick point argument argument heavily destructured understand happens precisely next picture might helpful let two point stick already updated updatepoint function new x coordinate respectively mean dx dy distance since stick configured length want adjusted amount located point located point exactly applystickconstraint achieves difference configured length stick distance fraction distance need added extending distance exactly distance time fraction direction solve stick constraint done using offsetx using offsety conceptually scaled helper triangle used move identical scaled helper triangle used move scale triangle determined fraction case triangle depicted red stick world updated new world frame drawn well possible neatly placed moved different coordinate another stick constraint complete update sometimes result wiggly behavior although case simulation perceived behave naturally drawing finally point stick drawn screen defn draw state quilbackground infomessage state quiltext infomessage doseq point vals point state quilellipse x point point doseq stick stick state let point point state first link stick point last link stick point quilline x x start clearing screen infomessage entry state draw infomessage otherwise draw point state quilellipse draw stick quilline folk conclusion always pleasure working clojure turn easy work mutable domain mostly pure function also thanks excellent quil library current version cloc tell coreclj line long count function documentation code therefore ran new cloc command without doc string count line clojure approximately half dedicated ui interaction half physic simulation bad glad decided bite bullet learn emacs cider use emacs clojure script development addition use emacs text editing day including writing planning like thank michiel borkent aka borkdude reviewing earlier version code giving helpful feedback fault notsoidiomatic clojure code remaining please share comment suggestion thought blog post twittercommmz thanks reading happy coding link
396,Lobsters,clojure,Clojure programming,Interactive GPU Programming - Part 3 - CUDA Context Shenanigans,https://dragan.rocks/articles/18/Interactive-GPU-Programming-3-CUDA-Context,interactive gpu programming part cuda context shenanigan,part hello cuda currentcontext currentcontext pushcontext popcontext currentcontext,walkthrough part hello cuda might puzzled constant calling currentcontext function nt enough even cleaner functional would nt better supply context argument contextaware function yes would much better especially complex system however early design decision popular technology stay legacy choice designer cuda tried design api appeal people used cpu program rarely need argument context device etc seen hello cuda article function call programmer like launch fun params launch ctx device stream somethingelse fun params c program heavily multithreaded clojure program managing extra argument everywhere immediately obvious annoyance however dynamic threading setup side effect require constant nannying functional programmer mistake seems obvious additional parameter two much easier deal especially clojure macro constantly worry switching current context right one actual thread c world still obvious opencl take right approach supplying context argument function need lead api bit verbose cuda one main source complaint related opencl guess got point stop complaining cuda sinful way get handle context cuda context handling envisioned program one thread handling one context function need executed context receive information argument function receives current context threadlocal storage cuda driver maintains thread lead following situation one thread manages one context case example program cuda seems easy simple one thread manages many context programmer need keep reference keep switching current context whenever want switch gpu execute trailing code many thread manage one context programmer need set current context thread cuda function call many thread manage many context bunch reference bunch setting current context call previous case catch code control thread executing example coreasync calling currentcontext replaces context may previously current may enough case beyond simple program cuda driver maintains context stack thread function pushcontext popcontext used put context top stack making current work context done remove context top reverting current context one top previously currentcontext completely destructive pushpop offer bit gracious mechanism however mechanism still relies side effect great care taken working multithreaded setup use threadpooled executor small demonstration def newctx context device currentcontext ctx ctx currentcontext true pushcontext newctx newctx currentcontext true popcontext ctx currentcontext true cuda function work inside context always work top context current context stack thread
397,Lobsters,clojure,Clojure programming,CNC milling survey contours,https://keminglabs.com/blog/cnc-milling-land-contours/,cnc milling survey contour,artistial cell phone frustrated attempt computational geometry autocad dxf kabejka page spec enlive building model inventor cam mod machine buying wood milling thanks zach tellman ryan lucas code appendix vba script extrude cube c cli program make model clojure scratchpad geometry calculation,february kevin j lynagh recently pleasure commissioning acre approx rural land survey survey delivered digitally contour line rad tronlike stamp george washington given small cnc mill purchased got carried away building artistial cell phone last year obvious next step build coffee table scale model article overview project bet everyone easy frustrated attempt w offtheshelf tool wait haz programmer computational geometry clojure cool visual basic macro scripting cad software wish table saw buying wood cnc milling frustrated attempt survey delivered dxf file contour line contour open line since land peak valley browser support video tagto actually create physical model open contour line need converted closed model import autodesk inventor cad software use modeling cnc milling first tried simply importing contour line inventor created sketch object tried loft tool connect contour next result looked wonky worse find way loft line together contour line containing vertex way clicking line segment manually next tried creating solid sketchup promising menu item draw sandbox contour creates tin triangulated irregular network surface tried using surface cut solid cube two bottom would desired land model figure either sketchup inventor via dxf export sketchup inventor also got slow cranky manipulating tin surface bode well willingness use surface boolean operation started assumed would easy project surely turning contour data solid common task great writeup nope least could find suspect contour model made intern xacto knife glue stick chipboard unfortunately intern however remembered program computer drudge work computational geometry overall strategy program inventor whan intern would build model bottom using thin slice algorithm level extend contour line boundary containing contour line create appropriate polygon contour line boundary extrude polygon next contour level case merge resulting solid level could start algorithm needed get contour data programming language choice clojure delivered data format autocad dxf date back show acdbentity vertex tried using java library kabejka get working skimming page spec bring write dxf parser either instead used sketchup export kmz file zip file containing dae file kind xml scrolling xml found node looked like contour line want geometry id mesh source id floatarray id count floatarray techniquecommon accessor count source stride param name x type float param name type float param name z type float accessor techniquecommon source vertex id input semantic position source vertex line count material input offset semantic vertex source p p line mesh geometry used christophe grand enlive aliased e extract node convert map one map per curve containing z height ordered list curve point def contour f eselect ehtmlresource javaiofile contoursdae ignore two closed contour dataset floatarray ebut ebut let point content f first strsplit map floatparsefloat partition z point first last point mapv fn x x point remove contour shorter ft remove fn c getlength line point c sortby z leaving plenty detail check full code listing end article gnarly detail data familiar turf ie clojure started implement algorithm developing step used two technique make sure mess anything first continually exported piece workinprogress geometry dxf could view sketchup allowed visually check everything working line flying infinity intersecting c second checked invariant property contour example since tract land vertical cliff overhang contour never intersect let line map line point contour l line l line l l intersects l l l l remove nil first step algorithm extend end contour closest side bounding box step relatively straightforward assume first last point line endpoint find corresponding point closest boundary edge defn boundarypoint point let x point case closestedge point north x ymax bb south x ymin bb east xmax bb west xmin bb second step choosing polygon keep ie one land one air difficult particular tricky multiple contour level happens example separate hill opposite side property algorithm wrote looked polygon level kept polygon fully supported polygon directly beneath bottom chose largest polygon algorithm clojure levelpolygons set possible polygon derived contour line boundary level defn closecontours contour groupby z contour sort reduce fn levelsbelow level let polygon empty levelsbelow bottom pick largest possible polygon hope work levelpolygons level sortby getarea last vector otherwise choose polygon fully supported polygon directly em let directlyunderneath polygon last levelsbelow levelpolygons level filter fn p cover p directlyunderneath conj levelsbelow z first level polygon polygon exporting result back sketchup visual inspection confirmed approach worked browser support video tagnote visually obvious missing level confirmed analyzing raw contour data contour map z distinct sort partition map partial apply distinct harsh word next time see surveyor regardless closed polygon need cut virtual chipboard virtual stickglued together make solid model building model inventor cam clojure program given set polygon need get inventor modeling software somehow definitely going draw manually one sketch time luckily inventor inviting vba editor button pop lil visual basic ide quality time builtin inventor api doc mod machine blog scripting inventor managed create new sketch extrude cube needed export closed contour kind csv figure read via visual basic loop point create extrude sketch kidding used clojure string concatenate together line visual basic program copypasted inventor disaster struck apparently visual basic first released procedure size limit determined learn visual basic installed visual studio used clojure generate line c program talked inventor com program ran much slowly visual basic program discovered disabiling inventor ui script via appscreenupdating false gave speedup end worked great buying wood milling shopbot desktop cnc mill working area since land roughly square decided first model scale contour step approx mm high using xacto knife laser cutter make model need pick thick chipboard cut align glue contour however since using cnc machine make controlleddepth cut unlike laser cutter cut completely material easier start solid remove part part final model bamboo walnut mill well keep cost initial model picked cheap wood lowe laminated pine board cost sheet helpfully cut three square per sheet reduce milling time manual roughing pas removing excess stock part model knew would air since table saw oldfashioned way glued sheet together make final stock generated corresponding toolpath playing along home onsurd two flute straight v bit rpm cut depth material engagement inchmin feedrate machining time minute final version turned bit fuzzy minute sanding worth fake plastic tree fixed right also made adorable coffee mug sized one bamboo scrap thanks thanks zach tellman taking time chat computational geometry thanks ryan lucas providing nice garage home cnc mill code appendix wrote code explore barely solve specific problem single dataset fails handle edge case documented contains inappropriate comment several section written whiskey deep use risk vba script extrude cube public sub foo dim doc partdocument set doc thisapplicationactivedocument dim cdef partcomponentdefinition set cdef doccomponentdefinition dim tg transientgeometry set tg thisapplicationtransientgeometry dim planarsketch dim oprofile profile dim oextrudedef extrudedefinition dim extrudefeature set cdefsketchesadd cdefworkplanesaddbyplaneandoffset cdefworkplanes true call ssketchlinesaddbytwopoints call ssketchlinesaddbytwopoints ssketchlines endsketchpoint call ssketchlinesaddbytwopoints ssketchlines endsketchpoint call ssketchlinesaddbytwopoints ssketchlines endsketchpoint ssketchlines startsketchpoint set oprofile sprofilesaddforsolid set oextrudedef cdeffeaturesextrudefeaturescreateextrudedefinition oprofile kjoinoperation call oextrudedefsetdistanceextent kpositiveextentdirection set cdeffeaturesextrudefeaturesadd oextrudedef end sub c cli program make model using system using systemcollectionsgeneric using systemlinq using systemtext using systemthreadingtasks using inventor using systemdiagnostics namespace class program http nt seem help much stathread static void main string args inventorapplication app inventorapplication systemruntimeinteropservicesmarshalgetactiveobject inventorapplication partdocument doc partdocument appactivedocument transientgeometry tg apptransientgeometry inventorpartcomponentdefinition cdef doccomponentdefinition appuserinterfacemanageruserinteractiondisabled true appscreenupdating false planarsketch profile profile extrudedefinition extrudedef extrudefeature extrude stopwatch watch new stopwatch watchstart profile sprofilesaddforsolid extrudedef cdeffeaturesextrudefeaturescreateextrudedefinition profile inventorpartfeatureoperationenumkjoinoperation extrudedefsetdistanceextent inventorpartfeatureextentdirectionenumkpositiveextentdirection extrude cdeffeaturesextrudefeaturesadd extrudedef cdefsketchesadd cdefworkplanesaddbyplaneandoffset cdefworkplanes true ssketchlinesaddbytwopoints ssketchlinesaddbytwopoints ssketchlines endsketchpoint ssketchlinesaddbytwopoints ssketchlines endsketchpoint ssketchlinesaddbytwopoints ssketchlines endsketchpoint ssketchlinesaddbytwopoints ssketchlines endsketchpoint ssketchlinesaddbytwopoints ssketchlines endsketchpoint ssketchlinesaddbytwopoints ssketchlines endsketchpoint ssketchlines startsketchpoint line appuserinterfacemanageruserinteractiondisabled false appscreenupdating true systemconsolewriteline watchelapsed clojure scratchpad geometry calculation add yer projectclj deps comvividsolutionsjts enlive lonocloudsynthread n scratchcontours require netcgrandenlivehtml e clojurestring str clojurepprint refer pprint lonocloudsynthread import comvividsolutionsjtsgeom geometryfactory coordinate polygon linestring comvividsolutionsjtsoperationpolygonizepolygonizer comvividsolutionsjtssimplifytopologypreservingsimplifier def f geometryfactory defn coordinate point intoarray x point coordinate x defn polygon point createpolygon f createlinearring f coordinate point nil defn line point createlinestring f coordinate point defn point p createpoint f first coordinate p load dwg sketchup remove stray tree origin point export google earth kmz extract internal xml file dae must mac since window program order point offbyone fuck line closure def c ehtmlresource javaiofile contoursdae tag file comment treeseq constantly true content first c map tag distinct float array tag every one multiple three number float look like could contour coordinate eselect c floatarray map integerparseint getin attrs count every mod def contour ignore two closed contour dataset f eselect c floatarray ebut ebut let point content f first strsplit map floatparsefloat partition z point first last point mapv fn x x point remove contour shorter ft remove fn c getlength line point c sortby z def tree eselect c visualscene matrix map fn node let x strsplit first content node vec floatparsefloat x defn bound x juxt partial apply min partial apply max x let point mapcat point contour xmin xmax bound map first point ymin ymax bound map second point stretch bounding box one foot avoid roundoff topology error near edge offset def bb xmin xmin offset xmax xmax offset ymin ymin offset ymax ymax offset def bbarea xmax bb xmin bb ymax bb ymin bb def bbcorners xmin bb ymin bb xmin bb ymax bb xmax bb ymax bb xmax bb ymin bb def bbline bbcorners cycle partition take apply concat line defn closestedge x sort mathabs x xmin bb west mathabs x xmax bb east mathabs ymin bb south mathabs ymax bb north first second defn endpoint point juxt first last point defn boundarypoint point let x point case closestedge point north x ymax bb south x ymin bb east xmax bb west xmin bb defn levelpolygons possible polygon made level contour boundary z c getpolygons doto polygonizer add reduce fn re l union re l bbline point point c extend line boundary line concat boundarypoint first point point boundarypoint last point defn closecontours contour groupby z contour sort reduce fn levelsbelow level let polygon empty levelsbelow bottom pick largest possible polygon hope work levelpolygons level sortby getarea last vector otherwise choose polygon fully supported polygon directly em let directlyunderneath polygon last levelsbelow levelpolygons level filter fn p cover p directlyunderneath conj levelsbelow z first level polygon polygon defn point dxfvertex x str x defn contour dxfpolyline c contour dxfpolyline c c height str height n point c map point dxfvertex strjoin n n defn polygon dxfpolyline p polygon dxfpolyline p p height contour dxfpolyline point c getcoordinates getexteriorring p x c c height defn dxf entity str hello world section entitiesn entity endsec eof sketchup map ft x ft acre look like dxf nt reduced scale imported data extent match sketchup measurement look like raw unit inch xmax bb xmin bb ymax bb ymin bb total height difference ft let low high contour map z bound high low shopbot cutting area x x inch scaling factor inch model height may need inch section def scale def cmperinch defn point inventor x translate scale model life origin inventor turn inch inventor base cm unit scale cmperinch x xmin bb scale cmperinch ymin bb mapv format defn inventorslice z polygon let sliceheight str scale zheight str z scale b x getcoordinates getexteriorring polygon rest first point repeated throw map fn c point inventor x c c str create sketch appropriate height str cdefsketchesadd cdefworkplanesaddbyplaneandoffset cdefworkplanes zheight true n first polygon line str ssketchlinesaddbytwopoints first second first b second b n inner polygon line x mapindexed fn idx p str ssketchlinesaddbytwopoints ssketchlines inc idx endsketchpoint first p second p strjoin n n last line connects end point back starting point str ssketchlinesaddbytwopoints ssketchlines inc count x endsketchpoint ssketchlines startsketchpoint n extrusion profile sprofilesaddforsolid extrudedef cdeffeaturesextrudefeaturescreateextrudedefinition profile inventorpartfeatureoperationenumkjoinoperation extrudedefsetdistanceextent sliceheight inventorpartfeatureextentdirectionenumkpositiveextentdirection extrude cdeffeaturesextrudefeaturesadd extrudedef n comment contour map z distinct sort partition map partial apply pprint contour map point map count sort contour map getlength line point sort closecontours contour mapcat fn key z polygon p polygon polygon dxfpolyline p z strjoin n dxf spit mediasfdropboxfoodxf closecontours contour map fn key z polygon prn z p polygon map identity count getcoordinates p take tree layer w ui second without ui layer inch simplification closecontours contour map fn key z polygon p polygon map topologypreservingsimplifiersimplify inventorslice z p flatten strjoin add tree layer str cdefsketchesadd cdefworkplanes nsname tree n x tree map point inventor str ssketchpointsadd x n strjoin print contour line intersect nt let line map line point contour l line l line l l intersects l l l l remove nil let check point polygon consistently divide bounding box two disjoint piece contour map let b seq point polygon point getarea getarea b frequency closecontours contour mapcat polygon raw point map topologypreservingsimplifiersimplify map getnumpoints reduce
398,Lobsters,clojure,Clojure programming,Redux in 30 lines of ClojureScript,http://200ok.ch/posts/minimal-redux-clojurescript.html,redux line clojurescript,redux clean application structure reduce cognitive load reduxreducer always reduxcore channel benefit structure reduced cognitive load,redux popular choice come dealing state larger single page application even smaller application might benefit redux architecture show implement redux le line clojurescript get clean application structure reduce cognitive load reduxreducer n reduxreducer defmulti action fn state action type action defmethod action default state key type actiondata prn action type defined state possible keep redux implementation simple two feature clojure one feature taking advantage multimethods favorite form runtime polymorphism throughout app way change state redux store dispatching action define action type setting type use like rdispatch type addtodo name brew coffee reducer always return state reduxcore n reduxcore requiremacros cljscoreasyncmacros refer go goloop require cljscoreasync reagentcore r reduxreducer refer action defonce state ratom defonce action achan defn dispatch action aput action action goloop whenlet action swap state action recur feature using concisely implement redux channel channel allow u dispatch action asynchronously within action take away least half pain building single page application redux store ratom watched reagent component trigger rerenders query state component require use benefit structure redux help structuring application becomes obvious list reducer list component sensible way split state changing logic view early stage development might later group reducerscomponents use case redux â corecljs â reducercljs app component â boxcljs â buttoncljs â itemcljs â screencljs â snackbarcljs corecljs reducer â componentscljs â validationcljs â formcljs â websocketscljs utilscljs reduced cognitive load agree way dealing complexity isolation agree point defmethod action blur key id evt rdispatch type closewarning let val evt target value rdispatch type updatecomp id id data textt val working reducer action type looking pure function action state neither state affected component elsewhere focus building returning next state order implement redux app start event handler create empty reducer implement reducer one one dispatching action within function semantically observable side effect strictly speaking function pure nevertheless side effect applied controlled way system reducer remaing easy reason argument reduced cognitive load hold
399,Lobsters,clojure,Clojure programming,ClojureScript coding environment for beginners,https://github.com/mhuebert/maria,clojurescript coding environment beginner,maria daveliepmann jackrusher mhuebert curriculum maria montessori play mariacloud contributing contributing fixing bug report bug github issue contributing better error message please send u unwrapped clojure error find error handling wiki file github issue contributing curriculum gallery development build development mode start local server livereload change http http running repl make production build license creative common attribution cc,maria clojurescript coding environment beginner part editor part curriculum collaborative work daveliepmann jackrusher mhuebert work teach help absorbent mind work development montessori recurring problem newcomer clojure one must learn everything jvm stack trace new editor functional programming shielded folk new clojure complexity tooling stack trace programming language esoterica got way let feel power programming project aim delay remove many obstacle possible people explore maria editor code playground installation zero configuration explaining make work take approximately one sentence clojure sharp edge rounded instance wrapping stack trace error presented humanely handful helper function type svg shape use inplace evaluation find effective humane way interact computer curriculum use alongside editor us progressive disclosure language prevent overwhelming folk instead explaining clojure many feature functional hosted lisp big topic introduce folk programming let language feature follow spirit named project pedagogical pioneer maria montessori whose method stress development learner initiative natural ability especially practical play pace play please go mariacloud play around live contributing welcome effort make beginner path clojure smoother contributing fixing bug helpful thing simply play around report bug github issue contributing better error message play around please send u unwrapped clojure error find track error handling wiki helpful making error easier new people please edit wiki directly add experience file github issue explaining error came goal protect user jargonfilled error message requires lot eye pointing way particular error could cause trouble contributing curriculum like clojure maria curriculum opensource primarily community effort chosen particular approach write particular voice particular audience therefore approach although valid may belong caveat u write curriculum open contribution accepted according rough guideline typo bug obvious mistake actively welcome issue pull request built something cool please show u may end gallery example ok substantial contribution suggestion phrasing entirely new module ask following page u shared understanding attained please get touch u email discus idea depth development first copy local machine navigate editor directory git clone http githubcommhuebertmariagit cd mariaeditor within editor directory install javascript dependency compile stylesheets npm install build development mode start local server livereload change build completed open web browser http note dev server run via http running repl default nrepl port configured shadowcljsedn connected following print list thing require shadowcljsdevtoolsapi shadow shadowhelp directly enter live environment provided opened browser shadowcljsdevtoolsapirepl live make production build license curriculum licensed creative common attribution cc shape friendly library distributed eclipse public license see license file relevant subdirectory
400,Lobsters,clojure,Clojure programming,Overview of Clojure nREPL,https://juxt.pro/blog/posts/nrepl.html,overview clojure nrepl,clientserver transport layer drawbridge nreplhornetq message id op session session dynamic var debugrepl piggieback internals toolsnrepl message handling middleware middleware descriptor practical example piggieback cidernrepl place mr anderson,post going explain rough high level nrepl use every day actually work nt intended accurate close enough build mental model understanding go wrongclientservera common confusion lein repl nrepl run lein repl two thing happen server started running toolsnreplstartserverreply terminal nrepl client launchedthe server aspect focus post reply terminal ui nrepl client allows evaluate code terminal another client ciderel communicates via nrepl enhance emacs feature also nrepl server extension cidernrepl written clojuretransport layerthe nrepl notion transport abstract concept communicating nrepl sending receiving message default transport ergo popular bencode tcp bencode simple encoding format designed bittorrent encoding torrent filesit described concisely number prefix e mark end string length prefix length byte unicode spam spam unicode symbol byte list l prefix e mark end element nest spam associative array hash map spame foo bar spam provides simple format reading data structure network transport exist drawbridge http transport nreplhornetq provides hornetq transport toolsnrepl servereach client support various transport natively within client open extension primary transport remains bencode tcp nt doubt related high cost rewriting multiple transport clientmessagesa message simply map two kind message request response common key request message id unique id message included request message response relating request also include idop specifies way specifying handler run eval common operation stdinsession specifies id relates set thread binding cover detail lateran unencoded request message nrepl server could look like op eval code println id someuniqueid nrepl server handle message however plea cover specifically toolsnrepl handle internally later postresponses similar shape single request elicit many response request finished processed include done list status value important response id request id allows client track particular response due nrepl server asyncronous design multiple request flight time reason important id globally unique generally use example request would expect response map like id someuniqueid id someuniqueid value nil status done sessionssessions persist dynamic var collected getthreadbindings unique lookup allows different value e different repl client eg two separate reply instance existing session cloned create new one modified allows copying existing preference new environmentssessions become even useful different nrepl extension start taking advantage debugrepl us session store information current breakpoint allowing debugging two thing separately piggieback us session allow host clojurescript repl alongside existing clojure onean easy mistake confuse session id difference session id id tracking single message session tracking remote state fundamental allowing simultaneous activity nreplinternals toolsnrepl message handlingthis section deal specifically toolsnrepl popular implementation nrepl implemented message handled via middleware feel familiar used ringtoolsnrepl middleware work slightly differently ring middleware work handle message pas next handler response asyncronousa transport key added message handled value key implementation protocol representing transport layer replacing transport new one middleware control response middleware usually replacement delegate back original transport updating message something print message happen fn nextfn transport nextfn reify transportprotocol send msg prn msg send transport msg add pretty printed version value fn nextfn transport nextfn reify transportprotocol send msg send transport assoc msg pprintvalue pprint value msg default functionality nrepl implemented entirely using middleware even fundamental part like session eval default functionality like eval provided order useful boxmiddleware descriptorsa message handler set descriptor upon metadata toolsnrepl us order middleware automatically generate documentation requires specifies middleware must present middleware stack specifying string indicates anything provides op must present also also use var expects specifies middleware must present middleware stack use var string handle documentation key includes text string human explanation return argument etcusing requires expects key toolsnrepl able automatically order middleware handler automatically manually order middleware like leinprofileclj nreplmiddleware cider prvalues eval practical example piggiebackpiggieback nrepl middleware chas emerick underlies ability execute clojurescript nrepl used figwheel bootcljs launch piggieback session clone current nrepl session update dynamic var piggieback dynamic var store repl env clojurescript protocol evaluationpiggieback us nrepl middleware dependency system specify eval chain allows hijack incoming eval use dynamic var determine whether clojurescript activatedif dynamic var set use clojurescript api send code replenv usually browser env sent browser evaluation result captured javascript sent back communication done via websockets bandthis setup allows evaluate clojure clojurescript nrepl changing session using control evaluation happenscidernrepl place thiscidernrepl provides lot functionality work around limitation imposed bencode providing additional semantic data available using eval eval response get prstr order prevent issue encodingfor example turn classpath bencode list opposed string src resource get using eval thingit also bundle dependency unique way via mr anderson nt conflict project mean example brings toolsnamespace order provide refresh without conflicting version already projectthe open design cidernrepl allowed unexpected client vimfireplace number additional feature integration effort
401,Lobsters,clojure,Clojure programming,Understanding Data as the API philosophy in Clojure,https://medium.com/@chris.shellenbarger/key-lesson-building-cloudrepo-with-clojure-99bc1c1c405e,understanding data api philosophy clojure,key lesson building cloudrepo clojure joy clojure cloudrepo paradigm shift experience idiomatic clojure key concept data api passing map parameter data flow based designing data api design example embrace power,key lesson building cloudrepo clojureone exciting thing starting company get decide technology stack usewin lose responsible outcome better make mistake right safe technology stack use one everyone else usingto one worst reason anything everyone else seems like excuse turn mind follow herdif follow herd end herd end want great power youit plan take companythe herd today us javawe built cloudrepo clojurewe learned thing like share themthe joy clojurecloudrepo first production system built ground clojure working clojure five year never opportunity create something itwhy choose always faint mysticism regarding alternative programming language help solve problem better way better subjective term wanted experience better meant usthe way determine better meant u build something case cloudreporich hickey javaone aside huge fan rich hickey single handedly greatest influence growth software engineer talk alone made better engineer clojure language used sinceclojure second greatest influence growth engineer broke oo mindset really broadened knowledge programming language generalif part success learning u could learn using clojure full time decided find outparadigm shiftat first clojure feel awkward fighting something simple especially come solid object oriented oo background using programming language like c c javathis happens complete paradigm shift required move oo clojure data api paradigm rule clojurehuh mean term heard member clojure community discovered key leveraging power clojurei try explain briefly provide example later post java class definition define apis spend lot time figuring class integrate even data encapsulated class apiswe spent countless mind numbing hour career wiring class writing code like asetfoo bgetfoo data similar form different static typesin clojure adopt data api paradigm designing system primarily identifying data flow function data represented small set abstraction particular map would reduce requirement write glue code commonplace java asetfoo bgetfoo etc experienceas building cloudrepo learned still thinking like oo programmer clojure fighting u along way eventually received message started adopt paradigm shift clojure became easier work withtoday working clojure joy learned think system data flowing data transformed manipulatedthis believe meant data api programming longer sequence call function convert type call function convert etc would see statically typed languagewe started using clojure exactly manner felt fighting usbecause fighting usbecause program clojure like object oriented languageif take one thing post hope thatidiomatic clojureidiomatic programming clojure like creating pipeline function really see difference static typing dynamic typingin oo function take different type ie data object type class write lot glue code manage mappingsconversions fieldsin java use lambda simplify thing bit mapping function still need know type map type bin clojure data passed around abstracted map glue code manage conversion type longer necessaryif pas around map clojure embrace concept clojure stop fighting open arm like best friendthis important lesson took u longer learn year oo programming taken quite time overcomenow learned lesson applied code programming clojure feel like superpowerkey concept data apithere ton post like clojure people seem figure post blog great frustration post never really taught u think data flowing systemwith almost year oo experience difficult change way mind approached software problemspassing map parametersfor u one hardest habit break habit aware defining function way parameter declared separately needed three piece information three parameter static typing world ensures people calling method properlyadditionally working object similar field shape still define conversion type usethis example show much boilerplate required java get thing connected properly little program logic present ie lot ceremony clojure idea function work small set abstraction one map associative abstraction write function accept return map abstraction declare previous java code clojure like much concise simple strive program bein example see clojure function call threaded together order form pipeline especially function implemented accept return mapdata flow based designingwhen design oo based program end lot sequence diagram showing interaction object google uml sequence diagram example probably see lot sequence diagram day boilerplate code one thing making boilerplate diagram dreadfulbecause static type system object become coupled depend specific type interact attempt substitute different type compiler prevent even shape new type similar ie integer geta method different class clojure function call function difference function arity however converge passing around map arity function become simply map coupling moved type signature object object shape data ie passing map expected key java even data class provide set apis common abstraction easy use represent data way clojure write custom code work individual data typejava map pas around like would clojure key typed even try use string key lot extra work data class abstracted apis idiomatic java map notclojure functional data api modeling different instead modeling interaction object system model data data pass system evolves passing functionwe seen example diagram decided use data flow diagram help design programsdata api design examplethe following example illustrates flow data cloudrepo request retrieve artifact arriveswhen request arrives cloudrepo retrieve artifact receive two bit data token uri input map transform map get final result return response clientthe rectangle function parallelogram data passed note data flow diagramdata flow diagram around new u anyway point post elegantly diagram converted clojure code since function take return type map chain together without glue code required statically typed languagesthis powerful stuff really allows spend time flushing design done translate simple code code simpler thus easier read write debug etconce started designing implementing code manner light bulb went head stuff incredibly powerful save u tremendous amount timeembrace powerclojure powerful simplify software development tremendously take time understand supposed use itif approach clojure mindset oo programmer fight like go back countless hour mindless boilerplate codingstick clojure converge map primary abstraction data click one daywhen day come team gain superpower put mile ahead competition never try clojure everyone else day come light year ahead
402,Lobsters,clojure,Clojure programming,Humble Book Bundle: Functional Programming,https://www.humblebundle.com/books/functional-programming-books,humble book bundle functional programming,bundle looking feb feb u learn work charity,bundle looking bundle live feb feb bundle sold leading u raised learn work charity return homepage use search bar click link related bundle sale
403,Lobsters,clojure,Clojure programming,Introduction to Asynchronous Programming in Clojure,http://www.bradcypert.com/2016/07/15/clojure-async/,introduction asynchronous programming clojure,getting started warehouse channel attempt store thing current thread block populating channel parking v blocking go alt buffer never note cleaning close closing regard,writing favorite language clojure also gauging interest clojure reading think ready take relationship next level let talk asynchronous code clojuregetting startedif want follow along code example start new project going using leinengen going name app warehouse lein new app warehouse let open warehousesrcwarehousecoreclj modify look like n warehousecore genclass require clojurecoreasync async refer go chan buffer close alt defn main nt whole lot yet args println hello world key thing note requiring clojurecoreasyncwhat warehouse warehouse place good stored u going store virtual good warehouse retrieve warehouse asked decrease amount good available warehouse provide virtual good whomever asking pretty exciting right channelsto going use something called channel channel similar queue define channel simply saying def c chan provide optional argument channel provide buffer size example def c chan give u channel buffer size mean store thing channel attempt store thing current thread blocklet define channel limit define channel store limit separately use value future pun intended def warehousecapacity def warehousechannel chan warehousecapacity awesome warehousechannel act warehouse know limit item store warehouse item let define function populate channel item populating channelour warehouse going clothing warehouse going store sock shoe pant shirt make fun going randomize item stock let go ahead create map map number value item create private function get random selection item warehouse def stockmap shirt pant sock shoe defn generaterandomitems let item x range warehousecapacity randint count key stockmap map get stockmap item run generaterandomitems get something like shoe shirt pant shoe shirt shirt shoe shoe sock sock many pant okay next want load list item channel write function also go ahead update main function call function written thus far defn loaditemsintochannel item channel map channel item defn main args loaditemsintochannel generaterandomitems warehousechannel pretty weird symbol let break apart piece piece say going putting something channel right remember point channel right say blockingso take item provide one time put onto channel one block previous one probably thinking block put blocking take right rightfully yes symbol blocking take remember one funneling value channel right itparking v blockingso able create list item load channel want take channel pull item using repl go ahead try warehousechannel see something like shoe keep using see result feel like computer frozen get point ctrlc take blocking state replthe reason repl would block simply told said take channel block get result nothing take block current thread wait something exist channel something exist retrieve channel unblocked standard async behaviorbut alternative called parking one thing left understand get parking however channel ran process run threadsparking available adding reading channel main thread instead delegating process thread pool difference exactly blocked repl earlier locked thread patiently waited something exist channel parking able tell thread hey wait channel something take stuff meantime use go macro help take care usone key difference go macro ability use usable within go block signify like park thread instead block thread park thread thread relieved work task mean time time want use go block instead said free use type go block gohopefully make sense first started async sure use go block think real life example wait mail parking blocking unless stand front mailbox nothing mailperson arrives realistically waiting mail arrive still able handle task like vacuuming eating writing code mail arrives retrieve mailbox continue writing async process manner powerful techniquenow loaded item warehousechannel going make one channel channel loosely evaluates user currency making sure trying pay number channel going accepting input deciding take warehouse channel give item back user defn makepaymentchannel let payment chan go true let payment number println warehousechannel println accept numeric value number clothes payment notice creating channel via function wanting able easily create multiple payment channel future also setting expected behavior channel receives input particular channel take input check number take print item warehouse channel defined earlier number print message alerting user expecting numberlet run via repl make sure work output per line commented following line loaditemsintochannel generaterandomitems warehousechannel def incoming makepaymentchannel incoming pant incoming foo accept numeric value number clothes far everything working great happens take warehousechannel empty though evaluating incoming time result repl blocked thread block trying take another channel nothing take let go ahead press ctrlc unblock uslet make sure add another item warehouse continue take warehousechannel banana banana notice went ahead printed banana thread parked received input parked thread blocked something channel take go ahead print banana added warehouse pretty neat continue load channel like play around want cover thing post already long alt bufferslet change warehouse model clearly added fruit channel want mix fruit clothes want warehouse serve actually make another channel call bananachannel load banana user give u number payment channel going try get fruit clothes print whichever get back first practical example would could uploading multiple image displaying first one completes main image something similarlet go ahead define bananachannel going hold three banana going go ahead put one banana catch however banana rot worried serving bad banana hold three receive another want throw oldest one help u keep freshest banana channel easy way called slidingbuffer def bananachannel chan slidingbuffer bananachannel banana slidingbuffer follows firstinfirstout principle put channel put channel well item channel would also droppingbuffer opposite lastinfirstout buffer particularly interesting never block current thread put simply remove object queue try add beyond capacityalright let go back task serving either banana clothing user provides u number actually rewrite makepaymentchannel function using alt symbol alt given vector channel block current thread take channel take item channel return item channeltakenfrom basically leverage alt take whatever item get first sometimes banana sometimes clothing regardless user give u money going try give whichever take first channel empty bet going take channel every time unless also empty block something either channel let modify makepaymentchannel function defn makepaymentchannel let payment chan go true let payment number let item ch alt warehousechannel bananachannel println item println accept numeric value number clothes banana payment run repl add payment channel see something like emptied warehouse channel want repopulate using loaditemsintochannel generaterandomitems warehousechannel function wrote earlier def newpayments makepaymentchannel newpayments sock newpayments banana newpayments pant cleaning close every warehouse shuts point time maybe holiday maybe weekend really matter matter fact close channel time way closing work bit misleading though close channel inaccessible still able take channel put anything else channel eventually run thing take tried take channel open nothing left blocking current thread close channel try take nothing left instead take nil channelfrom repl go ahead close bananachannel close bananachannel bananachannel banana bananachannel nil worth mentioning channel returned nil time banana left channel close channel finished additionally never return nil channel make difficult determine taking nil channel closedclosing regardsi done async clojure java scala python javascript done async javascript admit really enjoy async clojure javascript othershow compare language use async framework easier difficult let know want try reading next
404,Lobsters,clojure,Clojure programming,When types are eating away your sanity,http://narkisr.com/posts/04-02-2018-types-mismatch/,type eating away sanity,intro bringing back sanity magic x convert type summary simple made easy dozer scala,introiv programming java year every project kept seeing pattern public class personto public string name public integer age public class personmodel public string name public integer age public boolean isregistered public class servicea public void personsservice string json personto person parse json personmodel model process person persist model lucky set conversion logic place iv seen lot duplicated code ignores issue copy past logic public class persontoconvertor personmodel public personmodel convert personto person pleasure conversion logic return personmodel public class personmodelconvertor personto public personto convert personmodel person pleasure conversion logic return personto simple json personto personmodel conversion chain conversion part system expect get data certain shape form better oop modelingstill simple example imagine pile pile code deal issue matter programming javahaskellgoelm end day slurping data system cost younot data typesstructure change may find huge refactoring movingshaking lot typesmethodsfunctions around ripple effect wait alternative bringing back sanityas matter fact almost functional dynamic language require wacky conversion work raw data defn servicea json json parse process persist parsed person simple hashmap datastructure manipulate defn process person assoc person isregistered false oh wait simple cheating type checking code making sure correct allin word rich hickey like ask question true every bug found field audience reply someone wrote audience reply got written got written yes interesting fact passed type checker mind case verifying structure data component make sense enter clojurespec sdef name string sdef age integer sdef person skeys req name age allows u check validity run time check different part system conform specification otherswe magic x convert type shorter way converting type code generation generate type convertor nt write manually business nt generated bound multiple type increasing maintenance cost addition maintain whole set tool schema freeautomated mapping library similar code generation still maintain huge set mapping type also type themself nt go away still multiple type describing entitywe work raw parsed data matching json class cc def unapply option option aisempty none else agetasinstanceof object extends cc map string object l extends cc list object extends cc string object extends cc double object b extends cc boolean map list jsonparsefull jsonstring l language mapget language language language lang language name langget name b active langget isactive completeness langget completeness yield name active completeness imagine logic n json document system get ugly pretty quicklysummarywhen using type context unstructured data aware tradeoff system deal huge variety jsoncsv random html spending lot time juggling type conversion instead focusing business logic itselfits hard quantify exaggerated number experience large java project language better type system might get away le still considerable overheadsimple made easydozer example automated bean bean mapping framework parse json scala using standard scala class
405,Lobsters,clojure,Clojure programming,Clojurists Together Q1 2018 Funding Announcement,http://clojuriststogether.org/news/q1-2018-funding-announcement/,clojurists together funding announcement,recap cljhttp cljhttp figwheel figwheel funding detail segment open source fellowship funding apply member,clojurists together excited announce two project funded cljhttp figwheel recap new clojurists together goal simple fund critical clojure opensource project keep healthy sustainable clojure company individual developer sign monthly contribution pick project fund quarter first funding cycle since launching cljhttp cljhttp one popular clojure open source project million downloads clojars maintained lee hinman used quite client base http client lee plan next three month like dedicated time addressing bug adding new feature slowed bit past recently move away deprecated apis functionality kept still lot cleaning missing feature need reimplemented recently also async support merged need enhanced firstclass usage cljhttp additionally lot feature apache http client expose cljhttp nicely encapsulate would great could available developer figwheel figwheel one clojurescript secret weapon enabling ridiculously high productivity via livereloading clojurescript code maintained bruce hauman one used clojurescript tool community bruce plan next three month figwheel codebase exploration problem space creating friendly clojurescript ui clojurescript codebase complex complected would love devote solid month working solely figwheel would like revisit functionality condense architecture set library allow reused context ie boot etc easily example project able use figwheel compiler wrapper produce attractive error message perhaps figwheel error message parsing code would also u time explore feedback spec error runtime importantly like set figwheel long future service clojure community funding detail announced clojurists together planned offer successful project funding specified number hour dependent fund discussion software freedom conservancy host organisation changed fellowship style grant similar segment open source fellowship practice amount thing funding open source developer improve project funding cycle project receiving three month funding bunch good application great project would liked fund several project money like see project get funded please join applied last funding cycle able reuse application apply maintain clojureclojurescript project important community consider applying funding help keep sustainable lastly big thank member done without support
406,Lobsters,clojure,Clojure programming,Interactive GPU Programming - Part 2 - Hello OpenCL,http://dragan.rocks/articles/18/Interactive-GPU-Programming-2-Hello-OpenCL,interactive gpu programming part hello opencl,,create data def mainarray floatarray range let transfer differently cuda opencl explicitly set context command queue equivalent cuda stream process task good thing def queue commandqueue ctx myamdgpu enqwrite queue gpuarray mainarray class clojurelangcompiler compilerexceptionclass clojurelangexceptioninfoclass clojurelangcompiler compilerexceptionclass clojurelangexceptioninfocompilerexception clojurelangexceptioninfo opencl error clinvalidcontext name clinvalidcontext code type openclerror detail device uncomplicateclojureclinfodeviceinfo addressbits available true builtinkernels compileravailable true doublefpconfig roundtozero infnan denorm roundtoinf roundtonearest fma endianlittle true errorcorrectionsupport false executioncapabilities kernel extension clamdprintf clkhrspir clamddeviceattributequery clamdpopcnt clkhrgldepthimages clkhrmipmapimagewrites clkhrsubgroups clamdmediaops clkhrdepthimages clkhrglsharing clkhrmipmapimage clkhrbyteaddressablestore clkhrglevent globalmemcachesize globalmemcachetype readwrite globalmemcachelinesize globalmemsize globalvariablepreferredtotalsize imagebaseaddressalignment imagemaxarraysize imagemaxbuffersize imagepitchalignment imagesupport true linkeravailable true localmemsize localmemtype local maxclockfrequency maxcomputeunits maxconstantargs maxconstantbuffersize maxglobalvariablesize maxmemalocsize maxondeviceevents maxondevicequeues maxparametersize maxpipeargs maxreadimageargs maxreadwriteimageargs maxsamplers maxworkgroupsize maxworkitemdimensions maxworkitemsizes maxwriteimageargs membaseaddralign name hawaii nativevectorwidthchar nativevectorwidthshort nativevectorwidthint nativevectorwidthlong nativevectorwidthdouble nativevectorwidthfloat nativevectorwidthhalf openclcversion version vendorspecificinfo nil parentdevice nil partitionaffinitydomain partitionmaxsubdevices partitionproperties partitiontype pipemaxactivereservations pipemaxpacketsize platform object orgjoclclplatformid clplatformid preferredglobalatomicalignment preferredinteropusersync true preferredlocalatomicalignment preferredplatformatomicalignment preferredvectorwidthchar preferredvectorwidthshort preferredvectorwidthint preferredvectorwidthlong preferredvectorwidthdouble preferredvectorwidthfloat preferredvectorwidthhalf printfbuffersize profile fullprofile profilingtimerresolution queueondevicemaxsize queueondevicepreferredsize queueondeviceproperties outoforderexecmode profiling queueonhostproperties profiling referencecount singlefpconfig correctlyroundeddividesqrt roundtozero infnan roundtoinf roundtonearest fma spirversions svmcapabilities coarsegrainbuffer finegrainbuffer devicetype gpu vendor advanced micro device inc vendorid deviceversion opencl amdapp driverversion vm compiling exceptioninfo opencl error clinvalidcommandqueue clojurecoreexinfo convince data really transferred gpu memory transfer back new empty floatarray def roundtriparray floatarray enqread queue gpuarray roundtriparray take roundtriparray believe data gpu
407,Lobsters,clojure,Clojure programming,Clojure successfully runs on an iPhone using MAGIC CLR compiler,http://nas.sr/magic/2017/12/28/early-ios.html,clojure successfully run iphone using magic clr compiler,late last night code boids gist strategy limitation static method modified assembly juggling comment end invokes function static c method invokes intrinsic next step remaining special form,taking break post outlining inner working compiler report exciting news late last night first time clojure code compiled magic successfully ran iphone tl dr confirmed magic achieve original goal bringing clojure restrictive environment particular code prototype survived unity translation native code suited io expected possible seeing running physical device put rest lingering doubt code demo implementation classic boids flocking algorithm available gist brevity list inline boidcore first prototype wrote using clojuremagic representative namespace look like magic complete stand reason get namespace like work yet boidsbuild namespace used produce iosready assembly see body function macro copied boidcore lot compilerspecific machinery surrounding reproducible latest magic commit time writing built assembly within unity using arcadia repl boidbehaviourcs unity component invokes clojure code attached boids pass local transform boidscoreupdate method strategy additional work done make demo function given current state magic none reflects realworld workflow would like given finished compiler rather document process getting work magic exists today limitation demo restricted part clojure require runtime support namely c interop intrinsics macro special form let looprecur magic support namely invoking clojure var looking var requires support clojure runtime requires clojurecore loaded magic compile yet usual us magic problem magic usually run within stock compiler lean gain access clojure runtime exported context possible way getting clojurecore run iphone without magic able compile even given limitation magic code fairly expressive namespaces like arcadialinear completely useable lot call site would normally var get turned inlined bytecode magicintrinsics including aget aset int inc magic macroexpander working macro like boidsbuildtransforms also fair game static method without runtime support compile proper clojure namespace instead demo compiles c class static method contain body function default analysis pass modified generate static method instead instance method boidsbuildstaticmethods macro designed generate clr type named static method function assembly juggling shenanigan involved preparing assembly first note actually emit three assembly comment end boidsbuild get around inability invoke var function call another function must treat interop flock function invokes separation cohesion alignment function static c method requires boidsrules assembly compiled first loaded memory true update invokes flock bit tedious work uncomment form turn emit assembly disk separately resulting assembly ruledll flockingdll boidsdll merged single assembly using ilrepack dropped unity project referenced ide completely useable c even participate intellisense boidbehaviourcs call update method passing transform boidbehaviour component attached boid gameobjects positioned n three dimensional grid scene work editor survives export far unity concerned dealing c code one assembly full il know convert needed add makearray intrinsic everything else converted without issue next step goal something look like boidcore work without additional intervention get magic need able compile whole namespaces closure dynamic call site remaining special form way convert compiling clojurecore real hurdle magic approach maximizing flexibility bytecode emission mean make il look ever need look survive translation onto platform like io early demo extremely promising milestone indication right track
408,Lobsters,clojure,Clojure programming,"Neanderthal and friends support CUDA 9, Java 9, and Clojure 1.9",http://dragan.rocks/articles/18/Neanderthal-018-CUDA9-Java9-Clojure19-update,neanderthal friend support cuda java clojure,clojurecuda neanderthal,clojurecuda support latest cuda eliminate trouble downgrading cuda installation cuda install latest cuda toolkit everything work smoothly cuda work sure cuda even work nt bothered try since cuda people install default course cuda also suported neanderthal
409,Lobsters,clojure,Clojure programming,"Interactive GPU Programming, Part 1: Hello CUDA",http://dragan.rocks/articles/18/Interactive-GPU-Programming-1-Hello-CUDA,interactive gpu programming part hello cuda,,data memory program crunch lot talk since hello world article brief possible gpu programming terminology two kind code host code run cpu various management call device driver memcpyhost kernel run gpu core write host code clojure kernel written cuda c hello world example increment element array parallel course kernel look like extern c global void add int n float int blockidxx blockdimx threadidxx n keyword global indicates cuda kernel otherwise plain c function parameter call operator array another cudaspecific thing blockidxx similar field remember parallel worker execute code time thus worker need position whole squadron cuda environment make sure unit worker get data populated hello world case worker able compute id work one cell array read value cell add one write location global gpu memory gpu know kernel going executed array order job host code def kernelsource extern c global void increment int n float int blockidxx blockdimx threadidxx n currentcontext ctx def helloprogram compile program kernelsource def hellomodule module helloprogram def increment function hellomodule increment launch increment parameter gpuarray def result memcpyhost gpuarray floatarray element array incremented cheer write kernel clojure another higherlevel language possible implement opinion harm good kernel tiny complex compared typical c code match problem floating point computation really well hand host code long complex c notoriously hard build therefore simplifying host code wrapping clojure make sense kernel much
410,Lobsters,clojure,Clojure programming,Quinto: Resurrecting an Abandoned Board Game,http://blog.jrheard.com/quinto-resurrecting-an-abandoned-board-game,quinto resurrecting abandoned board game,quinto resurrecting abandoned board game game box played trying make run tile whose sum multiple five wait rule infuriating play quinto source code clojure clojure rclojure clojurians slack clojurescript clojurescript fun reagent reagent atom single atom reagent component change timothy pratley excellent article figwheel figwheel great talk spec spec verified specter specter screencast intellij cursive cursive intellij free drunkard walk color picking technique dev diary grid validation function coder work function verifies invariant clojure brave true clojure programming joy clojure appendix quinto origin story boardgamegeek tile distribution video appendix b quintus origin story percy jackson lightning thief,quinto resurrecting abandoned board game jan played old board game called quinto visiting friend past thanksgiving developed strange fixation game wrote program let play computer opponent like show program also tell tool used build start teaching play game worry like three rule like skip ahead game box played quinto basically scrabble except number instead letter scrabble goal place several tile row column spell word get extra point freshly placed tile contact multiple preexisting word quinto thing except instead trying make word trying make run tile whose sum multiple five example move would earn point next move invalid though tile sum multiple five really game making first move move must begin middle board otherwise move must begin next previously placed tile know make move let talk score work easiest explain example let say turn board currently look like place shown get point opponent turn place shown get point know play quinto game end run tile whoever highest score end game win wait one last rule never make move would cause run five tile row instance move invalid try put zero opponent heckle come another move instead rule infuriating turn last rule make game really hard play add whole extra category stuff need keep track head deep game ton tile board take brainpower look tile hand look back board feverishly think whether placing three tile multiple five hm maybe yes perfect put tile space would break nomorethanfivetilesinarow rule somecellsareimplicitlyverboten rule drove completely nut like make move space board light space red course board dumb piece cardboard decided write computer program would light invalid cell red playable cell green added feature cardboard copy quinto ai opponent play probably beat automatic score tracking play optimal highestscoring move could made hand score move drawn green celebrate achievement mouse score one past nonoptimal move game show optimal move would use information learn get better game ai still beat though play quinto also read source code like keyboard shortcut clicking becomes annoying escape enter left arrow key key control part ui expect good old time come back tell tool used build game clojure clojure favorite programming language got strong focus writing pure builtin data structure immutable still easily perform side effect want sits top java addition excellent library clojure community created also use java library clojure program community great active rclojure clojurians slack generally nice smart helpful positive group proud part clojure strike nice balance functional purity actually getting stuff done particularly excellent language writing computer program transform filter data try include useful link beginner end article clojurescript actually wrote program clojurescript though clojurescript dialect clojure compiles javascript clojurescript let write clojure program run web browser mean know little html cs clojure program gui share program people uploading j file probably indexhtml stylecss somewhere giving friend link clojurescript program use javascript library well majority clojure library clojurescript program limited run anywhere javascript program run top programming clojurescript fun community created ton really stellar library make development pleasure let take look favorite reagent reagent react library clojurescript beautifully minimal interface let write code like try clicking square much going code cellclass atom cellclass read atom value reset modifies value colorfulcell function evaluates plain old clojurescript vector standard stuff remarkable thing reagent give special kind atom ratom see line code modifies one special atom reagent notice automatically recalculates part ui use atom part changed since last time drawn reagent redraws part quinto keep game entire state single atom ui bunch reagent component take game state input return html represented regular clojurescript vector output whenever game state change due user input ui automatically redraws part need redrawn write bunch pure function reagent handle rest reagent fantastic adore like learn reagent recommend timothy pratley excellent article library figwheel figwheel lifechanging tool best explained author great talk short version frontend javascript development usually look like got editor one screen app another make change j manually reload browser window navigate state made change see whether code changed thing wanted figwheel make got figwheel running change make code show immediately browser application state dropped ground process look like working editor offcamera adding code attache random nonsense cs class cell grid whenever save file working figwheel instantly update running game behavior without clobbering state spec spec indispensable tool added recent version clojurescript let formally specify program data look like done also annotate program function example drawtiles function remove numtiles tile deck add player hand annotation like make easy human reader figure shape program data annotation also verified using instrument check happy spec added language make clojurescript program lot easier write read understand confidently modify specter specter library allows elegantly performantly manipulate clojure data screencast extremely useful first trying wrap head around first time using specter really enjoyed using often future intellij cursive cursive plugin make intellij glorious environment writing clojurescript program using cursive noncommercial use including personal hacking opensource student work free favorite feature cursive repl integration lisp programmer used sort thing often comment block program stash chunk code useful debugging never understood tried constantly move cursor one block code press keybinding immediately see result without leaving editor make incredibly tight feedback loop look like recorded video working code featured drunkard walk post video use cursive rainbow parenthesis paredit mode enabled also ideavim plugin installed use vim keybindings color picking good tool bother color picked quinto ui awful combination tried even worse would done building game pick color ui element advice technique dev diary past personal project worked created devdiarytxt file used scratchpad whenever notice sure code write next force narrate thought text file serf several purpose expressing thought written form force actually figure problem currently facing solution currently thinking help get better solution faster remember made particular decision search text file see option considered little since last time worked project remember working look recent entry dev diary race habit immensely valuable still figuring system break working several project project sole solvable problem solve brief writeup finalized workflow grid validation function coder work interviewee remember piece paraphrased advice working novel data structure create function inspects data structure check see valid call validation function place quinto grid vector integersornils particularly novel bunch invariant need maintained though never five nonnil cell row contiguous run cell sum multiple five etc early development wrote function verifies invariant sprinkled asserts various place program asserts failed immediately whenever introduced bug program able immediately fix bug instead finding hour day later unit test would surfaced bug clojurescript reagent truly sweet spot writing turnbased game happily write pure function express game business logic ui pure function game state clojure atom abstraction make easy manage state confidently love tool hope consider trying interested learning clojure hear clojure brave true current best way read book good reputation confidently recommend clojure programming joy clojure book read learned language appendix quinto origin story piece together boardgamegeek quinto printed never friend copy purchase goodwill several different version quinto printed using different board size tile distribution program picked arbitrary board size liked used tile distribution particular version played friend house video show version sometimes us different base number instead version played feature include exercise reader pull request accepted etc honest think quinto died good game fun program though appendix b quintus origin story quinto box look like roman dude combined name quinto reminded latin class took latin middle school mom heard would help sat score teacher mr brunner assigned latin name quintus remember liking mr brunner quinto name reminded class googled name see thing ended going seems well writing middle school english teacher named rick riordan loved class remember englishrelated material covered fond memory learning norse mythology japanese geography class reason elude anyway year later rick struck big book percy jackson lightning thief huge hit ended made movie heard point college happy mr riordan never ended reading book seeing movie imagine surprise googled mr brunner learned character book percy latin teacher pierce brosnan play movie except turn mr brunner actually centaur disguise named chiron think think quinto
411,Lobsters,clojure,Clojure programming,"So yeah, about Clojure's syntax...",http://vvvvalvalval.github.io/posts/2018-01-06-so-yeah-about-clojures-syntax.html,yeah clojure syntax,syntax matter ingredient clojure syntax data literal macro consequence verbosity solved problem separation concern code layout program structure example builder pattern code data data viz tooling library alltracks language embedding paradigm example web uis saner language stewardship summary disclaimer syntax matter syntax never good reason use dismiss programming language syntax matter encourages inhibits certain programming idiom ingredient clojure syntax edit clojurescript syntax minute data literal symbol list macro macro programmer define macro observation macro ast reference clojureorg consequence verbosity solved problem datalog onyx separation concern code layout program structure macro separate concern program structure code look feel example builder pattern builder pattern underscorejs nt compromised program structure order make code pretty syntactic tool semantic tool code data data viz data reprensentation data visualization alltracks language embedding paradigm share lot language infrastructure typical program different paradigm nt address different concern rather different aspect concern example web uis saner language stewardship growing language multimethods corematch adding feature readily core language please user short term bad consequence ecosystem long term summary,syntax matter ingredient clojure syntaxdata literalsmacrosconsequencesverbosity solved problemseparation concern code layout program structureexample builder patterncode data data viztooling librariesan alltracks language embedding paradigmsexample web uissaner language stewardshipsummary many experienced programmer first encounter clojure syntax range slightly disturbing downright shocking earth would put function inside parens weird programmer get emotional syntax guiltily remember java day enjoyed ceremony typing thing like protected final void etc also need pragmatic able overcome subjective bias make lucid technical decisionsso goal article help understand u choose leave familiar comfort cstyle syntax strange world bracket parenthesis rewarding bedisclaimer article try prove benefit clojure syntax merely communicate perception believe right tool assessing language design experience using rethoricdoes syntax matter first let start saying syntax never good reason use dismiss programming language approach choosing language nt like syntax wrong choosing language syntax like choosing car texture wheel practice semantics language execution model ecosystem performance characteristic etc always much important factor whatever initial think syntax get used itdevelopers face many technical difficulty building realworld system painful difficulty tend last fo year get worse time unfamiliar language syntax painful problem work envy confident problem matter daysdoes mean syntax matter language design course matter syntax matter encourages inhibits certain programming idiom could write java program style clojure program would extremely unwieldy point team would willing sustain effort mention whole ecosystem see clojure syntax enabler many desirable thingsthe ingredient clojure syntaxclojure syntax simple enough described blog post accustomed clineage language syntax may look scary trust matter familiarity someone programmed java clooking language year using clojure testify le readable convenient editedit realize shaun lebron better job article clojurescript syntax minutesdata literalsthe textual syntax clojure actually notation data structure think json steroid le verbose comma optional richer extensible set data type map arbitrary key etcexamples code comment preceded semicolon scalar type number true false booleans nil null nothing hello string multi line string clojure symbolic type keywords symbol hello orgmycompanyfoo keywords programmatic identifier bit like enums represent often used key map hello fn mynsfoobar arraylist div symbol typically used name value collection type list sequential collection grow front delimited parenthesis list number b c list keywords b c list heterogeneous empty list b list list x z span multiple line vector also sequential collection grow end support random access like array delimited square bracket b c map set keyvalue pair aka dictionary hash language delimited bracket map keyvalue pair case key keywords value string add comma make feel better clojure comma whitespace empty map key value type constraint key must distinct v nil b c e f nil true clojure compiler really compile text instead compiles data structure data structure treated expression consider example code defn square x x x term syntax actually list element defn symbol defn square symbol square x vector element symbol x x x list element symbol data structure executed data type evaluated using special rule symbol evaluated value name function parameter global constant local variable etc list example op x z represent invoking operation default invoking function eg myfun x equivalent myfun x cstyle syntax sometimes another sort operationfor instance defn myfun x operation define function named myfun argument x etc particular special operation macro describe next sectionmacrosas explained clojure operation call list evaluated speciallya handful special operation builtin language called special form example special form def creates named global constant def myconstant let name local value let x x control flow evaluates one expression depending first expression value even n even odd fn creates anonymous function lambda fn x x x special operation macrosmacros essentially rewrite code pas code like function accept value return value macro accepts code expression return new code expressionfor instance clojure operator equivalent cstyle language macro emits code using lowerlevel following expression us macro x z expands something like x x z z nil importantly clojure programmer define macro using defmacro wo nt delve use would require proper clojure tutorial basically like defining function observation macro macro accept code expression data structure return code expression data structure defining macro consists simply defining function manipulates data structure programmer every day syntax data notation aspect exists precisely make macro easy writemacros essentially let attach nex meaning syntaxyou think macro giving opportunity transform ast program compilation accurately concrete syntax tree macro enable zerocost abstraction ie abstraction runtime performance cost since operate compiletime macro anything compute returned expression use previouslydefined function make network call call database etclispstyle macro nt thing ccstyle macro nt judge former bitten latterif want know precisely work recommend reading reference clojureorgconsequencesverbosity solved problemthe first consequence concise data literal macro verbosity never get way programming whatever program design considering know code never get tedious able factor repetition noise code often using existing macro using new one famous example gui programming java using swing toolkit knowingly tedious especially nesting component following code us doto macro achieve concision clarity java equivalent still embracing original swing api doto jframe add doto jlabel hello world sethorizontalalignment swingconstantscenter pack show java equivalent would jframe f new jframe jlabel l new jlabel hello world lsethorizontalalignment swingconstantscenter fadd l lpack lshow data literal also work towards goal higher level encouraging write program mostly data instead code make fundamentally flexible regular easier operate instrument data literal helping embed data code make smooth transition code dataa nice example datomic datalog main query language datomic database writing datalog using clojure data literal le concise sql much programmable instance generating advanced datalog query much easier foolproof generating sql query example n moviesexample require datomicapi example simple ordinary query defn actorsofmovie find actor played given movie db movieid dquery datolog embedded clojure code using data literal find actor movieid movie movieid movieid actor personactedin movie db movieid example generating datalog query defn movieswithallactors find movie starring given actor db actorsids let input actorsids mapindexed fn actorid symbol str actor actorid q find movie concat map first input actori map first input actori personactedin movie apply dquery q db map second input extreme example philosophy onyx data processing platform let express entire workflow using dataseparation concern code layout program structurethere macro eliminating boilerplate macro enable design program without anticipate calling code going look making independent choicesso could say macro separate concern program structure writing program reusable flexible composable decoupled etc code look feel clarity concision organization visual layout etc example builder patternwhat happens concern separated programmer face dilemma drag away focus essential problem one dilemma whether use builder pattern let see example thatunderscorejs popular javascript library providing utility manipulating collection example var require underscore var number range keep even number filter number function n return n squaring number map number function n return n n summing number reduce number function sum n return sum n function powerful chaining impractical continuing example imagine want sum square even number smaller reduce map filter range function n return n function n return n n function sum n return sum n see readability problem code display operation nested inside think successiveunderscorejs address problem providing chain operation us builder pattern make code look chained chain range filter function n return n map function n return n n reduce function sum n return sum n value approach solves surface readability problem brings new deeper problem set operation available chain value context extensible making hostile abstraction instance longer contract square sum step single sumsquares step could easily using plain old functionsthe source code underlying operation much harder write reason long would take reimplement robust version chain let see clojure applied problem clojure standard library provides similar function underscorejs def number range filter fn n mod n number map fn n n n number reduce number chaining function call directly nesting look messy j reduce map fn n n n filter fn n mod n range however clojure give u nice tool solving readability problem pronounce thread last macro range filter fn n mod n map fn n n n reduce code much clearer want emphasize map filter reduce exactly function used actually rewrite code previous messy form verify using macroexpand macroexpand range filter fn n mod n map fn n n n reduce reduce map fn n n n filter fn n mod n range also fairly easy implement think expression data structure rearrange desired form implementation top head defmacro start reduce fn inner outer let outer list outer outer list outer list inner reverse outer start neat solution nt compromised program structure order make code pretty composed orthogonal tool solving separate concern syntactic tool macro solve syntactic problem organizing code visually semantic tool map filter reduce function make correct wellstructured programcode data data vizthere famous lisp aphorism code data meaning syntax lisp notation data structure easily manipulated language lisp stand list processing case clojure data structure list vector map make macro easy write clojureanother aspect clojure syntax saw humanfriendly notation structured data clojure syntax good tool data reprensentation data visualizationthis last aspect critical clojure interactive development story evaluate expression clojure repl result presented clojure syntax make easy analyze especially prettyprinted syntaxhighlighted also make immediately available code expression reused exploration persisted source fileswhen macro huge part external tool commonplace language become obsolete macro typically used replacement source code generation transformationdebugging toolssyntax extension transpilersbytecode manipulationannotationsdocumentation generationmacros several advantage area easy install since available librariesthey portable macro limited build tool x editor framework z require little effort create typically take weekend lone developer make library month engineering department big company alltracks language embedding paradigmsevery nontrivial application sooner later reach point served well one programming paradigm part program may need declarative way building ui tree html templating php jsp erb etc whereas another need procedural glue part business logic may well expressed functional style would benefit using logic programming prolog minikanren production rule system computation may need imperative algorithm eg c others best expressed graph computational stepsbecause clojure syntax opinionated semantics remember data structure welcome programming paradigm programmable data structure let user provide implementation paradigm library either building interpreter structure via macro default paradigm clojure dynamicallytyped functional programming ie lambdaexpressions evaluating generic immutable data structure function however many paradigm available library example one syntax host paradigm make much practical compose together implementation share lot language infrastructure runtime editor tooling dependency management code modularization etc could however argue different syntax different paradigm beneficial using separate source file force programmer separate concern case experience typical program different paradigm nt address different concern rather different aspect concernexample web uisfor example one biggest lie told novice web programmer html cs javascript respectively content style logic today web application true trying enforce separation actually creates much complexity eliminates reason separation actually historical modern best practice separate ui component component dom templating style logic javascript world inline style jsx approach colocating codehere example component clojurescript one personal project note plain old clojure build tooling involved making work n require rumcore rum utk requiremacros rumcore rum refer defc defcs guitar tablature component defc guitartab rumstatic rumreactive prop opts key nstrings length stringheights nstrings item content let stringsitems groupby string item divgtab prop range nstrings divgtabstring key str gtrstring divgtabstringinner stringsitems mapindexed fn k item x x divgtabitem style left str x length key str gtabitem k content item whenlet h get stringheights divgtabitemgtabstringheight divgtabnote utk height h saner language stewardshiphistory shown one important guideline developing programming language preserving ability evolve language developer anticipate future need user guy steele articulated well talk growing languagevideomacros play interesting role regard essentially enable user add feature language instance clojure natively ship mlstyle pattern matching encouraging instead combination destructuring polymorphism via multimethods however corematch library provides macro patternmatching really better fitmacros implication clojure user missing language feature particular project write right away instead lobby core developer language make new feature available library everyone agrees feature beneficial well everyone use library eventually may consensus feature added core language time empirical evidence really useful also mean language developer focus longterm strategic evolution language instead solving specific shortterm need userswhat happens user ca nt extend language language developer take various approach handle request user language conservative leave user wanting bad enough especially lead user hack around limitation adding language feature via tooling see example proliferation transpiler plugins j ecosystem language take opposite approach add new language feature quickly possible even worse adding feature readily core language please user short term bad consequence ecosystem long term add complexity language make harder learn beginner harder maintain language developersit creates combinatorial explosion programming style paralyzes programmer writing code use lambda maybe block maybe subclass puzzle reading code written otherssome language feature seem like elegant idea experience prof harmfulas feature get added idiomatic way code evolves significantly encouraging major often breaking change ecosystem php would good example new feature added core language encourages user use even influent minority actually need itin contrast growing language via library mitigates issue nuanced option add feature x leave outhaving said could reasonably argue giving every user ability extend language give power shoot foot seen nt really case clojure far minority clojure programmer write macro leadership language done good job educating community peril macrosfinally growing via library aspect led clojure stable language user nt really asking new feature sense clojure mature older mainstream language like javascript java keep undergoing major evolution welcomed unforeseen consequence summarybecause clojure syntax effective notation data structure serf generic representation structured thought macro used attach new meaning syntax relief programmer many incidental concern unfair advantage clojure ecosystem allowing relatively little effort achieve good stability tooling providing access rich set programming paradigmsagain realize bold claim skeptical would encourage give clojure try make mindfinally noted lot said applies language lisp family clojure
412,Lobsters,clojure,Clojure programming,Git Deps for Clojure,https://clojure.org/news/2018/01/05/git-deps,git deps clojure,git deps clojure,git deps clojure january rich hickey clojure designed empower developer enabling leverage existing library clojure first released manifest strong interop support java eventually tooling leiningen et al arose around procuring java libs maven ecosystem clojure contribs community also adopted maven approach delivering library via artifact hosted well known repository like maven central clojars many benefit like thing programming attendant cost artifact based release predate widespread adoption contentbased addressing system like git without contentbased addressing depend convention release naming weak notion like semantic versioning also reflect nature language like java c require build step prior execution clojure library modern reality clojure development mostly use git use centralized git repos like github bitbucket et al code executable producing consuming artifact creates lot unnecessary friction creating code using let get rid needed today happy announce availability git deps support clojure tool leverage fact toolsdeps use maven dependency resolver instead resolve dependency decouples dependency resolution classpath creation single library publishingprocurement mechanism git repos become source library directly specify git coordinate addition mvn local depsedn deps orgclojuredatacsv giturl http githubcomclojuredatacsvgit sha tool support available library toolsgitlibs securely log git repository host clone repo needed checkout cache per librarysha specified working tree needed resolve transitive deps incorporate cached directory classpath course every commit stable one designate stable point using tag greatly reduces ceremony tooling required share consume library facilitates parallel development sibling library testing speculative fork etc foster greater connection source truth preserving secure centralized hosting stable repeatability caching one get eg maven hopeful git support usher new level agility clojure development many thanks alex miller tireless effort convert idea working system information see
413,Lobsters,clojure,Clojure programming,Implementing Reagent Test Case for JS Framework Benchmark,http://metosin.fi/blog/implemeting-reagent-test-case-for-js-framework-benchmark/,implementing reagent test case j framework benchmark,comparison stefan krause j web framework benchmark project building clojurescript leiningen cljsbuild leinbin sbtbin reagent test application benchmarkjs result result duration millisecond standard deviation slowdown duration fastest name create row replace row partial update select row swap row remove row create many row append row large table clear row slowdown geometric mean startup metric name consistently interactive script bootup time main thread work cost total byte weight closure memory allocation mb standard deviation summary hicada fix,part preparation reagent release inspired comparison one thing implement reagent test case stefan krause immensely popular j web framework benchmark project post document work required add reagent project hopefully helping others add clojurescript library go choice made writing test code open question reagent performance building clojurescript first clojurescript library added project work required get lein working node based build pipeline decided use leiningen cljsbuild reagent also us benchmark javascript based script use npm download deps run build make downloading lein simple possible created leinbin taking example sbtbin provides line j wrapper code download correct lein script depending operating system app built webdriverts used run benchmark code reagent test application test application need need render table row id random label provide button update data table based test application react version similar wrote one file provides function manage data n demoutils def adjective pretty large def colour red yellow def noun table chair defrecord data id label defn builddata idatom count repeatedly count fn data swap idatom inc str randnth adjective randnth colour randnth noun first function generates provided number new row id row retrieved atom keep track last used number data stored record bit faster hash map compare retrieve property defn add data idatom data builddata idatom second function adding new row existing list important bit builddata return lazy seq instead vector nt realized unnecessarily defn updatesome data reduce fn data index let row get data index str label row assoc data index assoc row label data range count data one test case updating every element list data stored vector vector element updated using assoc modify necessary element reduce used range instead using update updatein using assoc directly faster defn swaprows data count data data assoc get data assoc get data data another test case swapping two row list easy cljs persistent data structure nt even need temporary value used j defn deleterow data id vec remove identical id id data remove single item list tested several approach look like simple remove casting back vector fastest even though always go whole list using identical tiny bit faster call additional check calling identical component side implemented two component main hold state two atom row used render table row defn row data selected onclick ondelete tr class selected danger id data onclick fn e onclick id data label data onclick fn e ondelete id data spanglyphiconglyphiconremove ariahidden true compared react implementation chose use multiple function parameter instead single property map containing value save time map construction destructuring nt proper stats precision benchmark nt quite enough see difference change would need investigated using benchmarkjs andor chrome performance profiler another thing like know expensive create click event handler function time function called main component quite long render button test case implement click handler important part local state data ratom selected ratom nil loop render table row let selected data key id row identical id select delete similar remove row function also us identical check row active result result online included result reagent along comparison vanilla j react duration millisecond standard deviation slowdown duration fastest rowsduration creating row page replace rowsduration updating row table warmup iteration partial updatetime update text every row warmup iteration table select rowduration highlight row response click row warmup iteration swap rowstime swap row table warmup iteration remove rowduration remove row warmup iteration create many rowsduration create append row large tableduration adding row table clear rowsduration clear table filled slowdown geometric result performance test quite similar react small overhead excepted comparison react immutablejs would interesting see much overhead due clojurescript data structure due j emitted clojurescript compiler one also note standard deviation test case quite large even much larger react especially partial update case one guess persistent data structure garbage collection might affect startup interactivea pessimistic tti cpu network definitely idle cpu task script bootup timethe total m required parsecompileevaluate page main thread work costtotal amount time spent work main thread includes total byte weightnetwork transfer cost postcompression resource loaded startup speed output size bit bigger difference react one thing improve bit future react used node module allow closure optimize memory allocation mb standard deviation memory allocation result look normal summary think result quite good simple benchmark mostly test rendering speed clojurescript overhead obvious real world application benefit persistent data structure negate overhead nt really given much thought reagent performance recent reagent change based learned benchmark idea test reagent performance future addition improving reagent performance optimizing implementation also possible improve render performance using alternative hiccup compiler like hicada compiles hiccup form react call macro compilation instead interpreting runtime reagent released soon everything ready waiting clojurescript release fix prevent regression using foreignlibs node target
414,Lobsters,clojure,Clojure programming,Call for Presentations: BuzzConf '18,https://github.com/lambdaclass/buzzconf,call presentation buzzconf,join github today sign file permalink zruput ticket buzzconf topic code conduct code conduct cómo organizar una conferencia me ante me ante me ante me ante me ante me ante me ante días ante justo ante de la conf durante la conf después de la conf http githubcomrustcommunityeventsteamblobmasterguidelinestimelinemd topic resource reload reload,conference devs devs functional programming distributed system big data machine learning conference buenos aire argentina dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time buzzconf consists buzzconf workshop buzzconf talk also sister conference zruput telecommunication ticket buzzconf talk workshop available buzzconf topic functional programming distributed system embedded system big data artificial intelligence machine learning profilingdebugging programming language design code conduct please read follow code conduct conference cómo organizar una conferencia me ante definir nombre logo estética crear presencia online armar una página web de la conferencia github redes sociales reservar el lugar armar el evento en eventbrite poner la entradas initial offer la venta abrir la call presentation empezar subir algún contenido redes sociales me ante empezar contactar speaker empezar contactar sponsor en redes sociales tratar de conseguir la mayor cantidad de seguidores difusión me ante confirmar algunos speaker subir la entrada earlybird reservar alojamiento para todos pasajes para speaker locale me ante confirmar todos los speaker armar la grilla de la conferencia con los tiempos de charlas break confirmar cada orador cuanto tiempo va tener para hablar subir la entrada al precio normal aumentar la difusión completar la información de la web me ante comprar pasajes para speaker de afuera segunda ronda de sponsor me ante planificar fotografía video durante la conferencia pedir los speaker que envíen sus diapositivas para exponer durante la conf preguntarles si quieren hacerlas públicas en internet si esa e la política de la conf me ante imprimir folletería carteles mandar hacer swag bolsas pedir la empresas que manden su swag imprimir entradas si se hacen en papel ver el disenio del espacio donde se va desarrollar la conf planificar donde van los banner los stand la mesa de inscripciones la comida etc hacer descuentos sorteos de entradas si sobra lugar aumentar la difusión porque hay mucha gente que espera estar muy cerca de la fecha para anotarse mandar mail la mailing list considerar publicidad paga se pueden publicar la slide anticipadamente para que el público la conozca armar horarios de la conferencia publicar online e informar los speaker qué hora e su charla días ante armar la bolsas de swag hacer backup de todo el material audiovisual que se va proyectar en una laptop para llevar ese día tener listo todo lo que se va llevar la conferencia sticker banner sonido computadoras cámaras etc avisar al catering cuánta gente eligió menú especial chequear con los speaker que todo está bien justo ante de la conf ante de que empiece todo probar el livestreaming si lo hay probar equipos de sonido durante la conf publicar fotos actualizaciones durante la charla para la gente que pudo venir prestar atención al bienestar de los asistentes al cumplimiento del code conduct una persona controla la entrada en todo momento después de la conf enviar una encuesta los asistentes que dejaron mail para ver en qué podemos mejorar publicar los video fotos del evento enviar agradecimientos los speaker inspirado en http githubcomrustcommunityeventsteamblobmasterguidelinestimelinemd conference devs devs functional programming distributed system big data machine learning conference buenos aire argentina topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
416,Lobsters,clojure,Clojure programming,jnREPL facilitates embedding a Clojure nREPL within a Java application,https://github.com/AustinC/jnREPL,jnrepl facilitates embedding clojure nrepl within java application,jnrepl example connecting leiningen maven coordinate,jnrepl library facilitates embedding clojure nrepl within java application api two static method jnreplstartrepl start nrepl server jnreplshutdownrepl shut repl port default default overriden jvm arg example connecting leiningen lein repl connect maven coordinate dependency groupid comgithubaustinc groupid artifactid jnrepl artifactid version version dependency compatible jvm
417,Lobsters,clojure,Clojure programming,25 days of Clojure,https://orestis.gr/25-days-of-clojure/,day clojure,advent code clojuredocs solution github advent code solution clojure mike fikes solution,past couple year tried learn evaluate one new programming language year one nice way found solving advent code puzzle learning new language solving puzzle notable benefit nice day streak build habit small self contained usually solved minute without needing bring dependency get exercise standard library builtin data structure lot get implement wellknown algorithm eg depth breadthfirst tree search graph walking etc get feel performance characteristic since puzzle require intense calculation read solution language choice order learn new trick fun tried elixir clojure case started couple week advance actually learning language library solving older puzzle ready december new puzzle rough list takeaway two solid month daily clojure puzzlesolving took roughly two week get used parenthesis nt notice clojure community friendly experienced help functional programming experience trying clojure case elixir many many similarity time felt like learning new syntax rather new way programming clojure fast even using functional immutable data structure need go faster drop transient version java collection unboxed math operation clojure flexible get immutability default algorithm better expressed mutable data structure also repl integrated editor case spacemacs cider eyeopening try make screencast stream look like solving puzzle really hard put writing make repls seem downright primitive clojure documentation hard decipher clojurecore namespace huge clojuredocs help believe need aproposlike functionality built system first couple week error message bit cryptic still decipher common one incremental work replconnected editor mitigates somewhat also cider builtin debugger easy use saved littering code println statement java huge jvm powerful nt touched ecosystem since remember enterprise software written java robust library pretty much everything want able explore use library higherlevel language interesting unlocks huge amount potential even jdk great standard library pretty much everything reading people code either enlightening experience exercise frustration nt seem dependant author code rather whether using language using fair people solving puzzle aiming readability maintainability end verdict clojure wholeheartedly positive however next avenue want explore actually clojurescript client side probably via reframe also server side nodejs case anyone interested find solution github also find communitycurated list advent code solution clojure finally special mention mike fikes solution crossplatform clojure clojurescript
418,Lobsters,clojure,Clojure programming,"The Bare Minimum, or Making Mayonnaise with Clojure",https://lambdaisland.com/blog/29-12-2017-the-bare-minimum-clojure-mayonnaise,bare minimum making mayonnaise clojure,making mayonnaise clojure managed parenthesis bbrinck say clojureverse place evaluation else automatic indentation jump definition show function signature look documentation rainbow parenthesis staying flow reloadable system state hot loading new dependency reading,making mayonnaiseimagine grandfather great making mayonnaise making mayonnaise since war result truly excellent good old fashioned whisk kept right arm shape throughout decade beating egg oil vinegarnow bought handheld electric mixer hearing friend rave try give go back whisk say get result seems slightly odd next time go ask show us mixerimagine face take one mixer beater start beating stuff hand turn actually idea use mixer took bit seemed familiar started using way used towhat clojure far fetched story perhaps best metaphor could come illustrate difference writing clojure clojure sometimes people approach clojure similar way heard good thing decide try sticking familiar tool workflow hear clojurists talk emacs exotica write strange fetish obscure technology know coding already editor know love thank much want know code language translates clojurei made mistake year ago decided give smalltalk try looked couple implementation seemed come massive environment including ui editor something called image make sense wanted learn language needed thought way stick code source file compile run itbut smalltalk like clojure language complete philosophy creating software specific idea programmer interact environment make strange unfamiliar really want learn one language need dive wholesale never able ass appreciate make stand apart skirting around edge comfort zonethe sad part stuff made explicit kind knowledge passed mentor mentee taught example learning clojure may never realize missingso tell bare minimum setup need writing clojure actually clojure short two thing simply without call managed parenthesis inplace evaluation take note say use emacs vim ed whatever many editor ide provide feature make sure environment feature learn use themmanaged parenthesesmanaged parenthesis mean editor make near impossible unbalanced parenthesis code never ever manually insert closing parenthesisthere several way achieve well known approach called paredit originally built emacs equivalent package major editor different approach gaining popularity le learning curve parinfer general term structural editing find eplanations work detail elsewhere take manage parenthesis really cause mental shift longer think parenthesis instead think block code also called form expression sexps clojure lisp superpower decade people saying treating program text backwards need higher level tool allow u manipulate structure program directly lisp drag halfway take getting used pay massivelydon take user bbrinck say clojureverse found many beginner realize much much productive learn paredit parinfer worked clojure year spare time without structural editing knew paredit existed good sense time investment necessary v productivity differenceit pair programmed experienced clojurists realized much time wasting bug related parenthesis never experiencedin place evaluationmost language repls command line tool let enter evaluate program code one line time great exploration quickly trying thing running command flyin lisp family language well smalltalk concept taken one step integrating repl deeply editor experience allows put cursor next piece code source file evaluate right therebecause lisp uniform structure unambigously single single subexpression send editorconnectedrepl immediately seeing result brings coding new level interactivity interacting full running system inspect update alter even connect production system look state quickly redefine function patch bugyou also evaluate piece code insert result back source file people often say clojure code data focusing manipulation code structure thing like macro equivalence go way data code clojure data structure printed valid clojure expression depending coming either nobrainer mind bender case extremely powerful said lisp superpowerwhat else two absolute minimum honestly want give clojure try make sure using environment feature learn use popular option includecider emacs cursive intellij protorepl atom fireplacevimthere others point blindly adopt someone tell able ass whether tool using clear barthese two thing absolute bare minimum real world setup would recommend thing thesecheck environment itlearn use itmake part workflowautomatic indentationlisp properly indented look lot like python general concensus indent clojure something easily automatedeither way automatically correct indentation line eg pressing tab use something automatically keep indentation whole file date recommend latter emacs called agressiveindentmode jump definitionbefore coming clojure lot ruby ruby looking method invocation hard figure implementation life depends runtime type clojure system always know exactly given function defined editor ask integrated repl jump right file linethis great navigating project well jumping library code better understand work could put couple println statement library code reevaluate never second guess value flowing systemshow function signaturewhen cursor function name editor show somewhere unintrusively signature function look like little bit information arity argument name function documentation need right help stay state flowlook documentationfunctions clojure come builtin documentation core doc library well really want able pull touch buttonrainbow parenthesesmore nice worth mention feature give matching parenthesis matching color really like probably essentialstaying flowif already ahead programmer industry come tooling workflow consider lucky next step make sure stay flow much possible eradicate event upset interrupt repl based workflowreloadable system statea downside dynamically working long running process eventually state accrue inmemory state clojure process longer reflects source file disk could function deleted renamed still exist memory could application state longer reflects valid state program bunch gotchas clojure cause error instance redefining defrecord defmultithis cause code work fine fail soon restart process cause thing fail even though really work case need clean slateinitially take stride restart repl process felt enough pain though look solution end likely componentstyle library manage application state something like component mount integrant combined clojuretoolsnamespace intelligent unloading reloading namespaceshot loading new dependencieswhen developing application especially greenfield apps regularly adding third party library go time add one projectclj depsedn buildboot need restart clojure processthis solved library like pomegranate install hotload new dependency configure leinprofilesclj clojuredepsedn available every projectfurther reading
419,Lobsters,clojure,Clojure programming,"Clojure Numerics, Part 6 - More Linear Algebra Fun with Least Squares",http://dragan.rocks/articles/17/Clojure-Numerics-6-More-Linear-Algebra-Fun-with-Least-Squares,clojure numerics part linear algebra fun least square,gls,another stock problem least square family one connected problem commonly found statistic data analysis machine learning etc regularization weighting similar stuff let see case similar stock problem solvable least square axwc added w basic equation describe example normally distributed noise system zero mean covariance matirx w wbbt could proceeded matrix algebra concluding solution found minimizing lvert b axc rvert know since read previous article series computing working inverse matrix bad bad bad slow procedure often give wrong answer shown smart mathematician problem equivalent problem minimizing norm lvert yty rvert constraint axbyc fair enough help u problem called generalized least sqares problem gls numerically stable done flavor qr factorization exotic u look detail neat thing nt neanderthal come function everything u gls let dge layout row b dge layout row c dv gls b c realblockvector double offset realblockvector double offset solution given clojure vector pair containing x example gls solution x roughly first two decimal printed
420,Lobsters,clojure,Clojure programming,Using Machine Learning and Clojure to Chart the English Language,https://circleci.com/blog/charting-language/,using machine learning clojure chart english language,note publisher doc blog talk gave clojure conj tsne tsne available via coursera senna word embeddings senna algorithm pretty picture place world province state uk india common word strong concentration verb vacation word word print quality image download print download print download print,note publisher managed find old content may outdated andor incorrect try searching doc blog current information machine learning may heard end time start humanity know want buy dog food comment heard relative even comment asked role may usurped favorite question setup wifi yes machine learning big topic contested folk like stephen hawking ray kurzweil gloomdoom eternal life confused grandparent time machine learning technique used get handle datasets massive malicious exactly talk gave clojure conj slide found looking generous handwaving oversimplification english word organized similarity computer found read wikipedia trying reproduce image made joseph turian building work laurens van der maaten geoffrey hinton ronan collobert jason weston goal besides learning make fun artwork flat curious lowlevel view wrote read following couple section swear still pretty highlevel link depth sort thing like good majority family friend requested understand scroll start seeing technicolor image read word graph stare pretty color like editor circleci wonder relates paid day day keep eye peeled future post testing mechanism used build project tsne tsne machine learning technique developed van der maaten hinton tsne reduces dimensionality datasets localized similarity better preserved reduction dimension sound like really foreign concept human actually ridiculously good think painting look painting effectively viewing three dimensional space two dimension human understood vanishing point perspective worked mapping three dimension two poor local similarity poorly preserved imagine instead painting representing three dimension represent okay would willing guess visualizationability imagine pushing envelope dimension maybe many computer problem mass number dimension datasets walk binary park sorta human really like three dimension far prefer two get incredible value take dimension dataset reduce space end useful rather confusing ie tsne able reduce dimension losing le information naive approach first encountered original turian image attending university toronto machine learning course one first exposure subject course available via coursera pleasant introduction field senna word embeddings ability view large datasets great require something rather obvious dataset potentially nonobvious choice dataset wikipedia yes collobert weston turned senna algorithm loose download wikipedia turned largest encyclopedia known human history bunch number bunch number known language model traditionally stored matrix number matrix built word represented decimal digit model useful understandable machine used various prediction like word likely follow word sentence pretty picture original image word throwing caution wind decided see could render possible word laptop unhappy attempt bucked try however able get word render without much heartache chose word based basic criterion one common word english language location world city state country etc number letter symbol rendered dataset different way first closest turian rendered twodimensional dataset turned single image second fourth three image threedimensional dataset rendered color hue color represents nonpresent axis graph three ax x z graph x z becomes color z x becomes color three datasets associated image image come two flavor wall art svg click svg version load browser find word curious cmdf ctrlf window note full print ten mb size hence inlined place world image looking place world laid dimension full set numbered trained model knew roughly eight thousand province state uk india common word common word english language word overlap place world strong concentration verb vacation word word print quality image note original image found varying format png svg download place world print download common word print download full data set print
421,Lobsters,clojure,Clojure programming,experience using ClojureScript REPL compared to vanilla JavaScript,http://techblog.telia.no/blog/experience-awesome-productivity-with-clojurescript-s-repl/,experience using clojurescript repl compared vanilla javascript,telia norge comparison vanilla javascript redux conclusion javascript clojure script writing webshop rebellious product development series,deal clojurescript justify picking niche language recently experienced wow session demonstrating productivity gain clojurescript interactive development enables thanks repl would like share experience never heard modern well designed lisp compiles javascript frontend backend development come repl make possible reload code change run code context live application developing running aside u telia norge norway second largest mobile operator team spent past three year nodejs react eventually redux creating great webshop hardware subscription replace offtheshelf one great success set make also life business customer much better picked clojure clojurescript short story adding ajax call massaging data format needed triggering ui handling result failure classical plumbing work able run code ide live running application accessing changing state testing tiny code change resulted super quick feedback loop enabling convert quickly working code one troublesome part code function formatting application state form backend submitorder required backend error missing data able quickly go running formatting function actual application state easily comparing state formatting output never leaving ide beloved keyboard shortcut needed replicating local variable running part function zoom particular part fixing mistake rerunning worked javascriptredux would used redux devtools explore state code hot reloading update formatting function debugger explore output find bug would likely hardcoded data loose upon code reload commented remote call would click button trigger functionality another case point display error message ajax call failed usually code work first using repl bypassing ui browser able run subscription fetched error message application state supply reagentreact component discovering wrong data path go interactively develop component watching magic browser updating command finger javascriptredux could used react redux devtools look actual data nt know good way debug connect function extracting relevant part state well could never try use debugger typically would add consolelog interactively developing component would work well long would something loose state upon reload direct access application state able effortlessly simulate possible case resubmission call progress success error response ensure correctly handled ui comparison vanilla javascript redux react redux dev tool good hot code reloading work work debugger good friend told application able preserve state even code hot reloaded though experience perhaps local component state global app state simulate user sending supported action redux dev tool believe people might managed get close clojurescript experience even javascript redux never able match page denied hotreloaded despite best effort state reset change ignored mistakenly mutated data oh horror box experience clojurescript much better designed around immutability explicit state management magic repl enables interact live running application ultimate development tool conclusion experience cycle problem discovery troubleshooting fix much shorter clojure clojurescript thanks repl really adopt repldriven development actually deal troubleshooting problem much le since produce small working code change frank also downside read reason picking clojure script benefit drawback considered experienced javascript clojure script writing webshop might want read post rebellious product development series
422,Lobsters,clojure,Clojure programming,Clojure 1.9,http://blog.cognitect.com/blog/clojure19,clojure,spec rationale guide command line tool getting started guide reference toolsdepsalpha complete list contributor adam clements cameron desautels chad taylor david eli lindsey gerrit jansen van vuuren greg leppert jason whitlark johan mena lee yenchin matthew boston ruslan alfakikh steffen dienst yegor timoshenko zhuang xiaodan,clojure available â clojure introduces two major new feature integration spec command line tool spec rationale â guide library describing structure data function support validation error reporting destructuring instrumentation testdata generation generative test generation documentation clojure integrates spec via two new library still alpha modularization facilitates refinement spec separate clojure release cycle command line tool getting started â guide â reference provide quick easy install clojure repl runner use maven local dependency functional api classpath management toolsdepsalpha installer available mac developer brew linux user script platform future information see complete listâ change clojure detail contributor thanks community member contributed clojure first time contributor bold adam clementsandy fingerhutbrandon bloomcameron desautelschad taylorchris houserdavid lindseygerrit jansen van vuurenghadi shaybangreg leppertjason whitlarkjohan menajozef wagnerlee yenchinmatthew bostonmichael marczyknicola momettoruslan alfakikhsteffen dienststeve mineryegor timoshenkozhuang xiaodan
423,Lobsters,clojure,Clojure programming,Referentially transparent CRUD,http://cjohansen.no/referentially-transparent-crud/,referentially transparent crud,immutable database value annotate transaction input resulting sideeffects every single command log,read data datomic need database database different database guess called catalog datomic lingo database datomic term immutable value representing subset fact database typically use view provided ddb conn compressed view current state database representing database immutable value allows read operation become pure example consider following function defn tenant db user dq find count p u p bookingrequesttenant u db user function accepts database value id lookup ref user tell whether user ever tenant function referentially transparent computes answer solely argument argument immutable value score writing data datomic mean calling dtransact conn peer connection immutable value datomic transaction consist sequence either transactor function invocation entity map compile everything go transaction one data structure send one go mean work go putting data database actually go building immutable data structure put database single function call moving last function call various function create edit data become referentially transparent sideeffects contained one place function create data typically perform one following step validate data look additional data process data commit change database one step may find problem prevent change committed mean datacreating function return transaction data also need able communicate potential error validation failure let define contract commandsuccess true commandvalidationdata commandtxdata commanderror allows u easily know function succeeded carrying command nt expect either commandvalidationdata commanderror succeed might txdata sent dtransact conn txdata beauty would trivial add kind sideeffects well like commandemails let try command payload function example let create user require clojurespecalpha myappspecs spec sdef userfullname string sdef useremail specemail sdef user skeys req userfullname useremail defn createuser input let user sconform user input user clojurespecinvalid commandsuccess false commandvalidationdata sexplaindata user input commandsuccess true commandtxdata selectkeys input userfullname useremail us clojurespec validation input fails validation return spec explain data validation data could transformed humandigestible validation message caller side command find nothing wrong passed user generates txdata already user email address need confer database defn createuser db input let user sconform user input cond user clojurespecinvalid commandsuccess false commandvalidationdata sexplaindata user input dentity db useremail useremail user commandsuccess false commandvalidationdata clojurespecproblems via useremail pred useremailunique default commandsuccess true commandtxdata selectkeys input userfullname useremail function read immutable database value figure email taken still referentially transparent however atomic need check happen atomically must made transactor function user likely wo nt signing tempo make worth wo nt worry function create data perform logic creates data break apart datomic rescue imagine two function create command result like second one need consider result first one datomic provides function speculatively applying transaction data database without commiting transaction log def createuser db input def createotherentity dbafter dwith db txdata otherinput warned though end referencing entity id created speculation second set txdata going bad time mitigated degree part avoid pattern usually share insight separate post useful break larger command smaller one either used composed back together mechanic extracted leaving u clean way composing command let start function assumes command dependent resulting transaction data function take sequence function return command execute function sequentially stop first one fails succeed function return combined result defn execcommands executes seq command sequence returning either first failure combination success x args loop x x re empty x commandsuccess true commandtxdata mapcat commandtxdata re let commandres apply first x args ifnot commandsuccess commandres commandres recur rest x conj re commandres function used break user creation example three separate command validate user create user add foo user defn validateuser input let user sconform user input user clojurespecinvalid commandsuccess false commandvalidationdata sexplaindata user input commandsuccess true defn createuser db input let user sconform user input commandsuccess true commandtxdata selectkeys input userfullname useremail defn addfoos db input iflet lookupref useremail useremail input userid dbid dentity db lookupref commandsuccess true commandtxdata dbadd lookupref userfoo userfoo input commandsuccess false defn createuserwithfoos db input execcommands validateuser partial createuser db partial addfoos db input pretty nice broken user creation process three short focused reusable function process done away nested branching tool generating sideeffects must applied significance transact data trick defn processresult result commandsuccess result try let txresult seq commandtxdata result dtransact conn commandtxdata result assoc result commandtxresult txresult catch exception e logerror failed process command result logerror e result assoc commandsuccess false assoc commanderror unexpected error processing result result project currently working annotate transaction stuff like currently logged user ip along configuration data reason processresult also take req may nil passed function generates annotation defn processresult req result commandsuccess result try let txresult seq commandtxdata result dtransact conn concat commandtxdata result dbtxannotations req assoc result commandtxresult txresult catch exception e logerror failed process command result logerror e result assoc commandsuccess false assoc commanderror unexpected error processing result result designed nice streamlined api handling sideeffects need make sure api endpoint app use well app single endpoint enacting sideeffects command endpoint apicommand commandid api serf frontend intentionally rest api work like client post command backend check current user authorized execute named command provided parameter command function called result processed committed http response compiled sent back client endpoint used validation creating stuff editing stuff name http handler look like defn handler req let command commanduser user req commandparams params req commandid keyword req routing id command execute processresult req httpresponse req command saw processresult execute look like defmulti execute fn command loginfo commandexecute commandid command prstr command commandid command multimethod dispatch commandid expose command creating user http would something like require myappcommand command defmethod commandexecute createuser key commandparams createuserwithfoos ddb conn params might noticed log statement execute codebase similar log statement processresult needed input resulting sideeffects every single command log final part puzzle httpresponse function look resulting data structure prepares response client defn httpresponse req command result let resp commandsuccess result status body httpresponsebody command result status false commandvalid result body selectkeys result commandsuccess commandvalid commanderror commandvalidationdata whennot commandsuccess result logwarn unsuccessful command command result resp practice implementation thing first command result commandhttpstatus allowing eg user creation command respond command need control user session also support commandsession key defn httpresponse req command result let resp commandsuccess result status commandhttpstatus result body httpresponsebody command result status cond commandhttpstatus result commandhttpstatus result false commandvalid result default body selectkeys result commandsuccess commandvalid commanderror commandvalidationdata whennot commandsuccess result logwarn unsuccessful command command result iflet session commandsession result assoc resp session session resp observant reader notice call httpresponsebody yet another multimethod allows u implement separate function calculate response body certain command actual example one command defmethod commandexecute createnewbookingrequest key commanduser commandparams inputcreate ddb conn dissoc params venueslug venueslug venueslug params defmethod commandhttpresponsebody createnewbookingrequest command key commandtxresult commandsuccess true commanddata getin txresult tempids bookingrequest dpull dbafter txresult bookingrequestpullspec refencode formatcontacttel sure create referentially transparent crudfunctions language clojure datomic bring feature table make easy fact encourage style programming result testing io function really straight forward fast pure function reasoning code quite easy damn fun work mention app handle email sm message way add stuff commandemails processresults send em clojure datomic got ta love em
424,Lobsters,clojure,Clojure programming,an interesting idea for creating interactive documentation in Clojure,https://gist.github.com/oakes/8db57ac808bf6ec144d627fd83a89da3,interesting idea creating interactive documentation clojure,clojure documentation leapfrog language summary playcljs doc problem play static v dynamic documentation dynadoc interactive example get fixated docstrings special macro reagent try live playcljs playcljs dynadocs conclusion,clojure documentation leapfrog language summary made documentation generator cash clojure dynamism see playcljs doc clojurescript game library example output problem like many often wondered final regret deathbed best guess came dream recently walking across charred earth apocalyptic future world maneuvering around remains le fortunate startled find young girl barely holding onto life murmured something asked repeat said loudly wish clojure project nt crappy documentation take criticism way probably first thought let girl die truth valid point dynamic language bad reputation come documentation surface make sense documentation generator work statically analyzing source code since static language information available statically duh doc tend better perhaps winning move dynamic language play static v dynamic documentation try forget notion documentation primarily static thing library author put web user search engine passively consume instead imagine end user created doc onthefly every dependency project using doc generator realtime developer tool idea behind new project called dynadoc dynadoc run inside clojure script project spinning server localhost show ui find namespaces generates searchable doc instantly possible clojure everything available runtime including docstrings source code even define new function project eval refresh dynadoc see interactive example since running inside project pretty crazy stuff dynadoc allows define code example anything display correct page fully interactive way venerable conj function interactive example people get fixated docstrings source documentation woe disagree completely could write entire novel conj still wo nt good interactive example nonenglish speaker interactive example beat docstrings long shot define example need use special macro made example created thusly defexamples clojurecoreconj add name vector conj alice bob charlie add number list conj add keyval pair hash map conj name alice age best part nt need buyin core team library author start writing example anything clojure usable tool want something clojurescript example even wilder optionally ask dom element example something visual reagent component completely interactive example inside documentation page try live code defn click show number time user clicked button buttontext let state ratom click fn div p clicked click state time button onclick fn swap state update click inc buttontext defexample click withcard card withfocus focus click click reagentcoreunmountcomponentatnode card reagentcorerendercomponent focus card nil example bit weirder withcard option take symbol associated dom element example withfocus option take binding form define small chunk code want exclusively visible example way distracting setup code nt viewable editable body example make sure unmount previous component mount new one focus dom element card magic clojure macro code rewritten evaluated browser every time user edits code browserbased editor example reexecuted component unmountedremounted new data great thing work absolutely anything give dom element take care rest example made game library playcljs check full playcljs dynadocs fact served github page reflects last feature good ol fashioned static html export dynadoc support via export link clojure example wo nt interactive need jvm present clojurescript example compile browser drop mic conclusion clojure dope use life dope
425,Lobsters,clojure,Clojure programming,One does not simply build a user interface: our ClojureScript/re-frame app,https://notamonadtutorial.com/one-does-not-simply-build-a-user-interface-our-clojurescript-re-frame-app-67b1354a2d55,one simply build user interface clojurescriptreframe app,one simply build user interface clojurescriptreframe app part article holidayping unbalancedparen monad tutorial stay tuned usually want build singlepage application language javascript v clojurescript v elm delivered promise leinfigwheel setting good workflow jvm clojure om v reagent v omnext v reframe dommy reagent om library switch hiccup todomvc reagent om omnext reframe cs framework bulma developing singlepage app clojurescript reframe reframe tutorial guide routing navigation reframe documentation active bidi pushy tutorial j pablo fernández form validation controlled uncontrolled component closing thought,one simply build user interface clojurescriptreframe apppart article discussed motivation build holidayping design development process back end erlang application followup facundo main dev focus user interface learnt building itreach via twitter unbalancedparen comment interview request monad tutorial stay tuned discus vote lobster reddit hnbefore getting detail couple disclaimer order coworkers done front end year primarily back end developer particularly last time worked singlepage application angular king vaguely knew react idea never came close using italthough threw wizard fancy yearly calendar view application typical crud exactly kind thing usually want build singlepage application knew choose spa anyway paid project optimizing resource efficiency learninglanguage javascript v clojurescript v elmthe first big decision programming language javascript default option even solid knowledge language coming couple year nodejs daily work platform becoming productive front end javascript developer notable feat tooling even language keep moving foot engineer get server time time feel like throwaway knowledge like previous angular experience little use today want fashionable javascript end using transpilers anyway use different language altogether mean using erlang already like mind throwing weirdness mixelm always tempting choice u learning entire language one different others already know much take side project whose goal get familiar erlangand clojurescript already fluent clojure experience clojurescript emacs already prepared move parenthesis delivered promise lein new reframe holidayping took setup workflow live repl hot code reloading thanks primarily leinfigwheel advanced javascript compilation simpler disparate tool need job javascript also requires smaller effort setting good workflow jvm clojureom v reagent v omnext v reframenext library framework build ui could gone simple dom manipulation library like dommy decided risk build singlepage app therefore looked react wrapper reagent om afford build prototype tool settle reviewing documentation example getting opinion friend web gandalf said engineer pick library time given themreagent right away seemed idiomatic clojure relying mostly plain data function case reframe pure function om used lot object protocol reify javascript interop reagent also used lovely hiccup syntax describe html data om leaned function default although library switch hiccup lastly om seemed require better knowledge react lifecycle added another layer get familiar quick comparison todomvc code illustrates gut feeling go reagent rather omso leaned towards reagent om provide react wrapper real choice omnext reframe otherwise come architecture background effectively caught great explanation mike thompson author reframe clojurians slack absolutely use reagent application simple enough use reagent v bit application application start get complicated start create architecture add control logic state management c part even think question becomes architecture better reframe people prefer architecture would answer yes fair enoughi think danger arises process conscious someone creates dog breakfast architecture even know done many people privately admit happened swapped reframe get structure back advice application little complicated sure make conscious choice around architecture one way another using onecss frameworkfor style went bulma wanted something lighter bootstrap specifically javascript bulma simple easy use feel lightweight look good combination hiccup meant pulling beautiful ui without html cs javascript component conveniently built moving clojure data around emacsperhaps one downside many prebaked fancy component like bootstrap kind made choice anyway using clojurescript first place wanted complex component either coded tag list input avoided eg typeahead selects developing singlepage app clojurescript reframei needed read first reframe tutorial get started felt like reframe built concept already familiar clojure became reasonably productive matter day amazing considering hardly knew first thing react guide provides good overview frameworkas mentioned workflow amazing write pure function describing html component clojure data literal figwheel auto reloads want play around dependency interop javascript browser apis switch tab repl running instant gratification wayat first reframe structure little overwhelming event subscription effect specially took find justification subscription handler since time trivial read database think helped read enough time design goal reframe keep view dumb decoupled state possible light piece started fall place reframe handle dirty work sideeffects declare need done function return data bonus code becomes easier test one thing quite like reframe definition regevent regsub regfx regcofx set hidden application state prefer standalone function pas map data structure single reframe initialization step force require namespaces side effect produce feel idiomaticwhile reframe opinionated framework provides lot structure still design aspect left programmer following note decision make lot figured along way may better way critique suggestion certainly welcomerouting navigationperhaps complex part front end application properly handling navigation also place pay penalty using spa framework build application requires browserlike logic ie multiple multiple entry point based url working backforward button etc initially simple followed reframe documentation add activepanel value application state update user produce navigation event eg select tab make main view show proper component based activepanel current value def panel defn highlevelview let active reframesubscribe activepanel fn div divtitle heading get panel active enough get going first concern fetch different data server based selected panel ie channel list get apichannels calendar channel mychannel get apichannelsmychannelholidays etc first idea came mind trigger request event inside component view function directly philosophy keeping logic viewsasking reframe slack channel got suggestion fetching required data user enters application load inmemory appdb use source truth instead synchronizing server every step entirely convinced especially application grew bigger better polluting view function logic enough move forwardeventually though api reached point approach impractical inefficient multiple endpoint le mapped different view ui load data cover every possible navigation path moreover distinct view time bring url expected browser behavior proper routing interacting history api turned bidi pushy based tutorial j pablo fernándeznow needed way specify data fetch route without cluttering view came generic event handler using multimethods reframeregeventfx navigate fn key db newview trigger loadview event case data server required dispatch loadview newview update browser history api switch given view sethistory newview set current view appdb dom updated db assoc db loadingview true currentview newview defmulti loadview create multimethod implement different event handler based view keyword fn cofx view view reframeregeventfx loadview fn cofx newview delegate event handling proper multimethod loadview cofx vector newview defmethod loadview default key db default nt load anything db assoc db loadingview false defmethod loadview channellist navigating channel list fetch channel httpxhrio method get uri apichannels onsuccess channellistsuccess even though felt bit hacky seeing view function become cleaner somewhat validated approach opinionated framework though wished recommended way handle use case probably frequent one maybe find form validationsthere must task repetitive writing form web application specially many crud component writing couple obviously started looking way build reusable component would create based specification managed resorting multimethods method would render differently based input type text password select etc api ended looking like formsformview submittext register onsubmit registersubmit field key email type email validate validemail required true key password type password required true key passwordrepeat type password label repeat password validate matchingpasswords required true formview maintains local state atom submit button clicked onsubmit event triggered passing current input valuesit took couple iteration properly integrate component rest app specially needed prepopulate data coming view back end response one area get bit familiar react internals example learning controlled uncontrolled component introducing loadview handler described previous section kind issue went awayfinally needed way introduce reusable validation form component without breaking logic view rule found encapsulating validation subscription handler worked really well could specify validation part form specification subscribe change style erroneous input disable submit button also use validation outside form reframeregsub validrequired fn db value stringblank value false field required true reframeregsub validform fn form field field getvalidationsubs form map reframesubscribe doall fn validation every true map first validation closing thoughtsthis modest project reveal higher truth instead reinforced idea reminded u thing tend forget liked gave u better perspective used working mainly back end engineer time write front end apis user interfacesa good design model domain problem trying solve rather accommodate immediate client need engineer expect user experience reveal aspect domain missed unforeseeable plainly exist design stage need ui able poke around application see feel right change model accordingly case soon started use front end realized relationship entity turned around interesting made change code became simpler way consideredthis news front end take lot work aiming simple ui one covered fraction application surface still required work way trial error back end dumbest front end application take non trivial amount work get right provide adequate user experience traditional serverside application hand becoming easier easier put together point arguably becoming extinct
427,Lobsters,clojure,Clojure programming,"Workshop report: Hi-perf Clojurescript with WebGL, asm.js and Emscripten",https://medium.com/@thi.ng/workshop-report-hi-perf-clojurescript-with-webgl-asm-js-and-emscripten-a545cca083bc,workshop report hiperf clojurescript webgl asmjs emscripten,awareness understanding overhead idiomatic language pattern criterium persistent v mutable datastructures typed array imagedata http webgl thinggeom,come optimization generally two prevailing camp optimize early optimize late latter far larger group good argument case main argument used optimize late crowd optimized code harder read harder maintain le flexible often contains bug often code base drastically impact performance hand optimize early crowd argues slow reality never exist isolation scattered around hard find hence optimizing usually limited piecewise microoptimizations therefore requires large amount refactoring retesting avoided simply aware performance critical section design implementation matter better understanding language construct algorithm machine actually operates therefore write efficient rather functionalworking code first place system response time areshould part design spec given time budget eg often done game development embedded software hard real time limitation argue bad thing record trying ignorant either way unconsciously aim happy compromise polar extreme mind part first exercise looked awareness understanding overhead idiomatic language patternsthe textbook approach encoding data grid clojurescript using nested vector easily processed using map reduce produce next generation simulation accessing individual grid cell also straightforward using getin grid x however gol simulation need access cell cell neighbor order compute new state cell x grid use getin result creation temporary clojurescript vector object vector lookup coordinate per frame exercising huge pressure garbage collector addition since getin take lookup path length work polymorphically using protocol method invocation also incurs call reduce resulting even temp object iteration loop load protocol dispatch function internal use get altogether lot way much work simple index lookupin situation lookup path static case could write macro version getin expanding lookup call compile time thereby removing least overhead vector allocation use reduce runtime benchmarking example criterium clojure somewhat differentfaster protocol dispatch clojurescript macro version result v default getin faster often thing relegated microoptimizations way considering core function like getin heavily used throughout clojurescript application aware inherent cost useful help u looking alternative solution neededbtw one intermediate step taken speed simulation using transduce instead map reduce compute number alive neighbor cell however ended actually slower case looked reason yet v mutable datastructuresthe obvious improvement speed simulation using flat vector encode grid calculate cell index coordinate much like pixel buffer give u better cache locality instead getin could use nth gain speed somewhat simpler codethe final step leaving stage exercise introduction j typed array creating typed view byte buffer updating canvas via drawing api making use direct pixel manipulation via canvas context imagedata since data simulation grid pixel stored typed array switched use loop instead map reduce thereby removing million internal function call altogether gained speedup compared originala live version exercise http please aware ui naive mode largest grid size completely freeze second thing talked avoid keywords collection function use get instead use named function instead closure mapreduce fnsprotocol function dispatch overheadloop v doseqdeftype v defrecord code size memory efficiency protocol controlled use set volatile achieve mutabilitywebglto anyone interested directly utilizing gpu browser webgl huge fascinating topic also daunting newcomer graphic programming since efficient use requires multitude prerequisite knowledge terminology geometry linear algebra spatial thinking multiple space coordinate system lowlevel data organization opengl state machine option gpu processing pipeline knowledge glsl shading language color theory etc actual coding often theory moment alevel math knowledge come back knocking door lot take especially workshop tried cover core topic altogether probably spent time put theory practical use help various thinggeom example later walked early prototype webgl game written clojurescript going advanced topic incl creating mesh geometry scratch creating pathfollowing camera etc
429,Lobsters,clojure,Clojure programming,Flare: Clojure Dynamic Neural Net Library,http://aria42.com/blog/2017/11/Flare-Clojure-Neural-Net,flare clojure dynamic neural net library,tl dr flare pytorch simple bilstm classifier many need another neural net library tensorflow dynet simple flare example flare neanderthal library lstm cell performance stanford large movie review dataset glove vector flare traineval script pytorch one adadelta bump test next paper,tl dr wrote flare dynamic neural net library clojure currently nontrivial thing pretty fast faster pytorch cpubased simple bilstm classifier although pytorch many feature stable need another neural net library year since directly wrote large piece software one goal year one surprising thing changed softwarewise time python become defato language lot machine learning work presumably lot due strong autograd neural net library like tensorflow pytorch dynet several others delegate native code performance really like pytorch clean interface generally prefer amongst popular neural net library wanted primarily work clojure incredibly productive lot offer building large mlsystems since fun made unpragmatic choice write something scratch looking jvm option dynamic neural net none quite felt right level simplicity pytorch since fun made unpragmatic choice write something scratch think result share lot pytorch feel like made functional programming language also appears cpu workload tried much faster think clojure functional language generally lot offer ml mlrelated work think absence good nonpython choice made harder simple flare example like autograd neural net library implicitly define graph operation tensor leaf either constant input model parameter nonleaf node represents automatically differential operation matrix multipication sigmoid transform etc simple example flare n example require flarecore flare flarenode node flarecomputationgraph cg flareinit def x nodeconst define vector length def nodeconst define matrix def z cg x z mx value z return shape z return computation happens eagerly need call forward node operation happens soon great graph node created disable eager mode prefer lazier computation like pytorch others nearly math operation actually happens native code case using intel mkl via awesome neanderthal library however plug different tensor implementaitons eg example slightly verbose compared pytorch longer piece code get expressiveness like pytorch one core abstraction module close parameter build graph given input flare module close module parameter know generate graph input lstm cell implementation look like see minor edits clarity defn lstmcell model inputdim hiddendim let catdim inputdim hiddendim stack input output forget state params one affine module w f x prev input b f input gate moduleaffine model hiddendim catdim zero flarezeros hiddendim initoutput nodeconst zero initstate nodeconst zero reify rnncell addinput input lastoutput laststate let x cgconcat input lastoutput gate modulegraph input gate x split f state iof state cgsplit gate hiddendim split iof input forget output inputprobs forgetprobs outputprobs cgsplit cgsigmoid iof hiddendim hiddendim combine hadamard forget past keep present state cg cghadamard forgetprobs laststate cghadamard inputprobs cgtanh state output cghadamard outputprobs cgtanh state output state inithidden initoutput initstate despite simplicitly implementation incredibly efficient since nearly floatingpoint operation happen single matrixvector multiplication example building simple bidirectional lstm sentiment classifier given sentence using module defn lstmsentclassifier model wordemb lstmsize numclasses nodeletscope letscope parameter get smart nesting name embsize embeddingsembeddingsize wordemb numdirs inputsize numdirs embsize hiddensize numdirs lstmsize lstm rnnlstmcell model inputsize hiddensize hidden logits moduleaffine model numclasses hiddensize reify modulepmodule graph sent build logits let input embeddingssentnodes wordemb sent output rnnbuildseq lstm input numdirs train train meta hidden last output hidden train cgdropout hidden hidden modulegraph hidden logits hidden build classifier check parameter using model model act sequence paramname parameter pair def model modelsimpleparamcollection def embed loadwordembeddings somefile def classifier lstmsentclassifier model emb paramname parameternode paramname shape parameternode model lstminput gatesb hidden logitsw lstminput gatesw hidden logitsb performance big surprise flare performance relatively strong compared pytorch faster model built flare optimized obvious thing flare still lot low hanging fruit suspect performance win relative pytorch coming graph construction pytorch flare fallback intel native mkl cpu graph construction happens host language python clojure pytorch flare differ performancewise make large difference dynamic neural net graph construction happens input simple example compared simple bilstm sentence classifier task flare pytorch data binary sentiment data using stanford large movie review dataset glove vector flare traineval script pytorch one note iteration run forwardbackwards training data also evaluates traintest set mix forward versus backward computation recent mpb laptop running script yield following average iteration time iteration run library sec iter loss train acc test acc pytorch flare performance difference suprising difference loss function value traintest accuracy given model data identical tried hard make two implementation close possible choice optimization hyperparamters used adadelta either side thing account parameter initialization b bug either library suspect difference accuracy mostly due different choice parameter initialized also added bump test verify gradient endtoend model accurate since easy subtle bug yield performance point two lower next sure world need another neural net library interested building long fun hitting interesting challenge list thing like get gpu support neanderthal support many platform cuda opencl etc straightforward autobatching like autobatching idea described paper start autobatching computation show sign speeding training substantially quite happy design want take time think cleaner approach autobatching model obvious one first model built flare lstm variant need yet
430,Lobsters,clojure,Clojure programming,Gaussian Processes with Clojure,https://www.yieldbot.com/blog/gaussian-processes-with-clojure/,gaussian process clojure,gaussian process clojure previous blog post gaussian process clojure preliminary sampling multivariate gaussian distribution sampling function gp closing remark,gaussian process clojure james dunn january u yieldbot data team excited usingâ gaussian process various machine learning andâ forecasting problem reading book gaussian processesâ machine learning rasmussen williams available come matlab code â thought would fun useful work examplesâ clojure since use also good opportunityâ try clojure matrix library corematrix showâ little plotting library vizard introduced aâ previous blog post ultimately want time series forecasting post focus sampling function gaussian process willâ address regression forecasting subsequent post follows covered detail chapter gpml code post available gaussian process gaussian process generalization gaussian probabilityâ distribution describes property function instead ofâ random variable like gaussian distribution completely specified aâ mean function covariance function kernel â choosing form let usâ control property function sample gp supervised learning eventual goal training data thatâ consists input feature associated output â assume scalar use information find function take new inputâ accurately predict corresponding output forâ gaussian process mean need find mean covarianceâ function give u gp describes function propertiesâ want eg smoothness periodicity adequately fit data sound really neat idea defining distribution fromâ sample function something hard timeâ wrapping mind around surprisingly actually fairly simpleâ clojure preliminary first set clojure environment follows need dependency projectclj file netmikeracorematrix netmikeravectorzclj yieldbotvizard library corematrix use matrix vectorâ operation linear algebra default implementation ofâ corematrix us pure clojure data structure nice theâ best thing efficient numerical computation also support numerical operation need fortunately library definesâ set protocol used implement corematrix functionsâ efficiently using favorite java matrix library useâ existing implementation called vectorz ourâ second dependency final dependency little plottingâ library vizard making pretty picture half fun start repl execute require clojurecorematrix clojurecorematrixprotocols mp vizard core refer plot plot import javautil random also need run msetcurrentimplementation vectorz make sure corematrix us correct implementation sampling multivariate gaussian distribution started learning gps initially focused notion distribution describes function realized mean much wanted actually calculate thing another definition gpml initially quite mysterious defined one collection random variable finite number jointly gaussian sound nearly sexy evocative first read going process sampling gaussian process became clear descriptive useful definition sample function gp actually sampling value function point input space perhaps obvious start realization made everything clear single input point sample value like sampling gaussian distribution mean variance value number point jointly gaussian sampling value set point like sampling multivariate gaussian distribution mean covariance matrix understanding simple point made second definition appear much natural forgetting gaussian process moment take gaussian distribution mean covariance write code sample vector first generate vector independent sample gaussian distribution function defn samplegaussian n let rng random repeatedly n nextgaussian rng transform sample desired multivariate gaussian using lower triangular matrix cholesky decomposition covariance matrix adjoint cholesky decomposition one reason need matrix library function take mean vector covariance matrix decomposes covariance generates gaussian sample us transformation convert sample meanâ covariance want defn samplemultivariategaussian mean cov let n count mean e mscale midentitymatrix n l l mpcholesky madd mmatrix cov e result l u mmatrix samplegaussian n sample madd mmatrix mean mmmul l u mtonestedvectors sample extra little step create identity matrix scale small number adding covariance matrix cholesky decomposition help stabilize computation find cholesky function returning nil decomposition failing might try slightly larger scale factor sampling function gp sample gaussian process begin gp covariance function squared exponential example seen gp prior chosen mean function zero often accompanied phrase without loss generality one least favorite thing read rarely obvious case case mean zero prior fine always standardize input mean zero variance one reference prior rest post indication bayesian approach taking future post combining gps like data get posterior process real object interest choice kernel function however something glossed since critical characterizing type function want gp prefer particular choice biased towards smooth function input point sample value def testxs range mean vector covariance matrix defn squaredexponential lambda x mathexp mathpow x lambda defn covariancemat f x y let row count x col count y partition col range row j range col f nth x nth y j defn sqexpcov l x y covariancemat partial squaredexponential l x y def priormean repeat count testxs def priorcov sqexpcov testxs testxs variance length scale set worry hyperparameters another post executing samplemultivariategaussian priormean priorcov give u sample gp plot example vizard first collect data format vizard use defn vizardpts x y col map fn x x x col col x y defn linedata x mean cov numsamples label flatten conj range numsamples vizardpts x samplemultivariategaussian mean cov str label sample vizardpts x mean str label mean diagonal element covariance matrix give u variance input point use plot confidence band little boring case variance everywhere subsequent post interesting incorporate observational data covariance matrix defn confdata x mean cov let stddev map mathsqrt mdiagonal cov map fn x x x x mean stddev finally start plot server startplotserver display result function defn plotgp linedata confdata plot plotvizard marktype line color linedata associn data name confidence value confdata associn mark type area data confidence property enter x scale x field x scale field scale field interpolate value monotone fill value update fillopacity value basic vizard function sufficient graph function associng extra data mark vega spec show confidence band let priordata linedata testxs priormean priorcov prior priorconfdata confdata testxs priormean priorcov plotgp priordata priorconfdata mean function gp zero function nonzero almost input sampled point could anything though likely closer zero far away fixed point sample sample gaussian distribution mean zero variance still bit magical get nice smooth function process covariance function come sample value multiple input point covariance function make sure value sampled nearby point similar context nearby defined length scale see work near end post choice squared exponential function defines particular form similarity different choose kernel select function additional property example time series forecasting needed function reflect weekly seasonal variation data could use covariance function treat point day apart similar try small modification covariance function replace square exponential absolute value see happens defn absexponential lambda x mathexp mathabs x lambda defn absexpcov l x y covariancemat partial absexponential l x y def abspriorcov absexpcov testxs testxs let priordata linedata testxs priormean abspriorcov prior priorconfdata confdata testxs priormean abspriorcov plotgp priordata priorconfdata turn little change take u gp prefers infinitely differentiable function one give u function merely continuous differentiable think pretty neat kernel member class covariance function use function class tune smoothness function sampled gaussian process closing remark know sampling gp ever useful practice butâ going exercise producing least educational entertaining upcoming post take next step incorporate observation find posterior gaussian process solve simple regression problem
432,Lobsters,clojure,Clojure programming,Magic: a high-performance CLR Clojure Compiler,http://nas.sr/magic/,magic highperformance clr clojure compiler,late last night code boids gist strategy limitation static method modified assembly juggling comment end invokes function static c method invokes intrinsic next step remaining special form environment ast node analysis pass environment platform implementer binding ast node documented toolsanalyzer ast quickref magic pass,taking break post outlining inner working compiler report exciting news late last night first time clojure code compiled magic successfully ran iphone tl dr confirmed magic achieve original goal bringing clojure restrictive environment particular code prototype survived unity translation native code suited io expected possible seeing running physical device put rest lingering doubt code demo implementation classic boids flocking algorithm available gist brevity list inline boidcore first prototype wrote using clojuremagic representative namespace look like magic complete stand reason get namespace like work yet boidsbuild namespace used produce iosready assembly see body function macro copied boidcore lot compilerspecific machinery surrounding reproducible latest magic commit time writing built assembly within unity using arcadia repl boidbehaviourcs unity component invokes clojure code attached boids pass local transform boidscoreupdate method strategy additional work done make demo function given current state magic none reflects realworld workflow would like given finished compiler rather document process getting work magic exists today limitation demo restricted part clojure require runtime support namely c interop intrinsics macro special form let looprecur magic support namely invoking clojure var looking var requires support clojure runtime requires clojurecore loaded magic compile yet usual us magic problem magic usually run within stock compiler lean gain access clojure runtime exported context possible way getting clojurecore run iphone without magic able compile even given limitation magic code fairly expressive namespaces like arcadialinear completely useable lot call site would normally var get turned inlined bytecode magicintrinsics including aget aset int inc magic macroexpander working macro like boidsbuildtransforms also fair game static method without runtime support compile proper clojure namespace instead demo compiles c class static method contain body function default analysis pass modified generate static method instead instance method boidsbuildstaticmethods macro designed generate clr type named static method function assembly juggling shenanigan involved preparing assembly first note actually emit three assembly comment end boidsbuild get around inability invoke var function call another function must treat interop flock function invokes separation cohesion alignment function static c method requires boidsrules assembly compiled first loaded memory true update invokes flock bit tedious work uncomment form turn emit assembly disk separately resulting assembly ruledll flockingdll boidsdll merged single assembly using ilrepack dropped unity project referenced ide completely useable c even participate intellisense boidbehaviourcs call update method passing transform boidbehaviour component attached boid gameobjects positioned n three dimensional grid scene work editor survives export far unity concerned dealing c code one assembly full il know convert needed add makearray intrinsic everything else converted without issue next step goal something look like boidcore work without additional intervention get magic need able compile whole namespaces closure dynamic call site remaining special form way convert compiling clojurecore real hurdle magic approach maximizing flexibility bytecode emission mean make il look ever need look survive translation onto platform like io early demo extremely promising milestone indication right track determine user meant analyzer track environment produce ast node organizes extendable analysis pass magic leverage environment form different meaning depending occurs consider form str b following example example defn jointwo b str b example let hello b world str b example def hello def b world str b three example b refer function parameter local variable var respectively form considerably different meaning line generate different bytecode depending source appears another way think sexpressions alone insufficient analyze need additional data structure represent form appears source result toolsanalyzer analysis function generally take two argument form analyze environment form basic structure environment revealed empty environment produced clojuretoolsanalyzeremptyenv n magicanalyzer defn emptyenv return empty env context ctxexpr local n user environment track form context local available form namespace form analyzed context indicates whether value produced form used ctxexpr ctxreturn discarded ctxstatement body form implication kind bytecode generate line keep clr stack balanced local hashmap symbol ast node local binding initialization expression connects binding let loop form parameter fn form symbol body n track namespace form analyzed make var lookup possible environment become embedded ast node toolsanalyzer produce additionally global environment determines available namespaces mapping available analyzer life magicanalyzerglobalenv n magicanalyzer defn buildnsmap mapv vector nsname mapping nsmap alias reducekv fn k v assoc k nsname v nsaliases n nsname allns defn globalenv atom namespaces buildnsmap platform implementer binding toolsanalyzer expose following dynamic variable implementers bind parse createvar var us internal machinery expose implementers provide customized behavior needed desugars host expression eg turn method target argument target method argument expands macro inline function importantly participates magic intrinsics system expand invocation might intrinsic implementation var like would expand default call numbersadd numbersmul performance reason static method invocation faster var invocation magic emit optimized bytecode inline many var invocation avoid even overhead invoking static method macroexpander leaf form let intrinsics system pick later remaining binding anything new interesting interesting ast node magic analyzer life magicanalyzer namespace wrap toolsanalyzer entry point magicanalyzeranalyze user pprint magicanalyzeranalyze hello op const env context ctxexpr local n user type keyword literal true val hello form hello toplevel true simplest usage take single form provides abstract syntax tree describing asts special type data structure simple clojure hashmaps analysis literal keyword hello reveals kind form op const environment analyzed env context ctxexpr local n user information invoking var produce bigger hashmap user pprint magicanalyzeranalyze str op invoke form str env context ctxexpr local n user fn op var assignable false var clojurecorestr meta added n object namespace clojurecore name str file clojurecoreclj static true column line tag systemstring arglists x x y doc args return empty string one arg x returnsn xtostring str nil return empty string thann one arg return concatenation str value args env context ctxexpr local n user form str args op const env context ctxexpr local n user type number literal true val form child fn args toplevel true key familiar op form env new key specific invocation namely fn args fact toolsanalyzer node make guarantee docstring every node ast map guaranteed following key op keyword describing ast node form form represented ast node env environment map ast node additionally ast node contains subnodes guaranteed child vector key ast node mapping subnodes ordered make sense const node earlier child invoke expression fn args key actually deeper ast node vector ast node op key beyond structure ast node completely dynamic approach benefit clojure data give enough regularity run generic recursive walk deeply nested tree content different ast node type documented toolsanalyzer ast quickref personally learned structure experimenting repl magic pass toolsanalyzer analyzes clojure namely subset clojure hostspecific consider analysis datetime user pprint magicanalyzeranalyze datetime op const env context ctxexpr local n user form systemdatetime toplevel true child type class literal true val systemdatetime magic determines const ast node resolve datetime c type systemdatetime something future compiler phase need generate correct bytecode information come additional analysis pass magic build top toolsanalyzer turn see form would analyze default user pprint magicanalyzeranalyze datetime magicanalyzeremptyenv identity op maybeclass class datetime env context ctxexpr local n user form datetime toplevel true op maybeclass class symbol datetime host interop analysis look default toolsanalyzer idea design toolsanalyzer approach provide complete analysis hostagnostic form generic analysis hostspecific form facility schedule additional pass top toolsanalyzer schedule pass descend basic ast initially analyzed using child key ast node know node recurse replaces ast node find way tree way tree depending scheduled pass analysis pas clojure function additional metadata function responsible correct analysis type literal magic magicanalyzeranalyzehostformsanalyzetype n magicanalyzeranalyzehostforms defn analyzetype analyze foo type passinfo walk post uniquifylocals key op child class ast maybeclass op let targettype ensureclass name class form ast merge dissoc ast class child vec remove class child op const type class literal true val targettype form targettype ast function take ast node input return new ast node replace case op key maybeclass attempt resolve type return new const ast node otherwise return original ast unmodified metadata determines walk happens toolsanalyzer us information optimization case order pass matter case analyzetype happens uniquifylocals pas magic pass collected magicanalyzerdefaultpasses user pprint magicanalyzerdefaultpasses magicanalyzeranalyzehostformsanalyzetype clojuretoolsanalyzerpasseselidemetaelidemeta magicanalyzeranalyzehostformsanalyzehostinterop magicanalyzeranalyzehostformsanalyzehostcall magicanalyzeranalyzehostformsanalyzeconstructor magicanalyzerincrementargids magicanalyzeranalyzehostformsanalyzehostfield magicanalyzeranalyzehostformsanalyzebyref magicanalyzernovelcsharpoperators magicanalyzercollectvars clojuretoolsanalyzerpassesuniquifyuniquifylocals magicanalyzertagcatchlocals magicanalyzernovelgenerictypesyntax magicanalyzerintrinsicsanalyze clojuretoolsanalyzerpasseswarnearmuffwarnearmuff magicanalyzerliteralreinterpretationanalyze pass implement feature like magicanalyzernovelcsharpoperators analyzes b equivalent clunkier b others implement optimization like magicanalyzerliteralreinterpretationanalyze reinterprets literal possible avoid needle cast magicanalyzerintrinsicsanalyze implement magic intrinsic machinery set pass fed clojuretoolsanalyzerpassesschedule construct function take ast node run pass set correct order return new ast node correct binding place global environment established need produce ast ready turned symbolic bytecode n magicanalyzer def scheduleddefaultpasses schedule defaultpasses defn runpasses ast scheduleddefaultpasses ast defn analyze form analyze form emptyenv form env analyze form env runpasses form env passesfn binding anacreatevar fn sym env doto intern n env sym resetmeta meta sym anaparse parse anavar var withenv globalenv passesfn anaanalyze form env
433,Lobsters,clojure,Clojure programming,Clojure in Unity,https://github.com/arcadia-unity/Arcadia,clojure unity,arcadia status getting started instruction community usage github wiki gitter contributing contributor license agreement github cla pull request contributorsmd name introduced ztellman legal contributor,arcadia integration clojure programming language unity game engine status arcadia beta quality software encourage follow getting started instruction try community usage arcadia documented github wiki community gitter also helpful great place ask question contributing thinking submitting code arcadia thanks excited help first contributor must read agree contributor license agreement based github cla ensures code submit remains useable arcadia community without issue confirms anyone use contribution anywhere free forever contribution infringe anyone else right retain ownership contribution read agree submit pull request adding name github id contributorsmd following commit message read agree term arcadia contributor license agreement need review merge contribution send u name project introduced strange loop clojureunity name arcadia suggested u soon ztellman eternally grateful legal copyright tims gardner ramsey nasser contributor licensed apache license version license may use project except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license
434,Lobsters,clojure,Clojure programming,Holiday Ping: how we implemented our first open source app with Erlang and Clojurescript,https://notamonadtutorial.com/holiday-ping-how-we-implemented-our-first-open-source-app-with-erlang-and-clojurescript-fad5b66fc325,holiday ping implemented first open source app erlang clojurescript,holiday ping implemented first open source app erlang clojurescript lambdaclass holiday ping github unbalancedparen monad tutorial stay tuned background project holidayping open source spinoff project throttle reconnections backend language erlang v elixir new ruby literature guide process learning erlang application supervisor structure rest api cowboy rest handler reminder checker error kernel app reminder router genevent erlang anger book provide much benefit worker pool avoiding throttling issue still open database hiding database behind orm want explore handle configuration difference channel inheritance table inheritance limited plain table hstore hstore jsonb json rest api identifier still work authentication authorization jwt suspicious fond json several article store random string database le issue may simpler nested resource test,holiday ping implemented first open source app erlang clojurescriptafter almost ten year working developer different company two year ago started company lambdaclass wanted freedom choosing type project team work withthat today special day take break regular interview celebrate release first open source application holiday ping facundo olano main developer application application written two best programming language know clojure erlang favorite database postgresql post written tell journey lesson learned backend side similar post frontend forthcoming find issue want help check githubreach via twitter unbalancedparen comment interview request monad tutorial stay tuned discus vote lobster reddit hnbackgroundearlier year joined lambdaclass buenos airesbased software consultant founded ago colleague schoolmate lambdaclass special interest distributed system exclusively erlang shop project implemented beam languagesalthough recent background microservices functional language mainly clojure needed time ramp gain experience otp platform underlying philosophy started working lambdaclass project right away aspect learning process specially related architecture design best experienced greenfield project company also goal strong open source presence thus decision spend part time public side projectswe considered couple mid sized project implemented one arguably looked smaller scope ended purpose document share experience put discussion word wrap understanding make conclusion help u future projectsthe projectholidayping small web application sends holiday reminder different service like email slack mainly aimed consultant freelancer used work client abroad free charge open sourcespinoff projectsas part holidayping effort started design implement open source tool solve couple problem identify recurring throttle perform access control resource api endpoint reconnections initiate maintain connection external service otp idiomatic waythe backendlanguage erlang v elixirthe first decision programming language erlang elixir use lambdaclass eventually learn question effective learn first considering goal productive properly understanding erlang platform long runelixir would probably easier considering previous background syntax closer modern language learning first carried risk scratching surface otp using language like new ruby hiding going underneath seem like simpler get good understanding otp way starting erlang especially since literature guide process switching elixir would mostly consist getting familiar new syntax language featureswe understand elixir gaining popularity elixir code written deeper understanding erlang otp become valuable asset company addition many robust useful library written erlang able dive code importantlearning erlanga quick note impression language found expressive mostly pattern matching coming clojure issue grasp erlang functional aspect contrary lot people mind syntax actually like lot exception notable quirk one come mind binary literal powerful inconvenient string replacement coworkers kept telling later confirmed otp big deal language itselfapplication supervisor structureat high level application divided following componentsa restful api mostly crud operationsa process periodically check whether reminder sent eg today holiday bob country bob asked send reminder slack email channel worker process send remindersrest apithe crud api require much thinking least otp point view implemented cowboy rest handler note library great job forcing define well behaved rest server without much codereminder checkerthe process involved reminder interesting obviously important since value application depends working properly error kernel app process check whether holiday sent remindchecker genserver us timer sendinterval periodically query database asking reminder sent trigger worker creation necessary data send remindershow often checker run information passed worker thing changed model implementation got sophisticated general idea always isolate decision send reminder act sending failure specific channel affect channel user checker processreminder routerthe reminder sent genserver process called reminder router child supervisor simpleoneforone strategy different channel module implement specific send message service email slack webhook genevent first studying otp behavior coworkers suggested defer reading genevent since used much practice started work holidayping though almost entirely setting triggering event sounded like genevent would something consider indeed superficial overview confirmed quoting erlang anger book genevent act event hub callback way deal notification sortso went back coworkers come using genevent turn behavior provide much benefit one would expect event hub term discussed beginning section genevent provide isolation event slow crashing event would affect restwhy worker pool certain point development router sending reminder channel user given holiday wanted separate processing isolated channel request eg bypass email sending crash requesting slack obvious option add second simpleoneforone supervisor new genserver briefly considered worker pool instead language ecosystem thread expensive pool usual option erlang though story different process cheap reason upfront force limit amount process created exception maintaining pool connection database hit point much work amount concurrent process becomes expensive likely need something fancier pool overcome ie pool manager become bottleneck queue grow faster worker process admittedly situation atypical sense potential overload come request constantly arriving burst reminder need sent checker run currently every minute could easily alleviate load spreading reminder time one checker run next would useless optimization upfrontavoiding throttling issueswhich brings issue notice writing line still open reason expect system able handle sending reminder likely third party service hit enforce throttling limit uslet say hopefully thousand developer argentina find project useful set slack channel default reminder setting case christmas morning reminder checker attempt send thousand request slack le time slack likely reject request retries next time checker run one way reduce chance happening would mentioned previous section spread reminder sending across available time one run next course enough user limit could hit anyway resort finer grained queuing throttling mechanismsdatabasethe database pick simple postgresql default databasefor year either hiding database behind orm using schemaless store like mongodb although lazy developer inside grumbled bit define schema upfront eventually came remember amazingly flexible powerful postgresql point found pushing stuff eg time arithmetic database level easier work available erlang library even want explore domain integrity constraint implement longpostponed input validation backendhandle configuration difference channelsour model spot hard fit database schema user creates channel different type slack email webhook different configuration parameter email channel take list email address webhook take single url slack take hook url list channel user emoji etcwe care difference end application validate user input execute typespecific logic send reminder everywhere else want treat channel equally regardless configuration tried several postgresql feature save channel configurationinheritancethis use case seemed like good fit table inheritance wrote base channel table common field user name type separate table inheriting adding typespecific configuration soon found inheritance feature limited provide feature would justify choice unique constraint enforced across child get child data querying parent etcplain tablesgiven inheritance provide much operational value using separate table configuration managing manually made sense way go long run since want benefit type validation constraint compared schemaless storage would induce lot overhead early stage development considering channel type model general far stablehstorewe started looking unstructured postgresql data type hstore keyvalue type array eg one value per key needed channel option hstore trickjsonbso turned json jsonb field let u store arbitrary configuration inside channel table treat like opaque value except spot actually use configuration send reminder arguably convenient option never got point thoroughly validating channel input backend get make sense define properly structured table firstrest apiidentifierswe spent time discussing way identifying resource across project relevant discussion since applies project may well settle one design consistent onas see flexible method use serial id postgresql every table use foreign key join want expose api since implementation dependent something may reusable want switch database add extra one separate id uniquely identify resource uuid never change reused across databaseswhen make sense model id resource user email unique name etc may use identifier user facing api ie rest uris ui route make user friendly rely internal storage correlation even start email change assumption business rule like change benefit relying heavily implementationthe last one something get entirely right still work current implementation model id user email channel name holiday date external uuids use case like changing channel name supportedauthentication authorizationto manage authorization api went bearer token based previous experience convenient token authorization opposed say requiring basic auth every request allows u decouple authentication authorization want support new authentication method added github login add new auth endpoint return access token authorization rest api remains untouchedregarding token format initially went jwt without giving much thought seen commonly used authorize web apps accessing rest backend coworkers heard suspicious understand totally sound like fond json digged little bit make sure decision made sense several article expressing concern using jwt although apply use case assuming want stick bearer token alternative jwt would store random string database associated user check value every request quick comparison two option jwt let identify user without need hit database every request server decodes token secret used generate check claim fair least use case evidence going database request would problemjwt stateless seems inline rest principle session client sends token request enough identify itdatabase stored token require bit extra effort need manage expiration delete old token make sure pick secure enough method generate hand blacklisting compromised token easier jwt since flag database although le issue using short expiration conclusion jwt easier although may simpler database stored token either option work see strong enough reason drop jwt already workingnested resourcesthis one thing debated get definite answer restful resource apichannels nameapichannels nameholidaysapichannels nameremindersand point ui need display summary view list channel including holiday reminder informationwhat obviously want force ui collect data making two extra request per channel list want api tailormade specific client either say graphql nowhere near big enough call view saw two acceptable solution use generic query parameter like childrentrue indicate child resource included response problem allornothing approach big enough resource may want child seen apis suffer coming weird dsl recursively pick nested child response case look graphql nowadays consider detailed version channel one includes child information separate resource altogether first felt bit like forcing backend fit client need honest looking uris apichannels apichannelsdetail help thinking better let resource reproduce keep interface dumb possible ie magic query parameter could gone either way chose separate resource easier implementtestsi think write serious software without sort testing point inefficient try make progress without test back also think situation obligated add test counter productive apart one commandment thou shalt test thy shit like kind religiousness testing type software benefit lot unit test testing specific function isolated rest system much coverage good indicator forcing specific coverage level suck people work better tdd people work better adding test working code stuff call testing every possible scenario generative testing etceterain experience last year working small apis mostly deal connecting integrating external service little benefit making pure unit test spend lot time building mock test glue code still common scenario totally fail software deal mostly integration need integration test sort confidence project work break modify change lot time something religious breaking apis time know put code better shape every time canfortunately coworkers share vision holidayping focused integration test make sure project work whole real database sending actual reminder first lot shortcut make sure internal part working eventually development moved forward api stabilized able rewrite test mostly talk external apito
435,Lobsters,clojure,Clojure programming,Introducing Clojurists Together - Keeping Clojure open source sustainable,http://clojuriststogether.org/news/introducing-clojurists-together/,introducing clojurists together keeping clojure open source sustainable,introducing clojurists together daniel compton keeping clojure open source sustainable current model open source sustainable burnout ruby together work apply clojurists together committee next step apply company membership developer membership company membership member page developer membership faq contact,introducing clojurists together daniel compton november keeping clojure open source sustainable clojure ecosystem built open source clojure clojurescript project build tool web framework hundred innovative useful library depend every day pervasive use open source enabled flourishing clojure ecosystem also hidden downside vast majority clojure project maintained small handful people often one person sponsored day job work open source project time maintaining project responding issue pull request support request fall night weekend taking time away friend family across entire open source ecosystem growing recognition current model open source sustainable maintainer suffering burnout quitting project entirely important project languish original maintainer longer time work longer use many possible work nonwork related reason today announcing clojurists together organisation designed fund support critical open source clojure project clojurists together goal ensure open source project important clojure community continue maintained improved funding project maintainer work project clojurists together follows model ruby together company individual collectively sponsor central organisation clojurists together distributes money open source clojure project work every quarter clojurists together collect feedback member project area important would like see supported time open source project maintainer apply funding next quarter clojurists together committee look feedback member application project pick project think biggest impact clojure community every month clojurists together report progress project making money gone next step open source project maintainer apply next funding round got exact date start next funding round picked probably next month send reminder usual channel application close developer company us clojure please talk managerdecision maker signing company membership also sign developer membership decision maker company us clojure please consider signing company membership clojurists together ensure foundation business built stay solid next month company sign recognised founding member member page individual clojure developer sign developer membership question read faq page site otherwise please contact u give u feedback think could changed improved removed etc clojurists together exists serve clojure community u well need hear
437,Lobsters,clojure,Clojure programming,Announcing Deps Versions,https://www.deps.co/blog/announcing-deps-versions/,announcing deps version,deps version reframe fork jarkeeper jarkeepercom open source,today happy announce deps version deps version let add badge clojure project github show dependency date one reframe project help maintain badge created markdown snippet dependency status http http create badge open source project github entering slug search box deps version provides badge markdown html svg png image deps version based fork jarkeeper created deps version jarkeepercom several week still time writing grateful hashobject running jarkeeper many year open sourcing jarkeeper deps version open source please open issue pull request bug improvement feature would like see future feature like add include support language tooling notification project maintainer dependency date notification project user project new version hope find deps version useful keeping project dependency date
439,Lobsters,clojure,Clojure programming,Memory Hole is a support issue organizer,https://github.com/yogthos/memory-hole,memory hole support issue organizer,memory hole feature prerequisite running docker configuring database postgresql citext feature list running development building production database url migration directory http port session configuration ldap support http support nginx proxy acknowledgment ryan baldwin license,memory hole one knew document due destruction even one saw scrap waste paper lying automatic action lift flap nearest memory hole drop whereupon would whirled away current warm air enormous furnace hidden somewhere recess building memory hole support issue organizer designed provide way organize search common support issue resolution feature app us ldap andor internal table handle authentication issue ranked based number view last time access file attachment issue issue organized user generated tag markdown live preview issue weighted full text search using postgresql citext extension user viewedit issue based group membership using ldap issue assigned ldap group ldap group aliased user friendly name prerequisite need following compile run application running docker mkdir memoryhole cd memoryhole curl http rawgithubusercontentcomyogthosmemoryholemasterdockercomposeyml dockercompose app available http start configuring database postgresql follow step configure database application make sure citext extension installed postgresql run psql command psql u superuserpostgres user postgres h localhost create role role accessing database create role memoryhole set password role password memoryhole optionally create schema grant memoryhole role authorization create schema memoryhole authorization memoryhole grant schema memoryhole memoryhole grant table schema memoryhole memoryhole add citext extension schema create extension exists citext schema memoryhole make sure memoryhole allowed login alter role memoryhole login exit shell q setup lead similar databaseurl eg local machine databaseurl jdbc postgresql localhostpostgres usermemoryhole passwordmemoryhole db use various hosting scenario available feature list setup lead following databaseurl local machine databaseurl jdbc memoryholedev db used development production need properly set migratus migrationdir pointing specific migration populating schema migrationdir running development create profilesclj file project directory configuration setting database optionally migration directory ldap configured eg profilesdev env databaseurl jdbc postgresql localhostpostgres usermemoryhole passwordmemoryhole migrationdir migrationspostgresql ldap optional use internal table otherwise admin user able manage group defined samaccountname ldapadminusers myldapsamaccountname anotherldapsamaccountname admin group defined distinguished name ldapadmingroups cnsomeldapgroup dcdomain dcca ldap host address myldapserverca domain domainca port connecttimeout timeout run migration lein run migrate create table add default admin user default login adminadmin start web server application run lein run compile clojurescript frontend run lein figwheel building production lein uberjar produce targetuberjarmemoryholejar archive run follows java dconfconfedn jar memoryholejar migrate java dconfconfedn jar memoryholejar confedn file contain configuration database url used production following option available database url databaseurl jdbc postgresql localhostpostgres usermemoryhole passwordmemoryhole migration directory depending selected db backend migration directory need set eg migrationdir migrationspostgresql http port http port default set custom port add following key config session configuration app default using serverside memory based session store number session memory session time set using memorysession key follows memorysession maxage wish use cookie based memory store add cookiesession key configuration cookiesession key point map containing two optional key key secret key used encrypt session cookie cookieattrs map containing optional cookie attribute httponly restrict cookie http true default secure restrict cookie http url true maxage number second cookie expires example configuration might look follows cookiesession key secret cookieattrs secure true maxage ldap support ldap connection configuration placed ldap key follows ldap host address myldapserverca domain domainca port connecttimeout timeout two option managing user group using ldap either assign admin user using samaccountname specify group correspond memberof key ldapadminusers myldapsamaccountname anotherldapsamaccountname ldapadmingroups cnsomeldapgroup dcdomain dcca http support enable http support production add following configuration ssl key ssl port keystore keystorejks keystorepass changeit disable http access set port nil alternatively front app nginx production see detail configuring nginx complete confedn example databaseurl jdbc postgresql localhostpostgres usermemoryhole passwordmemoryhole cookiesession key secret cookieattrs maxage port nil ssl port keystore keystorejks keystorepass changeit nginx proxy app proxied nginx custom path follows server listen location memoryhole proxypass http need add appcontext confedn file context databaseurl jdbc postgresql localhostpostgres usermemoryhole passwordmemoryhole port appcontext memoryhole acknowledgment original implementation tool written ryan baldwin app based original schema sql query license copyright dmitri sotnikov
440,Lobsters,clojure,Clojure programming,Cryogen: Simple static site generator built with Clojure,http://cryogenweb.org/,cryogen simple static site generator built clojure,cryogen,copyright carmen la powered cryogen
441,Lobsters,clojure,Clojure programming,Functions Explained Through Patterns,http://blog.josephwilk.net/clojure/functions-explained-through-patterns.html,function explained pattern,documenting function exploration v recall cider discovery recall http studiokayamacomtextvsvisuals pattern visual brain http githubcomjosephwilkfunctionsaspatterns conclusion functionsaspatterns problem turning data colour semantic argument pattern emptyness type square function applying function brain seek pattern ordering source yaxu tidal pattern language live coding music,exploring pattern mean documenting clojure function aid recall understanding whats difference clojure partition partitionall interpose interleave con conj documenting function nonside effecting function create alter pattern explain function pattern use number description nthrest coll n return lazy seq element coll separated sep return stateful transducer collection provided example showing application function interpose exploration v recall someone brain far orientated visuals text struggled remember understand many clojure function nthrest conj con etc documentation pattern clojure documentation text even documentation brought editor struggle example cider emacs clojure strong focus repl driven development understand function use interactive repl explore example critically favour discovery recall never remember difference conj con find repl help aid memory understanding turn example collection orientated function clojure visual pattern try make general case visuals v text fuzzy research area http studiokayamacomtextvsvisuals pattern visual brain applying function collection data using http githubcomjosephwilkfunctionsaspatterns butlast coll return seq last item coll linear time butlast concat x return lazy seq representing concatenation element supplied colls concat conj coll x conj coll x x conj oin return new collection x added conj nil item return item addition may happen different place depending concrete type conj vector conj conj list conj con x seq return new seq x first element seq rest con dedupe coll return lazy sequence removing consecutive duplicate coll return transducer collection provided dedupe distinct coll return lazy sequence element coll duplicate removed return stateful transducer collection provided distinct droplast n coll return lazy sequence last n default item coll droplast flatten coll take nested combination sequential thing list vector etc return content single flat foldable collection flatten interpose sep coll return lazy seq element coll separated sep return stateful transducer collection provided interpose interleave coll coll return lazy seq first item coll second etc interleave nthnext coll n return nth next coll seq coll n nthnext nthrest coll n return nth rest coll coll n nthrest partition n coll return lazy sequence list n item offset step apart step supplied default n ie partition overlap pad collection supplied use element necessary complete last partition upto n item case enough padding element return partition le n item partition partitionall n coll return lazy sequence list like partition may include partition fewer n item end return stateful transducer collection provided partitionall replace smap coll given map replacement pair vectorcollection return vectorseq element key smap replaced corresponding val smap return transducer collection provided replace rest coll return possibly empty seq item first call seq argument rest reverse coll return seq item coll reverse order lazy reverse shuffle coll return random permutation coll shuffle sort coll return sorted sequence item coll comparator supplied us compare comparator must implement javautilcomparator guaranteed stable equal element reordered coll java array modified avoid sort copy array sort takenth n coll return lazy seq every nth item coll takenth splitat n coll return vector take n coll drop n coll splitat conclusion someone performs live coding audience perhaps different value recall v exploration hundred eye staring tends effect example stronger pattern others least use visual aid part development documentation beneficial way remember oddity conj within repl interaction use functionsaspatterns toolkit providing higher level representation pattern data understand drum pattern faster colour data structure creating cheatsheet value comparison function pattern also became clear discovered almost identical function nthnext nthrest differed special case empty sequence problem turning data colour visual cheatsheet useful caveat semantic argument always clear argument index value look replace function example replace take huesofcolor reference index within first argument ideally would nice replace relevant colour however functionsaspatterns library tell value assumes everything value hence end drawn shade black pattern emptyness tried visually represent empty nil function defined difference handling empty case pattern might mislead think nthnext nthrest identical type square clojure multiple type sequence chararrays list vector lazyseq etc keep visual pattern simple represented type function applying function purposely skipped mapreduceremovefilter function tend mix two pattern together core function applied function value pattern get lost brain seek pattern see pattern randomness single example might reveal false pattern many example would required reenforce randomness resulting pattern example shuffle ordering colour always imply logical order example sort source inspired work alex mclean yaxu using visual pattern explain live coding language tidal tidal pattern language live coding music
442,Lobsters,clojure,Clojure programming,Deep Learning notebook walkthrough in Clojure,http://gigasquidsoftware.com/blog/2017/11/07/cats-and-dogs-with-cortex-redux/,deep learning notebook walkthrough clojure,blog post cortex example jupyter notebook clojure project practical deep learning course coder start kaggle cat v dog challenge plan action getting data picture right format train model run kaggle test result submit result compare result summary github walkthrough jupyter notebook,wrote blog post back using clojure machine learning library called cortex kaggle cat dog classification challenge wanted revisit reason first one cortex library progressed improved considerably last year still version eye really starting shine second reason recently published example using model explain later finetuning transfer learning third reason great new plugin leiningen support using jupyter notebook clojure project notebook great way walkthroughs tutorial putting thing together felt like finally stage could somewhat replicate first lesson practical deep learning course coder cat dog although time clojure start last blog post created deep learning network trained data scaled image like scratch time much smarter still course going get hold training data kaggle cat v dog challenge big difference time going train model epoch result way better possible going use already trained model model already painstakingly trained gigantic network layer deep imagenet challenge challenge model try classify different category theory inner layer network already learned feature make cat dog would need peel final layer network graft new layer learns final classification category cat dog called transfer learning retraining plan action get cat dog picture right directory format training train model last layer resnet model last layer going replace layer finetune classify cat dog run test data come spreadsheet result submit kaggle getting data picture right format generally time consuming step deep learning spare gritty detail want get picture trainzip format data catsdogstraining cat dog catsdogstesting cat dog image size must also resized match input mean train model cortex function allow load model remove last layer freeze layer retrained add new layer surprised could actually train model image huge model built uberjar ran helped performance lein uberjar java jar targetcatsdogscortexreduxjar training one epoch took approximately minute bad especially considering training really needed loss epoch current best null saving network trainednetworknippy key point saved fine tuned network trainednetworknippy run kaggle test result submit result need bit setup first need get kaggle test image classification testzip file site data directory create new directory called kaggletest unzip content testzip inside folder full directory test image datakaggletesttest step take long time might tweak batch size depending memory predication made main logic function called kaggleresults batchsize take long time run print result go along kaggleresultscsv file want check progress wc l kaggleresultscsv locally catsdogskaggleresults took minute locally compare result one epoch fine tuning beat best result going practical deep learning exercise fine tuning model bad summary interested checking code github even exciting walkthrough jupyter notebook leinjupyter plugin deep learning world clojure exciting place gaining tool traction
443,Lobsters,clojure,Clojure programming,On Types And Intent,http://jawaninja.com/programming/2017/10/29/on-types-and-intent,type intent,type higher abstraction use difficult reason without context think thing impose thinking people around helped language many assumption make much information type annotation contain code much assume often convention dominates information convention dominates information mean communication many particular case need keep mind time need infinite amount type deal infinite abstraction infinte abstraction require infinite number type goal many abstraction solution require lot communication much sacrifice reach goal communicate intent care right work engineering science disclaimer know subject conclusion science engineering harmony conflict,love clojure love haskell two favourite language also really love idris offer semantics interesting property tradeoff sadly disconnect community language people try communicate like favourite language tend contrasting language end quite antagonistic put people defensive true people saying static typing useless people saying dynamically typed language recklessly unsafe would make life much easier either statement true sadly deal usual grey area also acknowledge nowhere near end journey towards understanding information computation even understand reality presume knowing model using computer instead fighting strive together find deeper understanding principle tradeoff involved writting evolving code would like make attempt today opening conversation communicative power type type type great carry lot information know look let look foo haskell type say function list list tell u much assumption know transforming element list since assumption input list thing allowed manipulate change length ordering repetition since io type author communicating assume function side effect really many function satisfies type sadly still infinity x tail reverse cycle init x x foo x x foo x x x take length x repeat x get idea type communicate intent provide extra knowledge think example agree intent communicated way meaningful function name documentation let look information transforming element list useful particular context really even though shape list value much different also different runtime property constant time linear time quadratic one even infinitely recursive depending called freeze execution like foldl instance want extra safety making sure program terminate compile need type system support totality checking possible achieve general case halting problem many inductive case check idris interested although note check guarantee program terminate point point year future still entirely safe practice another thing case implementation still much concrete type list want use set vector instead work another layer abstraction haskell would monoid import datamonoid monoid x mempty monoid x x x monoid x x x x even fewer assumption input awesome however higher level abstraction sentence foo take input type instance monoid typeclass return value type carry le information monoid mean type contains value considered empty element mempty haskell operation value mappend combine value also type follow special rule appending empty value change result instance rule enforced haskell exactly help understanding looking type intersting bit tradeoff higher abstraction use therefore fewer assumption make general make code difficult reason without context instance know function monoidal output also form monoid work also know form monoid using number one even value addition form monoid sum value multiplication product repl ask type expression work num monoid however one possibility number form monoid haskell know one mean type alone even though obvious value mean sum definition without hint haskell able understand mean refuse compile interactive error ambiguous type variable arising use print prevents constraint show solved probable fix use type annotation specify potential instance exist instance show defined datamonoid instance forall k f k k show f show alt f defined datamonoid instance show defined datamonoid plus others plus instance involving outofscope type use fprintpotentialinstances see stmt interactive ghci command print need explicitely tell haskell mean sum version sum int sum getsum really cool able express code way highest level abstraction apply code context satisfies abstraction also downside know context function used let compare piece clojure code reduce reduce reduce even work clojure manages take advantage monoidal property number knowledge found value level type level ambiguity result infinite number monoids number way find easy pattern generate thing mathematical definition monoid set type operation value haskell polymorphic type meaning create unique type particular monoid infinite number monoids list number represent one list monoid saying impossible achieve staticly typed language look dependent typing intead let look base case clojure defn b b true true base case addition plus one neutral element fun fact empty element monoid implemented zero arity function purely conventional obviously also general mean given function monoidal one domain number case addition multiplication anyway let write monoid generator given information defn addnmonoid n fn n b b n def addnmonoid def addnmonoid def addnmonoid true true yay infinite number monoids reduce reduce anyway use runtime polymorphism clojure monoids closer mathematical definition downside know beforehand reducer monoidal get runtime error instead reduce arityexception wrong number args passed core mean stuck mean rely monoidal neutral element need pas initial value explicitely reduce reduce tradeoff think thing categorytheory term impose thinking people around particular beginner downside helped language box follow rule interesting tradeoff think many assumption make haskell pure convention convention enforced extent type system always bypass weird stuff let define interesting piece code import systemiounsafe int unsafeperformio print yo return call print yo return first time around second time return print anything yo mind bad thing sideeffects internally necessary mean visible sideeffects globally memoization instance useful sideeffect haskell runtime optimisation like see transient datastructures mutated place speed thing within context pure function return immutable version datastructure make sense performance important might say ha importing systemiounsafe know funky stuff right look code get info behaviour interested much information type annotation contain code clojure chooses immutable default try completely isolate sideeffects however would fair consider clojure code implicitly inside unsafeperformio haskell relies knowledge function pure perform sort optimisation really good performance like code chooses memoize execution type signature say pure behaviour implicit happens compiler level express explicitly clojure def memoize fn println yo given builtin type annotation clojure getting well type information implicit much weaker haskell convention stronger language immutable default time assume input immutable either value collection value time assume sound safe thing even though obvious assume time haskell well assume implementation monoid follows associative neutral element law code contain nonlazy infinite best verify testing course true dependent typing idris even state art always end drawing line somewhere practice interesting question much assume often draw line given context convention dominates information getting conversation point convention dominates information otherwise get infinitely high level abstraction turn requiring infinite amount context point lie core debate position convention enforced statically type level language like haskell necessary sufficient come nonzero cost whether cost higher value provided debatable fact come cost controversial understanding cost value proposition static typing really important look fact ruby rail success come conclusion success due pop culture effect random chance provide set convention super efficient able communicate convention somehow thus pushing industry forward mean communication mean communicate intent writting code function argument name documentation type contract annotation code look purely communicative power write code literally definition mean however convenient read code question use make life easier understanding quicker answer dependent abstraction available language use many particular case need keep mind time haskell following approach infinite amount abstraction expressible type system keep track head clojure following approach small amount abstraction keep head two approach require two different kind communication small set abstraction easily keep head apply understanding code infinite amount abstraction want much help language juggle head type information becomes paramount beware selffulfilling profecy need infinite amount type deal infinite abstraction infinte abstraction require infinite number type end haskell purescript journey asymptotic one value type evolve towards metacircular answer extremely close essence mathematics phylosophy awesome journey way personally needed step realm dependent typing begin get intuition digress bit point goal many abstraction solution require lot communication infinite abstraction infinite reuse one personal goal care producing thing fast reliably pareto rule guide decision make engineer solution perfect wasted many resource making perfect want find costefficient way implement something much sacrifice reach goal minimum need communicate intent get code personal preference everyone might agree priority case want move fast possible want able take risk try get sometimes chance succeeding want take chance might mean sacrificing benefit short term gain sometimes forced think edgecases upfront exactly need implementing protocol parser thing like want help dealing million abstraction abstraction pushed onto dismissive use case time want work small set abstraction make simplest thing possibly work without thinking edge case might get runtime error code work time good enough sell product adapt new market know type system force think edge case work stated goal force correct want want happy path solved fast possible handle edge case show time also want ability add nicety guarantee code want freedom take risk cake eat order maintainable code need runtime test make sure runtime property project hold test replaced static typing question cost static type term rigidity number abstraction required context lower maintening test suite guarantee covered type case clojure v haskell specifically immutable data namespacing explicit sideeffects static name resolution approach seem empirically equivalent experience favor one objectively smaller fewer abstraction smaller context always compare clojure javac haskell javascriptpython would come obviously winning also compare clojure javascriptpython haskell javac would also winning euclidian distance work though useful comparison communicate intent first step good communication finding meaningful name much necessary anyway first step implementing something understanding domain thing understanding domain naming thing documentation documentation part understanding domain value beyond understanding code also finding example really help understanding example written test allow verify code verification nice tool guarantee anything allows check assumption need verify code mean writting test finally type contract annotation help boundary code allow communicate api function also make sure information kept sync code require constant maintenance might believe none negociable believe given domain establish cost value decide want invest upfront successful case code even important documentation type everything sometimes artefact created matter care right work beyond communicating intent verifying proving thing many consideration mind run fast enough scale run memory using right datastructure many consideration experience answer easier find language clear set datastructure list function datastructure consistent runtime property also much easier language abstract runtime impossible express guarantee property type system fact linear type added haskell compiler communicate super neat love need order get understanding runtime property running level abstraction otherwise simply wrap head around look love really really enjoy know engineer want able make sacrifice tradeoff get imperfect solution imperfect solution cheapest produce engineering science need computer science also need computer engineering need understand minimum requirement solution constraint relax kind risk taking throw around term like correctness freedom without understanding mean cost often conversation end like type know enough type type academia always standing way hope find place someone either prove know profunctor optic avoid using precise mathematical term approach software engineering taken seriously disclaimer know subject bit info thing played investigated tradeoff context functional programming sharing list find topic fascinating like understand tradeoff parametric polymorphism haskell purescript v adhoc polymorphism clojure v subtyping clojure ocaml dynamic typing clojure v gradual typing racket clojure coretyped v static typing haskell purescript elm dependent typing haskell idris verification promela v proof idris agda tradeoff include soundness verification proof inference type code runtime property aspect tool super interesting useful applied right context general best solution programming language need define fitness context first also encourage explore axis please explore beyond one axis familiar conclusion million thing express gist trying say let conflate good software engineering practice functional programming matter static typing let dismiss either even static verification mistaken limited static typing go essence engineering state constraint assumption objective first consider static typing tool end asymptotically approaching answer forever reach pursuit truth science finding smallest cheapest thing possibly work engineering two completing considered harmony conflict
445,Lobsters,clojure,Clojure programming,closh - Bash-like shell based on Clojure,https://github.com/dundalek/closh,closh bashlike shell based clojure,closh bashlike shell based clojure clojure warning community contribution issue reddit zulip gitter open issue install window supported try closh online clojurejvm version release page clojurescriptlumo version nodejs permission error quick start documentation roadmap terminal ui improvement exploration ui exploration stabilization performance limitation jvm version clj lumo version cljs prompt quirk development manual java build sponsor mention copyright license cc,closh bashlike shell based clojure closh combine best traditional unix shell power clojure aim modern alternative bash demo showing execute command using clojure manipulate output shell try reinvent bash bash obscure syntax nontrivial operation lot wtf moment treat everything text mostly need manipulate structured information large codebase make difficult hack try innovative idea one reason shell improve much recent decade traditional shell limited term presentation discoverability could bring back richer environment imagined lisp machine shell based clojure script clojure simple syntax wellthought design make pleasurable work extensive collection powerful function data manipulation suitable provide solution daily task write shell script language use daily development nt google arcane shell construct every time need anything simplest task le amount composable code allows experiment new feature idea warning closh still early stage heavy development many rough edge subject change lot closh tested linux run macos community contribution feedback specific feature found bug please open issue use reddit general discussion share script workflow chat room zulip gitter would like contribute take look open issue leave comment find anything interesting improve project together install window proper currently supported run wsl know way around window need help see try closh online browser without installing anything clojurejvm version download jar file release page run jar file also contains special header make executable run directly chmod x closhzerojar closhzerojar also run clojure cli clojure sdeps deps closh giturl http githubcomdundalekcloshgit tag sha closhzerofrontendrebel clojurescriptlumo version install closh requires nodejs version support version progress see npm install g closh get permission error try npm install g closh unsafeperm install development version master branch npm g dundalekclosh quick start start shell run simple command like used echo hi git status l l json command starting parenthesis evaluated clojure code power come combining shell command clojure echo hi clojurestringuppercase hi l json reverse count number file grouped first letter sorted highest count first l groupby first map update count sortby second reverse like closh set default shell careful first test closh shell make sure work machine nt get locked shell chsh need log log back change take effect closh sudo tee etcshells chsh closh jvm version make default shell similarly like closhpathtocloshzerojar chmod x closh echo closh sudo tee etcshells chsh closh documentation roadmap terminal ui improvement exploration explore innovate ui idea explore shell could become possibility within ascii terminal goal reimagine people think command line interface without lose core power ui exploration explore could take shell power functionality lift boundary set ascii terminal stabilization performance hope new ui idea get people excited interested work stabilization adding remaining feature people used traditional shell limitation jvm version clj lumo version cljs script mode syntax highlighting prompt quirk synchronous execution hack via deasync library development clone repo install dependency git clone git githubcom dundalekcloshgit cd closh npm install run cljs app npm start run clj app clojure closhzerofrontendrebel run test npm run test rerun test change npm run testauto manual java build run npm run pkgjava resulting binary targetcloshzerojar sponsor thank support mention copyright license copyright c jakub dundalek contributor distributed eclipse public license clojure logo created cc
446,Lobsters,clojure,Clojure programming,Effective Programs: 10 Years of Clojure,https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms.md,effective program year clojure,effective program,effective program feel like broken record every time start talk thanking everybody want start way different way saying son getting married today audience applause another state audience laughter right give talk gon na hop plane go back tomorrow morning nt disappeared looking forward followup talk everything else missing action briefly redundant thanks everybody coming ten year ago clojure released possible way audience applause could imagined know told wife steph said people use would ridiculously outrageous happened happen interesting nt think fully understood wanted today talk look back little bit motivation behind clojure like come programming language tell whole story think one good marketing two really wan na honest probably nt know take time understand happened really thinking wo nt pretend grand plan incorporated everything ended becoming clojure certainly involved lot interaction people community clojure opinionated hear think interesting think two aspect one way mean language opinionated think clojure case people come like wow forcing everywhere turn something certain way think nice way say strongly supported idiom lot support use stuff come whole story support effort want fight nt much alex asking glass right one neither answer design making choice bunch choice clojure particular big choice leave part talk talking left side opinionated get opinionated mean like opinionated audience laughter course opinionated come experience started clojure already programming year done tired done really interesting thing language professional programmer used time primarily working scheduling system c scheduling system broadcaster radio station use scheduling system determine music play quite sophisticated way work know think well course day nt want repeat song actually think people know listen radio one hour morning hour afternoon create sort alternate time dimension every drive time hour thing like multidimensional scheduling used evolutionary program optimization schedule optimization broadcast automation playing audio time playing audio computer hard thing required dedicated card dsp work work audio fingerprinting made system sat closet listened radio wrote heard used track station playlist eventually track advertising money involved figuring effectively fingerprint audio scrub audio sort compare novelty past worked yield management system everybody know yield management probably hotel airline radio station common inventory disappears time pass right oh free room got slot schedule got seat airplane time pass nobody bought nt yield management science practice trying figure optimize value inventory disappears looking past past sale simplistic instance objective sell inventory objective maximize revenue get mean selling case written c around time discovered common lisp year year way consumer would use common lisp wrote common lisp program wrote yield management algorithm sql stored procedure gave database program eventually got back scheduling wrote new kind scheduling system common lisp want run production rewrote c point expert c user really loved c value love audience laughter involves satisfaction audience laughter see later love puzzle c rewrite c took know four time long rewrite took write first place yielded five time much code faster knew wrong went help friend eric write new version national exit poll system u also involves election projection system know sort selfimposed functional style c know around started clojure machine listening project time given sabbatical work thing knowing one would go leaving free whatever thought right zero commercial objective zero acceptance metric trying please two year sort bought break along way period time know realized time finish one knew finish clojure know machine listening research topic nt know two year away five year away clojure written java eventually know library written clojure machine listening work involved building artificial cochlea combination common lisp mathematica c recent year dusted able clojure sort exciting thing needed three language need clojure datomic also clojure almost project involved database different kind database know isam database lot sql many attempt many integration rdf database essential part solving kind problem many people use database every day many people nt ok last thing acronym database remind tell anecdote used go lightweight language workshop oneday workshop held mit people working small language know either proprietary domainspecific know darpa whatever would talk little language would little language cool exciting got bunch language geek room pizza afterwards remember would go friend part community let afterwards pizza sat pizza two people nt know still nt know name good nt gon na disparage audience laughter computer language researcher talking also disparagingly associate somehow fallen database lost true way one sort sneeringly said aw david last time used database like nt know ever used database like sort choked pizza theoretically designing programming language yet programming never use database nt know worked part inspiration clojure mean people nt database write programming language anybody audience laughter know different kind program one thing tried capture slide talk kind program working word came situated program word distinguish kind program sit world sort entangled world bunch characteristic one execute extended period time like calculate result spit like lambda function aws thing run ongoing basis sort wired world system run continuously quite terrifying thing year old almost definitely still running somewhere nt replaced first notion extended period time mean continuously opposed burst almost always deal information kind thing talked scheduling scheduling look done past look research data audience tell like interested burnt combine knowledge make schedule yield management look past sale sale related particular period time fact produce pricing information election system look prior vote record people vote big indicator going vote course algorithm behind much sophisticated simplified way say system consumed information vital produced information tracked record next point system sort timeextensive memory database nt like input system know fixed something get added system run system remembering consumption consumption program quite often deal realworld irregularity thing think supercritical know situated programming world never elegant think realworld talked scheduling problem know linear time somebody listens day somebody listens driving morning afternoon eight hour apart one set people hour later another set people another set know think time come elegant notion multidimensional time like oh totally good except tuesday well u certain kind genre radio thing called two tuesday right built scheduling system main purpose system never play song twice row even pretty near played last even play artist near played artist else somebody going say play elton john hate station tuesday gimmick two tuesday mean every spot play song going play two song artist violating every precious elegant rule put system never realworld system nt kind irregularity nt important aspect situated program rarely sort little universe get decide thing nt need interact anyone else agree anyone else almost system interacted system almost system interacted people somebody would sit say start playing song right skip song like scheduled song balanced everything around playing dj said nt election projection system ton screen user look thing crosstabulate thing make decision feeding thing see tv people explain thing people people talking people important part program remain use long period time throwaway program like said nt know much software ever wrote stopped run somebody people still using also situated world change best laid plan day first write rule change may three thursday nt know happens go change everything deal another aspect situated one think thinking lot recently situated software environment community know program rarely written scratch code wrote purpose program invariably going pull library situated library ecosystem another thing talk situated program look program talked written career one really stick right clojure compiler like nt fraction problem take input right disk get define whole world right write language first thing write language get rid two tuesday audience laughter right disallow try make regular thing programming well enforce rule made like wow could easier audience laughter really lot simpler nt generally use database although think probably rarely talk wire blah blah blah blah blah compiler theorem provers thing like like program title talk effective program effective mean mean producing intended result really want word become important really tired word correctness correct mean nt know make type checker happy audience laughter none consumer program professionally care right care program work definition work hand nt want taken recipe hacking right like anything kind work talk work mean mean actually accomplish job effective want sort reclaim name programming least make sure broad definition incorporates language like clojure approach take think problem matter programming going say programming making computer effective world mean effective way would talk people effective world either program effective helping people effective effective well sometimes effective calculate really well like may trying compute trajectory missles something like mostly mostly area human endeavor effective learned experience turn experience predictive power whether knowing step giant hole cliff walk towards roaring lion market people right approach surgery right diagnosis problem people effective learn learn experience leverage going say effective mostly computation generating predictive power information heard talk information right fact thing happen right experience especially start pulling programming world experience equal information equal fact thing actually happened right raw material success world people program either support people replace people interesting thing also say programming programming proving theory type consistent initial proposition interesting endeavor talking thing done career programming love programming like accomplish thing world bertrand russell nice snarky comment actually snarky want elevate mathematics say quite important mathematics start crossing line right standing stage saying mathematical safety type safety equal heart machine safety mathematics wrong according bertrand russell algorithm computation important subset nt get wrong like logic right written scheduling system written yield management algorithm written datalog engine like logic like writing part system usually get work part system really cool even know theorem prover compiler know eventually need read something disk spit something back print something shim something logic world situated program kind programming done think clojure programmer small part programming program dominated information processing unless uis case giant circle around look like dot audience laughter gon na go audience laughter actually nt part information processing actually dominates program effort irregularity often right information part like take irregularity way datalog engine like easy day cuz everything perfect cuz see perfect thing cuz somebody fixed got nt want make light think supercritical right best google coolest know search algorithm could nt get appear web page something sensible type know something pressed enter one would care right value proposition algorithm get delivered super important experience ratio probably need solve problem ratio often experience work actually also sort bigger square would dot information part program much larger need programming language still mostly terrible end write whole ton code job something designer language took course done right nt write program scratch start dealing library started cross get define everything land right relationship define going talk library may talk u mostly talk line right protocol talk library still done right cuz said situated program involve database information processing logic library may shared programming language right least know jvm something like jvm runtime database clearly written different language colocated memory wire view world protocol talking invariably whatever protocol want fix audience laughter well something going talk later called parochialism know adopted view world programming language put upon u misfit way database thinking thing rather say wonder wrong end like oh got fix relational algebra ca nt possibly good idea ok still done said program nt sit talk program three thing may written programming language right view world idea logic work idea want talk library use library wire protocol nt get database vendor least giving u wire protocol start fix orm make protocol end json right good least something program programming program going solve problem like subset going solve problem first point start solving problem done problem oneshot onetime onemoment one great idea push button ship move kind world every single aspect mutates time right rule change requirement change network change computing power change library consuming change hopefully protocol nt change sometimes deal time effective programming time well know trying say right wrong way like clojure right everything else wrong right apparent may nt think aspire write programming language general purpose could probably write know theorem prover clojure actually sure could certainly would get different language target compiler theorem provers target device driver phone switch clojure target informationdriven situated program right catchy phrase mean friend many people room yeah look programming language really look right like inherent goodness like suitability constraint started clojure drew diagram would amazing feat prescience try pick apart know clojure cuz think reason write new programming language unless going try take problem look problem mean unhappy programmer year said ca nt switch something like common lisp going switch career saying saying frustrated bunch limitation using call problem going call problem programming ordered hope read read yeah ok ordered term severity severity manifest couple way important cost cost getting wrong top domain complexity could nothing world complex next level start programming right look world say got idea supposed know program effective addressing problem nt good idea world ca nt map well solution everything downstream going fail surviving misconception problem cost dealing misconception incredibly high full order magnitude reduction severity get set problem think domain programming language help right read going come second go one slide going read right importantly another break get trivialisms problem programming like typo inconsistent like thought going list string put number happens know people make kind mistake pretty inexpensive problem clojure took green one go green one moment would say amongst one middle nt think clojure tried something different resource utilization java sort adopted runtime cost model nt think mean wanted clojure good library language nt think library ecosystem problem part clojure know talk last year library implies still think still big problem program one one left right clojure datomic left fix audience laughter library library inconsistency typo much mean know clojure actually pretty good letting make typo fundamentally clojure make program simpler stuff mean problem year using like c java exhausted many people programming year ok many year ok fewer right really interesting may indictment clojure beginner language may clojure language cranky tired old programmer audience laughter applause know would embarrassed fine know make think important thing trying solve people know problem think understand know tricky discovered common lisp used c said pretty sure answer question yeah absolutely lower cognitive load also think yes absolutely question make lisp use instead java c cuz heard story used common lisp couple time every time got kicked production ruled production really kicked nt get chance knew target runtime people would accept meta problem right try take programming problem always problem getting language accepted think clojure would get accepted really honestly knew wanted friend thought crazy even like person number one try credible answer acceptability problem power problem otherwise practical like cool rich like work audience laughter ca nt use professionally really hobby acceptability think go performance thought also deployment platform power challenge deal leverage talk later also compatibility part acceptability know clojure ability say java library big many people snuck clojure organization start right ok success audience laughter thing considered absolute nonproblems first parenthesis right many people ok admit right every story many people thought parenthesis going problem think crazy thinking yeah fine think everybody go everybody look lisp like cool going fix part get going start understand value proposition going fix say something programmer sure exactly nt believe problem fact get middle talk see think opposite problem core value proposition clojure think thing like parmakeitgoaway whatever bad terrible idea good beginner know try solve problem feature thing considered problem dynamic right worked c know thing said compiles probably work right like say haskell equally true audience laughter really believe totally nt help really help big problem top big wide one ok problem number one list place oriented programming absolutely problem almost program wrote lot thing list multithreaded program know crazy hard c impossible get right adopt normal mutability approach know mutable object number one selfinflicted programming problem seemed know clear answer make functional programming immutable data default idiom challenge data structure would fast enough say could swap objective goal get within read writes lot work actually main research work behind clojure persistent data structure eventually found know looked okasaki stuff know fully functional approach none get found bagwell structure persistent realized could made tremendously great characteristic combining persistence way laid way memory work made made bar able get friend try programming language know large library pure function support know immutable local binding basically fall clojure first hurdle parenthesis right functional paradigm everything gone mutable variable state mutable collection everything else lot support big library know sort learn idiom think straightforward critical thing different clojure time clojure people invented stuff adopted lot right think adherent functional programming community considered functional programming typed functional programming statically typed functional programming functional programming nt think think know fall clearly rule think split like value prop side think clojure user get sense get feel thing make sleep night ok problem number two subtle problem thing annoys statically typed programming language terrible information let look information inherently information sparse know happened world world fill form fill everything thing like know nt nt ever probably correct thing know allowed know good answer whatever want right open right else know well mean time right cuz every second go stuff know thing happen fact thing happen universe information accretes keep accumulating else know information nt really good way grappling except using name right deal information people name superimportant right say communication going connect big thing thing struggle often right system made class type piece data know little bit data make another thing like derivation derive make thing another context know part one thing part another thing type part part know explosion course language wrong nt composable information construct problem programming way compatible information elevate containership information become semantic driver okay say person person name person email person social security number semantics three thing except context person class type whatever often depending programming language name either right got product type like person string x string x int x string x string x int x float x float product type like complete callous disregard people name human thinking crazy programming language may name compile away right first class ca nt use argument ca nt use lookup vector right ca nt use function right compositional algebra programming language information taking construct think purpose use given idiomatic right take class take know type thing important thing aggregate determine semantics dead wrong right fill form nothing information put form semantically dominated form happen fill collecting device semantic device becomes happens get giant set concretion around information know people write know java library look java framework cool relatively small everything sort mechanical thing java good mechanical thing well mechanism hand language poor application programmer trying information situated program problem got take class like everything need every piece every small set information right many people ever seen java library class yeah everybody experience experience nt matter language using type dealing information going proliferation noncomposable type little parochialism around tiny piece data nt compose really happy know programming literature word abstraction used two way one way like naming something abstracting disagree abstracting really drawing set exemplar essential thing right naming something think actually happening getting data abstraction getting data concretion right relational algebra data abstraction datalog data abstraction rdf data abstraction person class product class data abstraction concretion know know practice clojure say use map meant actually clojure nt give anything else right nothing else use class nt thing say deftype nt type nt algebraic data type anything like map huge library function support syntactic support working associative data structure tangible wellsupported functional highperformance activity generic clojure information information need thing say problem problem take information information merge hand along need subset take subset call key know selectkeys get subset combine anything like algebra associated associative data name firstclass right keywords symbol function function associative container know look reified tangibly flow around program say pick three thing without writing program know write java haskell pattern matching find three thing independent program language right argument piece data capability thing think potential clojure realized varying degree raw material associate semantics attribute aggregate right fully qualified symbol keywords obviously spec alright brittleness coupling another thing personal experience static type system yield much heavily coupled system big part time aspect final diagram problem trying solve dominated coupling trying maintenance right flowing type information major source coupling program de know pattern matching structural representation hundred place program coupling right like stuff siezing see sensibility get year programming hate coupling like worst thing smell coming want part big problem thing think subtle put unless see positional semantics nt scale example positional semantics argument list right language clojure right want call function argument nope audience laughter one every room audience laughter nobody know break break five six seven point longer happy right product type going break every time hit limit right many people like going doctor office filling form right nt hate get big lined sheet paper blank get set rule say put social security line name line work right world work talk people nt scale always put label right next stuff label matter positional semantics saying nt matter remember third mean seventh thing mean type nt help right nt really distinguish float x float x float x float x float certain point telling anything nt scale occurs place argument list product type else parameterization right seen generic type type argument see c java yeah tend see java people give parameterization right audience laughter switch spring audience laughter mean joke fact right switched dynamic system injection right parameterization nt scale one reason nt scale label parameter may get name convention properly named want reuse type parameter get give name audio cut like pattern matching terrible terrible idea scale anywhere parameter anywhere positionality thing got eventually goning run steam going run ability talk people going run ability understand think type antipattern program maintenance extensibility introduce coupling make program harder maintain even harder undersand first place clojure dynamically typed burden proof nt prove know made something somebody care every person middle nt mess know mostly nt mess nt know protecting prove know still string construct open right much prefer runtime polymorphism either multimethods protocol switch statement pattern matching thing like map open needtoknow clojure nt know something leave nt know maybe maybe actually parameterized information system would maybe everything maybe everything longer meaningful nt nothing type maybe something right social security number string string either know nt jamming two thing together make sense type thing may part frontdoor protocol may need type thing map open deal needtoknow basis get habit propagating rest may handed stuff care ups truck come tv truck care else truck nt want know ok stuff problem know language model complexity know c complex language haskell java well clojure small quite schemesmall small compared others know basic lambda calculus kind thing know immutable functional core function value call function value get value hierarchy parameterization know existential type blah blah blah blah blah execution model another tricky thing right getting point even java get harder harder reason performance program right resource unfortunate know least one nice thing c know knew program crashed problem figure knew going take ram could calculate thing quite tractable matter programmer right programming mathematics mathematics swap isomorphism programming get fired right audience laughter different performance matter part programming big deal making something least could say like java blame audience laughter well fine also meant tooling helped u right know java tooling work clojure mean many people use yourkit profilers like clojure pretty awesome able alright real nitty gritty thing nt like therefore left type thing go everywhere name came parochialism right idea language know got cool idea think thing think thing using algebraic data type think thing using inheritance yield intense parochialism right start representation thing manifestation representation information make sense context language rule thing nt combine anybody else idea right smash database smash wire smash programming language got idiosyncratic local view think thing rdf right objective right trying accomplish something want able merge data different source nt want schema dominate semantics right many people ever gotten piece mail company like wrong database dude right yeah wrong wrong one company bought another company right company two database one database name person thing another database name person table another database name mailing list table right know mailing list table name person name actually piece information nobody meeting mean big dollar big ticket problem small laughing matter right audience laughter right big company giant job trying merge system table parochiality class algebraic data type problem different problem like view world day decided world decided name part person decided name part mailing list need fix know lot company fix introduce third database usually rdf database federation point figure two thing eventually stop sending two piece mail piece mail twice right subject predicate object obviously see influence datomic right go right would say elaborate type system parochial type right le general le transportable le understandable system le reusable le flexible le amenable putting wire le subject generic manipulation right almost every language deal type encourage tyranny container talked choice clojure think people go either way right two thing one container dominates sort notion context dominating meaning like called context mean recipe clojure better use namespacequalified key namespacequalified key merge data know thing mean regardless context used anything thwart composition talked particular pointed programmainpulatingprogram idea see later make harder clojure name firstclass know stuff lisp dominates became access associative data type function keywords function sort big deal nt disappear compiled away offset pas around write user nt know clojure actually type one text file save something meaningful program without learning clojure namespace qualification follow convention unfortunately lot clojure library yet reversed domain name system java clojure name conflictfree clojure name java name fantastically good idea similar idea rdf using uris name alias help make le burdensome done recently distribution problem start saying taking languagespecific view program design terrible mistake little box ignoring big picture soon step back problem talk wire many people use know remote object technology really sorry audience laughter cuz brutal right brutal incredbilty brittle fragile complex errorprone specific many people use kind technology talk people employ nt work internet work right distributed object failed right internet sending plain data wire almost everything ever dealt wire succeeded moved successful program way superparochial need eventually represent subset portion subset program may subset nt know advance wire right program way time program inside program let pas around data structure somebody say oh wish could put half program across wire replicated six machine say clojure great start shipping edn across socket done opposed got ta everything plenty inspiration example runtime tangibility one thing really got excited learned common lisp coming c smalltalk common lisp language obviously written people trying write program people language theoretician tell writing writing gui writing database writing logic program language also system sensibility go smalltalk common lisp undeniable first discover especially discover late stunning see think tradition largely lost academia nt see people making system language know together sort split apart really shame much still left pilfer language highly tangible right reified environment name could see could go back find code namespaces tangible could load code runtime mean one thing another another right old perlis know quip know sufficiently large c c program know poorly implemented common lisp true spring right eventually get larger system want maintain time deal complexity know showed want dynamism like optional thing necessary particularly interesting implementing clojure much runtime tangibility situated sensibility jvm design jvm actually dynamic thing java look like say c c jvm know written idea well going embed program set top box network need send code around could update capability like situated everywhere turn runtime got ton excellent support make great platform language like clojure thank goodness know work people self nt die actually got carried everything quite important sad day know somebody say well let replace jvm know static compilation technology tell targeting jvm clr plain clr static thinking jvm dynamic thinking situated sensibility last problem initial slide concurrency think mostly concurrency get solved functional immutable default thing need need way language dealing state transition epochal time model obviously going get given talk clojure combination thing let say think reasonable answer friend say write real program say write real program including multithreaded program go crazy lot stuff wanted take lisp think talked lot dynamic small firstclass name tangible code data readprint going talk little bit repl think still people like repl cool cuz get try thing true repl much cooler cooler acronym cooler read thing clojure adding richer set data structure made readprint super power nt convenience nt way interact people nt way make easy stream program around program fragment around like free wire protocol real stuff many people ever sent edn wire yeah many people like fact like nt need think possibility know want switch something else huge deal eval obviously know let u go data code source macro think much bigger application macro finally print direction lisp bunch thing needed fixed opinion built concretion know lot design abstraction clos stuff like came underpinnings underpinnings nt take advantage want polymorphism bottom retrofit want immutability core need need something different know ground clojure worth opposed trying clojure library common lisp lisp functional kind mostly convention data structure switch gear go know assoc list know proper hash table list crappy data structure sorry weak reason use fundamental primitive programming also package interning complex part clojure important leverage oh running time going talk edn data model like small part clojure sort heart clojure right answer many problem tangible work wire incompatible rest world language map associative data structure vector string number seems like happy know lingua franca nt use lingua franca program know different different language actually much better keep translating alright final thing simon peyton jones excellent series talk listed advantage type cuz big thing left clojure type guarantee absence certain type error true would say say least benefit static typing serve partial machinechecked specification partial operative word partial design language right help think framework think problem support interactive development like intellisense biggest merit software maintenance really disagree lot experience biggest error caught type system need extensive testing realworld effectiveness checking name dominate semantics list list mean nothing tell nothing take away word reverse nt know anything really nt elevate say oh important thing property true nt true thousand function take list return list mean mean nothing checking mean list gon na get something else return mean obviously going return list unless know getting stuff somewhere else functional many people like uml many people ever used uml diagramming tool right fun right like ca nt connect oh use kind arrow ca nt ca nt terrible omnigraffle much better draw whatever want thinking draw important write work right yes intellisense much helped static type performance optimization nt list think one biggest benefit loved c maintenance think true think created problem use type solve oh patternmatched thing place want add another thing middle well thank goodness type find place fact thing added nobody cared except new code consumed different way would nt change anything except producer consumer everybody else could nt possibly know right new mean young programmer everybody tired old nt matter young young really know young got lot free space used say empty head right got lot free space available fill whatever like type system quite fun endorphin standpoint solving puzzle solving problem give rush puzzle solving really cool think kind verification whatnot incredibly important à la carte right depending need depending amount money spend depending want express able pull different kind verification technology shelf apply built right diversity need diversity approach diversity cost addition think extent tool pointed system level problem language parochialism get bang buck right many people used spec spec wire protocol yeah going lot going wo nt talk much spec next version increase programmability finally information v logic bottom line going programming right fact actually nt know drive car ca nt explain drive car ca nt explain play go ca nt therefore ca nt apply traditional logic encoding make program successfully ca nt approaching problem programming nt know nt know explain like know drive car nt know explain drive car moving informationtrained brain right deep learning machine learning statistical model thing like use information drive model full imprecision speculation still effective amount data used train making decent decision even though also could nt explain necessarily work program though going need arm leg eye right train big deep learning network get data etl right nt made decision going well get skynet wo nt problem anymore audience laughter right think quite critical working programming language programmable amenable manipulation program right fun use clojure write know brain building also useful able use clojure information manipulation preparation well use clojure program program component target action decisionmaking thing end realworld safety going come experience going come proof anybody get stage make statement type system yielding safe system safe mean realworld true really interesting deep learning technology like pointed line top pointed misconception problem say know right nt know play go know drive car let make system could figure learn otherwise gon na get wrong going emphasize write programmable program clojure wellsuited generic way represent information emphasis generic way compose argument without adopting type system right hard enough drive car understand monad know going work reified system subject dynamic discovery think spec combined rest clojure reified great way make system system learn therefore learn use course ability enhance program time would encourage embrace fact clojure different nt cowed proof people right programming solved problem ok logic tool nt master nt underneath logic system work encouraging design system level right programming language get infatuated programming language know actually skeptical programming language key programming nt think small part programming know driver programming embrace new opportunity going bunch talk conference deep learning take advantage make programmable program solve puzzle problem puzzle thank audience applause
447,Lobsters,clojure,Clojure programming,PostgreSQL Async Notifications in Luminus,http://yogthos.net/posts/2016-11-05-LuminusPostgresNotifications.html,postgresql async notification luminus,notify database migration query server pgjdbcng notification listener mount websocket connection client http reframe event websocket connection user interface,many situation application need react change data simplest way handle requirement keep state server session unfortunately make difficult scale application horizontally incur additional memory requirementsa common solution problem use external queue service instance application subscribes however add new component architecture need maintaineda le known option use postgres notify command send push notification database allows multiple instance application subscribe directly database listen eventsthis post walk configuring luminus app listen postgres notification broadcast connected client websocketprerequisites let start creating new project app lein new luminus pgfeeddemo postgres reframe databasethe first step create schema app set connection url profilesclj eg profilesdev env databaseurl jdbc pgsql userfeeds passwordfeeds migrationsonce schema ready write migration script creates table called event set notification trigger let run following command project root folder create migration file lein migratus create eventstable next add following script migration create table event id serial primary key event text create function notifytrigger return trigger declare begin tgtablename name table triggered tgop name trigger operation new new value row tgop insert tgop update execute notify tgtablename tgop new else execute notify tgtablename tgop end return new end language plpgsql create trigger eventtrigger insert update delete event row execute procedure notifytrigger thenotifytrigger function broadcast notification table name operation parameter available eventtrigger run whenever insert update delete operation performed message tablewe also add migration posterity drop function notifytrigger cascade drop table event run migration follows lein run migrate querieslet open resourcessqlqueriessql file replace default query following name event n doc insert new event insert event event value event serverunfortunately official postgres jdbc driver receive asynchronous notification us polling check notification issued instead use pgjdbcng driver provides support many postgres specific feature including async notification let update app use driver instead swapping dependency projectclj orgpostgresqlpostgresql comimpossiblpgjdbcngpgjdbcng notification listenerlet open pgfeeddemodbcore namespace update fit purpose since longer using official postgres driver need update namespace declaration remove reference also add import pgnotificationlistener class used add listener connection keep thing simple also remove protocol extension declared resulting namespace look follows n pgfeeddemodbcore require cheshirecore refer generatestring parsestring clojurejavajdbc jdbc conmancore conman pgfeeddemoconfig refer env mountcore refer defstate import comimpossiblpostgresapijdbcpgnotificationlistener defstate dynamic db start conmanconnect jdbcurl env databaseurl stop conmandisconnect db conmanbindconnection db sqlqueriessql order add notification listener first create connection let create mount defstate called notificationsconnection hold defstate notificationsconnection start jdbcgetconnection connectionuri env databaseurl stop close notificationsconnection next add function allow u add remove listener given connection defn addlistener conn id listenerfn let listener proxy pgnotificationlistener notification chanid channel message listenerfn chanid channel message addnotificationlistener conn listener jdbcdbdocommands connection notificationsconnection str listen name id listener defn removelistener conn listener removenotificationlistener conn listener let start application running lein run terminal start nrepl become available repl connected run following code start database connection register listener require reload pgfeeddemodbcore inn pgfeeddemodbcore mountcorestart db notificationsconnection addlistener notificationsconnection event fn args apply println got message args test adding new message produce notification event event hello world one function run see something like following printed terminal message added database got message message insert hello world websocket connectionwe ready setup websocket connection used push notification client update pgfeeddemorouteshomenamespace look follows n pgfeeddemorouteshome require pgfeeddemolayout layout compojurecore refer defroutes get pgfeeddemodbcore db mountcore refer defstate immutantwebasync async clojuretoolslogging log defstate channel start atom defstate onreload noop eventlistener start dbaddlistener dbnotificationsconnection event fn message doseq channel channel asyncsend channel message stop dbremovelistener dbnotificationsconnection eventlistener defn persistevent event dbevent event event defn connect channel loginfo channel open swap channel conj channel defn disconnect channel key code reason loginfo close code code reason reason swap channel remove channel defn homepage layoutrender homehtml defroutes homeroutes get homepage get event request asyncaschannel request onopen connect onclose disconnect onmessage persistevent channel state contain set channel currently connected clientsthe eventlistener create new listener triggered event stored database handler function broadcast event connected client note need onreload noop metadata listener prevent registered multiple time case namespace reloaded developmentwhenever server receives message client message persisted database persistevent functionfinally create event route used manage websocket communication clientsthe clientthe client need track currently available message allow user send new message server update available message based server websocket notificationslet run figwheel start clojurescript compiler start working clientside code running following command lein figwheel figwheel compiler start navigate http browser load clientside applicationreframe eventswe start adding handler adding message pgfeeddemohandlers namespace regeventdb event fn db event update db event fnil conj event next add corresponding subscription see current message pgfeeddemosubscriptions namespace regsub event fn db event db websocket connectionwe add pgfeeddemows namespace manage clientside websocket connection n pgfeeddemows defonce wschan atom nil defn send message wschan send wschan message throw jserror websocket available defn connectws url handler iflet chan jswebsocket url set onmessage chan data handler reset wschan chan throw jserror websocket connection failed user interfacefinally update pgfeeddemocore namespace list incoming event allow user generate event update namespace look follows n pgfeeddemocore require reagentcore r reframecore rf pgfeeddemohandlers pgfeeddemosubscriptions pgfeeddemows w defn homepage divcontainer divnavbar divrow divcard divcardheader event divcardblock ul event rfsubscribe event key event li event hr divrow spanbtnprimaryinputgroupaddon onclick wssend str user event jsdate generate event defn mountcomponents rrender homepage getelementbyid jsdocument app defn init rfdispatchsync initializedb wsconnectws str w host jslocation event rfdispatch event mountcomponents able send event server see notification browser also able generate event running query directly database another instance applicationthe complete source project available
448,Lobsters,clojure,Clojure programming,Transducers from the ground up: using them in practice.,https://labs.uswitch.com/transducers-from-the-ground-up-the-practice/,transducer ground using practice,,moving usercentric design model product developmenthere uswitch trying change build product process thrown fair challenge always
450,Lobsters,clojure,Clojure programming,The Multiple Index Problem (2012),http://pepijndevos.nl/2012/08/12/the-multiple-index-problem.html,multiple index problem,expression problem dijkstras algorithm fibonacci heap github mine collision detection quadtree,would like name problem functional programming talk aout clojure solves expression problem th multiple index problem deserved little attention even name simple example multiple index seen relational database querry table like select foo add index table querry field like select foo name pepijn would translate hash map imperative language could following pepijn ben pepijn append foo foo want functional language luck basic case add indirection user def index userindex user def user def pepijn ben user def newindex updatein index get pepijn conj foo usernewindex user get newindex get foo next show case real pain rather anoying dijkstras algorithm dijkstras algorithm used find shortest path graph fairly easy implement using vector also slow every itteration need find closest unexplored node flat list need walk way solve use fibonacci heap constant time logarithmic time opperations getting decrementing lowest key however method lookingg key walking tree way done imparative language pointer node functional language youre stuck walking tree defeat whole purpose using fibonacci heap possible implement dijkstra pure functional way optiomal time complexity ended using mutable heap decrementing key yuk see code mary wrote hacker school github fibbonaccy flat array mine using priorityblockingqueue collision detection struggled problem clojure game engine realised repeating pattern started modeling world list object quickly found bat needed know ball turned world hash map id object good needed collision detection dozen object compare object al others see collide good lukily datastructures spatial indexing see problem wrote quadtree clojure soon stuck object tree way look id think ended black magic sorted map lookup id okayish collision detection say problem soltuion satisfying workaround try adding intermediate index introducing mutability painfull
451,Lobsters,clojure,Clojure programming,The Case for Clojure and GraphQL: Replacing Django,https://cheesecakelabs.com/blog/case-clojure-graphql-replacing-django/,case clojure graphql replacing django,good part clojure many blog much better job repldriven lacinia lacinia doc nice tutorial excellent talk le friction mobile backend team graphiql need uiaware endpoint retired fewer bug angular git commit guideline django codebase contains fix every feature committed clojure codebase contains fix every feature fewer line code correlation fewer line code bad part immature ecosystem overfetching luminus support luminus admin admin rest small stuff consideration jon pither,last month worked two project similar scope complexity api backends mobile apps similar requirement timeframes however one thing set apart one written django rest written clojure graphqlsince main developer project able make useful comparison approach post describe pro con eachthe good partsclojurei get detail clojure awesome since many blog around web much better job say combination immutability repldriven development functional programming unmatched language term productive fun development experiencelaciniathere graphql option clojure testing popular library one came way ahead others lacinia follows clojure principle simplicity data function macro letting developer compose schema pure ish edn also used internal apis walmartnow one welldesigned library simple predictable make extending code base breeze get way thing get complex need add new query mutation graphql parlance endpoint simply matter updating schema writing resolver function datastoreagnostic fetch one multiple store even rest endpoint done plus error message excellent especially clojure lib many resource around lean lacinia doc decent nice tutorial excellent talk get thing startedless friction mobile backend teamscompared django project experienced lot le friction backend mobile team fewer argument field endpoint provide format response since client query however wantsin addition typed schema mean contract sitting client data guarantee entire team page start make possible introspect schema used great advantage graphql worldonce schema defined anyone graphiql client interactively explore nicety autocompletion syntax highlighting even pretty formatting alone worth weight gold fan autogenerated api doc feature make project le likely suffer documentation driftsince graphql query extremely flexible allowing client rename field response even fetch entire ui requirement one go need uiaware endpoint retiredfewer bugsevery commit make formatted according angular git commit guideline autogenerate nice changelogs also allowed u generate stats comparison django codebase contains fix every feature committed clojure codebase contains fix every feature huge difference honest really attribute either clojure lacinia graphql alone think synergy technology powerfulfewer line codethis might related point since known correlation loc number bug codebasei happen hold hardwon minority opinion code base particular believe quite staunchly might add worst thing happen code base size steve yeggeeven though implement many feature come free django django rest framework clojure project like admin site tokenbased authentication social authentication end fewer line code writing clojure project contains fewer line codethe bad partsimmature ecosystemin djangoland feature might need web app covered external library authentication good example many mature library mostly plug play let focus important part problem domain although lot web library clojure number library solve authentication problem graphql zero write big deal since excellent library like buddy help along still even close plug playbesides library also problem consensus many architecture issue like status code auth file uploadsgraphql endpoint always return status code convey happened case error surface error backend course http error code nothing failure graphql query field resolver might return error parent still open question left developer figure outwe chose pragmatic start given roadblock would implement endpoint rest later try find idiomatic graphql solution hit situation twice right beginning authentication file uploads month later still found solution file uploadswe tried using stringbased mutation file uploads two problematic downside make file size larger lose option restarting failed uploadoverfetchinggraphql care store care calling resolve method populating data request easy run query performance issue granted even problem unoptimized clojure app order magnitude faster fast django server however burden entirely developer build smart resolversluminus supportour main tool writing web server clojure luminus awesome set tested documented utility library start lacinia provides companion library expose schema pedestal endpoint support subscription utility none luminus working something admindjango provides box pretty decent admin interface strong reason choosing django corresponding package clojure choice develop custom admin interface fortunately found great library called admin rest let build custom admin interface using prebuilt react componentssmall stuffi left last complaint new clojure community horrendous java stack trace memory usage startup time still suck plus impedance mismatch j camel case clojure kebab caseconsiderationsgenerally much better experience developing web app clojure graphql django django rest framework feel like experience comparable language using clojure since python since although different project lot similarity scope sizebesides framework top another framework make hard developer familiar drf idiom extend codebase django drf combo tends encourage complex oo code know exactly method override need custom functionality making code path endpoint actual data fetching kind opaque know python learning curve pretty real win choosing immutable functional language clojure around mark project large traditional oo system start buckle gravity clojure codebase shine comparison jon pitherclojure lacinia opposite problem everything plain clojure using data structure used know language well take hour get goingin end although large ecosystem around web development python django come default inimitable admin given similar project backend api mobile app would choose clojure probably lacinia simplicity productivity
452,Lobsters,clojure,Clojure programming,Lines of Code - does it matter?,https://labs.ig.com/lines-of-code-matter,line code matter,clojure spark hdfs kafka code project incidental complexity inherent complexity incidental complexity author twitter linkedin,keen advocate clojure programming language ig rarely put emphasis succinct clojure compared java recent event challenged year java experience tended brush aside comment java verbosity one following argument line code loc bogus metric ides generate java code lesson learned perl notorious incomprehensible loc metric simply important time ago started building first spark job first two wrote basically read csv file hdfs transform line json push json kafka happened wrote one clojure one java reviewed code java version looked first surprised many class surprised surprised finding many class code perfectly idiomatic java code come love write surprised first place probably clojure version looked like maybe one huge file hundred line code line code perhaps clojure version completely unreadable gibberish magic variable parenthesis place main transformation logic two version difference readability java version lot parenthesis code usually would pay attention java verbosity java code review found thinking class start class go next class fit together dependency graph look like implement interface necessary responsibility class data transformation data transformation correct clojure code review data transformation correct made realize clojure version way simpler understand fact single file line code important reason project nt bigger project requirement exactly true clojure microservices file usually simplest java microservice several dozen experience know time understand codebase small class understanding one class incidental complexity given inherent complexity problem clojure version able express solution line code java version require line code clojure version easier understand extra codebase line perfectly idiomatic java code answer extra line code fall incidental complexity bucket complexity programmer create using right tool complexity business paid u create pay u maintain never really ever asked line code important measure productivity certainly measure complexity especially complexity incidental instead inherent imagine deleting code maintain author daniel lebrero work technical architect ig big data team year java experience clojure big advocate functional approach find twitter linkedin
453,Lobsters,clojure,Clojure programming,"Clojure Numerics, Part 4 - Singular Value Decomposition (SVD)",http://dragan.rocks/articles/17/Clojure-Numerics-4-Singular-Value-Decomposition-SVD,clojure numerics part singular value decomposition svd,,matrix r time n exist orthogonal matrix uin r time vin r n time n diagonal matrix sigma utavsigmadiag dot sigmap r mtimes n pmin n geq dot geq sigmap geq column u left singular vector begin equation u begin bmatrix dot um end bmatrix r time end equation column v right singular vector begin equation v begin bmatrix dot vn end bmatrix r n time n end equation element sigma singular value simple example clojure code let dge svd true true uncomplicateneanderthalinternalcommonsvdecomposition sigma realdiagonalmatrix double type gd u realgematrix double layout column vt realgematrix double layout column master true let check whether true utavsigma example let dge usv svd true true u u usv vt vt usv sigma sigma usv mm u sigma vt realgematrix double layout column hurrah equal original definition nt say ausigma vt said utavsigma matter bit arithmetic equation equivalent
454,Lobsters,clojure,Clojure programming,A GraphQL tutorial,http://tirkarthi.github.io/clojure/2017/10/09/graphql-tutorial.html,graphql tutorial,early day rest limitation rest evaluating graphql common myth surrounding graphql graphql security graphql rdbms graphql writes music collection app graphql schema object query mutation graphql resolvers graphql query let u go deeper query result graphql mutation mutation result renaming key declarative query igraphql sample use case testing disadvantage graphene relicensed github,thanks walmart lab lacinia library helpful member slack channel early day rest u use rest everyday building web application think great step forward early day writing html every endpoint pretty tightly coupled resource trying access like getbooks updatebook deletebook etc apart naming every project used follow different convention hurdle move one project another rest fixed lot problem hit limitation rest daily programming team split backend frontend limitation rest frontend need key different backend supply time backend team serializes record using database column name object frontend team need value different key hence lead back forth update backend code doc eg frontend might require column lastupdatedat lastmodifiedat frontend team consuming data need page thus increasing bandwidth page eg summary list name subject get request returning lot data need rest provide good way get required key backend need maintain separate endpoint different resource hence frontend team need present cohesive page data different identity need make varying amount rest call get data manipulate data browser forming cohesive state eg page information book author along book written author would perform get request book information another one author followed another list book author call problem returning lot unused data evaluating graphql evaluating usage graphql solve problem identify ecosystem around graphql see utilise current tooling solve use case following sample application implemented using lacinia open source graphql implementation clojure walmart lab explaining experience limitation common myth surrounding graphql graphql security since graphql involves querying browser often scare people around performing query database browser could lead data breach forth get know much sandboxed amount access give user along limitation surrounding permission graphql rdbms common misconception due name graphql requires sort graph database nosql database graphql spec implementation spec really limit graph database graphql used rdbms nosql even inmemory store tutorial use sqlite graphql writes another misconception surrounding usage graphql le people show cool demo read aspect database making feel like writes hard graphql writes use underlying concept read often recommended specific writes unlike rest update almost field using endpoint music collection app tutorial involve building simple music collection app two table artist table contains id name artist track table contains track id name along foreign key reference artist id track graphql schema graphql want u define schema file essentially allows u define field enabled access along meta data retrieving given data thus define make sure specified field exposed schema file using us edn use json format necessary schema file project object track field trackid type int trackname type string trackartist type list artist resolve getartist artist field artistid type int artistname type string track type list track resolve gettracks mutation createartist resolve createartist type list artist args artistname type string query artist resolve getartist type list artist args id type int name type string track resolve gettracks type list track args trackid type int first type int trackname type string object object entity containing given field track object field trackid trackname trackartist type could see trackartist object unlike field primitive type also specify resolved using getartist function similarly define field artist also contains track object list track resolved gettracks function writing resolvers soon thus confirming fact graph database necessary using graphql specified field accessible client thus need worry data breach unless specify secret field query query determine query performing using graphql need name object specify query resolved using getartist function return list artist also specify field args accepting client querying set fixed query thus exposing table client mutation mutation graphql way specifying writes mentioned recommended use specific mutation unlike rest single endpoint multiple update createartist mutation enables accept artist name create record also specifies returning list artist write logic handled createartist function graphql resolvers graphql resolvers way return appropriate result query along handling writes thus simple resolver artist return defn getartist context argument value let key id name argument id trackartist id id value artistid artistname kiara getartist take three parameter context argument value context nil part argument contains argument passed part query value something get soon since specified schema file id limit name field filter record use graphql query query artist id artistname graphql single endpoint post query get result instead using separate endpoint resource post query payload get result case query via query params return result using rich ide production use case sending data query params result data breach query attribute defines readquery querying artist id need artistname since specify artistid also part object returned thus query return result data artist artistname kiara let u go deeper since artistid artistname returned directly part result table retrieve related track artist also part object see schema file attached function gettracks hence retrieve track information given artist graphql pass artist entry returned list get track function value argument imagine gettracks function defn gettracks context argument value let key artistid trackname trackid value key trackname trackid first trackname trackname trackid trackid argument trackid trackname heavy get artistid value map thus return track artist given artistid simply return fixed set result use information query database inmemory store return result thus query get artist information along tracknames artist query query artist id artistname track trackname result data artist artistname kiara track trackname heavy magic part one level deeper get artistname track since declared artist field track thus track row track id name artist id passed getartist function since artist id get artistname one level deeper keep remember fact callback done row artist track thing result function call get result hence go deeper deeper amount call increase lot instead returning fixed set result use data retrieval logic function actual getartist function part repo us honeysql construct query return result defn getartist context argument value let key id name argument id trackartist id id value query select mergewhere id artistid id mergewhere name artistname name artist sqlformat result jdbcquery db query result graphql mutation done read part write part significant half application graphql us concept mutation handle writes mutation part similar query except make insert instead using select query function createartist resolver get artist name creates artist entry table get artist name insert table last inserted row returned since specified return type return artist object filter output field query following mutation creates artist named amy return id name defn createartist context argument value let key artistname argument insertstmt insertinto artist column artistname value artistname sqlformat result jdbcexecute db insertstmt resquery select artist orderby artistid desc limit sqlformat artist jdbcquery db resquery artist mutation mutation createartist artistname amy artistname artistid result data createartist artistname amy artistid renaming key addition query part graphql allows frontend team rename key result need done specifying key name field name query return result artistname key simply name query artist id name artistname data artist name kiara declarative query since query declarative nature easily maintain also change time since far easy resolve relation also write le fill lot use case music app user love song artist genre detail retrieved easily similarly list song artist user thus building cohesive profile using data lot endpoint rest single query graphql igraphql igraphql sort ide make development lot interactive also generates doc schema file thus make explore field ease interactivity compared something like swagger setup sample use case case source code get commits get author detail along repository using language source code case shopping cart app display item retrieve different item show user retrieving necessary field case comparing two item let user determine field need compare get relevant field resource saving lot bandwidth mobile apps enables developer build platform instead using graphql glueing rest call testing testing query lot easier executing query comparing result make writing extensive test suit complexity highly related query also ensures upgrade one schema another test suite robust indicating breakage involved disadvantage graphql spec hence lot custom code required supporting pagination ratelimiting permission etc depending upon language framework like django django rest framework type tooling built around graphene reducing lot work respect clojure need write code better control tradeoff though learning curve pretty easy paradigm shift involved writing graphql query dealing rest endpoint lot year licensing another major issue surrounding graphql though relicensed code post available github kindly add wrong missed anything post
455,Lobsters,clojure,Clojure programming,Manipulating complex data structures using Specter,https://www.youtube.com/watch?v=rh5J4vacG98,manipulating complex data structure using specter,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature understanding specter clojure missing piece youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature understanding specter clojure missing piece youtube
457,Lobsters,clojure,Clojure programming,Why I'm Productive in Clojure (2013),http://yogthos.net/posts/2013-08-18-Why-I-m-Productive-in-Clojure.html,productive clojure,balance power interactive development finishing thing selmer cesarbp activity cljpdf luminus,find often get excited learning new language use inevitably lose lustre eventually becomes another language tool box one exception rule clojure still enjoy using language much first learned reason strike right balance power simplicitythe balance powersome language simple also verbose probably heard people say verbosity really nt matter people go great length point language turing complete certain language simply write bit codei think missing point however question whether something expressed principle well language map problem solved one language let think term problem domain another force translate problem constructsthe latter often tedious rarely enjoyable end writing lot boilerplate code constantly repeating hope agree certain amount irony involved write repetitive codeother language nt verbose provide many different tool solving problem unfortunately working language often akin trying decide particular set screwdriver hardware megastoreyou end comparing brand checking number bit come set seeing one sale today soon forget wanted screwdriver first place feature thing keep head work language effectively many language find constantly expending mental overhead thinking different feature interact one anotherwhat matter language whether use without thinking language lacking expressiveness acutely aware writing code nt hand language many feature often feel overwhelmed get distracted playing themto make analogy math nicer general formula derive others memorize whole bunch formula specific problemsthis clojure come always easily derive solution particular problem small set general pattern number thing keep head overbearingall need become productive learn simple concept bit syntax however number way concept combined solve manner problem appears inexhaustible writing clojure year discover new way combine thing already know every single daymacros good example fact transform language using allows tackling wide range problem would otherwise require range specific tool language featuresinteractive developmentwhen solving problem clojure inevitably want write elegant solution express gist cleanly clearly largely due fact development process interactive work repl fumble around looking solution make sense experimentation internalized problem quickly write clean solution using newly gained understandingthe repl also help keep engaged trying find solution able try thing get immediate feedback enjoyable even code nt want see progression often enough motivator keep goinganother important feature repl encourages refactoring much likely refactor code easily test without disrupting workflowfinishing thingsinteractivity alone nt enough however feedback world would nt make one bit difference could nt actually solve problem reasonable amount timei find sharp falloff curve come staying engaged project probably noticed phenomenon start project excited enjoy seeing take shapehowever working project amount time excitement wane eventually might even dread touch code find critical get core functionality working hit stageonce project solves particular problem start using point get reap benefit spent effort also let identify functionality missing usage lot incentive add feature project actually usingmost recently found case working selmer able implement base parser couple day cesarbp implemented logic filtersit took couple day get template inheritance logic working sudden usable library week effort already actively using actual work new feature added piecemeal need come uphere github activity graph selmer see big initial spike sharp falloff similar patten seen project cljpdf luminus project matures bug inevitably found new feature added correspond occasional spike activity however initial phase project ca nt completed timely fashion nothing else happenin experience ca nt get something interesting working day likelihood actually finishing project start rapidly approaching zerowith clojure get thing done fast fast enough get something working initial spark excitement still present would hazard guess reason clojure many great library despite young language
458,Lobsters,clojure,Clojure programming,The state of code quality tools in Clojure,https://blog.jeaye.com/2017/08/31/clojure-code-quality/,state code quality tool clojure,ci relevant ticket gon na need relevant ticket relevant ticket relevant ticket spec function written cloverage striking similarity,august several project verifying quality correctness clojure code base surveying work distributed clojure server built heroku postgres took note issue came note represent current state thing well clojure community help move forwardout nine project evaluated three worked two immediately useful continuous integration ci worth noting code base tested nothing special term feature used contain cljc file shared clojure clojurescript make heavy use spec namespacequalified keywords apparently cause lot issue tooling jonaseeastwood eastwood great looking linter clojure designed find sort issue code smell unfortunately unable run server code since support namespaced map literal namespaces run raise falsepositive overrelevant ticket venantiusyagni yagni acronym gon na need project dead code finder one kind clojure world unfortunately support reader conditionals also choke usage specrelevant ticketskibit analyzer us corelogic search pattern code written idiomatic like many tool list kibit struggle parsing clojure like nested requires reader conditionalsrelevant ticketsleinbikeshed one tool worked box unfortunately output terribly useful two issue reported line longer character function missing doc string think given name leinbikeshed take seriously providing practical tooling ci integration certainly get point choking codeby comparing description slamhound seemed like one useful one bunch ability clean namespace alias add requires even remove unused requiresunfortunately maintained year started sprouting various issue pr go unloved importantly fails parse aliased keywords well parsing dotted namespace aliasesrelevant ticketsspectrum one list exciting use ci performs static analysis using spec type inference determines code incorrect without running given robust spec reaching land dependent type promising avenue unfortunately speaking developer bit clear spectrum yet ready usein preparation spec function tool must furthermore worked without issue crawl project dependency check vulnerable version library known vulnerability one dependency informs also conveys severity issue see clojure backend would run ci without thisorchestra clojure library made dropin replacement clojurespectestalpha provides custom instrumentation validates aspect function spec best work box source code used testing development even productioni written cloverage recommend cloverage report much coverage test instrumenting code see function called branch taken etc work box code base integrates nicely ci setupstriking similaritiesthere promising tool clojure jvm world verifying code quality correctness automatically making improvement even suggesting cleaner idiom seems like fact struggling parsing clojure code reader conditionals namespace alias nested requires aliased keywords given consistent problem across several project several author indication insufficient unreliable tooling come statically reading clojure code likely due clojure dynamic nature nevertheless untapped market heregiven ticket linked encourage reader try project code base issue ticket ping maintainer contribute pr lastly project list email
460,Lobsters,clojure,Clojure programming,Clojure: Turtles All The Way Down,https://www.youtube.com/watch?v=Gkwc3332L-0,clojure turtle way,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojure turtle way youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature clojure turtle way youtube
