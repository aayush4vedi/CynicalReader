ID,Source,Tag_Code,Tag_Name,Title,Url
1,Lobsters,compilers,Compiler design,Modern Compiler Construction (2016),https://www.youtube.com/watch?v=wSdV1M7n4gQ
2,Lobsters,compilers,Compiler design,Yatta Language - ML like language on the GraalVM,https://yona-lang.org/
3,Lobsters,compilers,Compiler design,Proposal: Register-based Go calling convention,https://go.googlesource.com/proposal/+/refs/changes/78/248178/1/design/40724-register-calling.md
4,Lobsters,compilers,Compiler design,Mypyc - Mypy to Python C Extension Compiler,https://github.com/python/mypy/tree/master/mypyc
5,Lobsters,compilers,Compiler design,What Is The Minimal Set Of Optimizations Needed For Zero-Cost Abstraction?,https://robert.ocallahan.org/2020/08/what-is-minimal-set-of-optimizations.html
6,Lobsters,compilers,Compiler design,The Deep Learning Compiler: A Comprehensive Survey,https://arxiv.org/abs/2002.03794
7,Lobsters,compilers,Compiler design,CROBOTS (2013),https://tpoindex.github.io/crobots/pcjs/crobots-pcjs.html
8,Lobsters,compilers,Compiler design,"Compiler numbers, and why they don't matter",https://briancallahan.net/blog/20200806.html
9,Lobsters,compilers,Compiler design,Sea of Nodes (2015),https://darksi.de/d.sea-of-nodes/
10,Lobsters,compilers,Compiler design,A Quick Introduction to Register Allocation,https://hassamuddin.com/blog/reg-alloc/
11,Lobsters,compilers,Compiler design,SOIL: Single Open Intermediate Language,http://soil-initiative.org/
12,Lobsters,compilers,Compiler design,Computation graphs and graph computation,http://breandan.net/2020/06/30/graph-computation/
13,Lobsters,compilers,Compiler design,Langcraft: The LLVM target for Minecraft you've never wanted,https://github.com/SuperTails/langcraft
14,Lobsters,compilers,Compiler design,An APL Machine (1970),https://www.slac.stanford.edu/pubs/slacreports/reports07/slac-r-114.pdf
15,Lobsters,compilers,Compiler design,Three Architectures for a Responsive IDE,https://rust-analyzer.github.io/blog/2020/07/20/three-architectures-for-responsive-ide.html
16,Lobsters,compilers,Compiler design,"Adding ""@ts-expect-error"" comments to TypeScript",http://blog.joshuakgoldberg.com/ts-expect-error/
17,Lobsters,compilers,Compiler design,Tutorial: Building Your Language with Graal & Truffle,https://norswap.com/truffle-tutorial/
18,Lobsters,compilers,Compiler design,How LLVM optimizes power sums (2019),https://kristerw.blogspot.com/2019/04/how-llvm-optimizes-geometric-sums.html
19,Lobsters,compilers,Compiler design,How Cheerp supports 64-bit integers in both JavaScript and WebAssembly,https://medium.com/leaningtech/how-cheerp-supports-64-bit-integers-in-both-javascript-and-webassembly-79485761615a
20,Lobsters,compilers,Compiler design,The Floppy Disk of Floating Point,https://www.evanmiller.org/the-floppy-disk-of-floating-point.html
21,Lobsters,compilers,Compiler design,Comparing compiler construction in Clojure and F#,https://www.youtube.com/watch?v=t8usj1fN9rs
22,Lobsters,compilers,Compiler design,Haxe Blog: Immix-based GC improves HashLink performance,https://haxe.org/blog/hashlink-gc/
23,Lobsters,compilers,Compiler design,"How JIT Compilers are Implemented and Fast: Julia, Pypy, LuaJIT, Graal and More",https://carolchen.me/blog/jits-impls/
24,Lobsters,compilers,Compiler design,"Don't Panic! Better, Fewer, Syntax Errors for LR Parsers",https://soft-dev.org/pubs/html/diekmann_tratt__dont_panic/
25,Lobsters,compilers,Compiler design,A Deep Introduction to JIT Compilers: JITs are not very Just-in-time,https://carolchen.me/blog/jits-intro/
26,Lobsters,compilers,Compiler design,Modern Compiler Construction (2016),https://www.youtube.com/watch?v=wSdV1M7n4gQ
27,Lobsters,compilers,Compiler design,Yatta Language - ML like language on the GraalVM,https://yona-lang.org/
28,Lobsters,compilers,Compiler design,Proposal: Register-based Go calling convention,https://go.googlesource.com/proposal/+/refs/changes/78/248178/1/design/40724-register-calling.md
29,Lobsters,compilers,Compiler design,Mypyc - Mypy to Python C Extension Compiler,https://github.com/python/mypy/tree/master/mypyc
30,Lobsters,compilers,Compiler design,What Is The Minimal Set Of Optimizations Needed For Zero-Cost Abstraction?,https://robert.ocallahan.org/2020/08/what-is-minimal-set-of-optimizations.html
31,Lobsters,compilers,Compiler design,The Deep Learning Compiler: A Comprehensive Survey,https://arxiv.org/abs/2002.03794
32,Lobsters,compilers,Compiler design,CROBOTS (2013),https://tpoindex.github.io/crobots/pcjs/crobots-pcjs.html
33,Lobsters,compilers,Compiler design,"Compiler numbers, and why they don't matter",https://briancallahan.net/blog/20200806.html
34,Lobsters,compilers,Compiler design,Sea of Nodes (2015),https://darksi.de/d.sea-of-nodes/
35,Lobsters,compilers,Compiler design,A Quick Introduction to Register Allocation,https://hassamuddin.com/blog/reg-alloc/
36,Lobsters,compilers,Compiler design,SOIL: Single Open Intermediate Language,http://soil-initiative.org/
37,Lobsters,compilers,Compiler design,Computation graphs and graph computation,http://breandan.net/2020/06/30/graph-computation/
38,Lobsters,compilers,Compiler design,Langcraft: The LLVM target for Minecraft you've never wanted,https://github.com/SuperTails/langcraft
39,Lobsters,compilers,Compiler design,An APL Machine (1970),https://www.slac.stanford.edu/pubs/slacreports/reports07/slac-r-114.pdf
40,Lobsters,compilers,Compiler design,Three Architectures for a Responsive IDE,https://rust-analyzer.github.io/blog/2020/07/20/three-architectures-for-responsive-ide.html
41,Lobsters,compilers,Compiler design,"Adding ""@ts-expect-error"" comments to TypeScript",http://blog.joshuakgoldberg.com/ts-expect-error/
42,Lobsters,compilers,Compiler design,Tutorial: Building Your Language with Graal & Truffle,https://norswap.com/truffle-tutorial/
43,Lobsters,compilers,Compiler design,How LLVM optimizes power sums (2019),https://kristerw.blogspot.com/2019/04/how-llvm-optimizes-geometric-sums.html
44,Lobsters,compilers,Compiler design,How Cheerp supports 64-bit integers in both JavaScript and WebAssembly,https://medium.com/leaningtech/how-cheerp-supports-64-bit-integers-in-both-javascript-and-webassembly-79485761615a
45,Lobsters,compilers,Compiler design,The Floppy Disk of Floating Point,https://www.evanmiller.org/the-floppy-disk-of-floating-point.html
46,Lobsters,compilers,Compiler design,Comparing compiler construction in Clojure and F#,https://www.youtube.com/watch?v=t8usj1fN9rs
47,Lobsters,compilers,Compiler design,Haxe Blog: Immix-based GC improves HashLink performance,https://haxe.org/blog/hashlink-gc/
48,Lobsters,compilers,Compiler design,"How JIT Compilers are Implemented and Fast: Julia, Pypy, LuaJIT, Graal and More",https://carolchen.me/blog/jits-impls/
49,Lobsters,compilers,Compiler design,"Don't Panic! Better, Fewer, Syntax Errors for LR Parsers",https://soft-dev.org/pubs/html/diekmann_tratt__dont_panic/
50,Lobsters,compilers,Compiler design,A Deep Introduction to JIT Compilers: JITs are not very Just-in-time,https://carolchen.me/blog/jits-intro/
51,Lobsters,compilers,Compiler design,A crash course in just-in-time (JIT) compilers (2017),https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/
52,Lobsters,compilers,Compiler design,EsoLangVM Compiler Infrastructure,https://github.com/shinh/elvm
53,Lobsters,compilers,Compiler design,Making the Fennel compiler self-hosting with another compiler,https://technomancy.us/192
54,Lobsters,compilers,Compiler design,Query-based compiler architectures,https://ollef.github.io/blog/posts/query-based-compilers.html
55,Lobsters,compilers,Compiler design,The PVM - Python Virtual Machine,https://www.ics.uci.edu/~brgallar/week9_3.html#virtual
56,Lobsters,compilers,Compiler design,LLVM for m68k completed (but not merged),https://mail-index.netbsd.org/port-amiga/2020/06/21/msg008139.html
57,Lobsters,compilers,Compiler design,Reverse Engineering Snapchat (Part II): Deobfuscating the Undeobfuscatable,https://hot3eed.github.io/2020/06/22/snap_p2_deobfuscation.html
58,Lobsters,compilers,Compiler design,"Compiling a Functional Language Using C++, Part 12 - Let/In and Lambdas",https://danilafe.com/blog/12_compiler_let_in_lambda/
59,Lobsters,compilers,Compiler design,Free Pascal 3.2.0 released,https://freepascal.org/
60,Lobsters,compilers,Compiler design,Alive2: Automatic verification of LLVM optimizations,https://github.com/AliveToolkit/alive2
61,Lobsters,compilers,Compiler design,The Saturation Effect in Fuzzing,https://blog.regehr.org/archives/1796
62,Lobsters,compilers,Compiler design,"Static typing, pattern matching, and Inko's self-hosting compiler",https://inko-lang.org/news/static-typing-pattern-matching-and-inkos-self-hosting-compiler/
63,Lobsters,compilers,Compiler design,C++ Insights,https://cppinsights.io/
64,Lobsters,compilers,Compiler design,"Let's make a Teeny Tiny compiler, part 1",http://web.eecs.utk.edu/~azh/blog/teenytinycompiler1.html
65,Lobsters,compilers,Compiler design,VAX port needs help,https://blog.netbsd.org/tnf/entry/vax_port_needs_help
66,Lobsters,compilers,Compiler design,The Go compiler needs to be smarter,https://lemire.me/blog/2020/06/04/the-go-compiler-needs-to-be-smarter/
67,Lobsters,compilers,Compiler design,A New RegExp Engine in SpiderMonkey,https://hacks.mozilla.org/2020/06/a-new-regexp-engine-in-spidermonkey/
68,Lobsters,compilers,Compiler design,A baseline compiler for guile,http://wingolog.org/archives/2020/06/03/a-baseline-compiler-for-guile
69,Lobsters,compilers,Compiler design,Stabilizer: Rigorous Performance Evaluation (2013),https://emeryberger.com/research/stabilizer/
70,Lobsters,compilers,Compiler design,Idris 2 version 0.2.0 Released,https://www.idris-lang.org/idris-2-version-020-released.html
71,Lobsters,compilers,Compiler design,Neut - A dependently-typed programming language with static memory management,https://github.com/u2zv1wx/neut
72,Lobsters,compilers,Compiler design,One-pass Compiler Primer,https://keleshev.com/one-pass-compiler-primer
73,Lobsters,compilers,Compiler design,Diagrams for Composing Compilers,https://johnwickerson.wordpress.com/2020/05/21/diagrams-for-composing-compilers/
74,Lobsters,compilers,Compiler design,Synthesizing JIT Compilers for In-Kernel DSLs,https://www.cs.utexas.edu/~isil/jitsynth.pdf
75,Lobsters,compilers,Compiler design,Adding peephole optimization to Clang,https://egorbo.com/opt-for-llvm-guide.html
76,Lobsters,compilers,Compiler design,ALGOL 60 at 60: The greatest computer language you've never used and grandaddy of the programming family tree,https://www.theregister.co.uk/2020/05/15/algol_60_at_60
77,Lobsters,compilers,Compiler design,Let's build a compiler (1988),https://compilers.iecc.com/crenshaw/tutor1.txt
78,Lobsters,compilers,Compiler design,ZetZ - a symbolic verifier and transpiler to bare metal C,https://github.com/zetzit/zz
79,Lobsters,compilers,Compiler design,The Guaranteed Optimization Clause of the Macro-Writer's Bill of Rights,https://www.youtube.com/watch?v=LIEX3tUliHw
80,Lobsters,compilers,Compiler design,Kotlingrad: Shape-Safe Differentiable Programming with Algebraic Data Types,https://github.com/breandan/kotlingrad
81,Lobsters,compilers,Compiler design,Compact lexer table representation,https://def.lakaban.net/posts/2020-05-02-compact-lexer-table-representation
82,Lobsters,compilers,Compiler design,Make LLVM fast again,https://nikic.github.io/2020/05/10/Make-LLVM-fast-again.html
83,Lobsters,compilers,Compiler design,GCC 10.1 Released,https://gcc.gnu.org/pipermail/gcc-announce/2020/000163.html
84,Lobsters,compilers,Compiler design,Locating a compiler bug with git bisection,https://blog.yossarian.net/2020/05/07/Locating-a-compiler-bug-with-git-bisection
85,Lobsters,compilers,Compiler design,Bringing GNU Emacs to Native Code,https://toobnix.org/videos/watch/1f997b3c-00dc-4f7d-b2ce-74538c194fa7
86,Lobsters,compilers,Compiler design,GDScript progress report: Writing a tokenizer,https://godotengine.org/article/gdscript-progress-report-writing-tokenizer
87,Lobsters,compilers,Compiler design,A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World (2010),https://cacm.acm.org/magazines/2010/2/69354-a-few-billion-lines-of-code-later/fulltext
88,Lobsters,compilers,Compiler design,Build your own WebAssembly Compiler,https://blog.scottlogic.com/2019/05/17/webassembly-compiler.html
89,Lobsters,compilers,Compiler design,"""Bringing GNU Emacs to Native Code"" at the European Lisp Symposium",https://lists.gnu.org/archive/html/emacs-devel/2020-04/msg01850.html
90,Lobsters,compilers,Compiler design,OCaml Multicore Update: 04.2020 with a preprint “Retrofitting Parallelism onto OCaml”,https://discuss.ocaml.org/t/multicore-update-april-2020-with-a-preprint-paper/5630
91,Lobsters,compilers,Compiler design,A journey optimizing the Go Compiler,https://segflow.github.io/post/go-compiler-optimization/
92,Lobsters,compilers,Compiler design,Top-Down operator precedence parsing (2010),https://eli.thegreenplace.net/2010/01/02/top-down-operator-precedence-parsing/
93,Lobsters,compilers,Compiler design,Speeding up the Sixty compiler,https://ollef.github.io/blog/posts/speeding-up-sixty.html
94,Lobsters,compilers,Compiler design,Assert Rewriting - A GCC plugin - part 1,https://jongy.github.io/2020/04/25/gcc-assert-introspect.html
95,Lobsters,compilers,Compiler design,The New Clang _ExtInt Feature Provides Exact Bitwidth Integer Types,http://blog.llvm.org/2020/04/the-new-clang-extint-feature-provides.html
96,Lobsters,compilers,Compiler design,"Writing an optimizing IL compiler, for dummies, by a dummy: 0x1 Symbolic Expressions",https://blog.can.ac/2020/04/11/writing-an-optimizing-il-compiler-for-dummies-by-a-dummy/
97,Lobsters,compilers,Compiler design,Flpc is now self-hosted,https://blog.asrpo.com/flpc_is_now_self_hosted
98,Lobsters,compilers,Compiler design,Do humans or compilers produce faster code?,http://nibblestew.blogspot.com/2020/04/do-humans-or-compilers-produce-faster.html
99,Lobsters,compilers,Compiler design,Build your first LLVM Obfuscator,https://medium.com/@polarply/build-your-first-llvm-obfuscator-80d16583392b
100,Lobsters,compilers,Compiler design,"Micro C, Part 0: Introduction",https://blog.josephmorag.com/posts/mcc0/
101,Lobsters,compilers,Compiler design,"Logos 0.11 is out: Iterators, callbacks, and stateful tokens",https://github.com/maciejhirsz/logos/releases/tag/v0.11.0
102,Lobsters,compilers,Compiler design,LLHD: A Multi-level Intermediate Representation for Hardware Description Languages,https://arxiv.org/pdf/2004.03494.pdf
103,Lobsters,compilers,Compiler design,flat assembler: an open source assembly language compiler,https://flatassembler.net/
104,Lobsters,compilers,Compiler design,From Pratt to Dijkstra,https://matklad.github.io/2020/04/15/from-pratt-to-dijkstra.html
105,Lobsters,compilers,Compiler design,"Holy Language Wars, Batman",https://pixelherodev.github.io/2020/04/13/Holy-Language-Wars-Batman.html
106,Lobsters,compilers,Compiler design,Release of Zig 0.6,https://ziglang.org/download/0.6.0/release-notes.html
107,Lobsters,compilers,Compiler design,Simple but Powerful Pratt Parsing,https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html
108,Lobsters,compilers,Compiler design,RFC: a practical mechanism for applying Machine Learning for optimization policies in LLVM,http://lists.llvm.org/pipermail/llvm-dev/2020-April/140763.html
109,Lobsters,compilers,Compiler design,Pointless: a scripting language for learning and fun,https://ptls.dev/
110,Lobsters,compilers,Compiler design,Vellvm: Verified LLVM,https://www.cis.upenn.edu/~stevez/vellvm/
111,Lobsters,compilers,Compiler design,There's a Mathematician In Your Compiler,https://humanreadablemag.com/issues/2/articles/theres-a-mathematician-in-your-compiler
112,Lobsters,compilers,Compiler design,Optimizing Ruby Lazy Initialization in TruffleRuby with Deoptimization,https://engineering.shopify.com/blogs/engineering/optimizing-ruby-lazy-initialization-in-truffleruby-with-deoptimization
113,Lobsters,compilers,Compiler design,JavaScript engine fundamentals: Shapes and Inline Caches (2018),https://mathiasbynens.be/notes/shapes-ics
114,Lobsters,compilers,Compiler design,A Performance-Based Comparison of C/C++ Compilers (2017),https://colfaxresearch.com/compiler-comparison/
115,Lobsters,compilers,Compiler design,Lcc.NET: Targeting the .NET Common Intermediate Language from Standard C,https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-2002-112.pdf
116,Lobsters,compilers,Compiler design,"Compiling a Functional Language Using C++, Part 10 - Polymorphism",https://danilafe.com/blog/10_compiler_polymorphism/
117,Lobsters,compilers,Compiler design,LLVM 10.0.0 Release,https://lists.llvm.org/pipermail/llvm-announce/2020-March/000087.html
118,Lobsters,compilers,Compiler design,`zig cc`: a Powerful Drop-In Replacement for GCC/Clang,https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html
119,Lobsters,compilers,Compiler design,some parsers for k,http://effbiae.com/parserclub/
120,Lobsters,compilers,Compiler design,A Study of Clight and its Semantics,https://soap.coffee/~lthms/posts/ClightIntroduction.html
121,Lobsters,compilers,Compiler design,Cling | ROOT a Data analysis Framework,https://root.cern.ch/cling
122,Lobsters,compilers,Compiler design,"seafox: A blazing fast 100% spec compliant, self-hosted javascript parser written in Typescript",https://github.com/KFlash/seafox
123,Lobsters,compilers,Compiler design,A Pascal compiler in Haskell that compiles to LLVM,https://github.com/sam46/Paskell
124,Lobsters,compilers,Compiler design,GCC 9.3 Released,https://lists.gnu.org/archive/html/info-gnu/2020-03/msg00006.html
125,Lobsters,compilers,Compiler design,Equality Is Hard,https://www.craigstuntz.com/posts/2020-03-09-equality-is-hard.html
126,Lobsters,compilers,Compiler design,Whole STG program compiler (status report),https://www.patreon.com/posts/34711849
127,Lobsters,compilers,Compiler design,Exploiting an Accidentally Discovered V8 RCE,https://zon8.re/posts/exploiting-an-accidentally-discovered-v8-rce/
128,Lobsters,compilers,Compiler design,"Why you should not use (f)lex, yacc and bison",https://tomassetti.me/why-you-should-not-use-flex-yacc-and-bison/
129,Lobsters,compilers,Compiler design,Memory Management in Lobster,https://aardappel.github.io/lobster/memory_management.html
130,Lobsters,compilers,Compiler design,Miranda source released,http://miranda.org.uk/downloads
131,Lobsters,compilers,Compiler design,Intro to chrome’s v8 from an exploit development angle,https://sensepost.com/blog/2020/intro-to-chromes-v8-from-an-exploit-development-angle/
132,Lobsters,compilers,Compiler design,How to check Monocypher by CompCert,https://git.envs.net/mpech/tankf33der/src/branch/master/compcert.md
133,Lobsters,compilers,Compiler design,FreeBSD Finally Removes GCC 4.2.1 from Base System after 13 Years,https://svnweb.freebsd.org/base?view=revision&revision=358454
134,Lobsters,compilers,Compiler design,"Squee: A Typed, Composable Database Query Language",https://github.com/KMahoney/squee
135,Lobsters,compilers,Compiler design,WebGPU Shading Language,https://gpuweb.github.io/gpuweb/wgsl.html
136,Lobsters,compilers,Compiler design,MLIR: A Compiler Infrastructure for the End of Moore’s Law,https://arxiv.org/pdf/2002.11054.pdf
137,Lobsters,compilers,Compiler design,A Systematic Impact Study for Fuzzer-Found Compiler Bugs,https://arxiv.org/abs/1902.09334
138,Lobsters,compilers,Compiler design,A tutorial on how to contribute to the Rust compiler,https://quietmisdreavus.net/code/2019/08/23/is-this-magic-ferris-explores-rustc/
139,Lobsters,compilers,Compiler design,Thought Experiment: An Introductory Compilers Class,https://semantic-domain.blogspot.com/2020/02/thought-experiment-introductory.html
140,Lobsters,compilers,Compiler design,A bit of background on compilers exploiting signed overflow,https://gist.github.com/rygorous/e0f055bfb74e3d5f0af20690759de5a7
141,Lobsters,compilers,Compiler design,Toward _FORTIFY_SOURCE parity between Clang and GCC,https://developers.redhat.com/blog/2020/02/11/toward-_fortify_source-parity-between-clang-and-gcc/
142,Lobsters,compilers,Compiler design,llgo removed from LLVM,https://github.com/llvm/llvm-project/commit/372bfc65deb
143,Lobsters,compilers,Compiler design,"Compiling a Functional Language Using C++, Part 9 - Garbage Collection",https://danilafe.com/blog/09_compiler_garbage_collection/
144,Lobsters,compilers,Compiler design,CS143: Compilers,https://web.stanford.edu/class/archive/cs/cs143/cs143.1128/
145,Lobsters,compilers,Compiler design,MoonPlus: A MoonScript compiler written in C++,https://github.com/pigpigyyy/MoonPlus
146,Lobsters,compilers,Compiler design,How do compilers optimize divisions?,https://zneak.github.io/fcd/2017/02/19/divisions.html
147,Lobsters,compilers,Compiler design,The Rust Compilation Model Calamity,https://pingcap.com/blog/rust-compilation-model-calamity/
148,Lobsters,compilers,Compiler design,Developing GHC for a Living. Interview with Vladislav Zavialov,https://serokell.io/blog/developing-ghc-for-a-living
149,Lobsters,compilers,Compiler design,Bitfields Forever: Why we need a C-compatible Rust Crate,https://immunant.com/blog/2020/01/bitfields/
150,Lobsters,compilers,Compiler design,What would a programming language designed from the ground-up for a multi-core world look like?,/s/mrl19l/what_would_programming_language
151,Lobsters,compilers,Compiler design,Undergrad Compilers from the Hive Mind,https://eschew.wordpress.com/2020/01/26/undergrad-compilers-from-the-hive-mind/
152,Lobsters,compilers,Compiler design,List of C Compilers (As early as 1973 and with the latest one at 2017),https://iq.opengenus.org/list-of-c-compilers/
153,Lobsters,compilers,Compiler design,Hacking on Clang is surprisingly easy,https://mort.coffee/home/clang-compiler-hacking/
154,Lobsters,compilers,Compiler design,Record/Replay testing in Sorbet,https://blog.nelhage.com/post/record-replay-in-sorbet/
155,Lobsters,compilers,Compiler design,Precision Opportunities for Demanded Bits in LLVM,https://blog.regehr.org/archives/1714
156,Lobsters,compilers,Compiler design,"Gandiva, using LLVM and Arrow to JIT and evaluate Pandas expressions",http://blog.christianperone.com/2020/01/gandiva-using-llvm-and-arrow-to-jit-and-evaluate-pandas-expressions/
157,Lobsters,compilers,Compiler design,Working towards LLDB on i386,https://blog.netbsd.org/tnf/entry/working_towards_lldb_on_i386
158,Lobsters,compilers,Compiler design,miniAdapton: A Minimal Implementation of Incremental Computation in Scheme (2017),https://www.youtube.com/watch?v=bmpu1N2yf-k
159,Lobsters,compilers,Compiler design,Executable Grammars: Seeking the minimal extensible self-compiling compiler (2009),https://www.youtube.com/watch?v=RGizBNflVKw
160,Lobsters,compilers,Compiler design,Linearity and Erasure in Idris 2,https://www.type-driven.org.uk/edwinb/linearity-and-erasure-in-idris-2.html
161,Lobsters,compilers,Compiler design,NeuroVectorizer: End-to-End Vectorization with Deep Reinforcement Learning,https://arxiv.org/abs/1909.13639
162,Lobsters,compilers,Compiler design,Lean versus Coq: The cultural chasm,https://artagnon.com/articles/leancoq
163,Lobsters,compilers,Compiler design,Survey of tiered compilation in JIT implementations,https://github.com/sanxiyn/blog/blob/master/posts/2020-01-03.md
164,Lobsters,compilers,Compiler design,JavaScript Visualized: the JavaScript Engine,https://dev.to/lydiahallie/javascript-visualized-the-javascript-engine-4cdf
165,Lobsters,compilers,Compiler design,MIR project goals: 70% of speed and 100 times faster compilation relative to GCC -O2,https://github.com/vnmakarov/mir
166,Lobsters,compilers,Compiler design,Discovering Undefined Behavior (2017),https://9vx.org/post/discovering-undefined-behavior/
167,Lobsters,compilers,Compiler design,MLIR is now an LLVM subproject,https://mlir.llvm.org/
168,Lobsters,compilers,Compiler design,Strict aliasing in GCC,https://danso.ca/blog/strict-aliasing/
169,Lobsters,compilers,Compiler design,A Compiler Writing Journey - self-compiling C subset,https://github.com/DoctorWkt/acwj
170,Lobsters,compilers,Compiler design,A list of compiler jobs,https://github.com/mgaudet/CompilerJobs
171,Lobsters,compilers,Compiler design,Dive into Deep Learning Compiler,http://tvm.d2l.ai/
172,Lobsters,compilers,Compiler design,Compiler basics: an x86 upgrade,http://notes.eatonphil.com/compiler-basics-an-x86-upgrade.html
173,Lobsters,compilers,Compiler design,"Clang build bot now uses two-stage builds, and other LLVM/LLDB news",https://blog.netbsd.org/tnf/entry/clang_build_bot_now_usage
174,Lobsters,compilers,Compiler design,Chunking Optimizations: Let the Knife Do the Work,https://nullprogram.com/blog/2019/12/09/
175,Lobsters,compilers,Compiler design,Smalltalk with the GraalVM,https://www.javaadvent.com/2019/12/smalltalk-with-the-graalvm.html
176,Lobsters,compilers,Compiler design,AnyDSL - A Partial Evaluation Framework for Programming High-Performance Libraries,https://anydsl.github.io/
177,Lobsters,compilers,Compiler design,Constant propagation is now on by default in nightly,https://blog.rust-lang.org/inside-rust/2019/12/02/const-prop-on-by-default.html
178,Lobsters,compilers,Compiler design,Why we wrote yet another parser compiler,https://www.sanity.io/blog/why-we-wrote-yet-another-parser-compiler
179,Lobsters,compilers,Compiler design,Garbage Collection · Crafting Interpreters,http://craftinginterpreters.com/garbage-collection.html
180,Lobsters,compilers,Compiler design,‎gccemacs,http://akrl.sdf.org/gccemacs.html
181,Lobsters,compilers,Compiler design,History of … one CPU instructions: Part 1. LDDQU/movdqu explained,https://software.intel.com/en-us/blogs/2012/04/16/history-of-one-cpu-instructions-part-1-lddqumovdqu-explained
182,Lobsters,compilers,Compiler design,A Clever Way To Find Compiler Bugs,https://rjlipton.wordpress.com/2019/11/19/a-clever-way-to-find-compiler-bugs/
183,Lobsters,compilers,Compiler design,Survey on Combinatorial Register Allocation and Instruction Scheduling,https://arxiv.org/pdf/1409.7628.pdf
184,Lobsters,compilers,Compiler design,Optimizations in C++ Compilers - A practical journey,https://queue.acm.org/detail.cfm?id=3372264
185,Lobsters,compilers,Compiler design,Building a Parser,https://chelseatroy.com/2019/11/11/building-a-parser/
186,Lobsters,compilers,Compiler design,Let's Build A Compiler (1988-1995),https://compilers.iecc.com/crenshaw/
187,Lobsters,compilers,Compiler design,A Survey of Compiler Testing,http://software-lab.org/publications/csur2019_compiler_testing.pdf
188,Lobsters,compilers,Compiler design,Toolchains—a fresh wind in the sails of a new tech world,http://clearlinux.org/blogs-news/toolchains-fresh-wind-sails-new-tech-world
189,Lobsters,compilers,Compiler design,How an Optimizing Compiler Works,http://www.lihaoyi.com/post/HowanOptimizingCompilerWorks.html
190,Lobsters,compilers,Compiler design,Deterministic builds with clang and lld,http://blog.llvm.org/2019/11/deterministic-builds-with-clang-and-lld.html
191,Lobsters,compilers,Compiler design,"Compiling a Functional Language Using C++, Part 0 - Intro",https://danilafe.com/blog/00_compiler_intro/
192,Lobsters,compilers,Compiler design,LLVM adds freeze instruction,https://reviews.llvm.org/D29121
193,Lobsters,compilers,Compiler design,"Inko progress report: October 2019, including many improvements to the garbage collector",https://inko-lang.org/news/inko-progress-report-october-2019/
194,Lobsters,compilers,Compiler design,LoCal: A Language for Programs Operating on Serialized Data,http://recurial.com/pldi19main.pdf
195,Lobsters,compilers,Compiler design,ONNC: Open Neural Network Compiler,https://onnc.ai/
196,Lobsters,compilers,Compiler design,AVX-512: when and how to use these new instructions,https://lemire.me/blog/2018/09/07/avx-512-when-and-how-to-use-these-new-instructions/
197,Lobsters,compilers,Compiler design,nncase: A neural network compiler for AI accelerators,https://github.com/kendryte/nncase
198,Lobsters,compilers,Compiler design,Building Recursive Descent Parsers: The Definitive Guide,https://www.booleanworld.com/building-recursive-descent-parsers-definitive-guide/
199,Lobsters,compilers,Compiler design,Low-latency garbage collector merged for GHC 8.10,https://well-typed.com/blog/2019/10/nonmoving-gc-merge/
200,Lobsters,compilers,Compiler design,AddressSanitizer (ASan) for Windows with MSVC,https://devblogs.microsoft.com/cppblog/addresssanitizer-asan-for-windows-with-msvc/
201,Lobsters,compilers,Compiler design,A Bestiary of Single-File Implementations of Programming Languages,https://github.com/marcpaq/b1fipl
202,Lobsters,compilers,Compiler design,Optimizing Data-Intensive Computations in Existing Libraries with Split Annotations,https://dawn.cs.stanford.edu/2019/10/22/split-annotations/
203,Lobsters,compilers,Compiler design,New Diagnostic Architecture Overview,https://swift.org/blog/new-diagnostic-arch-overview/
204,Lobsters,compilers,Compiler design,"ABIs, linkers and other animals",https://www.cs.kent.ac.uk/people/staff/srk21//research/talks/kell14abis-slides.pdf
205,Lobsters,compilers,Compiler design,Most functional compiler,https://www.ioccc.org/2019/lynn/hint.html
206,Lobsters,compilers,Compiler design,Top Down Operator Precedence (1971),https://daesan.com/wp-content/uploads/2018/05/top_down_operator_precedence.pdf
207,Lobsters,compilers,Compiler design,How to speed up the Rust compiler some more in 2019,https://blog.mozilla.org/nnethercote/2019/10/11/how-to-speed-up-the-rust-compiler-some-more-in-2019/
208,Lobsters,compilers,Compiler design,Gcc under the hood,https://www.youtube.com/watch?v=brxAm99w8D8
209,Lobsters,compilers,Compiler design,clojit-cvm Clojure VM written in C with advanced GC,https://github.com/clojit/clojit-cvm
210,Lobsters,compilers,Compiler design,Improving Intermediate Codes - Computerphile,https://www.youtube.com/watch?v=TiJn9D6lZ-Y
211,Lobsters,compilers,Compiler design,"Inko progress report: September 2019, including an update on the parallel self-hosting Inko compiler",https://inko-lang.org/news/inko-progress-report-september-2019/
212,Lobsters,compilers,Compiler design,gcc under the hood,https://siddhesh.in/posts/gcc-under-the-hood.html
213,Lobsters,compilers,Compiler design,How to Stress the C# Compiler,https://blog.hediet.de/post/how-to-stress-the-csharp-compiler
214,Lobsters,compilers,Compiler design,A New R6RS Scheme Compiler,https://weinholt.se/articles/new-r6rs-compiler/
215,Lobsters,compilers,Compiler design,0.5.0 Release Notes · The Zig Programming Language,https://ziglang.org/download/0.5.0/release-notes.html
216,Lobsters,compilers,Compiler design,COPY Relocations,https://crawshaw.io/blog/2016-04-17
217,Lobsters,compilers,Compiler design,Clang Build Analyzer,https://aras-p.info/blog/2019/09/28/Clang-Build-Analyzer/
218,Lobsters,compilers,Compiler design,GNU Tools Cauldron 2019,http://www.youtube.com/playlist?list=PL_GiHdX17Wtx2Bu1O_bREetZZv4moIaRi
219,Lobsters,compilers,Compiler design,Adding Trigonometric Optimizations in GCC,https://flusp.ime.usp.br/gcc/2019/03/26/making-gcc-optimize-some-trigonometric-functions/
220,Lobsters,compilers,Compiler design,Default Disambiguation for Online Parsers,https://soft-dev.org/pubs/html/diekmann_tratt__default_disambiguation/
221,Lobsters,compilers,Compiler design,Language Design: Unary Operators,https://soc.github.io/languages/unary-operators
222,Lobsters,compilers,Compiler design,"Weld: accelerating numpy, scikit and pandas as much as 100x with Rust and LLVM",https://notamonadtutorial.com/weld-accelerating-numpy-scikit-and-pandas-as-much-as-100x-with-rust-and-llvm-12ec1c630a1
223,Lobsters,compilers,Compiler design,llvm 9.0.0 released,https://llvm.org/releases/9.0.0/docs/ReleaseNotes.html
224,Lobsters,compilers,Compiler design,Closing the gap: cross-language LTO between Rust and C/C++,http://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html
225,Lobsters,compilers,Compiler design,Dead Store Elimination (Still) Considered Harmful,https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-yang.pdf
226,Lobsters,compilers,Compiler design,"Inko 0.5.0 released, featuring the first steps towards a self-hosting compiler",https://inko-lang.org/news/inko-0-5-0-has-been-released/
227,Lobsters,compilers,Compiler design,Go internals: capturing loop variables in closures,https://eli.thegreenplace.net/2019/go-internals-capturing-loop-variables-in-closures/
228,Lobsters,compilers,Compiler design,Adapton: Programming Language Abstractions for Incremental Computation,http://adapton.org/
229,Lobsters,compilers,Compiler design,Best C++ compiler for Windows,https://www.agner.org/optimize/blog/read.php?i=1015
230,Lobsters,compilers,Compiler design,A lighter V8,https://v8.dev/blog/v8-lite
231,Lobsters,compilers,Compiler design,ChocoPy: A Programming Language for Compilers Courses,https://chocopy.org/
232,Lobsters,compilers,Compiler design,Building a better Go linker,http://golang.org/s/better-linker
233,Lobsters,compilers,Compiler design,Ballerina 1.0 released. New programming language for integration,https://v1-0.ballerina.io/
234,Lobsters,compilers,Compiler design,Turing Categories,https://golem.ph.utexas.edu/category/2019/08/turing_categories.html
235,Lobsters,compilers,Compiler design,"Optimizing Compilers for Parallel Computers, lecture by Frances E. Allen",https://www.youtube.com/watch?v=Qv-wXcUxrmE
236,Lobsters,compilers,Compiler design,GCC 9 released with OpenRISC support,https://gcc.gnu.org/gcc-9/changes.html#or1k
237,Lobsters,compilers,Compiler design,Inko Progress Report: August 2019,https://inko-lang.org/news/inko-progress-report-august-2019/
238,Lobsters,compilers,Compiler design,"On GPUs, ranges, latency, and superoptimisers",https://pdziepak.github.io/2019/09/01/on-gpus-ranges-latency-and-superoptimisers/
239,Lobsters,compilers,Compiler design,The Baseline Interpreter: a faster JS interpreter in Firefox 70,https://hacks.mozilla.org/2019/08/the-baseline-interpreter-a-faster-js-interpreter-in-firefox-70/
240,Lobsters,compilers,Compiler design,lumen/lumen - Compile Erlang/Elixir Applications to WebAssembly,https://github.com/lumen/lumen
241,Lobsters,compilers,Compiler design,The story of a V8 performance cliff in React,https://v8.dev/blog/react-cliff
242,Lobsters,compilers,Compiler design,Left-recursive PEG grammars,https://medium.com/@gvanrossum_83706/left-recursive-peg-grammars-65dab3c580e1
243,Lobsters,compilers,Compiler design,"GSoC 2019 Report: Adding NetBSD KNF to clang-format, Final",http://blog.netbsd.org/tnf/entry/gsoc_2019_report_adding_netbsd1
244,Lobsters,compilers,Compiler design,Security flaws caused by compiler optimizations,https://www.redhat.com/en/blog/security-flaws-caused-compiler-optimizations
245,Lobsters,compilers,Compiler design,"Gcc 4.2.1 to be removed before FreeBSD 13, a firm timeline",https://lists.freebsd.org/pipermail/freebsd-arch/2019-August/019674.html
246,Lobsters,compilers,Compiler design,"GSoC 2019 Report: Adding NetBSD KNF to clang-format, Part 2",https://blog.netbsd.org/tnf/entry/gsoc_2019_report_adding_netbsd
247,Lobsters,compilers,Compiler design,What is Zig's Comptime?,https://kristoff.it/blog/what-is-zig-comptime/
248,Lobsters,compilers,Compiler design,The Compact C Type Format in the GNU toolchain,https://lwn.net/SubscriberLink/795384/6f053c2605b27665/
249,Lobsters,compilers,Compiler design,Inko progress report: July 2019,https://inko-lang.org/news/inko-progress-report-july-2019/
250,Lobsters,compilers,Compiler design,Escaping Escaping,https://axelsvensson.com/escaping-escaping
251,Lobsters,compilers,Compiler design,Work-in-progress threading support in LLDB,https://blog.netbsd.org/tnf/entry/work_in_progress_threading_support
252,Lobsters,compilers,Compiler design,Towards Size Types in Futhark,https://futhark-lang.org/blog/2019-08-03-towards-size-types.html
253,Lobsters,compilers,Compiler design,The Quest for Formally Secure Compartmentalizing Compilation,https://prosecco.gforge.inria.fr/personal/hritcu/talks/2019-01-29-Secure-Compilation-Habil.pdf
254,Lobsters,compilers,Compiler design,A brief introduction to Semantic Dictionary Encoding,https://hokstad.com/semantic-dictionary-encoding
255,Lobsters,compilers,Compiler design,Compositional Fuzzing Aided by Targeted Symbolic Execution,https://arxiv.org/pdf/1903.02981
256,Lobsters,compilers,Compiler design,Shenanigans With Hash Tables,http://thume.ca/2019/07/29/shenanigans-with-hash-tables/
257,Lobsters,compilers,Compiler design,Writing efficient free variable traversals,https://www.haskell.org/ghc/blog/20190728-free-variable-traversals.html
258,Lobsters,compilers,Compiler design,Revec: Program Rejuvenation through Revectorization,https://arxiv.org/abs/1902.02816
259,Lobsters,compilers,Compiler design,Weekend Replication of the STOKE Superoptimizer,https://github.com/bollu/blaze/blob/master/notebooks/tutorial.ipynb
260,Lobsters,compilers,Compiler design,VHDL to PCB,http://pepijndevos.nl/2019/07/18/vhdl-to-pcb.html
261,Lobsters,compilers,Compiler design,How to speed up the Rust compiler in 2019,https://blog.mozilla.org/nnethercote/2019/07/17/how-to-speed-up-the-rust-compiler-in-2019/
262,Lobsters,compilers,Compiler design,Reproducing the Linux builds of Firefox 68,https://glandium.org/blog/?p=3923
263,Lobsters,compilers,Compiler design,Who's afraid of a big bad optimizing compiler?,https://lwn.net/SubscriberLink/793253/6ff74ecfb804c410/
264,Lobsters,compilers,Compiler design,A bit of background on compilers exploiting signed overflow (2016),https://gist.githubusercontent.com/rygorous/e0f055bfb74e3d5f0af20690759de5a7/raw/8c40d2a6516f306575e7957eb284e6fe77f0d9eb/gistfile1.txt
265,Lobsters,compilers,Compiler design,Opening Inform,http://emshort.com/narrascope/talk.html
266,Lobsters,compilers,Compiler design,What Is Rust's unsafe?,https://nora.codes/post/what-is-rusts-unsafe/
267,Lobsters,compilers,Compiler design,Catching use-after-move bugs with Clang's consumed annotations,https://awesomekling.github.io/Catching-use-after-move-bugs-with-Clang-consumed-annotations/
268,Lobsters,compilers,Compiler design,RaptorJIT+Studio: Analyzing the evolving C heap of a JIT compiler,https://github.com/lukego/blog/issues/20
269,Lobsters,compilers,Compiler design,Go compiler internals: adding a new statement to Go - Part 1,https://eli.thegreenplace.net/2019/go-compiler-internals-adding-a-new-statement-to-go-part-1/
270,Lobsters,compilers,Compiler design,Funding Inko's Development,https://inko-lang.org/news/funding-inkos-development/
271,Lobsters,compilers,Compiler design,ACO: A New Compiler Backend for RADV,https://lists.freedesktop.org/archives/mesa-dev/2019-July/221006.html
272,Lobsters,compilers,Compiler design,Understanding GCC Builtins to Develop Better Tools,https://arxiv.org/pdf/1907.00863.pdf
273,Lobsters,compilers,Compiler design,Peephole optimizations in C++ and C#,https://egorbo.com/peephole-optimizations.html
274,Lobsters,compilers,Compiler design,The Next 700 Compiler Correctness Theorems (Functional Pearl),https://dbp.io/pubs/2019/ccc/
275,Lobsters,compilers,Compiler design,"fibs, lies, and benchmarks",https://wingolog.org/archives/2019/06/26/fibs-lies-and-benchmarks
276,Lobsters,compilers,Compiler design,An Abstract Stack Based Approach to Verified Compositional Compilation to Machine Code,http://flint.cs.yale.edu/flint/publications/sacc.pdf
277,Lobsters,compilers,Compiler design,Spatial: A high-level language for programming accelerators,https://spatial-lang.org/
278,Lobsters,compilers,Compiler design,Creating an LLVM Sanitizer from Hopes and Dreams,https://blog.trailofbits.com/2019/06/25/creating-an-llvm-sanitizer-from-hopes-and-dreams/
279,Lobsters,compilers,Compiler design,kragen/stoneknifeforth,https://github.com/kragen/stoneknifeforth
280,Lobsters,compilers,Compiler design,Practical Type Inference Based on Success Typings (2006),http://www.it.uu.se/research/group/hipe/papers/succ_types.pdf
281,Lobsters,compilers,Compiler design,A libc in LLVM,https://lists.llvm.org/pipermail/llvm-dev/2019-June/133269.html
282,Lobsters,compilers,Compiler design,"C, Fortran, and single-character strings",https://lwn.net/SubscriberLink/791393/90b4a7adf99d95a8/
283,Lobsters,compilers,Compiler design,A New Bytecode Format for JavaScriptCore,https://webkit.org/blog/9329/a-new-bytecode-format-for-javascriptcore/
284,Lobsters,compilers,Compiler design,Formal Approaches to Secure Compilation: A Survey of Fully Abstract Compilation,http://theory.stanford.edu/~mp/mp/Publications_files/a125-patrignani.pdf
285,Lobsters,compilers,Compiler design,GCC should warn about 2^16 and 2^32 and 2^64,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90885
286,Lobsters,compilers,Compiler design,"Comparing the Same Project in Rust, Haskell, C++, Python, Scala and OCaml",http://thume.ca/2019/04/29/comparing-compilers-in-rust-haskell-c-and-python/
287,Lobsters,compilers,Compiler design,unconed/shadergraph -- Functional GLSL Linker,https://github.com/unconed/shadergraph
288,Lobsters,compilers,Compiler design,Adept - A blazing fast language for general purpose programming,https://github.com/IsaacShelton/Adept
289,Lobsters,compilers,Compiler design,CompCertX: verified separate compilation for compositional verification of layered systems (2015),http://gallium.inria.fr/seminaires/transparents/20150824.Tahina.Ramananandro.pdf
290,Lobsters,compilers,Compiler design,Responsive compilers - Nicholas Matsakis - PLISS 2019,https://www.youtube.com/watch?v=N6b44kMS6OM
291,Lobsters,compilers,Compiler design,Our Workflows with Address Sanitizer and Valgrind,https://engineering.backtrace.io/posts/sanitizers/
292,Lobsters,compilers,Compiler design,Correctness Testing of Loop Optimization in C and C++ Compilers (2018),http://sattose.wdfiles.com/local--files/2018:schedule/SATToSE_2018_paper_13.pdf
293,Lobsters,compilers,Compiler design,Writing a self-hosting compiler for Inko,https://yorickpeterse.com/articles/writing-a-self-hosting-compiler-for-inko/
294,Lobsters,compilers,Compiler design,Writing a Toy Backend Compiler for PyTorch,https://jott.live/markdown/Writing%20a%20Toy%20Backend%20Compiler%20for%20PyTorch
295,Lobsters,compilers,Compiler design,GRIN Compiler - whole program optimizer for lazy and strict functional languages,https://grin-compiler.github.io/
296,Lobsters,compilers,Compiler design,The Monkey programming language,https://monkeylang.org/
297,Lobsters,compilers,Compiler design,Tail Call Optimization: The Musical,https://www.youtube.com/watch?v=-PX0BV9hGZY
298,Lobsters,compilers,Compiler design,Integrating TVM into PyTorch,https://tvm.ai/2019/05/30/pytorch-frontend
299,Lobsters,compilers,Compiler design,Turbo Pascal 3.0 compiler and code generation internals,https://pcengines.ch/tp3.htm
300,Lobsters,compilers,Compiler design,An x86 Assembler in 256 LOC,http://blog.jeff.over.bz/assembly/compilers/jit/2017/01/15/x86-assembler.html
301,Lobsters,compilers,Compiler design,Why did I write my programming projects?,https://rain-1.github.io/why/why.html
302,Lobsters,compilers,Compiler design,Z88DK - a Z80 C cross compiler and libraries for a number of different Z80 machines,https://www.z88dk.org
303,Lobsters,compilers,Compiler design,The secrets of Type Inference in Clojurescript,https://blog.klipse.tech//clojure/2019/05/20/type-inference-in-clojurescript.html
304,Lobsters,compilers,Compiler design,Applicative parsing,http://jobjo.github.io//2019/05/19/applicative-parsing.html
305,Lobsters,compilers,Compiler design,C11 compiler based on QBE,https://git.sr.ht/~mcf/cc
306,Lobsters,compilers,Compiler design,Build your own WebAssembly Compiler,https://blog.scottlogic.com/2019/05/17/webassembly-compiler.html
307,Lobsters,compilers,Compiler design,Tail call elimination,http://notes.eatonphil.com/tail-call-elimination.html
308,Lobsters,compilers,Compiler design,Nim programming language: version 0.19.6 released,https://nim-lang.org/blog/2019/05/13/version-0196-released.html
309,Lobsters,compilers,Compiler design,GRIN: whole program optimizer for lazy and strict functional languages,https://grin-tech.github.io/
310,Lobsters,compilers,Compiler design,Jazz: JIT/AOT compiled programming language that uses GCCJIT,https://github.com/jazz-lang/Jazz
311,Lobsters,compilers,Compiler design,HashLink: a virtual machine for Haxe,https://hashlink.haxe.org/
312,Lobsters,compilers,Compiler design,BrainFuck Optimizing JIT,https://teaearlgraycold.me/brainfuck-optimizing-jit/
313,Lobsters,compilers,Compiler design,Compile Your Own Type Confusions: Exploiting Logic Bugs in JavaScript JIT Engines,http://phrack.org/papers/jit_exploitation.html
314,Lobsters,compilers,Compiler design,The future of ppx,https://discuss.ocaml.org/t/the-future-of-ppx/3766
315,Lobsters,compilers,Compiler design,LDPL 3.0.4 Released - COBOL Inspired Programming Language,https://github.com/Lartu/ldpl/releases/tag/3.0.4
316,Lobsters,compilers,Compiler design,GCC 9: Link-time and inter-procedural optimization improvements,http://hubicka.blogspot.com/2019/05/gcc-9-link-time-and-inter-procedural.html
317,Lobsters,compilers,Compiler design,GCC 9.1 Released,https://gcc.gnu.org/ml/gcc/2019-05/msg00024.html
318,Lobsters,compilers,Compiler design,LLDB: extending CPU register inspection support,http://blog.netbsd.org/tnf/entry/lldb_extending_cpu_register_inspection
319,Lobsters,compilers,Compiler design,Secrets of the Glasgow Haskell Compiler inliner (1999),https://www.microsoft.com/en-us/research/wp-content/uploads/2002/07/inline.pdf
320,Lobsters,compilers,Compiler design,Four tweaks to improve Haskell,https://medium.com/daml-driven/four-tweaks-to-improve-haskell-b1de9c87f816
321,Lobsters,compilers,Compiler design,Cross compiling to the Atari ST,https://virtuallyfun.com/wordpress/2019/04/30/cross-compiling-to-the-atari-st/
322,Lobsters,compilers,Compiler design,A Hacker's Introduction to Partial Evaluation,http://cybertiggyr.com/peval.html
323,Lobsters,compilers,Compiler design,A Brief & Brisk Overview of Compiler Architecture,http://blog.felixangell.com/compilers-brief-and-brisk
324,Lobsters,compilers,Compiler design,The takeaways of GCC optimization,https://nanxiao.me/en/the-takeaways-of-gcc-optimization/
325,Lobsters,compilers,Compiler design,Nim: hot code-reloading at runtime on a compiled language,https://www.youtube.com/watch?v=7WgCt0Wooeo
326,Lobsters,compilers,Compiler design,Sixten's query-based compiler architecture,https://github.com/ollef/sixten/blob/master/docs/QueryCompilerDriver.md
327,Lobsters,compilers,Compiler design,Frequently asked questions about the Lua VM work Roblox are doing,https://gist.github.com/zeux/bb646a63c02ff2828117092036d2d174
328,Lobsters,compilers,Compiler design,"Search erlang & efene code by pattern matching code with ""holes""",http://marianoguerra.org/posts/erplorer-search-erlang-and-efene-code-by-pattern-matching-the-ast.html
329,Lobsters,compilers,Compiler design,Different RVO behaviors between gcc and clang,https://nanxiao.me/en/different-rvo-behaviors-between-gcc-and-clang/
330,Lobsters,compilers,Compiler design,Fast compilers for fast programs,https://crawshaw.io/blog/fast-compilers
331,Lobsters,compilers,Compiler design,21 Compilers and 3 Orders of Magnitude in 60 Minutes,http://venge.net/graydon/talks/CompilerTalk-2019.pdf
332,Lobsters,compilers,Compiler design,f18 Fortran compiler and runtime accepted as part of LLVM project,https://lists.llvm.org/pipermail/llvm-dev/2019-April/131703.html
333,Lobsters,compilers,Compiler design,"Xmake, a modern C/C++ build utility",https://github.com/xmake-io/xmake
334,Lobsters,compilers,Compiler design,"Elixir protocols, how do they work? the erlang perspective",http://marianoguerra.org/posts/elixir-protocols-how-do-they-work-the-erlang-perspective.html
335,Lobsters,compilers,Compiler design,And Then There Were None: A Stall-Free Real-Time Garbage Collector for Reconfigurable Hardware,https://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon12AndThen.pdf
336,Lobsters,compilers,Compiler design,"""Multi-Level Intermediate Representation"" Compiler Infrastructure",https://github.com/tensorflow/mlir
337,Lobsters,compilers,Compiler design,Build systems are stupid,https://atilaoncode.blog/2019/04/03/build-systems-are-stupid/
338,Lobsters,compilers,Compiler design,Compiler Performance and LLVM,http://pling.jondgoodwin.com/post/compiler-performance/
339,Lobsters,compilers,Compiler design,LLDB/LLVM report for March 2019,https://blog.netbsd.org/tnf/entry/lldb_llvm_report_for_march
340,Lobsters,compilers,Compiler design,A Step Towards Compiling TypeScript to Native,https://medium.com/commitlog/a-step-towards-compiling-typescript-caefa4944994
341,Lobsters,compilers,Compiler design,Lost in translation: Exposing hidden compiler optimization opportunities,https://arxiv.org/pdf/1903.11397
342,Lobsters,compilers,Compiler design,What Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid,https://www.youtube.com/watch?v=bSkpMdDe4g4
343,Lobsters,compilers,Compiler design,Machine code layout optimizations,https://dendibakh.github.io/blog/2019/03/27/Machine-code-layout-optimizatoins
344,Lobsters,compilers,Compiler design,Partial Evaluation and Automatic Program Generation,https://www.itu.dk/~sestoft/pebook/pebook.html
345,Lobsters,compilers,Compiler design,Chip8 emulator written in Clojure,https://github.com/netb258/clj8
346,Lobsters,compilers,Compiler design,I Built a Lisp Compiler,http://mpov.timmorgan.org/i-built-a-lisp-compiler
347,Lobsters,compilers,Compiler design,LLVM 8.0.0 Release,http://lists.llvm.org/pipermail/llvm-dev/2019-March/131157.html
348,Lobsters,compilers,Compiler design,What makes LLD so fast?,https://fosdem.org/2019/schedule/event/llvm_lld/attachments/slides/3320/export/events/attachments/llvm_lld/slides/3320/WhatMakesLLDSoFastPresenterNotes.pdf
349,Lobsters,compilers,Compiler design,LFortran: an interactive fortran compiler,https://docs.lfortran.org/
350,Lobsters,compilers,Compiler design,"LLVM8.0, Kernel Sanitizers and HAXM in NetBSD",http://netbsd.org/~kamil/netbsd_asiabsdcon2019_bof.html#slide1
351,Lobsters,compilers,Compiler design,m-labs/nmigen,https://github.com/m-labs/nmigen
352,Lobsters,compilers,Compiler design,Papers and Algorithms in LLVM's Source Code,https://github.com/oilshell/blog-code/blob/master/grep-for-papers/llvm.txt
353,Lobsters,compilers,Compiler design,A gentle introduction to jump threading optimizations,https://developers.redhat.com/blog/2019/03/13/intro-jump-threading-optimizations/
354,Lobsters,compilers,Compiler design,JIT-less V8,https://v8.dev/blog/jitless
355,Lobsters,compilers,Compiler design,Tensilica Xtensa (ESP32) backend for LLVM,http://lists.llvm.org/pipermail/llvm-dev/2019-March/130796.html
356,Lobsters,compilers,Compiler design,Compiler basics (3): LLVM,http://notes.eatonphil.com/compiler-basics-llvm.html
357,Lobsters,compilers,Compiler design,Usability improvements in GCC 9,https://developers.redhat.com/blog/2019/03/08/usability-improvements-in-gcc-9/
358,Lobsters,compilers,Compiler design,Dreaming of a Parser Generator for Language Design,https://blog.adamant-lang.org/2019/dreaming-of-a-parser-generator/
359,Lobsters,compilers,Compiler design,Writing a Faster Jsonnet Compiler,https://databricks.com/blog/2018/10/12/writing-a-faster-jsonnet-compiler.html
360,Lobsters,compilers,Compiler design,"I made a ""programming language"" based on COBOL syntax",http://ldpl.lartu.net
361,Lobsters,compilers,Compiler design,SharpKit: C# to JavaScript Compiler,https://github.com/SharpKit/SharpKit
362,Lobsters,compilers,Compiler design,Perl Cannot Be Parsed: A Formal Proof (2008),https://www.perlmonks.org/?node_id=663393
363,Lobsters,compilers,Compiler design,Remembering a Programming Language that Helped Shape the Digital New York Times,https://open.nytimes.com/remembering-a-programming-language-that-helped-shape-the-digital-new-york-times-cd809d707c74
364,Lobsters,compilers,Compiler design,Improvements to X86FixupGadgets pass of clang(1),http://undeadly.org/cgi?action=article;sid=20190225073645
365,Lobsters,compilers,Compiler design,The CPython Bytecode Compiler is Dumb,https://nullprogram.com/blog/2019/02/24/
366,Lobsters,compilers,Compiler design,Dumbo: LLVM-based Dumb Obfuscator,https://thebabush.github.io/dumbo-llvm-based-dumb-obfuscator.html
367,Lobsters,compilers,Compiler design,Register Allocation by Graph Coloring,http://www.lighterra.com/papers/graphcoloring/
368,Lobsters,compilers,Compiler design,When pigs fly: optimising bytecode interpreters,https://badootech.badoo.com/when-pigs-fly-optimising-bytecode-interpreters-f64fb6bfa20f
369,Lobsters,compilers,Compiler design,Growing a Compiler: Getting to machine learning from a general purpose compiler,https://juliacomputing.com/blog/2019/02/19/growing-a-compiler.html
370,Lobsters,compilers,Compiler design,MLIR Primer: A Compiler Infrastructure for the End of Moore’s Law,https://drive.google.com/file/d/1hUeAJXcAXwz82RXA5VtO5ZoH8cVQhrOK/view
371,Lobsters,compilers,Compiler design,Incremental flattening for nested data parallelism on the GPU,https://futhark-lang.org/blog/2019-02-18-futhark-at-ppopp.html
372,Lobsters,compilers,Compiler design,Compiling with Dependent Types,https://www.williamjbowman.com/resources/wjb-defense.pdf
373,Lobsters,compilers,Compiler design,Home-grown bytecode interpreters,https://badootech.badoo.com/home-grown-bytecode-interpreters-51e12d59b25c
374,Lobsters,compilers,Compiler design,Compiler Fundamentals: Closure Conversion,https://gist.github.com/rain-1/36c4851b7c29cf8e42f23ba6eec37be6
375,Lobsters,compilers,Compiler design,Cisp: A Common Lisp Interpreter Built in COBOL,https://github.com/lauryndbrown/Cisp
376,Lobsters,compilers,Compiler design,Architecture for a JS to C compiler,https://timr.co/architecture-for-a-js-to-c-compiler
377,Lobsters,compilers,Compiler design,A Quick Look at Trait Objects in Rust,https://tratt.net/laurie/blog/entries/a_quick_look_at_trait_objects_in_rust.html
378,Lobsters,compilers,Compiler design,Immutable Styles: CSS without cascading conflicts and specificity wars,https://github.com/callum-hart/immutable-styles
379,Lobsters,compilers,Compiler design,Futhark 0.9.1 released - now with CUDA backend,https://futhark-lang.org/blog/2019-02-08-futhark-0.9.1-released.html
380,Lobsters,compilers,Compiler design,Tutorial: Creating an LLVM Backend for the Cpu0 Architecture,http://jonathan2251.github.io/lbd/
381,Lobsters,compilers,Compiler design,A Python Interpreter Written in Rust,https://github.com/RustPython/RustPython
382,Lobsters,compilers,Compiler design,Integration of the LLVM sanitizers with the base system,https://blog.netbsd.org/tnf/entry/integration_of_the_llvm_sanitziers
383,Lobsters,compilers,Compiler design,Final report on Clang / LLD state,https://blog.netbsd.org/tnf/entry/final_report_on_clang_lld
384,Lobsters,compilers,Compiler design,Intel Graphics Compiler,https://github.com/intel/intel-graphics-compiler
385,Lobsters,compilers,Compiler design,WebAssembly Troubles part 1: WebAssembly Is Not a Stack Machine,http://troubles.md/posts/wasm-is-not-a-stack-machine/
386,Lobsters,compilers,Compiler design,LLVMVF: A Generic Approach for Verification of Multicore Software (2013),https://www.cmpe.boun.edu.tr/~sen/publications/jetta13.pdf
387,Lobsters,compilers,Compiler design,Writing a Javascript to C compiler,https://timr.co/writing-a-javascript-to-c-compiler
388,Lobsters,compilers,Compiler design,Compositional Typing for ML,https://hydraz.semi.works/posts/2019-01-28.html
389,Lobsters,compilers,Compiler design,Building GCC 1.27,https://kristerw.blogspot.com/2019/01/building-gcc-127.html
390,Lobsters,compilers,Compiler design,Outperforming everything with anything,https://wordsandbuttons.online/outperforming_everything_with_anything.html
391,Lobsters,compilers,Compiler design,Using Hammock Graphs to Structure Programs (2004),https://biblio.ugent.be/publication/291746/file/451220.pdf
392,Lobsters,compilers,Compiler design,Partial Evaluation and Automatic Program Generation (1993),https://www.itu.dk/people/sestoft/pebook/
393,Lobsters,compilers,Compiler design,Configuration Synthesis for Programmable Analog Devices with Arco,http://people.csail.mit.edu/rinard/paper/pldi16.pdf
394,Lobsters,compilers,Compiler design,World’s First Algol 68 Compiler,https://mraths.org.uk/?page_id=2862
395,Lobsters,compilers,Compiler design,The first report on LLD porting,http://blog.netbsd.org/tnf/entry/the_first_report_on_lld
396,Lobsters,compilers,Compiler design,Fennel 0.2.0 released,https://lists.sr.ht/~technomancy/fennel/%3CCAGokn9+4vudb9%3D4x+Q_%3D7qReggoPqjUCvA1_KV5FHdZ-WLBV8w%40mail.gmail.com%3E#%3C20190118010015.GA25324@calvin-p51.localdomain%3E
397,Lobsters,compilers,Compiler design,"C++ Compilation: Lies, Damned Lies, and Statistics",http://virtuallyrandom.com/c-compilation-lies-damned-lies-and-statistics/
398,Lobsters,compilers,Compiler design,time-trace: timeline / flame chart profiler for Clang ·,http://aras-p.info/blog/2019/01/16/time-trace-timeline-flame-chart-profiler-for-Clang/
399,Lobsters,compilers,Compiler design,"Giving programmers what they want, or what they ask for",https://futhark-lang.org/blog/2019-01-13-giving-programmers-what-they-want.html
400,Lobsters,compilers,Compiler design,Compiler Transformations for High-Performance Computing (1994),https://engineering.purdue.edu/~eigenman/ECE663/Handouts/bacon-compiling4hpc.pdf
401,Lobsters,compilers,Compiler design,Treepace - Tree Transformation Language,https://nbviewer.jupyter.org/github/sulir/treepace/blob/master/doc/Tutorial.ipynb
402,Lobsters,compilers,Compiler design,"Machines and systems of past, present, future",http://oshug.org/event/71
403,Lobsters,compilers,Compiler design,Kiwi: High-Level Synthesis for Accelerating Scientific Computation,https://www.cl.cam.ac.uk/research/srg/han/hprls/orangepath/kiwic.html
404,Lobsters,compilers,Compiler design,"CASM-IR: Uniform ASM-Based I.R. for Model Specification, Execution, and Transformation",https://casm-lang.org/_media/resource/paulweber2018abz/paper.pdf
405,Lobsters,compilers,Compiler design,Dart VM,https://mrale.ph/dartvm/
406,Lobsters,compilers,Compiler design,SymbiFlow - the GCC of FPGAs,https://symbiflow.github.io/
407,Lobsters,compilers,Compiler design,C++ Headers are Expensive,http://virtuallyrandom.com/c-headers-are-expensive/
408,Lobsters,compilers,Compiler design,"Whole, Program Compilation in MLton (2006)",http://www.mlton.org/References.attachments/060916-mlton.pdf
409,Lobsters,compilers,Compiler design,Bytecode compilers and interpreters,https://bernsteinbear.com/blog/bytecode-interpreters/
410,Lobsters,compilers,Compiler design,"C++, C# and Unity",http://lucasmeijer.com/posts/cpp_unity/
411,Lobsters,compilers,Compiler design,The process of upstreaming support to LLVM sanitizers has been finalized,https://blog.netbsd.org/tnf/entry/the_process_of_upstreaming_support
412,Lobsters,compilers,Compiler design,Philip2: An Elm-to-OCaml compiler,https://medium.com/@paulbiggar/philip2-an-elm-to-reasonml-compiler-a210aaa6cd04
413,Lobsters,compilers,Compiler design,"LVC: Linear, Verified Compiler",https://www.ps.uni-saarland.de/~sdschn/LVC.html
414,Lobsters,compilers,Compiler design,Even more fun with building and benchmarking Firefox with GCC and Clang,http://hubicka.blogspot.com/2018/12/even-more-fun-with-building-and.html
415,Lobsters,compilers,Compiler design,NetBSD entering 2019 with more complete LLVM support,http://blog.netbsd.org/tnf/entry/netbsd_entering_2019_with_more
416,Lobsters,compilers,Compiler design,Removing ROP Gadgets from OpenBSD,https://www.youtube.com/watch?v=ZvSSHtRv5Mg
417,Lobsters,compilers,Compiler design,swc: rust port of babel and closure compiler,https://github.com/swc-project/swc
418,Lobsters,compilers,Compiler design,LCOV provides a very valuable starting point on how to improve test quality (2016),http://reedmedia.net/~reed/qa/lcov-2016/
419,Lobsters,compilers,Compiler design,A formally verified transformation to unify multiple nested clocks for a Lustre-like language,http://scis.scichina.com/en/2019/012801.pdf
420,Lobsters,compilers,Compiler design,Systematic Parsing of X.509: Eradicating Security Issues with a Parse Tree,https://arxiv.org/pdf/1812.04959
421,Lobsters,compilers,Compiler design,Firefox 64 built with GCC and Clang,http://hubicka.blogspot.com/2018/12/firefox-64-built-with-gcc-and-clang.html
422,Lobsters,compilers,Compiler design,The NetBSD support update before the LLVM-8.0 branching point,http://blog.netbsd.org/tnf/entry/the_netbsd_support_update_before
423,Lobsters,compilers,Compiler design,"lld: A Fast, Simple and Portable Linker",http://llvm.org/devmtg/2017-10/slides/Ueyama-lld.pdf
424,Lobsters,compilers,Compiler design,More consistent LuaJIT performance,https://blog.cloudflare.com/more-consistent-luajit-performance/
425,Lobsters,compilers,Compiler design,"Cross-Platform, Language Design",http://lampwww.epfl.ch/~doeraene/thesis/doeraene-thesis-2018-cross-platform-language-design.pdf
426,Lobsters,compilers,Compiler design,BatAs: a 8086 assembler written in MSDOS batch,https://github.com/mniip/BOOTSTRA/tree/master/BATAS
427,Lobsters,compilers,Compiler design,Giving Mono Souper Powers,https://www.mono-project.com/news/2018/12/06/souper/
428,Lobsters,compilers,Compiler design,Reduction of Additions,https://www.excelsiorjet.com/blog/articles/reduction-of-additions/
429,Lobsters,compilers,Compiler design,"Design and Implementation of Object-Oriented, Parallel, Programming Language (1991)",https://shareok.org/bitstream/handle/11244/20669/Thesis-1991D-J62d.pdf?sequence=1&isAllowed=y
430,Lobsters,compilers,Compiler design,Undefined Behavior Is Really Undefined,https://cryptoservices.github.io/fde/2018/11/30/undefined-behavior.html
431,Lobsters,compilers,Compiler design,Reducing the delta with upstream version of sanitizers,https://blog.netbsd.org/tnf/entry/reducing_the_delta_with_upstream
432,Lobsters,compilers,Compiler design,Developer Toolchain for the Nintendo Switch,https://www.youtube.com/watch?v=9_7exO60EA8
433,Lobsters,compilers,Compiler design,How to optimize C and C++ code in 2018,https://medium.com/@aka.rider/how-to-optimize-c-and-c-code-in-2018-bd4f90a72c2b
434,Lobsters,compilers,Compiler design,Dynamic Language Embedding With Homogeneous Tool Support (2010),http://scg.unibe.ch/archive/phd/renggli-phd.pdf
435,Lobsters,compilers,Compiler design,"The ""high-level CPU"" challenge (2008)",https://yosefk.com/blog/the-high-level-cpu-challenge.html
436,Lobsters,compilers,Compiler design,Formally-Verified Components for Layered Assurance via LLVM-to-ACL2 Translator,https://www.acsac.org/2013/workshops/law/files/LAW-2013-Davis.pdf
437,Lobsters,compilers,Compiler design,Golang made teeny-tiny: Go compiler for microcontrollers,https://jaxenter.com/go-tinygo-microcontrollers-152348.html
438,Lobsters,compilers,Compiler design,Compiler basics: lisp to assembly,http://notes.eatonphil.com/compiler-basics-lisp-to-assembly.html
439,Lobsters,compilers,Compiler design,How to Architect a Query Compiler,https://www.cs.purdue.edu/homes/rompf/papers/tahboub-sigmod18.pdf
440,Lobsters,compilers,Compiler design,D compilation is too slow and I am forking the compiler,https://blog.thecybershadow.net/2018/11/18/d-compilation-is-too-slow-and-i-am-forking-the-compiler/
441,Lobsters,compilers,Compiler design,30% faster Windows builds with clang-cl and the new /Zc:dllexportInlines- flag,http://blog.llvm.org/2018/11/30-faster-windows-builds-with-clang-cl_14.html
442,Lobsters,compilers,Compiler design,The Discoveries of Continuations (1993),http://www.math.bas.bg/~bantchev/place/iswim/conti-disco.pdf
443,Lobsters,compilers,Compiler design,"Faster, Practical GLL Parsing","http://dinhe.net/~aredridel/.notmine/PDFs/Parsing/IZMAYLOVA,%20Anastasia%20&%20AFROOZEH%20-%20Faster,%20Practical%20GLL%20Parsing.pdf"
444,Lobsters,compilers,Compiler design,GLL Parsing with Flexible Combinators,https://pure.royalholloway.ac.uk/portal/files/31169565/paper.pdf
445,Lobsters,compilers,Compiler design,ianh/owl: A parser generator for visibly pushdown languages,https://github.com/ianh/owl
446,Lobsters,compilers,Compiler design,How to speed up the Rust compiler in 2018: NLL edition,https://blog.mozilla.org/nnethercote/2018/11/06/how-to-speed-up-the-rust-compiler-in-2018-nll-edition/
447,Lobsters,compilers,Compiler design,Defining Target Machines,https://www.youtube.com/watch?v=KNYCUJOzj5c
448,Lobsters,compilers,Compiler design,NetBSD LLVM Sanitizers in The Bay Area,https://blog.netbsd.org/tnf/entry/netbsd_llvm_sanitizers_in_the
449,Lobsters,compilers,Compiler design,Plan 9 C compiler for RISC-V by Richard Miller,https://marc.info/?l=9fans&m=154076971426092&w=2
450,Lobsters,compilers,Compiler design,A Nanopass Framework for Compiler Education,https://www.cs.indiana.edu/~dyb/pubs/nano-jfp.pdf
451,Lobsters,compilers,Compiler design,"CompCert: Integrating and Qualifying a Formally, Verified, Optimizing Compiler",https://www.absint.com/compcert/mtu_compcert_erts_2018.pdf
452,Lobsters,compilers,Compiler design,OMR: Reliable components for building language runtimes,http://www.eclipse.org/omr/
453,Lobsters,compilers,Compiler design,The D Language Front-End Finally Merged Into GCC 9,https://www.phoronix.com/scan.php?page=news_item&px=GCC-9-Merges-D-Language
454,Lobsters,compilers,Compiler design,A Plan 9 C Compiler for RISC-V,https://www.geeklan.co.uk/files/oshug69-Miller-criscv.pdf
455,Lobsters,compilers,Compiler design,Canonicalization,https://sunfishcode.github.io/blog/2018/10/22/Canonicalization.html
456,Lobsters,compilers,Compiler design,Fast Path-Based Neural Branch Prediction (2003),http://hpca23.cse.tamu.edu/pdfs/micro03_dist.pdf
457,Lobsters,compilers,Compiler design,BOLT: A Practical Binary Optimizer for Data Centers and Beyond,https://arxiv.org/pdf/1807.06735.pdf
458,Lobsters,compilers,Compiler design,Dangless - Safe Dangling Pointer Errors,https://dangless.gaborkozar.me
459,Lobsters,compilers,Compiler design,cpp-peglib,https://github.com/yhirose/cpp-peglib
460,Lobsters,compilers,Compiler design,Applicative Functors for Fun and Parsing,https://arunraghavan.net/2018/02/applicative-functors-for-fun-and-parsing/
461,Lobsters,compilers,Compiler design,Rosie Pattern Language: Improving on 50-Year Old Regular Expression Technology,https://thestrangeloop.com/2018/rosie-pattern-language-improving-on-50-year-old-regular-expression-technology.html
462,Lobsters,compilers,Compiler design,Improved Basic Block Reordering,https://arxiv.org/pdf/1809.04676
463,Lobsters,compilers,Compiler design,Shell Script Compiler,https://github.com/neurobin/shc
464,Lobsters,compilers,Compiler design,Exploiting Vector Instructions with Generalized Stream Fusion (2013),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/haskell-beats-C.pdf
465,Lobsters,compilers,Compiler design,How new-lines affect Linux performance,https://nadav.amit.zone/blog/linux-inline
466,Lobsters,compilers,Compiler design,State of Multicore OCaml,http://kcsrk.info/slides/mcocaml_gallium.pdf
467,Lobsters,compilers,Compiler design,Future directions for treatment of undefined behaviour in C,https://www.youtube.com/watch?v=inDduOFEyew
468,Lobsters,compilers,Compiler design,Non-8-bit-byte architecture support BoF,https://www.youtube.com/watch?v=HAqtEZmci70
469,Lobsters,compilers,Compiler design,YETI: a graduallY Extensible Trace Interpreter (2008),http://www.cs.toronto.edu/~matz/dissertation/matzDissertation-latex2html/matzDissertation-latex2html.html
470,Lobsters,compilers,Compiler design,Under the hood of GraalVM JIT optimizations,https://medium.com/graalvm/under-the-hood-of-graalvm-jit-optimizations-d6e931394797
471,Lobsters,compilers,Compiler design,"Practical, Formal Techniques for Developing LLVM's Peephole Optimizations",https://www.cs.rutgers.edu/~santosh.nagarakatte/david-menendez-phd-thesis.pdf
472,Lobsters,compilers,Compiler design,lolbench: automagically and empirically discovering Rust performance regressions,https://blog.anp.lol/rust/2018/09/29/lolbench/
473,Lobsters,compilers,Compiler design,Zig 0.3.0 Released,https://ziglang.org/download/0.3.0/release-notes.html
474,Lobsters,compilers,Compiler design,Nand to CPU,https://blog.asrpo.com/nand2cpu
475,Lobsters,compilers,Compiler design,Wasmjit: Kernel Mode WebAssembly Runtime for Linux,https://github.com/rianhunter/wasmjit
476,Lobsters,compilers,Compiler design,Sequent Calculus as a Compiler Intermediate Language (2016),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/04/sequent-calculus-icfp16.pdf
477,Lobsters,compilers,Compiler design,An Incremental Approach to Compiler Construction,http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf
478,Lobsters,compilers,Compiler design,"Mcbind: Generating C Bindings for Myrddin, Automatically",https://eigenstate.org/notes/mcbind.html
479,Lobsters,compilers,Compiler design,DeepSmith: Compiler Fuzzing through Deep Learning,https://chriscummins.cc/pub/2018-acaces.pdf
480,Lobsters,compilers,Compiler design,Structure-aware Fuzzing for Clang and LLVM (2017),https://llvm.org/devmtg/2017-10/slides/Serebryany-Structure-aware%20fuzzing%20for%20Clang%20and%20LLVM%20with%20libprotobuf-mutator.pdf
481,Lobsters,compilers,Compiler design,TIL: A Type-Directed Optimizing Compiler for ML,https://pdfs.semanticscholar.org/55bc/5ceee768223f4b233de568a7181297eb2c4d.pdf
482,Lobsters,compilers,Compiler design,Writing a JIT Compiler in C#,https://www.mono-project.com/news/2018/09/11/csharp-jit/
483,Lobsters,compilers,Compiler design,Fuzzing with Code Fragments (2012),https://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final73.pdf
484,Lobsters,compilers,Compiler design,Reconciling High-Level Optimizations and Low-Level Code in LLVM,http://www.cs.utah.edu/~regehr/oopsla18.pdf
485,Lobsters,compilers,Compiler design,Optimizing for Security,https://immunant.com/blog/2018/09/multicompiler/
486,Lobsters,compilers,Compiler design,Future Directions for Optimizing Compilers,https://arxiv.org/abs/1809.02161
487,Lobsters,compilers,Compiler design,Checked C: Making C Safe by Extension,https://www.microsoft.com/en-us/research/uploads/prod/2018/09/checkedc-secdev2018-preprint.pdf
488,Lobsters,compilers,Compiler design,pegdebug - visual and interactive debugging of peg parsing,https://mqnc.github.io/pegdebug/example/output.html
489,Lobsters,compilers,Compiler design,"LLVM JIT, Objective-C and Swift on macOS: knowledge dump",https://stanislaw.github.io/2018/09/03/llvm-jit-objc-and-swift-knowledge-dump.html
490,Lobsters,compilers,Compiler design,Maybe adding generics to Go IS about syntax after all,https://dave.cheney.net/2018/09/03/maybe-adding-generics-to-go-is-about-syntax-after-all
491,Lobsters,compilers,Compiler design,How LLVM Optimizes a Function,https://blog.regehr.org/archives/1603
492,Lobsters,compilers,Compiler design,What Every C Programmer Should Know About Undefined Behavior (2011),http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html
493,Lobsters,compilers,Compiler design,Has anyone written a custom compiler for a single program?,/s/dacmn5/has_anyone_written_custom_compiler_for
494,Lobsters,compilers,Compiler design,Fully Countering Trusting Trust through Diverse Double-Compiling [2009],https://www.dwheeler.com/trusting-trust/dissertation/html/wheeler-trusting-trust-ddc.html
495,Lobsters,compilers,Compiler design,Compiler Verification Meets Cross-Language Linking via Data Abstraction (2014),https://dspace.mit.edu/bitstream/handle/1721.1/99926/Chlipala_Compiler%20verification.pdf;sequence=1
496,Lobsters,compilers,Compiler design,Fuzzing the .NET JIT Compiler,http://www.mattwarren.org/2018/08/28/Fuzzing-the-.NET-JIT-Compiler/
497,Lobsters,compilers,Compiler design,OSHUG Event #69 - Members' Lightning Talks,http://oshug.org/event/69
498,Lobsters,compilers,Compiler design,"Oops, I Wrote a C++ Compiler",https://praeclarum.org/2018/08/27/oops-i-wrote-a-c-compiler.html
499,Lobsters,compilers,Compiler design,C-SKY GCC port merged,https://gcc.gnu.org/onlinedocs/gcc/C-SKY-Options.html
500,Lobsters,compilers,Compiler design,William Byrd on The Most Beautiful Program Ever Written,https://paperswelove.org/2017/video/will-byrd-most-beautiful-program/
501,Lobsters,compilers,Compiler design,Marpa and combinator parsing 2,http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2018/05/combinator2.html
502,Lobsters,compilers,Compiler design,Using LuaJIT's DynASM Tool To Build A JIT Compiler,http://corsix.github.io/dynasm-doc/tutorial.html
503,Lobsters,compilers,Compiler design,Impact of Economics on Compiler Optimization (2001),http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.85.1534&rep=rep1&type=pdf
504,Lobsters,compilers,Compiler design,Whiteboard problems in pure Lambda Calculus,https://www.jtolio.com/2017/03/whiteboard-problems-in-pure-lambda-calculus/
505,Lobsters,compilers,Compiler design,"The PowerPC 600 series, part 12: leaf functions",https://blogs.msdn.microsoft.com/oldnewthing/20180821-00/?p=99535
506,Lobsters,compilers,Compiler design,Collapsing Towers of Interpreters,/s/yj31ty/collapsing_towers_interpreters
507,Lobsters,compilers,Compiler design,A Haskell Compiler: Slides on the GHC Implementation,http://www.scs.stanford.edu/11au-cs240h/notes/ghc-slides.html#(1)
508,Lobsters,compilers,Compiler design,Functional Programming on a Stack-Based Embedded Processor (2006),http://home.iae.nl/users/mhx/Forth_functional.pdf
509,Lobsters,compilers,Compiler design,qb.js: An implementation of QBASIC in Javascript (2010),http://stevehanov.ca/blog/index.php?id=92
510,Lobsters,compilers,Compiler design,"Git Blame Who?: Stylistic Authorship Attribution of Small, Incomplete Source Code Fragments",https://arxiv.org/pdf/1701.05681.pdf
511,Lobsters,compilers,Compiler design,"Verifying the Correctness of a Compiler for an Imperative, Programming Language (2011)",https://dspace.jaist.ac.jp/dspace/bitstream/10119/9639/5/paper.pdf
512,Lobsters,compilers,Compiler design,Safe Clearing of Private Data,https://www.viva64.com/en/b/0388/
513,Lobsters,compilers,Compiler design,Solving FizzBuzz using compiler error messages,https://www.adamtornhill.com/articles/fizzbuzz.htm
514,Lobsters,compilers,Compiler design,Bounding data races in space and time – part I,https://blog.acolyer.org/2018/08/09/bounding-data-races-in-space-and-time-part-i/
515,Lobsters,compilers,Compiler design,"HHVM JIT: A profile-guided, region-based compiler for PHP and Hack",https://blog.acolyer.org/2018/08/08/hhvm-jit-a-profile-guided-region-based-compiler-for-php-and-hack/
516,Lobsters,compilers,Compiler design,Introduction to µUBSan - a clean-room reimplementation of the Undefined Behavior Sanitizer runtime,https://blog.netbsd.org/tnf/entry/introduction_to_%C2%B5ubsan_a_clean
517,Lobsters,compilers,Compiler design,Verifying Optimizations Using SMT Solvers,https://llvm.org/devmtg/2013-11/slides/Lopes-SMT.pdf
518,Lobsters,compilers,Compiler design,Implementing a JIT-compiler with Rust,https://dinfuehr.github.io/blog/dora-implementing-a-jit-compiler-with-rust/
519,Lobsters,compilers,Compiler design,Compiling Lambda Calculus - T3X.ORG,http://t3x.org/clc/index.html
520,Lobsters,compilers,Compiler design,BrainCoqulus: A Formally Verified Optimizing Compiler of Lambda Calculus to Brainfuck,https://read.seas.harvard.edu/~kohler/class/cs260r-17/projects/braincoqulus-proposal.pdf
521,Lobsters,compilers,Compiler design,Abstract machines for programming language implementation (2000),http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.68.234
522,Lobsters,compilers,Compiler design,A Brief History of the BEAM Compiler,http://blog.erlang.org/beam-compiler-history/
523,Lobsters,compilers,Compiler design,Writing A Compiler In Go is now available,https://compilerbook.com
524,Lobsters,compilers,Compiler design,Rust compiler cannot be built without test failures on Debian and Fedora,https://salsa.debian.org/rust-team/rust/blob/debian/sid/debian/NEWS#L1-29
525,Lobsters,compilers,Compiler design,"It is more complicated than I thought: -mtune, -march in GCC",https://lemire.me/blog/2018/07/25/it-is-more-complicated-than-i-thought-mtune-march-in-gcc/
526,Lobsters,compilers,Compiler design,"Pointers Are Complicated, or: What's in a Byte?",https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html
527,Lobsters,compilers,Compiler design,Comments on timing short code sections on Intel processors,https://sites.utexas.edu/jdm4372/2018/07/23/comments-on-timing-short-code-sections-on-intel-processors/
528,Lobsters,compilers,Compiler design,Type Systems as Macros (2017),http://www.ccs.neu.edu/home/stchang/pubs/ckg-popl2017.pdf
529,Lobsters,compilers,Compiler design,Compilers are smart,http://msinilo.pl/blog2/post/compilers-are-smart/
530,Lobsters,compilers,Compiler design,"Faster, Scannerless, GLR Parsing (2009)",https://pdfs.semanticscholar.org/2dc7/51b476c7936d5587aca7314314203df11e09.pdf?_ga=2.39398181.788288221.1532275538-1240456053.1532275538
531,Lobsters,compilers,Compiler design,A General-Purpose Macro Processor as a Poor Man's Compiler-Compiler (1976),https://www.computer.org/web/csdl/index/-/csdl/trans/ts/1976/02/01702350.pdf
532,Lobsters,compilers,Compiler design,An Implementation of A Hygienic Syntactic Macro System for JavaScript: A Preliminary Report (2010),http://www.is.titech.ac.jp/~wakita/files/arai-s3.pdf
533,Lobsters,compilers,Compiler design,Microsoft is making the Windows command line a lot better,https://arstechnica.com/gadgets/2018/07/microsoft-is-making-the-windows-command-line-a-lot-better/
534,Lobsters,compilers,Compiler design,Register allocation using graph coloring,https://yurichev.com/blog/reg_alloc/
535,Lobsters,compilers,Compiler design,Spectre V1 defense in GCC,https://lwn.net/SubscriberLink/759423/a5b2551b2383f529/
536,Lobsters,compilers,Compiler design,pkgsrcCon 2018 in Berlin - Videos,https://pkgsrc.org/pkgsrcCon/2018/talks.html
537,Lobsters,compilers,Compiler design,Formal Verification of Coalescing Graph-Coloring Register Allocation (2010),https://www.cs.princeton.edu/~appel/papers/regalloc.pdf
538,Lobsters,compilers,Compiler design,Futhark 0.6.1 released,https://futhark-lang.org/blog/2018-07-09-futhark-0.6.1-released.html
539,Lobsters,compilers,Compiler design,Monads Made Simple,https://mpc.sh/blog/monads-made-simple/
540,Lobsters,compilers,Compiler design,A graph of programming languages connected through compilers,https://akr.am/languages/
541,Lobsters,compilers,Compiler design,JavaScript Essentials: The Engine,https://www.rainerhahnekamp.com/en/javascript-essentials-the-engine/
542,Lobsters,compilers,Compiler design,"PEG-based transformer provides front-, middle and back-end stages in a simple compiler",http://www.vpri.org/pdf/tr2010003_PEG.pdf
543,Lobsters,compilers,Compiler design,Optimizing Lifted Bitcode with Dead Store Elimination,https://blog.trailofbits.com/2018/07/06/optimizing-lifted-bitcode-with-dead-store-elimination/
544,Lobsters,compilers,Compiler design,.NET JIT and CLR - Joined at the Hip,http://www.mattwarren.org/2018/07/05/.NET-JIT-and-CLR-Joined-at-the-Hip/
545,Lobsters,compilers,Compiler design,MKSANITIZER - bug detector software integration with the NetBSD userland,https://blog.netbsd.org/tnf/entry/mksanitizer_bug_detector_software_integration
546,Lobsters,compilers,Compiler design,C2Eif: A C to Eiffel translator,http://se.inf.ethz.ch/research/c2eif/
547,Lobsters,compilers,Compiler design,Kaleidoscope: Implementing a Language with LLVM,http://llvm.org/docs/tutorial/
548,Lobsters,compilers,Compiler design,Bitcode Demystified,https://lowlevelbits.org/bitcode-demystified/
549,Lobsters,compilers,Compiler design,BOLT: binary optimization tool,https://code.fb.com/data-infrastructure/accelerate-large-scale-applications-with-bolt/
550,Lobsters,compilers,Compiler design,Scaling up Superoptimization (2016),https://people.eecs.berkeley.edu/~mangpo/www/papers/lens-asplos16.pdf
551,Lobsters,compilers,Compiler design,What I Learned Making My Own JIT Language,http://www.mikedrivendevelopment.com/2018/06/what-i-learned-making-my-own-jit.html
552,Lobsters,compilers,Compiler design,Firm - Optimization and Machine Code Generation,https://pp.ipd.kit.edu/firm/index.html
553,Lobsters,compilers,Compiler design,How Clang Compiles a Function,https://blog.regehr.org/archives/1605
554,Lobsters,compilers,Compiler design,"Instruction Selection: Principles, Methods, and Applications (2016)",http://kth.diva-portal.org/smash/get/diva2:951540/FULLTEXT01.pdf
555,Lobsters,compilers,Compiler design,"Compiler fuzzing, part 1",http://www.vegardno.net/2018/06/compiler-fuzzing.html
556,Lobsters,compilers,Compiler design,A Portable Compiler for the Language C (1975),http://publications.csail.mit.edu/lcs/pubs/pdf/MIT-LCS-TR-149.pdf
557,Lobsters,compilers,Compiler design,Finding Missed Compiler Optimizations by Differential Testing,https://www.complang.tuwien.ac.at/gergo/papers/cc2018_authorversion.pdf
558,Lobsters,compilers,Compiler design,Harmonic: LARA Source-To-Source Weaver,http://specs.fe.up.pt/tools/harmonic/
559,Lobsters,compilers,Compiler design,OBNC - a compiler for Niklaus Wirth’s programming language Oberon.,http://miasap.se/obnc/
560,Lobsters,compilers,Compiler design,Three modest proposals for the C standard WG14,http://www.yodaiken.com/2018/06/17/three-modest-proposals-for-the-c-standard-wg14/
561,Lobsters,compilers,Compiler design,GCC 8: link time and interprocedural optimization,http://hubicka.blogspot.com/2018/06/gcc-8-link-time-and-interprocedural.html
562,Lobsters,compilers,Compiler design,"zapcc: A Caching, C++ Compiler Based On Clang for Faster Compiles",https://github.com/yrnkrn/zapcc
563,Lobsters,compilers,Compiler design,A promise checked is a promise kept: Inspection Testing,https://arxiv.org/pdf/1803.07130.pdf
564,Lobsters,compilers,Compiler design,A Gentle Intro to PLT (Programming Language Theory),https://mpc.sh/blog/a-gentle-intro-to-plt/
565,Lobsters,compilers,Compiler design,"MultiMLton: Standard ML Compiler for Scalable, Multicore Platforms (2014)",https://multimlton.cs.purdue.edu/mML/Welcome.html
566,Lobsters,compilers,Compiler design,GCC Stack Frames,https://stffrdhrn.github.io/software/embedded/openrisc/2018/06/08/gcc_stack_frames.html
567,Lobsters,compilers,Compiler design,Bootstrapping Haskell: part 1,https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html
568,Lobsters,compilers,Compiler design,How to speed up the Rust compiler some more in 2018,https://blog.mozilla.org/nnethercote/2018/06/05/how-to-speed-up-the-rust-compiler-some-more-in-2018/
569,Lobsters,compilers,Compiler design,Bootstrappable builds,http://bootstrappable.org/
570,Lobsters,compilers,Compiler design,Playing with ruby's new JIT: MJIT,https://www.johnhawthorn.com/2018/02/playing-with-ruby-jit-mjit/
571,Lobsters,compilers,Compiler design,Compiling with Continuations and LLVM (2016),http://manticore.cs.uchicago.edu/papers/ml16-cwc-llvm.pdf
572,Lobsters,compilers,Compiler design,Wrangling Untrusted File Formats Safely,https://github.com/google/wuffs
573,Lobsters,compilers,Compiler design,Coverage of signal routines in the kernel in the context of ptrace(2),https://blog.netbsd.org/tnf/entry/coverage_of_signal_routines_in
574,Lobsters,compilers,Compiler design,"Tensor Compilers: Comparing PlaidML, Tensor Comprehensions, and TVM",http://vertex.ai/blog/compiler-comparison
575,Lobsters,compilers,Compiler design,Sorbet Playground,https://sorbet.run/
576,Lobsters,compilers,Compiler design,assembler for imaginary single-instruction CPU,http://home.mircad.nl/md/assembler_for_imaginary_single-instruction_CPU.html
577,Lobsters,compilers,Compiler design,The weirdest bug I’ve found in a compiler: MSVC 2017,https://medium.com/@ryanhaining/the-weirdest-error-ive-found-in-a-compiler-msvc-2017-ade2e9da0e20
578,Lobsters,compilers,Compiler design,The Rust compiler is getting faster,https://blog.mozilla.org/nnethercote/2018/05/17/the-rust-compiler-is-getting-faster/
579,Lobsters,compilers,Compiler design,Lightweight Monadic Programming in ML (2011),https://www.cs.umd.edu/~mwh/papers/monadic.pdf
580,Lobsters,compilers,Compiler design,Objects with special collection routines in GHC's GC,https://well-typed.com/blog/2018/05/ghc-special-gc-objects/
581,Lobsters,compilers,Compiler design,DSLs for Ethereum Contracts,http://www.michaelburge.us/2018/05/15/ethereum-chess-engine.html
582,Lobsters,compilers,Compiler design,GCC optimization (Gentoo Wiki),https://wiki.gentoo.org/wiki/GCC_optimization
583,Lobsters,compilers,Compiler design,ULTIMATE Program Analysis Framework for C,https://monteverdi.informatik.uni-freiburg.de/tomcat/Website/
584,Lobsters,compilers,Compiler design,Announcing: MSVC Conforms to the C++ Standard,https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/
585,Lobsters,compilers,Compiler design,How to parse C programs with clang [2008],http://amnoid.de/tmp/clangtut/tut.html
586,Lobsters,compilers,Compiler design,cspfuck: Brainfuck with actors,https://github.com/hellerve/cspfuck
587,Lobsters,compilers,Compiler design,The story of ispc,http://pharr.org/matt/blog/2018/04/30/ispc-all.html
588,Lobsters,compilers,Compiler design,C Is Not a Low-Level Language,https://queue.acm.org/detail.cfm?id=3212479
589,Lobsters,compilers,Compiler design,"Using LLVM from Rust, to generate WebAssembly",https://medium.com/@jayphelps/using-llvm-from-rust-to-generate-webassembly-93e8c193fdb4
590,Lobsters,compilers,Compiler design,The story of ispc: retrospective,http://pharr.org/matt/blog/2018/04/29/ispc-retrospective.html
591,Lobsters,compilers,Compiler design,A crash course in compilers,https://increment.com/programming-languages/crash-course-in-compilers/
592,Lobsters,compilers,Compiler design,PythonR: A Python Implementation in Racket,https://fenix.tecnico.ulisboa.pt/downloadFile/844820067123802/resumo.pdf
593,Lobsters,compilers,Compiler design,Lost in Translation (Exploring the BEAM Compiler's Front End),http://blog.erlang.org/compiler-lost-in-translation/
594,Lobsters,compilers,Compiler design,"Programmatic Control of a Compiler for Generating High-Performance, Spatial Hardware (2017)",https://arxiv.org/pdf/1711.07606.pdf
595,Lobsters,compilers,Compiler design,What you get is what you C: Controlling side effects in mainstream C compilers,https://drive.google.com/file/d/1jsOolD1C_Fu9oNVvhkB1_RQ9GlrFSGcN
596,Lobsters,compilers,Compiler design,Custom Alias Analysis in LLVM,https://blog.tartanllama.xyz/llvm-alias-analysis/
597,Lobsters,compilers,Compiler design,The story of ispc: first users,http://pharr.org/matt/blog/2018/04/23/ispc-volta-users-and-ooo.html
598,Lobsters,compilers,Compiler design,How to prove a compiler fully abstract,https://dbp.io/essays/2018-04-19-how-to-prove-a-compiler-fully-abstract.html
599,Lobsters,compilers,Compiler design,The story of ispc: first benchmark results,http://pharr.org/matt/blog/2018/04/22/ispc-volta-first-results.html
600,Lobsters,compilers,Compiler design,The story of ispc: C's influence and implementing SPMD on SIMD (part 4),http://pharr.org/matt/blog/2018/04/21/ispc-volta-c-and-spmd.html
601,Lobsters,compilers,Compiler design,Can Logic Programming Execute as Fast as Imperative Programming? (1990),http://www2.eecs.berkeley.edu/Pubs/TechRpts/1990/CSD-90-600.pdf
602,Lobsters,compilers,Compiler design,Œuf: Minimizing the Coq Extraction TCB,http://oeuf.uwplse.org/oeuf-cpp18.pdf
603,Lobsters,compilers,Compiler design,Automatic Generation of Provably Correct Embedded Systems (2012),http://pat.comp.nus.edu.sg/wp-source/resources/publications/pdf/icfem12%20generation.pdf
604,Lobsters,compilers,Compiler design,The story of ispc,http://pharr.org/matt/blog/2018/04/18/ispc-origins.html
605,Lobsters,compilers,Compiler design,SCUMM internals and syntax for the sake of nostalgia,https://monades.roperzh.com/scumm-internals-syntax/
606,Lobsters,compilers,Compiler design,Help needed: Static typing and algebra,/s/gjodxi/help_needed_static_typing_algebra
607,Lobsters,compilers,Compiler design,Announcing GraalVM: Run Programs Faster Anywhere,https://blogs.oracle.com/developers/announcing-graalvm
608,Lobsters,compilers,Compiler design,An Overview Of The Marpa Parser (2015),https://lukasatkinson.de/2015/marpa-overview/
609,Lobsters,compilers,Compiler design,Parsing: a timeline,https://jeffreykegler.github.io/personal/timeline_v3
610,Lobsters,compilers,Compiler design,Papers from the Lost Culture of Array Languages,http://prog21.dadgum.com/114.html
611,Lobsters,compilers,Compiler design,An Interpreter for a Novice-Oriented Programming Language with Runtime Macros (2017),https://dspace.mit.edu/bitstream/handle/1721.1/113144/1017990524-MIT.pdf?sequence=1
612,Lobsters,compilers,Compiler design,Writing a Managed JIT in C# with CoreCLR,http://xoofx.com/blog/2018/04/12/writing-managed-jit-in-csharp-with-coreclr/
613,Lobsters,compilers,Compiler design,Futhark 0.4.0 released,https://futhark-lang.org/blog/2018-04-10-futhark-0.4.0-released.html
614,Lobsters,compilers,Compiler design,Nandlang: A programming language based on NAND completeness,https://github.com/Jellonator/Nandlang/blob/master/README.md
615,Lobsters,compilers,Compiler design,A catamorphic lambda-calculus interpreter,https://www.michaelpj.com/blog/2018/04/08/catamorphic-lc-interpreter.html
616,Lobsters,compilers,Compiler design,Writing a recursive ascent parser by hand,https://www.abubalay.com/blog/2018/04/08/recursive-ascent
617,Lobsters,compilers,Compiler design,PostgreSQL Begins Landing LLVM JIT Support For Faster Performance,https://www.phoronix.com/scan.php?page=news_item&px=PostgreSQL-LLVM-JIT-Landing
618,Lobsters,compilers,Compiler design,Design and Implementation of Optimizing Type-centric Compiler for High-Level Language (2017),https://infoscience.epfl.ch/record/232671/files/EPFL_TH7979.pdf?version=1
619,Lobsters,compilers,Compiler design,Profile-Guided Meta-Programming (2015),http://users.eecs.northwestern.edu/~stamourv/papers/profile-guided-meta-programming.pdf
620,Lobsters,compilers,Compiler design,Challenge: Can I read your compiler in 100 lines?,https://www.reddit.com/r/ProgrammingLanguages/comments/89n3wi/challenge_can_i_read_your_compiler_in_100_lines/
621,Lobsters,compilers,Compiler design,Popr Tutorial: Dot Machines,http://hackerfoo.com/posts/popr-tutorial-0-dot-machines.html
622,Lobsters,compilers,Compiler design,The 90 Minute Scheme to C compiler,https://web.archive.org/web/20101006080406/http://www.iro.umontreal.ca:80/~boucherd/mslug/meetings/20041020/minutes-en.html
623,Lobsters,compilers,Compiler design,ASAP: As Static As Possible Memory Management (2017),https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-908.pdf
624,Lobsters,compilers,Compiler design,In-Depth Articles on how parts of PHP 7+ Works,https://phpinternals.net/
625,Lobsters,compilers,Compiler design,Rust: the new LLVM,http://willcrichton.net/notes/rust-the-new-llvm/
626,Lobsters,compilers,Compiler design,Is Python interpreted or compiled? Yes.,https://nedbatchelder.com//blog/201803/is_python_interpreted_or_compiled_yes.html
627,Lobsters,compilers,Compiler design,GADTs and Amulet,https://hydraz.semi.works/posts/2018-03-27.html
628,Lobsters,compilers,Compiler design,Katahdin - a programming language where the syntax and semantics are mutable at runtime,http://chrisseaton.com/katahdin/
629,Lobsters,compilers,Compiler design,"Zig – a programming language designed for robustness, optimality, and clarity",https://www.recurse.com/events/localhost-andrew-kelley
630,Lobsters,compilers,Compiler design,How to Build a High-Performance VM for Squeak/Smalltalk in Your Spare Time (2016),https://www.hpi.uni-potsdam.de/hirschfeld/publications/media/FelgentreffPapeReinHirschfeld_2016_HowToBuildAHighPerformanceVmForSqueakSmalltalkInYourSpareTimeAnExperienceReportOfUsingTheRPythonToolchain_AcmDL.pdf
631,Lobsters,compilers,Compiler design,Reliably composable language extensions (2017),https://www-users.cs.umn.edu/~kami0054/papers/kaminski-phd.pdf
632,Lobsters,compilers,Compiler design,Olmar: Manipulating C and C++ abstract syntax trees in Ocaml (2007),http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.141.530&rep=rep1&type=pdf
633,Lobsters,compilers,Compiler design,musl - Re: Re: #define __MUSL__ in features.h,http://www.openwall.com/lists/musl/2018/03/15/23
634,Lobsters,compilers,Compiler design,Usability improvements in GCC 8,https://developers.redhat.com/blog/2018/03/15/gcc-8-usability-improvements/
635,Lobsters,compilers,Compiler design,An introduction to LLVM in Go,https://felixangell.com/blog/an-introduction-to-llvm-in-go
636,Lobsters,compilers,Compiler design,What can we learn from how compilers are designed?,http://www.tedinski.com/2018/03/13/how-compilers-are-designed.html
637,Lobsters,compilers,Compiler design,Loopy: Programmable and Formally Verified Loop Transformations (2016),https://repository.upenn.edu/cgi/viewcontent.cgi?article=2061&context=cis_reports
638,Lobsters,compilers,Compiler design,Reachability and error diagnosis in LR(1) parsers,http://gallium.inria.fr/~fpottier/publis/fpottier-reachability-cc2016.pdf
639,Lobsters,compilers,Compiler design,Clang seems to be generating more user-friendly error message than gcc,http://nanxiao.me/en/clang-seems-generating-more-user-friendly-error-message-than-gcc/
640,Lobsters,compilers,Compiler design,"The Stack Is An Implementation Detail, Part Two (2009)",https://blogs.msdn.microsoft.com/ericlippert/2009/05/04/the-stack-is-an-implementation-detail-part-two/
641,Lobsters,compilers,Compiler design,Taming Undeﬁned Behavior in LLVM,https://www.microsoft.com/en-us/research/wp-content/uploads/2017/06/undef-pldi17.pdf
642,Lobsters,compilers,Compiler design,Solving a Mysterious Heap Corruption Crash,https://topologyeyewear.github.io/engineering-blog/2018/03/07/heap_corruption/
643,Lobsters,compilers,Compiler design,Coriander: Compiler from CUDA to OpenCL,https://github.com/hughperkins/coriander
644,Lobsters,compilers,Compiler design,Evaluation - Write you a Haskell,http://dev.stephendiehl.com/fun/evaluation.html
645,Lobsters,compilers,Compiler design,Amulet's New Type Checker,https://hydraz.semi.works/posts/2018-02-18.html
646,Lobsters,compilers,Compiler design,Building Oil with the OPy Bytecode Compiler,http://www.oilshell.org/blog/2018/03/04.html
647,Lobsters,compilers,Compiler design,The how and why of the Fennel compiler,https://technomancy.us/186
648,Lobsters,compilers,Compiler design,Continuation-Passing C: compiling threads to events through continuations (2010),https://arxiv.org/pdf/1011.4558
649,Lobsters,compilers,Compiler design,"Tyr: A Dependent, Type System for Spatial, Memory Safety in LLVM (2016)",https://core.ac.uk/download/pdf/82404884.pdf
650,Lobsters,compilers,Compiler design,FPRESSO: Enabling Transistor-Level Exploration of FPGA Architectures (2016),https://lap.epfl.ch/files/content/sites/lap/files/shared/publications/ZgheibFeb16_FpressoEnablingExpressTransistorLevelExplorationOfFpgaArchitectures_FPGA16.pdf
651,Lobsters,compilers,Compiler design,Speed Without Wizardry,http://fitzgeraldnick.com/2018/02/26/speed-without-wizardry.html
652,Lobsters,compilers,Compiler design,Emacs Lisp Lambda Expressions Are Not Self-Evaluating,http://nullprogram.com/blog/2018/02/22/
653,Lobsters,compilers,Compiler design,Type-Safe Access to Key-Value Stores from a Functional Language (2016),https://www.jstage.jst.go.jp/article/ipsjjip/24/1/24_141/_pdf
654,Lobsters,compilers,Compiler design,Reliable and Automatic Composition of Language Extensions to C (2017),http://www-users.cs.umn.edu/~evw/pubs/kaminski17oopsla/kaminski17oopsla.pdf
655,Lobsters,compilers,Compiler design,"LIFT: A Functional, Data-Parallel IR for High-Performance, GPU Code Generation (2017)",http://www.lift-project.org/publications/2017/steuwer17LiftIR.pdf
656,Lobsters,compilers,Compiler design,Program Generation for Intel AES New Instructions (2011),http://www.rksm.me/phd/thesis.pdf
657,Lobsters,compilers,Compiler design,Spectre Mitigations in Microsoft's C/C++ Compiler,https://www.paulkocher.com/doc/MicrosoftCompilerSpectreMitigation.html
658,Lobsters,compilers,Compiler design,"Checking System Rules Using System-Specific, Programmer-Written Compiler Extensions (2000)",https://web.stanford.edu/~engler/mc-osdi.pdf
659,Lobsters,compilers,Compiler design,fnl: zero-overhead lisp syntax for lua,https://github.com/bakpakin/fnl
660,Lobsters,compilers,Compiler design,Java Generics are Turing Complete,https://arxiv.org/pdf/1605.05274.pdf
661,Lobsters,compilers,Compiler design,Forth Lisp Python Continuum,https://github.com/asrp/flpc
662,Lobsters,compilers,Compiler design,Speeding up Ruby with Shared Strings,https://tenderlovemaking.com/2018/02/12/speeding-up-ruby-with-shared-strings.html
663,Lobsters,compilers,Compiler design,"Implementing and Optimizing a Simple, Dependently-Typed Language (2010)",http://publications.lib.chalmers.se/records/fulltext/124826.pdf
664,Lobsters,compilers,Compiler design,JIT Compilation for Emacs,http://tromey.com/blog/?p=982
665,Lobsters,compilers,Compiler design,Zig: January 2018 in Review,http://andrewkelley.me/post/zig-january-2018-in-review.html
666,Lobsters,compilers,Compiler design,Vanquish Forever These Bugs That Blasted Your Kingdom,https://dlang.org/blog/2018/02/07/vanquish-forever-these-bugs-that-blasted-your-kingdom/
667,Lobsters,compilers,Compiler design,Design notes on inline caches,http://wingolog.org/archives/2018/02/07/design-notes-on-inline-caches-in-guile
668,Lobsters,compilers,Compiler design,Unification of Compile-Time and Runtime Metaprogramming in Scala (2017),https://infoscience.epfl.ch/record/226166/files/EPFL_TH7159.pdf
669,Lobsters,compilers,Compiler design,Refinement Types in Ruby,https://nikivazou.github.io/static/VMCAI18/paper.pdf
670,Lobsters,compilers,Compiler design,Fine-grained Language Composition: Case Study (2016),http://drops.dagstuhl.de/opus/volltexte/2016/6097/pdf/LIPIcs-ECOOP-2016-3.pdf
671,Lobsters,compilers,Compiler design,FOSDEM 2018 - Introduction to LLVM,https://fosdem.org/2018/schedule/event/introduction/
672,Lobsters,compilers,Compiler design,A C89 compiler that produces executables that are also valid ASCII text files,http://www.cs.cmu.edu/~tom7/abc/paper.pdf
673,Lobsters,compilers,Compiler design,The LLVM Sanitizers stage accomplished,http://blog.netbsd.org/tnf/entry/the_llvm_sanitizers_stage_accomplished
674,Lobsters,compilers,Compiler design,LLVM for Grad Students [2015],http://www.cs.cornell.edu/~asampson/blog/llvm.html
675,Lobsters,compilers,Compiler design,A Prolog Interpreter in RPython (2007),http://cfbolz.de/Bolz2007-Bachelorarbeit.pdf
676,Lobsters,compilers,Compiler design,How it works: Compiler Explorer,https://xania.org/201609/how-compiler-explorer-runs-on-amazon
677,Lobsters,compilers,Compiler design,The Quorum Programming Language,https://quorumlanguage.com
678,Lobsters,compilers,Compiler design,"CCHR: The Fastest CHR Implementation, in C (2007)",https://lirias.kuleuven.be/bitstream/123456789/146633/1/cchr
679,Lobsters,compilers,Compiler design,Simple AST Optimizations — How to Create a Compiler part 2/5,https://www.youtube.com/watch?v=QSPaL4aVjRo
680,Lobsters,compilers,Compiler design,Off the Beaten Track: Explaining Type Errors,https://byorgey.wordpress.com/2018/01/21/off-the-beaten-track-explaining-type-errors/
681,Lobsters,compilers,Compiler design,Unsafe Zig is Safer Than Unsafe Rust,http://andrewkelley.me/post/unsafe-zig-safer-than-unsafe-rust.html
682,Lobsters,compilers,Compiler design,How to prove a compiler correct,https://dbp.io/essays/2018-01-16-how-to-prove-a-compiler-correct.html
683,Lobsters,compilers,Compiler design,Making WebAssembly even faster: Firefox’s new streaming and tiering compiler,https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/
684,Lobsters,compilers,Compiler design,Some Goals for High-impact Verified Compiler Research,https://blog.regehr.org/archives/1565
685,Lobsters,compilers,Compiler design,Refinement Types in ML (1991),https://www.cs.cmu.edu/~fp/papers/pldi91.pdf
686,Lobsters,compilers,Compiler design,Considerations for programming language design: a rebuttal,https://hackernoon.com/considerations-for-programming-language-design-a-rebuttal-5fb7ef2fd4ba
687,Lobsters,compilers,Compiler design,lily - An interpreted language with a focus on expressiveness and type safety,http://fascinatedbox.github.io/lily/
688,Lobsters,compilers,Compiler design,Ask: Type systems in natural languages?,/s/gsafb7/ask_type_systems_natural_languages
689,Lobsters,compilers,Compiler design,Chromium distributed build client is now open source,https://groups.google.com/a/chromium.org/forum/#!msg/chromium-dev/q7hSGr_JNzg/p44IkGhDDgAJ
690,Lobsters,compilers,Compiler design,Go’s hidden #pragmas,https://dave.cheney.net/2018/01/08/gos-hidden-pragmas
691,Lobsters,compilers,Compiler design,Zig: December 2017 in Review,http://andrewkelley.me/post/zig-december-2017-in-review.html
692,Lobsters,compilers,Compiler design,Call for Papers: MoreVMs 2018,https://2018.programming-conference.org/track/MoreVMs-2018
693,Lobsters,compilers,Compiler design,Making PISC faster: Exercises in de-stupiding code,http://www.andy-rambles.com/post/PISC-Perf-2017/#second-overhead-anchor
694,Lobsters,compilers,Compiler design,clang in the browser: compile and run C++ via WebAssembly:,https://tbfleming.github.io/cib/
695,Lobsters,compilers,Compiler design,Parser and Lexer — How to Create a Compiler,https://www.youtube.com/watch?v=eF9qWbuQLuw
696,Lobsters,compilers,Compiler design,"Writing a C Compiler, Part 4",https://norasandler.com/2017/12/28/Write-a-Compiler-4.html
697,Lobsters,compilers,Compiler design,Auto-tuning Compiler Transformations with Machine Learning,https://www.youtube.com/watch?v=x7iLb-znxgU
698,Lobsters,compilers,Compiler design,Why Nothing Matters: The Impact of Zeroing,http://users.cecs.anu.edu.au/~steveb/downloads/pdf/zero-oopsla-2011.pdf
699,Lobsters,compilers,Compiler design,An Introduction to Speculative Optimization in V8,https://ponyfoo.com/articles/an-introduction-to-speculative-optimization-in-v8
700,Lobsters,compilers,Compiler design,Digital Computers: On Encoding Logical-Mathematical Formulas into the Machine Itself (1954),http://www.itu.dk/people/sestoft/boehmthesis/boehm.pdf
701,Lobsters,compilers,Compiler design,A Deeper Inspection Into Compilation And Interpretation,https://medium.com/basecs/a-deeper-inspection-into-compilation-and-interpretation-d98952ebc842
702,Lobsters,compilers,Compiler design,Chromium has a compilation time problem.,/s/iri1te/chromium_has_compilation_time_problem
703,Lobsters,compilers,Compiler design,How does .NET JIT a method? (also featuring ‘Tiered Compilation’),http://www.mattwarren.org/2017/12/15/How-does-.NET-JIT-a-method-and-Tiered-Compilation/
704,Lobsters,compilers,Compiler design,"Software compatibility and our own ""User-Agent"" problem",https://www.sigbus.info/software-compatibility-and-our-own-user-agent-problem.html
705,Lobsters,compilers,Compiler design,Interview of Xavier Leroy ­— POPL 18,https://www.cs.cmu.edu/~popl-interviews/leroy.html
706,Lobsters,compilers,Compiler design,Some SpiderMonkey optimizations in Firefox Quantum,https://jandemooij.nl/blog/2017/12/06/some-spidermonkey-optimizations-in-firefox-quantum/
707,Lobsters,compilers,Compiler design,A Simple Multi-Processor Computer Based on Subleq (2011),https://arxiv.org/ftp/arxiv/papers/1106/1106.2593.pdf
708,Lobsters,compilers,Compiler design,Introduction to parser combinators,https://blog.jcoglan.com/2017/07/06/introduction-to-parser-combinators/?
709,Lobsters,compilers,Compiler design,Write your next Ethereum Contract in Pyramid Scheme,http://www.michaelburge.us/2017/11/28/write-your-next-ethereum-contract-in-pyramid-scheme.html
710,Lobsters,compilers,Compiler design,"Writing a C Compiler, Part 1",https://norasandler.com/2017/11/29/Write-a-Compiler.html
711,Lobsters,compilers,Compiler design,Is it possible to have useful functional types in a purely nominative type system?,/s/ehqip0/is_it_possible_have_useful_functional
712,Lobsters,compilers,Compiler design,ChromiumOS is getting a clang compiled Linux kernel,https://lkml.org/lkml/2017/11/22/943
713,Lobsters,compilers,Compiler design,Low Hanging Fruit of Programming Language Design,http://250bpm.com/blog:112
714,Lobsters,compilers,Compiler design,How do computers read code?,https://www.youtube.com/watch?v=QXjU9qTsYCc
715,Lobsters,compilers,Compiler design,Cheerp - the C++ compiler for the Web,https://www.leaningtech.com/cheerp/
716,Lobsters,compilers,Compiler design,Automated Testing of Graphics Shader Compilers (2017),http://www.doc.ic.ac.uk/~afd/homepages/papers/pdfs/2017/OOPSLA.pdf
717,Lobsters,compilers,Compiler design,JIT compiling a subset of Python to x86-64,https://csl.name/post/python-compiler/
718,Lobsters,compilers,Compiler design,Dangers of the Decompiler,https://blog.ret2.io/2017/11/16/dangers-of-the-decompiler/
719,Lobsters,compilers,Compiler design,1ML - core and modules united,https://people.mpi-sws.org/~rossberg/1ml/
720,Lobsters,compilers,Compiler design,Souper: A Synthesizing Super-Optimizer (2017),https://arxiv.org/pdf/1711.04422.pdf
721,Lobsters,compilers,Compiler design,Magic: a high-performance CLR Clojure Compiler,http://nas.sr/magic/
722,Lobsters,compilers,Compiler design,google/puffs: Parsing Untrusted File Formats Safely,https://github.com/google/puffs
723,Lobsters,compilers,Compiler design,Writing a basic x86-64 JIT compiler from scratch in stock Python,https://csl.name/post/python-jit/
724,Lobsters,compilers,Compiler design,A Catalogue Of Optimizing Transformations (1972),http://grosser.es/publications/ellen-1971-a-catalogue-of-optimizing-transformations.pdf
725,Lobsters,compilers,Compiler design,A DoS Attack against the C# Compiler,http://www.mattwarren.org/2017/11/08/A-DoS-Attack-against-the-C-Compiler/
726,Lobsters,compilers,Compiler design,Malicious Code Detection for Open Firmware (2002),http://www.cs.cornell.edu/~kozen/papers/acsac.pdf
727,Lobsters,compilers,Compiler design,How should the addition -expression behave?,http://boxbase.org/entries/2017/nov/6/addition-expression/
728,Lobsters,compilers,Compiler design,Collapsing Towers of Interpreters,https://www.cs.purdue.edu/homes/rompf/papers/amin-popl18.pdf
729,Lobsters,compilers,Compiler design,Understanding How Graal Works - a Java JIT Compiler Written in Java,http://chrisseaton.com/rubytruffle/jokerconf17/
730,Lobsters,compilers,Compiler design,Compiler Construction (2005),http://www.ethoberon.ethz.ch/WirthPubl/CBEAll.pdf
731,Lobsters,compilers,Compiler design,taco: The Tensor Algebra Compiler,http://tensor-compiler.org/
732,Lobsters,compilers,Compiler design,OpenVMS: State of the Port to x86_64 - October 2017 Update,https://www.vmssoftware.com/pdfs/State_of_Port_20171006.pdf
733,Lobsters,compilers,Compiler design,So you want to write a type checker...,http://languagengine.co/blog/so-you-want-to-write-a-type-checker/
734,Lobsters,compilers,Compiler design,Near Future of Programming Languages,http://dev.stephendiehl.com/nearfuture.pdf
735,Lobsters,compilers,Compiler design,A space of their own: adding a type namespace to Hackett,http://lexi-lambda.github.io/blog/2017/10/27/a-space-of-their-own-adding-a-type-namespace-to-hackett
736,Lobsters,compilers,Compiler design,Template Optimizations: Moon vs. Vue,https://blog.kabir.ml/posts/template-optimizations.html
737,Lobsters,compilers,Compiler design,The Spooky Programming Language 👻,http://spookylang.com/
738,Lobsters,compilers,Compiler design,Sixten is an experimental functional programming language where all data is unboxed by default,https://github.com/ollef/sixten
739,Lobsters,compilers,Compiler design,HolyJit: A New Hope,https://blog.mozilla.org/javascript/2017/10/20/holyjit-a-new-hope/
740,Lobsters,compilers,Compiler design,Recompiler: Porting Xbox360 Executables to Windows,https://github.com/rexdex/recompiler#porting-xbox360-executables-to-windows
741,Lobsters,compilers,Compiler design,8 JavaScript optimizations Closure Compiler can do conventional minifiers just can’t,https://medium.com/@thomasdeegan/10-optimizations-closure-compiler-can-do-and-uglify-friends-cant-6dca4232299f
742,Lobsters,compilers,Compiler design,What Developers Want and Need from Program Analysis: An Empirical Study,https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/What-Developers-Want-and-Need-from-Program-Analysis-An-Empirical-Study.pdf
743,Lobsters,compilers,Compiler design,Another tutorial for writing a Forth interpreter in assembly (Part 3),http://blog.asrpo.com/forth_tutorial_part_3
744,Lobsters,compilers,Compiler design,What even is compiler correctness?,https://www.williamjbowman.com/blog/2017/03/24/what-even-is-compiler-correctness/
745,Lobsters,compilers,Compiler design,Introducing NNVM Compiler: A New Open End-to-End Compiler for AI Frameworks,https://aws.amazon.com/blogs/ai/introducing-nnvm-compiler-a-new-open-end-to-end-compiler-for-ai-frameworks/
746,Lobsters,compilers,Compiler design,Building and using a 29-year-old compiler on a modern system,https://miyuki.github.io/2017/10/04/gcc-archaeology-1.html
747,Lobsters,compilers,Compiler design,Futhark 0.1.0 released | Futhark - A High Performance Functional Array Language,https://futhark-lang.org/blog/2017-10-04-futhark-0.1.0-released.html
748,Lobsters,compilers,Compiler design,OMeta tutorial (2008),http://www.moserware.com/2008/06/ometa-who-what-when-where-why.html
749,Lobsters,compilers,Compiler design,Another tutorial for writing a Forth interpreter in assembly (Part 2),https://blog.asrpo.com/forth_tutorial_part_2
750,Lobsters,compilers,Compiler design,DCLua: Go Lua Compiler and VM,https://github.com/milochristiansen/lua
751,Lobsters,compilers,Compiler design,Are Jump Tables Always Fastest?,http://www.cipht.net/2017/10/03/are-jump-tables-always-fastest.html
752,Lobsters,compilers,Compiler design,Primeval C: two very early compilers,https://www.bell-labs.com/usr/dmr/www/primevalC.html
753,Lobsters,compilers,Compiler design,A Combinatory Compiler,https://crypto.stanford.edu/~blynn/lambda/sk.html
754,Lobsters,compilers,Compiler design,Visualizing Your Ruby Heap,http://tenderlovemaking.com/2017/09/27/visualizing-your-ruby-heap.html
755,Lobsters,compilers,Compiler design,The Lux Programming Language [Strange Loop 2017],https://www.youtube.com/watch?v=T-BZvBWiamU
756,Lobsters,compilers,Compiler design,C++ Compilers and Absurd Optimizations,https://asmbits.blogspot.com/2017/03/c-compilers-and-absurd-optimizations.html
757,Lobsters,compilers,Compiler design,The Book of the Runtime,https://github.com/dotnet/coreclr/blob/master/Documentation/botr/botr-faq.md
758,Lobsters,compilers,Compiler design,Well-typed printfs cannot go wrong,http://kcsongor.github.io/purescript-safe-printf/
759,Lobsters,compilers,Compiler design,Another tutorial for writing a Forth interpreter in assembly (Part 1),https://blog.asrpo.com/forth_tutorial_part_1
760,Lobsters,compilers,Compiler design,"Dialect of brainfuck, writtenin Rust, which only uses emoji",http://emotifuck.rs/
761,Lobsters,compilers,Compiler design,"Crafting Interpreters - New Chapter: ""Resolving and Binding""",http://www.craftinginterpreters.com/resolving-and-binding.html
762,Lobsters,compilers,Compiler design,GHC compiler plugins in the wild: typing Java,http://www.tweag.io/posts/2017-09-22-inline-java-ghc-plugin.html
763,Lobsters,compilers,Compiler design,Building the kernel with clang,https://lwn.net/SubscriberLink/734071/f0bcc0afc5b50c85/
764,Lobsters,compilers,Compiler design,rswier/c4 -- limited C compiler in <600 LoC,https://github.com/rswier/c4/blob/master/c4.c
765,Lobsters,compilers,Compiler design,D language IDE based on DlangUI,https://github.com/buggins/dlangide
766,Lobsters,compilers,Compiler design,How JavaScript works: memory management + how to handle 4 common memory leaks,https://blog.sessionstack.com/how-javascript-works-memory-management-how-to-handle-4-common-memory-leaks-3f28b94cfbec
767,Lobsters,compilers,Compiler design,The Structure and Interpretation of Ruby Programs,https://www.nasseri.io/posts/1.html
768,Lobsters,compilers,Compiler design,Understanding Elixir's recompilation,http://milhouseonsoftware.com/2016/08/11/understanding-elixir-recompilation/
769,Lobsters,compilers,Compiler design,LLVM 5.0.0 Release,http://lists.llvm.org/pipermail/llvm-announce/2017-September/000075.html
770,Lobsters,compilers,Compiler design,A gentle introduction to Compile-Time Computing — Part 1,https://medium.com/@MartinCracauer/a-gentle-introduction-to-compile-time-computing-part-1-d4d96099cea0
771,Lobsters,compilers,Compiler design,My first fifteen compilers,http://composition.al/blog/2017/07/31/my-first-fifteen-compilers/
772,Lobsters,compilers,Compiler design,"Hoare Type Theory, Polymorphism and Separation",http://ynot.cs.harvard.edu/papers/jfpsep07.pdf
773,Lobsters,compilers,Compiler design,yet another introduction to yacc,http://www.tedunangst.com/flak/post/yaity
774,Lobsters,compilers,Compiler design,User-programmable infix operators in Racket,http://lexi-lambda.github.io/blog/2017/08/12/user-programmable-infix-operators-in-racket
775,Lobsters,compilers,Compiler design,Introduction to Shift-Reduce Parsing,http://www.cs.binghamton.edu/~zdu/parsdemo/srintro.html
776,Lobsters,compilers,Compiler design,Compiler Optimization for Energy Efficiency,https://fylux.github.io/2017/08/16/Compiler_Optimization_Energy_Efficiency/
777,Lobsters,compilers,Compiler design,The Limits of Copy-on-write: How Ruby Allocates Memory,https://brandur.org/ruby-memory
778,Lobsters,compilers,Compiler design,Testing GHC release candidates with Stack,http://taylor.fausak.me/2017/05/17/testing-ghc-release-candidates-with-stack/
779,Lobsters,compilers,Compiler design,Compile Once Debug Twice: Picking a Compiler for Debuggability (1/3),https://backtrace.io/blog/compile-once-debug-twice-picking-a-compiler-for-debuggability-1of3/
780,Lobsters,compilers,Compiler design,Applying Optimizations for Dynamically-typed Languages to Java,http://www.ssw.uni-linz.ac.at/Research/Papers/Marr/manlang17-grimmer-et-al-applying-optimizations-for-dynamically-typed-languages-to-java.pdf
781,Lobsters,compilers,Compiler design,LLVM on Windows now supports PDB Debug Info,http://blog.llvm.org/2017/08/llvm-on-windows-now-supports-pdb-debug.html
782,Lobsters,compilers,Compiler design,RETGUARD,https://marc.info/?l=openbsd-tech&m=150317547021396&w=2
783,Lobsters,compilers,Compiler design,abc: A B Compiler,https://github.com/aap/abc
784,Lobsters,compilers,Compiler design,INLIN(E)ing: A case study,https://mpickering.github.io/posts/2017-05-17-inlining-case-study.html
785,Lobsters,compilers,Compiler design,Twitter forks Scala,https://github.com/twitter/reasonable-scala
786,Lobsters,compilers,Compiler design,An Intro to Compilers (LLVM),https://nicoleorchard.com/blog/compilers
787,Lobsters,compilers,Compiler design,GCC 7.2 Released,https://gcc.gnu.org/ml/gcc/2017-08/msg00129.html
788,Lobsters,compilers,Compiler design,Meta Circular Interpreter Without Letrec Define,https://carld.github.io/2017/08/14/meta-circular-interpreter-without-letrec-define.html
789,Lobsters,compilers,Compiler design,A Type Inference Implementation Adventure,https://fineshambles.com/2017/07/26/a-type-inference-implementation-adventure/
790,Lobsters,compilers,Compiler design,The structure of a GCC back end,https://kristerw.blogspot.com/2017/08/the-structure-of-gcc-back-end.html
791,Lobsters,compilers,Compiler design,Power vs. Adventure - PL/I and C (1994),http://eberhard-sturm.de/ZIV/PL1andC.html
792,Lobsters,compilers,Compiler design,Historical how and why of hash tables (2016),http://perl.plover.com/yak/HashHistory/
793,Lobsters,compilers,Compiler design,Towards a JavaScript Binary AST,https://yoric.github.io/post/binary-ast-newsletter-1/
794,Lobsters,compilers,Compiler design,A look at how Ruby interprets your code,https://blog.appsignal.com/2017/08/01/ruby-magic-code-interpretation.html
795,Lobsters,compilers,Compiler design,TypeScript's Type System is Turing Complete,https://github.com/Microsoft/TypeScript/issues/14833
796,Lobsters,compilers,Compiler design,This 70-Year-Old Programmer Is Preserving an Ancient Coding Language on GitHub,https://motherboard.vice.com/en_us/article/78x5ba/this-70-year-old-programmer-is-preserving-an-ancient-coding-language-on-github
797,Lobsters,compilers,Compiler design,GHC Warnings You Should Use in Addition to -Wall,https://functor.tokyo/blog/2017-07-28-ghc-warnings-you-should-enable
798,Lobsters,compilers,Compiler design,Mes 0.9 released,https://lists.gnu.org/archive/html/guile-user/2017-07/msg00089.html
799,Lobsters,compilers,Compiler design,OpenBSD switches default compiler to clang on amd64 and i386,https://marc.info/?l=openbsd-cvs&m=150109829003860&w=2
800,Lobsters,compilers,Compiler design,Defining the undefinedness of C - PLDI 2015,http://pldi15.sigplan.org/event/pldi2015-papers-defining-the-undefinedness-of-c
801,Lobsters,compilers,Compiler design,Snowman is a native code to C/C++ decompiler,https://derevenets.com/
802,Lobsters,compilers,Compiler design,Phoronix SciMark benchmarking results,https://kristerw.blogspot.com/2017/07/phoronix-scimark-benchmarking-results.html
803,Lobsters,compilers,Compiler design,Towards a second edition of the Rust compiler,https://internals.rust-lang.org/t/towards-a-second-edition-of-the-compiler/5582
804,Lobsters,compilers,Compiler design,"OSHUG Event #59 - CHERI CPU, Adding Security to Compilers, Trust & Provenance in Open Data",http://oshug.org/event/59
805,Lobsters,compilers,Compiler design,Enhancing the PowerPC GCC compiler for the future Power9 hardware (2016),https://www.youtube.com/watch?v=1VkCBBOiTyU
806,Lobsters,compilers,Compiler design,No Instruction Set Computing (NISC),https://en.wikipedia.org/wiki/No_instruction_set_computing
807,Lobsters,compilers,Compiler design,DCompute: GPGPU with Native D for OpenCL and CUDA,http://dlang.org/blog/2017/07/17/dcompute-gpgpu-with-native-d-for-opencl-and-cuda/
808,Lobsters,compilers,Compiler design,"hobbes - a programming language, JIT compiler, and database system",https://github.com/Morgan-Stanley/hobbes
809,Lobsters,compilers,Compiler design,DynamicML - A Dynamically-Typed Version of SML/NJ (2012),http://www.zerny.dk/dynamic-ml.html
810,Lobsters,compilers,Compiler design,"Macros as Multi-Stage Computations - Type-Safe, Generative, Binding Macros in MacroML (2001)",http://www.cs.rice.edu/~taha/publications/conference/icfp01a.pdf
811,Lobsters,compilers,Compiler design,The Mythryl Foundation,https://mythryl.org/
812,Lobsters,compilers,Compiler design,"VMS Software, Inc. Launches New Release of OpenVMS OS for Alpha Hardware",http://www.prweb.com/releases/2017/07/prweb14487932.htm
813,Lobsters,compilers,Compiler design,Babel-preset-php: PHP7 to ES7 syntax translator,https://gitlab.com/kornelski/babel-preset-php
814,Lobsters,compilers,Compiler design,"OpenVMS: State of the Port to x86_64, July 2017 Update",http://vmssoftware.com/pdfs/State_of_Port_20170707.pdf
815,Lobsters,compilers,Compiler design,A site documenting freenode's #proglangdesign regulars,http://www.proglangdesign.net/
816,Lobsters,compilers,Compiler design,Notes on fusion,http://teh.id.au/posts/2017/06/30/notes-on-fusion/index.html
817,Lobsters,compilers,Compiler design,Compiling to categories,http://conal.net/papers/compiling-to-categories/
818,Lobsters,compilers,Compiler design,Simon Peyton Jones - Compiling without continuations,https://www.youtube.com/watch?v=LMTr8yw0Gk4
819,Lobsters,compilers,Compiler design,Verifying a Simple Compiler with QuickCheck,http://www.dcc.fc.up.pt/~pbv/compcheck/
820,Lobsters,compilers,Compiler design,Lessons learned building a toy compiler,http://jaseemabid.github.io/2017/07/04/compiler.html
821,Lobsters,compilers,Compiler design,Position Independant Source Code(PISC) Online Playground,https://pisc.junglecoder.com/playground/
822,Lobsters,compilers,Compiler design,Undefined Behavior in 2017,https://blog.regehr.org/archives/1520
823,Lobsters,compilers,Compiler design,LLVM asan and ubsan on NetBSD,http://blog.netbsd.org/tnf/entry/llvm_asan_and_ubsan_on
824,Lobsters,compilers,Compiler design,Icarus is a programming language designed as an experiment to explore mutation and aliasing control,https://github.com/mkfifo/icarus
825,Lobsters,compilers,Compiler design,A New Demo Compiler For My Course,http://www.cs.uni.edu/~wallingf/blog/archives/monthly/2017-06.html#e2017-06-29T16_03_06.htm
826,Lobsters,compilers,Compiler design,The C standard versus C and the mother of all hacks (more on UB),http://www.yodaiken.com/2017/06/26/the-c-standard-versus-c-and-the-mother-of-all-hacks/
827,Lobsters,compilers,Compiler design,Getting compilers right: a reliable foundation for secure software,https://www.microsoft.com/en-us/research/blog/getting-compilers-right-secure-software/
828,Lobsters,compilers,Compiler design,What Challenges and Trade-Offs do Optimising Compilers Face?,http://tratt.net/laurie/blog/entries/what_challenges_and_trade_offs_do_optimising_compilers_face.html
829,Lobsters,compilers,Compiler design,D Language accepted for inclusion in GCC,https://gcc.gnu.org/ml/gcc/2017-06/msg00111.html
830,Lobsters,compilers,Compiler design,Interfacing to C++ - D Programming Language,https://dlang.org/spec/cpp_interface.html
831,Lobsters,compilers,Compiler design,"Chris Lattner: ""Turns out that Tesla isn't a good fit for me after all.""",https://twitter.com/clattner_llvm/status/877341760812232704
832,Lobsters,compilers,Compiler design,Encounter Editor | Interactive Storytelling Tools for Writers,http://www.erasmatazz.com/library/software/encounter-editor.html
833,Lobsters,compilers,Compiler design,Zinal projectional editor IDE tutorial,https://www.youtube.com/watch?v=xZa62nrh99c
834,Lobsters,compilers,Compiler design,Unison: Optimal Code Generation,http://unison-code.github.io/
835,Lobsters,compilers,Compiler design,Restructor — a system / algorithm to automatically refactor entire code-bases,http://strlen.com/restructor/
836,Lobsters,compilers,Compiler design,"Project Oberon: The Design of an Operating System, a Compiler, and a Computer",https://www.inf.ethz.ch/personal/wirth/ProjectOberon/PO.System.pdf
837,Lobsters,compilers,Compiler design,Beginner's Guide to Linkers,http://www.lurklurk.org/linkers/linkers.html
838,Lobsters,compilers,Compiler design,System Testing a Compiler,http://username.github.io/2017/06/07/System-Testing-Compiler.html
839,Lobsters,compilers,Compiler design,MOG (MIMD On GPU) : Run arbitrary parallel code on a GPU,http://aggregate.org/MOG/
840,Lobsters,compilers,Compiler design,Writing a Forth,http://www.reinvanderwoerd.nl/blog/2017/06/08/writing-a-forth
841,Lobsters,compilers,Compiler design,Prepack in the real world,http://blog.primehammer.com/2017/06/03/is-prepack-ready-for-production/
842,Lobsters,compilers,Compiler design,Exploring MIR Semantics through miri,https://www.ralfj.de/blog/2017/06/06/MIR-semantics.html
843,Lobsters,compilers,Compiler design,Compile-Time Sort in Nim,http://blog.zdsmith.com/posts/compiletime-sort-in-nim.html
844,Lobsters,compilers,Compiler design,AMD | gcc segmentation faults on Ryzen / Linux | Community,https://community.amd.com/thread/215773
845,Lobsters,compilers,Compiler design,Compile-Time Sort in D,https://dlang.org/blog/2017/06/05/compile-time-sort-in-d/
846,Lobsters,compilers,Compiler design,veggies - Haskell Code Generation from Scratch,https://www.joachim-breitner.de/blog/719-veggies__Haskell_code_generation_from_scratch
847,Lobsters,compilers,Compiler design,A quick intro to writing a parser with Treetop,http://thingsaaronmade.com/blog/a-quick-intro-to-writing-a-parser-using-treetop.html
848,Lobsters,compilers,Compiler design,A Small Nanopass Example,https://rootmos.github.io/main/2017/05/30/a-small-nanopass-example.html
849,Lobsters,compilers,Compiler design,Klip: A simple programming language intended as a language implementation tutorial,https://github.com/DatCodingGuy/Klip
850,Lobsters,compilers,Compiler design,Interprocedural optimization in GCC,https://kristerw.blogspot.com/2017/05/interprocedural-optimization-in-gcc.html
851,Lobsters,compilers,Compiler design,Compiler Optimizations are Awesome,https://blog.regehr.org/archives/1515
852,Lobsters,compilers,Compiler design,A Haskell Cross Compiler for Android,https://medium.com/@zw3rk/a-haskell-cross-compiler-for-android-8e297cb74e8a
853,Lobsters,compilers,Compiler design,"MoonScript, a language that compiles to Lua",http://moonscript.org/
854,Lobsters,compilers,Compiler design,Tutorial on metacompilers using META II: The first meta-compiler from 1964,http://www.bayfronttechnologies.com/mc_tutorial.html
855,Lobsters,compilers,Compiler design,Typed Assembly Language (1998),https://www.cs.cornell.edu/talc/overview.html
856,Lobsters,compilers,Compiler design,"Realizing Hackett, a metaprogrammable Haskell",https://lexi-lambda.github.io/blog/2017/05/27/realizing-hackett-a-metaprogrammable-haskell/
857,Lobsters,compilers,Compiler design,Lowering in the C# Compiler (and what happens when you misuse it),http://www.mattwarren.org/2017/05/25/Lowering-in-the-C-Compiler/
858,Lobsters,compilers,Compiler design,Query structure in chalk,http://smallcultfollowing.com/babysteps/blog/2017/05/25/query-structure-in-chalk/
859,Lobsters,compilers,Compiler design,Little Lisp interpreter,https://maryrosecook.com/blog/post/little-lisp-interpreter
860,Lobsters,compilers,Compiler design,CUCU - A Compiler You Can Understand,http://zserge.com/blog/cucu-part1.html
861,Lobsters,compilers,Compiler design,FLANG: NVIDIA Brings Fortran To LLVM,https://github.com/flang-compiler/flang
862,Lobsters,compilers,Compiler design,Adventures in JIT compilation: Part 1 - an interpreter,http://eli.thegreenplace.net/2017/adventures-in-jit-compilation-part-1-an-interpreter/
863,Lobsters,compilers,Compiler design,Scala Design Failure: Implicit Numeric Conversions,http://soc.github.io/lessons-learned/implicit-numeric-conversions.html
864,Lobsters,compilers,Compiler design,Queen: a JavaScript ES6 language with OCaml's pattern matching and first class functions,https://github.com/cpetrosi/Queen
865,Lobsters,compilers,Compiler design,The Pain Of Real Linear Types in Rust,https://gankro.github.io/blah/linear-rust/
866,Lobsters,compilers,Compiler design,Prepack · Partial evaluator for JavaScript,https://prepack.io/
867,Lobsters,compilers,Compiler design,GCC 7.1 Released,https://gcc.gnu.org/ml/gcc/2017-05/msg00017.html
868,Lobsters,compilers,Compiler design,Parse EQCSS Syntax into JS with eqcss-parse v1,https://github.com/eqcss/eqcss-parse
869,Lobsters,compilers,Compiler design,An informal guide to better compiler errors,https://github.com/jaspervdj/talks/blob/master/2017-skillsmatter-errors/slides.md
870,Lobsters,compilers,Compiler design,"ZetaVM, my new compiler project",https://pointersgonewild.com/2017/04/29/zetavm-my-new-compiler-project/
871,Lobsters,compilers,Compiler design,Proposal for a CompCert Superoptimizer,https://blog.regehr.org/archives/496
872,Lobsters,compilers,Compiler design,Typing nix: Gradual types and annotations,https://typing-nix.regnat.ovh/posts/gradual_and_annotations.html
873,Lobsters,compilers,Compiler design,A bug in GCC that may cause memory leaks in valid C++ programs,https://akrzemi1.wordpress.com/2017/04/27/a-serious-bug-in-gcc/
874,Lobsters,compilers,Compiler design,Agner's new idea: Re-linkable libraries,http://www.agner.org/optimize/blog/read.php?i=833
875,Lobsters,compilers,Compiler design,OVM will be a Slice of the CPython VM,http://www.oilshell.org/blog/2017/04/25.html
876,Lobsters,compilers,Compiler design,"PL for SE, Part 1: “Programming Languages”",https://taliasplse.wordpress.com/2017/04/24/pl-for-se-part-1-programming-languages/
877,Lobsters,compilers,Compiler design,Reproducing Go binaries byte-by-byte,https://blog.filippo.io/reproducing-go-binaries-byte-by-byte/
878,Lobsters,compilers,Compiler design,GCC 6 and the status of compilers in OpenIndiana,https://www.openindiana.org/2017/04/23/gcc-6-and-the-status-of-compilers-in-openindiana/
879,Lobsters,compilers,Compiler design,A Scheme Interpreter for ARM Microcontrollers,http://armpit.sourceforge.net/
880,Lobsters,compilers,Compiler design,Writing a Lisp: String Interpolation,http://www.reinvanderwoerd.nl/blog/2017/04/20/writing-a-lisp-string-interpolation/
881,Lobsters,compilers,Compiler design,Mio: A High-Performance Multicore IO Manager for GHC (2013),http://haskell.cs.yale.edu/wp-content/uploads/2013/08/hask035-voellmy.pdf
882,Lobsters,compilers,Compiler design,New Nim website is live!,https://nim-lang.org
883,Lobsters,compilers,Compiler design,Type Tailoring,http://blog.racket-lang.org/2017/04/type-tailoring.html
884,Lobsters,compilers,Compiler design,Modifying the Python language in 6 minutes,https://hackernoon.com/modifying-the-python-language-in-7-minutes-b94b0a99ce14
885,Lobsters,compilers,Compiler design,Optimizing Rust Struct Size: A 6-month Compiler Development Project,http://camlorn.net/posts/April%202017/rust-struct-field-reordering.html
886,Lobsters,compilers,Compiler design,PHP 7 Virtual Machine,https://nikic.github.io/2017/04/14/PHP-7-Virtual-machine.html
887,Lobsters,compilers,Compiler design,Cynth: a simple C-to-Verilog compiler,https://github.com/cseed/cynth
888,Lobsters,compilers,Compiler design,"A Scope Safe Universe of Syntaxes with Binding, Their Semantics and Proofs",http://gallais.github.io/pdf/draft_fscd17.pdf
889,Lobsters,compilers,Compiler design,Let’s Build a Programming Language,https://hackernoon.com/lets-build-a-programming-language-2612349105c6
890,Lobsters,compilers,Compiler design,"On Recursion, Continuations and Trampolines",http://eli.thegreenplace.net/2017/on-recursion-continuations-and-trampolines/
891,Lobsters,compilers,Compiler design,L2L: A superset of Lisp and Lua,https://github.com/meric/l2l
892,Lobsters,compilers,Compiler design,Taming Undefined Behavior in LLVM,https://blog.regehr.org/archives/1496
893,Lobsters,compilers,Compiler design,Bootstrapping trust in compilers | Owl’s Portfolio,https://www.owlfolio.org/research/bootstrapping-trust-in-compilers/
894,Lobsters,compilers,Compiler design,IntelLabs Functional Language Research Compiler,https://github.com/IntelLabs/flrc
895,Lobsters,compilers,Compiler design,"Why Python, Ruby, and Javascript are Slow (2013)",https://speakerdeck.com/alex/why-python-ruby-and-javascript-are-slow
896,Lobsters,compilers,Compiler design,"Aaargh!! - Macros, Parse Transforms and others @ Erlang Battleground",https://medium.com/erlang-battleground/aaargh-a7dc940f8d0f
897,Lobsters,compilers,Compiler design,Knuth's Algol-58 Compiler,http://datatron.blogspot.com/2015/11/knuths-algol-58-compiler.html
898,Lobsters,compilers,Compiler design,D reference compiler is now Open Source,http://forum.dlang.org/thread/oc8acc$1ei9$1@digitalmars.com
899,Lobsters,compilers,Compiler design,"The next chapter, ""Evaluating Expressions"", of my book ""Crafting Interpreters""",http://www.craftinginterpreters.com/evaluating-expressions.html
900,Lobsters,compilers,Compiler design,Three Cool Things About D - The Case for the D Programing Language,https://www.youtube.com/watch?v=RlVpPstLPEc
901,Lobsters,compilers,Compiler design,emulating partial function application in c,http://stackoverflow.com/questions/5524299/emulating-partial-function-application-in-c
902,Lobsters,compilers,Compiler design,Unbalanced Parentheses – Erlang Battleground,https://medium.com/erlang-battleground/unbalanced-parentheses-6634140c6adb
903,Lobsters,compilers,Compiler design,Announcing Sourcery CodeBench Lite for IA16,https://blogs.mentor.com/embedded/blog/2017/04/01/announcing-sourcery-codebench-lite-for-ia16/
904,Lobsters,compilers,Compiler design,"Compiling C to printable x86, to make an executable research paper",https://www.youtube.com/watch?v=LA_DrBwkiJA
905,Lobsters,compilers,Compiler design,"How I wrote a programming language, and how you can too",https://medium.com/@william01110111/the-programming-language-pipeline-91d3f449c919
906,Lobsters,compilers,Compiler design,Stochastic program optimization,https://blog.acolyer.org/2017/03/30/stochastic-program-optimization/
907,Lobsters,compilers,Compiler design,"Your next JVM: Panama, Valhalla, Metropolis",http://cr.openjdk.java.net/~jrose/pres/201703-YourNextVM.pdf
908,Lobsters,compilers,Compiler design,Recompiling the Lost Vikings,https://ryiron.wordpress.com/2017/03/26/recompiling-the-lost-vikings/
909,Lobsters,compilers,Compiler design,movfuscator - single instruction C compiler,https://github.com/xoreaxeaxeax/movfuscator
910,Lobsters,compilers,Compiler design,Make your own Lisp,https://github.com/kanaka/mal
911,Lobsters,compilers,Compiler design,Tapir: Embedding Fork-Join Parallelism into LLVM's Intermediate Representation,http://wsmoses.com/tapir.pdf
912,Lobsters,compilers,Compiler design,"Unification in Chalk, part 1",http://smallcultfollowing.com/babysteps/blog/2017/03/25/unification-in-chalk-part-1/
913,Lobsters,compilers,Compiler design,Alpaca – Functional programming inspired by ML for the Erlang VM,https://github.com/alpaca-lang/alpaca/
914,Lobsters,compilers,Compiler design,GCC licence change,https://marc.info/?l=openbsd-tech&m=149032069130072&w=2
915,Lobsters,compilers,Compiler design,JSCaml: A compile-time transformation from JavaScript to OCaml,https://github.com/facebookexperimental/JSCaml
916,Lobsters,compilers,Compiler design,Inlining and Specialisation,https://mpickering.github.io/posts/2017-03-20-inlining-and-specialisation.html
917,Lobsters,compilers,Compiler design,Visualizing Garbage Collection Algorithms,https://spin.atomicobject.com/2014/09/03/visualizing-garbage-collection-algorithms/
918,Lobsters,compilers,Compiler design,Don’t Fear the Reaper – Basics about the D Garbage Collector,https://dlang.org/blog/2017/03/20/dont-fear-the-reaper/
919,Lobsters,compilers,Compiler design,Lua VM running on web assembly,https://github.com/vvanders/wasm_lua
920,Lobsters,compilers,Compiler design,"Running Optcarrot, a Ruby NES emulator, at 150 fps with the GUI",http://eregon.me/blog/2016/11/28/optcarrot.html
921,Lobsters,compilers,Compiler design,Snowball,http://snowballstem.org/
922,Lobsters,compilers,Compiler design,guile 2.2 omg!!!,http://wingolog.org/archives/2017/03/15/guile-2-2-omg
923,Lobsters,compilers,Compiler design,"Ruby 3x3: Matz, Koichi, and Tenderlove on the future of Ruby Performance",https://blog.heroku.com/ruby-3-by-3
924,Lobsters,compilers,Compiler design,LLVM 4.0.0 released,http://lists.llvm.org/pipermail/llvm-announce/2017-March/000073.html
925,Lobsters,compilers,Compiler design,Elsa: a lightweight proof-checker,https://github.com/ucsd-progsys/elsa/blob/master/README.md
926,Lobsters,compilers,Compiler design,Rust's Type System is Turing-Complete: an exploration of type-level programming in Rust,https://sdleffler.github.io/RustTypeSystemTuringComplete/
927,Lobsters,compilers,Compiler design,The ANTLR mega tutorial,https://tomassetti.me/antlr-mega-tutorial/
928,Lobsters,compilers,Compiler design,Explaining 750 line compiler+runtime designed to GPU self-host APL,https://www.youtube.com/watch?v=gcUWTa16Jc0
929,Lobsters,compilers,Compiler design,selfie,http://selfie.cs.uni-salzburg.at/
930,Lobsters,compilers,Compiler design,Ruby+OMR JIT Compiler: What’s next?,https://developer.ibm.com/open/2017/03/01/ruby-omr-jit-compiler-whats-next/
931,Lobsters,compilers,Compiler design,Why (most) High Level Languages are Slow,http://www.sebastiansylvan.com/post/why-most-high-level-languages-are-slow/
932,Lobsters,compilers,Compiler design,WalkMod: an open source tool to fix Java coding style issues,http://walkmod.com/
933,Lobsters,compilers,Compiler design,LuaJIT Hacking: Getting next() out of the NYI list,http://blog.cloudflare.com/luajit-hacking-getting-next-out-of-the-nyi-list/
934,Lobsters,compilers,Compiler design,Snowflake Strings,https://dlang.org/blog/2017/02/22/snowflake-strings/
935,Lobsters,compilers,Compiler design,The Challenges of Deploying Security Mitigations,https://blog.trailofbits.com/2017/02/20/the-challenges-of-deploying-security-mitigations/
936,Lobsters,compilers,Compiler design,Incorrectly Rounded Conversions in Visual C++,http://www.exploringbinary.com/incorrectly-rounded-conversions-in-visual-c-plus-plus/
937,Lobsters,compilers,Compiler design,"The next chapter of Crafting Interpreters: ""Representing Code""",http://www.craftinginterpreters.com/representing-code.html
938,Lobsters,compilers,Compiler design,The first patch-bulk upstreamed to LLDB,https://blog.netbsd.org/tnf/entry/the_first_patch_bulk_upstreamed
939,Lobsters,compilers,Compiler design,Object ID in MRI,http://tenderlovemaking.com/2017/02/01/object-id-in-mri.html
940,Lobsters,compilers,Compiler design,Nanopass Framework,http://docs.racket-lang.org/nanopass/index.html
941,Lobsters,compilers,Compiler design,Ramsey Nasser on Magic,https://vimeo.com/203271192
942,Lobsters,compilers,Compiler design,From AST to Lossless Syntax Tree,http://www.oilshell.org/blog/2017/02/11.html
943,Lobsters,compilers,Compiler design,Step-by-step development of a Scheme-to-x86 compiler,https://github.com/namin/inc
944,Lobsters,compilers,Compiler design,50 Bytes of Code That Took 4 GB to Compile,https://randomascii.wordpress.com/2013/08/14/50-bytes-of-code-that-took-4-gb-to-compile/
945,Lobsters,compilers,Compiler design,Rebol - Parsing,http://www.rebol.com/docs/core23/rebolcore-15.html
946,Lobsters,compilers,Compiler design,Attack of the DaliBug,http://pozorvlak.livejournal.com/150891.html
947,Lobsters,compilers,Compiler design,Write your own compiler - Introduction,http://blog.klipse.tech//javascript/2017/02/08/tiny-compiler-intro.html
948,Lobsters,compilers,Compiler design,Fencing off Go: Liveness and safety for channel-based programming,https://blog.acolyer.org/2017/02/02/fencing-off-go-liveness-and-safety-for-channel-based-programming/
949,Lobsters,compilers,Compiler design,MIT's modified LLVM compiler for optimizing parallel code,http://news.mit.edu/2017/optimizing-code-compiler-parallel-programs-0130
950,Lobsters,compilers,Compiler design,"Pyston 0.6.1 released, and future plans",https://blog.pyston.org/2017/01/31/pyston-0-6-1-released-and-future-plans/
951,Lobsters,compilers,Compiler design,Zig Programming Language Blurs the Line Between Compile-Time and Run-Time,http://andrewkelley.me/post/zig-programming-language-blurs-line-compile-time-run-time.html
952,Lobsters,compilers,Compiler design,jonesforth.S - A sometimes minimal FORTH compiler and tutorial for Linux,http://git.annexia.org/?p=jonesforth.git;a=blob;f=jonesforth.S
953,Lobsters,compilers,Compiler design,Basics of Compiler Design,http://www.diku.dk/~torbenm/Basics/basics_lulu2.pdf
954,Lobsters,compilers,Compiler design,A constructive look at the Atari 2600 BASIC cartridge (2015),http://boston.conman.org/2015/06/16.1
955,Lobsters,compilers,Compiler design,"Writing An Interpreter In Elixir - Rewriting a complete Interpreter in Elixir, using only the stdlib",https://github.com/fabrik42/writing_an_interpreter_in_elixir
956,Lobsters,compilers,Compiler design,Programming Languages for High-Assurance Autonomous Vehicles (Ivory),https://chess.eecs.berkeley.edu/pubs/1154/seminar.2015-11-02.Lee_Pike.pdf
957,Lobsters,compilers,Compiler design,Java is Unsound: The Industry Perspective,https://medium.com/@rosstate/java-is-unsound-28c84cb2b3f
958,Lobsters,compilers,Compiler design,Chris Lattner interview [with transcript],http://atp.fm/205-chris-lattner-interview-transcript/
959,Lobsters,compilers,Compiler design,New DirectX Shader Compiler based on Clang/LLVM now available as Open Source,https://blogs.msdn.microsoft.com/directx/2017/01/23/new-directx-shader-compiler-based-on-clangllvm-now-available-as-open-source/
960,Lobsters,compilers,Compiler design,leegao/LuaInLua -- A self-hosting compiler for the Lua language.,https://github.com/leegao/LuaInLua
961,Lobsters,compilers,Compiler design,DirectX Shader Compiler,https://github.com/Microsoft/DirectXShaderCompiler
962,Lobsters,compilers,Compiler design,Creating a language using only assembly language,https://speakerdeck.com/nineties/creating-a-language-using-only-assembly-language
963,Lobsters,compilers,Compiler design,Syntactic Loop Fusion in Julia,http://julialang.org/blog/2017/01/moredots
964,Lobsters,compilers,Compiler design,BuckleScript: a significant new OCaml to JavaScript compiler,http://yawar.blogspot.com/2017/01/bucklescript-significant-new-ocaml-to.html
965,Lobsters,compilers,Compiler design,llaisdy/beam_languages,https://github.com/llaisdy/beam_languages
966,Lobsters,compilers,Compiler design,Introducing Riptide: WebKit’s Retreating Wavefront Concurrent Garbage Collector,https://webkit.org/blog/7122/introducing-riptide-webkits-retreating-wavefront-concurrent-garbage-collector/
967,Lobsters,compilers,Compiler design,Turbo Pascal Compiler,https://www.teamten.com/lawrence/projects/turbo_pascal_compiler/
968,Lobsters,compilers,Compiler design,State of the VMS Port to x86_64 January 2017,https://www.vmssoftware.com/pdfs/State_of_Port_20170105.pdf
969,Lobsters,compilers,Compiler design,High-Speed ES2015,https://docs.google.com/presentation/d/1wiiZeRQp8-sXDB9xXBUAGbaQaWJC84M5RNxRyQuTmhk/mobilepresent?slide=id.p
970,Lobsters,compilers,Compiler design,GCC is C++17 Complete,https://gcc.gnu.org/projects/cxx-status.html#cxx1z
971,Lobsters,compilers,Compiler design,GCC Port for RISC-V,https://gcc.gnu.org/ml/gcc-patches/2017-01/msg00776.html
972,Lobsters,compilers,Compiler design,"Building a Compiler in Swift with LLVM, Part 3: Code Generation to LLVM IR",https://harlanhaskins.com/2017/01/11/building-a-compiler-with-swift-in-llvm-part-3-code-generation-to-llvm-ir.html
973,Lobsters,compilers,Compiler design,Oregon Programming Languages Summer School (2016),https://www.cs.uoregon.edu/research/summerschool/summer16/curriculum.php
974,Lobsters,compilers,Compiler design,Compiling Scala For Performance (2010),https://infoscience.epfl.ch/record/150270/files/EPFL_TH4820.pdf
975,Lobsters,compilers,Compiler design,Finding and Understanding Bugs in C Compilers,https://www.flux.utah.edu/paper/yang-pldi11
976,Lobsters,compilers,Compiler design,Chris Lattner leaves Apple,https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170109/030063.html
977,Lobsters,compilers,Compiler design,Common Subexpression Elimination in a Lazy Functional Language,https://kar.kent.ac.uk/21455/1/Common_Subexpression_Elimination_in_a_Lazy.pdf
978,Lobsters,compilers,Compiler design,Lambdascript: A new pure functional language built on the top of Python3,https://github.com/baruchel/lambdascript
979,Lobsters,compilers,Compiler design,Continuation Passing Style Interpreter,https://kseo.github.io/posts/2017-01-09-continuation-passing-style-interpreter.html
980,Lobsters,compilers,Compiler design,grsecurity: Reuse Attack Protector (RAP),https://grsecurity.net/rap_faq.php
981,Lobsters,compilers,Compiler design,What is oheap?,http://www.oilshell.org/blog/2017/01/09.html
982,Lobsters,compilers,Compiler design,"Building a Compiler in Swift with LLVM, Part 1: Introduction and the Lexer",https://harlanhaskins.com/2017/01/08/building-a-compiler-with-swift-in-llvm-part-1-introduction-and-the-lexer.html
983,Lobsters,compilers,Compiler design,Ammo.js (Bullet Physics) compiled to WebAssembly,https://gist.github.com/sasha240100/1e0c0894b2dd98623ef68f89d4ef87ab
984,Lobsters,compilers,Compiler design,A Tourist’s Guide to the LLVM Source Code,http://blog.regehr.org/archives/1453
985,Lobsters,compilers,Compiler design,The Myrddin Module System Is Not Complex,http://eigenstate.org/notes/myrmodules
986,Lobsters,compilers,Compiler design,libFirm - optimization and machine code generation,http://pp.ipd.kit.edu/firm/
987,Lobsters,compilers,Compiler design,undefined behavior and the purpose of C,http://www.yodaiken.com/2017/01/05/undefined-behavior-and-the-purpose-of-c/
988,Lobsters,compilers,Compiler design,"KLEE - Unassisted, Automatic Generation of High-Coverage Tests for System Programs (2008)",https://www.doc.ic.ac.uk/~cristic/papers/klee-osdi-08.pdf
989,Lobsters,compilers,Compiler design,The Myrddin Language: What happened in 2016,https://myrlang.org/retrospective
990,Lobsters,compilers,Compiler design,Crystal new year resolutions for 2017: 1.0,http://crystal-lang.org/2016/12/29/crystal-new-year-resolutions-for-2017-1-0.html
991,Lobsters,compilers,Compiler design,Learning Machine Learning: A beginner's journey,http://muratbuffalo.blogspot.com/2016/12/learning-machine-learning-beginners.html
992,Lobsters,compilers,Compiler design,TCC : Tiny C Compiler,http://bellard.org/tcc/
993,Lobsters,compilers,Compiler design,Koka - A functional language with effects,https://www.microsoft.com/en-us/research/project/koka/
994,Lobsters,compilers,Compiler design,Writing An Interpreter In Rust,https://chr4.org/blog/2016/12/09/writing-an-interpreter-in-rust
995,Lobsters,compilers,Compiler design,Swift: Challenges and Opportunity for Language and Compiler Research,http://researcher.watson.ibm.com/researcher/files/us-lmandel/lattner.pdf
996,Lobsters,compilers,Compiler design,LLVM's New Versioning Scheme,http://blog.llvm.org/2016/12/llvms-new-versioning-scheme.html
997,Lobsters,compilers,Compiler design,Lua Vermelha,https://github.com/Leonardo2718/lua-vermelha
998,Lobsters,compilers,Compiler design,Compiler Explorer,http://godbolt.org/
999,Lobsters,compilers,Compiler design,"Crashes, Hangs and Crazy Images by Adding Zero",https://medium.com/@afd_icl/crashes-hangs-and-crazy-images-by-adding-zero-689d15ce922b
1000,Lobsters,compilers,Compiler design,Reproducible Builds,https://reproducible-builds.org//
1001,Lobsters,compilers,Compiler design,Rakudo and NQP Internals Course,https://github.com/edumentab/rakudo-and-nqp-internals-course
1002,Lobsters,compilers,Compiler design,Parsing C++ is literally undecidable,http://blog.reverberate.org/2013/08/parsing-c-is-literally-undecidable.html
1003,Lobsters,compilers,Compiler design,Lift: performance portability on parallel accelerators,http://www.lift-project.org/
1004,Lobsters,compilers,Compiler design,"Node.js, TC-39, and Modules",https://hackernoon.com/node-js-tc-39-and-modules-a1118aecf95e
1005,Lobsters,compilers,Compiler design,Meta-Compilation for C++ (2001),http://www.computing.surrey.ac.uk/research/dsrg/fog/FogThesis.pdf
1006,Lobsters,compilers,Compiler design,A Problem with Type Checking (in Python and oil shell),http://www.oilshell.org/blog/2016/11/30.html
1007,Lobsters,compilers,Compiler design,Why I Wrote a Book About Interpreters,http://thorstenball.com/blog/2016/11/30/why-i-wrote-a-book-about-interpreters/
1008,Lobsters,compilers,Compiler design,Write You A Scheme version 2.0,https://wespiser.com/writings/wyas/home.html
1009,Lobsters,compilers,Compiler design,Beating The Compiler,http://www.codersnotes.com/notes/beating-the-compiler/
1010,Lobsters,compilers,Compiler design,An example of PEG usage,https://github.com/sebcat/move-literals
1011,Lobsters,compilers,Compiler design,Nom PEG parser version 2 released,https://unhandledexpression.com/2016/11/25/this-year-in-nom-2-0-is-here/
1012,Lobsters,compilers,Compiler design,How to Design (Declarative) Programming Languages [2003],http://people.csail.mit.edu/gregs/ll1-discuss-archive-html/msg04323.html
1013,Lobsters,compilers,Compiler design,An Experiment in Garbage Collection,http://pliniker.github.io/mo-gc-intro.html
1014,Lobsters,compilers,Compiler design,Introducing the Ruby+OMR JIT,https://developer.ibm.com/open/2016/11/18/introducing-ruby-jit/
1015,Lobsters,compilers,Compiler design,How to be* a compiler — make a compiler with JavaScript,https://medium.com/@kosamari/how-to-be-a-compiler-make-a-compiler-with-javascript-4a8a13d473b4
1016,Lobsters,compilers,Compiler design,Mapped Types Land in TypeScript,https://github.com/Microsoft/TypeScript/pull/12114
1017,Lobsters,compilers,Compiler design,Static Program Analysis,https://cs.au.dk/~amoeller/spa/spa.pdf
1018,Lobsters,compilers,Compiler design,Mu: Writing Your Own Programming Language,https://github.com/marciok/Mu
1019,Lobsters,compilers,Compiler design,Sourcegraph Master Plan,https://sourcegraph.com/plan
1020,Lobsters,compilers,Compiler design,"Ethereum, The Blockchain of Code",http://www.alexkyte.me/2016/11/ethereum-or-blockchain-of-code.html
1021,Lobsters,compilers,Compiler design,Why Aren't More Users More Happy With Our VMs?,http://soft-dev.org/talks/2016/vmil.pdf
1022,Lobsters,compilers,Compiler design,Ruby meta-hacking: Looking under the hood,https://sankhs.com/2016/10/28/ruby-metahacking/
1023,Lobsters,compilers,Compiler design,WebAssembly Browser Preview,http://v8project.blogspot.com/2016/10/webassembly-browser-preview.html
1024,Lobsters,compilers,Compiler design,TypeChef: Typechecking #ifdef variability,https://github.com/ckaestne/TypeChef
1025,Lobsters,compilers,Compiler design,C++ template metaprogramming introduction,https://monoinfinito.wordpress.com/series/introduction-to-c-template-metaprogramming/
1026,Lobsters,compilers,Compiler design,Race Condition vs. Data Race,http://blog.regehr.org/archives/490
1027,Lobsters,compilers,Compiler design,Eliminate STW (stop the world) stack re-scanning,https://github.com/golang/proposal/blob/master/design/17503-eliminate-rescan.md
1028,Lobsters,compilers,Compiler design,ML-flavoured Erlang v0.2.0 Released,http://noisycode.com/blog/2016/08/01/mlfe-v0-dot-2-0-released
1029,Lobsters,compilers,Compiler design,Introducing Kremlin - F* to C compiler by verified-HTTPS team,https://fstarlang.github.io/general/2016/09/30/introducing-kremlin.html
1030,Lobsters,compilers,Compiler design,How to speed up the Rust compiler,https://blog.mozilla.org/nnethercote/2016/10/14/how-to-speed-up-the-rust-compiler/
1031,Lobsters,compilers,Compiler design,Inside the Python Virtual Machine,https://leanpub.com/insidethepythonvirtualmachine
1032,Lobsters,compilers,Compiler design,Cuneiform: distributed functional programming with foreign language interfacing.,http://www.cuneiform-lang.org/
1033,Lobsters,compilers,Compiler design,Baby's First JIT,https://cmcenroe.me/2016/10/13/babys-first-jit.html
1034,Lobsters,compilers,Compiler design,A practical relational query compiler in 500 lines of code,http://scattered-thoughts.net/blog/2016/10/11/a-practical-relational-query-compiler-in-500-lines/
1035,Lobsters,compilers,Compiler design,W - A simple programming language (2001),https://www.vttoth.com/CMS/projects/49-w-a-simple-programming-language
1036,Lobsters,compilers,Compiler design,The 101 of ELF Binaries on Linux: Understanding and Analysis,https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/
1037,Lobsters,compilers,Compiler design,An On-the-fly Bytecode Compiler for Tcl [1996],https://www.usenix.org/legacy/publications/library/proceedings/tcl96/full_papers/lewis/
1038,Lobsters,compilers,Compiler design,Parsing Binding Names for Eﬃcient Representation in the SpiderMonkey Virtual Machine,http://rfrn.org/~shu/2016/10/06/parsing-bindings-for-efficient-repr.html
1039,Lobsters,compilers,Compiler design,Summarizing Garbage Collection,https://eschew.wordpress.com/2016/09/02/summarizing-gc/
1040,Lobsters,compilers,Compiler design,Distributed Filesystems: Getting Rid Of Shared Libraries,http://www.wilkie.io/posts/filesystems-what-we-know-what-we-can-learn
1041,Lobsters,compilers,Compiler design,Andreas Stefik on the state of language research and evidence,https://www.functionalgeekery.com/episode-55-andreas-stefik/
1042,Lobsters,compilers,Compiler design,Theo de Raadt on LLVM license change,https://marc.info/?l=openbsd-misc&m=147503691302850&w=2
1043,Lobsters,compilers,Compiler design,suckless conference 2016,http://suckless.org/conferences/2016
1044,Lobsters,compilers,Compiler design,Leex And Yecc [2014],http://relops.com/blog/2014/01/13/leex_and_yecc/
1045,Lobsters,compilers,Compiler design,OMeta#: Who? What? When? Where? Why? (2008),http://www.moserware.com/2008/06/ometa-who-what-when-where-why.html
1046,Lobsters,compilers,Compiler design,Fine-grained Language Composition,http://tratt.net/laurie/blog/entries/fine_grained_language_composition.html
1047,Lobsters,compilers,Compiler design,A-Lang: Ways to Implement Computer Languages on 6502s (1994),http://www.dwheeler.com/6502/a-lang.txt
1048,Lobsters,compilers,Compiler design,Secure Virtual Architecture: Safe Execution for Commodity OS's (2007),http://llvm.org/pubs/2007-SOSP-SVA.pdf
1049,Lobsters,compilers,Compiler design,Fibonacci benchmark,http://crystal-lang.org/2016/07/15/fibonacci-benchmark.html
1050,Lobsters,compilers,Compiler design,"Everything Old is New Again, and a Compiler Bug",https://randomascii.wordpress.com/2016/09/16/everything-old-is-new-again-and-a-compiler-bug/
1051,Lobsters,compilers,Compiler design,"Esolang, the esoteric programming languages wiki",https://esolangs.org/wiki/Main_Page
1052,Lobsters,compilers,Compiler design,A tale of an impossible bug: big.LITTLE and caching,http://www.mono-project.com/news/2016/09/12/arm64-icache
1053,Lobsters,compilers,Compiler design,Optimizing with persistent data structures,http://wingolog.org/pub/llvm-cauldron-2016-slides.pdf
1054,Lobsters,compilers,Compiler design,The new and improved programming languages zoo,http://math.andrej.com/2016/09/07/the-new-and-improved-programming-languages-zoo/
1055,Lobsters,compilers,Compiler design,Writing an Interpreter with PyPy [2013],https://github.com/disjukr/pypy-tutorial-ko/blob/master/tutorial.rst
1056,Lobsters,compilers,Compiler design,Tcl the misunderstood,http://antirez.com/articoli/tclmisunderstood.html
1057,Lobsters,compilers,Compiler design,LLVM 3.9 Release,http://lists.llvm.org/pipermail/llvm-dev/2016-September/104460.html
1058,Lobsters,compilers,Compiler design,PyPy Status Blog: PyPy2 v5.4 released - incremental improvements and enhancements,https://morepypy.blogspot.com/2016/08/pypy2-v54-released-incremental.html
1059,Lobsters,compilers,Compiler design,"Trill: A typed, LLVM-backed compiler, inspired by (and written in) Swift",https://github.com/harlanhaskins/trill
1060,Lobsters,compilers,Compiler design,Implementing a programming language in D: Lexical Analysis,http://blog.felixangell.com/blog/implementing-a-programming-language-in-d-part-1
1061,Lobsters,compilers,Compiler design,Implementing a programming language in D: Parsing to an AST,http://blog.felixangell.com/blog/menu-implementing-a-programming-language-in-d-part-2
1062,Lobsters,compilers,Compiler design,An introduction to LLVM in Go,http://blog.felixangell.com/blog/an-introduction-to-llvm-in-go
1063,Lobsters,compilers,Compiler design,Implementing a virtual machine in C [2015],http://blog.felixangell.com/blog/virtual-machine-in-c
1064,Lobsters,compilers,Compiler design,EXE — DepTypes Language with Encodings,https://github.com/groupoid/exe
1065,Lobsters,compilers,Compiler design,Simit: A language for computing on sparse systems,http://simit-lang.org/
1066,Lobsters,compilers,Compiler design,endrazine/wcc - The Witchcraft Compiler Collection,https://github.com/endrazine/wcc
1067,Lobsters,compilers,Compiler design,Softbound + CETS: Complete and Compatible Full Memory Safety for C,http://www.cs.rutgers.edu/%7Esantosh.nagarakatte/softbound/
1068,Lobsters,compilers,Compiler design,"Eagerly Evaluated Questions, with Joseph Jevnik",http://hifibyapg.com/interviews/joseph-jevnik.html
1069,Lobsters,compilers,Compiler design,(How to Write a (Lisp) Interpreter (in Python)) (2010),http://www.norvig.com/lispy.html
1070,Lobsters,compilers,Compiler design,Type Punning Functions in C,http://www.evanmiller.org/type-punning-functions-in-c.html
1071,Lobsters,compilers,Compiler design,What’s in a Continuation,http://jlongster.com/Whats-in-a-Continuation
1072,Lobsters,compilers,Compiler design,Programming Your Own Language in C++,https://accu.org/index.php/journals/2252
1073,Lobsters,compilers,Compiler design,Writing the Cyclone Scheme Compiler by Justin Ethier,http://justinethier.github.io/cyclone/docs/Writing-the-Cyclone-Scheme-Compiler
1074,Lobsters,compilers,Compiler design,More Comment-Preserving Configuration Parsers,https://kev.inburke.com/kevin/more-comment-preserving-configuration-parsers/?lobsters
1075,Lobsters,compilers,Compiler design,Re: Type hints -- a mediocre programmer's reaction (2015),https://mail.python.org/pipermail/python-dev/2015-April/139267.html
1076,Lobsters,compilers,Compiler design,"Data-Oriented Demo: SOA, composition",https://www.youtube.com/watch?v=ZHqFrNyLlpA
1077,Lobsters,compilers,Compiler design,Why is an int in OCaml only 31 bits?,http://stackoverflow.com/questions/3773985/why-is-an-int-in-ocaml-only-31-bits
1078,Lobsters,compilers,Compiler design,Resources for Amateur Compiler Writers,http://c9x.me/compile/bib/
1079,Lobsters,compilers,Compiler design,The Expression Problem [1998],http://www.daimi.au.dk/~madst/tool/papers/expression.txt
1080,Lobsters,compilers,Compiler design,A Compiler for 3D Machine Knitting,https://www.disneyresearch.com/publication/machine-knitting-compiler/
1081,Lobsters,compilers,Compiler design,LLVM Programmer’s Manual,http://llvm.org/docs/ProgrammersManual.html
1082,Lobsters,compilers,Compiler design,The Bootstrapped Compiler and the Damage Done,http://tratt.net/laurie/blog/entries/the_bootstrapped_compiler_and_the_damage_done.html
1083,Lobsters,compilers,Compiler design,Proceedings Up for the 2016 European Conference on Object-Oriented Programming,http://drops.dagstuhl.de/portals/extern/index.php?semnr=16010
1084,Lobsters,compilers,Compiler design,Graal & Truffle,https://medium.com/@octskyward/graal-truffle-134d8f28fb69
1085,Lobsters,compilers,Compiler design,Into the Depths of C: Elaborating the De Facto Standards,https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/201606-pldi2016-clanguage.pdf
1086,Lobsters,compilers,Compiler design,Uniprocessor Garbage Collection Techniques,http://www.cs.rice.edu/~javaplt/311/Readings/wilson92uniprocessor.pdf
1087,Lobsters,compilers,Compiler design,IonMonkey: Evil on your behalf,https://blog.mozilla.org/javascript/2016/07/05/ionmonkey-evil-on-your-behalf/
1088,Lobsters,compilers,Compiler design,oK -- Javascript Implementation of the K5 language,https://github.com/JohnEarnest/ok
1089,Lobsters,compilers,Compiler design,C++ Frequently Questioned Answers,http://yosefk.com/c++fqa/
1090,Lobsters,compilers,Compiler design,Coconut Programming Language,http://coconut-lang.org
1091,Lobsters,compilers,Compiler design,"wadc, a programming language for generating doom levels",https://jmtd.net/wadc/
1092,Lobsters,compilers,Compiler design,Malfunctional Programming,http://www.cl.cam.ac.uk/~sd601/papers/malfunction.pdf
1093,Lobsters,compilers,Compiler design,Dotty - A next generation compiler for Scala,http://dotty.epfl.ch/
1094,Lobsters,compilers,Compiler design,ThinLTO: Scalable and Incremental LTO,http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html
1095,Lobsters,compilers,Compiler design,Dynamic Witnesses for Static Type Errors,http://eric.seidel.io/pub/nanomaly-icfp16.pdf
1096,Lobsters,compilers,Compiler design,Go Ethereum’s JIT-EVM,https://blog.ethereum.org/2016/06/02/go-ethereums-jit-evm/
1097,Lobsters,compilers,Compiler design,Nim v0.14.0 released,http://nim-lang.org/news/2016_06_07_version_0_14_0_released.html
1098,Lobsters,compilers,Compiler design,Virtual Machines Summer School 2016,http://soft-dev.org/events/vmss16/
1099,Lobsters,compilers,Compiler design,Constraints,http://tagide.com/blog/research/constraints/
1100,Lobsters,compilers,Compiler design,Understanding LLVM C++ Compiler Optimization - Chandler Carruth,https://www.youtube.com/watch?v=FnGCDLhaxKU
1101,Lobsters,compilers,Compiler design,Creating a simple JVM language from scratch!,http://jakubdziworski.github.io/categories.html#Enkel-ref
1102,Lobsters,compilers,Compiler design,A Verified Compiler for VLisp PreScheme,http://repository.readscheme.org/ftp/papers/vlisp-lasc/prescheme.pdf
1103,Lobsters,compilers,Compiler design,Compiling a Functional Language,http://lucacardelli.name/Papers/CompilingML.A4.pdf
1104,Lobsters,compilers,Compiler design,So You Want to Be a (Compiler) Wizard,http://belkadan.com/blog/2016/05/So-You-Want-To-Be-A-Compiler-Wizard/
1105,Lobsters,compilers,Compiler design,The surprising cleverness of modern compilers,http://lemire.me/blog/2016/05/23/the-surprising-cleverness-of-modern-compilers/
1106,Lobsters,compilers,Compiler design,Efficient query plans for modern hardware,https://blog.acolyer.org/2016/05/23/efficiently-compiling-efficient-query-plans-for-modern-hardware/
1107,Lobsters,compilers,Compiler design,Introducing clojure.spec,http://blog.cognitect.com/blog/2016/5/23/introducing-clojurespec
1108,Lobsters,compilers,Compiler design,Dynamic Programming Course,http://bibiserv.techfak.uni-bielefeld.de/cgi-bin/dpcourse
1109,Lobsters,compilers,Compiler design,Anders Hejlsberg on Modern Compiler Construction,https://channel9.msdn.com/Blogs/Seth-Juarez/Anders-Hejlsberg-on-Modern-Compiler-Construction
1110,Lobsters,compilers,Compiler design,GHC Development: OutsideIn,http://www.arcadianvisions.com/blog/2016/ghc-contributing.html
1111,Lobsters,compilers,Compiler design,Nanopass Framework,http://nanopass.org/
1112,Lobsters,compilers,Compiler design,TCCBOOT: TinyCC Boot Loader,http://www.bellard.org/tcc/tccboot.html
1113,Lobsters,compilers,Compiler design,A fresh benchmark of major Scheme implementations,https://www.nexoid.at/tmp/scheme-benchmark-r7rs.html
1114,Lobsters,compilers,Compiler design,"""The day I ran off a listing of the C compiler, strapped it to the back of my motorcycle"" (2002)",http://www.svipx.com/pcc/PCCminipages/zc9b6ec9e.html
1115,Lobsters,compilers,Compiler design,"slibtool - skinny libtool implementation, written in C",http://git.midipix.org/cgit.cgi/slibtool/tree/README
1116,Lobsters,compilers,Compiler design,"OpenMP 3.1 Summary Card C/C++ (2011) (supported since GCC 4.7, LLVM/Clang 3.7)",http://openmp.org/mp-documents/OpenMP3.1-CCard.pdf
1117,Lobsters,compilers,Compiler design,.note.GNU-stack (2010),http://en.chys.info/2010/12/note-gnu-stack/
1118,Lobsters,compilers,Compiler design,"Lively Linear Lisp -- 'Look Ma, No Garbage!' (1992)",http://www.pipeline.com/~hbaker1/LinearLisp.html
1119,Lobsters,compilers,Compiler design,[llvm-dev] RFC: XRay -- A Function Call Tracing System,http://lists.llvm.org/pipermail/llvm-dev/2016-April/098901.html
1120,Lobsters,compilers,Compiler design,SOURCE_DATE_EPOCH support in gcc!,https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=e3e8c48c4a494d9da741c1c8ea6c4c0b7c4ff934
1121,Lobsters,compilers,Compiler design,Introducing MIR,http://blog.rust-lang.org/2016/04/19/MIR.html
1122,Lobsters,compilers,Compiler design,GCC 6.1 Released,https://gcc.gnu.org/ml/gcc/2016-04/msg00244.html
1123,Lobsters,compilers,Compiler design,QBE - Compiler Backend,http://c9x.me/compile/
1124,Lobsters,compilers,Compiler design,Futhark - High-Performance Functional Programming,http://futhark-lang.org
1125,Lobsters,compilers,Compiler design,Significant Whitespace: good or bad?,/s/yyuo7f/significant_whitespace_good_bad
1126,Lobsters,compilers,Compiler design,Blur: shell-based build system,https://github.com/danfuzz/blur
1127,Lobsters,compilers,Compiler design,Which Clang Warning Is Generating This Message?,http://fuckingclangwarnings.com
1128,Lobsters,compilers,Compiler design,Cheney on the M.T.A.,http://home.pipeline.com/~hbaker1/CheneyMTA.html
1129,Lobsters,compilers,Compiler design,My Little LLVM: Undefined Behavior is Magic,http://blog.llvm.org/2016/04/undefined-behavior-is-magic.html
1130,Lobsters,compilers,Compiler design,Go 1.7 toolchain improvements,http://dave.cheney.net/2016/04/02/go-1-7-toolchain-improvements
1131,Lobsters,compilers,Compiler design,The super tiny compiler,https://github.com/thejameskyle/the-super-tiny-compiler
1132,Lobsters,compilers,Compiler design,BuckleScript - A JavaScript Backend For the OCaml Compiler,http://bloomberg.github.io/bucklescript/
1133,Lobsters,compilers,Compiler design,Branchless Conditionals (Compiler Optimization Technique),http://www.blueraja.com/blog/285/branchless-conditionals-compiler-optimization-technique
1134,Lobsters,compilers,Compiler design,Inside a register allocator,http://artagnon.com/inside-a-register-allocator/
1135,Lobsters,compilers,Compiler design,Compiler Bugs Found When Porting Chromium to VC++ 2015,https://randomascii.wordpress.com/2016/03/24/compiler-bugs-found-when-porting-chromium-to-vc-2015/
1136,Lobsters,compilers,Compiler design,Why linting makes me yawn,https://medium.com/@Jakeherringbone/why-linting-makes-me-yawn-cadbd9a51ca9
1137,Lobsters,compilers,Compiler design,Sulong: Fast LLVM IR Execution on the JVM with Truffle and Graal,http://llvm.org/devmtg/2016-01/slides/Sulong.pdf
1138,Lobsters,compilers,Compiler design,Rhine – A typed Elixir-inspired language on LLVM,https://github.com/artagnon/rhine
1139,Lobsters,compilers,Compiler design,An introduction to LLVM in Go,http://blog.felixangell.com/an-introduction-to-llvm-in-go/
1140,Lobsters,compilers,Compiler design,SIGSEGV with fault address 0xb01dfacedebac1e,https://go.googlesource.com/go/+/17f9423
1141,Lobsters,compilers,Compiler design,Testing GCC in the wild,http://developers.redhat.com/blog/2016/03/10/testing-gcc-in-the-wild/
1142,Lobsters,compilers,Compiler design,On the Madness of Optimizing Compilers,http://prog21.dadgum.com/217.html
1143,Lobsters,compilers,Compiler design,Scala+LLVM,http://greedy.github.io/scala-llvm/
1144,Lobsters,compilers,Compiler design,“Optimization” based on undefined behaviour hurts performance,http://www.complang.tuwien.ac.at/kps2015/proceedings/KPS_2015_submission_29.pdf
1145,Lobsters,compilers,Compiler design,Write You a Haskell,http://dev.stephendiehl.com/fun/index.html
1146,Lobsters,compilers,Compiler design,"No Compiler - On LLVM, using C libraries from Lua, and writing software without a compiler",http://msm.runhello.com/p/1003
1147,Lobsters,compilers,Compiler design,Completing Swift Generics,https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160229/011666.html
1148,Lobsters,compilers,Compiler design,OCaml 4.03: Everything else,https://blogs.janestreet.com/ocaml-4-03-everything-else/
1149,Lobsters,compilers,Compiler design,Make VC++ Compiles Fast Through Parallel Compilation,https://randomascii.wordpress.com/2014/03/22/make-vc-compiles-fast-through-parallel-compilation/
1150,Lobsters,compilers,Compiler design,Swift Abstract Syntax Tree,http://ankit.im/swift/2016/02/29/swift-abstract-syntax-tree/
1151,Lobsters,compilers,Compiler design,gpucc: An Open-Source GPGPU Compiler,http://llvm.org/devmtg/2015-10/slides/Wu-OptimizingLLVMforGPGPU.pdf
1152,Lobsters,compilers,Compiler design,The Oden Programming Language,http://oden-lang.org/
1153,Lobsters,compilers,Compiler design,"A better inliner for OCaml, and why it matters",https://blogs.janestreet.com/flambda/
1154,Lobsters,compilers,Compiler design,Sulong: Fast LLVM IR Execution on the JVM with Truffle and Graal,https://github.com/graalvm/sulong
1155,Lobsters,compilers,Compiler design,Introducing the B3 JIT Compiler,https://webkit.org/blog/5852/introducing-the-b3-jit-compiler/
1156,Lobsters,compilers,Compiler design,Google crafts custom networking CPU with parallel computing links,http://www.theregister.co.uk/2016/02/09/google_processor/
1157,Lobsters,compilers,Compiler design,A Lisp interpreter in TypeScript,http://www.oki-osk.jp/esc/typescript/lisp-en.html
1158,Lobsters,compilers,Compiler design,Jai Primer,https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md
1159,Lobsters,compilers,Compiler design,a lambda is not (necessarily) a closure,https://wingolog.org/archives/2016/02/08/a-lambda-is-not-necessarily-a-closure
1160,Lobsters,compilers,Compiler design,"""Screw it, I'll make my own!"" - The story of a new programming language",http://breuleux.net/blog/my-own-language.html
1161,Lobsters,compilers,Compiler design,GCC-Bridge: A C/Fortran compiler targeting the JVM,http://www.renjin.org/blog/2016-01-31-introducing-gcc-bridge.html
1162,Lobsters,compilers,Compiler design,WebKit B3: Bare Bones Backend,https://webkit.org/docs/b3/
1163,Lobsters,compilers,Compiler design,Undefined Behaviors in LLVM,https://www.cs.utah.edu/~regehr/llvm-ub.pdf
1164,Lobsters,compilers,Compiler design,LLVM Dlang compiler has added alpha support for Android,http://forum.dlang.org/thread/fglyajphcqvwfyuklohr@forum.dlang.org
1165,Lobsters,compilers,Compiler design,Let's add a statistical profiler to CHICKEN!,http://www.more-magic.net/posts/statistical-profiling.html
1166,Lobsters,compilers,Compiler design,More Turing-completeness in surprising places,http://kristerw.blogspot.com/2016/01/more-turing-completeness-in-surprising.html
1167,Lobsters,compilers,Compiler design,COGENT: Certified Compilation for a Functional Systems Language,http://arxiv.org/abs/1601.05520
1168,Lobsters,compilers,Compiler design,7 Scandalous Weird Old Things About The C Preprocessor,http://blog.robertelder.org/7-weird-old-things-about-the-c-preprocessor/
1169,Lobsters,compilers,Compiler design,The Zephyr Abstract Syntax Description Language,https://www.cs.princeton.edu/research/techreps/TR-554-97
1170,Lobsters,compilers,Compiler design,Moving Forth,http://bradrodriguez.com/papers/moving1.htm
1171,Lobsters,compilers,Compiler design,GCC tiny,http://thinkingeek.com/gcc-tiny/
1172,Lobsters,compilers,Compiler design,Unboxing in Guile,https://wingolog.org/archives/2016/01/19/unboxing-in-guile
1173,Lobsters,compilers,Compiler design,"The Haskell Rewrite (""...the motivation for moving away from Racket"")",http://oden-lang.org/blog/compiler/2016/01/18/the-haskell-rewrite.html
1174,Lobsters,compilers,Compiler design,libFirm - optimization and machine code generation,http://pp.ipd.kit.edu/firm/Index
1175,Lobsters,compilers,Compiler design,The Power of Negative Thinking,https://existentialtype.wordpress.com/2015/01/27/the-power-of-negative-thinking/
1176,Lobsters,compilers,Compiler design,Compilers that Target C,https://github.com/dbohdan/compilers-targeting-c
1177,Lobsters,compilers,Compiler design,On The Advantages Of Tagged Architecture,http://www.feustel.us/Feustel%20&%20Associates/Advantages.pdf
1178,Lobsters,compilers,Compiler design,"8 Bit CPU in Prison Architect: 7 opcodes, 15b ROM, 7b RAM",https://steamcommunity.com/sharedfiles/filedetails/?id=294577888
1179,Lobsters,compilers,Compiler design,ChakraCore: the high-performance JavaScript engine that powers Microsoft Edge,https://github.com/Microsoft/Chakracore
1180,Lobsters,compilers,Compiler design,F# Compiler Technical Overview,http://fsharp.github.io/2015/09/29/fsharp-compiler-guide.html
1181,Lobsters,compilers,Compiler design,Disassembling NWScript Bytecode,https://xoreos.org/blog/2016/01/12/disassembling-nwscript-bytecode/
1182,Lobsters,compilers,Compiler design,The Half Strap: Self-hosting and Guile,https://wingolog.org/archives/2016/01/11/the-half-strap-self-hosting-and-guile
1183,Lobsters,compilers,Compiler design,Conditionally Correct Superoptimization,https://cs.stanford.edu/people/eschkufz/docs/cove.pdf
1184,Lobsters,compilers,Compiler design,DM's Esoteric Programming Languages - Piet Samples,http://www.dangermouse.net/esoteric/piet/samples.html
1185,Lobsters,compilers,Compiler design,A functional implementation of dynamic wind,http://awwx.github.io/functional-implementation-of-dynamic-wind.html
1186,Lobsters,compilers,Compiler design,Dafny: A language and program verifier for functional correctness,http://research.microsoft.com/en-us/projects/dafny/
1187,Lobsters,compilers,Compiler design,CEmu: An open-source third-party TI-84 Plus CE / TI-83 Premium CE calculator emulator,https://github.com/MateoConLechuga/CEmu
1188,Lobsters,compilers,Compiler design,A problem with LLVM's undef,http://playingwithpointers.com/problem-with-undef.html
1189,Lobsters,compilers,Compiler design,META II: Digital Vellum in the Digital Scriptorium - ACM Queue,https://queue.acm.org/detail.cfm?id=2724586
1190,Lobsters,compilers,Compiler design,When coding style survives compilation: De-anonymizing programmers from executable binaries,https://freedom-to-tinker.com/blog/aylin/when-coding-style-survives-compilation-de-anonymizing-programmers-from-executable-binaries/
1191,Lobsters,compilers,Compiler design,The Future of Crystal,http://crystal-lang.org/2015/12/24/the-future-of-crystal.html
1192,Lobsters,compilers,Compiler design,Validation and Conversion of Physical Units at Compile Time,http://www.home.hs-karlsruhe.de/~fado0001/2015-32C3/paper-onecolumn-colour.pdf
1193,Lobsters,compilers,Compiler design,Pi-Forall: How to use and implement a dependently-typed language,https://www.youtube.com/watch?v=6klfKLBnz9k&list=PLDFjrbtSUOm7_0pUXwfln1P3qweb1Ol3t
1194,Lobsters,compilers,Compiler design,DLL Hijacking Just Won’t Die,http://textslashplain.com/2015/12/18/dll-hijacking-just-wont-die/
1195,Lobsters,compilers,Compiler design,Specialising Dynamic Techniques for Implementing The Ruby Programming Language,http://chrisseaton.com/phd/
1196,Lobsters,compilers,Compiler design,Making a Mini-Lisp: Introduction to Transpilers in JavaScript,https://angularclass.com/making-a-mini-lisp-introduction-to-transpilers/
1197,Lobsters,compilers,Compiler design,Inline caching in MRI,http://tenderlovemaking.com/2015/12/23/inline-caching-in-mri.html
1198,Lobsters,compilers,Compiler design,Want to Write a Compiler? Just Read These Two Papers,http://prog21.dadgum.com/30.html
1199,Lobsters,compilers,Compiler design,boringcc,https://groups.google.com/forum/m/#!topic/boring-crypto/48qa1kWignU
1200,Lobsters,compilers,Compiler design,The Dangers of Super Smart Compilers,http://hacksoflife.blogspot.com/2015/12/the-dangers-of-super-smart-compilers.html
1201,Lobsters,compilers,Compiler design,Safe Native Code,http://joeduffyblog.com/2015/12/19/safe-native-code/
1202,Lobsters,compilers,Compiler design,Leveling up Clojure's Hash Maps,https://bendyworks.com/leveling-clojures-hash-maps/
1203,Lobsters,compilers,Compiler design,Bayesian Logic Programming Language,https://bayesianlogic.github.io/
1204,Lobsters,compilers,Compiler design,LLVM Begins Looking At PKU Memory Protection Keys Support,http://www.phoronix.com/scan.php?page=news_item&px=Intel-LLVM-PKU
1205,Lobsters,compilers,Compiler design,A Distributed Haskell for the Modern Web,http://ekblad.cc/lic.pdf
1206,Lobsters,compilers,Compiler design,Plan to throw one away,http://garethrees.org/2015/12/14/javascript/
1207,Lobsters,compilers,Compiler design,Shem: Haskell-like compile-to-js language with AST editor,https://github.com/xixixao/Shem
1208,Lobsters,compilers,Compiler design,"(Shem Golem), a Haskell 98 derived compile to JS Lisp",http://shem.io/
1209,Lobsters,compilers,Compiler design,Static vs dynamic dispatch in Swift,https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001948.html
1210,Lobsters,compilers,Compiler design,"The convergence of compilers, build systems and package managers",http://blog.ezyang.com/2015/12/the-convergence-of-compilers-build-systems-and-package-managers/
1211,Lobsters,compilers,Compiler design,Compose Conference 2016 Registration Now Open,https://www.eventbrite.com/e/cmpse-conference-2016-tickets-19647973618
1212,Lobsters,compilers,Compiler design,Building a simple JIT in Rust,http://www.jonathanturner.org/2015/12/building-a-simple-jit-in-rust.html
1213,Lobsters,compilers,Compiler design,The Myrddin Programming Language,http://eigenstate.org/myrddin/
1214,Lobsters,compilers,Compiler design,rise4fun - a community of software engineering tools,http://rise4fun.com/
1215,Lobsters,compilers,Compiler design,Compiler support for lightweight context switching,http://dl.acm.org/citation.cfm?id=2400695
1216,Lobsters,compilers,Compiler design,"Musings on AOT, JIT and Language Design",http://pointersgonewild.com/2015/11/28/musings-on-aot-jit-and-language-design/
1217,Lobsters,compilers,Compiler design,Interesting Response to Death of Dynamic Languages Article,http://pointersgonewild.com/2015/11/25/have-static-languages-won/
1218,Lobsters,compilers,Compiler design,Fparsec Tutorial,http://www.quanttec.com/fparsec/tutorial.html#
1219,Lobsters,compilers,Compiler design,Asynchronous Everything,http://joeduffyblog.com/2015/11/19/asynchronous-everything/
1220,Lobsters,compilers,Compiler design,"Scala's Creator Odersky: Proposal to Add Records to Dotty, the Next-Gen Scala Compiler",https://github.com/lampepfl/dotty/issues/964
1221,Lobsters,compilers,Compiler design,Write Your Compiler by Proving It Correct,http://liamoc.net/posts/2015-08-23-verified-compiler.html
1222,Lobsters,compilers,Compiler design,Ragel State Machine Compiler,https://www.colm.net/open-source/ragel/
1223,Lobsters,compilers,Compiler design,The design of the Strict Haskell pragma,http://blog.johantibell.com/2015/11/the-design-of-strict-haskell-pragma.html
1224,Lobsters,compilers,Compiler design,LLVM to get Fortran compiler that targets parallel GPUs in clusters,http://arstechnica.com/information-technology/2015/11/llvm-to-get-fortran-compiler-that-targets-parallel-gpus-in-clusters/
1225,Lobsters,compilers,Compiler design,Introduction to Intel Memory Protection Extensions (2013),https://software.intel.com/en-us/articles/introduction-to-intel-memory-protection-extensions
1226,Lobsters,compilers,Compiler design,The Architecture of LLVM,http://aosabook.org/en/llvm.html
1227,Lobsters,compilers,Compiler design,How Ruby Interprets and Runs Your Programs,http://blog.honeybadger.io/how-ruby-interprets-and-runs-your-programs/
1228,Lobsters,compilers,Compiler design,Compiling large real-world codebases with Clang on Windows,https://docs.google.com/presentation/d/1oxNHaVjA9Gn_rTzX6HIpJHP7nXRua_0URXxxJ3oYRq0/
1229,Lobsters,compilers,Compiler design,"two paths, one peak: a view from below on high-performance language implementations",https://wingolog.org/archives/2015/11/03/two-paths-one-peak-a-view-from-below-on-high-performance-language-implementations
1230,Lobsters,compilers,Compiler design,PyPy 4.0.0 Released - A Jit with SIMD Vectorization and More,http://morepypy.blogspot.com/2015/10/pypy-400-released-jit-with-simd.html
1231,Lobsters,compilers,Compiler design,LL and LR in Context: Why Parsing Tools Are Hard (2013),http://blog.reverberate.org/2013/09/ll-and-lr-in-context-why-parsing-tools.html
1232,Lobsters,compilers,Compiler design,[llvm-dev] RFC: Improving license & patent issues in the LLVM community,http://lists.llvm.org/pipermail/llvm-dev/2015-October/091536.html
1233,Lobsters,compilers,Compiler design,Dotty Compiler for Scala Bootstraps,https://github.com/lampepfl/dotty/blob/master/docs/2015-10-23-dotty-compiler-bootstraps.md
1234,Lobsters,compilers,Compiler design,Let's be mainstream! User focused design in Elm,http://www.youtube.com/watch?v=oYk8CKH7OhE
1235,Lobsters,compilers,Compiler design,Elixirscript: Elixir to JS,https://github.com/bryanjos/elixirscript
1236,Lobsters,compilers,Compiler design,LLPE: LLVM partial evaluator,http://www.llpe.org/
1237,Lobsters,compilers,Compiler design,cmmtest: Hunting Concurrency Compiler Bugs,http://www.di.ens.fr/~zappa/projects/cmmtest/
1238,Lobsters,compilers,Compiler design,Even More BF Optimisations,http://www.wilfred.me.uk/blog/2015/10/18/even-more-bf-optimisations/
1239,Lobsters,compilers,Compiler design,Boosting Developer Productivity with Clang,http://events.linuxfoundation.org/sites/events/files/slides/linuxcon-europe-2015.pdf
1240,Lobsters,compilers,Compiler design,BNF and EBNF: What are they and how do they work?,http://www.garshol.priv.no/download/text/bnf.html
1241,Lobsters,compilers,Compiler design,NodeJS : A quick optimization advice,https://medium.com/@c2c/nodejs-a-quick-optimization-advice-7353b820c92e
1242,Lobsters,compilers,Compiler design,"GADTs Meet Their Match: Pattern-Matching Warnings That Account for GADTs, Guards, and Laziness",http://research.microsoft.com/en-us/um/people/simonpj/papers/pattern-matching/gadtpm-acm.pdf
1243,Lobsters,compilers,Compiler design,Julia 0.4 Release Announcement,http://julialang.org/blog/2015/10/julia-0.4-release/
1244,Lobsters,compilers,Compiler design,Polymorphism for dummies,http://www.haskellforall.com/2015/10/polymorphism-for-dummies.html
1245,Lobsters,compilers,Compiler design,Jitterdämmerung,http://blog.metaobject.com/2015/10/jitterdammerung.html
1246,Lobsters,compilers,Compiler design,We're Doing It All Wrong (2013),http://www.youtube.com/watch?v=TS1lpKBMkgg
1247,Lobsters,compilers,Compiler design,PICO-8 Fantasy Console,http://www.lexaloffle.com/pico-8.php
1248,Lobsters,compilers,Compiler design,The Lemon Parser Generator,https://www.sqlite.org/src/doc/trunk/doc/lemon.html
1249,Lobsters,compilers,Compiler design,Surprises in GopherJS Performance,http://www.gopherjs.org/blog/2015/09/28/surprises-in-gopherjs-performance/
1250,Lobsters,compilers,Compiler design,Basic Block Versioning - My Best Result Yet,http://pointersgonewild.com/2015/09/24/basic-block-versioning-my-best-result-yet/
