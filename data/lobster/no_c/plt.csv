ID,Source,Tag_Code,Tag_Name,Title,Url
1,Lobsters,plt,Programming Language Theory,"What's the Deal with Message Passing, Anyway",https://buttondown.email/hillelwayne/archive/whats-the-deal-with-message-passing-anyway/
2,Lobsters,plt,Programming Language Theory,The Cartesian Product Algorithm (Type Inference) (1995),http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.30.8177&rep=rep1&type=pdf
3,Lobsters,plt,Programming Language Theory,I want off Mr. Golang's Wild Ride,https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride
4,Lobsters,plt,Programming Language Theory,Existential types in Rust,https://varkor.github.io/blog/2018/07/03/existential-types-in-rust.html
5,Lobsters,plt,Programming Language Theory,Idris 2 version 0.2.1 Released,https://www.idris-lang.org/idris-2-version-021-released.html
6,Lobsters,plt,Programming Language Theory,"A Review of Paul Graham's Bel, Chris Granger's Eve, and a Silly VR Rant",https://gist.github.com/wtaysom/7e5fda6d65807073c3fa6b92b1e25a32
7,Lobsters,plt,Programming Language Theory,Yatta Language - ML like language on the GraalVM,https://yona-lang.org/
8,Lobsters,plt,Programming Language Theory,"Types as axioms, or: playing god with static types (2020)",https://lexi-lambda.github.io/blog/2020/08/13/types-as-axioms-or-playing-god-with-static-types/
9,Lobsters,plt,Programming Language Theory,What to Define When You’re Defining Gradual Type Systems,http://www.weaselhat.com/2020/08/13/what-to-define-when-youre-defining-gradual-type-systems/
10,Lobsters,plt,Programming Language Theory,Formulog: ML + Datalog + SMT,http://www.weaselhat.com/2020/08/07/formulog-ml-datalog-smt/
11,Lobsters,plt,Programming Language Theory,Generics for Go,https://lwn.net/Articles/824716/
12,Lobsters,plt,Programming Language Theory,Typing is Hard,https://typing-is-hard.ch/
13,Lobsters,plt,Programming Language Theory,Broccoli: Syncing faster by syncing less,https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less
14,Lobsters,plt,Programming Language Theory,Imperative functional programming (1992),https://www.microsoft.com/en-us/research/wp-content/uploads/1993/01/imperative.pdf
15,Lobsters,plt,Programming Language Theory,Factor programming language,https://factorcode.org/
16,Lobsters,plt,Programming Language Theory,Swift type checking is undecidable,https://forums.swift.org/t/swift-type-checking-is-undecidable/39024
17,Lobsters,plt,Programming Language Theory,"Name one OO class/interface you like, and one you dislike?",/s/4j1uqo/name_one_oo_class_interface_you_like_one
18,Lobsters,plt,Programming Language Theory,Improving Declarative APIs for Graphics with Types,https://irreactive.com/declarative-apis
19,Lobsters,plt,Programming Language Theory,Getting my head around the choice between sleeping and 'tickers',https://utcc.utoronto.ca/~cks/space/blog/programming/TickersVersusSleeping
20,Lobsters,plt,Programming Language Theory,SETL - The SET Programming Language (2010),http://www.hakank.org/arrays_in_flux/2010/04/setl_the_set_programming_language.html
21,Lobsters,plt,Programming Language Theory,Zero Cost References with Regions in Vale,https://vale.dev/blog/zero-cost-refs-regions
22,Lobsters,plt,Programming Language Theory,Edwin Brady Tells Us What's New in Idris 2,https://www.youtube.com/watch?v=nbClauMCeds
23,Lobsters,plt,Programming Language Theory,Mecrisp Forth on STM32 Microcontroller (blue pill) (2017),https://www.youtube.com/watch?v=dvTI3KmcZ7I
24,Lobsters,plt,Programming Language Theory,Relaxing the Data Initialization Policy of SPARK,https://blog.adacore.com/relaxing-the-data-initialization-policy-of-spark
25,Lobsters,plt,Programming Language Theory,Demystifying MLsub: the Simple Essence of Algebraic Subtyping,https://lptk.github.io/programming/2020/03/26/demystifying-mlsub.html
26,Lobsters,plt,Programming Language Theory,"What's the Deal with Message Passing, Anyway",https://buttondown.email/hillelwayne/archive/whats-the-deal-with-message-passing-anyway/
27,Lobsters,plt,Programming Language Theory,The Cartesian Product Algorithm (Type Inference) (1995),http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.30.8177&rep=rep1&type=pdf
28,Lobsters,plt,Programming Language Theory,I want off Mr. Golang's Wild Ride,https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride
29,Lobsters,plt,Programming Language Theory,Existential types in Rust,https://varkor.github.io/blog/2018/07/03/existential-types-in-rust.html
30,Lobsters,plt,Programming Language Theory,Idris 2 version 0.2.1 Released,https://www.idris-lang.org/idris-2-version-021-released.html
31,Lobsters,plt,Programming Language Theory,"A Review of Paul Graham's Bel, Chris Granger's Eve, and a Silly VR Rant",https://gist.github.com/wtaysom/7e5fda6d65807073c3fa6b92b1e25a32
32,Lobsters,plt,Programming Language Theory,Yatta Language - ML like language on the GraalVM,https://yona-lang.org/
33,Lobsters,plt,Programming Language Theory,"Types as axioms, or: playing god with static types (2020)",https://lexi-lambda.github.io/blog/2020/08/13/types-as-axioms-or-playing-god-with-static-types/
34,Lobsters,plt,Programming Language Theory,What to Define When You’re Defining Gradual Type Systems,http://www.weaselhat.com/2020/08/13/what-to-define-when-youre-defining-gradual-type-systems/
35,Lobsters,plt,Programming Language Theory,Formulog: ML + Datalog + SMT,http://www.weaselhat.com/2020/08/07/formulog-ml-datalog-smt/
36,Lobsters,plt,Programming Language Theory,Generics for Go,https://lwn.net/Articles/824716/
37,Lobsters,plt,Programming Language Theory,Typing is Hard,https://typing-is-hard.ch/
38,Lobsters,plt,Programming Language Theory,Broccoli: Syncing faster by syncing less,https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less
39,Lobsters,plt,Programming Language Theory,Imperative functional programming (1992),https://www.microsoft.com/en-us/research/wp-content/uploads/1993/01/imperative.pdf
40,Lobsters,plt,Programming Language Theory,Factor programming language,https://factorcode.org/
41,Lobsters,plt,Programming Language Theory,Swift type checking is undecidable,https://forums.swift.org/t/swift-type-checking-is-undecidable/39024
42,Lobsters,plt,Programming Language Theory,"Name one OO class/interface you like, and one you dislike?",/s/4j1uqo/name_one_oo_class_interface_you_like_one
43,Lobsters,plt,Programming Language Theory,Improving Declarative APIs for Graphics with Types,https://irreactive.com/declarative-apis
44,Lobsters,plt,Programming Language Theory,Getting my head around the choice between sleeping and 'tickers',https://utcc.utoronto.ca/~cks/space/blog/programming/TickersVersusSleeping
45,Lobsters,plt,Programming Language Theory,SETL - The SET Programming Language (2010),http://www.hakank.org/arrays_in_flux/2010/04/setl_the_set_programming_language.html
46,Lobsters,plt,Programming Language Theory,Zero Cost References with Regions in Vale,https://vale.dev/blog/zero-cost-refs-regions
47,Lobsters,plt,Programming Language Theory,Edwin Brady Tells Us What's New in Idris 2,https://www.youtube.com/watch?v=nbClauMCeds
48,Lobsters,plt,Programming Language Theory,Mecrisp Forth on STM32 Microcontroller (blue pill) (2017),https://www.youtube.com/watch?v=dvTI3KmcZ7I
49,Lobsters,plt,Programming Language Theory,Relaxing the Data Initialization Policy of SPARK,https://blog.adacore.com/relaxing-the-data-initialization-policy-of-spark
50,Lobsters,plt,Programming Language Theory,Demystifying MLsub: the Simple Essence of Algebraic Subtyping,https://lptk.github.io/programming/2020/03/26/demystifying-mlsub.html
51,Lobsters,plt,Programming Language Theory,Should I use Chapel or Julia for my next project? (2017),https://www.dursi.ca/post/julia-vs-chapel.html
52,Lobsters,plt,Programming Language Theory,PLTalk: Practical Formal Methods with Hillel Wayne,https://tldrsec.com/blog/pltalk-practical-formal-methods-hillel-wayne/
53,Lobsters,plt,Programming Language Theory,The Implementation of Functional Programming Languages (1987),https://www.microsoft.com/en-us/research/wp-content/uploads/1987/01/slpj-book-1987-small.pdf
54,Lobsters,plt,Programming Language Theory,Exploring Algol 68 in the 21st century,https://opensource.com/article/20/6/algol68
55,Lobsters,plt,Programming Language Theory,An APL Machine (1970),https://www.slac.stanford.edu/pubs/slacreports/reports07/slac-r-114.pdf
56,Lobsters,plt,Programming Language Theory,Three Architectures for a Responsive IDE,https://rust-analyzer.github.io/blog/2020/07/20/three-architectures-for-responsive-ide.html
57,Lobsters,plt,Programming Language Theory,"Adding ""@ts-expect-error"" comments to TypeScript",http://blog.joshuakgoldberg.com/ts-expect-error/
58,Lobsters,plt,Programming Language Theory,The Next Steps for Single Ownership and RAII,https://vale.dev/blog/next-steps-raii
59,Lobsters,plt,Programming Language Theory,Tutorial: Building Your Language with Graal & Truffle,https://norswap.com/truffle-tutorial/
60,Lobsters,plt,Programming Language Theory,Turning the IDE Inside Out with Datalog,https://petevilter.me/post/datalog-typechecking/
61,Lobsters,plt,Programming Language Theory,Why even unused data needs to be valid,https://www.ralfj.de/blog/2020/07/15/unused-data.html
62,Lobsters,plt,Programming Language Theory,"A conversation with Luke Hoban, co-founder of TypeScript, CTO of Pulumi",https://about.sourcegraph.com/podcast/luke-hoban
63,Lobsters,plt,Programming Language Theory,Programming Languages as Objects in Nature,https://parentheticallyspeaking.org/articles/pls-nature/
64,Lobsters,plt,Programming Language Theory,luna programming language,https://github.com/tj/luna
65,Lobsters,plt,Programming Language Theory,Thinking about a new Type System for Perl/Cor,https://github.com/Ovid/Cor/wiki/Type-System
66,Lobsters,plt,Programming Language Theory,Hindley-Milner Type Inference,http://steshaw.org/hm/
67,Lobsters,plt,Programming Language Theory,Statically Sized Higher-kinded Polymorphism,http://blog.ielliott.io/sized-hkts/
68,Lobsters,plt,Programming Language Theory,GDScript progress report: Type checking is back,https://godotengine.org/article/gdscript-progress-report-type-checking-back
69,Lobsters,plt,Programming Language Theory,Research in Programming Languages | Tagide (2012),http://tagide.com/blog/academia/research-in-programming-languages/
70,Lobsters,plt,Programming Language Theory,The Pyret Code; or A Rationale for the Pyret Programming Language,http://pyret.org/pyret-code/index.html
71,Lobsters,plt,Programming Language Theory,The Fatal Flaw of Ownership Semantics,https://www.gingerbill.org/article/2020/06/21/the-ownership-semantics-flaw/
72,Lobsters,plt,Programming Language Theory,Stack Computers: The New Wave,https://users.ece.cmu.edu/~koopman/stack_computers/index.html
73,Lobsters,plt,Programming Language Theory,Writing a VM for a Small Stack-Base Language in Pointless,https://ptls.dev/tutorials/factorsVM.html
74,Lobsters,plt,Programming Language Theory,"v0.10 of Gleam, a statically typed language for the Erlang VM, is out",https://lpil.uk/blog/gleam-v0.10-released/
75,Lobsters,plt,Programming Language Theory,Kindness for Mean Girls,http://aymannadeem.github.io/haskell/2020/05/15/Kindness-for-Mean-Girls.html
76,Lobsters,plt,Programming Language Theory,The Blech language,https://www.blech-lang.org/
77,Lobsters,plt,Programming Language Theory,An Introduction to Efficient and Safe Implementations of Dynamic Languages,https://stefan-marr.de/2020/06/efficient-and-safe-implementations-of-dynamic-languages/
78,Lobsters,plt,Programming Language Theory,Verified Programming with Project Everest,https://www.youtube.com/watch?v=5B7iI2onu8s
79,Lobsters,plt,Programming Language Theory,What is the core of the Python programming language?,https://snarky.ca/what-is-the-core-of-the-python-programming-language/
80,Lobsters,plt,Programming Language Theory,Translucent Procedures: Abstraction without Opacity (1993),https://apps.dtic.mil/sti/pdfs/ADA276877.pdf
81,Lobsters,plt,Programming Language Theory,Linear types are merged in GHC,https://www.tweag.io/blog/2020-06-19-linear-types-merged
82,Lobsters,plt,Programming Language Theory,Proceedings of the 41st ACM SIGPLAN Conf on Programming Language Design and Implementation,http://sigplan.org/OpenTOC/pldi20.html
83,Lobsters,plt,Programming Language Theory,Other Structures In Other Words,https://shonfeder.github.io/logs/recurse-center/day-25.html
84,Lobsters,plt,Programming Language Theory,Thriving in a crowded and changing world: C++ 2006–2020,https://dl.acm.org/doi/10.1145/3386320
85,Lobsters,plt,Programming Language Theory,"History of Programming Languages, Vol 4",https://dl.acm.org/toc/pacmpl/2020/4/HOPL
86,Lobsters,plt,Programming Language Theory,"Static typing, pattern matching, and Inko's self-hosting compiler",https://inko-lang.org/news/static-typing-pattern-matching-and-inkos-self-hosting-compiler/
87,Lobsters,plt,Programming Language Theory,OpenXION - A modern xTalk language,https://github.com/kreativekorp/openxion
88,Lobsters,plt,Programming Language Theory,Penrose: from mathematical notation to beautiful diagrams,http://penrose.ink/siggraph20
89,Lobsters,plt,Programming Language Theory,PLDI 2020,https://pldi20.sigplan.org
90,Lobsters,plt,Programming Language Theory,GDScript progress report: Writing a new parser,https://godotengine.org/article/gdscript-progress-report-writing-new-parser
91,Lobsters,plt,Programming Language Theory,"v0.9 of Gleam, a statically typed language for the Erlang VM, is out",https://lpil.uk/blog/gleam-v0.9-released/
92,Lobsters,plt,Programming Language Theory,Introduction to Program Synthesis,http://people.csail.mit.edu/asolar/SynthesisCourse/index.htm
93,Lobsters,plt,Programming Language Theory,Featherweight Go,https://arxiv.org/abs/2005.11710
94,Lobsters,plt,Programming Language Theory,Practical type inference for arbitrary-rank types (2007),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/putting.pdf
95,Lobsters,plt,Programming Language Theory,The Development of the Simula Languages,https://hannemyr.com/cache/knojd_acm78.pdf
96,Lobsters,plt,Programming Language Theory,Ideology (2015),https://www.destroyallsoftware.com/talks/ideology
97,Lobsters,plt,Programming Language Theory,Forth Day - Fireside Chat (Chuck) (2019),https://www.youtube.com/watch?v=3ML-pJFa8lY
98,Lobsters,plt,Programming Language Theory,Designing a functional programming language: Yatta,https://functional.blog/2020/05/25/designing-a-functional-programming-language-yatta/
99,Lobsters,plt,Programming Language Theory,Why no one uses functional languages (1998),https://dl.acm.org/doi/pdf/10.1145/286385.286387
100,Lobsters,plt,Programming Language Theory,Some Were Meant for C,https://www.cs.kent.ac.uk/people/staff/srk21/research/papers/kell17some-preprint.pdf
101,Lobsters,plt,Programming Language Theory,Type inference in less than 100 lines of Rust,https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=174ca95a8b938168764846e97d5e9a2c
102,Lobsters,plt,Programming Language Theory,Type inference for monotonicity [2018],http://users.sussex.ac.uk/~mfb21/srepls9/video/michaelA-presentation.mp4
103,Lobsters,plt,Programming Language Theory,Controlling mutation with types,https://blog.jcoglan.com/2020/05/12/controlling-mutation-with-types/
104,Lobsters,plt,Programming Language Theory,Quasiquote - Literal Magic,https://weinholt.se/articles/quasiquote-literal-magic/
105,Lobsters,plt,Programming Language Theory,macropy: syntactic macros for Python,https://macropy3.readthedocs.io/en/latest/
106,Lobsters,plt,Programming Language Theory,The Naked Truth About Writing a Programming Language (2014),https://digitalmars.com/articles/b90.html
107,Lobsters,plt,Programming Language Theory,ALGOL 60 at 60: The greatest computer language you've never used and grandaddy of the programming family tree,https://www.theregister.co.uk/2020/05/15/algol_60_at_60
108,Lobsters,plt,Programming Language Theory,The History of Standard ML,https://smlfamily.github.io/history/SML-history.pdf
109,Lobsters,plt,Programming Language Theory,ZetZ - a symbolic verifier and transpiler to bare metal C,https://github.com/zetzit/zz
110,Lobsters,plt,Programming Language Theory,Why I use typed functional programming,http://luizsol.com/why-functional-programming/
111,Lobsters,plt,Programming Language Theory,Kotlingrad: Shape-Safe Differentiable Programming with Algebraic Data Types,https://github.com/breandan/kotlingrad
112,Lobsters,plt,Programming Language Theory,"in:verse is a programming language and environment for exploring the conflux of poetry, visuals, mat",https://inverse.website/
113,Lobsters,plt,Programming Language Theory,micro-mitten: simple Rust-like lang with compile-time memory management,https://github.com/doctorn/micro-mitten
114,Lobsters,plt,Programming Language Theory,"v0.8 of Gleam, the statically typed language for the Erlang VM, is out",https://lpil.uk/blog/gleam-v0.8-released/
115,Lobsters,plt,Programming Language Theory,Programming in Three Dimensions,https://www.semanticscholar.org/paper/Programming-in-Three-Dimensions-Najork/3f9329d0f70d02ea17760378c93b17d7903384c5
116,Lobsters,plt,Programming Language Theory,Should x < $foo < y read from $foo once or twice? Perl debates,https://github.com/Perl/perl5/issues/17692
117,Lobsters,plt,Programming Language Theory,LPS: Logic Production Systems,http://lps.doc.ic.ac.uk/
118,Lobsters,plt,Programming Language Theory,Hot Reloadable structs: Memory Mapping,https://mun-lang.org/blog/2020/05/01/memory-mapping/
119,Lobsters,plt,Programming Language Theory,Here We Go Again: Why Is It Difficult for Developers to Learn Another Programming Language?,http://nischalshrestha.me/docs/cross_language_interference.pdf
120,Lobsters,plt,Programming Language Theory,Under the Rug,https://asthasr.github.io/posts/under-the-rug/
121,Lobsters,plt,Programming Language Theory,Full Proof that C++ Grammar is Undecidable,https://medium.com/@mujjingun_23509/full-proof-that-c-grammar-is-undecidable-34e22dd8b664
122,Lobsters,plt,Programming Language Theory,Evaluating programming systems design,http://www.subtext-lang.org/PPIG19.pdf
123,Lobsters,plt,Programming Language Theory,Hindley–Milner type system,https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system
124,Lobsters,plt,Programming Language Theory,Eleven Short Essays on Programming Languages,https://wordsandbuttons.online/SYTYKC.pdf
125,Lobsters,plt,Programming Language Theory,The Poet of Logic Programming (interview with Robert Kowalski),https://thesearch.space/episodes/1-the-poet-of-logic-programming
126,Lobsters,plt,Programming Language Theory,First-Class Dynamic Types,https://michael.homer.nz/Publications/DLS2019/pattern-types.pdf
127,Lobsters,plt,Programming Language Theory,Default function arguments are the devil,https://quuxplusone.github.io/blog/2020/04/18/default-function-arguments-are-the-devil/
128,Lobsters,plt,Programming Language Theory,What language to learn during quarantine?,/s/z6n6pd/what_language_learn_during_quarantine
129,Lobsters,plt,Programming Language Theory,Polymorphic Perplexion,https://ucsd-progsys.github.io/liquidhaskell-blog/2020/04/12/polymorphic-perplexion.lhs/
130,Lobsters,plt,Programming Language Theory,REBOL in One Line,http://www.rebol.com/oneliners.html
131,Lobsters,plt,Programming Language Theory,"Language designers, use `ident: Type`, not `Type ident`",https://soc.me/languages/type-annotations
132,Lobsters,plt,Programming Language Theory,Row Polymorphism without the Jargon,https://jadon.io/blog/row-polymorphism
133,Lobsters,plt,Programming Language Theory,"Vigil, the eternal morally vigilant programming language (2013)",https://github.com/munificent/vigil
134,Lobsters,plt,Programming Language Theory,"Top Down Operator Precedence (2007; aka ""Pratt Parsing"")",https://crockford.com/javascript/tdop/tdop.html
135,Lobsters,plt,Programming Language Theory,"Top Down Operator Precedence (1973; aka ""Pratt Parsing"")",https://web.archive.org/web/20151223215421/http://hall.org.ua/halls/wizzard/pdf/Vaughan.Pratt.TDOP.pdf
136,Lobsters,plt,Programming Language Theory,JuliaLang: The Ingredients for a Composable Programming Language,https://white.ucc.asn.au/2020/02/09/whycompositionaljulia.html
137,Lobsters,plt,Programming Language Theory,What color is your function?,https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/
138,Lobsters,plt,Programming Language Theory,The Quorum Programming Language,https://quorumlanguage.com/
139,Lobsters,plt,Programming Language Theory,Functional Programming for the Web: Monads and Basic DOM Manipulation in PureScript,https://medium.com/@KevinBGreene/functional-programming-for-the-web-monads-and-basic-dom-manipulation-in-purescript-fa662fe57a4c
140,Lobsters,plt,Programming Language Theory,How Unison reduces ecosystem churn,https://www.unisonweb.org/2020/04/10/reducing-churn/
141,Lobsters,plt,Programming Language Theory,CMU 15-819 - Homotopy Type Theory,http://www.cs.cmu.edu/~rwh/courses/hott/
142,Lobsters,plt,Programming Language Theory,smlpkg - Generic package manager for Standard ML libraries and programs,https://github.com/diku-dk/smlpkg
143,Lobsters,plt,Programming Language Theory,From conventional to institution-independent logic programming,https://academic.oup.com/logcom/logcom/article-abstract/27/6/1679/2917800
144,Lobsters,plt,Programming Language Theory,Pointless: a scripting language for learning and fun,https://ptls.dev/
145,Lobsters,plt,Programming Language Theory,Writing a PEG parser for fun and profit,https://www.youtube.com/watch?v=QppWTvh7_sI
146,Lobsters,plt,Programming Language Theory,Synthesizing optimal 8051 code,https://lab.whitequark.org/notes/2020-04-06/synthesizing-optimal-8051-code/
147,Lobsters,plt,Programming Language Theory,Swift Is Not Functional (2014),https://robnapier.net/swift-is-not-functional
148,Lobsters,plt,Programming Language Theory,"""Crafting Interpreters"" book is complete",http://craftinginterpreters.com/
149,Lobsters,plt,Programming Language Theory,"CSS Utility Classes and ""Separation of Concerns""",https://adamwathan.me/css-utility-classes-and-separation-of-concerns/
150,Lobsters,plt,Programming Language Theory,Your configs suck? Try a real programming language,https://beepb00p.xyz/configs-suck.html
151,Lobsters,plt,Programming Language Theory,"Language designers, stop using <> for generics",https://soc.me/languages/stop-using-for-generics
152,Lobsters,plt,Programming Language Theory,Our journey to type checking 4 million lines of Python,https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python
153,Lobsters,plt,Programming Language Theory,Zero-overhead deterministic failure - A unified mechanism for C and C++ (2018),http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2289.pdf
154,Lobsters,plt,Programming Language Theory,Restarts in Common Lisp,https://sulami.github.io/posts/common-lisp-restarts/
155,Lobsters,plt,Programming Language Theory,Making sense of the Haskell type system,https://www.youtube.com/watch?v=tJNU1H9XewM
156,Lobsters,plt,Programming Language Theory,The Strange Case of Dr. Function and Mr. Type,https://humanreadablemag.com/issues/2/articles/dr-function-and-mr-type
157,Lobsters,plt,Programming Language Theory,Retina: a regex-based recreational programming language,https://github.com/m-ender/retina
158,Lobsters,plt,Programming Language Theory,Real-world experience with programming languages designed for GPU programming?,/s/ffnquo/real_world_experience_with_programming
159,Lobsters,plt,Programming Language Theory,"Chapel Comes of Age: A Language for Productivity, Parallelism, and Performance",https://chapel-lang.org/presentations/ChapelForHPCKM-presented.pdf
160,Lobsters,plt,Programming Language Theory,Jane and the Compiler,https://www.janestreet.com/tech-talks/jane-and-compiler/
161,Lobsters,plt,Programming Language Theory,Natural Language Principles in Perl,http://www.wall.org/~larry/natural.html
162,Lobsters,plt,Programming Language Theory,10 Most(ly dead) Influential Programming Languages,https://www.hillelwayne.com/post/influential-dead-languages/
163,Lobsters,plt,Programming Language Theory,A Crash Course on ML Modules,https://jozefg.bitbucket.io/posts/2015-01-08-modules.html
164,Lobsters,plt,Programming Language Theory,Avoiding the 'dangling else' language problem with mandatory block markers,https://utcc.utoronto.ca/~cks/space/blog/programming/DanglingElseAndBlocks
165,Lobsters,plt,Programming Language Theory,An idea for generics at the OS level,https://gist.github.com/bdezonia/6eec9dfa4390562cc7176b4d578b8c7a
166,Lobsters,plt,Programming Language Theory,Raylib bindings for my Go-flavored Pascal compiler: A chaos of calling conventions,https://www.reddit.com/r/ProgrammingLanguages/comments/fm09zx/raylib_bindings_for_my_goflavored_pascal_compiler/
167,Lobsters,plt,Programming Language Theory,"Notes for 'Thinking with Types: Type-level Programming in Haskell', Chapters 1–5",https://abhinavsarkar.net/posts/twt-notes-1/
168,Lobsters,plt,Programming Language Theory,Idyll: A toolkit for creating data-driven stories and explorable explanations,https://idyll-lang.org/
169,Lobsters,plt,Programming Language Theory,Futhark 0.15.1 released - now with size types,https://futhark-lang.org/blog/2020-03-15-futhark-0.15.1-released.html
170,Lobsters,plt,Programming Language Theory,Low-Level Liquid Types,http://goto.ucsd.edu/~rjhala/papers/low_level_liquid_types.pdf
171,Lobsters,plt,Programming Language Theory,Dependent Types in Typescript,https://www.javiercasas.com/articles/typescript-dependent-types/
172,Lobsters,plt,Programming Language Theory,Async Interview #7: Withoutboats,http://smallcultfollowing.com/babysteps/blog/2020/03/10/async-interview-7-withoutboats/
173,Lobsters,plt,Programming Language Theory,Smalltalk development environment (2013),https://vimeo.com/27850933
174,Lobsters,plt,Programming Language Theory,This is How Science Happens,https://www.hillelwayne.com/post/this-is-how-science-happens/
175,Lobsters,plt,Programming Language Theory,"Macros as Multi-Stage Computations: Type-Safe, Generative, Binding Macros in MacroML (2001)",https://legacy.cs.indiana.edu/~sabry/papers/macroml.pdf
176,Lobsters,plt,Programming Language Theory,A new Standard ML dialect written in Java,https://github.com/julianhyde/morel
177,Lobsters,plt,Programming Language Theory,Recent and future pattern matching improvements in Rust,https://blog.rust-lang.org/inside-rust/2020/03/04/recent-future-pattern-matching-improvements.html
178,Lobsters,plt,Programming Language Theory,"The History of Standard ML: Ideas, Principles, Culture",https://www.youtube.com/watch?v=NVEgyJCTee4
179,Lobsters,plt,Programming Language Theory,Two Lovely Talks from POPL 2020 about Real-World Bugs,https://eschew.wordpress.com/2020/03/05/two-lovely-talks-from-popl-2020-about-real-world-bugs/
180,Lobsters,plt,Programming Language Theory,Some History of Functional Programming Languages,http://www.lambdadays.org/static/upload/media/1487239321204160davidturner.pdf
181,Lobsters,plt,Programming Language Theory,"v0.7 of Gleam, the statically typed language for the Erlang VM, is out",https://lpil.uk/blog/gleam-v0.7-released/
182,Lobsters,plt,Programming Language Theory,Frink -- A Language for Understanding the Physical World,https://frinklang.org/LL4.html
183,Lobsters,plt,Programming Language Theory,Fuchsia Programming Language Policy,https://fuchsia.googlesource.com/fuchsia/+/refs/heads/master/docs/project/policy/programming_languages.md
184,Lobsters,plt,Programming Language Theory,Next Generation Shell - reject() and without() methods dilemma,/s/xtu29x/next_generation_shell_reject_without
185,Lobsters,plt,Programming Language Theory,Math is your insurance policy,https://bartoszmilewski.com/2020/02/24/math-is-your-insurance-policy/
186,Lobsters,plt,Programming Language Theory,The Newton Application Architecture,http://waltersmith.us/newton/COMPCON-Arch.pdf
187,Lobsters,plt,Programming Language Theory,SwiftUI defaults considered harmful,https://tonsky.me/blog/swiftui/
188,Lobsters,plt,Programming Language Theory,Agda vs. Coq vs. Idris,https://whatisrt.github.io/dependent-types/2020/02/18/agda-vs-coq-vs-idris.html
189,Lobsters,plt,Programming Language Theory,Programmer's critique of missing structure of operating systems,http://kitakitsune.org/en/Programmer_s_critique_of_missing_structure_of_oper.html
190,Lobsters,plt,Programming Language Theory,C++20 is Done,https://www.reddit.com/r/cpp/comments/f47x4o/202002_prague_iso_c_committee_trip_report_c20_is/
191,Lobsters,plt,Programming Language Theory,Time safety is more important than memory safety,https://halestrom.net/darksleep/blog/036_timesafety/
192,Lobsters,plt,Programming Language Theory,How to start using Python Type Annotations with Mypy,https://www.stackbuilders.com/tutorials/python/using-types-in-python-with-mypy/
193,Lobsters,plt,Programming Language Theory,Introduction to Interscript (1985),http://bitsavers.informatik.uni-stuttgart.de/pdf/xerox/interscript/IntroductionToInterscript.pdf
194,Lobsters,plt,Programming Language Theory,All Programming Languages are Wrong,http://users.rcn.com/david-moon/Lunar/all_programming_languages_are_wrong.html
195,Lobsters,plt,Programming Language Theory,What would you pay for type checking?,https://blog.noredink.com/post/190753809533/what-would-you-pay-for-type-checking
196,Lobsters,plt,Programming Language Theory,The Encyclopedia of Computer Languages,http://web.archive.org/web/20111118234422/hopl.murdoch.edu.au/home.prx
197,Lobsters,plt,Programming Language Theory,Static v. dynamic languages (2014),https://danluu.com/empirical-pl/
198,Lobsters,plt,Programming Language Theory,Why Dhall advertises the absence of Turing-completeness,http://www.haskellforall.com/2020/01/why-dhall-advertises-absence-of-turing.html
199,Lobsters,plt,Programming Language Theory,druid: Failing to parse Elixir with Megaparsec,https://evuez.github.io/projects/druid-failing-to-parse-elixir-with-megaparsec.html
200,Lobsters,plt,Programming Language Theory,You Could Have Invented Monads! (And Maybe You Already Have.) (2006),http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html
201,Lobsters,plt,Programming Language Theory,The First Time SICP Blew My Mind,https://ahuth.github.io/articles/the-first-time-sicp-blew-my-mind.html
202,Lobsters,plt,Programming Language Theory,A Survey of Object-Oriented Forths (1996),https://www.bradrodriguez.com/papers/oofs.htm
203,Lobsters,plt,Programming Language Theory,ZZ is a modern formally provable dialect of C,https://github.com/aep/zz
204,Lobsters,plt,Programming Language Theory,Demystifying a TypeScript quirk,https://matthewmiller.dev/blog/demystifying-typescript-quirk/
205,Lobsters,plt,Programming Language Theory,Writing a DSL in Lua,https://leafo.net/guides/dsl-in-lua.html
206,Lobsters,plt,Programming Language Theory,Developing GHC for a Living. Interview with Vladislav Zavialov,https://serokell.io/blog/developing-ghc-for-a-living
207,Lobsters,plt,Programming Language Theory,Type Equality in LLVM,https://lowlevelbits.org/type-equality-in-llvm/
208,Lobsters,plt,Programming Language Theory,Dependent type systems as macros,https://dl.acm.org/doi/pdf/10.1145/3371071
209,Lobsters,plt,Programming Language Theory,Undergrad Compilers from the Hive Mind,https://eschew.wordpress.com/2020/01/26/undergrad-compilers-from-the-hive-mind/
210,Lobsters,plt,Programming Language Theory,Hacking on Clang is surprisingly easy,https://mort.coffee/home/clang-compiler-hacking/
211,Lobsters,plt,Programming Language Theory,On the performance and design of BioSequences compared to the Seq language,https://BioJulia.github.io/post/seq-lang/
212,Lobsters,plt,Programming Language Theory,Nemerle programming language official site,http://nemerle.org/About
213,Lobsters,plt,Programming Language Theory,"A Reply to ""Let's stop copying C""",https://www.gingerbill.org/article/2020/01/25/a-reply-to-lets-stop-copying-c/
214,Lobsters,plt,Programming Language Theory,Why the Sorbet typechecker is fast,https://blog.nelhage.com/post/why-sorbet-is-fast/
215,Lobsters,plt,Programming Language Theory,Monads are monoid objects (2017),http://www.newartisans.com/2017/05/monads-are-monoids/
216,Lobsters,plt,Programming Language Theory,Modular Information Hiding and Type-Safe Linking for C (2008),http://saurabh-srivastava.com/pubs/tse-cmod.pdf
217,Lobsters,plt,Programming Language Theory,Arend Theorem Prover Tutorial Part I,https://arend-lang.github.io/documentation/tutorial.html
218,Lobsters,plt,Programming Language Theory,Self: The Movie,https://www.youtube.com/watch?v=Ox5P7QyL774
219,Lobsters,plt,Programming Language Theory,On the perils of large-scale analysis of Github data,https://www.youtube.com/watch?v=ePCpq0AMyVk
220,Lobsters,plt,Programming Language Theory,Type the World,http://breckyunits.com/type-the-world.html
221,Lobsters,plt,Programming Language Theory,Algebraic data types aren't numbers on steroids,https://blog.ploeh.dk/2020/01/20/algebraic-data-types-arent-numbers-on-steroids/
222,Lobsters,plt,Programming Language Theory,"No, dynamic type systems are not inherently more open",http://lexi-lambda.github.io/blog/2020/01/19/no-dynamic-type-systems-are-not-inherently-more-open/
223,Lobsters,plt,Programming Language Theory,Units of Measure in Rust with Refinement Types,https://yoric.github.io/post/uom.rs/
224,Lobsters,plt,Programming Language Theory,A (brief) retrospective on transactional memory (2010),http://joeduffyblog.com/2010/01/03/a-brief-retrospective-on-transactional-memory/
225,Lobsters,plt,Programming Language Theory,Verona: Research programming language for concurrent ownership,https://github.com/microsoft/verona
226,Lobsters,plt,Programming Language Theory,"Unix, Plan 9, and Lurking Smalltalk",https://www.cs.kent.ac.uk/people/staff/srk21/research/papers/kell19unix-personal.pdf
227,Lobsters,plt,Programming Language Theory,data-types for representing stream-processing programs,https://jmtd.net/log/stream_datatype/
228,Lobsters,plt,Programming Language Theory,Language as an intellectual tool: From hieroglyphics to APL (1991),http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.86.6185&rep=rep1&type=pdf
229,Lobsters,plt,Programming Language Theory,Pair programming in Sentient,https://tuzz.tech/blog/pair-programming-in-sentient
230,Lobsters,plt,Programming Language Theory,Cons cells vs. Linked Lists,http://funcall.blogspot.com/2020/01/cons-cells-vs-linked-lists.html
231,Lobsters,plt,Programming Language Theory,Executable Grammars: Seeking the minimal extensible self-compiling compiler (2009),https://www.youtube.com/watch?v=RGizBNflVKw
232,Lobsters,plt,Programming Language Theory,Linearity and Erasure in Idris 2,https://www.type-driven.org.uk/edwinb/linearity-and-erasure-in-idris-2.html
233,Lobsters,plt,Programming Language Theory,What is an Object? (1989),https://www.bkent.net/Doc/whatis.htm
234,Lobsters,plt,Programming Language Theory,The Setup-Cleanup problem,https://blog.gnoack.org/post/setup-cleanup/
235,Lobsters,plt,Programming Language Theory,A Brief History of S (1994),http://www.math.uwaterloo.ca/~rwoldfor/software/R-code/historyOfS.pdf
236,Lobsters,plt,Programming Language Theory,Dhall - Year in review (2019-2020),http://www.haskellforall.com/2020/01/dhall-year-in-review-2019-2020.html
237,Lobsters,plt,Programming Language Theory,Finding unique items - hash vs sort?,https://douglasorr.github.io/2019-09-hash-vs-sort/article.html
238,Lobsters,plt,Programming Language Theory,Dreaming of a Data Checked Language,http://breckyunits.com/dreaming-of-a-data-checked-language.html
239,Lobsters,plt,Programming Language Theory,Atypical: A Differently-Optimized Type System,https://kronopath.net/blog/atypical-a-differently-optimized-type-system/
240,Lobsters,plt,Programming Language Theory,"Defunctionalization: Everybody Does It, Nobody Talks About It",https://blog.sigplan.org/2019/12/30/defunctionalization-everybody-does-it-nobody-talks-about-it/
241,Lobsters,plt,Programming Language Theory,Compile Time Typing Problem,http://wiki.c2.com/?CompileTimeTypingProblem
242,Lobsters,plt,Programming Language Theory,Glob Matching Can Be Simple And Fast Too,https://research.swtch.com/glob
243,Lobsters,plt,Programming Language Theory,The Type System of the Future,https://docs.google.com/document/d/1-aLUwnN0XzLbzICnFLWfCLuD4ULYXGcKAoyRAqTuAIY/preview#
244,Lobsters,plt,Programming Language Theory,Objective-Smalltalk,http://objective.st/
245,Lobsters,plt,Programming Language Theory,Design Flaws in Futhark,https://futhark-lang.org/blog/2019-12-18-design-flaws-in-futhark.html
246,Lobsters,plt,Programming Language Theory,Evolving Languages (5 Steps to Go),https://www.geeklan.co.uk/files/ossg-evolving-languages.pdf
247,Lobsters,plt,Programming Language Theory,Asynchronous PureScript,https://blog.drewolson.org/asynchronous-purescript
248,Lobsters,plt,Programming Language Theory,Zone of Ceremony,https://blog.ploeh.dk/2019/12/16/zone-of-ceremony/
249,Lobsters,plt,Programming Language Theory,"v0.5 of Gleam, a statically typed language for the Erlang VM, is out",https://lpil.uk/blog/gleam-v0.5-released
250,Lobsters,plt,Programming Language Theory,Beyond Liskov: Type Safe Equality in Scala,http://www.lihaoyi.com/post/BeyondLiskovTypeSafeEqualityinScala.html
251,Lobsters,plt,Programming Language Theory,Pattern Matching Custom Data Types in Typescript,https://blog.parametricstudios.com/posts/pattern-matching-custom-data-types/
252,Lobsters,plt,Programming Language Theory,Modeling State with TypeScript,https://www.azavea.com/blog/2019/12/12/modeling-state-with-typescript/
253,Lobsters,plt,Programming Language Theory,"CI/CD pipelines: Monad, Arrow or Dart?",https://roscidus.com/blog/blog/2019/11/14/cicd-pipelines/
254,Lobsters,plt,Programming Language Theory,Type Families in Typescript,https://www.javiercasas.com/articles/typescript-type-families/
255,Lobsters,plt,Programming Language Theory,State of Valhalla - Section 2: Language Model,http://cr.openjdk.java.net/~briangoetz/valhalla/sov/02-object-model.html
256,Lobsters,plt,Programming Language Theory,AnyDSL - A Partial Evaluation Framework for Programming High-Performance Libraries,https://anydsl.github.io/
257,Lobsters,plt,Programming Language Theory,`MOST-POSITIVE-BIGNUM`: The Biggest Bignum in TI Lisp Machines (2008),https://www.jwz.org/blog/2008/03/most-positive-bignum/
258,Lobsters,plt,Programming Language Theory,Strongly Typed Events,https://www.tbray.org/ongoing/When/201x/2019/12/02/Strongly-Typed-Events
259,Lobsters,plt,Programming Language Theory,Exploring borrowed annotations in C#,https://blog.paranoidcoding.com/2019/12/02/borrowing.html
260,Lobsters,plt,Programming Language Theory,Microsoft: We're creating a new Rust-based programming language for secure coding,https://www.zdnet.com/article/microsoft-were-creating-a-new-rust-based-programming-language-for-secure-coding/
261,Lobsters,plt,Programming Language Theory,Deciding when to collect garbage,https://yorickpeterse.com/articles/deciding-when-to-collect-garbage/
262,Lobsters,plt,Programming Language Theory,Garbage Collection · Crafting Interpreters,http://craftinginterpreters.com/garbage-collection.html
263,Lobsters,plt,Programming Language Theory,Shell Has a Forth-like Quality (2017),http://www.oilshell.org/blog/2017/01/13.html
264,Lobsters,plt,Programming Language Theory,How to make your papers run: Executable formal semantics for your language,https://www.tweag.io/posts/2019-11-28-pcf-makam-spec
265,Lobsters,plt,Programming Language Theory,Hilbert's rusty hotel,https://blog.jcoglan.com/2019/11/22/hilberts-rusty-hotel/
266,Lobsters,plt,Programming Language Theory,Use := for Assignment (Scala 3),https://github.com/lampepfl/dotty/issues/7598
267,Lobsters,plt,Programming Language Theory,Not beating C with 96 lines of Inko,https://yorickpeterse.com/articles/not-beating-c-with-96-lines-of-inko/
268,Lobsters,plt,Programming Language Theory,On Nexuses,https://www.devever.net/~hl/nexuses
269,Lobsters,plt,Programming Language Theory,The Invention of Forth,https://colorforth.github.io/HOPL.html
270,Lobsters,plt,Programming Language Theory,A More Type-Driven Elixir Workflow? Maybe,https://well-ironed.com/articles/a-more-type-driven-elixir-workflow-maybe/
271,Lobsters,plt,Programming Language Theory,Probabilistic Programming,https://www.cs.cornell.edu/courses/cs4110/2016fa/lectures/lecture33.html
272,Lobsters,plt,Programming Language Theory,Jonesforth: A sometimes minimal FORTH compiler and tutorial,http://git.annexia.org/?p=jonesforth.git;a=blob;f=jonesforth.S;h=45e6e854a5d2a4c3f26af264dfce56379d401425;hb=HEAD
273,Lobsters,plt,Programming Language Theory,"Compiling a Functional Language Using C++, Part 0 - Intro",https://danilafe.com/blog/00_compiler_intro/
274,Lobsters,plt,Programming Language Theory,Demystifying Async Programming in Javascript,https://yunchi.dev/posts/demystifying-async/
275,Lobsters,plt,Programming Language Theory,"Inko progress report: October 2019, including many improvements to the garbage collector",https://inko-lang.org/news/inko-progress-report-october-2019/
276,Lobsters,plt,Programming Language Theory,LoCal: A Language for Programs Operating on Serialized Data,http://recurial.com/pldi19main.pdf
277,Lobsters,plt,Programming Language Theory,"An implementation of ""Strand"", a parallel Prolog dialect",http://www.call-with-current-continuation.org/strand/strand.html
278,Lobsters,plt,Programming Language Theory,Operator Etymology,https://jasdev.me/operators
279,Lobsters,plt,Programming Language Theory,An Evening on Modern Programming Languages (2019-11-21),https://ossg.bcs.org/blog/event/modern-languages/
280,Lobsters,plt,Programming Language Theory,Motoko Programming Language Guide,https://sdk.dfinity.org/language-guide/index.html
281,Lobsters,plt,Programming Language Theory,Python is better typed than you think: error handling with mypy type hints,https://beepb00p.xyz/mypy-error-handling.html
282,Lobsters,plt,Programming Language Theory,Static Typing in Ruby with a Side of Sorbet,https://blog.heroku.com/static-typing-ruby-with-sorbet
283,Lobsters,plt,Programming Language Theory,Fibers under the magnifying glass,http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2018/p1364r0.pdf
284,Lobsters,plt,Programming Language Theory,Sequential Programming for Replicated Data Stores,https://s.octalsrc.org/ipfs/QmSKuejPz6uanJ7gBFzVaHrPDuDj1jnWuqus3PxukqP7ep/item/carol_icfp2019_pub.pdf
285,Lobsters,plt,Programming Language Theory,Local State is Poison (2012),https://awelonblue.wordpress.com/2012/10/21/local-state-is-poison/
286,Lobsters,plt,Programming Language Theory,Dependency injection is dynamic scoping in disguise,http://gustavlundin.com/di-frameworks-are-dynamic-binding/
287,Lobsters,plt,Programming Language Theory,Dex: Research language for array processing in the Haskell/ML family,https://github.com/google-research/dex-lang
288,Lobsters,plt,Programming Language Theory,L.in.o.l.e.u.m: Universal low-level programming language,http://anynowhere.com/bb/layout/html/frameset.html
289,Lobsters,plt,Programming Language Theory,Unboxed Types for OCaml,https://www.youtube.com/watch?v=RV-4Xddk0Yc
290,Lobsters,plt,Programming Language Theory,Juttle - One query language to rule them all,http://juttle.github.io/
291,Lobsters,plt,Programming Language Theory,Considerations for programming language design: a rebuttal (2018),https://hackernoon.com/considerations-for-programming-language-design-a-rebuttal-5fb7ef2fd4ba
292,Lobsters,plt,Programming Language Theory,Empathy and subjective experience in programming languages,http://lexi-lambda.github.io/blog/2019/10/19/empathy-and-subjective-experience-in-programming-languages/
293,Lobsters,plt,Programming Language Theory,Liquid Types vs. Floyd-Hoare Logic,https://ucsd-progsys.github.io/liquidhaskell-blog/2019/10/20/why-types.lhs/
294,Lobsters,plt,Programming Language Theory,Types for units of measure,https://varkor.github.io/blog/2018/07/30/types-for-units-of-measure.html
295,Lobsters,plt,Programming Language Theory,What Type Soundness Theorem Do You Really Want to Prove?,https://blog.sigplan.org/2019/10/17/what-type-soundness-theorem-do-you-really-want-to-prove/
296,Lobsters,plt,Programming Language Theory,Liquidate Your Assets: Reasoning About Resource Usage in Liquid Haskell,http://www.cs.nott.ac.uk/~pszgmh/liquidate.pdf
297,Lobsters,plt,Programming Language Theory,Tilton,https://www.crockford.com/tilton.html
298,Lobsters,plt,Programming Language Theory,Lucid Synchrone,https://www.di.ens.fr/~pouzet/lucid-synchrone/index.html
299,Lobsters,plt,Programming Language Theory,Top Down Operator Precedence (1971),https://daesan.com/wp-content/uploads/2018/05/top_down_operator_precedence.pdf
300,Lobsters,plt,Programming Language Theory,A simple incremental low-pause GC design,https://fanael.github.io/incremental-low-pause-gc.html
301,Lobsters,plt,Programming Language Theory,Interpreting Go,http://notes.eatonphil.com/interpreting-go.html
302,Lobsters,plt,Programming Language Theory,Bel: a new dialect of Lisp,http://paulgraham.com/bel.html
303,Lobsters,plt,Programming Language Theory,Imp: intro,https://scattered-thoughts.net/writing/imp-intro/
304,Lobsters,plt,Programming Language Theory,Category Theory is in our minds? Bartosz Milewski weighs in,https://corecursive.com/category-theory-is-how-our-minds-work-with-bartosz-milewski/
305,Lobsters,plt,Programming Language Theory,Formalize all the things (in Agda),https://jesper.sikanda.be/posts/formalize-all-the-things.html
306,Lobsters,plt,Programming Language Theory,Visualizing Abstract Abstract Machines,http://kyleheadley.github.io/PHDWebsite/2019-headley-aamviz-scheme-submit.pdf
307,Lobsters,plt,Programming Language Theory,Improving Intermediate Codes - Computerphile,https://www.youtube.com/watch?v=TiJn9D6lZ-Y
308,Lobsters,plt,Programming Language Theory,"Inko progress report: September 2019, including an update on the parallel self-hosting Inko compiler",https://inko-lang.org/news/inko-progress-report-september-2019/
309,Lobsters,plt,Programming Language Theory,Typed Type-Level Computation in Amulet,https://hydraz.semi.works/posts/2019-10-04.html
310,Lobsters,plt,Programming Language Theory,Flaws in structured programming,http://boxbase.org/entries/2019/oct/4/flaws-in-structured-programming/
311,Lobsters,plt,Programming Language Theory,Do you have a problem? Write a compiler,http://oleg.fi/gists/posts/2019-09-26-write-a-compiler.html
312,Lobsters,plt,Programming Language Theory,The Rosie Pattern Language,https://rosie-lang.org/about/
313,Lobsters,plt,Programming Language Theory,XASM - Extensible Component-Based Abstract State Machines Language (2000),http://xasm.sourceforge.net/XasmAnl00/XasmAnl00.pdf
314,Lobsters,plt,Programming Language Theory,The Fascinating Influence of Cyclone,http://pling.jondgoodwin.com/post/cyclone/
315,Lobsters,plt,Programming Language Theory,"Go interfaces, the tricky parts",https://timr.co/go-interfaces-the-tricky-parts
316,Lobsters,plt,Programming Language Theory,Constructing self-referential sentences from 1981 through 2017,https://twitter.com/robinhouston/status/1177636866671157248
317,Lobsters,plt,Programming Language Theory,The Unison language,https://www.unisonweb.org/
318,Lobsters,plt,Programming Language Theory,Interactive amc-prove,https://hydraz.semi.works/posts/2019-09-29.html
319,Lobsters,plt,Programming Language Theory,Announcement: amc-prove,https://hydraz.semi.works/posts/2019-09-25.html
320,Lobsters,plt,Programming Language Theory,"No, PHP Doesn't Have Closures",https://nullprogram.com/blog/2019/09/25/
321,Lobsters,plt,Programming Language Theory,Which is the right flow control loop for me?,/s/yba68z/which_is_right_flow_control_loop_for_me
322,Lobsters,plt,Programming Language Theory,Mechanized Relational Verification of Concurrent Programs with Continuations,https://iris-project.org/pdfs/2019-icfp-logrelcc-final.pdf
323,Lobsters,plt,Programming Language Theory,In defense of rationality and dynamic programming,https://blog.jessitron.com/2019/09/22/in-defense-of-rationality-and-dynamic-programming/
324,Lobsters,plt,Programming Language Theory,Crystal 0.31.0 released,https://crystal-lang.org/2019/09/23/crystal-0.31.0-released.html
325,Lobsters,plt,Programming Language Theory,Language Design: Unary Operators,https://soc.github.io/languages/unary-operators
326,Lobsters,plt,Programming Language Theory,"The Worst Programming Language, Update 1",http://worst.mitten.party/log/1/
327,Lobsters,plt,Programming Language Theory,Martin Hofmann’s case for non-strictly positive data types,https://www.irit.fr/~/Ralph.Matthes/talks/slidesMatthesTYPES18.pdf
328,Lobsters,plt,Programming Language Theory,"v0.4.0 of Gleam, the statically typed language for the Erlang VM, is out",https://lpil.uk/blog/gleam-v0.4-released/
329,Lobsters,plt,Programming Language Theory,Types On The BEAM,https://medium.com/@gordonguthrie/types-on-the-beam-2af8b1cb9be9
330,Lobsters,plt,Programming Language Theory,"A streaming, state-machine JSON parser in Zig",https://github.com/ziglang/zig/blob/master/std/json.zig
331,Lobsters,plt,Programming Language Theory,Approximate Normalization for Gradual Dependent Types,https://arxiv.org/pdf/1906.06469.pdf
332,Lobsters,plt,Programming Language Theory,SafeStrings: Representing Strings as Structured Data,https://arxiv.org/pdf/1904.11254.pdf
333,Lobsters,plt,Programming Language Theory,Config constraints in the type system where they belong,https://sgt.hootr.club/molten-matter/type-level-conf/
334,Lobsters,plt,Programming Language Theory,"Inko 0.5.0 released, featuring the first steps towards a self-hosting compiler",https://inko-lang.org/news/inko-0-5-0-has-been-released/
335,Lobsters,plt,Programming Language Theory,My Life with Array Languages,http://webdocs.cs.ualberta.ca/~smillie/Jpage/MyLife.pdf
336,Lobsters,plt,Programming Language Theory,Comby: a tool for changing :[code],https://comby.dev/
337,Lobsters,plt,Programming Language Theory,Adapton: Programming Language Abstractions for Incremental Computation,http://adapton.org/
338,Lobsters,plt,Programming Language Theory,ChocoPy: A Programming Language for Compilers Courses,https://chocopy.org/
339,Lobsters,plt,Programming Language Theory,Parsing in a Broad Sense,http://grammarware.github.io/parsing/
340,Lobsters,plt,Programming Language Theory,Tree Language Designer Tutorial Video,https://www.youtube.com/watch?v=UQHaI78jGR0
341,Lobsters,plt,Programming Language Theory,A Standard ML interpreter written in TypeScript with an online REPL,https://github.com/SOSML/SOSML
342,Lobsters,plt,Programming Language Theory,Programming Language Explorations,https://github.com/rtoal/ple
343,Lobsters,plt,Programming Language Theory,Turing Categories,https://golem.ph.utexas.edu/category/2019/08/turing_categories.html
344,Lobsters,plt,Programming Language Theory,Why Haskell is important,https://www.tweag.io/posts/2019-09-06-why-haskell-is-important.html
345,Lobsters,plt,Programming Language Theory,RFC: Redesigned Tree Notation Homepage,https://treenotation.org/
346,Lobsters,plt,Programming Language Theory,Differentiable Programming Mega-Proposal,https://forums.swift.org/t/differentiable-programming-mega-proposal/28547
347,Lobsters,plt,Programming Language Theory,Generators from Scratch,https://defn.io/2019/09/05/racket-generators/
348,Lobsters,plt,Programming Language Theory,Static TypeScript: An Implementation of a Static Compiler for the TypeScript Language,https://www.microsoft.com/en-us/research/publication/static-typescript/
349,Lobsters,plt,Programming Language Theory,Call-by-Need Is Clairvoyant Call-by-Value,https://www.cs.nott.ac.uk/~pszgmh/clairvoyant.pdf
350,Lobsters,plt,Programming Language Theory,Inko Progress Report: August 2019,https://inko-lang.org/news/inko-progress-report-august-2019/
351,Lobsters,plt,Programming Language Theory,This is Dumbdown. An alternative to Markdown. The keyword for title is title,https://treenotation.org/designer/#standard%20dumbdown
352,Lobsters,plt,Programming Language Theory,Programming Option for Overtired Parents,https://github.com/treenotation/jtree/tree/master/langs/poop
353,Lobsters,plt,Programming Language Theory,Script Interpreters Considered Harmful,https://web.archive.org/web/20110813232413/http://www.codingthewheel.com/game-dev/john-carmack-script-interpreters-considered-harmful
354,Lobsters,plt,Programming Language Theory,On the Relationship Between Static Analysis and Type Theory,https://semantic-domain.blogspot.com/2019/08/on-relationship-between-static-analysis.html
355,Lobsters,plt,Programming Language Theory,The organized chaos of programming language design,https://medium.com/coinmonks/the-organized-chaos-of-programming-language-design-1e0a95067afb
356,Lobsters,plt,Programming Language Theory,The Evolution of Lua (2007),https://www.lua.org/doc/hopl.pdf
357,Lobsters,plt,Programming Language Theory,Sound and Robust Solid Modeling via Exact Real Arithmetic and Continuity,https://people.csail.mit.edu/sherman/papers/icfp19.pdf
358,Lobsters,plt,Programming Language Theory,Awesome Static Analysis,https://matthias-endler.de/awesome-static-analysis/
359,Lobsters,plt,Programming Language Theory,The Universality of Postel's Law (2015),https://michaelfeathers.silvrback.com/the-universality-of-postel-s-law
360,Lobsters,plt,Programming Language Theory,A reckless introduction to Hindley-Milner type inference,http://reasonableapproximation.net/2019/05/05/hindley-milner.html
361,Lobsters,plt,Programming Language Theory,The A-Z of programming languages (2008),https://www.computerworld.com.au/author/97635374/naomi-hamilton/articles
362,Lobsters,plt,Programming Language Theory,Totally Different Structural Programming Languages in ZigZag (2001),http://users.jyu.fi/~antkaij/plinzz.pdf
363,Lobsters,plt,Programming Language Theory,A Universal Modular ACTOR Formalism For Artificial Intelligence (1973),http://worrydream.com/refs/Hewitt-ActorModel.pdf
364,Lobsters,plt,Programming Language Theory,"v0.3.0 of Gleam, the statically typed language for the Erlang VM, is out",https://lpil.uk/blog/gleam-v0.3-released/
365,Lobsters,plt,Programming Language Theory,Mechanically Deriving Binary Tree Iterators with Continuation Defunctionalization,https://abhinavsarkar.net/posts/continuation-defunctionalization/
366,Lobsters,plt,Programming Language Theory,Lightweight Static Guarantees,http://okmij.org/ftp/Computation/lightweight-static-guarantees.html
367,Lobsters,plt,Programming Language Theory,Arend Theorem Prover,https://arend-lang.github.io/
368,Lobsters,plt,Programming Language Theory,Inko progress report: July 2019,https://inko-lang.org/news/inko-progress-report-july-2019/
369,Lobsters,plt,Programming Language Theory,Fixing C++ with Epochs,https://vittorioromeo.info/index/blog/fixing_cpp_with_epochs.html
370,Lobsters,plt,Programming Language Theory,Escaping Escaping,https://axelsvensson.com/escaping-escaping
371,Lobsters,plt,Programming Language Theory,Towards Size Types in Futhark,https://futhark-lang.org/blog/2019-08-03-towards-size-types.html
372,Lobsters,plt,Programming Language Theory,PROLOG Control in Six Slides,http://www.t3x.org/bits/prolog6.html
373,Lobsters,plt,Programming Language Theory,The perfect language (and why Go still isn’t it),https://www.snazz.xyz/programming/2019/07/31/perfect-language.html
374,Lobsters,plt,Programming Language Theory,A brief introduction to Semantic Dictionary Encoding,https://hokstad.com/semantic-dictionary-encoding
375,Lobsters,plt,Programming Language Theory,Commentary on ColorForth,http://web.archive.org/web/20051214083244/http://www.karig.net/os/cf/index.html
376,Lobsters,plt,Programming Language Theory,RFC: TreeBase,http://treenotation.org/treeBase/
377,Lobsters,plt,Programming Language Theory,The Masturbation Language (2017),http://verisimilitudes.net/2017-02-02
378,Lobsters,plt,Programming Language Theory,Forest 1.0: A Language and Toolkit for Programming with Filestores (2011),https://www.cs.princeton.edu/research/techreps/TR-904-11
379,Lobsters,plt,Programming Language Theory,Are first class continuations a language-design dead end?,https://rain-1.github.io/scheme-continuations.html
380,Lobsters,plt,Programming Language Theory,Constructing a Generic Data Loader Component with good typechecking in Typescript,http://www.javiercasas.com/articles/constructing-generic-loader-component/
381,Lobsters,plt,Programming Language Theory,Algebraic Effects for the Rest of Us,https://overreacted.io/algebraic-effects-for-the-rest-of-us/
382,Lobsters,plt,Programming Language Theory,Making Crash Bandicoot – GOOL,https://all-things-andy-gavin.com/2011/03/12/making-crash-bandicoot-gool-part-9/
383,Lobsters,plt,Programming Language Theory,Batsh - A language that compiles to Bash and Windows Batch,https://github.com/BYVoid/Batsh/blob/master/README.md
384,Lobsters,plt,Programming Language Theory,Racket2 possibilities,https://groups.google.com/forum/#!topic/racket-users/HiC7z3A5O-k
385,Lobsters,plt,Programming Language Theory,Chris Krycho on TypeScript - Making JavaScript Better,https://corecursive.com/034-chris-krycho-typescript/
386,Lobsters,plt,Programming Language Theory,"Models of Generics and Metaprogramming: Go, Rust, Swift, D and More",http://thume.ca/2019/07/14/a-tour-of-metaprogramming-models-for-generics/
387,Lobsters,plt,Programming Language Theory,We Need a Safer Systems Programming Language,https://msrc-blog.microsoft.com/2019/07/18/we-need-a-safer-systems-programming-language/
388,Lobsters,plt,Programming Language Theory,The Best Refactoring You've Never Heard Of,http://www.pathsensitive.com/2019/07/the-best-refactoring-youve-never-heard.html
389,Lobsters,plt,Programming Language Theory,Removing the 2’s from Trinary Notation is a Terrible Idea,https://medium.com/@breckyunits/removing-the-2s-from-trinary-notation-is-a-terrible-idea-848c2d7c6665
390,Lobsters,plt,Programming Language Theory,Chu construction on linear logic,http://boxbase.org/entries/2019/jul/15/chu-construction/
391,Lobsters,plt,Programming Language Theory,"""What The Hardware Does"" is not What Your Program Does: Uninitialized Memory",https://www.ralfj.de/blog/2019/07/14/uninit.html
392,Lobsters,plt,Programming Language Theory,Gradual Typing from Theory to Practice,https://blog.sigplan.org/2019/07/12/gradual-typing-theory-practice/
393,Lobsters,plt,Programming Language Theory,Multiverse Debugging: Non-deterministic Debugging for Non-deterministic Programs,https://stefan-marr.de/downloads/ecoop19-torres-lopez-et-al-multiverse-debugging-non-deterministic-debugging-for-non-deterministic-programs.pdf
394,Lobsters,plt,Programming Language Theory,What Is Rust's unsafe?,https://nora.codes/post/what-is-rusts-unsafe/
395,Lobsters,plt,Programming Language Theory,Typechecking state transitions in a React/Redux app,http://www.javiercasas.com/articles/typescript-typeful-state-transitions
396,Lobsters,plt,Programming Language Theory,Request for Feedback: Tree Notation Frequently Asked Questions,http://treenotation.org/faq.html
397,Lobsters,plt,Programming Language Theory,FaCT - A DSL for Timing-Sensitive Computation (Ext. Version),https://github.com/PLSysSec/FaCT/blob/master/FaCT_extended.pdf
398,Lobsters,plt,Programming Language Theory,A deep dive on Python type hints,https://veekaybee.github.io/2019/07/08/python-type-hints/
399,Lobsters,plt,Programming Language Theory,Work in progress: Idris 2,https://groups.google.com/forum/m/#!topic/idris-lang/PQSozmTvtyo
400,Lobsters,plt,Programming Language Theory,Using Typescript to make invalid states irrepresentable,http://www.javiercasas.com/articles/typescript-impossible-states-irrepresentable
401,Lobsters,plt,Programming Language Theory,Gen: A General-Purpose Probabilistic Programming System with Programmable Inference,https://dspace.mit.edu/bitstream/handle/1721.1/119255/MIT-CSAIL-TR-2018-020.pdf
402,Lobsters,plt,Programming Language Theory,Ale is a Lisp-1 for Go runtime,https://www.ale-lang.org/
403,Lobsters,plt,Programming Language Theory,Would aliens understand lambda calculus? (2018),http://tomasp.net/blog/2018/alien-lambda-calculus/
404,Lobsters,plt,Programming Language Theory,A Hope Tutorial (1985),http://breckyunits.com/AHopeTutorial.pdf
405,Lobsters,plt,Programming Language Theory,Funding Inko's Development,https://inko-lang.org/news/funding-inkos-development/
406,Lobsters,plt,Programming Language Theory,Improving your React with Typescript ADTs,http://www.javiercasas.com/articles/typescript-adts
407,Lobsters,plt,Programming Language Theory,Lambdas are Codatatypes,http://blog.ielliott.io/lambdas-are-codatatypes/
408,Lobsters,plt,Programming Language Theory,Interfaces for scaling and testing JavaScript,https://dev.to/yawaramin/interfaces-for-scaling-and-testing-javascript-1daj
409,Lobsters,plt,Programming Language Theory,Typed Clojure in Theory and Practice,https://ambrosebs.com/files/ambrosebs-phd-thesis.pdf
410,Lobsters,plt,Programming Language Theory,First Draft of a Successor to HTML,http://treenotation.org/sandbox/build/#stump
411,Lobsters,plt,Programming Language Theory,Real problems with functional languages,https://medium.com/darklang/real-problems-with-functional-languages-efe668c5264a
412,Lobsters,plt,Programming Language Theory,Why I created Kit programming language,https://blog.kitlang.org/2019/03/15/why-i-created-kit/
413,Lobsters,plt,Programming Language Theory,Why I think Haskell is the best general purpose language (as of June 22 2019),http://www.philipzucker.com/why-i-as-of-june-22-2019-think-haskell-is-the-best-general-purpose-language-as-of-june-22-2019/
414,Lobsters,plt,Programming Language Theory,1% the code,https://colorforth.github.io/1percent.html
415,Lobsters,plt,Programming Language Theory,Practical Type Inference Based on Success Typings (2006),http://www.it.uu.se/research/group/hipe/papers/succ_types.pdf
416,Lobsters,plt,Programming Language Theory,"Program for Summer BOB Conference (Aug 21, Berlin) is out",https://bobkonf.de/2019-summer/
417,Lobsters,plt,Programming Language Theory,"Kilobyte Constants, a Simple and Beautiful Idea that Hasn't Caught On",https://prog21.dadgum.com/32.html
418,Lobsters,plt,Programming Language Theory,"Open-sourcing Sorbet: a fast, powerful type checker for Ruby",https://sorbet.org/blog/2019/06/20/open-sourcing-sorbet
419,Lobsters,plt,Programming Language Theory,The Typestate Pattern in Rust,http://cliffle.com/blog/rust-typestate/
420,Lobsters,plt,Programming Language Theory,"Rust Creator Graydon Hoare Talks About Security, History, and Rust",https://thenewstack.io/rust-creator-graydon-hoare-talks-about-security-history-and-rust/
421,Lobsters,plt,Programming Language Theory,Help Dialyzer Help You,https://medium.com/erlang-battleground/help-dialyzer-help-you-94db66bfbc5a
422,Lobsters,plt,Programming Language Theory,"On language, history and system design",https://byrd.im/on-language/
423,Lobsters,plt,Programming Language Theory,Lamdu: an open source live programming environment,https://www.lamdu.org
424,Lobsters,plt,Programming Language Theory,Modeling tower of hanoi in linear logic,http://boxbase.org/entries/2019/jun/17/hanoi/
425,Lobsters,plt,Programming Language Theory,"Comparing the Same Project in Rust, Haskell, C++, Python, Scala and OCaml",http://thume.ca/2019/04/29/comparing-compilers-in-rust-haskell-c-and-python/
426,Lobsters,plt,Programming Language Theory,Adding static type checking to Julia in 100 lines of code,https://nextjournal.com/jbieler/adding-static-type-checking-to-julia-in-100-lines-of-code/
427,Lobsters,plt,Programming Language Theory,The Post JavaScript Apocalypse (2017),https://www.youtube.com/watch?v=99Zacm7SsWQ
428,Lobsters,plt,Programming Language Theory,SPARK/Ada gets pointer support inspired by the Rust memory model,https://blog.adacore.com/using-pointers-in-spark
429,Lobsters,plt,Programming Language Theory,ForML: Iterative Programming with Type Classes and Associated Types,https://github.com/mpcsh/ForML
430,Lobsters,plt,Programming Language Theory,Programming Languages: Application and Interpretation,https://www.plai.org/
431,Lobsters,plt,Programming Language Theory,Nim 0.20.0 has been released,https://nim-lang.org/blog/2019/06/06/version-0200-released.html
432,Lobsters,plt,Programming Language Theory,Ozcor language tries to use records for everything,https://github.com/ptol/oczor/blob/master/README.md
433,Lobsters,plt,Programming Language Theory,Writing an Interpreter in SQL for Fun and No Profit! by Michael Malis,https://www.youtube.com/watch?v=MPSMH8w7nfw
434,Lobsters,plt,Programming Language Theory,"Destructors, 2nd edition — Nim design doc","https://github.com/nim-lang/Nim/wiki/Destructors,-2nd-edition"
435,Lobsters,plt,Programming Language Theory,Plasma Language,https://github.com/PlasmaLang/plasma
436,Lobsters,plt,Programming Language Theory,The Beauty of Numeric Literals in Ada,https://www.adacore.com/gems/ada-gem-7
437,Lobsters,plt,Programming Language Theory,How (and why) to build a programming language,https://corecursive.com/032-bob-nystrom-on-building-an-interpreter/
438,Lobsters,plt,Programming Language Theory,A Conversation with Manfred von Thun (RIP) (2003),http://www.nsl.com/papers/interview.htm
439,Lobsters,plt,Programming Language Theory,Start With Just a Few Things: Thinking in Lisp,https://maxhallinan.com/posts/2019/05/30/start-with-just-a-few-things/
440,Lobsters,plt,Programming Language Theory,"You don't understand exceptions, but you should",http://matt.might.net/articles/implementing-exceptions/
441,Lobsters,plt,Programming Language Theory,"Codata in action, or how to connect Functional Programming and Object Oriented Programming",http://www.javiercasas.com/articles/codata-in-action
442,Lobsters,plt,Programming Language Theory,DSLs for non-programmers are a hoax,https://artur-martsinkovskyi.github.io//2019/dsls-are-hoax/
443,Lobsters,plt,Programming Language Theory,Point - An Esoteric Programming Language,https://unlimiter.github.io/point/
444,Lobsters,plt,Programming Language Theory,Symmetric division considered harmful,https://www.nimblemachines.com/symmetric-division-considered-harmful/
445,Lobsters,plt,Programming Language Theory,WebAssembly in Redex,http://asumu.xyz/blog/2019/04/29/webassembly-in-redex/
446,Lobsters,plt,Programming Language Theory,Linux loader for flat binary (DOS like .COM) files,https://www.tablix.org/~avian/blog/archives/2016/08/linux_loader_for_dos_like_com_files/
447,Lobsters,plt,Programming Language Theory,Habitability and Piecemeal Growth,http://akkartik.name/post/habitability
448,Lobsters,plt,Programming Language Theory,Java is Unsound: The Industry Perspective (2017),https://hackernoon.com/java-is-unsound-28c84cb2b3f
449,Lobsters,plt,Programming Language Theory,From Switch Statement Down to Machine Code,http://lazarenko.me/switch/
450,Lobsters,plt,Programming Language Theory,John Valois on Wait-Free Synchronization [PWL NYC],https://www.youtube.com/watch?v=7end3rQ0jkk
451,Lobsters,plt,Programming Language Theory,"Zig - a programming language for maintaining robust, reusable software",https://www.youtube.com/watch?v=Gv2I7qTux7g
452,Lobsters,plt,Programming Language Theory,Type-safeness in Shell,http://250bpm.com/blog:154
453,Lobsters,plt,Programming Language Theory,PLOT: Programming Language for Old Timers,http://users.rcn.com/david-moon/PLOT/
454,Lobsters,plt,Programming Language Theory,Check type annotations in Python with mypy,https://opensource.com/article/19/5/python-mypy
455,Lobsters,plt,Programming Language Theory,Scopes: Retargetable programming language and infrastructure,https://bitbucket.org/duangle/scopes/wiki/Home
456,Lobsters,plt,Programming Language Theory,Es: A shell with higher-order functions (1993),https://wryun.github.io/es-shell/paper.html
457,Lobsters,plt,Programming Language Theory,Minimalist Programming Languages (2014),http://chriswarbo.net/blog/2014-12-22-minimal_languages.html
458,Lobsters,plt,Programming Language Theory,Introduction - The Zig Programming Language,https://ziglang.org/
459,Lobsters,plt,Programming Language Theory,Next Paradigm Programming Languages: What Will they Look Like and What Changes Will They Bring?,https://arxiv.org/pdf/1905.00402.pdf
460,Lobsters,plt,Programming Language Theory,"Flow. Why, oh why – one more language?",https://flow9.org/2019/04/26/why.html
461,Lobsters,plt,Programming Language Theory,RacketCon 2019 Speakers Announced,https://con.racket-lang.org/
462,Lobsters,plt,Programming Language Theory,Programming Languages as Categories,https://blog.statebox.org/programming-is-just-an-example-6bc6bacb7b72
463,Lobsters,plt,Programming Language Theory,What To Know Before Debating Type Systems,https://blog.steveklabnik.com/posts/2010-07-17-what-to-know-before-debating-type-systems
464,Lobsters,plt,Programming Language Theory,Type inference debate: a C++ phenomenon?,https://atilaoncode.blog/2019/04/24/type-inference-debate-a-c-culture-phenomenon/
465,Lobsters,plt,Programming Language Theory,SOUL - The Future of Audio Coding,https://soul.dev/
466,Lobsters,plt,Programming Language Theory,Céu - Structured Synchronous Reactive Programming Language,https://ceu-lang.github.io/ceu/out/manual/v0.30/#overview
467,Lobsters,plt,Programming Language Theory,Floyd Programming Language,https://github.com/marcusz/floyd
468,Lobsters,plt,Programming Language Theory,TicTacToe in Bosque and Kotlin,https://www.jworks.io/tictactoe-in-bosque-and-kotlin/
469,Lobsters,plt,Programming Language Theory,tinySelf performance gains 2019/4,https://www.notion.so/tinySelf-performance-gains-2019-4-ef0d6334f7fb4256a3f21cb90bd5db37
470,Lobsters,plt,Programming Language Theory,Turing-Completeness Totally Free,https://personal.cis.strath.ac.uk/conor.mcbride/TotallyFree.pdf
471,Lobsters,plt,Programming Language Theory,Ruby 3 to have optional static type annotations,https://twitter.com/darkdimius/status/1119115657776209920
472,Lobsters,plt,Programming Language Theory,Tau Meta-Language,https://github.com/IDNI/tau
473,Lobsters,plt,Programming Language Theory,curv - a language for making art using mathematics,https://github.com/curv3d/curv
474,Lobsters,plt,Programming Language Theory,"The first release of Gleam, a statically typed language for the Erlang VM",https://lpil.uk/blog/hello-gleam/
475,Lobsters,plt,Programming Language Theory,A Specialized B-tree for Concurrent Datalog Evaluation,https://souffle-lang.github.io/pdf/ppopp19.pdf
476,Lobsters,plt,Programming Language Theory,Explaining formal proofs,http://boxbase.org/entries/2019/apr/15/explaining-formal-proofs/
477,Lobsters,plt,Programming Language Theory,Online Historical Encyclopaedia of Programming Languages,http://hopl.info/
478,Lobsters,plt,Programming Language Theory,Languages I want to write,http://blog.wesleyac.com/posts/language-todos
479,Lobsters,plt,Programming Language Theory,What is the minimal basis for Futhark?,https://futhark-lang.org/blog/2019-04-10-what-is-the-minimal-basis-for-futhark.html
480,Lobsters,plt,Programming Language Theory,"Cell: A functional, relational, reactive language that compiles to Java, C++ and C#",http://cell-lang.net/
481,Lobsters,plt,Programming Language Theory,Energy Efficiency across Programming Languages,http://greenlab.di.uminho.pt/wp-content/uploads/2017/09/paperSLE.pdf
482,Lobsters,plt,Programming Language Theory,0.4.0 Release Notes · The Zig Programming Language,https://ziglang.org/download/0.4.0/release-notes.html
483,Lobsters,plt,Programming Language Theory,"Muon: A Low-level Programming Language Inspired by C, C#, and Go",https://github.com/nickmqb/muon
484,Lobsters,plt,Programming Language Theory,"Elixir protocols, how do they work? the erlang perspective",http://marianoguerra.org/posts/elixir-protocols-how-do-they-work-the-erlang-perspective.html
485,Lobsters,plt,Programming Language Theory,"Hazel: A Live, Functional Programming Language with Typed Holes",https://www.youtube.com/watch?v=UkDSL0U9ndQ
486,Lobsters,plt,Programming Language Theory,Idiomatic monads in Rust,https://varkor.github.io/blog/2019/03/28/idiomatic-monads-in-rust.html
487,Lobsters,plt,Programming Language Theory,The Lobster Programming Language (2013),http://strlen.com/lobster/
488,Lobsters,plt,Programming Language Theory,Cone Programming Langauge,http://cone.jondgoodwin.com/
489,Lobsters,plt,Programming Language Theory,"""Multi-Level Intermediate Representation"" Compiler Infrastructure",https://github.com/tensorflow/mlir
490,Lobsters,plt,Programming Language Theory,The Worst Programming Language,http://worst.mitten.party/
491,Lobsters,plt,Programming Language Theory,Improve object system,https://github.com/ocaml/ocaml/pull/8562
492,Lobsters,plt,Programming Language Theory,Adding Brainfuck Monitoring to Scout APM,https://scoutapp.com/blog/announcing-brainfuck-monitoring-for-scout-apm
493,Lobsters,plt,Programming Language Theory,"Inko: Safe, Concurrent OOP Without the Headaches",https://inko-lang.org/
494,Lobsters,plt,Programming Language Theory,Fun with mutually-recursive typeclass resolution,https://medium.com/permutive/fun-with-mutually-recursive-typeclass-resolution-85934995197c
495,Lobsters,plt,Programming Language Theory,Why are monoidal categories interesting?,https://jvns.ca/blog/2019/03/26/what-are-monoidal-categories/
496,Lobsters,plt,Programming Language Theory,End-user programming,https://www.inkandswitch.com/end-user-programming.html
497,Lobsters,plt,Programming Language Theory,What are first-class functions?,https://www.youtube.com/watch?v=rRES6mtt-RQ
498,Lobsters,plt,Programming Language Theory,Bottom Up vs Top Down Design in Clojure (2015),https://www.youtube.com/watch?v=Tb823aqgX_0
499,Lobsters,plt,Programming Language Theory,The Siren Song of Little Languages,http://www.wilfred.me.uk/blog/2019/03/24/the-siren-song-of-little-languages/
500,Lobsters,plt,Programming Language Theory,Rust is not a good C replacement,https://drewdevault.com/2019/03/25/Rust-is-not-a-good-C-replacement.html
501,Lobsters,plt,Programming Language Theory,Study into exact real arithmetic Pt. 1&2,http://boxbase.org/entries/2019/mar/25/icreals-2/
502,Lobsters,plt,Programming Language Theory,What are some niche features you'd like to see in more languages?,https://www.reddit.com/r/ProgrammingLanguages/comments/b2a61l/what_are_some_niche_features_youd_like_to_see_in/
503,Lobsters,plt,Programming Language Theory,Falcon: A Graph Manipulation Language for Heterogenous Systems (2016),http://www.ece.iisc.ernet.in/~divsymposium/EECS2016/slides-2016-04-25/EECS2016_paper_24.pdf
504,Lobsters,plt,Programming Language Theory,The Céu Programming Language,http://www.ceu-lang.org/
505,Lobsters,plt,Programming Language Theory,Sum Types In SQL,https://www.parsonsmatt.org/2019/03/19/sum_types_in_sql.html
506,Lobsters,plt,Programming Language Theory,Achieving Safety Incrementally with Checked C,http://www.cs.umd.edu/~mwh/papers/checkedc-incr.pdf
507,Lobsters,plt,Programming Language Theory,A Small Prolog Interpreter in Python,https://github.com/photonlines/Python-Prolog-Interpreter
508,Lobsters,plt,Programming Language Theory,M-expression,https://en.wikipedia.org/wiki/M-expression
509,Lobsters,plt,Programming Language Theory,Type Systems as Macros,http://www.ccs.neu.edu/home/stchang/popl2017/
510,Lobsters,plt,Programming Language Theory,Resource-safe Systems Programming with Embedded Domain Specific Languages,https://eb.host.cs.st-andrews.ac.uk/drafts/dsl-idris.pdf
511,Lobsters,plt,Programming Language Theory,The Power of Types in Idris,https://www.azavea.com/blog/2019/03/11/the-power-of-types-in-idris/
512,Lobsters,plt,Programming Language Theory,Enforcing Single Responsibility Principle in Python,https://sobolevn.me/2019/03/enforcing-srp
513,Lobsters,plt,Programming Language Theory,Growing a Language by Guy Steele (1998),http://www.cs.virginia.edu/~evans/cs655/readings/steele.pdf
514,Lobsters,plt,Programming Language Theory,Contradiction in divide by zero,http://boxbase.org/entries/2019/mar/11/contradiction-in-divide-by-zero/
515,Lobsters,plt,Programming Language Theory,Flow-based Programming,http://www.jpaulmorrison.com/fbp/
516,Lobsters,plt,Programming Language Theory,Dreaming of a Parser Generator for Language Design,https://blog.adamant-lang.org/2019/dreaming-of-a-parser-generator/
517,Lobsters,plt,Programming Language Theory,Swift getting Rust-like ownership model,https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md
518,Lobsters,plt,Programming Language Theory,LambdaPi: Tutorial Implementation of Dependent Typing,https://www.andres-loeh.de/LambdaPi/
519,Lobsters,plt,Programming Language Theory,Oxide: The Essence of Rust,https://arxiv.org/pdf/1903.00982.pdf
520,Lobsters,plt,Programming Language Theory,Bosatsu: a python-ish pure and total functional programming language,https://github.com/johnynek/bosatsu
521,Lobsters,plt,Programming Language Theory,Memory Models: A Case For Rethinking Parallel Languages and Hardware,https://cacm.acm.org/magazines/2010/8/96610-memory-models-a-case-for-rethinking-parallel-languages-and-hardware/fulltext
522,Lobsters,plt,Programming Language Theory,Motivation - Keli Language,https://keli-language.gitbook.io/doc/
523,Lobsters,plt,Programming Language Theory,Andromeda proof assistant,http://www.andromeda-prover.org/
524,Lobsters,plt,Programming Language Theory,smalltt: High performance type theory elaboration,https://github.com/AndrasKovacs/smalltt
525,Lobsters,plt,Programming Language Theory,What is Dark? Darklang,https://medium.com/darklang/the-design-of-dark-59f5d38e52d2
526,Lobsters,plt,Programming Language Theory,Grace: Safe and Efficient Concurrent Programming (2000),https://cs.uwaterloo.ca/~brecht/courses/702/Possible-Readings/synchronization/grace-safe-efficient-concurrent-programs-osdi-2008.pdf
527,Lobsters,plt,Programming Language Theory,Volt is a C-inspired programming language that toes the line between expressiveness and control,http://www.volt-lang.org/
528,Lobsters,plt,Programming Language Theory,V programming language,https://vlang.io/
529,Lobsters,plt,Programming Language Theory,Teaching Programming Languages in a Post-Linnaean Age (2008),https://cs.brown.edu/~sk/Publications/Papers/Published/sk-teach-pl-post-linnaean/paper.pdf
530,Lobsters,plt,Programming Language Theory,A Case for a New Language,https://pl-rants.net/posts/case-for-new-lang/
531,Lobsters,plt,Programming Language Theory,MLIR Primer: A Compiler Infrastructure for the End of Moore’s Law,https://drive.google.com/file/d/1hUeAJXcAXwz82RXA5VtO5ZoH8cVQhrOK/view
532,Lobsters,plt,Programming Language Theory,Spartan Type Theory,https://vimeo.com/286652934
533,Lobsters,plt,Programming Language Theory,Dialogical logic resolution algorithm with sound negation,http://boxbase.org/entries/2019/feb/18/dialogical-resolution-algorithm/
534,Lobsters,plt,Programming Language Theory,Polarity and bidirectional typechecking,http://semantic-domain.blogspot.com/2018/08/polarity-and-bidirectional-typechecking.html
535,Lobsters,plt,Programming Language Theory,Compiling with Dependent Types,https://www.williamjbowman.com/resources/wjb-defense.pdf
536,Lobsters,plt,Programming Language Theory,Compiler Fundamentals: Closure Conversion,https://gist.github.com/rain-1/36c4851b7c29cf8e42f23ba6eec37be6
537,Lobsters,plt,Programming Language Theory,"""Maybe the fastest string library ever""",https://github.com/boyerjohn/rapidstring
538,Lobsters,plt,Programming Language Theory,What's your preferred embedded/application scripting language?,/s/jtrbrj/what_s_your_preferred_embedded
539,Lobsters,plt,Programming Language Theory,A Quick Look at Trait Objects in Rust,https://tratt.net/laurie/blog/entries/a_quick_look_at_trait_objects_in_rust.html
540,Lobsters,plt,Programming Language Theory,Dialogical logic programming,http://boxbase.org/entries/2019/feb/11/dialogical-logic-programming/
541,Lobsters,plt,Programming Language Theory,Program synthesis of a spec with optional manual implementation for parts of the program,/s/gpx0go/program_synthesis_spec_with_optional
542,Lobsters,plt,Programming Language Theory,Family spaghetti of programming languages,https://erkin.party/blog/190208/spaghetti
543,Lobsters,plt,Programming Language Theory,The Relationship Between OO and FP,https://codingitwrong.com/2019/02/05/the-relationship-between-oo-and-fp.html
544,Lobsters,plt,Programming Language Theory,"Taxonomy – Option types, ""Optional types"", Nullable types and null-able types",/s/hh9bsk/taxonomy_option_types_optional_types
545,Lobsters,plt,Programming Language Theory,the Fennel programming language,https://fennel-lang.org/
546,Lobsters,plt,Programming Language Theory,Declarative Programming: Is It A Real Thing? (2015),https://www.toptal.com/software/declarative-programming
547,Lobsters,plt,Programming Language Theory,Emacs Lisp implementation in JavaScript,https://github.com/samsonjs/elisp.js
548,Lobsters,plt,Programming Language Theory,The monadic morass (2012),http://trevorjim.com/the-monadic-morass/
549,Lobsters,plt,Programming Language Theory,Perl 6 as a new tool for language compilers,https://www.youtube.com/watch?v=lwIXF25KJCo
550,Lobsters,plt,Programming Language Theory,Tar-pit thinking (2012),http://trevorjim.com/tar-pit-thinking/
551,Lobsters,plt,Programming Language Theory,"Null references was a mistake, but what's the take-away?",http://boxbase.org/entries/2019/feb/4/null/
552,Lobsters,plt,Programming Language Theory,A Lever for the Mind,https://codon.com/a-lever-for-the-mind
553,Lobsters,plt,Programming Language Theory,A Conversation with Alan Kay,https://queue.acm.org/detail.cfm?id=1039523
554,Lobsters,plt,Programming Language Theory,Checks and Balances: Constraint Solving without Surprises in Object-Constraint Programming Language,http://www.vpri.org/pdf/tr2015002_oopsla15_babelsberg.pdf
555,Lobsters,plt,Programming Language Theory,Quantum Object Dynamics (2009),http://www.vpri.org/pdf/m2009002_qod.pdf
556,Lobsters,plt,Programming Language Theory,PLT science-communication publications?,/s/jpcndl/plt_science_communication_publications
557,Lobsters,plt,Programming Language Theory,A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World (2010),https://cacm.acm.org/magazines/2010/2/69354-a-few-billion-lines-of-code-later/fulltext
558,Lobsters,plt,Programming Language Theory,We Really Don't Know How To Compute,https://www.infoq.com/presentations/We-Really-Dont-Know-How-To-Compute
559,Lobsters,plt,Programming Language Theory,Partial Evaluation and Automatic Program Generation (1993),https://www.itu.dk/people/sestoft/pebook/
560,Lobsters,plt,Programming Language Theory,A Behavioral Type System for Memory-Leak Freedom,https://www.fos.kuis.kyoto-u.ac.jp/~tanki/papers/memoryleak.pdf
561,Lobsters,plt,Programming Language Theory,C++ Compile-Time Exceptions -- Debugging C++ templates should be less surreal and horrible,https://blog.esciencecenter.nl/c-compile-time-exceptions-5443f5bf06fe
562,Lobsters,plt,Programming Language Theory,Lets stop copying C,https://eev.ee/blog/2016/12/01/lets-stop-copying-c/
563,Lobsters,plt,Programming Language Theory,So you want to write a type checker,http://languagengine.co/blog/so-you-want-to-write-a-type-checker/
564,Lobsters,plt,Programming Language Theory,Typeful Programming (1991),http://www.lucacardelli.name/Papers/TypefulProg.pdf
565,Lobsters,plt,Programming Language Theory,Interview with Authors of Paper awarded POPL 2019 Most Influential Paper,https://research.fb.com/popl-2019-most-influential-paper-award-for-research-that-led-to-facebook-infer/
566,Lobsters,plt,Programming Language Theory,Scala with Explicit Nulls,https://gist.github.com/abeln/9f79774bac111d99b3ae2cb9016a33e6
567,Lobsters,plt,Programming Language Theory,Resources for Teaching with Formal Methods,https://avigad.github.io/formal_methods_in_education/
568,Lobsters,plt,Programming Language Theory,tengo: embeddable script language for Go,https://github.com/d5/tengo
569,Lobsters,plt,Programming Language Theory,"Cowgol: experimental, Ada-inspired language for very small systems (6502, Z80, etc)",http://cowlark.com/cowgol/index.html
570,Lobsters,plt,Programming Language Theory,Interpreting Programs in Static Single Assignment Form (2004),http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.74.9046&rep=rep1&type=pdf
571,Lobsters,plt,Programming Language Theory,The Fourth Type of Variance,https://www.benjamin.pizza/posts/2019-01-11-the-fourth-type-of-variance.html
572,Lobsters,plt,Programming Language Theory,Safe Programming with Pointers through Stateful Views (2005),https://www.cs.bu.edu/~hwxi/academic/papers/padl05.pdf
573,Lobsters,plt,Programming Language Theory,Graphs are to categories as lists are to monoids,https://alhassy.github.io/PathCat/
574,Lobsters,plt,Programming Language Theory,"Reading Ur/Web signatures, part 1",https://sgt.hootr.club/molten-matter/urweb-sig/
575,Lobsters,plt,Programming Language Theory,Security in Scala: Refined Typed and Object Capabilities,https://wsargent.github.io/ocaps/slides/#1
576,Lobsters,plt,Programming Language Theory,"PEG: Ambiguity, precision and confusion",https://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2015/03/peg.html
577,Lobsters,plt,Programming Language Theory,What is algebraic about algebraic effects and handlers?,https://arxiv.org/abs/1807.05923
578,Lobsters,plt,Programming Language Theory,You could have invented Parser Combinators,http://theorangeduck.com/page/you-could-have-invented-parser-combinators
579,Lobsters,plt,Programming Language Theory,Bytecode compilers and interpreters,https://bernsteinbear.com/blog/bytecode-interpreters/
580,Lobsters,plt,Programming Language Theory,Leveraging Rust types for modular specification and verification,https://www.research-collection.ethz.ch/handle/20.500.11850/311092
581,Lobsters,plt,Programming Language Theory,The Pervert’s Guide to Computer Programming Languages,https://s3-us-west-2.amazonaws.com/vulk-blog/The+Pervert%27s+Guide+to+Computer+Programming+Languages.pdf
582,Lobsters,plt,Programming Language Theory,"""Modern"" C++ Ruminations",https://sean-parent.stlab.cc/2018/12/30/cpp-ruminations.html
583,Lobsters,plt,Programming Language Theory,PANE,http://joshuahhh.com/projects/pane/
584,Lobsters,plt,Programming Language Theory,"Languages, Levels, Libraries, and Longevity - ACM Queue",https://queue.acm.org/detail.cfm?id=1039532
585,Lobsters,plt,Programming Language Theory,The Astrée Static Analyzer,http://www.astree.ens.fr/
586,Lobsters,plt,Programming Language Theory,Orthogonally Persistent Object Systems (1995),http://www.vldb.org/journal/VLDBJ4/P319.pdf
587,Lobsters,plt,Programming Language Theory,Code as communication: mental models & expectation management,https://medium.com/@enkiv2/code-as-communication-mental-models-expectation-management-aff6a16cde07?source=friends_link
588,Lobsters,plt,Programming Language Theory,Concrete Semantics,http://concrete-semantics.org/
589,Lobsters,plt,Programming Language Theory,On compositionality,https://julesh.com/2017/04/22/on-compositionality/
590,Lobsters,plt,Programming Language Theory,Xtext - Language Engineering Made Easy,http://www.eclipse.org/Xtext/
591,Lobsters,plt,Programming Language Theory,Metaprogramming-Enabled Parallel Execution of Apparently Sequential C++ Code,http://www.jlifflander.com/papers/meta-espm2016.pdf
592,Lobsters,plt,Programming Language Theory,Mathematizing C++ Concurrency,https://www.cl.cam.ac.uk/~pes20/cpp/
593,Lobsters,plt,Programming Language Theory,The C Object System,http://ldeniau.web.cern.ch/ldeniau/html/cos-dls09-draft.pdf
594,Lobsters,plt,Programming Language Theory,Programming a Problem-Oriented Language,https://colorforth.github.io/POL.htm
595,Lobsters,plt,Programming Language Theory,Tree Automata - Archive of Formal Proofs,https://www.isa-afp.org/entries/Tree-Automata.html
596,Lobsters,plt,Programming Language Theory,State Machines and the Strange Case of Mutating API,http://250bpm.com/blog:142
597,Lobsters,plt,Programming Language Theory,"Implementations from Benjamin Pierce's ""Types and Programming Languages"" book",https://github.com/roehst/tapl-implementations
598,Lobsters,plt,Programming Language Theory,Programming and Reasoning with Algebraic Effects and Dependent Types (2013),https://eb.host.cs.st-andrews.ac.uk/drafts/effects.pdf
599,Lobsters,plt,Programming Language Theory,influxdata/flux,https://github.com/influxdata/flux
600,Lobsters,plt,Programming Language Theory,Formal Reasoning About Programs,https://frap.csail.mit.edu/main
601,Lobsters,plt,Programming Language Theory,A formally verified transformation to unify multiple nested clocks for a Lustre-like language,http://scis.scichina.com/en/2019/012801.pdf
602,Lobsters,plt,Programming Language Theory,How to design co-programs,https://patternsinfp.wordpress.com/2018/11/21/how-to-design-co-programs/
603,Lobsters,plt,Programming Language Theory,Verification: Solver-based vs type theory/proof assistant-based,/s/ic7lqv/verification_solver_based_vs_type_theory
604,Lobsters,plt,Programming Language Theory,Miniature functional language implementation with algebraic data types?,/s/apwkdy/miniature_functional_language
605,Lobsters,plt,Programming Language Theory,mypy - Optional Static Typing for Python,http://mypy-lang.org/
606,Lobsters,plt,Programming Language Theory,A Graphical Language for LTL Motion and Mission Planning (2013),http://www.public.asu.edu/~gfaineko/pub/thesis/srinivas_2013_ms_thesis.pdf
607,Lobsters,plt,Programming Language Theory,J for C Programmers,http://www.jsoftware.com/help/jforc/contents.htm
608,Lobsters,plt,Programming Language Theory,Why Dependent Haskell is the Future of Software Development,https://serokell.io/blog/2018/12/17/why-dependent-haskell
609,Lobsters,plt,Programming Language Theory,Building composable abstractions [TALK],https://lispcast.com/building-composable-abstractions/
610,Lobsters,plt,Programming Language Theory,In Praise of Dependent Types | The n-Category Café,https://golem.ph.utexas.edu/category/2010/03/in_praise_of_dependent_types.html
611,Lobsters,plt,Programming Language Theory,Existential Quantification in Type Theory,https://www.scriptcrafty.com/2018/12/existential-quantification-in-type-theory/
612,Lobsters,plt,Programming Language Theory,More consistent LuaJIT performance,https://blog.cloudflare.com/more-consistent-luajit-performance/
613,Lobsters,plt,Programming Language Theory,IFC Inside: Retrofitting Languages with Dynamic Information Flow Control (2015),https://cseweb.ucsd.edu/~dstefan/pubs/heule:2015:ifc-inside.pdf
614,Lobsters,plt,Programming Language Theory,"Cross-Platform, Language Design",http://lampwww.epfl.ch/~doeraene/thesis/doeraene-thesis-2018-cross-platform-language-design.pdf
615,Lobsters,plt,Programming Language Theory,Strange Loop 2018: You are a Program Synthesizer (video + transcript),http://www.pathsensitive.com/2018/12/my-strange-loop-talk-you-are-program.html
616,Lobsters,plt,Programming Language Theory,Thoughts for a new minimal markup language,/s/chyhrd/thoughts_for_new_minimal_markup_language
617,Lobsters,plt,Programming Language Theory,Little Languages,https://maxhallinan.com/posts/2018/12/07/little-languages/
618,Lobsters,plt,Programming Language Theory,Type erasure and reification,https://eli.thegreenplace.net/2018/type-erasure-and-reification/
619,Lobsters,plt,Programming Language Theory,Dialog: An Inform 7 and Prolog inspired language for interactive fiction,https://linusakesson.net/dialog/
620,Lobsters,plt,Programming Language Theory,Towards language support for distributed systems,https://www.youtube.com/watch?v=-SyvnfBeWJk
621,Lobsters,plt,Programming Language Theory,Untyped Programs Don't Exist,https://www.williamjbowman.com/blog/2018/01/19/untyped-programs-don-t-exist/
622,Lobsters,plt,Programming Language Theory,"Design and Implementation of Object-Oriented, Parallel, Programming Language (1991)",https://shareok.org/bitstream/handle/11244/20669/Thesis-1991D-J62d.pdf?sequence=1&isAllowed=y
623,Lobsters,plt,Programming Language Theory,Programming Language Foundations in Agda (2018),http://wadler.blogspot.com/2018/12/programming-language-foundations-in-agda.html
624,Lobsters,plt,Programming Language Theory,Ocaml vs Maybe Not,http://articles.nhmtech.com/maybe-not-ocaml-hickey/index.html
625,Lobsters,plt,Programming Language Theory,Open Sourcing our Event Query Language (EQL),https://www.endgame.com/blog/technical-blog/eql-for-the-masses
626,Lobsters,plt,Programming Language Theory,Dynamic Language Embedding With Homogeneous Tool Support (2010),http://scg.unibe.ch/archive/phd/renggli-phd.pdf
627,Lobsters,plt,Programming Language Theory,Maybe Not - Rich Hickey,https://www.youtube.com/watch?v=YR5WdGrpoug
628,Lobsters,plt,Programming Language Theory,Fo̅rmulæ – Symbolic computation framework,http://www.formulae.org
629,Lobsters,plt,Programming Language Theory,Simple verification in Idris,https://gist.github.com/roehst/f87af1dabd2699762dec2657a20173f7
630,Lobsters,plt,Programming Language Theory,LaTTe : a Laboratory for Type Theory experiments,https://github.com/latte-central/LaTTe
631,Lobsters,plt,Programming Language Theory,Structured Editing for Elm* in Elm,https://www.youtube.com/watch?v=-TFL6E1uSHE
632,Lobsters,plt,Programming Language Theory,Communicating in Types,https://vimeo.com/302682323
633,Lobsters,plt,Programming Language Theory,WebAssembly doesn’t make unsafe languages safe (yet),https://00f.net/2018/11/25/webassembly-doesnt-make-unsafe-languages-safe/
634,Lobsters,plt,Programming Language Theory,Sequentially Constructive Concurrency: Conservative Extension of Synchronous Computation,https://rtsys.informatik.uni-kiel.de/~biblio/downloads/papers/date13.pdf
635,Lobsters,plt,Programming Language Theory,The AST Typing Problem,http://blog.ezyang.com/2013/05/the-ast-typing-problem/
636,Lobsters,plt,Programming Language Theory,How To Fail With JavaScript [58min],https://www.youtube.com/watch?v=w_-93M6A0Io
637,Lobsters,plt,Programming Language Theory,A configuration grammar to generate any configuration format,https://ucg.marzhillstudios.com/
638,Lobsters,plt,Programming Language Theory,A world of message-oriented programming languages,http://boston.conman.org/2018/11/21.1
639,Lobsters,plt,Programming Language Theory,On Programming Language Design,http://blog.ielliott.io/on-programming-language-design/
640,Lobsters,plt,Programming Language Theory,Type inference,https://eli.thegreenplace.net/2018/type-inference/
641,Lobsters,plt,Programming Language Theory,Relit: Typed Literal Macros for Reason (OCaml),https://github.com/cyrus-/relit
642,Lobsters,plt,Programming Language Theory,An interactive state machine demo,https://drakonhub.com/files/lift.html
643,Lobsters,plt,Programming Language Theory,If I were to invent a programming language for the 21st century,https://wordsandbuttons.online/if_i_were_to_invent_a_programming_language_for_the_21st_century.html
644,Lobsters,plt,Programming Language Theory,"ReasonML: Strict, powerful and forgiving",https://www.harigopal.in/talks/2018/jsfoo
645,Lobsters,plt,Programming Language Theory,Fusing Modeling and Programming into Language-Oriented Programming,http://voelter.de/data/pub/markusvoelter-ISOLA2018-final.pdf
646,Lobsters,plt,Programming Language Theory,A hammer you can only hold by the handle,https://blog.systems.ethz.ch/blog/2018/a-hammer-you-can-only-hold-by-the-handle.html
647,Lobsters,plt,Programming Language Theory,Language Design: Comparing and Sorting,https://soc.github.io/languages/comparing-and-sorting.html
648,Lobsters,plt,Programming Language Theory,6502 Language Implementation Approaches,https://dwheeler.com/6502/
649,Lobsters,plt,Programming Language Theory,Fortifying Macros (2010),https://www2.ccs.neu.edu/racket/pubs/icfp10-cf.pdf
650,Lobsters,plt,Programming Language Theory,Why is machine learning most often practiced using a dynamically typed language?,/s/hgejxf/why_is_machine_learning_most_often
651,Lobsters,plt,Programming Language Theory,Crystal 0.27 released,https://crystal-lang.org/2018/11/01/crystal-0.27.0-released.html
652,Lobsters,plt,Programming Language Theory,Four Languages from Forty Years Ago,https://www.youtube.com/watch?v=0fpDlAEQio4
653,Lobsters,plt,Programming Language Theory,"Safe, Parallel Programming in Ada with Language Extensions (2014)",https://www.cister.isep.ipp.pt/docs/safe_parallel_programming_in_ada_with_language_extensions/1030/attach.pdf
654,Lobsters,plt,Programming Language Theory,"Extensible, Type-Directed Editing",http://cattheory.com/extensibleTypeDirectedEditing.pdf
655,Lobsters,plt,Programming Language Theory,Book Review: A Philosophy of Software Design,http://www.pathsensitive.com/2018/10/book-review-philosophy-of-software.html
656,Lobsters,plt,Programming Language Theory,Reducing the Number of Annotations in a Verification-oriented Imperative Language,https://arxiv.org/pdf/1011.3407.pdf
657,Lobsters,plt,Programming Language Theory,The Ceylon Programming Language,https://ceylon-lang.org/
658,Lobsters,plt,Programming Language Theory,The Road to Typed Clojure 1.0: Part 1,https://frenchy64.github.io/2018/09/20/towards-typed-clj.html
659,Lobsters,plt,Programming Language Theory,Pathologies of Go package management,https://leozhang.me/post/2018/10/22/pathologies-of-go-package-management/
660,Lobsters,plt,Programming Language Theory,"Pixie: Small, Fast, Clojure-inspired, Native LISP with ""Magical"" Powers",https://github.com/pixie-lang/pixie
661,Lobsters,plt,Programming Language Theory,The Periodic Table of Data Structures,https://stratos.seas.harvard.edu/files/stratos/files/periodictabledatastructures.pdf
662,Lobsters,plt,Programming Language Theory,Proposal: Go 2 transition,https://github.com/golang/proposal/blob/master/design/28221-go2-transitions.md
663,Lobsters,plt,Programming Language Theory,The Maude System,http://maude.cs.illinois.edu/w/index.php/The_Maude_System
664,Lobsters,plt,Programming Language Theory,Alchemy: A Language and Compiler for Homomorphic Encryption Made easY,http://web.eecs.umich.edu/~cpeikert/pubs/alchemy.pdf
665,Lobsters,plt,Programming Language Theory,Improved Idris (2.0 / Blodwen) interactive editing / code completion,https://twitter.com/edwinbrady/status/1052913078927613954
666,Lobsters,plt,Programming Language Theory,Haskell by Day,https://www.adomokos.com/2018/10/haskell-by-day.html
667,Lobsters,plt,Programming Language Theory,The SCOOP Concurrency Model in Java-like Languages (2009),http://www.cs.utoronto.ca/~faraz/papers/cpa09.pdf
668,Lobsters,plt,Programming Language Theory,"Equal Rights for Functional Objects or, The More Things Change, The More They Are the Same (1990)",http://www.pipeline.com/~hbaker1/ObjectIdentity.html
669,Lobsters,plt,Programming Language Theory,Is Rust functional?,https://www.fpcomplete.com/blog/2018/10/is-rust-functional
670,Lobsters,plt,Programming Language Theory,Expresso,https://github.com/willtim/Expresso
671,Lobsters,plt,Programming Language Theory,Entity Component Systems and Data Oriented Design,http://aras-p.info/texts/files/2018Academy%20-%20ECS-DoD.pdf
672,Lobsters,plt,Programming Language Theory,Running With Scissors: Live Coding With Data,https://www.youtube.com/watch?v=Qx0-pViyIDU
673,Lobsters,plt,Programming Language Theory,Rosie Pattern Language: Improving on 50-Year Old Regular Expression Technology,https://thestrangeloop.com/2018/rosie-pattern-language-improving-on-50-year-old-regular-expression-technology.html
674,Lobsters,plt,Programming Language Theory,Towards Language Support for Distributed Systems,https://www.youtube.com/watch?v=IeBbiQZYmuY
675,Lobsters,plt,Programming Language Theory,Dotted Canonical S-expressions,https://gist.github.com/rain-1/a253e47b939fc0769524d8716541c96e
676,Lobsters,plt,Programming Language Theory,"Composability, homogeneity, and language-based systems",https://medium.com/@enkiv2/composability-homogeneity-and-language-based-systems-fb00e2c2458
677,Lobsters,plt,Programming Language Theory,"The Art of Prolog, Second Edition",https://mitpress.mit.edu/books/art-prolog-second-edition
678,Lobsters,plt,Programming Language Theory,An Introduction using Prolog to Specify Programming Language Semantics (2016),https://homepage.cs.uri.edu/faculty/hamel/pubs/fcs16.pdf
679,Lobsters,plt,Programming Language Theory,A User’s Guide to Picat,http://picat.retina.ufsc.br/picat_guide/
680,Lobsters,plt,Programming Language Theory,Telescript (programming language),https://en.wikipedia.org/wiki/Telescript_(programming_language)
681,Lobsters,plt,Programming Language Theory,Programming as interaction: A new perspective for programming language research,http://tomasp.net/blog/2018/programming-interaction/
682,Lobsters,plt,Programming Language Theory,TYPES 2018 Book of Abstracts,https://types2018.projj.eu/book-of-abstracts/
683,Lobsters,plt,Programming Language Theory,Adding an Effect System to OCaml,https://www.janestreet.com/tech-talks/effective-programming/
684,Lobsters,plt,Programming Language Theory,Practical and Verifiable C++ Dynamic Cast for Hard Real-Time Systems (2008),http://www.stroustrup.com/fdc_jcse.pdf
685,Lobsters,plt,Programming Language Theory,ICFP Keynote: Graduale Typing,https://www.youtube.com/watch?v=fQRRxaWsuxI&feature=youtu.be
686,Lobsters,plt,Programming Language Theory,Thermometer continuations: Any monadic effect in any language,https://www.youtube.com/watch?v=B9jj2i_pyK0
687,Lobsters,plt,Programming Language Theory,Prototyping a toy language and its interpreter in Makam (lambda prolog),https://astampoulis.github.io/blog/makam-tutorial-01/
688,Lobsters,plt,Programming Language Theory,Handling Delimited Continuations with Dependent Types,https://www.youtube.com/watch?v=7WSmEthdjVs
689,Lobsters,plt,Programming Language Theory,C is not Turing-complete (2017),https://memo.barrucadu.co.uk/c-is-not-turing-complete.html
690,Lobsters,plt,Programming Language Theory,Implementing and Optimizing Functional Reactive Programming (2016),http://www.cs.nott.ac.uk/~psznhn/Talks/BigO-ImplFRP-Dec2016.pdf
691,Lobsters,plt,Programming Language Theory,An unsafety bug in rust's stdlib,/s/i0jf4b/unsafety_bug_rust_s_stdlib
692,Lobsters,plt,Programming Language Theory,"Inform: Past, Present, Future",http://www.emshort.com/ifmu/inform.html
693,Lobsters,plt,Programming Language Theory,How a Go Program Compiles down to Machine Code,https://getstream.io/blog/how-a-go-program-compiles-down-to-machine-code/
694,Lobsters,plt,Programming Language Theory,The Little Typer,http://lambda-the-ultimate.org/node/5552
695,Lobsters,plt,Programming Language Theory,Why We Want Pattern-Matching in JavaScript,https://www.chriskrycho.com/2018/why-we-want-pattern-matching-in-javascript.html
696,Lobsters,plt,Programming Language Theory,An Objective Argument Against Python-style Indentation,/s/wjevh7/objective_argument_against_python_style
697,Lobsters,plt,Programming Language Theory,The Julia Challenge,https://nextjournal.com/sdanisch/the-julia-challenge
698,Lobsters,plt,Programming Language Theory,Iteration vs Recursion in Introduction to Programming Classes: An Empirical Study (2016),http://www.cit.iit.bas.bg/CIT_2016/v-16-4/06_paper.pdf
699,Lobsters,plt,Programming Language Theory,A brief exploration of the various approaches to modeling side effects in a purely functional langs,https://github.com/stepchowfun/effects
700,Lobsters,plt,Programming Language Theory,David Patterson Says It’s Time for New Computer Architectures and Software Languages,https://spectrum.ieee.org/view-from-the-valley/computing/hardware/david-patterson-says-its-time-for-new-computer-architectures-and-software-languages
701,Lobsters,plt,Programming Language Theory,An Incremental Approach to Compiler Construction,http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf
702,Lobsters,plt,Programming Language Theory,General Purpose Programming Languages' Speed of Light (2013),https://tratt.net/laurie/blog/entries/programming_languages_and_the_speed_of_light.html
703,Lobsters,plt,Programming Language Theory,"""Do What I Mean"": Name Resolution in Programming Languages",http://willcrichton.net/notes/specificity-programming-languages/
704,Lobsters,plt,Programming Language Theory,Cybernetics Versus Informatics: Understanding the Type Wars,https://medium.com/@rplevy/cybernetics-versus-informatics-understanding-the-type-wars-99878fe956d6
705,Lobsters,plt,Programming Language Theory,Juniper: A Functional Reactive Programming Language for the Arduino,http://www.juniper-lang.org/publications/juniper_farm_preprint.pdf
706,Lobsters,plt,Programming Language Theory,Epigram: Practical Programming with Dependent Types (2004),http://cs.ru.nl/F.Wiedijk/courses/tt-2010/tvftl/epigram-notes.pdf
707,Lobsters,plt,Programming Language Theory,"Arrows, Robots, and Functional Reactive Programming (2002)",http://www.cs.yale.edu/homes/hudak-paul/CS429F04/AFPLectureNotes.pdf
708,Lobsters,plt,Programming Language Theory,Functional Languages for Real-Time Control,https://www.cs.cmu.edu/~rbd/bib-arctic.html
709,Lobsters,plt,Programming Language Theory,Interim OS,http://dump.mntmn.com/interim-paper/
710,Lobsters,plt,Programming Language Theory,Maybe adding generics to Go IS about syntax after all,https://dave.cheney.net/2018/09/03/maybe-adding-generics-to-go-is-about-syntax-after-all
711,Lobsters,plt,Programming Language Theory,MIT-created programming language Julia 1.0 debuts,https://news.mit.edu/2018/mit-developed-julia-programming-language-debuts-juliacon-0827
712,Lobsters,plt,Programming Language Theory,Compiling dynamic programming languages,http://notes.eatonphil.com/compiling-dynamic-programming-languages.html
713,Lobsters,plt,Programming Language Theory,Notes on the Go2 Generics Draft,http://jmoiron.net/blog/notes-on-the-go2-generics-draft/
714,Lobsters,plt,Programming Language Theory,The Semantics Assignment Problem,https://bootstrapping.miraheze.org/wiki/The_Semantics_Assignment_Problem
715,Lobsters,plt,Programming Language Theory,Abstracting Definitional Interpreters (Functional Pearl),http://david.darais.com/assets/papers/abstracting-definitional-interpreters/adi.pdf
716,Lobsters,plt,Programming Language Theory,"""Little Languages"" by Jon Bentley (1986)",http://staff.um.edu.mt/afra1/seminar/little-languages.pdf
717,Lobsters,plt,Programming Language Theory,Compiler Verification Meets Cross-Language Linking via Data Abstraction (2014),https://dspace.mit.edu/bitstream/handle/1721.1/99926/Chlipala_Compiler%20verification.pdf;sequence=1
718,Lobsters,plt,Programming Language Theory,Programming Language Foundations in Agda,https://plfa.github.io/
719,Lobsters,plt,Programming Language Theory,The Abstract Calculus,https://medium.com/@maiavictor/the-abstract-calculus-fe8c46bcf39c
720,Lobsters,plt,Programming Language Theory,"With Undefined Behavior, Anything is Possible",https://raphlinus.github.io/programming/rust/2018/08/17/undefined-behavior.html
721,Lobsters,plt,Programming Language Theory,An Explanation for Composability of Clojure Transducers,https://nextjournal.com/zampino/fold
722,Lobsters,plt,Programming Language Theory,Typed Clojure in Theory and Practice,http://ambrosebs.com/talks/proposal.pdf
723,Lobsters,plt,Programming Language Theory,Logical Types for Untyped Languages (2010),https://www2.ccs.neu.edu/racket/pubs/icfp10-thf.pdf
724,Lobsters,plt,Programming Language Theory,Abstracting Abstract Machines (2011),http://www.ccs.neu.edu/home/dvanhorn/pubs/vanhorn-might-cacm11.pdf
725,Lobsters,plt,Programming Language Theory,Basics of bidirectionalism,https://pigworker.wordpress.com/2018/08/06/basics-of-bidirectionalism/
726,Lobsters,plt,Programming Language Theory,Modern Extensible Languages (2007),http://www.danielzingaro.com/extensible.pdf
727,Lobsters,plt,Programming Language Theory,"Koord: Language and analysis for robust, distributed, cyber-physical systems",https://cyphyhouse.github.io/papers/koord.pdf
728,Lobsters,plt,Programming Language Theory,Notes from Dynamicland: Geokit,https://rsnous.com/posts/notes-from-dynamicland-geokit/
729,Lobsters,plt,Programming Language Theory,A Couple of Meta-interpreters in Prolog,https://www.metalevel.at/acomip/
730,Lobsters,plt,Programming Language Theory,Factor: an extensible interactive language (2008),https://www.youtube.com/watch?v=f_0QlhYlS8g
731,Lobsters,plt,Programming Language Theory,Implementing a JIT-compiler with Rust,https://dinfuehr.github.io/blog/dora-implementing-a-jit-compiler-with-rust/
732,Lobsters,plt,Programming Language Theory,Bonsai: Synthesis-based Reasoning for Type Systems (2017),https://arxiv.org/pdf/1708.00551.pdf
733,Lobsters,plt,Programming Language Theory,Felix Programming Language,https://github.com/felix-lang/felix
734,Lobsters,plt,Programming Language Theory,The “TerpreT problem” and the limits of stochastic gradient descent for program synthesis,https://dselsam.github.io/the-terpret-problem/
735,Lobsters,plt,Programming Language Theory,Safe Dynamic Memory Management in Ada and SPARK,https://www.adacore.com/uploads/techPapers/Safe-Dynamic-Memory-Management-in-Ada-and-SPARK.pdf
736,Lobsters,plt,Programming Language Theory,Type Systems as Macros (2017),http://www.ccs.neu.edu/home/stchang/pubs/ckg-popl2017.pdf
737,Lobsters,plt,Programming Language Theory,Your Server as a Function (2013),https://monkey.org/~marius/funsrv.pdf
738,Lobsters,plt,Programming Language Theory,Rockstar is a dynamically-typed Turing-complete programming language,https://github.com/dylanbeattie/rockstar
739,Lobsters,plt,Programming Language Theory,SuSLik - program synthesis with separation logic,http://comcom.csail.mit.edu/comcom/#SuSLik
740,Lobsters,plt,Programming Language Theory,"Type Systems: Covariance, Contravariance, Bivariance, and Invariance explained",https://medium.com/@thejameskyle/type-systems-covariance-contravariance-bivariance-and-invariance-explained-35f43d1110f8
741,Lobsters,plt,Programming Language Theory,Typeclassopedia,https://wiki.haskell.org/Typeclassopedia
742,Lobsters,plt,Programming Language Theory,Program Synthesis in 2017-18,https://alexpolozov.com/blog/program-synthesis-2018/
743,Lobsters,plt,Programming Language Theory,"Design decisions on creating Jai, a new language for game programmers",https://www.youtube.com/watch?v=uZgbKrDEzAs
744,Lobsters,plt,Programming Language Theory,Mypy 0.620 Released,http://mypy-lang.blogspot.com/2018/07/mypy-0620-released.html
745,Lobsters,plt,Programming Language Theory,"Python vs. Ruby: A Battle to The Death (Gary Bernhardt, 2010)",https://vimeo.com/9471538
746,Lobsters,plt,Programming Language Theory,Mystery Languages,http://blog.brownplt.org/2018/07/05/mystery-languages.html
747,Lobsters,plt,Programming Language Theory,Monads Made Simple,https://mpc.sh/blog/monads-made-simple/
748,Lobsters,plt,Programming Language Theory,"Mars: A Functional/Imperative Language with Automatic, Destructive Update",http://mars-lang.appspot.com
749,Lobsters,plt,Programming Language Theory,A graph of programming languages connected through compilers,https://akr.am/languages/
750,Lobsters,plt,Programming Language Theory,Encode state transitions in types using linear types,https://www.tweag.io/posts/2017-08-03-linear-typestates.html
751,Lobsters,plt,Programming Language Theory,"Hazel, a live functional programming environment featuring typed holes.",http://hazel.org/
752,Lobsters,plt,Programming Language Theory,Systems Languages: An Experience Report,https://blog.usejournal.com/systems-languages-an-experience-report-d008b2b12628
753,Lobsters,plt,Programming Language Theory,Idioms of Dynamic Languages,http://willcrichton.net/notes/idioms-of-dynamic-languages/
754,Lobsters,plt,Programming Language Theory,"Myrddin 0.3 Released: ""Stand Back, We're Proffessionals""",https://myrlang.org/release-notes/r0p3
755,Lobsters,plt,Programming Language Theory,Some tentative guidelines for GUI composability,https://hackernoon.com/some-tentative-guidelines-for-gui-composability-2900abead1d9
756,Lobsters,plt,Programming Language Theory,What I Learned Making My Own JIT Language,http://www.mikedrivendevelopment.com/2018/06/what-i-learned-making-my-own-jit.html
757,Lobsters,plt,Programming Language Theory,Unicon Programming Language,https://en.wikipedia.org/wiki/Unicon_(programming_language)
758,Lobsters,plt,Programming Language Theory,Harmonic: LARA Source-To-Source Weaver,http://specs.fe.up.pt/tools/harmonic/
759,Lobsters,plt,Programming Language Theory,OBNC - a compiler for Niklaus Wirth’s programming language Oberon.,http://miasap.se/obnc/
760,Lobsters,plt,Programming Language Theory,"MixT: An embedded, domain-specific language for Mixed-Consistency Transactions",https://mpmilano.github.io/MixT/
761,Lobsters,plt,Programming Language Theory,Designing a Programming Language for the Desert,https://futhark-lang.org/blog/2018-06-18-designing-a-programming-language-for-the-desert.html
762,Lobsters,plt,Programming Language Theory,Where Are the Software Engineers of Tomorrow? (2008),http://www.crosstalkonline.org/storage/issue-archives/2008/200801/200801-Dewar.pdf
763,Lobsters,plt,Programming Language Theory,Crystal 0.25.0 released!,https://crystal-lang.org/2018/06/15/crystal-0.25.0-released.html
764,Lobsters,plt,Programming Language Theory,Programming Paradigms for Machine Learning (2016),https://core.ac.uk/download/pdf/34662437.pdf
765,Lobsters,plt,Programming Language Theory,What UNIX shell could have been,https://rain-1.github.io/shell-2.html
766,Lobsters,plt,Programming Language Theory,Whereas types can be pervasive,http://www.tedinski.com/2018/06/12/types-can-be-pervasive.html
767,Lobsters,plt,Programming Language Theory,A Gentle Intro to PLT (Programming Language Theory),https://mpc.sh/blog/a-gentle-intro-to-plt/
768,Lobsters,plt,Programming Language Theory,The Abstract State Machines Method for Modular Design and Analysis of Programming Languages (2013),http://pages.di.unipi.it/boerger/Papers/Methodology/Cambridge13SurveyPggLgAsm.pdf
769,Lobsters,plt,Programming Language Theory,Ledger Language Design: Designing and Deploying Formally Verified Public Ledgers,https://eprint.iacr.org/2018/416.pdf
770,Lobsters,plt,Programming Language Theory,Bidding Farewell to Globals (1988),https://archive.eiffel.com/doc/manuals/technology/bmarticles/joop/globals.html
771,Lobsters,plt,Programming Language Theory,Static access control using phantom types,https://blog.janestreet.com/howto-static-access-control-using-phantom-types/
772,Lobsters,plt,Programming Language Theory,Jai Primer,https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md
773,Lobsters,plt,Programming Language Theory,I don't need types,https://dmerej.info/blog/post/trying-mypy/
774,Lobsters,plt,Programming Language Theory,Visual programming language snapshots,http://blog.interfacevision.com/design/design-visual-progarmming-languages-snapshots/
775,Lobsters,plt,Programming Language Theory,The Avail Programming Language,http://www.availlang.org/about-avail/introduction/index.html
776,Lobsters,plt,Programming Language Theory,The Lambda Calculus: Practice and Principle,http://homepages.inf.ed.ac.uk/hleather/publications/2016_lambdacalculus_wf.pdf
777,Lobsters,plt,Programming Language Theory,Structural Types and Duck Typing,https://blog.infinitenegativeutility.com/2018/5/structural-types-and-duck-typing
778,Lobsters,plt,Programming Language Theory,ZZ Cell Programming,http://xanadu.com/zigzag/fw99/ZZcellProg.html
779,Lobsters,plt,Programming Language Theory,An Explanation of Unification,https://github.com/jozefg/higher-order-unification/blob/21382f44205aa3d8b115fe2b2eba47489da4b492/explanation.md
780,Lobsters,plt,Programming Language Theory,Can F* replace Haskell and Coq?,https://www.cryptulf.com/2018/01/15/can-f-replace-haskell-and-coq/
781,Lobsters,plt,Programming Language Theory,How Developers Use the Dynamic Features of Programming Languages: The Case of Smalltalk (2013),https://users.dcc.uchile.cl/~rrobbes/p/EMSE-features.pdf
782,Lobsters,plt,Programming Language Theory,"Eff: Functional Language Based on Algebraic, Effect Handlers",http://www.eff-lang.org
783,Lobsters,plt,Programming Language Theory,Out of the Tar Pit,http://curtclifton.net/papers/MoseleyMarks06a.pdf
784,Lobsters,plt,Programming Language Theory,Professor Frisby's Mostly Adequate Guide to Functional Programming,https://mostly-adequate.gitbooks.io/mostly-adequate-guide/
785,Lobsters,plt,Programming Language Theory,Mgmt Configuration Language,https://purpleidea.com/blog/2018/02/05/mgmt-configuration-language/
786,Lobsters,plt,Programming Language Theory,On null,https://www.sicpers.info/2018/05/on-null/
787,Lobsters,plt,Programming Language Theory,Extempore Language and Environment Philosophy,https://extemporelang.github.io/docs/overview/philosophy/
788,Lobsters,plt,Programming Language Theory,Reimplementing Hackett’s type language: expanding to custom core forms in Racket,http://lexi-lambda.github.io/blog/2018/04/15/reimplementing-hackett-s-type-language-expanding-to-custom-core-forms-in-racket/
789,Lobsters,plt,Programming Language Theory,References in PHP: An Indepth Look,https://derickrethans.nl/talks/phparch-php-variables-article.pdf
790,Lobsters,plt,Programming Language Theory,The Const Applicative and Monoids,https://blog.jle.im/entry/const-applicative-and-monoids.html
791,Lobsters,plt,Programming Language Theory,Operads as a Potential Foundation for Systems of Systems (2016),http://categoricaldata.net/operadics/OperadicSoS.pdf
792,Lobsters,plt,Programming Language Theory,A Conservative Extension of Synchronous Data-flow with State Machines (2007),https://www.di.ens.fr/~pouzet/talks/slides-fac07.pdf
793,Lobsters,plt,Programming Language Theory,"Modelica: Object-oriented, Declarative, Multi-Domain, Modeling Language",https://en.wikipedia.org/wiki/Modelica
794,Lobsters,plt,Programming Language Theory,Follow the Denotation,http://reasonablypolymorphic.com/blog/follow-the-denotation/index.html
795,Lobsters,plt,Programming Language Theory,Languages well-suited for remote working,/s/v25gvn/languages_well_suited_for_remote_working
796,Lobsters,plt,Programming Language Theory,Book recommendations for Programming Language Theory class,/s/rrejlp/book_recommendations_for_programming
797,Lobsters,plt,Programming Language Theory,KRust: A Formal Executable Semantics of Rust,https://arxiv.org/abs/1804.10806
798,Lobsters,plt,Programming Language Theory,Language Design: Unified Condition Syntax,https://soc.github.io/languages/unified-condition-syntax
799,Lobsters,plt,Programming Language Theory,Boosting the Permissiveness of Dynamic Information-Flow Tracking by Testing (2012),https://pdfs.semanticscholar.org/1338/7865d474afa7a8d824bdbecdf24cbd892c7c.pdf
800,Lobsters,plt,Programming Language Theory,Polymorphism and its limitations,http://caml.inria.fr/pub/docs/manual-ocaml/polymorphism.html
801,Lobsters,plt,Programming Language Theory,Increment: Programming Languages,https://increment.com/programming-languages/
802,Lobsters,plt,Programming Language Theory,Are functional programs easier to verify than imperative programs?,http://semantic-domain.blogspot.com/2018/04/are-functional-programs-easier-to.html
803,Lobsters,plt,Programming Language Theory,What happened to distributed programming languages?,https://www.youtube.com/watch?v=eAcDWcaezXY
804,Lobsters,plt,Programming Language Theory,Refinement Types for TLA+ (2014),http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=A1225244218BDD0A1C5342B3EB59BE1A?doi=10.1.1.710.8907&rep=rep1&type=pdf
805,Lobsters,plt,Programming Language Theory,The Great Theorem Prover Showdown,https://www.hillelwayne.com/post/theorem-prover-showdown/
806,Lobsters,plt,Programming Language Theory,Program Reduction: A Win for Recursion Schemes,http://newartisans.com/2018/04/win-for-recursion-schemes/
807,Lobsters,plt,Programming Language Theory,Parsing with Derivatives,http://matt.might.net/papers/might2011derivatives.pdf
808,Lobsters,plt,Programming Language Theory,Deep Probabilistic Programming Languages: A Qualitative Study,https://arxiv.org/abs/1804.06458
809,Lobsters,plt,Programming Language Theory,How to prove a compiler fully abstract,https://dbp.io/essays/2018-04-19-how-to-prove-a-compiler-fully-abstract.html
810,Lobsters,plt,Programming Language Theory,Null Object as identity,http://blog.ploeh.dk/2018/04/23/null-object-as-identity/
811,Lobsters,plt,Programming Language Theory,The Essence of Reynolds (2014),http://www0.cs.ucl.ac.uk/staff/p.ohearn/papers/EssenceOfReynolds-preprint.pdf
812,Lobsters,plt,Programming Language Theory,For goodness namesake,http://blog.ikura.co/posts/for-goodness-namesake.html
813,Lobsters,plt,Programming Language Theory,Covariance and Contravariance In Java (2013),https://dzone.com/articles/covariance-and-contravariance
814,Lobsters,plt,Programming Language Theory,Are unsound type systems wrong?,http://frenchy64.github.io/2018/04/07/unsoundness-in-untyped-types.html
815,Lobsters,plt,Programming Language Theory,The Truth About Garbage Collection,https://web.archive.org/web/20090831141004/http://java.sun.com/docs/books/performance/1st_edition/html/JPAppGC.fm.html
816,Lobsters,plt,Programming Language Theory,Help needed: Static typing and algebra,/s/gjodxi/help_needed_static_typing_algebra
817,Lobsters,plt,Programming Language Theory,GraalVM,http://www.graalvm.org/
818,Lobsters,plt,Programming Language Theory,TransLucid and Cartesian Programming,http://translucid.web.cse.unsw.edu.au
819,Lobsters,plt,Programming Language Theory,What programming languages have been designed to reduce naming things?,/s/qmu4j1/what_programming_languages_have_been
820,Lobsters,plt,Programming Language Theory,"""Growing a Language"" talk by Guy Steele (1998)",https://www.youtube.com/watch?v=_ahvzDzKdB0
821,Lobsters,plt,Programming Language Theory,An Interpreter for a Novice-Oriented Programming Language with Runtime Macros (2017),https://dspace.mit.edu/bitstream/handle/1721.1/113144/1017990524-MIT.pdf?sequence=1
822,Lobsters,plt,Programming Language Theory,"For mathematicians, = does not mean equality",https://jeremykun.com/2018/04/13/for-mathematicians-does-not-mean-equality/
823,Lobsters,plt,Programming Language Theory,Kaukatcr: an experiment in language design for multi-dimensional spaces,https://medium.com/@enkiv2/kaukatcr-an-experiment-in-language-design-for-multi-dimensional-spaces-cc038caafff9
824,Lobsters,plt,Programming Language Theory,Idris: Type safe printf,https://www.youtube.com/watch?v=fVBck2Zngjo
825,Lobsters,plt,Programming Language Theory,Adapting Scheme-like Macros to the C Language (2011),http://repository.readscheme.org/ftp/papers/sw2011/01-atkinson.pdf
826,Lobsters,plt,Programming Language Theory,A Tour of the L Language,http://l-lang.org/documentation/intro/short/
827,Lobsters,plt,Programming Language Theory,Design and Implementation of Optimizing Type-centric Compiler for High-Level Language (2017),https://infoscience.epfl.ch/record/232671/files/EPFL_TH7979.pdf?version=1
828,Lobsters,plt,Programming Language Theory,Effective Programming: Adding an Effect System to OCaml,https://www.youtube.com/watch?v=z8SI7WBtlcA
829,Lobsters,plt,Programming Language Theory,"Answering ""A monad is just a monoid in the category of endofunctors, what's the problem?""",https://stackoverflow.com/questions/3870088/a-monad-is-just-a-monoid-in-the-category-of-endofunctors-whats-the-probleⅿ/3870310#3870310
830,Lobsters,plt,Programming Language Theory,Popr Tutorial: Dot Machines,http://hackerfoo.com/posts/popr-tutorial-0-dot-machines.html
831,Lobsters,plt,Programming Language Theory,Sum Types Are Coming: What Everyone Should Know (2015),https://chadaustin.me/2015/07/sum-types/
832,Lobsters,plt,Programming Language Theory,ASAP: As Static As Possible Memory Management (2017),https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-908.pdf
833,Lobsters,plt,Programming Language Theory,Programming Languages as Scouts,http://willcrichton.net/notes/programming-languages-as-boy-scouts/
834,Lobsters,plt,Programming Language Theory,Gradual Programming,http://willcrichton.net/notes/gradual-programming/
835,Lobsters,plt,Programming Language Theory,GADTs and Amulet,https://hydraz.semi.works/posts/2018-03-27.html
836,Lobsters,plt,Programming Language Theory,Beginner's Luck: A Language for Property-based Generators (2016),https://arxiv.org/pdf/1607.05443.pdf
837,Lobsters,plt,Programming Language Theory,Katahdin - a programming language where the syntax and semantics are mutable at runtime,http://chrisseaton.com/katahdin/
838,Lobsters,plt,Programming Language Theory,Unifying Analytic and Statically-Typed Quasiquotes,https://infoscience.epfl.ch/record/232427/files/[v.2.10]%20qq_unif_popl18.pdf
839,Lobsters,plt,Programming Language Theory,A semantice for imprecise exceptions (1999),https://www.microsoft.com/en-us/research/wp-content/uploads/1999/05/except.pdf
840,Lobsters,plt,Programming Language Theory,"uC++: C++ Extended with Coroutines, Tasks, and Monitors (1992)",https://plg.uwaterloo.ca/~usystem/uC++.html
841,Lobsters,plt,Programming Language Theory,Reliably composable language extensions (2017),https://www-users.cs.umn.edu/~kami0054/papers/kaminski-phd.pdf
842,Lobsters,plt,Programming Language Theory,Type-Safe Observable Sharing in Haskell (2009),http://www.ittc.ku.edu/~andygill/papers/reifyGraph.pdf
843,Lobsters,plt,Programming Language Theory,What we talk about when we talk about monads,http://tomasp.net/academic/papers/monads/monads-programming.pdf
844,Lobsters,plt,Programming Language Theory,A Language-based Approach to Unifying Events and Threads (orig in 2006; 2014),https://blog.acolyer.org/2014/12/11/a-language-based-approach-to-unifying-events-and-threads/
845,Lobsters,plt,Programming Language Theory,LMS-Verify: Abstraction without Regret for Verified Systems Programming (2017),http://lampwww.epfl.ch/~amin/pub/lms-verify.pdf
846,Lobsters,plt,Programming Language Theory,Incredibly Strange Programming Languages - Craig Stuntz,https://www.youtube.com/watch?v=pwrYx-tdpn4
847,Lobsters,plt,Programming Language Theory,"Built in mapping for more powerful, intuitive, code",https://github.com/mlochbaum/ILanguage/raw/master/doc/BuiltInMapping/BuiltInMapping.pdf
848,Lobsters,plt,Programming Language Theory,J’s Low-level Obfuscation Leads to Higher Levels of Clarity,http://www.petecorey.com/blog/2018/03/19/js-low-level-obfuscation-leads-to-higher-levels-of-clarity/
849,Lobsters,plt,Programming Language Theory,Types and Indeterminates,http://boxbase.org/entries/2018/mar/19/types-and-indeterminates/
850,Lobsters,plt,Programming Language Theory,"Squid: Type-Safe, Hygienic, and Reusable Quasiquotes (2017)",https://infoscience.epfl.ch/record/231700/files/scala17main-scala17main16-p-bdc7425-34084-final.pdf
851,Lobsters,plt,Programming Language Theory,Why inheritance never made any sense,https://www.sicpers.info/2018/03/why-inheritance-never-made-any-sense/
852,Lobsters,plt,Programming Language Theory,Type-safe Operating System Abstractions (2004),https://www.cs.dartmouth.edu/~trdata/reports/TR2004-526.pdf
853,Lobsters,plt,Programming Language Theory,Mycroft — A Predicate Logic Language — Overview / Post-mortem,https://hackernoon.com/mycroft-a-predicate-logic-language-overview-post-mortem-e357fe80d53
854,Lobsters,plt,Programming Language Theory,Closing Keynote: Safe Systems Software and Future of Computing by Joe Duffy (2017),https://www.youtube.com/watch?v=CuD7SCqHB7k
855,Lobsters,plt,Programming Language Theory,Heap Bounded Assembly Language (2002),http://homepages.inf.ed.ac.uk/da/papers/hbal/hbal.pdf
856,Lobsters,plt,Programming Language Theory,Fast: A Transducer-based Language for Tree Manipulation (2016),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/toplasFAST.pdf
857,Lobsters,plt,Programming Language Theory,Short Paper: Rusty Types for Solid Safety (2016),https://sergio.bz/docs/rusty-types-2016.pdf
858,Lobsters,plt,Programming Language Theory,A proposal for a resource-management model for OCaml,https://hal.inria.fr/hal-01724997/document
859,Lobsters,plt,Programming Language Theory,The Left Hand of Equals,https://research.google.com/pubs/archive/45576.pdf
860,Lobsters,plt,Programming Language Theory,"Linear Logic, Linear Lisp, Linear Types and Concatenative Languages",https://cdiggins.github.io/blog/linear-logic-and-linear-lisp.html
861,Lobsters,plt,Programming Language Theory,Symbolic Execution: Intuition and Implementation,http://www.usrsb.in/symbolic-execution-intuition-and-implementation.html
862,Lobsters,plt,Programming Language Theory,"Isolated Actors for Race-free, Concurrent Programming (2010)",https://infoscience.epfl.ch/record/151999/files/EPFL_TH4874.pdf
863,Lobsters,plt,Programming Language Theory,Type Inference by Solving Constraints,http://www.calebh.io/Type-Inference-by-Solving-Constraints/
864,Lobsters,plt,Programming Language Theory,"Tyr: A Dependent, Type System for Spatial, Memory Safety in LLVM (2016)",https://core.ac.uk/download/pdf/82404884.pdf
865,Lobsters,plt,Programming Language Theory,Announcing Rust 1.24.1,https://blog.rust-lang.org/2018/03/01/Rust-1.24.1.html
866,Lobsters,plt,Programming Language Theory,Verification of a Practical Hardware Security Architecture via Static Information Flow Analysis,http://www.cse.psu.edu/~dbz5017/pub/asplos17.pdf
867,Lobsters,plt,Programming Language Theory,Capability-based Type Systems for Concurrency Control,http://uu.diva-portal.org/smash/get/diva2:1164769/FULLTEXT01.pdf
868,Lobsters,plt,Programming Language Theory,Language Features for Non-programmers,http://angersock.com/blog/2018/01/07/language-features-for-non-programmers
869,Lobsters,plt,Programming Language Theory,"QWeSST: Type-Safe, Web Programming Language (2011)",http://www.cs.cmu.edu/~iliano/slides/kuleuven11.pdf
870,Lobsters,plt,Programming Language Theory,A Programmable Programming Language,https://cacm.acm.org/magazines/2018/3/225475-a-programmable-programming-language/fulltext
871,Lobsters,plt,Programming Language Theory,Nix 2.0 released,https://nixos.org/nix/manual/#ssec-relnotes-2.0
872,Lobsters,plt,Programming Language Theory,Orca: GC and Type System Co-Design for Actor Languages (2017),https://www.doc.ic.ac.uk/~jvicent1/papers/2017/oopsla.pdf
873,Lobsters,plt,Programming Language Theory,Type-Safe Access to Key-Value Stores from a Functional Language (2016),https://www.jstage.jst.go.jp/article/ipsjjip/24/1/24_141/_pdf
874,Lobsters,plt,Programming Language Theory,My Favorite Bug (WadlerFest 2016),http://www.ccs.neu.edu/home/types/resources/pdf/serrano-2016.pdf
875,Lobsters,plt,Programming Language Theory,Reliable and Automatic Composition of Language Extensions to C (2017),http://www-users.cs.umn.edu/~evw/pubs/kaminski17oopsla/kaminski17oopsla.pdf
876,Lobsters,plt,Programming Language Theory,Designing and evaluating programming languages: Dagstuhl trip report,https://medium.com/bits-and-behavior/designing-learnable-teachable-and-productive-programming-languages-dagstuhl-trip-report-81e41bde84bd
877,Lobsters,plt,Programming Language Theory,"Seams: Provably-Safe, Local Edits on Graphs (2017)",http://theory.stanford.edu/~aiken/publications/papers/oopsla17.pdf
878,Lobsters,plt,Programming Language Theory,"""Chunks of Bytecode"", the next chapter in my book ""Crafting Interpreters""",http://www.craftinginterpreters.com/chunks-of-bytecode.html
879,Lobsters,plt,Programming Language Theory,"""Pure Functional Programming in Excel"" by Felienne Hermans (2016)",https://www.youtube.com/watch?v=0yKf8TrLUOw
880,Lobsters,plt,Programming Language Theory,Spiral: A staged functional language for gpu programming,https://github.com/mrakgr/The-Spiral-Language
881,Lobsters,plt,Programming Language Theory,Summer of Cod 2018,https://myrlang.org/summer-of-cod.html
882,Lobsters,plt,Programming Language Theory,The ABC Structure Editor,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.694.3304&rep=rep1&type=pdf
883,Lobsters,plt,Programming Language Theory,"Implementing and Optimizing a Simple, Dependently-Typed Language (2010)",http://publications.lib.chalmers.se/records/fulltext/124826.pdf
884,Lobsters,plt,Programming Language Theory,"Language Constructs for Safe, Parallel Programming on Multicores (2016)",https://pdfs.semanticscholar.org/762e/a8d999410ee9d4341ee41fae995770cdd0dc.pdf
885,Lobsters,plt,Programming Language Theory,Zig: January 2018 in Review,http://andrewkelley.me/post/zig-january-2018-in-review.html
886,Lobsters,plt,Programming Language Theory,We've Already Thought the Unthinkable,https://www.hillelwayne.com/post/thinking-the-unthinkable/
887,Lobsters,plt,Programming Language Theory,Thinking the unthinkable: What we cannot think in programming,http://tomasp.net/blog/2016/thinking-unthinkable/
888,Lobsters,plt,Programming Language Theory,Implicit functors,http://jobjo.github.io//2018/01/28/implicit-functors.html
889,Lobsters,plt,Programming Language Theory,10 short surrealists reflections about code,https://medium.com/@simone.robutti/10-short-surrealists-reflections-about-code-5fe7214f2477
890,Lobsters,plt,Programming Language Theory,"Deny Capabilities for Safe, Fast Actors (2016)",https://blog.acolyer.org/2016/02/17/deny-capabilities/
891,Lobsters,plt,Programming Language Theory,"Why NOT to add the pipeline operator to JavaScript (or TypeScript, etc.)?",https://djedr.github.io/posts/random-2018-01-25.html
892,Lobsters,plt,Programming Language Theory,Crash Course on Notation in Programming Language Theory (2012),http://siek.blogspot.com/2012/07/crash-course-on-notation-in-programming.html
893,Lobsters,plt,Programming Language Theory,Selling Laziness,http://www.usrsb.in/selling-laziness.html
894,Lobsters,plt,Programming Language Theory,Ask: Is it possible to infer a general type signature from a more specific type signature?,https://stackoverflow.com/questions/48460579/is-it-possible-to-infer-a-general-type-signature-from-a-more-specific-type-signa
895,Lobsters,plt,Programming Language Theory,A practitioner’s guide to reading programming languages papers,https://blog.acolyer.org/2018/01/26/a-practitioners-guide-to-reading-programming-languages-papers/
896,Lobsters,plt,Programming Language Theory,Gradual Typing for Smalltalk (2013),https://hal.inria.fr/file/index/docid/862815/filename/Alle13aGradualTyping.pdf
897,Lobsters,plt,Programming Language Theory,Unsafe Zig is Safer Than Unsafe Rust,http://andrewkelley.me/post/unsafe-zig-safer-than-unsafe-rust.html
898,Lobsters,plt,Programming Language Theory,"Curry your calls, uncurry your returns",http://chriswarbo.net/blog/2018-01-24-curry_your_calls_uncurry_your_returns.html
899,Lobsters,plt,Programming Language Theory,Earley Parsing Explained,http://loup-vaillant.fr/tutorials/earley-parsing/
900,Lobsters,plt,Programming Language Theory,How to prove a compiler correct,https://dbp.io/essays/2018-01-16-how-to-prove-a-compiler-correct.html
901,Lobsters,plt,Programming Language Theory,"On Storytelling, by Evan Czaplicki, at Deconstruct 2017 (20 minutes, transcript available)",https://www.deconstructconf.com/2017/evan-czaplicki-on-storytelling
902,Lobsters,plt,Programming Language Theory,What is a programming language?,http://willcrichton.net/notes/what-is-a-programming-language
903,Lobsters,plt,Programming Language Theory,spectre and the end of langsec,https://wingolog.org/archives/2018/01/11/spectre-and-the-end-of-langsec
904,Lobsters,plt,Programming Language Theory,Considerations for programming language design: a rebuttal,https://hackernoon.com/considerations-for-programming-language-design-a-rebuttal-5fb7ef2fd4ba
905,Lobsters,plt,Programming Language Theory,Ask: Type systems in natural languages?,/s/gsafb7/ask_type_systems_natural_languages
906,Lobsters,plt,Programming Language Theory,Tell us why your language sucks (2008),http://www.drmaciver.com/2008/02/tell-us-why-your-language-sucks/
907,Lobsters,plt,Programming Language Theory,One equality operator to rule them all,https://mzabani.wordpress.com/2018/01/02/one-equality-operator-to-rule-them-all/
908,Lobsters,plt,Programming Language Theory,Zig: December 2017 in Review,http://andrewkelley.me/post/zig-december-2017-in-review.html
909,Lobsters,plt,Programming Language Theory,Single-Responsibility Principle done right,http://rcardin.github.io/solid/srp/programming/2017/12/31/srp-done-right.html
910,Lobsters,plt,Programming Language Theory,Call for Papers: MoreVMs 2018,https://2018.programming-conference.org/track/MoreVMs-2018
911,Lobsters,plt,Programming Language Theory,Duck Typing And Async/Await,http://blog.i3arnon.com/2018/01/02/task-enumerable-awaiter/
912,Lobsters,plt,Programming Language Theory,People of Programming Languages,https://www.cs.cmu.edu/~popl-interviews/
913,Lobsters,plt,Programming Language Theory,Should function arguments be reassignable or mutable?,https://mortoray.com/2017/12/31/should-function-arguments-be-reassignable-or-mutable/
914,Lobsters,plt,Programming Language Theory,Not Explicit,https://boats.gitlab.io/blog/post/2017-12-27-things-explicit-is-not/
915,Lobsters,plt,Programming Language Theory,Simple Forth (2004),https://web.archive.org/web/20080612234512/http://www.albany.net/~hello/simple.htm
916,Lobsters,plt,Programming Language Theory,A friendly type predicate,https://akrzemi1.wordpress.com/2017/12/20/a-friendly-type-predicate/
917,Lobsters,plt,Programming Language Theory,I Slipped on JavaScript's Banana Peel,https://bocoup.com/blog/i-slipped-on-javascripts-banana-peel
918,Lobsters,plt,Programming Language Theory,Better Currying in Javascript (2012),http://chriswarbo.net/blog/2012-10-01-better_currying_in_javascript.html
919,Lobsters,plt,Programming Language Theory,People of Programming Languages: Interviews With PL Researchers,https://www.cs.cmu.edu/~popl-interviews/index.html
920,Lobsters,plt,Programming Language Theory,Stateful Contracts for Affine Types (2010),http://users.eecs.northwestern.edu/~jesse/pubs/affine-contracts/
921,Lobsters,plt,Programming Language Theory,On Machine Learning and Programming Languages,https://julialang.org/blog/2017/12/ml&pl
922,Lobsters,plt,Programming Language Theory,Ideology - A talk by Gary Bernhardt from Strange Loop 2015,https://www.destroyallsoftware.com/talks/ideology
923,Lobsters,plt,Programming Language Theory,Introduction to Contract Programming,https://www.hillelwayne.com/post/contracts/
924,Lobsters,plt,Programming Language Theory,Astro - A Multi-Paradigm Compiled Programming Language,https://github.com/AppCypher/Astro
925,Lobsters,plt,Programming Language Theory,"A new programming language, Carp",http://blog.veitheller.de/Carp.html
926,Lobsters,plt,Programming Language Theory,Boa: A Domain-Specific Language for Ultra Large Scale Software Repository Mining (2015),http://boa.cs.iastate.edu/papers/tosem15.pdf
927,Lobsters,plt,Programming Language Theory,Calculating Burn Rates in J,https://www.hillelwayne.com/post/burn-rate-j/
928,Lobsters,plt,Programming Language Theory,"Writing an interpreter, CESK-style",http://matt.might.net/articles/cesk-machines/
929,Lobsters,plt,Programming Language Theory,google/puffs: Parsing Untrusted File Formats Safely,https://github.com/google/puffs
930,Lobsters,plt,Programming Language Theory,Refinement Types in Typed Racket,http://blog.racket-lang.org/2017/11/adding-refinement-types.html
931,Lobsters,plt,Programming Language Theory,A DoS Attack against the C# Compiler,http://www.mattwarren.org/2017/11/08/A-DoS-Attack-against-the-C-Compiler/
932,Lobsters,plt,Programming Language Theory,Semantic integrity checks are the next generation of semantic versioning,http://www.haskellforall.com/2017/11/semantic-integrity-checks-are-next.html
933,Lobsters,plt,Programming Language Theory,"Uber AI Labs Open Sources Pyro, a Deep Probabilistic Programming Language",https://eng.uber.com/pyro/
934,Lobsters,plt,Programming Language Theory,A brief dive into the Pony programming language,https://monades.roperzh.com/pony-programming-language/
935,Lobsters,plt,Programming Language Theory,Data Classes for Java,http://cr.openjdk.java.net/~briangoetz/amber/datum.html
936,Lobsters,plt,Programming Language Theory,Dueling Rhetoric of Clojure and Haskell,http://tech.frontrowed.com/2017/11/01/rhetoric-of-clojure-and-haskell/
