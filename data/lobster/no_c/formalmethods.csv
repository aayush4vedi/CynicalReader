ID,Source,Tag_Code,Tag_Name,Title,Url
1,Lobsters,formalmethods,CSE-Formal methods,An introduction to Formal Verification for Software Systems,https://www.moritz.systems/blog/an-introduction-to-formal-verification/
2,Lobsters,formalmethods,CSE-Formal methods,REMS - Rigorous Engineering of Mainstream Systems,https://www.cl.cam.ac.uk/~pes20/rems/
3,Lobsters,formalmethods,CSE-Formal methods,Edwin Brady Tells Us What's New in Idris 2,https://www.youtube.com/watch?v=nbClauMCeds
4,Lobsters,formalmethods,CSE-Formal methods,Relaxing the Data Initialization Policy of SPARK,https://blog.adacore.com/relaxing-the-data-initialization-policy-of-spark
5,Lobsters,formalmethods,CSE-Formal methods,fbpmn: formal tools for business process modeling,https://github.com/pascalpoizat/fbpmn
6,Lobsters,formalmethods,CSE-Formal methods,Proving Algebraic Datatypes are “Algebraic”,https://soap.coffee/~lthms/posts/AlgebraicDatatypes.html
7,Lobsters,formalmethods,CSE-Formal methods,Weak and Strong Fairness,https://www.hillelwayne.com/post/fairness/
8,Lobsters,formalmethods,CSE-Formal methods,The TodoMVC Showdown: Testing with WebCheck,https://wickstrom.tech/programming/2020/07/02/the-todomvc-showdown-testing-with-webcheck.html
9,Lobsters,formalmethods,CSE-Formal methods,Train Sidings - A TLA+ Example,https://www.heinbockel.eu/2019/12/08/train-sidings-a-tla-example/
10,Lobsters,formalmethods,CSE-Formal methods,Stan - A static analysis tool for Haskell (similar to errorprone for Java),https://github.com/kowainik/stan/blob/master/README.md
11,Lobsters,formalmethods,CSE-Formal methods,Verified Programming with Project Everest,https://www.youtube.com/watch?v=5B7iI2onu8s
12,Lobsters,formalmethods,CSE-Formal methods,SAT solver on top of regex matcher,https://yurichev.com/news/20200621_regex_SAT/
13,Lobsters,formalmethods,CSE-Formal methods,Alive2: Automatic verification of LLVM optimizations,https://github.com/AliveToolkit/alive2
14,Lobsters,formalmethods,CSE-Formal methods,Summer of Zoom – A curated list of remote conferences,http://oktatok.karolyrobert.hu/buday.gergely/summer-of-zoom/
15,Lobsters,formalmethods,CSE-Formal methods,How did software get so reliable without proof?,https://surfingcomplexity.blog/2020/03/02/how-did-software-get-so-reliable-without-proof/
16,Lobsters,formalmethods,CSE-Formal methods,Formal Methods: From Academia to Industrial Practice,https://arxiv.org/abs/2002.07279
17,Lobsters,formalmethods,CSE-Formal methods,seL4 is verified on RISC-V,https://microkerneldude.wordpress.com/2020/06/09/sel4-is-verified-on-risc-v/
18,Lobsters,formalmethods,CSE-Formal methods,Verifying Popcount,https://blog.regehr.org/archives/1667
19,Lobsters,formalmethods,CSE-Formal methods,Using Formal Methods to Eliminate Exploitable Bugs,https://www.youtube.com/watch?v=YyT9BU0aJUE
20,Lobsters,formalmethods,CSE-Formal methods,Using Z3 Theorem on AVR Firmware,https://medium.com/@ryancor/using-z3-theorem-on-avr-firmware-c6d2f45ac9c2
21,Lobsters,formalmethods,CSE-Formal methods,Specifying and Model Checking Workflows of Single Page Applications with TLA+,https://arxiv.org/abs/2005.05627
22,Lobsters,formalmethods,CSE-Formal methods,A beginners step by step guide to Alloy,http://msitko.pl/blog/2020/05/24/guide-to-alloy.html
23,Lobsters,formalmethods,CSE-Formal methods,Open Sourcing the People's Code,https://dev.to/jcastle/open-sourcing-the-people-s-code-13b5
24,Lobsters,formalmethods,CSE-Formal methods,Synthesizing JIT Compilers for In-Kernel DSLs,https://www.cs.utexas.edu/~isil/jitsynth.pdf
25,Lobsters,formalmethods,CSE-Formal methods,Separation Logic (2019),https://cacm.acm.org/magazines/2019/2/234356-separation-logic/fulltext
26,Lobsters,formalmethods,CSE-Formal methods,An introduction to Formal Verification for Software Systems,https://www.moritz.systems/blog/an-introduction-to-formal-verification/
27,Lobsters,formalmethods,CSE-Formal methods,REMS - Rigorous Engineering of Mainstream Systems,https://www.cl.cam.ac.uk/~pes20/rems/
28,Lobsters,formalmethods,CSE-Formal methods,Edwin Brady Tells Us What's New in Idris 2,https://www.youtube.com/watch?v=nbClauMCeds
29,Lobsters,formalmethods,CSE-Formal methods,Relaxing the Data Initialization Policy of SPARK,https://blog.adacore.com/relaxing-the-data-initialization-policy-of-spark
30,Lobsters,formalmethods,CSE-Formal methods,fbpmn: formal tools for business process modeling,https://github.com/pascalpoizat/fbpmn
31,Lobsters,formalmethods,CSE-Formal methods,Proving Algebraic Datatypes are “Algebraic”,https://soap.coffee/~lthms/posts/AlgebraicDatatypes.html
32,Lobsters,formalmethods,CSE-Formal methods,Weak and Strong Fairness,https://www.hillelwayne.com/post/fairness/
33,Lobsters,formalmethods,CSE-Formal methods,The TodoMVC Showdown: Testing with WebCheck,https://wickstrom.tech/programming/2020/07/02/the-todomvc-showdown-testing-with-webcheck.html
34,Lobsters,formalmethods,CSE-Formal methods,Train Sidings - A TLA+ Example,https://www.heinbockel.eu/2019/12/08/train-sidings-a-tla-example/
35,Lobsters,formalmethods,CSE-Formal methods,Stan - A static analysis tool for Haskell (similar to errorprone for Java),https://github.com/kowainik/stan/blob/master/README.md
36,Lobsters,formalmethods,CSE-Formal methods,Verified Programming with Project Everest,https://www.youtube.com/watch?v=5B7iI2onu8s
37,Lobsters,formalmethods,CSE-Formal methods,SAT solver on top of regex matcher,https://yurichev.com/news/20200621_regex_SAT/
38,Lobsters,formalmethods,CSE-Formal methods,Alive2: Automatic verification of LLVM optimizations,https://github.com/AliveToolkit/alive2
39,Lobsters,formalmethods,CSE-Formal methods,Summer of Zoom – A curated list of remote conferences,http://oktatok.karolyrobert.hu/buday.gergely/summer-of-zoom/
40,Lobsters,formalmethods,CSE-Formal methods,How did software get so reliable without proof?,https://surfingcomplexity.blog/2020/03/02/how-did-software-get-so-reliable-without-proof/
41,Lobsters,formalmethods,CSE-Formal methods,Formal Methods: From Academia to Industrial Practice,https://arxiv.org/abs/2002.07279
42,Lobsters,formalmethods,CSE-Formal methods,seL4 is verified on RISC-V,https://microkerneldude.wordpress.com/2020/06/09/sel4-is-verified-on-risc-v/
43,Lobsters,formalmethods,CSE-Formal methods,Verifying Popcount,https://blog.regehr.org/archives/1667
44,Lobsters,formalmethods,CSE-Formal methods,Using Formal Methods to Eliminate Exploitable Bugs,https://www.youtube.com/watch?v=YyT9BU0aJUE
45,Lobsters,formalmethods,CSE-Formal methods,Using Z3 Theorem on AVR Firmware,https://medium.com/@ryancor/using-z3-theorem-on-avr-firmware-c6d2f45ac9c2
46,Lobsters,formalmethods,CSE-Formal methods,Specifying and Model Checking Workflows of Single Page Applications with TLA+,https://arxiv.org/abs/2005.05627
47,Lobsters,formalmethods,CSE-Formal methods,A beginners step by step guide to Alloy,http://msitko.pl/blog/2020/05/24/guide-to-alloy.html
48,Lobsters,formalmethods,CSE-Formal methods,Open Sourcing the People's Code,https://dev.to/jcastle/open-sourcing-the-people-s-code-13b5
49,Lobsters,formalmethods,CSE-Formal methods,Synthesizing JIT Compilers for In-Kernel DSLs,https://www.cs.utexas.edu/~isil/jitsynth.pdf
50,Lobsters,formalmethods,CSE-Formal methods,Separation Logic (2019),https://cacm.acm.org/magazines/2019/2/234356-separation-logic/fulltext
51,Lobsters,formalmethods,CSE-Formal methods,Another Path for Software Quality? Automated Software Verification and OpenBSD,https://doi.asiabsdcon.org/10.25263/asiabsdcon2019/p10b
52,Lobsters,formalmethods,CSE-Formal methods,TLA+ on OpenBSD,https://bronevichok.ru/blog/2020/05/14/tla-plus.html
53,Lobsters,formalmethods,CSE-Formal methods,ZetZ - a symbolic verifier and transpiler to bare metal C,https://github.com/zetzit/zz
54,Lobsters,formalmethods,CSE-Formal methods,A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World (2010),https://cacm.acm.org/magazines/2010/2/69354-a-few-billion-lines-of-code-later/fulltext
55,Lobsters,formalmethods,CSE-Formal methods,Verified sequential malloc/free,https://www.cs.princeton.edu/~appel/papers/memmgr.pdf
56,Lobsters,formalmethods,CSE-Formal methods,CHERI: The Arm Morello Board,https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/cheri-morello.html
57,Lobsters,formalmethods,CSE-Formal methods,Polymorphic Perplexion,https://ucsd-progsys.github.io/liquidhaskell-blog/2020/04/12/polymorphic-perplexion.lhs/
58,Lobsters,formalmethods,CSE-Formal methods,"Cozy, the collection synthesizer",https://github.com/CozySynthesizer/cozy
59,Lobsters,formalmethods,CSE-Formal methods,"Towards Freshness Queries, Unlinkability Queries, Automated Model Translation and Formalized Semantics in Verifpal",https://blog.symbolic.software/2020/04/14/freshness-unlinkability-model-semantics-verifpal/
60,Lobsters,formalmethods,CSE-Formal methods,Announcing: Alloydocs,https://www.hillelwayne.com/post/alloydocs/
61,Lobsters,formalmethods,CSE-Formal methods,Learn Coq in Y minutes,https://learnxinyminutes.com/docs/coq/
62,Lobsters,formalmethods,CSE-Formal methods,Proving equivalence of two functions using CBMC and Z3 SMT-solver,https://yurichev.com/news/20200410_CBMC_etc/
63,Lobsters,formalmethods,CSE-Formal methods,SafeGPU: Contract- and Library-based GPGPU for Object-Oriented Languages (2016),http://se.inf.ethz.ch/people/poskitt/publications/Kolesnichenko-Poskitt-Nanz.COMLAN.2016.pdf
64,Lobsters,formalmethods,CSE-Formal methods,The seL4 Foundation – What and Why,https://microkerneldude.wordpress.com/2020/04/07/the-sel4-foundation-what-and-why/
65,Lobsters,formalmethods,CSE-Formal methods,Synthesizing optimal 8051 code,https://lab.whitequark.org/notes/2020-04-06/synthesizing-optimal-8051-code/
66,Lobsters,formalmethods,CSE-Formal methods,Doing a math assignment with the Lean theorem prover,https://ahelwer.ca/post/2020-04-05-lean-assignment/
67,Lobsters,formalmethods,CSE-Formal methods,How Verifpal Dramatically Sped Up the Formal Modeling Efforts for a New Pandemic-Tracing Protocol,https://blog.symbolic.software/2020/04/05/dp-3t-verifpal/
68,Lobsters,formalmethods,CSE-Formal methods,Vellvm: Verified LLVM,https://www.cis.upenn.edu/~stevez/vellvm/
69,Lobsters,formalmethods,CSE-Formal methods,Let's Prove A Concurrent Blocking Queue (sequel of Let's Prove Leftpad),https://github.com/lemmy/lets-prove-blocking-queue
70,Lobsters,formalmethods,CSE-Formal methods,Proving properties of constant-time crypto code in SPARKNaCl,https://blog.adacore.com/proving-constant-time-crypto-code-in-sparknacl
71,Lobsters,formalmethods,CSE-Formal methods,Idris 2 version 0.1.0 Released,https://www.idris-lang.org/idris-2-version-010-released.html
72,Lobsters,formalmethods,CSE-Formal methods,"Getting a program right, in nine episodes",https://bertrandmeyer.com/2020/03/26/getting-program-right-nine-episodes/
73,Lobsters,formalmethods,CSE-Formal methods,The Subtle Power of Booleans,https://medium.com/@bellmar/the-subtle-power-of-booleans-e6d5fa2fcc4a
74,Lobsters,formalmethods,CSE-Formal methods,A Modular Scheme for Deadlock Prevention in an Object-Oriented Programming Model (2010),http://se.inf.ethz.ch/people/west/deadlock-icfem-2010.pdf
75,Lobsters,formalmethods,CSE-Formal methods,A Study of Clight and its Semantics,https://soap.coffee/~lthms/posts/ClightIntroduction.html
76,Lobsters,formalmethods,CSE-Formal methods,Let's Prove Leftpad,https://github.com/hwayne/lets-prove-leftpad
77,Lobsters,formalmethods,CSE-Formal methods,Sterling: a web-based visualizer for Alloy,https://sterling-js.github.io/
78,Lobsters,formalmethods,CSE-Formal methods,A walkthrough tutorial of TLA+ and its tools: analyzing a blocking queue,https://github.com/lemmy/BlockingQueue
79,Lobsters,formalmethods,CSE-Formal methods,Scaling symbolic evaluation for automated verification of systems code with Serval,https://unsat.cs.washington.edu/papers/nelson-serval.pdf
80,Lobsters,formalmethods,CSE-Formal methods,The Fumble Programmer (2018),https://proteancode.com/wp-content/uploads/2018/02/the_fumble_programmer.pdf
81,Lobsters,formalmethods,CSE-Formal methods,How to check Monocypher by CompCert,https://git.envs.net/mpech/tankf33der/src/branch/master/compcert.md
82,Lobsters,formalmethods,CSE-Formal methods,The 25 most recommended programming books of all-time,https://www.daolf.com/posts/best-programming-books/
83,Lobsters,formalmethods,CSE-Formal methods,Gagallium : Formal proof and analysis of an incremental cycle detection algorithm,http://gallium.inria.fr/blog/incremental-cycle-detection/
84,Lobsters,formalmethods,CSE-Formal methods,Agda vs. Coq vs. Idris,https://whatisrt.github.io/dependent-types/2020/02/18/agda-vs-coq-vs-idris.html
85,Lobsters,formalmethods,CSE-Formal methods,Building Reliable Cloud Services Using P#,https://arxiv.org/abs/2002.04903
86,Lobsters,formalmethods,CSE-Formal methods,Equality in Mechanized Mathematics,https://artagnon.com/articles/equality
87,Lobsters,formalmethods,CSE-Formal methods,Ironsides - DNS server made with Ada SPARK,https://ironsides.martincarlisle.com/
88,Lobsters,formalmethods,CSE-Formal methods,CrossHair: A static analysis tool for Python,https://github.com/pschanely/CrossHair
89,Lobsters,formalmethods,CSE-Formal methods,The natural number game,https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/
90,Lobsters,formalmethods,CSE-Formal methods,Where is the fashionable mathematics?,https://xenaproject.wordpress.com/2020/02/09/where-is-the-fashionable-mathematics/
91,Lobsters,formalmethods,CSE-Formal methods,Survey of Automated Vulnerability Detection and Exploit Generation Techniques in C.R.S.'s (2018),https://arxiv.org/pdf/1702.06162.pdf
92,Lobsters,formalmethods,CSE-Formal methods,Feature Interaction Bugs,https://www.hillelwayne.com/post/feature-interaction/
93,Lobsters,formalmethods,CSE-Formal methods,ZZ is a modern formally provable dialect of C,https://github.com/aep/zz
94,Lobsters,formalmethods,CSE-Formal methods,An inquiry into the Foundations of Mathematics,https://artagnon.com/articles/fom
95,Lobsters,formalmethods,CSE-Formal methods,"John Harrison: let's make set theory great again! [2018, slides]",http://aitp-conference.org/2018/slides/JH.pdf
96,Lobsters,formalmethods,CSE-Formal methods,A mathematical formulation of the tax code?,https://blog.merigoux.ovh/en/2019/12/20/taxes-formal-proofs.html
97,Lobsters,formalmethods,CSE-Formal methods,Getting Started with Verifpal,https://www.youtube.com/watch?v=4__KcGU2ALE
98,Lobsters,formalmethods,CSE-Formal methods,Axiom Documentation: Why Literate Programming?,http://axiom-developer.org/axiom-website/documentation.html
99,Lobsters,formalmethods,CSE-Formal methods,Verifying Arithmetic in Cryptographic C Programs,https://drive.google.com/file/d/1pEgkQbGsOzbzUpZWaqUT3Jjk3H9txgXg/view?usp=sharing
100,Lobsters,formalmethods,CSE-Formal methods,Modular Information Hiding and Type-Safe Linking for C (2008),http://saurabh-srivastava.com/pubs/tse-cmod.pdf
101,Lobsters,formalmethods,CSE-Formal methods,The Business Case for Formal Methods,https://www.hillelwayne.com/post/business-case-formal-methods/
102,Lobsters,formalmethods,CSE-Formal methods,Making Whiley Boogie! (2017),https://homepages.ecs.vuw.ac.nz/~djp/files/IFM17_preprint.pdf
103,Lobsters,formalmethods,CSE-Formal methods,"Using Z: Specification, Refinement, and Proof",http://www.cs.cmu.edu/~15819/zedbook.pdf
104,Lobsters,formalmethods,CSE-Formal methods,ARMY: A Deductive Verification Platform for ARM Programs Using Why3,http://inforum.org.pt/INForum2012/docs/20120013.pdf
105,Lobsters,formalmethods,CSE-Formal methods,Hypermodeling Hyperproperties,https://www.hillelwayne.com/post/hyperproperties/
106,Lobsters,formalmethods,CSE-Formal methods,Synthesizing Loop-Free Programs with Rust and Z3,http://fitzgeraldnick.com/2020/01/13/synthesizing-loop-free-programs.html
107,Lobsters,formalmethods,CSE-Formal methods,VerifAI: A Toolkit for the Formal Design and Analysis of Artificial Intelligence-Based Systems,https://link.springer.com/chapter/10.1007/978-3-030-25540-4_25
108,Lobsters,formalmethods,CSE-Formal methods,Data Abstraction and Relational Program Logic,https://arxiv.org/pdf/1910.14560.pdf
109,Lobsters,formalmethods,CSE-Formal methods,Hyperproperties,https://www.cs.cornell.edu/fbs/publications/Hyperproperties.pdf
110,Lobsters,formalmethods,CSE-Formal methods,Pegasus: A Framework for Sound Continuous Invariant Generation,https://www.cs.cmu.edu/~aplatzer/pub/Pegasus.pdf
111,Lobsters,formalmethods,CSE-Formal methods,Lean versus Coq: The cultural chasm,https://artagnon.com/articles/leancoq
112,Lobsters,formalmethods,CSE-Formal methods,Using Lightweight Modeling To Understand Chord (2012),http://www.pamelazave.com/chord-ccr.pdf
113,Lobsters,formalmethods,CSE-Formal methods,PRaft: Building Provably Safe Distributed Systems using Model Checking,https://people.eecs.berkeley.edu/~kubitron/courses/cs262a-F19/projects/reports/project10_report_ver3.pdf
114,Lobsters,formalmethods,CSE-Formal methods,Alloy4Fun,http://alloy4fun.inesctec.pt/
115,Lobsters,formalmethods,CSE-Formal methods,The TLA+ Toolbox,https://arxiv.org/abs/1912.10633
116,Lobsters,formalmethods,CSE-Formal methods,"Critical Perspectives on Provable Security: Fifteen Years of ""Another Look"" Papers",https://eprint.iacr.org/2019/1336.pdf
117,Lobsters,formalmethods,CSE-Formal methods,TLA+ for startups (part 1),https://medium.com/koodoo/tla-for-startups-part-1-8b162863824b
118,Lobsters,formalmethods,CSE-Formal methods,CompCertM: CompCert with C-Assembly Linking and Lightweight Modular Verification,https://sf.snu.ac.kr/compcertm/
119,Lobsters,formalmethods,CSE-Formal methods,Jupyter kernel for TLA+,https://github.com/kelvich/tlaplus_jupyter
120,Lobsters,formalmethods,CSE-Formal methods,TLA+ model checking made symbolic,https://blog.acolyer.org/2019/11/29/tla-model-checking-made-symbolic/
121,Lobsters,formalmethods,CSE-Formal methods,Formality in requirements: new publication,https://bertrandmeyer.com/2019/11/14/formality-requirements-new-publication/
122,Lobsters,formalmethods,CSE-Formal methods,Automatic Loop Invariant Generation and Refinement through Selective Sampling (2017),https://lijiaying.github.io/papers/ase17.pdf
123,Lobsters,formalmethods,CSE-Formal methods,How to make your papers run: Executable formal semantics for your language,https://www.tweag.io/posts/2019-11-28-pcf-makam-spec
124,Lobsters,formalmethods,CSE-Formal methods,Building Your First Program Synthesizer,https://blog.sigplan.org/2019/11/26/building-your-first-program-synthesizer/
125,Lobsters,formalmethods,CSE-Formal methods,Automatically Testing Implementations of Numerical Abstract Domains (2018),https://mariachris.github.io/Pubs/ASE-2018.pdf
126,Lobsters,formalmethods,CSE-Formal methods,A Clever Way To Find Compiler Bugs,https://rjlipton.wordpress.com/2019/11/19/a-clever-way-to-find-compiler-bugs/
127,Lobsters,formalmethods,CSE-Formal methods,Differentially Testing Soundness and Precision of Program Analyzers,https://arxiv.org/abs/1812.05033
128,Lobsters,formalmethods,CSE-Formal methods,TLA+ Video Course by Leslie Lamport,https://lamport.azurewebsites.net/video/videos.html
129,Lobsters,formalmethods,CSE-Formal methods,Stacked Borrows: An Aliasing Model for Rust (the paper),https://www.ralfj.de/blog/2019/11/18/stacked-borrows-paper.html
130,Lobsters,formalmethods,CSE-Formal methods,Grappling with infinity in constraint solvers,https://tuzz.tech/blog/grappling-with-infinity
131,Lobsters,formalmethods,CSE-Formal methods,A Domain-Specific Language for Verifying Software Requirement Constraints,https://arxiv.org/pdf/1911.02679.pdf
132,Lobsters,formalmethods,CSE-Formal methods,Modeling Systems with TLA+,https://www.youtube.com/watch?v=efCKA-Ug8w4
133,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of a Constant-Time Preserving C Compiler,https://eprint.iacr.org/2019/926
134,Lobsters,formalmethods,CSE-Formal methods,Mutation Analysis for Coq,http://cozy.ece.utexas.edu/mcoq/
135,Lobsters,formalmethods,CSE-Formal methods,Certified concurrent abstraction layers (2018),https://www.cs.columbia.edu/~rgu/publications/pldi18-gu.pdf
136,Lobsters,formalmethods,CSE-Formal methods,Parallel Commits: An Atomic Commit Protocol For Globally Distributed Transactions,https://www.cockroachlabs.com/blog/parallel-commits
137,Lobsters,formalmethods,CSE-Formal methods,Metamath Zero: The Cartesian Theorem Prover,https://arxiv.org/pdf/1910.10703.pdf
138,Lobsters,formalmethods,CSE-Formal methods,Symbolically executing a fuzzy tyrant,https://www.youtube.com/watch?v=zXGPc38FfqQ
139,Lobsters,formalmethods,CSE-Formal methods,A Modular Integration of SAT/SMT Solvers to Coq through Proof Witnesses,https://prosecco.gforge.inria.fr/personal/ckeller/Documents-recherche/Publications/cpp11.pdf
140,Lobsters,formalmethods,CSE-Formal methods,"Haskell Programming With Tests, and Some Alloy",https://staff.fnwi.uva.nl/d.j.n.vaneijck2/courses/10/pdfs/Week6.pdf
141,Lobsters,formalmethods,CSE-Formal methods,Abstract State Machines for the Classroom: The Basics (2007),https://www2.informatik.hu-berlin.de/sam/preprint/reisig203.pdf
142,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of a Vehicle-to-Vehicle (V2V) Messaging System,https://leepike.github.io/pubs/pike-cav18.pdf
143,Lobsters,formalmethods,CSE-Formal methods,Alloy for TLA+ Users,https://youtu.be/tZywZc04lJg?list=PLWLcqZLzY8u_Osnz-YPOVrptG1ys73OkR
144,Lobsters,formalmethods,CSE-Formal methods,EverParse: Verified Secure Zero-Copy Parsers for Authenticated Message Formats,https://www.usenix.org/conference/usenixsecurity19/presentation/delignat-lavaud
145,Lobsters,formalmethods,CSE-Formal methods,Did a small TLA+ exercise. Easier than I thought,http://beza1e1.tuxen.de/tla-plus.html
146,Lobsters,formalmethods,CSE-Formal methods,Learning How to Prove: From the Coq Proof Assistant to Textbook Style,https://arxiv.org/pdf/1803.01466.pdf
147,Lobsters,formalmethods,CSE-Formal methods,Liquidate Your Assets: Reasoning About Resource Usage in Liquid Haskell,http://www.cs.nott.ac.uk/~pszgmh/liquidate.pdf
148,Lobsters,formalmethods,CSE-Formal methods,Formally Modeling Database Migrations,https://www.hillelwayne.com/post/formally-modeling-migrations/
149,Lobsters,formalmethods,CSE-Formal methods,Fuzzing for SMT Solvers,https://kyledewey.github.io/comp490-fall18/lecture/week_9/socal_fall_15.pdf
150,Lobsters,formalmethods,CSE-Formal methods,The Future of Mathematics?,https://www.youtube.com/watch?v=Dp-mQ3HxgDE
151,Lobsters,formalmethods,CSE-Formal methods,Visualizing Abstract Abstract Machines,http://kyleheadley.github.io/PHDWebsite/2019-headley-aamviz-scheme-submit.pdf
152,Lobsters,formalmethods,CSE-Formal methods,Automatic Verification of C and Java Programs: SV-COMP 2019,https://www.sosy-lab.org/research/pub/2019-TACAS.Automatic_Verification_of_C_and_Java_Programs_SV-COMP_2019.pdf
153,Lobsters,formalmethods,CSE-Formal methods,XASM - Extensible Component-Based Abstract State Machines Language (2000),http://xasm.sourceforge.net/XasmAnl00/XasmAnl00.pdf
154,Lobsters,formalmethods,CSE-Formal methods,Categorical Query Language,https://www.categoricaldata.net/
155,Lobsters,formalmethods,CSE-Formal methods,Surprising Theorems (2015),https://gilith.wordpress.com/2015/07/25/surprising-theorems/
156,Lobsters,formalmethods,CSE-Formal methods,Event Modeling: What is it?,https://eventmodeling.org/posts/what-is-event-modeling/
157,Lobsters,formalmethods,CSE-Formal methods,Mechanized Relational Verification of Concurrent Programs with Continuations,https://iris-project.org/pdfs/2019-icfp-logrelcc-final.pdf
158,Lobsters,formalmethods,CSE-Formal methods,CATG: Concolic Test Generation Tool for Java,https://github.com/ksen007/janala2
159,Lobsters,formalmethods,CSE-Formal methods,Fixing a MongoDB Replication Protocol Bug with TLA+ - William Schultz,https://www.youtube.com/watch?v=x9zSynTfLDE
160,Lobsters,formalmethods,CSE-Formal methods,Modeling a read-write version of Texel: an asynchronous consensus algorithm without rounds,http://muratbuffalo.blogspot.com/2019/09/modeling-read-write-version-of-texel.html
161,Lobsters,formalmethods,CSE-Formal methods,Using TLA+ in the Development of ElasticSearch,https://www.youtube.com/watch?v=qYDcbcOVurc
162,Lobsters,formalmethods,CSE-Formal methods,Approximate Normalization for Gradual Dependent Types,https://arxiv.org/pdf/1906.06469.pdf
163,Lobsters,formalmethods,CSE-Formal methods,SMT for state-based formal methods: the ASM case study (2017),http://fm.csl.sri.com/AFM17/AFM17_paper_5.pdf
164,Lobsters,formalmethods,CSE-Formal methods,Formal Specification and Taming Other People's Tech,https://www.youtube.com/watch?v=oMSmkRGzQ64
165,Lobsters,formalmethods,CSE-Formal methods,Finding bugs without running or even looking at code,https://www.youtube.com/watch?v=FvNRlE4E9QQ
166,Lobsters,formalmethods,CSE-Formal methods,Certifying algorithm,https://en.wikipedia.org/wiki/Certifying_algorithm
167,Lobsters,formalmethods,CSE-Formal methods,A Combinatorial Testing Framework for Intuitionistic Propositional Theorem Provers,https://www.cse.unt.edu/~tarau/research/2019/tprover.pdf
168,Lobsters,formalmethods,CSE-Formal methods,Turing Categories,https://golem.ph.utexas.edu/category/2019/08/turing_categories.html
169,Lobsters,formalmethods,CSE-Formal methods,Call-by-Need Is Clairvoyant Call-by-Value,https://www.cs.nott.ac.uk/~pszgmh/clairvoyant.pdf
170,Lobsters,formalmethods,CSE-Formal methods,Finding Code Compatibility Issues with QL,https://blog.semmle.com/python-3-code-compatibility/
171,Lobsters,formalmethods,CSE-Formal methods,Automatic review of abstract state machines by meta property verification (2010),https://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=7EBFB1031F6E48633C055D76631850DF?doi=10.1.1.226.5769&rep=rep1&type=pdf
172,Lobsters,formalmethods,CSE-Formal methods,A predicate transformer semantics for effects,http://www.staff.science.uu.nl/~swier004/publications/2019-icfp-submission-a.pdf
173,Lobsters,formalmethods,CSE-Formal methods,Narcissus: Deriving Correct-By-Construction Decoders and Encoders from Binary Formats,https://arxiv.org/pdf/1803.04870
174,Lobsters,formalmethods,CSE-Formal methods,Improving Railway Data Validation with ProB,https://www3.hhu.de/stups/downloads/pdf/FalampinLeuschelDeployBook.pdf
175,Lobsters,formalmethods,CSE-Formal methods,On the Relationship Between Static Analysis and Type Theory,https://semantic-domain.blogspot.com/2019/08/on-relationship-between-static-analysis.html
176,Lobsters,formalmethods,CSE-Formal methods,Verifpal: Cryptographic Protocol Analysis for Students and Engineers,https://verifpal.com
177,Lobsters,formalmethods,CSE-Formal methods,"Coreboot Coverity, Final [Summer of Code] Update",https://blogs.coreboot.org/blog/2019/08/22/gsoc-coreboot-coverity-final-update/
178,Lobsters,formalmethods,CSE-Formal methods,Sound and Robust Solid Modeling via Exact Real Arithmetic and Continuity,https://people.csail.mit.edu/sherman/papers/icfp19.pdf
179,Lobsters,formalmethods,CSE-Formal methods,Write Fuzzable Code,https://blog.regehr.org/archives/1687
180,Lobsters,formalmethods,CSE-Formal methods,The sharpSAT #SAT Solver,https://sites.google.com/site/marcthurley/sharpsat
181,Lobsters,formalmethods,CSE-Formal methods,HOList: An Environment for Machine Learning of Higher-Order Theorem Proving,https://arxiv.org/pdf/1904.03241.pdf
182,Lobsters,formalmethods,CSE-Formal methods,An experimental tool to convert a subset of Clojure into TLA+,https://github.com/Viasat/salt
183,Lobsters,formalmethods,CSE-Formal methods,Are Lock-Free Concurrent Algorithms Practically Wait-Free? (2014),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/paper-18.pdf
184,Lobsters,formalmethods,CSE-Formal methods,Generating Correctness Proofs with Neural Networks,https://arxiv.org/abs/1907.07794
185,Lobsters,formalmethods,CSE-Formal methods,The Quest for Formally Secure Compartmentalizing Compilation,https://prosecco.gforge.inria.fr/personal/hritcu/talks/2019-01-29-Secure-Compilation-Habil.pdf
186,Lobsters,formalmethods,CSE-Formal methods,"Coq Coq Correct: Verification of Type Checking and Erasure forCoq, in Coq",https://www.irif.fr/~sozeau//research/publications/drafts/Coq_Coq_Correct.pdf
187,Lobsters,formalmethods,CSE-Formal methods,Verifying Constant-Time Implementations (2016),https://michael-emmi.github.io/papers/conf-uss-AlmeidaBBDE16.pdf
188,Lobsters,formalmethods,CSE-Formal methods,Scaling Static Analyses at Facebook,https://cacm.acm.org/magazines/2019/8/238344-scaling-static-analyses-at-facebook/fulltext
189,Lobsters,formalmethods,CSE-Formal methods,Weekend Replication of the STOKE Superoptimizer,https://github.com/bollu/blaze/blob/master/notebooks/tutorial.ipynb
190,Lobsters,formalmethods,CSE-Formal methods,Who Builds a House Without Drawing Blueprints? (2015),https://cacm.acm.org/magazines/2015/4/184705-who-builds-a-house-without-drawing-blueprints/abstract
191,Lobsters,formalmethods,CSE-Formal methods,Mathematical Proof of Algorithm Correctness and Efficiency,https://stackabuse.com/mathematical-proof-of-algorithm-correctness-and-efficiency/
192,Lobsters,formalmethods,CSE-Formal methods,Using Pairwise Testing to Verify Automatically-Generated Formal Specifications (2015),http://www.cs.utep.edu/isalamah/publications/C6.pdf
193,Lobsters,formalmethods,CSE-Formal methods,Practical Symbolic Execution and SATisfiability Module Theories (SMT) 101,http://deniable.org/reversing/symbolic-execution
194,Lobsters,formalmethods,CSE-Formal methods,Modeling Missing Requirements,https://www.hillelwayne.com/post/requirements/
195,Lobsters,formalmethods,CSE-Formal methods,How Do You Explain the Unreasonable Effectiveness of Cloud Security?,http://highscalability.com/blog/2018/9/19/how-do-you-explain-the-unreasonable-effectiveness-of-cloud-s.html
196,Lobsters,formalmethods,CSE-Formal methods,Executable formal semantics for the POSIX shell,https://arxiv.org/abs/1907.05308
197,Lobsters,formalmethods,CSE-Formal methods,TLA+ 1.6.0,https://github.com/tlaplus/tlaplus/releases/tag/v1.6.0
198,Lobsters,formalmethods,CSE-Formal methods,Model Checking a C++ Software Framework: A Case Study,https://arxiv.org/pdf/1907.00172
199,Lobsters,formalmethods,CSE-Formal methods,Pruning the Search Space in Path-based Test Generation (2009),http://sebastien.bardin.free.fr/icst-09.pdf
200,Lobsters,formalmethods,CSE-Formal methods,Using Abstract Interpretation to Correct Synchronization Faults (2017),http://www.cs.yale.edu/homes/ejk/papers/corrective.pdf
201,Lobsters,formalmethods,CSE-Formal methods,It Ain't Necessarily So: Exploring Type Systems for Verifying Musical Correctness,https://www.infoq.com/articles/type-systems-verifying-musical-correctness/
202,Lobsters,formalmethods,CSE-Formal methods,The Next 700 Compiler Correctness Theorems (Functional Pearl),https://dbp.io/pubs/2019/ccc/
203,Lobsters,formalmethods,CSE-Formal methods,A Modular Way to Reason About Iteration (2016),https://hal.inria.fr/hal-01281759v2/document
204,Lobsters,formalmethods,CSE-Formal methods,An Abstract Stack Based Approach to Verified Compositional Compilation to Machine Code,http://flint.cs.yale.edu/flint/publications/sacc.pdf
205,Lobsters,formalmethods,CSE-Formal methods,Runtime Verification for Stochastic Systems (2010),https://dspace.mit.edu/bitstream/handle/1721.1/59701/668414476-MIT.pdf;sequence=2
206,Lobsters,formalmethods,CSE-Formal methods,RISC-V Formal Spec Public Review,https://github.com/riscv/ISA_Formal_Spec_Public_Review/blob/master/README.md
207,Lobsters,formalmethods,CSE-Formal methods,From C to Interaction Trees: Specifying Verifying and Testing of a Networked Server (2018),https://arxiv.org/pdf/1811.11911.pdf
208,Lobsters,formalmethods,CSE-Formal methods,Formal Approaches to Secure Compilation: A Survey of Fully Abstract Compilation,http://theory.stanford.edu/~mp/mp/Publications_files/a125-patrignani.pdf
209,Lobsters,formalmethods,CSE-Formal methods,Solving Knights and Knaves with Z3,https://jamiecollinson.com/blog/solving-knights-and-knaves-with-z3/
210,Lobsters,formalmethods,CSE-Formal methods,Probabilistic Modeling with PRISM,https://www.hillelwayne.com/post/prism/
211,Lobsters,formalmethods,CSE-Formal methods,Modeling tower of hanoi in linear logic,http://boxbase.org/entries/2019/jun/17/hanoi/
212,Lobsters,formalmethods,CSE-Formal methods,CompCertX: verified separate compilation for compositional verification of layered systems (2015),http://gallium.inria.fr/seminaires/transparents/20150824.Tahina.Ramananandro.pdf
213,Lobsters,formalmethods,CSE-Formal methods,A Lightweight Framework for Regular Expression Verification,https://faculty.ist.psu.edu/wu/papers/RE-HASE-2019.pdf
214,Lobsters,formalmethods,CSE-Formal methods,C program proofs with Frama-C and its WP plugin,https://allan-blanchard.fr/publis/frama-c-wp-tutorial-en.pdf
215,Lobsters,formalmethods,CSE-Formal methods,Design and Analysis of Real-Time Systems: Static WCET Analysis (2013),https://embedded.cs.uni-saarland.de/lectures/realtimesystems/overviewWCETAnalysis.pdf
216,Lobsters,formalmethods,CSE-Formal methods,Using a SMT solver to find optimal GBA palettes,https://blog.catboli.com/smt-solver-gba/
217,Lobsters,formalmethods,CSE-Formal methods,FlowPools: A Lock-Free Deterministic Concurrent Dataflow Abstraction (2012),https://infoscience.epfl.ch/record/181098/files/proofs.pdf
218,Lobsters,formalmethods,CSE-Formal methods,Decoupling Lock-Free Data Structures from Memory Reclamation for Static Analysis (2018),https://arxiv.org/pdf/1810.10807.pdf
219,Lobsters,formalmethods,CSE-Formal methods,Verified Compilation on a Verified Processor,https://cakeml.org/pldi19.pdf
220,Lobsters,formalmethods,CSE-Formal methods,Symbolic Deadlock Analysis in Concurrent Libraries and their Clients (2009),https://www.cs.colorado.edu/~srirams/papers/ase2009.pdf
221,Lobsters,formalmethods,CSE-Formal methods,PhASAR: An Inter-Procedural Static Analysis Framework for C/C++,http://www.thewhitespace.de/publications/shb19-phasar.pdf
222,Lobsters,formalmethods,CSE-Formal methods,Von Neumann’s critique of automata theory and logic in computer science,http://www.yodaiken.com/2019/02/20/von-neumanns-critique-of-automata-theory-and-logic-in-computer-science/
223,Lobsters,formalmethods,CSE-Formal methods,Repair and Generation of Formal Models Using Synthesis (2018),https://www.krin.gs/files/papers/krings_repair_by_synthesis_ifm18.pdf
224,Lobsters,formalmethods,CSE-Formal methods,On Post-Compromise Security,https://eprint.iacr.org/2016/221.pdf
225,Lobsters,formalmethods,CSE-Formal methods,Book Review: Practical TLA+,http://www.pathsensitive.com/2019/05/book-review-practical-tla.html
226,Lobsters,formalmethods,CSE-Formal methods,[](BeSuspiciousOfSuccess),https://lemmster.de/tla-liveness-review.html
227,Lobsters,formalmethods,CSE-Formal methods,One Monad to Prove Them All,https://arxiv.org/pdf/1805.08059.pdf
228,Lobsters,formalmethods,CSE-Formal methods,Using SPARK to prove 255-bit Integer Arithmetic from Curve25519,https://blog.adacore.com/using-spark-to-prove-255-bit-integer-arithmetic-from-curve25519
229,Lobsters,formalmethods,CSE-Formal methods,SPLLIFT — Statically Analyzing Software Product Lines in Minutes Instead of Years (2013),https://www.bodden.de/pubs/bmb+13spllift.pdf
230,Lobsters,formalmethods,CSE-Formal methods,Modeling Adversaries with TLA+,https://www.hillelwayne.com/post/adversaries/
231,Lobsters,formalmethods,CSE-Formal methods,Dynamic Programming via Static Incrementalization (2003),https://www3.cs.stonybrook.edu/~stoller/papers/DynProg-HOSC03.pdf
232,Lobsters,formalmethods,CSE-Formal methods,Simulating memory models with herd7,http://diy.inria.fr/doc/herd.html
233,Lobsters,formalmethods,CSE-Formal methods,"Static Analysis of Variability in System Software: The 90,000 #ifdefs Issue",https://www.usenix.org/system/files/conference/atc14/atc14-paper-tartler.pdf
234,Lobsters,formalmethods,CSE-Formal methods,Verifying Popcount,https://blog.regehr.org/archives/1667
235,Lobsters,formalmethods,CSE-Formal methods,A Complete Formal Semantics of x86-64 User-Level Instruction Set Architecture,http://fsl.cs.illinois.edu/index.php/A_Complete_Formal_Semantics_of_x86-64_User-Level_Instruction_Set_Architecture
236,Lobsters,formalmethods,CSE-Formal methods,Turing-Completeness Totally Free,https://personal.cis.strath.ac.uk/conor.mcbride/TotallyFree.pdf
237,Lobsters,formalmethods,CSE-Formal methods,Runway: a tool for distributed systems design,https://runway.systems/
238,Lobsters,formalmethods,CSE-Formal methods,Verifying Concurrent Message-Passing C Programs with Recursive Calls (2006),https://research.cs.wisc.edu/wpis/papers/tacas06.pdf
239,Lobsters,formalmethods,CSE-Formal methods,An Empirical Evaluation of Automated Theorem Provers in Software Certification (2005),https://ti.arc.nasa.gov/m/profile/edenney/papers/ijait.pdf
240,Lobsters,formalmethods,CSE-Formal methods,Specifying and Verifying Concurrent C Programs with TLA+,https://cedric.cnam.fr/fichiers/art_3439.pdf
241,Lobsters,formalmethods,CSE-Formal methods,Rust: beyond the typechecker,https://blog.merigoux.ovh/en/2019/04/16/verifying-rust.html
242,Lobsters,formalmethods,CSE-Formal methods,tiny-tlaplus-examples,https://github.com/lostbearlabs/tiny-tlaplus-examples
243,Lobsters,formalmethods,CSE-Formal methods,Explaining formal proofs,http://boxbase.org/entries/2019/apr/15/explaining-formal-proofs/
244,Lobsters,formalmethods,CSE-Formal methods,Software Verification - An Overview of the State of the Art,https://www.sosy-lab.org/research/prs/2019-04-09_ETAPS19-Software-Verification_Dirk.pdf
245,Lobsters,formalmethods,CSE-Formal methods,Using TLA+ to Model Cascading Failures,https://medium.com/@bellmar/using-tla-to-model-cascading-failures-5d1ebc5e4c4f
246,Lobsters,formalmethods,CSE-Formal methods,Modeling and simulation of cardiac tissue using hybrid I/O automata (2009),https://www3.cs.stonybrook.edu/~grosu/tcs09.pdf
247,Lobsters,formalmethods,CSE-Formal methods,Selfie's Reflections on Formal Verification for TLS 1.3: Largely Opaque,https://nadim.micro.blog/2019/04/11/selfies-reflections-on.html
248,Lobsters,formalmethods,CSE-Formal methods,An Efficient SMT Solver for String Constraints (2016),http://homepage.divms.uiowa.edu/~ajreynol/fmsd16.pdf
249,Lobsters,formalmethods,CSE-Formal methods,Noise Explorer Now Generates Rust Implementations with Formally Verified Primitives,https://moderncrypto.org/mail-archive/noise/2019/002013.html
250,Lobsters,formalmethods,CSE-Formal methods,How the EverCrypt Library Creates Hacker-Proof Cryptography,https://www.quantamagazine.org/how-the-evercrypt-library-creates-hacker-proof-cryptography-20190402/
251,Lobsters,formalmethods,CSE-Formal methods,Static Analysis of Binary Executables Using Structural SVM's (2011),https://papers.nips.cc/paper/3925-static-analysis-of-binary-executables-using-structural-svms.pdf
252,Lobsters,formalmethods,CSE-Formal methods,What do Formal Methods actually Guarantee?,https://medium.com/alacris/what-do-formal-methods-actually-guarantee-d94ae8802be2
253,Lobsters,formalmethods,CSE-Formal methods,Static Taint-Analysis on Binary Executables (2011),http://web.cs.iastate.edu/~weile/cs513x/5.TaintAnalysis2.pdf
254,Lobsters,formalmethods,CSE-Formal methods,Static Analysis of Binary Executables,http://stevehanov.ca/cs842_project.pdf
255,Lobsters,formalmethods,CSE-Formal methods,Verilog Beginner's Tutorial,https://zipcpu.com/tutorial/
256,Lobsters,formalmethods,CSE-Formal methods,Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing,https://www.cs.ucr.edu/~heng/pubs/digfuzz_ndss19.pdf
257,Lobsters,formalmethods,CSE-Formal methods,Type Systems as Macros,http://www.ccs.neu.edu/home/stchang/popl2017/
258,Lobsters,formalmethods,CSE-Formal methods,"What, Why, and How of Formal Methods",https://cloudbootup.com/post/what-why-and-how-of-formal-methods.html
259,Lobsters,formalmethods,CSE-Formal methods,Resource-safe Systems Programming with Embedded Domain Specific Languages,https://eb.host.cs.st-andrews.ac.uk/drafts/dsl-idris.pdf
260,Lobsters,formalmethods,CSE-Formal methods,Souffle: A Datalog Synthesis Tool for Static Analysis,https://souffle-lang.github.io/
261,Lobsters,formalmethods,CSE-Formal methods,Using Formal Methods at Work,https://www.hillelwayne.com/post/using-formal-methods/
262,Lobsters,formalmethods,CSE-Formal methods,Generating Finite State Machines from Abstract State Machines (2002),https://www.microsoft.com/en-us/research/wp-content/uploads/2002/07/issta02.pdf
263,Lobsters,formalmethods,CSE-Formal methods,Finding Error-Handling Bugs in Systems Code Using Static Analysis (2012),http://web.cs.ucdavis.edu/~rubio/includes/ghc11.pdf
264,Lobsters,formalmethods,CSE-Formal methods,Visual Information Flow through C Programs (2010),http://www.gilith.com/talks/ssv2010.pdf
265,Lobsters,formalmethods,CSE-Formal methods,Oxide: The Essence of Rust,https://arxiv.org/pdf/1903.00982.pdf
266,Lobsters,formalmethods,CSE-Formal methods,Generating C code that people actually want to use,http://jonathan.protzenko.fr/2019/01/04/behind-the-scenes.html
267,Lobsters,formalmethods,CSE-Formal methods,Andromeda proof assistant,http://www.andromeda-prover.org/
268,Lobsters,formalmethods,CSE-Formal methods,FOSDEM 2019 - Proof of Pointer Programs with Ownership in SPARK,https://fosdem.org/2019/schedule/event/ada_pointers/
269,Lobsters,formalmethods,CSE-Formal methods,All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution (2010),https://users.ece.cmu.edu/~aavgerin/papers/Oakland10.pdf
270,Lobsters,formalmethods,CSE-Formal methods,"Alloy* - A Higher-Order, Relational, Constraint Solver",https://aleksandarmilicevic.github.io/hola/
271,Lobsters,formalmethods,CSE-Formal methods,Model-Checking an Entire Linux Distribution for Security Vulnerabilities (2005),https://people.eecs.berkeley.edu/~daw/papers/mops-acsac05.pdf
272,Lobsters,formalmethods,CSE-Formal methods,Stream Ring Theory,https://zenodo.org/record/2565243/files/stream-ring-theory.pdf?download=1
273,Lobsters,formalmethods,CSE-Formal methods,Validating a Coordination Protocol with Alloy,https://cloudbootup.com/post/validating-a-coordination-protocol-with-alloy.html
274,Lobsters,formalmethods,CSE-Formal methods,SPARTA: Library with Building Blocks for Abstract Interpretation Tools,https://github.com/facebookincubator/SPARTA#sparta
275,Lobsters,formalmethods,CSE-Formal methods,Stacked Borrows Implemented,https://www.ralfj.de/blog/2018/11/16/stacked-borrows-implementation.html
276,Lobsters,formalmethods,CSE-Formal methods,Reproducing a Memory-Tracking Bug with TLA+,https://medium.com/@fuzz_ai/reproducing-a-memory-tracking-bug-with-tla-35ce0652ce72
277,Lobsters,formalmethods,CSE-Formal methods,Closing the Gap Between Specification and Programming: VDM++ and Scala,http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=CF73DD3EB3173C356B7F9C793235CFBA?doi=10.1.1.432.1999&rep=rep1&type=pdf
278,Lobsters,formalmethods,CSE-Formal methods,Formal Methods Meetup (SF / Bay Area),http://meetu.ps/c/4fSTt/zpyhD/d
279,Lobsters,formalmethods,CSE-Formal methods,Standards We Love,https://www.youtube.com/watch?v=uqan23518Yc
280,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Pipelined Y86-64 Microprocessors with UCLID5 (2018),https://www.cs.cmu.edu/~bryant/pubdir/CMU-CS-18-122.pdf
281,Lobsters,formalmethods,CSE-Formal methods,Modelling Rolling Deployments in Alloy and TypeScript,https://cloudbootup.com/post/rolling-deployments-in-alloy-and-typescript.html
282,Lobsters,formalmethods,CSE-Formal methods,Solving Knights and Knaves with Alloy,https://www.hillelwayne.com/post/knights-knaves/
283,Lobsters,formalmethods,CSE-Formal methods,Program synthesis of a spec with optional manual implementation for parts of the program,/s/gpx0go/program_synthesis_spec_with_optional
284,Lobsters,formalmethods,CSE-Formal methods,The KeY Project,https://www.key-project.org/
285,Lobsters,formalmethods,CSE-Formal methods,"Test Generation from Bounded, Algebraic Specifications Using Alloy (2008)",http://www.di.fc.ul.pt/~mal/QUEST/ICSOFT2011.pdf
286,Lobsters,formalmethods,CSE-Formal methods,Encryption Key Hierarchies in Alloy,https://cloudbootup.com/post/encryption-key-hierarchies-in-alloy.html
287,Lobsters,formalmethods,CSE-Formal methods,Introduction to the Coq Proof Assistant,https://www.youtube.com/watch?v=3WBUHEVr56c
288,Lobsters,formalmethods,CSE-Formal methods,Primitive integers has been merged to master,https://github.com/coq/coq/pull/6914
289,Lobsters,formalmethods,CSE-Formal methods,Runtime Verification in Erlang by Using Contracts,https://arxiv.org/pdf/1808.07937.pdf
290,Lobsters,formalmethods,CSE-Formal methods,Update on JS verification tool JaVerT,/s/1eugne/update_on_js_verification_tool_javert
291,Lobsters,formalmethods,CSE-Formal methods,Bounded Model Checking of C++ Programs based on the Qt Cross-Platform Framework (2017),https://ssvlab.github.io/lucasccordeiro/papers/stvr2017.pdf
292,Lobsters,formalmethods,CSE-Formal methods,Programming Z3,https://theory.stanford.edu/~nikolaj/programmingz3.html
293,Lobsters,formalmethods,CSE-Formal methods,Automated Test Generation and Mutation Testingfor Alloy (2017),https://kaiyuanw.github.io/papers/paper4-icst17.pdf
294,Lobsters,formalmethods,CSE-Formal methods,E-SPARK: Automated Generation of Provably Correct Code from Formally Verified Designs,https://pdfs.semanticscholar.org/481c/d4d2409115429f4b824f370eb08fa338d67a.pdf
295,Lobsters,formalmethods,CSE-Formal methods,Verified tail-recursive addition in Coq,https://gist.github.com/roehst/b63c8d3ea9c077df12a20f126d1a2238
296,Lobsters,formalmethods,CSE-Formal methods,"Coq Users in PariS on Thursday, February 7",https://www.meetup.com/Coq-Users-in-PariS/events/258266635/
297,Lobsters,formalmethods,CSE-Formal methods,"Building A ""Simple"" Distributed System - Formal Verification",https://jack-vanlightly.com/blog/2019/1/27/building-a-simple-distributed-system-formal-verification
298,Lobsters,formalmethods,CSE-Formal methods,LLVMVF: A Generic Approach for Verification of Multicore Software (2013),https://www.cmpe.boun.edu.tr/~sen/publications/jetta13.pdf
299,Lobsters,formalmethods,CSE-Formal methods,A Behavioral Type System for Memory-Leak Freedom,https://www.fos.kuis.kyoto-u.ac.jp/~tanki/papers/memoryleak.pdf
300,Lobsters,formalmethods,CSE-Formal methods,Intro to SPARK,https://learn.adacore.com/courses/intro-to-spark/index.html
301,Lobsters,formalmethods,CSE-Formal methods,Formally Verified Software in the Real World,https://cacm.acm.org/magazines/2018/10/231372-formally-verified-software-in-the-real-world/fulltext
302,Lobsters,formalmethods,CSE-Formal methods,Why Don't People Use Formal Methods?,https://www.hillelwayne.com/post/why-dont-people-use-formal-methods/
303,Lobsters,formalmethods,CSE-Formal methods,Typeful Programming (1991),http://www.lucacardelli.name/Papers/TypefulProg.pdf
304,Lobsters,formalmethods,CSE-Formal methods,Interview with Authors of Paper awarded POPL 2019 Most Influential Paper,https://research.fb.com/popl-2019-most-influential-paper-award-for-research-that-led-to-facebook-infer/
305,Lobsters,formalmethods,CSE-Formal methods,Resources for Teaching with Formal Methods,https://avigad.github.io/formal_methods_in_education/
306,Lobsters,formalmethods,CSE-Formal methods,A Bridge too Far: E.W. Dijkstra and Logic,https://vanemden.wordpress.com/2018/07/21/dijkstra-and-logic/
307,Lobsters,formalmethods,CSE-Formal methods,Introduction to TLA+ Model Checking in the Command Line,https://medium.com/@bellmar/introduction-to-tla-model-checking-in-the-command-line-c6871700a6a2
308,Lobsters,formalmethods,CSE-Formal methods,Noise Explorer: Design and Explore Noise Handshake Patterns,https://noiseexplorer.com
309,Lobsters,formalmethods,CSE-Formal methods,"Automated, Modular, Refinement Reasoning for Concurrent Programs (2015)",https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/parallel-verification-cav15.pdf
310,Lobsters,formalmethods,CSE-Formal methods,"ISA Semantics for ARMv8-A, RISC-V, and CHERI-MIPS",https://www.cl.cam.ac.uk/~pes20/sail/sail-popl2019.pdf
311,Lobsters,formalmethods,CSE-Formal methods,Data Structures and Functional Programming (ocaml and coq),https://www.cs.cornell.edu/courses/cs3110/2017fa/
312,Lobsters,formalmethods,CSE-Formal methods,Safe Programming with Pointers through Stateful Views (2005),https://www.cs.bu.edu/~hwxi/academic/papers/padl05.pdf
313,Lobsters,formalmethods,CSE-Formal methods,Simulation and Formal Verification of x86 Machine-Code Programs that make System Calls,https://www.cs.utexas.edu/users/hunt/FMCAD/FMCAD14/proceedings/18_goel.pdf
314,Lobsters,formalmethods,CSE-Formal methods,"CASM-IR: Uniform ASM-Based I.R. for Model Specification, Execution, and Transformation",https://casm-lang.org/_media/resource/paulweber2018abz/paper.pdf
315,Lobsters,formalmethods,CSE-Formal methods,Scaling the Everest of software security,https://www.microsoft.com/en-us/research/blog/scaling-the-everest-of-software-security-with-dr-jonathan-protzenko/
316,Lobsters,formalmethods,CSE-Formal methods,Proving Memory Operations - A SPARK Journey,https://blog.adacore.com/proving-memory-operations-a-spark-journey
317,Lobsters,formalmethods,CSE-Formal methods,Towards Verification of the Pastry Protocol using TLA+ (2011),https://www.researchgate.net/profile/Tianxiang_Lu/publication/303407921_Towards_Verification_of_the_Pastry_Protocol_using_TLA/links/5742512f08ae9ace84187bac/Towards-Verification-of-the-Pastry-Protocol-using-TLA.pdf?origin=publication_detail
318,Lobsters,formalmethods,CSE-Formal methods,Making Formal Methods Popular: The Crux is Math Education! [2015],http://ceur-ws.org/Vol-1385/paper5.pdf
319,Lobsters,formalmethods,CSE-Formal methods,Using TLA+ to understand Xen vchan,http://roscidus.com/blog/blog/2019/01/01/using-tla-plus-to-understand-xen-vchan/
320,Lobsters,formalmethods,CSE-Formal methods,Programming Synthesis Explained,https://homes.cs.washington.edu/~bornholt/post/synthesis-explained.html
321,Lobsters,formalmethods,CSE-Formal methods,SMT Solvers: Theory and Practice (2008),https://resources.mpi-inf.mpg.de/departments/rg1/conferences/vtsa08/slides/barret2_smt.pdf
322,Lobsters,formalmethods,CSE-Formal methods,Formally certified satisfiability solving (2012),http://ir.uiowa.edu/cgi/viewcontent.cgi?article=3420&context=etd
323,Lobsters,formalmethods,CSE-Formal methods,Leveraging Rust types for modular specification and verification,https://www.research-collection.ethz.ch/handle/20.500.11850/311092
324,Lobsters,formalmethods,CSE-Formal methods,Hoare-style Specifications as Correctness Conditions for Non-linearizable Concurrent Objects,https://arxiv.org/pdf/1509.06220v3
325,Lobsters,formalmethods,CSE-Formal methods,An Efficient Runtime Validation Framework based on the Theory of Refinement (2017),https://arxiv.org/pdf/1703.05317.pdf
326,Lobsters,formalmethods,CSE-Formal methods,Abstract Interpretation in a Nutshell,https://www.di.ens.fr/~cousot/AI/IntroAbsInt.html
327,Lobsters,formalmethods,CSE-Formal methods,The Astrée Static Analyzer,http://www.astree.ens.fr/
328,Lobsters,formalmethods,CSE-Formal methods,"LVC: Linear, Verified Compiler",https://www.ps.uni-saarland.de/~sdschn/LVC.html
329,Lobsters,formalmethods,CSE-Formal methods,Verdi: Formally Verifying Distributed Systems,http://verdi.uwplse.org/
330,Lobsters,formalmethods,CSE-Formal methods,Ten Diverse Formal Models for a CBTC Automatic Train Supervision System,https://arxiv.org/pdf/1803.10324.pdf
331,Lobsters,formalmethods,CSE-Formal methods,Utility Ghost: Gamified redistricting with partisan symmetry,https://arxiv.org/pdf/1812.07377.pdf
332,Lobsters,formalmethods,CSE-Formal methods,"Computer Scientists Close In on Perfect, Hack-Proof Code",https://www.wired.com/2016/09/computer-scientists-close-perfect-hack-proof-code/
333,Lobsters,formalmethods,CSE-Formal methods,Provably Correct Runtime Enforcement of Non-Interference Properties (2006),http://www.seclab.cs.sunysb.edu/seclab/pubs/icics06.pdf
334,Lobsters,formalmethods,CSE-Formal methods,The Kubernetes Scheduler,https://medium.com/@dominik.tornow/the-kubernetes-scheduler-cd429abac02f
335,Lobsters,formalmethods,CSE-Formal methods,Proof-Driven Development (2015),https://arxiv.org/pdf/1512.02102.pdf
336,Lobsters,formalmethods,CSE-Formal methods,Loop Acceleration Technique to Speed Up Verification of Automatically-Generated Plans (2013),http://rpgoldman.goldman-tribe.org/papers/loop-acceleration-sttt-2013.pdf
337,Lobsters,formalmethods,CSE-Formal methods,Verifying Array Manipulating Programs by Tiling (2017),https://isoft.acm.org/winterschool17/presentation-decks/WSSE17-Day3-4-Venky-talks/tiling.pdf
338,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Analog Circuit Parameters across Variation Utilizing SAT (2013),https://www.researchgate.net/profile/Forrest_Brewer/publication/236596088_Formal_Verification_of_Analog_Circuit_Parameters_across_Variation_Utilizing_SAT/links/0f3175307a3fe21e0e000000.pdf
339,Lobsters,formalmethods,CSE-Formal methods,TLA+: 2 phase commit and beyond,http://muratbuffalo.blogspot.com/2018/12/2-phase-commit-and-beyond.html
340,Lobsters,formalmethods,CSE-Formal methods,Refinement to Imperative/HOL (2015),https://www.ssrg.ece.vt.edu/~lammich/pub/itp15_sepref.pdf
341,Lobsters,formalmethods,CSE-Formal methods,TLA+ is hard to learn,https://lorinhochstein.wordpress.com/2018/12/24/tla-is-hard-to-learn/
342,Lobsters,formalmethods,CSE-Formal methods,My hobby: proof engineering,https://www.stephanboyer.com/post/134/my-hobby-proof-engineering
343,Lobsters,formalmethods,CSE-Formal methods,Lean Forward,https://lean-forward.github.io/
344,Lobsters,formalmethods,CSE-Formal methods,"Implementations from Benjamin Pierce's ""Types and Programming Languages"" book",https://github.com/roehst/tapl-implementations
345,Lobsters,formalmethods,CSE-Formal methods,Programming and Reasoning with Algebraic Effects and Dependent Types (2013),https://eb.host.cs.st-andrews.ac.uk/drafts/effects.pdf
346,Lobsters,formalmethods,CSE-Formal methods,Solving murder with Prolog,https://xmonader.github.io/prolog/2018/12/21/solving-murder-prolog.html
347,Lobsters,formalmethods,CSE-Formal methods,Reflections on Industrial Use of Frama-C,https://www.adacore.com/uploads/products/SSAS-Presentations/quality_07_kiniry_zimmerman.pdf
348,Lobsters,formalmethods,CSE-Formal methods,A formally verified transformation to unify multiple nested clocks for a Lustre-like language,http://scis.scichina.com/en/2019/012801.pdf
349,Lobsters,formalmethods,CSE-Formal methods,"Verification of Full, Functional Correctness for Imperative, Linked, Data Structures (2010)",https://dspace.mit.edu/bitstream/handle/1721.1/58078/635496542-MIT.pdf?sequence=2
350,Lobsters,formalmethods,CSE-Formal methods,Verification: Solver-based vs type theory/proof assistant-based,/s/ic7lqv/verification_solver_based_vs_type_theory
351,Lobsters,formalmethods,CSE-Formal methods,A Graphical Language for LTL Motion and Mission Planning (2013),http://www.public.asu.edu/~gfaineko/pub/thesis/srinivas_2013_ms_thesis.pdf
352,Lobsters,formalmethods,CSE-Formal methods,"KeymaeraX: Axiomatic, Theorem Prover for Hybrid Systems",http://www.ls.cs.cmu.edu/KeYmaeraX/index.html
353,Lobsters,formalmethods,CSE-Formal methods,A Gentle Introduction to F*,http://prosecco.gforge.inria.fr/personal/hritcu/teaching/mpri-jan2017/slides/out/01/slides01.html#/sec-a-gentle-introduction-to-f-
354,Lobsters,formalmethods,CSE-Formal methods,Integrating SCR Requirements into Cleanroom Software Engineering (1996),http://prof.kamsties.com/download/isew96.pdf
355,Lobsters,formalmethods,CSE-Formal methods,Verification of Tree-Based Hierarchical Read-Copy Update in the Linux Kernel (2018),http://www.kroening.com/papers/date2018-rcu.pdf
356,Lobsters,formalmethods,CSE-Formal methods,A Verified Implementation of the Bounded List Container,https://link.springer.com/content/pdf/10.1007%2F978-3-319-89960-2_10.pdf
357,Lobsters,formalmethods,CSE-Formal methods,C2TLA++: A translator from C to TLA++,http://tla2014.loria.fr/slides/methni.pdf
358,Lobsters,formalmethods,CSE-Formal methods,A Survey of Symbolic Execution Techniques,https://arxiv.org/pdf/1610.00502.pdf
359,Lobsters,formalmethods,CSE-Formal methods,SIFT: Design and Analysis of Fault-Tolerant Computer for Aircraft Control (1978),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/Design-and-Analysis-of-a-Fault-Tolerant-Computer-for-Aircraft-Control.pdf
360,Lobsters,formalmethods,CSE-Formal methods,Designing Distributed Systems with TLA+,https://www.hillelwayne.com/talks/distributed-systems-tlaplus/
361,Lobsters,formalmethods,CSE-Formal methods,IFC Inside: Retrofitting Languages with Dynamic Information Flow Control (2015),https://cseweb.ucsd.edu/~dstefan/pubs/heule:2015:ifc-inside.pdf
362,Lobsters,formalmethods,CSE-Formal methods,ESBMC 5.0: An Industrial Strength Model Checker,https://ssvlab.github.io/lucasccordeiro/papers/ase2018.pdf
363,Lobsters,formalmethods,CSE-Formal methods,Foundations and Trends in Programming Languages: Program Synthesis,https://www.microsoft.com/en-us/research/wp-content/uploads/2017/10/program_synthesis_now.pdf
364,Lobsters,formalmethods,CSE-Formal methods,Verifying Fixed-Point Digital Filters using SMT - Based Bounded Model Checking,https://arxiv.org/pdf/1305.2892.pdf
365,Lobsters,formalmethods,CSE-Formal methods,MicroTESK (toolkit that automates development of test program generators for microprocessors),http://www.microtesk.org/microtesk/about-microtesk/
366,Lobsters,formalmethods,CSE-Formal methods,CPA-SymExec: Efficient Symbolic Execution in CPAchecker,https://www.sosy-lab.org/research/pub/2018-ASE.CPA-SymExec_Efficient_Symbolic_Execution_in_CPAchecker.pdf
367,Lobsters,formalmethods,CSE-Formal methods,Strange Loop 2018: You are a Program Synthesizer (video + transcript),http://www.pathsensitive.com/2018/12/my-strange-loop-talk-you-are-program.html
368,Lobsters,formalmethods,CSE-Formal methods,List of companies that uses formal methods in software engineering,https://github.com/ligurio/practical-fm
369,Lobsters,formalmethods,CSE-Formal methods,Holistic specifications for robust code,https://www.youtube.com/watch?v=d6w11OvJAzo
370,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Control Systems Properties with Theorem Proving (2014),https://arxiv.org/pdf/1405.7615.pdf
371,Lobsters,formalmethods,CSE-Formal methods,"Certified Verification of Algebraic Properties on Low-Level, Math Constructs in Crypto Lib's",https://acmccs.github.io/papers/p1973-tsaiA.pdf
372,Lobsters,formalmethods,CSE-Formal methods,JaVerT 2.0: Symbolic Execution for JavaScript,https://www.doc.ic.ac.uk/~pg/publications/FragosoSantos2019JaVerT.pdf
373,Lobsters,formalmethods,CSE-Formal methods,"Hierarchical, Timed, Abstract, State Machines for WCET Estimation (2015)",https://hal.archives-ouvertes.fr/hal-01214973/document
374,Lobsters,formalmethods,CSE-Formal methods,Safe Concurrency for Aggregate Objects with Invariants (2005),https://www.microsoft.com/en-us/research/wp-content/uploads/2005/01/SafeConcurrencySEFM2005.pdf
375,Lobsters,formalmethods,CSE-Formal methods,IELE: Formally verified Ethereum VM based on LLVM,https://runtimeverification.com/blog/iele-a-new-virtual-machine-for-the-blockchain/
376,Lobsters,formalmethods,CSE-Formal methods,Simple verification in Idris,https://gist.github.com/roehst/f87af1dabd2699762dec2657a20173f7
377,Lobsters,formalmethods,CSE-Formal methods,Formally-Verified Components for Layered Assurance via LLVM-to-ACL2 Translator,https://www.acsac.org/2013/workshops/law/files/LAW-2013-Davis.pdf
378,Lobsters,formalmethods,CSE-Formal methods,"Formally-Verified, Decentralized, Key-Management Architecture for Wireless Sensor Networks",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.14.7077&rep=rep1&type=pdf
379,Lobsters,formalmethods,CSE-Formal methods,LaTTe : a Laboratory for Type Theory experiments,https://github.com/latte-central/LaTTe
380,Lobsters,formalmethods,CSE-Formal methods,Verifying Safety and Liveness Properties of a Kernelized Web Browser (2010),https://www.microsoft.com/en-us/research/video/verifying-safety-and-liveness-properties-of-a-kernelized-web-browser/
381,Lobsters,formalmethods,CSE-Formal methods,Rooting Routers Using Symbolic Execution,https://papers.mathyvanhoef.com/hitbdxb2018-slides.pdf
382,Lobsters,formalmethods,CSE-Formal methods,ActiveFacts - Natural language schema definition with fact-based modelling,http://dataconstellation.com/ActiveFacts/examples/
383,Lobsters,formalmethods,CSE-Formal methods,Integer overflow and SMT-solvers,https://yurichev.com/blog/int_over/
384,Lobsters,formalmethods,CSE-Formal methods,The ROADRUNNER Dynamic Analysis Framework for Concurrent Programs,https://slang.soe.ucsc.edu/cormac/papers/paste10.pdf
385,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Distributed Checkpointing Using Event-B (2015),http://aircconline.com/ijcsit/V7N5/7515ijcsit04.pdf
386,Lobsters,formalmethods,CSE-Formal methods,Noise-based Testing and Analysis of Multi-threaded C/C++ Programs on the Binary Level,http://www.fit.vutbr.cz/~vojnar/Publications/padtad-12.pdf
387,Lobsters,formalmethods,CSE-Formal methods,CoSMeDis: Distributed Social Media with Formally-Verified Confidentiality,https://www.ieee-security.org/TC/SP2017/papers/201.pdf
388,Lobsters,formalmethods,CSE-Formal methods,SPARK by Example: Adaptation of ACSL by Example to SPARK Ada,https://github.com/tofgarion/spark-by-example
389,Lobsters,formalmethods,CSE-Formal methods,Program Synthesis is Possible in Rust,http://fitzgeraldnick.com/2018/11/15/program-synthesis-is-possible-in-rust.html
390,Lobsters,formalmethods,CSE-Formal methods,Detecting Privacy Leakages w/ Fewer Alerts via Enhanced Data-flow Analysis and Peer Voting,https://wenke.gtisc.gatech.edu/papers/aapl.pdf
391,Lobsters,formalmethods,CSE-Formal methods,A Unified Processor Model for Compiler Verification and Simulation using ASM,http://www.complang.tuwien.ac.at/tbfg/abz2012.pdf
392,Lobsters,formalmethods,CSE-Formal methods,Formal Methods for Kernel Hackers,https://linuxplumbersconf.org/event/2/contributions/60/
393,Lobsters,formalmethods,CSE-Formal methods,Synthesizable Constants,https://blog.regehr.org/archives/1636
394,Lobsters,formalmethods,CSE-Formal methods,XState Version 4 Released,https://gist.github.com/davidkpiano/cf1fb9bdabfabd6acd0f7f08399dce8e
395,Lobsters,formalmethods,CSE-Formal methods,"ISA Semantics for ARMv8-A, RISC-V, and CHERI-MIPS",https://alastairreid.github.io/papers/POPL_19/
396,Lobsters,formalmethods,CSE-Formal methods,Physical Adressing on Real Hardware in Isabelle/HOL,https://blog.systems.ethz.ch/blog/2018/phyiscal-adressing-on-real-hw.html
397,Lobsters,formalmethods,CSE-Formal methods,SMT Solving on an iPhone,https://homes.cs.washington.edu/~bornholt/post/z3-iphone.html
398,Lobsters,formalmethods,CSE-Formal methods,Verifying Concurrent Programs using Contracts (2017),http://www.fit.vutbr.cz/~vojnar/Publications/icst17-contracts.pdf
399,Lobsters,formalmethods,CSE-Formal methods,Statically-Directed Dynamic Automated Test Generation,https://people.eecs.berkeley.edu/~dawnsong/papers/2011%20issta11sandwich.pdf
400,Lobsters,formalmethods,CSE-Formal methods,Concurrent Data Representation Synthesis (2012),http://cse.iitd.ernet.in/~sbansal/csl862-soft/readings/concurrent_data_representation_synthesis.pdf
401,Lobsters,formalmethods,CSE-Formal methods,MACE: Model-inference-Assisted Concolic Exploration for Protocol and Vulnerability Discovery,https://people.eecs.berkeley.edu/~dawnsong/papers/2011%20MACE%20Model%20inference%20Assisted%20Concolic%20Exploration%20for%20Protocol%20and%20Vulnerability%20Discovery.pdf
402,Lobsters,formalmethods,CSE-Formal methods,An Automated Prover for Zermelo-Fraenkel Set Theory in Theorema (2006),https://www3.risc.jku.at/publications/download/risc_314/Paper.pdf
403,Lobsters,formalmethods,CSE-Formal methods,Storm -- A Modern Probabilistic Model Checker,http://www.stormchecker.org/index.html
404,Lobsters,formalmethods,CSE-Formal methods,Binary Heaps Formally Verified in Why3 (2011),https://www.researchgate.net/profile/Asma_Tafat/publication/236898206_Binary_Heaps_Formally_Verified_in_Why3/links/53f1a2cf0cf26b9b7dd0da47/Binary-Heaps-Formally-Verified-in-Why3.pdf?origin=publication_detail
405,Lobsters,formalmethods,CSE-Formal methods,Modeling Message Queues in TLA+,https://www.hillelwayne.com/post/tla-messages/
406,Lobsters,formalmethods,CSE-Formal methods,"Formal Proofs of Tarjan’s Algorithm in Why3, Coq, Isabelle/HOL",https://arxiv.org/pdf/1810.11979.pdf
407,Lobsters,formalmethods,CSE-Formal methods,"Loop invariants: analysis, classification, and examples (2012)",http://se.ethz.ch/~meyer/publications/methodology/invariants.pdf
408,Lobsters,formalmethods,CSE-Formal methods,From Scheme to SMT solvers,http://www.edoput.it/scheme/2018/10/30/smt-and-scheme.html
409,Lobsters,formalmethods,CSE-Formal methods,"CompCert: Integrating and Qualifying a Formally, Verified, Optimizing Compiler",https://www.absint.com/compcert/mtu_compcert_erts_2018.pdf
410,Lobsters,formalmethods,CSE-Formal methods,Reducing the Number of Annotations in a Verification-oriented Imperative Language,https://arxiv.org/pdf/1011.3407.pdf
411,Lobsters,formalmethods,CSE-Formal methods,Domain Theory: the forgotten step in program verification (2012),https://bertrandmeyer.com/2012/04/11/domain-theory-the-forgotten-step-in-program-verification/
412,Lobsters,formalmethods,CSE-Formal methods,"STAR-Vote: A Secure, Transparent, Auditable, and Reliable Voting System",https://www.usenix.org/conference/evtwote13/workshop-program/presentation/Bell
413,Lobsters,formalmethods,CSE-Formal methods,Free & Fair: Open source elections technology,http://freeandfair.us/
414,Lobsters,formalmethods,CSE-Formal methods,The Maude System,http://maude.cs.illinois.edu/w/index.php/The_Maude_System
415,Lobsters,formalmethods,CSE-Formal methods,SMT-based False Positive Elimination in Static Program Analysis (2012),http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.303.2865&rep=rep1&type=pdf
416,Lobsters,formalmethods,CSE-Formal methods,Extracting Symbolic Transitions from TLA+ Specifications,http://forsyte.at/wp-content/uploads/abz2018_full.pdf
417,Lobsters,formalmethods,CSE-Formal methods,Formalising Filesystems in the ACL2 Theorem Prover: an Application to FAT32,https://arxiv.org/pdf/1810.04309.pdf
418,Lobsters,formalmethods,CSE-Formal methods,Practical TLA+ Now Available,https://www.hillelwayne.com/post/practical-tla/
419,Lobsters,formalmethods,CSE-Formal methods,Submitting Haskell functions to Z3,http://newartisans.com/2017/04/haskell-and-z3/
420,Lobsters,formalmethods,CSE-Formal methods,"Practical, Symbolic, Execution Analysis and Methodology for GPU Programs",http://formalverification.cs.utah.edu/theses/pengLi_thesis.pdf
421,Lobsters,formalmethods,CSE-Formal methods,"Some Steps into Verification of Exact, Real Arithmetic (2012)",https://shemesh.larc.nasa.gov/nfm2012/talks/NFM2012_168_173.pdf
422,Lobsters,formalmethods,CSE-Formal methods,Combining Coq and Gappa for Certifying Floating-Point Programs (2009),https://www.lri.fr/~melquion/doc/09-calculemus-article.pdf
423,Lobsters,formalmethods,CSE-Formal methods,An Introduction using Prolog to Specify Programming Language Semantics (2016),https://homepage.cs.uri.edu/faculty/hamel/pubs/fcs16.pdf
424,Lobsters,formalmethods,CSE-Formal methods,Debugging designs with TLA+,http://muratbuffalo.blogspot.com/2018/10/debugging-designs-with-tla.html
425,Lobsters,formalmethods,CSE-Formal methods,Practical and Verifiable C++ Dynamic Cast for Hard Real-Time Systems (2008),http://www.stroustrup.com/fdc_jcse.pdf
426,Lobsters,formalmethods,CSE-Formal methods,Welcome to the WooKey project documentation,https://wookey-project.github.io/
427,Lobsters,formalmethods,CSE-Formal methods,"Formal Proofs, the Fine Print and Side Effects",https://people.eng.unimelb.edu.au/tobym/papers/secdev2018.pdf
428,Lobsters,formalmethods,CSE-Formal methods,Symbolic Crosschecking of Floating-Point and SIMD Code (2011),http://srg.doc.ic.ac.uk/files/papers/kleefp-eurosys-11.pdf
429,Lobsters,formalmethods,CSE-Formal methods,Testing Closed-Source Binary Device Drivers with DDT (2010),http://dslab.epfl.ch/pubs/ddt.pdf
430,Lobsters,formalmethods,CSE-Formal methods,An Open Source Pipelined FFT Generator,https://zipcpu.com/dsp/2018/10/02/fft.html
431,Lobsters,formalmethods,CSE-Formal methods,"Practical, Formal Techniques for Developing LLVM's Peephole Optimizations",https://www.cs.rutgers.edu/~santosh.nagarakatte/david-menendez-phd-thesis.pdf
432,Lobsters,formalmethods,CSE-Formal methods,"Model-based, Trace Checking (2017)",https://arxiv.org/pdf/1111.2825.pdf
433,Lobsters,formalmethods,CSE-Formal methods,"Solvers, Synthesis, and Learning",https://cs.nyu.edu/~barrett/summerschool/seshia.pdf
434,Lobsters,formalmethods,CSE-Formal methods,The RISC Algorithm Language (RISCAL),https://www3.risc.jku.at/research/formal/software/RISCAL/
435,Lobsters,formalmethods,CSE-Formal methods,Semantics-Based Program Verifiers for All Languages (2016),http://fsl.cs.illinois.edu/FSL/papers/2016/stefanescu-park-yuwen-li-rosu-2016-oopsla/stefanescu-park-yuwen-li-rosu-2016-oopsla-public.pdf
436,Lobsters,formalmethods,CSE-Formal methods,Parameterized Notions of Computation (2006),https://bentnib.org/paramnotions-jfp.pdf
437,Lobsters,formalmethods,CSE-Formal methods,"Verige: Verification with Invariant, Generation Engine (2014)",http://spinroot.com/spin/symposia/ws14/spin20140_submission_15.pdf
438,Lobsters,formalmethods,CSE-Formal methods,"Pantagruel: An Unambiguous, Undefined Program Specification Language",https://hexdocs.pm/pantagruel/readme.html
439,Lobsters,formalmethods,CSE-Formal methods,A Universal Control Construct for Abstract State Machines (2016),https://www.uni-ulm.de/fileadmin/website_uni_ulm/iui.inst.170/home/stegmaier/ABZ2016_Stegmaier_UCC.pdf
440,Lobsters,formalmethods,CSE-Formal methods,On Confidentiality-Preserving Real-Time Locking Protocols (2013),https://os.inf.tu-dresden.de/papers_ps/rtas2013-voelp.pdf
441,Lobsters,formalmethods,CSE-Formal methods,"Ready, Set, Verify! Applying hs-to-coq to real-world, Haskell code",https://arxiv.org/pdf/1803.06960.pdf
442,Lobsters,formalmethods,CSE-Formal methods,"E-ACSL, a Runtime Verification Tool for Safety and Security of C Programs (2017)",https://easychair.org/publications/open/t6tV
443,Lobsters,formalmethods,CSE-Formal methods,On Improvements of Low-Deterministic Security (2016),https://pp.ipd.kit.edu/uploads/publikationen/irlsod16.pdf
444,Lobsters,formalmethods,CSE-Formal methods,Sequent Calculus as a Compiler Intermediate Language (2016),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/04/sequent-calculus-icfp16.pdf
445,Lobsters,formalmethods,CSE-Formal methods,Automatic Detection of Concurrency Bugs through Event Ordering Constraints (2014),https://www.date-conference.com/files/proceedings/2014/pdffiles/10.4_1.pdf
446,Lobsters,formalmethods,CSE-Formal methods,Safe Asynchronous Multicore Memory Operations (2012),http://www-users.cs.york.ac.uk/~miked/publications/ASE.11.safe_async.pdf
447,Lobsters,formalmethods,CSE-Formal methods,An appeal to the WHATWG,https://www.more-magic.net/posts/an-appeal-to-whatwg-uri-spec.html
448,Lobsters,formalmethods,CSE-Formal methods,Contracts in OpenBSD (2010),http://kindsoftware.com/documents/reports/Torlakcik10.pdf
449,Lobsters,formalmethods,CSE-Formal methods,Testing the Unthinkable,https://codingagainstchaos.com/2018/07/21/testing-the-unthinkable.html
450,Lobsters,formalmethods,CSE-Formal methods,SOTER: Programming Safe Robotics System using Runtime Assurance,https://arxiv.org/abs/1808.07921
451,Lobsters,formalmethods,CSE-Formal methods,Deriving State Machines from TinyOS Programs using Symbolic Execution (2008),http://web.cs.ucla.edu/~todd/research/ipsn08.pdf
452,Lobsters,formalmethods,CSE-Formal methods,Structuring an Abstract Interpreter through Value and State Abstractions in Frama-C (2017),https://hal.archives-ouvertes.fr/tel-01664726/file/thesis.pdf
453,Lobsters,formalmethods,CSE-Formal methods,esverify: Program Verification for ECMAScript/JavaScript,https://esverify.org/
454,Lobsters,formalmethods,CSE-Formal methods,TLA+ specification of the consistent prefix guarantee,http://muratbuffalo.blogspot.com/2018/08/tla-specification-of-consistent-prefix.html
455,Lobsters,formalmethods,CSE-Formal methods,A mathematical basis for understanding software modularity,http://www.yodaiken.com/2016/02/09/notes-on-modularity-and-algebra-updated/
456,Lobsters,formalmethods,CSE-Formal methods,Compiler Verification Meets Cross-Language Linking via Data Abstraction (2014),https://dspace.mit.edu/bitstream/handle/1721.1/99926/Chlipala_Compiler%20verification.pdf;sequence=1
457,Lobsters,formalmethods,CSE-Formal methods,It’s Doomed; We Can Prove It (2009),https://www.researchgate.net/profile/Martin_Schaef/publication/221268166_It%27s_Doomed_We_Can_Prove_It/links/53e2353e0cf2d79877aa1901/Its-Doomed-We-Can-Prove-It.pdf?origin=publication_detail
458,Lobsters,formalmethods,CSE-Formal methods,A Language-Independent Proof System for Full Program Equivalence (2016),http://fsl.cs.illinois.edu/FSL/papers/2016/ciobaca-lucanu-rusu-rosu-2016-faoc/ciobaca-lucanu-rusu-rosu-2016-faoc-public.pdf
459,Lobsters,formalmethods,CSE-Formal methods,An Overview of the K Framework,http://fsl.cs.illinois.edu/pubs/rosu-serbanuta-2010-jlap-slides-2011-01-14-Iasi.pdf
460,Lobsters,formalmethods,CSE-Formal methods,How to Evaluate the Suitability of a Formal Method for Industrial Deployment? A Survey,https://www.scch.at/de/rse-news/passende-formale-methon?file=files/Dokumente/SCCH_Web/Downloads/Downloads_2015/DownloadBilder/Neu_SCCH-TR-1603_FormalMethodsComparison.pdf
461,Lobsters,formalmethods,CSE-Formal methods,Data-Driven Verification (2016),http://theory.stanford.edu/~aiken/publications/theses/sharma.pdf
462,Lobsters,formalmethods,CSE-Formal methods,Verifying Rust Programs with SMACK,http://soarlab.org/publications/atva2018-bhr.pdf
463,Lobsters,formalmethods,CSE-Formal methods,Z notation,http://formalmethods.wikia.com/wiki/Z_notation
464,Lobsters,formalmethods,CSE-Formal methods,Concurrent Program Verification by Code Transformation: Correctness (2017),http://www.univ-orleans.fr/lifo/prodsci/rapports/RR/RR2017/RR-2017-03.pdf
465,Lobsters,formalmethods,CSE-Formal methods,Towards High Assurance HTML5 Applications (2014),https://pdfs.semanticscholar.org/1fe1/ba4f0e50a5bf5a018075b85c6f74eb3380dc.pdf
466,Lobsters,formalmethods,CSE-Formal methods,The VeriFast Program Verifier,https://github.com/verifast/verifast
467,Lobsters,formalmethods,CSE-Formal methods,A Formally Verified NAT Stack,http://dslab.epfl.ch/pubs/formally-verified-nat-stack.pdf
468,Lobsters,formalmethods,CSE-Formal methods,Formal models of core Elasticsearch algorithms,https://github.com/elastic/elasticsearch-formal-models
469,Lobsters,formalmethods,CSE-Formal methods,Typed Clojure in Theory and Practice,http://ambrosebs.com/talks/proposal.pdf
470,Lobsters,formalmethods,CSE-Formal methods,"Verifying the Correctness of a Compiler for an Imperative, Programming Language (2011)",https://dspace.jaist.ac.jp/dspace/bitstream/10119/9639/5/paper.pdf
471,Lobsters,formalmethods,CSE-Formal methods,"The Specification, Verification, and Implementation of Data Structure in ACL2 (2013)",https://www.computer.org/csdl/proceedings/hicss/2013/4892/00/4892f059.pdf
472,Lobsters,formalmethods,CSE-Formal methods,Proving Flow Security of Sequential Logic via Automatically-Synthesized Relational Invariants,https://www.cc.gatech.edu/~wharris/preprints/hardware-flow.pdf
473,Lobsters,formalmethods,CSE-Formal methods,Abstracting Abstract Machines (2011),http://www.ccs.neu.edu/home/dvanhorn/pubs/vanhorn-might-cacm11.pdf
474,Lobsters,formalmethods,CSE-Formal methods,Formal Specification and Verification of a Microkernel (2010),http://people.cs.ksu.edu/~danielwang/Investigation/Formal_Verification/JD10.pdf
475,Lobsters,formalmethods,CSE-Formal methods,"Koord: Language and analysis for robust, distributed, cyber-physical systems",https://cyphyhouse.github.io/papers/koord.pdf
476,Lobsters,formalmethods,CSE-Formal methods,On Automatically Proving the Correctness of math.h Implementations,https://theory.stanford.edu/~aiken/publications/papers/popl18.pdf
477,Lobsters,formalmethods,CSE-Formal methods,Lean Forward: Usable Computer-Checked Proofs and Computations for Number Theorists,https://lean-forward.github.io/
478,Lobsters,formalmethods,CSE-Formal methods,VeriPhy: Verified Controller Executables from Verified Cyber-Physical Models,http://www.cs.cmu.edu/~bbohrer/pub/pldi18.pdf
479,Lobsters,formalmethods,CSE-Formal methods,Type Theory and Functional Programming (1999),https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/ttfp.pdf
480,Lobsters,formalmethods,CSE-Formal methods,Verifying Optimizations Using SMT Solvers,https://llvm.org/devmtg/2013-11/slides/Lopes-SMT.pdf
481,Lobsters,formalmethods,CSE-Formal methods,BrainCoqulus: A Formally Verified Optimizing Compiler of Lambda Calculus to Brainfuck,https://read.seas.harvard.edu/~kohler/class/cs260r-17/projects/braincoqulus-proposal.pdf
482,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of a Flash Memory Device Driver - An Experience Report (2008),http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.184.1862&rep=rep1&type=pdf
483,Lobsters,formalmethods,CSE-Formal methods,Bonsai: Synthesis-based Reasoning for Type Systems (2017),https://arxiv.org/pdf/1708.00551.pdf
484,Lobsters,formalmethods,CSE-Formal methods,Augmenting Agile with Formal Methods,https://www.hillelwayne.com/post/augmenting-agile/
485,Lobsters,formalmethods,CSE-Formal methods,ViennaTalk and Assertch: Building Lightweight Formal Methods Environments on Pharo 4 (2016),http://www.esug.org/data/ESUG2016/IWST/Papers/IWST_2016_paper_18.pdf
486,Lobsters,formalmethods,CSE-Formal methods,awesome safety critical,https://github.com/stanislaw/awesome-safety-critical
487,Lobsters,formalmethods,CSE-Formal methods,"Declarative GUIs: Simple, Consistent, and Verified",http://www.cs.swan.ac.uk/~csetzer/articles/PPDP18/PPDP18adelsbergerSetzerWalkingshawAccepted.pdf
488,Lobsters,formalmethods,CSE-Formal methods,Lists of Posts Formally Verifying Various Hardware Blocks,http://zipcpu.com
489,Lobsters,formalmethods,CSE-Formal methods,Formal Semantics and Automated Verification for the Border Gateway Protocol (2016),https://conferences.sigcomm.org/sigcomm/2016/files/program/netpl/netpl16-final2.pdf
490,Lobsters,formalmethods,CSE-Formal methods,TLA+ Community Meeting videos,https://www.youtube.com/watch?v=ifFfxRCX_jw&list=PLWLcqZLzY8u_3mDg2cHmduA5wl4J6hNX2
491,Lobsters,formalmethods,CSE-Formal methods,Forvis: A Formal RISC-V ISA Specification,https://github.com/rsnikhil/RISCV-ISA-Spec
492,Lobsters,formalmethods,CSE-Formal methods,Algebraic Principles for Program Correctness Tools in Isabelle HOL (2016),https://www.cl.cam.ac.uk/~vb358/articles/thesis.pdf
493,Lobsters,formalmethods,CSE-Formal methods,Rely-Guarantee Termination and Cost Analyses of Loops with Concurrent Interleavings (2017),http://costa.fdi.ucm.es/papers/costa/AlbertFGM17.pdf
494,Lobsters,formalmethods,CSE-Formal methods,Modular Verification of Programs with Effects and Effect Handlers in Coq,https://hal.inria.fr/hal-01799712/document
495,Lobsters,formalmethods,CSE-Formal methods,"Storm: A Modern, Probabilistic, Model Checker",http://www.stormchecker.org/about.html
496,Lobsters,formalmethods,CSE-Formal methods,Mike Nahas's Coq Tutorial,https://coq.inria.fr/files/nahas_tutorial.v
497,Lobsters,formalmethods,CSE-Formal methods,TLA+ in Isabelle/HOL,https://davecturner.github.io/2018/02/12/tla-in-isabelle.html
498,Lobsters,formalmethods,CSE-Formal methods,How Verified (or Tested) is My Code? Falsification-Driven Verification and Testing,https://agroce.github.io/asej18.pdf
499,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Firmware-Based System-on-Chip Modules (2016),http://www.odbms.org/wp-content/uploads/2017/08/DissFinal_Carlos_Villarraga.pdf
500,Lobsters,formalmethods,CSE-Formal methods,Ask: Do you use generative testing? How would you improve your use of it?,/s/lewzfu/ask_do_you_use_generative_testing_how
501,Lobsters,formalmethods,CSE-Formal methods,Nagini: A Static Verifier for Python,http://pm.inf.ethz.ch/publications/getpdf.php?bibname=Own&id=EilersMueller18.pdf
502,Lobsters,formalmethods,CSE-Formal methods,Formal reasoning about the security of AWS,http://www0.cs.ucl.ac.uk/staff/b.cook/CAV18_invited.pdf
503,Lobsters,formalmethods,CSE-Formal methods,Principled and Practical Web Application Security (2015),https://cseweb.ucsd.edu/~dstefan/pubs/stefan:2015:phdthesis.pdf
504,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Coalescing Graph-Coloring Register Allocation (2010),https://www.cs.princeton.edu/~appel/papers/regalloc.pdf
505,Lobsters,formalmethods,CSE-Formal methods,K Semantics for Assembly Languages: A Case Study (2014),https://www.researchgate.net/publication/262770441_K_Semantics_for_Assembly_Languages_A_Case_Study
506,Lobsters,formalmethods,CSE-Formal methods,"If You’re Not Writing a Program, Don't Use a Programming Language",http://muratbuffalo.blogspot.com/2018/07/if-youre-not-writing-program-dont-use.html
507,Lobsters,formalmethods,CSE-Formal methods,Embedding ACL2 Models in End-User Applications (2013),http://www.cs.utexas.edu/users/jared/publications/2013-doform-embedding/embedding.pdf
508,Lobsters,formalmethods,CSE-Formal methods,Unbounded Data Model Verification Using SMT Solvers (2012),http://www.cs.ucsb.edu/~bultan/publications/ase12.pdf
509,Lobsters,formalmethods,CSE-Formal methods,High-Coverage Hint Generation for Massive Courses,https://people.eecs.berkeley.edu/%7Emangpo/www/papers/61a_hint_Iticse2017.pdf
510,Lobsters,formalmethods,CSE-Formal methods,Let's Prove Leftpad,https://github.com/hwayne/lets-prove-leftpad
511,Lobsters,formalmethods,CSE-Formal methods,"The Past, Present, and Future(s): Verifying Temporal Software Properties",http://heidyk.com/publications/KhlaafFinalThesis.pdf
512,Lobsters,formalmethods,CSE-Formal methods,SAT/SMT by Example,https://yurichev.com/writings/SAT_SMT_by_example.pdf
513,Lobsters,formalmethods,CSE-Formal methods,Translating Clojure to ACL2 Code for Verification (2016),https://ou.edu/content/dam/CoE/CS/Thesis_Dissertations/2016/Summer%2016/2016_Ryan_Ralston_Dissertation.pdf
514,Lobsters,formalmethods,CSE-Formal methods,List of Applications of Set Theory in Computer Science,https://www.quora.com/What-are-the-applications-of-set-theory-in-computer-science
515,Lobsters,formalmethods,CSE-Formal methods,Performance Modelling and Verification of Cloud-based Auto-Scaling Policies (2017),http://www.prismmodelchecker.org/papers/ccgrid17.pdf
516,Lobsters,formalmethods,CSE-Formal methods,The Surprising Security Benefits of End-to-End Formal Proofs,http://www.cccblog.org/2018/06/13/the-surprising-security-benefits-of-end-to-end-formal-proofs/
517,Lobsters,formalmethods,CSE-Formal methods,Catalog of Bad Smells in Design-by-Contract Methodologies with Java Modeling Language (2013),http://oro.open.ac.uk/45530/1/E1EIKI_2013_v7n4_251.pdf
518,Lobsters,formalmethods,CSE-Formal methods,A Framework for the Verification of Certifying Computations (2013),https://ia800406.us.archive.org/24/items/arxiv-1301.7462/1301.7462.pdf
519,Lobsters,formalmethods,CSE-Formal methods,Model-Checking of Statechart Models: Survey and Research Directions (2004),https://arxiv.org/pdf/cs/0407038.pdf
520,Lobsters,formalmethods,CSE-Formal methods,Formally Specifying UIs,https://www.hillelwayne.com/post/formally-specifying-uis/
521,Lobsters,formalmethods,CSE-Formal methods,Rust Distilled: An Expressive Tower of Languages,https://arxiv.org/abs/1806.02693
522,Lobsters,formalmethods,CSE-Formal methods,Semi-Formal Development: The Cardano Wallet,http://www.well-typed.com/blog/2018/05/semi-formal-development/
523,Lobsters,formalmethods,CSE-Formal methods,SpaceSearch: A Library for Building and Verifying Solver-Aided Tools (2017),https://stefanheule.com/papers/icfp17-spacesearch.pdf
524,Lobsters,formalmethods,CSE-Formal methods,The Abstract State Machines Method for Modular Design and Analysis of Programming Languages (2013),http://pages.di.unipi.it/boerger/Papers/Methodology/Cambridge13SurveyPggLgAsm.pdf
525,Lobsters,formalmethods,CSE-Formal methods,Ledger Language Design: Designing and Deploying Formally Verified Public Ledgers,https://eprint.iacr.org/2018/416.pdf
526,Lobsters,formalmethods,CSE-Formal methods,Sketch.systems,https://sketch.systems/
527,Lobsters,formalmethods,CSE-Formal methods,Building Reliable Infrastructure in Rust,https://www.youtube.com/watch?v=hMJEPWcSD8w
528,Lobsters,formalmethods,CSE-Formal methods,TS*: Gradual Typing Embedded Securely in JavaScript [2014],http://prosecco.gforge.inria.fr/personal/karthik/pubs/gradual-typing-embedded-securely-in-javascript-popl14.pdf
529,Lobsters,formalmethods,CSE-Formal methods,Theorem Proving in Lean,https://leanprover.github.io/theorem_proving_in_lean/introduction.html
530,Lobsters,formalmethods,CSE-Formal methods,Survey Paper: Formal Methods for Web Security (2016),http://www.dais.unive.it/~calzavara/papers/jlamp16.pdf
531,Lobsters,formalmethods,CSE-Formal methods,State Machines and Alloy,http://aQute.biz/2018/05/22/State-Machines-And-Alloy.html
532,Lobsters,formalmethods,CSE-Formal methods,Noise Explorer: Design and Explore Noise Security Protocol Handshake Patterns,https://noiseexplorer.com/
533,Lobsters,formalmethods,CSE-Formal methods,Can F* replace Haskell and Coq?,https://www.cryptulf.com/2018/01/15/can-f-replace-haskell-and-coq/
534,Lobsters,formalmethods,CSE-Formal methods,Conc2Seq: A Frama-C Plugin for Verification of Parallel Compositions of C Programs (2016),https://allan-blanchard.fr/publis/bkll_scam_2016.pdf
535,Lobsters,formalmethods,CSE-Formal methods,A Formal Security Analysis of the Signal Messaging Protocol,https://eprint.iacr.org/2016/1013.pdf
536,Lobsters,formalmethods,CSE-Formal methods,Building Robust Dist Systems and Network Protocols Using Adversarial Testing and Behavioral Analysis,https://nds2.ccs.neu.edu/papers/prot_secdev2016.pdf
537,Lobsters,formalmethods,CSE-Formal methods,DSLs for Ethereum Contracts,http://www.michaelburge.us/2018/05/15/ethereum-chess-engine.html
538,Lobsters,formalmethods,CSE-Formal methods,ULTIMATE Program Analysis Framework for C,https://monteverdi.informatik.uni-freiburg.de/tomcat/Website/
539,Lobsters,formalmethods,CSE-Formal methods,Taking on a Challenge in SPARK,https://blog.adacore.com/taking-on-a-challenge-in-spark
540,Lobsters,formalmethods,CSE-Formal methods,From Unit Testing to Formal Proofs,https://www.adampalay.com/blog/2018/05/04/from-unit-testing-to-formal-proofs/
541,Lobsters,formalmethods,CSE-Formal methods,Yet Another Hierarchical State Machine (2004),https://accu.org/index.php/journals/252
542,Lobsters,formalmethods,CSE-Formal methods,Formal Verification With Frama-C: A Case Study in the Space Software Domain (2015),https://repositorio.inesctec.pt/bitstream/123456789/5030/1/P-00K-THC.pdf
543,Lobsters,formalmethods,CSE-Formal methods,A Brief History of Process Algebra (2004),http://alexandria.tue.nl/extra1/wskrap/publichtml/200402.pdf
544,Lobsters,formalmethods,CSE-Formal methods,Counterexample-Guided k-Induction for Fast Bug Detection,https://arxiv.org/pdf/1706.02136.pdf
545,Lobsters,formalmethods,CSE-Formal methods,KRust: A Formal Executable Semantics of Rust,https://arxiv.org/abs/1804.10806
546,Lobsters,formalmethods,CSE-Formal methods,Bidirectional Certified Programming (2017),http://ceur-ws.org/Vol-1827/paper7.pdf
547,Lobsters,formalmethods,CSE-Formal methods,Boosting the Permissiveness of Dynamic Information-Flow Tracking by Testing (2012),https://pdfs.semanticscholar.org/1338/7865d474afa7a8d824bdbecdf24cbd892c7c.pdf
548,Lobsters,formalmethods,CSE-Formal methods,Are functional programs easier to verify than imperative programs?,http://semantic-domain.blogspot.com/2018/04/are-functional-programs-easier-to.html
549,Lobsters,formalmethods,CSE-Formal methods,Source Code Verification for Embedded Systems using Prolog (2016),http://www.montenegros.de/sergio/public/wlp16-verification-of-embedded-with.prolog.pdf
550,Lobsters,formalmethods,CSE-Formal methods,Aggregating verified modules together,http://zipcpu.com/formal/2018/04/23/invariant.html
551,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Obstacle Avoidance and Navigation of Ground Robots (2017),http://symbolaris.com/pub/morerobix.pdf
552,Lobsters,formalmethods,CSE-Formal methods,Refinement Types for TLA+ (2014),http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=A1225244218BDD0A1C5342B3EB59BE1A?doi=10.1.1.710.8907&rep=rep1&type=pdf
553,Lobsters,formalmethods,CSE-Formal methods,"Toward a Framework for Highly Automated Vehicle Safety Validation, Philip Koopman & Michael Wagner",http://users.ece.cmu.edu/~koopman/pubs/koopman18_av_safety_validation.pdf
554,Lobsters,formalmethods,CSE-Formal methods,The Great Theorem Prover Showdown,https://www.hillelwayne.com/post/theorem-prover-showdown/
555,Lobsters,formalmethods,CSE-Formal methods,A Provably Correct Sampler for Probabilistic Programs (2016),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/final.pdf
556,Lobsters,formalmethods,CSE-Formal methods,How to prove a compiler fully abstract,https://dbp.io/essays/2018-04-19-how-to-prove-a-compiler-fully-abstract.html
557,Lobsters,formalmethods,CSE-Formal methods,Learning Assertions to Verify Linked-List Programs (2015),https://www-users.cs.york.ac.uk/~miked/publications/SEFM.15.learning_assertions.pdf
558,Lobsters,formalmethods,CSE-Formal methods,Trace-based Verification of Imperative Programs with I/O (2010),https://gmalecha.github.io/publications/files/jsc-wwv-10.pdf
559,Lobsters,formalmethods,CSE-Formal methods,Design-by-Contract for Specification and Conformance Testing of Distributed Software (2014),https://www.researchgate.net/publication/253790802_Extended_Design-by-Contract_Approach_to_Specification_and_Conformance_Testing_of_Distributed_Software
560,Lobsters,formalmethods,CSE-Formal methods,Œuf: Minimizing the Coq Extraction TCB,http://oeuf.uwplse.org/oeuf-cpp18.pdf
561,Lobsters,formalmethods,CSE-Formal methods,Automatic Generation of Provably Correct Embedded Systems (2012),http://pat.comp.nus.edu.sg/wp-source/resources/publications/pdf/icfem12%20generation.pdf
562,Lobsters,formalmethods,CSE-Formal methods,Model-Driven Performance Evaluation and Formal Verification for Multi-level Embedded System Design,http://hal.upmc.fr/hal-01447148/document
563,Lobsters,formalmethods,CSE-Formal methods,Higher Order Multidimensional Programming,https://cartesianprogramming.files.wordpress.com/2018/03/lambda-montreal-2018-03-07.pdf
564,Lobsters,formalmethods,CSE-Formal methods,Automating Deductive Verification for Weak-Memory Programs,https://arxiv.org/pdf/1703.06368.pdf
565,Lobsters,formalmethods,CSE-Formal methods,Automatic Testing of Symbolic Execution Engines via Program Generation and Testing (2017),https://srg.doc.ic.ac.uk/files/papers/symex-engine-tester-ase-17.pdf
566,Lobsters,formalmethods,CSE-Formal methods,Shipping formally verified crypto code,https://franziskuskiefer.de/post/hacl-nss-integration/
567,Lobsters,formalmethods,CSE-Formal methods,Mechanized Formal Semantics and Verified Compilation for C++ Objects (2012),http://gallium.inria.fr/~tramanan/cxx/
568,Lobsters,formalmethods,CSE-Formal methods,Parallelizing Model Checking Algorithms Using Multi-core and Many-core Architectures,http://www.ntu.edu.sg/home/yangliu/publications/wzmthesis.pdf
569,Lobsters,formalmethods,CSE-Formal methods,Verifying Complex Properties using Symbolic Shape Analysis (2007),https://cs.nyu.edu/wies/publ/verifying_complex_properties_using_symbolic_shape_analysis.pdf
570,Lobsters,formalmethods,CSE-Formal methods,(Some of) my problems with correctness research,https://www.drmaciver.com/2018/04/some-of-my-problems-with-correctness-research/
571,Lobsters,formalmethods,CSE-Formal methods,Formal Specification and Verification of Interactive Systems with Plasticity for Nuclear Plants,https://tel.archives-ouvertes.fr/tel-01253619/document
572,Lobsters,formalmethods,CSE-Formal methods,Type-and-Example-Directed Program Synthesis (2015),http://www.cis.upenn.edu/~stevez/papers/OZ15.pdf
573,Lobsters,formalmethods,CSE-Formal methods,Formal Specification and Verification of Computer Algebra Software (2014),http://www.risc.jku.at/publications/download/risc_4981/main.pdf
574,Lobsters,formalmethods,CSE-Formal methods,"Towards a Verified, Complex, Protocol Stack in a Production Kernel: Method and Demo (2016)",https://www.cs.dartmouth.edu/~trdata/reports/TR2016-803.pdf
575,Lobsters,formalmethods,CSE-Formal methods,Linux kernel memory-model (documentation & tooling),https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1c27b644c0fdbc61e113b8faee14baeb8df32486
576,Lobsters,formalmethods,CSE-Formal methods,Certification of an Instruction Set Simulator [for ARM] (2017),https://tel.archives-ouvertes.fr/tel-00937524/document
577,Lobsters,formalmethods,CSE-Formal methods,Teaching Formal Methods via Automatic Checking of Finite Models (2017),http://www.risc.jku.at/research/formal/software/RISCAL/papers/ThEdu17.8.pdf
578,Lobsters,formalmethods,CSE-Formal methods,Using Models at Runtime to Address Assurance for Self-Adaptive Systems (2014),https://arxiv.org/pdf/1505.00903.pdf
579,Lobsters,formalmethods,CSE-Formal methods,STOKE: A stochastic superoptimizer and program synthesizer (2013-2017),http://stoke.stanford.edu
580,Lobsters,formalmethods,CSE-Formal methods,plspec – A Specification Language for Prolog Data (2017),https://www.krin.gs/files/papers/krings_plspec_declare17.pdf
581,Lobsters,formalmethods,CSE-Formal methods,"Specification, Verification, and Synthesis Using Extended State Machines with Callbacks (2016)",http://www.tuba.ece.ufl.edu/presentations/memocode16.pdf
582,Lobsters,formalmethods,CSE-Formal methods,"Formal Specification, Verification, and Implementation of Fault-Tolerant Systems (2015)",https://pdfs.semanticscholar.org/9858/34aea0f4640620d828b63c7d09964d57097f.pdf
583,Lobsters,formalmethods,CSE-Formal methods,Linux Device Driver Synthesis and Verification (2015),http://etd.library.vanderbilt.edu/available/etd-11172015-221551/unrestricted/YiLi.pdf
584,Lobsters,formalmethods,CSE-Formal methods,Beginner's Luck: A Language for Property-based Generators (2016),https://arxiv.org/pdf/1607.05443.pdf
585,Lobsters,formalmethods,CSE-Formal methods,A Verified Messaging System (2017),https://www.cs.princeton.edu/~wmansky/messaging.pdf
586,Lobsters,formalmethods,CSE-Formal methods,A Design and Verification Methodology for Secure Isolated Regions (2016),https://people.eecs.berkeley.edu/~rsinha/research/pubs/pldi2016.pdf
587,Lobsters,formalmethods,CSE-Formal methods,"Physics, Topology, Logic and Computation: A Rosetta Stone (2009)",https://arxiv.org/pdf/0903.0340.pdf
588,Lobsters,formalmethods,CSE-Formal methods,Setuid Demystified (2002),https://people.eecs.berkeley.edu/~daw/papers/setuid-usenix02.pdf
589,Lobsters,formalmethods,CSE-Formal methods,No ad hoc parser in NeoPG,https://neopg.io/blog/no-ad-hoc-parser/
590,Lobsters,formalmethods,CSE-Formal methods,Synthesis-Based Loose Programming (2010),https://pdfs.semanticscholar.org/d272/645780501ccb188a9bb8b6814bf49cfe871c.pdf
591,Lobsters,formalmethods,CSE-Formal methods,Raytheon - Proof By Games (2013),http://www.dtic.mil/dtic/tr/fulltext/u2/1006449.pdf
592,Lobsters,formalmethods,CSE-Formal methods,Verifying Safety for Neural Networks,http://ai2.ethz.ch/
593,Lobsters,formalmethods,CSE-Formal methods,Specification and Proof of High-level Functional Properties of Bit-level Programs (2016),https://hal.inria.fr/hal-01314876/document
594,Lobsters,formalmethods,CSE-Formal methods,Formal verification of an interior point algorithm instanciation,https://hal.archives-ouvertes.fr/hal-01681134/document
595,Lobsters,formalmethods,CSE-Formal methods,LMS-Verify: Abstraction without Regret for Verified Systems Programming (2017),http://lampwww.epfl.ch/~amin/pub/lms-verify.pdf
596,Lobsters,formalmethods,CSE-Formal methods,Checking Firewall Equivalence with Z3,https://medium.com/@ahelwer/checking-firewall-equivalence-with-z3-c2efe5051c8f
597,Lobsters,formalmethods,CSE-Formal methods,Automating the Verification of Floating-Point Programs (2017),https://hal.inria.fr/hal-01534533/document
598,Lobsters,formalmethods,CSE-Formal methods,Formally Specifying a Package Manager,https://www.hillelwayne.com/post/nix/
599,Lobsters,formalmethods,CSE-Formal methods,ACSL by Example: Towards a Verified C Standard Library (2016),https://www.cs.umd.edu/class/spring2016/cmsc838G/frama-c/ACSL-by-Example-12.1.0.pdf
600,Lobsters,formalmethods,CSE-Formal methods,"A Toolchain for Verified, Ocaml Programs",http://www.cs.ru.nl/~gondelman/toolchain.pdf
601,Lobsters,formalmethods,CSE-Formal methods,Automatic Synthesis of Distributed Protocols (2017),https://www.cis.upenn.edu/~alur/Sigact17.pdf
602,Lobsters,formalmethods,CSE-Formal methods,Model-based Testing of Operating System-Level Security Mechanisms (2016),https://tel.archives-ouvertes.fr/tel-01306992/document
603,Lobsters,formalmethods,CSE-Formal methods,Type-Targeted Testing (2015),https://arxiv.org/pdf/1410.5370
604,Lobsters,formalmethods,CSE-Formal methods,Trustworthy Refactoring via Decomposition and Schemes: A Complex Case Study (2017),https://arxiv.org/pdf/1708.07225.pdf
605,Lobsters,formalmethods,CSE-Formal methods,A Formally Verified NAT (2017),https://vignat.github.io/vignat-paper.pdf
606,Lobsters,formalmethods,CSE-Formal methods,Gödel's First Incompleteness Theorem for Programmers,https://dvt.name/2018/03/12/godels-first-incompleteness-theorem-programmers/
607,Lobsters,formalmethods,CSE-Formal methods,Loopy: Programmable and Formally Verified Loop Transformations (2016),https://repository.upenn.edu/cgi/viewcontent.cgi?article=2061&context=cis_reports
608,Lobsters,formalmethods,CSE-Formal methods,"Social processes, program verification and all that (2009)",https://www.researchgate.net/publication/220173464_Social_processes_program_verification_and_all_that
609,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of a C0 Library for Strings (2006),http://www-wjp.cs.uni-saarland.de/publikationen/St06.pdf
610,Lobsters,formalmethods,CSE-Formal methods,Heap Bounded Assembly Language (2002),http://homepages.inf.ed.ac.uk/da/papers/hbal/hbal.pdf
611,Lobsters,formalmethods,CSE-Formal methods,Automatically Proving Mathematical Theorems with Evolutionary Algorithms and Proof Assistants (2016),https://arxiv.org/pdf/1602.07455.pdf
612,Lobsters,formalmethods,CSE-Formal methods,Executable Formal Specifications with Clojure (2015),http://tampub.uta.fi/bitstream/handle/10024/97597/GRADU-1435576377.pdf;sequence=1
613,Lobsters,formalmethods,CSE-Formal methods,Finding bugs in systems through formalization,https://andy.hammerhartes.de/finding-bugs-in-systems-through-formalization.html
614,Lobsters,formalmethods,CSE-Formal methods,What You Always Wanted to Know about Model Checking of Fault-Tolerant Distributed Algorithms,https://core.ac.uk/download/pdf/80061931.pdf
615,Lobsters,formalmethods,CSE-Formal methods,A Framework for Extending microKanren with Constraints (2016),https://arxiv.org/pdf/1701.00633.pdf
616,Lobsters,formalmethods,CSE-Formal methods,Modelgen: Mining Explicit Information Flow Specifications from Concrete Executions (2015),http://theory.stanford.edu/~aiken/publications/papers/issta15.pdf
617,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Medical Device User Interfaces Using PVS (2017),http://www.harold.thimbleby.net/cv/files/FASE2014.pdf
618,Lobsters,formalmethods,CSE-Formal methods,LTEInspector: A Systematic Approach for Adversarial Testing of 4G LTE,http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_02A-3_Hussain_paper.pdf
619,Lobsters,formalmethods,CSE-Formal methods,A Fully Automatic Theorem Prover with Human-Style Output (2017),https://link.springer.com/content/pdf/10.1007%2Fs10817-016-9377-1.pdf
620,Lobsters,formalmethods,CSE-Formal methods,An Invitation to the SETL Language (2004),https://www.linuxjournal.com/article/6805
621,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of C Programs with Floating-Point Computations (2016),https://cps-vo.org/file/24497/download/78851
622,Lobsters,formalmethods,CSE-Formal methods,How to Get an Efficient yet Verified Arbitrary-Precision Integer Library (2017),https://hal.inria.fr/hal-01519732/file/main.pdf
623,Lobsters,formalmethods,CSE-Formal methods,From Verification to Implementation: A Model Translation Tool and Pacemaker Case Study (2012),https://repository.upenn.edu/cgi/viewcontent.cgi?referer=https://duckduckgo.com/&httpsredir=1&article=1063&context=mlab_papers
624,Lobsters,formalmethods,CSE-Formal methods,Survey of Existing Tools for Formal Verification (2014),http://prod.sandia.gov/techlib/access-control.cgi/2014/1420533.pdf
625,Lobsters,formalmethods,CSE-Formal methods,Automated Verification of Functional Correctness of Race-Free GPU Programs (2017),http://www.fos.kuis.kyoto-u.ac.jp/~kozima/paper/auto-verif-gpu.pdf
626,Lobsters,formalmethods,CSE-Formal methods,Testing First-Order Logic Axioms in Program Verification (2011),https://ti.arc.nasa.gov/m/profile/edenney/papers/testing-axioms_final.pdf
627,Lobsters,formalmethods,CSE-Formal methods,Modular Semi-automatic Formal Verification of Critical Systems Software (2017),https://lirias.kuleuven.be/bitstream/123456789/591994/1/phd-willem-penninckx.pdf
628,Lobsters,formalmethods,CSE-Formal methods,Liquid Haskell Tutorial,https://liquid.kosmikus.org/
629,Lobsters,formalmethods,CSE-Formal methods,How to Write a Proof (1993) Lamport,http://lamport.azurewebsites.net/pubs/lamport-how-to-write.pdf
630,Lobsters,formalmethods,CSE-Formal methods,Vulcan: A Javascript Automated Proof System,https://rmarcus.info/blog/2015/09/02/vulcan.html
631,Lobsters,formalmethods,CSE-Formal methods,Loop invariant inference from postconditions in EVE (2013),http://se.inf.ethz.ch/student_projects/michael_ameri/report.pdf
632,Lobsters,formalmethods,CSE-Formal methods,Combining Symbolic Execution and Model Checking for Data Flow Testing (2015),http://web.cs.ucdavis.edu/~su/publications/icse15-dft.pdf
633,Lobsters,formalmethods,CSE-Formal methods,"Seams: Provably-Safe, Local Edits on Graphs (2017)",http://theory.stanford.edu/~aiken/publications/papers/oopsla17.pdf
634,Lobsters,formalmethods,CSE-Formal methods,Social Processes and Proofs of Theorems and Programs (1979),http://www.cs.cmu.edu/~pattis/misc/socialproofs.pdf
635,Lobsters,formalmethods,CSE-Formal methods,Invariant-Based Programming (2006),http://users.abo.fi/backrj/Seminar%20presentations/FM08TutorialInvariants.pdf
636,Lobsters,formalmethods,CSE-Formal methods,A Gentle Introduction to Formal Verification by Abstract Interpretation (2009),http://www.di.ens.fr/~cousot/publications.www/CousotCousot-Marktoberdorf-2009.pdf
637,Lobsters,formalmethods,CSE-Formal methods,Practical Applications of Model-Checking in the Finnish Nuclear Industry (2017),http://www.vtt.fi/inf/julkaisut/muut/2017/OA-Practical_applications_of_model_checking.pdf
638,Lobsters,formalmethods,CSE-Formal methods,Komodo: Using Verification to Disentangle Secure-Enclave Hardware from Software (2017),https://www.microsoft.com/en-us/research/wp-content/uploads/2017/10/komodo.pdf
639,Lobsters,formalmethods,CSE-Formal methods,"Writing Practical, Memory Management Code with a Strictly-Typed, Assembly Language (2006)",http://web.yl.is.s.u-tokyo.ac.jp/~tosh/talk/talk.pdf
640,Lobsters,formalmethods,CSE-Formal methods,Proofs (and Refutations) using Z3,https://blog.janestreet.com/proofs-and-refutations-using-z3/
641,Lobsters,formalmethods,CSE-Formal methods,Identifying Security Critical Properties for the Dynamic Verification of a Processor (2017),https://cs.unc.edu/~csturton/papers/ASPLOS2017Zhang.pdf
642,Lobsters,formalmethods,CSE-Formal methods,"Safe, Low-Level, Code Generation in Coq Using Monomorphization and Monadification",https://staff.aist.go.jp/tanaka-akira/succinct/slide-pro114.pdf
643,Lobsters,formalmethods,CSE-Formal methods,Java Generics are Turing Complete,https://arxiv.org/pdf/1605.05274.pdf
644,Lobsters,formalmethods,CSE-Formal methods,"Formal Verification, Casually Explained",https://medium.com/@ahelwer/formal-verification-casually-explained-3fb4fef2e69a
645,Lobsters,formalmethods,CSE-Formal methods,Software Verification: Testing vs Model-Checking - Comparative Evaluation of State of the Art (2017),https://www.sosy-lab.org/research/pub/2017-HVC.Software_Verification_Testing_vs_Model_Checking.pdf
646,Lobsters,formalmethods,CSE-Formal methods,Modeling Redux with TLA+,https://www.hillelwayne.com/post/tla-redux/
647,Lobsters,formalmethods,CSE-Formal methods,"Authentication vulnerability in most recent 5G drafts, found by formal methods",https://www.cs.ox.ac.uk/5G-analysis/
648,Lobsters,formalmethods,CSE-Formal methods,Verification of Goroutines Using Why3 (2016),http://www.ru.nl/publish/pages/769526/marc_schoolderman.pdf
649,Lobsters,formalmethods,CSE-Formal methods,"Typed, Template Coq: Certified Meta-Programming in Coq",https://popl18.sigplan.org/event/coqpl-2018-typed-template-coq
650,Lobsters,formalmethods,CSE-Formal methods,Refinement Types in Ruby,https://nikivazou.github.io/static/VMCAI18/paper.pdf
651,Lobsters,formalmethods,CSE-Formal methods,The HACMS Program: Using Formal Methods to Eliminate Exploitable Bugs (2017),http://rsta.royalsocietypublishing.org/content/375/2104/20150401
652,Lobsters,formalmethods,CSE-Formal methods,Rust's ownership model formally proven with Coq,https://dl.acm.org/citation.cfm?doid=3177123.3158154
653,Lobsters,formalmethods,CSE-Formal methods,"Complx: A Verification Framework for Concurrent, Imperative Programs (2017)",https://ts.data61.csiro.au/publications/nicta_full_text/9528.pdf
654,Lobsters,formalmethods,CSE-Formal methods,Electrum: Lightweight Specification and Analysis of Dynamic Systems with Rich Configurations,https://hal.archives-ouvertes.fr/hal-01355062/file/electrum.pdf
655,Lobsters,formalmethods,CSE-Formal methods,The Notion of Proof in Hardware Verification (draft) (1989),http://www.cl.cam.ac.uk/archive/mjcg/papers/AvraProofPaper.pdf
656,Lobsters,formalmethods,CSE-Formal methods,How to move career into formal verification without previous experience?,/s/cmojmo/how_move_career_into_formal_verification
657,Lobsters,formalmethods,CSE-Formal methods,Automated Verification of RISC-V Kernel Code (2016),https://courses.cs.washington.edu/courses/cse599w/16sp/projects/riscv.pdf
658,Lobsters,formalmethods,CSE-Formal methods,Formal Semantics for C++ (2007),https://ts.data61.csiro.au/publications/nicta_full_text/1203.pdf
659,Lobsters,formalmethods,CSE-Formal methods,Total Haskell is Reasonable Coq,https://www.cis.upenn.edu/~criz/publications/hs_to_coq.pdf
660,Lobsters,formalmethods,CSE-Formal methods,A Cryptographic Analysis of the WireGuard Protocol,https://eprint.iacr.org/2018/080.pdf
661,Lobsters,formalmethods,CSE-Formal methods,Genetic Programming + Proof Search = Automatic Improvement (2015),https://link.springer.com/content/pdf/10.1007%2Fs10817-017-9409-5.pdf
662,Lobsters,formalmethods,CSE-Formal methods,New Computational Proof Results of WireGuard Protocol from Dowling and Paterson,https://lists.zx2c4.com/pipermail/wireguard/2018-January/002333.html
663,Lobsters,formalmethods,CSE-Formal methods,"Natural Synthesis of Provably-Correct, Data-Structure Manipulations (2017)",https://engineering.purdue.edu/~xqiu/natural-synthesis.pdf
664,Lobsters,formalmethods,CSE-Formal methods,Hyperkernel: Push-Button Verification of an OS Kernel (2017),https://homes.cs.washington.edu/~helgi/papers/hyperkernel.pdf
665,Lobsters,formalmethods,CSE-Formal methods,Capsules and Types in Fresco (1991),http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=244865431ADC032AB6D11A216BFE35C7?doi=10.1.1.37.2387&rep=rep1&type=pdf
666,Lobsters,formalmethods,CSE-Formal methods,How to prove a compiler correct,https://dbp.io/essays/2018-01-16-how-to-prove-a-compiler-correct.html
667,Lobsters,formalmethods,CSE-Formal methods,"A Scalable, Formal Method for Design and Automatic Checking of User Interfaces (2001)",http://home.deib.polimi.it/sanpietr/pubs/Gedisac-ACMTosem.pdf
668,Lobsters,formalmethods,CSE-Formal methods,Automatically Proving Termination and Memory Safety for Programs with Pointer Arithmetic (2017),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/10/Automatically_Proving_Termination_and_Memory_Safety_for_Programs_with_Pointer_Arithmetic.pdf
669,Lobsters,formalmethods,CSE-Formal methods,Formally Verified Cryptographic Primitive Implementations in WireGuard,https://lists.zx2c4.com/pipermail/wireguard/2018-January/002304.html
670,Lobsters,formalmethods,CSE-Formal methods,"Specifying and Proving Correctness of Linux, Kernel Components with ACSL (2017)",http://linuxtesting.org/downloads/20170530-ispras-astraver.pdf
671,Lobsters,formalmethods,CSE-Formal methods,Some Goals for High-impact Verified Compiler Research,https://blog.regehr.org/archives/1565
672,Lobsters,formalmethods,CSE-Formal methods,The Three Levels of Software: Why code that never goes wrong can still be wrong,http://www.pathsensitive.com/2018/01/the-three-levels-of-software-why-code.html
673,Lobsters,formalmethods,CSE-Formal methods,"IELE: A New, Virtual Machine for the Blockchain (2017)",https://runtimeverification.com/blog/?p=498
674,Lobsters,formalmethods,CSE-Formal methods,Let's Prove Random Games are Winnable (with Formal Methods),https://www.hillelwayne.com/post/alloy-randomizer/
675,Lobsters,formalmethods,CSE-Formal methods,Verifying Bubble Sort in Whiley,http://whiley.org/2017/12/19/verifying-bubble-sort-in-whiley/
676,Lobsters,formalmethods,CSE-Formal methods,Why you should use modeling [with TLA+/PlusCal],http://muratbuffalo.blogspot.com/2018/01/why-you-should-use-modeling-with.html
677,Lobsters,formalmethods,CSE-Formal methods,Capturing program invariants in ATS,https://bluishcoder.co.nz/2018/01/10/capturing-program-invariants-in-ats.html
678,Lobsters,formalmethods,CSE-Formal methods,Software Crisis: The Next Generation,http://habitatchronicles.com/2016/10/software-crisis-the-next-generation/
679,Lobsters,formalmethods,CSE-Formal methods,Writing basic proofs in ATS,https://bluishcoder.co.nz/2018/01/03/writing-basic-proofs-in-ats.html
680,Lobsters,formalmethods,CSE-Formal methods,"Formally-Verified Interpreter for a Shell-like, Programming Language (2017)",https://hal-univ-diderot.archives-ouvertes.fr/hal-01534747/document
681,Lobsters,formalmethods,CSE-Formal methods,"ERC20-K: Formal, Executable Specification of ERC20",https://runtimeverification.com/blog/?p=496
682,Lobsters,formalmethods,CSE-Formal methods,Proofsweeper: Play Minesweeper by formally proving your moves in Idris,https://github.com/A1kmm/proofsweeper
683,Lobsters,formalmethods,CSE-Formal methods,"Applying ""Design by Contract"" (1992)",http://se.ethz.ch/~meyer/publications/computer/contract.pdf
684,Lobsters,formalmethods,CSE-Formal methods,Formal Verification: The Gap Between Perfect Code and Reality,https://raywang.tech/2017/12/20/Formal-Verification:-The-Gap-between-Perfect-Code-and-Reality/
685,Lobsters,formalmethods,CSE-Formal methods,"Solving the “Wolf, Sheep and Cabbage” problem using TLA+ and the TLC model checker",https://medium.com/@jparreira/solving-the-wolf-sheep-and-cabbage-problem-using-tla-and-the-tlc-model-checker-28271a5afdfc
686,Lobsters,formalmethods,CSE-Formal methods,Introduction to Software Verification,https://www.youtube.com/watch?v=dGsD_K-IAgA&t=680s
687,Lobsters,formalmethods,CSE-Formal methods,Runtime error in formally verified CompCert C compiler's parser,https://github.com/AbsInt/CompCert/issues/211
688,Lobsters,formalmethods,CSE-Formal methods,Refinement Reflection: Complete Verification with SMT (2017),https://arxiv.org/pdf/1711.03842.pdf
689,Lobsters,formalmethods,CSE-Formal methods,A Practical Comparison of Alloy and Spin [2015],http://web2.research.att.com/export/sites/att_labs/people/Zave_Pamela/custom/compare.pdf
690,Lobsters,formalmethods,CSE-Formal methods,"Construction and Formal Verification of Fault-Tolerant, Distributed, Mutual Exclusion (2017)",https://icfp17.sigplan.org/event/erlang-2017-papers-construction-and-formal-verification-of-a-fault-tolerant-distributed-mutual-exclusion-algorithm
691,Lobsters,formalmethods,CSE-Formal methods,Finding bugs in Haskell code by proving it,https://www.joachim-breitner.de/blog/734-Finding_bugs_in_Haskell_code_by_proving_it
692,Lobsters,formalmethods,CSE-Formal methods,People of Programming Languages: Interviews With PL Researchers,https://www.cs.cmu.edu/~popl-interviews/index.html
693,Lobsters,formalmethods,CSE-Formal methods,Verification of Erlang Programs using Abstract Interpretation and Model Checking (2001),https://pdfs.semanticscholar.org/8174/3408a73d77c83cc88d6d9be8f994a0d2f4f2.pdf
694,Lobsters,formalmethods,CSE-Formal methods,Design as the art of abstraction,https://satyasm.github.io/design/tla/abstraction/2017/12/04/abstraction-tla.html
695,Lobsters,formalmethods,CSE-Formal methods,Refinement Reflection: Complete Verification with SMT,https://arxiv.org/abs/1711.03842
696,Lobsters,formalmethods,CSE-Formal methods,"The New QuickCheck: Random, Exhaustive, and Symbolic Testing Under One Roof (2012)",http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.230.6416
697,Lobsters,formalmethods,CSE-Formal methods,"Compile Idris to Vimscript, like you always wanted",https://github.com/owickstrom/idris-vimscript
698,Lobsters,formalmethods,CSE-Formal methods,A Type-Safe Apparatus Executing Higher-Order Functions in Conjunction with Hardware Error Tolerance,http://arro.anglia.ac.uk/581958/1/Kimmitt%20thesis_web.pdf
699,Lobsters,formalmethods,CSE-Formal methods,Extracting Automata from Recurrent Neural Networks Using Queries and Counterexamples,https://arxiv.org/abs/1711.09576
700,Lobsters,formalmethods,CSE-Formal methods,Model-Based Testing with Logical Properties vs State Machines (2011),https://www.researchgate.net/publication/235900230_Model_Based_Testing_with_Logical_Properties_versus_State_Machines
701,Lobsters,formalmethods,CSE-Formal methods,The COGENT Case for Property-Based Testing (2017),http://www.ssrg.nicta.com.au/publications/csiro_full_text//Chen_OKKH_17.pdf
702,Lobsters,formalmethods,CSE-Formal methods,Introduction to Contract Programming,https://www.hillelwayne.com/post/contracts/
703,Lobsters,formalmethods,CSE-Formal methods,Your thoughts on this advice to those pursuing formal methods?,/s/n7v658/your_thoughts_on_this_advice_those
704,Lobsters,formalmethods,CSE-Formal methods,My unusual hobby,https://www.stephanboyer.com/post/134/my-unusual-hobby
705,Lobsters,formalmethods,CSE-Formal methods,Design by Contract: A Missing Link [1998],https://www.win.tue.nl/~wstomv/edu/2ip30/references/design-by-contract/index.html
706,Lobsters,formalmethods,CSE-Formal methods,Network Semantics,https://www.cl.cam.ac.uk/~pes20/Netsem/index.html
707,Lobsters,formalmethods,CSE-Formal methods,Runtime Checking of Concurrent Data Structures (2005),https://core.ac.uk/download/pdf/82158063.pdf
708,Lobsters,formalmethods,CSE-Formal methods,The Symbolic Maze (2010),https://feliam.wordpress.com/2010/10/07/the-symbolic-maze/
709,Lobsters,formalmethods,CSE-Formal methods,TLA+ Video Course,http://lamport.azurewebsites.net/video/videos.html
710,Lobsters,formalmethods,CSE-Formal methods,Malicious Code Detection for Open Firmware (2002),http://www.cs.cornell.edu/~kozen/papers/acsac.pdf
711,Lobsters,formalmethods,CSE-Formal methods,In Lockstep: Kernel and Verification (2017),https://research.csiro.au/tsblog/lockstep-kernel-verification/
712,Lobsters,formalmethods,CSE-Formal methods,A Survey of Symbolic Execution Techniques,https://arxiv.org/pdf/1610.00502.pdf
713,Lobsters,formalmethods,CSE-Formal methods,"Lessons Learned from Building a High-Assurance, Crypto Gateway (2011)",http://www.dtic.mil/cgi-bin/GetTRDoc?AD=ADA570736
714,Lobsters,formalmethods,CSE-Formal methods,Gerard Huet Reflects On The History Of Theorem Provers,https://50ans.inria.fr/en/gerard-huet-languages-and-software/
715,Lobsters,formalmethods,CSE-Formal methods,Learn TLA,https://www.learntla.com/introduction/
716,Lobsters,formalmethods,CSE-Formal methods,A Guide to Alloy (2007),http://www.doc.ic.ac.uk/project/examples/2007/271j/suprema_on_alloy/Final%20Report/LaTeX/report.pdf
717,Lobsters,formalmethods,CSE-Formal methods,On The Notion Of Interestingness In Automated Mathematical Discovery (2000),http://spiral.imperial.ac.uk:8080/bitstream/10044/1/675/1/On%20the%20notion%20of%20interestingness.pdf
718,Lobsters,formalmethods,CSE-Formal methods,"""Wherein existing techniques for building secure systems are examined and found wanting"" (2000)",http://www.cypherpunks.to/~peter/04_verif_techniques.pdf
719,Lobsters,formalmethods,CSE-Formal methods,Don't Trust the Math (2013),https://pastebin.com/zz7YZZUk
720,Lobsters,formalmethods,CSE-Formal methods,My First Experience with Formal Methods,http://zipcpu.com/blog/2017/10/19/formal-intro.html
721,Lobsters,formalmethods,CSE-Formal methods,Formal Methods and the KRACK Vulnerability,https://galois.com/blog/2017/10/formal-methods-krack-vulnerability/
722,Lobsters,formalmethods,CSE-Formal methods,Coq Ltac 101,http://lthms.xyz/blog/coq-ltac-101.html
723,Lobsters,formalmethods,CSE-Formal methods,Realising the Benefits of Formal Methods,http://www.anthonyhall.org/csi.pdf
724,Lobsters,formalmethods,CSE-Formal methods,"x86 Proved: Coq Library for Modelling, Specification, Generation, and Proof for x86 Machine Code",https://x86proved.codeplex.com/
725,Lobsters,formalmethods,CSE-Formal methods,What even is compiler correctness?,https://www.williamjbowman.com/blog/2017/03/24/what-even-is-compiler-correctness/
726,Lobsters,formalmethods,CSE-Formal methods,Uncle Bob and Silver Bullets,https://www.hillelwayne.com/post/uncle-bob/
727,Lobsters,formalmethods,CSE-Formal methods,"Vale: Verifying High-Performance, Cryptographic, Assembly Code (2017)",https://project-everest.github.io/assets/vale2017.pdf
728,Lobsters,formalmethods,CSE-Formal methods,HoTTSQL: Proving query rewrites with univalent SQL semantics,https://blog.acolyer.org/2017/10/05/hottsql-proving-query-rewrites-with-univalent-sql-semantics/
729,Lobsters,formalmethods,CSE-Formal methods,Tackling Concurrency Bugs with TLA+ (Strange Loop),https://www.youtube.com/watch?v=_9B__0S21y8
730,Lobsters,formalmethods,CSE-Formal methods,"""A (Not So Gentle) Introduction To Systems Programming In ATS"" by Aditya Siram",https://www.youtube.com/watch?v=zt0OQb1DBko
731,Lobsters,formalmethods,CSE-Formal methods,Well-typed printfs cannot go wrong,http://kcsongor.github.io/purescript-safe-printf/
732,Lobsters,formalmethods,CSE-Formal methods,The Coming Software Apocalypse,https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/
733,Lobsters,formalmethods,CSE-Formal methods,Eiffel: Programming for Reusability and Extendability (1987),http://se.ethz.ch/~meyer/publications/acm/eiffel_sigplan.pdf
734,Lobsters,formalmethods,CSE-Formal methods,Free books about formal methods and verification,https://github.com/ligurio/free-software-testing-books/blob/master/free-software-testing-books.md#formal-verification
735,Lobsters,formalmethods,CSE-Formal methods,Déjà Fu : A Concurrency Testing Library for Haskell,https://www.barrucadu.co.uk/publications/YCS-2016-503.pdf
736,Lobsters,formalmethods,CSE-Formal methods,Verified cryptography for Firefox 57,https://blog.mozilla.org/security/2017/09/13/verified-cryptography-firefox-57/
737,Lobsters,formalmethods,CSE-Formal methods,A self-amending cryptographic ledger built in OCaml,https://git.io/v5iiy
738,Lobsters,formalmethods,CSE-Formal methods,Larch: Languages and Tools for Formal Specification (1993),https://www.cs.cmu.edu/afs/cs/usr/wing/www/publications/LarchBook.pdf
739,Lobsters,formalmethods,CSE-Formal methods,Toward Certification for Free: Correct-by-Construction ML Oracles with Polymorphic LCF Style,https://hal.archives-ouvertes.fr/hal-01558252/document
740,Lobsters,formalmethods,CSE-Formal methods,"Hoare Type Theory, Polymorphism and Separation",http://ynot.cs.harvard.edu/papers/jfpsep07.pdf
741,Lobsters,formalmethods,CSE-Formal methods,Proofs of correctness of the TLS handshake merged to s2n,https://github.com/awslabs/s2n/pull/565
742,Lobsters,formalmethods,CSE-Formal methods,"SMT-based Synthesis of Distributed, Self-Stabilizing Systems (2015)",http://www.cas.mcmaster.ca/borzoo/Publications/15/TAAS/taas15.pdf
743,Lobsters,formalmethods,CSE-Formal methods,"Writing a Formally-Verified, Image Browser in Coq",http://www.michaelburge.us/2017/08/25/writing-a-formally-verified-porn-browser-in-coq.html
744,Lobsters,formalmethods,CSE-Formal methods,Who Guards the Guards?: Formal Validation of the Arm v8-M Architecture Specification,https://alastairreid.github.io/papers/oopsla2017-whoguardstheguards.pdf
745,Lobsters,formalmethods,CSE-Formal methods,Abusing Haskell dependent types to make Redis queues safer,https://medium.com/@zyxoas/abusing-haskell-dependent-types-to-make-redis-queues-safer-cc31db943b6c
746,Lobsters,formalmethods,CSE-Formal methods,Verifying FreeRTOS - a feasibility study (2010),http://swerl.tudelft.nl/twiki/pub/Main/TechnicalReports/TUD-SERG-2010-042.pdf
747,Lobsters,formalmethods,CSE-Formal methods,Design and Implementing the OP and OP2 Web Browsers (2011),https://pdfs.semanticscholar.org/832a/911f97b500cd2df468018637e1d22c9c5572.pdf
748,Lobsters,formalmethods,CSE-Formal methods,HALO - Haskell to Logic through Denotational Semantics,http://research.microsoft.com/en-us/um/people/simonpj/papers/verify/hcc-popl.pdf
749,Lobsters,formalmethods,CSE-Formal methods,"versat - A Verified, Modern, SAT Solver (2012)",http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=2F94A093F2423881D7B30E28CE573851?doi=10.1.1.459.7149&rep=rep1&type=pdf
750,Lobsters,formalmethods,CSE-Formal methods,Verifying Security Invariants in ExpressOS (2013),https://haohuim.appspot.com/static/pubs/expressos-asplos13-slides.pdf
751,Lobsters,formalmethods,CSE-Formal methods,"Verifying an I/O-concurrent, File System (2017)",https://dspace.mit.edu/bitstream/handle/1721.1/108986/986497806-MIT.pdf?sequence=1
752,Lobsters,formalmethods,CSE-Formal methods,Extending Safe C Support in Leon (2017),https://infoscience.epfl.ch/record/227942/files/Extending%20Safe%20C%20Support%20In%20Leon.pdf
753,Lobsters,formalmethods,CSE-Formal methods,Using Coq to Write Fast and Correct Haskell,https://www.cs.purdue.edu/homes/bendy/Fiat/FiatByteString.pdf
754,Lobsters,formalmethods,CSE-Formal methods,Formal verification of the WireGuard protocol,https://www.wireguard.io/formal-verification/
755,Lobsters,formalmethods,CSE-Formal methods,"Macros as Multi-Stage Computations - Type-Safe, Generative, Binding Macros in MacroML (2001)",http://www.cs.rice.edu/~taha/publications/conference/icfp01a.pdf
756,Lobsters,formalmethods,CSE-Formal methods,A Tale of Two Provers,https://nikivazou.github.io/static/Haskell17/a-tale.pdf
757,Lobsters,formalmethods,CSE-Formal methods,Industrial Hardware and Software Verification with ACL2,http://www.cs.utexas.edu/users/moore/publications/rs-verif-draft-5.pdf
758,Lobsters,formalmethods,CSE-Formal methods,Safe to the Last Instruction: Automated Verification of a Type-Safe Operating System,https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/pldi117-yang.pdf
759,Lobsters,formalmethods,CSE-Formal methods,RustBelt: Securing the Foundations of the Rust Programming Language,https://people.mpi-sws.org/~dreyer/papers/rustbelt/paper.pdf
760,Lobsters,formalmethods,CSE-Formal methods,Moderately Complex Paxos Made Simple: High-Level Specification of Distributed Algorithm (2017),https://arxiv.org/abs/1704.00082
761,Lobsters,formalmethods,CSE-Formal methods,Cleanroom Haskell Notes,http://infohost.nmt.edu/~shipman/soft/cleanhaskell/web/index.html
762,Lobsters,formalmethods,CSE-Formal methods,Developing Bug-Free Machine Learning Systems With Formal Mathematics,https://arxiv.org/abs/1706.08605
763,Lobsters,formalmethods,CSE-Formal methods,Getting compilers right: a reliable foundation for secure software,https://www.microsoft.com/en-us/research/blog/getting-compilers-right-secure-software/
764,Lobsters,formalmethods,CSE-Formal methods,Simple Verification of Rust Programs with Functional Purification (2016),https://pp.info.uni-karlsruhe.de/uploads/publikationen/ullrich16masterarbeit.pdf
765,Lobsters,formalmethods,CSE-Formal methods,Foundations of Semantics and Model Checking in a Software Engineering Course (2015),http://ceur-ws.org/Vol-1385/paper4.pdf
766,Lobsters,formalmethods,CSE-Formal methods,Java Pathfinder - NASA's Model-Checker for Java,http://babelfish.arc.nasa.gov/trac/jpf/wiki/intro/start
767,Lobsters,formalmethods,CSE-Formal methods,An example of debugging Java with a model checker,http://www.cs.unh.edu/~charpov/programming-tlabuffer.html
768,Lobsters,formalmethods,CSE-Formal methods,"CertSkel - Verified Compiler for a Coq-Embedded, GPGPU DSL (2017)",http://prg.is.titech.ac.jp/wp-content/uploads/2016/11/CoqPL_2017_paper_15.pdf
769,Lobsters,formalmethods,CSE-Formal methods,Formal Reasoning About Programs (draft book by Chlipala),http://adam.chlipala.net/frap/
770,Lobsters,formalmethods,CSE-Formal methods,Development and Verification of a Flight Stack for a High-Altitude Glider in Ada/SPARK 2014,https://www.rcs.ei.tum.de/fileadmin/tueircs/www/becker/paper_SAFECOMP_17.pdf
771,Lobsters,formalmethods,CSE-Formal methods,An implemenation of Deflate in Coq (2016),https://xxx.arxiv.org/pdf/1609.01220.pdf
772,Lobsters,formalmethods,CSE-Formal methods,"VeriStar - Efficient, verified prover for separation logic (2012)",http://oucsace.cs.ohiou.edu/~gstewart/p/veristar/veristar.pdf
773,Lobsters,formalmethods,CSE-Formal methods,Programs and Proofs: Mechanizing Mathematics with Dependent Types,http://ilyasergey.net/pnp/
774,Lobsters,formalmethods,CSE-Formal methods,Seer: Symbolic Execution Engine for Rust,https://github.com/dwrensha/seer
775,Lobsters,formalmethods,CSE-Formal methods,A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World (2010),https://cacm.acm.org/magazines/2010/2/69354-a-few-billion-lines-of-code-later/fulltext
776,Lobsters,formalmethods,CSE-Formal methods,"ELPI: Fast, Embeddable, Lamba-Prolog Interpreter (2015)",http://www.cs.unibo.it/~sacerdot/PAPERS/elpi.pdf
777,Lobsters,formalmethods,CSE-Formal methods,Rosetta - A Solver-aided Programming Language That Extends Racket,https://emina.github.io/rosette/index.html
778,Lobsters,formalmethods,CSE-Formal methods,Fuzzing the Rust typechecker using CLP (2015),https://www.cs.ucsb.edu/~benh/research/papers/dewey15fuzzing.pdf
779,Lobsters,formalmethods,CSE-Formal methods,Towards Verified Cardiac Pacemaker,https://asankhaya.github.io/pdf/Towards_Verified_Cardiac_Pacemaker.pdf
780,Lobsters,formalmethods,CSE-Formal methods,Modeling Zero-Downtime Deployments with TLA+,https://www.hillelwayne.com/post/modeling-deployments/
781,Lobsters,formalmethods,CSE-Formal methods,ALEXANDRIA: Large-Scale Formal Proof for the Working Mathematician,https://www.cl.cam.ac.uk/~lp15/Grants/Alexandria/
782,Lobsters,formalmethods,CSE-Formal methods,Typed Assembly Language (1998),https://www.cs.cornell.edu/talc/overview.html
783,Lobsters,formalmethods,CSE-Formal methods,TLA+ in Practice and Theory Part 1: The Principles of TLA+,https://pron.github.io/posts/tlaplus_part1
784,Lobsters,formalmethods,CSE-Formal methods,Control-flow Refinement and Progress Invariants for Bounds Analysis (2009),https://www.microsoft.com/en-us/research/wp-content/uploads/2009/03/pldi09_speed.pdf
785,Lobsters,formalmethods,CSE-Formal methods,"An Empirical Study of the Correctness of Formally-Verified, Distributed Systems",https://locore.cs.washington.edu/papers/fonseca-dsbugs.pdf
786,Lobsters,formalmethods,CSE-Formal methods,"P: A programming language designed for asynchrony, fault-tolerance and uncertainty",https://www.microsoft.com/en-us/research/blog/p-programming-language-asynchrony/
787,Lobsters,formalmethods,CSE-Formal methods,'Techniques' section added to Learn TLA+,https://www.learntla.com/techniques/
788,Lobsters,formalmethods,CSE-Formal methods,Rewriting in Coq,http://lthms.xyz/blog/rewriting-in-coq
789,Lobsters,formalmethods,CSE-Formal methods,"Under-constrained, Symbolic Execution: Correctness Checking for Real Code (2015)",https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-ramos.pdf
790,Lobsters,formalmethods,CSE-Formal methods,"Practical, low-effort, equivalence verification for real code (2011)",http://www.pgbovine.net/PhD-memoir/ucklee-cav-2011.pdf
791,Lobsters,formalmethods,CSE-Formal methods,"Avinux- Towards Automatic Verification of Linux, Device Drivers (2009)",https://www.google.com/url?sa=t&source=web&rct=j&url=https://pdfs.semanticscholar.org/41ab/8a4be4a0ac015a282d70099147063d2fa72c.pdf&ved=0ahUKEwj7l476zOjTAhXF0iYKHUaZAGcQFggcMAA&usg=AFQjCNEkC5xRTfYzDIcvbyQLxRXTQCXADA&sig2=ng9UJXawaK5Th4VU1r6I0A
792,Lobsters,formalmethods,CSE-Formal methods,"Eprover — a free, efficient automatic theorem prover",https://wwwlehre.dhbw-stuttgart.de/~sschulz/E/E.html
793,Lobsters,formalmethods,CSE-Formal methods,SPARKSkein: A Formal and Fast Reference Implementation of Skein (2010),http://www.skein-hash.info/sites/default/files/SPARKSkein.pdf
794,Lobsters,formalmethods,CSE-Formal methods,Proving the Ghost Common Divisor (GCD) in SPARK,http://www.spark-2014.org/entries/detail/gnatprove-tips-and-tricks-proving-the-ghost-common-denominator-gcd
795,Lobsters,formalmethods,CSE-Formal methods,Tag proposal: Formal Methods,/s/g2gglu/tag_proposal_formal_methods
