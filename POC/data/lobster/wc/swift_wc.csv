ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,swift,Swift programming,xi-editor,https://github.com/xi-editor,xieditor,grow team github sign used topic reload reload,dismiss grow team github github home million developer working together join grow development team manage permission collaborate project sign used topic perform action time signed another tab window reload refresh session signed another tab window reload refresh session
2,Lobsters,swift,Swift programming,"Porting Redux Architecture to Swift (Well, for a Toy macOS App Anyway)",https://medium.com/insertgif/porting-redux-architecture-to-swift-well-for-a-toy-macos-app-anyway-ed61bad0395c,porting redux architecture swift well toy macos app anyway,porting redux architecture swift well toy macos app anyway insertgif store action testable debuggable easy understand easy reason store action store action app easily mutate store store action swift insertgif grand central dispatch grand central dispatch subscription higherorder reducer insertgif spectacle insertgif twitter producthunt originate,porting redux architecture swift well toy macos app anyway boy medium back day let sit rocking chair install modperl movabletype put something internet uppercased internet back liked walked told get back talking software architecture insertgifsoftware architecture exciting topic nobody else ever pontificated one nicer experience programming last year writing react component using redux unfamiliar web development talking much react redux little tutorial help know store action goal architect toy app testable debuggable easy understand easy reason idea separating store set action whatever word may mean declarative userinterface description html jsx cocoa view view controller rooted older idea separating data presentation one another behind cascading style sheet microsoft powerpoint different app microsoft word last one real making sure still paying attention scan header image blog post people critical reading skill way get pandemicstores actionswe define store location canonical representation data true know true current point time great definition try hard definition specific tell lielet say writing gui component show bank account part new bank account app store app would containall transaction renderedthe computed account balance iterate list transaction time instead n ya knowthe user avatar scroll page scrolled cover valuable information client wanted thought would spiffy app littlein kingdom javascript would represent store giant usually immutable object array string float object would want exact decimal banking app would look javascript work would sigh resign float action concrete object encode event relevant store either creating new version store requiring information store definition meant wideencompassing generic constitutes action really depends business logic patience write kinda boilerplatey code store action macos app might button clicka menu item clickthe user resized application windowa keypress happeneda keypress another app happenedan thread monitoring http request completed another threadmacos restartthe computer firebut promise something want mutate store must take place action first user want withdraw money bank balance app must first encode action action type withdrawal amount description buy new airpod old one fell chewing user uploads new avatar must make action type avataruploaded buffer containing jpeg data good implementation architecture macos application make difficult view view controller violate promise say app easily mutate store application scale include component data dependency becomes harder reason one nice aspect storeandactions architecture cheerfully named redux architecture get click link make change store explicit first change must encoded action function might call reducer must patternmatch stream action create new storestore action swiftif programmed io macos might degree recognize store another name core data managed object context le analogous store instead represented object graph encoding n n relationship giving u way project insert update delete node graph true would want unless good reason use core data application especially looking build team developer scale something approaching fancy macos app cost app storehowever let say want build toy app quickly something fun hacked together weekend yet still completely suck managing data perhaps encode store immutable object using swift struct integer also great way store decimal huh want design withdrawal first action might look like represent action using swift enum need fold stream action creating new version store along way redux represents part codebase take action produce new version immutable store reducer borrow terminology even though diction esoteric need let assume writing multiple reducer time like structure new feature ticket insertgif new reducer use protocol unify type level protocol would call interface language term come objectivec objectivec different objectivec like differentnote using swift value type structs first copy store nextstore update field new store returning common reducer code go ahead give helper make easier reason need inout keyword mutate new cloned store swift better immutable record update syntax would probably herethis banking code trustgrand central dispatch grand central dispatch write layer architecture construct store run reducer central location action dispatched handled imaginatively call dispatch view controller hook nsbutton dispatch every time user click withdraw button withdrawal action occurs real banking app would probably also want enter routing account number place withdrawing fun show blithely ignore aspect realworld bankingsome kinda cool immediate benefit get store action even extremely unrealistic example app business logic life reducer eminently testable need construct cocoa view run unit test reducer need mock storea great way debug app print action dispatch place xcode breakpoint possible external stimulus outside world pas time something unexpected happens able trace exact action caused ita common request product manager boss alike implement user analytics user click button user coming funnel user giving u information andor money write track reducer convert user behavior google analytics segment event making remote call event come fire forget minute form event sourcing friend s√∂nke point outas app grows becoming unruly moody want refactor feature adage write code easy delete believe reducer written way satisfies rule thumb drop action reducer use compiler list compiler error find usesites imagine written view controller directly read modified array transaction balance would audit location user action led mutation would also pull business logic entangled view codesubscriptionswith withdrawal feature place would like render screen app contains list transaction account balance user avatar javascript react component update automatically dependency store among change benefit componentized user interface cocoa still benefit thinking oneway dataflow store presentation data storedispatch already single place action flow take advantage architectural watering hole use invoke subscription first let u model subscription callable object c would call functor object hear saying computer remind c escaping keyword mark closure later use constrains kind closure passed parameter help prevent reference cycle life escaping cycle construct ourselvesas subscription come store array action occurs iterate array invoke subscription small wrinkle memoize projection store avoid unnecessary ui updatesthis work breaking subscription two map action like mapstatetoprops redux encourage view controller construct equatable object containing subset information store projection need action need fire time action occursin general strike central weakness storeandactions architecture difficult write performant app certain highfrequency action encoded object passed every reducer however toy app suffices fine also imagine app certain part app flee normal architecture manage state squeeze extra framesit remains implement subscriber generic variable exists know kind type view controller want represent state know need equatable implement inequality checknow use subscription reactively update cocoa view oh boy view controller easy writethis completes core loop architecture change happens user click withdraw one view controllerthe change packaged actiona reducer several handle action creates new storesubscribers invoked new storea second view controller subscribed store update viewsone last thing though multiple reducer higherorder reducersthis title book programming would sell bunch copy even though nobody would able understand alternate universe paid content make internet suppose universe need reducer multiplex action many reducer despite fancy title simple write could keep going bank app think would neat show actual list reducer look like insertgif give hint feature ticket wanted implement release app action shoutout opensource spectacle app wayeven toy app already kind complicated might posit writing user interface essentially hobby worry tiny detailsthat allgo check insertgif already also twitter producthunt keep updating long remember insertgif made love nyc proud alumnus originate r laboratory hope much fun reading individually creating gist medium sevenyear old product support syntax highlighting code block
3,Lobsters,swift,Swift programming,swift-helpful,https://github.com/danielmartin/swift-helpful,swifthelpful,swifthelpful overview install configuration melpa quelpa http framagitorgsteckerhalterquelpa usage feature contextual information swift keywords attribute api documentation coming language server protocol http githubcomemacslsplspsourcekit swift standard library source code http githubcomburntsushiripgrep development http wwwgnuorgsoftwaremake http caskreadthedocsio installing dependency bytecompilation testing lint function documentation acknowledgement http githubcomwilfredhelpful,swifthelpful overview emacs described extensible customizable selfdocumenting realtime display editor like selfdocumenting experience writing swift code emacs swifthelpful package using information swiftmode lspmode swiftinfo able answer question anything see swift program developer tool typically identifiercentric sense show documentation api swifthelpful also show official apple information keywords attribute etc perfect company experimenting swift playground emacs equally useful people learning language people want revisit recent language addition also swifthelpful decoupled apple ecosystem use platform like window gnulinux also extremely fast perfectly use resourceconstrained platform like raspberry pi install configuration melpa install swifthelpful via melpa mx packageinstall ret swifthelpful quelpa install swifthelpful via quelpa http framagitorgsteckerhalterquelpa quelpa swifthelpful repo danielmartinswifthelpful fetcher github file el swiftinfo info usage main entry point swifthelpful command executed point placed swift code feature contextual information swift keywords attribute swifthelpful show information swift keyword attribute let say see import swift program want know importing module swift work simply place point top import invoke swifthelpful mx swifthelpful tool show brief snippet documentation swift module many case keyword highlighted focus attention mentioned documentation pressing read manual button open swift manual section info buffer read definitive discussion topic information limited keywords swift programming language gradually increasing use attribute language swifthelpful also show information attribute let say know dynamiccallable mean attribute introduced swift simply place point one occurrence attribute invoke swifthelpful read explanation time coming official swift reference manual api documentation coming language server protocol swifthelpful also show documentation api way favorite ide leverage lspmode configured specific extension swift lspsourcekit http githubcomemacslsplspsourcekit let say want know isexecutable method see source file sourcekitlsp project invoke swifthelpful symbol see information coming language server protocol including method type signature header documentation two convenient button search definition reference across codebase swift standard library source code compiled checkout swift standard library swifthelpful able search present implementation source code almost zero configuration two requirement use feature need install ripgrep tool http githubcomburntsushiripgrep fast directory searcher need point swifthelpful local checkout swift standard library setq swifthelpfulstdlibpath path local compiled checkout stdlib let say want know dropfirst collection function swift ask swifthelpful presented function implementation collectionswift file path actual link clicking open standard library source file case want explore development development automated mean make http wwwgnuorgsoftwaremake cask http caskreadthedocsio installing program encouraged developing swifthelpful installing dependency bytecompilation testing minimize chance regression run swifthelpful regression test suite introducing change want use ertrunner lint function documentation good emacs package follow basic style rule regarding function documentation check see readmemd inside swiftinfo folder know update documentation modified documentation source code org acknowledgement idea package inspired helpfulel http githubcomwilfredhelpful
4,Lobsters,swift,Swift programming,The Promise vs Reality of SwiftUI Multiplatform,https://write.as/angelo/the-promise-vs-reality-of-swiftui-multiplatform,promise v reality swiftui multiplatform,last week post tweeted letdown swiftui illustrated broken button reality multiplatform via r,happy august friend update last week post swiftui app writefreely work progressed pretty well shared code last week point got preliminary ui display list post filter collection tapping post load editor make change title content iphone ipad also new post button create new draft iphone ipad well pull chair let chat little bit gap promise reality multiplatform swiftui apps working post tweeted managed flesh key ui feature app across iphone ipad mac day thanks swiftui live preview xcode show view look like next code update realtime code stated building native app speed iteration ever encountered building web looking html cs looking react latest iteration look like far iphone ipad installed macos aka big sur beta able build mac app compare way final ui plenty work still done including replacing unusual picker view selecting collection proper sidebar adapting spacing little better mac app ca nt preview anything mac target even xcode upgrade machine macos beta one thing helpful moving quickly swiftui declarative nature let specify semantics element placement view letting framework figure mean iphone v ipad v mac great example focus developer experience dx toolbaritemplacement api let semantically state particular item add toolbar primaryaction status element used texteditor view place post status badge status area publish button primaryaction area see screenshots shared element placed differently depending whether shown iphone ipad mac nt write single line code customize difference letdown swiftui illustrated broken button life swiftui rose newdraft feature nt quite working fully yet building iphone ipad version app tapping newdraft button list post work beautifully slide new draft list open text editor next great essay thrilled working end workday friday finished installing big sur beta mac morning excited see everything looked worked mac app expected little ui refinement list post example need healthy dose padding otherwise figured similar experience least ipad app mostly picker replaced popup menu choose collection narrow list post tap post list load text editor ready change post status change instantly update badge toolbar post list tried create new draft mac clicking newdraft button appears interestingly enough next poststatus badge screenshot nothing thing error thrown view drawn nothing reality multiplatform suppose nt use word letdown multiplatform panacea reality app expects different thing iphone ipad mac issue facing newdraft button nt failing swiftui paradigm mac app treat navigation v button v instantiating new window different iphone nt structured thing way framework expects fine need spend little time adapting mac client would liked got say despite couple little issue need fix really impressed much worked right box extra work part nativeapp development may yet happen pace web development closer ever enter email subscribe update also subscribe via r follow angelo writeas mastodon
5,Lobsters,swift,Swift programming,Swift Package Manager is a security risk,https://medium.com/@KaneCheshire/swift-package-manager-is-a-security-risk-4d13f3a7bc3b,swift package manager security risk,swift package manager potential security risk written post hack update going nsworkspace collaboration full name test see password correct password hello name notmypassword password mitigation cocoapods way running script framework built bad swift team fix example repository,swift package manager potential security risklet start saying absolutely love swift package manager think future dependency management io somuchso written post itbut also want use opportunity highlight potential risk using became aware today initially thought issue tracker swift package manager since one github repo since reported issue swift bug tracking jira instance found way run code want use one swift package providing check packageswift file hand lot simpler might think let show howthe hackit simple hack making use anonymous closure lazily load package instance defined packageswift file packageupdate writing post filing bug swift team realised even complicated need simply create function return anything package instance need like string name execute code want returningfirst let look normal simple packageswift file get generated run swift package generate add package dependency swift package manager magic looking package instance filesince file regular swift file write swift code want including tricking swift package manager call function whenever package instance referenced code hardly changed used run code want dosomething let add code dosomething make mac speak loud yes really code updated dosomething run executable file called say speaks word give argument included every mac default notice able literally execute programme stored usrbin use process instance part appkit problem importing packageswift file swift code running macif add package dependency another package dependency xcode project hear mac say hello world whenever package resolved fact save packageswift file test speakthis get worrying add package remote dependency xcode code run soon add dependency time get screenshot xcode function already called mac said hello world loudgoing furtherjust able import appkit open possibility many thing malicious example appkit get list running apps terminate launch new process nsworkspacewe import macos framework like collaboration let u get information like full name current user alarmingly test see password correct password notmypassword happens actual login password mac code speak hello name notmypassword password even without importing appkit macos framework import foundation allows u make network request want code us dispatchgroup make thread wait network call completed network call could used download data site upload data anywhereif enough since access filemanager foundation also write data disk well read directly filesystem delete file theory could delete entire user directory although chicken try code iterates entire filesystem logging item console thankfully catalina give xcode permission access directory confirms able run code privileged way xcode also subconciously trained accept permission request xcode throw methese example top head sure plenty cleverer people think ofmitigationswhat protect people want abuse vulnerability well unfortunately entirely help protect checking party packageswift file using make sure target specific version remote repo rather always resolving latest version branch remember though nothing stopping someone changing code tag remote repo referencesadditionally use package developer trust unfortunately could unfair disadvantage new developer something cool want share via swift package manager case still risk albeit small reputable developer could repository compromisedhopefully github able add vulnerability check swift package like language dependency future course hopefully swift developer find way plug properly without impacting usefulness either swift package manager system frameworksin interest fairness also point cocoapods way running script framework built however least choose log warning developer completely silent expose official feature people aware ityou also make sure storing anything sensitive disk outside keychain mean storing password unencrypted text file leaving private key certificate desktop etcadditionally although able write code retrieves private key keychain reference key specifically able actually use key sign data without permission prompt coming important blindly allow permission thing pop even seem like coming system example using keychain code able get popup appear trying use private key one particularly worrying mention package name anywhere since saying macos want make change would tempted allow know code caused know entering username password case chicken try maybe set demo machine properly try stuff without worrying badif read far might worried rightly also worth pointing although used evil also used goodthis sort thing could enable code generation thought first place providing required automatic setup user library difficult setup process like adding build phase script firebase sadly live world bad actor ruin thing nice swift team fix honestly sure best way team fix swift code going allowed full always happen perhaps disallowing import function parsing packageswift file could worki created example repository check want see real
6,Lobsters,swift,Swift programming,Swift type checking is undecidable,https://forums.swift.org/t/swift-type-checking-is-undecidable/39024,swift type checking undecidable,canonical type abstract algebra free semigroups finitelypresented semigroups mapping finitelypresented semigroups protocol word problem mean reference,precisely introduction made canonical type computation undecidable problem begin necessary background information presenting argument outlining next step canonical type consider two protocol stripped real implementation standard library protocol iteratorprotocol associatedtype element protocol sequence associatedtype iterator iteratorprotocol associatedtype element element iteratorelement associatedtype subsequence sequence element subsequenceelement subsequencesubsequence subsequence define function taking single generic parameter constrained sequence func numberofelements sequence seq int inside function body element type spelled number way telement titeratorelement tsubsequenceelement tsubsequenceiteratorelement tsubsequencesubsequenceelement tsubsequencesubsequenceiteratorelement indeed infinitely many spelling telement equivalent sametype constraint sequence protocol clause fact equivalent spelling name type important consider generic function take two value unconstrained generic type func isequal bool call function two value equivalent type spelled two different way let x telement let tsubsequenceelement print isequal x type checker need able determine x type reject code mean computing canonical type canonical type also important abi appear mangled name protocol witness table layout place clearly computing canonical type important operation must able perform correctly see current language impossible general case abstract algebra semigroup set g together binary operation set contains distinguished identity element binary operation satisfies following axiom b c b c associativity identity note group operation necessarily commutative b b general common talk group math group semigroup element inverse satisfying however wo nt need inverse semigroups sufficient purpose free semigroups free semigroup generator set g set string formed element g identity element empty string semigroup operation string concatenation example free semigroup single generator contains element aa aaa etc semigroup isomorphic semigroup integer addition isomorphism defined length string isomorphism since length concatenation two string sum length individual string free semigroup two generator b element look like abaaa babbba abbbabab note unlike first example semigroup operation commutative example ab b abb b ab bab possible define free semigroup infinitely many generator purpose let assume generator set always finite finitelypresented semigroups generalize notion finitelygenerated free semigroups introducing relation free semigroup string formed generator element denotes unique element relation hand define eqivalence stipulating two different spelling name semigroup element semigroup finite set generator relation called finitelypresented semigroup example let start taking free semigroup two generator b add relation b b semigroup apply binary operation two element say abba bbab first concatenate string form abbabbab make use relation b b swap adjacent b appear beginning string b end example give u aaabbbbb mean semigroup element uniquely determined number b relative order matter semigroup isomorphic semigroup pair integer pairwise addition another example take free semigroup one generator add relation get finite group element total semigroup isomorphic semigroup integer modulo addition semigroup integer multiplication hand finitelypresented generator set set prime number infinite mapping finitelypresented semigroups protocol mean let define protocol two associated type associated type conforms protocol recursively protocol p associatedtype p associatedtype b p define function generic parameter constrained p type parameter write function body string formed associated type b func foo p let x let ta let z tbab look familiar fact free semigroup two generator precisely typelevel embedding free semigroup two generator swift semigroup element type parameter always prefixed identity element semigroup operation concatenation since associated type conform p every type parameter write conforms p make concatenation operation welldefined finitelypresented semigroups free semigroup relation every string type parameter swift translation unique element type map finitelypresented semigroup relation swift need encode relation form clause protocol example previous example semigroup integer modulo encoded swift protocol associatedtype aaaaa self define function generic parameter constrained write following type function body ta taa taaa taaaa unique type longer type equivalent one example type checker prove taaaaaa equivalent ta almost ready look undecidability argument rest encoding finitelypresented semigroup swift protocol made mistake none follows valid word problem word problem finitelypresented group asks two string generator denote element word problem known undecidable general case plenty example semigroups decidable word problem example seen far well finite semigroups etc algorithm work arbitrary finitelypresented semigroup example semigroup undecidable problem generator b c e relation ac ca bc cb bd db ce eca de edb cca ccae translate swift mapping generator associated type relation clause entry protocol impossible associatedtype impossible associatedtype b impossible associatedtype c impossible associatedtype impossible associatedtype e impossible ac ca ad da bc cb bd db ce eca de edb cca ccae cupertino problem write swift protocol using existing language feature computing canonical type known undecidable mean well end world end swift even end matter clearly genericsignaturebuilder able solve word problem least semigroups today well protocol nt correspond semigroups protocol least one associated type conform protocol recursively standard library large amount userwritten code make use generic work correctly also aware example nt manage canonicalize type properly causing miscompiles crash fixing gradually time continue discover problem fix strong hint underlying approach correct spent time thinking fundamental problem indeed see reason struggled correctness area language solution impossible general case need come appropriate restriction combination protocol obeys restriction algorithm always terminate correct result protocol obey restriction want able produce diagnostic instead crashing miscompiling optimistic introducing restriction little impact realworld code nobody using swift typelevel group theory yet reference
8,Lobsters,swift,Swift programming,Getting Started with Core Bluetooth,https://ditto.live/blog/posts/getting-started-with-core-bluetooth,getting started core bluetooth,table content introduction core bluetooth basic concept core bluetooth central peripheral service public database exists characteristic core bluetooth concept summary putting practice getting started scanning central online uuid generator advertising peripheral detecting peripheral central received signal strength indicator connecting peripheral discovering characteristic inside peripheral service subscribing characteristic confirming notification peripheral set sending data peripheral sending data central receiving data peripheral receiving data central summary challenge chat app technical reflection limited message size speed limitation additional speed penalty reliable delivery different level control per platform securityprivacy policy backgrounded apps extremely complex api work demand bulletproof error checking handling occasional instability general odd behavior lack encryption conclusion,table content introduction really hard overstate much smartphones tablet transformed world starting iphone device combine gorgeous intuitive touch interface full suite network technology io developer consider stranger networking almost breadandbutter requirement every app day kind rest api handle encoding decoding data remote source side technology aside another huge side networking smartphone never personally explored bluetooth yet sitting writing post wearing wireless headphone apple watch strapped wrist played animal crossing nintendo switch wireless pro controller feel like bluetooth something take granted black box magic never worry daytoday life io engineering career never involved project need side project learn bluetooth apis apple provides buddy max asked interested writing app order demonstrate core bluetooth work following blog post experience jumped chance blog post geared anyone else boat someone might necessarily newbie developing apple platform never stopped learn core bluetooth apis work discus core concept behind core bluetooth parentchild architecture show send basic data device discus pitfall encountered core bluetooth core bluetooth apple public framework official way third party apps integrate bluetooth functionality apps io ipados point core bluetooth abstraction bluetooth low energy ble different classic bluetooth allowing far energy efficient communication support lowpowered device historically meant core bluetooth aimed low powered peripheral device heart rate sensor home automation kind device primarily reside low power state periodically broadcast small tidbit information contrast device using classic bluetooth like game controller wireless headphone much high powered constantly streaming data previously impossible access third party apps however io apple expanded core bluetooth cover classic bluetooth device well public api changed mean much wider variety wireless device became available amazing capability never better time start learning adopt core bluetooth basic concept core bluetooth working core bluetooth necessary become accustomed specific terminology major component service relate central peripheral ble operates traditional serverclient sort model one device act capacity server contains information another act client query information processesdisplays locally device broadcast advertisement called peripheral device scan connect peripheral called central connected usually peripheral act server central act client way core bluetooth operates general example pairing pair bluetooth headphone smartphone smartphone would central headphone would peripheral service obviously type ble device question determine sort capability example heart rate monitor record wearer heart rate smart thermostat would record current temperature location apps built support one specific class device capability example apps tracking user health would interest connecting device nt health related thermostat order encapsulate report capability specific peripheral bluetooth requires peripheral identify class capability service peripheral make discoverable central broadcasting advertisement packet defining main identifying service offer central scanning time detects packet determines peripheral device found support class service searching begin process connecting traditionally main service device advertised connection formed central query peripheral additional service offer order central determine compatible peripheral need know id value service peripheral support specific apps peripheral device make sense define service using shared uuid device however general practice make sense peripheral adopt bluetooth service standard capability globally example would make sense device record blood pressure reading could connected bluetooth device capable processing data regardless manufactured either device public database exists list standardized set service id used central peripheral want adopt specific use case characteristic given service number separate set information andor service might included within example heart rate sensor peripheral might feature heart rate service contained within service raw current heart rate value along information sensor positioned wearer time service may contain number characteristic record various type data perform various subfunctions service may used receive data peripheral send command back peripheral possible central explicitly query information characteristic register observer called every time characteristic update concept bluetooth device offering capability service characteristic officially called gatt short generic attribute profile core bluetooth concept summary hopefully point basic layout core bluetooth starting make sense parent device called central connect child device known peripheral peripheral manage capability service manage capability via characteristic putting practice discussed basic concept core bluetooth start putting practice demonstrating flow connecting two device built companion sample app around core bluetooth app basic chat app allows two device connect send message app demonstrates scan central advertise peripheral connected app send message upstream downstream one pipeline getting started starter anything else need add nsbluetoothalwaysusagedescription key app infoplist describing want use bluetooth key nt present would app rejected app store submission app throw exception trying call core bluetooth apis security requirement apple apps must get explicit permission user bluetooth enabled case let explain need bluetooth enable chat service access bluetooth allows chat others device place start using core bluetooth swift every source file integrates framework must following import statement import corebluetooth scanning central io device fill role central bluetooth connection represented object called cbcentralmanager begin let create new instance let centralmanager cbcentralmanager delegate self queue nil see object must designated delegate upon instantiation object must conform cbcentralmanagerdelegate upon instantiation central manager necessary activity needed start using bluetooth started immediately point ca nt start scanning yet bluetooth spends nontrivial amount time setting state could considered powered immediately must wait first delegate callback func centralmanagerdidupdatestate central cbcentralmanager guard centralstate poweredon else return centralmanagerdidupdatestate called every time state bluetooth system change include status bluetooth resetting access unauthorised reason productionready app every single state properly handled however case need detect state bluetooth reached powered happened start scanning scanning peripheral easy need call scanforperipherals specify service interested let service cbuuid string centralmanagerscanforperipherals withservices service option nil centralmanagerscanforperipherals withservices service option nil mentioned service carry unique identifier peripheral central may match core bluetooth identification handled via cbuuid object specific case use simple string identifier tutorial using uuid string value generated online uuid generator value need globally unique recognizable peripheral central side point device scanning peripheral matching service identifier point central checked scanning calling centralmanagerisscanning advertising peripheral central scanning need another device acting peripheral advertise service scanning similar central managed via cbcentralmanager peripheral managed instance cbperipheralmanager let peripheralmanager cbperipheralmanager delegate self queue nil exactly central manager peripheral manager require delegate upon creation time conforming cbperipheralmanagerdelegate also must wait state bluetooth device reach powered func peripheralmanagerdidupdatestate peripheral cbperipheralmanager guard peripheralstate poweredon else return state bluetooth peripheral powered peripheral start advertising let characteristicid cbuuid string let characteristic cbmutablecharacteristic type characteristicid property write notify value nil permission writeable let serviceid cbuuid string let service cbmutableservice type serviceid primary true servicecharacteristics characteristic peripheralmanageradd service peripheralmanagerstartadvertising cbadvertisementdataserviceuuidskey service cbadvertisementdatalocalnamekey device information fair bit unpack step one part time nothing complicated create characteristic assign standardised characteristic uuid central expecting also need explicitly mark characteristic writable central send data back peripheral create service object standardised service uuid set type primary ensure advertised main service peripheral advertise peripheral service uuid addition cbadvertisementdatalocalnamekey key normally hold device name peripheral modified hold additional data central could potentially use eg current temperature thermostat detecting peripheral central one device scanning one advertising service id able detect central side peripheral detected following delegate callback called func centralmanager centralmanager cbcentralmanager diddiscover peripheral cbperipheral advertisementdata string rssi rssi nsnumber centralmanagerconnect peripheral option nil selfperipheral peripheral diddiscoverperipheral provide lot interesting information peripheral advertisementdata dictionary contain information like device name manufacturer name addition service uuids defined cbadvertisementdataserviceuuidskey though may discover later necessary possible check peripheral support service central want checking value advertisementdata cbadvertisementdataserviceuuidskey addition rssi value received signal strength indicator useful determining distance peripheral sometimes may necessary require specific proximity proper functioning value used monitor happy peripheral one want connect call centralmanagerconnect begin connecting time since way access peripheral object outside delegate also good idea retain local property class connecting peripheral discovered peripheral called centralmanagerconnect central attempt connect following delegate method called func centralmanager centralmanager cbcentralmanager didconnect peripheral cbperipheral centralmanagerstopscan peripheraldelegate self let service cbuuid string peripheraldiscoverservices service point become responsible peripheral instead acting central manager object work directly peripheral object peripheral object type cbperipheral distinctly different cbperipheralmanager first thing assign delegate peripheral conforming cbperipheraldelegate receive event directly done call discoverservices peripheral let u confirm service support subsequently access service characteristic need discovering characteristic inside peripheral service set delegate peripheral performed request discover service following method cbperipheraldelegate called func peripheral peripheral cbperipheral diddiscoverservices error error let error error print unable discover service errorlocalizeddescription cleanup return let characteristic cbuuid peripheralservices foreach service peripheraldiscovercharacteristics characteristic service error occurs point must handle exit gracefully otherwise peripheral object populated service support like service identified via cbuuid object characteristic identified way subscribe characteristic start reading data contains must also discover member service addition peripheral multiple service becomes necessary iterate one discover one characteristic interested iterate service peripheralservices attempt discover characteristic want via id subscribing characteristic chat app interested passive stream data peripheral want notified immediately new data come need configure peripheral alert u whenever characteristic updated characteristic service discovered following delegate callback called func peripheral peripheral cbperipheral diddiscovercharacteristicsfor service cbservice error error let error error print unable discover characteristic errorlocalizeddescription cleanup return let characteristicuuid cbuuid servicecharacteristics foreach characteristic guard characteristicuuid characteristicuuid else return peripheralsetnotifyvalue true characteristic selfcharacteristic characteristic anything failed process first appropriate error handling moving secondly received service object since service number characteristic inside must loop discover main one want discovered characteristic want call peripheralsetnotifyvalue true order start getting notified data change confirming notification peripheral set one final step process peripheral report whether setting characteristic notify central successful whether succeeded failed following delegate triggered func peripheral peripheral cbperipheral didupdatenotificationstatefor characteristic cbcharacteristic error error let error error print characteristic update notification error errorlocalizeddescription return guard characteristicuuid characteristicuuid else return characteristicisnotifying print characteristic notification begun else print characteristic notification stopped disconnecting centralmanagercancelperipheralconnection peripheral nt think explicitly required implement method subscription failed would make sense detect attempt subscribe perform cleanup code needed point additionally central data pending would like send peripheral would best place send sending data peripheral central manager successfully able capture peripheral relevant characteristic central start sending data peripheral via characteristic one thing note characteristic must explicitly configured peripheral side writable central point possible send data peripheral calling let data messagestringdata using peripheralwritevalue data characteristic type withresponse type argument let specify whether want peripheral reply received data great discerning type data might explicitly required certain order data often repeated peripheral nt catch nothing value lost sending data central opposite side sending data central peripheral side similar method let data messagestringdata using peripheralmanagerupdatevalue data characteristic onsubscribedcentrals central receiving data peripheral finally ready start receiving data peripheral order notified new data arrived characteristic use following delegate func peripheral peripheral cbperipheral didupdatevaluefor characteristic cbcharacteristic error error let error error print characteristic value update failed errorlocalizeddescription return guard let data characteristicvalue else return let message string decoding data receiving data central last peripheral receives data central following method cbperipheralmanager called func peripheralmanager peripheral cbperipheralmanager didreceivewrite request cbattrequest guard let request requestsfirst let data requestvalue else return let message string decoding data one thing extra aware characteristic set writeable time creation sending data peripheral silently fail delegate never called summary going step obvious sending data core bluetooth involves quite step peripheral side peripheral configure advertise service characteristic manage central subscribe unsubscribe central side subscribing characteristic multistep process scanning peripheral connecting peripheral discovering peripheral service discovering service characteristic finally subscribing however said understand terminology object chain related next everything fall place relatively easily challenge chat app introduction core bluetooth api show general basic step connecting central peripheral writing chat app rather large hurdle appeared immediately central peripheral classic use case low powered sensor connected iphone role central peripheral clear cut however connection two iphones question play role suddenly becomes much harder decision one neat thing might obvious start core bluetooth make device central peripheral time meaning simultaneously scanning advertising device opened app device discovery screen create central manager peripheral manager begin scanning advertising time device range thing way device device detects shown onscreen likewise device detect device show device screen device discovery screen interested detecting available device could potentially chat go chat session window want receive message remote device selected case user tap device want talk hardware uuid selected device saved chat window opened holding copy uuid device opened chat window device set scan like standard central connection wo nt occur yet avoid detecting device advertising device discovery menu different service uuid used connection device performing scanning continues happen first time either participant chat submits message chat happens particular device becomes peripheral start advertising happens device detects first device connects central essence whoever chat first becomes peripheral whoever chat last remains central together sharing single connection advertisement saved hardware uuid used determine identity connecting device guarantee someone else different session happened start broadcasting nt accidentally join instead overall method might seem bit strange pragmatic level might make sense set maintain two connection device central connected another peripheral however practice unreliable two connection could potentially fail interference occurs technical reflection discussed core bluetooth api design pattern easy understand work said looked bare minimum getting core bluetooth moving would absolutely sufficient production app folk ditto use core bluetooth flagship product extension bluetooth low energy android support addition challenge limitation experienced project challenge ditto engineer faced well limited message size one thing completely glossed amount data sent characteristic hard limit limit change device historically byte modern phone hardware around byte chat app payload small per message nt much concern certainly something production app need take seriously core bluetooth capable detecting reporting acceptable length message device want send responsibility code chunk data send multiple message speed limitation maximum speed communicating via gatt actually kilobyte per second chat app limitation would never bump heavier application could quickly become bottleneck depending use case might optimize message payload efficient additional speed penalty reliable delivery writing data characteristic specifying withresponse attribute guaranteeing peripheral confirm received data roundhouse operation also incurs additional speed penalty use case require absolute top speed usually best rely unreliable delivery instead implement error correction logic different level control per platform core bluetooth instigates specific policy may apply equivalent ble implementation device android big example limitation core bluetooth imposes much sort data included advertising packet peripheral building product might equivalent android counterpart care must taken ensure interface behave way securityprivacy policy backgrounded apps regular bluetooth stack io function regardless onscreen activity apple implemented strict privacy policy apps adopting ble peripheral device app backgrounded continue advertise local name property longer included additionally backgrounded central longer receive repeating advertisement peripheral range particular limitation big point contention organization trying build contact tracing apps top core bluetooth extremely complex api work certainly becomes easier work time core bluetooth certainly nt easy framework get running quickly order start sending receiving data long process step need followed order slowly capture object need compounding step done via callback one another one time sometimes even one delegate daisychains new delegate case cbperipheral working process needed use case timeconsuming require high cognitive load demand bulletproof error checking handling point delegate callback process error could easily happen derail whole process wireless technology bluetooth prone interference randomly losing device delegate code need bulletproof error handling every step order handle issue potentially occur step process also potentially mean proactive heartbeat state check case expected callback fails occur occasional instability general odd behavior even though core bluetooth quite old point still occasional odd behavior happen quite reliably sometimes sending queue filled capacity callback say cleared sometimes skipped requires periodically testing queue see state certain specific device like ipad mini iphone potentially accidentally stop scanning locked unlocked lack encryption given form data transmitted bluetooth could quite private personal eg person health record encryption always strongly recommended form ble encryption exists reliable implementation might need consider writing encryption layer error correcting implication would entail conclusion first got chat app working text typed one phone automatically appeared felt absolutely magical fantastic time learning core bluetooth order write post hope found everything useful end one thing certainly clear implementing core bluetooth implementation hard involves lot step lot go wrong point user experience engineer researching core bluetooth looking build new product implement sort local communication instead rolling new implementation scratch recommend consider checking synchronization technology ditto ditto tech stack already taken care challenge listed would make integrating communication app breeze thanks reading sample app github repository
9,Lobsters,swift,Swift programming,"Dflat, Structured Data Store for Mobile",https://github.com/liuliu/dflat,dflat structured data store mobile,dflat sqlite flatbuffers core data realm dflat dflat dflat feature dflat core data dflat dflat strict serializable core data dflat combine second introduction dflat flatbuffers schema dflat dflat libmdbx dflat dflat installation dflat bazel dflat swift package manager guide dflat example combine combine schema evolution dflat dflat namespace dflat dflat runtime api dflat transaction dflat dflat data fetching dflat data subscription combine close dflat dflat benchmark dflat dflat dflat wcdb disclaimer crud dflat dflat dflat dflat dflat dflat dflat change subscription dflat dflat dflat dflat sqliteswift dflat,dflat sqlite flatbuffers familiar core data realm dflat occupies space two application unlike two dflat different set feature make different tradeoff feature tradeoff grounded realworld experience writing world largest apps dflat also built groundup using swift hopefully find natural interact swift language feature writing different structured data persistence system mobile past year dflat accumulation lessonslearned building proprietary system io particular goto choice long core data work internal data persistence mechanism many system apps deploying structured data persistence system hundred million mobile device certain challenge intrinsics data persisted higherlevel rest app interact system dflat codebase still young stage however underlying principle proving successful proprietary system dflat implemented following feature particular order system return immutable data object passed system view model generator query object observed update published either callback combine framework mutation happen separate thread caller little control thus asynchronously data fetching happen concurrently synchronously thread caller choice strict serializable multiwriter multireader mode supported user choose singlewriter thus trivially strict serializable multireader mode desire data query expressed swift code typechecked swift compiler schema upgrade require writeaccess underlying database strict readonly possible sqlite unlike core data dflat built groundup swift express data model taking full advantage swift language thus native support struct producttype enum sumtype typechecked query observing combine second introduction dflat consists two part dflatc compiler take flatbuffers schema generate swift code dflat runtime minimal api footprint interact dflat runtime us sqlite storage backend design support backends libmdbx future hard dependency flatbuffers use dflat first use dflatc compiler generate data model flatbuffers schema include generated code project use dflat runtime interact data model installation dflat moment requires bazel precise dflat runtime installed either swift package manager bazel dflatc compiler requires bazel build relevant part install bazel macos following guide use dflatc compiler dflatcpy help proceed add dflat runtime either swift package manager bazel swift package manager package name dflat url http githubcomliuliudflatgit example assuming postfbs file somewhere look like enum color byte red green blue table textcontent text string table imagecontent image string union content textcontent imagecontent table post title string primary primary key color color tag string priority int indexed property indexed content content roottype post important say post object one dflat manages use dflatc compiler generate code schema dflatcpy postexample postexamplepostfbs everything check see file generated postexample directory postgeneratedswift postdatamodelgeneratedswift postmutatinggeneratedswift postquerygeneratedswift adding project basic createreadupdatedelete crud operation post object import dflat import sqlitedflat let dflat sqliteworkspace filepath filepath fileprotectionlevel noprotection create var createdpost post nil dflatperformchanges postself changeshandler txncontext let creationrequest postchangerequestcreationrequest creationrequesttitle first post creationrequestcolor red creationrequestcontent textcontent textcontent text first post guard let inserted try txncontentsubmit creationrequest else return alternatively use txncontenttry submit creationrequest wo nt return result reasonable error handling case let inserted post inserted createdpost post succeed transaction done read let post dflatfetch postself posttitle first post update dflatperformchanges postself changeshandler txncontext let post post let changerequest postchangerequestchangerequest post changerequestcolor green txncontenttry submit changerequest succeed transaction done delete dflatperformchanges postself changeshandler txncontext let post post let deletionrequest postchangerequestdeletionrequest post txncontenttry submit deletionrequest succeed transaction done subscribe change either query object object subscription end object deleted query subscription wo nt complete unless cancelled two set apis one vanilla callbackbased based combine show combine one subscribe live query let cancellable dflatpublisher postself postcolor red orderby postprioritydescending subscribe dispatchqueueglobal sink post print post subscribe object let cancellable dflatpulisher post subscribe dispatchqueueglobal sink post switch post case updated newpost print newpost case deleted print deleted completed schema evolution schema evolution dflat follows exact flatbuffers exception add primary key change primary key different property selected otherwise free add remove index rename property property removed marked deprecated new property appended end table never change type property need versioning long follow schema evolution path schema maintained flatbuffers sqlite disk ops required schema upgrade schema upgrade failure due lack disk space prolonged schema upgrade time due pathological case wo nt thing dflat namespace dflat schema support namespace flatbuffers schema however swift nt really support proper namespace namespace implementation relies public enum extension thus namespace namespace table post title string primary roottype post declare namespace project need swift file contains following public enum evolution public enum work access post object typealias post dflat runtime api dflat runtime minimal api footprint apis total object transaction func workspaceperformchanges transactionalobjecttypes anytype changeshandler escaping transactioncontext transactioncontext void completionhandler success bool void nil api take changeshandler closure perform transaction object creation update deletion mutation performed changerequest object first parameter specifies relevant object going transact read update object specified assertion triggered transaction done completionhandler closure triggered let know whether transaction successful transaction performed background thread exactly one nt concern two different object transaction performed concurrently follows strict serializable protocol case func transactioncontextsubmit changerequest changerequest throw updatedobject func transactioncontexttry submit changerequest updatedobject func transactioncontextabort bool interact dflat apis transaction handle data mutation submit note error possible example created object primary key twice use upsertrequest expected try submit method simplified try submit dance case nt want know returned value fatal conflict primary key otherwise swallow type error disk full encountered type error dflat simply fail whole transaction abort method explicitly abort transaction submission call effect data fetching func workspacefetch oftype elementtype elementquery limit nolimit orderby fetchedresult element func workspacefetch oftype elementtype limit nolimit orderby fetchedresult element func workspacefetchwithinasnapshot data fetching happens synchronously specify condition clause posttitle first post postpriority postcolor red returned fetchedresult element act pretty much like array object element immutable thus either object fetchedresult element safe pas around thread fetchwithinasnapshot provides consistent view going fetch multiple object let result dflatfetchwithinasnapshot firstpost fetchedresult post highpriposts fetchedresult post let firstpost dflatfetch postself posttitle first post let highpriposts dflatfetch postself postpriority postcolor red return firstpost highpriposts needed dflat transaction fetch firstpost highpriposts fetchwithinasnapshot wo nt stop transaction make sure observe view fetching firstpost data subscription func workspacesubscribe element equatable fetchedresult fetchedresult element changehandler escaping fetchedresult element void subscription func workspacesubscribe element equatable object element changehandler escaping subscribedobject element void subscription native subscription apis subscribes change either fetchedresult object object end object deleted subscription triggered completionhandler transaction triggered func workspacepublisher element equatable element atompublisher element func workspacepublisher element equatable fetchedresult element fetchedresultpublisher element func workspacepublisher element equatable elementtype elementquery limit nolimit orderby querypublisher element func workspacepublisher element equatable elementtype limit nolimit orderby querypublisher element combine counterpart besides subscribing object fetchedresult also subscribe query directly happens hood query made upon subscribe hence whichever queue provided subscribe subscribe fetchedresult close func workspaceshutdown completion void nil trigger dflat shutdown transaction made dflat call fail transaction initiated finish normally data fetching return empty result data fetching triggered call finish normally hence completion part completion closure supplied called transaction data fetching initiated shutdown finish benchmark benchmark structured data persistence system notoriously hard dflat wo nt claim fastest however strives predictable performant mean nt pathological case performance dflat degrades unexpectedly also mean dflat wo nt surprisingly fast optimal case following data collected reproduced focuspy app benchmark compared mainly core data listed number fmdb wcdb wcdb benchmark give better overview would expect test device test device iphone pro memory disclaimer take grain salt benchmark number number presented simply demonstrate pathological case framework involved nt taken context practice structured data persistence system rarely bottleneck important understand use rather raw number lightworkload device look like code app benchmark compiled release mode compilationmodeopt wholemoduleoptimization wcdb benchmark compiled release mode whatever mean project file benchmark peerreviewed case represents best case scenario framework case represents worst case scenario designed reflect realworld workload rather benchmark designed reflect framework characteristic extreme case crud first compared dflat core data object insertion fetching update deletion object generated index title indexed core data fetching object evaluated framework querying nonindexed property update object individually evaluated updating different object separate transaction time fetching object individually evaluated fetching different object title indexed core data primary key dflat time obviously best way thing update object one big transaction fetch batch possible interesting pathological case discussed earlier proper way multithread insertion deletion core data considerably tricky nt got around multithread insert object multithread delete object dflat number look good true example insertion dflat appears twice fast core data number nt make intuitive sense multithread insertion slower putting perspective important chart compared number extracted wcdb benchmark without modification compare ops per second rather time spent fetching object note wcdb benchmark baseline read fetch best case scenario sqlite also compare simple table two column key blob payload byte multithread writes indeed slower ideal case sqlite execute writes concurrently thus multiwriter mode really mean transaction closure executed concurrently writes still happen serially sqlite layer still beneficial realworld case spend significant time transaction closure data transformation rather sqlite writes ceiling writes much higher dflat achieved wcdb represents ideal case two column dflat number realworld would also lower index object many field even array data since dflat nt introduce optimization batch operation nt surprise dflat performance scale linearly wrt dataset size follow chart show change subscription every framework slightly different design change subscription work core data implement two way nsfetchedresultscontroller delegate callback nsmanagedobjectcontextobjectsdidchange developer perspective nsfetchedresultscontroller interpreted counterpart fetchedresult subscription dflat side support making sqllike query sending update result set build dflat object subscription mechanism core data based nsmanagedobjectcontextobjectsdidchange notification purpose objective simply observe latency nsmanagedobjectcontextobjectsdidchange notification compare two assuming underlying delivery individual object subscription noop three part benchmark subscribe change fetched result observe exactly one object fetched primary key subsequent transaction update object including subscribed object measuring latency saved time update delivered core data child context viewcontext set latency measured saving child context time delivered data persisted viewcontextsave called child context saved dflat side happens data persisted subscribe change fetched object subsequent transaction update object including subscribed object measuring latency saved time update delivered core data nsmanagedobjectcontextobjectsdidchange subscribed viewcontext object measure latency saving child context time notification delivered subscribe change fetched result observe around object fetched range query subsequent transaction update object rotate object fetched result maintaining object per result measurement setup core data number fetched result observation especially case represents pathological case particularly troublesome dflat fetching object disk individually would take around millisecond thus would take sqliteswift approach identifying whcih table changed simply refetch every query table could end performant although case refetching disk would definitely slower close second query object benchmark core data suffered similar problem worse extreme case mobile apps handful query subscription probably thousand object query unsubscribe change navigate away page extreme case hardly realistic going see stutter core data object updated happen table view need updated reality subscribe individual query primary key seems big nono want observe individual object subscribe individual object case show however expose messagesortinganddelivery mechanism working efficiently expected fundamentally dflat change subscription work best incremental change evaluate every changed object fetched request subscription related object design avoids trip disk every transaction also relies reasonable implementation evaluate every changed object efficiently quick test show looping object string equality evaluation swift take millisecond profile show majority time spent object retain release function call swift runtime two way improve current evaluation relies swift protocol associated type seems certain swift usage higher runtime cost others switching better linear scan either interpreted vm simply optimizing evaluation procedure would probably show improvement algorithmically improved current implementation naive way evaluate object subscribed query study database implementation know accelerated data structure helpful particularly fieldexpr query used build sorted set comparable query accelerated sorted set quite doable challenge need wrestling swift runtime behavior erratic time obvious gain possible intended delegate part c make harder hard implement use logic internally support isnull isnotnull query mean every turn need sort unknown robust correct implementation mean much unit test feel comfortable also need balance linear scan use accelerated data structure small number change linear scan could faster previous empirical study
10,Lobsters,swift,Swift programming,Store SSH keys in the Secure Enclave (macOS),https://github.com/maxgoedjen/secretive,store ssh key secure enclave macos,secretive sekey project safer storage access control notification support smart card getting started installation direct download release page using homebrew faq faq auditable build process note around code signing keychains backup transfer new machine security maxgoedjen gmailcom,secretive secretive app storing managing ssh key secure enclave inspired sekey project rewritten swift external dependency handy native management app safer storage common setup ssh key keeping disk guarded proper permission fine case super hard malicious user malware copy private key store key secure enclave impossible export design access control mac secure enclave also support strong access control like touch id authentication apple watch configure key require touch id watch authentication accessed notification secretive also notifies whenever key accessed never caught guard support smart card mac without secure enclave configure smart card yubikey use signing well getting started installation direct download download latest release release page using homebrew brew cask install secretive faq faq auditable build process build produced github action auditable build release generation process build document shas step output sha checksum build produced github action verify source code given build corresponds given release note around code signing keychains secretive us secure enclave key storage still relies keychain apis access keychain restricts read key app specifically bundle id created build secretive source make sure consistent bundle id use keychain able locate key backup transfer new machine secret secure enclave exportable able backed able transfer new machine get new mac create new set secret specific mac security discover vulnerability project please notify maxgoedjen gmailcom subject containing secretive security
11,Lobsters,swift,Swift programming,WWDC 2020,https://www.apple.com/apple-events/event-stream/,wwdc,,watchos watchos discover custom watch face website social medium share face friend also meet sleep app dream track fitness metric four new workout create healthier habit new handwashing feature see preview
12,Lobsters,swift,Swift programming,The Curious Case of Swift's Adoption of Smalltalk Keyword Syntax,https://blog.metaobject.com/2020/06/the-curious-case-of-swift-adoption-of.html,curious case swift adoption smalltalk keyword syntax,accepted multiple trailing closure trouble,really surprised learn swift recently adopted smalltalk keyword syntax accepted multiple trailing closure keyword terminated colon followed argument without surrounding brace mind boggles little course swift would nt swift nt special case special case specifically case multiple trailing closure special case trailing closure weird specialcasey enough example uiviewanimate withduration selfviewalpha completion selfviewremovefromsuperview note argument animate would seem terminate closing parenthesis actually case curly brace closing paren start closure actually also argument method socalled trailing closure little bit sympathy construct closure inside parenthesis look really really awkward course params apart sole x inside f x look awkward let quibble another thing enables method reasonably resemble control structure heard really great idea problem sometimes one closure argument stacking behind appears end functionmethod call get really really awkward ca nt tell block argument trailing closure nt get keyword well different method syntax one traditional cpascalcjava function call syntax xf already weirdish addition smalltalkobjectivec keywords inside f x syntax f arg x original trailingclosure syntax thing first closure smalltalk nonbrackted keyword syntax subsequent closure impressive scary kind way swift crescendo special case stopping short general result complexity semantics complexity behaviour ie bug complexity use ie workarounds understand proposal quite controversial heated discussion opponent proponent understand sympathize side one hand markedly better alternative hand special case special case difficult justify addition already special case beget special case beget special case course answer always smalltalk keyword syntax reasonable solution case also solves case general solution could look objectivesmalltalk us curly brace instead closure instead square bracket uiview animate selfviewalpha completion self view removefromsuperview special case every argument labeled syntax mush bracket inside parenthesis etc yes also handle userdefined control structure method nsnumber stdout println introduce special case willy nilly since keywords naturally go argument need operator different special syntax form allow binary keywords look little different instead write instead pow signature func pow x decimal int decimal really neeed go trouble defining operator swift b another special kind syntax b yes know detail detail forth course late chose smalltalk base syntax language turned objectivesmalltalk nt like gotten used via objectivec smalltalk syntax surprisingly flexible general smalltalk apis look lot like dsl without tooling overhead frustrating part stuff available wellknown least bother look andor ask instead choose thing willynilly everybody suffer consequence update guess trying get thought thing little bit could almost entire syntax language cost complexity implementation size brittleness cognitive load etc one special case special case would overall better boot
13,Lobsters,swift,Swift programming,Introducing Swift AWS Lambda Runtime,https://swift.org/blog/aws-lambda-runtime/,introducing swift aws lambda runtime,swift aws lambda runtime amazon web service lambda platform fabian fett background serverless function aws lambda runtime api work using closure sn sqs apigateway using eventlooplambdahandler swiftnio additional resource readme project status getting involved source available swift forum github issue tracker question associated thread swift forum,pleasure announce new open source project swift server ecosystem swift aws lambda runtime distributed swift package swift aws lambda runtime designed help swift developer build serverless function amazon web service lambda platform project group effort included engineer across swift community including engineer apple amazon notably fabian fett pioneered work community coauthored library open source library anyone interested contributing project easily join help make better background many modern system client component like io macos watchos application well server component client interact serverless function often easiest efficient way client application developer extend application cloud serverless function becoming increasingly popular choice running eventdriven otherwise adhoc compute task cloud power mission critical microservices data intensive workload many case serverless function allow developer easily scale control compute cost given ondemand nature using serverless function attention must given resource utilization directly impact cost system swift shine low memory footprint deterministic performance quick start time swift fantastic match serverless function architecture combine swift developer friendliness expressiveness emphasis safety solution great developer skill level scalable cost effective swift aws lambda runtime designed make building lambda function swift simple safe library implementation aws lambda runtime api us embedded asynchronous http client finetuned performance aws runtime context library provides multitier api allows building range lambda function quick simple closure complex performancesensitive event handler work using closure simplest way use aws lambda runtime pas closure example import module import awslambdaruntime example receiving responding string lambdarun context payload string callback callback success hello payload commonly payload would json modeled using codable example import module import awslambdaruntime request us codable transparent json encoding private struct request codable let name string response us codable transparent json encoding private struct response codable let message string example receiving responding json using codable lambdarun context request request callback callback success response message hello requestname since lambda function often triggered event originating aws platform sn sqs event package also includes awslambdaevents module providing implementation common trigger event type example handling sqs message import module import awslambdaruntime import awslambdaevents example receiving sqs message response void lambdarun context message sqsmessage callback callback success void addition common trigger event awslambdaevents also includes abstraction integrating lambda function apigateway aws system help exposing lambda function http endpoint import module import awslambdaruntime import awslambdaevents example receiving respoding lambdarun context request callback callback success statuscode accepted using eventlooplambdahandler modeling lambda function closure simple safe swift aws lambda runtime ensure userprovided function offloaded network processing thread thread even code becomes slow unresponsive underlying lambda process continue interact runtime engine safety come small performance penalty context switching networking processing thread case simplicity safety using closurebased api preferred complexity performanceoriented api detailed performancesensitive lambda function may choose use complex api allows user code run thread networking handler swift aws lambda runtime us swiftnio underlying networking engine mean apis based swiftnio concurrency primitive like eventloop eventloopfuture example handling sn message import module import awslambdaruntime import awslambdaevents import nio lambda handler conforms eventlooplambdahandler struct handler eventlooplambdahandler typealias snsmessage request type typealias void response type void example receiving sn message response void func handle context lambdacontext payload eventloopfuture contexteventloopmakesucceededfuture void lambdarun handler beyond cognitive complexity using eventloopfuture based apis note apis used extra care eventlooplambdahandler execute userprovided function eventloop thread library networking engine putting requirement implementation never block underlying eventloop word lambda code never use blocking api call might prevent library interacting lambda platform additional resource additional documentation example found project readme project status beginning communitydriven opensource project actively seeking contribution core api considered stable api may still evolve get closer version several area need additional attention including limited performance tuning additional trigger event additional documentation best practice additional example getting involved interested swift aws lambda runtime come get involved source available encourage contribution open source community feedback question would like discus project please feel free chat swift forum would like report bug please use github issue tracker look forward working helping move industry forward better safer programming future question please feel free post question post associated thread swift forum
14,Lobsters,swift,Swift programming,Diffing Explorations,https://github.com/numist/Diffing-Explorations,diffing exploration,diffing exploration article heckel ngram membership testing round diffing ordered set work queue described geometrically suggestion membership testing round diffing ngram trading accuracy performance lcs naming thing club appendix data theory meet reality documentsperformance analysismd,diffing exploration swift project playground literally experimenting different approach diffing algorithm pursuit performance minimal compromise initial experiment organized around two observation use fast membership testing diffing underexplored footnote article heckel mention diffing ngram instead element nothing could find literature developed idea example threeline block could chosen basic unit exclusive hashcodes line etc forming index hash table since index line j computed two exclusive or index line j hashcode line time take perform algorithm kline block independent k membership testing round membership testing already proven extremely effective mechanism diffing ordered set resisted generalization number element comparison reduced element exist one two collection shared element suffer extra overhead furthermore way myers algorithm track work cause adaptation algorithm trend towards multiple nd regardless realization meant reimagining dynamic programming solution queue work work queue simplified round myers maintains list v length element position represents edit path made progress insert remove improving performance requires reducing number edit path explored specialized worktracking data structure needed assuming obvious edits consumed greedily membership testing cost ignored like match higher level problem solved work queue described geometrically selecting set point none x value le x value point visually look like keeping solid point collection solved sorting point descending x inserting quadtree drop insertion southwest thanks ken ferry suggestion membership testing round predicted membership testing dramatically improves performance diffing collection substantially nonoverlapping alphabet unfortunately offer little improvement across common case often resulting minor net regression membership testing required work queue function correctly keeping diffing ngram human read book chapter chapter paragraph paragraph sentence sentence word word letter data structure scale also include hierarchy structure sqlite database file contains page page contain cell cell contain record encoding number column value similarly modification data commonly operate high level chapter rearranged sentence edited quite uncommon two book differ large random assortment individual character diff database byte byte look bigger picture diffing ngrams promise improvement similar diffing higherlevel token without requiring familiarity internal structure data select appropriate size think binary sequence representing literal number space required address would n len highentropy collection binary one n gram exist entire collection entropy single collection nt actually control good since content book database highly performance derive set ngrams unique collection using ngrams size log base alphabetcount n work pretty well practice learned elementlevel membership testing identifying element exist one collection secret faster allowing algorithm selectively pursue path obvious true ngrams diffing collection reverse myers worst case run linear time diffing collection shuffled version myers pain point especially large alphabet run nearlinear time overall ngram diffing dramatic improvement among input suffer poor performance myers algorithm difficult prove efficiency new algorithm worst case significantly improved myers input myers algorithm already fairly competent unfortunately number previously fast workload showing performance regression stage trading accuracy performance element membership testing affect minimality resulting diff ngram diffing since already compromising lcs name speed else adjust knob one possibility come ordered set diffing algorithm high level ordered set diffing look like func difference e orderedset e b orderedset e var x x acount bcount x b match x else switch bindex x aindex b case none remove x x case none insert b case let bioax let aioby bioax algorithm progressed beyond index x b remove x x else aioby x algorithm progressed beyond index b insert b else bioax aioby x x away b b remove x x else b away x b insert b algorithm also produce minimal diff tradeoff happens last two block offered choice always seek nearest matching opportunity applying weaker variant generalized diffing algorithm close performance gap common workload previously slower run time faster myers eager pursuit nearer match take advantage intersection two collection ngrams complement ngram membership testing use symmetric difference entire union providing benefit algorithm use offer performance boost reducing cost ngram membership testing perhaps counterintuitively eager pursuit match reduced ngram size also contribute algorithm producing smaller diffs naming thing enough performance improvement call referring algorithm club since speed come membership testing club care lot membership appendix data unit test project include suite dedicated performance analysis club initial overhead shared myers test show significant algorithmic improvement n exhibiting benefit smaller workload well interesting performance measurement test comparison clubmyers change clubmyers diffing two source file line common v canonical lorem ipsum character common v canonical lorem ipsum word lorem ipsum v reverse character lorem ipsum v character uuids v reverse uuids v randomized two randomly generated binary string n randomly generated binary string v reverse n illustrated random binary string test club struggle diffing randomized data small alphabet element match far common lack higherlevel pattern would predict circumstance club tends produce significantly larger diffs maintaining performance tradeoff using ngrams like human perception two randomlygenerated buffer little overlap viewed higher level practical purpose consider fact myers identifies many match two completely unrelated piece data performance bug feature theory meet reality performance doc described term element comparison consideration given element hashing cost maintaining work queue real world show despite club order magnitude reduction active edit path element comparison myers still faster workload complete dozen m le accounting overhead club internal structure put disadvantage term wall clock time per element comparison said implementation measure significantly faster larger workload probably used instead myers whenever n preferably compensating shared prefixsuffix complete investigation realworld performance club diffing found documentsperformance analysismd
15,Lobsters,swift,Swift programming,Why NetNewsWire Is Fast,https://inessential.com/2020/05/18/why_netnewswire_is_fast,netnewswire fast,fast r atom parsing rsparser framework conditional get content hash conditional get serial queue avoid singlechangeplusnotifications trap coalescing custom database fmdb explain query plan full text search extension set dictionary profiler stack view auto layout table cell view caching string size caching text measurement summary,netnewswire fast performance one core value fast part definition app suspect hard way take month two speed thing time time app always √¢ best kind heading toward satisfactory never arrive best general advice give make sure performance part foundation app make sure part every decision every day make sure word performance topping √¢ pizza specific reason netnewswire fast netnewswire like many apps day √¢ basically fancy database browser data come web apply apps item particular order fast r atom parsing painful way parse xml sax parser also get best performance use least memory use sax rsparser framework imac parsing local copy past instance daring fireball atom feed √¢ relatively large size √¢ happens second fast another thing well run parser background serial queue since parsing selfcontained operation √¢ input data get back object √¢ threading issue conditional get content hash parser fast also best skip parsing entirely two way use conditional get give server chance respond modified content feed changed since last time asked skip parsing case obviously also create hash raw feed content whenever download feed hash match hash last time know content modified skip parsing serial queue parser code run serial queue operation made selfcontained √¢ thing call back main thread without threading issue √¢ use serial queue chance could noticeably block main thread key course making sure operation fact selfcontained trigger kvo kind notification work simple example background thing besides feed parsing creating thumbnail feed icon avoid singlechangeplusnotifications trap example trap easy fall say user marking article read calling articleread true trigger via kvo notification something thing like database update user interface update unread count updating undo stack maintenance etc say marking article current timeline read could call articleread true article √¢ article trigger whole bunch work slow specific apis action like apis expect collection object api mark single article read used mark article read way database updated unread count updated push one action undo stack coalescing also try coalesce kind work instance refresh app could recalculate unread count every single change √¢ could mean ton work instead coalesce √¢ make recalculating unread count happens often every second instance make huge difference custom database app fancy database browser whole thing lost core data great use sqlite directly via fmdb give u ability treat database database optimize schema index query way outside scope core data remember core data manages graph object database use various tool √¢ explain query plan √¢ make sure made fetching counting updating fast efficient caching run database serial queue block main thread use structs instead class much possible model object sure matter performance happen like structs make searching fast use full text search extension could probably write article going detail database work anything else netnewswire fast set dictionary often need look thing √¢ feed given feedid instance √¢ use dictionary frequently quite common mac io programming suspect le common use set set default collection type √¢ never want check see array contains something never want deal duplicate object performancekillers use array api requires array need ordered collection usually ui profiler instead guessing slow use profiler instrument find exactly slow profiler often surprising one thing found expect hashing object one point pretty slow use set quite lot whole lot hashing going using synthesized equality hashability object lot string property √¢ turn hashing string pretty darn slow instead wrote hash function object many case could hash one string property √¢ article id instance √¢ instead five ten stack view experience stack view tell excruciatingly slow allowed auto layout table cell view people praise timelinebased app like netnewswire often say something like scroll like butter imagine butter actually scrolling well yes get butter smooth use auto layout plenty √¢ cool like √¢ allow inside table cell view instead write layout code actually difficult maybe little tedious laying table cell view pretty easy really figure optimized manual layout code always going faster constraint solver give u edge smooth scrolling √¢ one place otherwise good app fall face layout code need view article object width run time use code determine height row without run auto layout pas caching string size text measurement slow √¢ slow enough make even manual layout slow netnewswire smart thing caching text measurement example know given string tall available width available width tell without measuring tall available width summary silver bullet making app fast mean bunch different thing √¢ mean paying attention performance continuously
16,Lobsters,swift,Swift programming,Gryphon ‚Äì The Swift to Kotlin translator,https://github.com/vinivendra/Gryphon,gryphon swift kotlin translator,swift kotlin translator riskfree editing needed xcode integration custommade status new issue installing macos linux homebrew homebrew mint mint gitpod gitpod building source docker docker guide tutorial translate command line program translate new io app android add gryphon existing app using collection using translation comment using template frequently asked question gryphon compile run translated code need fix first able translate compile run supported code without need posttranslation edits able understand translated code understand input swift code also able understand translated kotlin code file bug translate anything written swift currently capable translating many main feature one might expect gryphon help translate existing io app yes need adaptation transpilers mvp mvc adding gryphon existing app use gryphon translate nonios app yes ever support translating kotlin code swift language probably help open new issue contributor guide good first issue first timer open issue code conduct,swift kotlin translator gryphon program translates swift code kotlin code created enable mobile app developer share part io app codebase android riskfree stop using gryphon whenever want still able read understand kotlin code even computergenerated part editing needed translated kotlin file work swift file came xcode integration translate io code android compile android app see kotlin error warning swift line originated without leaving xcode custommade use special comment template customize kotlin translation use platformspecific feature want even translated source file status gryphon preview mean main system idea already implemented instance translating codebase however new user might still find new bug fixed case feel free report new issue github installing gryphon support macos linux install homebrew use homebrew install gryphon dependency automatically brew install vinivendragryphongryphon mint use mint install gryphon using swift package manager mint install vinivendragryphon gitpod try gitpod downloading building source clone repo run installation script git clone http githubcomvinivendragryphongit cd gryphon installsh docker install docker container git clone http githubcomvinivendragryphongit cd gryphon docker build gryphon docker run rm privileged v absolutepathtocurrentdirectory appgryphon gryphon installsh guide check tutorial get started cover basic information needed begin using gryphon whether want translate command line program translate new io app android add gryphon existing app also advanced guide using collection using translation comment using template frequently asked question gryphon gryphon command line application translate swift code kotlin code especially designed enable app developer translate platformindependent part io apps code use android apps compile run translated code need fix first gryphon output code meant behave like input code created still possible technically generate kotlin code nt compile instance try translate unsupported swift feature bug rule able translate compile run supported code without need posttranslation edits able understand translated code one gryphon main goal make sure translated code understood human being rule understand input swift code also able understand translated kotlin code nt feel free file bug done within realistic constraint priority translated code behave correctly instance gryphon attempt find reasonably understandable kotlin middle ground somewhere machinecodelike kotlin perfectly idiomatic kotlin translate anything written swift gryphon support swift feature constantly evolving currently capable translating many main feature one might expect class structs enums closure extension protocol etc enough currently translates around codebase platformspecific file swift feature waiting implemented others ca nt translated kotlin may never supported gryphon help translate existing io app yes need adaptation though probably le average multiplatform framework depends application similar app architecture android counterpart often code us swift feature unsupported gryphon etc worth noting like transpilers app development gryphon best suited translating platformindependent logic code currently support translating call uikit instance telling happen someday recommended start translating platformindependent part code adding new file incrementally might helo use architecture clear separation ui code logic code like mvp mvc separate code translated information check adding gryphon existing app use gryphon translate nonios app yes gryphon main focus iostoandroid support primarily swift kotlin translator nt require anything iosspecific run use linux translate command line tool example even gryphon source code translated commandline tool nothing iosrelated ever support translating kotlin code swift language probably challenge involved translating swift code kotlin specific two language translating kotlin swift would require new frontend kotlin new backend swift allnew logic middle turn one basically whole new gryphon go combination language help thanks offer want suggest way improve gryphon feel free open new issue bug report feature request welcome encouraged would like contribute directly first check contributor guide learn set environment looking inspiration take look good first issue new gryphon beginnerfriendly first timer new open source already know want open issue let talk going contribute probably read code conduct
17,Lobsters,swift,Swift programming,Apple to host virtual Worldwide Developers Conference beginning June 22,https://www.apple.com/newsroom/2020/05/apple-to-host-virtual-worldwide-developers-conference-beginning-june-22/,apple host virtual worldwide developer conference beginning june,apple developer app apple developer website,cupertino california apple today announced host annual worldwide developer conference virtually beginning june apple developer app apple developer website free developer company also announced swift student challenge opportunity student developer showcase love coding creating swift playground year opportunity million creative innovative developer around world get early access future io ipados macos tvos watchos learn apple engineer work build app experience enrich life apple customer around globe biggest yet bringing together global developer community million unprecedented way week june learn future apple platform said phil schiller apple senior vice president worldwide marketing wait meet online june global developer community share new tool working help create even incredible apps service look forward sharing detail everyone get closer exciting event student integral part apple developer community last year wwdc saw attendance student developer spanning different country said craig federighi apple senior vice president software engineering look forward although gathering virtual year want recognize celebrate creative contribution young developer around world wait see next generation innovative thinker turn idea reality swift student challenge swift playground revolutionary app ipad mac make learning swift programming language interactive fun pm pdt may student developer world submit swift student challenge creating interactive scene swift playground experienced within three minute winner receive exclusive jacket pin set information visit developer encouraged download apple developer app additional program information including keynote platform state union detail session lab schedule shared june information also made available apple developer website email app store country region world safest vibrant app marketplace half billion people visiting week best place user discover new apps allows developer size distribute apps customer around world app store feature many way developer build business since launch developer creating innovative apps influence culture change life apple revolutionized personal technology introduction macintosh today apple lead world innovation iphone ipad mac apple watch apple tv apple five software platform io ipados macos watchos tvos provide seamless experience across apple device empower people breakthrough service including app store apple music apple pay icloud apple employee dedicated making best product earth leaving world better found
18,Lobsters,swift,Swift programming,The Composable Architecture,https://github.com/pointfreeco/swift-composable-architecture,composable architecture,composable architecture composable architecture state management composition side effect testing ergonomics learn pointfree brandon williams stephen celis part part part part example basic usage state action environment reducer store testing example debugging supplementary library faq requirement reactiveswift rxswift installation file swift package add package http githubcompointfreecoswiftcomposablearchitecture composablearchitecture composablearchitecture tictactoe tictactoecommon documentation help swift forum credit thanks pointfree chris liscio shai mishali combinecommunity library elm redux license license,composable architecture composable architecture tca short library building application consistent understandable way composition testing ergonomics mind used swiftui uikit apple platform io macos tvos watchos composable architecture library provides core tool used build application varying purpose complexity provides compelling story follow solve many problem encounter daytoday building application state management manage state application using simple value type share state across many screen mutation one screen immediately observed another screen composition break large feature smaller component extracted isolated module easily glued back together form feature side effect let certain part application talk outside world testable understandable way possible testing test feature built architecture also write integration test feature composed many part write endtoend test understand side effect influence application allows make strong guarantee business logic running way expect ergonomics accomplish simple api concept moving part possible learn composable architecture designed course many episode pointfree video series exploring functional programming swift language hosted brandon williams stephen celis watch episode well dedicated multipart tour architecture scratch part part part part example repo come lot example demonstrate solve common complex problem composable architecture check directory see including basic usage build feature using composable architecture define type value model domain state type describes data feature need perform logic render ui action type represents action happen feature user action notification event source environment type hold dependency feature need api client analytics client etc reducer function describes evolve current state app next state given action reducer also responsible returning effect run api request done returning effect value store runtime actually drive feature send user action store store run reducer effect observe state change store update ui benefit instantly unlock testability feature able break large complex feature smaller domain glued together basic example consider ui show number along button increment decrement number make thing interesting suppose also button tapped make api request fetch random fact number display fact alert state feature would consist integer current count well optional string represents title alert want show optional nil represents showing alert struct appstate equatable var count var numberfactalert string next action feature obvious action tapping decrement button increment button fact button also slightly nonobvious one action user dismissing alert action occurs receive response fact api request enum appaction equatable case factalertdismissed case decrementbuttontapped case incrementbuttontapped case numberfactbuttontapped case numberfactresponse result string apierror struct apierror error equatable next model environment dependency feature need job particular fetch number fact need construct effect value encapsulates network request dependency function int effect string apierror string represents response request effect typically work background thread case urlsession need way receive effect value main queue via main queue scheduler dependency important control write test must use anyscheduler use live dispatchqueue production test scheduler test struct appenvironment var mainqueue anyschedulerof dispatchqueue var numberfact int effect string apierror next implement reducer implement logic domain describes change current state next state describes effect need executed action nt need execute effect return none represent let appreducer reducer appstate appaction appenvironment state action environment switch action case factalertdismissed statenumberfactalert nil return none case decrementbuttontapped statecount return none case incrementbuttontapped statecount return none case numberfactbuttontapped return environmentnumberfact statecount receive environmentmainqueue catchtoeffect map appactionnumberfactresponse case let numberfactresponse success fact statenumberfactalert fact return none case numberfactresponse failure statenumberfactalert could load number fact return none finally define view display feature hold onto store appstate appaction observe change state rerender send user action store state change must also introduce struct wrapper around fact alert make identifiable alert view modifier requires struct appview view let store store appstate appaction var body view withviewstore selfstore viewstore vstack hstack button viewstoresend decrementbuttontapped text viewstorecount button viewstoresend incrementbuttontapped button number fact viewstoresend numberfactbuttontapped alert item viewstorebinding get factalertinit title send factalertdismissed content alert title text struct factalert identifiable var title string var id string selftitle important note able implement entire feature without real live effect hand important mean feature built isolation without building dependency help compile time also straightforward uikit controller driven store subscribe store viewdidload order update ui show alert code bit longer swiftui version collapsed click expand class appviewcontroller uiviewcontroller let viewstore viewstore appstate appaction var cancellables set anycancellable init store store appstate appaction selfviewstore viewstore store superinit nibname nil bundle nil required init coder nscoder fatalerror init coder implemented override func viewdidload superviewdidload let countlabel uilabel let incrementbutton uibutton let decrementbutton uibutton let factbutton uibutton omitted add subviews set constraint selfviewstorepublisher map assign text countlabel store selfcancellables selfviewstorepublishernumberfactalert sink weak self numberfactalert let alertcontroller uialertcontroller title numberfactalert message nil preferredstyle alert alertcontrolleraddaction uialertaction title ok style default handler self viewstoresend factalertdismissed self present alertcontroller animated true completion nil store selfcancellables objc private func incrementbuttontapped selfviewstoresend incrementbuttontapped objc private func decrementbuttontapped selfviewstoresend decrementbuttontapped objc private func factbuttontapped selfviewstoresend numberfactbuttontapped ready display view example scene delegate construct store moment need supply dependency use effect immediately return mocked string let appview appview store store initialstate appstate reducer appreducer environment appenvironment mainqueue dispatchqueuemainerasetoanyscheduler numberfact number effect value number good number brent enough get something screen play around definitely step vanilla swiftui way benefit give u consistent manner apply state mutation instead scattering logic observable object various action closure ui component also give u concise way expressing side effect immediately test logic including effect without much additional work testing test first create teststore information would create regular store except time supply testfriendly dependency particular use test scheduler instead live dispatchqueuemain scheduler allows u control work executed nt artificially wait queue catch let scheduler dispatchqueuetestscheduler let store teststore initialstate appstate reducer appreducer environment appenvironment mainqueue schedulererasetoanyscheduler numberfact number effect value number good number brent test store created use make assertion entire user flow step step way need prove state changed expect step cause effect executed feed data back store must assert action received properly test user increment decrement count ask number fact response effect trigger alert shown dismissing alert cause alert go away storeassert test tapping incrementdecrement button change count send incrementbuttontapped send decrementbuttontapped test tapping fact button cause u receive response effect note advance scheduler used receive reducer send numberfactbuttontapped scheduleradvance receive numberfactresponse success good number brent good number brent finally dismiss alert send factalertdismissed nil basic building testing feature composable architecture lot thing explored composition modularity adaptability complex effect example directory bunch project explore see advanced usage debugging composable architecture come number tool aid debugging reducerdebug enhances reducer debugprinting describes every action reducer receives every mutation make state received action appactiontodocheckboxtapped index appstate todos todo iscomplete false iscomplete true description milk id todo iscomplete false description egg id todo iscomplete true description hand soap id reducersignpost instrument reducer signpost gain insight long action take execute effect running supplementary library one important principle composable architecture side effect never performed directly instead wrapped effect type returned reducer store later performs effect crucial simplifying data flow application gaining testability full endtoend cycle user action effect execution however also mean many library sdks interact daily basis need retrofitted little friendly composable architecture style like ease pain using apple popular framework providing wrapper library expose functionality way play nicely library far support composablecorelocation wrapper around cllocationmanager make easy use reducer easy write test logic interacts cllocationmanager functionality composablecoremotion wrapper around cmmotionmanager make easy use reducer easy write test logic interacts cmmotionmanager functionality come soon keep eye interested contributing wrapper library framework yet covered feel free open issue expressing interest discus path forward faq composable architecture compare elm redux others expand see answer composable architecture tca built foundation idea popularized elm architecture tea redux made feel home swift language apple platform way tca little opinionated library example redux prescriptive one executes side effect tca requires side effect modeled effect type returned reducer way tca little lax library example elm control kind effect created via cmd type tca allows escape hatch kind effect since effect conforms combine publisher protocol certain thing tca prioritizes highly point focus redux elm library example composition important aspect tca process breaking large feature smaller unit glued together accomplished pullback combine operator reducer aid handling complex feature well modularization betterisolated code base improved compile time nt store threadsafe nt send queued nt send run main thread expand see answer action sent store reducer run current state process done multiple thread possible work around use queue sends implementation introduces new complication done simply dispatchqueuemainasync incur thread hop even already main thread lead unexpected behavior uikit swiftui sometimes required work synchronously animation block possible create scheduler performs work immediately main thread otherwise us dispatchqueuemainasync eg see reactiveswift uischeduler introduces lot complexity probably adopted without good reason end day require store used much way interact apple apis urlsession delivers result background thread thus making responsible dispatching back main thread composable architecture make responsible making sure send action main thread using effect may deliver output nonmain thread must explicitly perform receive order force back main thread approach make fewest number assumption effect created transformed prevents unnecessary thread hop redispatching also provides testing benefit effect responsible scheduling test effect would run synchronously immediately would able test multiple inflight effect interleave affect state application however leaving scheduling store get test aspect effect desire ignore prefer flexibility however still fan choice never fear composable architecture flexible enough allow introduce functionality desire possible create higherorder reducer force effect deliver output main thread regardless effect work extension reducer func receive scheduler scheduler self self state action environment self state action environment receive scheduler erasetoeffect would probably still want something like uischeduler nt needlessly perform thread hop requirement composable architecture depends combine framework requires minimum deployment target io macos mac catalyst tvos watchos application must support older os fork reactiveswift rxswift adopt installation add composablearchitecture xcode project adding package dependency file menu select swift package add package enter http githubcompointfreecoswiftcomposablearchitecture package repository url text field depending project structured single application target need access library add composablearchitecture directly application want use library multiple target must create shared framework depends composablearchitecture depend framework target example check tictactoe demo application split lot feature module consumes static library fashion using tictactoecommon framework documentation latest documentation composable architecture apis available help want discus composable architecture question use solve particular problem ask around swift forum credit thanks following people gave feedback library early stage helped make library today paul colton kaan dedeoglu matt diephouse josef dole≈æal eimantas matthew johnson george kaimakas nikita leonov christopher liscio jeffrey macko alejandro martinez shai mishali willis plummer simonpierre roy justin price sven schmidt kyle sherman petr ≈°√≠ma jasdev singh maxim smirnov ryan stone daniel hollis tavares pointfree subscriber special thanks chris liscio helped u work many strange swiftui quirk helped refine final api thanks shai mishali combinecommunity project took implementation publisherscreate use effect help bridge delegate callbackbased apis making much easier interface party framework library composable architecture built foundation idea started library particular elm redux also many architecture library swift io community one set priority tradeoff differ composable architecture license library released mit license see license detail
19,Lobsters,swift,Swift programming,SwiftPlayground-Pharo: Interact with Swift on Pharo,https://github.com/brackendev/SwiftPlayground-Pharo,swiftplaygroundpharo interact swift pharo,swift xcode io december march instability simplest swiftplaygroundpharo interact swift pharo asts pharo table content installation usage swift playground todo ast inline swift api reference swift output abstract syntax tree ast string class extension print print string class extension ast pharo object swift string serialization array class extension boolean class extension dictionary class extension string class extension swift response string pharo object deserialization todo import foundation asynchronous swift code dispatchmain exit urlrequest todo acknowledgement author brackendev license,never ever praise xcode playground bound crash second later swift xcode yoad yoadapps december get apple requires student submit playground experienced minute apply wwdc reviewer spend remaining minute trying get xcode run successfully patrick balestra balestrapatrick march xcode swift playground instability running even simplest swift code swift code runner implemented pharo brings benefit greatly increased stability trying short piece code working swift output powerful pharo environment work progress swiftplaygroundpharo interact swift pharo run swift pharo swift playground interoperate pharo inspect output swift asts pharo reference platform requires macos tested gnulinux tested ubuntu bit swift tool see installation table content installation install setup swift tool environment playground evaluate metacello new repository github brackendevswiftplaygroundpharo baseline swiftplayground onconflict ex ex useincoming onupgrade ex ex useincoming ondowngrade ex ex useloaded ignoreimage load usage swift playground write compile run inspect output swift code via swift playground accessible via tool menu important contextual menu item compile run selected swift code inspect compile run selected swift code inspect print compile run selected swift code print todo additionally contextual menu item inspect ast return swift ast selected swift code example print hello world return importdecl range foundation toplevelcodedecl range bracestmt range callexpr type null arglabels unresolveddeclrefexpr type null nameprint functionrefunapplied parenexpr type null stringliteralexpr type null value hello world builtininitializer null initializer null inline swift outside swift playground swift code executed within pharo code using runswift string class extension example api reference swift output abstract syntax tree pharo class extension method used compile run view ast swift code string class extension runswift return string representation swift object swift code use swift print function within swift code output pharo example swiftstring five boxing wizard jump quickly aslowercase asswiftstring let lowercased alphabet set swiftstring abcdefghijklmnopqrstuvwxyz print alphabetcontains lowercasedcontains runswift return true tip simple swift code require swift print function example array abcde runswift return b c e swiftarray asswiftarray swiftarray map reduce runswift return string class extension swiftast return swift ast swift code pharo object swift string serialization pharo class extension method used quick helper serialize pharo object swift psuedoobjects string representation swift object example hello world asswiftstring return hello world code notice usage sentence asswiftstring swiftcode string concatenation sentence five boxing wizard jump quickly aslowercase asswiftstring swiftcode determine pangram let sentenceset alphabet set sentence abcdefghijklmnopqrstuvwxyz print alphabetcontains sentencesetcontains swiftcode runswift return true following extension method implemented example example also availabe via spexamples object array class extension asswiftarray return string representation swift object currently handle one depth booleans number string true false asswiftarray return false boolean class extension asswiftboolean return string representation swift object true asswiftboolean return true dictionary class extension asswiftdictionary return string representation swift object currently handle one depth booleans number string dictionary newfrom b true false c e asswiftdictionary return b true e false c string class extension asswiftstring return string representation swift object hello world asswiftstring return hello world swift response string pharo object deserialization todo import apple foundation framework imported swift code automatically use apple framework swift code use swift import directive needed asynchronous swift code prevent asynchronous swift code exiting early use swift dispatchmain function never return use swift exit function exit appropriate example swift code swift urlrequest network request session started dispatchmain called program prematurely exit session response closure exit called exit program let sessionconfig urlsessionconfigurationdefault let session urlsession configuration sessionconfig delegate nil delegatequeue nil var url url string http var request urlrequest url url requesthttpmethod get let task sessiondatatask request completionhandler data response error let uerror error print uerrorlocalizeddescription return error string else let udata data let string string data udata encoding print string return response string exit exit asynchronous work complete taskresume sessionfinishtasksandinvalidate dispatchmain prevent premature exit todo acknowledgement project make use following thirdparty library author brackendev license swiftplaygroundpharo released mit license see license file info
20,Lobsters,swift,Swift programming,"Somewhat Less Lethargic JSON Support for iOS/macOS, Part 1: The Status Quo",https://blog.metaobject.com/2020/04/somewhat-less-lethargic-json-support.html,somewhat le lethargic json support iosmacos part status quo,simdjson environmental assumption constraint nsjsonserialization nsjsonserialization swift json coding third party json parser jason stjson zippyjson flightschool max mason max superconvenient mpwmasonparser,finished watching daniel lemire talk current iteration simdjson json parser clock following daniel work time ca nt really recommend highly enough video reminded recent twitter conversation offered contribute fast swiftcompatible json parser loosely based max fast convenient xml parser due various factor control ca nt really offer anything fast compared simdjson manage something quite bit le lethargic currently offer apple particularly swift world environmental assumption constraint first assumption going operate apple ecosystem simplicity sake going use macos next assume want parse r domain object processing within application structs difference important context going use following class mix integer string instance variable swift objc class testclass nsobject codable let hi int let int let comment string objectivec interface testclass nsobject property nonatomic long hi property nonatomic strong nsstring comment end make easy measure going use one million object going initialise increasing integer constant string comment yield json file different serialisation method correctly parsed parser tested obviously simple class file structure think give reasonable approximation realworld use first thing check quickly create object straight code without parsing give u good upper bound performance achieve parsing domain object define count void createobjects nsmutablearray objresult nsmutablearray arraywithcapacity int count testclass cur testclass new curhii curtherei curcomment comment objresult addobject cur nslog created object code wo parsing ld object objresult objresult count quad core mbp run second although nt actually parsing would mean creating object would result parsingg json file would yield rate mb wait second almost slower daniel lemire parser one actually par json creating object would result parsing without actual parsing one many unintuitive aspect parsing performance actual lowlevel characterlevel parsing generally least important part overall performance unless something crazy like use nsscanner nt use nsscanner please one reason unintuitive learned performance dominated innermost loop character level processing innermost loop magnitude performance difference inner outer loop differ le amount stuff happennnig outer loop dominate nsjsonserialization apple json story much revolves around nsjsonserialization much like rest serialization story revolves around similar nspropertylistserialization class reasonable quick implementation turning mb json file nsarrray nsdictionary instance second called objectivec rate mb swift take second mb course get u property list array dicts case domain object actually want read book mention book oh think know type dictonary representation fairly expensive expensive create expensive term memory consumption expensive access creating dictionary equivalent object created take second around time creating equivalent object rate mb relative mb json file void createdicts nsmutablearray objresult nsmutablearray arraywithcapacity int count nsmutabledictionary cur nsmutabledictionary dictionary cur hi cur cur comment comment objresult addobject cur nslog created dicts code wo parsing ld object objresult objresult count creating dict single step using dictionary literal significantly faster creating immutable copy mutable dict done filling brings time half second getting dicts object typically straightforward tedious fetch entry dictionary call corresponding setter value thus retrieved dictionary nt production code trying get bound possible easier way use key value coding key found dictionary combined code parsing creating object shown void decodensjsonandkvc nsdata json nsarray key hi comment nsarray plistresult nsjsonserialization jsonobjectwithdata json error nil nsmutablearray objresult nsmutablearray arraywithcapacity nsdictionary plistresult testclass cur testclass new nsstring key key cur setvalue key forkey key objresult addobject cur nslog nsjsonkvc ld object objresult objresult count note kvc slow really slow orderofmagnitude slower sending message kind slow significant impact total time come total second including parsing object creation shy mb swift json coding first couple release swift json support apple limited wrapped nsjsonserialization slight performance penalty already noted write book see sidebar many json parser published none notable exception big nerd ranch freddy actual par transformed array dictionary returned nsjsonserialization swift object performance abysmal around overhead addition basic nsjsonserialization parse apple swift codable promised solve convenience front certainly great job func readjsoncoder data data testclass nslog swift decoding let coderjsondecoder let arraytry coderdecode testclass self data return array forcing test code please nt production ala performance still great second mb slower basic nsjsonserialization parse slower slow simple complete parse via nsjsonserialization kvc however significantly faster previous thirdparty json swift object parser tune old first mark discount sale trick applied performance except relative number larger third party json parser looked little third party json parser particularly jason stjson zippyjson sttjson make claim speed manages clock second mb jason bill faster json parser compare swiftyjson reasonably well second mb however parse internal representation domain object structs compared nsjsonserialization point disappoint probably interesting zippyjson us daniel lemire simdjson codable compatible ala could nt get zippyjson compile nt number keep trying claim around faster apple jsondecoder would make parser least ballpark trivial nsjsonserialization kvc method showed another interesting tidbit come zippyjson readme heading much faster apple version first convert json nsdictionary using nsjsonserialization afterwards make thing swifty creation intermediate dictionary expensive true first converting intermediate representation slow particularly one heavyweight property list however primary reason creating expensive representation take total running time codable apparently talking speaking slowly corroborate also tried flightschool implementation codable messagepack obviously use nsjsonserialization make performance claim take second decode object used json file course different file mb size normalized mb file would mb max mason leave u considering simdjs show theoretically possible json parsing good place put mildly gb v mb apple jsondecoder several time slower nsjsonserialization nt exactly speed daemon around slower pure object creation comically bad might another way putting least entertained contribute well xml result wasis max messaging api xml parser superfast though simd also present apis make superconvenient also superfast go directly xml objectrepresentation either tree stream domain object using mostly constant memory mentioned book yeah book gory detail anyway xml sorta faded question whether technique would work json parser answer yes roughly though added complexity le convenience json le informative file format xml open closetags really give good headsup coming goal produce domain object close theoretical maximum slightly mb possible time making parser convenient use close swift codable convenience wo nt support codable per default overhead seem high zippyjson suggests adapter would nt hard parser mpwmasonparser nt done yet initial state par json dictionary second mb slightly slower nsjsonserialization bit way go come join little parsing performance journey
21,Lobsters,swift,Swift programming,Swift Is Not Functional (2014),https://robnapier.net/swift-is-not-functional,swift functional,really fantastic io mac apps frp,ever since swift came keep seeing weird comment swift functional programming language puzzled bit anyone would say since really little functional swift pretty traditional object oriented language focus generic programming conjecture people using feature list determine language paradigm reason use word paradigm paradigm n worldview underlying theory methodology particular scientific subject worldview yeah capture language paradigm lot like musical genre messy thing argue draw line go pure fusion classical guitar heavy metal different genre even use guitar friend say broad taste music listen everything jimmy buffet metallica love every kind music many programmer way ever known procedural object oriented paradigm think basic java different language get encounter new language first question syntax question think problem going say lot paradigm like musical genre many opinion way categorizing thing way way way useful others saying taxonomy group together swift haskell map useful grouping wangga opera rock together vocalist procedural imperative programming primarily concerned decomposing problem sequence action usual structure step one repeat step two something true step three paradigm common popular language many programmer think mean program one way decompose problem faced problem procedural question step need perform solve objectoriented programming primarily concerned decomposing problem collection selfcontained object property method manipulate property usual structure hierarchy class instance object inherit property method faced problem oop question kind object need work together solve way thinking common popular programming language work well together procedural programming u since first machine language even early automated weaving machine working procedural paradigm oop dominated programming since ninety dominant paradigm long dominated c program long many programmer think given assume ancient language like fortran lack object even fortran object oop one way thinking problem functional programming different way thinking problem functional programming primarily concerned decomposing problem function accept return immutable value usual structure collection function transform value value various way combine function avoids mutable state require evaluation function occur particular order functional programming treat program math problem rather series operation faced problem functional question kind value need transformed way solve first started playing swift first thing looked maybe handled class protocol call method declare assign variable define property version loop oop procedural tool right think would readily available easy use needed know syntax heard people describing swift functional pulled first swift workspace immediately looked swift used flatmap looked split list head tail looked foldleft equivalent immutable collection swift seem special handling language functional language loop procedural showed new language said procedural object oriented implement using goto class inheritance might feature choice functional language split list first first element trivially time strange functional language yes swift reduce map yes firstclass function pattern matching yes feature also commonly found functional language syntax even feel similar scala soon realized associated value case class everything made sense think like functional language encourage use let wherever possible always going mix let var swift program example apple gave included variable almost never use mutable variable work scala haskell mutable variable considered advanced feature even show intro book brings u real difference swift fundamentally work proceduraloop paradigm whole language built around tool available let jump functional style without full power functional programming useful haskell fundamentally work functional paradigm tool available monad let jump procedural style without full power procedural programming useful might say rob literal swift multiparadigm language including oop functional nonsense scala multiparadigm oopfunctional language approach problem scala break object work primarily immutable data structure oopfunctional look like even bother provide immutable list swift never add fundamental way swift work swift multiparadigm oopfunctional oopgeneric generic programming primarily concerned general purpose algorithm applied arbitrary type similarity functional programming certainly language functional generic generic programming care algorithm function thing take return immutable value process thing mutate state swift generic array int could implement kind structure nongeneric language swift generic find generic programming core library consider function like advance return result moving start n position model randomaccessindex executes otherwise executes ab n model bidirectionalindex requires n nonnegative func advance forwardindex start n tdistancetype kind function expect generic language encapsulates algorithm work anything implement forwardindex method instance forwardindex inherit must implement seems subtle actually significantly different way thinking see lot swift standard library one would expect find generic language lot thing look like functional feature actually generic algorithm look quicksort reduce func quicksort c mutablecollection cindextype signedinteger inout element c range range cindextype le cgeneratortypeelement cgeneratortypeelement bool func reduce sequence u sequence initial u combine u sgeneratortypeelement u u reduce common functional tool right beside quicksort functional language would expose way mutates collection expressed generic style algorithm one happens mutate matter algorithm reusable many kind data generic programming get functional feature side effect paradigm none critique swift ok functional would loved cocoa development go functional enjoy know would furthered goal really fantastic io mac apps least short term frp good idea strong opinion learning curve high objc programmer compared swift need integrate swift nonfunctional objc long time hope swift incorporate functional feature time switch return value able split list head tail pattern match cheap function accept tail recursive attribute mandatory tailcall optimization mutating method rare immutable data type plentiful none thing make swift functional enough could let u write functional pattern someday swift cocoa could actually become functional end result swift might surprisingly important language could improve programming discipline programmer would learn functional programming develop popular platform learning functional programming make better programmer even work paradigm none may happen swift might language writing really fantastic io mac apps ok
22,Lobsters,swift,Swift programming,Swift on Mac OS 9,https://belkadan.com/blog/2020/04/Swift-on-Mac-OS-9/,swift mac o,april fool day anniversary founding apple inc current event world best code visualizer swift mac o powerpc classic environment wine crossover virtualbox parallel carbon sound familiar core foundation provide common interface carbon cocoa marshall elfstrand goal swift write program swift run mac o want build ppccapable swift compiler also need emulator copy macintosh programmer workshop tool want prebuilt ppccapable swift toolchain ppcswifttoolchain also need emulator copy macintosh programmer workshop tool ppcswiftproject want try built version bitpaint bitpaintswifthqx gathering material codewarrior macintosh programmer workshop written experience blog post part part debug mystery misbehavior sheepshaver modern compiler classic linker llvm ibm reference doc adding support aix o apple ibm used close partnership along motorola aix register convention stack convention mac o runtime architecture swift teach swift ppcaix target add support pascal string hacked swift well turn reflection support nearly runtime metadata learn make smol stdlib ppcswiftproject might good reference someone looking ccompatible runtimeless subset swift disable jump table jump table swift llvmproject week mysterious failure mac o runtime architecture mac o runtime architecture sheepshaver already know load future direction macroman linkage summary april technical swift mac o classic compiler,april mean april fool day anniversary founding apple inc year sober one due current event think lot people still appreciate people creating sharing keep spirit whether music art programming project prank april fool seem le le fun obvious joke whimsy anyone expense still something believe even better actually work last year implemented world best code visualizer year decided seriously attempt something thought past getting swift program run mac o mac o twenty year ago macos know today another operating system known mac o one first os use gui something pretty much take granted day also date day one program could run time even latest version us cooperative multitasking run multiple program yield time let others run program crashed overwrote memory supposed good chance restart whole system mac o ran powerpc processor also used gamecube xbox earlier version o started motorola cpu series successor mac o x also ran powerpc first launched apple began switch intel processor instead powerpc finally dropped mac o x huge step forward mac o number way including preemptive multitasking could actually run multiple thing apple want leave o program behind two thing classic environment set sandbox looked enough like mac o run classic mac o program directly mac o x classic environment app program ran inside protected interfering mac o x program vice versa really quite effective actually survived longer booting mac o never received support newer powerpc processor life ended switch intelpowered built running instruction original apps directly provide compatibility shim library think like wine crossover rather virtualbox parallel carbon packagedup version old mac o toolbox apis could write mac o x apps way always basically recompiled app added extra annotation saying carbonized sound familiar fun aside reason one reason core foundation provide common interface carbon cocoa ht marshall elfstrand video link classic ended switch intel processor back carbon worked way last year macos mojave apple never released version carbon presumably encourage developer move cocoa last year macos catalina support apps dropped entirely exception goal since learned program classic mac o year later spent good chunk career working swift tantalizing thought like write program swift run mac o write swift source code call carbon toolbox apis compile powerpc version swift compiler package necessary mac o profit useful absolutely neither yet still learned lot probably guessed managed accomplish writing blog post without ado picture swift toolbox app running mac o friend nadine power mac check blazing fast processor assume good number people reading would like know want build ppccapable swift compiler check following repository git clone http belkadancomsourceppcswiftproject cd ppcswiftproject git clone b ppcswift http belkadancomsourceswift git clone b ppcswift http belkadancomsourcellvmproject git clone http githubcomappleswiftcmark cmark make quick start build swiftc strippeddown stdlib note directory branch name subrepos note nested inside ppcswiftproject repo also need mpw emulator copy macintosh programmer workshop tool build actual app using modern macos want prebuilt ppccapable swift toolchain one ppcswifttoolchain note put built swifto toolchain probably success optimized code actually remaining link stdlib ie everything inlined away also need mpw emulator copy macintosh programmer workshop tool may still want check example ppcswiftproject repo required flag swiftc ppclink rez little finicky note size carb resource required carbon app skip rez part actually want run app want try built version bitpaint one bitpaintswifthqx like hear anything make tool meanwhile like hear made work read gathering material last time building classic mac o apps using codewarrior actually calling building classic mac o apps stretch learning c using codewarrior terminal io library get stdinstdout interface classic mac o natively remember command line could try get version codewarrior running seem like convenient thing think able get swift compiler running classic shuttling object file back forth os get anything done fortunately one interested building classic apps modern macos point found mpw project emulator specifically running apple macintosh programmer workshop tool knew going work steve troughtonsmith famous apple community finding undocumented prerelease feature apple os written experience building app mpw ran system way modern mac o x building appropriate compiler appropriate library interested highly recommend checking blog post reference used get started app see running picture bitpaint troughtonsmith test app ported swift ask ahead time okay use app hobbyist project longtime mac developer gwynne raskind also gave twopart highlevel tour toolbox apis mike ash blog several year ago part part fortunately carbon take care fair amount u even mac o okay mpw give u powerpc compiler powerpc assembler powerpc linker classic mac o header file classic mac o library stub linking bunch object binary inspection tool need finished product made lot use trying debug mystery misbehavior pretty good troughtonsmith blog post show enough build entire app run classic idea take object file produced modern compiler feed powerpc linker mean additionally need modified version swift compiler support emitting mpwcompatible object file strippeddown form swift standard library runtime enough read interact carbon header least actual machine running mac o one charger testing using sheepshaver friend nadine provided testing actual machine thing working well go modern compiler classic linker make thing manageable set intermediate goal build app using clang modern c compiler ship xcode clang us llvm infrastructure swift compiler figured could deal object format workflow issue clang move swiftspecific part first thing try figure file format powerpc object file turn format called xcoff searching modern documentation turned ibm reference doc pretty much one else us format encouraging first time started looking project worried compiler write assembly code send mpw powerpc fixing account difference llvm mpw print powerpc assembly however checked see llvm supported xcoff stroke luck turn ibm started adding support xcoff llvm last year part adding support aix run powerpc could ask clang generate xcoff file aix mean short step making generate xcoff file classic mac o point remembered bit trivia apple ibm used close partnership along motorola even made common standard used across platform cpu though perhaps le impact hoped possible aix classic mac o used calling convention procedure could interoperate without extra work got lucky answer nearly yes aix register convention stack convention match one mac o runtime architecture guide meant could feed object file produced clang directly mpw ppclink get working classic mac o binary pretty sure mouth fell open first saw work clang c testc target powerpcibmaixxcoff isystem mpw interfacescincludes integratedas fpascalstrings mpw ppclink testo ppclibraries test work topofmasterbranch llvmclang simple testc end needing change llvm way end really fairly minimal much thanks ibm folk hard part work swift able compile simple test program great milestone fair bit work could get swiftc compile whole bitpaint highlight teach swift ppcaix target mostly involved adding ppc aix case switch statement across swift compiler also involved making simple description swift calling convention clang cribbed arm implementation assuring ppcaix backend okay calling convention using got lucky amount work swift already support arm littleendian powerpc running linux bigendian another ibm architecture piece already place add support pascal string mac first highlevel programming language pascal c default format string throughout toolbox apis pascal string length byte followed string data rather c string string data followed null byte fpascalstrings commandline flag clang support static pascal string syntax phello world p would replaced length string must byte count hacked swift well implementation probably problem enough get simple thing working turn reflection support nearly runtime metadata swift runtime powerful want write much runtime project primarily calling bunch c function beyond though default format swift metadata make heavy use relative addressing mainly reduce startup time learn well symbol pointing inside global llvm xcoff implementation yet support either get working proofofconcept aggressively commented part irgen made use either feature like get static metadata back point reflection something ever interested probably make smol stdlib full swift standard library lot thing need even know implement string world assume unicode logic integrate c code based basic type standard library like unsafemutablepointer ended taking subset standard library source adding additional file commenting thing worked nope even good enough early attempt compiled okay managed crash ppclink tried write test program presumably many symbol standard library cut thing even smaller subset eventually worked course working time modifying compiler get working proofofconcept think ultimately went needed bunch symbol used runtime metadata purpose mentioned nonoptimized build nontrivial program work yet know danger zone might try add thing back rather modify actual swift repo decided keep strippeddown standard library separate find ppcswiftproject repo might good reference someone looking ccompatible runtimeless subset swift perhaps embedded resourceconstrained environment disable jump table llvm optimizes switch statement jump table look like help performance andor code size default implementation jump table also supported llvm xcoff implementation imagine aix folk get around implementing sooner later disabled jump table entirely forcing compiler emit switch series ifs instead check change swift llvmproject repos curious appropriate upstreaming respective project try get one relevant upstreamed point week mysterious failure made change app worked swift worked time change something arbitrary suddenly event register got bad added counter ten event exit app without get trapped unable even quit without restarting virtual machine even seemingly working version friend nadine reported trying use reset command caused app crash going decided get bottom something strange seen earlier even clang version program work correctly turned optimization possible bug ibm newlyadded aix support powerpc support since common platform even llvm optimization could aix classic mac o really similar thought code agreeing system code thing supposed work could optimized code using instruction sheepshaver support though really seem match symptom symptom weird local variable getting corrupted others started testing everything could think stack aligned properly stack pointer somehow getting restored properly glue code crosslibrary call trashing data see mac o runtime architecture guide something causing code fragment manager dynamic linker put wrong address crosslibrary call without able rely logging made simplest textual debug output facility could modifying title menu later turned writing stdout mac o automatically result file created could used instead wrote c function tracked current stack pointer make sure getting restored properly made good use dumpxcoff dumppef tool came mpw learned pef pidata patterninitialized data worked tried step cfm relocation hand see mac o runtime architecture guide even started trying decompile actual system library see anything suspicious even though bug actual mac o seemed incredibly unlikely led way learning toolbox rom actually rom boot script compressed set system library called content used rom fortunately sheepshaver already know load meant could decompression manually split individual library yeah got way weed learned lot though finally looked decompiled optimized c version swift version observed variable getting corrupted generalpurpose register supposed okay place put data classic mac o aix mac o x decided trust particularly register used track threadlocal storage aix marked problem went away optimized nonoptimized even fstackprotectorall swift debugging took week unfortunately led project little le ambitious originally wanted future direction get awful lot actually runtime mean dynamic allocation among thing type metadata mean generic optimized away field metadata mean key path optimized away unicode support string arguably could make string without character string using macroman native encoding necessarily look much like today swiftstring bunch standard library thing missing wanted get proofofconcept working also ppclink choking large object file get standard library stuff working probably split swift module somehow mess linkage number way make llvm xcoff backend happy sure multifile build would work even test using carbon mean program ought work older version mac o x well friend nadine tried priority figure wanted try making nice abstraction top toolbox apis wanted make complicated example apps maybe follow putting lot effort making sure could finish april probably get thing neglecting favor project instead summary project took lot time even though know lot compiler hacked way success instead careful maintaining proper software development practice learned lot accomplished goal back mind long time made way end article reward bitpaint running classic mac o x also courtesy nadine stay safe everyone help people around anybody make something project want hear entry posted april filed technical tag swift mac o classic compiler
23,Lobsters,swift,Swift programming,Swift Package Registry,https://swiftpackageregistry.com/,swift package registry,alamofire chart sdwebimage lottie swiftyjson reactivecocoa vapor rxswift hero snapkit kingfisher mbprogresshud iqkeyboardmanagerswift realm carthage swiftlint fmdb promisekit moya cocoaasyncsocket eureka foldingcell nvactivityindicatorview skeletonview quick swifterswift objectmapper ibanimatable cryptoswift swiftpm rswift purelayout kitura cartography sqliteswift reachability jtapplecalendar reswift facebook swiftgen starscream swiftnio viewanimator swiftdate gitignoreio keychainaccess swiftai fspagerview macaw nuke,alamofire elegant http networking swift chart beautiful chart iostvososx apple side crossplatform mpandroidchart sdwebimage asynchronous image downloader cache support uiimageview category lottie io library natively render effect vector animation swiftyjson better way deal json data swift reactivecocoa cocoa framework objc dynamism binding reactiveswift vapor serverside swift web framework rxswift reactive programming swift hero elegant transition library io tvos snapkit swift autolayout dsl io o x kingfisher lightweight pureswift library downloading caching image web mbprogresshud mbprogresshud customizations iqkeyboardmanagerswift codeless dropin universal library allows prevent issue keyboard sliding cover uitextfielduitextview neither need write code setup required much realm realm mobile database replacement core data sqlite carthage simple decentralized dependency manager cocoa swiftlint tool enforce swift style convention fmdb cocoa objectivec wrapper around sqlite promisekit promise swift objc moya network abstraction layer written swift cocoaasyncsocket asynchronous socket networking library mac io eureka elegant io form builder swift foldingcell octocat foldingcell expanding content cell animation made ramotion nvactivityindicatorview collection awesome loading animation skeletonview elegant way show user something happening also prepare content waiting quick swift objectivec testing framework swifterswift handy collection native swift extension boost productivity objectmapper simple json object mapping written swift ibanimatable design prototype customized ui interaction navigation transition animation app store ready apps interface builder ibanimatable cryptoswift cryptoswift growing collection standard secure cryptographic algorithm implemented swift swiftpm package manager swift programming language rswift strong typed autocompleted resource like image font segue swift project purelayout ultimate api io o x auto layout impressively simple immensely powerful objectivec swift compatible kitura swift web framework http server cartography declarative auto layout dsl swift iphone triangularruler sqliteswift typesafe swiftlanguage layer reachability replacement apple reachability rewritten swift closure jtapplecalendar unofficial apple io swift calendar view swift calendar library io calendar control customizable reswift unidirectional data flow swift inspired redux facebook used integrate facebook platform io tvos apps swiftgen swift code generator asset storyboards localizablestrings get rid stringbased apis starscream websockets swift io osx swiftnio eventdriven network application framework high performance protocol server client nonblocking viewanimator viewanimator brings ui life one line swiftdate parse validate manipulate display date time timezones swift gitignoreio create useful gitignore file project keychainaccess simple swift wrapper keychain work io watchos tvos macos swiftai swift machine learning library fspagerview fspagerview elegant screen slide library extremely helpful making banner slider macaw powerful easytouse vector graphic swift library svg support nuke powerful image loading caching system
24,Lobsters,swift,Swift programming,Swift 5.2 released,https://swift.org/blog/swift-5-2-released/,swift released,language update playground paul hudson john sundell exploring swift new functional feature improved compiler diagnostics previously published blog post code completion improvement improved build algorithm reducing overhead key improving build time making incremental build efficient additional improvement debugger improvement lldb example xcode variable view expression evaluator lldb swift package manager swiftsyntax update swiftsyntax changelog language server protocol update sourcekitlsp language server fixits code action local refactoring documentation swift programming language apple book store platform linux available download apple xcode xcode available download source,swift officially released release focus improving developer experience improved compiler diagnostics error warning code completion increased reliability debugging improved handling dependency swift package manager tooling improvement lsp swiftsyntax much addition language added provide new capability building expressive apis blog post take quick tour main change language update swift implement following language proposal swift evolution process experience change explore playground put together paul hudson john sundell also written article exploring swift new functional feature illustrates expressive capability new feature improved compiler diagnostics drastically improved quality precision error message swift compiler previously compiler attempted guess exact location error breaking expression search failure subexpression separately worked well case possible narrow location error single subexpression without using information parent expression however numerous kind programming mistake strategy could accurately identify compiler leaf breadcrumb encounter failure inferring type expression recording every specific failure along way breadcrumb allow compiler produce precise diagnostics often actionable fix lead developer toward correct code example improved error message following code attempt compare enum value case exist enum e case one two func check e e e three print okay using swift might perplexed error message error binary operator applied operand type e e three using swift see problem right away error type e member three e three next snippet code incorrectly invokes initializer textfield swiftui import swiftui struct roomdetails view state var roomname string state var imagename string var body view vstack textfield room name image imagename frame maxwidth swift misleading error message appeared completely different line error int convertible cgfloat frame maxwidth swift compiler correctly point missing argument textfield initializer error missing argument parameter text call textfield room name error also includes fixit insert missing argument find new diagnostic architecture previously published blog post dedicated topic code completion improvement faster completion eliminating unnecessary type checking large file speedup code completion compared xcode depending completion position supply name implicit member incomplete dictionary literal incomplete ternary expression easier read type appear result using opaque result type eg view possible preserving typealiases stopped printing parent type necessary example swift xcode swift xcode displayed improved build algorithm swift compiler support two mode operation xcode seen build setting swift project two mode tradeoff compilation speed amount code optimization performed incremental build great development every file project need recompiled maximum optimization critical whole module optimization give compiler complete view entire code base therefore greater ability optimize incremental mode build work rebuilding module split among multiple compilation task run parallel every source file rebuilt exactly one associated compilation task responsible type checking generating code declaration source file since swift declaration function property type etc reference across source file compilation task sometimes required type check declaration source file crossfile referencing declaration decrease efficiency incremental mode build duplicate typechecking work across compilation task contrast whole module compilation work processing code module one compilation task duplication type checking work across compilation task parallelism compiling code module whole module compilation however give compiler visibility one go code module thus enables code optimization build time advantage incremental whole module compilation diminishes amount duplicated work compilation task performs duplicated work high case incremental mode work whole module compilation long overhead exceed number processor core incremental mode build still faster overall reducing overhead key improving build time making incremental build efficient order minimize wasted work done incremental mode build swift compiler notably type checker leverage new centralized logic caching lazy evaluation dependency tracking request request selfcontained unit computation logic used compiler efficiently resolve declaration reference one another prior swift declaration referenced another source file type checker would explicitly perform operation declaration called validation validation made use mutable state rather coarsegrained attempting precompute number property declaration might needed later code generation eager precomputation information could often unnecessary wasteful swift internal representation declaration compiler immutable code generation phase compiler able trigger lazy evaluation request result cached since request finegrained old validation step improves performance avoiding wasted work also improves correctness fixing significant number correctness issue type checker anticipate needing validate something later required code generation additional improvement addition improved incremental mode build swift compiler includes number performance optimization foundational component work compiler resolve named symbol declaration ie name lookup expect improvement improve build time whole module incremental mode build since change reduce algorithmic bigo complexity various algorithm inside name lookup particularly help larger project many source file debugger improvement across platform swift debugging supported lldb resilient reconstructing type information swift program debug information resilience enables debugger use information swift type particular lldb also import c objectivec type dwarf debug information instead compiling clang module source code behavior controlled symbolsuseswiftdwarfimporter lldb setting default setting enabled fallback path traditional clang module import fails example xcode variable view expression evaluator see improvement action one look variable view xcode lldb expression evaluator power debugging workflow lldb need import swift module visible current debugging context eg file function etc swift module wealth information type swift module often used without depending separate module file produced clang ccobjectivec compiler used swift code interoperating c objectivec since lldb global view entire program dynamic library dependency importing clang module sometimes fail one common failure scenario search path different dynamic library conflict swift package manager swift package manager swift includes following new enhancement remote swift package tool version longer resolve package dependency used test target improving performance reducing chance dependency version conflict swift package manager us new strategy resolve package dependency significantly improves quality error message performance complex package graph change result discussion review part swift evolution process swiftsyntax update syntax node hierarchy swiftsyntax api optimized replacing protocol structs consequently tree visitation especially rewriting syntaxrewriter faster resulted improved performance tree visitation especially rewriting tree using syntaxrewriter see changelog detail changed swift release language server protocol update xcode corresponding command line tool package include swift release sourcekitlsp language server swift cbased language find sourcekitlsp server executable macos xcode active xcode run server xcrun sourcekitlsp get full path server xcrun find sourcekitlsp sourcekitlsp includes support following lsp feature fixits swift error warning note include fixits supported using code action language server protocol local refactoring swift local refactorings extracttomethod supported using refactoring code action kind sourcekitlsp also number improvement supporting ccobjectivec code particular determining compiler argument processing header file sourcekitlsp us index lookup main file improved accuracy result also notable improvement project using json compilation database eg cmake project documentation updated version swift programming language swift available swiftorg also available free apple book store platform linux official binary ubuntu ubuntu available download apple xcode development apple platform swift ship part xcode toolchain also available download swiftorg source development swift tracked following repository github tag designates specific revision repository make final version swift remain open release management process accumulate change next release
25,Lobsters,swift,Swift programming,Yak Shaving - Swift Edition,https://tirania.org/blog/archive/2020/Mar-24.html,yak shaving swift edition,yak shaving swift edition mind swift actor idea pony language guics termkit lot fun implementing description use c version port go unicode library multiline text editor text buffer reimplementation textbufferkit reusable terminal emulator xtermsharp swiftterm,yak shaving swift edition tensorflow summit last year caught chris lattner time working swift tensorflow ended talking concurrency mind swift recognized actor idea similar pony language learned year trip microsoft research uk course pointed pony capability language like c swift lacked anyone could poke data belong without much work whole thing would fall apart example build something like c class chart float point public float point get return point anyone reference chart go poke internals point array surfaced example simple plot implementation accidentally modifies content void plot chart mychart code accidentally modifies data mychart var p mychartpoints int plength plot p sort problem avoidable come considerable development cost instance net find plenty adhoc collection interface whose sole purpose prevent data tamperingcorruption consistently properly used prevent scenario happening chris politely pointed quite understood swift fact swift support copyonwrite model collection box meaning problem present swift wrongly assumed interesting read swift specification three four time collaborating steve swifttonet binding tool yet completely missed significance design decision swift subtle design decision eye opening decided gain real handson experience swift better way learn swift start small fun project couple evening rather building mobile app would mobile design user interaction little swift decided port guics console ui toolkit c swift called termkit guics termkit borrow extensively apple uikit design design enjoyed notably avoids auto layout instead us simpler layout system quite love lot fun implementing read description use c version journey filled number pleasant capability swift helped find longterm bug c library remain firmly fan compiled language checking better dear reader wish kept log code wrote year ago could share take copious note suffice say ended warm cozy feeling knowing compiler looking plenty love swift technically enumerate feature people done want point interesting bit missed practitioner language armchair observer language requirement constructor fully initialize field type calling base constructor requirement took digest mental model calling superclass initialize done value set c yet prevents bug base constructor call virtual method override might ready handle eventually learned embrace love capability another thing truly enjoyed ability creating typealias defined visible new type capability wanted c since yet get lovehate relationship swift protocol extension love incredibly powerful hate hard surface net practice pleasure use heart simple import c code swift bring type definition header file call c code transparently swift really gift god humankind truly enjoyed character data type swift allowed console ui toolkit correctly support unicode console modern terminal even guics port go unicode library c suffers limited gostyle rune support emoji nerdosphere call extended grapheme cluster beyond pedestrian control like button entry line checkboxes two useful control wanted develop xterm terminal emulator multiline text editor c version console toolkit multiline text editor quick hack list hold line buffer line contains rune display inserting character easy inserting line easy get done couple hour evening sort time devote fun exploration course problem cutting region text across line inserting text span multiple line looked like brilliant coup simple design turn ugly repetitive errorprone code take forever debug enjoy writing code end swift port decided needed something better course era web scale got ta web scale data structure implement swift version rope data structure someone pointed blog post visual studio code team titled text buffer reimplementation read avidly found argument convincing end good enough visual studio code good enough gander vacation last summer decided port typescript implementation text buffer swift named textbufferkit porting code typescript swift turned great learning experience time done ready hook termkit got busy also started learn swiftui started doubt whether made sense continue work uikitbased model restart swiftui version pondered decision every respected yak shaver would proceeded xterm terminal emulator work since wanted reusable terminal emulator control net particular wanted one embed monodevelop year two ago looked terminal emulator could port net needed something licensed mit license could used wide range situation modern enough surveying space found xtermjs fit bill ported net modified suit requirement xtermsharp terminal emulator engine multiple uis hook multiple backends swift took xtermsharp code ported swift ended swiftterm quite decent shape bug left yet built termkit ui swiftterm quest perfect shaved yak need figure implement swiftui top termkit repurpose termkit completely ground swiftui driven stay tuned
26,Lobsters,swift,Swift programming,xi-editor,https://github.com/xi-editor,xieditor,grow team github sign used topic reload reload,dismiss grow team github github home million developer working together join grow development team manage permission collaborate project sign used topic perform action time signed another tab window reload refresh session signed another tab window reload refresh session
27,Lobsters,swift,Swift programming,"Porting Redux Architecture to Swift (Well, for a Toy macOS App Anyway)",https://medium.com/insertgif/porting-redux-architecture-to-swift-well-for-a-toy-macos-app-anyway-ed61bad0395c,porting redux architecture swift well toy macos app anyway,porting redux architecture swift well toy macos app anyway insertgif store action testable debuggable easy understand easy reason store action store action app easily mutate store store action swift insertgif grand central dispatch grand central dispatch subscription higherorder reducer insertgif spectacle insertgif twitter producthunt originate,porting redux architecture swift well toy macos app anyway boy medium back day let sit rocking chair install modperl movabletype put something internet uppercased internet back liked walked told get back talking software architecture insertgifsoftware architecture exciting topic nobody else ever pontificated one nicer experience programming last year writing react component using redux unfamiliar web development talking much react redux little tutorial help know store action goal architect toy app testable debuggable easy understand easy reason idea separating store set action whatever word may mean declarative userinterface description html jsx cocoa view view controller rooted older idea separating data presentation one another behind cascading style sheet microsoft powerpoint different app microsoft word last one real making sure still paying attention scan header image blog post people critical reading skill way get pandemicstores actionswe define store location canonical representation data true know true current point time great definition try hard definition specific tell lielet say writing gui component show bank account part new bank account app store app would containall transaction renderedthe computed account balance iterate list transaction time instead n ya knowthe user avatar scroll page scrolled cover valuable information client wanted thought would spiffy app littlein kingdom javascript would represent store giant usually immutable object array string float object would want exact decimal banking app would look javascript work would sigh resign float action concrete object encode event relevant store either creating new version store requiring information store definition meant wideencompassing generic constitutes action really depends business logic patience write kinda boilerplatey code store action macos app might button clicka menu item clickthe user resized application windowa keypress happeneda keypress another app happenedan thread monitoring http request completed another threadmacos restartthe computer firebut promise something want mutate store must take place action first user want withdraw money bank balance app must first encode action action type withdrawal amount description buy new airpod old one fell chewing user uploads new avatar must make action type avataruploaded buffer containing jpeg data good implementation architecture macos application make difficult view view controller violate promise say app easily mutate store application scale include component data dependency becomes harder reason one nice aspect storeandactions architecture cheerfully named redux architecture get click link make change store explicit first change must encoded action function might call reducer must patternmatch stream action create new storestore action swiftif programmed io macos might degree recognize store another name core data managed object context le analogous store instead represented object graph encoding n n relationship giving u way project insert update delete node graph true would want unless good reason use core data application especially looking build team developer scale something approaching fancy macos app cost app storehowever let say want build toy app quickly something fun hacked together weekend yet still completely suck managing data perhaps encode store immutable object using swift struct integer also great way store decimal huh want design withdrawal first action might look like represent action using swift enum need fold stream action creating new version store along way redux represents part codebase take action produce new version immutable store reducer borrow terminology even though diction esoteric need let assume writing multiple reducer time like structure new feature ticket insertgif new reducer use protocol unify type level protocol would call interface language term come objectivec objectivec different objectivec like differentnote using swift value type structs first copy store nextstore update field new store returning common reducer code go ahead give helper make easier reason need inout keyword mutate new cloned store swift better immutable record update syntax would probably herethis banking code trustgrand central dispatch grand central dispatch write layer architecture construct store run reducer central location action dispatched handled imaginatively call dispatch view controller hook nsbutton dispatch every time user click withdraw button withdrawal action occurs real banking app would probably also want enter routing account number place withdrawing fun show blithely ignore aspect realworld bankingsome kinda cool immediate benefit get store action even extremely unrealistic example app business logic life reducer eminently testable need construct cocoa view run unit test reducer need mock storea great way debug app print action dispatch place xcode breakpoint possible external stimulus outside world pas time something unexpected happens able trace exact action caused ita common request product manager boss alike implement user analytics user click button user coming funnel user giving u information andor money write track reducer convert user behavior google analytics segment event making remote call event come fire forget minute form event sourcing friend s√∂nke point outas app grows becoming unruly moody want refactor feature adage write code easy delete believe reducer written way satisfies rule thumb drop action reducer use compiler list compiler error find usesites imagine written view controller directly read modified array transaction balance would audit location user action led mutation would also pull business logic entangled view codesubscriptionswith withdrawal feature place would like render screen app contains list transaction account balance user avatar javascript react component update automatically dependency store among change benefit componentized user interface cocoa still benefit thinking oneway dataflow store presentation data storedispatch already single place action flow take advantage architectural watering hole use invoke subscription first let u model subscription callable object c would call functor object hear saying computer remind c escaping keyword mark closure later use constrains kind closure passed parameter help prevent reference cycle life escaping cycle construct ourselvesas subscription come store array action occurs iterate array invoke subscription small wrinkle memoize projection store avoid unnecessary ui updatesthis work breaking subscription two map action like mapstatetoprops redux encourage view controller construct equatable object containing subset information store projection need action need fire time action occursin general strike central weakness storeandactions architecture difficult write performant app certain highfrequency action encoded object passed every reducer however toy app suffices fine also imagine app certain part app flee normal architecture manage state squeeze extra framesit remains implement subscriber generic variable exists know kind type view controller want represent state know need equatable implement inequality checknow use subscription reactively update cocoa view oh boy view controller easy writethis completes core loop architecture change happens user click withdraw one view controllerthe change packaged actiona reducer several handle action creates new storesubscribers invoked new storea second view controller subscribed store update viewsone last thing though multiple reducer higherorder reducersthis title book programming would sell bunch copy even though nobody would able understand alternate universe paid content make internet suppose universe need reducer multiplex action many reducer despite fancy title simple write could keep going bank app think would neat show actual list reducer look like insertgif give hint feature ticket wanted implement release app action shoutout opensource spectacle app wayeven toy app already kind complicated might posit writing user interface essentially hobby worry tiny detailsthat allgo check insertgif already also twitter producthunt keep updating long remember insertgif made love nyc proud alumnus originate r laboratory hope much fun reading individually creating gist medium sevenyear old product support syntax highlighting code block
28,Lobsters,swift,Swift programming,swift-helpful,https://github.com/danielmartin/swift-helpful,swifthelpful,swifthelpful overview install configuration melpa quelpa http framagitorgsteckerhalterquelpa usage feature contextual information swift keywords attribute api documentation coming language server protocol http githubcomemacslsplspsourcekit swift standard library source code http githubcomburntsushiripgrep development http wwwgnuorgsoftwaremake http caskreadthedocsio installing dependency bytecompilation testing lint function documentation acknowledgement http githubcomwilfredhelpful,swifthelpful overview emacs described extensible customizable selfdocumenting realtime display editor like selfdocumenting experience writing swift code emacs swifthelpful package using information swiftmode lspmode swiftinfo able answer question anything see swift program developer tool typically identifiercentric sense show documentation api swifthelpful also show official apple information keywords attribute etc perfect company experimenting swift playground emacs equally useful people learning language people want revisit recent language addition also swifthelpful decoupled apple ecosystem use platform like window gnulinux also extremely fast perfectly use resourceconstrained platform like raspberry pi install configuration melpa install swifthelpful via melpa mx packageinstall ret swifthelpful quelpa install swifthelpful via quelpa http framagitorgsteckerhalterquelpa quelpa swifthelpful repo danielmartinswifthelpful fetcher github file el swiftinfo info usage main entry point swifthelpful command executed point placed swift code feature contextual information swift keywords attribute swifthelpful show information swift keyword attribute let say see import swift program want know importing module swift work simply place point top import invoke swifthelpful mx swifthelpful tool show brief snippet documentation swift module many case keyword highlighted focus attention mentioned documentation pressing read manual button open swift manual section info buffer read definitive discussion topic information limited keywords swift programming language gradually increasing use attribute language swifthelpful also show information attribute let say know dynamiccallable mean attribute introduced swift simply place point one occurrence attribute invoke swifthelpful read explanation time coming official swift reference manual api documentation coming language server protocol swifthelpful also show documentation api way favorite ide leverage lspmode configured specific extension swift lspsourcekit http githubcomemacslsplspsourcekit let say want know isexecutable method see source file sourcekitlsp project invoke swifthelpful symbol see information coming language server protocol including method type signature header documentation two convenient button search definition reference across codebase swift standard library source code compiled checkout swift standard library swifthelpful able search present implementation source code almost zero configuration two requirement use feature need install ripgrep tool http githubcomburntsushiripgrep fast directory searcher need point swifthelpful local checkout swift standard library setq swifthelpfulstdlibpath path local compiled checkout stdlib let say want know dropfirst collection function swift ask swifthelpful presented function implementation collectionswift file path actual link clicking open standard library source file case want explore development development automated mean make http wwwgnuorgsoftwaremake cask http caskreadthedocsio installing program encouraged developing swifthelpful installing dependency bytecompilation testing minimize chance regression run swifthelpful regression test suite introducing change want use ertrunner lint function documentation good emacs package follow basic style rule regarding function documentation check see readmemd inside swiftinfo folder know update documentation modified documentation source code org acknowledgement idea package inspired helpfulel http githubcomwilfredhelpful
29,Lobsters,swift,Swift programming,The Promise vs Reality of SwiftUI Multiplatform,https://write.as/angelo/the-promise-vs-reality-of-swiftui-multiplatform,promise v reality swiftui multiplatform,last week post tweeted letdown swiftui illustrated broken button reality multiplatform via r,happy august friend update last week post swiftui app writefreely work progressed pretty well shared code last week point got preliminary ui display list post filter collection tapping post load editor make change title content iphone ipad also new post button create new draft iphone ipad well pull chair let chat little bit gap promise reality multiplatform swiftui apps working post tweeted managed flesh key ui feature app across iphone ipad mac day thanks swiftui live preview xcode show view look like next code update realtime code stated building native app speed iteration ever encountered building web looking html cs looking react latest iteration look like far iphone ipad installed macos aka big sur beta able build mac app compare way final ui plenty work still done including replacing unusual picker view selecting collection proper sidebar adapting spacing little better mac app ca nt preview anything mac target even xcode upgrade machine macos beta one thing helpful moving quickly swiftui declarative nature let specify semantics element placement view letting framework figure mean iphone v ipad v mac great example focus developer experience dx toolbaritemplacement api let semantically state particular item add toolbar primaryaction status element used texteditor view place post status badge status area publish button primaryaction area see screenshots shared element placed differently depending whether shown iphone ipad mac nt write single line code customize difference letdown swiftui illustrated broken button life swiftui rose newdraft feature nt quite working fully yet building iphone ipad version app tapping newdraft button list post work beautifully slide new draft list open text editor next great essay thrilled working end workday friday finished installing big sur beta mac morning excited see everything looked worked mac app expected little ui refinement list post example need healthy dose padding otherwise figured similar experience least ipad app mostly picker replaced popup menu choose collection narrow list post tap post list load text editor ready change post status change instantly update badge toolbar post list tried create new draft mac clicking newdraft button appears interestingly enough next poststatus badge screenshot nothing thing error thrown view drawn nothing reality multiplatform suppose nt use word letdown multiplatform panacea reality app expects different thing iphone ipad mac issue facing newdraft button nt failing swiftui paradigm mac app treat navigation v button v instantiating new window different iphone nt structured thing way framework expects fine need spend little time adapting mac client would liked got say despite couple little issue need fix really impressed much worked right box extra work part nativeapp development may yet happen pace web development closer ever enter email subscribe update also subscribe via r follow angelo writeas mastodon
30,Lobsters,swift,Swift programming,Swift Package Manager is a security risk,https://medium.com/@KaneCheshire/swift-package-manager-is-a-security-risk-4d13f3a7bc3b,swift package manager security risk,swift package manager potential security risk written post hack update going nsworkspace collaboration full name test see password correct password hello name notmypassword password mitigation cocoapods way running script framework built bad swift team fix example repository,swift package manager potential security risklet start saying absolutely love swift package manager think future dependency management io somuchso written post itbut also want use opportunity highlight potential risk using became aware today initially thought issue tracker swift package manager since one github repo since reported issue swift bug tracking jira instance found way run code want use one swift package providing check packageswift file hand lot simpler might think let show howthe hackit simple hack making use anonymous closure lazily load package instance defined packageswift file packageupdate writing post filing bug swift team realised even complicated need simply create function return anything package instance need like string name execute code want returningfirst let look normal simple packageswift file get generated run swift package generate add package dependency swift package manager magic looking package instance filesince file regular swift file write swift code want including tricking swift package manager call function whenever package instance referenced code hardly changed used run code want dosomething let add code dosomething make mac speak loud yes really code updated dosomething run executable file called say speaks word give argument included every mac default notice able literally execute programme stored usrbin use process instance part appkit problem importing packageswift file swift code running macif add package dependency another package dependency xcode project hear mac say hello world whenever package resolved fact save packageswift file test speakthis get worrying add package remote dependency xcode code run soon add dependency time get screenshot xcode function already called mac said hello world loudgoing furtherjust able import appkit open possibility many thing malicious example appkit get list running apps terminate launch new process nsworkspacewe import macos framework like collaboration let u get information like full name current user alarmingly test see password correct password notmypassword happens actual login password mac code speak hello name notmypassword password even without importing appkit macos framework import foundation allows u make network request want code us dispatchgroup make thread wait network call completed network call could used download data site upload data anywhereif enough since access filemanager foundation also write data disk well read directly filesystem delete file theory could delete entire user directory although chicken try code iterates entire filesystem logging item console thankfully catalina give xcode permission access directory confirms able run code privileged way xcode also subconciously trained accept permission request xcode throw methese example top head sure plenty cleverer people think ofmitigationswhat protect people want abuse vulnerability well unfortunately entirely help protect checking party packageswift file using make sure target specific version remote repo rather always resolving latest version branch remember though nothing stopping someone changing code tag remote repo referencesadditionally use package developer trust unfortunately could unfair disadvantage new developer something cool want share via swift package manager case still risk albeit small reputable developer could repository compromisedhopefully github able add vulnerability check swift package like language dependency future course hopefully swift developer find way plug properly without impacting usefulness either swift package manager system frameworksin interest fairness also point cocoapods way running script framework built however least choose log warning developer completely silent expose official feature people aware ityou also make sure storing anything sensitive disk outside keychain mean storing password unencrypted text file leaving private key certificate desktop etcadditionally although able write code retrieves private key keychain reference key specifically able actually use key sign data without permission prompt coming important blindly allow permission thing pop even seem like coming system example using keychain code able get popup appear trying use private key one particularly worrying mention package name anywhere since saying macos want make change would tempted allow know code caused know entering username password case chicken try maybe set demo machine properly try stuff without worrying badif read far might worried rightly also worth pointing although used evil also used goodthis sort thing could enable code generation thought first place providing required automatic setup user library difficult setup process like adding build phase script firebase sadly live world bad actor ruin thing nice swift team fix honestly sure best way team fix swift code going allowed full always happen perhaps disallowing import function parsing packageswift file could worki created example repository check want see real
31,Lobsters,swift,Swift programming,Swift type checking is undecidable,https://forums.swift.org/t/swift-type-checking-is-undecidable/39024,swift type checking undecidable,canonical type abstract algebra free semigroups finitelypresented semigroups mapping finitelypresented semigroups protocol word problem mean reference,precisely introduction made canonical type computation undecidable problem begin necessary background information presenting argument outlining next step canonical type consider two protocol stripped real implementation standard library protocol iteratorprotocol associatedtype element protocol sequence associatedtype iterator iteratorprotocol associatedtype element element iteratorelement associatedtype subsequence sequence element subsequenceelement subsequencesubsequence subsequence define function taking single generic parameter constrained sequence func numberofelements sequence seq int inside function body element type spelled number way telement titeratorelement tsubsequenceelement tsubsequenceiteratorelement tsubsequencesubsequenceelement tsubsequencesubsequenceiteratorelement indeed infinitely many spelling telement equivalent sametype constraint sequence protocol clause fact equivalent spelling name type important consider generic function take two value unconstrained generic type func isequal bool call function two value equivalent type spelled two different way let x telement let tsubsequenceelement print isequal x type checker need able determine x type reject code mean computing canonical type canonical type also important abi appear mangled name protocol witness table layout place clearly computing canonical type important operation must able perform correctly see current language impossible general case abstract algebra semigroup set g together binary operation set contains distinguished identity element binary operation satisfies following axiom b c b c associativity identity note group operation necessarily commutative b b general common talk group math group semigroup element inverse satisfying however wo nt need inverse semigroups sufficient purpose free semigroups free semigroup generator set g set string formed element g identity element empty string semigroup operation string concatenation example free semigroup single generator contains element aa aaa etc semigroup isomorphic semigroup integer addition isomorphism defined length string isomorphism since length concatenation two string sum length individual string free semigroup two generator b element look like abaaa babbba abbbabab note unlike first example semigroup operation commutative example ab b abb b ab bab possible define free semigroup infinitely many generator purpose let assume generator set always finite finitelypresented semigroups generalize notion finitelygenerated free semigroups introducing relation free semigroup string formed generator element denotes unique element relation hand define eqivalence stipulating two different spelling name semigroup element semigroup finite set generator relation called finitelypresented semigroup example let start taking free semigroup two generator b add relation b b semigroup apply binary operation two element say abba bbab first concatenate string form abbabbab make use relation b b swap adjacent b appear beginning string b end example give u aaabbbbb mean semigroup element uniquely determined number b relative order matter semigroup isomorphic semigroup pair integer pairwise addition another example take free semigroup one generator add relation get finite group element total semigroup isomorphic semigroup integer modulo addition semigroup integer multiplication hand finitelypresented generator set set prime number infinite mapping finitelypresented semigroups protocol mean let define protocol two associated type associated type conforms protocol recursively protocol p associatedtype p associatedtype b p define function generic parameter constrained p type parameter write function body string formed associated type b func foo p let x let ta let z tbab look familiar fact free semigroup two generator precisely typelevel embedding free semigroup two generator swift semigroup element type parameter always prefixed identity element semigroup operation concatenation since associated type conform p every type parameter write conforms p make concatenation operation welldefined finitelypresented semigroups free semigroup relation every string type parameter swift translation unique element type map finitelypresented semigroup relation swift need encode relation form clause protocol example previous example semigroup integer modulo encoded swift protocol associatedtype aaaaa self define function generic parameter constrained write following type function body ta taa taaa taaaa unique type longer type equivalent one example type checker prove taaaaaa equivalent ta almost ready look undecidability argument rest encoding finitelypresented semigroup swift protocol made mistake none follows valid word problem word problem finitelypresented group asks two string generator denote element word problem known undecidable general case plenty example semigroups decidable word problem example seen far well finite semigroups etc algorithm work arbitrary finitelypresented semigroup example semigroup undecidable problem generator b c e relation ac ca bc cb bd db ce eca de edb cca ccae translate swift mapping generator associated type relation clause entry protocol impossible associatedtype impossible associatedtype b impossible associatedtype c impossible associatedtype impossible associatedtype e impossible ac ca ad da bc cb bd db ce eca de edb cca ccae cupertino problem write swift protocol using existing language feature computing canonical type known undecidable mean well end world end swift even end matter clearly genericsignaturebuilder able solve word problem least semigroups today well protocol nt correspond semigroups protocol least one associated type conform protocol recursively standard library large amount userwritten code make use generic work correctly also aware example nt manage canonicalize type properly causing miscompiles crash fixing gradually time continue discover problem fix strong hint underlying approach correct spent time thinking fundamental problem indeed see reason struggled correctness area language solution impossible general case need come appropriate restriction combination protocol obeys restriction algorithm always terminate correct result protocol obey restriction want able produce diagnostic instead crashing miscompiling optimistic introducing restriction little impact realworld code nobody using swift typelevel group theory yet reference
33,Lobsters,swift,Swift programming,Getting Started with Core Bluetooth,https://ditto.live/blog/posts/getting-started-with-core-bluetooth,getting started core bluetooth,table content introduction core bluetooth basic concept core bluetooth central peripheral service public database exists characteristic core bluetooth concept summary putting practice getting started scanning central online uuid generator advertising peripheral detecting peripheral central received signal strength indicator connecting peripheral discovering characteristic inside peripheral service subscribing characteristic confirming notification peripheral set sending data peripheral sending data central receiving data peripheral receiving data central summary challenge chat app technical reflection limited message size speed limitation additional speed penalty reliable delivery different level control per platform securityprivacy policy backgrounded apps extremely complex api work demand bulletproof error checking handling occasional instability general odd behavior lack encryption conclusion,table content introduction really hard overstate much smartphones tablet transformed world starting iphone device combine gorgeous intuitive touch interface full suite network technology io developer consider stranger networking almost breadandbutter requirement every app day kind rest api handle encoding decoding data remote source side technology aside another huge side networking smartphone never personally explored bluetooth yet sitting writing post wearing wireless headphone apple watch strapped wrist played animal crossing nintendo switch wireless pro controller feel like bluetooth something take granted black box magic never worry daytoday life io engineering career never involved project need side project learn bluetooth apis apple provides buddy max asked interested writing app order demonstrate core bluetooth work following blog post experience jumped chance blog post geared anyone else boat someone might necessarily newbie developing apple platform never stopped learn core bluetooth apis work discus core concept behind core bluetooth parentchild architecture show send basic data device discus pitfall encountered core bluetooth core bluetooth apple public framework official way third party apps integrate bluetooth functionality apps io ipados point core bluetooth abstraction bluetooth low energy ble different classic bluetooth allowing far energy efficient communication support lowpowered device historically meant core bluetooth aimed low powered peripheral device heart rate sensor home automation kind device primarily reside low power state periodically broadcast small tidbit information contrast device using classic bluetooth like game controller wireless headphone much high powered constantly streaming data previously impossible access third party apps however io apple expanded core bluetooth cover classic bluetooth device well public api changed mean much wider variety wireless device became available amazing capability never better time start learning adopt core bluetooth basic concept core bluetooth working core bluetooth necessary become accustomed specific terminology major component service relate central peripheral ble operates traditional serverclient sort model one device act capacity server contains information another act client query information processesdisplays locally device broadcast advertisement called peripheral device scan connect peripheral called central connected usually peripheral act server central act client way core bluetooth operates general example pairing pair bluetooth headphone smartphone smartphone would central headphone would peripheral service obviously type ble device question determine sort capability example heart rate monitor record wearer heart rate smart thermostat would record current temperature location apps built support one specific class device capability example apps tracking user health would interest connecting device nt health related thermostat order encapsulate report capability specific peripheral bluetooth requires peripheral identify class capability service peripheral make discoverable central broadcasting advertisement packet defining main identifying service offer central scanning time detects packet determines peripheral device found support class service searching begin process connecting traditionally main service device advertised connection formed central query peripheral additional service offer order central determine compatible peripheral need know id value service peripheral support specific apps peripheral device make sense define service using shared uuid device however general practice make sense peripheral adopt bluetooth service standard capability globally example would make sense device record blood pressure reading could connected bluetooth device capable processing data regardless manufactured either device public database exists list standardized set service id used central peripheral want adopt specific use case characteristic given service number separate set information andor service might included within example heart rate sensor peripheral might feature heart rate service contained within service raw current heart rate value along information sensor positioned wearer time service may contain number characteristic record various type data perform various subfunctions service may used receive data peripheral send command back peripheral possible central explicitly query information characteristic register observer called every time characteristic update concept bluetooth device offering capability service characteristic officially called gatt short generic attribute profile core bluetooth concept summary hopefully point basic layout core bluetooth starting make sense parent device called central connect child device known peripheral peripheral manage capability service manage capability via characteristic putting practice discussed basic concept core bluetooth start putting practice demonstrating flow connecting two device built companion sample app around core bluetooth app basic chat app allows two device connect send message app demonstrates scan central advertise peripheral connected app send message upstream downstream one pipeline getting started starter anything else need add nsbluetoothalwaysusagedescription key app infoplist describing want use bluetooth key nt present would app rejected app store submission app throw exception trying call core bluetooth apis security requirement apple apps must get explicit permission user bluetooth enabled case let explain need bluetooth enable chat service access bluetooth allows chat others device place start using core bluetooth swift every source file integrates framework must following import statement import corebluetooth scanning central io device fill role central bluetooth connection represented object called cbcentralmanager begin let create new instance let centralmanager cbcentralmanager delegate self queue nil see object must designated delegate upon instantiation object must conform cbcentralmanagerdelegate upon instantiation central manager necessary activity needed start using bluetooth started immediately point ca nt start scanning yet bluetooth spends nontrivial amount time setting state could considered powered immediately must wait first delegate callback func centralmanagerdidupdatestate central cbcentralmanager guard centralstate poweredon else return centralmanagerdidupdatestate called every time state bluetooth system change include status bluetooth resetting access unauthorised reason productionready app every single state properly handled however case need detect state bluetooth reached powered happened start scanning scanning peripheral easy need call scanforperipherals specify service interested let service cbuuid string centralmanagerscanforperipherals withservices service option nil centralmanagerscanforperipherals withservices service option nil mentioned service carry unique identifier peripheral central may match core bluetooth identification handled via cbuuid object specific case use simple string identifier tutorial using uuid string value generated online uuid generator value need globally unique recognizable peripheral central side point device scanning peripheral matching service identifier point central checked scanning calling centralmanagerisscanning advertising peripheral central scanning need another device acting peripheral advertise service scanning similar central managed via cbcentralmanager peripheral managed instance cbperipheralmanager let peripheralmanager cbperipheralmanager delegate self queue nil exactly central manager peripheral manager require delegate upon creation time conforming cbperipheralmanagerdelegate also must wait state bluetooth device reach powered func peripheralmanagerdidupdatestate peripheral cbperipheralmanager guard peripheralstate poweredon else return state bluetooth peripheral powered peripheral start advertising let characteristicid cbuuid string let characteristic cbmutablecharacteristic type characteristicid property write notify value nil permission writeable let serviceid cbuuid string let service cbmutableservice type serviceid primary true servicecharacteristics characteristic peripheralmanageradd service peripheralmanagerstartadvertising cbadvertisementdataserviceuuidskey service cbadvertisementdatalocalnamekey device information fair bit unpack step one part time nothing complicated create characteristic assign standardised characteristic uuid central expecting also need explicitly mark characteristic writable central send data back peripheral create service object standardised service uuid set type primary ensure advertised main service peripheral advertise peripheral service uuid addition cbadvertisementdatalocalnamekey key normally hold device name peripheral modified hold additional data central could potentially use eg current temperature thermostat detecting peripheral central one device scanning one advertising service id able detect central side peripheral detected following delegate callback called func centralmanager centralmanager cbcentralmanager diddiscover peripheral cbperipheral advertisementdata string rssi rssi nsnumber centralmanagerconnect peripheral option nil selfperipheral peripheral diddiscoverperipheral provide lot interesting information peripheral advertisementdata dictionary contain information like device name manufacturer name addition service uuids defined cbadvertisementdataserviceuuidskey though may discover later necessary possible check peripheral support service central want checking value advertisementdata cbadvertisementdataserviceuuidskey addition rssi value received signal strength indicator useful determining distance peripheral sometimes may necessary require specific proximity proper functioning value used monitor happy peripheral one want connect call centralmanagerconnect begin connecting time since way access peripheral object outside delegate also good idea retain local property class connecting peripheral discovered peripheral called centralmanagerconnect central attempt connect following delegate method called func centralmanager centralmanager cbcentralmanager didconnect peripheral cbperipheral centralmanagerstopscan peripheraldelegate self let service cbuuid string peripheraldiscoverservices service point become responsible peripheral instead acting central manager object work directly peripheral object peripheral object type cbperipheral distinctly different cbperipheralmanager first thing assign delegate peripheral conforming cbperipheraldelegate receive event directly done call discoverservices peripheral let u confirm service support subsequently access service characteristic need discovering characteristic inside peripheral service set delegate peripheral performed request discover service following method cbperipheraldelegate called func peripheral peripheral cbperipheral diddiscoverservices error error let error error print unable discover service errorlocalizeddescription cleanup return let characteristic cbuuid peripheralservices foreach service peripheraldiscovercharacteristics characteristic service error occurs point must handle exit gracefully otherwise peripheral object populated service support like service identified via cbuuid object characteristic identified way subscribe characteristic start reading data contains must also discover member service addition peripheral multiple service becomes necessary iterate one discover one characteristic interested iterate service peripheralservices attempt discover characteristic want via id subscribing characteristic chat app interested passive stream data peripheral want notified immediately new data come need configure peripheral alert u whenever characteristic updated characteristic service discovered following delegate callback called func peripheral peripheral cbperipheral diddiscovercharacteristicsfor service cbservice error error let error error print unable discover characteristic errorlocalizeddescription cleanup return let characteristicuuid cbuuid servicecharacteristics foreach characteristic guard characteristicuuid characteristicuuid else return peripheralsetnotifyvalue true characteristic selfcharacteristic characteristic anything failed process first appropriate error handling moving secondly received service object since service number characteristic inside must loop discover main one want discovered characteristic want call peripheralsetnotifyvalue true order start getting notified data change confirming notification peripheral set one final step process peripheral report whether setting characteristic notify central successful whether succeeded failed following delegate triggered func peripheral peripheral cbperipheral didupdatenotificationstatefor characteristic cbcharacteristic error error let error error print characteristic update notification error errorlocalizeddescription return guard characteristicuuid characteristicuuid else return characteristicisnotifying print characteristic notification begun else print characteristic notification stopped disconnecting centralmanagercancelperipheralconnection peripheral nt think explicitly required implement method subscription failed would make sense detect attempt subscribe perform cleanup code needed point additionally central data pending would like send peripheral would best place send sending data peripheral central manager successfully able capture peripheral relevant characteristic central start sending data peripheral via characteristic one thing note characteristic must explicitly configured peripheral side writable central point possible send data peripheral calling let data messagestringdata using peripheralwritevalue data characteristic type withresponse type argument let specify whether want peripheral reply received data great discerning type data might explicitly required certain order data often repeated peripheral nt catch nothing value lost sending data central opposite side sending data central peripheral side similar method let data messagestringdata using peripheralmanagerupdatevalue data characteristic onsubscribedcentrals central receiving data peripheral finally ready start receiving data peripheral order notified new data arrived characteristic use following delegate func peripheral peripheral cbperipheral didupdatevaluefor characteristic cbcharacteristic error error let error error print characteristic value update failed errorlocalizeddescription return guard let data characteristicvalue else return let message string decoding data receiving data central last peripheral receives data central following method cbperipheralmanager called func peripheralmanager peripheral cbperipheralmanager didreceivewrite request cbattrequest guard let request requestsfirst let data requestvalue else return let message string decoding data one thing extra aware characteristic set writeable time creation sending data peripheral silently fail delegate never called summary going step obvious sending data core bluetooth involves quite step peripheral side peripheral configure advertise service characteristic manage central subscribe unsubscribe central side subscribing characteristic multistep process scanning peripheral connecting peripheral discovering peripheral service discovering service characteristic finally subscribing however said understand terminology object chain related next everything fall place relatively easily challenge chat app introduction core bluetooth api show general basic step connecting central peripheral writing chat app rather large hurdle appeared immediately central peripheral classic use case low powered sensor connected iphone role central peripheral clear cut however connection two iphones question play role suddenly becomes much harder decision one neat thing might obvious start core bluetooth make device central peripheral time meaning simultaneously scanning advertising device opened app device discovery screen create central manager peripheral manager begin scanning advertising time device range thing way device device detects shown onscreen likewise device detect device show device screen device discovery screen interested detecting available device could potentially chat go chat session window want receive message remote device selected case user tap device want talk hardware uuid selected device saved chat window opened holding copy uuid device opened chat window device set scan like standard central connection wo nt occur yet avoid detecting device advertising device discovery menu different service uuid used connection device performing scanning continues happen first time either participant chat submits message chat happens particular device becomes peripheral start advertising happens device detects first device connects central essence whoever chat first becomes peripheral whoever chat last remains central together sharing single connection advertisement saved hardware uuid used determine identity connecting device guarantee someone else different session happened start broadcasting nt accidentally join instead overall method might seem bit strange pragmatic level might make sense set maintain two connection device central connected another peripheral however practice unreliable two connection could potentially fail interference occurs technical reflection discussed core bluetooth api design pattern easy understand work said looked bare minimum getting core bluetooth moving would absolutely sufficient production app folk ditto use core bluetooth flagship product extension bluetooth low energy android support addition challenge limitation experienced project challenge ditto engineer faced well limited message size one thing completely glossed amount data sent characteristic hard limit limit change device historically byte modern phone hardware around byte chat app payload small per message nt much concern certainly something production app need take seriously core bluetooth capable detecting reporting acceptable length message device want send responsibility code chunk data send multiple message speed limitation maximum speed communicating via gatt actually kilobyte per second chat app limitation would never bump heavier application could quickly become bottleneck depending use case might optimize message payload efficient additional speed penalty reliable delivery writing data characteristic specifying withresponse attribute guaranteeing peripheral confirm received data roundhouse operation also incurs additional speed penalty use case require absolute top speed usually best rely unreliable delivery instead implement error correction logic different level control per platform core bluetooth instigates specific policy may apply equivalent ble implementation device android big example limitation core bluetooth imposes much sort data included advertising packet peripheral building product might equivalent android counterpart care must taken ensure interface behave way securityprivacy policy backgrounded apps regular bluetooth stack io function regardless onscreen activity apple implemented strict privacy policy apps adopting ble peripheral device app backgrounded continue advertise local name property longer included additionally backgrounded central longer receive repeating advertisement peripheral range particular limitation big point contention organization trying build contact tracing apps top core bluetooth extremely complex api work certainly becomes easier work time core bluetooth certainly nt easy framework get running quickly order start sending receiving data long process step need followed order slowly capture object need compounding step done via callback one another one time sometimes even one delegate daisychains new delegate case cbperipheral working process needed use case timeconsuming require high cognitive load demand bulletproof error checking handling point delegate callback process error could easily happen derail whole process wireless technology bluetooth prone interference randomly losing device delegate code need bulletproof error handling every step order handle issue potentially occur step process also potentially mean proactive heartbeat state check case expected callback fails occur occasional instability general odd behavior even though core bluetooth quite old point still occasional odd behavior happen quite reliably sometimes sending queue filled capacity callback say cleared sometimes skipped requires periodically testing queue see state certain specific device like ipad mini iphone potentially accidentally stop scanning locked unlocked lack encryption given form data transmitted bluetooth could quite private personal eg person health record encryption always strongly recommended form ble encryption exists reliable implementation might need consider writing encryption layer error correcting implication would entail conclusion first got chat app working text typed one phone automatically appeared felt absolutely magical fantastic time learning core bluetooth order write post hope found everything useful end one thing certainly clear implementing core bluetooth implementation hard involves lot step lot go wrong point user experience engineer researching core bluetooth looking build new product implement sort local communication instead rolling new implementation scratch recommend consider checking synchronization technology ditto ditto tech stack already taken care challenge listed would make integrating communication app breeze thanks reading sample app github repository
34,Lobsters,swift,Swift programming,"Dflat, Structured Data Store for Mobile",https://github.com/liuliu/dflat,dflat structured data store mobile,dflat sqlite flatbuffers core data realm dflat dflat dflat feature dflat core data dflat dflat strict serializable core data dflat combine second introduction dflat flatbuffers schema dflat dflat libmdbx dflat dflat installation dflat bazel dflat swift package manager guide dflat example combine combine schema evolution dflat dflat namespace dflat dflat runtime api dflat transaction dflat dflat data fetching dflat data subscription combine close dflat dflat benchmark dflat dflat dflat wcdb disclaimer crud dflat dflat dflat dflat dflat dflat dflat change subscription dflat dflat dflat dflat sqliteswift dflat,dflat sqlite flatbuffers familiar core data realm dflat occupies space two application unlike two dflat different set feature make different tradeoff feature tradeoff grounded realworld experience writing world largest apps dflat also built groundup using swift hopefully find natural interact swift language feature writing different structured data persistence system mobile past year dflat accumulation lessonslearned building proprietary system io particular goto choice long core data work internal data persistence mechanism many system apps deploying structured data persistence system hundred million mobile device certain challenge intrinsics data persisted higherlevel rest app interact system dflat codebase still young stage however underlying principle proving successful proprietary system dflat implemented following feature particular order system return immutable data object passed system view model generator query object observed update published either callback combine framework mutation happen separate thread caller little control thus asynchronously data fetching happen concurrently synchronously thread caller choice strict serializable multiwriter multireader mode supported user choose singlewriter thus trivially strict serializable multireader mode desire data query expressed swift code typechecked swift compiler schema upgrade require writeaccess underlying database strict readonly possible sqlite unlike core data dflat built groundup swift express data model taking full advantage swift language thus native support struct producttype enum sumtype typechecked query observing combine second introduction dflat consists two part dflatc compiler take flatbuffers schema generate swift code dflat runtime minimal api footprint interact dflat runtime us sqlite storage backend design support backends libmdbx future hard dependency flatbuffers use dflat first use dflatc compiler generate data model flatbuffers schema include generated code project use dflat runtime interact data model installation dflat moment requires bazel precise dflat runtime installed either swift package manager bazel dflatc compiler requires bazel build relevant part install bazel macos following guide use dflatc compiler dflatcpy help proceed add dflat runtime either swift package manager bazel swift package manager package name dflat url http githubcomliuliudflatgit example assuming postfbs file somewhere look like enum color byte red green blue table textcontent text string table imagecontent image string union content textcontent imagecontent table post title string primary primary key color color tag string priority int indexed property indexed content content roottype post important say post object one dflat manages use dflatc compiler generate code schema dflatcpy postexample postexamplepostfbs everything check see file generated postexample directory postgeneratedswift postdatamodelgeneratedswift postmutatinggeneratedswift postquerygeneratedswift adding project basic createreadupdatedelete crud operation post object import dflat import sqlitedflat let dflat sqliteworkspace filepath filepath fileprotectionlevel noprotection create var createdpost post nil dflatperformchanges postself changeshandler txncontext let creationrequest postchangerequestcreationrequest creationrequesttitle first post creationrequestcolor red creationrequestcontent textcontent textcontent text first post guard let inserted try txncontentsubmit creationrequest else return alternatively use txncontenttry submit creationrequest wo nt return result reasonable error handling case let inserted post inserted createdpost post succeed transaction done read let post dflatfetch postself posttitle first post update dflatperformchanges postself changeshandler txncontext let post post let changerequest postchangerequestchangerequest post changerequestcolor green txncontenttry submit changerequest succeed transaction done delete dflatperformchanges postself changeshandler txncontext let post post let deletionrequest postchangerequestdeletionrequest post txncontenttry submit deletionrequest succeed transaction done subscribe change either query object object subscription end object deleted query subscription wo nt complete unless cancelled two set apis one vanilla callbackbased based combine show combine one subscribe live query let cancellable dflatpublisher postself postcolor red orderby postprioritydescending subscribe dispatchqueueglobal sink post print post subscribe object let cancellable dflatpulisher post subscribe dispatchqueueglobal sink post switch post case updated newpost print newpost case deleted print deleted completed schema evolution schema evolution dflat follows exact flatbuffers exception add primary key change primary key different property selected otherwise free add remove index rename property property removed marked deprecated new property appended end table never change type property need versioning long follow schema evolution path schema maintained flatbuffers sqlite disk ops required schema upgrade schema upgrade failure due lack disk space prolonged schema upgrade time due pathological case wo nt thing dflat namespace dflat schema support namespace flatbuffers schema however swift nt really support proper namespace namespace implementation relies public enum extension thus namespace namespace table post title string primary roottype post declare namespace project need swift file contains following public enum evolution public enum work access post object typealias post dflat runtime api dflat runtime minimal api footprint apis total object transaction func workspaceperformchanges transactionalobjecttypes anytype changeshandler escaping transactioncontext transactioncontext void completionhandler success bool void nil api take changeshandler closure perform transaction object creation update deletion mutation performed changerequest object first parameter specifies relevant object going transact read update object specified assertion triggered transaction done completionhandler closure triggered let know whether transaction successful transaction performed background thread exactly one nt concern two different object transaction performed concurrently follows strict serializable protocol case func transactioncontextsubmit changerequest changerequest throw updatedobject func transactioncontexttry submit changerequest updatedobject func transactioncontextabort bool interact dflat apis transaction handle data mutation submit note error possible example created object primary key twice use upsertrequest expected try submit method simplified try submit dance case nt want know returned value fatal conflict primary key otherwise swallow type error disk full encountered type error dflat simply fail whole transaction abort method explicitly abort transaction submission call effect data fetching func workspacefetch oftype elementtype elementquery limit nolimit orderby fetchedresult element func workspacefetch oftype elementtype limit nolimit orderby fetchedresult element func workspacefetchwithinasnapshot data fetching happens synchronously specify condition clause posttitle first post postpriority postcolor red returned fetchedresult element act pretty much like array object element immutable thus either object fetchedresult element safe pas around thread fetchwithinasnapshot provides consistent view going fetch multiple object let result dflatfetchwithinasnapshot firstpost fetchedresult post highpriposts fetchedresult post let firstpost dflatfetch postself posttitle first post let highpriposts dflatfetch postself postpriority postcolor red return firstpost highpriposts needed dflat transaction fetch firstpost highpriposts fetchwithinasnapshot wo nt stop transaction make sure observe view fetching firstpost data subscription func workspacesubscribe element equatable fetchedresult fetchedresult element changehandler escaping fetchedresult element void subscription func workspacesubscribe element equatable object element changehandler escaping subscribedobject element void subscription native subscription apis subscribes change either fetchedresult object object end object deleted subscription triggered completionhandler transaction triggered func workspacepublisher element equatable element atompublisher element func workspacepublisher element equatable fetchedresult element fetchedresultpublisher element func workspacepublisher element equatable elementtype elementquery limit nolimit orderby querypublisher element func workspacepublisher element equatable elementtype limit nolimit orderby querypublisher element combine counterpart besides subscribing object fetchedresult also subscribe query directly happens hood query made upon subscribe hence whichever queue provided subscribe subscribe fetchedresult close func workspaceshutdown completion void nil trigger dflat shutdown transaction made dflat call fail transaction initiated finish normally data fetching return empty result data fetching triggered call finish normally hence completion part completion closure supplied called transaction data fetching initiated shutdown finish benchmark benchmark structured data persistence system notoriously hard dflat wo nt claim fastest however strives predictable performant mean nt pathological case performance dflat degrades unexpectedly also mean dflat wo nt surprisingly fast optimal case following data collected reproduced focuspy app benchmark compared mainly core data listed number fmdb wcdb wcdb benchmark give better overview would expect test device test device iphone pro memory disclaimer take grain salt benchmark number number presented simply demonstrate pathological case framework involved nt taken context practice structured data persistence system rarely bottleneck important understand use rather raw number lightworkload device look like code app benchmark compiled release mode compilationmodeopt wholemoduleoptimization wcdb benchmark compiled release mode whatever mean project file benchmark peerreviewed case represents best case scenario framework case represents worst case scenario designed reflect realworld workload rather benchmark designed reflect framework characteristic extreme case crud first compared dflat core data object insertion fetching update deletion object generated index title indexed core data fetching object evaluated framework querying nonindexed property update object individually evaluated updating different object separate transaction time fetching object individually evaluated fetching different object title indexed core data primary key dflat time obviously best way thing update object one big transaction fetch batch possible interesting pathological case discussed earlier proper way multithread insertion deletion core data considerably tricky nt got around multithread insert object multithread delete object dflat number look good true example insertion dflat appears twice fast core data number nt make intuitive sense multithread insertion slower putting perspective important chart compared number extracted wcdb benchmark without modification compare ops per second rather time spent fetching object note wcdb benchmark baseline read fetch best case scenario sqlite also compare simple table two column key blob payload byte multithread writes indeed slower ideal case sqlite execute writes concurrently thus multiwriter mode really mean transaction closure executed concurrently writes still happen serially sqlite layer still beneficial realworld case spend significant time transaction closure data transformation rather sqlite writes ceiling writes much higher dflat achieved wcdb represents ideal case two column dflat number realworld would also lower index object many field even array data since dflat nt introduce optimization batch operation nt surprise dflat performance scale linearly wrt dataset size follow chart show change subscription every framework slightly different design change subscription work core data implement two way nsfetchedresultscontroller delegate callback nsmanagedobjectcontextobjectsdidchange developer perspective nsfetchedresultscontroller interpreted counterpart fetchedresult subscription dflat side support making sqllike query sending update result set build dflat object subscription mechanism core data based nsmanagedobjectcontextobjectsdidchange notification purpose objective simply observe latency nsmanagedobjectcontextobjectsdidchange notification compare two assuming underlying delivery individual object subscription noop three part benchmark subscribe change fetched result observe exactly one object fetched primary key subsequent transaction update object including subscribed object measuring latency saved time update delivered core data child context viewcontext set latency measured saving child context time delivered data persisted viewcontextsave called child context saved dflat side happens data persisted subscribe change fetched object subsequent transaction update object including subscribed object measuring latency saved time update delivered core data nsmanagedobjectcontextobjectsdidchange subscribed viewcontext object measure latency saving child context time notification delivered subscribe change fetched result observe around object fetched range query subsequent transaction update object rotate object fetched result maintaining object per result measurement setup core data number fetched result observation especially case represents pathological case particularly troublesome dflat fetching object disk individually would take around millisecond thus would take sqliteswift approach identifying whcih table changed simply refetch every query table could end performant although case refetching disk would definitely slower close second query object benchmark core data suffered similar problem worse extreme case mobile apps handful query subscription probably thousand object query unsubscribe change navigate away page extreme case hardly realistic going see stutter core data object updated happen table view need updated reality subscribe individual query primary key seems big nono want observe individual object subscribe individual object case show however expose messagesortinganddelivery mechanism working efficiently expected fundamentally dflat change subscription work best incremental change evaluate every changed object fetched request subscription related object design avoids trip disk every transaction also relies reasonable implementation evaluate every changed object efficiently quick test show looping object string equality evaluation swift take millisecond profile show majority time spent object retain release function call swift runtime two way improve current evaluation relies swift protocol associated type seems certain swift usage higher runtime cost others switching better linear scan either interpreted vm simply optimizing evaluation procedure would probably show improvement algorithmically improved current implementation naive way evaluate object subscribed query study database implementation know accelerated data structure helpful particularly fieldexpr query used build sorted set comparable query accelerated sorted set quite doable challenge need wrestling swift runtime behavior erratic time obvious gain possible intended delegate part c make harder hard implement use logic internally support isnull isnotnull query mean every turn need sort unknown robust correct implementation mean much unit test feel comfortable also need balance linear scan use accelerated data structure small number change linear scan could faster previous empirical study
35,Lobsters,swift,Swift programming,Store SSH keys in the Secure Enclave (macOS),https://github.com/maxgoedjen/secretive,store ssh key secure enclave macos,secretive sekey project safer storage access control notification support smart card getting started installation direct download release page using homebrew faq faq auditable build process note around code signing keychains backup transfer new machine security maxgoedjen gmailcom,secretive secretive app storing managing ssh key secure enclave inspired sekey project rewritten swift external dependency handy native management app safer storage common setup ssh key keeping disk guarded proper permission fine case super hard malicious user malware copy private key store key secure enclave impossible export design access control mac secure enclave also support strong access control like touch id authentication apple watch configure key require touch id watch authentication accessed notification secretive also notifies whenever key accessed never caught guard support smart card mac without secure enclave configure smart card yubikey use signing well getting started installation direct download download latest release release page using homebrew brew cask install secretive faq faq auditable build process build produced github action auditable build release generation process build document shas step output sha checksum build produced github action verify source code given build corresponds given release note around code signing keychains secretive us secure enclave key storage still relies keychain apis access keychain restricts read key app specifically bundle id created build secretive source make sure consistent bundle id use keychain able locate key backup transfer new machine secret secure enclave exportable able backed able transfer new machine get new mac create new set secret specific mac security discover vulnerability project please notify maxgoedjen gmailcom subject containing secretive security
36,Lobsters,swift,Swift programming,WWDC 2020,https://www.apple.com/apple-events/event-stream/,wwdc,,watchos watchos discover custom watch face website social medium share face friend also meet sleep app dream track fitness metric four new workout create healthier habit new handwashing feature see preview
37,Lobsters,swift,Swift programming,The Curious Case of Swift's Adoption of Smalltalk Keyword Syntax,https://blog.metaobject.com/2020/06/the-curious-case-of-swift-adoption-of.html,curious case swift adoption smalltalk keyword syntax,accepted multiple trailing closure trouble,really surprised learn swift recently adopted smalltalk keyword syntax accepted multiple trailing closure keyword terminated colon followed argument without surrounding brace mind boggles little course swift would nt swift nt special case special case specifically case multiple trailing closure special case trailing closure weird specialcasey enough example uiviewanimate withduration selfviewalpha completion selfviewremovefromsuperview note argument animate would seem terminate closing parenthesis actually case curly brace closing paren start closure actually also argument method socalled trailing closure little bit sympathy construct closure inside parenthesis look really really awkward course params apart sole x inside f x look awkward let quibble another thing enables method reasonably resemble control structure heard really great idea problem sometimes one closure argument stacking behind appears end functionmethod call get really really awkward ca nt tell block argument trailing closure nt get keyword well different method syntax one traditional cpascalcjava function call syntax xf already weirdish addition smalltalkobjectivec keywords inside f x syntax f arg x original trailingclosure syntax thing first closure smalltalk nonbrackted keyword syntax subsequent closure impressive scary kind way swift crescendo special case stopping short general result complexity semantics complexity behaviour ie bug complexity use ie workarounds understand proposal quite controversial heated discussion opponent proponent understand sympathize side one hand markedly better alternative hand special case special case difficult justify addition already special case beget special case beget special case course answer always smalltalk keyword syntax reasonable solution case also solves case general solution could look objectivesmalltalk us curly brace instead closure instead square bracket uiview animate selfviewalpha completion self view removefromsuperview special case every argument labeled syntax mush bracket inside parenthesis etc yes also handle userdefined control structure method nsnumber stdout println introduce special case willy nilly since keywords naturally go argument need operator different special syntax form allow binary keywords look little different instead write instead pow signature func pow x decimal int decimal really neeed go trouble defining operator swift b another special kind syntax b yes know detail detail forth course late chose smalltalk base syntax language turned objectivesmalltalk nt like gotten used via objectivec smalltalk syntax surprisingly flexible general smalltalk apis look lot like dsl without tooling overhead frustrating part stuff available wellknown least bother look andor ask instead choose thing willynilly everybody suffer consequence update guess trying get thought thing little bit could almost entire syntax language cost complexity implementation size brittleness cognitive load etc one special case special case would overall better boot
38,Lobsters,swift,Swift programming,Introducing Swift AWS Lambda Runtime,https://swift.org/blog/aws-lambda-runtime/,introducing swift aws lambda runtime,swift aws lambda runtime amazon web service lambda platform fabian fett background serverless function aws lambda runtime api work using closure sn sqs apigateway using eventlooplambdahandler swiftnio additional resource readme project status getting involved source available swift forum github issue tracker question associated thread swift forum,pleasure announce new open source project swift server ecosystem swift aws lambda runtime distributed swift package swift aws lambda runtime designed help swift developer build serverless function amazon web service lambda platform project group effort included engineer across swift community including engineer apple amazon notably fabian fett pioneered work community coauthored library open source library anyone interested contributing project easily join help make better background many modern system client component like io macos watchos application well server component client interact serverless function often easiest efficient way client application developer extend application cloud serverless function becoming increasingly popular choice running eventdriven otherwise adhoc compute task cloud power mission critical microservices data intensive workload many case serverless function allow developer easily scale control compute cost given ondemand nature using serverless function attention must given resource utilization directly impact cost system swift shine low memory footprint deterministic performance quick start time swift fantastic match serverless function architecture combine swift developer friendliness expressiveness emphasis safety solution great developer skill level scalable cost effective swift aws lambda runtime designed make building lambda function swift simple safe library implementation aws lambda runtime api us embedded asynchronous http client finetuned performance aws runtime context library provides multitier api allows building range lambda function quick simple closure complex performancesensitive event handler work using closure simplest way use aws lambda runtime pas closure example import module import awslambdaruntime example receiving responding string lambdarun context payload string callback callback success hello payload commonly payload would json modeled using codable example import module import awslambdaruntime request us codable transparent json encoding private struct request codable let name string response us codable transparent json encoding private struct response codable let message string example receiving responding json using codable lambdarun context request request callback callback success response message hello requestname since lambda function often triggered event originating aws platform sn sqs event package also includes awslambdaevents module providing implementation common trigger event type example handling sqs message import module import awslambdaruntime import awslambdaevents example receiving sqs message response void lambdarun context message sqsmessage callback callback success void addition common trigger event awslambdaevents also includes abstraction integrating lambda function apigateway aws system help exposing lambda function http endpoint import module import awslambdaruntime import awslambdaevents example receiving respoding lambdarun context request callback callback success statuscode accepted using eventlooplambdahandler modeling lambda function closure simple safe swift aws lambda runtime ensure userprovided function offloaded network processing thread thread even code becomes slow unresponsive underlying lambda process continue interact runtime engine safety come small performance penalty context switching networking processing thread case simplicity safety using closurebased api preferred complexity performanceoriented api detailed performancesensitive lambda function may choose use complex api allows user code run thread networking handler swift aws lambda runtime us swiftnio underlying networking engine mean apis based swiftnio concurrency primitive like eventloop eventloopfuture example handling sn message import module import awslambdaruntime import awslambdaevents import nio lambda handler conforms eventlooplambdahandler struct handler eventlooplambdahandler typealias snsmessage request type typealias void response type void example receiving sn message response void func handle context lambdacontext payload eventloopfuture contexteventloopmakesucceededfuture void lambdarun handler beyond cognitive complexity using eventloopfuture based apis note apis used extra care eventlooplambdahandler execute userprovided function eventloop thread library networking engine putting requirement implementation never block underlying eventloop word lambda code never use blocking api call might prevent library interacting lambda platform additional resource additional documentation example found project readme project status beginning communitydriven opensource project actively seeking contribution core api considered stable api may still evolve get closer version several area need additional attention including limited performance tuning additional trigger event additional documentation best practice additional example getting involved interested swift aws lambda runtime come get involved source available encourage contribution open source community feedback question would like discus project please feel free chat swift forum would like report bug please use github issue tracker look forward working helping move industry forward better safer programming future question please feel free post question post associated thread swift forum
39,Lobsters,swift,Swift programming,Diffing Explorations,https://github.com/numist/Diffing-Explorations,diffing exploration,diffing exploration article heckel ngram membership testing round diffing ordered set work queue described geometrically suggestion membership testing round diffing ngram trading accuracy performance lcs naming thing club appendix data theory meet reality documentsperformance analysismd,diffing exploration swift project playground literally experimenting different approach diffing algorithm pursuit performance minimal compromise initial experiment organized around two observation use fast membership testing diffing underexplored footnote article heckel mention diffing ngram instead element nothing could find literature developed idea example threeline block could chosen basic unit exclusive hashcodes line etc forming index hash table since index line j computed two exclusive or index line j hashcode line time take perform algorithm kline block independent k membership testing round membership testing already proven extremely effective mechanism diffing ordered set resisted generalization number element comparison reduced element exist one two collection shared element suffer extra overhead furthermore way myers algorithm track work cause adaptation algorithm trend towards multiple nd regardless realization meant reimagining dynamic programming solution queue work work queue simplified round myers maintains list v length element position represents edit path made progress insert remove improving performance requires reducing number edit path explored specialized worktracking data structure needed assuming obvious edits consumed greedily membership testing cost ignored like match higher level problem solved work queue described geometrically selecting set point none x value le x value point visually look like keeping solid point collection solved sorting point descending x inserting quadtree drop insertion southwest thanks ken ferry suggestion membership testing round predicted membership testing dramatically improves performance diffing collection substantially nonoverlapping alphabet unfortunately offer little improvement across common case often resulting minor net regression membership testing required work queue function correctly keeping diffing ngram human read book chapter chapter paragraph paragraph sentence sentence word word letter data structure scale also include hierarchy structure sqlite database file contains page page contain cell cell contain record encoding number column value similarly modification data commonly operate high level chapter rearranged sentence edited quite uncommon two book differ large random assortment individual character diff database byte byte look bigger picture diffing ngrams promise improvement similar diffing higherlevel token without requiring familiarity internal structure data select appropriate size think binary sequence representing literal number space required address would n len highentropy collection binary one n gram exist entire collection entropy single collection nt actually control good since content book database highly performance derive set ngrams unique collection using ngrams size log base alphabetcount n work pretty well practice learned elementlevel membership testing identifying element exist one collection secret faster allowing algorithm selectively pursue path obvious true ngrams diffing collection reverse myers worst case run linear time diffing collection shuffled version myers pain point especially large alphabet run nearlinear time overall ngram diffing dramatic improvement among input suffer poor performance myers algorithm difficult prove efficiency new algorithm worst case significantly improved myers input myers algorithm already fairly competent unfortunately number previously fast workload showing performance regression stage trading accuracy performance element membership testing affect minimality resulting diff ngram diffing since already compromising lcs name speed else adjust knob one possibility come ordered set diffing algorithm high level ordered set diffing look like func difference e orderedset e b orderedset e var x x acount bcount x b match x else switch bindex x aindex b case none remove x x case none insert b case let bioax let aioby bioax algorithm progressed beyond index x b remove x x else aioby x algorithm progressed beyond index b insert b else bioax aioby x x away b b remove x x else b away x b insert b algorithm also produce minimal diff tradeoff happens last two block offered choice always seek nearest matching opportunity applying weaker variant generalized diffing algorithm close performance gap common workload previously slower run time faster myers eager pursuit nearer match take advantage intersection two collection ngrams complement ngram membership testing use symmetric difference entire union providing benefit algorithm use offer performance boost reducing cost ngram membership testing perhaps counterintuitively eager pursuit match reduced ngram size also contribute algorithm producing smaller diffs naming thing enough performance improvement call referring algorithm club since speed come membership testing club care lot membership appendix data unit test project include suite dedicated performance analysis club initial overhead shared myers test show significant algorithmic improvement n exhibiting benefit smaller workload well interesting performance measurement test comparison clubmyers change clubmyers diffing two source file line common v canonical lorem ipsum character common v canonical lorem ipsum word lorem ipsum v reverse character lorem ipsum v character uuids v reverse uuids v randomized two randomly generated binary string n randomly generated binary string v reverse n illustrated random binary string test club struggle diffing randomized data small alphabet element match far common lack higherlevel pattern would predict circumstance club tends produce significantly larger diffs maintaining performance tradeoff using ngrams like human perception two randomlygenerated buffer little overlap viewed higher level practical purpose consider fact myers identifies many match two completely unrelated piece data performance bug feature theory meet reality performance doc described term element comparison consideration given element hashing cost maintaining work queue real world show despite club order magnitude reduction active edit path element comparison myers still faster workload complete dozen m le accounting overhead club internal structure put disadvantage term wall clock time per element comparison said implementation measure significantly faster larger workload probably used instead myers whenever n preferably compensating shared prefixsuffix complete investigation realworld performance club diffing found documentsperformance analysismd
40,Lobsters,swift,Swift programming,Why NetNewsWire Is Fast,https://inessential.com/2020/05/18/why_netnewswire_is_fast,netnewswire fast,fast r atom parsing rsparser framework conditional get content hash conditional get serial queue avoid singlechangeplusnotifications trap coalescing custom database fmdb explain query plan full text search extension set dictionary profiler stack view auto layout table cell view caching string size caching text measurement summary,netnewswire fast performance one core value fast part definition app suspect hard way take month two speed thing time time app always √¢ best kind heading toward satisfactory never arrive best general advice give make sure performance part foundation app make sure part every decision every day make sure word performance topping √¢ pizza specific reason netnewswire fast netnewswire like many apps day √¢ basically fancy database browser data come web apply apps item particular order fast r atom parsing painful way parse xml sax parser also get best performance use least memory use sax rsparser framework imac parsing local copy past instance daring fireball atom feed √¢ relatively large size √¢ happens second fast another thing well run parser background serial queue since parsing selfcontained operation √¢ input data get back object √¢ threading issue conditional get content hash parser fast also best skip parsing entirely two way use conditional get give server chance respond modified content feed changed since last time asked skip parsing case obviously also create hash raw feed content whenever download feed hash match hash last time know content modified skip parsing serial queue parser code run serial queue operation made selfcontained √¢ thing call back main thread without threading issue √¢ use serial queue chance could noticeably block main thread key course making sure operation fact selfcontained trigger kvo kind notification work simple example background thing besides feed parsing creating thumbnail feed icon avoid singlechangeplusnotifications trap example trap easy fall say user marking article read calling articleread true trigger via kvo notification something thing like database update user interface update unread count updating undo stack maintenance etc say marking article current timeline read could call articleread true article √¢ article trigger whole bunch work slow specific apis action like apis expect collection object api mark single article read used mark article read way database updated unread count updated push one action undo stack coalescing also try coalesce kind work instance refresh app could recalculate unread count every single change √¢ could mean ton work instead coalesce √¢ make recalculating unread count happens often every second instance make huge difference custom database app fancy database browser whole thing lost core data great use sqlite directly via fmdb give u ability treat database database optimize schema index query way outside scope core data remember core data manages graph object database use various tool √¢ explain query plan √¢ make sure made fetching counting updating fast efficient caching run database serial queue block main thread use structs instead class much possible model object sure matter performance happen like structs make searching fast use full text search extension could probably write article going detail database work anything else netnewswire fast set dictionary often need look thing √¢ feed given feedid instance √¢ use dictionary frequently quite common mac io programming suspect le common use set set default collection type √¢ never want check see array contains something never want deal duplicate object performancekillers use array api requires array need ordered collection usually ui profiler instead guessing slow use profiler instrument find exactly slow profiler often surprising one thing found expect hashing object one point pretty slow use set quite lot whole lot hashing going using synthesized equality hashability object lot string property √¢ turn hashing string pretty darn slow instead wrote hash function object many case could hash one string property √¢ article id instance √¢ instead five ten stack view experience stack view tell excruciatingly slow allowed auto layout table cell view people praise timelinebased app like netnewswire often say something like scroll like butter imagine butter actually scrolling well yes get butter smooth use auto layout plenty √¢ cool like √¢ allow inside table cell view instead write layout code actually difficult maybe little tedious laying table cell view pretty easy really figure optimized manual layout code always going faster constraint solver give u edge smooth scrolling √¢ one place otherwise good app fall face layout code need view article object width run time use code determine height row without run auto layout pas caching string size text measurement slow √¢ slow enough make even manual layout slow netnewswire smart thing caching text measurement example know given string tall available width available width tell without measuring tall available width summary silver bullet making app fast mean bunch different thing √¢ mean paying attention performance continuously
41,Lobsters,swift,Swift programming,Gryphon ‚Äì The Swift to Kotlin translator,https://github.com/vinivendra/Gryphon,gryphon swift kotlin translator,swift kotlin translator riskfree editing needed xcode integration custommade status new issue installing macos linux homebrew homebrew mint mint gitpod gitpod building source docker docker guide tutorial translate command line program translate new io app android add gryphon existing app using collection using translation comment using template frequently asked question gryphon compile run translated code need fix first able translate compile run supported code without need posttranslation edits able understand translated code understand input swift code also able understand translated kotlin code file bug translate anything written swift currently capable translating many main feature one might expect gryphon help translate existing io app yes need adaptation transpilers mvp mvc adding gryphon existing app use gryphon translate nonios app yes ever support translating kotlin code swift language probably help open new issue contributor guide good first issue first timer open issue code conduct,swift kotlin translator gryphon program translates swift code kotlin code created enable mobile app developer share part io app codebase android riskfree stop using gryphon whenever want still able read understand kotlin code even computergenerated part editing needed translated kotlin file work swift file came xcode integration translate io code android compile android app see kotlin error warning swift line originated without leaving xcode custommade use special comment template customize kotlin translation use platformspecific feature want even translated source file status gryphon preview mean main system idea already implemented instance translating codebase however new user might still find new bug fixed case feel free report new issue github installing gryphon support macos linux install homebrew use homebrew install gryphon dependency automatically brew install vinivendragryphongryphon mint use mint install gryphon using swift package manager mint install vinivendragryphon gitpod try gitpod downloading building source clone repo run installation script git clone http githubcomvinivendragryphongit cd gryphon installsh docker install docker container git clone http githubcomvinivendragryphongit cd gryphon docker build gryphon docker run rm privileged v absolutepathtocurrentdirectory appgryphon gryphon installsh guide check tutorial get started cover basic information needed begin using gryphon whether want translate command line program translate new io app android add gryphon existing app also advanced guide using collection using translation comment using template frequently asked question gryphon gryphon command line application translate swift code kotlin code especially designed enable app developer translate platformindependent part io apps code use android apps compile run translated code need fix first gryphon output code meant behave like input code created still possible technically generate kotlin code nt compile instance try translate unsupported swift feature bug rule able translate compile run supported code without need posttranslation edits able understand translated code one gryphon main goal make sure translated code understood human being rule understand input swift code also able understand translated kotlin code nt feel free file bug done within realistic constraint priority translated code behave correctly instance gryphon attempt find reasonably understandable kotlin middle ground somewhere machinecodelike kotlin perfectly idiomatic kotlin translate anything written swift gryphon support swift feature constantly evolving currently capable translating many main feature one might expect class structs enums closure extension protocol etc enough currently translates around codebase platformspecific file swift feature waiting implemented others ca nt translated kotlin may never supported gryphon help translate existing io app yes need adaptation though probably le average multiplatform framework depends application similar app architecture android counterpart often code us swift feature unsupported gryphon etc worth noting like transpilers app development gryphon best suited translating platformindependent logic code currently support translating call uikit instance telling happen someday recommended start translating platformindependent part code adding new file incrementally might helo use architecture clear separation ui code logic code like mvp mvc separate code translated information check adding gryphon existing app use gryphon translate nonios app yes gryphon main focus iostoandroid support primarily swift kotlin translator nt require anything iosspecific run use linux translate command line tool example even gryphon source code translated commandline tool nothing iosrelated ever support translating kotlin code swift language probably challenge involved translating swift code kotlin specific two language translating kotlin swift would require new frontend kotlin new backend swift allnew logic middle turn one basically whole new gryphon go combination language help thanks offer want suggest way improve gryphon feel free open new issue bug report feature request welcome encouraged would like contribute directly first check contributor guide learn set environment looking inspiration take look good first issue new gryphon beginnerfriendly first timer new open source already know want open issue let talk going contribute probably read code conduct
42,Lobsters,swift,Swift programming,Apple to host virtual Worldwide Developers Conference beginning June 22,https://www.apple.com/newsroom/2020/05/apple-to-host-virtual-worldwide-developers-conference-beginning-june-22/,apple host virtual worldwide developer conference beginning june,apple developer app apple developer website,cupertino california apple today announced host annual worldwide developer conference virtually beginning june apple developer app apple developer website free developer company also announced swift student challenge opportunity student developer showcase love coding creating swift playground year opportunity million creative innovative developer around world get early access future io ipados macos tvos watchos learn apple engineer work build app experience enrich life apple customer around globe biggest yet bringing together global developer community million unprecedented way week june learn future apple platform said phil schiller apple senior vice president worldwide marketing wait meet online june global developer community share new tool working help create even incredible apps service look forward sharing detail everyone get closer exciting event student integral part apple developer community last year wwdc saw attendance student developer spanning different country said craig federighi apple senior vice president software engineering look forward although gathering virtual year want recognize celebrate creative contribution young developer around world wait see next generation innovative thinker turn idea reality swift student challenge swift playground revolutionary app ipad mac make learning swift programming language interactive fun pm pdt may student developer world submit swift student challenge creating interactive scene swift playground experienced within three minute winner receive exclusive jacket pin set information visit developer encouraged download apple developer app additional program information including keynote platform state union detail session lab schedule shared june information also made available apple developer website email app store country region world safest vibrant app marketplace half billion people visiting week best place user discover new apps allows developer size distribute apps customer around world app store feature many way developer build business since launch developer creating innovative apps influence culture change life apple revolutionized personal technology introduction macintosh today apple lead world innovation iphone ipad mac apple watch apple tv apple five software platform io ipados macos watchos tvos provide seamless experience across apple device empower people breakthrough service including app store apple music apple pay icloud apple employee dedicated making best product earth leaving world better found
43,Lobsters,swift,Swift programming,The Composable Architecture,https://github.com/pointfreeco/swift-composable-architecture,composable architecture,composable architecture composable architecture state management composition side effect testing ergonomics learn pointfree brandon williams stephen celis part part part part example basic usage state action environment reducer store testing example debugging supplementary library faq requirement reactiveswift rxswift installation file swift package add package http githubcompointfreecoswiftcomposablearchitecture composablearchitecture composablearchitecture tictactoe tictactoecommon documentation help swift forum credit thanks pointfree chris liscio shai mishali combinecommunity library elm redux license license,composable architecture composable architecture tca short library building application consistent understandable way composition testing ergonomics mind used swiftui uikit apple platform io macos tvos watchos composable architecture library provides core tool used build application varying purpose complexity provides compelling story follow solve many problem encounter daytoday building application state management manage state application using simple value type share state across many screen mutation one screen immediately observed another screen composition break large feature smaller component extracted isolated module easily glued back together form feature side effect let certain part application talk outside world testable understandable way possible testing test feature built architecture also write integration test feature composed many part write endtoend test understand side effect influence application allows make strong guarantee business logic running way expect ergonomics accomplish simple api concept moving part possible learn composable architecture designed course many episode pointfree video series exploring functional programming swift language hosted brandon williams stephen celis watch episode well dedicated multipart tour architecture scratch part part part part example repo come lot example demonstrate solve common complex problem composable architecture check directory see including basic usage build feature using composable architecture define type value model domain state type describes data feature need perform logic render ui action type represents action happen feature user action notification event source environment type hold dependency feature need api client analytics client etc reducer function describes evolve current state app next state given action reducer also responsible returning effect run api request done returning effect value store runtime actually drive feature send user action store store run reducer effect observe state change store update ui benefit instantly unlock testability feature able break large complex feature smaller domain glued together basic example consider ui show number along button increment decrement number make thing interesting suppose also button tapped make api request fetch random fact number display fact alert state feature would consist integer current count well optional string represents title alert want show optional nil represents showing alert struct appstate equatable var count var numberfactalert string next action feature obvious action tapping decrement button increment button fact button also slightly nonobvious one action user dismissing alert action occurs receive response fact api request enum appaction equatable case factalertdismissed case decrementbuttontapped case incrementbuttontapped case numberfactbuttontapped case numberfactresponse result string apierror struct apierror error equatable next model environment dependency feature need job particular fetch number fact need construct effect value encapsulates network request dependency function int effect string apierror string represents response request effect typically work background thread case urlsession need way receive effect value main queue via main queue scheduler dependency important control write test must use anyscheduler use live dispatchqueue production test scheduler test struct appenvironment var mainqueue anyschedulerof dispatchqueue var numberfact int effect string apierror next implement reducer implement logic domain describes change current state next state describes effect need executed action nt need execute effect return none represent let appreducer reducer appstate appaction appenvironment state action environment switch action case factalertdismissed statenumberfactalert nil return none case decrementbuttontapped statecount return none case incrementbuttontapped statecount return none case numberfactbuttontapped return environmentnumberfact statecount receive environmentmainqueue catchtoeffect map appactionnumberfactresponse case let numberfactresponse success fact statenumberfactalert fact return none case numberfactresponse failure statenumberfactalert could load number fact return none finally define view display feature hold onto store appstate appaction observe change state rerender send user action store state change must also introduce struct wrapper around fact alert make identifiable alert view modifier requires struct appview view let store store appstate appaction var body view withviewstore selfstore viewstore vstack hstack button viewstoresend decrementbuttontapped text viewstorecount button viewstoresend incrementbuttontapped button number fact viewstoresend numberfactbuttontapped alert item viewstorebinding get factalertinit title send factalertdismissed content alert title text struct factalert identifiable var title string var id string selftitle important note able implement entire feature without real live effect hand important mean feature built isolation without building dependency help compile time also straightforward uikit controller driven store subscribe store viewdidload order update ui show alert code bit longer swiftui version collapsed click expand class appviewcontroller uiviewcontroller let viewstore viewstore appstate appaction var cancellables set anycancellable init store store appstate appaction selfviewstore viewstore store superinit nibname nil bundle nil required init coder nscoder fatalerror init coder implemented override func viewdidload superviewdidload let countlabel uilabel let incrementbutton uibutton let decrementbutton uibutton let factbutton uibutton omitted add subviews set constraint selfviewstorepublisher map assign text countlabel store selfcancellables selfviewstorepublishernumberfactalert sink weak self numberfactalert let alertcontroller uialertcontroller title numberfactalert message nil preferredstyle alert alertcontrolleraddaction uialertaction title ok style default handler self viewstoresend factalertdismissed self present alertcontroller animated true completion nil store selfcancellables objc private func incrementbuttontapped selfviewstoresend incrementbuttontapped objc private func decrementbuttontapped selfviewstoresend decrementbuttontapped objc private func factbuttontapped selfviewstoresend numberfactbuttontapped ready display view example scene delegate construct store moment need supply dependency use effect immediately return mocked string let appview appview store store initialstate appstate reducer appreducer environment appenvironment mainqueue dispatchqueuemainerasetoanyscheduler numberfact number effect value number good number brent enough get something screen play around definitely step vanilla swiftui way benefit give u consistent manner apply state mutation instead scattering logic observable object various action closure ui component also give u concise way expressing side effect immediately test logic including effect without much additional work testing test first create teststore information would create regular store except time supply testfriendly dependency particular use test scheduler instead live dispatchqueuemain scheduler allows u control work executed nt artificially wait queue catch let scheduler dispatchqueuetestscheduler let store teststore initialstate appstate reducer appreducer environment appenvironment mainqueue schedulererasetoanyscheduler numberfact number effect value number good number brent test store created use make assertion entire user flow step step way need prove state changed expect step cause effect executed feed data back store must assert action received properly test user increment decrement count ask number fact response effect trigger alert shown dismissing alert cause alert go away storeassert test tapping incrementdecrement button change count send incrementbuttontapped send decrementbuttontapped test tapping fact button cause u receive response effect note advance scheduler used receive reducer send numberfactbuttontapped scheduleradvance receive numberfactresponse success good number brent good number brent finally dismiss alert send factalertdismissed nil basic building testing feature composable architecture lot thing explored composition modularity adaptability complex effect example directory bunch project explore see advanced usage debugging composable architecture come number tool aid debugging reducerdebug enhances reducer debugprinting describes every action reducer receives every mutation make state received action appactiontodocheckboxtapped index appstate todos todo iscomplete false iscomplete true description milk id todo iscomplete false description egg id todo iscomplete true description hand soap id reducersignpost instrument reducer signpost gain insight long action take execute effect running supplementary library one important principle composable architecture side effect never performed directly instead wrapped effect type returned reducer store later performs effect crucial simplifying data flow application gaining testability full endtoend cycle user action effect execution however also mean many library sdks interact daily basis need retrofitted little friendly composable architecture style like ease pain using apple popular framework providing wrapper library expose functionality way play nicely library far support composablecorelocation wrapper around cllocationmanager make easy use reducer easy write test logic interacts cllocationmanager functionality composablecoremotion wrapper around cmmotionmanager make easy use reducer easy write test logic interacts cmmotionmanager functionality come soon keep eye interested contributing wrapper library framework yet covered feel free open issue expressing interest discus path forward faq composable architecture compare elm redux others expand see answer composable architecture tca built foundation idea popularized elm architecture tea redux made feel home swift language apple platform way tca little opinionated library example redux prescriptive one executes side effect tca requires side effect modeled effect type returned reducer way tca little lax library example elm control kind effect created via cmd type tca allows escape hatch kind effect since effect conforms combine publisher protocol certain thing tca prioritizes highly point focus redux elm library example composition important aspect tca process breaking large feature smaller unit glued together accomplished pullback combine operator reducer aid handling complex feature well modularization betterisolated code base improved compile time nt store threadsafe nt send queued nt send run main thread expand see answer action sent store reducer run current state process done multiple thread possible work around use queue sends implementation introduces new complication done simply dispatchqueuemainasync incur thread hop even already main thread lead unexpected behavior uikit swiftui sometimes required work synchronously animation block possible create scheduler performs work immediately main thread otherwise us dispatchqueuemainasync eg see reactiveswift uischeduler introduces lot complexity probably adopted without good reason end day require store used much way interact apple apis urlsession delivers result background thread thus making responsible dispatching back main thread composable architecture make responsible making sure send action main thread using effect may deliver output nonmain thread must explicitly perform receive order force back main thread approach make fewest number assumption effect created transformed prevents unnecessary thread hop redispatching also provides testing benefit effect responsible scheduling test effect would run synchronously immediately would able test multiple inflight effect interleave affect state application however leaving scheduling store get test aspect effect desire ignore prefer flexibility however still fan choice never fear composable architecture flexible enough allow introduce functionality desire possible create higherorder reducer force effect deliver output main thread regardless effect work extension reducer func receive scheduler scheduler self self state action environment self state action environment receive scheduler erasetoeffect would probably still want something like uischeduler nt needlessly perform thread hop requirement composable architecture depends combine framework requires minimum deployment target io macos mac catalyst tvos watchos application must support older os fork reactiveswift rxswift adopt installation add composablearchitecture xcode project adding package dependency file menu select swift package add package enter http githubcompointfreecoswiftcomposablearchitecture package repository url text field depending project structured single application target need access library add composablearchitecture directly application want use library multiple target must create shared framework depends composablearchitecture depend framework target example check tictactoe demo application split lot feature module consumes static library fashion using tictactoecommon framework documentation latest documentation composable architecture apis available help want discus composable architecture question use solve particular problem ask around swift forum credit thanks following people gave feedback library early stage helped make library today paul colton kaan dedeoglu matt diephouse josef dole≈æal eimantas matthew johnson george kaimakas nikita leonov christopher liscio jeffrey macko alejandro martinez shai mishali willis plummer simonpierre roy justin price sven schmidt kyle sherman petr ≈°√≠ma jasdev singh maxim smirnov ryan stone daniel hollis tavares pointfree subscriber special thanks chris liscio helped u work many strange swiftui quirk helped refine final api thanks shai mishali combinecommunity project took implementation publisherscreate use effect help bridge delegate callbackbased apis making much easier interface party framework library composable architecture built foundation idea started library particular elm redux also many architecture library swift io community one set priority tradeoff differ composable architecture license library released mit license see license detail
44,Lobsters,swift,Swift programming,SwiftPlayground-Pharo: Interact with Swift on Pharo,https://github.com/brackendev/SwiftPlayground-Pharo,swiftplaygroundpharo interact swift pharo,swift xcode io december march instability simplest swiftplaygroundpharo interact swift pharo asts pharo table content installation usage swift playground todo ast inline swift api reference swift output abstract syntax tree ast string class extension print print string class extension ast pharo object swift string serialization array class extension boolean class extension dictionary class extension string class extension swift response string pharo object deserialization todo import foundation asynchronous swift code dispatchmain exit urlrequest todo acknowledgement author brackendev license,never ever praise xcode playground bound crash second later swift xcode yoad yoadapps december get apple requires student submit playground experienced minute apply wwdc reviewer spend remaining minute trying get xcode run successfully patrick balestra balestrapatrick march xcode swift playground instability running even simplest swift code swift code runner implemented pharo brings benefit greatly increased stability trying short piece code working swift output powerful pharo environment work progress swiftplaygroundpharo interact swift pharo run swift pharo swift playground interoperate pharo inspect output swift asts pharo reference platform requires macos tested gnulinux tested ubuntu bit swift tool see installation table content installation install setup swift tool environment playground evaluate metacello new repository github brackendevswiftplaygroundpharo baseline swiftplayground onconflict ex ex useincoming onupgrade ex ex useincoming ondowngrade ex ex useloaded ignoreimage load usage swift playground write compile run inspect output swift code via swift playground accessible via tool menu important contextual menu item compile run selected swift code inspect compile run selected swift code inspect print compile run selected swift code print todo additionally contextual menu item inspect ast return swift ast selected swift code example print hello world return importdecl range foundation toplevelcodedecl range bracestmt range callexpr type null arglabels unresolveddeclrefexpr type null nameprint functionrefunapplied parenexpr type null stringliteralexpr type null value hello world builtininitializer null initializer null inline swift outside swift playground swift code executed within pharo code using runswift string class extension example api reference swift output abstract syntax tree pharo class extension method used compile run view ast swift code string class extension runswift return string representation swift object swift code use swift print function within swift code output pharo example swiftstring five boxing wizard jump quickly aslowercase asswiftstring let lowercased alphabet set swiftstring abcdefghijklmnopqrstuvwxyz print alphabetcontains lowercasedcontains runswift return true tip simple swift code require swift print function example array abcde runswift return b c e swiftarray asswiftarray swiftarray map reduce runswift return string class extension swiftast return swift ast swift code pharo object swift string serialization pharo class extension method used quick helper serialize pharo object swift psuedoobjects string representation swift object example hello world asswiftstring return hello world code notice usage sentence asswiftstring swiftcode string concatenation sentence five boxing wizard jump quickly aslowercase asswiftstring swiftcode determine pangram let sentenceset alphabet set sentence abcdefghijklmnopqrstuvwxyz print alphabetcontains sentencesetcontains swiftcode runswift return true following extension method implemented example example also availabe via spexamples object array class extension asswiftarray return string representation swift object currently handle one depth booleans number string true false asswiftarray return false boolean class extension asswiftboolean return string representation swift object true asswiftboolean return true dictionary class extension asswiftdictionary return string representation swift object currently handle one depth booleans number string dictionary newfrom b true false c e asswiftdictionary return b true e false c string class extension asswiftstring return string representation swift object hello world asswiftstring return hello world swift response string pharo object deserialization todo import apple foundation framework imported swift code automatically use apple framework swift code use swift import directive needed asynchronous swift code prevent asynchronous swift code exiting early use swift dispatchmain function never return use swift exit function exit appropriate example swift code swift urlrequest network request session started dispatchmain called program prematurely exit session response closure exit called exit program let sessionconfig urlsessionconfigurationdefault let session urlsession configuration sessionconfig delegate nil delegatequeue nil var url url string http var request urlrequest url url requesthttpmethod get let task sessiondatatask request completionhandler data response error let uerror error print uerrorlocalizeddescription return error string else let udata data let string string data udata encoding print string return response string exit exit asynchronous work complete taskresume sessionfinishtasksandinvalidate dispatchmain prevent premature exit todo acknowledgement project make use following thirdparty library author brackendev license swiftplaygroundpharo released mit license see license file info
45,Lobsters,swift,Swift programming,"Somewhat Less Lethargic JSON Support for iOS/macOS, Part 1: The Status Quo",https://blog.metaobject.com/2020/04/somewhat-less-lethargic-json-support.html,somewhat le lethargic json support iosmacos part status quo,simdjson environmental assumption constraint nsjsonserialization nsjsonserialization swift json coding third party json parser jason stjson zippyjson flightschool max mason max superconvenient mpwmasonparser,finished watching daniel lemire talk current iteration simdjson json parser clock following daniel work time ca nt really recommend highly enough video reminded recent twitter conversation offered contribute fast swiftcompatible json parser loosely based max fast convenient xml parser due various factor control ca nt really offer anything fast compared simdjson manage something quite bit le lethargic currently offer apple particularly swift world environmental assumption constraint first assumption going operate apple ecosystem simplicity sake going use macos next assume want parse r domain object processing within application structs difference important context going use following class mix integer string instance variable swift objc class testclass nsobject codable let hi int let int let comment string objectivec interface testclass nsobject property nonatomic long hi property nonatomic strong nsstring comment end make easy measure going use one million object going initialise increasing integer constant string comment yield json file different serialisation method correctly parsed parser tested obviously simple class file structure think give reasonable approximation realworld use first thing check quickly create object straight code without parsing give u good upper bound performance achieve parsing domain object define count void createobjects nsmutablearray objresult nsmutablearray arraywithcapacity int count testclass cur testclass new curhii curtherei curcomment comment objresult addobject cur nslog created object code wo parsing ld object objresult objresult count quad core mbp run second although nt actually parsing would mean creating object would result parsingg json file would yield rate mb wait second almost slower daniel lemire parser one actually par json creating object would result parsing without actual parsing one many unintuitive aspect parsing performance actual lowlevel characterlevel parsing generally least important part overall performance unless something crazy like use nsscanner nt use nsscanner please one reason unintuitive learned performance dominated innermost loop character level processing innermost loop magnitude performance difference inner outer loop differ le amount stuff happennnig outer loop dominate nsjsonserialization apple json story much revolves around nsjsonserialization much like rest serialization story revolves around similar nspropertylistserialization class reasonable quick implementation turning mb json file nsarrray nsdictionary instance second called objectivec rate mb swift take second mb course get u property list array dicts case domain object actually want read book mention book oh think know type dictonary representation fairly expensive expensive create expensive term memory consumption expensive access creating dictionary equivalent object created take second around time creating equivalent object rate mb relative mb json file void createdicts nsmutablearray objresult nsmutablearray arraywithcapacity int count nsmutabledictionary cur nsmutabledictionary dictionary cur hi cur cur comment comment objresult addobject cur nslog created dicts code wo parsing ld object objresult objresult count creating dict single step using dictionary literal significantly faster creating immutable copy mutable dict done filling brings time half second getting dicts object typically straightforward tedious fetch entry dictionary call corresponding setter value thus retrieved dictionary nt production code trying get bound possible easier way use key value coding key found dictionary combined code parsing creating object shown void decodensjsonandkvc nsdata json nsarray key hi comment nsarray plistresult nsjsonserialization jsonobjectwithdata json error nil nsmutablearray objresult nsmutablearray arraywithcapacity nsdictionary plistresult testclass cur testclass new nsstring key key cur setvalue key forkey key objresult addobject cur nslog nsjsonkvc ld object objresult objresult count note kvc slow really slow orderofmagnitude slower sending message kind slow significant impact total time come total second including parsing object creation shy mb swift json coding first couple release swift json support apple limited wrapped nsjsonserialization slight performance penalty already noted write book see sidebar many json parser published none notable exception big nerd ranch freddy actual par transformed array dictionary returned nsjsonserialization swift object performance abysmal around overhead addition basic nsjsonserialization parse apple swift codable promised solve convenience front certainly great job func readjsoncoder data data testclass nslog swift decoding let coderjsondecoder let arraytry coderdecode testclass self data return array forcing test code please nt production ala performance still great second mb slower basic nsjsonserialization parse slower slow simple complete parse via nsjsonserialization kvc however significantly faster previous thirdparty json swift object parser tune old first mark discount sale trick applied performance except relative number larger third party json parser looked little third party json parser particularly jason stjson zippyjson sttjson make claim speed manages clock second mb jason bill faster json parser compare swiftyjson reasonably well second mb however parse internal representation domain object structs compared nsjsonserialization point disappoint probably interesting zippyjson us daniel lemire simdjson codable compatible ala could nt get zippyjson compile nt number keep trying claim around faster apple jsondecoder would make parser least ballpark trivial nsjsonserialization kvc method showed another interesting tidbit come zippyjson readme heading much faster apple version first convert json nsdictionary using nsjsonserialization afterwards make thing swifty creation intermediate dictionary expensive true first converting intermediate representation slow particularly one heavyweight property list however primary reason creating expensive representation take total running time codable apparently talking speaking slowly corroborate also tried flightschool implementation codable messagepack obviously use nsjsonserialization make performance claim take second decode object used json file course different file mb size normalized mb file would mb max mason leave u considering simdjs show theoretically possible json parsing good place put mildly gb v mb apple jsondecoder several time slower nsjsonserialization nt exactly speed daemon around slower pure object creation comically bad might another way putting least entertained contribute well xml result wasis max messaging api xml parser superfast though simd also present apis make superconvenient also superfast go directly xml objectrepresentation either tree stream domain object using mostly constant memory mentioned book yeah book gory detail anyway xml sorta faded question whether technique would work json parser answer yes roughly though added complexity le convenience json le informative file format xml open closetags really give good headsup coming goal produce domain object close theoretical maximum slightly mb possible time making parser convenient use close swift codable convenience wo nt support codable per default overhead seem high zippyjson suggests adapter would nt hard parser mpwmasonparser nt done yet initial state par json dictionary second mb slightly slower nsjsonserialization bit way go come join little parsing performance journey
46,Lobsters,swift,Swift programming,Swift Is Not Functional (2014),https://robnapier.net/swift-is-not-functional,swift functional,really fantastic io mac apps frp,ever since swift came keep seeing weird comment swift functional programming language puzzled bit anyone would say since really little functional swift pretty traditional object oriented language focus generic programming conjecture people using feature list determine language paradigm reason use word paradigm paradigm n worldview underlying theory methodology particular scientific subject worldview yeah capture language paradigm lot like musical genre messy thing argue draw line go pure fusion classical guitar heavy metal different genre even use guitar friend say broad taste music listen everything jimmy buffet metallica love every kind music many programmer way ever known procedural object oriented paradigm think basic java different language get encounter new language first question syntax question think problem going say lot paradigm like musical genre many opinion way categorizing thing way way way useful others saying taxonomy group together swift haskell map useful grouping wangga opera rock together vocalist procedural imperative programming primarily concerned decomposing problem sequence action usual structure step one repeat step two something true step three paradigm common popular language many programmer think mean program one way decompose problem faced problem procedural question step need perform solve objectoriented programming primarily concerned decomposing problem collection selfcontained object property method manipulate property usual structure hierarchy class instance object inherit property method faced problem oop question kind object need work together solve way thinking common popular programming language work well together procedural programming u since first machine language even early automated weaving machine working procedural paradigm oop dominated programming since ninety dominant paradigm long dominated c program long many programmer think given assume ancient language like fortran lack object even fortran object oop one way thinking problem functional programming different way thinking problem functional programming primarily concerned decomposing problem function accept return immutable value usual structure collection function transform value value various way combine function avoids mutable state require evaluation function occur particular order functional programming treat program math problem rather series operation faced problem functional question kind value need transformed way solve first started playing swift first thing looked maybe handled class protocol call method declare assign variable define property version loop oop procedural tool right think would readily available easy use needed know syntax heard people describing swift functional pulled first swift workspace immediately looked swift used flatmap looked split list head tail looked foldleft equivalent immutable collection swift seem special handling language functional language loop procedural showed new language said procedural object oriented implement using goto class inheritance might feature choice functional language split list first first element trivially time strange functional language yes swift reduce map yes firstclass function pattern matching yes feature also commonly found functional language syntax even feel similar scala soon realized associated value case class everything made sense think like functional language encourage use let wherever possible always going mix let var swift program example apple gave included variable almost never use mutable variable work scala haskell mutable variable considered advanced feature even show intro book brings u real difference swift fundamentally work proceduraloop paradigm whole language built around tool available let jump functional style without full power functional programming useful haskell fundamentally work functional paradigm tool available monad let jump procedural style without full power procedural programming useful might say rob literal swift multiparadigm language including oop functional nonsense scala multiparadigm oopfunctional language approach problem scala break object work primarily immutable data structure oopfunctional look like even bother provide immutable list swift never add fundamental way swift work swift multiparadigm oopfunctional oopgeneric generic programming primarily concerned general purpose algorithm applied arbitrary type similarity functional programming certainly language functional generic generic programming care algorithm function thing take return immutable value process thing mutate state swift generic array int could implement kind structure nongeneric language swift generic find generic programming core library consider function like advance return result moving start n position model randomaccessindex executes otherwise executes ab n model bidirectionalindex requires n nonnegative func advance forwardindex start n tdistancetype kind function expect generic language encapsulates algorithm work anything implement forwardindex method instance forwardindex inherit must implement seems subtle actually significantly different way thinking see lot swift standard library one would expect find generic language lot thing look like functional feature actually generic algorithm look quicksort reduce func quicksort c mutablecollection cindextype signedinteger inout element c range range cindextype le cgeneratortypeelement cgeneratortypeelement bool func reduce sequence u sequence initial u combine u sgeneratortypeelement u u reduce common functional tool right beside quicksort functional language would expose way mutates collection expressed generic style algorithm one happens mutate matter algorithm reusable many kind data generic programming get functional feature side effect paradigm none critique swift ok functional would loved cocoa development go functional enjoy know would furthered goal really fantastic io mac apps least short term frp good idea strong opinion learning curve high objc programmer compared swift need integrate swift nonfunctional objc long time hope swift incorporate functional feature time switch return value able split list head tail pattern match cheap function accept tail recursive attribute mandatory tailcall optimization mutating method rare immutable data type plentiful none thing make swift functional enough could let u write functional pattern someday swift cocoa could actually become functional end result swift might surprisingly important language could improve programming discipline programmer would learn functional programming develop popular platform learning functional programming make better programmer even work paradigm none may happen swift might language writing really fantastic io mac apps ok
47,Lobsters,swift,Swift programming,Swift on Mac OS 9,https://belkadan.com/blog/2020/04/Swift-on-Mac-OS-9/,swift mac o,april fool day anniversary founding apple inc current event world best code visualizer swift mac o powerpc classic environment wine crossover virtualbox parallel carbon sound familiar core foundation provide common interface carbon cocoa marshall elfstrand goal swift write program swift run mac o want build ppccapable swift compiler also need emulator copy macintosh programmer workshop tool want prebuilt ppccapable swift toolchain ppcswifttoolchain also need emulator copy macintosh programmer workshop tool ppcswiftproject want try built version bitpaint bitpaintswifthqx gathering material codewarrior macintosh programmer workshop written experience blog post part part debug mystery misbehavior sheepshaver modern compiler classic linker llvm ibm reference doc adding support aix o apple ibm used close partnership along motorola aix register convention stack convention mac o runtime architecture swift teach swift ppcaix target add support pascal string hacked swift well turn reflection support nearly runtime metadata learn make smol stdlib ppcswiftproject might good reference someone looking ccompatible runtimeless subset swift disable jump table jump table swift llvmproject week mysterious failure mac o runtime architecture mac o runtime architecture sheepshaver already know load future direction macroman linkage summary april technical swift mac o classic compiler,april mean april fool day anniversary founding apple inc year sober one due current event think lot people still appreciate people creating sharing keep spirit whether music art programming project prank april fool seem le le fun obvious joke whimsy anyone expense still something believe even better actually work last year implemented world best code visualizer year decided seriously attempt something thought past getting swift program run mac o mac o twenty year ago macos know today another operating system known mac o one first os use gui something pretty much take granted day also date day one program could run time even latest version us cooperative multitasking run multiple program yield time let others run program crashed overwrote memory supposed good chance restart whole system mac o ran powerpc processor also used gamecube xbox earlier version o started motorola cpu series successor mac o x also ran powerpc first launched apple began switch intel processor instead powerpc finally dropped mac o x huge step forward mac o number way including preemptive multitasking could actually run multiple thing apple want leave o program behind two thing classic environment set sandbox looked enough like mac o run classic mac o program directly mac o x classic environment app program ran inside protected interfering mac o x program vice versa really quite effective actually survived longer booting mac o never received support newer powerpc processor life ended switch intelpowered built running instruction original apps directly provide compatibility shim library think like wine crossover rather virtualbox parallel carbon packagedup version old mac o toolbox apis could write mac o x apps way always basically recompiled app added extra annotation saying carbonized sound familiar fun aside reason one reason core foundation provide common interface carbon cocoa ht marshall elfstrand video link classic ended switch intel processor back carbon worked way last year macos mojave apple never released version carbon presumably encourage developer move cocoa last year macos catalina support apps dropped entirely exception goal since learned program classic mac o year later spent good chunk career working swift tantalizing thought like write program swift run mac o write swift source code call carbon toolbox apis compile powerpc version swift compiler package necessary mac o profit useful absolutely neither yet still learned lot probably guessed managed accomplish writing blog post without ado picture swift toolbox app running mac o friend nadine power mac check blazing fast processor assume good number people reading would like know want build ppccapable swift compiler check following repository git clone http belkadancomsourceppcswiftproject cd ppcswiftproject git clone b ppcswift http belkadancomsourceswift git clone b ppcswift http belkadancomsourcellvmproject git clone http githubcomappleswiftcmark cmark make quick start build swiftc strippeddown stdlib note directory branch name subrepos note nested inside ppcswiftproject repo also need mpw emulator copy macintosh programmer workshop tool build actual app using modern macos want prebuilt ppccapable swift toolchain one ppcswifttoolchain note put built swifto toolchain probably success optimized code actually remaining link stdlib ie everything inlined away also need mpw emulator copy macintosh programmer workshop tool may still want check example ppcswiftproject repo required flag swiftc ppclink rez little finicky note size carb resource required carbon app skip rez part actually want run app want try built version bitpaint one bitpaintswifthqx like hear anything make tool meanwhile like hear made work read gathering material last time building classic mac o apps using codewarrior actually calling building classic mac o apps stretch learning c using codewarrior terminal io library get stdinstdout interface classic mac o natively remember command line could try get version codewarrior running seem like convenient thing think able get swift compiler running classic shuttling object file back forth os get anything done fortunately one interested building classic apps modern macos point found mpw project emulator specifically running apple macintosh programmer workshop tool knew going work steve troughtonsmith famous apple community finding undocumented prerelease feature apple os written experience building app mpw ran system way modern mac o x building appropriate compiler appropriate library interested highly recommend checking blog post reference used get started app see running picture bitpaint troughtonsmith test app ported swift ask ahead time okay use app hobbyist project longtime mac developer gwynne raskind also gave twopart highlevel tour toolbox apis mike ash blog several year ago part part fortunately carbon take care fair amount u even mac o okay mpw give u powerpc compiler powerpc assembler powerpc linker classic mac o header file classic mac o library stub linking bunch object binary inspection tool need finished product made lot use trying debug mystery misbehavior pretty good troughtonsmith blog post show enough build entire app run classic idea take object file produced modern compiler feed powerpc linker mean additionally need modified version swift compiler support emitting mpwcompatible object file strippeddown form swift standard library runtime enough read interact carbon header least actual machine running mac o one charger testing using sheepshaver friend nadine provided testing actual machine thing working well go modern compiler classic linker make thing manageable set intermediate goal build app using clang modern c compiler ship xcode clang us llvm infrastructure swift compiler figured could deal object format workflow issue clang move swiftspecific part first thing try figure file format powerpc object file turn format called xcoff searching modern documentation turned ibm reference doc pretty much one else us format encouraging first time started looking project worried compiler write assembly code send mpw powerpc fixing account difference llvm mpw print powerpc assembly however checked see llvm supported xcoff stroke luck turn ibm started adding support xcoff llvm last year part adding support aix run powerpc could ask clang generate xcoff file aix mean short step making generate xcoff file classic mac o point remembered bit trivia apple ibm used close partnership along motorola even made common standard used across platform cpu though perhaps le impact hoped possible aix classic mac o used calling convention procedure could interoperate without extra work got lucky answer nearly yes aix register convention stack convention match one mac o runtime architecture guide meant could feed object file produced clang directly mpw ppclink get working classic mac o binary pretty sure mouth fell open first saw work clang c testc target powerpcibmaixxcoff isystem mpw interfacescincludes integratedas fpascalstrings mpw ppclink testo ppclibraries test work topofmasterbranch llvmclang simple testc end needing change llvm way end really fairly minimal much thanks ibm folk hard part work swift able compile simple test program great milestone fair bit work could get swiftc compile whole bitpaint highlight teach swift ppcaix target mostly involved adding ppc aix case switch statement across swift compiler also involved making simple description swift calling convention clang cribbed arm implementation assuring ppcaix backend okay calling convention using got lucky amount work swift already support arm littleendian powerpc running linux bigendian another ibm architecture piece already place add support pascal string mac first highlevel programming language pascal c default format string throughout toolbox apis pascal string length byte followed string data rather c string string data followed null byte fpascalstrings commandline flag clang support static pascal string syntax phello world p would replaced length string must byte count hacked swift well implementation probably problem enough get simple thing working turn reflection support nearly runtime metadata swift runtime powerful want write much runtime project primarily calling bunch c function beyond though default format swift metadata make heavy use relative addressing mainly reduce startup time learn well symbol pointing inside global llvm xcoff implementation yet support either get working proofofconcept aggressively commented part irgen made use either feature like get static metadata back point reflection something ever interested probably make smol stdlib full swift standard library lot thing need even know implement string world assume unicode logic integrate c code based basic type standard library like unsafemutablepointer ended taking subset standard library source adding additional file commenting thing worked nope even good enough early attempt compiled okay managed crash ppclink tried write test program presumably many symbol standard library cut thing even smaller subset eventually worked course working time modifying compiler get working proofofconcept think ultimately went needed bunch symbol used runtime metadata purpose mentioned nonoptimized build nontrivial program work yet know danger zone might try add thing back rather modify actual swift repo decided keep strippeddown standard library separate find ppcswiftproject repo might good reference someone looking ccompatible runtimeless subset swift perhaps embedded resourceconstrained environment disable jump table llvm optimizes switch statement jump table look like help performance andor code size default implementation jump table also supported llvm xcoff implementation imagine aix folk get around implementing sooner later disabled jump table entirely forcing compiler emit switch series ifs instead check change swift llvmproject repos curious appropriate upstreaming respective project try get one relevant upstreamed point week mysterious failure made change app worked swift worked time change something arbitrary suddenly event register got bad added counter ten event exit app without get trapped unable even quit without restarting virtual machine even seemingly working version friend nadine reported trying use reset command caused app crash going decided get bottom something strange seen earlier even clang version program work correctly turned optimization possible bug ibm newlyadded aix support powerpc support since common platform even llvm optimization could aix classic mac o really similar thought code agreeing system code thing supposed work could optimized code using instruction sheepshaver support though really seem match symptom symptom weird local variable getting corrupted others started testing everything could think stack aligned properly stack pointer somehow getting restored properly glue code crosslibrary call trashing data see mac o runtime architecture guide something causing code fragment manager dynamic linker put wrong address crosslibrary call without able rely logging made simplest textual debug output facility could modifying title menu later turned writing stdout mac o automatically result file created could used instead wrote c function tracked current stack pointer make sure getting restored properly made good use dumpxcoff dumppef tool came mpw learned pef pidata patterninitialized data worked tried step cfm relocation hand see mac o runtime architecture guide even started trying decompile actual system library see anything suspicious even though bug actual mac o seemed incredibly unlikely led way learning toolbox rom actually rom boot script compressed set system library called content used rom fortunately sheepshaver already know load meant could decompression manually split individual library yeah got way weed learned lot though finally looked decompiled optimized c version swift version observed variable getting corrupted generalpurpose register supposed okay place put data classic mac o aix mac o x decided trust particularly register used track threadlocal storage aix marked problem went away optimized nonoptimized even fstackprotectorall swift debugging took week unfortunately led project little le ambitious originally wanted future direction get awful lot actually runtime mean dynamic allocation among thing type metadata mean generic optimized away field metadata mean key path optimized away unicode support string arguably could make string without character string using macroman native encoding necessarily look much like today swiftstring bunch standard library thing missing wanted get proofofconcept working also ppclink choking large object file get standard library stuff working probably split swift module somehow mess linkage number way make llvm xcoff backend happy sure multifile build would work even test using carbon mean program ought work older version mac o x well friend nadine tried priority figure wanted try making nice abstraction top toolbox apis wanted make complicated example apps maybe follow putting lot effort making sure could finish april probably get thing neglecting favor project instead summary project took lot time even though know lot compiler hacked way success instead careful maintaining proper software development practice learned lot accomplished goal back mind long time made way end article reward bitpaint running classic mac o x also courtesy nadine stay safe everyone help people around anybody make something project want hear entry posted april filed technical tag swift mac o classic compiler
48,Lobsters,swift,Swift programming,Swift Package Registry,https://swiftpackageregistry.com/,swift package registry,alamofire chart sdwebimage lottie swiftyjson reactivecocoa vapor rxswift hero snapkit kingfisher mbprogresshud iqkeyboardmanagerswift realm carthage swiftlint fmdb promisekit moya cocoaasyncsocket eureka foldingcell nvactivityindicatorview skeletonview quick swifterswift objectmapper ibanimatable cryptoswift swiftpm rswift purelayout kitura cartography sqliteswift reachability jtapplecalendar reswift facebook swiftgen starscream swiftnio viewanimator swiftdate gitignoreio keychainaccess swiftai fspagerview macaw nuke,alamofire elegant http networking swift chart beautiful chart iostvososx apple side crossplatform mpandroidchart sdwebimage asynchronous image downloader cache support uiimageview category lottie io library natively render effect vector animation swiftyjson better way deal json data swift reactivecocoa cocoa framework objc dynamism binding reactiveswift vapor serverside swift web framework rxswift reactive programming swift hero elegant transition library io tvos snapkit swift autolayout dsl io o x kingfisher lightweight pureswift library downloading caching image web mbprogresshud mbprogresshud customizations iqkeyboardmanagerswift codeless dropin universal library allows prevent issue keyboard sliding cover uitextfielduitextview neither need write code setup required much realm realm mobile database replacement core data sqlite carthage simple decentralized dependency manager cocoa swiftlint tool enforce swift style convention fmdb cocoa objectivec wrapper around sqlite promisekit promise swift objc moya network abstraction layer written swift cocoaasyncsocket asynchronous socket networking library mac io eureka elegant io form builder swift foldingcell octocat foldingcell expanding content cell animation made ramotion nvactivityindicatorview collection awesome loading animation skeletonview elegant way show user something happening also prepare content waiting quick swift objectivec testing framework swifterswift handy collection native swift extension boost productivity objectmapper simple json object mapping written swift ibanimatable design prototype customized ui interaction navigation transition animation app store ready apps interface builder ibanimatable cryptoswift cryptoswift growing collection standard secure cryptographic algorithm implemented swift swiftpm package manager swift programming language rswift strong typed autocompleted resource like image font segue swift project purelayout ultimate api io o x auto layout impressively simple immensely powerful objectivec swift compatible kitura swift web framework http server cartography declarative auto layout dsl swift iphone triangularruler sqliteswift typesafe swiftlanguage layer reachability replacement apple reachability rewritten swift closure jtapplecalendar unofficial apple io swift calendar view swift calendar library io calendar control customizable reswift unidirectional data flow swift inspired redux facebook used integrate facebook platform io tvos apps swiftgen swift code generator asset storyboards localizablestrings get rid stringbased apis starscream websockets swift io osx swiftnio eventdriven network application framework high performance protocol server client nonblocking viewanimator viewanimator brings ui life one line swiftdate parse validate manipulate display date time timezones swift gitignoreio create useful gitignore file project keychainaccess simple swift wrapper keychain work io watchos tvos macos swiftai swift machine learning library fspagerview fspagerview elegant screen slide library extremely helpful making banner slider macaw powerful easytouse vector graphic swift library svg support nuke powerful image loading caching system
49,Lobsters,swift,Swift programming,Swift 5.2 released,https://swift.org/blog/swift-5-2-released/,swift released,language update playground paul hudson john sundell exploring swift new functional feature improved compiler diagnostics previously published blog post code completion improvement improved build algorithm reducing overhead key improving build time making incremental build efficient additional improvement debugger improvement lldb example xcode variable view expression evaluator lldb swift package manager swiftsyntax update swiftsyntax changelog language server protocol update sourcekitlsp language server fixits code action local refactoring documentation swift programming language apple book store platform linux available download apple xcode xcode available download source,swift officially released release focus improving developer experience improved compiler diagnostics error warning code completion increased reliability debugging improved handling dependency swift package manager tooling improvement lsp swiftsyntax much addition language added provide new capability building expressive apis blog post take quick tour main change language update swift implement following language proposal swift evolution process experience change explore playground put together paul hudson john sundell also written article exploring swift new functional feature illustrates expressive capability new feature improved compiler diagnostics drastically improved quality precision error message swift compiler previously compiler attempted guess exact location error breaking expression search failure subexpression separately worked well case possible narrow location error single subexpression without using information parent expression however numerous kind programming mistake strategy could accurately identify compiler leaf breadcrumb encounter failure inferring type expression recording every specific failure along way breadcrumb allow compiler produce precise diagnostics often actionable fix lead developer toward correct code example improved error message following code attempt compare enum value case exist enum e case one two func check e e e three print okay using swift might perplexed error message error binary operator applied operand type e e three using swift see problem right away error type e member three e three next snippet code incorrectly invokes initializer textfield swiftui import swiftui struct roomdetails view state var roomname string state var imagename string var body view vstack textfield room name image imagename frame maxwidth swift misleading error message appeared completely different line error int convertible cgfloat frame maxwidth swift compiler correctly point missing argument textfield initializer error missing argument parameter text call textfield room name error also includes fixit insert missing argument find new diagnostic architecture previously published blog post dedicated topic code completion improvement faster completion eliminating unnecessary type checking large file speedup code completion compared xcode depending completion position supply name implicit member incomplete dictionary literal incomplete ternary expression easier read type appear result using opaque result type eg view possible preserving typealiases stopped printing parent type necessary example swift xcode swift xcode displayed improved build algorithm swift compiler support two mode operation xcode seen build setting swift project two mode tradeoff compilation speed amount code optimization performed incremental build great development every file project need recompiled maximum optimization critical whole module optimization give compiler complete view entire code base therefore greater ability optimize incremental mode build work rebuilding module split among multiple compilation task run parallel every source file rebuilt exactly one associated compilation task responsible type checking generating code declaration source file since swift declaration function property type etc reference across source file compilation task sometimes required type check declaration source file crossfile referencing declaration decrease efficiency incremental mode build duplicate typechecking work across compilation task contrast whole module compilation work processing code module one compilation task duplication type checking work across compilation task parallelism compiling code module whole module compilation however give compiler visibility one go code module thus enables code optimization build time advantage incremental whole module compilation diminishes amount duplicated work compilation task performs duplicated work high case incremental mode work whole module compilation long overhead exceed number processor core incremental mode build still faster overall reducing overhead key improving build time making incremental build efficient order minimize wasted work done incremental mode build swift compiler notably type checker leverage new centralized logic caching lazy evaluation dependency tracking request request selfcontained unit computation logic used compiler efficiently resolve declaration reference one another prior swift declaration referenced another source file type checker would explicitly perform operation declaration called validation validation made use mutable state rather coarsegrained attempting precompute number property declaration might needed later code generation eager precomputation information could often unnecessary wasteful swift internal representation declaration compiler immutable code generation phase compiler able trigger lazy evaluation request result cached since request finegrained old validation step improves performance avoiding wasted work also improves correctness fixing significant number correctness issue type checker anticipate needing validate something later required code generation additional improvement addition improved incremental mode build swift compiler includes number performance optimization foundational component work compiler resolve named symbol declaration ie name lookup expect improvement improve build time whole module incremental mode build since change reduce algorithmic bigo complexity various algorithm inside name lookup particularly help larger project many source file debugger improvement across platform swift debugging supported lldb resilient reconstructing type information swift program debug information resilience enables debugger use information swift type particular lldb also import c objectivec type dwarf debug information instead compiling clang module source code behavior controlled symbolsuseswiftdwarfimporter lldb setting default setting enabled fallback path traditional clang module import fails example xcode variable view expression evaluator see improvement action one look variable view xcode lldb expression evaluator power debugging workflow lldb need import swift module visible current debugging context eg file function etc swift module wealth information type swift module often used without depending separate module file produced clang ccobjectivec compiler used swift code interoperating c objectivec since lldb global view entire program dynamic library dependency importing clang module sometimes fail one common failure scenario search path different dynamic library conflict swift package manager swift package manager swift includes following new enhancement remote swift package tool version longer resolve package dependency used test target improving performance reducing chance dependency version conflict swift package manager us new strategy resolve package dependency significantly improves quality error message performance complex package graph change result discussion review part swift evolution process swiftsyntax update syntax node hierarchy swiftsyntax api optimized replacing protocol structs consequently tree visitation especially rewriting syntaxrewriter faster resulted improved performance tree visitation especially rewriting tree using syntaxrewriter see changelog detail changed swift release language server protocol update xcode corresponding command line tool package include swift release sourcekitlsp language server swift cbased language find sourcekitlsp server executable macos xcode active xcode run server xcrun sourcekitlsp get full path server xcrun find sourcekitlsp sourcekitlsp includes support following lsp feature fixits swift error warning note include fixits supported using code action language server protocol local refactoring swift local refactorings extracttomethod supported using refactoring code action kind sourcekitlsp also number improvement supporting ccobjectivec code particular determining compiler argument processing header file sourcekitlsp us index lookup main file improved accuracy result also notable improvement project using json compilation database eg cmake project documentation updated version swift programming language swift available swiftorg also available free apple book store platform linux official binary ubuntu ubuntu available download apple xcode development apple platform swift ship part xcode toolchain also available download swiftorg source development swift tracked following repository github tag designates specific revision repository make final version swift remain open release management process accumulate change next release
50,Lobsters,swift,Swift programming,Yak Shaving - Swift Edition,https://tirania.org/blog/archive/2020/Mar-24.html,yak shaving swift edition,yak shaving swift edition mind swift actor idea pony language guics termkit lot fun implementing description use c version port go unicode library multiline text editor text buffer reimplementation textbufferkit reusable terminal emulator xtermsharp swiftterm,yak shaving swift edition tensorflow summit last year caught chris lattner time working swift tensorflow ended talking concurrency mind swift recognized actor idea similar pony language learned year trip microsoft research uk course pointed pony capability language like c swift lacked anyone could poke data belong without much work whole thing would fall apart example build something like c class chart float point public float point get return point anyone reference chart go poke internals point array surfaced example simple plot implementation accidentally modifies content void plot chart mychart code accidentally modifies data mychart var p mychartpoints int plength plot p sort problem avoidable come considerable development cost instance net find plenty adhoc collection interface whose sole purpose prevent data tamperingcorruption consistently properly used prevent scenario happening chris politely pointed quite understood swift fact swift support copyonwrite model collection box meaning problem present swift wrongly assumed interesting read swift specification three four time collaborating steve swifttonet binding tool yet completely missed significance design decision swift subtle design decision eye opening decided gain real handson experience swift better way learn swift start small fun project couple evening rather building mobile app would mobile design user interaction little swift decided port guics console ui toolkit c swift called termkit guics termkit borrow extensively apple uikit design design enjoyed notably avoids auto layout instead us simpler layout system quite love lot fun implementing read description use c version journey filled number pleasant capability swift helped find longterm bug c library remain firmly fan compiled language checking better dear reader wish kept log code wrote year ago could share take copious note suffice say ended warm cozy feeling knowing compiler looking plenty love swift technically enumerate feature people done want point interesting bit missed practitioner language armchair observer language requirement constructor fully initialize field type calling base constructor requirement took digest mental model calling superclass initialize done value set c yet prevents bug base constructor call virtual method override might ready handle eventually learned embrace love capability another thing truly enjoyed ability creating typealias defined visible new type capability wanted c since yet get lovehate relationship swift protocol extension love incredibly powerful hate hard surface net practice pleasure use heart simple import c code swift bring type definition header file call c code transparently swift really gift god humankind truly enjoyed character data type swift allowed console ui toolkit correctly support unicode console modern terminal even guics port go unicode library c suffers limited gostyle rune support emoji nerdosphere call extended grapheme cluster beyond pedestrian control like button entry line checkboxes two useful control wanted develop xterm terminal emulator multiline text editor c version console toolkit multiline text editor quick hack list hold line buffer line contains rune display inserting character easy inserting line easy get done couple hour evening sort time devote fun exploration course problem cutting region text across line inserting text span multiple line looked like brilliant coup simple design turn ugly repetitive errorprone code take forever debug enjoy writing code end swift port decided needed something better course era web scale got ta web scale data structure implement swift version rope data structure someone pointed blog post visual studio code team titled text buffer reimplementation read avidly found argument convincing end good enough visual studio code good enough gander vacation last summer decided port typescript implementation text buffer swift named textbufferkit porting code typescript swift turned great learning experience time done ready hook termkit got busy also started learn swiftui started doubt whether made sense continue work uikitbased model restart swiftui version pondered decision every respected yak shaver would proceeded xterm terminal emulator work since wanted reusable terminal emulator control net particular wanted one embed monodevelop year two ago looked terminal emulator could port net needed something licensed mit license could used wide range situation modern enough surveying space found xtermjs fit bill ported net modified suit requirement xtermsharp terminal emulator engine multiple uis hook multiple backends swift took xtermsharp code ported swift ended swiftterm quite decent shape bug left yet built termkit ui swiftterm quest perfect shaved yak need figure implement swiftui top termkit repurpose termkit completely ground swiftui driven stay tuned
51,Lobsters,swift,Swift programming,Announcing ArgumentParser,https://swift.org/blog/argument-parser/,announcing argumentparser,customizing validation help using subcommands adding subcommand design goal learn repository readme documentation folder next issue repository swift rewrite swift compiler driver get involved question associated thread swift forum,delighted announce argumentparser new opensource library make straightforward even enjoyable parse commandline argument swift show using argumentparser library like going create utility generates random number like many commandline tool one gradually accrue feature see argumentparser help author user keep everything straight desired interface random utility random random random error missing expected argument highvalue usage random highvalue let define random type expects single integer argument highvalue print random number highvalue import argumentparser struct random parsablecommand argument var highvalue int func run print intrandom highvalue randommain customizing validation help good commandline tool document validates input let add descriptive text implement validate method catch case user give toolow value highvalue struct random parsablecommand static let configuration commandconfiguration abstract chooses random number input argument help highest value pick var highvalue int func validate throw guard highvalue else throw validationerror highvalue must least func run print intrandom highvalue tool smarter value accept includes rich documentation autogenerated help screen random error highvalue must least usage random highvalue random help overview chooses random number input usage random highvalue argument highvalue highest value pick option h help show help information using subcommands modern commandline tool git swift package manager use subcommands group related tool command tree using argumentparser build interface like declaring subcommand separate type let implement subcommand moving existing logic nested number type extension random struct number parsablecommand static let configuration commandconfiguration abstract chooses random number input argument help highest value pick var highvalue int func validate throw guard highvalue else throw validationerror highvalue must least func run print intrandom highvalue listing subcommand root command configuration struct random parsablecommand static let configuration commandconfiguration abstract randomness utility subcommands numberself argumentparser take care rest adding subcommand complete tool let add second subcommand pick element list supply argument random pick fuji gala cameo honeycrisp mcintosh braeburn mcintosh random pick count fuji gala cameo honeycrisp mcintosh braeburn honeycrisp cameo braeburn pick command accepts count option expects array element choose struct random parsablecommand static let configuration commandconfiguration abstract randomness utility subcommands numberself pickself struct pick parsablecommand static let configuration commandconfiguration abstract pick random element input option default help number element choose var count int argument help element choose var element string func validate throw guard elementsisempty else throw validationerror must provide least one element func run let pick elementsshuffled prefix count print picksjoined separator n option property wrapper indicates property read commandline argument using name property make keyvalue pair final version random utility le line code automatically detects subcommand user given par subcommand argument call run method leave subcommand library call random command default implementation run simply print command help screen random overview randomness utility usage random subcommand option h help show help information subcommands number chooses random number input pick pick random element input design goal designing argumentparser following goal mind encouraging best commandline interface practice supporting progressive understanding library enabling project ranging simple oneoff script complex tool including nested subcommands rich help information eliminating boilerplate typically associated parsing commandline argument reducing repetition chance error design goal led u design us swift type system well feature like property wrapper reflection implicitly build interface custom type declaration argumentparser result swift project includes several commandline tool written swift shipped part swift toolchain used building testing particular swiftpm includes argument parser tscutility library grown support swiftpm need never intended wider adoption working adopt argumentparser across swift project invite experiment library give feedback get involved ongoing development learn addition seen far argumentparser support flag argument boolean enumerable property multiple name option flag encapsulating group argument much learn visiting repository readme browsing guide documentation folder reading insource symbol documentation also explore swift project inflight adoption argumentparser indexstoredb simple utility two command swiftformat us advanced feature like custom option value hidden flag next near term couple additional feature need added swiftpm adopt argumentparser without regressing functionality find feature tracked issue repository swiftpm adoption complete like adopt library swift rewrite swift compiler driver well along integration like work community toward defining requirement release feature critical widespread adoption variety environment server window platform customization point important people using argumentparser better able answer question together get involved experience feedback contribution greatly encouraged question please feel free post question post associated thread swift forum
52,Lobsters,swift,Swift programming,Debugging a bad assumption,https://groob.io/posts/debugging-assumption/,debugging bad assumption,debugging bad assumption stdout buffered discussion thread,debugging bad assumption thu feb minute sometime wrote one first swift program anything complicated anything important two thing program ran continuously performing calculation time time binary printed output stdout slightly simplified version code true print hello world worked fine running main saw thing expected needed call swift binary go program mostly straightforward implement func main cmd execcommand main stdout err cmdstdoutpipe err nil logfatal err err cmdstart err nil logfatal err scanner bufionewscanner stdout scannerscan fmtprintln scannertext err scannererr err nil logfatal err logfatal cmdwait ran go program nothing happened could see thing happening go binary running producing expected output swift process called also running output expecting matter tried could figure seemed issue reading simplified version code might already seen issue actual program wrote line code debugging harder tried thing getting area code narrowed program stalling scannerscan made sense replaced mainswift maingo looked like fmtprintln hello world everything worked expected go binary calling go binary output printed stdout hell turn swift learned c language stdout buffered default invoked terminal print print output immediately someone reading stdout buffer flushed program exit actually stumbled solution writing short lived program would exit calling print would return expected output go side making long running would hang go side stdout buffered point code ever written go explains assuming behavior print another language even though swift behavior consistent c go le common thing happens one found behavior surprising discussion thread print buffering swift mailing list modified swift code use filehandlestandardoutput directly instead print fixed issue let output filehandlestandardoutput let newline n data using true outputwrite hello world data using outputwrite newline know repeat fact month later wrote something similar knew avoid problem entirely learn new thing tech making one mistake another forever best way become expert something sure feel way learning new language tool
53,Lobsters,swift,Swift programming,SwiftUI defaults considered harmful,https://tonsky.me/blog/swiftui/,swiftui default considered harmful,swiftui default considered harmful war comma apple came supported separately implicit wrap child privacy invasion smart default david abraham rob napier cs reset solution subscribe support patreon,swiftui default considered harmful note swiftui ui framework try smart first general approach swiftui taking reactive declarative datadriven ui framework really solid considered stateoftheart current day year complaint great job needed thank apple releasing seriously great tool looking forward using thing noticed swiftui concern think could illustrate point ui framework design future system could handle better without ado let start biggest problem api design comma war comma much blown away far people willing go achieve really slick looking dsl mean swiftui could vstack image uiimage image text title text subtitle instead decided get rid annoying comma element altered language lambda could multiple implicit return value like vstack image uiimage image text title text subtitle mean difference two whether put comma element trust making happen easy solution apple came static func buildblock emptyview static func buildblock content content content static func buildblock tupleview static func buildblock tupleview static func buildblock tupleview static func buildblock tupleview static func buildblock tupleview static func buildblock tupleview static func buildblock tupleview static func buildblock tupleview static func buildblock tupleview hope wide enough monitor read seem adhoc unpretty also allow put element container someone charge api design afraid list power someone charge swift language three method look worrisome static func buildeither truecontent falsecontent first truecontent conditionalcontent truecontent falsecontent static func buildeither truecontent falsecontent second falsecontent conditionalcontent truecontent falsecontent static func buildif content content content need obviously every language construct use inside special lambda without special support mean supported separately repeat switch continue break throw others point programming language able use language implicit wrap component design raise question eg vstack text abc bold padding bold alters text padding wrap another view changing return type whole expression along way compare vstack wrap child explicitly make distinction sit design slick dsl also convey semantics tiny bit know help reader understand code quicker hide wrapping view inside method call chain already established another visual way view wrapping saying completely wrong look consistent vstack padding text abc bold child privacy invasion thing probably plain mistake funny though eg navigationview take property constructor via modifier instead property first child navigationview list navigationbartitle text room smart default ok mere annoyance understand exist existence bring anything horrible either unlike swiftui default surround text padding know nobody know exactly swiftui decides padding according internal logic maybe hardcoded value god hope might multiple value depending device orientation screen size language daynight cycle moon phase point nobody know know sure ok see padding argument guess something fishy going well hstack text text avocado toast font title see padding look picture let quote david abraham swiftui slam stack child left space two adaptive effect swiftui decided even though ask would good spacing two element another default say well exactly far understand swiftui look inside view hierarchy recognizes view might make pretty nontrivial call much space add example text somewhere deep component might use baseline instead container bounding box another example smart magic behavior button might look black add list list button text add room blue change liststyle button style need touch button list button text add room liststyle grouped come concern person extensive web programming experience starting back web neither fun pretty particular doubt smart magic rule kindly provided platform first sometimes default get way mean need undo might easy seems sure changing padding easy see code text padding text padding nothing code undo hstack text text text fixing broken layout always easier add stuff forgot removing stuff framework see written code find read understand debug alter framework code completely opaque second smart behavior might nightmare work way web many people wasted million hour stackoverflow trying figure remove extra space around img align icon text button get rid unwanted extra scroll undo mobile text boosting remove link tap delay make float align properly fix spacing around inline element etc became problem html seemingly simple component incapsulate complex behavior sometimes need happy sometimes idea intentionally quoting rob napier imo difficult thing swiftui nondiscoverable documentation incredibly sparse really know digging system quite lot one pretty easy alignment incredibly subtle beast many way quite like cs regard many twiddle knob obvious would look like cs third problem default sometimes create variation aware might happy layout simulator somewhere weird ipad model particular orientation swiftui kindly set padding bigger value break layout viola web used cs reset reason never sure fourth even made perfect application tested thoroughly possible variation guarantee tomorrow apple get bored current design language release swiftui completely different default worse slightly different default solution dumb explicit framework told simpler better forgot put padding hstack element well shame padding mistake mine sure nuance might good hand inexperienced developer gap one cover learning unlike current situation thing look good first turn maintenance nightmare later professional tool predictability beat firsttimer convenience wish framework follow hi nikita write programming ui design subscribe also create opensource stuff fira code anybar datascript rum like want get early access article along benefit support patreon
54,Lobsters,swift,Swift programming,Build a simple ARKit app in Swift,https://cybernetist.com/2020/02/17/swift-arkit-sun-app-for-londoners/,build simple arkit app swift,deficiency storm ciara storm dennis david attenborough arkit swift github swift swift swift getting started go rust github basic language guide tutorial xcode storyboard view controller article swiftui swiftui web component arlondonsun arkit app londoner arkit note apple developer official doc delegate protocol delegation protocol official documentation configure start ar session vertical vertical tap sun optional chaining gravity alignment sun note notice conclusion github,happen one lucky people living london miss bit sunlight crisis recently instead usual vitamin deficiency used brought attention regular health check thing little bit worse first got visit storm ciara shortly followed storm dennis sunlight get watching david attenborough documentary netflix guessed build arkit app swift let put fiery sphere room get sunlight whenever need wherever tap screen go find full implementation app github blog post describes foray world io app development past week spent bit time learning swift io reading tutorial watching youtube video would help understand core principle though built apps whilst learning io development decided write blog post particular one believe future headed towards arvr based topic find super interesting exciting besides sharing excitement first somewhat ever working arkit app friend asked hard get started arkit io development general hopefully blog post shed light process went let get started swift want start building io apps need learn bit swift ok maybe little bit bit getting started probably best resource get started swift give taste language feature tooling experience programming go orand rust think able pick basic pretty quickly fortunately bit christopher columbus programming language go github find bunch od random mostly useless project various programming language python r elixir etc surprisingly easy pick basic would dare say fluent swift reading getting started guide hacked simple commandline tool get bit feeling language figured ok readyish start hacking io thing oh wrong swift one programming language still quite make mind know defining feature besides primary language developing io apps language pretty much feature find language top hacking swift feel like creator go rust c met cooking show like britain cooked kind programming language goulash got class inheritance etc immutable structs protocol also inherit property readonly write wrapper etc name interesting though read feature somehow language started growing got checked yet switching different language missed swift feature language documentation pretty good contains load example make understanding language feature quite clear come think may read article official language guide past week also watched bunch video always ended going back guide could copypaste example code editor modify see thing work probably better way learn swift skimmed tutorial example seemed pretty good xcode think beast ide xcode actually need introduction besides saying need learn get around effectively substitute experience afraid first step probably feel bit frustrating beginner one know get past early period left frustration xcode slow halfbroken occasionally even crashing middle editing important part code storyboard session ok generally recover work middle ide crash experienced catastrophic crash could recover data yet storyboard storyboard define user interface app generally dragging dropping widget main view controller modifying attribute attribute inspector thing get pretty complicated want layout responsive different position device might want read autolayout best resource found article good primer get started swiftui alternatively choose build ui app using swiftui introduced recently wwdc building something simple probably better option truly simplify building uis time writing blog post swiftui incomplete slightly buggy provide full feature set access using storyboard see apple going playing felt like building web component point sure get much easier transpile html component swiftui andor share swiftui component across project moment think quite ala opinion come amateur io hacker swift guru might disagree much could go talk going stop say important thing learning something new perseverance experience learning something new need constantly create thing see tangible result activity hate reading death equally come across something understand know much never shy away diving deep documentation stackoverflow making thing ideally thing find interesting best way learn without ado let get started building arkit app decided call arlondonsun arlondonsun arkit app londoner arlondonsun app allows user place sun object ar scene simply tapping device screen order use arkit first time built anything arkit go easy say might incorrect please leave comment spot anything wrong get started creating xcode project creating new io app project xcode prompt choose kind project would building pick augmented reality app offered option fill various project property make sure choose swift scene kit option shown note since run ar apps simulator arkit need access camera test app directly phone might need create apple developer account set xcode accordingly xcode let build app even without real device run without one unfortunately xcode generate swift source code file generic storyboard contain arkit scene kit view get started well ar scene asset newly created project model ship texture play around model dragging around get feel rendering pretty cool project using abovedecribed default asset go ahead select file explorer xcode delete pressing backspace add ar scene asset project later default asset deleted remove following two line viewcontrollerswift file let move create new scene let scene scnscene named artscnassetsshipscn set scene view sceneviewscene scene open viewcontrollerswift file notice xcode automatically imported arkit scenekit module u created project read scenekit official doc basically provides api let compose scene game ar apps using higherlevel component called scene node scene actually graph hierarchy object composed scenekit let define customize scene node render scene efficiently without knowing much lowlevel detail rendering removing two line code mentioned usually enable default lighting add bit light scene case bit dark also place feature point small yellow dot screen development phase see ar session realtime viewdidload look follows override func viewdidload superviewdidload selfsceneviewdebugoptions arscndebugoptionsshowfeaturepoints set view delegate sceneviewdelegate self show statistic fps timing information sceneviewshowsstatistics true automatically add light scene sceneviewautoenablesdefaultlighting true quick explanation viewdidload method viewcontroller class called automatically soon app successfully loaded io good place init important property case enable displaying feature point also enable displaying stats framerate whatnot could remove let keep another thing usually set various delegate talk delegate bit protocol delegation delegation swift design pattern allows type hand control responsibility property method another type without implementing responsibility ie class implementation call method access property delegate instead providing functionality similar experience go pas interface type constructor function io component seem provide lot default method triggered automatically without even knowing apparently change default behavior providing custom implementation case basically take control arscnview delegate method assigning self sceneviewdelegate property nittygritty detail actually bit nuanced full explanation involves something called protocol protocol incredibly powerful language construct akin may experienced go interface type ala protocol swift bit powerful also mean shoot foot easily well want bother feel free check official documentation notice viewcontroller class conforms arscnviewdelegate protocol class inherited protocol conformed mean want override default behaviour method indeed project totally open documentation see protocol requires implementation different variation renderer method simple app provide read somewhere devs render grid plane surface better see surface detected configure start ar session two important method xcode generated u ideal configure start ar session called automatically view appears camera name pretty selfexplanatory viewwillappear viewwilldisappear method pretty selfexplanatory name viewwillappear configures ar world tracking start ar scene session viewwilldisappear pause session app go background want gpu expensive operation keep running better stop ar session happens slightly modify viewwillappear method enable vertical planedetection want achieve obvious later essence want arkit tracking detect vertical surface front phone hold gravity orientation help u place sun scene get position tap sun let get meat problem want tap screen want place sun ar scene node described earlier image captured device camera order need implement actually override touchesbegan method called new touch detected view window place sun scene method pretty simple first pick first touch result find location coordinate system view device screen use location find position node real world captured camera image hittest method use find location real world work way sort space front u find another object surface return detected objectssurface coordinate back u let touch touchesfirst note location screen need convert let touchlocation touchlocation sceneview find location int real world ar scene let result sceneviewhittest touchlocation type existingplaneusingextent pick first available result receive result sun already created stop spin talk spinning later spinning spin spinning yet sun placed scene yet first create place detected location sceneview pick first result unwrap let hitresult resultsfirst let node sun sun spinning stop otherwise start spinning nodespinning nodestop nodespin else create new sun sun sun radius add sun scene place node sun location hitresult may noticed lot let expression code swift call optional binding read optionals swift optionals similar option variant feature miss go lot optional binding let prevent using object nil attempting use optionals swift actually powerful also allow optional chaining let call function access property object nil place method placing sun onto scene need bit explanation might seem bit tricky first sight first retrieve z axis coordinate detected location shift size solar radius look coordinate system gravity alignment see z axis perpendicular device screen place sun half sphere hidden behind whatever surface detect first sceneviewhittest shift sun closer u increasing z coordinate size sun radius set node position place scene nodeposition x z nodeboundingsphereradius ad node scene sceneviewscenerootnodeaddchildnode node let look sun class allows u create sun spin stop sun designated sun initializer creates sun object place onto scene create sphere given radius wrap texture read image sun surface downloaded way wrap sun sphere setting material downloaded texture file notice reference file via relative path ar scene asset let sphere scnsphere radius radius let material scnmaterial materialdiffusecontents uiimage named artscnassetssunjpg spherematerials material note must drag drop sun texture image ar asset project asset spinning order get sun spinning need create animation via scnaction object case want rotation picked random rotation around x z axis notice set duration timeout rotation stop actually want sun keep spinning forever wrap rotation action repeatforever action done set go note create animation note multiplying rotation rotate time simple let spinaction scnactionrotateby x cgfloat randomx z cgfloat randomz duration repeate action forever stopped let repeataction scnactionrepeatforever spinaction start action runaction repeataction want stop spin simply remove action applied sun scene node done ready run app notice need iphone support arkit check programmatically checking following boolean flag arworldtrackingconfigurationissupported conclusion implementing first arkit app lot fun also fair amount frustration hello xcode swift importantly huge learning experience go ahead enjoy sunlight rainy day find full implementation app github
55,Lobsters,swift,Swift programming,Dependency Injection Container in Swift,https://medium.com/@ronen.harati/dependency-injection-container-in-swift-b4d7e139338c,dependency injection container swift,dependency injection container swift loosely couple whole project patrick brinksma unsplash decouple code swift,dependency injection container swifthow loosely couple whole projectphoto patrick brinksma unsplashin article talk dependency injection container dics swift previous article explored decouple code swift introduced four level decoupling ladder take look sure mean mentioned dependency injection di method used decouple class dependency injecting dependency outside worldusing di help decouple class fully solve problem parent class creates child class move coupling child class parent class parent class tightly coupled let look exampleparentclass creates serviceone servicetwo serviceone dependency servicetwoprotocol assume loosely coupled decoupled parentclass however tightly coupled serviceone servicetwo creates specific object replaced decouple parentclass one way inject parentclass dependency case serviceone let see would look likeby injecting serviceone made parentclass loosely coupled perfectly fine let think bit deeper fully solve issue looselycoupledparentclass parent tightly coupled class creates object always tightly coupled created object passed problem class decouple many class possible complex project may many class one dependency class probably ordered complex hierarchy creation object probably scattered around causing many class tightly coupledin order avoid create one object responsible creating object may guessed referring dependency injection container object let take look would look like
56,Lobsters,swift,Swift programming,IBM Stops Work on Swift ‚Äî Q&A with Chris Bailey,https://www.infoq.com/news/2020/01/ibm-stop-work-swift-server/,ibm stop work swift q chris bailey,ibm recently discontinued involvement serverside swift development swift opensourced swift server work group hinted vapor kitura ibm framework serverside swift development competitor language rust go successful swift server could end swiftontheserver story twitter offered similar landscape infoq could describe past involvement serverside swift project main contribution project chris bailey infoq kitura wellestablished framework contributor release year think remains great option developer wishing use swift even ian partridge left project bailey infoq status swift linux need done opinion make competitive player platform bailey appsody road swift infoq since serverside swift kitura launched serverside native language arena seen rise go rust rust especially seems direct competitor swift least term focus safetyfirst see language stack bailey altconf serverside swift state union serverside swift official forum,ibm recently discontinued involvement serverside swift development started soon swift opensourced relinquished leadership swift server work group sswg infoq talked ibm chris bailey learn may imply swift swift community announcement went public swift mailing list last month sparked immediate reaction swift broader developer community comment ranged across rather large set conjecture diverse idea ibm announcement may actually mean serverside swift development led ibm decision developer hinted vapor competing framework kitura ibm framework serverside swift development gaining traction making kitura le compelling choice others pointed competitor language rust go successful swift server went far suggest could end swiftontheserver story argument kind counterargument could thought twitter offered similar landscape clarify thing really stand infoq taken chance speak chris bailey former senior technical staff member working runtime technology swift one two ibm contributor left swift server work group along ian partridge infoq could describe past involvement serverside swift project main contribution project chris bailey wider ibm team involved open source swiftorg project since announced early day primarily making core swift language apis viable option linux server environment included working swift language dispatch concurrency library foundation api library form swift runtime also launched swift server work group sswg bring together various community group working server framework collaborate common set core library expanding server ecosystem outside swiftorg community also created kitura framework ecosystem library tool around provide complete microservices framework everything needed run cloudnative application infoq kitura wellestablished framework contributor release year think remains great option developer wishing use swift even ian partridge left project bailey kitura thousand downloads day number large enterprise using production talked publicly using ibm still supporting kitura existing commercial agreement reducing contribution onward development new feature provides space opportunity wider community engage working enable interested party community pick technology like open source project long term success dependent active community around one user also willing contribute technology consume hope make kitura community led project continue flourish infoq status swift linux need done opinion make competitive player platform bailey swift great technology one stand firmly shoulder giant new language designed built fully knowledge gone adopted best aspect language also good fundamental characteristic use server heritage focus used mobile device also mean low memory footprint benefit fast startup also valuable running server big question always whether cross chasm something io mobile developer use build fullstack backend frontend bff mobile apps general purpose server technology used wider set use case swift benefit greatly embedded part apple ecosystem also provides challenge organic growth lot dependency apple capability server ecosystem requires example almost swift developer use apple xcode ide fantastic support developing io device including ability run locally emulator environment would great add support writing server code allows developer develop directly containerized environment local ide supporting simple integration xcode development tool appsody open governance open ecosystem enables community contribute solve problem use case important apple working hard address issue make swift open help build server ecosystem recently stared pick pace tom doron driving force apple promoting server ecosystem swift server work group leading apple effort server space additionally ted kremenek recently posted road swift describes strong statement intent step expand ecosystem make open including driving focus around fledgling language server protocol lsp project enable ides better support swift development infoq since serverside swift kitura launched serverside native language arena seen rise go rust rust especially seems direct competitor swift least term focus safetyfirst see language stack bailey go rust swift often grouped together modern native language typesafe compiled native language seen modern replacement c c term programming language swift young first appeared mid first release open source project official support linux nt occur september making year ago contrast go year old rust year old mean significant head start go found real niche system language used core infrastructure cloud technology like kubernetes well developing cli rust still finding niche certain extent lot interest driven web assembly swift obviously little behind adoption curve last year altconf presented serverside swift state union discussed current level adoption serverside swift one thing showed comparison size package ecosystem swift nodejs age whilst swift behind nodejs age nowhere near far behind might expect fundamentally swift server lot potential would fantastic see potential convert success widescale adoption follow evolution serverside swift official forum infoq continue bring significant story concerning audience
57,Lobsters,swift,Swift programming,Literals and Type Inference in Swift,https://medium.com/@stevenpcurtis.sc/literals-and-type-inference-in-swift-af9c49f035fc,literal type inference swift,inferring type literal,inferring type literalsliterals inferred swift depends rather context created sometimes feel unlike absolute used programmingthe reason defined protocol take look expressiblebyintegerliteral indepthlet number number inttypelet arraynumbers array int typeso far good int double conform expressiblebyintegerliteral type make much difference define int arraylet doublenumber doublenumber doubletypelet arraydoubles type arraydoubles array doubletype mix type arraylet arraymixed type arraymixed array double typewhich mean swift inferred type whole array double despite fact first element array doublemore actually define int doublelet adouble double adouble doublewhich casting operation rather type inference swift work
58,Lobsters,swift,Swift programming,Using Type Erasure to Build a Dependency Injecting Routing Framework in Swift,https://swiftrocks.com/using-type-erasure-to-build-a-dependency-injector-in-swift.html,using type erasure build dependency injecting routing framework swift,using type erasure build dependency injecting routing framework swift context type erasure compiler really care type erasing closure nt unsafe forceunwrapping using type erasure build dependency injector preparing environment registering dependency type erasing initializers may interested know exactly apple handle swiftui subviews finishing touch retrieving conclusion go,using type erasure build dependency injecting routing framework swift january swift typesafe namespaced language find certain task really hard complete point ca nt determine type handled mostly generic involved using automatic dependency injector example let see generic argument closure erased trick compiler compiling code would otherwise claim impossible clearly nt usual swiftrockscompilerfeaturedeconstruction article take exciting look treatment methodsclosures property used context bypass one swift compiler annoying compilation error context type erasure programming language support generic type erasure process abstracting constrained generic type inside unconstrained nongeneric type passed around freely nt know necessary consider shape protocol shape protocol shape struct circle shape struct triangle shape assuming developing image editor sort user create shape could store user latest created shape like var usershapes shape func userdidcreate shape shape usershapesappend shape swift work perfectly constraint shape protocol contained self requirement like presence method check shape bigger another shape type protocol shape func isbigger thanshape shape self bool case approach storing shape would fall apart compiler unable represent shape without knowing underlying type var usershapes shape ca nt error protocol shape used generic constraint self associated type requirement great type safety bummer little shape app even though presence underlying type necessary access inner method nt necessary store fix could store array would unable cast back original type unless tried possibility shape yikes var usershapes func userdidcreate shape shape usershapesappend shape work ca nt easily use shape problem surface protocol contained generic constraint associated type compiler really care multiple efficient way solve problem going interesting know error exist really problem compiler answer really error exist inside ide mean prevent making silly code mistake think access control property like public private good example concept absolute impact final binary end everything accessible everywhere inside ide compiler force access control convention followed least able write code used way intended used issue generic constraint similar compiler know underlying type shape runtime swift typesafe safety reason ca nt determined compile time ca nt done ide complete opposite objectivec could easily whatever wanted big cost compiletime safety type erasing closure bypass problem use concept type erasure instead representing stored shape abstract constrained boring shape anyshape type constraint class anyshape let value init shape shape selfvalue shape nt defining array case yes consider would happen needed call isbigger method array shape type erasure abuse fact init method already constrained create unconstrained abstracted version closure property class anyshape let value let isbigger bool init shape shape selfvalue shape selfisbigger return shapeisbigger thanshape even though shape protocol still constrained putting one inside anyshape class allow freely move around context knowing underlying type unnecessary var usershapes anyshape func userdidcreate shape shape usershapesappend anyshape shape func sortsimilarshapes shape anyshape anyshape return shapessorted nt unsafe forceunwrapping type erasure closure often relies force casting proper generic type indeed unsafe fact one way solve problem would simply treat everything instead putting constraint protocol first place would bad choice clear reason swift enforces type safety precisely code work properly predictable type erasure relies want restrict usage place underlying type predictable type erasure often initializer exposed usage controlled internally guarantee forceunwraps never fail previous snippet example would assumed anyshapes sortsimilarshapes abstraction type using type erasure build dependency injector using concept let see build dependency injector automatically fetch feature initializer instantiate relevant argument need environment would useful first place dependency injector often used routing mechanism allowing one uiviewcontroller push another one without explicitly instantiate push practice allows create apps screen pushed anywhere without manually route dependency forward rely singleton uiviewcontroller still regular initializer dependency injector completely abstract process calling let assume concept feature protocol contains associatedtype answer dependency feature build method receives dependency generates uiviewcontroller related feature public protocol feature associatedtype dependency static func build dependency dependency uiviewcontroller let create hypothetical featureone depends hypothetical httpclientpersistence module combo class httpclient class persistence enum featureone feature struct dependency let client httpclient let persistence persistence static func build dependency featureonedependencies uiviewcontroller return featureoneviewcontroller dependency dependency regular io app architecture assuming hold instance dependency could manually create push feature code func startfeatureone let deps featureonedependencies client client persistence persistence let feature featureonebuild dependency deps navigationcontroller pushviewcontroller feature animated true want start featureone somewhere nt access dependency could definitely use singleton app would take massive hit term testability ideal solution use exact structure abstract process initializing feature uiviewcontroller preparing environment registering dependency abstract feature initializer first need able generate dependency create dependency protocol protocol dependency extension httpclient dependency extension persistence dependency order call feature dependency struct initializer need access instance dependency dependency injector allow determine instance generated simplicity let assume one global instance reused feature common way store global instance use store class handle dependency dictionary since building dependency injector purpose managing app flow let assume routerservice class able register dependency store public final class routerservice dependency var store store public init register dependency self public func register dependency dependency storeregister dependency final class store var dependency string func get dependencytype ttype let name string describing dependencytype return dependency name func register dependency dependency let name string describing type dependency dependency name dependency notice routerservice also dependency interface viewcontrollers use navigate app appdelegate register dependency inject service first screen fake splash case uiapplicationmain class appdelegate uiresponder uiapplicationdelegate var window uiwindow let routerservice routerservice func application application uiapplication didfinishlaunchingwithoptions launchoptions uiapplicationlaunchoptionskey bool routerserviceregister httpclient routerserviceregister persistence let splash splashviewcontroller routerservice routerservice selfwindow uiwindow frame uiscreenmainbounds selfwindow rootviewcontroller splash selfwindow makekeyandvisible return true route splashviewcontroller featureone without direct access dependency type erasing initializers ideally want routerservice navigate method handle desired feature type func navigate feature tofeature ttype fromview viewcontroller uiviewcontroller let deps let viewcontroller tbuild dependency deps viewcontrollernavigationcontroller pushviewcontroller viewcontroller animated true last two line straightforward massive problem dealing associatedtype inside generic method simply nt know feature dependency struct nt know exactly dependency generic constraint wo nt able create instance however beginning article seen use type erasure abstract constrained type unconstrained one even generic closure concept abstract dependency constrained initializer closure receives routerservice plain store instead let take another look initializer featureone dependency struct dependency let client httpclient let persistence persistence swift closure type initializersmethods closure mean practice featureonedependencies client persistence stored used httpclient persistence featureonedependencies closure let initializer featureonedependenciesinit httpclient persistence featureonedependencies generic term treated u v closure type erase something routeservice understands abstract closure unconstrained store closure type erasure fetch registered instance u us create v call anyinitializer public final class anyinitializer public let build store public init dependency u dependency v function escaping u v build store let storeget tself let u u storeget uself return function u assuming access store proper dependency registered generate instance dependency initializer fulfills u v constraint let erasedinit anyinitializer featureonedependenciesinit let dependency erasedinit routerservicestore featureonedependencies nt fulfill constraint example feature three dependency would need additional generic argument feature dependency would need generic argument represents final result unfortunately swift nt support variadic generic mean anyinitializer need support multiple initializers varied size public final class anyinitializer public let build store public init function escaping build store return function public init dependency u function escaping u build store let storeget tself return function public init dependency u dependency v function escaping u v build store let storeget tself let u u storeget uself return function u public init dependency u dependency v dependency w function escaping u v w build store let storeget tself let u u storeget uself let v v storeget vself return function u v look weird may interested know exactly apple handle swiftui subviews unfortunately problem swift language finishing touch retrieving anyinitializer complete routerservice navigate method need able retrieve feature dependency anyinitializer adding feature protocol public protocol feature associatedtype dependency static var dependenciesinitializer anyinitializer get static func build dependency dependency uiviewcontroller implement featureone simply need pas around dependency initializer static var dependenciesinitializer anyinitializer return anyinitializer dependenciesinit finally allows navigate method access passing inner store argument func navigate feature tofeature ttype fromview viewcontroller uiviewcontroller let deps tdependenciesinitializerbuild store tdependencies let viewcontroller tbuild dependency deps viewcontrollernavigationcontroller pushviewcontroller viewcontroller animated true routerservice added one feature argument relevant uiviewcontroller push feature without needing direct access dependency routerservicenavigate tofeature anotherfeatureself fromview self nice complement anyinitializer constrained dependency argument guaranteed never misconfigured feature compiler would fail build otherwise conclusion go shown routerservice related component simplified version navigation framework tested ifood evolved structure use relies codable route routehandlers instead directly invoking feature allowing smart deep link structure backend dictate app flow go type erasure nice way temporarily tell compiler stop typechecking code allows conceive sort complex structure without giving type safety long careful used
59,Lobsters,swift,Swift programming,IBM Stops Work On Server-Side Swift,https://www.i-programmer.info/news/98-languages/13369-ibm-stops-work-on-server-side-swift.html,ibm stop work serverside swift,information swift org related article swift add generic support swift improves string handling swift released apple launch swift playground apple open source swift apple new language swift swift open source top language stasis go swift weekly newsletter r feed twitter facebook linkedin comment comment iprogrammerinfo,ibm stopped work serverside swift news announced swift forum member told ibm team leader ian partridge technical architect chris bailey leave swift server workgroup swift launched apple easier alternative objective c incorporates best idea language c javascript aim easy use made open source apple linux build added point ibm worked porting major foundation library swift linux ibm went develop kitura serverside framework written swift aim giving swift developer way create server component apis web application kitura continued developed recent release october commercial support offered ibm announcement made regarding future kitura seems likely ibm longer funding work kitura given two ibm developer ian partridge chris bailey main designer driver behind kitura serverside framework developed swift including vapor smokeframework developed amazon three vapor seems popular kitura speculation behind ibm decision swift community understandably worried ibm decision step away swift serverside development pointed chris lattner original creator swift work google google already experimental work using swift may way forward information swift org related article swift add generic support swift improves string handling swift released apple launch swift playground apple open source swift apple new language swift swift open source top language stasis go swift informed new article programmer sign weekly newsletter subscribe r feed follow u twitter facebook linkedin comment make comment view existing comment using disqus email comment comment iprogrammerinfo
60,Lobsters,swift,Swift programming,Native Applications with Racket,https://defn.io/2020/01/04/remember-internals/,native application racket,remember use racketgui proof concept ddhotkey swift work racket core server run core notarization would io lobster,couple day ago released native macos application called remember small keyboarddriven application stashing away notesreminders later one cool thing programming nerd perspective completely native cocoa application whose frontend built swift core business logic racket use racketgui started proof concept used racket gui realized write bunch objectivec ffi code get ui look way wanted carbon copy spotlight seemed like would pain try integrate ddhotkey add support launching login package easy distribute also unsure could notarize distribution macos catalina later swift know swift particularly well like much find apple documentation lackluster xcode surprisingly buggy renaming class associated file fails rename file disk cause xcode fail silently example mind documentation bad core cocoa code open sourcesource available least could look implementation try understand going importantly plan support window linux mean writing core portable language going minimize amount work well difference implementation platform work racket core run custom jsonrpc server listens command stdin sends response stdout using racket raco exe raco distribute command core get built native executable copied swift app resource folder swift application run core subprocess startup communicates via pipe rpc command asynchronously handled core core may also send asynchronous notification frontend let know entry due notarization took couple hour figure get everything notarized enable app sandboxing frontend core application figure via trial error entitlement necessary realize needed separate set entitlement core application comapplesecurityinherit entitlement whatever reason let subprocess inherit parent entitlement meaning also explicitly assign core application allow jit allow unsigned executable memory entitlement else process would get killed sigint red herring error message executable valid bundle identifier would see porting platform go far happy approach result fast built rpc infrastructure easily copy code project writing business logic racket mean iterate quickly writing gui code using native tool platform advantageous term look feel distribution io unfortunately rpc approach break io allowed run subprocesses approach could work building app shared library linking rpc inprocess think approach could work racket would able target feasible fortunately racket able run top chez scheme already backends many platform including might possibility future myfreeweb pointed lobster already supported
61,Lobsters,swift,Swift programming,Remember: Stash distractions for later,https://github.com/bogdanp/remember,remember stash distraction later,remember buying copy build requirement firsttime setup building license,remember remember tool stashing distraction away later bind hotkey default whenever something unexpected pop say suddenly realize need stock milk hit hotkey type buy milk hit return hour later get reminded need go buy milk find remember useful please consider buying copy application open source providing source code want user able see code running even change build want vein free read build run application device please nt share built artifact others build requirement firsttime setup raco pkg install name remember core cd cocoaremember carthage update building make cd cocoaremember xcodebuild license copyright cleartype srl right reserved
62,Lobsters,swift,Swift programming,Clean AppDelegate,http://blog.cyborch.com/clean-appdelegate/,clean appdelegate,make sure appdelegate single responsibility tl dr post based original work steven curtis clean appdelegate full github link cyborchcleanappdelegate,make sure appdelegate single responsibility tl dr using proxy call forwarding appdelegate split multiple class see link full code app delegate many responsibilites default including crash reporting analytics setting coredata stack notification etcthis break single responsibility principle appdelegate handle many thing steven curtishaving super clean appdelegate excellent idea always bugged everything else follows separation concern appdelegate remains bloated mess entry point o callbacksto avoid implement form strategy pattern behaviour class encapsulated using interfacesi liked idea much generalized original implementation steven work situation cleaned appdelegateswift file instead usual mess callback implementation eg application didfinishlaunching simply contains list service registered handle callback class appdelegate uiresponder uiapplicationdelegate objc public var window uiwindow objc public let service uiapplicationdelegate persistenceservice analyticsservice crashreporterservice point implement part uiapplicationdelegate need specific purpose separate service class want something related analytics app work file class analyticsservice nsobject uiapplicationdelegate func application application uiapplication didfinishlaunchingwithoptions launchoptions uiapplicationlaunchoptionskey nil bool alpha register one id else register another one endif analytics manager starttracking return true course requires bit magic behind scene work added proxy implementation exploit fact uiapplicationdelegate nsobject simply asks registered service handle callback import appservicesswiftswifth implementation appdelegate forward void forwardinvocation nsinvocation aninvocation uiresponder uiapplicationdelegate service selfservices service respondstoselector aninvocationselector aninvocation invokewithtarget service end tiny bit extra housekeeping need done specifically methodsignatureforselector respondstoselector also need venture create project clean app delegate rest easy knowledge even appdelegate separation concernsthis post based original work steven curtis clean appdelegate full github link cyborchcleanappdelegate
63,Lobsters,swift,Swift programming,Differentiable Programming Manifesto,https://github.com/apple/swift/blob/master/docs/DifferentiableProgramming.md,differentiable programming manifesto,differentiable programming manifesto table content introduction tensorflow motivation background math introduction swift numerics library additivearithmetic generic math function intelligent application mean absolute error typesafe machine learning calculus fun animation easing function game simulation euler equation navierstokes robotics rendering ray tracing history differentiation algorithm numerical differentiation difference quotient formula symbolic differentiation automatic differentiation matrix chain multiplication approach automatic differentiation embedded domainspecific language source code transformation tool tapenade adic adifor activity analysis firstclass language support bake differentiation swift maximal coverage swift language feature extensibility static warning error pursuit userdefined code transformation swift differentiable programming implementation overview document macro hygienic macro scala haskell rust scala compiler plugin scala math introduction derivative iterative optimization derivative function arbitrary input proposed solution protocol declaration attribute function type attribute differential operator detailed design differentiable data structure protocol linear approximation tangent vector differential geometry http enwikipediaorgwikipushforward differential smooth riemannian manifold tangent bundle additive group exponential map conformance simd vector type conforms compilersynthesized conformance differentiable function declaration float declaration attribute conformance subclassing make function differentiable using linear map linear map tangent space differential pushforward pullback bilinear forum discussion numericannex full implementation autograd convention derivative function differential default derivative transpose access control differentiable function type differential operator function subtyping runtime representation function type attribute type conversion function subtyping runtime representation implied generic constraint differential operator differentiation apis fastai swift notebook nondifferentiable parameter higherorder function currying differentiable curry differential operator differentialproducing differential operator pullbackproducing differential operator example usage list differential operator static analysis module example differentiable programming linear regression linear regression deep learning swift tensorflow resnet go feedforward neural network ffnn convolutional neural network cnn crosscorrelation operation recurrent neural network rnn long shortterm memory lstm future direction higherorder differentiation fa√† di bruno formula naming convention numerical computing api design guideline source compatibility effect abi stability effect api resilience protocol differential operator protocol differential operator alternative considered support differentiable programming use another language framework differentiable programming approach differentiable programming approach automatic differentiation acknowledgement,differentiable programming manifesto table content introduction proposal introduces firstclass differentiable programming swift firstclass differentiable programming includes five core addition differentiable protocol differentiable function type differentiable declaration attribute defining differentiable function derivative transpose attribute defining custom derivative differential operator eg derivative standard library differentiable programming new paradigm programming program differentiated throughout glance differentiable programming let take derivative function whose parameter result conform differentiable protocol differentiable func f x float float x x let dfdx derivative f dfdx ability get derivative program enables new world numerical computing application notably machine learning firstclass support gradientbased learning algorithm even built using standard library type float float differentiated using protocoloriented apis valuewithgradient struct perceptron memberwise differentiable var weight float random var bias float differentiable func callasfunction input float float weight input sum bias var model perceptron let andgatedata x float float x x x x let loss valuewithgradient model model float var loss float x andgatedata let ≈∑ model x let error ≈∑ loss loss error error return loss print loss modelweight modelbias differentiable programming scale full machine learning model built thirdparty library like tensorflow import tensorflow let model sequential dense float inputsize outputsize activation relu dense float inputsize outputsize activation relu dense float inputsize outputsize activation identity var classifier model let optimizer sgd classifier learningrate contextlocallearningphase training let x tensor float let tensor let gradient classifier classifier tensor float let ≈∑ classifier x let loss softmaxcrossentropy logits ≈∑ label print loss loss return loss optimizerupdate classifier along differentiation apis flexible fully dynamic differentiation based program transformation happens compiletime enables many static analysis help produce efficient program also detect common numerical programming mistake nondifferentiable function zero derivative let grad gradient x warning result depend differentiation argument always zero derivative want add withoutderivative make explicit withoutderivative firstclass differentiable programming language common runtime error machine learning become directly debuggable without library boundary simply step backpropagation using lldb debug derivative backpropagation debugging demo using lldb motivation background mathematics derivative function real variable another function computes sensitivity change output original function respect change original function argument differentiation process computing derivative see math introduction section detail derivative fundamental tool calculus application many domain notably deep learning expressive highperformance language swift great fit numerical application swift numerics library recent swift evolution proposal paved way lowlevel numerical computing swift additivearithmetic simd generic math function however highlevel numerical computing application including machine learning artificial intelligence require work believe firstclass differentiable programming big step towards highlevel numerical computing support make swift real contender numerical computing machine learning landscape differentiable programming enable intelligent application machine learning model scientific experiment physical simulation intelligent application intelligent application smart use machine learning technique enhance user experience intelligent application make prediction provide suggestion learn user preference powered differentiable programming core intelligent application function realvalued parameter differentiation used systematically optimize ie find good value parameter via gradient descent optimizing parameter via conventional algorithm typically difficult intractable example consider podcast player try automatically adjust playback speed based podcast type podcast section enum podcastcategory case comedy case news enum podcastsection case advertisement case introduction case body case conclusion struct podcaststate let category podcastcategory let section podcastsection struct podcastspeedmodel var minspeed maxspeed float var categorymultipliers podcastcategory float var sectionmultipliers podcastsection float return podcast speed multiplier prediction given podcast category section func prediction state podcaststate float let speed categorymultipliers statecategory sectionmultipliers statesection speed minspeed return minspeed speed maxspeed return maxspeed return speed podcast speed model parameter determine quickly podcast play different circumstance minspeed maxspeed categorymultipliers sectionmultipliers priori clear good parameter value different user may prefer different parameter value intelligent application could determine personalized parameter value follows let user set speed manually record observation whenever user change speed collecting enough observation search parameter value model predicts speed close user preferred speed value found offer start automatically setting speed gradient descent algorithm performs search language support differentiable programming make easy implement gradient descent pseudocode illustrating gradient descent first need objective function gradient descent minimize mean absolute error used struct observation var podcaststate podcaststate var userspeed float func meanerror model podcastspeedmodel observation observation float var error float observation observation error ab modelprediction observationpodcaststate observationuserspeed return error float observationscount next implement gradient descent algorithm var model podcastmodel let observation storageobservations language differentiates meanerror get gradient value indicating change model order decrease value meanerror let gradient gradient model meanerror observation change model direction decreased value meanerror model gradient typesafe machine learning today machine learning predominantly done dynamicallytyped language like python language concise easy use however people prefer safer programming feature like type checking static diagnostics help catch error early improve productivity differentiable programming swift enables safe expressive machine learning custom differentiable data structure declared checked compiletime thanks protocoloriented programming differentiable type generalized protocol enabling differential operator defined higherorder function constrained protocol mathematical optimization algorithm neural network optimizers also defined generically protocol work differentiable type calculus fun calculus fun differentiation swift toolbox let programmer explore fun interesting application animation easing function specify rate change parameter animation differentiation enables easy manipulation function game physic equation modeled using differentiable function game engine intelligent agent game trained using technique like machine learning enabled differentiation simulation many simulation technique fluid physical process based approximate solution equation defined term derivative like euler equation navierstokes able differentiate function important building block implementing algorithm solve equation robotics control algorithm used robotics mechanical engineering rely often higherorder derivative function model behavior joint physical system language like swift efficiently compute derivative without incurring unpredictable runtime overhead garbage collection may wellplaced run aboard robot rendering ray tracing traditional rendering system black box consume data structure scene geometry produce image physical process simulate made differentiable function building ray tracer differentiable building block unlocks application like inverse rendering going image scene geometry history differentiation algorithm three main algorithm computing derivative numerical differentiation symbolic differentiation automatic differentiation numerical differentiation numerical differentiation technique estimating derivative mathematical function using value function simplest method us difference quotient formula introduced elementary calculus course numerical differentiation easy implement generalizes higherorder derivative however estimation approach known produce inaccurate result rarely used accurate method available symbolic differentiation symbolic differentiation technique computing derivative math expression via symbolic manipulation like differentiating expression using pen paper elementary calculus technique used computer algebra system like mathematica produce inefficient code applied computer program due code bloat common subexpressions automatic differentiation automatic differentiation ad technique computing derivative function unlike symbolic differentiation operates math expression automatic differentiation operates code automatic differentiation leverage chain rule differentiation ability define temporary value program two style automatic differentiation traditional sense forwardmode ad start partial derivative input end computing partial derivative output reversemode automatic differentiation start partial derivative output end computing partial derivative input mathematically forwardmode ad corresponds fullyright association chain rule differentiation reversemode ad corresponds fullyleft association different association chain rule produce result may differ computational top fullyright association chain rule starting partial derivative input forwardmode bottom fullyleft association chain rule starting output reversemode forwardmode ad reversemode ad wellexplored forwardmode ad implemented simply overloading math operation compute original value derivative traditionally reversemode ad perceived complicated implementation typically involve nonlocal program transformation andor mutable tape data structure though recent research aim demystify subject finding optimal association chain rule differentiation analogous matrix chain multiplication problem solved time efficient algorithm also exist approach automatic differentiation practice automatic differentiation common differentiation algorithm precise efficient section summarizes approach automatic differentiation embedded domainspecific language domainspecific language dsl language designed solve problem specific domain dsl external standalone language syntax semantics like html markup language sql database query language dsl embedded within general host language dsl leverage host language construct feature define interesting behavior advantage embedded dsl include flexibility portability embedded dsl imported library example embedded dsl include react ui language embedded javascript linq query language embedded c one approach differentiable programming define embedded dsl differentiation library done via operator overloading dsl define dual number type representing pair real number derivative overload differentiable math operation compute original value derivative value struct realwithderivative floatingpoint var value var derivative extension realwithderivative static func lh self rh self self realwithderivative value lhsvalue rhsvalue derivative lhsderivative rhsderivative static func lh self rh self self realwithderivative value lhsvalue rhsvalue derivative lhsderivative rhsvalue lhsvalue rhsderivative var x realwithderivative value derivative original derivative var result x x x x x print result realwithderivative double value derivative dsl could extended useful example real type could generalized multidimensional array differentiable operation could added however embedded dsl limitation dsl functionality often restricted specific type apis dsl often use specialized abstraction rather general one simplicity enable optimization example many machine learning framework dsl support differentiation particular multidimensional array type using particular algorithm reversemode automatic differentiation extending differentiation dsl beyond limitation difficult may require extra boilerplate see typically involve boilerplate host language swift currently support limited metaprogramming reducing boilerplate code example library define automatic conformance derivation library protocol though swift provides equatable hashable codable user must write boilerplate conformance custom type limited metaprogramming capability host language currently possible define nontrivial code transformation eg reversemode automatic differentiation swift library swift code note swiftsyntax enables swift ast transformation extra indirection parsing swift code file possible evaluate transformed swift code file without general eval mechanism cope dsl require explicit program graph building andor global mutable data structure mimic effect code transformation obfuscate original transformation semantics may work well host language construct embedded dsl support subset host language feature particular differentiation dsl support native mutation eg assigning var native control flow eg construct due technical limitation even though supporting would ideal restrictingdiagnosing unsupported host language feature eg preventing dsl user using var swift difficult possible producing good diagnostics may difficult impossible dsl limited access source location information indirection like code transformation involved showing appropriate source location diagnostic message may difficult without aid compiler utility statically detecting diagnosing dataflowbased error possible source code transformation tool source code transformation tool another approach differentiable programming tool user write code select various differentiation configuration option name functiontodifferentiate independent dependent variable etc provide tool tool analyzes input code generates output code computes derivative according option historically one oldest approach automatic differentiation tool like tapenade adicadifor compute derivative fortran c code advantage source code transformation tool essentially static compiler perform static analysis input code generate optimized derivativecomputing output code example tapenade performs activity analysis determine variable need derivative tbr toberecorded analysis remove unnecessary intermediate variable differentiation however tool ideal usability user must interact external gui specify input receive textual program output external workflow extra indirection take user natural programming environment exposing toolprovided differentiation feature within language would ergonomic image tapenade web interface user specifies input program configuration option tapenade generates derivativecomputing output program firstclass language support another class differentiable programming approach integrating differentiation semantics code transformation programming language degree mainstream programming language support differentiable programming research system like add firstclass differential operator eg grad language reversemode automatic differentiation transformation compiler firstclass language support differentiation reap benefit source code transformation technique eg language coverage performant derivative code without requiring programmer use external tool welldesigned powerful differentiation primitive enable user define custom differentiation apis would otherwise possible differentiation library bake differentiation swift firstclass language support differentiation enable convenient extensible performant differentiable programming swift maximal coverage swift language feature firstclass support differentiation swift enables differentiation work nicely maximal number swift language feature including mutation control flow user differentiable programming need write restricted subset swift write normal code use differentiation extensibility firstclass language support enables extensible differentiable programming system custom type extended differentiable minimal boilerplate custom derivative function retroactively registered existing function user define custom differentiation apis using powerful primitive operator defined standard library supported type system static warning error function perform nondifferentiable operation path parameter result thus differentiated function use parameter compute result technically differentiable derivative trivially always zero language support differentiation compiler identify case statically via data flow analysis produce nondifferentiability error warning diagnostics improve productivity help user catch error ahead time librarybased differentiation approach generally provide diagnostics detail static warning error see static analysis section detailed design pursuit userdefined code transformation key code transformation enabling differentiable programming derivative code generation derivative code generation implement automatic differentiation given original function differentiate derivative function generated replacing function application original function corresponding derivative function application algorithm described detail swift differentiable programming implementation overview document language provide ability define custom code transformation macro enable syntaxbased code transformation compiletime hygienic macro macro system avoid accidental variable capture available variety language including lisp julia rust scala name example generated typesafe schema wrapper implemented using hygienic macro scala compiler plugin system enable programmer write plugins extend behavior compiler compiler plugins popular bootstrapped language like haskell rust scala plugin written language example continuationpassingstyle code transformation implemented compiler plugin scala one might make case derivative code generation differentiation better implemented custom code transformation may true theory swift yet support custom code transformation practice proposal present differentiable programming system highlevel language feature semantics derivative code generation implementation detail system custom code transformation added swift one day may possible reimplement derivative code generation using system without changing highlevel differentiable programming feature proposed math introduction derivative derivative function f measure quickly function output change make small change function input value measurement depends input x start call value measurement starting input derivative f x single variable real function function single real input single real output derivative f x summarized single real number f x f x Œµ f x f x Œµ word changing input tiny amount epsilon change output f x Œµ f x x change exactly Œµ whenever change input Œµ derivative everywhere near x f x change little change input derivative x see orange line near x f x change approximately Œµ change input Œµ derivative x see green line general derivative f x x x iterative optimization iterative optimization algorithm use derivative optimize function ie find input minimize maximize output function example simple gradient descent algorithm start arbitrary input x us derivative function x determine whether need increase decrease x decrease output function mutates x slightly along appropriate direction repeat output stop decreasing derivative function arbitrary input real world program deal data complicated single real variable fortunately mathematical theory extend derivative function nearly arbitrary input output recall original description derivative derivative function f measure quickly function output change make small change function input make sense arbitrary input output type long describe small change easy describe small change nested structure real number small change component real number example consider struct point var x float struct pointpair var point small change point might add x add small change pointpair might add add define new type capture value small change call type tangent vector term math example extension point struct tangentvector dx dy small change x respectively var dx dy float extension pointpair struct tangentvector small change respectively var pointtangentvector term tangent vector small change described word would pointtangentvector dx dy pointpairtangentvector pointtangentvector dx dy pointtangentvector dx dy term tangent vector derivative function f b function df atangentvector btangentvector word df take starting value type small change atangentvector tell resulting small change b gradient descent iterative optimization algorithm run function f float long type define tangent vector iteratively walk around different value searching value minimizes output f proposed solution push swift capability next level numerics machine learning introduce differentiable programming new language feature includes standard library apis small additive change type system differentiable protocol differentiable standard library protocol generalizes data structure parameter result differentiable function compiler derives protocol requirement implementation memberwise conformance declared extension float differentiable typealias tangentvector self struct perceptron memberwise differentiable var weight float var bias float differentiable declaration attribute differentiable declaration attribute attribute mark functionlike declaration function declaration initializers property subscript differentiable differentiable func cubed x float float x x x extension perceptron differentiable func callasfunction input float float weight input sum bias differentiable function type differentiable function firstclass value identified differentiable attribute function type differentiable function type subtype corresponding normal function type ie without differentiable attribute extended abi store metadata allows value differentiated anywhere function passed differentiable linear function type subtype corresponding differentiable function type normal function implicitly converted differentiable differentiable linear function appropriate compiletime check func addone x float float x let differentiable float float addone let differentiable linear float float addone derivative transpose attribute derivative transpose attribute used declaring custom derivative function function declaration import glibc derivative expf func x float value float differential differentiable linear float float let expf x return value differential v v differential operator differential operator apis defined standard library take differentiable function return derivative function compute derivative value standard library func derivative floatingpoint r body escaping differentiable r r ttangentvector floatingpoint differentiable func f x float float x x let dfdx derivative f dfdx detailed design differentiable data structure speaking term elementary calculus function differentiable function derivative differentiated programming language type isomorphic mathematical space function isomorphic mathematical function space differentiability depends heavily continuity smoothness point space value type example int type represents space integer discrete value function integer differentiated general type said differentiable mean one calculus value real number real vector space complex vector space differentiable character string integer full flexibility extensibility protocol introduced swift standard library generalize data structure parameter result differentiable function differentiable protocol differentiable protocol defines operation structure required type differentiated public protocol differentiable type used represent derivative respect value whose type self mathematically equivalent tangent bundle differentiable manifold represented differentiable type associatedtype tangentvector differentiable additivearithmetic tangentvector tangentvectortangentvector move self along given direction riemannian geometry equivalent exponential map move self geodesic surface along given tangent vector mutating func move along direction tangentvector closure produce zero tangent vector capture self case zero tangent vector self equal tangentvectorzero case zero tangent vector depends information self shape ndimensional array type differentiable programming memoryefficient define custom zerotangentvectorinitializer property return closure capture us necessary information create zero tangent vector example swift struct vector var scalar float var count int scalarscount init repeating repeatedelement float count int extension vector differentiable typealias tangentvector vector noderivative var zerotangentvectorinitializer tangentvector let count selfcount return tangentvector repeating count count noderivative var zerotangentvectorinitializer tangentvector get extension differentiable tangent vector move along zerotangentvector modify self noderivative var zerotangentvector tangentvector zerotangentvectorinitializer specifically differentiable generalizes type satisfy following requirement realworld use case function type differentiable besides type function differentiability also depends function body value type updated based derivative value full flexibility differentiable type required vector space example differentiable neural network layer store bool flag addition differentiable parameter intuitively differentiableconforming type allows one calculus value elementary calculus derivative realvalued function point slope tangent line point tangent line best linear approximation differentiated function near input value definition applies vectorvalued function split coordinate function derivative vectorvalued function certain point called tangent vector beyond real number vector space widely accepted mathematical framework differential geometry generalizes calculus beyond euclidean space bringing idea mathematical framework swift standard library swift compiler differentiable programming becomes flexible expressive ever image showing two differentiable manifold sphere spheroid http enwikipediaorgwikipushforward differential map œÜ carry every point manifold manifold n pushforward œÜ carry vector tangent space every point tangent space every point n mathematically speaking type conform differentiable considered smooth riemannian manifold differentiating function manifold derivative value vector tangent bundle manifold type tangentvector associated type tangentvector required conform additivearithmetic additive group property zero necessary initializing accumulating derivative value move along method equivalent mathematical notion exponential map take tangent vector eg derivative move value along direction specified tangent vector geodesic surface manifold vector space tangent vector vector space original differentiable space move along equivalent vector addition mathematical optimization algorithm gradient descent make use method public extension differentiable self tangentvector mutating func move along direction tangentvector self direction zerotangentvector property return tangent vector calling move along vector modify self zero tangent vector often used initialization mathematical optimization tangent vector initially zero modified iteratively property may different tangentvectorzero tangent vector depend instance property self eg count property array differentiable conformance conforming type differentiable tell swift change value type differentiated make function type compatible differentiation apis standard library floating point numeric type vector type including float double simd vector type extended conform differentiable tangentvectors equal besides numeric type collection numeric type also powerful data structure differentiable programming example array type standard library conforms differentiable conditionally element type conforms differentiable make possible differentiate function array make easy express dynamic differentiable algorithm similarly common container type standard library optional dictionary result also made differentiable via conditional protocol conformance struct array element extension array differentiable element differentiable note arraytangentvector array array used concatenation therefore satisfy additivearithmetic conformance constraint public struct tangentvector differentiable additivearithmetic public typealias tangentvector self differentiable public var element elementtangentvector differentiable public init element elementtangentvector selfelements element public mutating func move along direction tangentvector index self move along elementtangentvector directionelements noderivative public var zerotangentvectorinitializer tangentvector zeroinits map zerotangentvectorinitializer tangentvector zeroinitsmap struct dictionary key hashable value extension dictionary differentiable value differentiable public struct tangentvector differentiable additivearithmetic public typealias tangentvector self differentiable public var element key valuetangentvector differentiable public init element key valuetangentvector selfelements element public mutating func move along direction tangentvector index self move along valuetangentvector directionelements noderivative public var zerotangentvectorinitializer tangentvector key selfkeys let pair zip key sequence first zero next return tangentvector dictionary uniquekeyswithvalues pair enum optional wrapped extension optional differentiable wrapped differentiable public struct tangentvector differentiable additivearithmetic public typealias tangentvector self differentiable public var value wrappedtangentvector differentiable public init value wrappedtangentvector selfvalue value public mutating func move along direction tangentvector let value directionvalue self move along value noderivative public var zerotangentvectorinitializer tangentvector switch self case nil return tangentvector nil case let x return zerotaninit xzerotangentvectorinitializer tangentvector zerotaninit compilersynthesized conformance numerics machine learning highlevel data structure neural network layer model formed smaller component stored property structure type class type order use type differentiation one must extend type conform differentiable protocol luckily need done manually compiler automatically synthesizes conformance memberwise differentiable conformance declared synthesis condition compiler automatically synthesizes implementation differentiable protocol requirement struct class type condition synthesis type must declare conformance differentiable memberwise attribute protocol name either type declaration extension file stored property conforming type must either var conforms differentiable marked noderivative attribute nondifferentiable let stored property marked noderivative treated noderivative compiler emits warning fixit ides asking user make attribute explicit default synthesis default compiler synthesizes nested tangentvector structure type contains tangentvectors stored property marked noderivative word noderivative make stored property included type tangent vector synthesized tangentvector effective access level original type declaration property synthesized tangentvector effective access level corresponding original property move along method synthesized body call move along pair original property corresponding property tangentvector similarly memberwise derivation possible zerotangentvectorinitializer synthesized return closure capture call stored property zerotangentvectorinitializer closure memberwise derivation possible eg custom userdefined tangentvector type zerotangentvectorinitializer synthesized tangentvectorzero closure example struct foo differentiable u differentiable memberwise differentiable x differentiation property var x var u noderivative var customflag bool noderivative let helpervariable compiler synthesizes struct tangentvector differentiable additivearithmetic var x ttangentvector var utangentvector mutating func move along direction tangentvector xmove along directionx ymove along directiony noderivative var zerotangentvectorinitializer tangentvector xtaninit xzerotangentvectorinitializer ytaninit yzerotangentvectorinitializer tangentvector x xtaninit ytaninit shortcut synthesis certain case ideal keep self tangentvector separate type obvious example following condition met self declared conform additivearithmetic stored property declared conform additivearithmetic noderivative stored property case compiler make tangentvector type alias self method move along synthesized default implementation already exists struct point real memberwise differentiable memberwise additivearithmetic x differentiation property var x compiler synthesizes typealias tangentvector self noderivative var zerotangentvectorinitializer tangentvector xtaninit xzerotangentvectorinitializer ytaninit yzerotangentvectorinitializer tangentvector x xtaninit ytaninit differentiable function declaration heart differentiable programming language ability express differentiable function abstract manifold operation way floating point addition differentiable programming flexible extensible language feature swift compiler agnostic actual mathematical special knowledge standard library operator float distinguish primitive operation normal function function differentiated respect certain differentiableconforming parameter satisfies one following requirement base case linear respect parameter base case derivative function respect parameter exists code recursive case function call initializer call subscript access property access variable assignment along path parameter result differentiated differentiable declaration attribute differentiable declaration attribute used mark function declaration initializers property subscript differentiable one entity marked differentiable compiler attempt differentiate respect parameter including implicit self parameter conform differentiable protocol one specify explicit parameter via wrt clause eg differentiable wrt x differentiable wrt self x generic algorithm one also provide whereclause specify generic constraint parameter result make function differentiable generic constraint satisfied eg differentiable wrt x scalar floatingpoint differentiable differentiable respect x func silly x float n int float print running silly x n return sin co x computed property getters behave like method accept exactly one argument self computed property marked differentiable compiler attempt differentiate getter respect self differentiable also applied explicit getter declaration extension float differentiable var reciprocal float self among language construct stored property least methodlike stored value userdefined getter however access stored property considered projection self therefore stored property marked differentiable differentiated function well however explicit differentiable necessary public property public structs class support library evolution implicitly synthesized compiler parent type differentiable conformance synthesized compiler userdefined public struct vector memberwise differentiable differentiable okay though compiler synthesized public var x float conformance subclassing protocol requirement class member made differentiable differentiable attribute semantically mean member guaranteed differentiable conformance implementation inheritance must maintain differentiability protocol dispatch differentiable attribute used protocol requirement differentiable protocol requirement requires conforming type implement requirement differentiable body respect specified parameter conforming implementation required marked differentiable attribute unless public public protocol layer differentiable associatedtype input differentiable associatedtype output differentiable differentiable wrt input self func callasfunction input output struct perceptron memberwise differentiable layer var weight float var bias float func callasfunction input float float weight input sum b protocol hierarchy one override differentiable protocol requirement differentiable attribute declares differentiability respect parameter public protocol module differentiable associatedtype input associatedtype output differentiable differentiable wrt self func callasfunction input output public protocol layer module input differentiable differentiable wrt self input func callasfunction input output example type declared conform layer protocol refined callasfunction method omit differentiable wrt self attribute method implementation use differentiable wrt self input differentiable differentiable protocol requirement allowed use whereclause differentiable attribute simplify programming model protocol requirement override powerful class dispatch differentiable nonfinal class method property subscript overridden subclass implementation overriding implementation must differentiable original overridden declaration marked differentiable methodsubscript call property access dynamically dispatched differentiated derivative subclass implementation used class superclass differentiable func foo x float float xsum class subclass superclass differentiable override func foo x float float x x sum make function differentiable using derivative transpose function differentiableconforming parameter result made differentiable extending function either associated derivative function linear transpose word derivative function transpose function provide differentiability function derivative attribute used marking function producing custom derivative another function hence making function differentiable transpose attribute used marking function transposing another function hence making function linear protocol requirement class methodpropertysubscript made differentiable via derivative function transpose function defined extension protocol requirement marked differentiable made differentiable derivative transpose declaration protocol extension dispatched call member differentiated derivative transpose always one provided protocol extension linear map linear map fundamental concept differentiation differentiating function two differentiable manifold certain point produce linear map tangent space point input manifold tangent space corresponding point output manifold linear map called differential pushforward applies chain rule compute directional derivative gradient hand computed linear map called pullback transpose differential transposition thought transposing matrix representing linear map important function used chaining derivative implemented linear map provided transpose eg scalar multiplication matrix transposition matrix multiplication gradient computed differential transposed make original function linear define transpose function transpose attribute specifies original function typing rule function declaration fixed transpose type multiple transpose function transpose original function differently eg respect different parameter transposing different generic constraint etc given original function declaration transpose function type determined following configuration parameter transpose respect additional generic constraint make original function linear type transpose function configuration function take one argument whose type original function result type return result correspond original function parameter transposed respect definition however rough definition difference among toplevel function instance method static method linearity parameter linearity parameter parameter respect function linear transpose attribute accepts wrt argument specifies set linearity parameter original function wrt specified linearity parameter default parameter wrt argument derivative attribute parameter index self tuple parameter index self one linearity parameter specified parameter index must ascending self must first parameter exists linearity parameter must type conforms differentiable additivearithmetic satisfies self selftangentvector linearity parameter include original function parameter parameter must taken front parameter list transpose function argument label original nonlinearity parameter must preserved transpose function argument label named freely multiple linearity parameter useful label element result tuple distinguish transpose respect different parameter toplevel function note since transpose function derivative function difficult name need referenced directly make function unnamed base name underscore yet valid official swift language developer differentiable programming feature prototype pitch change swift evolution func foo differentiable additivearithmetic x z ttangentvector transpose respect parameter making foo linear respect parameter transpose foo func differentiable additivearithmetic v x z ttangentvector transpose respect original parameter x making foo linear respect x transpose foo wrt func differentiable additivearithmetic z v ttangentvector transpose respect original parameter x z making foo linear respect x z transpose foo wrt func differentiable additivearithmetic v x z ttangentvector static method transpose static method exactly like toplevel function except must also defined static method type implicit self parameter linearity parameter metatypes conform differentiable additivearithmetic extension mytype static func foo differentiable additivearithmetic x z ttangentvector extension mytype transpose respect parameter making foo linear respect parameter transpose foo static func differentiable additivearithmetic v x z ttangentvector transpose respect original parameter x making foo linear respect x transpose foo wrt static func differentiable additivearithmetic z v ttangentvector transpose respect original parameter x z making foo linear respect x z transpose foo wrt static func differentiable additivearithmetic v x z ttangentvector numeric addition operator additivearithmetic linear multiplication operator numeric bilinear ie linear respect parameter made differentiable standard library extension floatingpoint self differentiable additivearithmetic self tangentvector transpose static func v self self self v v transpose wrt transpose wrt static func lh self rh self self lh rh shown transpose function may defined type extension protocol extension generic constraint original declaration make original function linear extra generic constraint satisfied moreover transpose function defined perparameter due nature bilinearity x flat plane x fortunately transpose function respect parameter vector calculus transpose function become le trivial example hypothetical tensor type two transpose function defined tensortransposed tensor transposition method matmul matrix multiplication function extension tensor scalar floatingpoint differentiable transpose transposed wrt self func tensor selftransposed transpose matmul wrt func floatingpoint differentiable tensor v tensor tensor matmul v ytransposed transpose matmul wrt func floatingpoint differentiable x tensor v tensor tensor matmul xtransposed v instance method transpose static method exactly like toplevel function except linearity parameter include self must defined instance method type linearity parameter include self must defined static method type extension mytype func foo differentiable additivearithmetic x z ttangentvector extension mytype transpose respect parameter making foo linear respect parameter transpose foo func differentiable additivearithmetic v x z ttangentvector transpose respect original parameter x making foo linear respect x transpose foo wrt func differentiable additivearithmetic z v ttangentvector transpose respect original parameter x z making foo linear respect x z transpose foo wrt func differentiable additivearithmetic v x z ttangentvector transpose respect original parameter self making foo linear respect self transpose foo wrt self static func differentiable additivearithmetic x z v mytype ttangentvector transpose respect original parameter self x z making foo linear respect self x z transpose foo wrt self static func differentiable additivearithmetic v self mytype x z ttangentvector linearity generic requirement transpose function additional generic constraint called linearity generic requirement linearity generic requirement usually serve purpose making generic parameter type conform differentiable additivearithmetic linearity generic requirement functionally equivalent clause differentiable attribute func foo u v x u z v w transpose respect x z requiring v conform differentiable additivearithmetic equal corresponding tangentvector type transpose foo wrt x z func differentiable additivearithmetic u v differentiable additivearithmetic u v w x z v ttangentvector vtangentvector v example many floatingpoint operation linear addition subtraction linear multiplication bilinear linear respect argument extension floatingpoint self differentiable self tangentvector inlinable transpose func v self self self v v inlinable transpose func v self self self v v inlinable transpose wrt transpose wrt func x self v self self return x v complex differentiation representable system complex number behave differently real number vector forum discussion additional conjugate operation flip sign imaginary component since complex number yet defined standard library extended complex number type defined numericannex library differentiable full implementation implementation adopts autograd convention derivative function complex argument result define derivative nonholomorphic primitive struct complex base floatingpoint numeric var real base var imaginary base differentiable linear base differentiable base basetangentvector init real base imaginary base selfreal real selfimaginary imaginary extension complex memberwise differentiable base differentiable base basetangentvector extension complex differentiable base differentiable base basetangentvector func complexconjugate complex complex real real imaginary imaginary simd vector also differentiable mathematically represent vector space simd operation defined simd protocol requirement derivative operation defined generally protocol extension simd extension simd self differentiable tangentvector simd scalar binaryfloatingpoint self selftangentvector transpose wrt transpose wrt static func v self x self self v x additionally concrete type conforming simd extended conditionally conform differentiable additivearithmetic simd conforming type tangentvector associated type equal self extension simd n additivearithmetic scalar binaryfloatingpoint extension simd n differentiable scalar differentiable binaryfloatingpoint scalartangentvector binaryfloatingpoint public typealias tangentvector simd n subscript defined simd conforming type transpose well extension simdscalar self differentiable binaryfloatingpoint transpose subscript func index int simd n self var result simd n self zero result index self return result full implementation simdvectorswift simdvectortypesswiftgyb tensorflow branch derivative function derivative function parameter original function return linear differential function addition original value computing original value differential efficient way differential closure capture anything need original computation important flexibility performance following example floating point exponential function expf imported c standard library derivative function marked derivative make expf differentiable function import glibc derivative expf func x float value float differential differentiable linear float float let expf x return value differential v v typing rule function declaration fixed derivative type multiple derivative function differentiate original function differently eg differentiating respect different parameter differentiating different generic constraint etc given original function declaration derivative function type determined following configuration parameter differentiate respect aka differentiability parameter additional generic constraint make original function differentiable type derivative function configuration function take original function parameter return tuple original result labeled value differential labeled differential differential linear map differentiable linear function take tangentvector nested type type original function parameter differentiate respect return tangentvector nested type orgiinal function result type differentiability parameter derivative attribute accepts wrt argument specifies differentiability parameter wrt specified derivative function differentiating original function respect parameter hence producing differential take original function parameter type tangentvector type wrt argument derivative attribute parameter name parameter index tuple multiple parameter name index differentiability parameter must type conforms differentiable derivative function argument label must match original function parameter name match original function however wrt argument derivative attribute referring parameter name must use parameter name derivative function func foo differentiable x z derivative respect parameter derivative foo func differentiable x z value differential differentiable linear ttangentvector ttangentvector ttangentvector ttangentvector derivative respect x derivative foo wrt x func differentiable x z value differential differentiable linear ttangentvector ttangentvector derivative respect x z derivative foo wrt x z func differentiable x z value differential differentiable linear ttangentvector ttangentvector ttangentvector one concrete example sinf c standard library made differentiable defining derivative retroactively canimport darwin import func darwinsinf else import func glibcsinf endif imported public func sinf float float derivative sinf public func x float value float differential differentiable linear float float value sinf x differential v cosf x v differentiability generic requirement derivative function additional generic constraint called differentiability generic requirement differentiability generic requirement usually serve purpose making generic parameter type conform differentiable differentiability generic requirement functionally equivalent clause differentiable attribute func foo u v x u z v w derivative respect x z requiring v conform differentiable derivative foo wrt x z func foo differentiable u v differentiable x u z v value w differential ttangentvector vtangentvector wtangentvector example elementaryfunctions protocol introduced defines generic elementary function nonlinear defining derivative using derivative attribute protocol requirement extension conforming type differentiable elementary function public protocol elementaryfunctions static func sqrt x self self static func co x self self static func asinh x self self static func exp x self self static func x self self static func log x self self static func pow x self self self public extension elementaryfunctions self differentiable floatingpoint self selftangentvector inlinable derivative sqrt static func x self value self differential differentiable linear self self sqrt x dx sqrt x dx inlinable derivative co static func x self value self differential differentiable linear self self co x dx sin x dx inlinable derivative asinh static func x self value self differential differentiable linear self self asinh x dx x x dx inlinable derivative exp static func x self value self differential differentiable linear self self let ret exp x return ret dx ret dx inlinable derivative static func x self value self differential differentiable linear self self let ret x return ret dx exp ret dx inlinable derivative log static func x self value self differential differentiable linear self self log x dx x dx inlinable derivative pow static func x self self value self differential differentiable linear self self self pow x dx dy let l pow x dx let r pow x log x dy return l r default derivative transpose protocol extension class definition class extension providing derivative transpose protocol extension nonfinal class member considered providing default derivativetranspose member type conform protocol inherit class inherit default derivativetranspose original member differentiable attribute default derivativetranspose implicitly added conformingoverriding implementation protocol p func foo x float float extension p derivative foo x func x float value float differential float float value foo x differential struct p func foo x float float let let derivative x sfoo x protocol requirement class member marked differentiable considered differentiability customization point mean conformingoverriding implementation must provide corresponding differentiable attribute cause implementation differentiated inherit default derivativetranspose without differentiating implementation add default differentiable attribute protocol p differentiable func foo x float float extension p derivative foo x func x float value float differential float float value foo x differential struct p differentiable default inherits default derivative pfoo func foo x float float let let derivative x sfoo x access control derivative transpose function provide differentiability function access level differentiability controlled precisely access modifier derivativetranspose function function differentiability provided derivativetranspose function access scope differentiability identical derivativetranspose function access scope example fileprivate derivative function bswift override original function derivative bswift file aswift internal func foo x float float x x let dfdxa derivative foo dfdxa file bswift derivative foo fileprivate func x float value float differential differentiable linear float float value foo x differential let dfdxb derivative foo dfdxb file cswift let dfdxc derivative foo dfdxc differentiable function type differentiability fundamental mathematical concept applies declaration function initializers subscript property also function type swift function firstclass value function type passed around applied converted important part differentiable programming able define differential operator custom algorithm differentiable function swift type system extended able express differentiable function firstclass value differentiable function type special function type different runtime representation normal function type subtype nondifferentiable function type parameter type result type function subtyping runtime representation subtyping function type already exists swift primarily used representing different foreign calling convention language interoperability function type function pointer type c eg int int imported swift function type convention c attribute eg convention c int int parameter type return type converted corresponding swift one function type also subtypes function type parameter type result type without convention c attribute example implicitly convert convention c function value swift function value use directly argument higherorder function map c file int addone int x return x int addonefunctionpointer int addone swift equivalent let addonefunctionpointer int int addone swift file import c file global variable addonefunctionpointer imported convention c int int map addonefunctionpointer one main difference swift function value c function value runtime representation c function capture value context defined runtime representation c function value pointer function memory swift function however capture value context thus contains pointer heapallocated sometimes stackallocated context storing captured value differentiable programming differentiable function type contain information nondifferentiable counterpart differentiable function contains original function pointer efficiently converted called like original function type also contains derivative function called function differentiated function share context linear map differentiable definition whose differential point need store derivative function linear transpose function instead differentiable function type attribute differentiable attribute function type specifies function differentiability like differentiable function declaration differentiable linear attribute specifies function linearity respect differentiation linear map infinitely differentiable therefore differentiable linear subtype differentiable differentiable requires enclosing function type differentiable parameter result parameter result must conform differentiable protocol unless marked noderivative differentiable linear requires closing function differentiable vector space parameter result parameter result unless marked noderivative must conform differentiable additivearithmetic satisfy self selftangentvector type conversion subtyping relation among differentiable linear differentiable non differentiable function type allow function different type conditionally convertible conversion always succeed conversion function declaration func differentiable function value succeeds function differentiated conversion differentiable function value non differentiable function value always succeeds conversion non differentiable function value differentiable function value always fails function body opaque compiler coercing function declaration differentiable function value function declaration implicitly coerced differentiable function value contextual differentiable function type conversion succeed either function declaration marked differentiable declaration attribute function declaration defined module function differentiated marked differentiable neither condition met function differentiated thus converted differentiable function value case compiler produce error func addone x float float x let differentiable float float addone okay let differentiable linear float float addone okay let differentiable linear float float coshf error coshf different module marked differentiable func mysin x float float sin x let differentiable float float mysin okay let differentiable linear float float mysin error differentiating mysin linear map sin linear func addoneviaint x float float float int x let differentiable float float addoneviaint error differentiating addoneviaint int x differentiable upcasting non differentiable function shown function subtyping runtime representation subsection differentiable function value runtime representation contains original function along extra information allows function differentiated transposed differentiable linear differentiable differentiable linear function value called like non differentiable function differentiable linear function value implicitly converted differentiable one implicitly converted non differentiable one func addone x float float x let differentiable linear float float addone let differentiable float float let float float differentiable function also converted function identical except parameter marked noderivative func addone x float float x let differentiable float float float float addone let differentiable noderivative float float float float let differentiable noderivative float float noderivative float float implied generic constraint declaration generic higherorder function function type marked differentiable parameter result us generic parameter parent function declaration type inference add implicit generic constraint make differentiable function type parameter type result type conform differentiable explicit generic constraint func foo differentiable u differentiable v differentiable f differentiable u v implied constraint differentiable u differentiable v differentiable func foo u v f differentiable u v similarly parameter result marked differentiable linear implicit generic constraint add additional constraint make differentiable linear function type parameter type result type conform differentiable additivearithmetic satisfy self selftangentvector explicit generic constraint func foo differentiable additivearithmetic u differentiable additivearithmetic v differentiable additivearithmetic f differentiable linear u v ttangentvector utangentvector u vtangentvector v implied constraint differentiable additivearithmetic u differentiable additivearithmetic v differentiable additivearithmetic ttangentvector utangentvector u vtangentvector v func foo u v f differentiable linear u v extending type system ability represent differentiable function firstclass value user able define arbitrary algorithm data structure deal differentiable function value including arbitrary higherorder function require argument differentiable function differential operator eg derivative described differential operator differentiation apis section differentiable higherorder function collection eg arraydifferentiablereduce data structure store differentiable function property neural network layer store activation function eg dense neural network trainer object store loss function eg learner fastai swift notebook nondifferentiable parameter like function declaration differentiable attribute differentiable function value also differentiable respect subset parameter expressed part type information differentiable differentiable linear function type using noderivative attribute parameter differentiated respect default parameter differentiated respect noderivative attribute specified parameter differentiable function type value function type differentiable linear respect parameter let differentiable float float float let differentiable linear float float float let differentiable linear float noderivative float float let differentiable noderivative int float noderivative int float float differentiability parameter function type important type conversion part subtyping rule differentiable differentiable linear function type subtype function type noderivative parameter originally let differentiable float float float differentiable float noderivative float float differentiable noderivative float float float differentiable noderivative float noderivative float float higherorder function currying defined differentiable function type attribute requires non noderivative argument result conform differentiable attribute however one exception type argument result function type eg differentiable differentiable u v need differentiate higherorder funtions mathematically differentiability differentiable u v similar differentiable differentiable u v differentiating either one provide derivative respect parameter u example firstorder function type corresponding curried function type firstorder function type curried function type differentiable u v differentiable differentiable u v differentiable noderivative u v differentiable u v differentiable noderivative u v differentiable u v curried differentiable function formed like curried nondifferentiable function swift func curry u v f differentiable u v differentiable differentiable u v x f x way work compiler internally assigns tangent bundle closure capture variable tangent bundle existentially typed closure context typeerased swift theory behind typing rule published differentiable curry differential operator core differentiation apis differential operator differential operator higherorder function take differentiable function input return derivative function evaluate derivative value differentialproducing differential operator among differential operator two base apis valuewithdifferential transpose used implementing differential operator differentiation apis return body x differential body x func valuewithdifferential r x body differentiable r value r differential differentiable linear ttangentvector rtangentvector compiler builtin body x return transpose linear map body func transpose r body escaping differentiable linear r differentiable linear r compiler builtin x body x common differential operator one compute directional derivative differential operator defined take differentiable function whose parameter real number func valuewithderivative floatingpoint r x body differentiable r value r derivative rtangentvector ttangentvector floatingpoint let value df valuewithdifferential x body return value df ttangentvector func derivative floatingpoint r x body differentiable r rtangentvector ttangentvector floatingpoint valuewithderivative x body derivative func derivative floatingpoint r body escaping differentiable r rtangentvector ttangentvector floatingpoint return x derivative x body pullbackproducing differential operator unlike directional derivative gradient computed pullback based differentialproducing differential operator valuewithdifferential valuewithpullback defined returning original value transpose differential valuewithgradient defined evaluating pullback function differentiated return real number func valuewithpullback r x body differentiable r value r pullback differentiable linear rtangentvector ttangentvector let value df valuewithdifferential x body return value transpose df func valuewithgradient r floatingpoint x body differentiable r value r gradient ttangentvector rtangentvector floatingpoint let value pullback valuewithpullback x body return value pullback rtangentvector func gradient r floatingpoint x body differentiable r ttangentvector rtangentvector floatingpoint return valuewithgradient x body gradient func gradient r floatingpoint body escaping differentiable r ttangentvector rtangentvector floatingpoint return x gradient x body example usage apis designed work nicely swift trailing closure syntax example training simple deep learning model differentiate loss respect model classifier producing tangent vector represents partial derivative respect differentiable property trainable model parameter model let gradient classifier classifier tensor float let ≈∑ classifier x let loss softmaxcrossentropy logits ≈∑ label print loss loss return loss optimizerupdate classifier along list differential operator static analysis differentiable programming swift aim provide best static compiler diagnostics help user catch mistake beyond error diagnostics compiler standard library equipped static analysis marker apis help user write differentiable code explicit annotation nonobvious nondifferentiable case crossmodule opacity swift library distributed module provide api interface opaque binary format client code use importing library compute derivative function marked differentiable provided linear transpose function derivative function function marked way without defining custom derivative example try differentiate sinf derivative api compiler produce error message compiletime instead producing zero derivative let derivative x sinf x error expression differentiable sinf x note differentiate function marked differentiable defined module sinf x nondifferentiable type conversion calling function convert value nondifferentiable type convert back make function longer differentiable compiler able detect case provide error message let derivative x double int x error function differentiable let derivative x note differentiate nondifferentiable result want add withoutderivative double int x accidental data flow mistake even obvious nondifferentiable operation path parameter result like nondifferentiable type conversion still possible mistype variable cause numerical computation incorrect compiler able leverage dependency analysis determine whether derivative always zero warns user let grad gradient x double squareroot warning result depend differentiation argument always zero derivative want use withoutderivative make explicit double squareroot withoutderivative example differentiable programming linear regression linear regression attempt fit line best fit set data point two different way finding solution iterative closed form method iterative method use gradient descent slowly find better better value slope yintercept basic set data point consisting x value pair model would look like following struct perceptron memberwise differentiable var weight float var bias float differentiable func callasfunction input float float weightsdot input bias train model data set would look like following let iterationcount let learningrate float var model perceptron weight zero bias iterationcount var loss valuewithgradient model model float var totalloss float x data let pred model x let diff pred totalloss totalloss diff diff float datacount return totalloss learningrate learningrate modelmove along iismultiple print iteration iteration avg loss loss float datacount deep learning swift tensorflow numerics machine learning library us proposed differentiable programming feature swift tensorflow used implement many machine learning model simple image classification model like resnet advanced model using monte carlo tree search power go game engine feedforward neural network ffnn neural network parameterized function approximator take input produce output parameterized weight neural network composed layer smaller building block parameterized function loss function cost function measure difference output neural network versus expected output neural network improve via training network applied training data inputoutput pair parameter updated derivative respect loss function feedforward neural network simple neural network output layer fed input next layer multilayer perceptron example feedforward neural network composed multiple dense layer performs output activation matmul weight input bias import tensorflow struct multilayerperception layer memberwise differentiable var dense float inputsize outputsize activation relu var dense float inputsize outputsize activation relu var dense float inputsize outputsize activation softmax differentiable func callasfunction input tensor float tensor float input convolutional neural network cnn convolution neural network feedforward neural network performs crosscorrelation operation sliding dot product input crosscorrelation operation encodes spatial locality translation invariance making cnns suited application like image recognition simple script implement convolutional neural network classifying handwritten digit import tensorflow original paper gradientbased learning applied document recognition yann lecun l√©on bottou yoshua bengio patrick haffner http note implementation connects feature map second convolutional layer additionally relu used instead sigmoid activation struct lenet layer memberwise differentiable var float filtershape padding activation relu var float poolsize stride var float filtershape activation relu var float poolsize stride var flatten flatten float var dense float inputsize outputsize activation relu var dense float inputsize outputsize activation relu var dense float inputsize outputsize activation softmax differentiable func callasfunction input tensor float tensor float let convolved input return flatten convolved recurrent neural network rnn recurrent neural network feedforward neural network wrapped loop sequence input feedforward neural network within loop usually referred cell rnn rnn cell like neural network layer callasfunction method differentiable respect self input input element sequence input rnn recurrent neural network cell protocol rnncell layer input rnncellinput timestepinput state output rnncelloutput timestepoutput state input time step associatedtype timestepinput differentiable output time step associatedtype timestepoutput differentiable state may preserved across time step associatedtype state differentiable zero state var zerostate state get cell long shortterm memory lstm network used widely natural language processing speech processing lstm cell struct lstmcell scalar tensorflowfloatingpoint rnncell memberwise differentiable var fusedweight tensor scalar var fusedbias tensor scalar noderivative var stateshape tensorshape fusedweightshape var zerostate state state cell tensor zero stateshape hidden tensor zero stateshape typealias timestepinput tensor scalar typealias timestepoutput state typealias input rnncellinput timestepinput state typealias output rnncelloutput timestepoutput state struct state memberwise differentiable var cell tensor scalar var hidden tensor scalar differentiable func callasfunction input input output let gateinput inputinputconcatenated inputstatehidden alongaxis let fused matmul gateinput fusedweight fusedbias let batchsize hiddensize fusedshape fusedshape let fusedparts fusedsplit count alongaxis let inputgate updategate forgetgate outputgate sigmoid fusedparts tanh fusedparts sigmoid fusedparts sigmoid fusedparts let newcellstate inputstatecell forgetgate inputgate updategate let newhiddenstate tanh newcellstate outputgate let newstate state cell newcellstate hidden newhiddenstate return output output newstate state newstate since rnn loop wrapped around cell implemented generic struct cell generic parameter conforms rnncell struct rnn cell rnncell layer typealias input celltimestepinput typealias output celltimestepoutput var cell cell init cell autoclosure cell selfcell cell differentiable wrt self input func callasfunction input celltimestepinput celltimestepoutput var currenthiddenstate zerostate var timestepoutputs celltimestepoutput timestep input let output cell input timestep state currenthiddenstate currenthiddenstate outputstate timestepoutputsappend outputoutput return timestepoutputs using generic one compose rnn different rnn cell type different rnn type defined library simply creating type alias typealias simplernn scalar tensorflowfloatingpoint rnn simplernncell scalar typealias lstm scalar tensorflowfloatingpoint rnn lstmcell scalar future direction higherorder differentiation distinct differentiation higherorder function higherorder differentiation refers taking derivative derivative function natural next step firstorder differentiation capability proposed higherorder differentiation designed implemented various different way tradeoff performance usability complexity intuitively higherorder differentiation enable calling differential operator result differential operator eg let f derivative derivative derivative x pow x require differential operator derivative return differentiable function hence semantically changing differentiable mean infinite differentiability func derivative floatingpoint u differentiable f differentiable u differentiable u floatingpoint ttangentvector x differential x f since derivative implemented term derivative implemented term valuewithdifferential derivative valuewithdifferential would need marked differentiatiable respect x argument differentiable wrt x func derivative floatingpoint u differentiable x body differentiable u u utangentvector floatingpoint ttangentvector valuewithdifferential x body differential differentiable wrt x func valuewithdifferential floatingpoint u differentiable x body differentiable u u value u differential differentiable linear ttangentvector utangentvector differentiate valuewithdifferential need able differentiate return value tuple original value differential respect x argument kneejerk solution differentiate derivative function generated differentiation transform compiletime lead problem example repeatedly differentiate function whose body unavailable differentiable function contain derivative function dynamically many order would require serializing sil code part differentiable function running differentiation transform runtime alternatively single closedform formula compiler generate differentiation transform without performing runtime compilation using large function representation question difficult answer due complexity mathematical formula eg fa√† di bruno formula static compilation currently exploring different theoretical practical approach find beautiful design would help u deliver best differentiable programming language naming convention numerical computing api design guideline encourages naming easytolearn beginner unsurprising expert numerical computing full math terminology notation finding good name math concept always easy consider formula gated recurrent neural network mathematical variable need name code consider following name wih variable var wih abbreviated name may difficult learn beginner var inputhiddenweight descriptive name may unfamiliar expert accustomed math notation name best hard say naming precedent exists standardizing naming convention math terminology important numerical computing becomes prominent swift source compatibility feature change existing apis new implicit function conversion added type system slightly increase type checking complexity observed source compatibility breakage far effect abi stability feature addition abi specifically differentiable function representation added must kept stable effect api resilience feature add differentiable protocol differential operator standard library public apis introduce addition standard library differentiable protocol differentiable protocol contains necessary requirement type differentiated without breaking api possible add extension differentiable protocol add new requirement default implementation differential operator differential operator eg derivative gradient added standard library lightweight toplevel higherorder function apis renamed moved namespace without breaking abi alternative considered support differentiable programming believe firstclass differentiable programming big step towards making swift real contender numerical computing machine learning landscape differentiable programming enable intelligent application machine learning model scientific experiment physical simulation use another language framework differentiable programming dynamic language like python julia established library support differentiable programming possible interoperate library via swift feel firstclass differentiable programming swift leap ahead expressivity usability safety approach differentiable programming see approach automatic differentiation overview comparison automatic differentiation approach firstclass language support differentiation enable convenient extensible performant differentiable programming swift librarybased approach acknowledgement many people influenced design implementation differentiable programming feature author would like thank people sorted alphabetically last name contribution form inspiration idea discussion code bikeshedding gogul balakrishnan james bradbury steve canon casey chu conal elliott roy frostig doug gregor dominik grewe dmitri gribenko joe groff sylvain gugger tim harley matthew johnson chris lattner dougal maclaurin john mccall bart van merri√´nboer slava pestov anthony platanios gordon plotkin alexey radul brennan saeta parker schuh dimitrios vytiniotis
64,Lobsters,swift,Swift programming,Tutorial series demonstrating how to built a retro first-person shooter from scratch in Swift,https://github.com/nicklockwood/RetroRampage,tutorial series demonstrating built retro firstperson shooter scratch swift,retro rampage new video tutorial series objcio background tutorial part separation concern part maze motion part ray casting part texture mapping part sprite part enemy action part death transition part target practice part performance tuning part sliding door part secret part another level part sound effect part powerups inventory part pathfinding part headsup display part title screen part computer aided design reader exercise bug changelog experiment experiment pr reading acknowledgment nat brown pj cook lode vandevenne fabien sanglard zapsplatcom http wwwzapsplatcomlicensetypestandardlicense aseprite tip jar,retro rampage new first chapter retro rampage available video tutorial series produced great folk objcio truly guest presenter retro rampage tutorial series learn build wolfensteinlike game scratch swift initially game targeting iphone ipad engine work platform run swift code modern shooter moved bit wolfenstein gridbased world going stick template reason feasible build wolfenstein engine scratch without lot complicated math without needing know anything gpus shaders simple create visualize map constructed grid avoiding complexity modeling animation tool tile grid excellent way prototype technique procedural map generation pathfinding lineofsight calculation applied complex world background ever since first played wolfenstein friend battered old back hooked firstperson shooter aspiring programmer wanted recreate seen armed grade math rudimentary knowledge basic recreating stateoftheart modern pc graphic hopelessly beyond reach two decade later thing changed iphone mobile computer many hundred time powerful dosera desktop pc swift simple powerful programming language write apps game finally importantly wolfenstein source code wizardry behind thoroughly demystified guess good time scratch quartercentury itch build fps tutorial tutorial designed completed order step build code previous one decide skip ahead project snapshot step available tutorial written assumption already familiar xcode comfortable setting io project adding new file knowledge advanced swift feature required fine used objectivec clike language part separation concern unlike apps game typically designed independent given device o swift already ported many platform outside apple ecosystem including android ubuntu window even raspberry pi first part set project minimize dependency io provide solid foundation writing fully portable game engine part maze motion wolfenstein really game projected third dimension game mechanic work exactly topdown shooter prove begin building game topdown perspective make shift firstperson part ray casting long hardware accelerated graphic greatest game programmer generation creating incredible world armed processor follow footstep bring game third dimension oldschool graphic hack called ray casting part texture mapping chapter spruce bare wall floor texture mapping texture mapping process painting wallpapering object image helping provide appearance intricate detail otherwise featureless surface part sprite time introduce monster keep player company display using sprite popular technique used add engaging content game day possible render textured polygonal model realtime sufficient detail part enemy action right monster maze little gruesome scenery bring passive monster life collision detection animation artificial intelligence hunt attack player part death transition part implement player damage giving monster ability hurt eventually kill game protagonist explore variety damage effect technique including cool wolfenstein transition called fizzlefade part target practice give player weapon fight back ravenous monster chapter demonstrate extend drawing logic handle screenspace sprite add bunch new animation figure implement reliable collision detection fastmoving projectile part performance tuning new effect added starting take toll game frame rate especially older device let take break adding new feature spend time improving rendering speed chapter find diagnose fix performance bottleneck avoiding kind microoptimizations make harder add new feature later part sliding door chapter add another iconic feature wolfenstein sliding metal door room add interesting challenge first nonstatic nongridaligned scenery game part secret time add bit intrigue introduction secret passage hidden behind sliding pushwall double zombiesquishing booby trap moving wall pose interesting problem rendering engine collision detection get find wall look like inside world look like outside part another level chapter add second level endoflevel elevator player use reach demonstrate number new technique including animated wall decoration command pattern handy substitute delegation using structs part sound effect time end silence chapter add sound effect game demonstrating stream file io minimal latency well technique positional audio part powerups inventory long game made leap powerups staple feature actionoriented game chapter add medkit new weapon player collect travel around maze part pathfinding right game zombie inhabitant follow player lineofsight chapter enhance monster intelligence adding pathfinding using algorithm chase door around corner part headsup display chapter add headsup display showing player important information many bullet got left whether die tutorial cover bunch new technique text rendering sprite sheet dynamic image tinting part title screen part add polish game form title screen adding single static screen seems simple enough provides opportunity longoverdue refactoring well enhancement nascent text rendering system introduced part part computer aided design tired laboriously laying level hand part dip tentative toe fascinating world procedural generation specifically attempt eliminate effort involved placing item level computer u also learn random number generator generate unpredictable output repeatable fashion reader exercise tutorial includes reader exercise section end exercise intended optional challenge reader check followed understood material far completing exercise prerequisite starting next tutorial question arranged ascending order difficulty first usually trivial modification existing code second requires bit thought third may require significant change enhancement game engine advanced question eventually answered either later tutorial experiment pr see stuck one exercise completed exercise want show solution feel free open pr github issue bug occasionally made retrospective fix tutorial chapter published called later tutorial directly impact new code good idea periodically check changelog fix experiment uptodate tutorial ca nt wait next chapter might like check experiment pr github experiment demonstrate advanced feature nt quite ready explore tutorial yet reading exhausted tutorial experiment still eager learn resource might find useful acknowledgment like thank nat brown pj cook invaluable feedback first draft tutorial thanks also lode vandevenne fabien sanglard never actually spoken whose brilliant explanation ray casting wolfenstein engine formed basis inspiration tutorial series sound effect used project obtained zapsplatcom may used free attribution see http wwwzapsplatcomlicensetypestandardlicense detail graphic drawn badly aseprite tip jar started tutorial series thinking would take day many month later end sight realize may bit naive found interesting please consider donating caffeine fund
65,Lobsters,swift,Swift programming,How Swift Achieved Dynamic Linking Where Rust Couldn't,https://gankra.github.io/blah/swift-abi/,swift achieved dynamic linking rust could nt,swift achieved dynamic linking rust could nt finally shipped swift basic concept type layout abi pertain rust layout type calling convention function name symbol com objectivec swift developer cover topic fairly well documentation swift documentation annotation used manage abi resilience stride extra inhabitant alloca crucially object safety problem protocol type sysv abi p b swift let take reference thing nt exist withunsafemutablepointer solved slayer callback coroutines rust arc also safely provides weak reference punt swift actual doc,swift achieved dynamic linking rust could nt alexis beingessner november nt follow swift development abi stability one ambitious project possibly defining feature finally shipped swift result something find endlessly fascinating think swift pushed notion abi stability farther language without much compromise decided write bunch interesting highlevel detail swift abi complete reference swift abi rather abstract look implementation strategy really want know exactly allocates register mangle name look somewhere else also context writing naturally inclined compare design swift rust two language helped develop also folk like complain rust nt bother abi stability think looking swift help elucidate article broken two section background detail feel free skip detail comfortable problem inherent producing robust dynamically linked system interface nt comfortable basic concept type layout abis calling convention recommend reading article wrote basic concept type layout abi pertain rust also huge thanks swift devs answering question correcting misunderstanding know lot people nt really follow swift hard understand really accomplished without context language like tl dr language shape exists replace objectivec apple platform oriented application development natively interoperates objectivec actual class inheritance distance similar rust higherlevel interface generic closure enums payload unsafe escape hatch lifetime automatic reference counting arc used complex case simple functionscoped mutable borrows inout aheadoftime aot compiled emphasis value semantics structsprimitives value mutable xor shared stored inline collection implement value semantics copyonwrite cow using arc class mutably shared boxed using arc undermining value semantics even cause data race emphasis thing working language may freely allocate make thing work generic code may polymorphically compiled field may secretly gettersetter pair arc cow easily result surprising performance cliff ton overloading syntactic sugar nt worry fully understanding dig really important one implication go swift developer talk abi stability exactly one thing mind want native system apis macos io written swift dynamically link includes dynamically linking single systemwide copy swift standard library ok dynamic linking purpose system compile application abstract description interface without providing actual implementation produce application work properly part implementation missing run properly must tell system dynamic linker interface need implementation call dynamic library dylibs assuming everything go right implementation get hooked application everything work dynamic linking important system apis allows system implementation updated without also rebuilding application run application nt care implementation get long conforms interface built also significantly reduce system memory footprint making every application share implementation library apple care lot mobile device since swift aot compiled application dylib make bunch assumption communicate side long linked together assumption call abi application binary interface since need consistent long period time abi better stable dynamic linking goal abi stability mean end purpose abi regarded thing layout type calling convention function name symbol define detail never break stable abi dynamic linking performed ignoring trivial case dylib application built together abi stability irrelevant clear abi stability nt technically property programming language really property system toolchain understand let look history greatest champion abi stability dynamic linking c major os make use c dynamically linked system apis conclude c stable abi catch compile c code dynamic linking ubuntu compiled artifact wo nt work macos window heck even compile window wo nt work window abi something defined platform even something necessarily need documented platform vendor require use particular compiler toolchain happens implement stable abi turn actually reality swift stabilized abis apple platform actually properly documented xcode implement devs best break opposed documenting lot work shipping understandably higherpriority thankfully nt really care detail difference abis macos io implementation apple keep saying swift abi wo nt problem case nt platform vendor provide stable abis lot language well turn language nt completely irrelevant although abi nt part c relatively friendly concept many language nt understand c friendly abi stability let look much le friendly big brother c templated c function implementation dynamically linked provide system header provides following declaration simply ca nt use template typename bool process value symbol c template monomorphically compiled fancy way saying way use copypaste implementation template replaced particular value want call process int need implementation available copypaste int replacing needing implementation available compiletime completely undermines concept dynamic linking perhaps platform could make promise precompiled several monomorphic instance say symbol process int process bool available could make work function would nt really meaningfully templated anymore two explicitly blessed substitution would valid would little difference simply providing header containing bool process int value bool process bool value header could include template implementation would really guaranteeing particular implementation always valid future version header could introduce new implementation robust system would assume application could using either perhaps even time different c macro inline function think fair say template little important c comparison platform provide dynamically linked version c standard library everyone us hand c standard library nt useful dynamically link literally called standard template library spite issue many others c dynamically linked used abistable way end looking lot like c interface due limitation idiomatic rust similarly hostile dynamic linking also us monomorphization abistable rust would also end really supporting clike interface rust largely embraced fact focusing attention concern made seemingly contradictory claim swift similar feature rust rust feature make hostile dynamic linking swift great dynamic linking secret lie two language diverge dynamism rust static explicit language reflecting sensibility developer early adopter swift developer preferred much dynamic implicit design made turn hiding implementation detail work runtime really friendly dynamic linking whod thought dynamic linking dynamic really interesting swift way dynamic actually fairly trivial dynamically link system implementation detail hidden behind uniformity dynamism extreme case could make system everything opaque pointer one function sends thing string containing command system would simple abi indeed big push direction microsoft embracing com apple embracing objectivec way build system interface simple robust abis swift nt swift try hardest generate code comparable would expect rust c accomplishes make abi interesting worth noting swift devs disagree rust c codegen orthodoxy one major way care much code size amount executable code produced specifically care lot making efficient usage cpu instruction cache believe better systemwide power usage apple championing concern make lot sense given suite batterypowered device harder third party developer care naturally control small part software running device typical benchmarking strategy nt really capture change made application run faster making background service le responsive hurting battery life hence c rust inevitably pushing towards code fast say thing seem like compromise made abi stability sake genuinely regarded desirable never got great concrete number concern swift foundation folk would definitely love see wave apple employee reading swift developer cover topic fairly well documentation giving simplified version focusing basic motivation resilience core concept behind swift dynamic linking story mean thing default abis resilient breaking implementation change apipreserving way nothing save apibreaking change allows developer create dynamically linked idiomaticfeeling library still easily evolve implementation contrast c make possible create stable abi proper vigilance foresight c requires commit many abi detail interface upfront even uncertain nt want commit detail change shape api hide compiled dylib swift default implicitly hiding many detail possible requiring opt guarantee adding annotation crucially annotation nt affect shape api optimizing abi cost resilience additionally abi annotation added library published without breaking old abi application compiled new annotation able use information run faster cost compatibility older version library seems swift devs ran timeresources quite reasonably cut corner department several annotation plausibly could done backwardscompatible way ultimately breaking add ah well pobody nerfect abstract let look simple library evolution example let say draft simple filemetadata interface c typedef struct size filemetadata bool getfilemetadata char path filemetadata output would called filemetadata metadata getfilemetadata mysweetfiletxt metadata printf error return printf file size lld metadatasize let say realize function also provide info last modified typedef struct lastmodifiedtime size filemetadata bool getfilemetadata char path filemetadata output oops messed abi hypothetical caller stack allocating filemetadata assuming particular size alignment additionally directly accessing size field assume particular offset struct assumption violated change nt necessarily happen common approach could taken allow change instance could reserved space struct future use made filemetadata opaque type requiring function call get field given filemetadata pointer version data opaque version unfortunately require u foresight also changing way user make use api sense api becomes le idiomatic accommodate future change additionally forever burdened complexity even eventually determine api complete enough guarantee detail swift nt require make compromise following two design totally abi compatible remaining perfectly idiomatic use public struct filemetadata public var size public func getfilemetadata path string filemetadata public struct filemetadata public var lastmodifiedtime public var size public func getfilemetadata path string filemetadata unfortunately guaranteeing layout filemetadata using frozen attribute future version would abi breaking change current design hopefully clear end document ok detail fact ignoring actual detail instead discussing high level idea behind feel free check swift documentation annotation used manage abi resilience cover lot motivation finegrain detail ca nt default type defined dylib resilient layout mean size alignment stride extra inhabitant type nt statically known application get information must ask dylib type value witness table runtime witness table swift term ultimately vtables detail table acquired laid nt really interest wo nt discus ok actually interesting swift need able generate witness table runtime deal fact generic type substitution ca nt statically predicted face dynamic linking generic code getting way ahead value witness table vtable basic stuff might want know type much like java object type used stuff like size alignment stride extra inhabitant movecopy constructor arc destructors point experience language design probably suspect result resilient type boxed passed around pointer suspicion indeed correct quite see really interesting resilient layout something application forced deal limited way inside boundary dylib implementation detail statically known type handled nt resilient inside dylib resilient struct stored inline stored stack passed around value even scalarized move outside dylib something else must done could potentially accomplish expensive type layout conversion boundary nt type layout always side resilience boundary type layout always side resilience boundary yes key insight laying thing inline actually done dynamically relative ease memory allocator pointer nt care static layout work completely untyped size alignment offset long relevant value witness table everything work basically fine dynamic value usual real major problem stack allocation llvm really nt like dynamic stack allocation yes alloca exist bit messy believe swift devs managed get working time resilient layout cousin see next section general case local variable need actually boxed onto heap convenience generically refer dynamic stack allocation boxed crucially boxing nt change layout local variable stored passed calling convention later also indirection everything still stored inline type already come indirection like array myresilientstruct myresilientclass require additional allocation consequently abi change left key detail let address looking polymorphic generic since turn quite similar also interesting unlike rust c must monomorphize copypaste implementation generictemplate substitution swift able compile generic function single implementation handle every substitution dynamically several benefit massively reducing code size massively reducing amount code must compiled allowing generic code dynamically linked polymorphic implementation ca nt inlined optimized well monomorphic one without jit swift compiler still monomorphizes thing possible seems profitable making dylib possible public api turn polymorphically compiled generic code really quite similar code handle resilient type case basic valuewitnessy property type nt statically known stack value need boxing generic code need able find generic type protocol implementation get type protocol witness table acquired using machinery use value witness table really basically problem brief aside existentials resilientpolymorphic type machinery solves big chunk object safety problem heavily limit rust trait object swift call protocol type existentials depending ask generic code actually symbol mean problem stuffed vtable resilient layout eliminates problem come dynamic value manipulation self associated type existentials really tricky case stack allocation prevent caller knowing size return value making call really mess alloca existentials get involved alloca go window actual boxing need happen also associated type function signature still prevent existentials created creates fundamental type system problem unrelated abi every instance myprotocol could different associated type ca nt let get mixed going get swift could use pathdependent type deal associated type fine normal polymorphic code since generic enforce every instance type issue existentials presence resilientpolymorphic type calling convention well first witness table resilient case type statically known implementation theoretically information need look witness table polymorphic code luxury polymorphic code need work type structs nt contain identifying runtime information worse yet polymorphic code called without providing value type caller need pas type information abstractly could pas minimal information polymorphic code look witness table really wasteful consider calling function loop instead swift actual implementation caller pas pointer every required witness table extra argument automatically handled compiler witness table handled problem passingreturning actual value main thing storing kind value register totally limit really need pas around pointer sometimes bit slower terribly huge deal given already signed dynamic linking polymorphic compilation really understand passing value need talk reabstraction resilient compilation force u use particular calling convention different would use statically instance sysv abi following would field passed register struct x z w void process vector resilient would instead passed byreference remember code work type need handle resiliently instance dynamic library defines resiliently ideally still able handle nonresiliently inside similarly polymorphicness polymorphicity thing changed context consider following swift code manipulates closure func map u input mapper u u return mapper input func mapint u input int mapper int u u return map input mapper let result mapint return assuming map mapint compiled polymorphically closure potentially different abis int bool int u u int bool abi potentially ignored discarded know passing something expects int u u abi completely hidden u naively result unfortunate conclusion closure function pointer must maximally generic abi case needed thankfully conclusion incorrect instead swift us reabstraction thunk thunk simply wrap function wrong abi function right one compiler actually generates like note real swift code ca nt explicitly talk genericsconventions way func map u input mapper u u return mapper input func mapint u input int mapper int u u let thunk u u return mapper return map input thunk let tempclosure int bool return let thunk u int u return tempclosure let result mapint thunk way everything use best possible calling convention still allowing generic one used different context even without closure passing problem reabstraction also allows single implementation used several different context without compile different version instance reabstract concrete protocol implementation polymorphic one wrapping function reabstraction thunk nice code size win believe swift devs nt technically call one reabstraction close enough happy conflate concept thunk away abi complexity basic idea resilience polymorphism affect calling convention hopefully clear abibreaking change mark type frozen removing resilient layout would change way type passed function could potentially fixed making resilience part name mangle providing resilient nonresilient version requires robust versioning info every attribute could lead huge combinatoric explosion number symbol dylib provides necessarily great idea resilient layout could generalized provide offset resilient type public field swift actually take another level public field nt actually need exist default resiliently exposed field exposed getters setter getters setter actually first class feature swift used explicitly resilience compiler implicitly introduce getters setter hide fact field physically exist case change mind computed field swift manipulated exactly way real one even without resilience library author free replace physical field computed one without changing api mandating computed access make abi stable well catch take mutable reference inout field even computed one swift let take reference thing nt exist secret materialization inouts appear argument function naturally scoped function call take reference computed field using temporary cleanup code struct mystruct public var myfield fieldty func dothething x inout fieldty var myval mystruct dothething myvalmyfield roughly compiled var myval mystruct var temp fieldty myvalgetmyfield dothething temp myvalsetmyfield temp break step allocate temporary local variable temp initialize temp getter call inoutusing function address temp feed value temp setter creates interesting difference reference rust c take reference field may point temporary valid scope call passed another interesting consequence swift mutable reference actually finalizer must executed write stick mean returned stored finalizer would lost referent would deallocated turn creates hilarious footgun many swift developer run think clever convert inout raw pointer using withunsafemutablepointer store later oops dangling however overcome limitation callback follows func dosomework callback inout float var vec callback vecx dosomework val inout float val callback course annoying noisy solved slayer callback coroutines code rewritten func dosomework inout int var vec yield vecx dosomework nifty swift make extensive use reference counting turn really expensive constantly modify count especially make collection copyonwrite cow errant reference count bump make n algorithm actually consider correctness error case data structure algorithm reasonable people may disagree help deal swift made ownership referencecounted value class part calling convention important aspect v referring caller change refcount callee owned value responsible releasing nt escape callee borrowed value responsible retaining escape since talking ownership legally required compare system rust comparison pretty straightforward move shared immutable reference inout mutable exclusive reference mut key difference due arc first foremost class break shared xor mutable reasoning effectively like using arc unsafecell rust swift collection provide cow semantics rust arc also safely provides yes indeed trivially introduce data race swift code class second swift type always implicitly cloned always upgraded owned value without ceremony said cloning swift call copying always bumping reference count nontrivial operation like copying array buffer new allocation performed mutation trigger cow note also mean trigger cow array array get two independent outer array still point inner array primed cow either side mutates third nt strictly bound passbyreference trivial bitwise copy value unfortunately weak reference require nontrivial move location tracked autonulling passed reference using keep cheap yes swift copy move constructor although currently entirely arc userdefined swift also unowned reference rust weak reference trivial move swift current design mostly something compiler internally optimize different calling convention think explicit annotation theoretically road map also special path field materialization modify return inout handle fact getters naively especially nasty nested array operation like array would always trigger huge temporary copy inner array indeed subscript operator array contains modify implementation modify makemutableandunique checksubscriptnative index let address buffersubscriptbaseaddress index yield addresspointee interestingly implementation marked inlineable actually guaranteed always work array abi detail pretty aggressively guaranteed since relatively simple fundamental type whose performance matter lot also readonly version modify read provides getter one nt strongly motivated hey nice little optimization avoid needle retainrelease resilience nifty clearly come performance overhead course swift also provides special attribute opt resilience originally intended write whole bunch actually really complex subtle really need punt swift actual doc tl dr mark thing frozen nonresilient layout exhaustively matchable inlineable nonsubclassable nonescaping bunch whacky stuff variously affect api abi subtle way already page supposed warmup something else need need stop bullet point swift reserve calleepreserved register method self argument pointer make repeated call faster cool swift exception implemented like result le like unwinding error type always boxed caller initializes swift error register exception callee set register hold boxed error pointer make error propagation really fast nt change register also nt require result actually materialized success case avoid ton copy sadly nt transfer rust well ca nt easily use native swift machinery added llvm swiftcc swift implicit box nt actually pointer think pack small value set high bit distinguish null something spent lot time messing around making reallynotpointersized thing pointersized whacky hack also messed around box pointer wide make small box trick happen never keep reality straight swift used copyarrayofself movearrayofself entry value witness table deal calling bunch copymove constructor might nothing interesting problem c replaced adding flag witness table whether type trivial copiesmoves le bloaty swift decouples size stride distinguish trailing padding actual content trailing padding show stride array properly align content trailing padding nt show size thing like enum tag neighboring field use space really neat swift actually insert bunch magical layout conversion bridging swift objectivec initially bridging lazy case collection super whacky specifically array myswifttype might nsarray containing opaque pointer type conversion performed accessed element later moved eager model really nasty expensive heavilyaccessed collection also objectidentity messy deal main piece complexity system getting witness table provides runtime reflection system spidering type metadata generic type associated type need able get witness think swift technically stabilized set enum tag packing optimization perform clue sorry eddyb zero cost abstraction really nt ever need compiled polymorphically watch pure trivia rust actually originally tried polymorphic design similar swift eventually backed difficulty became clear supporting polymorphic monomorphic compilation helped swift lot think key difference ultimately apple significant motivation mozilla pursue dynamic linking way resource throw hard problem collapse
66,Lobsters,swift,Swift programming,Swift Numerics,https://swift.org/blog/numerics/,swift numerics,swift numerics real number module error function gamma function sigmoid function dft complex number nan package future plan protocol approximate equality fixedwidth integer type issue page get involved question associated thread,excited announce new opensource project swift ecosystem swift numerics swift numerics provide building block numerical computing swift set finegrained module bundled together single swift package hope quickly fill important gap standard library existing apis unlock new domain programming swift language seeded repository two muchrequested module immediately useful computational mathematics real providing functionality complex providing complex number arithmetic let take look real number proposed api basic math function would make operation like sine logarithm available generic context accepted limitation compiler api yet added standard library sourcestable manner real module provides api separate module use right away get access improved api operation project module defines three protocol general elementaryfunctions make following function available exponential function exp expminusone logarithmic function log log oneplus trigonometric function co sin tan inverse trigonometric function acos asin atan hyperbolic function cosh sinh tanh inverse hyperbolic function acosh asinh atanh power root function pow sqrt root realfunctions protocol refines elementaryfunctions add operation difficult define implement field general real number x computes atan yx sign chosen quadrant point x cartesian plane hypot computes sqrt x x without intermediate overflow underflow erf erfc error function complement exponential function logarithmetic function gamma function gamma loggamma signgamma evaluate gamma function logarithm sign protocol use often real describes floatingpoint type equipped full set basic math function great protocol use writing generic code basic need implement numeric function suppose experimenting basic machine learning needed generic sigmoid function activation function import numerics func sigmoid real x exp x suppose implementing dft wanted precompute weight transform dft weight root unity import numerics extension real real imaginary part e static func dftweight k int n int r self self precondition k k n k range guard let n self exactly n else preconditionfailure n represented exactly let theta pi self k n return r co theta sin theta give u implementation work float double target support new basic floatingpoint type added swift like work well real significant improvement generic numerical computing swift really looking forward seeing complex number complex module build real provide complex number type swift complex number useful computation smallest algebraicallyclosed field contains rational number mean practice common equation like give root polynomial eigenvalue matrix necessarily solution real number guaranteed solution complex number seems like esoteric fact develop algorithm guarantee solution exist often useful complex number arise naturally computation working fourier transforms fourier transform real signal symmetric complex signal mean natural setting many signal processing algorithm used everything audio processing circuit simulation complex number library frequently hide detail routine use developing library critical tool available example dftweight code showed written naturally using complex import numerics extension complex e static func dftweight k int n int complex precondition k k n k range guard let n realtype exactly n else preconditionfailure n represented exactly return complex length phase pi realtype k n reason complex number important building block language standard library provide c complex c std complex fortran python complex number built right language core expect swift numerics module use iteration building feature propose part inclusion swift standard library well complex type generic underlying realtype conforms real public struct complex realtype realtype real support complex integer type well gaussian integer like complex subset actual operation perform ideal implementation operation quite different make sense force together single generic type would love see support gaussian integer added library future point separate type complex refresher complex number two component real part imaginary part special number called imaginary unit mathematics write complex number real part imaginary part b bi swift look pretty similar import complex let z complex double print zreal print zimaginary swift numerics print complex number fortran style bi b also construct complex number specifying real imaginary part let w complex double add two complex number add corresponding part print z w multiplication division little bit complicated definition follow identity let u complex double ie square root complex type conforms numeric protocol us usual division operator arithmetic complex number look like number type example function implement multiplication scaling rotation complex plane import complex func scaleandrotate z complex complex z complex let z scaleandrotate complex point worth talking little infinity nan implication multiplication division c c complex math library attempt make finegrained distinction different zero infinity nan occasionally useful mean multiplication use obvious arithmetic expression swift attempt make distinction complex number zero real imaginary part zero complex number nonfinite real imaginary part collapsed single point infinity import complex complex infinity complex nan bool true loses little bit information program make productive use distinction program performance adversely effected decision try keep around make performance impact concrete let compare throughput doubleprecision complex multiplication macbook pro data distribution c swift speedup wellscaled poorlyscaled note benchmarking measurement methodology throughput table reported unit reciprocal time mean one result produced every nanosecond smaller denominator better larger denominator twice fast benchmark perform multiplication division isolation instead measuring time compute sum set multiplication division result introduces overhead measurement overhead fall disproportionately faster operation make swift performance look worse really see simple benchmark code arithmeticbenchmarktestsswift pull request add sophisticated benchmarking welcome swift numerics need give special attention infinity faster common case value wellscaled somewhat faster even unusual case many poorlyscaled value pathological case large number infinity nan data set difference greater even larger impact division data distribution c swift speedup wellscaled n poorlyscaled n na swift numerics complex division operation exposed compiler allows greater opportunity optimization dividing many value single divisor common operation table divide whole array value single common wellscaled divisor data distribution c swift speedup wellscaled n one last trick sleeve data wellscaled use reciprocal property multiply instead brings performance speedup possible c well course swift optional semantics give easy mechanism make safe divisor wellscaled use multiply reciprocal instead division let recip divisorreciprocal return datamap recip otherwise fallback using division return datamap divisor swift numerics also give better answer complex division especially difficult following test problem baudin smith paper robust complex division scilab complex complex look simple enough scale numerator denominator problem becomes compute result hand clang using compilerrt produce c c division python complex number give result complex module give answer accurate deserve without sacrificing performance currently working patch make complex conform elementaryfunctions make usual set transcendental operation available brings complex feature parity language expect available next couple week package work package rather standard library reason major one simply everything go standard library piece swift numerics probably make way standard library time module need home part every project default goal swift numerics provides common home module centered numerical computing like swiftnio networking making package nice benefit allows u swift community develop release module schedule locked swift release allows u release module experimentation declare api stabilized future plan next month working add important additional functionality package particular focus area shapedarray protocol supporting type capable representing multidimensional homogeneous data worked already familiar concept otherwise may used numpy array python fortran matlab julia array approximate equality floatingpoint type continuing left fixedwidth integer type larger bit support project others tracked issue page swift numerics get involved love working swift numerics want get involved question use package module new swift numerics area forum related project feature especially see please file issue github page information provide use case existing issue also appreciated like help develop swift numerics jump ask question one issue throw pr start iterating together best tag good starter bug almost anything starter bug catch interest let know want work help get going question please feel free post question post associated thread swift forum
67,Lobsters,swift,Swift programming,Operator Etymology,https://jasdev.me/operators,operator etymology,operator etymology custom operator avoided custom operator reduce readability code confusion around functionality one exciting feature swift though also controversial ability define custom operator check three important box forward backward function application forward backward function composition somewhat surprisingly haskell function composition operator cousin mathematics reserved language lexical structure purescript example semigroups concatenation haskell purescript amongst others functor map post duals quite category functor law swift swift swift swift hask hask language choice language choice oop swift swift prelude opted typelift thoughtbot folk functortown applicatives talk writing recent note tie fighter monoidal functors explicit precedence group structure monadic composition binding fantastic writing lecture side effect bind swift morabbin put ergonomics terminology climbing infinite ladder abstraction matt parson mention functor matter notation thought pointfree overture part programmer introduction mathematics optic haskell lens operator onboarding focus reading section,operator etymology nov assumed audience folk working knowledge swift openness towards functional programming dancing around custom operator holywar territory swift community see subtly mentioned style guide custom operator avoided custom operator reduce readability code confusion around functionality sidestepped blog post one exciting feature swift though also controversial ability define custom operator even pointfree functional programming swift series make sure operator introduce check three important box overload operator existing meaning new meaning leverage prior art much possible make sure operator nice shape evokes semantics inventing operator solve domainspecific problem introduce operator used reused general way concern aside wonder operator dislike stem fact rarely pause outline shape pipe right arrow chosen forward function application flatmap written called bind language completely reasonable folk shy away operator build intuition around function without context symbol choice origin dive operator etymology section cover could find common operator root interpretation form best summarize concept backing inline linking additional resource feel free skip around even come back post stumble upon rogue operator wild discussion operator ergonomics introduce functional programming terminology skip last section forward backward function application start forward function application cover backward direction second might scratching head right function application simply tacking parenthesis function name calling day go make thing À¢·µí ·∂ú·µí·µê·µñÀ°·∂¶·∂ú·µÉ·µó·µâ·µà plain ol function application read like onion function say incremented value hand say fave number shoutout even prime wanted get think twice incremented let think twice though reading left right first mentally parse function name stumble upon value want apply onionness becomes apparent function toss function squared mix squared incremented squared okay squaring incremented huh okay okay incrementing ah see jasdev favorite number incremented squared notice read left right back left peeling onion ring parenthesis dear friend forward application operator right bffs folk call pipe forward short maybe sound le official define sibling swift fret stumbled upon precedencegroup associativity everyday swift way helping compiler determine order operation parenthesis omitted associativity give directionality associate multiple expression ie either left right curious association order matter think addition plain ol ints mathematician mean say operation associative back squaring incremented number read linearly instead nestedly let pretend word got rad piping forward incremented result squared backwards function application loses lefttoright toptobottom readability still allowing parenthesesfree expression usage rare usually show case primary focus transformation value applying afterthought symbol choice root f scala addition practically selfdescribing pipe forwarding role warmed let talk composition forward backward function composition snippet left repeated usage pipe forward afforded parenthesesfree linear reading came cost two might guessed since post operator etymology plottwisting thriller composition save day instead applying two function apply composition incremented squared three greaterthan sign fairly selfdescribing symbol choice operator sequence function left right reflects well taking thing opposite direction ie firsttosecond secondtothird swap spot backwards variant used composition somewhat surprisingly go direction worth noting haskell function composition operator also read right left closely resembles cousin mathematics defined g f x g f x verbally read g f swift community choice instead twofold first period reserved language lexical structure second well nonunicode keyboard layout cover symbol choice added benefit indicating directionality follows purescript example semigroups continuing arrow theme semigroup operator fret familiar semigroups semioverthetop name semicomplicated structure morethansemi step definition side semigroups plain ol set case type extra bit associative operator take two instance type return another instance operator property generally called closed probably worked semigroups without even realizing coworkers name couple set string concatenation int value ignoring overflow crash addition booleans role played either adjacent left right arrow semigroup operator prior art haskell purescript find story behind symbol choice yet intuition around semigroups smallest structure amongst others commonly run operation elaborate structure like functors applicatives nest symbol inside arrow making kind parenthesislike schema operator soon discus functor map check coast functor said phew using widely accepted colloquial term instead ad hoc yet supposedly approachable substitute another unfortunate holy war community dig bummed ergonomics terminology section short making terminology use specific community make harder folk community join flip side incur translation cost reading decadesworth research done original terminology start full definition try bring orbit swift functor structurepreserving mapping category functors likely already swift tool sequence result publisher functors let break definition starting category previously touched introductory category theory post duals f category property read thorough treatment check lecture bartosz milewski stellar threepart category theory programmer series summarizing category must following property identity arrow object composition associativity arrow swift quite technical detail break idea need bit careful still use categorytheoretic construction gain intuition around functional programming instead blindly memorizing law onto mapping part might hear folk toss around phrase functor law well originate fact functors map category careful way category involved discussing functors consider type publisher tuples name object function two arrow get sort category denote swift jasdev functors mapping category swift one great catch jedi turn map category wild know functors called endofunctors usually drop endo prefix since functional programming exclusively deal swift swift hask hask language choice language choice onto structurepreserving choice word structure recently felt reach wonder structure bunch intangible object arrow structure clicked started viewing arrow scaffolding category letting climb one object another perspective functors make sure scaffolding structure arrow source category maintained across mapping target category specifically identity arrow mapped identity arrow composition preserved across functor optional wrapped functor map type object category theoretic oopsense swift type swift function arrow function acting optionals explicitly optional wrapped typelevel function wrapped optional wrapped optionalmap standard library form method signature optional wrapped wrapped u optional u ordering make difficult see optional functor lift function another context let flip first two parameter wrapped u optional wrapped optional u go shuffling make clearer optional take plain ol wrapped u transformation make optional wrapped optional u way map dollar cent heading got turn haskell generalized map fmap read functor map across functors ie specialized type like optional sequence result publisher operator synonym inner come language function application operator haskell analog defined way semigroup schema creates context perform action function application functorial context wish someone told sooner filling secret back swift back tickescaped form valid operator definition finally come two swift alternative seems better follow suit symbol nesting inside imbalanced arrow probably make chain hard read pointfree prelude opted typelift thoughtbot folk opted cent symbol play dollar sign caret signaling lifting ordinary function functor context make noise functors touch specific functors namely applicative monad want larger view landscape type class functortown series covered applicatives applicatives warrant post leave talk writing recent note though want cover etymology behind often called tie fighter operator worry seen star war either might often hear folk call applicatives monoidal functors sound intimidating reading long intuition armlength away functors check went okay quite clicked took monoidal adjective form monoid semigroups additional requirement neutral element respect binary operator let scaffold two protocol show relationship sweat defaultprecedence used placeholder sketch thing production setting need explicit precedence group structure need associative closed requirement handled self return type matching parameter type monoid inherits semigroup tack neutral element requirement often called empty mempty monoid al empty empty must satisfy following condition instance conforming type let call arbitrary instance empty empty guess know full backstory please reach folk want nest inside semigroup format yo dawg applicatives instead followed math suit using signal combining operator two value context reduce single value context way monoids reduce two value one rephrased define zip functor applicative hand monadic composition binding two thousand post probably need double cover monad thankfully fantastic writing also swift topic bird seye category theoretic view bartosz covered lecture two operator come across working instance monadic called fish operator formally kleisli arrow bind respectively let start composition thorough introduction pointfree folk step though side effect episode functors mentioned sequence result also monad imagine wanted compose two function generic type optional sake example first optional second second optional third combine create first optional third transformation almost ordinary function composition quite get u since output first function match input second swapping second try convey restore composition need introduce intermediary binding language equal sign often read binding value named variable way iflet guardlet caselet bind swift see need intermediary binding composing monad sketch optionals using default precedence get compiling caselet line example binding needed complete chain need bind inner component firsttooptionalsecond return value pipe secondtooptionalthird implementing sequence result publisher also take similar shape operator need bind inner sequence success case element forward along next transformation onto bind shape close pseudoswift monad monad choice intuition monadic instance hand transformation act component retrieve another instance containing output transformation morabbin put response sincedeleted tweet anyone know resource story behind operator choice guessing shuffling kleisli arrow morabbin sequence binding morabbin around long kleisli arrow symbol think ergonomics terminology phew lot read full skipped around either fine going close discussion often shake considering operator team ergonomics true lose xcode autocomplete using operator named function still tooling limitation likely insurmountable since backed function implementation readability let compare namedversion compose chaining along three function firsttosecond secondtothird thirdtofourth always require parenthesis applied unfortunate operator often use associative allowing u drop first place moreover even though compose may feel approachable likely still need look signature encountering first time understand exactly ie compose verb overloaded meaning work ordinary function specific monad instance like make pause encountering new word ordinary language folk would open think twice definition come operator rule entirely since might readable first glance make sad limiting work term abstraction function within reach one existing knowledge rephrased expect learn anything new open new idea terminology alexis king put succinctly climbing infinite ladder abstraction programmer professional work technical domain absolutely belief programming like field always come easiest sometimes important sit study grok particularly complicated concept operator familiar mean throw entirely true terminology concept behind believe functional programming mathematics best taught terminology introduced structure shape observed lifting function two type function inside another context flattening nested type ability join two instance type another instance type pattern understood readily collected abstraction way generic protocol generally introduced noticing repeated behavior way around naming part frequently argued opting original mathematicsbacked name monad et form gatekeeping sure used excessively without proper introduction appear intellectual posturing speaks potential mismatch educational material assumed audience lack proper onboarding matt parson mention functor hard learn hard learn named functor renamed anything else hard time cutting student resource information currently using word functor refer concept imagine community sidestepped functor example instead went alternative like mappable two thing would likely happen would confuse folk tautologically pushing definition map even thing mapped mappable wait exactly mapping mean secondly counterintuitive using commonplace term swift would become island relative community sense gatekeeping others also cutting existing literature adding translation overhead next decade engineering swift ecosystem dense change swiftui require u think declaratively instead imperatively √† la uikit setting data flow reasonably managed functional reactive programming combine provided tool choice community paradigm require openmindedness following precedent set decadesworth research mathematics functional programming still previous learning better appreciated start etymology line eventually contribute back new abstraction help tell story etymology future engineer joining community functor matter notation thought pointfree overture operatorfree library function composition algebraic new interface chapter jeremy kun programmer introduction mathematics operatorheavy topic optic couple resource found tour history etymology haskell lens operator onboarding focus reading section
68,Lobsters,swift,Swift programming,"Apple, Your Developer Documentation is‚Ä¶ Missing",https://v4.chriskrycho.com/2019/apple-your-developer-documentation-is-garbage.html,apple developer documentation missing,assumed audience rightly pointed learning wrote made official policy,assumed audience practitioner interested lookerson software apple edit folk rightly pointed use garbage suggests problem quality existing documentation retitled post capture problem massive absence documentation see original title way slug past month trying get speed apple developer ecosystem part working rewrite project mean learning swift swiftui barely io macos apis terrible number part ecosystem entirely undocumented frankly shocking context spent last five year working actively javascript frontend application development world working first angularjs emberjs ember doc reputation pretty bad year working gone decent really good hand working angularjs year ago often threw hand quiet despair utter lack explanation occasionally inane explanation core concept thought would absolute worst massive tech company case google providing public apis could possibly wrong current state apple software documentation worst ever seen framework anywhere swift relatively well covered courtesy wellwritten wellmaintained book good news end swiftui entirely even single line explanation given type modifier swift package manager okay doc finding limit official doc difficult impossible got ground truth stack overflow question repeatedly reduced searching wwdc video transcript figure someone say something relevant whatever working frankly unacceptable ember ecosystem simple rule code get ship unless documented go rust know wrote rfc made official policy understand apple api developer often work different context open source face crunch around release tied hardware product shipping end day vending api done documented full stop given know apple approach problem individual engineer responsible writing doc even member dedicated documentation team responsible writing doc make le failure apple engineering organization job api engineering organization support consume api doubt many apple api engineer would love thing documented likewise doubt documentation team understaffed work wrong doubt apple engineering culture value even worse indictment engineering culture kind thing change level entire engineering organization apple claim interested building platform accessible brand new developer experienced grayhaired folk around since next day right even close decade software development belt fair bit language rich type system functional programming idiom stuff hard figure imagine mindbogglingly terrible experience would someone starting software coming experience language like ruby python javascript would completely impossible learn apple want developer love good developer want flee worried web everywhere microsoft coming need take seriously adopt mentality served framework language well documented done
69,Lobsters,swift,Swift programming,High Performance Numeric Programming with Swift: Explorations and Reflections,https://www.fast.ai/2019/01/10/swift-numerics/,high performance numeric programming swift exploration reflection,high performance numeric programming swift exploration reflection swift web application command line tool basemath background chris lattner swift tensorflow serious effort differentiable programming named tensor differentiate swift llvm contributed protocoloriented programming value type automatic reference counting arc common problem gc finalizers copyonwrite protocol helpful guidance generic float double gyb basic math function performance trick result using c swift package manager reduction temporary storage wart dynamic feature objectivec notation tool thought packaging installation great stride c many significant restriction aten julia challenge solution cppsharp already done twice conclusion,high performance numeric programming swift exploration reflection written jan jeremy howard past week working building numeric programming library swift wait swift io programmer use building apps nowadays swift run linux mac used web application command line tool nearly anything else think using swift numeric programming training machine learning model area many people working little information around topic week research experimentation managed create couple library achieve speed carefully optimized vectorized c code whilst concise easy use article take journey show learned use swift effectively numeric programming include example mainly basemath library provides generic math function float double optimized version various collection along way plenty say positive negative swift language someone deep emotional connection favorite programming language like see criticism might want skip post future post also show get additional speed functionality interfacing intel performance library c background generally around new year try experiment new language framework one approach worked particularly well look people built favorite language book library approach led early user delphi typescript c anders hejlsberg used turbo pascal perl larry wall used rn jquery john resig read modern javascript learnt chris lattner wrote wonderful llvm creating new deep learning framework called swift tensorflow shorten decided take look note boring swift wrapper tensorflow first serious effort seen incorporate differentiable programming deep heart widely used language hoping give u language framework first time treat differentiableprogramming firstclass citizen programming world allow u thing like write custom gpu kernel swift provide compiletime check named tensor axis name size matching differentiate arbitrary code whilst also providing vectorized fused implementation automatically thing available least yet fact early day project nearly none deep learning functionality work yet fully expect happen eventually happens confident using differentiable programming swift far better experience swift language lucky enough bump chris recent conference told interest kind enough offer help get started swift always found work matter much productivity happiness work another excellent reason spend time project chris terrifically helpful supernice thanks chris swift swift generalpurpose multiparadigm compiled programming language started chris lattner apple supported many concept objectivec main language used programming apple device chris described language syntax sugar llvm since map closely many idea compiler framework coding around year time used dozen language even contributed always hope start looking new language mindopening new idea find swift definitely disappoint swift try expressive flexible concise safe easy use fast language compromise significantly least one area personal view language used enjoyed limitation found frustrating time python slow runtime poor support parallel processing easy use c c hard use c slow compile time fast c expressive javascript unsafe unless use typescript somewhat slow easy use flexible julia poor support general purpose programming fast expressive numeric programming edit may bit unfair julia come long way since last looked java verbose getting better particularly use kotlin le flexible due jvm issue somewhat slow overall language many useful application area c f perhaps fewest compromise major programming language still requires installation runtime limited flexibility due garbage collection difficulty making code really fast except window interface via ccli say swift actually pretty good job avoiding major compromise possibly rust used seriously make informed comment best area mentioned far either know another single language make claim note also downside address last section article look briefly turn concise create new array b add every element let bamap anonymous function automatic name first parameter optionally add name type like type b inferred automatically see lot done small amount code expressive line code work array object support certain operation defined sequence swift standard library also add support sequence object even add existing swift type type library soon object get functionality free flexible much swift use mobile apps desktop apps server code even system programming work well parallel computing also handle somewhat smallmemory device safe swift fairly strong type system good job noticing done something going work good support optional value without making code verbose need extra speed flexibility generally way bypass swift check fast swift avoids thing make language slow eg use garbage collection allows use value type nearly everywhere minimizes need locking us llvm behind scene excellent support creating optimized machine code swift also make easy compiler know thing immutable avoids aliasing also help compiler optimize see often get performance carefully optimized c code easy use one area perhaps bit compromise quite easy write basic swift program obscure type issue pop mysterious error message long way real site problem occurred installing distributing application library challenging also language changing lot better information online date requires change make work said far easier use something like c protocoloriented programming main trick let swift avoid compromise use protocoloriented programming basic idea try use value type much possible language easeofuse important reference type widely used since allow use garbage collection virtual function overriding superclass behavior forth protocoloriented programming swift way getting many benefit whilst avoiding overhead reference type addition avoiding reference type avoid complex bug introduced two variable pointing thing value type also great match functional style programming since allow better support immutability related functional concern many programmer particularly javascript world recently developed understanding code concise understandable correct leveraging functional style used language like c already familiar idea defining something struct give value type using class give reference type exactly swift handle thing get protocol let mention couple fundamental automatic reference counting arc copyonwrite automatic reference counting arc doc swift us automatic reference counting arc track manage app memory usage case mean memory management work swift need think memory management arc automatically free memory used class instance instance longer needed reference counting traditionally used dynamic language like perl python seeing modern compiled language quite unusual however swift compiler work hard track reference carefully without introducing overhead arc important handling swift reference type still need use sometimes also handle memory use value type object sharing memory copyonwrite semantics embedded reference type chris also mentioned number benefit provides deterministic destruction eliminates common problem gc finalizers allows scaling system tcan want gc eliminates unpredictableunreproducible pause copyonwrite one major problem value type language something like big array want pas whole thing function since would require lot slow memory allocation copying language use pointer reference situation swift however pass reference original memory reference mutates object get copied done behind scene automatically get best performance characteristic value reference type combined refered copyonwrote rather delightfully refered doc cow yes cow face emoji cow also help programming functional style yet still allowing mutation without overhead unnecessary copying verbosity manual reference protocol value type use inheritance hierarchy get benefit objectoriented programming although still use use reference type also supported swift instead swift give u protocol many language typescript c java idea describes property method object contain first glance protocol look lot like interface instance definition basemath library composedstorage protocol describing collection wrap collection defines two property data endindex one method subscript special method swift provides indexing functionality like array protocol definition simply say anything conforms protocol must provide implementation three thing public protocol composedstorage associatedtype storage mutablecollection storageindexint typealias indexint var data storage get set var endindex int get subscript int storageelement get set generic protocol generic protocol use type marker like generic class instead use associatedtype keyword case composedstorage saying data attribute contains something generic type called storage conforms mutablecollection protocol type turn associatedtype called index must type int order conform composedstorage also say subscript method return whatever type storage element associatedtype contains see protocol provide quite expressive type system look see something also implementation provided protocol public extension composedstorage subscript int storageelement get return data set data newvalue var endindex int return datacount thing get really interesting providing implementation automatically adding functionality object conforms protocol instance entire definition basemath alignedstorage class provides arraylike functionality internally us alignedmemory often required fast vectorized code public class alignedstorage supportsbasicmath basevector composedstorage public typealias elementt public var data unsafemutablebufferpointer public required init data unsafemutablebufferpointer selfdatadata public required convenience init count int selfinit unsafemutablebufferpointer count public required convenience init array array selfinit unsafemutablebufferpointer array deinit unsafemutablerawbufferpointer data deallocate public var p mutptrt get return datap public func copy self return init datacopy see much code yet class provides functionality protocol randomaccesscollection mutablecollection expressiblebyarrayliteral equatable basevector together include hundred method map find droplast distance possible protocol class conforms basevector composedstorage provide functionality protocol extension either directly protocol turn conform incidentally may noticed defined alignedstorage class struct despite earlier hype value type important realize still situation class required apple documentation provides helpful guidance topic one thing structs yet support deinit ability run code object destroyed case need deallocate memory done object need deinit mean need class one common situation find really need use protocol want behavior abstract class swift support abstract class get effect using protocol eg code composedstorage defines data implement protocol extension therefore act like abstract property true multiple inheritance supported swift class conform multiple protocol extension sometimes refered mixins swift protocol extension share lot idea trait rust typeclasses haskell generic float double numeric programming creating library probably want transparently support least float double however swift make easy protocol called binaryfloatingpoint theory support type unfortunately three math function swift defined protocol ab max min standard math operator could course simply provide separate functionality type got deal creating two version everything user deal problem interestingly enough found discussion issue online swift library suffer issue multiple place discussed swift used much numeric programming kind issue deal btw search numerical programming code online often see use cgfloat type suffers objectivec naming convention limitation learn later provides support one float double depending system running fact cgfloat exists linux port swift rather odd created applespecific compatibility reason almost certainly something wanting use resolving problem actually fairly straightforward good example use protocol basemath created supportsbasicmath protocol extracted public protocol supportsbasicmath binaryfloatingpoint func self func logb self func nearbyint self func rint self func sin self tell swift float conforms protocol also provide implementation method extension float supportsbasicmath inlinable public func float return self inlinable public func logb float return foundationlogb self inlinable public func nearbyint float return foundationnearbyint self inlinable public func rint float return foundationrint self inlinable public func sin float return foundationsin self library code simply use supportsbasicmath constraint generic type call usual math function directly swift already provides support basic math operator transparent way anything make work thinking must major pain write wrapper function handy trick used meant computer trick use gyb template autogenerate method using python code like f binfs func f b self self end f look swift code base see trick used liberally example define basic math function hopefully future version see generic math function standard library meantime use supportsbasicmath basemath performance trick result one really cool thing swift wrapper like runtime overhead see marked inlinable attribute tell llvm ok replace call function actual function body kind zerooverhead abstraction one important feature c really amazing see concise expressive language swift let experiment see work running simple benchmark adding every element array float swift assuming already allocated array appropriate size use code note benchmark simple function basemath time block code benchmark title swift add swift add m million floating point addition millisecond pretty impressive look happens try one minor tweak benchmark title swift ptr add let swift ptr add m nearly code yet twice fast happened basemath add p property array return pointer array memory code using pointer instead array object normally swift handle complexity cow fully optimize loop like using pointer instead skip check swift run code full speed note due copyonwrite possible array move assign also move thing resize therefore grab pointer time need code still pretty clunky swift make easy u provide elegant idiomatic interface added new map method array put result preallocated array instead creating new array definition map us typealiases basemath make bit concise inlinable public func map basevector f unaryf dest selfelementtelement let psrc p let pdest destp let n count n pdest f psrc see plain swift code cool thing let u use clear concise code still get performance saw benchmark title map add map add m think quite remarkable able create simple api fast pointer code class user complexity entirely hidden away course really know fast yet compared c let next using c one really nice thing swift easy add c code write use external c library use c code simply create new package swift package manager spm pop c file source directory h file sourcesinclude directory oh btw basemath h file entirely autogenerated c file using gyb level c integration extremely rare implication huge mean every c library including functionality built operating system optimized math library tensorflow underlying c api forth accessed swift directly reason need drop c without manual interfacing code extra build step sum function c float double version similar two generated single gyb template void smaddfloat const float psrc const float val float pdst const int len int len pdst psrc val call need pas count basemath add c property array purpose alternatively could simply use numericcast result benchmark title c add smaddfloat c add m basically speed swift encouraging result show get performance optimized c using swift swift idiomatic concise swift thanks method like reduce map look much closer math equation language fast reduction let try different experiment taking sum array idiomatic swift code benchmark title reduce sum reduce sum m thing loop benchmark title loop sum size loop sum m let see earlier pointer trick help time benchmark title pointer sum let size pointer sum m well odd faster suggests getting best possible performance let switch c see performs float smsumfloat const float psrc const int len float r int len r psrc return r result benchmark title c sum smsumfloat c sum m compared performance intel optimized performance library version sum found even faster handoptimized assembler get perform better swift however need know little trick provided llvm vectorization doc compile ffastmath flag numeric programming like recommend always use least flag used experiment although also add marchnative change optimization level ofast xswiftc ounchecked xcc ffastmath xcc need flag strictly speaking addition associative due quirk floating point practice unlikely something people care default clang use strictly correct behavior mean vectorize loop simd ffastmath telling compiler mind treating addition associative amongst thing vectorize loop giving u improvement speed important thing remember good performance c code like ensure const marked everything change done code unfortunately seem currently way get swift vectorize reduction least use c get good performance limitation language optimization swift team gotten around implementing yet good news basemath add sum method array us optimized c version use basemath get performance automatically result test failure manage get pure swift reach performance c least got nice c version call swift let move another test see get better performance avoiding reduction temporary storage want function reduction sumofsquares ideally like able combine map style sum without getting performance penalty swift unoptimized reduction make work trick use temporary storage use map function store result preallocated memory pas c sum implementation want something like static variable storing preallocated memory deal locking handle contention thread avoid use thread local storage tl like language swift provides tl functionality however rather make part core language like say c provides class access threadcurrentthreaddictionary basemath add preallocated memory dictionary make available internally tempstore internal implementation unary function reduction also binary ternary version available inlinable public func sum f unaryf element selfmap f tempstore return tempstoresum use follows benchmark title lib sum sqr floatsqr lib sum sqr m provides nice speedup regular swift reduce version benchmark title reduce sumsqr reduce sumsqr m c version float smsumsqrfloat const float restrict psrc const int len float r pragma clang loop interleavecount int len r sqrf psrc return r let try benchmark title c sumsqr smsumsqrfloat c sumsqr m c implementation sum standard unary math function made available basemath call implementation simply using benchmark title lib sumsqr c sumsqr m summary whilst swift version using temporary storage calling c final sum twice fast using reduce using c another time faster wart see lot like numeric programming swift get performance optimized c convenience automatic memory management elegant syntax concise flexible language used python fastest used c actually fortran let go stack high bar idea could compare single language flexibility python speed c amazing achievement overall view general take bit code swift python write stuff want write fewer way abstract common code instance use decorator lot python use write load code use args kwargs lot new dynamic feature swift provide functionality go far zip multiple variable together swift zip pair pair multiple variable use nested parens destructure code write get type lined nicely also find swift performance harder reason optimize c c quirk around performance need use const sometimes even requiring restrict help compiler generally better documented better understood consistent also c compiler clang gcc provide powerful additional capability using pragmas omp loop even autoparallelize code said swift closer achieving combination python expressiveness c speed language used issue still aware one thing consider protocoloriented programming requires different way thing probably used long run probably good thing since learning new programming style help become better programmer could lead frustration first week issue particularly challenging swift compiler often idea source protocol type problem really ability guess type still pretty flaky extremely minor change changing name type changing type constraint defined change something used work something spit four screen error message advice try create minimal version type structure standalone test file get thing working first note however ease use generally requires compromise python particularly easy perfectly happy shoot foot swift least make sure first know untie shoelace chris told pitch building swift first place important thing optimize end end time get correct implementation whatever trying includes time pound code time debug time refactormaintain making change existing codebase enough experience yet suspect metric swift turn great performer part swift fan compromise made due apple history objectivec packaging system community lack c support precise largely part swift ecosystem fan language quite delightful ecosystem fixed situation swift programmer deal let look issue turn objectivec objectivec language developed designed bring objectoriented feature smalltalk c successful project picked next basis programming nextstep next acquisition apple became primary language coding apple device today showing age constraint imposed decision make strict superset c instance objectivec support true function overloading instead us something called selector simply required keyword argument function full name defined concatenation function name selector name idea also used applescript provides something similar allow name print mean different thing different context print page print document print page thru document applescript turn inherited idea hypertalk language created apple muchloved missed hypercard program given history surprising today idea required named argument something folk apple quite attachment perhaps importantly provided useful compromise designer objectivec since able avoid adding true function overloading language keeping close compatibility c unfortunately constraint impact swift today year situation led introduction objectivec swift provide true function overloading particularly important numeric programming really want create whole separate function float double complex number quaternion default keyword name still required lead verbose visually cluttered code apple style guide strongly promotes style coding objectivec swift style guide closely mirror rather allowing programmer really leverage swift unique capability opt requiring named argument prefixing parameter name basemath us everywhere optional argument needed another area thing get rather verbose come working foundation apple main class library also used objectivec swift standard library missing lot functionality need often need turn foundation get stuff done enjoy pleasure using elegantly designed language swift something particularly sad using access unwieldy library foundation instance swift standard library provide builtin way format float fixed precision decided add functionality supportsbasicmath protocol code extension supportsbasicmath public func string digit int string let fmt numberformatter fmtminimumfractiondigits digit fmtmaximumfractiondigits digit return fmtstring selfnsnumber self fact add functionality float double writing extension really cool ability handle failed conversion swift operator look verbosity code actually use numberformatter class foundation even accept float double awkward nsnumber type objectivec clunky workaround lack generic objectivec add nsnumber property supportsbasicmath casting swift language help support concise style f style closure concision important numeric programming since let u write code reflect closely math implementing understand whole equation glance masterful exposition much see iverson turing award lecture notation tool thought objectivec also namespaces mean project pick letter prefix add symbol foundation library still us name inherited objectivec find using type like cgfloat function like cfabsolutetimegetcurrent every time type one symbol sure baby unicorn cry swift team made surprising decision use objectivec implementation foundation library running swift apple device use native swift library linux result sometimes see different behavior platform instance unit test framework apple device unable find run test written protocol extension work fine linux overall feel like constraint history objectivec seem bleed swift programming often time happens real friction pop time however issue seem reducing hope future see swift break objectivec shackle instance perhaps see real effort create idiomatic swift replacement objectivec class library using python lot last couple year one thing always bothered many people python community ever used one language since great beginner language widely taught undergraduate result lack awareness different language thing different way choice pro con instead python world tendency folk think python way one true way seeing something similar swift way even worse swift programmer got start objectivec programmer lot discussion see online objectivec programmer writing swift style closely parallel thing done objectivec nearly nearly programming xcode almost certainly least favorite ide except wonderful swift playground feature lot advice find online show solve swift problem getting xcode thing rather writing code swift programmer writing io apps also find lot guidance lay mobile gui almost information thing like distribute command line program linux compile static library general linux support swift still new much information available use many library tool work linux time tracking problem protocol conformance trying figure optimize piece code information could find would mailing list discussion amongst apple swift language team discussion tend focus innards compiler library rather use big missing middle ground app developer discussing use xcode swift language implementation discussing modify compiler good community forming around around discorse forum http forumsswiftorg hopefully time turn useful knowledge base swift programmer packaging installation swift officially sanctioned package system called swift package manager spm unfortunately one worst packaging system ever used noticed nearly every language creating package manager reinvents everything scratch fails leverage success failure previous attempt swift follows unfortunate pattern truly excellent packaging system best perhaps still perl cpan includes international automated testing service test package wide range system deeply integrates documentation excellent tutorial much another terrific modern system conda handle languagespecific library focus python also handle automatically installing compatible system library binary manages everything home directory even need root access work well linux mac window handle distribution compiled module source spm hand none benefit system even though swift compiled language provide way create distribute compiled package mean user package install prerequisite building spm let describe build package instance use basemath remember add flag required good performance build something us way dependency handled really awkward git tag branch used dependency easy way switch local dev build packaged version like instance e flag pip conda develop command instead modify package file change location dependency remember switch back commit would take far long document deficiency spm instead work assumption useful feature appreciated whatever packaging system using probably spm hopefully someone get around setting condabased system swift start using also installation swift mess linux instance ubuntu supported different version require different installers mac swift version tied xcode version confusing awkward way command line xcode version somewhat separate yet somewhat linked way make brain hurt conda seems like could provide best option avoid since single conda package used support flavor linux mac also supported way work done get swift conda would possible say conda install swift system everything would work would also provide solution versioning isolated environment complex dependency tracking window luck old unofficial port cygwin swift run fine window subsystem linux official native window swift yet sadly excellent news front hero named saleem abdulrasool made great stride towards making complete native port entirely indepdently last day gotten point vast majority swift test suite pass c whilst apple went objectivec c object solution rest world went c eventually objectivec extension also added c create objectivec attempt unify concept across language resulting language mutant many significant restriction however nice subset language get around biggest limitation c instance use function overloading access rich standard library unfortunately swift interface c even something simple header file containing overloaded function cause swift language interop fail big problem numeric programmer many useful numeric library today written c instance aten library heart pytorch c good reason numeric programmer lean towards c provides feature needed concise expressive solution numeric programming problem example julia programmer rightly proud easy support critical broadcasting functionality language documented julia challenge c challenge elegant fast solution find something like pure c however mean large increasing number important building block numeric programming bound swift programmer serious problem write plain c wrapper c class create swift class us wrapper big boring job sure many people likely embark language shown potential way around instance c window provides work ijw interfacing ccli superset c support net even interestingly cppsharp project leverage llvm autogenerate c wrapper c code calling overhead solving problem easy swift swift us llvm already interface c objectivec perhaps better placed come great solution nearly language except perhaps julia since already done twice conclusion swift really interesting language support fast concise expressive numeric programming swift tensorflow project may best opportunity creating programming language differentiable programming first class citizen swift also let u easily interface c code library however swift linux still immature packaging system weak installation clunky library suffer rough spot due historical tie objectivec stack data science world mainly stuck using either r least pleasant language ever used beautifully designed data munging plotting library anywhere python painfully slow hard parallelize extremely expressive best deep learning library available really need another option something fast flexible provides good interop existing library overall swift language look exactly need much ecosystem need replaced least dramatically leveledup data science ecosystem speak although project seems likely create important piece really good place spending time interested part something huge amount potential really great people working make happen ok helping smooth wart along way
70,Lobsters,swift,Swift programming,Convert [UInt8] to Int,https://forums.swift.org/t/convert-uint8-to-int/30117,convert int,,lot always parsing network packet weirdo data structure experience best way bytewise example little endian let byte let bytesreversed reduce sofar byte return sofar byte print string radix drop reversed big endian using unsafe pointer pain number reason unsafe simple mistake ruin whole day easy make mistake example code convert pretty darned rare find network protocol us int remember int change size depending architecture worry type punning worry memory alignment worry big little endian admittedly code deal little big endian assemble multibyte integer bytebybyte hard forget problem get wrong clearly case dealing unsafe pointer right choice imo first choice share enjoy quinn eskimo dts apple
71,Lobsters,swift,Swift programming,New Diagnostic Architecture Overview,https://swift.org/blog/new-diagnostic-arch-overview/,new diagnostic architecture overview,new diagnostic architecture overview challenge type inference overview compiler documentation type checker hindleymilner algorithm constraint generation constraint solving solution application constraint generation constraint generation type variable constraint string expressiblebyintegerliteral disjoint set many single round inference algorithm execution approach anatomy diagnostic type variable constraint missing emits error example improved diagnostics missing label argumenttoparameter conversion mismatch invalid optional unwrap missing member missing protocol conformance conditional conformance swiftui example argumenttoparameter conversion mismatch missing member missing argument conclusion question associated thread swift forum,new diagnostic architecture overview october diagnostics play important role programming language experience vital developer productivity compiler produce proper guidance situation especially incomplete invalid code blog post would like share couple important update improvement diagnostics worked upcoming swift release includes new strategy diagnosing failure compiler originally introduced part swift release yield exciting new result improved error message challenge swift expressive language rich type system many feature like class inheritance protocol conformance generic overloading though programmer try best write wellformed program sometimes need little help luckily compiler know exactly swift code valid invalid problem best tell gone wrong happened fix many part compiler ensure correctness program focus work improving type checker swift type checker enforces rule type used source code responsible letting know rule violated example following code struct init var int produce following diagnostic error type expression ambiguous without context diagnostic point genuine error helpful specific actionable old type checker used guess exact location error worked many case still numerous kind programming mistake user would write could accurately identify order address new diagnostic infrastructure work rather guessing error occurs type checker attempt fix problem right point encountered remembering fix applied allows type checker pinpoint error kind program also allows surface failure previously would simply stop reporting first error type inference overview since new diagnostic infrastructure tightly coupled type checker take brief detour talk type inference note brief introduction detail please refer compiler documentation type checker swift implement bidirectional type inference using constraintbased type checker reminiscent classical hindleymilner type inference algorithm type checker convert source code constraint system represents relationship among type code type relationship expressed via type constraint either place requirement single type eg integer literal type relates two type eg one convertible type described constraint type swift type system including tuple type function type enumstructclass type protocol type generic type additionally type type variable denoted name type variable used place type eg tuple type foo int involving type variable foo constraint system performs three step constraint generation constraint solving solution application diagnostics interesting stage constraint generation solving given input expression sometimes additional contextual information constraint solver generates set type variable represent abstract type subexpression set type constraint describe relationship type variable common type constraint binary constraint relates two type denoted constraint kind commonly used binary constraint x bind bind type variable x fixed type x convertible conversion constraint requires first type x convertible second includes subtyping equality x conforms specifies first type x must conform protocol result applicable function applicable function constraint requires type function type input output type constraint generation complete solver attempt assign concrete type type variable constraint system form solution satisfies constraint let consider following example function func foo str string str human becomes apparent pretty quickly problem expression str problem located inference engine rely constraint simplification algorithm determine wrong established previously constraint solver start generating constraint see constraint generation stage str distinct subelement input expression like str represented either concrete type known ahead time type variable denoted name assume type satisfies constraint associated constraint generation stage completes constraint system expression str combination type variable constraint let look type variable str represents type variable str first argument call one represents type literal second argument call result represents result type call operator plus represents type operator set possible overload choice attempt constraint str bind string argument str fixed string type one conforms expressiblebyintegerliteral since integer literal like swift could assume type conforming expressiblebyintegerliteral protocol eg int double solver rely information beginning plus bind disjunction string string string int int int operator form disjoint set choice element represents type individual overload str one result applicable plus type result yet known determined testing overload plus argument tuple str one note constraint type variable linked particular location input expression inference algorithm attempt find suitable type type variable constraint system test associated constraint example one could get type int double type satisfy expressiblebyintegerliteral protocol conformance requirement however simply enumerating possible type empty type variable constraint system inefficient since could many type try particular type variable underconstrained example result restriction could potentially assume type work around problem constraint solver first try disjunction choice allows solver narrow set possible type type variable involved case result brings number possible type result type associated overload choice plus instead possible type time run inference algorithm determine type one result single round inference algorithm execution let start binding plus first disjunction choice string string string applicable constraint could tested plus bound concrete type simplification str one result applicable plus constraint end matching two function type str one result string string string proceeds follows add new conversion constraint match argument parameter str convertible string add new conversion constraint match argument parameter one convertible string equate result string since result type equal newly generated constraint could immediately testedsimplified eg str convertible string true str already fixed type string string convertible result could assigned type string based equality constraint point remaining constraint one convertible string one conforms expressiblebyintegerliteral possible type one int double string interesting none possible type satisfy remaining constraint int double convertible string string conform expressiblebyintegerliteral protocol attempting possible type one solver stop considers current set type overload choice failure solver backtracks attempt next disjunction choice plus see error location would determined solver executes inference algorithm since none possible type match one considered error location bound type complex expression could many one location existing error result new one inference algorithm progress narrow error location situation like solver would pick solution smallest possible number thereof point le clear error location identified yet obvious help solver make forward progress scenario derive complete solution approach new diagnostic infrastructure employ going call constraint fix try resolve inconsistent situation solver get stuck type attempt fix example ignore string conform expressiblebyintegerliteral protocol purpose fix able capture useful information error location solver use later diagnostics main difference current new approach former would try guess error located new approach symbiotic relationship solver provides error location noted type variable constraint carry information relationship subexpression originated relation combined type information make straightforward provide tailored diagnostics fixits problem diagnosed via new diagnostic framework example determined type variable one error location diagnostic examine one used input expression one represents argument position call operator known problem related fact string conform expressiblebyintegerliteral protocol based information possible form either two following diagnostics error binary operator applied argument string int note second argument conforming expressiblebyintegerliteral protocol simpler error argument type string conform expressiblebyintegerliteral diagnostic referring second argument picked first alternative produce diagnostic operator note partially matching overload choice let take closer look inner working described approach anatomy diagnostic constraint failure detected constraint fix created capture information failure kind failure occurred location source code failure came type declaration involved failure constraint solver accumulates fix arrives solution look fix part solution produce actionable error warning let take look work together consider following example func foo inout int var x int foo x problem related argument x passed argument inout parameter without explicit let look type variable constraint constraint system type variable three type variable x int foo inout int void result constraint three type variable following constraint x result applicable foo inference algorithm going try match x result inout int void result following new constraint int convertible inout int result equal void int converted inout int constraint solver record failure missing ignores convertible constraint constraint ignored remainder constraint system solved type checker look recorded fix emits error describes problem missing along fixit insert error passing value type int inout parameter requires explicit foo x example single type error diagnostics architecture also account multiple distinct type error code consider slightly complicated example func foo inout int bar string var x int foo x bar solving constraint system type checker record failure missing first argument foo additionally record failure missing argument label bar failure recorded remainder constraint system solved type checker produce error fixits two problem need addressed fix code error passing value type int inout parameter requires explicit foo x error missing argument label bar call foo x bar bar recording every specific failure continuing solve remaining constraint system implies addressing failure produce welltyped solution allows type checker produce actionable diagnostics often fix lead developer toward correct code example improved diagnostics missing label consider following invalid code func foo answer int string return func foo answer string string return b let string map foo previously resulted following diagnostic error argument label match available overload diagnosed error missing argument label answer call let string map foo answer argumenttoparameter conversion mismatch consider following invalid code let x int let uint xfilter previously resulted following diagnostic error binary operator applied operand type int uint diagnosed error convert value type uint expected argument type int xfilter int invalid optional unwrap consider following invalid code struct init var int previously resulted following diagnostic error type expression ambiguous without context diagnosed error force unwrap value nonoptional type int int missing member consider following invalid code class class b override init func foo return struct init func bar b foo previously resulted following diagnostic error generic parameter could inferred diagnosed error type member foo b foo missing protocol conformance consider following invalid code protocol p func foo p x return x func bar x return foo x previously resulted following diagnostic error generic parameter could inferred diagnosed error argument type conform expected type p return foo x conditional conformance consider following invalid code extension binaryinteger var foo self return self self reduce previously resulted following diagnostic error ambiguous reference member diagnosed error referencing instance method reduce closedrange requires selfstride conform signedinteger self reduce note requirement conditional conformance closedrange self sequence extension closedrange sequence bound strideable boundstride signedinteger swiftui example argumenttoparameter conversion mismatch consider following invalid swiftui code import swiftui struct foo view var body view foreach circle rotation degree previously resulted following diagnostic error convert value type double rotatedshape circle expected argument type diagnosed error convert value type int expected argument type double circle rotation degree double missing member consider following invalid swiftui code import swiftui struct view var body view zstack rectangle frame width height foregroundcolor systemred hstack text spacer text b padding scaledtofit previously used diagnosed completely unrelated problem error double convertible cgfloat rectangle frame width height new diagnostic correctly point color systemred error type color member systemred foregroundcolor systemred missing argument consider following invalid swiftui code import swiftui struct view state private var showdetail false var body view button action selfshowdetailtoggle image systemname chevronrightcircle imagescale large rotationeffect degree showdetail scaleeffect showdetail padding animation spring previously resulted following diagnostic error type expression ambiguous without context diagnosed error member spring expects argument type response double dampingfraction double blendduration double animation spring conclusion new diagnostic infrastructure designed overcome shortcoming old approach way structured intended make easy improveport existing diagnostics used new feature implementors provide great diagnostics right bat show promising result diagnostics ported far hard work porting every day question please feel free post question post associated thread swift forum
72,Lobsters,swift,Swift programming,Apple‚Äôs use of Swift in iOS 13,https://blog.timac.org/2019/0926-state-of-swift-ios13/,apple use swift io,io io io methodology use swift io macos apple use swift io conclusion swiftui combine realitykit cryptokit,swift introduced apple wwdc interesting measure use swift io year io released included single application written swift calculator since number application using swift io grown year io io io io available let measure many application using swift year methodology methodology tool used article detailed previous post interested please refer use swift io macos apple use swift io list binary using swift io note binary might contain single line swift code necessarily entirely written swift list built using io iphone pro max applicationsactivitymessagesappapppluginsactivitymessagesextensionappexactivitymessagesextension applicationsappstoreappappstore applicationsappstoreapppluginsproductpageextensionappexproductpageextension applicationsappstoreapppluginssubscribepageextensionappexsubscribepageextension applicationsbusinessextensionswrapperapppluginsbusinessappexbusiness applicationsdiagnosticsappdiagnostics applicationsfindmyappfindmy applicationsfindmyapppluginsfindmynotificationscontentappexfindmynotificationscontent applicationsfindmyapppluginsfindmynotificationsserviceappexfindmynotificationsservice applicationsfindmyapppluginsfindmysiriintentsappexfindmysiriintents applicationsgamecenteruiserviceapppluginsgamecentermessageextensionappexgamecentermessageextension applicationshealthapphealth applicationssharingviewserviceappsharingviewservice applicationssidecarapppluginscontinuitycameraappexcontinuitycamera applicationssidecarapppluginscontinuitydisplayappexcontinuitydisplay applicationssidecarapppluginscontinuitymarkupappexcontinuitymarkup applicationssidecarapppluginscontinuitysignatureappexcontinuitysignature applicationssidecarapppluginscontinuitysketchappexcontinuitysketch applicationssidecarappsidecar systemlibraryaccountsdataclassownersstocksdataclassownerbundlestocksdataclassowner systemlibrarydistributedevaluationpluginsstocksdesdespluginstocksdes systemlibraryframeworksfileproviderframeworkpluginslocalstoragefileproviderappexlocalstoragefileprovider systemlibraryframeworksfileproviderframeworksupportfileproviderd systemlibraryframeworksidentitylookupframeworkxpcservicescomappleidentitylookupmessagefilterxpccomappleidentitylookupmessagefilter systemlibraryframeworkssecurityframeworkxpcservicestrustedpeershelperxpctrustedpeershelper systemlibrarymessagesimessageballoonsasmessagesproviderbundleasmessagesprovider systemlibrarynanotimekitcomplicationbundlesnanoreminderscomplicationbundlenanoreminderscomplication systemlibraryprivateframeworksassetviewerframeworkpluginsasvassetthumbnailappexasvassetthumbnail systemlibraryprivateframeworksassetviewerframeworkpluginsasvassetviewerappexasvassetviewer systemlibraryprivateframeworkscloudphotolibraryframeworksupportcloudphotod systemlibraryprivateframeworkscontactsdonationframeworkversionsasupportcontactsdonationagent systemlibraryprivateframeworkscoreparsecframeworkparsecfbf systemlibraryprivateframeworkscoreparsecframeworkparsecd systemlibraryprivateframeworksdocumentmanageruicoreframeworkpluginsaddtagsactionextensionappexaddtagsactionextension systemlibraryprivateframeworksdocumentmanageruicoreframeworkpluginsrecentsapppopoverappexrecentsapppopover systemlibraryprivateframeworksdocumentmanageruicoreframeworkpluginscomappledocumentmanagerserviceappexcomappledocumentmanagerservice systemlibraryprivateframeworksfmclientframeworkxpcservicesfmipclientxpcservicexpcfmipclientxpcservice systemlibraryprivateframeworkshealthmenstrualcyclesuiframeworkpluginshealthmenstrualcyclesnotificationcontentextensionappexhealthmenstrualcyclesnotificationcontentextension systemlibraryprivateframeworkshealthpluginhostframeworkhealthappd systemlibraryprivateframeworksreminderkitframeworkpluginsremindersnotificationcontentextensionappexremindersnotificationcontentextension systemlibraryprivateframeworksreminderkituiframeworkpluginscomapplereminderkituiremindercreationviewserviceappexcomapplereminderkituiremindercreationviewservice systemlibraryprivateframeworkssecurechannelframeworksecurechanneld systemlibraryprivateframeworkstelephonyutilitiesframeworkcallservicesd systemlibraryprivateframeworksupnextwidgetframeworkpluginsupnextappexupnext privatevarstagedsystemappsbooksappbooks privatevarstagedsystemappsbooksappframeworksbookcoreframeworkbookcore privatevarstagedsystemappsbooksappframeworksjsappframeworkjsapp privatevarstagedsystemappscalculatorappcalculator privatevarstagedsystemappsfilesappfiles privatevarstagedsystemappsfilesapppluginsrecentswidgetappexrecentswidget privatevarstagedsystemappsfitnessappfitness privatevarstagedsystemappsmeasureappmeasure privatevarstagedsystemappsmusicappframeworksmusicapplicationframeworkmusicapplication privatevarstagedsystemappsmusicappmusic privatevarstagedsystemappsmusicapppluginsmediapickerappexmediapicker privatevarstagedsystemappsmusicapppluginsmusicmessagesappappexmusicmessagesapp privatevarstagedsystemappsmusicapppluginsmusicnotificationcontentextensionappexmusicnotificationcontentextension privatevarstagedsystemappsmusicapppluginsplaybackintentappexplaybackintent privatevarstagedsystemappsmusicapppluginsrecentlyplayedtodayextensionappexrecentlyplayedtodayextension privatevarstagedsystemappspodcastsappframeworksappstorekitframeworkappstorekit privatevarstagedsystemappspodcastsappframeworksnowplayinguiframeworknowplayingui privatevarstagedsystemappspodcastsappframeworkspodcastsuiframeworkpodcastsui privatevarstagedsystemappspodcastsapppodcasts privatevarstagedsystemappsremindersapppluginsremindersintentsextensionappexremindersintentsextension privatevarstagedsystemappsremindersapppluginsremindersintentsuiextensionappexremindersintentsuiextension privatevarstagedsystemappsremindersapppluginsreminderssharingextensionappexreminderssharingextension privatevarstagedsystemappsremindersapppluginsremindersspotlightindexextensionappexremindersspotlightindexextension privatevarstagedsystemappsremindersapppluginsreminderstodayextensionappexreminderstodayextension privatevarstagedsystemappsremindersappreminders privatevarstagedsystemappsshortcutsappshortcuts privatevarstagedsystemappsstocksapppluginsstockstodayappexstockstoday privatevarstagedsystemappsstocksappstocks usrlibswiftlibswiftdemangledylib usrlibswiftlibswiftxctestdylib usrlibexecsidecarrelay usrlibexeccoreidvd usrlibexecremindd usrlibexecsearchpartyd usrlibexecsharingd usrlibexectzd shared dyld cache contains following additional binary lot swift library usrlibswiftlibswiftmapkitdylib usrlibswiftlibswiftphotosdylib usrlibswiftlibswiftscenekitdylib usrlibswiftlibswiftmetalkitdylib usrlibswiftlibswiftcoreimagedylib usrlibswiftlibswiftobjectivecdylib usrlibswiftlibswiftvisiondylib usrlibswiftlibswiftspeechdylib usrlibswiftlibswiftcompressiondylib usrlibswiftlibswiftcoremldylib usrlibswiftlibswiftwatchkitdylib usrlibswiftlibswiftcoredylib usrlibswiftlibswiftcoregraphicsdylib usrlibswiftlibswiftuikitdylib usrlibswiftlibswiftmetaldylib usrlibswiftlibswiftcoredatadylib usrlibswiftlibswiftdispatchdylib usrlibswiftlibswiftosdylib usrlibswiftlibswiftmediaplayerdylib usrlibswiftlibswiftcorefoundationdylib usrlibswiftlibswiftcloudkitdylib usrlibswiftlibswiftcoremididylib usrlibswiftlibswiftcallkitdylib usrlibswiftlibswiftdarwindylib usrlibswiftlibswiftcontactsdylib usrlibswiftlibswiftquartzcoredylib usrlibswiftlibswiftintentsdylib usrlibswiftlibswifthomekitdylib usrlibswiftlibswiftassetslibrarydylib usrlibswiftlibswiftpencilkitdylib usrlibswiftlibswiftcoreaudiodylib usrlibswiftlibswiftgameplaykitdylib usrlibswiftlibswiftcorenfcdylib usrlibswiftlibswiftmetrickitdylib usrlibswiftlibswiftavfoundationdylib usrlibswiftlibswiftmodeliodylib usrlibswiftlibswiftacceleratedylib usrlibswiftlibswiftnetworkdylib usrlibswiftlibswiftfoundationdylib usrlibswiftlibswiftcoremediadylib usrlibswiftlibswiftcorelocationdylib usrlibswiftlibswiftarkitdylib usrlibswiftlibswiftswiftononesupportdylib usrlibswiftlibswiftnaturallanguagedylib usrlibswiftlibswiftglkitdylib usrlibswiftlibswiftsimddylib systemlibraryhealthfeeditempluginsorgandonationhealthpluginorgandonation systemlibraryhealthfeeditempluginsmenstrualcyclesapppluginhealthpluginmenstrualcyclesappplugin systemlibraryhealthfeeditempluginshearthealthpluginheart systemlibraryhealthfeeditempluginseducationhealthplugineducation systemlibraryhealthfeeditempluginsapprecommendationshealthpluginapprecommendations systemlibraryhealthfeeditempluginshighlightsheavyhealthpluginhighlightsheavy systemlibraryhealthfeeditempluginssnippetshealthpluginsnippets systemlibraryhealthfeeditempluginsmedicalidhealthpluginmedicalid systemlibraryhealthfeeditempluginshighlightshealthpluginhighlights systemlibraryhealthfeeditempluginshighlightalertshealthpluginhighlightalerts systemlibraryhealthfeeditempluginshealthrecordshealthpluginhealthrecords systemlibraryaccountsnotificationdonationaccountwatcherbundledonationaccountwatcher systemlibraryaccountsnotificationcoreidvaccountnotificationpluginbundlecoreidvaccountnotificationplugin systemlibraryprivateframeworksteachartsframeworkteacharts systemlibraryprivateframeworksfmnetworkingframeworkfmnetworking systemlibraryprivateframeworksjetengineframeworkjetengine systemlibraryprivateframeworkssettingswallpapersettingsframeworkwallpapersettings systemlibraryprivateframeworkssettingslegalandregulatorysettingsprivateframeworklegalandregulatorysettingsprivate systemlibraryprivateframeworkssettingssettingsuikitprivateframeworksettingsuikitprivate systemlibraryprivateframeworkscoreknowledgeframeworkcoreknowledge systemlibraryprivateframeworkshealthrecordsuiframeworkhealthrecordsui systemlibraryprivateframeworksappanalyticsframeworkappanalytics systemlibraryprivateframeworkscloudkitcodeprotobufframeworkcloudkitcodeprotobuf systemlibraryprivateframeworkshealthvisualizationframeworkhealthvisualization systemlibraryprivateframeworksnewsarticlesframeworknewsarticles systemlibraryprivateframeworksknowledgegraphkitframeworkknowledgegraphkit systemlibraryprivateframeworksfmipcoreframeworkfmipcore systemlibraryprivateframeworkscoreutilsswiftframeworkcoreutilsswift systemlibraryprivateframeworksspsharedframeworkspshared systemlibraryprivateframeworksteadbframeworkteadb systemlibraryprivateframeworksnewsfeedframeworknewsfeed systemlibraryprivateframeworksteaactivitiesframeworkteaactivities systemlibraryprivateframeworkshealtheducationuiframeworkhealtheducationui systemlibraryprivateframeworksteauiframeworkteaui systemlibraryprivateframeworksstocksstocksanalyticsframeworkstocksanalytics systemlibraryprivateframeworksstocksstockscoreframeworkstockscore systemlibraryprivateframeworksstocksstocksuiframeworkstocksui systemlibraryprivateframeworksnewsanalyticsframeworknewsanalytics systemlibraryprivateframeworkshealthpluginhostframeworkhealthpluginhost systemlibraryprivateframeworksattributegraphframeworkattributegraph systemlibraryprivateframeworksfmfcoreframeworkfmfcore systemlibraryprivateframeworksappstorekitframeworkappstorekit systemlibraryprivateframeworkshealthexperienceuiframeworkhealthexperienceui systemlibraryprivateframeworkshealthprofileframeworkhealthprofile systemlibraryprivateframeworksteafoundationframeworkteafoundation systemlibraryprivateframeworksjetuiframeworkjetui systemlibraryprivateframeworksteasettingsframeworkteasettings systemlibraryprivateframeworkscryptokitprivateframeworkcryptokitprivate systemlibraryprivateframeworkscoherenceframeworkcoherence systemlibraryprivateframeworkshealthexperienceframeworkhealthexperience systemlibraryprivateframeworksconversationkitframeworkconversationkit systemlibraryprivateframeworksnewssubscriptionframeworknewssubscription systemlibraryprivateframeworksdocumentmanagerexecutablesframeworkdocumentmanagerexecutables systemlibraryprivateframeworkscloudkitcodeframeworkcloudkitcode systemlibraryprivateframeworksfmclientframeworkfmclient systemlibraryprivateframeworkspodcastskitframeworkpodcastskit systemlibraryframeworkscryptokitframeworkcryptokit systemlibraryframeworksrealitykitframeworkrealitykit systemlibraryframeworksswiftuiframeworkswiftui systemlibraryframeworkscombineframeworkcombine conclusion new io feature surprise built swift code corresponding application case findmy reminder sidecar apps also worth noting use swift health book shortcut apps apple wwdc apple also announced brand new framework built top swift swiftui combine realitykit le known awesome cryptokit expected framework appear list binary using swift exclude swift library io contains binary using swift doubling number io
73,Lobsters,swift,Swift programming,Differentiable Programming Mega-Proposal,https://forums.swift.org/t/differentiable-programming-mega-proposal/28547,differentiable programming megaproposal,appleswift full text external markdown abridged text differentiable programming megaproposal introduction tensorflow motivation background math introduction intelligent application mean absolute error typesafe machine learning calculus fun animation easing function game simulation euler equation navierstokes robotics rendering ray tracing approach automatic differentiation source code transformation tool tapenade adic adifor activity analysis firstclass language support bake differentiation swift maximal coverage swift language feature extensibility static warning error pursuit userdefined code transformation swift differentiable programming implementation overview document macro hygienic macro scala haskell rust scala compiler plugin scala math introduction derivative iterative optimization derivative function arbitrary input proposed solution protocol declaration attribute function type attribute differential operator,hi swift community completed comprehensive proposal differentiable programming feature incubating last year gone many iteration feature design partially completed implementation ready start discussion swift evolution specifically upstreaming standardizing feature since proposal overly long page hope start merging doc directory appleswift via appleswift draft bitesized proposal contain reference megaproposal look forward feedback richard dan marc bart full text see external markdown abridged text see fit word limit forum differentiable programming megaproposal introduction proposal introduces firstclass differentiable programming swift firstclass differentiable programming includes five core addition differentiable protocol differentiable function type differentiable declaration attribute defining differentiable function differentiating transposing attribute defining custom derivative differential operator eg derivative standard library differentiable programming new paradigm programming program differentiated throughout glance differentiable programming let take derivative function whose parameter result conform differentiable protocol differentiable func f x float float x x let dfdx derivative f dfdx ability get derivative program enables new world numerical computing application notably machine learning firstclass support gradientbased learning algorithm even built using standard library type float float differentiated using protocoloriented apis valuewithgradient struct perceptron memberwise differentiable var weight float random var bias float differentiable func callasfunction input float float weight input sum bias var model perceptron let andgatedata x float float x x x x let loss valuewithgradient model model float var loss float x andgatedata let ≈∑ model x let error ≈∑ loss loss error error return loss print loss modelweight modelbias differentiable programming scale full machine learning model built thirdparty library like tensorflow import tensorflow let model sequential var dense float inputsize outputsize activation relu var dense float inputsize outputsize activation relu var dense float inputsize outputsize activation identity var classifier model let optimizer sgd classifier learningrate contextlocallearningphase training let x tensor float let tensor let gradient classifier classifier tensor float let ≈∑ classifier x let loss softmaxcrossentropy logits ≈∑ label print loss loss return loss optimizerupdate classifier along differentiation apis flexible fully dynamic differentiation based program transformation happens compiletime enables many static analysis help produce efficient program also detect common numerical programming mistake nondifferentiable function zero derivative let grad gradient x warning result depend differentiation argument always zero derivative want add withoutderivative make explicit withoutderivative firstclass differentiable programming language common runtime error machine learning become directly debuggable without library boundary simply step backpropagation using lldb debug derivative backpropagation debugging demo using lldb motivation background mathematics derivative function real variable another function computes sensitivity change output original function respect change original function argument differentiation process computing derivative see math introduction section detail derivative fundamental tool calculus application many domain notably deep learning numerical computing swift swift expressive highperformance language great fit numerical application recent proposal paved way lowlevel numerical computing swift additivearithmetic simd generic math function however highlevel numerical computing application including machine learning artificial intelligence require work believe firstclass differentiable programming big step towards highlevel numerical computing support make swift real contender numerical computing machine learning landscape differentiable programming enable intelligent application machine learning model scientific experiment physical simulation intelligent application intelligent application smart use machine learning technique enhance user experience intelligent application make prediction provide suggestion learn user preference powered differentiable programming core intelligent application function realvalued parameter differentiation used systematically optimize ie find good value parameter via gradient descent optimizing parameter via conventional algorithm typically difficult intractable example consider podcast player try automatically adjust playback speed based podcast type podcast section enum podcastcategory case comedy case news enum podcastsection case advertisement case introduction case body case conclusion struct podcaststate let category podcastcategory let section podcastsection struct podcastspeedmodel var minspeed maxspeed float var categorymultipliers podcastcategory float var sectionmultipliers podcastsection float return podcast speed multiplier prediction given podcast category section func prediction state podcaststate float let speed categorymultipliers statecategory sectionmultipliers statesection speed minspeed return minspeed speed maxspeed return maxspeed return speed podcast speed model parameter determine quickly podcast play different circumstance minspeed maxspeed categorymultipliers sectionmultipliers priori clear good parameter value different user may prefer different parameter value intelligent application could determine personalized parameter value follows let user set speed manually record observation whenever user change speed collecting enough observation search parameter value model predicts speed close user preferred speed value found offer start automatically setting speed gradient descent algorithm performs search language support differentiable programming make easy implement gradient descent pseudocode illustrating gradient descent first need objective function gradient descent minimize mean absolute error used struct observation var podcaststate podcaststate var userspeed float func meanerror model podcastspeedmodel observation observation float var error float observation observation error ab modelprediction observationstate observationuserspeed return error float observationscount next implement gradient descent algorithm var model podcastmodel let observation storageobservations language differentiates meanerror get gradient value indicating change model order decrease value meanerror let gradient gradient model meanerror observation change model direction decreased value meanerror model gradient typesafe machine learning today machine learning predominantly done dynamicallytyped language like python language concise easy use however people prefer safer programming feature like type checking static diagnostics help catch error early improve productivity differentiable programming swift enables safe powerful machine learning custom differentiable data structure declared checked compiletime thanks protocoloriented programming differentiable type generalized protocol enabling differential operator defined higherorder function constrained protocol mathematical optimization algorithm neural network optimizers also defined generically protocol work differentiable type calculus fun calculus fun differentiation swift toolbox let programmer explore fun interesting application animation easing function specify rate change parameter animation differentiation enables easy manipulation function game physic equation modeled using differentiable function game engine intelligent agent game trained using technique like machine learning enabled differentiation simulation many simulation technique fluid physical process based approximate solution equation defined term derivative like euler equation navierstokes able differentiate function important building block implementing algorithm solve equation robotics control algorithm used robotics mechanical engineering rely often higherorder derivative function model behavior joint physical system language like swift efficiently compute derivative without incurring unpredictable runtime overhead garbage collection may wellplaced run aboard robot rendering ray tracing traditional rendering system black box consume data structure scene geometry produce image physical process simulate made differentiable function building ray tracer differentiable building block unlocks application like inverse rendering going image scene geometry section abridged please see corresponding section external markdown linked approach automatic differentiation practice automatic differentiation common differentiation algorithm precise efficient section summarizes approach automatic differentiation section abridged please see corresponding section external markdown linked source code transformation tool source code transformation tool another approach differentiable programming tool user write code select various differentiation configuration option name functiontodifferentiate independent dependent variable etc provide tool tool analyzes input code generates output code computes derivative according option historically one oldest approach automatic differentiation tool like tapenade adicadifor compute derivative fortran c code advantage source code transformation tool essentially static compiler perform static analysis input code generate optimized derivativecomputing output code example tapenade performs activity analysis determine variable need derivative tbr toberecorded analysis remove unnecessary intermediate variable differentiation however tool ideal usability user must interact external gui specify input receive textual program output external workflow extra indirection take user natural programming environment exposing toolprovided differentiation feature within language would ergonomic image tapenade web interface user specifies input program configuration option tapenade generates derivativecomputing output program firstclass language support another class differentiable programming approach integrating differentiation semantics code transformation programming language degree mainstream programming language support differentiable programming research system like add firstclass differential operator eg grad language reversemode automatic differentiation transformation compiler firstclass language support differentiation reap benefit source code transformation technique eg language coverage performant derivative code without requiring programmer use external tool welldesigned powerful differentiation primitive enable user define custom differentiation apis would otherwise possible differentiation library bake differentiation swift firstclass language support differentiation enable convenient extensible performant differentiable programming swift maximal coverage swift language feature firstclass support differentiation swift enables differentiation work nicely maximal number swift language feature including mutation control flow user differentiable programming need write restricted subset swift write normal code use differentiation extensibility firstclass language support enables extensible differentiable programming system custom type extended differentiable minimal boilerplate custom derivative function retroactively registered existing function user define custom differentiation apis using powerful primitive operator defined standard library supported type system static warning error function perform nondifferentiable operation path parameter result thus differentiated function use parameter compute result technically differentiable derivative trivially always zero language support differentiation compiler identify case statically via data flow analysis produce nondifferentiability error warning diagnostics improve productivity help user catch error ahead time librarybased differentiation approach generally provide diagnostics detail static warning error see static analysis section detailed design pursuit userdefined code transformation key code transformation enabling differentiable programming derivative code generation derivative code generation implement automatic differentiation given original function differentiate derivative function generated replacing function application original function corresponding derivative function application algorithm described detail swift differentiable programming implementation overview document language provide ability define custom code transformation macro enable syntaxbased code transformation compiletime hygienic macro macro system avoid accidental variable capture available variety language including lisp julia rust scala name example generated typesafe schema wrapper implemented using hygienic macro scala compiler plugin system enable programmer write plugins extend behavior compiler compiler plugins popular bootstrapped language like haskell rust scala plugin written language example continuationpassingstyle code transformation implemented compiler plugin scala one might make case derivative code generation differentiation better implemented custom code transformation may true theory swift yet support custom code transformation practice proposal present differentiable programming system highlevel language feature semantics derivative code generation implementation detail system custom code transformation added swift one day may possible reimplement derivative code generation using system without changing highlevel differentiable programming feature proposed math introduction derivative derivative function f measure quickly function output change make small change function input value measurement depends input x start call value measurement starting input derivative f x single variable real function function single real input single real output derivative f x summarized single real number f x f x Œµ f x f x Œµ word changing input tiny amount epsilon change output f x Œµ f x x change exactly Œµ whenever change input Œµ derivative everywhere near x f x change little change input derivative x see orange line near x f x change approximately Œµ change input Œµ derivative x see green line general derivative f x x x iterative optimization iterative optimization algorithm use derivative optimize function ie find input minimize maximize output function example simple gradient descent algorithm start arbitrary input x us derivative function x determine whether need increase decrease x decrease output function mutates x slightly along appropriate direction repeat output stop decreasing derivative function arbitrary input real world program deal data complicated single real variable fortunately mathematical theory extend derivative function nearly arbitrary input output recall original description derivative derivative function f measure quickly function output change make small change function input make sense arbitrary input output type long describe small change easy describe small change nested structure real number small change component real number example consider struct point var x float struct pointpair var point small change point might add x add small change pointpair might add add define new type capture value small change call type tangent vector term math example extension point struct tangentvector dx dy small change x respectively var dx dy float extension pointpair struct tangentvector small change respectively var pointtangentvector term tangent vector small change described word would pointtangentvector dx dy pointpairtangentvector pointtangentvector dx dy pointtangentvector dx dy term tangent vector derivative function f b function df atangentvector btangentvector word df take starting value type small change atangentvector tell resulting small change b gradient descent iterative optimization algorithm run function f float long type define tangent vector iteratively walk around different value searching value minimizes output f proposed solution push swift capability next level numerics machine learning introduce differentiable programming new language feature includes standard library apis small additive change type system differentiable protocol differentiable standard library protocol generalizes data structure parameter result differentiable function compiler derives protocol requirement implementation memberwise conformance declared extension float differentiable typealias tangentvector self struct perceptron memberwise differentiable var weight float var bias float differentiable declaration attribute differentiable declaration attribute attribute mark functionlike declaration function declaration initializers property subscript differentiable differentiable func cubed x float float x x x extension perceptron differentiable func callasfunction input float float weight input sum bias differentiable function type subtype normal function type different runtime representation store metadata allows value differentiated anywhere func addone x float float x let differentiable float float addone let differentiable linear float float addone differentiating transposing attribute differentiating transposing attribute used declaring custom derivative function function declaration import glibc differentiating expf func x float value float differential differentiable linear float float let expf x return value differential v v differential operator standard library differentiation apis take differentiable function return derivative function compute derivative value standard library func derivative floatingpoint r body escaping differentiable r r ttangentvector floatingpoint differentiable func f x float float x x let dfdx derivative f dfdx section abridged please see corresponding section external markdown linked section abridged please see corresponding section external markdown linked section abridged please see corresponding section external markdown linked section abridged please see corresponding section external markdown linked section abridged please see corresponding section external markdown linked section abridged please see corresponding section external markdown linked
74,Lobsters,swift,Swift programming,A Memory Safety Research Agenda,https://alexgaynor.net/2019/sep/02/memory-safety-research-agenda/,memory safety research agenda,memory safety research agenda ferocious critic driving adoption automated conversion microsoft research build critical abstraction linuxkernelmodulerust empirical research librsvg safer lifetime foreign function interface ffi integer overflow better static analysis rustsec conclusion,memory safety research agenda mon sep ferocious critic c c memory unsafe language booster memory safe language swift go particularly rust though believe morethansufficient body evidence support claim time start migrating still open question related migrate system memory safe language scalably maximize safety code written language remainder post outline specific area believe open research question hope prove useful software security engineer researcher well funding body making reference thing rust however believe example equally applicable memory safe language driving adoption first set research project deal best ensure project adopt memory safe language automated conversion presently enormous body existing c c code migrating even small portion hand work several lifetime important open question use tool automate question project begin answer question providing automated conversion c rust unsurprisingly automatically make rust code safe generated code make heavy use rust unsafe believe exploration unsafe rust derived c converted safe rust probably utilizing human guided automation would incredibly valuable accomplishment two specific area believe could benefit would converting pointer plus length pair rust slice converting raw malloc invocation use rust box initial hypothesis imagine could work something like automated tool identifies function argument look like could pointer plus length tool prompt user confirm function rewritten accept slice user confirms tool automatically rewrite function argument take slice caller pas slice body function manipulate slice safely possibly additional human prompting detail automatically inferred process could incredible time saver reducing unsafety converted code particularly given microsoft research indicating spatial safety common vulnerability category build critical abstraction lot memory unsafe code built small number popular abstraction library example linux kernel module skia written c c thus effectively consumer apis well major project like binding memory safe language allow new consumer written memory safe language existing consumer migrate project also long term assist inverting relationship allowing project written memory safe language offer cc binding backwards compatibility example project like linuxkernelmodulerust geoffrey thomas allows writing linux kernel module entirely safe rust unfortunately currently support narrow subset kernel apis exposing character device sysctls expanding api surface helping port real world kernel module would profound impact empirical research finally simply need research strategy effective migrating codebases strategy include writing description successful introduction memory safety existing code base eg firefox librsvg well experiment try different approach migration safer unsafe second set research project deal improve safety code written using unsafe keywords similar lifetime foreign function interface ffi one larger challenge using c c library language like rust figuring lifetime required argument function within api truth told large challenge using c c library c c well library often document requirement never expose information programmatically since c c notion lifetime syntax expressing however correctly maintaining lifetime across ffi vital maintaining memory safety program need better tooling squaring circle specific proposal address hopeful bright mind dedicated solving could make meaningful improvement library written memory safe language need able interoperate safely integer overflow c c integer overflow classic source memory corruption memory safe language address enforcing bound check using checked arithmetic everywhere however unsafe block attempt bypass bound check performance often forget handle integer overflow introducing vulnerability believe two avenue research exist first better analysis tool identifying unhandled integer overflow presence unsafe block second improving code generation optimization enabling checked arithmetic default practical better static analysis unsafe finally building previous project general purpose need better static analysis tool finding vulnerability unsafe automatically suggesting safe idiom replace unnecessary usage unsafe ideally work would empirically driven based data set rustsec well review large codebases make use unsafe conclusion believe even without improvement case migration memory safe language acute compelling however must never satisfied status quo improvement make adoption memory safe language easier language even safer profound impact safety overall computing experience hope engineer researcher found project excited work funding body idea project fund
75,Lobsters,swift,Swift programming,"Models of Generics and Metaprogramming: Go, Rust, Swift, D and More",http://thume.ca/2019/07/14/a-tour-of-metaprogramming-models-for-generics/,model generic metaprogramming go rust swift,model generic metaprogramming go rust swift rust c template haskell zig terra overview basic idea defining entire data structure macro boxing typeerased boxed generic wikipedia article java generic inferred boxed generic uniform representation interface implement language using multiple approach interface vtables interface container swap method objectoriented programming sorting function reflection dynamically typed language look lot like vtables reflection info listed wikipedia creator worked highperformance java vm dictionary passing haskell type class first class module add mechanism make parameter implicit swift witness table without monomorphization without allocating everything uniform representation annotated implement abi stability intensional type analysis monomorphization generating source code genny string mixins string mixins rust procedural macro rust procedural macro macro wrap function logging call syntax tree macro template haskell nim macro ocaml ppx lisp special infrastructure migrate parse tree parsing quotation experimental library try replicate interface provided reflection template feature called concept compile time function terra like implement optimizing compiler domain specific language simple function java go rust generic machine code monomorphization,model generic metaprogramming go rust swift domain programming common want write data structure algorithm work element many different type generic list sorting algorithm need comparison function different programming language come sort solution problem pointing people existing general feature useful purpose eg c go generic system powerful become turingcomplete eg rust c post going take tour generic system many different language implemented start language without special generic system like c solve problem show gradually adding extension different direction lead system found language one reason think generic interesting case simple case general problem metaprogramming writing program generate class program evidence describe three different fully general metaprogramming method seen extension different direction space generic system dynamic language like python procedural macro system like template haskell staged compilation like zig terra overview made flow chart system discus give overview post contain everything fit together basic idea let say programming language without generic system want make generic stack data structure work data type problem function type definition write work data size copied way generally act way two idea get around find way make data type act way data structure make multiple copy data structure slight tweak deal data type correct way two idea form basis two major class solution generic boxing monomorphization boxing put everything uniform box act way usually done allocating thing heap putting pointer data structure make pointer different type act way code deal data type however come cost extra memory allocation dynamic lookup cache miss c corresponds making data structure store void pointer casting data void allocating heap data already heap monomorphization copy code multiple time different type data want store way instance code directly use size method data working without dynamic lookup produce fastest possible code come cost bloat code size compile time code minor tweak compiled many time c corresponds defining entire data structure macro calling type want use overall tradeoff basically boxing lead better compile time hurt runtime performance whereas monomorphization generate fastest code take extra time compile optimize different generated instance also differ extended extension boxing allow dynamic behavior runtime monomorphization flexible different instance generic code differ also worth noting larger program performance advantage monomorphization might canceled additional instruction cache miss extra generated code school generic many direction extended add additional power safety different language taken interesting direction language like rust c even provide option boxing let start example basic boxing approach go type stack struct value interface func stack push value interface thisvalues append thisvalues value func stack pop interface x thisvalues len thisvalues thisvalues thisvalues len thisvalues return x example language use basic boxing c void go interface pregenerics java object pregenerics objectivec id typeerased boxed generic problem basic boxing approach depending language often need cast value correct type every time read write data structure nothing stop u putting element different type structure could allow bug manifest runtime crash solution problem add generic functionality type system still using basic boxing method exactly runtime approach often called type erasure type generic system erased become type like object hood java objectivec started basic boxing later added language feature generic type erasure even using exact collection type compatibility optional generic type parameter see following example wikipedia article java generic list v new arraylist vadd test string cast integer integer integer vget run time error list string v new arraylist string vadd test integer vget type error compilationtime error inferred boxed generic uniform representation ocaml take idea even uniform representation primitive type require additional boxing allocation like int needing turned integer go arraylist java everything either already boxed represented pointersized integer everything one machine word however garbage collector look data stored generic structure need tell pointer integer integer tagged using bit place valid aligned pointer never bit leaving bit range ocaml also type inference system write function compiler infer generic type possible annotate lead function look like dynamically typed language let first head tail head inferred type list inferred type read function list element type something type encodes relation return type list type type interface different limitation basic boxing approach boxed type completely opaque fine data structure like stack thing like generic sorting function need extra functionality like typespecific comparison function number different way implementing runtime exposing language technically different ax implement language using multiple approach however seems like different language feature mostly lend towards implemented certain way language extension take advantage strength chosen implementation mean mostly two family language based around different runtime approach vtables dictionary passing interface vtables want expose typespecific function sticking boxing strategy uniform way working everything make sure uniform way find typespecific function want object approach called using vtables shortened virtual method table nobody us full name implemented offset zero every object generic structure pointer table function pointer consistent layout table allow generic code look pointer typespecific function way every type indexing certain pointer fixed offset interface type implemented go dyn trait object implemented rust cast type interface type something implement creates wrapper contains pointer original object pointer vtable typespecific function interface however requires extra layer pointer indirection different layout sorting go us interface container swap method instead taking slice comparable interface would require allocating entire new slice interface type would sort original slice objectoriented programming object oriented programming language feature make good use power vtables instead separate interface object contain vtables objectoriented language like java vtable pointer start every object javalike language system inheritance interface implemented entirely object vtables well providing additional feature embedding vtables every object also solves earlier problem needing construct new interface type indirection unlike go java sorting function use comparable interface type implement reflection vtables difficult compiler also generate table type information like field name type location allows accessing data type code inspect data type used add reflection feature language used implement thing like serialization pretty printing arbitrary type extension boxing paradigm tradeoff requires one copy code requires lot slow dynamic lookup lead slow serialization performance example language reflection feature use serialization thing include java c go dynamically typed language reflection powerful lot different metaprogramming task one thing create new type edit type information existing value add ability well make default access modification syntax go reflection end dynamically typed language incredibly flexibility metaprogramming language like python ruby come effectively superpowered reflection system used everything tristan dynamic language work implement everything hash table may say well hash table good data structure implementing editable type information table also interpreter like cpython thing look high performance jit like implement thing look lot like vtables reflection info hidden class vtables reflection info object layout similar might see java vm capability object change new vtable runtime coincidence nothing ever coincidence person listed wikipedia creator previously worked highperformance java vm dictionary passing another way implementing dynamic interface associating vtables object pas table required function pointer along generic function need approach way similar constructing gostyle interface object call site table passed hidden argument instead packaged bundle one existing argument approach used haskell type class although ghc ability kind monomorphization optimization inlining specialization dictionary passing also used ocaml explicit argument form first class module proposal add mechanism make parameter implicit swift witness table swift make interesting realization using dictionary passing also putting size type move copy free table provide information required work type uniform way without boxing way swift implement generic without monomorphization without allocating everything uniform representation still pay cost dynamic lookup boxingfamily implementation pay save allocation memory cacheincoherency cost swift compiler also ability specialize monomorphize inline generic within module across module function annotated inlinable avoid cost want presumably using heuristic much would bloat code functionality also explains swift implement abi stability way allows adding rearranging field structs although provide frozen attribute opt dynamic lookup performance reason intensional type analysis one way implement interface boxed type add type id fixed part object like vtable pointer would go generate function interface method effectively big switch statement type implement interface method dispatch correct typespecific method aware language use technique c compiler java vms something similar use profileguided optimization learn certain generic call site mostly act object certain type replace call site check common type static dispatch common type usual dynamic dispatch fallback case way branch predictor predict common case branch taken continue dispatching instruction static call monomorphization alternative approach boxing monomorphization monomorphization approach need find way output multiple version code type want use compiler multiple phase representation code pass compiled theoretically copying stage generating source code simplest approach monomorphization copying stage first representation source code way compiler even generic support user language like c go compiler support generic sometimes c use preprocessor define data structure macro header include multiple time different defines go script like genny make code generation process easy downside duplicating source code lot wart edge case look depending language also give compiler lot extra work parsing type checking basically code many time depending language tool method generic ugly write use like write one inside c macro every line end backslash type function name need type name manually concatenated onto identifier avoid collision string mixins code generation something going though generate code using fully powered programming language also us representation user already know language implement generic way also include clean way code generation address general metaprogramming use case covered generic system like serialization clearest example string mixins enable generating code string using full power middle compile rust procedural macro similar example representation one step compiler rust procedural macro take token stream input output token stream providing utility convert token stream string advantage approach token stream preserve source code location information macro directly paste code user wrote input output token user code cause compiler error macro output error message compiler print correctly point file line column broken part user code macro generates broken code error message point macro invocation example use macro wrap function logging call make mistake implementation wrapped function compiler error point directly mistake file rather saying error occurred code generated macro syntax tree macro language take step offer facility consuming producing abstract syntax tree ast type macro written language example include template haskell nim macro ocaml ppx nearly lisp one problem ast macro want require user learn bunch function constructing ast type well base language lisp family language address making syntax ast structure simple direct correspondence constructing structure still tedious thus language mention form quote primitive provide fragment code language return syntax tree quote primitive also way splice syntax tree value like string interpolation example template haskell using ast construction function genfn name q exp genfn f x newname x lame varp x appe vare f vare x using quotation splicing genfn name q exp genfn f x vare f x one disadvantage procedural macro syntax tree level instead token level syntax tree type often change addition new language feature token type remain compatible example ocaml ppx system need special infrastructure migrate parse tree language version used macro whereas rust library add parsing quotation utility write procedural macro style similar syntax tree macro rust even experimental library try replicate interface provided reflection template next type generic pushing code generation little compiler template found c way implementing generic specify template parameter type function instantiate template specific type type substituted function function type checked make sure combination valid template class mymax b return b b template class struct pair value int main mymax pair int p would give u compile error inside mymax pair invalid operand mymax p p one problem template system include template function library user instantiates wrong type may get inscrutable compile error inside library similar happen library dynamically typed language user pass wrong type interesting solution similar popular library dynamic language use helper function check type valid error message clearly point helper fail example note signature generally better syntax provide template parameter going use isnumeric function stdtraits import stdtraits optional without get error inside like c also included doc participates overloading mymax b isnumeric return b b struct pair value void main mymax pair int p would give compile error saying pair int pair int nt match available instance mymax b isnumeric mymax p p feature called concept serf purpose except design like defining interface type constraint compile time function template number extension allow use feature like compile time function evaluation static basically make template act like function take compile time set parameter return nongeneric runtime function make template fully featured metaprogramming system far understand modern c template similar power le clean mechanism language take generic compile time function concept run even like zig fn stack comptime type type return struct item len usize const self pub fn push self self item zig using language compile time runtime function split based parameter marked comptime another language us separate similar language meta level called terra terra dialect lua allows construct lower level clike function inline manipulate meta level using lua apis well quoting splicing primitive function makestack local struct stack item pointer len int terra stack push item end return stack end terra crazy level metaprogramming power allows thing like implement optimizing compiler domain specific language simple function implement interface object system java go library small amount code save generated runtimelevel code dependencyfree object file rust generic next type monomorphized generic course move code generation one step compiler type checking mentioned type insidethelibrary error get c like error get dynamically typed language course basically one type type template parameter like dynamic language mean fix problem adding type system meta level multiple type type static checking support operation use generic work rust language level also work swift haskell rust need declare trait bound type parameter trait like interface language declare set functionality provided type rust compiler check body generic function work type conforming trait bound also allow use functionality type declared trait bound way user generic function rust never get compile error inside library function instantiate compiler also type check generic function fn mymax partialord b b else b struct pair value fn main mymax let p pair pair value would give compile error saying partialord implemented pair mymax p p language level similar kind type system need implement generic interface support using boxing approach generic rust support using system rust even added uniform syntax v impl sometrait parameter get monomorphized v dyn sometrait parameter us boxing property also allows compiler like swift haskell ghc monomorphize optimization even though default boxing machine code monomorphization logical next step monomorphized generic model pushing compiler backend like copy source code template annotated placeholder generic type generate machine code placeholder typespecific part stamp template quickly memcpy patch like linker work downside monomorphized copy specially optimized optimizer lack duplicate optimization compilation way faster could even make code stamper tiny jit get included binary stamp monomorphized copy runtime avoid bloating binary actually aware language work way idea came writing natural extension taxonomy exactly kind thing hoped exercise hope post give clearer picture generic system different language fit together coherent taxonomy prompt think direction conceptspace might find new cool programming language
76,Lobsters,swift,Swift programming,6 mac apps that fit everyone,https://sobolevn.me/2019/07/6-best-mac-apps,mac apps fit everyone,tldr dotfiles command line productivity using better cli sindresorhus done openinterminallite spectacle wonderful repo use lookandfeel online,often see list awesome apps going use one fit one different list contains simple yet powerful productivity booster totally fit everyone tldr list mac apps using found dotfiles rest setup previous ontopic article command line productivity using better cli new project sindresorhus simple yet amazing reason traditional mac clock show date calendar someone asks date today open calendar app seriously app solves improved clock calendar timezones new app announced might also want hide original clock status bar done next app allows highlighting currently focused window sound like much feel app amazing work great light dark background watch video look awesome traveling around file finder might need open current folder inside terminal draganddrop terminal many user like use openinterminallite add new icon finder open anything inside terminal editor single click spectacle allows using keyboard shortcut reorganize window desktop lifesaver people lot opened window complex workflow want ide opened next browser two key press want terminal sorted two key press simple whole set different quick preview plugins wonderful repo amazing thing quick preview like highlight code allows view image size highlight prettyprints transforms json really mention flux everyone already one installed flux turn monitor color warm night allows eye brain rest use try demo lookandfeel online apps use problem solve provide like favorite apps dotfiles comment
77,Lobsters,swift,Swift programming,Early SwiftUI Impressions and Wish List from a React Developer,https://ryanashcraft.me/early-swiftui-impressions/,early swiftui impression wish list react developer,twitter thread swiftui magical framework wish list imperative reference ref ref ability invalidate state key key update pointed id effect story controlled apis controlled component update navigationdestinationlink post use ergonomic apis managing contentchildren variadic generic improved debugging story github opinionated doc tool dan abramov conclusion twitter,worked home june watched wwdc keynote live living room getting towards end already felt like exciting wwdc keynote apple year craig federighi announced swiftui boom wanting apple release functional reactive ui framework platform year finally happened coding react five year react changed way thought building product never able build uis quickly react spoiled started find incredibly difficult work platform nt use similar paradigm like example iosuikit felt slow swiftui pretty similar react lot way functional reactiveey declarative importantly highlevel purpose two project enable speedup development speed traditional imperative ui framework find building product react much faster mvcstyle ui framework reason le code react runtime take care lot state management lifecycle code alternative framework would roll react describe app term visuals effect mvcstyle framework manually manage visuals effect developer tool react chrome extension make easy inspect entire state app unparalleled iteration speed update code play second later great community team leading project sort open source work meetups conference react wonderful community playing around swiftui week trying build new app unfortunately nt experience hoping constantly running limitation quirk bug slowed tremendously throughout experience trying give swiftui benefit doubt thinking maybe thing incorrectly patience run entire reason excited use swiftui improved development speed delivered reality seems working swiftui much slower actually used regular uikit gone submitted acute issue run see twitter thread summary really hoping swiftui sake issue get resolved sometime next month counting even issue resolved still several deeper concern swiftui frequently get updated swiftui grow healthy community like react active swiftui maintainer community ever feel limiting frustrating swiftui magical framework tend roll eye whenever engineer scoff frameworklibrary seems magical something us unfamiliar pattern abstraction nt mean bad think people really mean complain framework magical appealing abstraction also limiting word may solve use case really well someone build something fall category five year ago team yahoo started pitching idea switching react thenmanager skeptical react seemed magical usually mean run limitation luck nt really problem react great story around able escape react lifecycle thing manually even could elegantly encapsulate sort escape hatch inside component swiftui provide sort experience unlike react find swiftui magical definition people use word feel highly constraining realize working many thing nt support real way implement use case scary wish list experience swiftui given renewed appreciation react hope swiftui team look react inspiration framework community improved collected top wish list item think large impact making swiftui feel much joy work react imperative reference ref react ref feature allows get imperative handle component instance generally using ref discouraged new react developer use instead could write declarative apis however situation possible example say working native element using react ref get raw underlying instance element allows read manipulate native element however please one discrete issue swiftui wanted able pop view navigationview currently api let imagine swiftui concept like ref even though native swiftui api today backdoor allows get native uinavigationview instance manually call poptorootviewcontroller ability invalidate state key swiftui bug ran state persisted across update ideally invalidated react builtin feature key signal subtree treated new preexisting state discarded react doc key mentioned term list also useful situation want invalidate state given subtree swiftui sort similar mechanism many headbangingagainstdesk moment past week would easily worked around update swiftui pointed kitlangton twitter see id nt done thorough test see well work initial experiment look promising effect react rather robust story come managing effect purpose discussion effect simply state transition sort call io like api request easily hook react runtime update state perform sideeffects swiftui limited story regard effect onappear ondisappear modifier onupdate want make api request view mount value passed change seems like swiftui encourages moving lot sort effect management external ui combine bindableobject environmentobject model view state sort view model suppose much problem though make state binding far limited controlled apis react component tend prefer writing controlled component apis whenever possible allows component consumer control flexibility define value get managed also make easier debug behavior apis like navigationlink presentationlink seem really nifty perhaps magical come pretty big downside view internally handle hooking event managing state method implementing sort behavior least alternative presentationlink presentation view modifier simply way control navigation state navigationview via value concerning update turn swiftui support programmatic control navigation state fantastic check navigationdestinationlink post use hope eventually behavior exposed controlled apis uncontrolled apis like presentationlink quickly go style ergonomic apis managing contentchildren viewbuilders getting lot praise avoiding jsxlike syntax nesting far complicated react equivalent react child simply single element array make easy manipulate writing custom viewbuilder code swiftui pretty painful feel constraining realize swiftui strict typing limitation swift language ie variadic generic hoping future generally apis make easier implement morecomplex viewbuilder logic improved debugging story wonderful tool similar existing xcode view debugger allowed traverse swiftui view hierarchy may correspond actual layoutview hierarchy inspect property state consumed environment object swiftui view seen useful react debugger new people jumping large codebase point click know view corresponds piece ui state used derive ui mention current debugging story swiftui really poor debugger sometimes mismatch rendered limited put print statement exception often nt come error message perhaps important item list look react team manages communication community participate several conference throughout year seek input beta open forum github twitter spend lot time writing opinionated doc tool make easy learn encourage best practice word swiftui really need dan abramov conclusion early day knew swiftui going rough edge would lying said expected immature said still incredibly excited swiftui still optimistic improve mature time looking forward future update importantly community emerge around exciting technology thanks reading post still learning swiftui get anything wrong wish list ping twitter
78,Lobsters,swift,Swift programming,Swift Library for ElasticSearch,https://github.com/appbaseio/appbase-swift,swift library elasticsearch,appbaseswift table content project installation quick start doc project installation dynamic framework simplest way swiftelasticsearch carthage carthage homebrew swift package manager swift package manager quick start step import library initiate swiftelasticsearch client step add data app console output step get posted data console output doc jazzy jazzy hosted doc swiftelasticsearch library available http swiftelasticsearchnetlifycom,appbaseswift swift client library building search apps support appbaseio elasticsearch table content project installation quick start doc project project aim create fast responsive swift library supported iphone mac apps provides functionality elastic search integrated app library provides high performance result ie provides response user query millisecond time including elastic search processing time installation dynamic framework simplest way download latest release swiftelasticsearch github extract zip navigate xcode project general setting click blue icon showing project workspace general drag swiftelasticsearchxcodeproj file extracted folder embedded binary section select copy item needed checkbox prompted dialog box appears click finish go linked framework library section click icon click swiftelasticsearchframework add dependency build project gif showing step action carthage carthage decentralized dependency manager build dependency provides binary framework direct use install carthage use homebrew package manager write following command brew update brew install carthage integrate swiftelasticsearch xcode project touch cartfile open cartfile using command open cartfile add following dependency cartfile github appbaseioappsswiftelasticsearch release version current latest release version swift package manager swift package manager tool automating distribution swift code integrated swift compiler early development elasticswift support use supported platform add swiftelasticsearch library dependency add following line dependency value packageswift dependency package url http quick start working code example please note step dependent previous step step import library initiate swiftelasticsearch client import swiftelasticsearch app authentication configuration let hosturl http scalrapiappbaseio let appname swiftclientes let credential let client clientinit url hosturl app appname credential credential step add data app index movie name clientindex type swiftclientes id body title iron man json response error json provides recieved json body response provides received response server error provides error encountered print json console output id index swiftclientes shard failed successful total type swiftclientes version created result updated step get posted data clientget type swiftclientes id json response error print json console output id index swiftclientes source title iron man type swiftclientes version found doc documentation swiftelasticsearch library made help jazzy library contributing documentation library follow given step make necessary change inline code comment nt install jazzy library typing following command terminal sudo gem install jazzy installing navigate project directory type following generate doc jazzy functionality like skipping specific file folder refer documentation jazzy library add commit change submit pull request hosted doc swiftelasticsearch library available http swiftelasticsearchnetlifycom
79,Lobsters,swift,Swift programming,"The NeXT Era Ends, the Swift Era Begins",https://inessential.com/2019/06/07/the_next_era_ends_the_swift_era_begins,next era end swift era begin,week happened,surely person think week long wwdc mark end apple next era beginning swift era next era began course apple acquired next unixbased operating system amazing developer tool framework ceo steve job cocoa much better writing mac apps mac toolbox mac toolbox revolution incrementally better cocoa next application framework adapted evolved mac common refrain mac developer time objectivec nice look wonderful language way underpinnings allowed powerful easytouse framework mindblowing underestimate much year later apple created uikit modernized version cocoa iphone small screen touch interface cocoa device carry around also completely mindblowing fastforward note million apps written using technology born next brought apple pushed far forward even writing mostly swift last year still writing next context apps still live world whether know apps still objectivec apps real sense week happened wwdc plenty talk catalyst calling marzipan way bringing uikit io apps mac indeed part news week future never uikit better version already mac respect uikit better way many io apps mac apps though discount catalyst usefulness get lot apps new mac real news week swiftui combine framework finally new way writing apps based swift objectivec much next early bug nearly complete sure also going write apps future mindblowing apple marketing year wwdc right may running apps use swiftui combine know else still come transition transition take year glimpse next year
80,Lobsters,swift,Swift programming,First look at Apple's new Combine framework,https://medium.com/q42-engineering/swift-combine-framework-a082b1e23f2a,first look apple new combine framework,,
81,Lobsters,swift,Swift programming,Combine - Swift Event-Processing Framework,https://developer.apple.com/documentation/combine,combine swift eventprocessing framework,page requires javascript,page requires javascriptplease turn javascript browser refresh page view content
82,Lobsters,swift,Swift programming,WWDC 2019,https://www.apple.com/apple-events/livestream/,wwdc,,watchos watchos discover custom watch face website social medium share face friend also meet sleep app dream track fitness metric four new workout create healthier habit new handwashing feature see preview
83,Lobsters,swift,Swift programming,Metacode - autogenerated snippets for Swift and iOS,https://metacode.app,metacode autogenerated snippet swift io,fastest way navigate code,fastest way navigate code instantly find code using intuitive search code rank jdsnjkd
84,Lobsters,swift,Swift programming,SwiftWasm: Run Swift in browsers,https://swiftwasm.org/,swiftwasm run swift browser,try swift webassembly help resolve remaining issue list outstanding issue upstream patch pull request design web binding javascriptkit join u credit zhuowei kateinoigakukun maxdesiatov ddunbar patcheng compnerd jroseapple philipc pchickey thanks,try swift webassembly nowcompile swift cloud run browserplease enable javascript use try areahow helpresolve remaining issuesswiftwasm ready early adopter still need extensive testing polishingwant help see list outstanding issue info still need doneupstream patcheswe working integrating patch official swift compilerwant help see pull request see commits need submitteddesign web bindingswould nt nice invoke web apis directly swift want help look javascriptkit give try report issue see submit pr spread word would like help join uscreditsgetting swift work webassembly required hard work many people patch swift zhuowei kateinoigakukun maxdesiatov ddunbar patchengadvice assistance compnerd jroseapple philipc pchickeyand many othersthanks
85,Lobsters,swift,Swift programming,"square/Blueprint - declarative UI construction for iOS, written in Swift",https://github.com/square/Blueprint,squareblueprint declarative ui construction io written swift,blueprint declarative ui construction io written swift getting started swift package manager cocoapods documentation getting started hello world element hierarchy building custom element layout reference transition tutorial tutorial setup instruction using blueprint view controller building receipt layout blueprint adding blueprint existing project release instruction http,blueprint declarative ui construction io written swift blueprint greatly simplifies task building updating view application state change still consider blueprint experimental subject major breaking api change used within square production io apps let rootelement label text hello blueprint let view blueprintview element rootelement getting started swift package manager developing package sure blueprint included dependency packageswift dependency package url git githubcom squareblueprintgit xcode add blueprint directly dependency project file swift package add package dependency provide git url prompted git githubcom squareblueprintgit cocoapods use cocoapods manage dependency simply add blueprintui blueprintuicommoncontrols podfile pod blueprintui pod blueprintuicommoncontrols library blueprint provides architecture allows declaratively define ui hierarchy pure value swift structs enums display hierarchy within application update hierarchy application state change including animated transition use use blueprint time want display view hierarchy nt want manage view lifecycle hint managing view lifecycle large portion conventional uikit code time want manage view lifecycle complex animation transition good example case may want stick conventional approach interact uikit blueprint replacement uikit beginning blueprint designed compliment powerful tool come platform use blueprint manage display single view controller single view representing small part screen likewise straightforward host standard view control within blueprint hierarchy always leaving escape hatch documentation getting started hello world element hierarchy building custom element layout reference element blueprintview viewdescription transition tutorial tutorial setup instruction using blueprint view controller building receipt layout blueprint adding blueprint existing project two module provided blueprintui contains core architecture layout type blueprintuicommoncontrols includes element representing common uikit view control blueprint available via cocoapods add podfile integrate target mytarget pod blueprintui pod blueprintuicommoncontrols end release instruction copyright square inc licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license
86,Lobsters,swift,Swift programming,A community curated list of resources about Server Side Swift,https://github.com/cak/awesome-server-side-swift,community curated list resource server side swift,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
87,Lobsters,swift,Swift programming,Swift 5 Released,https://swift.org/blog/swift-5-released/,swift released,playground language update stable abi binary compatibility standard library update string string literal additional language compiler update swift exclusivity enforcement package manager update migrating swift migration guide documentation swift programming language apple book store platform linux available download apple xcode xcode available download source,swift officially released swift major milestone evolution language thanks abi stability swift runtime included current future version apple platform operating system macos io tvos watchos swift also introduces new capability building block future version including reimplementation string enforcement exclusive access memory runtime new data type support dynamically callable type try new feature playground put together paul hudson language update stable abi binary compatibility abi declared stable swift apple platform result swift library incorporated every macos io tvos watchos release going forward apps easier build smaller include library see blog post detail standard library update standard library swift includes following new feature string reimplemented encoding often result faster code see string blog post background change improved support raw text string literal see string literal blog post background refinement result simd vector type added standard library enhancement string interpolation adding flexibility construct text data performance improvement dictionary set swift implement following standard library proposal swift evolution process additional language compiler update swift default enforcing exclusive access memory debug release build see swift exclusivity enforcement blog post information update swift support dynamically callable type help improve interoperability dynamic language python javascript ruby swift also implement following language proposal swift evolution process package manager update swift package manager includes number new feature swift including dependency mirroring targetspecific build setting customized deployment target ability generate code coverage data additionally swift run command includes ability import library repl without needing build executable swift implement following package manager proposal swift evolution process migrating swift swift source compatible swift swift swift help moving swift earlier release swift apple xcode contains code migrator automatically handle many needed source change also migration guide available guide many change especially one le mechanical require direct scrutiny documentation updated version swift programming language swift available swiftorg also available free apple book store platform linux official binary ubuntu ubuntu ubuntu available download apple xcode development apple platform swift ship part xcode toolchain also available download swiftorg source development swift tracked following repository github tag designates specific revision repository make final version swift remain open release management process accumulate change potential future bugfix dot release
88,Lobsters,swift,Swift programming,Swift/Cocoapod: Forget NSAttributedString and Use Prestyler,https://github.com/kruil/Prestyler/,swiftcocoapod forget nsattributedstring use prestyler,documentation requirement installation cocoapods carthage use predefined rule b strike underline custom rule prefilters working color thing need know example author monetalios license,prestyler text styling library based original nsattributedstring class simplifies extends original workflow giving clean short syntax find full documentation please check leave feedback prestyler allows replace code let basestring pain use attributed string io let attributedstring nsmutableattributedstring string basestring attribute nil let painword attributedstringstring nsstring range pain let attribute nsattributedstringkey nsattributedstringkeyfont uifontboldsystemfont ofsize nsattributedstringkeyunderlinestyle nsattributedstringkeyforegroundcolor uicolorred attributedstringsetattributes attribute range painword labelattributedtext attributedstring prestylerdefinerule prestylebold prestyleunderline uicolorred labelattributedtext prestyler everything prestyled requirement installation io xcode swift cocoapods dependency manager cocoa project install prestyler simply add following line podfile carthage decentralized dependency manager integrate prestyler xcode project specify cartfile github kruilprestyler use prestyler parse string applies defined rule give nsattributedstring result import prestyler labelattributedtext hello b bold b text prestyled also style text directly listing style labelattributedtext prestyler prestyledby style uicolorgreen defined rule prestylerdefinerule myrule uicolorgreen labelattributedtext text bold prestyledby rule myrule predefined rule several rule already defined b bold italic strike underline labelattributedtext italic text prestyled custom rule easy define simple rule prestylerdefinerule uicolorgreen labelattributedtext green text prestyled complex different style combination prestylerdefinerule bigyellowbold uicoloryellow prestylebold labelattributedtext bigyellowbold green bigyellowbold text prestyled define rule first parameter pattern search string format put list style define style use next class prestylebold italic strike underline precolor red precolor precolor random read color uifont uifontitalicsystemfont ofsize uicolor uicolorgreen string treated hex color int treated font size prefilters easy highlight number information usign prefilters par string insert provided tag used later styling available two method highlight number particular part text form used example filter need style prestylerdefinerule uicolorred let text highlight text number like text using prefilter par text embrace number ready go let prefilteredtext textprefilter type number prefilter text text labelattributedtext prefilteredtextprestyled working color several way manage color prestyler easiest one pas uicolor hex string style prestylerdefinerule colored uicoloryellow prestylerdefinerule colored prestylerdefinerule colored prestylerdefinerule colored color would applied foreground text color set background color use precolor class several interesting option prestylerdefinerule colored precolor uicoloryellow forbackgound prestylerdefinerule colored precolor forbackgound prestylerdefinerule colored precolor forbackgound precolor random percent int method allows get cool effect second color mixed random color prestylerdefinerule randomred precolor uicolorred random random prestylerdefinerule random precolor random thing need know nt put tag inside tag result unexpectable safe instead create new rule desired style define already existing style old one would replaced example run example project clone repo run pod install example directory first author ilium krupko use prestyler monetalios project license prestyler available mit license see license file info
89,Lobsters,swift,Swift programming,UTF-8 String,https://swift.org/blog/utf8-string/,string,string highperformance processing passionate request use considered harmful background change structure bittwiddling compact efficient cfstringgetcstringptr piercing string veil right choice modern computing sourcekit ended restrictive breadcrumb difference encoding memory density bmp scalar endiannessdependent significantly smaller decoding validation complexity unified storage representation like rust isolated surrogate swift release c interoperability unified storage representation unicode small string impact existing code change code use considered harmful objectivec interoperability significant speedup breadcrumb performance code please file bug question associated thread swift forum,string march swift switch preferred encoding string preserving efficient objectivecinteroperability string type abstract away lowlevel concern sourcecode change developer necessary worth highlighting benefit move give u future switching fulfills one string longterm goal enable highperformance processing passionate request performancesensitive developer also lay groundwork providing even performant apis future string preferred encoding baked swift abi performance imperative switch happen time abi stability swift see use stringindexencodedoffset considered harmful potential change behavior misused background change structure even though string type technically struct exist many form think string artisanal enum handcrafted using traditional bittwiddling technique order produce compact efficient code prior swift string content could one two native storage encoding unicoderich text dedicated ascii storage class content ascii swift two replaced single storage encoding ascii unicoderich text large string backed storage class tailallocated content fixed offset object address small string pack content directly string struct bit skipping allocation indirect string capable providing pointer length contiguous content resilient function call resilient function behavior modified without breaking binary compatibility opaque string implement functionality resilient function call mean backing encoding representation mean new string form added point time exchange flexibility benefit inlining optimization string support lazybridging mean nsstrings copied imported swift nsstring capable providing pointer valid contiguous memory eg cfstringgetcstringptr imported indirect string otherwise imported opaque string technical detail see recent swift forum post piercing string veil right choice modern computing native support essential efficient compatibility modern computing environment including serverside clientside programming system programming c interoperability developer tool build system editor linters etc example source code like content encoded sourcekit represents communicates position source code offset buffer swift writing efficient client based service required maintaining bidirectional indexmapping table offset index even forming swift string content involves transcoding content expensive example swiftnio saw speed improvement serving homepage swiftorg upgrading swift due skipping transcoding used system designed early version unicode scalar could fit bit unfortunately bit ended restrictive unicode us scalar swift go great length provide efficient interoperability objectivec based system amortized constanttime interface see breadcrumb preferred efficient representation swift difference encoding memory density ascii portion string content us le memory portion comprised latterbmp scalar us memory encoding equivalent size nonascii scalar latingreekderived aramaicderived script well nonbmp scalar emoji ab –≥–¥ „ÅÑ„Çç„ÅØ ìÄÄìÇÄ scalar af dc dc endiannessdependent table list byte littleendian performancesensitive string processing typically involves working text heavily laden ascii favor even website consists almost entirely chinese prose latter bmp scalar significantly smaller encoded due use ascii html tag string userpresentable prose represent small percentage string usage compared programmerpresentable string identifier log message url textual format etc swift dedicated ascii representation could efficiently encode allascii content however increasingly common even programmerpresentable string occasional nonascii content unicoderich punctuation swift string model single nonascii scalar force entire content storage decoding validation complexity variablewidth encoding variable width variable width make simpler decoding onthefly validation nonascii content however modern processor swift performance model advantage overshadowed advantage single storage representation see unified storage representation modern computer system vector extension outoforder hide relatively complex decoding displaying userpresentable text ui requires expensive computation decoding underlying scalar value diminishing decoding advantage performancesensitive string processing algorithm typically search specific sequence ascii metacharacters amongst sea otherwise opaque byte ideal representation swift like rust performs encoding validation creation far efficient nsstrings lazily bridged zerocopy swift use may contain invalid content ie isolated surrogate swift lazily validated read since change major impact abi done swift release decision switch string encoding primarily motived longterm plan extend beyond release starting even swift change brings significant benefit c interoperability zeroterminated string c string compatible maintaining zerotermination storage native string interoperate c without overhead code mystringwithcstring longer need allocate transcode later free content order supply closure ccompatible string instead contiguous string provide interior pointer small string copied temporary stack space lazily bridged nsstrings still require separate allocationdeallocation transcoding unified storage representation mentioned swift switch two native storage representation one allows better analysis aggressive optimization fewer potential codesize compilation time cost example inlining compiler optimization improve runtime performance potential cost code size swift string method contained pair implementation one storage representation matter form string entire portion potentiallyinlined code even run increase cost diminishes benefit inlining furthermore greatest benefit inlining come followon analysis optimization specific one callsite exponentially difficult perform dual representation swift unified storage representation far amenable inlining followon optimization unified storage representation also faciliated tiny tweak optimization individually deliver marginal gain combine multiplicatively deliver significant performance improvement evaluated swift benefit diminished model complexity costlier retrofit dualstorage representation unicode small string swift introduced smallstring representation platform string ascii code unit length without requiring allocation memory management extended nonascii content model without adding yet another encoding small string representation mentioned carry significant downside since swift switched small string support code unit length without significant downside mean important string smol fact smol new design also benefit platform swift small string support swift support small string code unit platform impact existing code change code majority developer nothing found dropping performance reason reevaluate benchmarking many operation faster swift still need drop something low level performant view native string performancesensitive code implement native string meaning execute closure contiguous byte memory calling build offer even convenience use stringindexencodedoffset considered harmful deprecates stringindexencodedoffset widespread misuse likely surface swift provides safe explicit indexmapping alternative objectivec interoperability string always provided efficient interoperability objectivec apis still case swift string backing storage class subclass nsstring bridge objectivec free new backing string provides direct access content via objectivec apis situation resulting significant speedup interacting swift string bridged objectivec switching encoded content present challenge objectivec interoperability objectivec apis commonly expressed term index length normally converting arbitrary index index would linear time scan would unacceptable performance cost bridged string get around native string requested provide amortized constant time interchange index utilizing breadcrumbing strategy breadcrumb seen transcoding string entire content viceversa costly operation converting offset offset fast linear scan essentially summing highbits byte first time api assuming access used large string performs scan leave breadcrumb fixed stride answer subsequent call amortized time breadcrumb store array string index length string code unit ith breadcrumb corresponds stride offset mapping offset offset access content start breadcrumb offset stride scan forward mapping offset offset le common start reasonable estimate binary search find upper bound lower bound subsequent scan breadcrumb granularity give u way balance speed size calculating breadcrumb granularity even representation behind resilient function call tweaked adjusted future currently string use fine granularity tilting strongly towards speed desire introduce unanticipated regression realistic situation string comprised latterbmp scalar apis called low memory footprint system overall memory pressure common concern performance scan improved granularity increased without harming speed ascii encoding subset mean offset offset string entirely ascii allascii string skip breadcrumbing return answer performance code significant model change risk performance regression scenario encounter performancesensitive code faster please file bug string keep delivering performance improvement every release user report help identify prioritize question please feel free post question post associated thread swift forum
90,Lobsters,swift,Swift programming,Swift getting Rust-like ownership model,https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md,swift getting rustlike ownership model,ownership introduction problem statement ownership bit detail criterion success core definition value memory access law exclusivity duration exclusivity component value reference type independence container idiom independent access independence optimizer subscript enforcing law exclusivity static enforcement dynamic enforcement undefined enforcement enforcement local variable captured closure explicit tool ownership shared value limitation shared value local ephemeral binding function parameter function result loop consuming iteration nonmutating iteration mutating iteration expressing mutating nonmutating iteration generalized accessors intrinsic function lens noncopyable type context noncopyable type explicitlycopyable type implementation priority priority abi stability,ownership introduction adding ownership swift major feature many benefit programmer document manifesto metaproposal ownership lay basic goal work describes general approach achieving goal proposes number specific change feature need separately discussed smaller targeted proposal document intended provide framework understanding contribution change problem statement widespread use copyonwrite value type swift generally success however come drawback reference counting uniqueness testing impose overhead reference counting provides deterministic performance case performance still complex analyze predict ability copy value time thus escape force underlying buffer generally heapallocated stack allocation far efficient require ability prevent least recognize attempt escape value certain kind lowlevel programming require stricter performance guarantee often guarantee le absolute performance predictable performance example keeping audio stream taxing job modern processor even significant persample overhead sort unexpected hiccup immediately noticeable user another common programming task optimize existing code something fall short performance target often mean finding hot spot execution time memory use trying fix way hot spot due implicit copy swift current tool fixing problem relatively poor example programmer fall back using unsafe pointer loses lot safety benefit expressivity advantage library collection type believe problem addressed optin set feature collectively call ownership ownership ownership responsibility piece code eventually cause value destroyed ownership system set rule convention managing transferring ownership language concept destruction concept ownership language like c nonarc objectivec ownership managed explicitly programmer language like c part ownership managed language even language implicit memory management still library concept ownership program resource besides memory important understand code responsibility release resource swift already ownership system cover implementation detail programmer little ability influence proposing easy summarize add core rule ownership system called law exclusivity requires implementation prevent variable simultaneously accessed conflicting way example passed inout two different function optin change believe program adversely affected add feature give programmer control ownership system chiefly allowing propagation shared value optin change largely consist annotation language feature programmer simply use add feature allow programmer express type unique ownership say type implicitly copied optin feature intended experienced programmer desire level control intend ordinary swift programming require working type three tentpoles together effect raising ownership system implementation detail visible aspect language also somewhat inseparable reason explain although course prioritized differently reason talk cohesive feature called ownership bit detail basic problem swift current ownership system copy three tentpoles ownership avoiding copy value may used many different place program implementation ensure copy value survives usable place long type copyable always possible satisfy making copy value however us nt actually require ownership copy variable nt current value would able store value known owned something else nt useful general simple thing like reading value class instance requires instance still valid code read actually reference sometimes difference obvious often impossible know example compiler generally nt know arbitrary function use argument fall back default rule whether pas ownership value default rule wrong program end making extra copy runtime one simple thing allow program explicit certain point whether need ownership closely dovetail desire support noncopyable type resource require unique point destruction memory allocation freed file closed lock released owning reference resource therefore naturally unique thus noncopyable course artificially allow ownership shared say adding reference count destroying resource count reach zero substantially increase overhead working resource worse introduces problem concurrency reentrancy ownership unique language enforce certain operation resource performed code owns resource construction one piece code perform operation time soon ownership shareable property disappears interesting language directly support noncopyable type allow expression optimallyefficient abstraction resource however working type requires abstraction point like function argument correctly annotated whether transfer ownership compiler longer make thing work behind scene adding copy solving either problem well require u also solve problem nonexclusive access variable swift today allows nested access variable example single variable passed two different inout argument method passed callback somehow access variable method called mostly discouraged forbidden compiler standard library bend backwards ensure program wo nt misbehave badly happens example array retain buffer inplace element modification otherwise modification somehow reassigned array variable buffer would freed element still changed similarly compiler generally find difficult prove value memory different point function assume opaque function call might rewrite memory result often insert copy preserve redundant load paranoia worse nonexclusive access greatly limit usefulness explicit annotation example shared argument useful really guaranteed stay valid entire call way reliably satisfy current value variable reentrantly modified make copy pas instead also make certain important pattern impossible like stealing current value variable order build something new unsound variable accessed code middle solution establish rule prevents multiple context accessing variable time propose law exclusivity three goal closely linked mutually reinforcing law exclusivity allows explicit annotation actually optimize code default enables mandatory idiom noncopyable type explicit annotation create optimization opportunity law enable noncopyable type function noncopyable type validate annotation optimal even copyable type create situation law satisfied statically criterion success discussed core team expectation ownership delivered optin enhancement swift programmer able largely ignore ownership suffer expectation prof satisfiable reject ownership rather imposing substantial burden regular program law exclusivity impose new static dynamic restriction belief restriction affect small amount code code thing already document producing unspecified result restriction enforced dynamically also hurt performance hope paid improved optimization potential also provide tool programmer eliminate safety check necessary discus restriction greater detail later document core definition value discussion ownership system bound lower level abstraction talking lot implementation topic context say value mean specific instance semantic userlanguage value example consider following swift code var x var x people would often say x value point let call semantic value level implementation variable x independently modified value must copy value x let call value instance value instance moved around memory remain value instance copy always yield new value instance remainder document use value without qualification mean lowlevel sense value instance mean copy destroy value instance depends type type require extra work besides copying byterepresentation call trivial example int float trivial type ordinary structs enums containing value say ownership document nt apply value type however law exclusivity still apply reference type value instance reference object copying value instance mean making new reference increase reference count destroying value instance mean destroying reference decrease reference count decreasing reference count course drop zero thus destroy object important remember talk copying destroying value mean manipulating reference count copying object necessarily destroying copyonwrite type value instance includes reference buffer work basically like reference type important remember copying value nt mean copying content buffer new buffer similar rule every kind type memory general value owned one two way flight temporary value owned specific execution context computed value operand rest stored sort memory nt need focus much temporary value ownership rule straightforward temporary value created result expression expression used specific place value needed place thereafter implementation clearly take possible step forward value directly place instead forcing copied user already expect happen nothing really improve therefore discussion ownership center around value stored memory five closely related concept swift treatment memory storage declaration languagesyntax concept declaration treated language like memory currently always introduced let var subscript storage declaration type also implementation defines mean read write storage default implementation var let creates new variable store value storage declaration also computed need nt variable behind one storage reference expression syntax concept expression refers storage similar concept language lvalue except nt necessarily usable left side assignment storage nt mutable storage reference languagesemantics concept fully filledin reference specific storage declaration word result evaluating storage reference expression abstract without actually accessing storage storage member includes value storage reference base storage subscript includes value index example storage reference expression like widget weight might abstractly evaluate storage reference storage property var weight double storage subscript subscript index int index value int storage local variable var widget widget variable semantics concept unique place memory store value necessarily mutable least using document variable usually created storage declaration also created dynamically raw memory eg using unsaferawpointer variable always specific type also lifetime ie point language semantics come existence point several destroyed memory location contiguous range addressable memory swift mostly implementation concept swift guarantee particular variable consistent memory location throughout lifetime fact stored memory location variable sometimes temporarily forced exist specific consistent location eg passed inout withunsafemutablepointer access particular evaluation storage reference expression called access access come three kind read assignment modification assignment modification writes difference assignment completely replaces old value without reading modification rely old value storage reference expression classified one three kind access based context expression appears important note decision superficial relies semantic rule immediate context deeper analysis program dynamic behavior example storage reference passed inout argument always evaluated modification caller regardless whether callee actually us current value performs writes even refers evaluation storage reference expression divided two phase first formally evaluated storage reference formal access storage reference occurs duration two phase often evaluated immediate succession separated complex case inout argument last argument call purpose phase division minimize duration formal access still preserving greatest extent possible swift lefttoright evaluation rule law exclusivity established succinctly state first part proposal law exclusivity storage reference expression evaluates storage reference implemented variable formal access duration access may overlap formal access duration access variable unless access read intentionally vague merely say access may overlap without specifying enforced use different enforcement mechanism different kind storage discus mechanism next major section first however need talk general implication rule approach satisfying duration exclusivity law say access must exclusive entire formal access duration duration determined immediate context cause access static property program whereas safety problem laid introduction dynamic general truth static approach dynamic problem conservatively correct dynamicallyreasonable program nonetheless rejected fair ask general principle applies example storage passed inout argument access last duration call demand callerside enforcement access occur storage call possible coarsegrained may many point within called function nt obviously using inout argument perhaps track access inout argument finergrained level within callee instead attempting enforce law exclusivity caller problem idea simply dynamic efficiently implemented callerside rule inout one key advantage caller enormous amount information storage passed mean callerside rule often enforced purely statically without adding dynamic check making paranoid assumption example suppose function call mutating method local variable recall mutating method passed self inout argument unless variable captured escaping closure function easily examine every access variable see none overlap call thus proving rule satisfied moreover guarantee passed callee use information prove safety access contrast calleeside rule inout take advantage kind information information simply discarded point call lead widespread optimization problem see today discussed introduction example suppose callee load value argument call function optimizer reason extension array mutating func organize predicate element bool let first self predicate first return something us first calleeside rule optimizer must copy self first must assume paranoidly predicate might somehow turn around modify variable self bound callerside rule optimizer use copy value held array element long continue prove array nt modified moreover example suggests sort code would actually enabling embracing calleeside rule higherorder operation like worry caller passing predicate reentrantly modifies array simple implementation choice like making local variable first instead reaccessing self example would become semantically important maintaining sort invariant would almost inconceivable surprise swift library generally forbid kind reentrant access since library ca nt completely prevent programmer implementation must nonetheless extra work runtime prevent code running undefined behavior corrupting process exists solely work around possibility code never occur wellwritten program see real loss therefore proposal generally proposes accessduration rule like callerside inout enforcement allow substantial optimization opportunity little semantic cost component value reference type talking variable lot reader might reasonably wonder mean property definition laid property storage declaration stored property creates corresponding variable container access variable obviously need obey law exclusivity additional restriction play due fact property organized together container particular law exclusivity prevent access different property variable value overlapping property classified three group instance property value type instance property reference type static class property kind type propose always treat referencetype static property independent one another treat valuetype property generally nonindependent outside specific important special case potentially significant restriction reasonable wonder necessary need draw distinction different kind property three reason independence container first relates container value type possible access individual property entire aggregate value clear access property conflict access aggregate access aggregate essentially access property example consider variable necessarily local one p point stored property x z possible simultaneously independently modify p px would enormous hole law exclusivity need enforce law somehow three option may make sense reading main section enforcing law first option simply treat px also access p neatly eliminates hole whatever enforcement using p naturally prevent conflicting access also prevent access different property overlapping cause access p triggering enforcement two option involve reversing relationship could split enforcement individual stored property aggregate access p would treated access px py pz could parameterize enforcement teach record specific path property accessed x unfortunately two problem scheme first nt always know full set property property stored implementation type might opaque u due eg generic resilience access computed property must treated access whole value involves passing variable getter setter either inout shared thus actually conflict property attempting make thing work despite using dynamic information would introduce ubiquitous bookkeeping valuetype accessors endangering core design goal value type serve lowcost abstraction tool second scheme applied static enforcement relatively easily applying dynamic enforcement would require fiendish amount bookkeeping carried dynamically simply compatible performance goal thus scheme allows independent access different property aggregate value requires u using static enforcement aggregate access know property stored important special case special case case must fall back general rule access property also access aggregate consideration apply static property property reference type language construct swift access every property class simultaneously nt even make sense talk every static property type arbitrary module add new one time idiom independent access second relates user expectation preventing overlapping access different property value type minor inconvenience law exclusivity prevents spooky action distance value type anyway example calling method variable kick nonobvious sequence event eventually reach back modify original variable would involve two conflicting overlapping access variable contrast many established pattern reference type depend exactly kind notificationbased update fact uncommon ui code different property object modified concurrently one ui background operation preventing independent access would break idiom acceptable static property programmer expect independent global variable would make sense access one global prevent access another independence optimizer third relates optimization potential property part purpose law exclusivity allows large class optimization value example nonmutating method value type assume self remains exactly duration method worry unknown function call middle somehow reach back modify self modification would violate law even mutating method code access self unless method know assumption extremely important optimizing swift code however assumption simply done general content global variable referencetype property class reference shared arbitrarily optimizer must assume unknown function might access instance code system potentially access global variable ignoring access control language implementation would gain little nothing treating access different property nonindependent subscript much discussion also applies subscript though language today subscript never technically stored accessing component value type subscript treated accessing entire value considered overlap access value important consequence two different array element simultaneously accessed interfere certain common idiom working array although case like concurrently modifying different slice array already quite problematic swift believe mitigate majority impact targeted improvement collection apis enforcing law exclusivity three available mechanism enforcing law exclusivity static dynamic undefined choice mechanism must decidable simple inspection storage declaration definition direct accessors must agree done generally decided kind storage declared container attribute might present static enforcement static enforcement compiler detects law violated report error preferred mechanism possible safe reliable imposes runtime cost mechanism used perfectly decidable example used valuetype property law recursively applied ensures base storage exclusively accessed used ordinary referencetype property way prove general particular object reference unique reference object however supported uniquelyreferenced class type could used property case desired compiler may able preserve source compatibility avoid error implicitly inserting copy instead likely something would sourcecompatibility mode static enforcement used immutable variable kind local variable except affected use closure see inout argument instance property value type dynamic enforcement dynamic enforcement implementation maintain record whether variable currently accessed conflict detected trigger dynamic failure compiler may emit error statically detects dynamic enforcement always detect conflict bookkeeping requires two bit per variable using tristate unaccessed read modified although multiple simultaneous read active full count avoided saving old state across access little cleverness bookkeeping intended besteffort reliably detect deterministic violation required detect race condition often good required required successfully handle case concurrent read without eg leaving bookkeeping record permanently read state acceptable concurrentreads case eg leave bookkeeping record unaccessed case even still active reader permit bookkeeping use nonatomic operation however atomic operation would used bookkeeping record packed single byte say different property class concurrent access allowed different variable within class compiler detects access instantaneous sense none code executed access possibly cause reentrant access variable avoid updating bookkeeping record instead check appropriate value common read often simply copy value access compiler detects possible access instantaneous eg variable private internal eliminate bookkeeping expect fairly common dynamic enforcement used local variable necessary due use closure see instance property class type static class property global variable provide attribute allow dynamic enforcement downgraded undefined enforcement specific property class likely client find performance consequence dynamic enforcement excessive important provide optout especially true early day feature still exploring implementation alternative nt yet implemented holistic optimization future work isolating class instance may allow u use static enforcement class instance property undefined enforcement undefined enforcement mean conflict detected either statically dynamically instead simply undefined behavior desirable mechanism ordinary code given swift safe default design real choice thing like unsafe pointer undefined enforcement used memory property unsafe pointer enforcement local variable captured closure ability statically enforce law exclusivity relies ability statically reason us occur analysis usually straightforward local variable becomes complex variable captured closure control flow leading use obscured closure potentially executed reentrantly concurrently even known escape following principle apply closure c potentially escape variable v captured c access v potentially executed potential escape including access within c must use dynamic enforcement unless access read closure c escape function use site within function known closure either directly called used argument another call consider set nonescaping closure used call variable v captured c closure contains write v access within closure must use dynamic enforcement call treated purpose static enforcement write v otherwise access may use static enforcement call treated read v likely rule improved upon time example able improve rule direct call closure explicit tool ownership shared value lot discussion section involves new concept shared value name suggests shared value value shared current context another part program owns consistent law exclusivity multiple part program use value must readonly even owning context concept allows program abstract value without copying like inout allows program abstract variable reader familiar rust see many similarity shared value rust concept immutable borrow source shared value storage reference shared value act essentially like immutable reference storage storage accessed read duration shared value law exclusivity guarantee access able modify original variable access kind shared value may also bind temporary value ie rvalue since temporary value always owned current execution context used one place pose additional semantic concern shared value used scope bind like ordinary parameter let binding shared value used place requires ownership swift simply implicitly copy value like ordinary parameter let binding limitation shared value section document describes several way form use shared value however current design provide general firstclass mechanism working program return shared value construct array shared value store shared value struct field limitation similar existing limitation inout reference fact similarity common useful term encompasses call ephemeral fact design attempt provide firstclass facility ephemeral wellconsidered decision born trio concern scope proposal something conceivably implemented coming month expect proposal yield major benefit language implementation already quite broad aggressive firstclass ephemeral would add enough complexity implementation design clearly scope furthermore remaining languagedesign question quite large several existing language experimented firstclass ephemeral result nt totally satisfactory type system trade complexity expressivity always accept program making type system sophisticated always good tradeoff lifetimequalification system behind firstclass reference language like rust add lot complexity user model complexity real cost user still inevitably necessary sometimes drop unsafe code work around limitation ownership system given line drawn somewhere completely settled lifetimequalification system deserve swift side line rustlike lifetime system would necessarily powerful swift rust swift intentionally provides language model reserve lot implementation flexibility author type swift compiler example polymorphic storage quite bit flexible swift rust mutablecollection swift required implement subscript provides accessor element index implementation satisfy pretty much way want generic code access subscript happens implemented way provides direct access underlying memory access happen inplace subscript implemented computed getter setter access happen temporary variable getter setter called necessary work swift access model highly lexical maintains ability run arbitrary code end access imagine would take implement loop added temporary mutable reference array iteration loop would able queue arbitrary code run cleanup function finished array would hardly lowcost abstraction rustlike mutablecollection interface worked within lifetime rule would promise subscript returned pointer existing memory would nt allow computed implementation similar problem arises even simple struct member rust lifetime rule say pointer struct make pointer field struct lifetime original pointer assumes field actually stored memory stored simply form simple pointer pointer obey standard abi pointer type mean rust use layout optimization like packing boolean field together byte even decreasing alignment field guarantee willing make swift reason remain theoretically interested exploring possibility sophisticated system would allow broader us ephemeral proposing take since system would primarily consist change type system concerned cause abistability problem long term concerned suffer source incompatibility believe enhancement done extension generalization proposed feature local ephemeral binding already somewhat silly limitation swift provides way abstract storage besides passing inout argument easy limitation work around since programmer want local inout binding simply introduce closure immediately call awkward way achieving something ought fairly easy shared value make limitation even apparent local shared value interesting alternative local let avoids copy cost preventing access original storage would encourage programmer use shared instead let throughout code especially optimizer often able eliminate copy anyway however optimizer always remove copy shared microoptimization useful select case furthermore eliminating formal copy may also semantically necessary working noncopyable type propose remove limitation straightforward way inout root treeroot shared element selfqueue initializer required must storage reference expression access last remainder scope function parameter function parameter important way program abstract value swift currently provides three kind argumentpassing passbyvalue owned rule ordinary argument way spell explicitly passbyvalue shared rule self argument nonmutating method way spell explicitly passbyreference rule used inout argument self argument mutating method proposal allow nonstandard case spelled explicitly function argument explicitly declared owned func append value owned element combined shared inout explicit way writing default expect user write often unless working noncopyable type function argument explicitly declared shared func left shared string right shared string bool combined owned inout function argument storage reference expression storage accessed read duration call otherwise argument expression evaluated rvalue temporary value shared call important allow temporary value shared function argument many function parameter marked shared simply function nt actually benefit owning parameter way semantically important passed reference existing variable example expect change thing like comparison operator take parameter shared need possible compare noncopyable value without claiming prevent programmer comparing thing literal value like inout part function type unlike inout function compatibility check override function conversion checking succeed shared owned mismatch function owned parameter converted override function shared parameter argument type must actually copyable method explicitly declared consuming consuming func moveelements collection inout element cause self passed owned value therefore combined mutating nonmutating self still immutable binding within method function result discussed start section swift lexical access model extend well allowing ephemeral returned function performing access requires executing storagespecific code beginning end access function return ability execute code could conceivably return callback along ephemeral expectation callback executed caller done ephemeral however alone would enough callee might relying guarantee caller example considering mutating method struct want return inout reference stored property correctness depends method able clean access property continued validity variable self bound really want maintain current context callee along active scope caller simply enter new nested scope caller ephemeral sort argument wellunderstood situation programming language kind coroutine scoping restriction also thought sugar callback function return break etc actually work expected fact coroutines useful solving number problem relating ephemeral explore idea next subsection loop sense three interesting way passing argument identify three interesting style iterating sequence expressed loop consuming iteration first iteration style already familiar swift consuming iteration step presented owned value way iterate arbitrary sequence value might created demand also important working collection noncopyable type allows collection destructured loop take ownership element take ownership value produced sequence arbitrary sequence iterated multiple time consuming operation sequence explicitly requested declaring iteration variable owned owned employee companyemployees newcompanyemployeesappend employee also used implicitly requirement nonmutating iteration met among thing necessary source compatibility next two style make sense collection nonmutating iteration nonmutating iteration simply visit element collection leaving intact unmodified reason copy element iteration variable simply bound shared value nonmutating operation collection explicitly requested declaring iteration variable shared shared employee companyemployees employeerespected throw catastrophichrfailure also used default sequence type known conform collection since optimal way iterating collection employee companyemployees employeerespected throw catastrophichrfailure sequence operand storage reference expression storage accessed duration loop note mean law exclusivity implicitly prevent collection modified iteration program explicitly request iteration copy value storage using copy intrinsic function operand mutating iteration mutating iteration visit element potentially change iteration variable inout reference element mutating operation mutablecollection must explicitly requested declaring iteration variable inout inout employee companyemployees employeerespected true sequence operand must storage reference expression storage accessed duration loop prevent overlapping access collection rule apply collection type defines operation nonmutating operation eg referencesemantics collection might expressing mutating nonmutating iteration mutating nonmutating iteration require collection produce ephemeral value step several way could express language one reasonable approach would use coroutines since coroutine abandon execution context yielding value caller reasonable allow coroutine yield multiple time corresponds well basic code pattern loop produce kind coroutine often called generator used several major language conveniently implement iteration swift follow pattern would need allow definition generator function eg mutating generator iteratemutable inout element var startindex e endindex e yield self selfformindex client side clear could used implement loop le clear right way allow generator used directly code interesting constraint coroutine used mentioned entire coroutine must logically execute within scope access base value common generator generator function actually return sort generator object compiler must ensure object escape enclosing access significant source complexity generalized accessors swift today provides coarse tool implementing property subscript essentially get set method tool inadequate task performance critical nt allow direct access value without copy standard library access slightly broader set tool provide direct access limited case still quite weak reluctant expose user variety reason ownership offer u opportunity revisit problem get nt work collection noncopyable type return value must therefore owned accessor really need able yield shared value instead returning owned one one reasonable approach allowing use special kind coroutine unlike generator coroutine would required yield exactly need design explicit way programmer invoke one would used accessors idea instead defining get set storage declaration could define read modify var x string var string var first string read x yield x else yield modify x yield x else yield storage declaration must define either get read stored property mutable storage declaration must also define either set modify may also choose define case set used assignment modify used modification useful optimizing certain complex computed property allows modification done inplace without forcing simple assignment first read old value however care must taken ensure modify consistent behavior get set intrinsic function move swift optimizer generally try move value around instead copying useful force hand reason propose move function conceptually move simply toplevel function swift standard library func move value return value however blessed special semantics used indirectly argument expression must reference kind local owning storage either let var inout binding call move evaluated semantically moving current value argument variable returning type expression leaving variable uninitialized purpose definitiveinitialization analysis happens variable next depends kind variable var simply transition back uninitialized us illegal assigned new value thus reinitialized inout binding like var except illegal go scope uninitialized program move inout binding program must assign new value exit scope way including throwing error note safety leaving inout temporarily uninitialized depends law exclusivity let reinitialized used straightforward addition existing definitiveinitialization analysis prof local variable initialized use copy copy toplevel function swift standard library func copy value return value argument must storage reference expression semantics exactly given code argument value returned useful several reason suppresses syntactic specialcasing example discussed shared argument storage reference storage normally accessed duration call programmer suppress force copy complete call calling copy storage reference necessary type suppressed implicit copy see section noncopyable type endscope endscope toplevel function swift standard library func endscope value argument must reference local let var standalone nonparameter nonloop inout shared declaration let var variable immediately destroyed inout shared access immediately end definitiveinitialization analysis must prove declaration used call error storage var captured escaping closure useful ending access control reach end scope well microoptimizing destruction value endscope provides guarantee given variable destroyed given access ended time execution call promise thing happen exactly point implementation still free end earlier lens currently storage reference expression swift concrete every component statically resolvable storage declaration recurring interest community allowing program abstract storage might say let prop widgetweight prop would abstract reference weight property type would something like widget double feature relevant ownership model ordinary function result must owned value shared mutable mean lens could used abstract read writes could created copyable property also mean code using lens would involve copy equivalent code using concrete storage reference suppose instead simple function lens type value application lens would storage reference expression abstract one accessed staticallyunknown member would require language implementation able perform sort access dynamically however problem accessing unknown property much like problem accessing known property whose implementation unknown language already similar thing order implement generic resilience overall feature would fit neatly ownership model laid noncopyable type noncopyable type useful variety expert situation example used efficiently express unique ownership also interesting expressing value sort independent identity atomic type also used formal mechanism encouraging code work efficiently type might expensive copy large struct type unifying theme want allow type copied implicitly complexity handling noncopyable type swift come two main source language must provide tool moving value around sharing without forcing copy already proposed tool document equally important optimizing use copyable type generic system able express generic noncopyable type without massively breaking source compatibility forcing noncopyable type everybody otherwise feature pretty small compiler implicitly emits move instead copy like discussed move intrinsic diagnosis anything nt work moveonly context generic problem real though obvious way model copyability swift copyable protocol type conform unconstrained type parameter would assumed copyable unfortunately would disaster source compatibility usability almost existing generic code written swift assumes copyability really nt want programmer worry noncopyable type first introduction generic code furthermore nt want type explicitly declare conformance copyable default logical solution maintain default assumption type copyable allow select context turn assumption call context moveonly context context lexically nested within moveonly context also implicitly moveonly type moveonly context moveonly struct array element element array element assumed copyable suppresses copyable assumption type declared generic argument hierarchy associated type extension moveonly context moveonly extension array element array element assumed copyable type declare conditional copyability using conditional conformance moveonly extension array copyable element copyable conformance copyable conditional inherent property type must declared module defines type possibly even file nonmoveonly extension type reintroduces copyability assumption type generic argument necessary order allow standard library type support noncopyable element without breaking compatibility existing extension type nt declare conformance copyable giving nonmoveonly extension error function moveonly context extension array moveonly func report u u u suppresses copyability assumption new generic argument hierarchy associated type lot detail moveonly context still air likely need substantial implementation experience really settle right design one possibility considering moveonly context also suppress implicit copyability assumption value copyable type would provide important optimization tool code need careful copy deinit noncopyable type value type declared moveonly conform copyable even conditionally may define deinit method deinit must defined primary type definition extension deinit called destroy value longer required permit noncopyable type used express unique ownership resource example simple filehandle type ensures handle closed value destroyed moveonly struct file var descriptor init filename string throw descriptor darwinopen filename ordonly abnormally exiting init point prevents deinit called descriptor throw deinit darwinclose descriptor consuming func close throw darwinfsync descriptor throw consuming function ownership self nt consume self way destroy exit calling deinit deinit handle actually closing descriptor swift permitted destroy value thus call deinit time last use formal point destruction exact definition use purpose definition yet fully decided value type struct self used deinit order refer stored property type stored property self treated like local let constant purpose definitiveinitialization analysis owned deinit moved value type enum self used deinit operand switch within switch associated value used initialize corresponding binding take ownership value switch leaf self uninitialized explicitlycopyable type another idea area noncopyable type exploring ability declare type implicitly copied example large struct formally copied might outsized impact performance copied unnecessarily type conform copyable possible request copy copy function compiler diagnose implicit copy way would diagnose copy noncopyable type implementation priority document laid large amount work summarize follows enforcing law exclusivity static enforcement dynamic enforcement optimization dynamic enforcement new annotation declaration shared parameter consuming method local shared inout declaration new intrinsics affecting di move function di implication endscope function di implication coroutine feature generalized accessors generator noncopyable type design work di enforcement moveonly context priority abi stability single important goal upcoming release abi stability prioritization analysis feature must center around impact abi mind primary abi consideration law exclusivity affect abi change guarantee made parameter must adopt rule locking abi else get stuck making conservative assumption forever however detail enforced affect abi unless choose offload work runtime necessary changed future release technical note law exclusivity likely major impact optimizer ordinary projectscheduling consideration abiaffecting one standard library likely enthusiastically adopt ownership annotation parameter annotation affect abi library routine library developer need time order adoption importantly need way validate annotation useful unfortunately best way validation implement noncopyable type otherwise low priority list generalized accessors work includes changing standard set general accessors property subscript getsetmaterializeforset essentially readsetmodify affect basic abi polymorphic property subscript access need happen however abi change done without actually taking step allowing coroutinestyle accessors defined swift important step ensuring abi settled good enough coroutines future generator work may involve changing core collection protocol certainly affect abi contrast generalized accessors absolutely need implement generator order carry noncopyable type algorithm affect abi inasmuch adopted standard library library going extensively adopt standard collection need happen stabilize abi new local declaration intrinsics affect abi often case work fewest implication also easiest adopting ownership noncopyable type standard library likely lot work important usability noncopyable type would limiting possible create array noncopyable type
92,Lobsters,swift,Swift programming,Swift is adopting the Language Server Protocol,https://nshipster.com/language-server-protocol/,swift adopting language server protocol,announced swiftorg forum language server protocol arguably important decision apple made swift since releasing language open source update codespaces rumored wwdc fullfledged development environment emacs „ÅØÊ≠ª„Çì„Å† language server protocol work jsonrpc sourcekit language server protocol support clang llvm clang clangd apple announced llvm mailing list libclang getting started language server protocol article visual studio code instruction integrating sublime text vim emacs others potential consequence apple support language server protocol swift becomes appealing generalpurpose programming language swift tensorflow swiftnio xcode get better forum post indexstoredb clang index xcode eventually becomes capable another post argyrios thread,october apple announced swiftorg forum starting work adopt language server protocol lsp swift c language apple making priority support highquality tooling swift developer including working nonapple platform want collaborate opensource community focus effort building common infrastructure shared xcode editor platform end chosen adopt lsp argyrios kyrtzidis october arguably important decision apple made swift since releasing language open source big deal app developer even bigger deal swift developer platform understand week article take look problem language server protocol solves work longterm impact may update github recently announced codespaces upcoming feature promise full visual studio code experience without leaving github thanks swift support lsp soon able edit swift code syntax highlighting autocompletion directly browser wait rumored announcement xcode ipad wwdc codespaces turn ipad fullfledged development environment imagine grid row representing different programming language swift javascript ruby python etc column representing different code editor xcode visual studio vim atom etc cell represents level support particular editor language recently find patchwork compatibility across various combination editor offered deep integration language little support anything else whereas editor aimed generalpurpose least modicum support many language term ide often used describe former case point stubborn use xcode app development foolish use anything else editor better support particular language need write integration code either directly code base via plugin system due implementation difference across language editor improvement say ruby support vim translate better support python could applied make ruby work better atom end result inconsistent support across technology lot wasted effort situation described often referred n problem number integration product editor n language language server protocol change n problem n problem rather editor implement support language need support lsp get level functionality language support lsp essay tomohiro matsuyama entitled emacs „ÅØÊ≠ª„Çì„Å† emacs dead offer nice encapsulation problem describing limitation emacs scripting language multithreading lowlevel apis small user base matsuyama argues preferred approach writing plugin interface external program rather implement something natively language server protocol provides common set functionality supported language including syntax highlighting automatic formatting autocomplete syntax tooltips inline diagnostics jump definition find reference project advanced text symbol search rather reinventing wheel new technology tool editor invest better usability advanced functionality language server protocol work io developer may familiar term server protocol sense communicating web application json format via http actually far language server protocol work case lsp client refers editor generally tool server refers external program run locally separate process protocol lsp resembles simplified version http message consists header part content part header part required contentlength field containing size content part byte optional contenttype field applicationvscodejsonrpc default content part us jsonrpc describe structure request response notification whenever something happens tool user jumping definition symbol tool sends request server server receives request return appropriate response example imagine user open following swift code xcodelike editor supported language server protocol class parent class child parent user symbol parent inheritance clause line editor jump definition parent class line lsp enables interaction behind scene first user open swift code editor launch swift language server separate process running already performs additional setup user executes jump definition command editor sends following request swift language server jsonrpc id method textdocumentdefinition params textdocument uri file usersnshipsterexampleswift position line character upon receiving request swift language server us compiler tool like sourcekit identify corresponding code entity find location declaration preceding line language server responds following message jsonrpc id result uri file usersnshipsterexampleswift range start line character end line character finally editor navigates file case already open move cursor range highlight token beauty approach editor without knowing anything swift programming language swift file associated swift code editor need talk language server update ui knowing editor follow procedure facilitate interaction code written language language server implementation language server protocol support clang llvm n diagram look familiar might approach taken llvm core llvm intermediate representation ir supported language generate ir using compiler frontend ir generate machine code platform supported compiler backend llvm compiler frontend c language called clang also used swift interoperability objectivec recent release clang added new tool called clangd llvm implementation language server protocol april apple announced llvm mailing list switching focus development effort libclang clangd primary way create interactive tooling might think apple among prominent supporter llvm project among thing employed project founder chris lattner decade apple decision switch one obscure clang tool another would seem implementation detail speak make announcement quite interesting clangd appears created entirely outside apple significant contribution google company announcement signal significant shift direction tooling development going forward something would confirmed month later swiftorg forum getting started language server protocol xcode includes sourcekitlsp default toolchain use xcrun command get path language server executable xcrun f sourcekitlsp applicationsxcodeappcontentsdevelopertoolchainsxcodedefaultxctoolchainusrbinsourcekitlsp check article visual studio code get started goto editor beyond sourcekitlsp project github instruction integrating sublime text vim emacs others potential consequence apple support language server protocol take time feel full impact development believe patience rewarded believe happen result lsp coming month year swift becomes appealing generalpurpose programming language although swift used primarily app development designed start capable generalpurpose programming language swift tensorflow swiftnio project starting see promise swift beyond app store among biggest factor holding swift back mainstream adoption point reliance xcode lot ask say web developer machine learning engineer download xcode try swift many great alternative much lower barrier entry support language server protocol make significantly easier folk outside apple ecosystem evaluate swift familiar tool use everything else xcode get better adopting lsp making swift work better editor xcode stand benefit immensely well consider forum post project lead swift apple ted kremenek lsp service argyrios describing functionally powerful sourcekit today lsp opportunity xcode team take fresh approach swift integration capitalize improvement language tooling four year since release first glimpse overhauled infrastructure come way indexstoredb powerful new api querying code symbol swift project clang index xcode eventually becomes capable benefit lsp limited swift objectivec another post argyrios thread getting xcode use new lsp service make viable use lsp service well something interested specific plan announce moment main focus current effort improve story swift done relatively straightforward benefit cascade language lsp support architecture software reflects structure value organization create converse true well extent adopting open language server protocol standard xcode apple making good commitment success swift platform outside apple ecosystem think work tooling lack thereof often key decider technology gain mindshare perhaps importantly believe decision demonstrates increased willingness within least small part company collaboration transparency
93,Lobsters,swift,Swift programming,Simulating the iSight Camera in the iOS Simulator,https://zacstewart.com/2018/10/09/mocking-the-isight-camera-in-the-ios-simulator.html,simulating isight camera io simulator,simulating isight camera io simulator github using avfoundation tutorial make protocol accessing camera making fake implementation camera controller tying together get touch twitter,simulating isight camera io simulator wellknown limitation io simulator unable test code us camera unlike hardware feature location service touch id orientation gesture apple yet add way either link simulator camera output camera host device even allow choose static image mock input camera goal tutorial walk creating interface around camera mocking use simulator result include static image represent front rear camera running app simulator check example app github want see action run phone present simple app camera preview button switch camera button snap photo snap photo capture image present another view includes x button discard go back preview view run simulator behaves except front back camera preview display static image get included project using swift imagine could follow similar pattern objectivec using avfoundation start need wrap access camera clean interface found tutorial extremely helpful recommend read briefly sum create cameracontroller class handle setup switching front back camera capturing photo import avfoundation import uikit class cameracontroller var capturesession avcapturesession var currentcameraposition cameraposition var frontcamera avcapturedevice var frontcamerainput avcapturedeviceinput var rearcamera avcapturedevice var rearcamerainput avcapturedeviceinput var photooutput avcapturephotooutput var previewlayer avcapturevideopreviewlayer var photocapturecompletionblock uiimage error void func prepare completionhandler escaping error void func createcapturesession selfcapturesession avcapturesession func configurecapturedevices throw let session avcapturedevicediscoverysession devicetypes builtinwideanglecamera mediatype avmediatypevideo position unspecified let camera sessiondevicescompactmap camerasisempty throw cameracontrollererrornocamerasavailable camera camera cameraposition front selffrontcamera camera else cameraposition back selfrearcamera camera try cameralockforconfiguration camerafocusmode continuousautofocus cameraunlockforconfiguration func configuredeviceinputs throw guard let capturesession selfcapturesession else throw cameracontrollererrorcapturesessionismissing let frontcamera selffrontcamera selffrontcamerainput try avcapturedeviceinput device frontcamera capturesessioncanaddinput selffrontcamerainput capturesessionaddinput selffrontcamerainput else throw cameracontrollererrorinputsareinvalid selfcurrentcameraposition front else let rearcamera selfrearcamera selfrearcamerainput try avcapturedeviceinput device rearcamera capturesessioncanaddinput selfrearcamerainput capturesessionaddinput selfrearcamerainput else throw cameracontrollererrorinputsareinvalid selfcurrentcameraposition rear else throw cameracontrollererrornocamerasavailable func configurephotooutput throw guard let capturesession selfcapturesession else throw cameracontrollererrorcapturesessionismissing selfphotooutput avcapturephotooutput selfphotooutput setpreparedphotosettingsarray avcapturephotosettings format avvideocodeckey avvideocodectypejpeg completionhandler nil capturesessioncanaddoutput selfphotooutput capturesessionaddoutput selfphotooutput func startcapturesession throw guard let capturesession selfcapturesession else throw cameracontrollererrorcapturesessionismissing capturesessionstartrunning dispatchqueue label prepare async createcapturesession try configurecapturedevices try configuredeviceinputs try configurephotooutput try startcapturesession catch dispatchqueuemainasync completionhandler error return dispatchqueuemainasync completionhandler nil func captureimage completion escaping uiimage error void guard let capturesession selfcapturesession capturesessionisrunning else completion nil cameracontrollererrorcapturesessionismissing return let setting avcapturephotosettings selfphotocapturecompletionblock completion selfphotooutput capturephoto setting delegate self func displaypreview view uiview throw guard let capturesession selfcapturesession else throw cameracontrollererrorcapturesessionismissing selfpreviewlayer avcapturevideopreviewlayer session capturesession selfpreviewlayer videogravity resizeaspectfill selfpreviewlayer connection videoorientation portrait viewlayerinsertsublayer selfpreviewlayer selfpreviewlayer frame viewframe func switchcameras throw guard let currentcameraposition currentcameraposition let capturesession selfcapturesession capturesessionisrunning else throw cameracontrollererrorcapturesessionismissing capturesessionbeginconfiguration func switchtofrontcamera throw let input capturesessioninputs avcaptureinput guard let rearcamerainput selfrearcamerainput inputscontains rearcamerainput let frontcamera selffrontcamera else throw cameracontrollererrorinvalidoperation selffrontcamerainput try avcapturedeviceinput device frontcamera capturesessionremoveinput rearcamerainput capturesessioncanaddinput selffrontcamerainput capturesessionaddinput selffrontcamerainput selfcurrentcameraposition front func switchtorearcamera throw let input capturesessioninputs avcaptureinput guard let frontcamerainput selffrontcamerainput inputscontains frontcamerainput let rearcamera selfrearcamera else throw cameracontrollererrorinvalidoperation selfrearcamerainput try avcapturedeviceinput device rearcamera capturesessionremoveinput frontcamerainput capturesessioncanaddinput rearcamerainput capturesessionaddinput rearcamerainput selfcurrentcameraposition rear switch currentcameraposition case front try switchtorearcamera case rear try switchtofrontcamera capturesessioncommitconfiguration extension cameracontroller avcapturephotocapturedelegate func photooutput output avcapturephotooutput didfinishprocessingphoto photo avcapturephoto error error let error error selfphotocapturecompletionblock nil error else let data photofiledatarepresentation let image uiimage data data selfphotocapturecompletionblock image nil else selfphotocapturecompletionblock nil cameracontrollererrorunknown enum cameracontrollererror swifterror case capturesessionalreadyrunning case capturesessionismissing case inputsareinvalid case invalidoperation case nocamerasavailable case unknown public enum cameraposition case front case rear make protocol accessing camera found controller extremely helpful running app simulator throw cameracontrollererrornocamerasavailable app able deal access camera taking photo integral app like mine save needing test actual device time turn cameracontroller class protocol protocol cameracontroller func prepare completionhandler escaping error void func captureimage completion escaping uiimage error void func displaypreview view uiview throw func switchcameras throw rename former cameracontroller class realcameracontroller class realcameracontroller nsobject cameracontroller extension realcameracontroller avcapturephotocapturedelegate making fake implementation camera controller done fake protocol using static image simulate back camera add two photo assetsxcassets call front camera back camera note probably want dimension image match whatever dimension expect camera produce implement mockcameracontroller conforms cameracontroller protocol making use two image lieu actual camera class mockcameracontroller nsobject cameracontroller var frontimage uiimage named front camera var rearimage uiimage named rear camera var cameraposition camerapositionrear var previewlayer calayer func prepare completionhandler escaping error void setpreviewframe image selfrearimage completionhandler nil func captureimage completion escaping uiimage error void selfcameraposition camerapositionrear completion selfrearimage nil else completion selffrontimage nil func displaypreview view uiview throw selfpreviewlayerframe viewbounds viewlayerinsertsublayer selfpreviewlayer func switchcameras throw selfcameraposition camerapositionrear selfcameraposition camerapositionfront setpreviewframe image selffrontimage else selfcameraposition camerapositionrear setpreviewframe image selfrearimage private func setpreviewframe image uiimage selfpreviewlayercontents imagecgimage mockcameracontroller pretty simple keep track camera selected front back provides selected camera standin image call captureimage creates calayer insert preview view layer draw appropriate image onto whenever switch camera tying together last thing need able tell use realcameracontroller use mockcameracontroller create platform struct encapsulate logic import foundation struct platform static var issimulator bool return targetossimulator use view controller check see issimulator true use appropriate implementation cameracontroller class viewcontroller uiviewcontroller let cameracontroller cameracontroller platformissimulator mockcameracontroller realcameracontroller iboutlet weak var previewview uiview iboutlet weak var previewcanvas uiview iboutlet weak var captureview uiview iboutlet weak var captureimage uiimageview ibaction func discardcapture sender selfcaptureimageimage nil selfcaptureviewishidden true selfpreviewviewishidden false ibaction func snapphoto sender selfcameracontrollercaptureimage image error guard let image image else debugprint could nt capture image error return selfcaptureimageimage image selfcaptureviewishidden false selfpreviewviewishidden true ibaction func switchcameras sender try selfcameracontrollerswitchcameras catch debugprint failed switch camera error override func viewdidload superviewdidload selfcameracontrollerprepare error let error error debugprint failed start cameracontroller error try selfcameracontrollerdisplaypreview selfpreviewcanvas catch debugprint could nt preview camera error everything right able run app simulator camera ui see mock photo captureimage callback called uiimage like would real device found helpful feedback leave comment get touch twitter thanks reading
94,Lobsters,swift,Swift programming,"LLVM JIT, Objective-C and Swift on macOS: knowledge dump",https://stanislaw.github.io/2018/09/03/llvm-jit-objc-and-swift-knowledge-dump.html,llvm jit objectivec swift macos knowledge dump,mutation testing swift mull could work looking contributor tl dr anyone want run swift llvm jit mull mullprojectllvmjitobjc selector unrecognised invoking objectivec method using llvm executionengine llvmdev possible execute objectivec code via llvm jit registered objectivec code macho binary objectivec code llvm runtimedyld appendix example macho file simple objectivec code llvm jit section memory manager registration selector registration class registration category known issue known issue duplicate definition class known issue objcreadclasspair work objcallocateclasspair conclusion llvmjitobjc appendix b altenative approach objectivec registration using clang appendix example macho file simple objectivec code appendix b altenative approach objectivec registration using clang known issue objcreadclasspair work objcallocateclasspair,post counterpart another post mutation testing swift mull could work looking contributor tl dr possible run objectivec swift code llvm jit macos system one way make work subclass sectionmemorymanager used llvm jit engine intercept memory section related objectivec get allocated memory find objectivec metadata section parse objectivec class information metadata use number objectivec runtime api method register found objectivec class objectivec runtime although approach target objectivec code objectivec runtime also seems enable support combined swift objectivec code given objectivec class registered swift code enabled objectivec interoperability seems run without major issue llvm jit information actual summer based detail llvm jit objectivec runtime found anyone want run swift llvm jit want llvm jit run swift objectivec code want mull mutation testing tool support programming language mull accepts input program precompiled llvm bitcode find performs mutation program run program numerous modified mutated clone using llvm jit running program mutation memory llvm jit save time mull recompile relink program scratch mull find performs mutation llvm ir level never go back ast level approach give great advantage performance also imposes constraint mull support programming language run llvm jit case important llvm jit run swift objectivec prototype code found mullprojectllvmjitobjc research topic started stackoverflow topic selector unrecognised invoking objectivec method using llvm executionengine information found llvmdev thread created llvmdev possible execute objectivec code via llvm jit via mailing list registered objectivec code objectivec code known objectivec runtime code activated almost run always something objectivec runtime like kind code following popular error get unregistered objectivec code objectivec selector registered get exception unregistered selector selector message match selector known objective c runtime register objectivec class code even execute program exit get crash libobjccacheerasenolock unregistered class something wrong objectivec runtime internal cache class category method registered exception unrecognized selector unregistered category method unrecognized selector sent instance unregistered class also mean might execute without error possible obtain thing like nsstringfromclass nil unregisteredclass known objectivec runtime nsclassfromstring unregisteredclass nil macho binary objectivec code objectivec code compiled object file compiler also emits special objectivecrelated section object file executable library objectivec code loaded memory dyld loader read loaded code trigger callback register objectivec class objectivec runtime running process objectivecrelated section name start objc example objcselrefs contains information selector objcclasslist contains reference objectivec class declaration objccatlist contains reference objectivec class category others llvm jit dyld trigger code objectivec registration dynamic loader implementation llvm jit us llvm runtimedyld class related class macho aware objectivec special code objectivec registration needed approach described one way accomplish know objectivec section look like macho object file see appendix example macho file simple objectivec code llvm jit section memory manager llvm jit given object file execution allocates memory load content allocated memory memory allocated one important task llvm jit applies relocation symbol relative offset original object file llvm jit us relative offset calculate resolve real symbol address allocated memory running process relocation finished llvm jit mark code section allocated memory executable execute code contained section sectionmemorymanager one memory management class provided llvm two important method allocatedatasection uintptrt size unsigned alignment unsigned sectionid stringref sectionname bool isreadonly override bool finalizememory std string errmsg nullptr override sectionmemorymanager used memory allocation allocatedatasection method called per data section object file example object file macho binary objectivec code section memory manager allocatedatasection called section objcselrefs objcclasslist etc create subclass sectionmemorymanager called objcenabledmemorymanager override allocatedatasection function collect pointer section objcenabledmemorymanager collecting objectivec related section objcenabledmemorymanager allocatedatasection uintptrt size unsigned alignment unsigned sectionid stringref sectionname bool isreadonly override pointer sectionmemorymanager allocatedatasection size alignment sectionid sectionname isreadonly sectionnamefind objc llvm stringref npos errs sectionmemorymanager allocatedatasection objc sectionname pointer pointer size size n objectsectionentry entry pointer size sectionname objcsectionspushback entry return pointer allocated section sectionmemorymanager allocatedatasection objc objcconst pointer size sectionmemorymanager allocatedatasection objc objcdata pointer size sectionmemorymanager allocatedatasection objc objcselrefs pointer size sectionmemorymanager allocatedatasection objc objcclassrefs pointer size sectionmemorymanager allocatedatasection objc objcclassname pointer size sectionmemorymanager allocatedatasection objc objcmethtype pointer size sectionmemorymanager allocatedatasection objc objcmethname pointer size sectionmemorymanager allocatedatasection objc objcclasslist pointer size given pointer objectivec related section allocated memory collected possible traverse section objectivec registration routine hand code right moment right llvm jit finalizes memory objcenabledmemorymanager register objectivec finalize memory bool objcenabledmemorymanager finalizememory std string errmsg registerobjc bool success sectionmemorymanager finalizememory errmsg return success registration selector following first crash see running unregistered objectivec code llvm jit selector match selector known objectivec runtime lli nsforwarding warning selector message alloc match selector known objective c runtime abort lli nsautoreleasepool alloc unrecognized selector sent class lli terminating app due uncaught exception nsinvalidargumentexception reason nsautoreleasepool alloc unrecognized selector sent class objcselrefs section responsible selector entry objcselrefs simply selector ie pointer char string reason exception selector object file allocated llvm jit selector known objectivec runtime given collected information section get access content objcselrefs section register selector using code registration simply rewriting selector entry objcselrefs section point selector registered objectivec runtime void registerselectors void selrefssectionptr uintptrt selrefssectionsize sectionstart selrefssectionptr memory paddedaligned jit second half section memory empty selrefssectionsize cursor sectionstart cursor sectionstart selrefssectionsize cursor cursor sizeof sel sel selector sel cursor const char name selgetname selector selector selregistername name code executed selector loaded code point selector entry objcselrefs section selector entry point selector known objectivec runtime make exception go away registration class registration class important part prototype also hacky us public internal method objectivec runtime api objcreadclasspair found objcinternalh header file libobjc objcregisterclasspair method defined objcobjcinternalh class metaclass construction compilergenerated memory image cl cl isa must objcmaxclasssize byte extra byte used metadata must zero info objcimageinfo would emitted static compiler return nil class name already exists return nil superclass nil class marked root return nil superclass construction call objcregisterclasspair struct objcimageinfo objcexport class nullable objcreadclasspair class nonnull cl const struct objcimageinfo nonnull info objcavailable endif done objcselrefs section given collected information class objcclasslist section iterate class call objcregisterclasspair function every class pointer code register objectivec class objcreadclasspair objcregisterclasspair class mull objc runtime registeroneclass classrefptr class superclass classref classrefptr metaclassref classref getisapointer class runtimeclass objcreadclasspair class classref null assert runtimeclass following might wrong class registered objcreadclasspair still hack flag call objcregisterclasspair make sure dispose objcdisposeclasspair jit deallocates assert objcclassisregistered class runtimeclass hereobjcclass runtimeclassinternal hereobjcclass runtimeclass hereobjcclass runtimemetaclassinternal hereobjcclass runtimeclassinternal isa define rwconstructing hereclassrwt sourceclassdata runtimeclassinternal data hereclassrwt sourcemetaclassdata hereclassrwt runtimemetaclassinternal data sourceclassdata flag rwconstructing sourcemetaclassdata flag rwconstructing objcregisterclasspair runtimeclass return runtimeclass experience creating objectivec class using objectivec runtime know pair method objcallocateclasspair objcregisterclasspair must used create new objectivec class difference create new class rather activate existing class reading information definition exists objcclasslist section objcreadclasspair method used instead objcallocateclasspair method turn objcreadclasspair written play well objcregisterclasspair method need small hack set rwconstructing flag class struct pretend new class want objcregisterclasspair register registration category category definition objccatlist section pointer class trivial connect definition class belongs class registered objcreadclasspairobjcregisterclasspair read information category use classaddmethod method public objectivec runtime api add category instance class method registered class known issue known issue duplicate definition class calling objcregisterclasspair class pointer obtained objcreadclasspair always trigger warning objc class firstclass implemented one two used one undefined one detail notice however pointer class equal looking code cause warning seems code built objcreadclasspair case mind exception annoying nothing criminal going hood known issue objcreadclasspair work objcallocateclasspair beginning thought possible register objectivec class public method objcallocateclasspair objcregisterclasspair contrast objcreadclasspair read existing objectivec class definition macho register objectivec runtime objcallocateclasspair creates new class struct class register class objectivec runtime approach creates redundancy definition macho new class struct created two copy class structs exist memory unregistered structs memory allocated macho section memory created objectivec runtime method problem u another problem seems hard fix objcallocateclasspair designed create new class break swift code contains objectivec class turn code generated file swift code objectivecbased class hardcoded objectivec definition written macho creating new parallel class hierarchy objectivec runtime work start get crash related pointer pointing wrong offset memory typical static offsetrelated crash using registering mixed swiftobjectivec class objcallocateclasspair another issue objcallocateclasspair possible specify want create swiftenhanced objectivec class objcallocateclasspair decides whether creates struct normal objectivec swiftenhanced class layout based superclass weird check source code possible create swift class subclass objectivec class objcallocateclasspair create objectivec class swift class example want use objcallocateclasspair register swift class subclass xctestcase objectivec class create class struct objectivec class instead swift class conclusion post shared important part learned llvm jit objectivec topic prototype code llvmjitobjc raw contains basic test case approach described flaw overlooked part objectivec implement still believe framework reading objectivec section loaded runtimedyld using method objectivec runtime register objectivec content class selector category right approach also believe rather small joint effort developer llvm jit swift objectivec runtime approach could implemented would hack internals objectivec runtime another approach also exist see appendix b altenative approach objectivec registration using clang appendix example macho file simple objectivec code following illustrates objectivecrelated section appear macho object file compile file clang fobjcarc objcm import foundationfoundationh interface someclass nsobject void hello end implementation someclass void hello printf hello someclassn end int main someclass obj someclass new obj hello return many way see objectivec section macho file including listing section header using otool otool l aout aout mach header magic cputype cpusubtype cap filetype ncmds sizeofcmds flag section sectname objcclasslist segname data addr size offset align reloff nreloc flag section sectname objcimageinfo segname data addr size offset align reloff nreloc flag section sectname objcconst segname data addr size offset align reloff nreloc flag section sectname objcselrefs segname data addr size offset align reloff nreloc flag section sectname objcclassrefs segname data addr size offset align reloff nreloc flag section sectname objcdata segname data addr size offset align reloff nreloc flag listing section header using llvmobjdump sectionheaders aout aout file format macho section idx name size address type text text stub text stubhelper text cstring data objcclassname data objcmethname data objcmethtype data unwindinfo data nlsymbolptr data lasymbolptr data objcclasslist data objcimageinfo data objcconst data objcselrefs data objcclassrefs data objcdata data listing section header using machoview hopper also possible see navigate content objectivec section objcclasslist section pointer someclass class data look like objcclasslist section pointer someclass metadata metadata someclass class contained another section called objcdata objcdata section struct someclass metadata actual data someclass hello method found objcconst section data field struct rendered objcclasssomeclassdata objcconst section struct metadata someclass appendix b altenative approach objectivec registration using clang llvmdev forum david chisnall proposed called best way objectivec registration following quote david found llvmdev thread year ago put together proofofconcept implementation cgobjcruntime emitted load function called runtime function registering selector generating class adding method code anymore probably bitrotted extent clean reimplementation would probably easier hundred line code would work objectivec runtime jit context said earlier thread best way add new subclass cgobjcruntime generates code using public create new cgobjcruntime subclass creates module init function construct class using public apis adding something like fobjcruntimejit clang flag particularly difficult mean code used objectivec runtime reason go cgobjcruntime approach easier go runtimedyld solve one problem time sectionmemorymanager already gave u objectivec section could focus register objectivec runtime llvm jit without figure hack clang emit section llvm ir would additional challenge also still clear public objectivec runtime api would emitted code use given limitation public method objcallocateclasspair described known issue objcreadclasspair work objcallocateclasspair
95,Lobsters,swift,Swift programming,Value-Oriented Programming,https://matt.diephouse.com/2018/08/value-oriented-programming/,valueoriented programming,persistdb,august wwdc influential session titled protocoloriented programming swift dave abraham explained swift protocol used overcome shortcoming class suggested rule start class start protocol illustrate point dave described protocoloriented approach primitive drawing app example worked primitive shape protocol drawable struct polygon drawable var corner cgpoint struct circle drawable var center cgpoint var radius cgfloat struct diagram drawable var element drawable value type eliminates many problem objectoriented approach instance shared implicitly reference semantics object add complexity passing object around changing property object one place affect code access object concurrency requires locking add ton complexity problem inheritance reusing code via inheritance fragile inheritance also couple interface implementation make reuse difficult topic even oo programmer tell prefer composition inheritance imprecise type relationship subclass difficult precisely identify type eg nsobjectisequal must careful compare compatible type protocol work generic precisely identify type handle actual drawing renderer protocol added describes primitive drawing operation protocol renderer func move p cgpoint func line p cgpoint func arc center cgpoint radius cgfloat startangle cgfloat endangle cgfloat type could draw renderer protocol drawable func draw renderer renderer extension polygon drawable func draw renderer renderer renderermove cornerslast p corner rendererline p extension circle drawable func draw renderer renderer rendererarc center radius radius startangle endangle twopi extension diagram drawable func draw renderer renderer f element fdraw renderer made possible define different renderers worked easily given type main selling point ability define test renderer let verify drawing comparing string struct testrenderer renderer func move p cgpoint print moveto px py func line p cgpoint print lineto px py func arc center cgpoint radius cgfloat startangle cgfloat endangle cgfloat print arcat center radius radius startangle startangle endangle endangle could also easily extend platformspecific type make work renderers extension cgcontext renderer cgcontext already move cgpoint func line p cgpoint addline p func arc center cgpoint radius cgfloat startangle cgfloat endangle cgfloat addarc center center radius radius startangle startangle endangle endangle clockwise true lastly dave showed extended protocol provide convenience extension renderer func circle center cgpoint radius cgfloat arc center radius radius startangle endangle twopi think approach pretty compelling much testable also allows u interpret data differently providing separate renderers value type neatly sidestep number problem objectoriented version would think better way write code despite improvement logic side effect still tightly coupled protocoloriented version polygondraw thing convert polygon number line render line come time test logic need use despite wwdc talk implies mock extension polygon drawable func draw renderer renderer renderermove cornerslast p corner rendererline p separate logic effect turning separate step instead renderer protocol move line arc let declare value type represent underlying operation enum path hashable struct arc hashable var center cgpoint var radius cgfloat var startangle cgfloat var endangle cgfloat struct line hashable var start cgpoint var end cgpoint replacing arc cgpoint radius cgfloat startangle cgfloat endangle cgfloat case arc arc replacing move cgpoint line cgpoint case line line instead calling method drawables return set path used draw protocol drawable var path set path get extension polygon drawable var path set path return set zip corner cornersdropfirst cornersprefix map pathlineinit map pathline extension circle drawable var path set path return arc patharc center center radius radius startangle endangle twopi extension diagram drawable var path set path return element map reduce set cgcontext extended draw path extension cgcontext func draw arc patharc addarc center arccenter radius arcradius startangle arcstartangle endangle arcendangle clockwise true func draw line pathline move linestart addline lineend func draw path set path path path switch path case let arc arc draw arc case let line line draw line add convenience method creating circle extension path static func circle center cgpoint radius cgfloat path return arc patharc center center radius radius startangle endangle twopi work requires roughly amount code introduced boundary let u separate two part system boundary let u test without mock need testrenderer anymore verify drawable drawn correctly testing value return path property path equatable simple test let polygon polygon corner x x x let path set path line line x x line line x x line line x x xctassertequal polygonpaths path insert step valueoriented approach take set path transform directly say wanted flip result horizontally calculate size return new set path flipped coordinate protocoloriented approach would somewhat difficult transform drawing step flip horizontally need know final width since width known ahead time need write renderer saved call move line arc pas another render render flipped result theoretical renderer creating boundary created valueoriented approach step corresponds path method step corresponds draw set path easily inspect data debugging say complex diagram drawing correctly drop debugger find diagram drawn find problem using protocoloriented approach need create testrenderer available outside test need use real renderer actually render somewhere inspecting data difficult using valueoriented approach need call path inspect information debugger display value much easily effect boundary add another semantic layer open additional possibility testing transformation inspection used approach number project found immensely helpful even simple example like one given value number benefit benefit become much obvious helpful working larger complex system like see real world example check persistdb swift persistence library working public api present query predicate expression reduced sqlquerys sqlpredicates sqlexpressions reduced sql value representing actual sql
96,Lobsters,swift,Swift programming,Never,https://nshipster.com/never/,never,comment murphy law nothing crashing remove noreturn attribute introduce empty never type joe groff uninhabited type namespace functionality reason type eliminating impossible state generic type conform never equatable hashable matt diephouse never bottom type unwrap die expressive throw typed throw,never proposition event occur time past future logical impossibility time axis nothingness stretching direction forever especially worrisome encounter comment code never happen every compiler textbook tell comment like one affect behavior compiled code murphy law say otherwise swift keep u safe unpredictable chaos programming never believe answer nothing crashing never proposed replacement noreturn attribute remove noreturn attribute introduce empty never type joe groff prior swift function stop execution like fatalerror file line abort exit annotated noreturn attribute told compiler return call site swift noreturn func fatalerror message string string file staticstring file line uint line change fatalerror trapping cohort declared return never type swift func fatalerror message autoclosure string string file staticstring file line uint line never type replace functionality annotation must pretty complex right nope actually opposite never arguably simplest type entire swift standard library enum never uninhabited type never uninhabited type mean value put another way uninhabited type constructed enumeration case common example uninhabited type swift unlike structure class enumeration receive initializer unlike protocol enumeration concrete type property method generic constraint nested type uninhabited enumeration type used throughout swift standard library thing like namespace functionality reason type never like fancy bell whistle special virtue rather consider function declared return uninhabited type uninhabited type value function return normally could instead function must either stop execution run indefinitely eliminating impossible state generic type sure interesting theoretical perspective practical use never u much least acceptance conform never equatable hashable proposal matt diephouse explains motivation behind conforming obscure type equatable protocol way never useful representing impossible code people familiar return type function like fatalerror never also useful working generic class example result type might use never value represent something always error use never error represent something never error swift standard result type look something like enum result value error case success value case failure error result type used encapsulate value error produced function execute asynchronously whereas synchronous function use throw communicate error example function make asynchronous http request might use result type wrap either response data error func fetch request urlrequest completion result urlresponse data error void calling method switch result handle success failure separately fetch request result switch result case let success response print success response case failure let error print failure error consider function guaranteed always return successful result completion handler func alwayssucceeds completion result string never void completion success yes specifying never result error type using type system signal failure option really cool swift smart enough know need handle failure switch statement exhaustive alwayssucceeds result switch result case success let string print string see effect played logical extreme implementation conforming never comparable extension never comparable public static func lh never rh never bool switch lh rh never uninhabited type possible value switch lh rh swift understands missing case since case return bool method compiles without problem neat never bottom type corollary original swift evolution proposal never hint theoretical usefulness type enhancement uninhabited type seen subtype type evaluating expression never produce value matter type expression supported compiler would enable potentially useful unwrap die forced unwrap operator one controversial part swift best necessary evil worst code smell suggests sloppiness without additional information really tough tell difference two example consider following code assumes array empty let array int let firstiem arrayfirst avoid forceunwrapping could use guard statement conditional assignment instead let array int guard let firstitem arrayfirst else fatalerror array empty future never implemented bottom type could used righthand side nilcoalescing operator expression future swift let firstitem arrayfirst fatalerror array empty really motivated adopt pattern today manually overload operator thusly func lh rh autoclosure never switch lh case let value return value case nil rh expressive throw similarly throw changed statement expression return never could use throw righthand side future swift let firstitem arrayfirst throw errorempty typed throw looking even road throw keyword function declaration added support type constraint never type could used indicate function throw similar result example future swift func neverthrows throw never neverthrows try unnecessary guaranteed succeed perhaps making claim something never case feel like invitation universe prove otherwise whereas modal doxastic logic allow facesaving compromise true time believed temporal logic seems hold proposition higher standard fortunately u swift life higher standard thanks unlikeliest type never
97,Lobsters,swift,Swift programming,Compiler Explorer (think CodePen for C(++)/D/Go/Rust/Swift/Haskell disassembly),https://gcc.godbolt.org/,compiler explorer think codepen c dgorustswifthaskell disassembly,,
98,Lobsters,swift,Swift programming,On my misalignment with Apple's love affair with Swift,https://rant.monkeydom.de/posts/2018/06/10/on-my-misalignment-with-apple_s-love-affair-with-swift,misalignment apple love affair swift,lua cocoa erlangotp ruby rail builder swift tension resolved yet since design conflict essentially ca nt resolved mitigated inhibits creativity writing rust elixirphoenix,life software engineer occasion design principle language struck inherently beautiful consequently inspired work lua simplicity modularity clear design goal followed cocoa simple object oriented extension c great tradeoff consistent clear still optimal interop existing world c c course cocoa design principle purpose empowerment erlangotp powerful implementation actor model concept lightweight process ease build distributed system due purely functional eye opening benefit always state necessary analyze fix crash ruby rail going everything object dynamic object oriented scripting language rail adding fantastic model view controller abstraction top great use dynamism language amongst part still awe builder xml view part none language language framework combo perfect one thing common well defined set carefully chosen design goal tailored towards certain usage scenario goal give guidance using move towards consistency greatness writing contrast swift first question desire answer think one clean answer wanted better modern future one language rule first red flag anyone ever tried rewrite anything outset wanted silver bullet scale appui language system language interop existing foundation cocoa still bring wide reaching standard library adding lot duplication functional objectoriented protocol oriented time want strongly typed time convenient type inference fall foot trying grasp simple expression become complex manage design compiled static emphasized repl playground face make want look like great scripting solution nt seems driven need compiler gap needed filled static analyzer seem supercharged instead catering app developer actual need efficient hassle free productive io app development meant offer progressive disclosure simple used playground learning time learning reading swift book standard library akin mastering c quite unforgiving harsh complex top chose opinionated feature many long time developer consider virtue problem adding compile time static dispatch making dynamic dispatch message passing second class citizen introspection nonfeature define convenience elegance nilmessage passing source problem classify implicit optionality object purely source bug time failed attack solve support prominent current future computing problem book would important area try good concurrency distributedsystems overall api interaction complexity debugability actual app ui development developer productivity keep defering big win future offered labour intensive upgrade path without steady revenue stream many apps would compiled fine done either ca nt take advantage new feature device easily taken app store alltogether upgrading would costly working indie devscene probably know one story well supposed damage done real top great tension existing apple framework ecosystem apple great job exposing cocoafoundation graspable swift could still great tension way swift want see world design paradigm created existing framework tension resolved yet since design conflict essentially ca nt resolved mitigated old foundational design pattern cocoa like delegation data source flat class hierarchy way collection class work forgiving api general work world constantly torn thing swiftstandardlibrary way cocoa way bridging inbetween make matter worse lot concept nt even good equivalent least generates almost unbearable mental load lead writer block andor running around cognitive circle trying answer question best express problem make swift happy code add insult injury attention taken away solving focussing actual problem writing great app framework joy use whereas always strived maximum developer productivity purpose yes swift code might end correct end also might alert edge case early however flip side inhibits creativity writing starting program way enjoy working nt yet know api best expressed try different way express find sweet spot go back unify accordingly swift actively distracts endeavor making answer question really nt want answer right yes stuff might le correct meantime heck want design phase find concept sweet spot iterate pivot quickly opposition swift deep fundamental design level see devil shoulder always fighting attention away problem domain back everything completely correct swifty time unforgiving towards bigger change ever tried switch code object back structs vice versa nice progressive disclosure start prototyping slowly get help tool refine found sweet spot turn warning run static analyzer optimize hot spot towards c c year late pivot take everything learned form developer experience evolution really caters goal idea platform opinion lot lofty goal nt achieved discussed even nongoals imagine world would gotten amount drive attention swift got apple big leap see everyone would better right swift ended jack trade master none defer idea evolution potential later blog post nuanced well would love see pivot like honest seem quite unlikely point say ecosystem swift heart produce something one productive content however least definitely fall delightful category languageframework combo mentioned beginning sad unnecessary regression given clear opposition swift personal journey go luckily promising avenue explore rust strongly typed language clear direction purpose nt like strong type system world much general lower level hard problem clearly serf purpose want get clear grasp benefit wander lower level world elixirphoenix look like perfect mind meld rail erlang hope good sound wo nt leave apple ecosystem completely even flaw mac io device still best breed many way however strict noswift policy future software project hope still feasible
99,Lobsters,swift,Swift programming,Scaling a Swift SDK - Learnings on building a set of Swift Libraries,https://blog.bitrise.io/scaling-a-swift-sdk-learnings-on-building-a-set-of-swift-libraries-meetup-recording,scaling swift sdk learning building set swift library,scaling swift sdk learning building set swift library meetup recording,scaling swift sdk learning building set swift library meetup recording
100,Lobsters,swift,Swift programming,WWDC18,https://developer.apple.com/wwdc/,,full stream ahead watch video,full stream ahead join u wwdc like never jampacked allonline experience coming apple park watch video
101,Lobsters,swift,Swift programming,Why Swift for TensorFlow?,https://github.com/tensorflow/swift/blob/master/docs/WhySwiftForTensorFlow.md,swift tensorflow,tensorflow graph program extraction algorithm automatic differentiation python language interoperability got design overview document static analysisbased graph program extraction algorithm project goal programming language property evaluation specific language pro con swift project goal expressiveness high performance hardware abstraction large dynamic selfmodifying model mixture expert reinforcement learning model performance predictability fast iteration time debuggability introspection highend user experience flexible deployment tflite fast deployment bestofclass automatic differentiation ad embrace tensorflow graph ecosystem property programming language strength python community opensource crossplatform aesthetic design mainstream syntax shallow learning curve high productivity low ceremony debugger interactivity predictable semantics memory safety python apis python challenge performance concurrency deployment custom ops property needed graph program extraction automatically identify extract graph program predictable explainable limited model unpredictable difficult explain general model class hierarchy analysis interprocedural alias analysis graph program extraction additional property needed graph program extraction restricted pointer aliasing unrestricted aliasing pointer reference knowable tensor ops suitable compiler ir intermediate representation control flow graph ssa form static v dynamic type system language fit project requirement new language python tangent ruby javascript r typescript etc java c scala oop language pervasive dynamic dispatch alias analysis class hierarchy analysis go rust suitable midlevel ir open language evolution process c mature compiler frontend julia machine learning technique good interoperability python apis likeminded blog post final decision evaluating swift language property swift compared python strength community fast growing top programming language recent survey open source crossplatform aesthetic design mainstream syntax shallow learning curve progressively disclose complexity swift playground ipad app high productivity debugger interactivity predictable semantics memory safety python apis expressive swiftpython interoperability swift compared python challenge performance explicit memory ownership support concurrency work queuing api named dispatch based asyncawait actor deployment custom ops property needed graph program extraction reliable static analysis highlevel abstraction protocol oriented programming graph program extraction document knowable tensor ops suitable compiler ir highlevel ir named sil restricted pointer aliasing memory exclusivity rust inspired memory ownership model fortran reference pointer c known disadvantage using swift relatively new window support active community people large dependency xla small datascience community error message need improvement build time could improved conclusion llvm clang static analyzer,swift tensorflow core graph program extraction algorithm automatic differentiation python language interoperability feature swift tensorflow implemented programming language occasionally asked use one project engineer project previously familiar swift several language choice guided goal project imposed specific technical requirement explained choice also discussed extensively debated coworkers interested engineer concluded swift best direction document sharing deliberation process community help explain decision said choice language guided specific project goal would love see wider application technique idea context programming language interested pursuing similar project please reach u happily share expertise got discussed design overview document project goal improve usability tensorflow quickly realized core static analysisbased graph program extraction algorithm would work well python given highly dynamic nature led u path pick another language work wanted approach methodically defined goal project explored property programming language important achieve goal evaluated lot language property already know outcome eventually settled swift explain project goal discus programming language property contribute goal provide short evaluation specific language goal discus pro con swift specifically project goal tensorflow worldclass machine learning framework used wide range different people lot different thing project goal provide new interface tensorflow build tensorflow power capability taking usability whole new level aim make machine learning researcher theoretical applied production engineer deploying scale anyone else using tensorflow productive joyful without sacrificing anything already make tensorflow great defined goal around property important maintain improve system expressiveness want definebyrun model feel like directly programming numeric api host language like numpy without explicit graph abstraction way put constraint native control flow use native data structure like dictionary thing might feel natural high performance want get hardware accelerator including cpu gpus cloud tpus future accelerator developed across industry performance important production deployment save megawatt important researcher want fast turnaround time experiment hardware abstraction possible build model without embedding hardwarespecific information get good performance hardware provide optin ability tune model specific accelerator achieve full peak performance make sure lowfriction path require rewrite model large dynamic selfmodifying model know ml model look like year seems clear bigger sparser le rigidly structured solve today problem embrace next generation researcher come compute continues get cheaper fully support dynamic model like attentional model large model like mixture expert well reinforcement learning model require frequent interaction real simulated environment eg atari game performance predictability key aspect making large flexible system usable make predictable possible express anything easy predict run efficiently tool provide feedback performance cliff simple predictable tooling preferable layer magic try paper common problem fast iteration time need enable productive researcher workflow tool dissolve way allowing user focus data math debuggability introspection important part r figuring happening model diagnosing failure figuring change system diagnosis error earlier eg shape mismatch compile time usable one catch run time highend user experience meet user regardless whether like ui console batch processing experience support terminal user eg interpreterrepl jupyter notebook user prefer unix script common pattern flexible deployment need able deploy inferenceonly mobile target tflite addition supporting inference highend accelerator like gpus cloud tpus need support production team want minimal dependency eg able produce single file cpu fast deployment ml space moving really fast remove obstacle place research production deployment wherever possible requiring significant rewrite research code put production would harmful slows also make difficult iteratively improve production model rewrite also introduce subtle pernicious error bestofclass automatic differentiation ad ad key feature tensorflow improve user experience pull advanced technology ad community support higherorder ad well bestinclass implementation like specialized adjoints easy calculation jacobians perexample gradient checkpointing etc embrace tensorflow graph ecosystem graphdef savedmodel key interchange transport deployment integration visualization tool etc see short list goal easy achieve said believe single coherent system tensorflow mature technology handle lot u worth noting launch april swift tensorflow yet solving goal eg improved deployment selfmodifying model idea expect develop great step forward cover time property programming language programming language aggregation bunch largely orthogonal design decision consequence manifested single inseparable artifact language offer different tradeoff along axis choosing one akin solving highly multidimensional sparse optimization problem increase challenge many programming language enhanced need factor likelihood deficiency overcomeable enhancement language compiler odds community would accept change section discus ax relates back list project goal property absolutely required weakness one area cause followon effect deferring specific language tradeoff discussion next section identify various class language problematic given goal case strength python first let start hopefully noncontroversial strength python must jeopardize community large community user important community drive book tutorial little thing one think missing need emacs vim support requirement generally excludes research language excludes possibility building new language tensorflow opensource crossplatform tensorflow open source user every imaginable platform want able scale support aesthetic design syntax language user interface deep effect usability user work system good design really hard work matter matter bikeshedding mainstream syntax tensorflow mainstream system user using python aim appeal broad user base mean excessively nonmainstream language hurt adoption technique said would interested community explore technique shallow learning curve want new user spend time learning tensorflow struggling language high learning curve steep learning curve also reduces odds existing tensorflow user switching new system high productivity people love python low boilerplate low ceremony many people get frustrated feel like wasting time placating compiler churning boilerplate debugger one goal tensorflow people able debug model effectively need debugging experience generally excludes research language debugger interactivity batch compilation important place production repls script notebook environment etc widely used across research team predictable semantics type system whether dynamic static sensible behavior compose without surprising behavior memory safety want tensorflow user spend time chasing dangling pointer bug undefined behavior model requirement generally excludes language like c c fortran hand worth noting interoperability existing c code really useful large scale system python apis tensorflow user benefit rely huge collection python apis outside tensorflow product eg visualization data science stuff ignore reality adoption new system matter great slow python challenge python great point challenge well thing would make tensorflow better improved performance performance perennial problem python cause significant amount additional work tensorflow core natural write thing python layer many thing done performance reason lead user write thing tensorflow ops c work around python performance turn low performance significant usability issue tensorflow concurrency presence gil increase complexity throughout stack large scale setting prevents model author achieving reasonable performance thing without writing ccuda prevents natural expression concurrent algorithm model deployment python interpreter package ecosystem nonstarter mobile also considered significant liability product team want hermetic lowdependency build production user often train python write inference logic tensorflow c api production harming goal shrink gap r production deployment custom ops building custom op currently requires writing c eigencuda huge complexity cliff jump barrier case reduces free interchange model since depend something outside source lock ml model certain hardware vendor would better path highperformance kernel written language model wellknown problem python make tensorflow programming model complicated would ideally require advanced tensorflow user learn deal c cuda layer stack slow researcher often one trying new thing pushing limit current system property needed graph program extraction fundamental algorithm use automatically identify extract graph program based static analysis code mean need able look code statically ie without running able reliably identify tensor operation data flow control flow dependency order achieve performance graph need able connect together large chunk tensor code preferably granularity manually use api like tensorflow session api also need allow user able use highlevel apis like layer estimator build abstraction without breaking ability analysis proof system well known difficult make static analysis sound complete meaning get choice unsound model sometimes produce incorrect result handle program sound model always correct handle limited set program since using static analysis code generation require analysis correct let explore conservatively correct incomplete model provably correct limit analysis bounded computational model know reliably analyze graph transformation approach work well conservatively correct fallback handle situation outside analysis capability copy data graph back host cpu dynamically execute arbitrary logic determine next send data back graph computation two thing need make approach work practice first need subset case handle large enough include interesting thing including high level user abstraction second need resultant model simple enough normal human understand lot special case scenariodependent behavior undermine usability system subtle critical aspect making work usable way many wellknown programming language including python oopcentric language force unacceptable tradeoff prevent working well practice issue affect object oriented language whose dispatch model semantically based dynamic dispatch mutable state explain issue use intentionally simplified example pseudoswift syntax note idiomatic code class layer class layer class batchnormalizationlayer layer class resnetblock layer block made var layer init infiltercount outfiltercount stride filtershape infiltercount outfiltercount stride batchnormalizationlayer axis filtershape outfiltercount outfiltercount stride batchnormalizationlayer axis example us hypothetical layer library set block residual network intended reasonable code us kind abstraction java python programmer example would use however apparent simplicity code underlies number complexity property like could reassigned block set method call forward backward layer shown dynamically dispatched mean target call depends dynamic property code pointer layer could even aliased reference making data flow analysis read writes object difficult reason possible behavior make difficult compiler statically prove result program prerequisite reliably extracting graph coming back choice option could pick predictable explainable limited model small subset java analyze statically fully reliable way code static method method final base class know call statically dispatched variable guaranteed assigned single time aggressive pointer tracking problem option lose ability high level abstraction least without copy back forth place unpredictable difficult explain general model well known many oop language dynamically dispatched theory technique like class hierarchy analysis interprocedural alias analysis discover many statically could use heuristic technique like expand case handle unfortunately technique generally require whole program analysis subtle change one part program cause spooky action distance analysis get confused mean small change one part program cause sends receives added part model leading difficult impossible explain model user project goal provide highly usable experience requires predictability explainability programming model particularly important sends receives significant impact performance data involved could gigabyte size reject heuristicbased approach stick predictable explainable limited model lost though programming language limited way example compare c java introduction structs c allows reliably handle slightly broader range case java far extreme c turing complete template metaprogramming system static swift somewhere offering lot expressive power particular due approach protocol oriented programming explain graph program extraction deep dive additional property needed graph program extraction addition reliable static analysis benefit property language restricted pointer aliasing graph program extraction work reliably build dataflow defuse chain operation language allow unrestricted aliasing pointer reference like cc would force static analysis overly conservative making copy host presence knowable tensor ops since extracting tensor ops host code graph need know either designated syntax static type system hook suitable compiler ir graph program extraction nontrivial compiler transformation requires suitable intermediate representation ir work ir must highlevel enough support desugaring transformation use able compile tensorflow graph without losing essential information technique required graph program extraction could theoretically performed good ast much easier implement control flow graph ssa form static v dynamic type system finally topic static v dynamic typing static typing offer number advantage particularly relevant use case static type catch bug compile time instead runtime people get frustrated silly type error brings long training run hour directly improve tooling experience like code completionintellisense jump definition etc make easy know operation tensor operation hand statically typed language require lot ceremony boilerplate infuriating directly harm productivity promising middle ground though language statically typed use type inference eliminate explicit typing common case language fit project requirement long list goal lot language consider choose address cluster related language rather building evaluating full cross product onebyone apologize advance mischaracterized language community let u know happily correct mistake new language creating language ridiculous amount work need parser need debugger tooling book educational material thing required build support big community furthermore even willing make investment required would take many year right machine learning moving fast python given majority tensorflow community using python already using work would ideal however dynamic nature python suitable reliable static analysis graph program extraction approach depend possible subset python could compiled done tangent clear support high level abstraction like python class approach ruby javascript r typescript etc language share problem static analysis python often asked specifically typescript introduces really nice type system improve fundamental dynamic dispatch object aliasing challenge posed python java c scala oop language pervasive dynamic dispatch language share static analysis problem python primary abstraction feature class interface built highly dynamic construct mean static analysis tensor operation depends best effort technique like alias analysis class hierarchy analysis pervasively referencebased difficult reliably disambiguate pointer alias python possible approach could work class language system would either force model developer use lowabstraction apis eg code must final class system would rely heuristicbased static analysis technique work case others go go great language growing community many go programmer former python programmer unfortunately go great fit approach allows unstructured aliasing abstraction often implemented term dynamic interface dispatch call reflect dynamic casting interface concrete type dynamic feature defeat reliable large scale abstract interpretation user would forced use static function struct feature go would impractical build highlevel layer estimator abstraction unless built language another significant issue nature go would require adding significant language enhancement go language like builtin tensor type way able express abstraction generic tensor element type automatic differentiation support implementation core extraction algorithm go community emphatically prefers keep language small using project would require going core principle rust believe rust support ingredient necessary implement technique paper strong static side trait system support zerocost abstraction provably eliminated compiler great pointer aliasing model suitable midlevel ir vibrant engaging community great open language evolution process concern using rust strong goal project appeal entire tensorflow community currently pervasively python based love rust steep learning curve may exclude data scientist nonexpert programmer frequently use tensorflow ownership model really great mostly irrelevant problem faced today machine learning code implemented python c rust believe c support ingredient necessary implement algorithm required work including mature compiler frontend active standard committee however c rife undefined behavior much static composition system relies c macro template metaprogramming particularly usable furthermore c generally appeal python programmer concerned choosing would prevent significant community adopting tool julia julia another great language open active community currently investing machine learning technique even good interoperability python apis julia community share many common value project published likeminded blog post project well underway expert julia since compilation approach based type specialization may enough representation infrastructure host graph program extraction technique rely final decision end narrowed list based technical merit swift rust c potentially julia next excluded c rust due usability concern picked swift julia swift much larger community syntactically closer python familiar internal implementation detail allowed u implement prototype much faster evaluating swift language property might interesting see evaluated swift pointbypoint language property aiming top document brief summary point starting topic python excels also openly address swiftspecific limitation challenge end swift compared python strength community swift fast growing language among top programming language recent survey believed well million programmer using large vibrant open source community welldeveloped ecosystem tool swift stronghold mobile development several community pushing swift server cloud application open source crossplatform yes aesthetic design subjective topic hard measure major focus swift swift benefited year opensource community working improve syntax ensure consistency elegance sourcebreaking change language difficult make swift definitely benefited locking early mainstream syntax swift designed fit extended c family programming language intentionally try feel familiar shallow learning curve key design goal swift progressively disclose complexity language make extremely teachable language one thing enabled teaching swift code kid first programming language targeting middleschool grade swift playground ipad app high productivity swift aim maximize clarity code thus fight reduce boilerplate topend goal swift optimize time take write maintain working app includes debugging time thing go beyond pounding code debugger swift full debugger command line ide support interactivity swift support batch compilation powerful repl full debugger integration script notebook environment freely available mac xcode playground io swift playground web version also supported predictable semantics yes memory safety swift aim safe default language term memory safety also helping catch logic bug early also provides explicit unsafe apis interact c code direct hardware access python apis started project answer prioritized building new approach expressive swiftpython interoperability answer yes swift compared python challenge next aspect problematic today python performance swift great lowlevel performance memory use widely used mobile large community people continuing improve explicit memory ownership support added swift credible replacement many us c concurrency swift include language support concurrency yet work fine native apis like pthreads come nice work queuing api named dispatch aka gcd firstclass concurrency model likely future feature swift could based asyncawait actor deployment swift compile simple native machine code like c depend garbage collector heavy runtime entirely reasonable compile ml model oh file swift custom ops swift build top llvm direct access llvm intrinsics llvm generate gpu kernel nvidiaptx amd card principle someone could build embedded cudaopencl swift dsl interested exploring long term would lead model self contained thus easier share would allow advanced user use single language property needed graph program extraction next aspect care order build graph program extraction model describe reliable static analysis highlevel abstraction swift highly dynamic feature class existentials escaping closure also well developed static side well revolves around structs enums structs enums generic method conform protocol provide interfacelike feature mixins capability referred protocol oriented programming swift depends static feature eliminable basic type like int bool actually implemented standard library built compiler result property swift provides simple reliable conceptual model developer abstract interpretation guaranteed succeed give great performance long use class existentials dynamic feature explained depth graph program extraction document knowable tensor ops swift static type system give u simple heuristic start place anything type tensor accelerator also chose give tensor ops distinct syntactic form currently spelled tfop required simplifies thing suitable compiler ir swift perfectly set transformation need highlevel ir named sil represents code ssa control flow graph preserving source level type information know value tensor provides key transformation need like inlining generic specialization etc presence sil make significantly cheaper build compiler piece prototype sil includes ir serialization intermodule optimization cross module optimization inlining generic specialization basic interprocedural optimization infrastructure need without reinventing basic compiler infrastructure wheel restricted pointer aliasing swift obscure important feature called memory exclusivity built part ongoing work introduce rust inspired memory ownership model swift swift aliasing support mean static analysis based analysis transformation rely strong memory provenance guarantee even inout argument provides similar analysis power fortran reference restrict pointer c swift focus value semantics also major help analysis array value type known disadvantage using swift explained swift good fit project number reason said perfect stretch imagination effort capture negative side discussion commonly raised concern using swift project relatively new swift development since first public release still relatively new thus tool surrounding ecosystem mature python year old window support swift cross platform relatively mature unixlike system including apple platform linux bsd unixy thing said window support still relatively earlyon least one active community people working large dependency swift depends llvm clang mean nontrivial dependency tensorflow hand alternative including python bring nontrivial set dependency swift also well aligned tensorflow since already depends llvm xla compiler backend small datascience community swift much way data science community small community hope engage small compared existing numpy scipy scikitlearn ecosystem available python given python library implemented c code wrapped python possible swift ecosystem eventually grow include swift wrapper library immediate term though feel python interoperability approach pragmatic general solution need tensorflow user error message need improvement one disadvantage type inference sometimes error message get particularly playing higherorder generic functional programming construct misleading typically solved breaking expression subexpressions build time could improved developer large application eg line code happy build time continues focus swift development community expected improve time problem given comparatively small size machine learning model project evolves possible challenge arise let u know add list conclusion retrospect surprise swift good fit need project swift designed built closeknit team team previously built highly modular composable compiler infrastructure llvm compiler runtime highly dynamic smalltalkderived language objectivec compiler highly static language capable generic system c pathsensitive static analysis engine clang static analyzer furthermore goal swift design build something easy learn use scripting language enough power used system programming language see thing used swift tensorflow project usability goal directly aligned two project highly dynamic feature allow natural interoperability python apis powerful static side allows language support static analysis underlies graph program extraction automatic differentiation generic system essential making automatic differentiation userextensible language feature goal support pathsensitive static analysis contributed reason build sil intermediate representation host work culture modularity composability allows u define much language feature like tensor type tensorflow library without make invasive change language compiler implementation swift tensorflow feature capability still done feel good project going practice said really love see algorithm exploring get applied language community
102,Lobsters,swift,Swift programming,A Native Art Gallery for Your Mac,http://archagon.net/blog/2018/05/02/a-native-art-gallery-for-your-mac/,native art gallery mac,rutracker museum collection rimaginarynetwork rmuseum backgroundifier automator folder action native wallpaper cycling functionality macos backgroundifierbuddy backgroundifier free open source technical detail,challenge fit rotating art gallery somewhere life love visual art find hugely inspiring unfortunately reading art book much context switch regular distraction museum appropriate rare trip instagram help let see content artist follow still art history beyond sliver sourcing art problem year keeping fairly large folder inspiring image place imgur album rutracker museum collection rimaginarynetwork rmuseum leafing enough needed put regular random rotation place eyeshot without becoming overt distraction finally solved problem building app called backgroundifier converted arbitrarysize image wallpaper superimposing onto attractive blurred background pairing automator folder action native wallpaper cycling functionality macos could drop arbitrary image directory desktop automatically show wallpaper rotation peeking image simple invoking show desktop shortcut wanted see something new switch new space several year scheme worked perfectly fine recently collection grown image found bumping slight annoyance example way retrieve filename current wallpaper remove image rotation mark favorite every maintenance task performed manually finally decided build menu bar app would solve problem unified interface backgroundifierbuddy browser support video tag backgroundifierbuddy expects image organized two directory one containing source image containing converted backgroundified counterpart latter directory directory selected wallpaper rotation system preference start rightclicking menu bar icon show desktop rightclicking move onward next image moving cursor away icon hide desktop automatic conversion enabled image dropped source directory immediately converted wallpaper output directory long app running mean obscure folder action longer necessary automatic conversion work current wallpaper based output directory counterpart source directory number maintenance task become available grown tired image rotation click delete trash together source image want save later find need tweaking click archive delete wallpaper image move source image archive directory holding option allows archive image still keeping rotation clicking favorite add custom finder tag source image making easier locate later finally refresh wallpaper cache restarts dock seems sometimes necessary update wallpaper rotation new image toggle desktop icon show hide icon desktop better image visibility going simplicity solution simple get bogstandard o wallpaper cycling functionality helper app build basic file system command complexity hassle everything work backgroundifier still cost buck app store backgroundifierbuddy free open source find latest release enjoy technical detail although deceptively simple surface code behind backgroundifierbuddy eluded time reason public way query current wallpaper image directory selected try calling desktopimageurl nsworkspaceshared return directory displayed image past could pull info comappledesktop default longer option starting maverick wallpaper setting stored desktoppicturedb sqlite file located libraryapplication supportdock directory layout file tiny bit confusing read brief image data table associated space uuid display uuid pair unfortunately indication uuid current space might associated uuids stored order new space created moved spot becomes impossible tell one database alone needed way get uuids current space display classic way query comapplespaces default unfortunately data returned appears subtly incorrect among fault current space uuid usually date display identifier uuid outright wrong least machine get real info dictionary space call private cgscopymanageddisplayspaces function give uptodate uuids current space display uuids tow enough info run query desktoppicturedb file retrieve current wallpaper fortunately even go far sleuthing around github relevant together wallpaper found scant reference private function exactly needed desktoppicturecopydisplayforspace together cgsgetdisplayforuuid use function retrieve dictionary wallpaper info given space caveat emptor stuff might break future macos release fortunately making change private apis requesting data edit make wallpaper setting refreshing current image simply done calling public nsworkspace method setdesktopimageurl argument mirrored desktopimageurl desktopimageoptions toggle desktop icon make change comapplefinder default functionality entirely optional note sandboxing restriction allow command line call backgroundifier process image user picture directory subdirectory yet found way expand app sandbox called nonsandboxed app restriction carry selection source output directory let know know way expand app sandbox another app pose problem able find nonsandboxed commandline version backgroundifier executable zip file resource subdirectory backgroundifierapp bundle point backgroundifierbuddy preference good go arbitrary source output directory find discussion article hacker news
103,Lobsters,swift,Swift programming,Swift for TensorFlow's Graph Program Extraction,https://github.com/tensorflow/swift/blob/master/docs/GraphProgramExtraction.md,swift tensorflow graph program extraction,graph program extraction deprecated frame motivates challenge related work technique high level approach work resultant programming model swift tensorflow design overview document motivation related work linear algebra library autograd popular introduction neural network extension exist explicit graph building apis definebyrun approach interpreter tensorflow eager execution gil automatic differentiation source code transformation operator overloading definebyrun approach tracing jits jax pytorch jit lightweight modular staging lm lightweight modular staging dlvm scalavirtualized rep graph program extraction new definebyrun approach building programming model tensorflow generic graph representation trivial programming model pointer aliasing adding mutable variable adding intraprocedural within function control flow usedef chain static single assignment ssa form control flow graph cfg phi node xla compiler backend standard tensorflow switchmerge primitive structural analysis technique irreducible control flow indirect gotos adding hostgraph communication nlp reinforcement learning hostdevice communication graph program extraction program slicing control flow synchronization graph program extraction performance predictability implicit hostdevice communication adding structure tuples adding function call law exclusivity adding generic protocoloriented programming youtube limitation approach model language feature existentials tensorflow interprocedural alias analysis class hierarchy analysis heroic optimization slippery slope error handling system detailed rationale explaining swift tensorflow model user,graph program extraction deprecated swift tensorflow provides definebyrun programming model also providing full benefit graph possible core graph program extraction algorithm built swift compiler take imperative swift code automatically build graph part normal compilation flow document frame motivates challenge explains related work describes technique high level contrast prior work explains inductive mental model approach work explains resultant programming model user term helpful idea overall design swift tensorflow work get swift tensorflow design overview document motivation goal provide best possible user experience machine learning researcher developer production engineer believe improving usability high performance accelerator enable even faster breakthrough ml happening usability simple thing many aspect design contribute harm overall usability one key reason ml framework exist first place provide usable access high performance computation high theoretical performance irrelevant underutilized practice example requires much work expertise programmer primary goal eliminate compromise historically forced developer choose performance usability approach came looked entire software stack first principle concluded could achieve new thing could enhance compiler language result compilerbased graph program extraction algorithm described document allows ml programmer write simple imperative code using normal control flow compiler job building tensorflow graph addition performance benefit graph abstraction framework allows compiler analysis automatically detect bug like shape mismatch user code without even running related work several different approach used machine learning framework briefly explore though important observe key commonality approach including machine learning model contain mix two different kind code tensor number crunching logic general code command line option processing data pipeline setup orchestration logic approach different way system find tensor logic extract send accelerator exploring diversity approach see strength also tradeoff forced linear algebra library modern ml framework developed linear algebra library like numpy eigen system like matlab primary way explore ml technique advantage extremely concrete familiar programmer everywhere understand bit linear algebra relatively easy debug work work well autodiff apis autograd one reason popular introduction neural network teach neural net way despite strength people use numpy directly computationintensive ml research anymore relatively efficient single cpu allow op fusion support gpus though extension exist exotic accelerator support distribution multiple device lead ordersofmagnitude performance delta prevents working large model large data limitation led development specialized framework like tensorflow explicit graph building apis perhaps popular solution challenge introduce graph abstraction introduce apis building executing graph eg tensorflow session api many important performance optimization become possible computation expressed graph support accelerator hardware like gpus cloud tpus distribution across multiple accelerator downside approach significant usability sacrificed achieve goal example user dynamic control flow difficult express use special loopingconditional operator get control dependence edge right shape mismatch error code another pain point typically produce stack trace bunch runtime code write making difficult understand bug ultimate fix also awkward work tensor progressively interpreter difficult step code debugger etc confronted usability tradeoff user choose sacrifice little bit performance get significant improvement usability definebyrun approach interpreter definebyrun approach provide direct execution model machine learning operation widely used implementation interpreter tensorflow eager execution instead building graph say matmul immediately execute matmul operation connected device big usability win particularly model use control flow use python control flow directly instead staging control flow graph dynamic model much easier write mix arbitrary python code inline model step model debugger iteratively design ml code right python interpreter approach lot advantage however also limitation approach low performance python interpreter matter kind model particularly one use fine grained operation gil force complicated workarounds eg mixing c code model want harness multicore cpu part work even infinitely fast interpreter without gil interpreter look ahead beyond current op prevents discovering future work dependent work currently dispatching waiting turn prevents certain optimization like general op fusion model parallelism etc finally automatic differentiation ad focus whitepaper definebyrun approach prevent use source code transformation technique ad operator overloading approach use effective lose ability translate control flow construct host language computation graph make difficult perform optimization provide good error message differentiation fails definebyrun approach tracing jits several active research project exploring use tracing jit compiler definebyrun system eg jax new pytorch jit etc instead interpreter immediately execute op approach buffer trace provide advantage graph technique usability advantage interpreter approach hand tracing jits introduce tradeoff tracing jits change user model computing tensor value back building staged graph node observable part user model example failure come runtime system trace compiledexecuted instead op source problem reduces key usability advantage definebyrun system tracing jits fully unroll computation lead large trace tracing jit unable look ahead across data dependent branch lead short trace certain type model bubble execution pipeline tracing jits allow dynamic model intermix nontensor python computation reintroduces performance problem python value produced computation split trace introduce execution bubble delay trace execution overall approach provide hybrid model provide much performance graph along usability interpreterbased definebyrun model include compromise along ax lightweight modular staging lm lightweight modular staging runtime code generation approach allows expression generated code directly language approach widely used machine learning community newer research system like dlvm pioneering application lm technique machine learning framework swift lm allows direct expression imperative tensor code within source language implicitly build graph runtime requires compiler programming language extension hand lm technique applied within many different language natural staging control flow requires exotic feature supported language eg scalavirtualized static analysis program structure required furthermore lm uservisible part programming model even scala user required explicitly wrap rep type around data type lm similarity graph program extraction approach chose go firstclass compiler language integration staging tensor computation one usability problem looking solve also interested using compiler analysis detect shape error bug compile time believe usability benefit fully integrated approach justify modest investment compiler graph program extraction new definebyrun approach approach based observation compiler see tensor operation program simply parsing code applying static analysis technique allows user program directly natural tensor api build additional highlevel apis like layer estimator top tensor compiler build tensorflow graph part standard compilation process like code generation task provides number advantage including natural definebyrun model including ability use language control flow like loop statement full performance graph full access anything express graph including input pipeline abstraction natural interoperability accelerated tensor operation arbitrary nontensor host code copying data back forth required user program ability produce compiler warning error message allows programmer avoid unnecessary hostdevice copy desired understand occur ability perform additional valueadd static analysis order find bug problem eg detect shape error compile time final point worth emphasis tensorflow critical motivator project algorithm completely tensorflow independent compiler transformation used extract computation executes asynchronously host program optionally communicating sends receives useful anything represents computation graph including ml framework kind accelerator eg cryptography graphic graphbased distributed system programming model application would also benefit swift type system eg ability statically diagnose invalid graph compile time building programming model goal provide simple predictable reliable programming model easy intuitively understand explained user paragraph compiler reinforce warning diagnostics significant challenge programming model must amenable reliable static analysis also allow use highlevel userdefined abstraction like layer estimator approach implemented language support reliable static analysis detailed discussion issue involved please see swift tensorflow document order explain model provide bottomup intuitive explanation start trivial useful programming model incrementally build something achieves goal generic graph representation output graph program extraction algorithm domainspecific eg tensorflow graph representation swift extraction algorithm independent detail assume node operation name encoded string dataflow input result may optionally constant attribute could also potentially side effect extraction algorithm care attribute side effect ignore discussion consider operation name dataflow input result also assume graph ability represent control flow algorithm independent representation detail subset approach used graph abstraction support control flow though use swift tensorflow example algorithm independent would love see others take work apply new domain language trivial programming model reliable staticanalysisbased graph extraction trivial constrain problem enough start support mutation pointer aliasing control flow function call abstraction aggregate value like structs array interoperability host code restriction able express simple programming model op magic syntax take operation name one graph value argument return one result value interoperability host code yet graph operation produced consumed graph operation implementation us tfop distinct syntax spelling operation wellknown type name like tensorhandle varianthandle represent graph value note tensorhandle internal implementation detail system something normal user would ever see interact type syntax operation write function like compute matmul x w b tensorflow graph func multiplyandadd x tensorhandle w tensorhandle b tensorhandle tensorhandle let tmp tfop matmul x w let tfop add tmp b return added many constraint accept trivial transform graph static analysis topdown walk code function parameter turned input graph operation trivial identify transformed graph node given topdown walk input already graph node op name input attribute discussed immediately available control flow exactly one return instruction designates result graph give u result like addition translation process important notice welldefined language subset easy explain user though also useful yet compiler able reinforce limitation model compiler error example user attempted store tensorhandle variable pas tensorhandle nongraph operation like print use control flow analysis built compiler compiler error point directly line code cause problem great usability user know exactly wrong fix order get code compile said good foundation reliable predictable implementable model design limited achieve goal expand start composing feature top make model general usable adding mutable variable next capability add variable allow mutation reassignment example want allow code like compute abcd tensorflow graph func addall tensorhandle b tensorhandle c tensorhandle tensorhandle tensorhandle var result tfop add b result tfop add result c result tfop add result return result given control flow aliasing trivially eliminate variable mutation code performing topdown pas code renaming result assignment updating later us use renamed value example compiler desugars code compute abcd tensorflow graph func addall tensorhandle b tensorhandle c tensorhandle tensorhandle tensorhandle let tfop add b let tfop add c let tfop add return show proof well known variable provably lowerable renamed immutable value programming model support aliasing control flow described previous section also know lower resulting function use immutable value graph induction know reliably lower expanded class functionality graph retaining ability reliably statically diagnose anything exceeds supported model inductive model key transformation introduce new abstraction long provably eliminate predictable way predictability essential requirement would problematic introduce new abstraction requires heuristicbased analysis technique eliminate heuristic fails affect sort code compiled compiler would able diagnose failure would lead flaky difficulttopredict programming model user adding intraprocedural within function control flow early compiler based bit vector dataflow analysis used renaming extensively optimizers build accurate usedef chain eliminate false dependency analysis technique eventually generalized approach known static single assignment ssa form widely adopted modern compiler system detail ssa form mathematical formulation beyond scope document give broad stroke ssa generalizes renaming transformation support static intraprocedural control flow ie break switch control flow statement typically represented control flow graph cfg standard formulation rename variable lack aliasing model introduces concept called phi node represent value control flow merge point allows u eliminate variable mutation general control flow within function standard language construct example ssa construction renames code compute weird function tensorflow graph using control flow mutation func conditionalcode tensorhandle b tensorhandle c tensorhandle tensorhandle tensorhandle var result tfop mul b result tfop add result c else result tfop sub result return result lowered pseudo code compute weird function tensorflow graph using control flow mutation func conditionalcode tensorhandle b tensorhandle c tensorhandle tensorhandle tensorhandle tfop mul b goto thenblock else goto elseblock thenblock tfop add c goto afterifelse elseblock tfop sub goto afterifelse afterifelse phi return mutation eliminated ssa construction need transform control flow graph function control flow representation used graph targeting case tensorflow choose generate purefunctional control flow structure popularized xla compiler backend would also also possible generate standard tensorflow switchmerge primitive lowering functional control flow representation use well known structural analysis technique transform control flow graph series singleentrysingleexit sese region technique also work arbitrary control flow graph structure including irreducible control flow occur language unstructured goto statement swift applied example sese transformation produce structure like compute weird function tensorflow graph using control flow mutation func conditionalcode tensorhandle b tensorhandle c tensorhandle tensorhandle tensorhandle let tfop mul b note named parameter label representation constant attribute let tfop c true iftruefunction false iffalsefunction return func iftruefunction tensorhandle c tensorhandle tensorhandle tensorhandle let tfop add c return func iffalsefunction tensorhandle c tensorhandle tensorhandle tensorhandle let tfop sub return implementation handle branching construct loop swift support straightforward generalize support exotic control flow construct like indirect gotos long target graph way expressing host program way asynchronously communicate destination identifier graph runtime combined ssa construction sese region formation reliably desugars arbitrary local mutation local control flow form know lower graph important expansion programming model said still important missing piece model let keep building adding hostgraph communication beyond ability use language native control flow perhaps biggest payoff definebyrun model allow user mix match tensor computation host code critical dynamic machine learning model common nlp reinforcement learning algorithm include simulator researcher sometimes want implement tensor ops without writing cuda code nice able call print see code explain approach introduce abstracted example us atari simulator middle training loop explain different definebyrun approach handle example written current limited programming model addition hosttograph communication func hostandgraphcommunication tensorhandle var value tfop randominitop let x tfop someop value tensor op run host cpu might dispatched cluster worker machine let result atarigamesimulator x let tfop anotherop x value tfop mixop result return result interpreterbased definebyrun system host cpu running interpreter dispatch every operation encounter encounter atarigamesimulator call tensorflow op interpreter copy data back accelerator host make call copy result back accelerator get mixop operation us tracing jits take interpreter collect longer series tensor operation trace operation allows optimization tensor code example simple really show power even tracing jit able build trace includes randominitop operation someop operation first iteration allowing interop fusion hand tracing jits forced end trace time data dependency found call atarigamesimulator need value x trace stop way system work neither discover anotherop run accelerator parallel atarigamesimulator host furthermore tracing jit split trace data layout optimization someop anotherop generally possible two separate trace sort situation one example compilerbased approach really shine compiler see beyond call atarigamesimulator give better scope optimization allow build much larger region perform copy host exact point model requires capability particularly important aiming get full utilization ultra high performance accelerator like cloud tpus hostdevice communication graph program extraction tensorflow already advanced primitive send receive data device actually represent entire training loop single graph face hostdevice communication compiler partition input two different program one run host one run tensorflow represented graph algorithm trivial easy conceptually understand particularly given limitation programming model point abstraction way like function call user defined data type first start duplicating function replace host code send receive ops give u code like func hostandgraphcommunicationforgraph tensorhandle var value tfop randominitop let x tfop someop value removed let result atarigamesimulator x tfop sendtohost x let result tfop receivefromhost let tfop anotherop x value tfop mixop result return result know transformation provably eliminates hostonly code progressively desugar generate graph using earlier method graph capture tensor computation straightforward tensorflow graph runtime perform optimization tracing jits achieve additional optimization also fall approach eg executing anotherop parallel host computation layout optimization someop anotherop graph built compiler next need attend code run host simply remove tensor operation replace call tensorflow runtime also insert call runtime start finish execution tensorflow graph roughly correspond sessionrun altogether get host code like func hostandgraphcommunication tensorhandle let tensorprogram starttensorflowgraph proto buf tensorflow graph removed var value tfop randominitop removed let x tfop someop value let x receivefromtensorflow tensorprogram tensor op run host cpu might dispatched cluster worker machine let result atarigamesimulator x sendtotensorflow tensorprogram result removed let tfop anotherop x removed value tfop mixop result let result finishtensorflowgraph tensorprogram return result result transformation get two coexecuting program running different device device rendezvous need exchange data directly reflects hardware design highperformance accelerator independent processor run code asynchronously main cpu physical level communicate sending receiving message eg dma transfer network packet produce tensorflow graph design allows tensorflow apply interesting heterogenous technique example tensorflow xla compiler gpus applies aggressive fusion operation allows cpu drive top level control flow like training loop naturally fall approach one final comment sort transformation well known compiler world program slicing though aware technique used purpose algorithm theory behind technique well studied many year control flow synchronization graph program extraction glossed important topic discussion two coexecuting program stay synchronized program duplicate computation happens loop condition something run host something nondeterministic like random number generator two program diverge let consider simple example computation iteratively key pressed user keyboard predicate clearly evaluated host make later code easier explain example us true break compiler handle form func countuntilkeypressed tensorhandle var result tfop zero true let stop keypressed stop break result tfop heavydutycomputation result return result apply program slicing algorithm apply program slicing partition tensor operation graph algorithm notice heavydutycomputation control dependent condition exit loop move loop without moving control flow could cause loop exit see keypressed host function like atarigamesimulator call previous example arranges run function host send value tensorflow graph function end looking like func countuntilkeypressedforgraph tensorhandle var result tfop zero true removed let stop keypressed let stop tfop receivefromhost stop break result tfop heavydutycomputation result return result host function look like func countuntilkeypressed tensorhandle let tensorprogram starttensorflowgraph proto buf tensorflow graph removed var result tfop zero true let stop keypressed sendtotensorflow tensorprogram stop stop break removed result tfop heavydutycomputation result let result finishtensorflowgraph tensorprogram return result interesting see host simply shadowing heavy duty computation accelerator performing sending stream boolean value tell accelerator stop end computation tensor result value copied back one time result program host cpu handle high level control flow machine model guarantee two program stay synchronized example nondeterministic random predicate evaluated one place host sending result accelerator also standard model orchestrating gpu computation hand approach performance concern latency host accelerator high eg networking involved seeking maximum performance accelerator like cloud tpu performance optimization compiler look opportunity reduce communication duplicating computation device allows promote simple condition like run graph eliminating communication hop performance predictability implicit hostdevice communication final important topic performance predictability like definebyrun model allows user flexibly intermix host tensor code brings concern could lead difficult understand pitfall large tensor value bouncing back forth device excessively solution fit right standard compiler design default swift produce compiler warning implicit copy made example make immediately clear copy introduced warning annoying copy intentional user either disable warning entirely eg research small problem size performance matter warning disabled casebycase basis calling method currently named xtoaccelerator xtohost tell compiler future maintainer code copy intentional model particularly helpful production engineer deploy code scale upgrade warning error make sure implicit copy creep even code continues evolve robust approach handling communication host program tensorflow program let return task improving programming model something user friendly le primitive adding structure tuples discussed add abstraction model long provable way eliminate eliminated lower code graph using approach described case structs tuples swift guaranteed able scalarize away long compiler see type definition possible aliasing programming model great allows user compose high level abstraction tensor value example compiler scalarizes code struct var b tensorhandle var c string let value b c hello world print valuea let tuple print let valuea valueb let valuec hello world print valuea equivalent z let z print allows compiler handle string processing logic host tensor processing tensorflow user build model way feel natural structs tuples handled class involved reference may aliased among reason discus detail adding function call next big jump add function call compiler provably eliminate inlining two requirement compiler need able see body function call must direct call indirect function call virtual call call existential value require something like alias class hierarchy analysis disambiguate heuristic based technique like lead fragile programming model fortunately swift strong static side toplevel function method structs many thing like computed property structs consistently direct call huge step forward term modeling power build reasonable userfacing set tensor apis example something like struct tensor tensorhandle internal implementation detail user exposed private var value tensorhandle func matmul b tensor tensor return tensor tfop matmul selfvalue bvalue static func lh tensor rh tensor tensor return tensor tfop add lhsvalue rhsvalue func calculate tensor b tensor c tensor tensor let result amatmul b c return result desugars body calculate function inlining let tmp tensor tfop matmul avalue bvalue let result tensor tfop add tmpvalue cvalue scalarizes tensor structs produce let tmpvalue tfop matmul avalue bvalue let resultvalue tfop add tmpvalue cvalue trivially promotable graph nice simple desugaring transformation compose cleanly case guaranteed tied simple language construct user understand space go inlining transformation also applies higherorder function like map filter long closure parameter nonescaping default inlining call map eventually expose direct call closure additionally important design point swift nonaliasing property depend even extends inout argument self argument mutating struct method allows compiler aggressively analyze transform value result swift law exclusivity grant fortran style nonaliasing property value also worth mentioning tensorflow graph support function call theory able use avoid code explosion problem theoretically come extensive inlining machine learning model implemented tensorflow use feature far run graph size problem practice priority explore adding generic swift generic model provably desugared using generic specialization course also important performance optimization normal swift code huge expansion expressive capability system allows rule around dtype tensor captured enforced directly swift example expand example look like struct tensor scalar accelerablebytensorflow private var value tensorhandle func matmul b tensor tensor return tensor tfop matmul selfvalue bvalue static func lh tensor rh tensor tensor return tensor tfop add lhsvalue rhsvalue nice thing user tensor api get dtype checking automatically accidentally attempt add tensor float tensor get compiletime error instead runtime error tensorflow happens even though underlying tensorhandle abstraction untyped another nice thing extends high level userdefined abstraction well eg define code like struct denselayer scalar numeric var weight tensor scalar var bias tensor scalar var dlossdb tensor scalar var dlossdw tensor scalar init inputsize int outputsize int fcl denselayer float inputsize outputsize generic specialization desugar struct denselayerfloat var weight tensorfloat var bias tensorfloat var dlossdb tensorfloat var dlossdw tensorfloat init inputsize int outputsize int fcl denselayerfloat inputsize outputsize swift apply destructuring transformation get something trivially transformed graph lot go document already long avoid going case case one last important honorable mention swift approach protocoloriented programming youtube allows many thing traditionally expressed oop expressed purely static way composition structs using mixin behavior granted default implementation protocol requirement limitation approach model language feature covered static side swift extensively completely neglected dynamic side class existentials dynamic data structure built upon like dictionary array actually two different class consider let start dynamic type first swift put aggregate type two category dynamic class existentials static struct enum tuple existential type ie value whose static type protocol could implemented class describe issue class class swift extremely dynamic method dynamically dispatched via vtable case swift object message send type deriving nsobject another objectivec class apple platform furthermore property class overridden derived class pointer instance class aliased unstructured way turn sort situation get object oriented language like java c scala objectivec full generality class reference analyzed discussed swift tensorflow document compiler handle many common situation heuristicbased analysis using technique like interprocedural alias analysis class hierarchy analysis relying technique part programming model mean small change code break heuristic depend inherent result relying heroic optimization part uservisible behavior programming model feeling acceptable bake heuristic like uservisible part programming model problem approach rely global property program analysis small local change upset global property case mean small change isolated module cause new implicit data copy introduced completely unrelated part code could cause gigabyte worth data transfer unexpectedly introduced refer spooky action distance could introduce unsettling feeling user deny second problem collection like array dictionary type built reference type like class turn swift array dictionary type built principle value semantics compose naturally top pointer aliasing existing analysis swift provides commonly used could specialcased implementation one could argue build special support type compiler like tftensorarray tensorflow hand index data structure almost always dynamic use constant index array use array going loop element possible could build special support unrolling loop array element slippery slope would eventually lead large number additional special case added model point implementation prefer hold line special case well known type easier add new thing later needed take add proactively take away unneeded swift type system overall good fit project one exceptional case love see improved swift well designed error handling system detailed rationale unfortunately design system specifically intended support throwing typed error present swift support throwing value typeerased error existentials make error handling completely inaccessible tensorflow work anything else relies reliable static analysis would love see extended support typed throw natural solution complete static side swift explaining swift tensorflow model user claimed good usability requires u provide simple predictable reliable programming model easy intuitively understand explained user paragraph compiler reinforce warning diagnostics think design achieves user model fit single paragraph write normal imperative swift code normal tensor api use build arbitrary high level abstraction without performance hit long stick static side swift tuples structs function nonescaping closure generic like intermix tensor operation host code compiler generate copy back forth likewise welcome use class existentials dynamic language feature cause copy tofrom host implicit copy tensor data happens compiler remind compiler warning one beauty user model directly aligns several default encouraged swift language eg closure default nonescaping use zerocost abstraction build high level apis core value swift api design eg pervasive use value semantics strongly encourages use structs class believe make swift tensorflow feel nice practice resort antiidiomatic design get thing work implementation work still early shifting early stage project public open source project believe theory behind approach proven far enough along implementation good understanding engineering concern facing actual implementation algorithm
104,Lobsters,swift,Swift programming,Making real-time collaboration over CloudKit and P2P networks possible using CRDTs and Swift.,https://github.com/archagon/crdt-playground,making realtime collaboration cloudkit network possible using crdts swift,data laced history causal tree operational crdts causal tree,repository companion article data laced history causal tree operational crdts examine fascinating new class operational crdts detail framework educational use please nt use production unless know generic implementation victor grishchenko causal tree crdt written swift statebased cvrdt implementation feature many tweak including site identifier map atom reference priority atom us lamport timestamps instead awareness two piece companion software included first macos app simulates device sync hypothetical network arbitrary topology number partition app designed testing resiliency crdt difficult network condition includes editing support text vector graphic second basic ctbased text editor io work equally well online offline syncs document cloudkit support realtime collaboration cloudkit sharing extra server required glory crdts performance good everything nlogn faster
105,Lobsters,swift,Swift programming,Data Laced with History: Causal Trees & Operational CRDTs,http://archagon.net/blog/2018/03/24/data-laced-with-history/,data laced history causal tree operational crdts,demo section smacking build button logical realtime collaborative editing strong eventual consistency strong consistency order one worked convergence technique highlevel overview causality linearization lamport timestamp causal order concurrent commute version vector vector clock handy acm queue article event log event sourcing partial order total order operational transformation conflictfree replicated data type operational transformation operational transformation operation transform provably dopt puzzle conflictfree replicated data type conflictfree replicated data type excellent primer tombstone differential synchronization differential synchronization contextual diffing fuzzy patching finding best approach article woot treedoc logoot lseq rga interleaved text concurrent edits yjs xi causal tree lamport timestamps brilliant paper ct implementation swift atom identifier site index timestamp value cause weave yarn causal block weft version vector consistent demo concurrent editing macos io implemented generic version swift together set demo apps wrapper subclass ct paper operational replicated data type replicated object notation operational replicated data type ordt structured log xi cursor marker text editor distributed system end api ordt pipeline reducer effect redundancy relation arranger mapper eval frame rope data type garbage collection baseline causal redundancy approach utilized author stable available partitiontolerant system ordt design implementation ron already use crdts manner rplace causal tree depth domain implementation detail site map regular language array view representing nonstring object new stateless layer paper performance mike ash benchmark copyonwrite rope ronstyle compression strategy missing feature future improvement cap n proto conclusion reference ot algorithm paper crdt algorithm paper operational crdt paper ot crdt paper nonacademic crdt writing operational crdt code nonoperational crdt code material,hello article took cobble together find useful please consider leaving donation via donorbox buymeacoffee ethereum thought try something new buy nice roost amazon affiliate link donation thank reading sorry length point distant past supposed short blog post like skip straight demo section get sense article embarrassingly app development date confined local device programmer like gloat stupendous mental castle build circuitous multilevel architecture truth network leave quite perplexed start thinking data serializing bit server performing arcane handshake voting ritual merge conflict pushing appspace starting whole process turn mush head peace mind code need locally provable mean thing like idempotent function decoupled module contiguous data structure immutable object network unfortunately throw giant wrench work sometime last year realizing documentbased apps would probably need support sync collaboration future decided finally take stab problem granted ton framework promised hard work data model replication want blackbox important part code gut told arcane bit foundational knowledge would allow sync document refined functional way decoupled stateful spaghetti underlying network layer instead downloading github framework smacking build button wanted develop base set skill would allow easily network documentbased app future even starting scratch first order business devise wishlist fantastical system obviously user able edit document immediately without even touching network word system require optimistic concurrency sync happen background entirely separate main application code remote change seamlessly integrated realtime user notice network merge always automatic even concurrent edits user never faced pick correct revision dialog box user able work document offline indefinite period time without accruing sync debt meaning example sync accomplished sending mutation event performance suffer even user spends month offline sends hundred change secondary data structure state minimized extra information required sync stored place document moving document new device break sync outofband metadata cache network backandforth condensed bare minimum rollback resyncs practically never happen greatest possible degree network communication stateless dumb top chosen technique pas phd test say one need phd understand implement chosen approach custom data model mulling bullet point occurred network problem dealing cloud sync editing across multiple device realtime collaboration offline support reconciliation distant conflicting pointing question possible design system two revision document could merged deterministically sensibly without requiring user intervention sync per se issue since getting data one device another essentially solved problem happened sync troubling encountering merge conflict thrown busy conversation network model persistence ui layer get back consistent state data left alone live peaceful functional life every concurrent edit immediately became crossarchitectural matter hand two document could always made merge coordination hullabaloo could go window part system could made work pace whether stored record database standalone file document could interpreted collection basic data field register sequence dictionary forth looking problem database perspective actually quite simple automatically resolve merge conflict kind table row keep overwriting field version sporting highest timestamp logical otherwise ignoring issue interfield consistency course anything basic register terrible approach sequence dictionary blob homogeneous data overwritten every change complex mutable structure user editing granular level fundamental problem surprising dearth solution real world system punted task appspace asking client manually fix merge conflict pick correct version file seemed problem automatic merge nontrivial data type could exposing local typespecific mutation vocabulary storage replication layer solution higherlevel problem automatic document merge would fall within reach hope uncovering prior art started looking proven leader field google doc venturing deep rabbit hole realtime collaborative editing technique discovered many problem faced fell umbrella strong eventual consistency unlike conventional strong consistency model client receive change identical order rely locking degree strong eventual consistency allows client individually diverge arrive final consistent result update received word network quiescent number tantalizing technique investigate kept several question mind analysis could given technique generalized arbitrary novel data type technique pas phd test possible use technique architecture smart client dumb server reason last question cloudkit sharing framework introduced io part framework functioned superset regular cloudkit requiring minor code change enable document sharing app developer even worry connecting user dealing ui apple hard work background leveraging standard system dialog almost two year later order one seemed using apple apis tended readily adopted especially allowed developer expand system area normally bound hunch cloudkit sharing forced issue realtime collaboration relatively dumb channel task outside purview conventional sync approach cloudkit allowed developer easily store retrieve listen new data much else besides thirdparty code allowed run apple server merge conflict handled locally unlike singleuser case presented limited opportunity concurrent edits pop merge dialog every time another participant share made change open document remaining option seemed sort ugly heuristic automerge datadropping lastwritewins neither acceptable realtime use collaboration along line google doc appeared impossible using system really realized prize could figure way develop automerging document able implement sync collaboration apps cloudkit using apple firstparty sharing without pay manage server became ultimate research goal collaborative iphone text editing demo synced entirely cloudkit spoiler worked convergence technique highlevel overview basic term critical understanding eventual consistency network comprised site device peer operating parallel one producing operation event action mutate data exchange information site first vital concept causality operation caused another operation directly modifies otherwise involves result operation determining causality critical reconstructing sensible timeline linearization operation across network operation cause another operation must always ordered first however always determine direct causality general way algorithm often assume operation causally ahead another one site generating newer operation already seen older one time creation word every operation already seen site time new operation created operation causal past soft causality determined using variety scheme simplest lamport timestamp requires every new operation higher timestamp every known operation including remote operation previously received although eventual consistency scheme receive operation order algorithm rely operation arriving site causal order eg insert necessarily arriving delete discussing convergence scheme often assume causal order since implemented fairly mechanically transport layer two operation causal created simultaneously different site without knowledge said concurrent hard work eventual consistency involves dealing concurrent operation generally speaking concurrent operation made commute effect data regardless order arrival done variety way given crucial role event ordering different scheme keeping time worth expanding bit first standard wall clock time although timestamp record exact moment event occurred also requires coordination site correct clock drift deal device whose clock significantly otherwise causality violation may occur server typical clientserver architecture serve authoritative clock source sort easy solution available true distributed system instead common approach use logical timestamp take logical timestamps previous event input require coordination synchronization work lamport timestamps mentioned simplest kind logical timestamp provide rough sense event causality order know certain whether two event concurrent sequential tell event might missing causal order advanced timestamp version vector need used version vector close relative vector clock give u precise information order causality event distributed system come potentially untenable space complexity since timestamp include value every previouslyseen site network read detail different kind logical clock handy acm queue article finally notion event log usually operation distributed system executed discarded receipt however also store operation data play back needed reconstruct model object pattern go name event sourcing enterprise circle event log causal order described partial order since concurrent operation may appear different position different site depending order arrival log guaranteed identical device total order usually achieved sorting operation first timestamp unique origin id version vector work best timestamp part since segregate concurrent event site instead simply interleaving event log total order especially great convergence receiving concurrent operation remote site simply sort correct spot event log play whole log back rebuild model object added influence new operation catchall solution since run complexity wall depending event defined two competing approach strong eventual consistency stateoftheart tagged rather unappetizing initialisms operational transformation ot conflictfree replicated data type crdts fundamentally approach tackle problem given object mutated arbitrary number connected device coalesce apply change consistent way even change might concurrent arrive order moreover user go offline long time network unstable even peertopeer environment single source truth operational transformation operational transformation proven leader field notably used google doc apache wave well etherpad sharejs unfortunately proven insofar company billion dollar hundred phd hand problem hard ot user copy data atomic mutation called operation example insert index delete index whenever user mutates data send new operation peer often practice central server ot generally make assumption data black box incoming operation applied directly top without possibility rebase consequently way ensure concurrent operation commute effect transform depending order let say peer insert character string position peer b simultaneously deletes character position peer c original state string receives edit b everything peachy keen however b edit arrives first insertion wrong spot insertion position therefore transformed subtracting length b edit fine simple case two switched edits get whole lot complicated start dealing single pair concurrent change algorithm deal thus provably conceivable said property rather pairwise property yikes naming committee need fact majority published algorithm string ot actually subtle bug certain edge case socalled dopt puzzle meaning strictly convergent without occasional futzing resyncing way central server idea treat model object strictly term operation elegant premise fact adding new operation schema requires figuring interaction every existing operation nearly impossible grapple conflictfree replicated data type conflictfree replicated data type new hotness field contrast ot crdt approach considers sync term underlying data structure sequence operation crdt high level type object merged object type arbitrary order produce identical union object crdt merge must associative commutative idempotent resulting crdt mutation merge must greater input mathematically flow said form monotonic semilattice info diagram take look john mumm excellent primer long connected peer eventually receives update every peer result provably one peer happens month behind might sound like tall order already aware several simple crdts example matter permute merge order number insertonly set still end union set end really concept quite intuitive course simple set enough represent arbitrary data much crdt research dedicated finding new improved way implementing sequence crdts often guise string editing algorithm vary generally accomplished giving individual letter unique identifier giving letter reference intended neighbor instead dealing index deletion letter usually replaced tombstone placeholder allowing two site concurrently reference delete character time without merge conflict tend mean sequence crdts perpetually grow proportion number deleted item though various way dealing accumulated garbage one last thing note actually two kind crdts cmrdts cvrdts seriously got better way name cmrdts operationbased crdts require peer exchange mutation event place constraint transport layer instance exactlyonce andor causal delivery depending cmrdt question cvrdts statebased crdts peer must exchange full data structure merge locally placing constraint transport layer taking far bandwidth possibly cpu time type crdt equivalent converted either form differential synchronization actually one technique worth discussing bit outlier neil fraser differential synchronization used earlier version google doc flavor ot implemented differential sync us contextual diffing local revision document generate stream frequent tiny edits peer conflict receiving peer us fuzzy patching apply incoming change best possible contextually diffs resulting document reproduced copy sender document using cached shadow copy last seen version sends new change back establishes sort incremental sync loop eventually peer converge final stable document state unlike ot crdts end result mathematically defined instead relies organic behavior fuzzy patching algorithm faced diffs varying context size finding best approach going problem first urge adopt differential sync one might complain algorithm many subjective bit production use exactly appealed merge complicated process often relies heuristic entirely separate data format human would merge two list text file two prose text file differently even though might represented text differential sync complex logic encapsulated diff patch function like git system contentcentric sense patch work directly output data hook data structure code implementation data format could refactored needed diff patch function could tweaked improved time neither system would know change also meant document original form could preserved entirety serverside synergizing nicely dropboxstyle cloud backup felt like perfect dividing line abstraction studying differential sync realized number detail made nonstarter first though approach seems simple surface true complexity concealed implementation diff patch class function work well string basically need seasoned algorithm expert design set new data type worse inherent fuzziness depends nonobjective metric able figure effectiveness algorithm prolonged use testing instead formal analysis second diff patch currently exist really meant looselystructured data string image barring conversion textbased intermediary format tightly structured object would difficult diff patch maintaining consistency next issue using differential sync offlinefirst environment client store entire diff history offline reconnection send whole batch peer expensive merge assuming site editing away meantime distantlydivergent version would likely fail merge account outofdate context info lose much data reconnected peer finally differential sync allows one packet time flight two peer network issue whole thing grind halt begrudgingly abandon elegance differential sync decide two deterministic approach crdts raised troubling concern including impact perletter metadata necessity tombstone sequence crdts could end file looked tiny even empty fact enormous hood however ot nogo right start one eventbased system would untenable build top simple database like cloudkit really needed active server peertopeer connection two discovered known sequence ot algorithm guaranteed converge one coveted relying tombstone anyway interested raph levien touch curious overlap article really matter choice made wanted resiliency provably convergent system deal metadataladen structure left trace deleted element focus data process crdts pointed paradigm shift network role document collaboration turning document field cvrdt preserving representation persisting storage sending across network find voraciouslymergeable document format completely disentangled network layer sync machinery able throw different revision document together order obtain merge result never ask anything user everything would work without quirk offline mode irrespective much time passed data would need flow one way streamed promiscuously device listening change document would topologyagnostic degree could use peertopeer environment send phone laptop via bluetooth share multiple local application sync traditional centralized database time tend think distributed system messy stateful thing concurrent event acting data require coordination produce consistent result law physic remote machine incapable sending receiving change soon happen forcing participate busy conversation peer establish sensible local take global data crdt always able merge revision past future mean computation pushed edge network transforming tangle device protocol connection center dumb hotswappable transport cloud long document find way device device b sync succeed world data primacy everything else orbit around admit revelation made wily political thought cross mind could chance finally break free shackle cloud computing always felt like affront data snake tangle corporate server order reach device right next u used happily share file across application even operating system everything funneled monolithic black box happened let computing become darn undemocratic gotten bad actually expected content workflow regularly vanish company folded got acquired digital valuable entirely management outside disinterested party crdts offered document opportunity manage sync collaboration wrestling control data centralized system back rightful owner road fresh unpaved however figure could use structure performant spaceefficient way nontrivial application eminentlymergeable crdt adventure semilattice next step read academic literature crdts group usual suspect hard case sequence text crdts woot treedoc logootlseq rga woot progenitor genre give character string reference adjacent neighbor side recent analysis shown inefficient compared newer approach treedoc similar early adopter performance penalty logoot optimized lseq curiously avoids tombstone treating element unique point along dense infinitelydivisible number line adopting bignumlike identifier unbounded growth ordering unfortunately problem interleaved text concurrent edits rga make character implicitly reference leftmost neighbor us hash table make character lookup efficient also feature update operation alongside usual insert delete paper annoyingly dense theory approach often come ahead benchmark comparison also found couple recent nonacademic crdt design yjs xi brought something new table felt rather convoluted comparison goodenough rga almost case conflict concurrent change resolved way unique origin id plus logical timestamp per character sometimes discarded operation applied time persisted even merge reading literature highly educational good intuition behavior sequence crdts find much common disparate approach one brought operation proof optimization conflict resolution method garbage collection scheme table many paper blurred line theory implementation making even harder sus underlying principle felt confident using algorithm convergent array quite sure build replicated data structure using principle finally discovered one key crdt made thing click causal tree statebased cvrdt high level viewed data blob along commutative associative idempotent merge function always generate monotonically furtherahead blob two operationbased cmrdt meanwhile viewed data blob mutated pushed monotonically forward stream commutativeineffect maybe causallyordered deduplicated event cvrdt data blob simply defined ordered collection operation could two technique combined best world eminentlymergeable data structure together ability define data model term domainspecific action let build sequence cvrdt mind data work example concurrent string mutation small number letter lamport timestamps site type cmd sends change site site resume editing site make change send back site final merge result ctrlaltdel intuitive merge could expect insertion deletion persist run character split recent change come first first idea take standard set array operation insert index delete index etc turn operation immutable struct stick structs new array creation order read back reconstruct original array needed word instance event sourcing pattern cvrdt serving event log convergent default since operation inherent total order easy fix giving one globallyunique id form owner uuid plus lamport timestamp diagram encoded sx ty sx represents uuid site x timestamp scheme two operation id operation owner different timestamps operation different owner different uuids lamport timestamps used sort operation causal order leaving uuids tiebreaking concurrent operation happen timestamp new operational array arrives remote peer merge simple iterating array shifting new operation proper spot elementary merge sort success operationbased fullyconvergent cvrdt well sort two major issue first process reconstructing original array operational array complexity happen every time merge second intent completely clobbered reading operation back get something along line ctrldatlel bit handwaving come insert past array bound data structure converges mean make lick sense earlier ot section saw concurrent indexbased operation made miss intended character depending order recall problem ot solves transforming operation operation immutable sense operation specified incorrectly make assumption get encoded operation index always uniquely identify thus lose commutativity intent turn case ok first step fix intent problem strip operation implicit context define absolute term fundamentally insert index really user want people think term index want insert character cursor position perceived two simply immediate right single letter encode switching operation format insert aid bid letter array uniquely identified given causal order assuming deleted character persist operation reference processed intent operation commutative ever one specific b array allowing u always position user intended identify particular letter b ambiguous could generate new id inserted letter necessary already unique timestampuuid identifier operation use operation identifier proxy output word insert operation could stand particular letter referenced operation extra data required everything still defined term original atomic immutable operation significantly better get ctrlaltdel processing operational array correctlyordered even preserving character run desired performance still issue stand output array would still take reconstruct main roadblock array insertion deletion tend n operation need replay entire n history whenever remote change come recreating output array scratch array push pop hand amortized instead sorting entire operational array timestampuuid positioned operation order output could done placing operation right causal operation parent sorting reverse timestampuuid order among remaining operation effect would cause operational array mirror structure output array result would identical previous approach speed execution would substantially improved new order local operation require bit extra processing get inserted operational array instead simply appending back first locate parent find spot among remaining n instead return producing output array n since read operation order mostly pushpop element output array go along fact almost treat operational array string even going far using backing store fullyfunctional nsmutablestring subclass performance caveat operation longer instruction become data observe throughout process added extra data operation structs simply arranged precise causal order default timestampuuid sort allows possible based knowledge unique causal characteristic data model example matter high timestamp insert operation might know final position output string solely determined parent together concurrent run insert higher timestampuuid every operation timestampuuid order operation parent irrelevant even lamport timestamps might conservatively imply otherwise word lamport timestamp serf sort brute force upper bound causality arrange operation much accurately using domain knowledge pulled containing array see designed fact operational happens implicitly stored depthfirst preorder traversal contiguous memory concurrent edits sibling branch subtrees run character nature reverse timestampuuid sort sibling subtrees sorted order head operation underlying premise causal tree contrast crdts looking design presented victor grishchenko brilliant paper simultaneously clean performant consequential instead dense layer theory labyrinthine data structure everything centered around idea atomic immutable metadatatagged causallylinked operation stored lowlevel data structure directly usable data represented attribute entire class feature followed rest paper describing ct implementation swift incorporating concept original paper sporting tweak based research ct parlance operation structs make tree called atom atom unique identifier comprised site uuid index lamport timestamp index timestamp serve role logical clock data structure could made work one isolation reason enable certain optimization index atom lookup identifier timestamp causality query atom heart atom value defines behavior operation store relevant data insert operation store new character place delete operation contain extra data atom also store identifier cause parent atom generally speaking atom whose effect data structure prerequisite proper functioning child atom explained earlier string ct causal link simply represents character left insertion target deletion swift code atom might look something like struct id codable hashable let site let index let timestamp struct atom codable codable let id id let cause id let value string value might look like enum stringvalue codable case null case insert char case delete insert codable boilerplate typealias stringatom atom stringvalue great representation swift automatically compress enums associated value smallest possible byte size ie size largest associated value plus byte case even le swift determine value type extra bit available size would byte case wondering uuid site devised mapping scheme id full uuids explain later section convenience ct begin zero root atom ancestry subsequent atom ultimately traced back depthfirst preorder traversal operational tree called weave equivalent operational array discussed earlier instead representing tree inefficient tangle pointer store memory weave array additionally since know creation order atom every site way timestamp since ct allowed contain causal gap always derive particular site exact sequence operation beginning time sequence sitespecific atom creation order called yarn yarn cache primary data structure ct keep around together weave enable atom lookup pull atom based identifier grab site yarn array read atom identifier index row called yarn represents full contiguous sequence operation given site storing tree array mean careful modifying invariant invalidated whole thing fall apart local atom created parented another atom inserted immediately right parent weave easy show logic preserve sort order since new atom necessarily higher lamport timestamp atom weave always belongs spot closest parent merge bit clever want keep thing n naive incoming weave individually sorting new atom local easy way compare two atom could perform simple efficient merge sort unfortunately order two atom nonbinary relation since involves ancestry information addition timestamp uuid word write simple comparator two atom isolation without also referencing full ct fortunately use knowledge underlying tree structure keep thing simple following algorithm assumes weave correctly ordered preserve invariant going forward useful think atom head subtree larger ct account dfs ordering used weave atom descendant contained contiguous range immediately right called causal block merge compare weave atombyatom find mismatch three possibility situation local ct subtree missing incoming ct incoming ct new subtree missing local ct two ct concurrent sibling subtrees proving possible concurrent change spot sibling subtrees exercise left reader first two case easy discover deal verify one two atom appears ct keep inserting fastforwarding atom two weave line last case arrange two concurrent causal block correct order pretty simple end causal block found based algorithm featured paper ultimate order block determined order head atom following change weave stored yarn must also updated one data structure note collection sitetimestamp pair called weft simply fancy name version vector think filter tree way cut across yarn one atom timestamp le equal site timestamp weft included weft uniquely identify split ct point mutation timeline making useful feature garbage collection past revision viewing give u unique ability manipulate data structure time domain space domain dotted line represents weft lamport timestamp format weft index format two representation equivalent weft need consistent two respect first consistency distributed computing sense causality operation must maintained easily enforced ensuring tree fullyconnected cut second domaindependent definition resulting tree must able produce internallyconsistent data structure invariant violated issue string kind ctfriendly data weave might longer make sense cut wrong place given example weft describes string cdade providing hypothetical view distributed data structure middle three edits demo concurrent editing macos io word word word prove causal tree useful effective data structure real world implemented generic version swift together set demo apps please note strictly educational codebase productionquality library goal project dig knowledge might aid app development create another framework du jour messy undocumented bit slow surely broken get job done browser support video tag site created connect ring site forked establish twoway connection exchange peer info go back offline site connects still sending data anyone site connects site connects finally completing network site go offline return online first part demo macos mesh network simulator window represents independent site unique uuid hold copy ct ct edited locally typetailored editing view new site must forked existing site copying current state ct process site go online establish oneway connection one known peer sends ct known peer list second receipt site merge inbound ct every site know every peer forked site invisible rest network go online connect one known peer done locally simulate partitioned unreliable network high degree flexibility practically kind topology partition set using window string editing text view us ct directly backing store way nsmutablestring wrapper plugged barebones nstextstorage subclass browser support video tag open yarn view resembles diagram ct paper though really legible simple case view scroll around left mouse button select individual atom list detail right mouse button browser support video tag three site connected ring site go offline return online also included example ctbacked data type working simple vector graphic using editing view create shape select insert point move point shape around change color change contour everything synchronized combination connected peer even numerous concurrent offline edits get sense use ct nonstring data type read browser support video tag site display previouslysynced readonly revision document via dropdown list ct operation atomic immutable tagged precise origin metadata functionality effectively come free one many emergent property ct browser support video tag phone left share icloud account phone middle phone right logged different icloud account receive cloudkit share remote cursor sync demonstrated show offline use simultaneous predictive typing used demo editing high concurrency apology occasional delay icloud slow network code mess second part demo simple cloudkitpowered text editing app io much wonky unpolished since much cloudkit newbie important part realtime collaboration including remote cursor work correctly efficiently whether syncing user account collaborating others via cloudkit sharing working locally long period time network layer deal binary data blob insight particular structure data whether local remote conflict resolved automatically section code best extra coordinating server required dumb cloudkit database work fine ct implementation quite production ready though keep hammering away use commercial project think convincing proof technique sound practical use collaborative documentbased application operational replicated data type causal tree however beginning universal pattern work recent research project including victor grishchenko replicated object notation ron paper pure operationbased replicated data type hereafter pordt extended operational paradigm almost kind crdt giving u standard set tool designing analyzing fascinating data structure sake clarity since neither project seems terribly concerned nomenclature going calling new breed crdts operational replicated data avoid confusion exiting term operationbased crdts cmrdts partly replicated data type rdt seems gaining popularity crdt term expanded ordt without impinging existing terminology pordt missing feature ron includes ordts common ron approach ordt much like causal tree ordts assembled atomic immutable uniquelyidentified timestamped operation arranged basic container structure clarity going referring container structured log ordt operation represents atomic change data simultaneously functioning unit data resultant action crucial duality mean ordt understood either conventional data structure unit data augmented event metadata alternatively event log atomic action ordered resemble output data structure ease execution consequently ordt necessarily need evaluated useful many query run structured log asis whether syncing single operation applying longer patch performing fullon merge every change ordt integrated kind lowlevel rebase inside container mean distinction opbased cmrdt statebased cvrdt usage becomes effectively moot ordts meant replace conventional data type one might wonder approach needlessly bloated compared one content history kept separated fact argue operational approach one stay true nature problem one way another every event convergent data type need uniquely defined identified timestamped associated output property kept together design require tight complex binding history data part effect convergence data would become brittle reflection original content new crdts one used xi go direction resulting complicated rewind replay code customtailored data type approach complexity length history log meanwhile ordts practically variety readily perform task generic way minimal code change uniform nlogn complexity decomposition data structure tagged unit atomic change feel like one rare foundational abstraction could clarify entire field study indeed many existing crdts rga made pass approach without fully embracing incorporating authorship logical timestamps protooperational unit often get consumed merge ordt approach crdts expressed general way unifying interface performance characteristic across board providing wide variety standard useful feature ron working implementation lww lastwriterwins register causal tree rga moniker basic set pordt additionally defines mvregisters awsets rwsets example ordts note ordt operation order counter operation arranged strictly lamport timestamp though order really matter lww operation sorted first key lamport timestamp sequence operation sorted described ct section benefit operational approach one satisfying crdt invariant becomes trivial idempotency commutativity inherent fact ordt simply ordered collection unique operation never question integrating remote change even gapless causal order critical convergence crdts becomes minor concern since event missing causal ancestor could simply ignored evaluation ron treat causallyisolated segment ordt patch applied main ordt soon requisite ancestor arrive serializing deserializing structure simple reading writing stream operation making format perfectly suited persisting document disk since operation simply data easy selectively filter divide using version vector us include removing change certain user creating delta patch viewing past revision setting garbage collection baseline fact operation globallyunique identifier make possible create deep reference one ordt another create permalinks arbitrary range ordt edit history instance cursor marker text editor defined reference atom corresponding letter left finally discretized nature format give access powerful version control feature forking ordt retaining ability incorporate change original instantly diffing two ordts type chas emerick put best article titled distributed system end api change subtle tectonic effect operation cast data become computable copy route reorder freely manipulate apply program level system people familiar message queue think natural producer invoke operation connect directly consumer queue rather whole point queue decouple producer consumer operation characterized message thus become pliable data ordt pipeline let talk design actually work practice start ordt operation defined immutable globally unique operation bestowed minimum id form site uuid lamport timestamp location identifier generally id another operation value operation meant represent atomic change data structure local effect directly dependent one operation location field operation tends point direct causal prerequisite last operation whose output necessary function dependency exists could simply point newest operation available current ordt even arbitrary value sorting purpose although operation contains single lamport timestamp location field provides almost much additional causality context information typical version vector would make possible identify segregate concurrent operation without untenable n space complexity version vector per operation seen many design distributed system new operation local remote incorporated ordt series function pipeline begin incoming stream operation packaged depending use case ordt cvrdt state mode would state snapshot form another structured log cmrdt operation mode set causallylinked operation often single one operation pipeline reducereffect mappereval step use pure function tailored given ordt location information stripped operation simplify diagram new operation together current structured log fed reducer ron effect pordt step take form function insert operation proper spot structured log remove redundant operation needed redundant operation might ask history meant immutable generally ordts new operation might definitively supersede previous operation make redundant convergence take lww register example basic ordt value operation highest timestampuuid supplants previous operation value since merge need compare new operation previous highest operation stand reason simply point keeping older operation around pordt defines stale operation term redundancy relation unique ordt applied part effect step cleaning redundant operation simple multilww dictionary ordt produce result still contain enough information correctly integrate remote operation diverge source opinion cleanup portion reducereffect step ought separated performed separately even though ordt operation might made redundant new operation retaining every operation full allows u know exact state ordt point history without assurance relatively free feature garbage collection past revision viewing become much harder impossible implement general way therefore posit point pipeline ought simpler arranger step function would perform sort merge integration reducereffect function actually remove modify operation instead happening implicitly cleanup step would explicitly invoked part garbage collection routine space actually need reclaimed detail procedure described next section note ron pordt additionally clean operation reducereffect step stripping metadata longer required instance ron implementation sequence ordt location id operation dropped operation properly positioned structured log grishchenko emphasize every rdt currently defined ron retains enough context information compressed allow full history restored think property would difficult prove arbitrary rdts additionally generally kind trimming ruin functional purity system operation become glued spot structured log lose ability treat log operation independent entity either way firmly believe kind cleanup step also belongs garbage collection routine final bit pipeline mapper ron eval pordt step code finally make sense structured log either function produce output data structure executing operation order alternatively collection function query structured log without executing anything case string ordts mapper might simply emit native string object might take form interface let call method like length characteratindex even replacecharactersinrange withstring directly structured log absolutely critical output function step equivalent calling function data structure resultant linearization execution every operation ordt evaluating length directly operation executing operation order calling length output string issue pertaining conflict resolution pushed section become matter interpreting data arrangerreducereffect mappereval function together form two half ordt one dealing memory layout data userfacing interpretation data half manifest structured log need ordered query interface half remain performant structured log ordt end kind looking like abstract data type meant represent eg ct weave array design probably right track effectively operation able stand data structured log stored anyway pordt concern order operation simply stuck uniform set unfortunately highly inefficient complex data type sequence since set sorted ctlike order query ron insight order operation really matter mapper performance operation arranged kind compressed array called frame operation defined term regular language allows heavy variable uuids appear minimum number time stream case operational storage generic without typespecific code everything custom particular data type handled reducereffect mappereval function another spot disagree researcher rather treating structured log associated function independent entity prefer conceptualize whole thing persistent typetailored object distributing operation among various internal data structure exposing merge query method oo interface word structured log arranger part mapper would combine form one giant object example objectbased log string ordt first cache range visible character second yarn two cache use operation direct backing store native string interface reason ordts meant fill ordinary data structure sticking operation homogeneous container might lead poor performance depending use case instance many text editor prefer use rope data type instead simple array ronstyle frame transition would uncomfortable stuck container given create extraneous syncing step frame secondary rope structure objectbased ordt could almost trivially switch internal data structure rope merry way addition complex ordts might require numerous associated cache optimal performance oo approach would ensure secondary structure stayed together remained consistent merge ordt approach operation piped local remote source arranged sort container executed queried directly produce output data high level ordts delightfully simple work reason garbage collection section bit speculative since implemented yet believe logic bit messy garbage collection sticking point crdt research believe ordts offer excellent foundation exploring problem garbagecollected ordt thought data structure two part live part compacted part operation live part completely unadulterated operation compacted part might modified removed compressed otherwise altered reclaim storage saw earlier ct split two segment way version vector weft applies ordt allows u store baseline weft alongside main data structure serve dividing line live compacted operation assuming causal order site receives new baseline would obliged compact operation falling weft copy ordt well drop orphan operation included weft causal dependency removed operation usually operation synced time effect baseline thought another operation ordt one requires included operation pas ordt particular garbage collection routine trick making operation commutative dotted line represents baseline practice may necessarily removed order preserve ancestral ordering information depends compaction scheme ordts garbage collection matter removing tombstone operation equivalent also opportunity drop redundant operation coalesce operation kind reduce amount excess metadata perform kind cleanup possible strictly immutable homogeneous data structure although baseline selection done carefully prevent remote site losing data compaction process quite mechanical baseline known therefore work two problem isolation given baseline two kind compaction done first lossless compaction involves dropping operation longer anything required future convergence pordt call property operation causal redundancy remove operation effect step remember split functionality define arranger step essence lossless compaction strictly local issue since thing affect ability ordt rewind access past revision nothing else behavior ordt change could even implement form compaction without baseline however simpler ordts lww register tend operation property second kind compaction actually involves making change existing operation behavior step vary ordt ordt counter ordt could combine multiple add subtract operation single union operation sequence ordt could remove deleted operation modify descendant operation ensure remain correctly sorted even without parent since modifying existing operation easily cause corruption essential follow two basic rule figuring apply kind lossy compaction ordt first compacted portion ordt must able produce output constituent operation second compacted portion ordt must retain enough metadata allow future operation reference atomic level order correctly outside compacted ordt must continue behave exactly noncompacted ordt many possible way implement compaction one approach freeze operation included baseline ordered data structure separate rest structured log depending ordt question might possible strip operation metadata even store compacted operation output data type approach utilized pordt author however may performance penalty headache data split two part like especially spatial locality random access required efficient mappereval performance merging two garbagecollected ordts might also become problem neither baseline strict superset example twopart compaction scheme baseline left part stored native string bit metadata basic ct keeping around location info compacted letter necessary since new operation referencing always sort ahead hypothetical prebaseline sibling alternative keep compacted operation mixed live operation exceptional care must taken ensure every operation remains proper spot following compaction example ct blindly removing deleted operation fall baseline would orphan nondeleted child operation might naively one might think child could simply modified point deleted operation parent ie grandparent would change sort order respect parent sibling word even tombstone operation ct serve important organizational role one solution would allow removal operation without child making several pass baselined operation ensure possible candidate removed first pas would remove delete operation since childless add delete flag target operation swift implementation enum type stringatom might change insert something like deletedinsert second pas starting back deleted range would remove markedasdeleted operation additional child extra tweak markedasdeleted operation child happened another markedasdeleted operation child operation could take place parent overwriting parent content using technique deletes baseline could safely removed without changing behavior output storage ct baseline selection thing get tricky picking baseline every operation possibly affected removal operation child deleted operation ct must included well locally easy big risk removed operation unknown descendant remote site operation orphaned baseline fails include ordts may acceptable object json ordt deleted site pending change object harm done delete would obviated change even synced ct deleted character continues serve vital structural role ordering adjacent character hasty removal could cause arbitrary substring disappear remote site mitigate problem first stipulating new operation may knowingly parented deleted character delete operation may child deleted expected behavior anyway since user append character deleted character conventional text editor interface codified programmatically precondition place know site received delete operation never produce new child deleted character therefore know every site network seen particular delete operation causal delete operation new operation affected delete ever appear future baseline could theory constructed avoids orphaning operation across network pordt us similar logic stable step come effect step clean stable operation provably delivered site hit snag generally speaking crdt research tailored need distributed system frequently make architectural concession direction perhaps amount site assumed known perhaps expected way determine causal stability operation perhaps protocol communication site provided exploration crdts assumption made object described article pure systemagnostic data structure completely blind way operation get one site another even interdevice communication hard requirement someone could leave copy ordt office thumb drive return year later successfully merge new change back copy whenever additional bit synchronization mandated assumed possibility space design shrink generality lost messiness time state injected otherwise perfectly functional architecture unfortunately baseline selection might one component bit coordination actually required available partitiontolerant system system possible devise selection scheme always garbage collect without orphaning operation logically speaking site copy ordt storage work isolation way site able take account picking baseline however require system permit fork via request existing site also forked site acks back origin site successful initialization would enough constraint make nonorphaning selection work site could hold map every site id last known version vector fork happens acknowledged origin site would add new site id map seed timestamp map would sent every operation state snapshot site merge receiver map alongside ordt essence structure would act distributed summary network site enough information others would free independently set baseline causally consistent b consistent rule ordt c includes removable operation received every site network also includes every operation affected removal operation precondition place prove even concurrent update baseline across different site converge example network knowledge propagation site forked site site state ab start site c received site site map updated receipt send end site know every site least moved past abe weft making candidate new baseline question still remain instance site simply stop editing never return network would point impossible set baseline anywhere network past last seen version vector site sort timeout scheme introduced sure possible truly partitioned system way tell site left forever simply editing away parallel partition add sort mandated communication site perhaps central authority validate connectivity system constrained even addition space complexity data structure sitetoversionvector map could get unwieldy depending number peer alternatively might relax rule c allow baseline potentially orphan remote operation scheme would retain sequence baseline associated ordt site would free pick new baseline explicitly higher previous highest baseline taking care pick one highest chance preserving operation site site receiving new baseline sequence would required apply order upon receiving executing baseline site operation causally dependent removed operation included baseline would obliged either drop add sort secondary orphanage ordt even run problem coordination scheme worked written would aok long site triggering garbage collection relatively infrequently quiescent moment determined best site ability bit issue come picking monotonically higher baseline happens two site concurrently pick new baseline orphan others operation assume point time site site know received operation yet system start blank garbage collection baseline site decides garbage collect baseline leaving behind operation acd site garbage collect baseline leaving operation abe meanwhile site received site garbage collect baseline leaving operation aed site exchange message merge acd abe result correct answer aed fact much information lost know delete c know delete b kind stuck stress baseline operation must behave like ordinary ordt operation sense converge result regardless order arrival crdt invariant break eventual consistency fall reach toy example may still possible converge drawing inference missing operation baseline version vector site trick work devious example featuring multiple site deleting others operation deletion spanning multiple adjacent operation maybe exists clever scheme bring u back correct state combination partial compaction hunch situation provably impossible resolve local way without accruing ancestry point left space complexity noncompacted case anyway nonorphaning baseline seems way make work add bit coordination might take form designating one site superusers making decide baseline site putting baseline vote among majorityplurality connected site relying server synchronously store current baseline might best strategy system built top something like cloudkit syncing mechanism centralized synchronous anyway might well force site pull baseline sync allowing site end losing concurrent baseline adjustment pull full ordt somewhere get necessary part peer summary baseline operation commutative every possible value made commutative sprinkle coordination either ensure baseline leave orphaned operation requires degree knowledge every site network ensure new baseline monotonically higher last requires common point synchronization fortunately messy business coordination localized problem picking data single operation functioning operation part ordt nothing special unique baseline operation respect rule crdts treated transferred processed like operation baseline fails get updated due network condition nothing bad actually happens site still free work document scheme degrades gracefully finally remember many case worry garbage collection also viable option collaborative document meant edited perpetuity assuming good faith part collaborator would surprising amount deleted content typical document ended time visible length ordt design implementation thinking best way integrate ordts production software ron though incomplete offer blueprint general configurable highly functional architecture however think also lot said objectbased ordts especially respect interactive software low latency core requirement reiterate ron store operation ordt standard immutable frame data structure push everything unique data type reducer mapper function system dataoriented selfconfiguring batch operation contains location data type information let automatically find correct frame reducer actually multimode function consistently merge individual operation partial frame patch full frame state snapshot nlogn time via heap sort allowing ron function equally well cmrdt cvrdt mode even mix mode fly operation encoded using regular language alternate binary coding compress well inside frame end result teeming river operation automatically form network larger connected convergent structure objectbased approach operation arrangermapper function relevant cache herded persistent mutable object certainly many hassle compared purelyfunctional ron architecture everything tightlycoupled ownership object management become critical factor lot boilerplate involved instead defining data structure relationship entirely via data skeleton data model must formed code exchange becomes possible target performance chokepoint precision generic ron frame n read nlogn writes might good general case plenty problem logn performance certain function hard requirement object freedom distribute operation among various data structure maintain cache operation otherwise structure maximally efficient query conception ordts independent structure allows used variety nonnetwork context example way dealing local file merge synchronizing data across thread atom xray xi already use crdts manner seems lockfree data structure could similarly benefit approach unlike ron mapping step frame user data object used native data type without ever going stale convert different format think back nsmutablestring wrapper around ct use like old system string consider hypothetical replicated bitmap thought experiment perhaps vein reddit rplace working giant image bunch different people online offline want whole thing sensibly merge different part come together starting point say bitmap conceived grid lww register operation contains single pixel coordinate rgba color value let also say image pixel setpixel operation made smaller byte mean entire canvas fill using uncompressed memory without even considering past history operation given throughput single site could hundred pixel per second crucial setpixel operation execute locally logn time also vital garbage collector able trim ordt often quickly since even layer history would eat ram technically garbage collection even needed lww causal redundancy maybe desirable app retain full bitmap history memory situation truly dire like real bitmap perhaps even possible tile ordt pull different chunk storage working feeling ron general approach would falter pipeline simply tuned fix performance hot spot million pixel operation would grind halt objectbased approach could store store bitmap specialized kd tree buffer pixel value would operation buffer would represent particular area pixel subdivided needed store pixel past operation since buffer would stored contiguous chunk memory subdivision rebalancing would efficient garbage collection could simple unsubdividing buffer many subdivision assuming rgba value operation formatted correctly stride could passed along graphic framework node could blitted asis another buffer making trivial update dirty part rendered image short seems performance could end close actual bitmap even surprise rplace million change million unique reproduced using kind object mockup objectbased bitmap ordt might look like hood colored square pixel operation grid coordinate subdivision represent pixel change history section grid stored contiguous block memory finally nascent thought designing new ordts though admittedly gone process basic bitmap shown operational crdt approach almost like replicated data type construction kit since ordts merely collection unique ordered operation commutativity idempotency come standard design work go figuring atomize data structure define causal relationship arrange operation inside structured log optimize performance critical method word perfect engineering work something requires phd manage basic rule come process operation data define organize operation query ordt directly without actually execute operation first start regular data structure figure best way divide atomic unit keeping skeleton intact try find way inject additional operation might need structure always remember dealing data event time every data type susceptible atomization many sure define operation absolute term implicit context causal link operation provide context need recall issue caused poorlyspecified string index operation much possible avoid operation nonlocal effect multiple cause may affect multiple future operation good operation insert letter letter bad operation reverse string operation behave like event data antipattern degree symmetry operation effect data structure allow location id cause operation guide design weave data structure together always keep mind essential function initialization merge operation integration garbage collection serialization deserialization filtering weft worth considering nothing slower nlogn garbage collection used ensure operation causally preceding concurrent deletetype operation could possibly affected afterwards word site received command intended remove data make sure new command generated reference deleted portion ordt using objectbased approach ensure operation exists single internal data structure time rely incidental state insertion order keep internal data structure organized sorted balanced time avoid moving operation internal data structure instead thinking object state treat organizational framework immutable operation try ensure object look even recreated scratch using set operation one exception cache operation might needed optimal performance scenario example yarn ct cache make absolutely sure consistent following mutating operation never serialized always possible efficiently recreate initialization deserialization cache one easiest way corrupt data said need design new ordt relatively rare document format constructed composition existing ordts still fun subject think might come handy developing highperformance software causal tree depth let circle way back around like argue causal tree though nominally intended sequence use actually one fundamental versatile expression ordt formula instead making composite existing ordts possible define complex extensible document format using ct alone several reason ct powerful construct start ordts naturally gravitate towards treelike configuration since make sense location field operation point another operation rather constant since cyclical causal reference impossible definition know domain tree used efficiently represent variety existing data type since tree recursive structure mean single tree contain subtrees sequence dictionary register give ct inherent structure composability although ct dag rather gitlike nature invite kind version control thinking instead representing complete revision repository commit operation stand atomic change inside data structure full timeline considered provides final output effect weave viewed one massive conflictfree rebase closure data single unbroken timeline let u correlate content history nuanced way batch closelyrelated run character instance historic change given compiled traversing ancestor descendant starting operation causallyconnected segment tree separated likely parsed isolation making possible generate precise humanreadable diffs delta patch two ct working speculative edits maintained memory independent subtrees easily inserted rebased weave contiguous causal block transformation among many others made possible intimate relationship tree structure data branching nature underlying history performance ct close optimal ct stored sequence homogeneous structs contiguous memory operation requires traversing entire weave massively benefit spatial locality instance complex copyonwrite locking scheme eschewed favor straight dumb copy working multiple thread caching avoided favor evaluating entire weave change hard beat straightmemory data structure come speed finally perspective data modeling causal relationship ct built around serve excellent constraint defining optimal ordt operation absolute datalike local effect since every operation ct need causal parent hard inadvertently create eventlike operation affect data outside local context form bubble evaluation step moreover causal link provides almost much additional causality information fullon version vector bestowing operation comprehensive creation context require space complexity store especially useful producing sensible output resolving conflict mappereval step together property make ct perfect use sort quickanddirty convergent struct need flesh detail implementation detail even touching ct code make sense define general cvrdt protocol among reason would make cvrdts composable allowing container cvrdts forward relevant call child cvrdts public protocol cvrdt codable hashable must obey cvrdt convergence property mutating func integrate v inout self avoiding needle merging efficient func superset v inout self bool ensures invariant correct debugging sanity checking func validate throw bool cvrdts especially vulnerable bad input since guarantee central server fix mistake order minimally safeguard malicious misbehaving peer added validation method interface ct case validate method go weave check many precondition possible including child ordering atom type several others next uuids describing site identifier integer since unlikely document would collaborator frankly case even bit would however enough reasonable definition uuid without coordination need minimum bit generate truly unique value storing two full uuids site one balloon original size solved help secondary crdt stored transferred along ct ordered insertonly array known uuids called site map site identifier corresponding uuid simply index array two ct merge site map merge well downside site identifier unique locally globally new uuid get added remote site inserted local site map sorted order local uuids might change happens traverse full ct remap outdated site identifier new value facilitated following interface public protocol indexremappable mutating func remapindices map siteid siteid crdt make use site map need implement protocol whenever merge would cause site id change initiated remapindices method get called crdt merge actually executed running n operation receiving remote data anyway performance huge factor nonetheless made one additional tweak ensure remapping happens rarely instead storing uuid site map also store wall clock time uuid added site map tuples sorted first time uuid assuming modern connected device tend relatively accurate clock relying fact correctness ensure new site almost always get appended end ordered array thus avoid shifting existing uuids previous spot exception multiple site happen added concurrently wall clock site significantly compared ron approach using regular language compress operation one might seem bit clunky however argue many possible advantage storing operation homogeneous structs including random access spatial locality cacheability ease moving operation internal data structure case compression scheme operation viewed mere implementation detail core part data structure operation eminently compressible nature probably dozen way solve problem skeleton ct interface end looking something like public protocol causaltreesiteuuidt hashable comparable codable public protocol causaltreevaluet indexremappable codable public final class siteindex causaltreesiteuuidt cvrdt nscopying etc public final class weave causaltreesiteuuidt v causaltreevaluet cvrdt indexremappable nscopying etc public final class causaltree causaltreesiteuuidt v causaltreevaluet cvrdt indexremappable nscopying public private set var siteindex siteindex public private set var weave weave v etc cvrdt interface call forwarded site index weave ct expose array operation outside world array view passing consistent weft accessor function read historic version ct interface substantially simplifying wrapper use ct backing store making past revision viewing simple implement accumulate list consistent weft need store current weft right remote change get integrated one last feature specific ct priority flag atom atom priority atom descendant get sorted ahead sibling subtrees parent causal block even lower lamport timestamp put another way priority flag simply another variable used sorting comparator ie prioritytimestampuuid property give u lot structural control ensuring instance delete atom hug target atom never find lost weave concurrent insert operation vie spot require tricky special casing weave mutation merge however priority flag tow value enum ct string atom look something like protocol causaltreeprioritizable var priority bool get enum stringvalue causaltreevaluet causaltreeprioritizable case null case insert char case delete func priority bool case delete self return true else return false mutating func remapindices map siteid siteid insert codable boilerplate typealias stringatom atom stringvalue really need start implementing custom data type representing nonstring object implement custom data type ct first atomize decompose set basic operation figure link operation mostly linear traversal ct produce output data word make structure analogous one twopass parsable format demo section presented ct designed b√©zier drawing coded value enum atom enum drawdatum causaltreevaluet causaltreeprioritizable case null noop grouping atom case shape case point po nspoint case pointsentinelstart case pointsentinelend case trtranslate delta nspoint ref atomid case attrcolor colortuple case attrround bool case delete var priority bool switch self case null return true case shape return false case point return false case pointsentinelstart return false case pointsentinelend return false case trtranslate return true case attrcolor return true case attrround return true case delete return true mutating func remapindices map siteid siteid switch self case trtranslate let delta let ref let newsite map refsite self trtranslate delta delta ref atomid site newsite index refindex default break insert codable boilerplate typealias drawatom atom drawdatum swift kind enough compress byte maximum size associated value tuple trtranslate nspoint byte atomid plus byte case note trtranslate atom id associated value since atom id unique reference atom without issue great way represent ranged operation pick atom represents outer position range add id operation value handle case mappingevaluation code especially come handy dealing text formatting rich text editor caveat atom update value implementation indexremappable protocol anyway back shape following sample might end tree shaped like pink operation priority flag sort ahead sibling subtrees completeness added extra transformation attribute operation directly visible userfacing data simple rule define higherlevel structure representing shape point property tree shape atom parented shape atom root starting atom shape null atom child acting root node property subtrees relevant shape atom contain three child subtrees chain transformation chain attribute chain point transformation attribute chain hug parent weave via priority flag point go last new transformation attribute parented last member corresponding chain value chain operation currently trtranslate cumulative value chain attribute attrcolor attrround last atom chain point chain act like traditional sequence point chain seeded start end sentinel cleanly delineate neighbor traversal order corresponds order point output nsbezierpath like shape point child transformation attribute chain point also child delete atom shape currently deletable individually remove point anyway got lazy essence particular ct consists bunch superimposed ordts sequence shape point lww register attribute kind counter transformation weave get reading tree dfs order green bracket shape block blue bracket point block red bracket attribute block rule generating output image weave simple hit shape atom shape block run another shape atom end weave shape operation attribute chain traversed first account priority flag result cached use next step nsbezierpath created start reading point point block read forward bit parse operation attribute chain delete atom found simply move next point otherwise point position determined combining origin transform parent shape transform point added nsbezierpath either line b√©zier curve rounded attribute finally next shape block end weave reached path drawn stroked first started reading crdts unclear conflict resolution formalized every crdt seemed something bit different rare find approach developer could tweak depending need ct answer refreshingly simple conflict occur atom child expected atom carefully defined domainspecific way intent concurrent change encoded higher level would otherwise possible translation operation b√©zier ct good example let say three different site concurrently move point direction default ct would produce weave three consecutive translation applying order would consistent would also triple magnitude translation match none site intention instead detect translation atom multiple child simply average value would cause final translation reasonably approximate original value hopefully leave three site satisfied user still found merge offensive could manually adjust translation implicitly commit change new operation one possible approach however developer free act leisure conflict detected present selection user pick value lowest timestamp use special function combining value matter happens underlying ct always consistent concurrency conflict resolution merely matter interpretation note much made possible integrated nature ct store transform point separate ordt register would probably limited simple sum lww conflict resolution since register would know nothing purpose contained value relationship rest document finally implementation includes new stateless layer top ct provides modelappropriate api sanity checking since b√©zier tree constraint structure underlying ct additional higherlevel validate method verifies new precondition base ct validated helper function ensure consistency tree compromised new point shape attribute added outside caller safely use method like addshape updateattributes wrapper without worry ct look like model object incidentally approach layering crdts discussed paper though technique exactly novel possible use case representing custom data type via ct bit esoteric certainly use ct complex versioned document format akin psd doc structs versus object tuples versus array imagine number scenario small custom ct might make code much cleaner quicker composition array map register crdts quickanddirty data structure often turn useful practice performance ot crdt paper often cite threshold people start notice latency text editor therefore code might want run merge initialization fall within range except trivial case precludes slower complexity word article per character would take hour process essential ct function nlogn worst simplest implementation weave contiguous array atom since every mutation resolve atom insertion n baseline mutation account spatial locality fine majority use case mike ash benchmark show iphone memcpy meaning performance probably fine long ct stay also help ct involves limited number heap allocation pointerchasing good enough possible switch array something like xi copyonwrite rope ct expected grow large ct implementation maintains cache site yarn alongside weave incurs slight performance penalty yarn also stored single contiguous array additional n cost every weave mutation additionally whenever ct received another site yarn generated initialization yarn part serialized data reason mentioned end ordt section yarn generation nlogn since isomorphic sorting weave exchange yarn give u common operation looking atom identifier finding atom weave index still n minor issue since index really used inserting new operation n process already merging another ct almost always nlogn involves iterating two weave together comparing atom parentage timestamp constructing new interwoven weave regenerating yarn cache occasion priority atom conflict might require finding least common ancestor two atom n exceedingly rare case unlikely two operation differ couple ancestor weave validation n look atom keep track counter ensure sibling order correct causality violated usually invoked deserialization ct implemented large memory footprint account operation size accumulated garbage assuming document unlikely contain deletion word article like one would eat versus simple cstring perhaps egregious principle think really big deal practice first even novellength document would take memory absolute worst case easily digestible modern device keeping large data structure memory acceptable random atom access essential task hand ronstyle compression strategy may pursued additionally eminentlycompressible ct format may shrunk fraction full size network transmission storage quick test saved booklength ct disk uncompressed took compressed via zip mere size equivalent cstring many use case might good enough missing feature future improvement finally worth noting feature ct currently lack moment decided omit garbage collection altogether mainly using ct documentbased application relatively small file limited number collaborator ct expected grow document complete matter laziness interested building software completely decentralized environment without connectivity guarantee garbage collection place constraint architecture system however using ct longlived task database replication messaging even preference syncing certainly want implement one baselining strategy described ordt section crdts offer native undo redo functionality quite happy delegated higher level example case string ct uitextview seamlessly turn undo redo command conventional deletes insert although may result excess garbage compared explicit undo redo operation think sort strictlylocal approach architecturally correct alternative camp belief remote change locally undoable performance tweak compromise might make sense keep new operation separate main ct merge set amount time passed user paused editing undo pending operation could simply dropped feeling would significantly increase complexity certain function ct create new vector consistency issue certainly worth investigating operation missing grouping identifier would allow multiple operation treated single atomic transaction ensuring consistency complicated data type feature may critical b√©zier ct simulate functionality adding higherlevel wrapper base ct approach quite brittle requires ordering atom carefully would better handle atom level atom priority flag add much ct expressiveness think could improved even switching full integer intmin atom would stick parent intmax atom would float back rest would sorted numeric order also eager play around alternate tree traversal see example bfs weave might faster current dfs weave certain kind data yet clear whether change might break invariant intractably slow merge however one huge advantage storing weave contiguous array could memorymapped used object backing data without deserialize first better yet something like cap n proto used represent atom property could even retained across network user would able receive ct data peer disk work byte directly send right back without repackage preparation scenario would good idea leave bit extra space atom value possible expansion operation future validation function also made throw exception atom discovered unknown case value enum ct dumb data structure provision dealing malicious user byzantine fault bad actor could easily spoof someone uuid corrupt data structure choice atom validate method would likely catch attempt path recovery consequently production system using ct likely need deal encryption andor data recovery bad thing happen almost certainly concern different architectural layer core data structure conclusion whew bit intended write even think thing possible crdts proven white whale eventual consistency set look month ago check every item wishlist use practically computing environment happily merge work indefinitely offline well online composable perfectly suited building convergent document format treat file inmemory data structure database field work equally well realtime collaboration cloud sync local editing even remarkable discovery causal tree operationbased crdts deconstruction crdt formula finally consistent way understand design implement arbitrary replicated data type breaking conventional data structure immutable microoperations defined absolute term giving authorship causality metadata carefully ordering inside simple container get resilience clarity convergent event log together efficiency lowlevel data structure conflict resolution precisely tailored fit need data model operation easily sent around asis condensed state snapshot version vector used perform garbage collection view past revision generate delta patch every last edit sourced author placed historical spatial context linked outside possible simplifying app architecture complicating since paradigm almost entirely functional course crdts without difficulty instance crdtbased document always live even offline user inadvertently revise crdtbased document two offline device see familiar pickarevision dialog reconnection document happily merge retain duplicate change ordts fixed fact filtering change device user still learn treat document bit caution fully decentralized context malicious user lot power irrevocably screw data without possibility rollback encryption scheme permission model custom protocol may deployed guard term performance storage crdts contain lot metadata require smart performant peer whereas centralized architecture inherently resourceefficient demand bare minimum client hardpressed use crdts dataheavy scenario screen sharing video editing also necessarily able layer top existing infrastructure without significant refactoring perhaps crdtbased text editor never quite fast bandwidthefficient google doc power centralization exchange totally decentralized computing future world full device control data freely collaborate one another datacentric code entirely free network concern say surely worth shot find discussion article hacker news reference ot algorithm paper crdt algorithm paper operational crdt paper ot crdt paper nonacademic crdt writing operational crdt code nonoperational crdt code material
106,Lobsters,swift,Swift programming,Swift 4.1 Released!,https://swift.org/blog/swift-4-1-released/,swift released,part part compiler update evolution process language improvement swift generic manifesto blog post build improvement blog post adding build configuration import test documentation target environment platform condition documentation foundation forum post additional update abi stability abi dashboard package manager enhancement migrating swift xcode migration guide documentation swift programming language platform linux ubuntu ubuntu ubuntu available download apple xcode xcode source release management process,swift officially released contains update core language including support generic new build option well minor enhancement swift package manager foundation also significant progress made stabilizing abi doug gregor ben cohen recently discussed many feature twopart episode swift unwrapped podcast check podcasts part part compiler update swift minor language release source compatible swift contains following language change update went swift evolution process language improvement swift add generic feature language furthering goal set swift generic manifesto following genericsrelated proposal implemented release information progress made conditional conformance swift check blog post build improvement release provides way configure build including new code size optimization easier way specify target environment platform support code size optimization mode compiler support new optimization mode enables dedicated optimization reduce code size previously discussed detail blog post build import test argument canimport platform condition name module may present platform condition test whether possible import module actually import module present platform condition return true otherwise return false see adding build configuration import test conditional compilation block documentation target environment condition targetenvironment simulator platform condition return true code compiled simulator otherwise return false see target environment platform condition conditional compilation block documentation foundation jsonencoder jsondecoder class support new strategy converting key encoding decoding discussed detail forum post additional update additional swift evolution proposal implemented release abi stability swift contains number underthehood change part effort stabilize abi swift list task completed release use wordsize field native object header reference counting review efficiency interacting enum discriminator witness table decide layout existential type metadata including protocol descriptor define canonicalization generic protocol requirement orderagnostic mangling audit every runtime function desirability behavior enforce appropriate constraint sequence collection collapse various collection wrapper using conditional conformance information progress abi stability swift check abi dashboard package manager enhancement couple enhancement swift package manager swift swift package manager correctly resolve dependence package graph use different url scheme ssh http performance significantly improved package graph shared dependency migrating swift swift source compatible swift help moving swift earlier release swift apple xcode contains code migrator automatically handle many needed source change also migration guide available guide many change especially one le mechanical require direct scrutiny documentation updated version swift programming language swift available swiftorg also available free apple ibooks store platform linux ubuntu ubuntu ubuntu official binary ubuntu ubuntu ubuntu available download apple xcode development apple platform swift ship part xcode source development swift tracked following repository github tag designates specific revision repository make final version swift remain open release management process accumulate change potential future bugfix dot release
107,Lobsters,swift,Swift programming,Swift‚Äôs Modern Solutions to Old Code Problems,http://hashemi.md/2018/03/28/swifts-modern-solutions/,swift modern solution old code problem,swift modern solution old code problem forgotten code construct error handling using clean repetitive code inside function protocol instead multiple inheritance class orthogonal behavior best case scenario multiple inheritance final thought,swift modern solution old code problem mar year ago christian maioli wrote forgotten code construct suggesting may still useful program construct goto multiple inheritance eval recursion post show swift solves problem using elegant concept compiled language eval likely never supported recursion hand supported great way solve many problem fit well swift functional programming feature leaf particular us goto multiple inheritance error handling guard else example christian us demonstrate goto used simplify error handling code int result result firstoperation result goto firsterror result secondoperation result goto seconderror seconderror firsterror two advantage using goto first advantage keep code flat time get call secondoperation know firstoperation success firstoperation failed would skipped ahead firsterror swift way guard else statement take conditional code block conditional met code block executed furthermore code block must exit containing block mean code guard else statement guaranteed condition met unlike goto solution swift code make purpose code clear anyone reading compiler understand trying give error fail exit scope inside else block example swift code might look like func guardexample guard firstoperation else first error return guard secondoperation else second error return something exit guardexample function within else block return way could also throw error call function never return like fatalerror swift compiler smart enough recognize guarantee compile time using defer clean another benefit goto example christian wrote c start explaining c programmer use goto sort error handling show swift alternative imagine function writing load data large xml file database server call firstoperation allocates memory store xml data secondoperation open database connection done processing want close database connection free memory taken xml data clean code typically go end function say firstcleanup secondcleanup problem get error opening database bail want clean xml data problem becomes complicated every time add another resource requires cleanup keeping track allocated far remembering deallocate error scenario quickly turn nightmare way c programmer organized function like clean code end function deallocation allocated resource performed reverse order start function allocate xml data first open database second end function would close database first deallocate xml second clean section appears different goto label chiritian code seconderror appears firsterror think allocationdeallocation pair like layer onion deeper get function layer deallocation swim back get safely applies regardless whether function succeeds fails christian function even error firstoperation secondoperation code seconderror firsterror still get executed however get error firstoperation skip middle part function including seconderror part last bit clean required firsterror swift elegant solution particular problem using defer block simply put whenever allocate resource want cleaned eventually put clean code defer block swift take care rest func deferexample let xml allocatexml defer freexml xml let db connecttodatabase defer disconnectfromdatabase db load data bail error nt worry deallocation code function exit reason first defer block freexml xml called function return second defer block disconnectfromdatabase db freexml xml called order great thing code clean code appears immediately next allocation code done chunk code think swift take care remembering run defer block needed correct reverse order repetitive code inside function example christian us fully demonstrate benefit goto stick imagine lot code currently say return true return false php function isleapyear year year goto leapyear year goto commonyear year goto leapyear goto commonyear leapyear return true commonyear return false christian point effect easily cleanly achieved using function call instead labeled section code error get detected calendar logic hard enough swift let define function within function set helper use prepare return value helper function remain scoped enclosing function worry polluting global namespace furthermore inner function access variable enclosing function allows create entire sophisticated world inside function remains isolated world outside function accessible function type signature illustrate feature swift written complex example function qifrecords par qif file list transaction transaction array field qif old file format still widely used bank exporting financial transaction file format line field encoding data transaction transaction consists number consecutive field line transaction separated caret code function func qifrecords source string string var currentrecord string var record string func isrecordend line string bool return linestarts func addtocurrentrecord line string currentrecordappend line func addrecord guard currentrecordisempty else return recordsappend currentrecord currentrecord line sourcesplit separator n lazymap stringinit addtocurrentrecord line isrecordend line addrecord addrecord return record notice function like addtocurrentrecord addrecord operate currentrecord record defined enclosing function qifrecords many language might implement class get similar facility perhaps implementing helper function variable private member class however find function like much elegant call site give argument return value looking class probably instantiate passing source string initializer call single function class named something like parse get value looking need instance anymore poor fit class opinion protocol instead multiple inheritance another feature christian talk multiple inheritance pointing caveat feel multiple inheritance fit hand sometimes want inherit parent completely separate multiple inheritance become productive class orthogonal behavior best case scenario multiple inheritance emphasis original followed code example class flyer pas class swimmer pas class flyingfish swimmer flyer pas swim fly swift multiple inheritance support protocol instead protocol defines collection method getters setter concrete data type eg class structs enums declare conform protocol compiler make sure adhere protocol requirement swift standard library community make extensive use protocol support type composition type protocol analogous interface trait programming language rewritten example expanded flyer protocol bit demonstrate usage protocol flyer var airspeedvelocity int get var position int get set protocol swimmer class flyingfish swimmer flyer swim fly let airspeedvelocity var position int statically typed language swift requires everything known type compile time however many situation use protocol type opposed specific concrete type imagine example type representing body water contains list everything swimming define like struct bodyofwater let name string let swimmer swimmer kind swimmer like tuna frog insert list hand try put int banana swift compiler complain take protocol step swift adding function default implementation protocol add function fly take duration us combined airspeedvelocity move position flyer correct amount protocol flyer static var airspeedvelocity int get var position int get set mutating func fly time int extension flyer mutating func fly time int position selfairspeedvelocity time protocol swimmer class flyingfish swimmer flyer swim fly static let airspeedvelocity var position int possible know type conforming flyer guaranteed airspeedvelocity position one powerful feature swift allows conform type protocol implement minimum required feature set get much richer interface default implementation implemented term minimal feature set another advantage protocol swift conform type protocol type extension without modifying original type definition allows conform type made someone else arbitrary protocol imagine using datetime library date type orm allows store data database long conforms protocol called databasevalue could take date type extend add conformance databasevalue remarkable date databasevalue could come two different library know nothing without constantly worry whether using multiple inheritance correctly issue come multiple inheritance ambiguity arising complex ancestral tree protocol flat inheritance therefore tree final thought swift approach add language feature consider benefit derived adding also potential harm forcing minimize potential harm come elegant solution maximize power minimizing potential complexity misunderstanding error note feature unique swift swift borrows heavily programming language variety language paradigm leading rich set feature ahmad alhashemi
108,Lobsters,swift,Swift programming,Solving a Mysterious Heap Corruption Crash,https://topologyeyewear.github.io/engineering-blog/2018/03/07/heap_corruption/,solving mysterious heap corruption crash,app first let look heap corruption gathering signal crash reporting crashlytics try reproduce issue go back time challenge every assumption analyze slice code thread sanitizer interlude bruteforce search remove thirdparty code ssziparchive move suspicious piece empty project get stuck choose new angle aftermath workaround file radar karoly lorentey submitted fix confirm version app used crash crash built new xcode beta actual problem alignment alignment address sanitizer lesson learned vasarhelyia,back noticed increase crash app crash marked heap corruption make hard debug location given stack trace far away code time problem actually lie long investigation many path turned issue swift sharing tweet twitter lot people asking detail sharing story mighty heap corruption issue ready tale woe frustration ultimately redemption curious io team case investigate track bug read first let look heap corruption isheap corruption occurs dynamic allocation memory handled properly typical heap corruption problem reading writing outside bound allocated memory doublefreeing memory since result eg hard crash happen later program try manipulate incorrectly allocated piece memory root cause issue remain hidden eye gathering signal crash reportingit started report crashlytics increasing number heap corruption issue content issue helpful crash little relation real problem number issue started increasing started getting nervous crashfree user session went almost month increase crash lined crashlytics sdk update started asking anything might changed end perhaps improved issue tracking maybe enabled something sends u exception thrown system library quick respond answer definitive problem indeed problem nothing change crashlytics try reproduce issueby looking device type realized crash io older device iphone plus se latest ipod touch ipad mini unfortunately older test device office io probably tested app io device ever lining crash analytics event looked like app crashed people opened try view ar view try topology glass seemed reasonable screen heavy one full scene kit metal allocating significantly memory part app able reproduce crash great first step could start investigating part code problem go back timethe classic way track source bug bisect try version app last month see crash try another one either eventually enough try narrow exact commit found version app eight month ago io introduced ran affected io device still crashed eight month old app fine running io io conclusion something changed io trigger crash working hypothesis io us memory io increased memory pressure cause app crash older device challenge every assumptionthe team suggestion validate hypothesis run app io iphone get crash memory pressure issue could malloc big chunk memory enter try view crash hypothesis incorrect least scratched strong possibility analyze slice codeat point tried think problem could happen first place knew something app mishandled memory way corrupted heap swift mostly memory safe unless something exotic safe however exotic code examine issue incorrect pointer manipulation like double freeing reviewed code raw pointer handling c code lowlevel graphic code good candidate incorrect pointer usage turned fine thread data race great tool called thread sanitizer built xcode help find data race issue app unfortunately run simulator much app us feature unsupported part run simulator worked fine trigger thread sanitizer warning manually tracked every piece concurrent code app marking safe inspected turned safe interlude bug io eric ceo blaming platform system framework easy unlikely occurrence smiled ceo saying think knowing yet close truth even immediately jumped conclusion swift bug still needed find reproducible case file bug report bruteforce search doubt use brute force ken thompson finally went tried tested method brute force also known ripping app apart remove thirdparty codei removed every thirdparty dependency exclude possibility problem code luckily strict adding many thirdparty library one mostly supporting easily isolatable code like ssziparchive still crashing next removed framework commonly used component still crashing move suspicious piece empty projecti pretty suspicious heavyweight ar view pulled project still crashing great wild idea removed whole ar view still crashing every second run confusion peak level get stuck choose new angleat point solid theory blaming ar view ruined try another angle code fairly slim point thousand line parsing model kind data structure nothing concurrent everything running synchronously wanted try look crash site even though knew cause heap corruption could elsewhere seeing stack trace piece code every time made want look closer pattern started see always dictionary involved always simd type dictionary point ready give week tiring hunt really swift bug opened macbook tried something crazy ten minute later victory aftermathfinding problem significant chunk work end journey thing finally figure going workaroundbecause hey user still crashing u workaround replace value stresstesting dictionary instead value app seemed stable still idea dictionary problem wanted submit quick fix app store part story happy ending ever since change landed back crash free session rate file radar folk apple might unaware bug might lot people crashing reason need help know something like going lucky friend fellow hungarian swift standard library team karoly lorentey reached issue started tweeting progress excited finding submitted bug report erik eckstein submitted fix almost right away fix shipped swift xcode beta confirm version app used crash crash built new xcode beta karoly also kind enough explain problem let briefly go cause heap corruption craziness actual problemthe actual problem restricted old device platform every device affected actual problem dictionary specific collection type affected storing type alignment greater byte element unusually wide alignment storage standard library collection type guaranteed always allocated correct alignment start storage fall suitable address dictionary rounded closest alignment boundary offset ensured correct alignment also meant last dictionary element may ended partially outside allocated buffer leading form buffer overflow innocuous combination oslanguagedevice parameter probably caused issue trigger frequently probably became noticeable particular device running io alignment alignment defines amount padding needed make data line even memory address processor efficient memory access data aligned properly still work unaligned address performance hit arm strict instance unaligned access allowed cause alignment fault fact many swift type alignment greater byte reason issue occurred app using simd type extensively simd type tend wide alignment even though tried debugging problem address sanitizer instrument memory inspection never caught wonder lesson learnedidentifying fixing bug big part software engineer job know sometimes nice review bigpicture step make sure gathering correct signal find consistent reproduction case bisect find another way go back time track back problem analyze slice code always challenge assumption work way smallest simplest bit problem code document everything end simple project exercised bug along copious note enough file bug report apple learned methodical approach little brute force wear problem finally learned sometimes ceo right sorry eric question comment feedback regarding article find twitter vasarhelyia welcome dm open lovely team polishing article second part article coming explaining problem detail swift team apple solved stay tuned
109,Lobsters,swift,Swift programming,The ultimate list of resources to mastering Swift and iOS development‚Ää‚Äî‚Ää2018 edition,https://medium.com/@wesharehoodies/the-ultimate-list-of-resources-to-mastering-swift-and-ios-development-2018-edition-3bd2a87ff400,ultimate list resource mastering swift io development edition,,
110,Lobsters,swift,Swift programming,Object-Oriented Programming in Functional Programming in Swift,https://www.dotconferences.com/2018/01/graham-lee-object-oriented-programming-in-functional-programming-in-swift,objectoriented programming functional programming swift,,far mutually exclusive way write software oop functional programming two useful mental toolsets designing software graham explores two related find
112,Lobsters,swift,Swift programming,Vapor (Server-side Swift),https://vapor.codes/,vapor serverside swift,sorry vapor website nt work properly without javascript enabled please enable continue,sorry vapor website nt work properly without javascript enabled please enable continue
113,Lobsters,swift,Swift programming,Type Erasure in Swift,https://www.mikeash.com/pyblog/friday-qa-2017-12-08-type-erasure-in-swift.html,type erasure swift,send click information comment r feed page pygments,friday q type erasure swift might heard term type erasure might even used typeerased type standard library anysequence exactly type erasure article explore type erasure want make happen topic suggested lorenzo boaro motivationthere time want hide underlying type outside user sometimes matter hiding implementation detail case prevent static type spreading codebase allow distinct type interoperate type erasure process removing specific type annotation favor general one protocol abstract superclass could considered really simple form type erasure take nsstring example never get plain nsstring instance always instance concrete subclass usually private mostly hidden view though apis work nsstring various subclass used without know without sprinkle code type advanced technique become useful dealing swift generic protocol associated type swift nt allow using protocol concrete type example want write code accepts sequence int value ca nt write func f seq sequence int legal swift specialize generic type way protocol work around using generic func f sequence seq selement int sometimes work great case troublesome often ca nt add generic one spot one generic function requires others generic require yet even worse ca nt use return value property wo nt work way want func g sequence selement int looking something g return conforming type instead allows caller choose type want g required provide appropriate value swift provides anysequence type solve problem anysequence wrap arbitrary sequence era type providing access anysequence type instead using rewrite f g func f seq anysequence int func g anysequence int generic disappear specific type still hidden small code complexity runtime cost wrap value anysequence code nice clean swift standard library bunch type anycollection anyhashable anyindex useful create go along generic protocol use technique simplify code dealing let explore various way accomplish type erasure type erasure classeswe need wrap common functionality multiple type without exposing type sound lot like superclasssubclass relationship fact use subclass implement type erasure superclass expose api blind underlying implementation type subclass implement api knowledge underlying type let see version anysequence would look using technique call manysequence incorporate name class manysequence element sequence class also going need iterator type return makeiterator method perform type erasure twice hide underlying sequence type well iterator type inner iterator class conforms iteratorprotocol implement next method call fatalerror swift nt builtin support abstract class suffice class iterator iteratorprotocol func next element fatalerror must override next manysequence get similar implementation makeiterator call fatalerror encourage subclass override func makeiterator iterator fatalerror must override makeiterator typeerased public api private implementation subclass public class parameterized element type private implementation class parameterized sequence type wrap private class manysequenceimpl seq sequence manysequence seqelement class need internal subclass internal iterator class class iteratorimpl iterator wrap instance sequence iterator type var wrapped seqiterator init wrapped seqiterator selfwrapped wrapped implement next call wrapped iterator override func next seqelement return wrappednext similarly manysequenceimpl wrap instance sequence var seq seq init seq seq selfseq seq implement makeiterator get iterator wrapped sequence wrap iterator iteratorimpl override func makeiterator iteratorimpl return iteratorimpl seqmakeiterator need way actually create thing static method manysequence creates instance manysequenceimpl return caller manysequence extension manysequence static func make seq sequence seq seq manysequence element seqelement element return manysequenceimpl seq seq production code would probably want clean bit using extra level indirection manysequence could provide initializer instead let try func printints seq manysequence int elt seq print elt let array printints manysequencemake array printints manysequencemake array work type erasure functionswe want expose functionality multiple type without exposing type natural approach store function whose signature involve type want expose function body created context underlying implementation type known let look manysequence would look approach start similar previous implementation although one struct rather class dumb container inheritance struct manysequence element sequence like need iterator return one also struct contains stored property function take parameter return element signature used next method iteratorprotocol implement iteratorprotocol call function struct iterator iteratorprotocol let next element func next element return next manysequence similar contains stored property function take argument return iterator sequence implemented calling function let makeiterator iterator func makeiterator iterator return makeiterator manysequence init magic happens take arbitrary sequence parameter init seq sequence seq seq seqelement element need wrap functionality sequence function make iterator start asking seq make one var iterator seqmakeiterator wrap iterator iterator next function call iterator next method return iterator next iteratornext code us func printints seq manysequence int elt seq print elt let array printints manysequence array printints manysequence array one work functionbased approach type erasure particularly nice need wrap small amount functionality part larger type nt need separate class implementing entire functionality whatever type erasing example let say want write code work various collection type really need able collection get count zerobased integer subscript example might table view data source might look like class genericdatasource element let count int let getelement int element init c collection c c celement element cindex int count ccount getelement c cstartindex rest code genericdatasource easily call count getelement perform operation passedin collection without collection type contaminating genericdatasource generic parameter conclusiontype erasure useful technique stopping viral spread generic code keeping interface simple accomplished wrapping underlying type way separate api functionality done abstract public superclass private subclass done wrapping api function type erasure function particularly useful simple case need piece functionality swift standard library provides several type erased type take advantage example anysequence wrap sequence name indicates let iterate sequence without needing know type anyiterator companion type providing typeerased iterator anyhashable provides typeerased access hashable type various collection protocol search documentation see standard library also us type erasure part codable api keyedencodingcontainer keyeddecodingcontainer typeerased wrapper around corresponding container protocol used allow encoder decoder implementation provide container without incorporate container type api today come back next time programming fun game friday q driven reader suggestion topic like see cover please send enjoy article selling whole book full volume ii iii available epub pdf print ibooks kindle click information comment comment r feed page add thought post comment spam offtopic post deleted without notice culprit may publicly humiliated sole discretion javascript required submit comment due antispam measure please enable javascript reload page code syntax highlighting thanks pygments
114,Lobsters,swift,Swift programming,Total programming in Swift,https://medium.com/@andre_videla/total-programming-in-swift-526508c12a74,total programming swift,total programming swift http totality null reference optional type swift notation linked list revisited algebraic data type error handling checked exception pure evil optional unwrapping value optional type int unwrapped ignoring possible error alternative optionals error handling conclusion type driven developpement idris,total programming swiftedit interviewed corecursive podcast topic find podcast episode along great selection interview http nice language try make programmer right thing beginning one good thing encourages totalitywhat totality total program program never get stuck crash run infinite loop always terminate correctly finite amount time program total welltyped situation crash get stuck many way program nontotal example getting stuck deadlock infinite loopan edge case handled crash programa malformed input put program corrupt statethus totality embodies phrase well typed program go wrong property extremely useful daytoday programming alleviates eliminate need test increase confidence code allows reason codebase small trustworthy chunk program use total example meant run forever web server mobile apps deamons even overall program total useful part total though talk total program practice total function therefore use word interchangablyin post present null pointer unchecked exception work totality show swift encourages totality getting around two problem see swift promise totality silently broken using operator different context finish example write simple safe code avoiding though subject totality deeply linked nontermination talk footnote good well point swift check program total merely happens encourage practice almost accident make program total many reason swift check totality compelling one mathematically impossible indeed checking totality mean checking program always terminate infinite loop terminate good state crash termination problem generally known halting problem popularised proven impossible solve alan turing using turing machine exist programming language limited form termination checking like idris agda given arbitrary program decide whether terminate unable tell whether program total footnote original source phrase come paper milner context statement exists soundness proof particular type system therefore well typed expression sound null referencesthe null reference find origin lowlevel language programmer manipulates pointer value language make heavy use pointer access address memory hold data structure used programfor example linked list common represent node pair pointer pointer value currently held pointer next node listthis raise question represent final element list one possibility last element list special node second pointer make linked list api cumbersome use every pointer list node must tested cast either middle node final node tail pointer list middle node square final node circle moreover make adding element end list bit cumbersome would create middle node put value last node new middle node make predecessor last node point new middle node replace value last node new value make new middle node point last nodeanother way implement last element last pointer dangling point anything could example point special reserved value example uninitialized memory since dangling pointer easily compare use pointer quite commonly give name call nulllist ending pointer nullwe add element end list simply replacing final null pointer pointer new last element set last element tail pointer nullthat make linkedlist api simpler elegant price safety indeed dereferencing pointer general case crash program since accessing uninitialized memorynull reference carried programming language like java c others order represent data structure like linked list exactly way c language pointer first class citizen anymore still nullpointerexception nullreferenceexception trying use reference without realising null footnote null pointer called billion dollar mistake tony hoare introduced null reference algol w encourage listen talk null reference http wwwinfoqcompresentationsnullreferencesthebilliondollarmistaketonyhoare optional typeswift null reference instead make use type system represent thing like missing value reference invalid case type optional used represent null pointer rather value enum optional case case none type signal optional carry value type carry nothing value nonewe use optional type model thing previously required null pointer difference type checker require u handle case value found value missing none also serf accurate documentation explicitly stating value might go missing footnote none case nil also used model null pointer example case weak reference might deallocated point case reference deallocated longer valid represented using nil footnote optionals implemented using enums enums algebraic data type allow u combine existing type including generic order build complex structure like tree list state simple enumeration enum value immutable swift notationswift lot syntax sugar handling optionals small list shorthand use optional value like optional string abridged string write nil instead none check optional value contains something using special ifstatement let example let present string somestring let absent string nilif let message absent absent contained value would bound message identifier case nothing absent therefore branch taken else branch taken since absent nil let message present branch taken use message value somestring footnote nil keyword might confusing people coming objectivec go indeed language use nil represent null pointer swift syntax sugar value none linked list revisitedwe seen example linked list use null pointer could imagine making use nil represent linked list way use class struct structs recursiveclass node elem let element elem let tail node elem use like thisfunc countlist elem list node elem int let rest listtail return count rest else return huge problem function accept empty list worse empty list even representable using null pointer problem empty list null pointer node translate become quite unnatural quickly expect node e empty list represented nilfunc countlist elem list node elem int let nonemptylist list return countlist nonemptylisttail else return alleviate using typealiastypealias list elem node elem clearly dealing one level indirection many type supposed help u seem obfuscate important information user want clearly indicate list either empty contains element rest list passing nil argument communicate thatalgebraic data typesalgebraic data type abridged adt allows u create new type type combining two way sum product dive theory useful keep mind someone say sum type mean combining type using enums say product type mean combining type using struct work sum encapsulate idea choice value product refers putting value alongside valueswe actually much better optional linked list using adts indeed define enum two case either carry value rest list carry nothing see footnote list elem list contains nothing case empty list contains element rest list case node elem list elem make use list much streamlined func count e list list e int see footnote switch list case empty return case let node elem rest return count list rest able completely eliminate need optionals simplified api optional wrapping made clear type list either empty node contains value list footnote node typically called con empty typically called nil convention lisp would build list using con constructor function pair element list first element list would called car rest called cdr recent year common refer two head tail footnote note use switch statement switch useful destructure data safely swift enforce switch exhaustive leave case want handle case case insert catchall case default case switch statement encourage programmer write total program checking exhaustiveness refuse compile case missing error handlingexceptions also root low level programming first instance find exceptionlike behaviour deep inside implementation cpucpus mechanism interrupt current computation something unexpected come mechanism called interruption ubiquitous cpu design implementation useful many thing like handling io signaling hardware error communicating software running cpu like scheduler moreencountering null reference throw exceptionexceptions programming language bit like interruption interrupt current flow execution expect something done order handle error exception handled propagate handled otherwise program killedthis fine principle huge problem trying write total program indeed part code able throw exception aware able handle correctly program crash break totality since well typed program crash exceptionwhen writing code total able trust every bit information available includes knowing function call throw exception manage error accordingly tell program crash sure program totalchecked exceptionsone way go back untrustworthy exception totality enforce every exception possibly thrown handled implies compiler know advance exception pice code throw ensure caller handle potential error java example checked exception form exception class exception thrown extends exception get caught handled unfortunately java also runtimeexception class bypass exception check mean method marked throwable still throw exception crashswift error handling model make use exception way programming language even though borrows similar function emit error marked throw type state change failfunc open door door throw door call function throw handle try catch block also use try try talk later let openeddoor try open door slidingdoor catch jammed print door jammed catch error print unknown error user writeslet opendoor open door slidingdoor trythe compiler emit error suggesting error caught compile footnote error handling model swift work way programming language implement exception particular throwing error cause unwinding call stack rather signal function return one two thing either value error essence analogous returning generic result type find language like scala rust note swift canonical result type library implement result type footnote currently function method marked throw disclose type error might emit subject typed throw still stir lot discussion among user swiftevolution mailing list pure evileven though swift pretty reasonable default useful abstraction make use powerful type system also equipped number escape hatch used carefully example unsafe raw pointer call fatalerrorbut one escape hatch stand extremely extremely dangerous easy use operator footnote even though raw pointer manipulation possible swift use rare niche mostly find low level library interact c lot user write read code optional unwrappingin case optionals operator allows programmer convert optional value nonoptional value going extracting value present crashing absent swift issue message call function might crash example given function safe division divide return nil func divide n int divisor int int divisor return n else return nil tell compilesfunc complexcalculation value int int return value divide value thisfunc complexcalculation value int int return value divide value hint give error message value optional type int unwrappedthat right function divide might return nil handle case division fails return nil added multiplied unfortunately first function hide property using assumes divide never return nil make program relies complexcalculation unsafe might crash input possibility crash visible typeignoring possible errorsa similar situation exists throwable function user writes try front throwable function swift require function wrapped try catch block crash return errorfunc openfile path string throw filehandlefunc openandread let file try openfile path testtxt let stream try fileread swift happily compile code crash runtime file texttxt found program right open filehiding fact function crash make program typecheck breaking assumption well typed program go wrong alternative time operator used order avoid repetitive check make assumption nil error even occur exists way keep code clear clean without compromising safety moreover code need provably ensure encouter nil error probably update type signature avoid use optionalsa problem many people starting optionals encounter seem spread throughout codebase simply product inexperience new paradigm programming optional brings indeed previous experience taught programmer actively check null reference optional type require cumbersome old fashioned practice like manually checking value present instead operation optional carried normally provided lifted using function like map example instead writing transfrom string json return nil string unparsablefunc parsejson string string json parse possibly missing json possibly missing user unfortunately passing nil would make sense would func parseuser json json user let json json parse json else return nil combine everythinglet parseduser user parseuser parsejson userinput write parse json user json parsable user return nilfunc parseuser json json user parse json combine everythinglet parseduser user userinputmap parsejson flatmap parseuser seems like small change really help simplify function signature prevents proliferation optionals let check whatsmore would point optionals replace value nil let footnote lifting refers taking existing function change change argument return type something general case optional map transforms function signature flatmap transforms function signature error handlingwhen dealing throwable function often happens nothing error occurs except abort let reuse parsejson example imagine want read json file parse user reading file throw read content file put stringfunc readfile filepath string throw string function want write possibility error expressed func readjson filepath string user error type readjosn read file attempt parse content user way signal caller function fail given situation reasonable thing case error readjson probably either report error caller ignore error want ignore signature looking func readjson filepath string user function combine readfile parsejson parseuser return user contained file anything go wrong user returned function return nil instead let see implement itfunc readjson filepath string user let content try readfile filepath filepath return parsejson content flatmap parseuser catch return nil implementation seems correct handled possible error simply converting nil ceremony line dedicated ignoring error returning nil instead another way func readjson filepath string user return try readfile filepath filepath flatmap parsejson flatmap parseuser example used try keyword exactly previous implementation return nil error encountered otherwise return normally flatmap allows u combine parsejson parseuser function sequence worrying nil caseanother nice effect writing thing like easy see happens attempt read attempt parse file attempt parse json userand type signature communicates anything go wrong function return nil able make program quite bit simpler keeping relevant type information type signature product choice made indeed decided remove mention possible way reading file fail hidden way diagnose error might want maybe want keep information around order help user function understand failure happened file handle problem parsing error case might want update function like time throw return optionalfunc readjson filepath string throw user return try parsejson readfile filepath filepath flatmap parseuser configuration caller infer nil result thrown error mean different thing specifically nil mean parsing unsuccessful error mean problem filethe possiblities infinite could make parse function throw user catch possible parsejson parseuser error could make use result type could encapsulate error custom readjsonerror type etc variation keep precious type information communicating differently code doesconclusionswift total language never nonetheless swift compiler give u confidence compiled program behave nicely encourages programmer write program total enforcing simple rule catch error check nil make switch statement exhaustive etc unfortunately swift also one escape hatch little bit easy use throw away effort make program total maybe future way selectively disable operator like order work safer environment advertise crashfree experience rely linter toolsfinally encourage write safer code disclose might crash make use awesome type system truely amazing shown product powerful type system swift special nil checking phase compiler optionals juste like type make precise type like communicate important behaviour codethis post inspired book type driven developpement idris edin brady recently finished book present like program idris pure total dependently typed programming language encourage anyone take look idris lot lesson learn even completely different experience using mainstream programming language
115,Lobsters,swift,Swift programming,Why many developers still prefer Objective-C to Swift,https://www.hackingwithswift.com/articles/27/why-many-developers-still-prefer-objective-c-to-swift,many developer still prefer objectivec swift,note sponsor hacking swift reach world largest swift community main reason holding back switching swift primary language steve troughtonsmith michael lauer dan leivers peter molnar todd thomas ian mcdowell simon wolf marco arment marcel weiher ever felt developer might get little stigmatized using objectivec talking social medium steve troughtonsmith michael lauer dan leivers peter molnar todd thomas ian mcdowell simon wolf marco arment feel see conference use swift time steve troughtonsmith michael lauer dan leivers peter molnar todd thomas ian mcdowell simon wolf marco arment marcel weiher think introduction swift helped hindered development objectivec language steve troughtonsmith michael lauer dan leivers todd thomas ian mcdowell simon wolf marco arment marcel weiher think objectivec swift developer thank steve troughtonsmith michael lauer dan leivers peter molnar todd thomas ian mcdowell simon wolf marco arment marcel weiher taking time contribute view article let know twitter sponsor hacking swift reach world largest swift community,several year io sdk announced developer flocking objectivec sought get slice app development gold rush time gone swift u three year largely pushed older sibling limelight objectivec rising star app development world started become secondclass citizen apple ecosystem yes might occasionally get dusted slide two wwdc majority conference talk worldwide swift apple pushing swift hard education space major language feature come swift first still using objectivec alone many developer still prefer objectivec swift good reason got touch objectivec developer ask holding back whether feel objectivec development become stigmatized note view expressed personal may represent view employer people listed order responded answer edited length sponsor hacking swift reach world largest swift community main reason holding back switching swift primary language steve troughtonsmith variety reason avoid swift first foremost nt enjoy using find language much difficult read parse objc especially iflet variable assignment loop switch statement chaotically overused apple body sample code like arkit newcomer different language written thing kind platform swift definitely extreme low end legibility spectrum yet convinced apple level participation language four year swift used important piece io o framework maintain running list swift apps apple twitter macos definitely le shy adopting new feature io understand case abi stability etc apple using everything nt see need betatesting behalf lose nothing waiting swift ready gain benefit objectivec meantime fully belief apple build something say way forward nt mean right choice anecdotally heard first year apple divided swift anybody apple course massive body objc developer swift much surprise many u fully belief apple build something say way forward nt mean right choice seen whole bunch misstep discoveryd io io mehs macos touch bar apple past several year certainly nt hurt wait see pan michael lauer see incentive extremely productive objectivec view language elegant concise expressive firstclass async concurrency swift jump minute contrast hear slow compilation time massive duplication runtime library yet see significant runtime performance improvement dan leivers prototype small project use objectivec purely ease updating significant period time passed often likely type client also maintain objectivec apps number client simply time reason switch swift cutting new code project swift often end scenario mentioned prototype peter molnar honest version main roadblock missing source code compatibility even still waiting abi stability think one issue left personally feel le important source compatibility work todd thomas xcode support swift seems laughable stupid long compile time large project crappy refactoring debugging tweetbot mac fairly sizable project take second compile retina mbp includes framework library app also swift abi stable yet need ship swift libs app likely start slowly converting part app swift build time hour full clean build adding would great ian mcdowell ton shared c code business logic shared window android write ui native uikitappkit objectivec lot objectivec file bridge two language yet adopted swift much aside script internal tool hearing team using swift compile time slower objectivecc hundred xcode project eventually compiled giant static library linked app binary done reduce app launch time build time hour full clean build adding would great simon wolf primary coding project client large codebase evolved several year whilst introduce swift lot work involves editing existing code prevents using much swift consultant also aware time new major version swift either charge update see correctly working code take neither ideal proposition marco arment judgment swift pragmatic decision already expert objectivec extremely productive using benefit switching swift compelling enough overcome cost marcel weiher lot best work includes heavy metaprogramming judicious mixing c part objectivec dynamic messaging part get difficult much example write coredata swift also churn tried find sample code apple pencil swift none compiles today ever felt developer might get little stigmatized using objectivec talking social medium steve troughtonsmith little deeply unpopular use objc say like objc swift swift truly massive hype train definitely nt want stand way like anything creates passionate fullyboughtin fan point engaging reasoned discussion swift user aware downside happy make compromise perceived benefit nt perceive benefit michael lauer absolutely feel like constantly must defend dinosaur believe amy worrall talk iosdevuk objectivec unrest audience seemed people understanding dan leivers definitely drive new shiny perhaps many io community ended first place entirely unsurprising still push bleeding edge believe amy worrall talk iosdevuk objectivec unrest audience seemed people understanding peter molnar feeling reading job title job description necessarily social medium everyone looking senior swift developer todd thomas worry much app speak good user care written ian mcdowell felt stigma lot still using objectivec use swift personal project love understand reason use work simon wolf little believe swift bad objectivec one true cocoa language tend avoid heated argument pro con swift also seen people rude objectivec developer mac developer tend edge io community anyway probably conflict think mac developer keen use latest greatest still battling nscell marco arment already starting every transition happens way objectivec developer made fun carbon developer natural side effect whenever language currently considered language progress anymore still using pragmatic reason php developer web side accustomed feel see conference use swift time steve troughtonsmith fully excluded swiftonly conference one nothing nt want care swift best practice design pattern language fully formed apple using scale nt want collate dozen communityled design pattern want apple swiftonly conference one nothing knowing swift one true future apple development done lot push away wanting make apps outright onetwo punch io ui swift transition certainly made feel like nt platform want develop anymore michael lauer sad course translate everything see effort refuse submit talk conference demand example swift thankfully still conference rest u dan leivers least mostly consistent peter molnar think part evolution true much life around objectivec swift new thanks continuously changing lot talk obviously lot also obsolete tomorrow todd thomas guess want forward looking conference probably use swift mind personally also pay huge amount attention conference either ian mcdowell feel great future simon wolf mind realize swift new shiny thing since know swift well enough understand really worry buried head sand bothered learn swift may feel left think approach conducive good developer marco arment bother conference organizer attendee stay closer bleeding edge course use swift translating swift snippet objectivec conference tutorial stack overflow one cost continuing use objectivec today far proven especially burdensome time burden increase marcel weiher admit find lot swift talk superficial often laughably illinformed guess feel disappointment know sound harsh obviously exception omg think introduction swift helped hindered development objectivec language steve troughtonsmith swift absolutely catastrophic objectivec development new apis feature longer sample code wwdc slide tutorial github stackoverflow whatever stackoverflow millennial joke losing access context knowledge devastating plus side objc language gained bunch quality lifesyntactic sugar feature help interop swift better fantastic swift absolutely catastrophic objectivec development really resent fact objc die make swift live two language could lived independently everything would fine developer like could pick language appropriate task hand passionate massive movement behind swift made impossible well apple cessation creating objc resource developer michael lauer mostly hindered benefit got thanks swift lightweight generic nullability dream could objectivec manpower behind dan leivers think initially helped help feel mostly put back burner todd thomas think helped added many useful thing language swift complain ian mcdowell objectivec gotten nice feature swift including available syntax nullability specifier stable language nt expected change unwrapping swift pain helped adopt better practice objectivec simon wolf helped far change improvement objectivec result swift addition writing little swift encouraged look objectivec coding practice le inclined let nil object sweep thing carpet unwrapping swift pain helped adopt better practice objectivec marco arment swift effectively stopped development objectivec language neither surprising unreasonable fortunately objectivec pretty mature year swift introduction brought lot improvement keep objectivec usable u move swift marcel weiher obviously hindered objectivec ok really need bullet head development surprising somewhat disturbing many obvious defect library preferred coding style would trivial fix without introducing whole new language swift arrived attributed swift almost improvement held back order make swift look good though pretty sure happened however biggest negative impact likely prevent development successor actual improvement really enough information build beast apple ignored crime think along question also asked long people using objectivec think fair say familiarity language always going important choosing stay move come surprise hear people said using objectivec either immediately iphone sdk first launched shortly couple used well ten year one yes twenty seven year add one responder said started objectivec relatively recently perhaps still life old dog yet one thing last year wrote book called objectivec swift developer introduction included section titled love objectivec wrote read first complete draft book thought wow read like snark guide objectivec felt like almost every chapter complained something result spent time editing book make little upbeat trying present thing artificial light genuinely loved working objectivec switched swift day announced swift app live app store first day possible result many respect objective c seems bad swift much better working swift long going back objectivec feel bit like returning rural home town christmas used living big city tell whether loved objectivec stockholm syndrome whether apple apis darned powerful regardless think important realize amazing software built objectivec many people love much today always find thing book make cringe gentle old language come long way served u well least deserves dignity retirement thank steve troughtonsmith michael lauer dan leivers peter molnar todd thomas ian mcdowell simon wolf marco arment marcel weiher taking time contribute view article still prefer using objectivec swift let know twitter sponsor hacking swift reach world largest swift community
116,Lobsters,swift,Swift programming,Swift 4.0 Released!,https://swift.org/blog/swift-4-0-released/,swift released,wwdc new swift playground language update string collection archival serialization swift archival serialization additional language update new compatibility mode migrating swift package manager update documentation swift programming language ibooks store platform linux available download apple xcode xcode available download source,swift officially released swift build strength swift delivering greater robustness stability providing source code compatibility swift making improvement standard library adding feature like archival serialization watch quick overview watching wwdc new swift presentation try new feature playground put together ole begemann language update swift major language release contains following language change update went swift evolution process string swift includes faster easier use string implementation retains unicode correctness add support creating using managing substring see collection swift add improvement creating using managing collection type see archival serialization swift support archival struct enum type enables typesafe serialization external format json plist see swift archival serialization additional language update swift also implement following language proposal swift evolution process new compatibility mode swift may need modify code use new version compiler compiler support two language mode swift mode compiler accept majority source built swift compiler update previously existing apis either part standard library apis shipped apple appear mode order provide level source compatibility new language feature swift available language mode swift mode includes swift language api change source migration needed many project although number source change quite modest compared many previous major change swift release language mode specified compiler swiftversion flag automatically handled swift package manager xcode one advantage language mode start using new swift compiler migrate fully swift pace taking advantage new swift feature one module time information swift migration compatibility mode see migrating swift package manager update swift introduces new workflow feature complete api swift package manager easier develop multiple package tandem tagging first official release work branch multiple package together package product formalized making possible control library package publishes client new package api allows package specify number new setting giving package author control package build source organized disk overall api used create package cleaner clearer retaining sourcecompatibility older package macos swift package build occur sandbox prevents network access file system modification help mitigate effect maliciously crafted manifest swift package manager build top package manager tool versioning introduced swift allows package author specify version swift required building package includes swift information enhancement package manager see documentation updated version swift programming language swift available swiftorg also available free apple ibooks store platform linux official binary ubuntu ubuntu ubuntu available download apple xcode development apple platform swift ship part xcode toolchain also available download swiftorg source development swift tracked following repository github tag designates specific revision repository make final version swift remain open release management process accumulate change potential future bugfix dot release
117,Lobsters,swift,Swift programming,Madness of Generic Integer,http://blog.krzyzanowskim.com/2015/03/01/swift_madness_of_generic_integer/,madness generic integer,post protocol hierarchy int generic function nsdata getbytes generic function integertype integertype integertype since know int int genericintegertype sign matter intmax uintmax bitpattern protocol madness bitpattern http conclusion contact gist discussion hacker news thread spicy mystery story includes pit madness e hoffmann price,handling integer swift easiest task especially need generic function work kind integer integer type considered integer int uint bit skip one post bit conform enormous number protocol example protocol hierarchy int protocol thankfully empty protocol used describe characteristic type eg strideable forwardindextype randomaccessindextype integertype signedintegertype etc goal create generic function handle integer value make operation case want build function get byte return integer value build given byte array byte let byte byte let result integerwithbytes byte function named integerwithbytes sample input value byte long value bit equal following bit representation le want archive done old world nsdata nsdata getbytes func integerwithbytes integertype byte var var data nsdata byte byte length bytescount datagetbytes length sizeofvalue retrurn case want swift way without raw memory let play generic function let build generic function hierarchy protocol found could use protocol integertype denominator integerness given value first naive version function parameter conforms protocol integertype follow func integerwithbytes integertype byte bytescount sizeof return nil var var j j sizeof j byte j j error return error could find overload accepts supplied argument shift operator defined every integer separatly generic type integertype func lh rh func lh rh func lh uint rh uint uint func lh int rh int int func lh rh func lh rh func lh rh func lh rh func lh rh func lh rh first sign probably simple way build generic function every type represented separately signed integer separated unsigned according returned error message ca nt shift operation type described integertype function need return value given type integer since know int largest possible integer think use bitwise shift operation sequence follow cast value first int shift cast back given type could look like let int byte j int j error error could find overload init accepts supplied argument oups one initializers defined protocol find every single struct int uint etc formalized protocol assumed de facto protocol build one named genericintegertype protocol genericintegertype integertype init v int init v uint init v init v init v init v init v init v init v init v function look follow func integerwithbytes genericintegertype byte bytescount sizeof return nil var var j j sizeof j int byte j int j ok return point thought problem solved wrong sign matter soon started first test found nt working type see let result integerwithbytes byte ok let result integerwithbytes byte error let result integerwithbytes byte ok let result integerwithbytes byte error obviously room improvement first need separate signed type unsigned one major drawback ca nt maybe build single generic function ok two version one unsigned integer func integerwithbytes genericintegertype unsignedintegertype byte var uintmax var j j maxbytes j byte j touintmax uintmax j one signed func integerwithbytes genericintegertype signedintegertype byte var intmax var j j maxbytes j byte j tointmax j tointmax good point depends type context appropriate function called decided use intmax uintmax largest integer perform shift operation type another issue pop return error error intmax convertible one starting swift explicitly cast type keyword return ok better still type result right let result integerwithbytes byte nil expected value signed integer think use bitpattern initializer solve issue going madness protocol madness come two new protocol handle another de facto protocol applying bit value bitpattern initializer protocol genericsignedintegerbitpattern init bitpattern uintmax init truncatingbitpattern intmax protocol genericunsignedintegerbitpattern init truncatingbitpattern uintmax install new protocol integer type add support init bitpattern uintmax notice bit exception rule extension int genericintegertype genericsignedintegerbitpattern init bitpattern uintmax selfinit bitpattern uint truncatingbitpattern bitpattern extension uint genericintegertype genericunsignedintegerbitpattern extension genericintegertype genericsignedintegerbitpattern init bitpattern uintmax selfinit bitpattern truncatingbitpattern bitpattern extension genericintegertype genericunsignedintegerbitpattern extension genericintegertype genericsignedintegerbitpattern init bitpattern uintmax selfinit bitpattern truncatingbitpattern bitpattern extension genericintegertype genericunsignedintegerbitpattern extension genericintegertype genericsignedintegerbitpattern init bitpattern uintmax selfinit bitpattern truncatingbitpattern bitpattern extension genericintegertype genericunsignedintegerbitpattern extension genericintegertype genericsignedintegerbitpattern init bitpattern already defined init truncatingbitpattern intmax selfinit truncatingbitpattern extension genericintegertype genericunsignedintegerbitpattern init bitpattern already defined init truncatingbitpattern uintmax selfinit truncatingbitpattern three new protocol genericintegertype genericunsignedintegerbitpattern genericsignedintegerbitpattern finally build generic ekhm generic one unsigned type func integerwithbytes genericintegertype unsignedintegertype genericunsignedintegerbitpattern byte bytescount sizeof return nil let maxbytes sizeof var uintmax var j j maxbytes j byte j touintmax uintmax j return truncatingbitpattern one signed type signed version slightly different need bitpatten cast necessary unsigned type func integerwithbytes genericintegertype signedintegertype genericsignedintegerbitpattern byte bytescount sizeof return nil let maxbytes sizeof var intmax var j j maxbytes j bitpattern uintmax byte j touintmax tointmax j tointmax return truncatingbitpattern finally test let byte integerwithbytes byte integerwithbytes byte integerwithbytes byte integerwithbytes byte integerwithbytes byte integerwithbytes byte integerwithbytes byte integerwithbytes byte code found http conclusion actually surprised integer fragmented would nt great one common placeprotocol integer rule madness finally came result especially proud lot time wasted mediocre result hope missing something something could change task easy one know better way solve puzzle nt hesitate contact comment gist update interesting discussion hacker news thread p cover image spicy mystery story includes pit madness e hoffmann price
118,Lobsters,swift,Swift programming,Over-abstraction,http://belkadan.com/blog/2017/09/Over-abstraction/,overabstraction,discussion twitter brandon williams brandon kase functional swift monoids composable html view swift associativity set sequence sequence collection bidirectionalcollection randomaccesscollection numeric additive design pattern semigroup next much longer post bit response blog post twitter people response september technical functional programming math,back july got discussion twitter whether algebraic concept functional programming netuseful reading brandon williams great article applied swift brandon kase suggested watch talk beyond type swift year functional swift conference admit still unconvinced also admit might still get two interesting thought wanted write longform thought cramming one article figured better discussion purpose one time exploration first idea overabstraction next one come week already loaded discussion title hey blog think primary problem using algebraic abstraction programming true say function optionals monoids useful criterion swift standard library usually define meaningful reusable generic operation protocol going directly talk whether monoid useful generic operation example lead people writing code like let fullarticle view article node articleheader articlebody articlefooter williams composable html view swift trouble hyperbolically idea mean mappend haskell highlevel operation know certain property rely like associativity know mean view guess generic name domain abstraction rather concrete type let take example human language imagine friend problem bird feeder seed keep getting eaten bird get eating ask would valid friend say mammal keep eating seed probably give funny look cat squirrel would go much better abstraction level far removed domain thing get harder understand also work reverse siamese cat maine coon western gray squirrel would considered overspecific answer abstraction usually good thing stretch example even let say wanted ask cat squirrel could reach bird feeder directly ground leg climb something get delicious birdseed mammal leg instead ask whether appendage long enough used correct general term harder understand tortured poor metaphor enough hopefully see getting note already problem swift standard library set sequence mean call dropfirst first element unordered set rest yet use build useful reusable operation sequence useful able apply operation set thesis abstraction good let reuse intuition code across different also hurt comprehension working type concretely lead choose sacrificing domainspecific name favor generic name two name operation also help name chosen mathematician feel approachable want highlight important criterion inclusion new protocol swift standard library generic operation work protocol protocol extension method somewhere us protocol generic constraint one concrete type would conform protocol protocol part hierarchy type conform parent protocol one probably worth making separate protocol operation semantic requirement keep string int protocol criterion gave u distinction sequence collection bidirectionalcollection randomaccesscollection numeric hypothetical additive support subtraction enough concrete type support addition still make sense write generic algorithm standard library algebraic abstraction talking match criterion matter debate course something standard library mean useful think loss domainspecific terminology high price pay common case benefit get commensurate p one idea came original twitter discussion distinction abstraction protocol type class haskell abstraction design pattern useful know operation associative let perform fold reduce parallel key part semigroup abstraction even build meaningful generic operation top particular abstraction may still useful developer reading code using type get shared intuition something behaves however difference design pattern language feature compiler usually check using design pattern correctly mean using actual protocol value return idea next much longer post pps posted brandon williams made bit response tweetstorm format elviro rocca made blog post day also read twitter people response entry posted september filed technical tag functional programming math
120,Lobsters,swift,Swift programming,Task-based concurrency manifesto draft,https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782,taskbased concurrency manifesto draft,swift concurrency manifesto chris lattner chinese translation jason yu content introduction swiftevolution mailing list concurrency swift goal nongoals manifesto first class concurrency model asynchronous apis difficult work queue shared mutable state bad software developer readerswriter lock doublechecked locking atomic operation readcopyupdate parallel programming hard shared mutable state bad hardware numa nonuniform mesi protocol relaxed consistency model gpus mpi shared mutable state nt scale beyond single process interprocess communication socket signal pipe mig xpc distributed computation overall vision mutation value semantics asyncawait actor model erlang akka part asyncawait beautiful asynchronous apis fully baked proposal well understood asyncawait asyncawait design swift coroutine full proposal new asynchronous apis server apis project part actor eliminating shared mutable state actor actor model theory wikipedia page actor wiki page move semantics example actor design swift extending model await main thread data isolation ownership semantics type provide proper value semantics pony reference type class reference type closure function global mutable state scalable runtime kernel thread explosion actor shutdown bounded queue depth alternative design actor class extension reactive stream dart stream design c intraactor concurrency part reliability fault isolation swift error handling rationale fail fast joe armstrong phd thesis actor reliability model opting reliability progressive disclosure complexity reliability runtime model cleanup performed part improving system architecture ipc cloud distributed object design sketch interprocess distributed compute erlang progressive disclosure complexity new apis required part crazy brilliant future learning concurrency design pony pony programming language swift ownership model akka actor scala akka scala programming language akka actor system erlang share mutable state akka typed go go programming language blog post blog post csp data race memory safety rust swift ownership model,swift concurrency manifesto author chris lattner chinese translation jason yu content introduction document published style swift evolution manifesto outlining longterm view tackle large problem explores one possible approach adding firstclass concurrency model swift effort catalyze positive discussion lead u bestpossible design nt approved finalized design prescriptive swift end adopting job public debate open source swiftevolution mailing list discus iterate towards ultimate answer may end completely different approach focus taskbased concurrency abstraction commonly encountered client server application particularly highly event driven eg responding ui event request client attempt comprehensive survey possible option attempt solve possible problem space concurrency instead outline single coherent design thread built span year incrementally drive swift greatness concurrency swift far swift carefully designed avoid concurrency topic specifically want cut future direction instead swift programmer use o abstraction like gcd pthreads etc start manage task design gcd swift trailing closure syntax fit well together particularly major update gcd apis swift swift generally stayed away concurrency topic made concession practicality example arc reference count operation atomic allowing reference class shared thread weak reference also guaranteed thread atomic copyonwrite type like array string sharable runtime provides basic guarantee goal nongoals manifesto concurrency broad sweeping concept cover wide range topic help scope bit nongoals proposal focusing task based concurrency data parallelism focus gcd thread baseline completely ignoring simd vectorization data parallel loop etc system programming context important swift developer lowlevel optin access something like c c memory consistency model definitely interesting push forward orthogonal work discussing apis improve existing concurrency pattern eg atomic integer better gcd apis etc actual goal well already possible express concurrent apps gcd goal make experience far better today appealing core value swift aim reduce programmer time necessary get idea working efficient implementation particular aim improve concurrency story swift along line design swift provide enough language library support programmer know reach concurrent abstraction needed structured right way achieve task maintenance use abstraction make swift code easier reason example often difficult know data protected gcd queue invariant heap based data structure safety swift current model provides help race condition deadlock concurrency problem completion handler get called surprising queue issue improved would like get safe default programming model scalability particularly server application desirable hundred thousand task active time eg one every active client server performance stretch goal would great improve performance eg reducing number synchronization operation performed perhaps even reducing need atomic access many arc operation compiler aided knowing data cross task boundary excellence abstractly look concurrency model provided language framework draw together best idea wherever get aiming better overall competitor said absolutely essential new model coexists existing concurrency construct existing apis build conceptually beautiful new world without also building pathway get existing apps first class concurrency model clear multicore world nt future present essential swift make straightforward programmer take advantage hardware already prevalent world time already possible write concurrent program since adding concurrency model make swift complicated need strong justification complexity show opportunity improvement let explore pain swift developer face current approach focus gcd since almost swift programmer use asynchronous apis difficult work modern cocoa development involves lot asynchronous programming using closure completion handler apis hard use get particularly problematic many asynchronous operation used error handling required control flow asynchronous call nontrivial many problem space including pyramid doom frequently occurs func completionblock result image void loadwebresource dataprofiletxt dataresource loadwebresource imagedatadat imageresource decodeimage dataresource imageresource imagetmp dewarpandcleanupimage imagetmp imageresult completionblock imageresult error handling particularly ugly swift natural error handling mechanism used end code like func completionblock result image error error void loadwebresource dataprofiletxt dataresource error guard let dataresource dataresource else completionblock nil error return loadwebresource imagedatadat imageresource error guard let imageresource imageresource else completionblock nil error return decodeimage dataresource imageresource imagetmp error guard let imagetmp imagetmp else completionblock nil error return dewarpandcleanupimage imagetmp imageresult guard let imageresult imageresult else completionblock nil error return completionblock imageresult partially asynchronous apis onerous use many apis defined synchronous form block eg uiimage named many apis asynchronous alternative natural canonical way define use apis allow become pervasive particularly important new initiative like swift server group queue beyond syntactically inconvenient completion handler problematic syntax suggests called current queue always case example one top recommendation stack overflow implement custom async operation code like objectivec syntax void asynchronoustaskwithcompletion void void completion dispatchasync dispatchgetglobalqueue dispatchqueueprioritydefault long running task want another thread dispatchasync dispatchgetmainqueue completion completion note hard coded call completion handler main queue insidious problem lead surprising result bug like race condition example since lot io code already run main queue may using api built like problem however simple refactor move code background queue introduce really nasty problem code queue hop implicitly introducing subtle undefined behavior several straightforward way improve situation like better documentation better apis gcd however fundamental problem apparent linkage queue code run make difficult design difficult reason maintain existing code make challenging build tool debug profile reason going wrong etc shared mutable state bad software developer let define shared mutable state first state simply data used program shared mean data shared across multiple task thread queue whatever concurrency abstraction used state shared harmful long noone modifying data problem multiple reader data concern shared data mutable therefore someone changing others task looking open enormous worm software world grappling many decade given multiple thing looking changing data sort synchronization required else race condition semantic inconsistency problem raised natural first step start mutexes lock without attempting survey full body work around claim locking mutexes introduce number problem need ensure data consistently protected right lock else bug memory safety issue result determine granularity locking avoid deadlock deal many problem number attempt improve situation notably synchronized method java later imported objectivec sort thing improves syntactic side equation nt fix underlying problem app working run performance problem mutexes generally inefficient particularly many core thread given decade experience model number attempt solve certain corner problem including readerswriter lock doublechecked locking lowlevel atomic operation advanced technique like readcopyupdate improves mutexes respect incredible complexity unsafety fragility resulting model sign problem said shared mutable state incredibly important working level system programming eg implementing gcd api kernel swift absolutely must able full ability ultimately important swift eventually define optin memory consistency model swift code important one day would orthogonal effort thus focus proposal encourage anyone interested space read parallel programming hard great survey developed paul e mckenney driving forward effort get linux kernel scale massively multicore machine hundred core besides impressive summary hardware characteristic software synchronization approach also show massive complexity creep happens start care lot multicore scalability pervasively shared mutable state shared mutable state bad hardware hardware side thing shared mutable state problematic number reason brief present pervasively multicore despite offering ability view machine shared memory device actually incredibly numa nonuniform oversimplify bit consider happens two different core trying read write memory data cache line hold data arbitrated eg mesi protocol allows cache line mutable single processor cache performance quickly fall cliff cache line start pingponging core mutation cache line pushed core simply reading number knock effect processor quickly moved relaxed consistency model make shared memory programming even complicated atomic access concurrencyrelated primitive like compareexchange slower nonatomic access cost problem continue scale core count yet nt hard find large machine dozen hundred core today look recent breakthrough hardware performance come hardware dropped goal shared memory notably gpus extremely successful scaling extremely high core count notably expose programming model encourages use fast local memory instead shared global memory supercomputer frequently use mpi explicitly managed memory transfer etc explore first principle speed light wire delay become inherently limiting factor large shared memory system point highly desirable swift move direction swift program run great largescale multicore machine luck could unblock next step hardware evolution shared mutable state nt scale beyond single process ok somewhat tautological model built shared mutable state nt work absence shared memory software industry complexity explosion system interprocess communication thing like socket signal pipe mig xpc many others operating system invariably introduce variant abstraction exist single process including lock file locking shared mutable state memory mapped file etc beyond ipc distributed computation cloud apis reimplement abstraction yetanother way shared memory impractical setting key observation simply really unfortunate state affair better world would app developer way build data abstraction concurrency abstraction reason application large even running across multiple machine cloud ecosystem want single process app start running ipc distributed setting teach type serializecode deal new error arise configure want bit code run nt rewrite large part application certainly entirely new technology stack app developer nt design api json input output format function cloud developer overall vision manifesto outline several major step address problem added incrementally swift span year first step quite concrete subsequent step get increasingly vague early manifesto design work done note goal come inherently novel idea pull together best idea wherever get synthesize idea something selfconsistent fit rest swift overarching observation four major abstraction computation interesting build model top traditional control flow asynchronous control flow message passing data isolation distributed data compute swift already fullydeveloped model first point incrementally refined improved course year wo nt talk important observe vast majority lowlevel computation benefit imperative control flow mutation value semantics yes reference semantics class concept important lowlevel primitive computation built reflect basic abstraction cpu asynchrony next fundamental abstraction must tackled swift essential programming real world talking machine slow device spinning disk still thing looking achieve concurrency multiple independent operation furthermore latency apparently identical operation sometimes subject significant jitter example include network dropping packet retry timeout fast pathslow path optimization eg cache fortunately swift first language face challenge industry whole fought dragon settled asyncawait right abstraction propose adopting proven concept outright swift spin syntax adopting asyncawait dramatically improve existing swift code dovetailing existing future approach concurrency next step define programmer abstraction define model independent task program well data owned task propose introduction firstclass actor model provides way define reason independent task communicate asynchronous message sending actor model deep history strong academic work adopted proven erlang akka successfully power large number highly scalable reliable system actor model baseline believe achieve data isolation ensuring message sent actor lead shared mutable state speaking reliable system introducing actor model good opportunity excuse introduce mechanism handling partially recovering runtime failure like failed forceunwrap operation outofbounds array access etc explore several option possible implement make recommendation think good ui server application final step tackle whole system problem enabling actor run different process even different machine still communicating asynchronously message sends extrapolate number interesting long term possibility briefly explore part asyncawait beautiful asynchronous apis note section concrete enough fully baked proposal detail matter global concurrency model settled swift hard ignore glaring problem dealing asynchronous apis asynchronicity unavoidable dealing independently executing system eg anything involving io disk network etc server even process system typically ok block current thread execution something taking load asynchronicity also come dealing multiple independent operation performed parallel multicore machine current solution swift use completion handler closure well understood also large number well understood problem often stack pyramid doom make error handling awkward make control flow extremely difficult wellknown solution problem called asyncawait popular programming style first introduced c later adopted many language including python javascript scala hack dart etc given widespread success acceptance industry suggest obvious thing support swift asyncawait design swift general design asyncawait drop right swift tweak make fit rest swift consistently suggest adding async function modifier akin existing throw function modifier function function type declared async indicates function coroutine coroutines function may return normally value may suspend internally return continuation approach allows completion handler absorbed language example might write func loadwebresource path string completionblock result resource void func decodeimage resource resource completionblock result image void func dewarpandcleanupimage image completionblock result image void func completionblock result image void loadwebresource dataprofiletxt dataresource loadwebresource imagedatadat imageresource decodeimage dataresource imageresource imagetmp dewarpandcleanupimage imagetmp imageresult completionblock imageresult whereas write func loadwebresource path string async resource func decodeimage resource resource async image func dewarpandcleanupimage image async image func async image let dataresource await loadwebresource dataprofiletxt let imageresource await loadwebresource imagedatadat let imagetmp await decodeimage dataresource imageresource let imageresult await dewarpandcleanupimage imagetmp return imageresult await keyword work like existing try keyword noop runtime indicate maintainer code nonlocal control flow happen point besides addition await keyword asyncawait model allows write obvious clean imperative code compiler handle generation state machine callback handler overall adding dramatically improve experience working completion handler provides natural model compose future apis top detail contained full proposal new asynchronous apis introduction asyncawait language great opportunity introduce asynchronous apis cocoa perhaps even entire new framework extension like revised asynchronous file io api server apis project also actively working define new swift apis many intrinsically asynchronous part actor eliminating shared mutable state given ability define use asynchronous apis expressive imperative style control flow look give developer way carve application multiple concurrent task propose adopting model actor actor naturally represent realworld concept like document device network request particularly well suited event driven architecture like ui application server device driver etc actor swift programmer easiest think actor combination dispatchqueue data queue protects message run queue embodied internal queue abstraction communicate actor asynchronously actor guarantee data protect touched code running queue provides island serialization sea concurrency straightforward adapt legacy software actor interface possible progressively adopt actor system already built top gcd concurrency primitive actor model theory actor deep theoretical basis explored academia since wikipedia page actor wiki page good place start reading like dive theoretical fundamental back model challenge work swift purpose academia assumes pure actor model everything actor assumes model communication limited may acceptable swift provide broad stroke summary advantage pure model talk address problem wikipedia say response message receives actor make local decision create actor send message determine respond next message received actor may modify private state affect message avoiding need lock actor cheap construct communicate actor using efficient unidirectional asynchronous message sends posting message mailbox message unidirectional waiting thus deadlock impossible academic model data sent message deep copied mean data sharing possible actor actor touch state access global state need synchronization construct eliminating problem shared mutable state make work pragmatically context swift need solve several problem need strong computational foundation computation within task good news already done swift unidirectional async message sends great inconvenient thing want model allows message return value even encourage requires way wait value point adding asyncawait need make message sends efficient relying deep copy argument acceptable fortunately accidentally already copyonwrite value type move semantics way basis build trick dealing reference type discussed need figure global mutable state already exists swift one option considered example actor design swift several possible way manifest idea actor swift purpose manifesto describe new type swift least confusing way explain idea nt formal proposal note right front one possible design right approach may actor special kind class model described design approach define actor actor keyword actor number data member declared instance member normal method extension work expect actor reference type identity passed around value actor conform protocol otherwise dovetail existing swift feature expect need simple running example let imagine building data model app tableview list string app ui add manipulate list might look something like actor tablemodel let mainactor themainactor var thelist string didset mainactorupdatetableview thelist init mainactor themainactor selfmainactor mainactor check see entry list capitalized capitalize string returning encourage capitalization consistency list func prettify x string string detail omitted inspects thelist adjusting string returning necessary actor func add entry string thelistappend prettify entry illustrates key point actor model actor defines state local instance data case reference mainactor thelist data actor actor send message actor reference using traditional dot syntax normal nonactor method defined actor convenience full access state within self actor actor method message actor accept marking method actor imposes certain restriction upon described nt shown example new instance actor created using initializer like type let datamodel tablemodel mainactor also shown example actor method implicitly async freely call async method await result found actor system actor abstraction like encourage right abstraction application map well conceptual way programmer think data example given data model easy create multiple instance actor one document mdi application straightforward implementation actor model swift enough achieve basic advantage model however important note number limitation imposed obvious including actor method return value throw error inout parameter parameter must produce independent value copied see local state nonactor method may accessed method defined lexically actor extension whether marked actor otherwise extending model await first limitation actor method return value easy address already discussed say app developer need quick way get number entry list way visible actor running around simply allow define extension tablemodel actor func getnumberofentries int return thelistcount allows await result actor print await datamodelgetnumberofentries dovetail perfectly rest asyncawait model unrelated manifesto observe would idiomatic way define specific example actor var swift currently nt allow property accessors throw async limitation relaxed would straightforward allow actor var provide natural api note extension make model far usable case like erodes deadlock free guarantee actor model await actor method suspends current task since get circular wait end deadlock one message processed actor time simple case occurs actor wait directly possibly chain reference extension tablemodel actor func f let x await selfgetnumberofentries trivial deadlock trivial case like also trivially diagnosed compiler complex case would ideally diagnosed runtime trap depending runtime implementation model solution encourage people use voidreturning actor method fire forget several reason believe common asyncawait model described syntactically encourages people use requiring marking etc many common application actor eventdriven application inherently one way eventual design ui system framework encourage right pattern app developer course documentation describe best practice main thread example show mainactor passed following theoretically pure actor hygiene however main thread uikit appkit already global state might well admit make code everywhere nicer make sense appkit uikit define vend public global constant actor reference eg something like public actor mainactor bikeshed could named actor ui private init ca nt make another one helpful public stuff could put make app developer happy public let mainactor mainactor would allow app developer put extension mainactor making code explicit clear need run main thread got really crazy someday swift allow data member defined extension class app developer would able put state must manipulated main thread directly mainactor data isolation way actor eliminate shared mutable state explicit synchronization deep copying data passed actor message send preventing direct access actor state without going message sends composes nicely quickly introduce inefficiency practice data copying happens swift well positioned deal number reason strong focus value semantics mean copying value core operation understood known swift programmer everywhere second use copyonwrite implementation approach fit perfectly model note example datamodel actor sends copy thelist array back ui thread update swift super efficient operation arc stuff nt actually copy touch element array third piece still development come result work adding ownership semantics swift available advanced programmer ability move complex value actor typically also superefficient operation leaf u three open issue know whether something proper value semantics reference type class closure global state three option explored detail many different possible answer explore simple model order provide existence proof design claim best model find type provide proper value semantics something many many swift programmer wanted able know answer example defining generic algorithm correct face proper value semantics numerous proposal determine attempt summarize instead outline simple proposal provide existence proof answer start defining simple marker protocol name intentionally silly reduce early bikeshedding single requirement protocol valuesemantical func valuesemanticcopy self conform applicable standard library type valuesemantical example array conforms element conform note array reference type nt always provide semantics need teach compiler synthesize conformance structs enums whose member valuesemantical like codable compiler check conformance valuesemantical protocol reject argument return value conform reiterate name valuesemantical really nt right name thing like unsafepointer example nt conform enumerating possible option evaluating naming tradeoff project another day though important realize design guarantee memory safety someone could implement protocol wrong way thus lying satisfying requirement shared mutable state could occur author opinion right tradeoff solving would require introducing onerous type system mechanic eg something like capability system pony language swift already provides model memory safe apis eg array implemented term memory unsafety eg unsafepointer approach described directly analogous alternate design another approach eliminate requirement protocol use protocol marker applied type already right behavior necessary customize copy operation eg reference type solution would box value type struct provides right value semantics would make awkward conform design eliminates another kind copy operation encourages type provide value semantics reference type class solution simple class need conform valuesemantical implement requirement properly else passed parameter result actor method author opinion giving class proper value semantics big deal practice number reason default nonconformance right default class conform one human thought retroactive conformance allows app developer handle case addressed framework engineer cocoa number class eg entire ui framework usable main thread definition wo nt get passed around number class cocoa already semantically immutable making trivial cheap conform beyond start working actor system inherent part application design nt allocate pas around big object graph allocate actor intend manipulate something found true scalaakka example reference type closure function safe pas arbitrary value function type across actor message could close arbitrary actorlocal data data closed byreference recipient actor would arbitrary access data sending actor state said least one important exception carve safe pas closure literal known close data copy using valuesemantical copy semantics described happens extremely useful carveout permit interesting callback abstraction naturally expressed without tight coupling actor silly example otheractordosomething selfincrementcount case otheractor nt know incrementcount defined self actor reducing coupling actor global mutable state since friend straight great answer swift c already support global mutable state best discourage use automatically detect problem actor need able transitively use random code nt defined actor example func calculate thing int int actor foo actor func exampleoperation let x calculate thing practical way know whether calculate threadsafe solution scatter ton annotation everywhere including header c code think would nonstarter practice nt bad sound common operation people use eg print already internally synchronizing largely people already writing multithreaded code would nice magically solve long standing problem legacy system think better completely ignore tell developer define use global variable global let safe hope lost though perhaps could consider deprecating global var swift nudge people away also access unsafe global global mutable state actor context warned taking step like eliminate obvious bug scalable runtime thus far dodged question actor runtime implemented intentional runtime expert perspective building top gcd great work u proven using reduces risk concurrency design also think gcd reasonable baseline start provides right semantics good lowlevel performance advanced feature like quality service support useful actor anything else would easy provide access advanced feature giving every actor gimmeyourqueue method potential issue using gcd need figure kernel thread explosion goal allow actor used core unit abstraction within program mean want programmer able create many want without running performance problem scalability problem come end aggregate logically distinct stuff together reduce actor lead complexity loses advantage data isolation model proposed scale exceptionally well depends runtime make happen practice gcd already quite scalable one concern subject kernel thread explosion occur gcd task block way kernel runtime reason response gcd runtime allocates new kernel thread get stack stack fragment heap problematic case server workload want instantiate hundred thousand actor least one every incoming network connection provably solving thread explosion probably impossibleimpractical runtime given need interoperate c code legacy system nt built pure swift said perfection nt necessary need path move towards provides programmer way get job done uncooperative framework api hit practice suggest three step approach resolving make existing framework incrementally async safe time ensure new apis done right make sure existing apis ever go async safe async unsafe provide mechanism developer use address problematic apis encounter practice something akin wrap call closure pas special gcd function something else similar complexity continue improve perf debugger tool help identify problematic case occur practice approach focusing problematic apis developer hit practice work particularly well server workload one likely need large number actor single time legacy server library also much likely async friendly arbitrary c code actor shutdown also question actor shut conceptually ideal model actor implicitly released reference count drop zero last enqueued message completed probably require amount runtime integration bounded queue depth another potential concern gcd queue unbounded depth producerconsumer situation fast producer outpace consumer continuously grow queue work would interesting investigate option providing bounded queue throttle block producer sort situation another option make purely api problem encouraging use reactive stream abstraction provide back pressure alternative design actor class design simple self consistent may right model actor ton conceptual overlap class observe actor reference semantics like class actor form graph mean need able weakunowned reference subclassing actor make much sense subclassing class would work way people incorrectly think swift hate class opportunity restore former glory however actor simple class difference actor actor method method additional requirement put order provide safety programming model seek actor class deriving nonactor base class would illegal base class could escape self escape local state reference unsafe way one important pivotpoint discussion whether subclassing actor desirable modeling special kind class would nice simplifying assumption lot complexity come including initialization rule etc defining new kind type defensible simple separate type would easily explain additional rule imposed syntactically decided make class make sense modifier class definition since actorhood fundamentally alters contract class eg actor class datamodel somebaseactor alternatively since ca nt derive nonactor class anyway could make base class actor class datamodel actor extension design sketch minimal important step forward build concurrency abstraction language really filling model almost certainly require common abstraction example reactive stream common way handle communication async actor help provide solution backpressure dart stream design one example relatedly make sense extend forin loop asynchronous sequence likely introduction new asyncsequence protocol fwiw likely added c first class future type commonly requested expect importance far le language nt started without asyncawait still useful abstraction handling case want kick simple overlapping computation within function intraactor concurrency another advanced concept could considered allowing someone define multithreaded actor provides standard actor api synchronization scheduling task handled actor using traditional synchronization abstraction instead gcd queue adding would mean shared mutable state within actor isolation actor still preserved interesting consider number reason allows programming model consistent instance actor represents thing even thing implemented internal concurrency example consider abstraction network cardstack may want internal scheduling prioritizing many different active piece work according policy provide simpletouse actor api top fact actor handle multiple concurrent request implementation detail client rewritten understand making nondefault would provide proper progressive disclosure complexity still get improved safety isolation system whole even individual actor optimized way incrementally migrating code actor model would make much easier provide actor wrapper existing concurrent subsystem built shared mutable state eg database whose apis threadsafe something like would also probably right abstraction imported rpc service allow multiple concurrent synchronous request abstraction would unsafe memory safety perspective widely precedented swift many safe abstraction built top memory unsafe primitive consider array built unsafepointer important part pragmatism get stuff done nature swift programming model said definitely poweruser feature understand build get experience using basic system considering adding something like part reliability fault isolation swift many aspect design encourages programmer error aka software bug caught compile time static type system optionals encouraging covered switch case etc however error may caught runtime including thing like outofbound array access integer overflow forceunwraps nil described swift error handling rationale tradeoff must struck nt make sense force programmer write logic handle every conceivable edge case even discounting boilerplate would generate logic likely poorly tested therefore full bug must carefully weigh tradeoff complex issue order get balanced design tradeoff led swift approach force programmer think write code handle potentiallynil pointer reference think integer overflow every arithmetic operation new challenge integer overflow still must detected handled somehow programmer nt written recovery code swift handle fail fast philosophy preferable detect report programmer error quickly possible rather blunder hope error wo nt matter combined rigorous testing perhaps static analysis technology future goal make bug shallow provide good stack trace information occur encourages found fixed quickly early development cycle however app ship philosophy great bug actually found undetected problem cause app suddenly terminate sudden termination process hugely problematic jeopardizes user data case server app hundred client currently connected server time impossible general perfect resolution arbitrary programmer error prior art handle common problem gracefully case cocoa example nsexception propagates top runloop useful try save modified document side location avoid losing data nt guaranteed work every case user happy nt lost progress similarly server crash handling one client request reasonable recovery scheme finish handling established connection current process push new connection request restarted instance server process introduction actor great opportunity improve situation actor provide interesting granularity level whole process individual class programmer think invariant maintaining indeed bunch prior art making reliable actor system erlang one leader great discussion see joe armstrong phd thesis start sketching basic model talk potential design approach actor reliability model basic concept actor fails violated local invariant invariant actor still hold defined away shared mutable state give u option killing individual actor broke invariant instead taking entire process given definition basic actor model unidirectional async message sends possible runtime drop new message sent actor rest system continue without even knowing actor crashed simple approach two problem actor method return value could process awaited actor crashed awaits never complete dropping message may cause deadlock higherlevel communication invariant broken example consider actor wait message passing message actor var counter int let otheractor set init actor func notify counter counter otheractornotify one actor feeding notification one crash program wait forever get notification someone designing reliable actor need think issue work slightly harder achieve reliability opting reliability given reliable actor requires thought building simple actor reasonable look optin model provide progressive disclosure complexity first thing need way opt actor syntax general two broad option firstclass actor syntax class declaration modifier ie one reliable actor notifier reliable actor class notifier one opts actor caring reliability new requirement imposed actor method return value required declared throw well force client actor prepared failure whenif actor crash implicitly dropping message still problem familiar approach taken system imagine two potential solution provide standard library api register failure handler actor allowing higher level reasoning process respond failure actor init could use api register failure handler system force actor method throw semantics throw actor crashed force client reliable actor handle potential crash granularity message sent actor two first approach appealing allows factoring common failure logic one place rather every caller write hard test logic handler failure fine grained way example document actor could register failure handler attempt save data side location ever crash said approach feasible explored detail alternate design alternate approach make actor reliable actor making additional constraint simple part actor model reduces number choice swift programmer getstohasto make asyncawait model end making async imply throwing probably right direction await value returning method would implicitly try marker well reliability runtime model besides high level semantic model programmer face also question runtime model actor crash state memory left well process clean failure attempt release memory resource like file descriptor managed actor multiple possible design advocate design cleanup performed actor crash runtime propagates error actor run recovery handler described previous section attempt clean resource owned actor number reason important failed actor violated consistency whatever invalid operation attempted perform point may started transaction finished may sort inconsistent undefined state given high likelihood internal inconsistency probable highlevel invariant various class nt intact mean nt safe run deinitializers class beyond semantic problem face also practical complexity efficiency issue stake take code metadata able unwind actor stack release active resource code metadata take space application also take time compile time generate choice provide model attempted recover sort failure would mean burning significant code size compile time something nt supposed happen final admittedly weak reason approach clean cleanup run risk programmer start treating failfast condition soft error nt need handled superurgency really want bug found fixed order achieve high reliability software system seek part improving system architecture described motivation section single application process run context larger system one often involves multiple process eg app xpc daemon communicating ipc client server communicating network server communicating cloud using json protobufs grpc etc point similarity across mostly consist independent task communicate sending structured data using asynchronous message sends practically share mutable state starting sound familiar said difference well attempting papering done older objectivec distributed object system lead serious problem client server often written different entity mean apis must able evolve independently swift already great network introduce new failure mode original api almost certainly anticipate covered reliable actor described data message must knowntobe codable latency much higher remote system impact api design toofinegrained apis perform poorly order align goal swift sweep issue rug want make development process fast getting something running nt goal really need work even failure case design sketch interprocess distributed compute actor model wellknown solution space deployed successfully lessmainstream language like erlang bringing idea swift requires make sure fit cleanly existing design taking advantage characteristic swift ensuring stay true principle guide one principle concept progressive disclosure complexity swift developer nt worry ipc distributed compute nt care mean actor optin new declaration modifier aligning ultimate design actor model ie one distributed actor mydistributedcache distributed actor class mydistributedcache done actor subject two additional requirement actor must fulfill requirement reliable actor since distributed actor refinement reliable actor mean value returning actor method must throw example argument result actor method must conform codable addition author actor consider whether actor method make sense distributed setting given increased latency may faced using coarse grain apis could significant performance win done developer write actor like normal change language tool change apis massive new conceptual shift true regardless whether talking cloud service endpoint json optimized api using protobufs andor grpc crack appear model one pretty obvious reason code mutates global state wo nt visible across entire application architecture file created file system work ipc context distributed one etc app developer put actor package share app service major change code allocation site mydistributedcache need use api create actor another process instead calling initializer directly want start using standard cloud api able import package vends api actor interface allowing completely eliminate code sling around json blob new apis required majority hard part getting work framework side example would interesting start building thing like new apis need built start actor interesting place ipc context cloud provider etc apis consistent underlying runtime need built handle serialization handshaking distributed reference counting actor etc optimize ipc communication shared memory mmaps introduce new protocol refines valuesemantical heavy weight type opt using make sense dsl describes cloud apis built existing one adopted autogenerate boilerplate necessary vend actor api cloud service case bunch work take multiple year prototype build iterate perfect beautiful day get though part crazy brilliant future looking even farther road even opportunity eliminate accidental complexity removing arbitrary difference language tool apis find looking place asynchronous communication pattern message sending eventdriven model place shared mutable state nt work well example gpu compute dsp accelerator share characteristic cpu talk gpu asynchronous command eg sent dma request interrupt could make sense use subset swift code new apis gpu specific operation like texture fetch gpu compute task another place look eventdriven application like interrupt handler embedded system asynchronous signal unix swift script want sign notification sigwinch example easy registering actor implementing right method going model like begs reevaluation longheld debate software community divide microkernels monolithic kernel microkernels generally considered academically better eg due memory isolation different piece independent development driver kernel core etc monolithic kernel tend pragmatic eg efficient proposed model allows really interesting hybrid approach allows subsystem moved process main kernel efficiency needed pushed process untrusted reliability paramount without rewriting ton code achieve swift focus stable apis api resilience also encourages enables split core kernel driver development case lot opportunity make software world better also long path carefully design build piece deliberate intentional way let take one step time ensuring good make learning concurrency design designing concurrency system swift look design language learn ensure best possible system thousand different programming language small community make hard draw practical lesson community look different system focusing concurrency design work ignoring syntactic unrelated aspect design pony perhaps relevant active research language pony programming language actorbased us along technique provide typesafe memorysafe deadlockfree dataracefree programming model biggest semantic difference pony design swift design pony invests lot design complexity providing reference capability impose high learning curve contrast model proposed build swift mature system value semantics transferring object graph actor guaranteed memory safe way becomes important future investigate expanding swift ownership model cover usecases akka actor scala akka framework written scala programming language whose mission build powerful reactive concurrent distributed application easily key well developed akka actor system principle abstraction developer use realize goal turn heavily influenced erlang one great thing akka mature widely used lot different organization people mean learn design design pattern community explored experience report describing well work practice akka design share lot similarity design proposed implementation actor model built future asynchronous message sends actor unit concurrency wellknown pattern actor communicate akka support easy distributed computation call location transparency one difference akka model described akka library feature language feature mean ca nt provide additional type system safety feature model describe example possible accidentally share mutable state lead bug erosion model message loop also manually written loop pattern matching instead automatically dispatched actor method lead somewhat boilerplate akka actor message untyped marshalled lead surprising bug difficulty reasoning api actor though akka typed research project exploring way fix beyond though two model comparable accident keeping difference mind learn lot well model work practice reading numerous blog post document available online including example likely member swift community encountered model would great share experience positive negative go go programming language support firstclass approach writing concurrent program based goroutines bidirectional channel model popular go community directly reflects many core value go language including simplicity preference programming low level abstraction evidence case speculate model influenced domain go thrives go model channel communicating independent goroutines almost directly reflects server communicate network connection including core operation like select proposed swift design higher abstraction go model directly reflects one common pattern seen go goroutine whose body infinite loop channel decoding message channel acting perhaps simple example go code adapted blog post func printer c chan string msg c fmtprintln msg basically analogous proposed swift code actor printer actor func print message string print message swift design declarative go code nt show many advantage disadvantage something small however realistic example advantage higherlevel declarative approach show benefit example common goroutines listen multiple channel one message respond example borrowed blog post fairly typical worker represents worker executes job type worker struct workerpool chan chan job jobchannel chan job quit chan bool func newworker workerpool chan chan job worker return worker jobchannel make chan job quit make chan bool func w worker start go func select case job wjobchannel case wquit stop signal worker stop listening work request func w worker stop go func wquit true sort thing much naturally expressed proposal model actor worker actor func job job actor func stop said advantage tradeoff go model well go build csp allows adhoc structure communication example goroutines listen multiple channel occasionally easier set advanced communication pattern synchronous message channel completely sent something listening waiting lead performance advantage disadvantage go nt attempt provide sort memory safety data isolation goroutines usual assortment mutexes apis use subject standard bug like deadlock data race race even break memory safety think important thing swift community learn go concurrency model huge benefit come highly scalable runtime model common hundred thousand even million goroutines running around server ability stop worrying running thread huge one key decision contributed rise go cloud lesson important best default solution reach world concurrency nt overly restrict pattern developer allowed express key reason asyncawait design independent future abstraction channel library swift efficient one go shared mutable state channel best solution specific problem embrace fact hide said expect case rare rust rust approach concurrency build strength ownership system allow librarybased concurrency pattern built top rust support message passing channel also support lock typical abstraction shared mutable state rust approach well suited system programmer primary target audience rust positive side rust design provides lot flexibility wide range different concurrency primitive choose familiar abstraction c programmer downside ownership model higher learning curve design described abstraction typically low level great system programmer helpful higher level nt provide much guidance programmer abstraction choose structure application etc rust also nt provide obvious model scale distributed application said improving synchronization swift system programmer goal basic swift ownership model come together happens make sense take another look rust abstraction see would make sense bring swift
121,Lobsters,swift,Swift programming,Catena: an SQL database on top of a blockchain,https://github.com/pixelspark/catena,catena sql database top blockchain,catena sql blockchain building macos linux docker docker hub building web client running natively running docker using catena web client sql interface permission faq catena dropin replacement regular sql database sql feature supported catena kind blockchain implemented catena catena node talk node consistency model catena change catena blockchain authenticated name come run private catena chain mit license contributing,catena sql blockchain catena distributed database based blockchain accessible using sql catena timestamps database transaction sql decentralized way node trust enforcing modification permission grant agreed upon earlier catena blockchain contains sql transaction executed order lead agreedupon state database transaction automatically replicated validated replayed participating client catena database connected client application using postgresql wire protocol pq sql statement modify data structure included blockchain similar replication log used eg mysql binlog building macos catena build macos need recent version xcode system use following command clone catena repository build debug configuration git clone http githubcompixelsparkcatenagit catena cd catena swift build also possible generate xcode project build catena swift package generatexcodeproj linux building linux fully supported build first ensure swift installed path ensure clang required library present apt install clang buildessential libicudev openssl libssldev git clone http githubcompixelsparkcatenagit catena cd catena swift build tested ubuntu well debian stretch swift note due fact crossplatform websocket client implementation swift current implementation us starscream outgoing peer connection supported linux client incoming peer connection possible used client talk back client functional regardless docker docker image available docker hub build docker image source useful nt ca nt install swift locally instance git clone http githubcompixelsparkcatena catena cd catena docker build pixelsparkcatena building web client catena includes web client resource resource folder built version web client included build scratch first install required build tool use gulp compile bundle file cd resource npm install gulp use gulp watch gulp recompile file change running natively following command start catena initializes new chain replace debug release building release version builddebugcatena p seed string switch tell catena initialize chain deletes persisted data stored default catenasqlite current directory switch provides catena string tell genesis block accept enable block mining add command line switch start another peer locally use following builddebugcatena p seed string j w nodeid note node url command copied output first node one node required order bootstrap node perform peer exchange running docker docker pull pixelsparkcatena docker run p p pixelsparkcatena args note port number catena listens inside container must equal port number used outside container catena advertises peer using catena web client catena provides web interface port default used introspecting blockchain performing query also provides websocket service port used communication peer provide nowebclient commandline option disable web client associated api note currently exposed api allow mutating action sql interface private sql interface available port default set different http port using p command line switch sql interface assume connect sql interface using postgresql command line client psql h localhost p u random username public key generated catena password private key catena print public private key root user initializing new chain option also print psql command line use connect root permission default user execute create database statement creates database invoker becomes owner invoker subsequently use grant revoke statement grant user right database granular permission granted using template grant grant user permission execute certain parametrized query selfchosen parameter value template query hashed stored grant table query whose hash parameter value removed match template granted user executed template grant easily created web client template grant restrict set allowable parameter value using ifstatement amount update balance set balance balance amount iban iban else fail end faq catena dropin replacement regular sql database goal catena make easy possible developer administrator used working sql adopt blockchain technology catena support postgresql pq wire protocol submit query allows catena used many different language php go cc however fundamental difference catena regular database system catena currently support many sql feature catena consistency model different database particular change make immediately visible confirmed transaction may roll back time depending transaction included winning blockchain catena future check user privilege changing adding data never prevent user seeing data user connected catena blockchain see transaction course possible set private chain sql feature supported catena catena support limited subset sql catena implement sql parser sanitize canonicalize sql query currently following type statement supported create table foo bar text baz int insert table x z value text select distinct x value table left join xy delete foo update foo set barbaz drop table foo kind blockchain implemented catena catena us blockchain based hash proof work configurable difficulty block contain transaction contain sql statement catena written scratch therefore completely different bitcoin ethereum etc catena node talk node catena node expose httpwebsocket interface node connects websocket interface node know initially specified command line fetch block information exchange peer order two node able communicate least one must able accept incoming connection ie behind nat firewall consistency model catena sql statement grouped transaction become part block block accepted blockchain succeeded sufficient number newer block block become immutable part blockchain ledger new block still run risk replaced competing block mined may may include recent transaction recent transaction run risk rolled back change catena blockchain authenticated transaction required signed private key transaction modifies table row need signed private key privilege modify specific table row privilege grant stored special grant table turn modified grant modify table prevent replay signed transaction catena store transaction counter public key atomically incremented every transaction executed transaction execute lower transaction number latest number recorded blockchain successfully submit transaction invoker must increment counter one transaction use different key time name come catena italian chain run private catena chain chain identified genesis first block hash create private chain use option specify different starting seed mit license copyright c pixelspark tommy van der vorst permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software contributing welcome contribution kind typo fix complete refactors new feature sure contact u want work something big prevent double effort help following way open issue suggestion improvement submit pull request bug fix new feature improved documentation note accept new code repository need confirm writing contribution made available u term mit license
122,Lobsters,swift,Swift programming,(2014) The length of a string in Swift,https://stackoverflow.com/questions/24037711/get-the-length-of-a-string,length string swift,tl dr countelements endindex string collectiontype collectiontype countelements countelements string collectiontype collectiontype string startindex endindex endindex endindex circledstar string circledstar countelements endindex,tl dr want length string type term number humanreadable character use countelements want know length term number extended grapheme cluster use endindex read detail string type implemented ordered collection ie sequence unicode character conforms collectiontype protocol conforms collectiontype protocol input type expected countelements therefore countelements called passing string type return count character however conforming collectiontype turn conforms collectiontype string also implement startindex endindex computed property actually represent position index first character cluster position index last character cluster respectively string abc position index c therefore endindex also length string endindex used get length string type right well always unicode character actually extended grapheme cluster sequence one unicode scalar combined create single humanreadable character let circledstar character u u circledstar single character made white star combining enclosing circle let create string circledstar compare result countelements endindex let circledstarstring circledstar countelements circledstarstring circledstarstringendindex
125,Lobsters,swift,Swift programming,WWDC June 2017,https://www.apple.com/apple-events/june-2017/,wwdc june,apple special event,apple special event june announcing upgraded operating system iphone ipad mac apple watch apple tv
126,Lobsters,swift,Swift programming,App Development with Swift,https://itunes.apple.com/us/book/app-development-with-swift/id1219117996?mt=11,app development swift,,let get one thing straight resource invaluable amazing wonderfully repeat wonderfully put together senior college experience programming textbook clearer fact teaching u build apps make even difficult build textbook creating apps difficult author need lot handholding almost teach u like training wheel great job whole new language take lot teach especially many people clearly seem like need handholding bad thing obvious observation people continue complain obviously nitpicking overreacting merely distracted obvious use resource bring io app building world common personwho know code stop complaining god take book run wealth knowledge read learn code nt read find aesthetically pleasing eye kind font use etc seriously giving information free building mobile software take happy complaining nt work iphone coding meant learned iphone get laptopcomputer setup proper environment practice way learn anything taking minute day read book iphone need practice practice computer using xcode mean come went school know homework really matter reading textbook another thing care error take away quality app mean tell build entire interactive ibook io coding let sit reviewed whole year nitpick tiny error book could sent mass earlier people benefit everyone make mistake even software engineer stop complaining give book deserves time patience applause come onwho else create something large make interactive quiz lab downloaded coding project etc book amazing download please like others complaining enjoy wonderful book learned soooo much couple day way apps work complex book break beautifully even give insight favorite apps period comment necessary wo nt even edit review
127,Lobsters,swift,Swift programming,The Unofficial WWDC app for macOS,https://wwdc.io,unofficial wwdc app macos,watch wwdc video year previous year live download chromecast pictureinpicture search filter new version favourite wwdc apple developer related project io app press,watch wwdc video year previous year watch session live download video later watch chromecast pictureinpicture mode search filter event track platform new version transcript provided apple universal link handoff share clip new community tab curated content cocoahub system requirement macos catalina later favourite wwdc apple developer related project apple official developer app io see schedule map video news excellent source article newsletter podcasts development apple platform collection wwdc scholarship winner io app also available searchable fulltext transcript wwdc session follow swift evolution proposal io device wwdc macos native app electron macos trademark apple inc registered u country app made affiliated endorsed apple press
128,Lobsters,swift,Swift programming,Apple Launches App Development Curriculum for U.S. High School and College Students,https://www.macrumors.com/2017/05/24/apple-launches-swift-app-curriculum-students/,apple launch app development curriculum u high school college student,announced according one study advanced manufacturing fund,apple today announced new app development curriculum designed student want pursue career fastgrowing app economy curriculum come free download ibooks store called app development swift fullyear course aim teach student element app design using swift apple increasingly popular programming language apple said student undertake course learn code design fully functioning apps gaining critical job skill software development information technology process beginning fall six community college system serving nearly student across united state among first offer curriculum according apple participating college include alabama community college system columbus state community college harrisburg area community college houston community college mesa community college san mateo community college district seen firsthand impact coding individual u economy whole app economy software development among fastestgrowing job sector america thrilled providing educator student tool learn coding said tim cook apple ceo community college play critical role helping student achieve dream hope course open door people age background pursue love since launch swift consistently promoted apple ideal kid keen code gentle learning curve demonstrated swift playground app teach child use language new curriculum includes comprehensive student guide playground exercise mini project quiz well teacher guide grading rubric solution code keynote presentation swift become one soughtafter skill freelance developer experiencing percent yearonyear growth according one study earlier month apple announced creation billion advanced manufacturing fund focused creating job u throughout supply chain apple said new swift coding curriculum another example commitment economic development help create even career opportunity student across country
129,Lobsters,swift,Swift programming,Resolving Massive View Controller with Coordinators & Model-View-ViewModel,http://anuragajwani.com/2017/05/resolving-massive-view-controller-with-coordinators-model-view-viewmodel/,resolving massive view controller coordinator modelviewviewmodel,,
131,Lobsters,swift,Swift programming,Proposed Key Path Syntax for Swift,https://daringfireball.net/linked/2017/04/18/swift-backslash-key-path,proposed key path syntax swift,sigil backtick relevant section markdown syntax documentation,david smith michael lehew joe groff explaining chose backslash syntax new key path proposal swift review many different sigils considered sigil match function type reference suffers ambiguity wanting actually call type property type let foo keypath baz bar consistent function type reference really great even function type reference backtick borrowing lisp backtick used initial discussion proposal easy write whiteboard chosen hard type markdown come dangerously close conflicting parser intrinsics kind blow mind ease typing markdown would factor syntax decision swift however disagree hard type literal backtick markdown relevant section markdown syntax documentation short include literal backtick inside code span use two backticks opening closing delimiters input personfriends name produce html output code personfriends name code sake clarity include space beginning end delimited code span omitted output like personfriends name far tell swift folk think backtick look far better example backslash backslash language mean escape following character nothing else tuesday april
132,Lobsters,swift,Swift programming,A Type is Worth a Thousand Tests,http://justtesting.org/post/153668237436/here-is-the-video-of-my-talk-a-type-is-worth-a,type worth thousand test,slide github,video talk type worth thousand test presented sydney cocoaheads november also get slide previously presented talk yow connected melbourne earlier version curry romein talk argue type design tool applied correctly reduces need test illustrate example design simple iphone app swift whose source code available github
133,Lobsters,swift,Swift programming,"AudioKit: Swift audio synthesis, processing, & analysis platform for iOS, macOS and tvOS",https://github.com/audiokit/AudioKit,audiokit swift audio synthesis processing analysis platform io macos tvos,audiokit sponsor audiokit sponsoring aure github sponsor key concept installation framework readme file cocoapods carthage example code build playground release page audiokit playground video ray wenderlich audiokit tutorial audiokit tutorial ray wenderlich site getting help stackoverflow audiokit hashtag google group github issue contributing code rough outline working currently develop pull request u aurelius prochazka matthew fecher stephane peter core team slack contributor google group contributor contribute,audiokit audiokit audio synthesis processing analysis platform io macos tvos document serf onepage introduction audiokit much information available audiokit website sponsor audiokit team company using audiokit please consider sponsoring aure github sponsor key concept node operation tap node interconnectable signal processing component node output usually parameter node process another signal node also input operation similar node except signal processing component exist inside single node operation used parameter operation create complex result tap use node data source redirect audio signal away source node output node allows tap moved node node freely added audio signal path started installation installation detail found framework readme file audiokit also available via cocoapods place following podfile pod audiokit need ui component select core pod like pod audiokitcore also use carthage higher install precompiled static framework project example code three hello world project one apple platform io macos tvos play oscillator display waveform example rely audiokit framework either download precompiled framework build hello world need understand line code code description var oscillator akoscillator create sound generator audiokitoutput oscillator tell audiokit output audiokitstart start audiokit oscillatorstart start oscillator oscillatorfrequency random set oscillator parameter oscillatorstop stop oscillator playground playground contain bitesize example audiokit serve tutorial many audiokit core concept capability playground cover basic tutorial synthesis physical modeling file playback midi effect filter analysis provide playground macos project ready run xcode download audiokitplaygroundszip file release page open build project go playground page learn audiokit api fun way video playground action nt need run xcode check go audiokit playground video ray wenderlich audiokit tutorial check audiokit tutorial ray wenderlich site taken fun gentle journey framework via history sound synthesis computer audio getting help three method getting support roughly listed order try first post problem stackoverflow audiokit hashtag nt problem post stackoverflow may post google group moderated list prepare rejected moderator belief question better suited stackoverflow pretty sure problem implementation audiokit open github issue contributing code audiokit always improved core team user rough outline working currently want modify audiokit check develop branch opposed master make change send u pull request u audiokit created aurelius prochazka life line need help matthew fecher manages audiokit web site stephane peter aure coadmin manages audiokit release many important people family group description core team biggest contributor audiokit slack prolevel developer chat group contact core team member invitation contributor list people submitted code audiokit google group app announcement mailing list user contributor project exists thanks people contribute
134,Lobsters,swift,Swift programming,Swift 3.1 Released!,https://swift.org/blog/swift-3-1-released/,swift released,swift released language update evolution process new protocol member add stdlib availability swift version availability swift version improved numeric conversion initializers failable numeric conversion initializers deprecation replacement unsafemutablepointerinitialize move unsafemutablepointerinitialize unsafemutablebufferpointer improvement linux implementation see detail package manager update editable package package manager editable package version pinning package manager version pinning package manager tool version swift language compatibility version package manager swift language compatibility version package manager improvement repository migrating swift xcode migration guide documentation swift programming language platform linux ubuntu ubuntu ubuntu available download apple xcode xcode source release management process,swift released march swift officially released swift minor release contains improvement refinement standard library thanks effort ibm member community also includes many update linux implementation swift also number update swift package manager language update swift minor language release source compatible swift contains following language change update went swift evolution process new sequence protocol member sequence protocol two new member protocol sequence return subsequence skipping element predicate return true returning remainder func drop predicate selfiteratorelement throw bool rethrows selfsubsequence return subsequence containing initial element predicate return false skipping remainder func prefix predicate selfiteratorelement throw bool rethrows selfsubsequence see add prefix drop stdlib availability swift version swift extends availability attribute use version swift indicate lifecycle declaration example api removed swift would written available swift obsoleted class foo see availability swift version improved numeric conversion initializers swift add new family conversion initializers numeric type either complete successfully without loss information return nil see failable numeric conversion initializers deprecation replacement unsafemutablepointerinitialize version unsafemutablepointerinitialize take collection deprecated favor new method unsafemutablebufferpointer take sequence goal improving memory safety enabling faster initialization memory sequence see move unsafemutablepointerinitialize unsafemutablebufferpointer improvement linux implementation implementation nsdecimal implementation nslengthformatter implementation progress many improvement urlsession functionality including api coverage optimized usage libdispatch improved api coverage nsarray nsattributedstring many others significant performance improvement data see detail improved json serialization performance memory leak fixed nsuuid nsurlcomponents others improved test coverage especially urlsession package manager update editable package package dependency stored toolmanaged build directory default new swift package edit command allows user begin editing package moving user control package directory exempting dependency update allowing user commit push change package see package manager editable package version pinning version dependency used recorded packagepins file checked share version user package swift package pin swift package unpin command provide control pinned version package dependency fetched default resolving dependency swift package update reresolve latest allowable dependency version update pinfile see package manager version pinning package specify minimum version swift tool require requirement edited swift package toolsversion command recorded top packageswift manifest package version require newer swift tool use ignored dependency resolution package adopt new swift feature without breaking client using older swift tool minimum tool version required determines swift language version used interpret packageswift manifest version packagedescription api available see package manager tool version swift language compatibility version package specify whether source written swift swift language version specified default inferred package minimum swift tool version see package manager swift language compatibility version package manager improvement package dependency resolution correct case could resolved incorrect dependency version previously dependency cycle detected build incremental build rebuild fewer source possible swift test support running test parallel parallel flag swift build swift test swift package command resolve dependency support fetching dependency parallel enableprefetching flag documentation swift package manager found repository migrating swift swift source compatible swift help moving swift earlier release swift xcode contains code migrator automatically handle many needed source change also migration guide available guide many change especially one le mechanical require direct scrutiny documentation updated version swift programming language swift available swiftorg also available free apple ibooks store platform linux ubuntu ubuntu ubuntu official binary ubuntu ubuntu ubuntu available download apple xcode development apple platform swift ship part xcode source development swift tracked following repository github tag designates specific revision repository make final version swift remain open release management process accumulate change potential future bugfix dot release
135,Lobsters,swift,Swift programming,Pushing Swift to the Server,https://www.skilled.io/u/swiftsummit/pushing-swift-to-the-server,pushing swift server,transcript chris audience member chris audience,transcriptchris okay get set yes chris bailey part swift ibm engineering team working swift since announcement open source december last year looking help swift come running linux platform well build server side framework swift largely going talk today going talk pushing swift onto server fact everybody able build deploy server side application swift already know swift client similar deploy serverso swift server talk moving swift server often talk real basic around thing like performance taken simple set benchmark running cpu linux box independent group nt run contribute see result simple computational benchmark us cpu four cpu machine see swift completes task four second actually quite interesting java completes second swift box actually similar performance characteristic java actually quite bit faster nodejs quite lot faster something like ruby see swift actually quite really fast box language programming inwe also look memory footprint amount physical ram used running test see swift run test megabyte worth ram see java us almost twice nodejs us see ruby us quite bit allows u make statement swift ideal cloud fast relatively small cloud charge memory deploying application rather cpu physical machinesnow whilst interesting story guess unless actually paying hosting large hosting bill right paying million year hosting might interested fact using swift server lower bill developer really care easy build application safe going bugfree going maybe interesting way actually look whether swift valuable serverthat brings mar unfortunately mar spacex manned mission mar actually going look something happened year date launch mar climate orbiter part series mission mar happened millennium took part something like million project around year mar climate orbiter left leaving cape canaveral december aim getting mar orbiter orbit around mar check climate actually work guidance mechanism getting future probe actually land surface moon entire aimnow day left cape canaveral unfortunately happened day later september lost radio contact mar climate orbiter reason went little bit close mar resulting unfortunately complete mission loss reason happened mar climate orbiter planned trajectory intercept mar trajectory actually designed hit mar day half planet undertakes trajectory correction maneuver fourth trajectory correction flight path aim change path set kilometer surface mar mission plannow actually happened came completely different trajectory still went trajectory correction supposed followed came orbit kilometer mar led far closer supposed leading mission failure happens get close planet happen well fact lot work done two location one lockheed martin ground software based bethesda second team nasa jet propulsion lab based pasadena california two team working collaborative software one ground software one mar climate orbiter creating software work togetherso two team created called software interface specification think api way two part talk inside software specification one bit information passed called total impulse determined long fire rocket correction maneuver source problem lockheed martin using poundsseconds part united state customary unit nasa hand used newtonseconds part standard unit reason critical one pound second equivalent newton second meant actually burning thruster far longer supposed ended catastrophic failure costing million project whilst well defined api two bit software two bit software actually working completely different way completely different implementationsso tell u software interop actually really hard least according rocket scientist capable equivalent hitting land rocket equivalent hitting hole one golf ball something like mile away get ca nt software interop reason whole design process two team agreed api spec go silo implementation two side api specification deploy piece api specification two completely siloed piece developmentso better use collaborative development two side still agree api collaborating one project one project get deployed piece going ground software climate orbiter actually generate api sits middle got end end project api way two part talk swift term collaborating swift project term client server client going io device server going something like kitura server swift running database cloud api specification becomes something called swagger formal definition language rest apisso taking model actually work language piece code make sure using poundseconds newtonseconds getters setter data model identical side transmitting data one side using exactly code avoid entire problem space get point collaboratively build application swift well started swift everywhere side effect open sourcing swift december last year fact swift became open source became open source apache license meant lot freedom hardware vendor independent open source collaborator get involved start bringing swift platformsnow day open sourced swift actually available two set platform available mac o io platform linux intel since actually brought number place still well development rather actually released got point swift available linuxone linus main frame available raspberry pi due linux arm work tried get linux running android actually work well swift running cygwin inside windowsso got ability run swift many many different place make possible u client server interoperability software swift side start swift server well ability start client side io side swift standard library foundation grand central dispatch server component standard library foundation dispatch mean application package us standard component run placesnow order run server actually need extra component need server socket kitura added networking library need http need ssl capability added security library need http parsing well added one added kitura framework various framework client side application library client shared server standard code wanted use availablethis actually one reason kitura server framework keen using foundation keen using dispatch third party package use writing concurrency code nt want conflict concurrency model parsing http request give want give data object pas code using standard type quite deliberately make easier share application code side connectionnow one problem picture three gray box right server framework build proprietary code working apple community try extend swift across component add server apis standard part language announcement probably saw two three week ago following swiftorg blog following mailing list trying remove nonstandard component make standard part language make interop even easierokay mean swift brought support linux kitura went linux ability run swift server actually run real application swift server side well swift client side actually build one let take quick tour building first application create application first thing need create directory put use swift package manager go directory use swift package init ask executable well build scaffolding project really two bit thing go packageswift file say like dependency kitura web framework major version available one piece saying need dependencythe next piece actually add meat code server application le line code get server running first thing import kitura say need router router take incoming http request given url send code route incoming url request code case routerget get request inside sending response back hello world request come send back hello world finally say want add http server give port tell router request coming port go router print hello world tell run start run loop background something like eight line code stand run web server swiftagain interesting know interesting run go local host get splash screen go get hello world hello world nt really application provide lot tutorial build full rest apis set whole load route get put create order build full rest api trying make easy people build application hello world le line code also want make easy build rest api last couple month going try go demo assuming let switch properly okayso released friday via github open source utility called swift server generator done already got demo directory inside run tool swiftservergenerator demo directory choose use let see actually make little bit bigger yeah okay create application call demo demo directory give another name want okay creates bunch file actually run swift build point actually built full kitura application tell data want able send server rest api want using swiftservergenerator model create data model going working give builder data model give namelet say going build list list going simple set data type name task whether completed model name called todo multiple do called todos okay property name let say going title title string going say yes required must title going set default okay next property let completed completed boolean going require going set default going say default task created completed okay yep let update packageswift file built full rest api modelnow couple thing time creates config file config file give name tell port run also tell store case model create stored memory currently switch cloudant couchdb database also building set data store use time demo going use memory one sort thing might want use testing let say actually existing back end server team created want able localized testing back end without actually running full back end server could use create back end use memory data store populate data retrieve afterwards one asset configurationthe also provide something called demoyaml file swagger definition mentioned formal definition rest api look file actually defines rest api end defines model said created model called todo type string title type boolean completed notice already add number id filled go top one thing going rest apis nt actually really define hosted supposed add rest api convenience tool use going put host automatically pick host say localhost save right run server okay starting demo servernow next thing going going start utility called postman postman postman utility making rest request yaml file swagger definition allows import swagger file imported formal definition rest api lefthand side actually know post request allows make request easily got formal definition specification application mean actually run get find data got return empty array nt actually put data server yet using post want post create new entry sending json object json object need title going say create demo audience member forgot lchris l titleaudience inaudible audience informs chris forgot include l title earlier oh okay send created entry tite create demo completed false id value want update go put set id tell item want set completed value true send extra typo tell said true go get data model updated actually built fully running swift server nt actually write single line code pointnow wanted go something significant could go back built application wanted anything basic api provide module authentication thing like facebook google github got service use mqtt messaging ibm watson cognitive analytics store various database like mysql cassandra postgresql couchdb redis thing might want plug server already available also got utility deploying cloud deploy docker docker image allow use cloud foundry deploy cloud foundry ibm bluemix provide ui tool actually enable easily understand command line requiredthere also whole bunch tutorial builder addition example want know add authentication manually tutorial help top couple full complete end end demo got one called bluepic got another one called blitter example social network similar name largely swift ibm got catalog got sandbox got kitura got cloud toolsso together got ability actually really start build collaborative application swift client swift server engineer working part least part looked viewed two separate team comment code share data model mean swift build safer mission mar thank
137,Lobsters,swift,Swift programming,Retrospective: Swift at Artsy - Artsy Engineering,http://artsy.github.io/blog/2017/02/05/Retrospective-Swift-at-Artsy/,retrospective swift artsy artsy engineering,swift production apple tv app application swift artsy moved react native artsy apps positive negative react native summary march artsy apps eigen eidolon emergence lot time effort hub spot katana swift upside consistent existing code swift code interact objectivec work people excited swift evolving swift swift improves lot objectivec would using official route knownunknown territory moya cocoapods moya talk rail native downside type building system exhibit problem well slow second injection xcode second mobile platform radar tried actual implementation automated ci warn u react native react native j developer experience relay jest swiftpm copied apple sherlocked jest better abstraction better developer experience javascript primordial soup react relay debugger external state viewer runtime code injection component storyboarding every bug report typescript typescript change git simulator tool different dev mobile team graphql announcement come home cold fair long way go typescript graphql typescript relay website owning stack may fixed many extension v code major one use fork v code small big move dependency often feel like waste time issue like slack babel flow typescript scale agree nt extending typescript react native one year later additive approach want get started,swift became public june august started using artsy october swift production channelling hundred thousand dollar auction bid pretty obvious swift future native development apple platform nobrainer build apple tv app swift integrated swiftsupport key app eigen built nontrivial part application swift first started experimenting react native february august announced artsy moved react native effectively meaning new code would javascript onwards regularly asked moved touched briefly announcement like dig try cover lot decision process understanding small team io developer decade native experience switched javascript read post cover artsy apps swift positive negative u react native summary finding current pattern building apps scaling team app scope grew building anything inside eigen rarely reused existing native code progressively took longer build feature app test target build time increasing till eventually would take io engineer build feature similar timeframe single web engineer io engineer lot experience across many platform well versed best practice understand value building better tool make faster knowledge nt finding great position product development wise march gave trying keep pace web came conclusion discussion came fix course winter break explored idea could write reusable code artsy apps different apps different tradeoff eigen app take json data server convert user interface view controller nearly always described function taking data mapping ui eidolon auction kiosk app contains lot artsywide unique business logic handled local state like card reader input unique user identification mode emergence trivialish tvos app view controller mostly handled xcode storyboards eigen worried building apps apps limited scope eigen basically mobile representation artsy never going something like eigen eventually came conclusion needed rethink entire uikit stack eigen strictly speaking objectivec problem u issue came abstraction around way built apps rewriting scratch option take lot time effort happily remove technical debt issue also nt need big redesign however lot company used objectivec swift transition time rewrite scratch asked experience developer opted said great marketing tool hiring lot pain actually work day day tend talk technical debt clean slate objectivec painful swift solves major architectural problem notable exception functional programming purist end eigen came conclusion wanted work componentbased architecture architectural choice come studying larger apps handle codereuse considering view controller mix component could extended using protocol swift json defined component would ended like spotify hub hyperslo spot building component structure heavily inspired react like bending spoon katana swift upside continued native apps via native code put resource behind swift quite bit running consistent existing code wrote hundred thousand line code objectivec maybe around hundred thousand swift majority team year cocoa experience noone need essentially argue continuing value swift code interact objectivec work write swift library build ontop existing infrastructure work higher level abstraction building componentbased infrastructure via swift could allow easyreuse existing code providing language difference new app code v infra people excited swift interesting growing language one one nontechnical people ask oh io developer use swift something asked lot developer outside mobile team signed multiple time swift workshop want know swift tradeoff evolving language change fast rate new idea coming influencing language people inside community influence shape growth great claim made swift people respect swift improves lot objectivec pattern use objectivec verbose become extremely terse inside swift potentially making easier read understand would using official route apple obviously want using swift putting lot resource language smart people working project become stable useful every year nt swiftonly apis yet obviously coming knownunknown territory lot knowledge around building better tooling io apps library like moya foundational project like cocoapods coming executing dramatic tooling improvement possible perhaps overlooked smarter abstraction would worked around downside thus making worth expanding search end building something gain popularity get advantage working lot fresh perspective able gain people working project happened moya pattern basecamp discus talk rail beginning real project abstracting outwards native downside dominant two issue come difference opinion software built type type useful overly strict typing system make hard quickly change codebases strictly typed language work really well building system completely atomic apps sort apple build day day basis say atomic app mean one majority input output exist within domain application think apps filetypes control input output really easily even objectivec loosertyped language discouraged using meta programming handling json required tonne boilerplate laden inelegant code working api considering breadandbutter working api party developer come surprise popular cocoapods handling json parsing making network request problem apple generally speaking nt use icloud cloudkit whatever expect also official apple opinion neatly summed official swift blog handle json parsing exhibit problem well swift builtin language feature make easy safely extract work json data decoded foundation apis without need external library framework great code write maintain nt know anyone recommend production stricter type system swift made harder work jsondriven apps slow native development put next web development slow application development requires full compilation cycle full state restart application working trivial string change eigen take second show tell developer time laugh say good moment really stood rediscovered injection xcode ruined appetite building apps traditional way reduced iteration cycle second apple resource fact injection xcode existed year single developer frustrating io mobile platform support code reloading filed bug report radar marked duped comment talked apple engineer wwdc idea dismissed nt work tried heard developer say use playground work around problem kickstarter app probably closest seen actual implementation check hitting issue swift compiler slow yes improve one favourite swift feature inferred typing accidentally increase compile time nonobviously make feel arbitrary code take longer compile eventually automated ci warn u whether code adding slow felt hard predict react native may want read announcement switching react native anticipation however big three reason better developer experience conceptual level rest team ownership whole stack however key part post compare native development also argument stood test time year later sidenote found hard write without able comprehensively reference referencing sibling article j developer experience javascript ecosystem care someone using tool feel part separate good great community enough provide great api comprehensive documentation substantially improve way work reference j relay jest everyone inside community ability tool contribute ecosystem get better tool apple make great tool miss xcode sometimes cohesive beautifully designed nt show age perfect mac citizen though important note make tool apple first u party devs outside influence obviously exists shipping whatever want influence via radar going conference year talking directly dev tool team swift language open source swiftpm well built large developer tool apple ecosystem developer wary copied apple something prevalent common word sherlocked project worked year cocoapods announcement sherlocked deal idea apple shipping kind thing kill community momentum going build something amazing support pulled get popular apple copied made free full time team behind bother make tough u party community build useful tool kind scale normal developer ecosystem contrast drastically javascript ecosystem check explanation jest compare jest either quick specta remind apple power jest reference j jest better abstraction better developer experience mentioned apps build problem specific apidriven application mean majority work tends full data already need iterate get right styling logic mapping correct want also make easy reuse code react componentoriented architecture make easy build type application born javascript primordial soup conceptual framework come go every year react around seems lot momentum framework domain problem io apps external api store complex user device state mature userinterface api either dom uikit react core concept virtual dom mean simplify lot complicated statemanagement application becomes trivial removing need complicated statehandling idea like functional reactive programming relay got genuinely groundbreaking change interaction get handled api nt want work api without tool like relay reference j react relay tool provide developer experience better io native tooling react strict state management rule allow external tool extend react application easily onus react team make better tool project provide tool like debugger external state viewer runtime code injection component storyboarding running simultaneously building application imagine given flow state app every bug report single press save would take change inject current running application keep exact place depending type change could relayout view stay editor make change second le one lot work put test debugger application another screen move head watch change propagate pressing save thinking yeah javascript well use typescript fix pretty much every issue javascript also problem u write native code need still adding existing native codebase last project react native codebase required bidirectional j swift communication react native feel like best world elegant fast work application code whole dev team understands falling back native tooling think best project reference j typescript one thing want really stress around developer experience really easy write test react component testing javascript nightandday better native testing run test outside simulator due react virtual dom run test whenever press save test one related current change git thing miss visual snapshot simulator restart simulator run test make worth though tool different dev wanted stop highly unique inside dev team artsy around developer majority work ruby javascript daytoday basis mobile team single development team nt make api change used different toolchains much slower shipping anything nt great position wanted developer feel like contribute area company past year native mobile project close zero contribution anyone outside mobile team due difference tooling idea cultural difference u since mobile team moved react native received feature bug fix web team fit better overall expansion mobile team developer scope made much easier u reason finding better way share code web team end collector web team introduced graphql artsy wrote affected mobile team act api layer owned frontend side artsy meaning could contain lot apiderived clientspecific logic previously work done web team consumed mobile team build apis consume reference j graphql something explored deeply however expect able port lot react native android got rough prototype ported day work working reactlevel allowing react native binding handle interaction host o writing crossplatform code consider blocked android support specifically engineer team deep experience android moving react native obviate native skill going significantly better environment skill without mentioned announcement already knowledgeable io development motivated put time learn platform specific detail think making rich io application react native breeze come home cold fair indeed need someone similar depth knowledge android ecosystem io may need one two entire team rest continue mix web io engineer gain subset crossplatform skill using react native continued path using swift skill would continue siloed argument swift running server soon reuse swift code across platform could see writing serverside backend code swift writing system apps long way go also nt argument towards using native apps rewrite server implement graphql relay stack also would impact frontend code web would still using javascript respect swift android potentially logic code could shared platform realistically setup worth moving kind logic graphql instance sharing across client native platform sharing model code could generate perproject instead server since graphql stronglytyped typescript graphql typescript relay nt know end prototyped porting one view controller react native website almost sourcecompatible completely different mindset year ago owning stack pick abstraction level application uikit fork tool also forked fix issue native concept like use steipete fork uikit uipopover rotation fix version xcode run test press save well hopefully latter may fixed time choice wait maybe wo nt happen aspect part problem tool given year get new one lose old one contrast built many extension v code use helped major one v code nt wanted started using use fork reference j v code last year submitted code major javascript dependency react native relay v code jest library inbetween fixing problem see offering feature need change small big move able help problem make much easier live dependency using react native brings worth highlighting done github open write issue get response direct line people working something depend stark contrast radar system used internally apple external developer writeonly access external contributor radar opaque often feel like waste time hand github issue nt wait repo maintainer others get value publicly indexed put effort radar instead issue like whole community would worse nt doom gloom swift language swiftpm package manager apple open feedback cycle using tool like slack mailing list jira twitter one aspect working javascript particularly pleasant idea language effectively buffet want use latest feature language optin slowly added language feature retaining backwards compatibility first using babel flow finally typescript contrast may last major time happens people refer time took migrate scale week swift migration language evolve great sometimes way agree sometimes way nt able use version tool free make work business talking extending typescript specifically application react native one year later announcement talked lack nuanced postmortem react native year least try help space sticking react native foreseeable future would take drastic change apple ecosystem u reconsider decision summary year share concept web tool built apps like right requires engineer willing dive deep j need native experience polished app dependency stack still obscenely big open native engineer project make welcoming others problem occur everything fixable forking extensive communication native code get tricky test maintain ended reusing quite lot existing native code make working native code feel like chore lose j developer experience spending much time another environment erode native knowledge make lot sense additive approach existing apps making plan rewrite apps react native fine asis new apps going forward default react native apps unless good reason use react native maybe api driven app probably definitely worth week prototyping engineering team go well look graphql relay really make react native shine want get started like look graphql relay nt want start building server consider graphql service
138,Lobsters,swift,Swift programming,"Observables, State Machines, and Associated Types‚Ä¶ Oh My!",https://engineering.snagajob.com/observables-state-machines-and-associated-types-oh-my-9992cc1082d0,observables state machine associated oh,observables state machine associated oh snagajob rxswift rxjava hiring result microframework repo,observables state machine associated oh snagajob io team us rxswift build apps android team us rxjava hiring one common question come building apps using rxswift deal error observable world error end stream observable produce often error actually represent permanent error condition transient recoverable error state example network unavailable unexpected status code web serverin code base two type manage condition first result type generic value error allows u treat error condition potential event observable stream prevents u completing observable stream case recoverable error result type heavily inspired rob rix fantastic result microframework great type handling api responseson hand large part programming time spent describing state user via ui also built viewstate type viewstate type enum specifies different state view possible state result able complete request happy path loading fetching result network data providererror recoverable error occurredempty result foundthanks swift associated value result case includes actual result data want display view data could list job user detail information anything else allow enum carry data need make viewstate enum generic result typecoupled protocol call viewstatetransitionable protocol requires implementor define result type intends display uibindingobserver manages state transition state emitted source observablerxswift provides u uibindingobserver give u guarantee observer property important building uis using observables bind error debug build binding error cause fatalerror release build error logged ensures binding performed main thread dispatch main queue observable value delivered non main queue thread retain source targetto demonstrate use system created example repo simple view controller subclass set observable scanning tap observable uibarbuttonitem adding itselfrefreshitemrxtap scan previousvalue return previousvalue map int value produce one value viewstate enumeration producing error every tap random color array empty state tap map int viewstate uicolor int return error demoerrorsomething else let randomcolor selfbackgroundcolorscount return result selfbackgroundcolors int rand else return empty promote raw observable driver read driver unit simply stated driver observable type following important guarantee error outobserve main schedulerin word driver helpful providing execution context appropriate observables used drive ui elementsin order promote plain observable need provide logic happen source observable produce error example wrap error viewstate enum value called error seen asdriver onerrorrecover observableerror return driverjust error observableerror point driver viewstate uicolor need utilized bind driver viewcontrollers implementation viewstatetransitionable viewstate uibindingobserver simply hide show various view view controller managing see implementation viewstate extension add viewstatetransistionable conformance view controller also define protocol required associatedtype defines expect data type displayingextension viewcontroller viewstatetransitionable typealias result uicolor typealias uielement viewcontrollervar viewstate uibindingobserver uielement viewstate result return uibindingobserver uielement self viewcontroller state switch state case result let color selfresultviewbackgroundcolor color uiviewtransition selfresultview duration option animation selfviewbringsubview tofront selfresultview completion nil case empty uiviewtransition selfemptyview duration option animation selfviewbringsubview tofront selfemptyview completion nil case error uiviewtransition selferrorview duration option animation selferrorlabeltext error occurred selfviewbringsubview tofront selferrorview completion nil default return think really cool example rxswift combined swift static type system including associatedtypes generic protocol allows u compose unique typesafe concise code allows u describe problem semantic manner
139,Lobsters,swift,Swift programming,Chris Lattner interview [with transcript],http://atp.fm/205-chris-lattner-interview-transcript/,chris lattner interview transcript,episode chris lattner interview transcript atp interview chris lattner accidental tech podcast episode chris lattner preshow casey li john siracusa chris lattner introduction llvm marco arment white casey li chris lattner marco arment chris lattner casey li chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa marco arment chris lattner john siracusa chris lattner john siracusa chris lattner bitcode john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa marco arment chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa management casey li chris lattner creation swift john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner marco arment chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa swift initial reception marco arment chris lattner swift adoption apple marco arment chris lattner casey li chris lattner achievement apple casey li chris lattner john siracusa chris lattner john siracusa chris lattner swift tesla marco arment chris lattner opensource swift casey li chris lattner casey li chris lattner casey li chris lattner casey li chris lattner swift abi stability john siracusa chris lattner marco arment chris lattner serverside swift expanding swift relevance marco arment chris lattner marco arment chris lattner marco arment casey li chris lattner marco arment chris lattner marco arment chris lattner marco arment chris lattner marco arment chris lattner system programming swift john siracusa chris lattner john siracusa chris lattner progressive complexity novice expert marco arment chris lattner marco arment chris lattner john siracusa swift language influence casey li marco arment casey li chris lattner adopt swift marco arment casey li marco arment casey li marco arment casey li marco arment chris lattner casey li chris lattner casey li chris lattner marco arment chris lattner swift style community john siracusa chris lattner casey li chris lattner marco arment chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa ruststyle memory model john siracusa chris lattner swift web browser john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner abi stability soon john siracusa chris lattner swift left good hand marco arment chris lattner marco arment chris lattner hobby language casey li chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner casey li marco arment casey li chris lattner marco arment john siracusa chris lattner casey li chris lattner marco arment casey li dynamic feature john siracusa chris lattner casey li chris lattner john siracusa chris lattner john siracusa marco arment chris lattner john siracusa chris lattner apple read blog casey li chris lattner rxswift reactive programming casey li chris lattner casey li chris lattner garbage collection v arc john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner casey li chris lattner casey li marco arment aftershow woodworking john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner marco arment chris lattner marco arment john siracusa chris lattner aftershow neutral car casey li chris lattner john siracusa chris lattner casey li marco arment chris lattner marco arment chris lattner casey li john siracusa marco arment casey li chris lattner marco arment chris lattner casey li john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner john siracusa chris lattner marco arment john siracusa aftershow bonus chris lattner john siracusa casey li,episode chris lattner interview transcript atp interview chris lattner transcript accidental tech podcast episode interview chris lattner january preshow casey li let start follow chris lattner decide leave apple john siracusa last week talked tried list reason could think might leaving think covered major thread speculation really get lot listener feedback anybody reply mostly voting one thing talked thing topic unless kind secret doomsday thing apple chris know actually important figure left apple heart heart aside u busybody wanting know gossip type stuff second pragmatically speaking type thing people leave apple talk talk year year later one care anymore big deal even deep dark reason like would know year honestly straightforward boring explanation probably right one anyway know think chris chris lattner sound right john introduction llvm marco arment would ever buy electric car white casey li jerk mean marco chris lattner fan red car marco arment go chris lattner yellow get casey li yellow bold alright obviously need talk happening right atp interview show extraordinary circumstance weird thing happen today episode extraordinary circumstance former apple employee chris lattner nice enough join u show going three people interviewing one person say least bit peculiar something never really done could little bit rough ride going try make best say right front thank much chris coming show definitely appreciate kick would mind giving u nickel tour chris lattner chris lattner well try programmer love coding long time widely known starting llvm getting ground handing smarter people started clang c c objectivec compiler likewise got point thriving let smarter people run started swift got swift going recently got past amazing community great team people running ready jump next thing guess short version like tackle really hard problem thing people think impossible john siracusa going go back time little bit hope tell u ended coming apple remember back far started llvm apple end apple chris lattner great question started working llvm university illinois research project really hoped designed fully general production quality great thing want graduate student people use code also lot great architectural idea maybe fully baked solve world problem time got graduate question next course dream continue pushing forward build something real would go place would allow work really fortunate build relationship folk apple took chance jumped apple started building llvm job totally dream mine got apple john siracusa graduate get degree go apple chris lattner yeah john siracusa well nice marco arment otherwise would ever get job get job without degree know chris lattner yeah clearly john siracusa would explain llvm somebody know stuff compiler rattle llvm compilerbuilding toolkit whatever would explain someone listener programmer intimately familiar compiler work chris lattner first start compiler compiler thing take code programmer writes turn something machine understand lot different kind computer lot different kind processor programmer want think know want program think much higher level actual processor compiler job transform human wrote something machine understand llvm modular system building different kind compiler lot different reason people would want use compiler technology think llvm successful year built reusable component kind like framework framework used solve lot different problem one fun thing llvm eventually year used solve problem never even imagined really exciting john siracusa one example type problem remember past wwdcs idea xcode ide gui programmer use make application often gui need thing understanding code compiler big monolithic thing best compile everything background spit stuff modular toolkit take piece use part understands syntax tree whatever integrate first use llvm something straight compiler point code produce output word integrating application use chris lattner think first year production opengl stack ended shipping late software update tiger well leopard used completely invisible way basically repack data upload gpu making opengl call say whatever lowlevel gl call vertex need transformed specific data format gpu understand whole bunch different kind call used produce vertex geometry data also matrix different kind gpus need support different format different capability requirement llvm used generate small chunk code part bringup leopard timeframe probably first completely invisible use used proved lot codegeneration technology bitcode john siracusa forgive one llvmrelated thing going go compiler way nittygritty stuff vague recollection described whole videodriver thing file disk shipping o basically llvm bytecode like little bc file would get slurped converted machine code appropriate gpu right chris lattner yeah absolutely right basically way look code file llvm shipped o little snippet code runtime recombined optimized across kind library primitive opengl runtime used assemble trying john siracusa question maybe kind alluded either slip tongue revealing understanding difference llvm bytecode apple currently brand bitcode chris lattner well asking historical question john siracusa technical historical confused branding also confused tech chris lattner llvm prior llvm version number opensource version number related apple version number confusingly different notveryinteresting reason used really horrible encoding binary branded bytecode java used whole bunch problem extensible fragile llvm changing compatibility llvm timeframe probably know ten year ago long time ago redesigned whole thing us bitcode format used bitcode term two reason different bytecode two could live sidebyside directory tree encoding bitstream format instead byte stream origin term bitcode find documentation file format actually general encoding format use xmltype purpose selfdescribing file format multiple different thing encoded bitcode john siracusa definitely confusion apple presented presented requirement apple watch apps bitcode marco would know marco arment watch required io still optional chris lattner yep apple tv required john siracusa would put stuff bitcode lot speculation early meant mean uploading finished binary therefore like machine agnostic targeted cpu prosaic version mean cpuagnostic mean apple slightly freedom change instruction cpu target advantage compiling something bitcode uploading somewhere versus sending someone binary chris lattner couple different advantage one compiler keep getting better compiler learns new optimization applied existing application without app developer reupload app one small thing thing apple periodically add new instruction cpu one example historically hilariously named swift chip launched first designed inhouse arm chip iphone recall chip added integerdivide instruction chip ability integerdivide hardware actually opencode library function instruction added pretty big deal used pervasively way tackle handle use effectively introduce entire new slice app developer back slice older chip slice swift slice included integer divide pain app developer pain apple everybody convince developer take seriously app developer support new hardware benefit bitcode allows kind thing go completely away apple recompile application store say ha ha device integerdivide instruction work perfectly thinning architecture deploying resource specific device type float together bitcode magic solution though take app example run device kind portability something bitcode give notably something visible c writing c code write ifdef pointer size equal something bitcode abstract useful specific lowlevel kind enhancement panacea make everything magically portable john siracusa thing would assume architecture change especially endian difference endianness visible c world target different endianness chris lattner yep something magically solves portability problem useful specific problem apple faced past john siracusa going back slice thing terminology macho format get put different architecture executables different chris lattner yeah think technology go way back next next supported really heterogenous different architecture like parisc sparc powerpc intel back next day allows compile application multiple slice tool called lipo stick together runtime o pick slice best match cpu practice app developer support many different type architecture o right thing today world common build io app example way work simplest case two different binary stuck together o pick right one run john siracusa right could go forever want get far rathole pentup question bitcode bytecode feel satisfied move broader topic management casey li chris transition coding manager outsider point view looked like arrived apple working heavily llvm like said earlier time even looking resum√© website seems pretty clear lot managing lately perhaps coding maybe worked around clock surprise either feel transition code monkey manager ask part phase career still code monkey think far away might become manager curious hear one code monkey another transition go learn chris lattner kind interesting think hard transition still writing code still love writing code something think key part identity hand strange started managing people apple really pretty early maybe year joined started managing two three people kind best person manage nascent llvm effort time initially mostly tech lead ever driven project coworkers report guiding helping make technical decision started time team grew eventually ended picking running second level managing role managing manager step along way introduces new challenge along way told managing something best qualified want anybody else coding real joy passion think coding really joy passion along way looking back realize actually pretty good managing really like building team like working people never considered people person odd even think actually understand people work really care getting people working make successful kind transition time always hung coding even though fulltime management job code like crazy night weekend kind guy like sit around idle always busy creation swift john siracusa get swift happen inside apple outside mysterious u big important project come like name headlining thing come apple hear apple lot thing see light day get probably one biggest thing ever come apple entirely new language created inhouse get happen little thing side fizzled disappeared chris lattner well tell swift think project onto every project apple sure different talk experience swift started timing suspicious right blogger wrote something apple needed new programming language john siracusa blogger chris lattner okay arstechnica thing john siracusa blog prestigious website still chris lattner okay okay stand corrected remember read exactly causal link starting working swift finished clang c support launched clang c course write c code know horrible ugly implement c whole level challenge getting first release major accomplishment entire team major effort ton people involved typical get something finish line course fully finished still long way go lot intellectually interesting least piece done started thinking okay come next implementing people stuff example c c objectivec standard language thing happy thing happy started let see could done let see much simpler language need preprocessor need trigraphs need weird thing accumulated c c year let see try build something nicer initially really messing around nobody knew anything know eventually got little bit serious said hey playing around little bit think actually could make sense started talking management engineer working clang seemed excited got couple people working parttime convinced manager interesting enough could couple people work major commitment okay let see started kind internal demo schedule thing set milestone place tried justify investment put eventually got point far enough along posing strategic question strategic question form objectivec objectivec great language probably directly responsible iphone successful really highperformance allows get job done support highlevel framework beautiful way ton stuff love objectivec thing ugly sign semicolon stuff like make objectivec better question always make objectivec better keep evolving objectivec want face potential disruption term moving entire development community something new kicked around long time talked side came realize yes make objectivec better continued invest objectivec thing like arc example major effort marco arment got dot chris lattner dot syntax predated objectivec feature block syntax prior worked block timeframe talking okay make objectivec better featurecreep language want fullness time would much le disruptive community decided yeah move objectivec lot closer want get automatic memory management arc example ever take away problem lead objectivec unsafe fundamental problem objectivec built top c c inherently pointer uninitialized variable array overflow problem even full control compiler tool stack fix fix dangling pointer would fix lifetime issue c framework reason retrofitting compatible way system really work took away c objectivec use c array stack example entire class application performance acceptable went around around around said way make sense term cost disruption community make safe programming language safe bug safe term memory safety also providing high performance moving programming model forward really kind idea came together make swift worth investment worth disruptive community lot kind pitch idea held small small small meeting coming wwdc executive team decided okay let really commit developertools team came know really started working hard swift huge huge effort hundred people work bringing debugger ide support playground thing charged swift really started coming together make happen kind swift came one step another building small thing explaining people made sense worth also think major important aspect swift worth taking risk told people would guarantee source compatibility really interesting actually big relief people internally meant perfect launched meant could learn could adapt long clear community would allow u get ultimate greatness learn actual usage practice think really key piece swift coming actually making market john siracusa strategically speaking work improve objectivec mind ability potentially leverage work swift trying think strategy get done part personal relationship knowing right people part persuasion persuade technical argument business argument stuff like part also laying groundwork effort technology multiple us chris lattner yeah absolutely one great example arc really clear get memory safety automatic memory management know want go gcversusarc rabbit hole arc seemed like obviously right model people said okay need get automatic memory management model objectivec time objc garbage collector numerous problem get objectivec memorymanaged arc became thing became really high priority think great example something huge amount value objectivec community similar effort like module example huge thing improved build time also absolutely essential enabling swift code eventually say import uikit get everything number thing rolled year really funny time objectivec developer externally even internally apple always accused compiler language team taking objectivec random walk know fit together strategy guy working working syntactic sugar want course could never tell good reason another example objectivec literal feature think introduced recall array literal thing like interesting feature relatively small amount engineering work brought objectivec language much closer swift term array dictionary literal part language real reason small amount work moved objectivec forward allowed compiler language team focus swift swift large amount work appeasing community solving real problem buying time actually pour multiyear project making swift language happen john siracusa pull syntactic sugar programmer love take ten minute implement go chris lattner exactly right john siracusa everyone applauds see slide swift initial reception marco arment fairness really big deal anyway building apple internal reaction language development public release probably fairly unique language context released nobody probably objectivec programmer apple massive company ton internal programmer massive internal code base using language entire community io mac developer entire world watching every move apple make putting heavy scrutiny release language context probably highpressure also unique knew going face lot people upfront language probably start people using random corner internet eventually maybe slowly take way consideration went able convince people even inside apple use swift going chris lattner different answer different phase idea reaction would strong positive think blown away caught unaware way way think right thing example look swift time swift swift similar objectivec could make look way selector named example direct correlation look way swift explained people explained people like objectivec use pattern use framework continue objectingoriented programming thing also cool new thing like enums patternmatching thing great cleaned syntax already know plus cool new stuff play fast forward year two swift community really taking people understanding swift swift opensource also enabled swift really swift becoming language really true stand see method call syntax example radically changed lot thing coming together really focusing polishing language term rise external community people using really really hard u experience llvm clang clang c c compiler objectivec completely different swift opensourced launched clang apple everybody yawned opensourced early people said okay nut nobody build c compiler thing even messing around got one contributor project user month later might get another contributor another person parttime sending patch slow growth ultimately really great relatively lowpressure swift way launched completely different went nobody knowing everybody knowing overnight literally much excitement many people nervous bad reaction people superexcited lot people suddenly hitting bug challenge problem misguided know swift yet aspect really spot really started learning people using started iterating moving swift wwdc launch swift release swift changed dramatically really really hard time entire team really wanted get close could wanted short amount time think true swift swift well really high goal team really high goal want get done make lot pressure lot stress think worth serve see community around swift grow see people use see people learn lot fun swift adoption apple marco arment curious know swift first came hard get lot adoption inside apple various tooling reason among maybe whatever else going internal adoption going today seeing meaningful adoption mostly io programmer using anybody inside chris lattner swift team specific goal need achieve truly acrosstheboard adoption apple abi stability numberone thing prevents framework developer example adopting swift really important thing one reason always really high priority swift adopted application developer thing dock public swift playground app public music app io publicly known definitely big adopter broadly though big problem think speak everybody many many people objectivec development apple chomping bit want using swift really matter getting technology problem solved checking thing holding people back people dragging foot wanting use casey li outside hard figure apple internally like ugh really apple internally like said really excited sure really good hear chris lattner think also changed time swift first came course huge surprise software team many people went usual phase already know objectivec would learn new thing objectivec great objectivec great objective statement think thing shifted time swift matured definitely become lot appealing one technology problem hilarious also really important apple framework stack support mac apps mac apps interesting challenge classic objectivec runtime support thing like nonfragile instance variable thing like point time swift team need make swift runtime work mode figure solution adapt happens possible use swift appkit example achievement apple casey li fascinating taking broad view could name either proud accomplishment time apple discus publicly anyway proud first one jump mind chris lattner wow know really fortunate work many really important project think llvm swift example really hard call swift think impact people term number people actually know using want learn thing like think llvm picked used far across industry standardizing world compiler think probably profound point really hard call ton really really great opportunity lot fun many year also outside open source piece working xcode team working team developer tool really phenomenal many great people apple developer tool joy john siracusa expect miss apple going let expound going take table say pick like second choice going say miss people course chris lattner yes actually would say john siracusa right go ahead tell u great people worked apple besides expect miss apple company working chris lattner well great thing apple thing think many people really get apple really one best place world work hard also work product ship ship million people hard work end mattering lot place work hard lot place work interesting thing also lot place end shipping lot ship people actually use apple really magical combine able work hard great thing actually mattering thing phenomenal apple swift tesla marco arment moving new role tesla think swift still major part work life way basically something evening weekend know silicon valley tech startup usually work people hard going lot free time chris lattner yeah jump making definitely cushy easy job stress looking know see started yet think going challenging job one reason excited really want throw another hard technology problem really excited expect involved design swift helping core team helping swiftevolution process helping respect one thing keep mind swift actually really tiny slice job apple full schedule dealing lot stuff already kind nightsandweekends project coding contributing level hoping big change honestly see obviously care lot swift really want get goal world domination opensource swift casey li obviously swift opensource know aware chris chris lattner oh read casey li right feel going far similar john going take away obvious answer going well maybe cue conversation really surprising going opensource get specific broad like imagine guy bunch expectation going opensource would like would imagine accurate feel swift opensource project going chris lattner think summarize going well going far better ever anticipated caused problem context many people team quite bit opensource experience llvm clang example open source vibrant amazing community hundred contributor dozen company collaborating public really amazing stuff even staunch competitor amd intel amd nvidia kind company really get along business side thing engineer great working engineertoengineer solving problem staying focused making thing better swift assumed would similar found major difference launching swift launching something like clang example swift launched opensource december year ago already know million user clang started everybody yawned really care grew slowly swift opensource started amazingly fastmoving changing ton people hundred patch first day totally crazy really know superimpressed swift opensource community people involved energy hard believe great everything really create problem figure thing like going keep patch volume okay getting hundred hundred email day swiftevolution mailing list going balance apple goal pushing swift forward goal community somewhat chaotic le directed think last year learned lot see reflected term project managed thing done always superimportant opensource look open source project three easy level look first basic requirement satisfy opensource make code available produce tarballs periodically technically opensource allow contribution pull request patch whatever people engage make code better opencommunity accept patch discus thing talk thing public opendesign swift went way think totally right thing really wanted benefit smart people world still amazing also challenging casey li imagine building upon open sourcing swift surprising think lot community apple chose upload entire commit history day one initial commit gazillion file gazillion line code planned start guy would upload entire history chris lattner say planned start would upload entire history kind assumed start would opensource point casey li interesting chris lattner look apple history tool space think fairly straightforward llvm started apple almost everything apple end going public llvm space clang started apple clang contributed apple llvm project included full revision history project like lldb libc compilerrt smaller project started apple contributed open source project swift assumed would happen point real question right time happen remember day swift swift particular superchaotic super learningaswewent trying keep community trying keep pace challenge people facing trying get key piece like errorhandling model protocol extension kind stuff always planned make swift really focusing priority decided opensourcing swift example would really actually bad swift community major piece language would spend lot time communitybuilding trying explain people difference knownbroken lot swift eventually opensourced last year right swift much better place team could actually handle load community expect kind response got knew building vibrant opensource community lot work something underestimated wanted make sure swift door resource contention finish swift start opensource announced opensource end year meant could start working opensource infrastructure project bringing thing take make something opensource swift complete swift abi stability john siracusa recollection swift planning stage abi compatibility somewhere list know want call goal somewhere list item contention swift point along development process swift abi compatibility got postponed given said importance abi compatibility framework people inside apple whatever say learn lesson abi compatibility planned swift think never really hardandfast goal totally made right call delay disappointed make chris lattner think many thing disappointed got delayed totally right thing think couple thing learn one software schedule planning hard marco arment breaking news chris lattner yeah definitely still thing also anticipate original plan referring announced time swift opensourced idea community would descend swift suddenly new demand consume much time energy took away programming communitybuilding piece part another part abi stability superimportant important people think application developer really important apple realized swift timeframe thing app developer would benefit actually source stability actually want application broken get new version xcode really nobody right halfway release pivoted source stability became goal really excited swift swift come still going able build swift code even minor change need made one reason another upgrade great compatibility old code start migrator anything going great improvement people life serverside swift expanding swift relevance marco arment moving branch topic serverside swift swift linux etc know swift server possible seemingly early effort get going see major goal swift language official capacity person like us swift strong role community serverside swift something want major thing compete python rail stuff server intended specialized thing going widespread use web backend programmer chris lattner think everybody involved project want way server development think understand understand entering phase two swift world domination plan probably sound insane maybe year sound le insane way look way many people apple look want swift next big thing want popular java want popular python want maybe even popular c someday would stretch would great problem solve solve problem well opensource huge piece without opensource going available people platform going used education teaching going happen open source major piece go back farther swift world domination happen unless swift gain relevance think swift nailed relevance side thing io apple platform development side story maybe marco people switching swift quickly seem happy using marco arment actually started using today chris lattner okay good call marco arment switched today honor interview wrote first swift today entire extension overcast written swift casey li wow look go proud chris lattner see fantastic good day marco arment coming although lot objectivec probably long way away allswift chris lattner okay swift love objectivec marco arment exactly chris lattner way look first step swift world domination getting relevance language get relevance need killer app need reason people would want use swift clearly io mac appleplatform development second need opensource third need go beyond next step frontier make sense expand realtime strategy game player natural expansion place language actually need thing added good think server development really next step server development really similar app development term kind code need write similar term many framework major missing piece need run linux pertinent server development platform whole library ecosystem need built think right really exciting phase platform built framework different piece infrastructure coming together really idea behind swift server apis working group official part swiftorg getting people space talk excited going beyond though goal relevant java example going pick java dream swift scale way scripting language way lowlevel system programming like could write kernel firmware think scripting side maybe straightforward swift community core team time deal talking integrating regular expression multiline string literal feature like people love scripting language big project kind wellknown guess fit drop right existing system swift provides system programming think big next frontier think swift really distinguish java competitive language among widely used language really nothing unseat c c rust example interesting language gotten lot adoption yet think swift interesting rust higherlevel application demand see rust great language well really interested see swiftforsystemsprogramming work get going think couple year really come together think swift really next big thing excited marco arment stepping back second server role using php objectivec two language fairly old php way hated objectivec two use various historical practical reason lot make language succeed fail server web development necessarily good language healthy universal developed framework around thing like web development practical easy deploy run server swift good language alone think enough get traction server think necessary swift team core group running swift whether apple community contributor apple develop official set server web framework library tool think sufficient let community risk fragmentation maybe nothing ever taking chris lattner interesting question keep mind lot practical experience building server marco arment missing much chris lattner opinion based talking smart people approach swift project taking looking standardize colloquially correctly known server foundation technology named server foundation kind idea take encryption network transport http kind thing everybody need server technology standardize part swift project least short term look standardize specific web framework half dozen completely different approach interesting different demand think clear winner yet possible first round shake equivalent ruby rail kind dominant pattern framework emerges maybe would make sense think swift need winner high level far swift core language compiler folk think really two thing one swift package manager think package manager really key scaling ecosystem getting people work together common ecosystem also best think way build swift code linux platform mean single linux biggest server development one think big piece think piece really amazing concurrency model come think one reason make go particularly compelling server development really welldeveloped story along library go together server cloud development piece concurrency model start coming probably first piece ship swift guess make swift even compelling answer kind space think need server language feature asking system programming swift john siracusa going extreme server side scripting getting back system programming one thing seen related think stem quote original apple swift book swift designed scale hello world entire operating system world domination plan beginning right first paragraph thing chris lattner absolutely john siracusa talk people swift system language often hear people relating way ready system language yet talked deciding based ready system language never dismiss word may plan clearly reason x z still use c therefore swift way write apps io mac o quite sure think change perception language get older old age nobody put swift corner people think know swift say language thing plan world domination may thwarted people pigeonholing language around year think know chris lattner think onto something think real problem think system programming place problem yet though think reasonable crazy man going around saying swift someday system programming really well remember think good way spend time moment question becomes make people aware get people change prior misconception point time practical look great get advantage c safe point specific reason better worried space system programming think practical problem today swift opensource apple development community know swift well pretty much everybody else go random say linux developer continue taking linux perceive swift apple thing relevant apple platform even learn think interesting challenge probably best way existing community keep growing swiftonserver community grows people successful building deploying server apps written swift hope naturally people become aware effort find swift maybe try find actually really great really great let u know people fix whatever problem grow actually perfectly okay growing little bit slower progressive complexity novice expert marco arment john asked span basically low level system programming high level application programming also curious seems like swift teamapple presented swift spanning wide range seems impossible also spanning wide range skill level programmer swift playground app ipad total novice writing swift first language way people writing systemslevel thing complicated apps experienced programmer think possible language thing well think swift achieved chris lattner think possible think achieved thing far think challenge new capability get added jeopardize knowing folk involved source compatibility guarantee everything else like pretty sure problem going forward way look unlikely run anybody say swift simple language swift complicated language simple sense scheme simple example also simple term talk objectivec developer often claim objectivec simple ignoring c part marco arment would never claim record chris lattner right c complicated weird language people typically use weird part perceive c simple way project onto swift secret swift easy learn easy use teaching vehicle also powerful enough solve problem need solved complexity inherent language need progressively disclosed imagine someday swift inline assembly support example really lowlevel system people really bittwiddling assembly programmer would use feature everybody else would ignore would increase apparent complexity language people know feature like important thing make syntax clear run discover somebody else code know know say interesting know search find find stack overflow article whatever explain say oh get either care point time dive learn information assembly never something swift playground person working learn code would ever want know think one secret swift success term getting people board really approachable people level like python start print hello world exact thing swift swift need n string really print hello world introduce new concept grow time really allows people understand either syntax language conceptual programming thing learning go design swift really geared around mean project onto system programming feature comparing swift rust example think likely swift get feature memoryownership control allow really really high performance allow solving performance problem arc example unlike rust make core part type system everybody use something sufficiently smart programmer solving specific performance problem end using embeddedkernel programmer might want use application developer completely ignore really challenge deploying similar typesystem mechanic lowlevel language geekery problem way tasteful allows normal people ignore john siracusa everything said kind reminds saying heard free adopt swift would like make easy thing easy make hard thing possible swift language influence casey li chris brought simple python hello world one thing wondered swift seems degree like rorschach test language came swift sort via objectivec day job c see eye anyway hope find insulting see lot c swift heard javascript people say oh see javascript presume john could say see perl presume marco could say see php hopefully insulting marco arment well see go see php casey li alright fair enough get driving though guess asking chris obviously huge objectivec influence swift one maybe couple language feel really really inspired swift really think meltingpot language one would always hope create chris lattner think really melting pot goal swift ape language goal swift great think people core team people working swift looked many many language haskell nerd ton haskell concept built protocol really like similar haskell construct example really taking best idea get assembling together one major goal swift familiarfeeling make easier people pick fighting unnecessary barrier get way adoption familiar actually success way result swift trying go c whatever taking best idea assembling together think probably pick language good idea came including dart go whatever swift really draw many many different source really hard tease adopt swift marco arment question casey wrote ask right casey li whoa whoa whoa whoa know marco arment definitely give sh swift right think going modify little bit casey li written friend marco arment definitely right figure quite john style casey li yes marco arment somebody dipping toe swift hour ago waited long know objectivec faithfulholdoutlazy people like learning new thing quickly sale pitch adopting swift chris lattner guess two different answer one adopt swift think objectivec going go away anytime soon apple still support c c obvious benefit dropping objectivec obviously ton objectivec code think reason adopt swift swift try better answer want adopt term swift name kind connotes whole bunch different thing including performance really important aspect programmer productivity idea swift really optimizing letting pound code fast possible really designed optimized programmer spend least amount time get working program fast possible getting working program includes time take debug something iterate develop fight type system thing time spend fight type system figure optionals thing like pay back program work often actually spending time chasing danglingpointer bug case objectivec get unrecognizedselector error whatever kind bug swift try help language guiding helping design thing swift also lot thing make common thing easier switch string example match different case use enums enums language geekery world algebraic data type ton different functional language novel mean useful solve many problem box fingertip great lot thing swift probably depends experience one problem seen people moving objectivec swift initially tend write swift code like wrote objectivec really good way maybe migrate application get familiar swift really mean missing lot value swift think okay mean objectivec programmer going swift first start saying see big deal spend time start realize productive feel better reach thing otherwise think really interesting talk people done example year swift programming go back objectivec really interesting thing casey li chris lattner experience casey li felt absolutely archaic granted like think nice guy probably say something like even true reality situation felt old felt old wish could quantify better felt like back time way feel good way kind nice like optionals understand thing time time guardlet whatever case may really would like move life able little cavalier kind nice reality situation said earlier potential hazard road like way team set type system swift going back objectivec frustrating feel like going back time like going backwards chris lattner yeah think challenge swift face focus building program work maintained thing care large scale software maybe best solution want pound quick script use throw away case care maintenance fit code head care good documentation thing swift encourages case dynamic type system really liberating maybe challenge people think swift gain ecosystem library advantage great hopefully good solution kind script well marco arment minute ago mentioned objectivec programmer people like new swift tend write swift like objectivec concern one reason procrastinated adopting swift pretty good grasp objectivec write objectivec code know basically idiomatic soundly designed write code style think apple code would look like based little bit header stuff see swift assumed idiom would yet developed established want write bunch bad swift code incorrect weird swift code investing heavily early think point idiom starting get worked enough le concern chris lattner yeah think definitely fair say swift timeframes swift language changing really rapidly could see feel like uneven footing really sure language much le idiom swift really quite well baked expect going forward new thing going additive changing existing pattern think swift community general gone kind thing feeling really clear one right way solve problem maybe different good way different tradeoff clear people think people starting understand style book written people heard come hopefully good good resource another thing keep mind swift opinionated guess way say really encourage right thing example use var everything swift compiler say hey marked var could let let fix subtle way encouraging use immutable value small thing pushing way think lead better code immutability local variable matter much except communicates something person read maintain code think swift really encourage right line way hand place saying something class struct tradeoff nuanced harder thing swift compiler know problem want solve help swift style community john siracusa mentioned swift style guide creator language much influence feel like want thing like style thing really feature technical different style thing one exit bottom exit early thing even thing like spacing brace style cry loud sort idiom like little three line sequence transformation data structure mentioned language feature influence obviously language designer participating process effectively guide community stylewise one direction another eventually come stuff plain opinion style several language fairly concrete style set forth early creator know want go k r cstyle type thing much care able influence personal preference aesthetic portion style outside thing influence part language design chris lattner programmer pulse preferred style clearly right way casey li naturally chris lattner naturally guess seriously language influence thing mentioned example personal opinion style single entry single exit every function lead really difficult maintain read code one thing led guard statement existing guard really encourage use early exit handle exceptional case worry example language design encouraging multiple return function subjective thing like number space personally fan twospace indent know people staunchly four people staunchly eight people think column right answer thing actually really good argument side people argue use threespace indent certainly tab file marco arment wow chris lattner pick battle people disagree long time make argument side come practical let people write code like look come cost switch team pick somebody else package maybe indented wrong way think really actively hurt comprehensibility code merely annoying something like go gofmt rigorously enforces one true way think would nice priority early also battle willing tackle see think still also open question term tooling get built thing come fray would great better tooling around built yet great opportunity open source well john siracusa thinking doomsday scenario one swift styleguide book come make blanket recommendation like always use protocol never use class becomes wildly popular accepted bible write swift programming somewhere shaking head going got wrong guess cross bridge come think point language design community enough influence likely happen guess getting feel like want write swift style guide like unlimited time chris lattner think would good use time unlimited time maybe hard answer theoretical question also concern somebody coming style book wrong would cause really unhappy actually ton faith swift community something came weird think community overall would accept community blown away clueful many great people gotten involved swift swiftevolution side thing really amazing see people go personal trajectory swift mailing list initially saying hi idea think response terrible idea reason come back hey ever think interesting almost worked work come back hey say well actually tried back change way even think thing next day one saying way need go everybody say right really hard people involved overall design anything complicated swift able discern difference something way intentional decision way accident history design process public think becomes lot easier people understand difference one big debate actually seen func keyword func keyword luckily beyond swift sourcecompatibility threshold discussion anymore think great john siracusa one best thing swift opensource evolution process list question like asked answered question like commonly asked question dealt probably going want ask asked answer everybody going go see love exists chris lattner also hilarious started commonly proposed list point became commonly rejected list john siracusa right commonly proposed obviously getting go commonly rejected list thinking asking change func fn ruststyle memory model john siracusa know talked worth touching many people asked ask swift ruststyle memory model phrased addon feature people know need type thing swift become language memory managed way instead would specialpurpose feature particular role role think suited right memory model swift chris lattner way look swift term memory management today swift using arc gc want talk tradeoff happy rat hole fall arc think overall amazing default swift give deterministic destruction give relatively predictable performance arc optimizer able eliminate reference counting operation happen problem see arc today say swift controllable model example inner loop turn arc optimizer bunch retains release know necessary know object alive nothing really solve problem unless willing drop something like unsafe operation swift give manipulating reference object really kind dissatisfying really safe great memory model performance reason drop unsafety huge cliff also huge complexity cliff drop solve problem really great promise dream instead say hey sufficiently advanced programmer know stuff work give new option instead dropping unsafe construct actually use static type information annotation code add annotation say hey compiler okay compiler validate type annotation check make sure correct still memory safe still guaranteed okay paying term annotation code heavyweight term coding get guarantee arc operation happening get model becomes really interesting say hey inner loop found profiler really matter performance arc optimizer wrong thing well add local annotation code fast guaranteed fast client code know implementation detail think really bring u best world memory safety progressively disclosed complexity system people know think get really lowlevel performance guarantee otherwise possible feeling certain community people want work model community like rust predominantly writing kernel example maybe want reference count object maybe want say always use annotation code pervasively happens couple option investigate say hey mark class attribute prevents compiler ever reference counting would ever raise error even theoretically language dialect mode produced error anytime arc operation like language dialect find way handle maybe would warning would upgrade error something like could imagine something like think get really interesting mode systemsprogramming type people otherwise would using c c use swift mean learn one language could use toolset ide everything else work great swift mean scale use language different layer stack many application lowlevel piece highlevel piece written different language really kind gross think seen objectivec community one best annoying thing objectivec c hugely important objectivec practice run performance problem objcmsgsend always rewrite algorithm c really really really important objectivec successful day next mhz processor also today lowlevel code people writing also one problem make objectivec c intertwined actually take c part objectivec without producing different language swift web browser john siracusa waiting swift web browser escape speaking application one language high level different language lower one tough one chris lattner think frontier probably biggest payoff replacing javascript would amazing service world john siracusa mentioned dart tried chris lattner yeah tried putting hope asmjs webassembly kind effort enabling language like swift swift compiles llvm webassembly asmjs llvm back end wire swift one go town end winning become big thing maybe good enough really know crystal ball go point javascript web browser john siracusa difficult part language mechanic getting something understand front many people possible chris lattner also interesting web developer definitely expert space seems trajectory javascript basically made intermediate language something developer writing much directly used see typescript lot language compile javascript really using javascript like bitcode representation source language people thinking much anymore wonder five year natural conclusion javascript asmjs type thing maybe webassembly take expert direction go know people love javascript see john siracusa topic using language javascript write javascript say done several time tooling quite want term able write debug profile preferred language compileddowntojavascripttype language maybe like stage swift worlddomination plan chris lattner probably think always true preprocessors even c crazy thing macro preprocessor debugging thing horrible one reason careful adding macro system swift early brings lot interesting trade offs term debugging developing designing experience abi stability soon john siracusa one last thing abi compatibility according timeline heard sketched abi stability could thing async concurrency stuff land swift dependency chickenandegg thing involved word nail aspect concurrency model commit abi stability totally orthogonal chris lattner think totally orthogonal memory ownership model impact abi stability lowlevel thing like getters setter codegenerated property example end getting impacted ownership model one reason swift team actually actively designing working proposal memory ownership stuff right swift feature abi stability work done light ultimate model memory ownership support think concurrency going something impact abi stability see sufficiently smart programmer work swift figure sure great think also interesting question whether abi stability done swift huge amount work work well underway course also clear really important thing swift community one thing ted huge champion think right important thing right swift community making compiler reliable making error message better making compile time faster making scale better large project see rest swift schedule go surprised point decide focusing important nailing abi stability swift swift left good hand marco arment mentioned ted ted kremenek lead swift project right chris lattner yes project lead ted managing swift clang project number year apple ten year stanford phd graduate almost singlehandedly built first clang static analyzer yeah ted marco arment love saying swift developer announced leaving apple saw people community asking worried swift future swift good hand seems like u know ted kremenek least know name familiar contribution seem like quite bit anyway worried chris lattner think worried think swift amazing hand thing leaving behind apple really good hand one reason comfortable moving case ted ted rockstar running swift team managing four five year role ted owned ran team reported would mess around cause trouble trying get people exciting important thing thought maybe align actually important thing therefore introduce chaos world ted always stable rudder one really focused getting important thing done number really exceptional engineer team people core team like doug gregor john mccall joe groff dave abraham amazingly brilliant people team includes bunch engineer equally dedicated totally amazing people work swift team think one apple biggest asset crazy brilliant dedicated project excited get world domination one step time hobby language casey li coming back broad thing meant tongue cheek reference next job let say home kid bed wife want write code use swift use objectivec writing code know often dependent project accomplishing interesting day swift objectivec chris lattner well ton different interest really love building ray tracer example done bunch stuff guess use swift would probably use c john siracusa going call wanted give chance say c remind people mention know llvm written right write much c answer c chris lattner know much angst personal suffering cause writing c day building beautiful world people unfair john siracusa yeah toil mine chris lattner yeah pain suffering worth bigger victory john siracusa swift come year use c could stuff feel much pain chris lattner exactly right lot suffering led swift needing happen also really depends maybe crazy person use perl something know insane casey li well done well done marco arment never able read though casey li nobody could chris lattner hey throwaway code never need read right poor john marco arment fine john siracusa wait perl grammar land gently swift chris lattner perl really nailed string processing thing even perl think perl even better swift lot learn something swift really learning perl think great casey li please give ammunition terrible enjoying interview much moment chris lattner look way happens john excuse marco arment oh find one casey li nothing perfect complained dynamic feature john siracusa perennial topic swift mailing list dynamic feature swift thing dynamic objectivec le swift swift community lot angst ever swift allow essentially like said write fortran language write objectivec language people try write code swift using model objectivec require thing like sending message object know receive compiler guarantee big heterogeneous collection know everything id fine even know frame think main question dynamic feature possible swift coming swift kind philosophical divide dynamic stuff people really want never forthcoming technical reason philosophical safety reason chris lattner pretty outspoken swiftevolution list hopefully huge surprise think tension dynamic feature swift lot people want make hay argue would impossible responder pick feature swift worst case scenario frantic blog post seen thing along line someday apple rewrite framework swift impossible write responder chain bad thing happen back day mfc bad thing casey li oh god even bring chris lattner exactly quite slope discussion end think blew recently right wwdc year really interesting watch blog post people flinging around everybody different idea dynamic meant apple going counterblog somebody denounce post somebody blog bad form thought interesting odd none people actually came swiftevolution list right place asked wanted make inflamed blog post various kind opinion none tension swift current design matter prioritization major problem swift much work concurrency model actor system programming scripting lot little thing go better thing support static analysis introducing type state language pre postconditions many thing need happen brick house swift want build really make sense spend lot time building dynamic feature apple could theoretically someday something swift team much focused practical necessity solving real world problem front people dynamic feature like many thing plop place team time design roll expect able someday reflect method class example today even swift compiler generating metadata reflect data member value api wrapped around metadata xcode memoryheap viewer us example lot kind stuff put place time fully bake yet come think going really exciting open door new kind pattern people lot familiar objectivec programmer also superuseful thing people really done objectivec see lot tension though prioritization question john siracusa think people coming term prioritization used thing certain design pattern broadly speaking objectivec wanted come implement pattern swift find lacking feature feel like barrier getting back writing swift objectivec style barrier retreat back objectivec write way wanted write work objectivec try write way swift work choice change way write better fit swift go back objectivec chris lattner agree though swift support feature dynamic dispatch method lookup everything else objectivec requires use objectivec subset language expose run time john siracusa right tension like want write pure swift something special magical using objectivec runtime know mean marco arment get medal chris lattner guess make people feel good really counter think actually fair say fall back objectivec code john siracusa yeah got write one blog post trying express saw lot concern want new way right way part objc ing everything feel like compromise old way setting goal post arbitrarily try enter new world want jump foot might end bailing chris lattner look area language fully baked fully serving need think really unfortunate good thing want awesome reflection model want awesome feature sending message like used want developed designed right way time annoyed thing lot people annoyed compile time balance picking two random thing engineering effort go never black white thing never right answer based gut judgment guess listening community talking people one reason think swift team really phenomenal really care really care people various people read blog post people twitter engagement swift team community really high people care management dictate apple say engineer twitter time talking people certainly case passion developer really care thing amazing swift team important term customer service understanding people working insight guide priority decision tradeoff made time nothing really clear like apple read blog casey li building tangentially involved u going back forth swift dynamic must dynamic fair say eventually make way inside apple guy aware talked way shape form suspect nice know community get perturbed whether feeling justified least somebody inside apple heard whether respond least heard get pant twisted make chris lattner absolutely ton people apple care happening developer community elsewhere one thing apple approach term commenting thing frustrating know many people apple really care saw wish people really worried would come swiftevolution ask could discussion happening reason certainly ton people saw blog sure ton engineer apple feel way wish priority different think engineering community inside apple reflects quite closely engineering community outside apple well hope surprising apple many different engineer different feeling different opinion think really good thing supermonoculture something like would probably unhealthy rxswift reactive programming casey li taking little bit turn started writing swift almost exactly year ago project work using rxswift reactive programming curious looked particular thought seem barbaric seem clever seem like odd choice take whole rx thing chris lattner definitely seen realworld usage experience opinion based reading blog reading people talking awesome talking problem gather seems like way letting write lot le code code often work better first time see superappealing also seems like would really challenging debug maintain know pro con balance writing lot high level apps would probably try app two see liked aside really good insight either way right thing casey li mentioned second ago see problem mentioned debugging anything else jump big concern different chris lattner afraid different thing question raise ignorance fear community support line changing evolving way good bad thing know used nothing rx community seen lot really cool thing done read many positive post rx react native many thing people using reactive technique reactivecocoa also around quite think really interesting application maybe became lot easier swift came objectivec great swift support different kind programming model like awesome new right answer problem come would hope system support make really elegant beautiful garbage collection v arc john siracusa feel kind like fighting last war instead current war mentioned garbage collection v arc bunch time obviously ship sailed would love give reasonable summary tradeoff objectivec garbage collection mentioned eventually objectivec dropped garbage collection got arc course swift garbage collection talk tradeoff swift way chris lattner would like comparison arc garbage collector objectivec garbage collection theory john siracusa pick garbage collection language perhaps burdened objectivec c backwards compatibility worth mentioning well think chris lattner objectivec system based libauto libauto bunch implementation concern thing think obviously reflect onto ultimate garbage collector ever want think comparing interesting let turn around think garbage collection interesting compelling garbage collecting beyond arc john siracusa well idea memory management completely hand programmer magical fairy behind scene make good giving mentioned even arc lack amount control need language becomes system programming language obviously give garbage collection going system programming language garbage collector behind although think microsoft project singularity project trying build whole o garbage collection know going chris lattner right even ignore system programming side thing think fair say lot people care garbage collection proven application space java example perl john siracusa perl us reference counting come chris lattner right python us reference counting plus cycle collector let ask said gc mean think memory true john siracusa pitch pitch programmer think chris lattner understand pitch true john siracusa garbage collector start thing want sudden think nothing chris lattner way look said ship somewhat sailed totally convinced arc right way go upfront better whole bunch different way give deterministic behavior unpredictablestutter problem people like bash gc stutter problem really issue even though gchaters bring time able reason memory go away important aspect arc get rid finalizers use garbagecollected language use finalizers finalizers thing get run object get destroyed finalizers many problem entire body work talking work around problem finalizers example finalizer get run wrong thread get run multiple time object get resurrected finalizer running happens nondeterministically later count use resource management database handle thing like example many problem finalizers arc defines away deterministic destruction two argument people make arc favor tracing garbage collector one arc add overhead retain release operation run true think cycle arc automatically collect cycle also true rebuttal give people problem also true garbage collection different way garbage collector example people think garbage collection injects additional code application like arc many different garbage collection algorithm modern garbage collector use nursery shortlifetime object promote generational use something called write barrier every time store property object say run additional code garbage collector also need ability stop thread least able stop thread point time need able within specific time bound want garbage collector take forever artifact typical garbage collector java example introduce called safepoint loop loop extra code run garbage collector aggressive garbage collection algorithm example reading blog post recently go tricolor algorithm touting advantage really low latency ability guarantee response time finegrained level garbage collector use tricolor algorithm dramatically lower throughput almost exactly kind operation arc problem introduces though operation garbage collector introducing sometimes nearly well optimizable arc overhead arc optimizer applies furthermore arc think hope ownership model give people ability take control overhead becomes problem practice kind person take full control lifetime object know arc never happen garbage collector performance side thing think still air arc certainly introduce overhead unavoidable least without lot annotation code also think arc done yet ton energy poured research garbage collection particularly since java come hundred paper written academic circle ton work hotspot java implementation different tweak different tuning different new kind algorithm garbage collecting work really done arc yet really think still big future ahead programming side thing cycle side thing think also really interesting question much people think memory baiting little bit said great thing garbage collection think memory course know true right reference big object graph mean keep around maybe undo stack leak memory true garbage collector true arc well automatic memorymanagement approach problem question building large scale system want people never think memory want think memory time like objectivec classic manual retainandrelease want something middle think arc strike really interesting balance whether objectivec swift look manual retainandrelease imperative style memory management malloc free telling code line line referencecount operation release memory point time arc take model bubble big step make declarative model instead telling compiler place retain instead say owning relationship cool thing get rid mechanic maintaining reference counting define away ton bug also mean explicit code intention something people maintain code benefit saying weak point two parent object thing really important relationship know looking code maintaining code explicit valuable talk relationship value goal able write large scale application swift think really useful also think hugely burdensome though definitely part learning curve learning swift work balanced well know arc clear advantage term allowing swift scale system tolerate garbage collector example want write firmware swift think provide better programming model programmer think little bit memory think going forward provides really high performance model get better garbage collection almost every way think term tradeoff right one push forward third piece garbage collection really bad kind showstopper swift interoperability c code ever worked java similar garbagecollected language one major advantage garbage collector give move object need compact object efficiently allocation problem start moving object around interfacing c code random c code pointer object move get dangling pointer get line end thing like jni java native interface explicitly pin thing maintain complicated really buggy arc completely defines away saying something memory predictable lifetime reason swift provides tool dealing unsafe pointer thing like make interoperability existing c code also objectivec maybe someday c code really simple really natural really efficient think huge advantage arc provides really would impossible garbage collector opinion think reasonable people disagree obviously something come john siracusa used come anyway convinced think use arc swift get chris lattner yep go casey li chris thank much coming show obviously interview show listener discovered last hour two take time presumably busy time life spend u three knucklehead really appreciate kind hopefully last time hear show maybe even show see thank chris really appreciate chris lattner thank fun even though terrified probably made fool casey li trust normal still trying get marco arment plus job aftershow woodworking john siracusa talk woodworking stuff chris lattner making splinter fun john siracusa kind wood table made chris lattner walnut john siracusa got tough lot cutting pretty hard wood right chris lattner yeah take time fun one area learn lot time keep going deeper deeper different space never know everything lot fun dive woodworking also different sitting front computer day actually get make something hand get john siracusa much higher chance dismemberment chris lattner true true marco arment think interesting programmer incredibly analog hobby chris lattner also hilarious woodworking community going whole cnc thing turning programmed thing people always say get cnc blah blah blah like exactly escaping want program marco arment love even escape community argument standard john siracusa make cut tree throw workshop come table chris lattner funny thing people people want notice agree get different community think different actually root aftershow neutral car casey li chris obviously changing career necessarily employer would consider car person chris lattner funny question obviously need car car important consider uncar person want accelerate path car appliance solve people problem personally kind guy love oil change fiddling around want something reliable ideally drive want go think solving problem something care feed maintain way look car john siracusa drive stick chris lattner drive stick got tesla year ago yeah casey li becomes clear marco arment really kind sound like want make car boring good way really noble goal see went tesla however kind funny tesla opinion clearly exciting car company world known quite time go almost nonchalant opinion car interesting chris lattner yeah well admit never considered going work car company always considered car company need kind skill bring think autopilot really exciting really big problem fit desire solve nearly impossible problem take new thing really excited marco arment little curious note talked show whether think fully selfdriving car exist kind timeframe talking decade lifetime ever one thing make something could work clearly marked highway another thing make something work john life ice road year lane marking barely flat road surface different ambiguity realworld road think obviously kind official capacity abouttobe tesla employee think big picture see completely selfdriving car capable driving effectively road within say next decade maybe within lifetime chris lattner yeah think possible within next decade hopefully long view keep mind goal drive better human significantly better human think one thing give confidence even playing field autonomous car sensor human radar example mean capable thing human physically huge technology problem huge software problem overnight kind thing wake solve immediately confidence solved certainly within decade casey li good news going take lot better average driver massachusetts pretty low bar john siracusa know navigate intersection seven different exit different angle oneway none marked human figure going tough sensor marco arment tell one thing drive manhattan without problem would never drive boston casey li amen brother completely agree alright bring u back around chris made mention way early episode like yellow car chris lattner yeah one favorite car yellow mini cooper convertible black hood stripe totally awesome get carpool lane beautiful car marco arment defense category color yellow orange maybe teal even pink kind bright almost neon color work really well often work well look pretty good could totally see flaw see plan tesla currently offer either yellow paint option custom paint color option chris lattner well broke real secret want hire compiler guy casey li john siracusa would gotten tesla yellow could chris lattner yes absolutely john siracusa would look like giant banana chris lattner yeah really fully thought john john siracusa know car could pull talking model right chris lattner yeah john siracusa yellow seem right photoshop mockups let workshop little bit see maybe got black stripe middle chris lattner admit case detail matter marco arment way get pet feature implemented model line seems like pretty good one would ask know probably going working bluetooth ui sure could probably put word right people please improve bluetooth audio otherwise get make yellow one addition potentially saving thousand life year autopilot software getting improved bluetooth yellow option would pretty impressive john siracusa well yellow would make car visible human driver need bright color know since engine sound aftershow bonus chris lattner say effort ever done win one swift programmer sure scalable approach john siracusa yeah bad strategy swift adoption seek mean instead coming everybody podcast talking individually casey li amazing
140,Lobsters,swift,Swift programming,Go vs. Swift,https://github.com/jakerockland/go-vs-swift/blob/master/go-vs-swift.pdf,go v swift,permalink join github today sign reload reload reload,permalink dismiss join github today github home million developer working together host review code manage project build software together sign retrieve contributor time sorry something went wrong reload sorry display file sorry file invalid displayed perform action time signed another tab window reload refresh session signed another tab window reload refresh session
141,Lobsters,swift,Swift programming,"Compile c++, objc and swift program across platforms fastly",http://tboox.org/2017/01/18/usage-demo/,compile c objc swift program across platform fastly,,
142,Lobsters,swift,Swift programming,"Building a Compiler in Swift with LLVM, Part 3: Code Generation to LLVM IR",https://harlanhaskins.com/2017/01/11/building-a-compiler-with-swift-in-llvm-part-3-code-generation-to-llvm-ir.html,building compiler swift llvm part code generation llvm ir,kaleidoscope part part llvm intermediate representation llvm ir kaleidoscope sample language llvm ir work static single assignment generating ir swift llvmswift using llvmswift function compiling kaleidoscope llvm ir prototype expression definition wrapping together code listing github,gotten far tutorial built lexer parser kaleidoscope programming language read strongly recommend reading part part first time turning parser proper compiler turning parsed code llvm intermediate representation llvm ir third part series build compiler basic form kaleidoscope sample language quick link llvm ir work llvm ir highlevel assembly language suite backends generate machine code many different target architecture highlevel assembly language oxymoronic mean llvm semantically similar assembly adding higherlevel abstraction abstraction make possible generate code without consider thing like calling convention nuance pointer arithmetic register allocation stack management ir also strongly typed mean think structured type worry much manipulating raw data thinking term bit byte ir represented static single assignment form mean program access infinite number register assigned consider treeshaped kaleidoscope ast indirect enum expr case number double case variable string case binary expr binaryoperator expr case call string expr case ifelse expr expr expr notice binary two exprs inside subexpressions say binary operator two dependency must generated generate necessary code operator generate binary operator expression generate code lefthand side righthand side use value new register parameter math instruction generating ir swift almost llvm project implemented c including library apis unfortunately swift interoperate directly c like objectivec many language interoperate c c llvm project includes comprehensive set c binding llvm library however c interop cumbersome easy introduce subtle bug swift using c api frequently make use unsafemutablebufferpointer apis convenient le ideal let function llvmgetnamedfunction module put var args llvm value argswithunsafemutablebufferpointer buf llvmbuildcall builder function bufbaseaddress bufcount fortunately working library wrap llvm api much friendly swifty interface away unsafe code expose native swift type represent underlying llvm type called llvmswift using llvmswift let say want emit hello world llvm ir first want create module think llvm module everything would reside single file clang gcc includes function declaration global variable metadata give whatever name like import llvm let module module name main next want make irbuilder handle generating individual ir statement function global variable builder build code specific module need create particular module created let builder irbuilder module module ready start adding function let maintype functiontype args returntype voidtype let main builderaddfunction main type maintype declare void main case main reference llvm function pas function object irbuilder buildcall method build call instruction function function comprised one basicblocks basicblock grouping instruction entry point instruction jump consider assembly code execsyscall assume executed syscall syscall copy return value syscall move jump iszero otherwise isone beq zero iszero isnotzero executed result syscall zero j end iszero executed result syscall zero j end end jr ra example four basic block execsyscall isnotzero iszero end every basic block example end jump instruction transfer execution basic block specified necessary assembly end jump fall next basic block llvm enforces basic block must end terminator either branch another basic block return function something terminate program help ensure programmer always move execution place intend first basicblock llvm function special basic block allowed branch jumped immediately upon execution function called entry block let give main entry block move builder end block start inserting instruction let entry mainappendbasicblock named entry builderpositionatend entry llvm look like moduleid main sourcefilename main define void main entry simple enough need add global string store hello world n easy let helloworld builderbuildglobalstringptr name helloworld value hello world n global variable called helloworld look like ir helloworld private unnamedaddr constant x c hello world end hexadecimal ascii character escape newline nul terminator respectively string array integer use global build call put take string return let putstype functiontype args pointertype pointee returntype let put builderaddfunction put type putstype build call put global variable builderbuildcall put args helloworld built call intend program basic block need end terminator need build ret instruction finish function whole module look like moduleid main sourcefilename main helloworld private unnamedaddr constant x c hello world declare put define void main entry call put getelementptr inbounds x x helloworld ret void done full llvm program print hello world stdout verify saving file helloll using commandline tool lli llvm interpreter run file compiling kaleidoscope llvm ir okay given brief introduction llvm ir llvmswift library ready write code generation pas kaleidoscope compiler remember said earlier expression dependent subexpressions important think code generation llvm ir want minimum one function know emit appropriate code data structure ast let make another class encapsulate code generation let name irgenerator class irgenerator let module module let builder irbuilder let file file init file file selfmodule module name main selfbuilder irbuilder module module selffile file prototype far good let start simple case emitting prototype recall prototype function name argument name easy enough create using builder let comment inline discardableresult func emitprototype prototype prototype function already function name return existing function let function modulefunction named prototypename return function otherwise construct new function number parameter double returning double let argtypes irtype repeating floattypedouble count prototypeparamscount let functype functiontype argtypes argtypes returntype floattypedouble let function builderaddfunction prototypename type functype set name parameter name parsed var param name zip functionparameters prototypeparams paramname name return function okay declare existence function without giving body need extern declaration represented prototype expression next write code generate expression going complicated explain piece first signature func emitexpr expr expr throw irvalue next going switch case first number switch expr case number let value return floattypedoubleconstant value simple make constant value floattypedouble llvm builtin type next function call interesting first time encountered something could fail user called function exist user called function wrong number argument note real compiler split semantic analysis separate pas happens code generation together brevity well start defining error want error case either function exist arity mismatch arity meaning number argument enum irerror error case unknownfunction string case aritymismatch string expected int got int also need way look prototype list prototype file declaration add following declaration file private let prototypemap string prototype func prototype named string prototype return prototypemap name mean file keep track mapping name corresponding prototype ask file declaration prototype name throw error function exist case call let name let args ask module function name nt one throw error guard let prototype fileprototype named name else throw irerrorunknownfunction name make sure call number argument function throw error guard prototypeparamscount argscount else throw irerroraritymismatch name expected prototypeparamscount got argscount emit function grab existing function name let function emitprototype prototype emit argument left right let callargs try argsmap emitexpr build call function return builderbuildcall function args callargs making progress two case left variable binary operator another possible error try reference variable exist yet well need way keep track parameter function emitting expression let add new property irgenerator private var parametervalues string irvalue populate array later emitting code function assume filled function parameter look name reference let add another case error enum case unknownvariable string emit code variable declaration case variable let name guard let param parametervalues name else throw irerrorunknownvariable name return param great easy find binding throw error otherwise return next handle ifelse expression interesting one case expression executed mean need make basicblocks jump specific one condition true fortunately llvm br instruction allows condition make basic block true case basic block false case merge basic block jump done merge block use called phi node llvm phi node special instruction change value based came consider phi node phi double else read came block value came block else value make phi node combine value two new block create like case ifelse let cond let thenexpr let elseexpr create notequal comparison let checkcond builderbuildfcmp try emitexpr cond floattypedoubleconstant orderednotequal create basic block execute true false case block jump let thenbb buildercurrentfunction appendbasicblock named let elsebb buildercurrentfunction appendbasicblock named else let mergebb buildercurrentfunction appendbasicblock named merge create conditional branch instruction branch block condition true else block false builderbuildcondbr condition checkcond thenbb else elsebb position builder end block emit expression builderpositionatend thenbb let thenval try emitexpr thenexpr builderbuildbr mergebb else block builderpositionatend elsebb let elseval try emitexpr elseexpr builderbuildbr mergebb move merge block builderpositionatend mergebb make phi node type double let phi builderbuildphi floattypedouble add two incoming block phi node phiaddincoming thenval thenbb elseval elsebb return phi last expression type binary straightforward emit code lefthand side righthand side emit instruction corresponding mathematical operation operator case let binary lh op rh let lhsval try emitexpr lh let rhsval try emitexpr rh switch op case plus return builderbuildadd lhsval rhsval case minus return builderbuildsub lhsval rhsval case divide return builderbuilddiv lhsval rhsval case time return builderbuildmul lhsval rhsval case mod return builderbuildrem lhsval rhsval last binary operator equal make floatingpoint comparison fcmp instruction return integer value kaleidoscope need double build inttofp instruction convert value double case equal let comparison builderbuildfcmp lhsval rhsval orderedequal return builderbuildinttofp comparison type floattypedouble signed false done emitexpr definition last piece puzzle function definition recall function comprised prototype single expression body going need one special thing populate parametervalues parameter function begin working function register parameter parametervalues done remove discardableresult func emitdefinition definition definition throw function lazily emit function prototype let function emitprototype definitionprototype register parameter underlying llvm value idx arg definitionprototypeparamsenumerated let param functionparameter idx parametervalues arg param create entry basic block let entryblock functionappendbasicblock named entry builderpositionatend entryblock emit underlying expression let expr try emitexpr definitionexpr build return expression builderbuildret expr remove parameter value parametervaluesremoveall return function wrapping together binary file actually executable unless main function main function execute filelevel expression print value loop expression make call printf format string fn func emitprintf function let function modulefunction named printf return function printf c type int printf char let printftype functiontype argtypes pointertype pointee returntype isvararg true add declaration printf return builderaddfunction printf type printftype func emitmain throw main function take argument return void let maintype functiontype argtypes returntype voidtype let function builderaddfunction main type maintype make entry block let entry functionappendbasicblock named entry builderpositionatend entry make global string containing format string let formatstring builderbuildglobalstringptr fn let printf emitprintf emit expression along call printf format string expr fileexpressions let val try emitexpr expr builderbuildcall printf args formatstring val return void builderbuildretvoid last thing need one function emit everything declared file level let make function emits extern definition function definition main function func emit throw extern fileexterns emitprototype extern definition filedefinitions try emitdefinition definition try emitmain built compiler lex parse compile kaleidoscope program let write small mainswift read file disk compile import foundation guard commandlineargumentscount else print usage kaleidoscope file exit let file try string contentsoffile commandlinearguments let lexer lexer input file let parser parser token lexerlex let file try parserparsefile let irgen irgenerator file file try irgenemit irgenmoduledump try irgenmoduleverify catch print error error work see ir emitted valid kaleidoscope program write part going built justintime compiler using llvm jit allows execute kaleidoscope program repl code listing code depends llvmswift link single gist available swift package manager project github
143,Lobsters,swift,Swift programming,"Building a Compiler in Swift with LLVM, Part 1: Introduction and the Lexer",https://harlanhaskins.com/2017/01/08/building-a-compiler-with-swift-in-llvm-part-1-introduction-and-the-lexer.html,building compiler swift llvm part introduction lexer,kaleidoscope sample language introduction llvm enter llvm kaleidoscope official llvm tutorial lexer let give shot parse token ast llvmswift code listing gist,compiler fascinating program touch every aspect computer science cli api design calling convention platformspecific optimization yet many developer fearful reverence make seem unapproachable think unnecessary difficulty compiler development arise mainly human concern semantic correctness following strict standard concern easier satisfy designing new language standard usually malleable first part series build compiler basic form kaleidoscope sample language quick link introduction llvm traditional compiler handle every part compilation process lexing parsing semantic analysis branch code generation path different target architecture support mean compiler duplicate optimization code generation logic every compiler need bespoke register allocator optimizer code generator etc arm powerpc gross enter llvm llvm low level virtual machine suite tool facilitate development compiler tool packaged individual library easier integrate project heart llvm project one specific tool programming language called llvm intermediate representation abbreviated llvm ir instead writing new code generation every architecture compiler engineer lower language llvm ir get fantastic code generation optimization free llvm ir typed assembly language support highlevel feature like function different calling convention named type abstraction gritty detail like pointer arithmetic llvm ir simple language easy get started emitting basic ir later need opt advanced feature optimization kaleidoscope kaleidoscope simple imperative language used official llvm tutorial floatingpoint number support function recursion binary operator math define function like scale complex expression definition like extern sqrt n def foo n n sqrt n n lexer first step programming language development reading source text translating stream manipulatable token token usually one set value might extra data attached naturally swift enum make sense token want specific case bit syntax exposed grammar look something like enum token case leftparen rightparen def extern comma semicolon else case identifier string case number double case operator binaryoperator binaryoperator corresponds simple enum enum binaryoperator character case plus case minus case time case divide case mod define write small lexer deconstruct source text list token ignoring whitespace first want define class called lexer hold reference string class lexer let input string var index stringindex init input string selfinput input selfindex inputstartindex want method read character spit token call advancetonexttoken full code attached bottom post advancetonexttoken basically order skip whitespace advancing index current character space check nonwhitespace character one singlecharacter token return token otherwise read identifier identifier integer decimal number return number token check one keyword token def extern else return generic identifier token take input programmer read series token pas parser add one method lex read available token input return list func lex token var toks token let tok advancetonexttoken toksappend tok return toks let give shot let toks lexer input def foo n n lex print toks tokendef tokenidentifier foo tokenleftparen tokenidentifier n tokenrightparen tokenleftparen tokenidentifier n tokenoperator binaryoperatortimes tokennumber tokenrightparen tokensemicolon work hopefully aware simple write lexer fairly featurerich little toy language later part parse token ast generate llvm ir using library working llvmswift happy compiling code listing full code listed available gist
144,Lobsters,swift,Swift programming,Unsafe Swift: Using Pointers And Interacting With C,https://www.raywenderlich.com/148569/unsafe-swift,unsafe swift using pointer interacting c,create free learning account today,create free learning account today free raywenderlichcom account download source code tutorial track progress personalize learner profile participate open discussion forum
146,Lobsters,swift,Swift programming,Swift: Challenges and Opportunity for Language and Compiler Research,http://researcher.watson.ibm.com/researcher/files/us-lmandel/lattner.pdf,swift challenge opportunity language compiler research,,obj length r filter flatedecode stream ≈è yju aﬁñ
148,Lobsters,swift,Swift programming,"Katana ‚Äì Modern Swift framework for creating iOS apps, inspired by React/Redux",https://github.com/BendingSpoons/katana-swift,katana modern swift framework creating io apps inspired reactredux,redux bending spoon overview side effect hydra promise asyncawait dependency interceptor dispatchablelogger observerinterceptor notificationcenter ui tempura katanaui signpost logger signpost api bending spoon guideline migration dedicated branch middleware swift version go give shot tempura tempura check documentation documentation dash docset installation cocoapods carthage swift package manager requirement swift package manager swift package manager cocoapods cocoapods carthage carthage homebrew get touch special thanks contribute found bug feature request want contribute idea get touch try framework license mit license check u,katana modern swift framework writing io application business logic testable easy reason katana strongly inspired redux word app state entirely described single serializable data structure way change state dispatch stateupdater stateupdater intent transform state contains information change centralized happening strict order subtle race condition watch feel katana helped u lot since started using production application downloaded several milions time katana really helped u scaling quickly efficiently bending spoon engineer leverage katana capability design implement test complex application quickly without compromise final result use lot open source project wanted give something back community hoping find useful possibly contribute overview entire app state defined single struct relevant application information placed struct counterstate state var counter int app state modified stateupdater stateupdater represents event lead change state app define behaviour state updater implementing updatestate method change state based current app state stateupdater updatestate pure function mean depends input state state updater nt side effect network interaction struct incrementcounter stateupdater func updatestate state inout counterstate statecounter store contains manages entire app state responsible managing dispatched item eg mentioned state updater ignore appdependencies time explained later let store store counterstate appdependencies storedispatch incrementcounter ask store notified every change app state storeaddlistener app state changed side effect updating application state using pure function nice lot benefit application deal external world though eg api call disk file management kind operation katana provides concept side effect side effect used interact part application dispatch new stateupdaters update state complex situation also dispatch side effect side effect implemented top hydra allow write logic using promise order leverage functionality adopt sideeffect protocol struct generaterandomnumberfrombackend sideeffect func sideeffect context sideeffectcontext counterstate appdependencies throw invokes getrandomnumber method return promise fullfilled number received point dispatch state updater update state contextdependenciesapimanager getrandomnumber randomnumber contextdispatch setcounter newvalue randomnumber struct setcounter stateupdater let newvalue int func updatestate state inout counterstate statecounter selfnewvalue moreover leverage await operator write logic mimic asyncawait pattern allows write async code sync manner struct generaterandomnumberfrombackend sideeffect func sideeffect context sideeffectcontext counterstate appdependencies throw invokes getrandomnumber method return promise fullfilled number received let promise contextdependenciesapimanagergetrandomnumber use await wait promise fullfilled let randomnumber try await promise state updated using proper state updater try await contextdispatch setcounter newvalue randomnumber order improve usability side effect also version return value note state dependency type erased allow freedom using library example struct purchaseproduct returningsideeffect let productid productid func sideeffect context anysideeffectcontext throw result purchaseresult purchaseerror get typed version context guard let context context sideeffectcontext counterstate appdependencies else fatalerror invalid context type purchase product via storekit let storekitresult contextdependenciesmonetizationpurchase selfproductid case failure let error storekitresult return storekitrejected error get receipt let receipt contextdependenciesmonetizationgetreceipt validate receipt let validationresult try await contextdispatch monetizationvalidate receipt map error return validationresult map init validation maperror validationrejected note prominent use case libraryapp step encapsulated protocol like protocol appreturningsideeffect returningsideeffect func sideeffect context sideeffectcontext appstate dependenciescontainer void extension appreturningsideeffect func sideeffect context anysideeffectcontext throw void guard let context context sideeffectcontext appstate dependenciescontainer else fatalerror invalid context type selfsideeffect context dependency side effect example leverage apimanager method side effect get apimanager using dependency parameter context dependency container katana way dependency injection test side effect need get rid singleton bad pratices prevent u writing test creating dependency container easy create class conforms sideeffectdependencycontainer protocol make store generic use side effect final class appdependencies sideeffectdependencycontainer required init dispatch escaping promisablestoredispatch getstate escaping getstate initialize dependency interceptor defining store provide list interceptor triggered given order whenever item dispatched interceptor like catchall system used implement functionality logging dynamically change behaviour store interceptor invoked every time dispatchable item handled dispatchablelogger katana come builtin dispatchablelogger interceptor log dispatchables except one listed blacklist parameter let dispatchablelogger dispatchableloggerinterceptor blacklist nottologself let store store counterstate interceptor dispatchablelogger observerinterceptor sometimes useful listen event occur system react katana provides observerinterceptor used achieve result particular instruct interceptor dispatch item store initialized state change particular way particular dispatchable item managed store particular notification sent default notificationcenter let observerinterceptor observerinterceptorobserve onstart list dispatchable item dispatched store initialized let store store counterstate interceptor observerinterceptor note intercepting side effect using observerinterceptor return value dispatchable available interceptor ui katana meant give structure logic part app come ui propose two alternative tempura mvvc framework built top katana happily use develop ui apps bending spoon tempura lightweight uikitfriendly library allows keep ui automatically sync state app suggested choice katanaui library aimed port react uikit allows create app using declarative approach library initially bundled together katana decided split internally nt use anymore retrospect found impedance mismatch reactlike approach imperative reality uikit go u signpost logger katana automatically integrated signpost api integration layer allows see instrument item dispatched long last useful piece information parallelism degree moreover analyse cpu impact item dispatch furtherly optimise application performance bending spoon guideline bending spoon extensively using katana year defined best pratices helped u write readable easier debug code decided open source everyone starting point using katana find migration strongly suggest upgrade new katana new katana fact add new powerful capability library also designed extremely compatible old logic action middleware wrote katana continue work new katana well breaking change time related simple typing change easily addressable prefer continue katana however still access katana dedicated branch middleware katana concept middleware replaced new concept interceptor still use middleware leveraging middlewaretointerceptor method swift version certain version katana support certain version swift depending version swift project using use specific version katana use table order check version katana need swift version katana version swift katana swift katana go give shot pod try katana tempura make awesome application using katana together tempura check documentation documentation also add katana dash using proper docset installation katana available cocoapods carthage swift package manager also drop katanaproject xcode project requirement io macos xcode swift swift package manager swift package manager tool managing distribution swift code integrated swift build system automate process downloading compiling linking dependency two way integrate katana project using swift package manager adding packageswift adding directly xcode file swift package add package dependency case need provide url git githubcom bendingspoonskatanaswiftgit cocoapods cocoapods dependency manager cocoa project install following command sudo gem install cocoapods integrate katana xcode project using cocoapods need create podfile io platform content useframeworks source http githubcomcocoapodsspecsgit platform io target myapp pod katana end need run carthage carthage decentralized dependency manager cocoa project install carthage downloading running carthagepkg file download install using homebrew simply running brew update brew install carthage integrate katana xcode project using carthage add cartfile github bendingspoonskatanaswift run drag built katanaframework xcode project get touch special thanks contribute found bug open issue feature request open issue want contribute submit pull request idea improve framework spread word please get touch want try framework project write demo please send u link repo license katana available mit license katana maintained bending spoon create tech product used loved million around world interested check u
150,Lobsters,swift,Swift programming,Mu: Writing Your Own Programming Language,https://github.com/marciok/Mu,mu writing programming language,mu writing programming language language mu Œº example step lexer example parser grammar tip code direct representation grammar interpreter example conclusion resource,mu playground explaining create tiny programming language mu download playground check source code live follow tutorial writing programming language nt need c degree write programing language need understand basic step language mu Œº mu minimal language consisted postfix operator binary operation one digit number example step lexer computer science lexical analysis process converting sequence character sequence token string identified meaning program performs lexical analysis may called lexer tokenizer scanner though scanner also used refer first stage lexer lexer generally combined parser together analyze syntax programming language wikipedia idea transform array charaters array token string identified meaning example mu small one character operator number simply iterate input check character enum token case parensopen case op string case number int case parensclose struct lexer static func tokenize input string token return inputcharactersflatmap switch case return tokenparensopen case return tokenparensclose case return tokenop string default return tokennumber int string return nil let input let token lexertokenize input parser parsing syntactic analysis process analysing string symbol either natural language computer language conforming rule formal grammar wikipedia grammar expression parensopen operator primaryexpression primaryexpression parensclose primaryexpression expression number parensopen parensclose operator number mu grammar contextfree grammar mean describes possible string language parser start top root generated tree go lowest node tip code direct representation grammar func parseexpression expressionnode firstprimaryexpression parseprimaryexpression secondprimaryexpression parseprimaryexpression func parseprimaryexpression primaryexpressionnode return parseexpression parsenumber indirect enum primaryexpressionnode case number int case expression expressionnode struct expressionnode var op string var firstexpression primaryexpressionnode var secondexpression primaryexpressionnode struct parser var index let token token init token token selftokens token mutating func poptoken token let token token index index return token mutating func peektoken token return token index mutating func parse throw expressionnode return try parseexpression mutating func parseexpression throw expressionnode guard case parensopen poptoken else throw parsingerrorunexpectedtoken guard case let tokenop operator poptoken else throw parsingerrorunexpectedtoken let firstexpression try parseprimaryexpression let secondexpression try parseprimaryexpression guard case parensclose poptoken else throw parsingerrorunexpectedtoken return expressionnode op operator firstexpression firstexpression secondexpression secondexpression mutating func parseprimaryexpression throw primaryexpressionnode switch peektoken case number return try parsenumber case parensopen let expressionnode try parseexpression return primaryexpressionnodeexpression expressionnode default throw parsingerrorunexpectedtoken mutating func parsenumber throw primaryexpressionnode guard case let tokennumber n poptoken else throw parsingerrorunexpectedtoken return primaryexpressionnodenumber n mark utils extension expressionnode customstringconvertible public var description string return op firstexpression secondexpression extension primaryexpressionnode customstringconvertible public var description string switch self case number let n return ndescription case expression let exp return expdescription let input let token lexertokenize input var parser parser token token var ast try parserparse interpreter computer science interpreter computer program directly executes ie performs instruction written programming scripting language without previously compiling machine language program wikipedia example mu interpreter walk ast compute value applying operator child node enum interpretererror error case unknownoperator struct interpreter static func eval expression expressionnode throw int let firsteval try eval expressionfirst let seceval try eval expressionsecond expressionop return firsteval seceval throw interpretererrorunknownoperator static func eval prim primaryexpressionnode throw int switch prim case expression let exp return try eval exp case number let n return int n let input let token lexertokenize input var parser parser token token let ast try parserparse try interpretereval ast conclusion given input let input extract array token lexing let token lexertokenize input parse given token tree parsing var parser parser token token let ast try parserparse walk tree compute value contained inside node interpreting let result try interpretereval ast resource
151,Lobsters,swift,Swift programming,Nyancat on the Touchbar,https://github.com/avatsaev/touchbar_nyancat,nyancat touchbar,join github today sign file permalink touchbar nyancat video download awesome touchbar apps resource reload reload,stupid nyancat animation macbook pro touchbar dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time touchbar nyancat stupid nyan cat animation macbook pro touchbar enjoy video download awesome touchbar apps stupid nyancat animation macbook pro touchbar resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
153,Lobsters,swift,Swift programming,Developing for the Apple Touch Bar,https://developer.apple.com/reference/appkit/nstouchbar?language=objc,developing apple touch bar,page requires javascript,page requires javascriptplease turn javascript browser refresh page view content
154,Lobsters,swift,Swift programming,The Server APIs Project - Swift.org,https://swift.org/server-apis/,server apis project swiftorg,redirecting click redirected,redirecting click redirected
155,Lobsters,swift,Swift programming,Whole-Module Optimization in Swift 3,https://swift.org/blog/whole-module-optimizations/,wholemodule optimization swift,module compile wholemodule optimization compile time conclusion,wholemodule optimization optimization mode swift compiler performance win wholemodule optimization heavily depends project two even five time wholemodule optimization enabled wholemoduleoptimization wmo compiler flag xcode turned default new project also swift package manager compiles wholemodule optimization release build let first look compiler work without wholemodule optimization module compile module set swift file module compiles single unit framework executable singlefile compilation without wmo swift compiler invoked file module separately actually happens behind scene user manually automatically done compiler driver xcode build system reading parsing source file stuff like type checking compiler optimizes swift code generates machine code writes object file finally linker combine object file generates shared library executable singlefile compilation scope compiler optimization single file limit crossfunction optimization like function inlining generic specialization function called defined file let look example let assume one file module named utilsswift contains generic utility data structure container method getelement method called throughout module example mainswift mainswift func add container int container int int return utilsswift struct container var element func getelement return element compiler optimizes mainswift know getelement implemented know exists compiler generates call getelement hand compiler optimizes utilsswift know concrete type function called generate generic version function much slower code specialized concrete type even simple return statement getelement need lookup type metadata figure copy element could simple int could also larger type even involving reference counting operation compiler know wholemodule optimization wholemodule optimization compiler lot better compiling wmo option compiler optimizes file module whole two big advantage first compiler see implementation function module perform optimization like function inlining function specialization function specialization mean compiler creates new version function optimized specific callcontext example compiler specialize generic function concrete type example compiler produce version generic container specialized concrete type int struct container var element int func getelement int return element compiler inline specialized getelement function add function func add container int container int int return compiles machine instruction big difference compared singlefile code two call generic getelement function function specialization inlining across file example optimization compiler able wholemodule optimization even compiler decides inline function help lot compiler see implementation function example reason behavior regarding reference counting operation knowledge compiler able remove redundant reference counting operation around function call second important benefit wholemodule optimization compiler reason us nonpublic function nonpublic function used within module compiler sure see reference function compiler information one basic optimization elimination called dead function method function method never called otherwise used wholemodule optimization compiler know nonpublic function method used case eliminate would programmer write function used well important use case dead function elimination often function become dead sideeffect optimization let assume add function place containergetelement called inlining getelement function used anymore removed even compiler decides inline getelement compiler remove original generic version getelement add function call specialized version compile time singlefile compilation compiler driver start compilation file separate process done parallel also file modified since last compilation need recompiled assuming dependency also unmodified called incremental compilation save lot compile time especially make small change work wholemodule compilation let look compiler work wholemodule optimization mode detail internally compiler run multiple phase parser type checking sil optimization llvm backend parsing type checking fast case expect get even faster subsequent swift release sil optimizer sil stand swift intermediate language performs important swiftspecific optimization like generic specialization function inlining etc phase compiler typically take one third compilation time compilation time consumed llvm backend run lowerlevel optimization code generation performing wholemodule optimization sil optimizer module split multiple part llvm backend process split part multiple thread also avoids reprocessing part part change since previous build even wholemodule optimization compiler able perform big part compilation work parallel multithreaded incrementally conclusion wholemodule optimization great way get maximum performance without worry distribute swift code across file module optimization like described kick critical code section performance five time better singlefile compilation get high performance much better compile time typical monolithic wholeprogram optimization approach
156,Lobsters,swift,Swift programming,IBM makes Swift a server-side language,http://www.computerworld.com/article/3122994/apple-mac/ibm-says-swift-is-now-ready-for-the-enterprise.html,ibm make swift serverside language,mobilefirst discussing swift swift go server side ibm official introduction ibm bluemix runtime swift swift apple decision make swift open source ibm developer engaged apple kitura web framework ibm swift package catalog ibm cloud tool swift swift sandbox community driven github city furniture kind small nimble development team getting started google appleholic kool aid corner community want apple tv tip please visit apple tv website got story drop line via twitter,apple smartly creating great digital experience think know great digital experience mean unleashing ton innovation community overall mike gilfix ibm vp mobilefirst smarter process told discussing swift go server sidei speaking gilfix mark ibm official introduction ibm bluemix runtime swift new software developed company unlock serverside capability available swift building microservice apis cloud release incredibly important mean enterprise developer able build next generation apps native swift endtoend clientside serverside ibm cloud made possible apple decision make swift open sourcein layman term make possible developer create apps use smartwatch iphone mac pc server side apps upon connected device depend using programming language lot way benefit everybody efficient apps front end capacity quickly easily introduce new apps service hosted back end even considering data analytics opportunity inherent within ibm developer engagedapple ibm taken huge step unlock digital transformation everything swift one driver first class mobile experience incredible developer energy around apple made focus say release swift ready enterprise gilfix say used language hacker back every day see birth new programming ecosystem like swift going think getting started starting today ibm full suite swift tool kitura web framework ibm swift package catalog ibm cloud tool swift swift compliant ibm swift package catalog includes ibm watson service ibm dashdb ibm cloudant couchbase ibm objectstore apache cassandrathere also swift sandbox developer level experience actively build serverbased code go developer forum using sandbox easy way collaboration gilfix explains since launch seen million code run country message anyone curious swift development urge get inside really easy atwith ongoing convergence mobile cloud enterprise also want optimize spending increasing return investment people modern accessible programming language enables small developer team create endtoend code connecting edge device central server criticalciting ibm institute business value gilfix confiemd around percent enterprise plan least five enterprise mobile initiative time also pointed lot swift developer working mac important ibm made solution integrate xcode let use favorite tool build server side code said apple supply rich device experience extending server side logic observes incredible thing connected world device talk make easier community drivengilfix pain thank wider open source community ibm kitura introduced open source code february developer liked contributed star github ton digital agency building high fidelity server apps already choosing apple technology swift server xcode create stateoftheart mobile solutionsibm also strong community coder one largest swift development shop working client implement mobilefirst io application saidwith swift cloud enterprise benefit faster backend api performance safer reliable transaction integration support ability repurpose swift developer skill client serversidethis integration delivers tangible benefit enterprise city furniture building app handle clearance furniture intended building front end apps swift able work early version tool ibm introduced today build back end code language able build incredibly short time week said city furniture perfect example kind small nimble development team underpin future enterprise one developer helped bit one developer also able contribute projectthis big enterprise example small nimble development team one developer helped little bit one developer able contribute bluemix runtime project getting started underpinning approach understanding get apple product experience apple creates really smart people ecosystem around create solution need opening swift enabling bigger community get really innovative think saw made u enter partnership today innovative experience powered network saw opportunity opening people create powerful digital experience said gilfix opened huge opportunity people create great business tool said think getting started google use social medium happen google user join appleholic kool aid corner community join conversation pursue spirit new model apple want apple tv tip want learn get best apple tv please visit apple tv websitegot story drop line via twitter comment let know like chose follow twitter let know fresh item published first computerworld
158,Lobsters,swift,Swift programming,Swift 3.0 Released!,https://swift.org/blog/swift-3-0-released/,swift released,swift package manager language change evolution process migrating swift xcode migration guide documentation swift programming language platform linux ubuntu ubuntu swift core library swift package manager available download apple xcode xcode source release management process,swift first major release swift since opensourced officially released swift huge release containing major improvement refinement core language standard library major addition linux port swift first official release swift package manager language change swift major language release sourcecompatible swift contains following language change went swift evolution process migrating swift swift sourcebreaking release largely due change change impact name standard library apis also completely change objectivec apis particularly cocoa import swift many change largely mechanical numerous typical swift project help moving swift xcode contains code migrator automatically handle many needed source change also migration guide available guide many change especially one le mechanical require direct scrutiny documentation updated version swift programming language swift available swiftorg also available free apple ibooks store platform linux ubuntu ubuntu linux port includes swift core library swift package manager official binary ubuntu ubuntu available download apple xcode development apple platform swift ship part xcode source development swift tracked following repository github tag designates specific revision repository make final version swift remain open release management process accumulate change potential future bugfix dot release
159,Lobsters,swift,Swift programming,"Trill: A typed, LLVM-backed compiler, inspired by (and written in) Swift",https://github.com/harlanhaskins/trill,trill typed llvmbacked compiler inspired written swift,trill microsofttrill example llvm building using outstanding issue use trill production absolutely author harlanhaskins segiddins codafi license,trill trill simple typesafe compiled programming language partially inspired swift trill simple language feature one would expect function structure pointer highlevel language feature like type method garbage collected type overloading tuplesmultiple return closure trill confused microsofttrill engine streaming data processing example following program find n th fibonacci number func fib n int int var previous var current var n let tmp previous previous current current previous tmp return current func main printf dn fib print see example folder example trill language feature llvm main backend trill llvm us llvm clang c apis call llvm code generation clang importing feature within swift currently make best effort import supported declaration c standard library header foreign declaration ready use trill building using trill build macos linux using cmake convenient build script obviates need using cmake directly got llvm cmake installed need generate pkgconfig file llvm clang tool utils directory need run install build script dependency pip install pkgconfig pip install githttps githubcomkronenthalermodpbxprojgit able run build script running build script get build trill builddebug folder usage build h swift swift r release x optional argument h help show help message exit swift swift path custom swift executable r release release release build executable release configuration x xcodeproj build xcode project trill compiler test run trill test suite outstanding issue closure entirely unsupported llvm backend closure much still progress generic working protocolbased generic system us runtime box type metadata enum like swift enums c currently imported global constant limited standard library exists alongside libc pretty much get whatever get c includes pitfall manual pointer ideally standard library vends common type like array string dictionary set etc llvm codegen definitely optimal certainly correct garbage collection automatic reference counting allocated trill type leak like crazy many yetunknown issue cornercases use trill production absolutely trill still early development much toy anything serious everything subject change without notice author harlan haskins harlanhaskins samuel giddins segiddins robert widmann codafi license trill released term mit license copy included repository
160,Lobsters,swift,Swift programming,Looking back on Swift 3 and ahead to Swift 4,https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html,looking back swift ahead swift,swiftevolution looking back swift ahead swift clattner applecom http swiftorg http githubcomappleswiftblobmasterdocsgenericsmanifestomd conditionalconformances http githubcomappleswiftblobmasterdocsgenericsmanifestomd conditionalconformances http githubcomappleswiftblobmasterdocsgenericsmanifestomd recursiveprotocolconstraints http swiftorg http githubcomappleswiftblobmasterdocsgenericsmanifestomd http non objc http information swiftevolution mailing list,swiftevolution looking back swift ahead swift chris lattner clattner applecom fri jul cdt hello everyone swift release nearing completion time look back release learn happened use shape swift community year ahead overall swift going absolutely amazing release impressive much got done thank everyone contributed making happen instead diving flurry new proposal immediately important take stock look bigger picture metapoint email ridiculously long cover multiple topic instead replying directly best start new thread individual topic like discus tag swift subject line swift retrospective every year development completely different previous one expect swift continue trend goal learning improving year year observation retrospective swift open source pretty great incredible see vibrant community working well together see come together practically overnight really fantastic work talented enthusiastic group people open source also brings challenge think fair say open design slower le predictable closed however end result significantly better therefore tradeoff worth big go everyone help improve swift evolution process software scheduling particularly open source continues difficulttoimpossible predict set swift lofty set goal trimmed back later good high goal need better job communicating people feel misled community benefit keeping focus limited number topic much going one follow keep track important core team involved key discussion front swift cycle problematic many folk time follow thread review period completed clear goal liberating decemberjanuary timeframe particular loosely scoped sort idea would fit swift embarked several project ended far beyond could handle later release specific goal example additive made much easier everyone focus important impossible make everyone happy particularly discussing feature pick prioritize implicitly deprioritizes something else inevitable though way interesting work fit oneyear release cycle fortunately another release new release share big improvement context look ahead swift release plan next year core team expects ship two major release swift swift spring swift fall addition major release surely ship minor release eg swift fix bug service need corelibs swiftorg http swiftorg project swift release cycle planning approach experience swift know need pick choose going tackle swift primary goal deliver promise source stability provide abi stability standard library core team decided take twostage approach next year stage focus essential required source abi stability keep reasonably strict focus work mean feature fundamentally change abi existing language feature imply abibreaking change standard library considered stage example generic feature like conditional conformance http githubcomappleswiftblobmasterdocsgenericsmanifestomd conditionalconformances additive feature since expected reshape much standard library would part stage hand language support regular expression would affect existing abi cause major change existing standard library feature would fit stage work entailed stage nontrivial explored somewhat detail probably keep u busy spring stage design implementation work stage feature cresting scope plan large feature based much time left optimistic time pick long list feature explored know one know much time develop addition new feature also need reevaluate accepted source breaking proposal make swift proposal necessarily grandfathered need evaluate goal swift decide case case basis finally specifically related swiftevolution want call quality performance work core team want continue improve quality including fixing compiler bug improving error warning diagnostics performance also ongoing area critical development including improving performance generated code improving standard library implementation speeding compile time etc work happen either stage swift stage goal focus source abi stability core team initial discussion make stage effort feature prioritizing stage source stability feature relatively small important example need sort compiler flag may also add way conditionally enable larger effort development yet stable order make easier experiment resilience provides way public apis evolve time even face abi stability example want c base class problem ever exist swift much design implementation work done swift timeframe still major missing piece including uservisible part model eg new attribute abi detail ton small detail audited improved code generation model mostly relevant swiftdev specifically swiftevolution topic generic improvement needed standard library expect conditional conformance http githubcomappleswiftblobmasterdocsgenericsmanifestomd conditionalconformances top list recursive protocol requirement http githubcomappleswiftblobmasterdocsgenericsmanifestomd recursiveprotocolconstraints powerful associated type constraint close follower however standard library guru need break absolutely essential finally eliminate rest protocol manifest public api standard library right way long term string reevaluation string one important fundamental type language standard library lead numerous idea improve programming model without jeopardizing goal providing unicodecorrectbydefault model goal better string processing perl memory ownership model adding optin cyclonerust inspired memory ownership model swift highly desired system programmer folk want predictable deterministic performance example real time audio processing code pertinent goal swift feature important fundamentally shape abi informs code generation lowlevel work abi impact swift runtime significant impact type system name mangling area thought put already still long way formal proposal expect hope turn major discussion early swift cycle since fully scoped impact abi stability may specific addition learn finally also possible may choose scope specific small feature high value unblock swiftpm swiftorg http swiftorg project possible swift stage effort mentioned point impossible know achieved stage timeframe know long timeframe core team would also like converge swift development earlier cycle swift order fix bug late release provide longer bake time said optimistic able pick tackle commonly requested new feature give idea list please note plan commitment laundry list commonly requested feature reflection core team committed adding powerful dynamic feature swift example swift already added nearly infrastructure data reflection already used xcode memory debugger use infrastructure build powerful userfacing api similarly would like design build implementation dynamic method reflection runtime api support first class concurrency actor asyncawait atomicity memory model related topic area highly desired everyone open door sort new thing client server plan start formal discussion phase unfortunately crystal clear new concurrency model done time swift release simply take month design build want make sure take time right also make sense memory ownership model better understood taking generic improvement generic manifesto http githubcomappleswiftblobmasterdocsgenericsmanifestomd includes many exciting enhancement generic system many specifically required abi stability standard library would make swift generic powerful expressive swiftmodule stability point need stabilize binary file format replace different mechanism allow party binary framework large amount work required abi stability standard library new scripting feature regular expression multiline string literal etc would make swift much appealing crowd scripting building web technology among others also help round string model property behavior feature promise provide powerful abstraction existing property model deferred http proposal describes opportunity well many others submodules implicit promotion numeric type importing c apis hygenic macro system guaranteed tail call making enums enumerable typed user defined attribute abstract methodsclasses better simd support non objc data parallelism support higher kinded type syntactic sugar list ton trivial small proposal frequently come typically thing seen language solve specific problem lowest priority tackle swift go overly long email laying thought idea next year one specific thing keep mind swift done yet source breaking change nearly done still time bug fixing quality work important release think would helpful u spend immediate future discussing general parameter tackle release next year iron stage feature conceptually start writing proposal specific design well understood core team want situation many proposal floating around keep track prevent tackling large important high priority project front u thank please start new thread like dive deeply specific topic chris next part html attachment scrubbed url http information swiftevolution mailing list
161,Lobsters,swift,Swift programming,Exponential time complexity in the Swift type checker,https://www.cocoawithlove.com/blog/2016/07/12/type-checker-issues.html,exponential time complexity swift type checker,update limitation error compiling otherwise valid code needlessly long compile time unexpected behavior working around problem code swift constraint system solver constraint system solver cssolvercpp getting complex quickly unexpected behavior cartesian product linearizing constraint solver cartesian product unproven claim warning premise resolving previous example propagating constraint right left propagating constraint left right would performance compare update limitation prompting article previously read condition preventing linearization explanation first condition explanation second condition lambda expression v anonymous method part five consequence conclusion,article look issue surrounding swift compiler error repeatedly force rewrite code error expression complex solved reasonable time consider breaking expression distinct subexpressions look example trigger error talk negative effect beyond compiler error caused underlying issue look occurs compiler work around problem short term also present theoretical change compiler would eliminate problem permanently common case see section titled update limitation altering algorithm involved linear time complexity instead exponential time complexity without otherwise changing external behavior content error compiling otherwise valid code following line give error try compile swift let double line valid unambiguous swift syntax line compile ultimately optimize constant value line get past swift type checker instead emits error expression complex solve look complex integer literal addition operator two negation operator binding double type expression containing entity complex many expression cause problem include literal basic arithmetic operator possibly heavily overloaded constructor following expression fail error let c sqrt let e double string v string v v v string v v string int v let f double double x x x x x x x x x completely valid swift syntax expected type every term every expression obvious swift programmer case swift type checker fails update swift following two example previously included fixed work although first little slow let reduce string string let b string string string string needlessly long compile time error consequence problem try compiling following line let g double single line compile without error take whopping second compile swift computer compiler spends almost time swift type checker probably many line take long compile virtually guaranteed nontrivial swift project taking least little longer necessarily compile due complexity problem cause expression complex solved reasonable time error update previously used following example section got fixed swift appears run quite quickly let x string string unexpected behavior want highlight quirk swift type checker type checker choose resolve overloaded operator nongeneric overload whenever possible code comment path handle specific behavior compiler note behavior exists optimization avoid performance issue performance issue responsible expression complex error see effect let look following code code compile instead get error ambiguous use operator really ambiguous compiler realize using integer literal treat int select following overload standard library prefix public func signednumber x however swift considers nongeneric overload case float double implementation equally imperfect nonpreferred creation integer literal compiler choose one bail error particular optimization applied operator leading following inconsistency func f x float float return x func f integer x return x let x f prefix operator prefix func x float float return x prefix func integer x return x let code defines two function name f custom operator prefix function name two overload float float integer calling f selects integer implementation x int exactly expect calling selects float float implementation float contrary expectation code chosen convert float preference int despite fact int would also work compiler bail considers generic overload function really semantically consistent choice result compromise compiler avoid expression complex solved error associated performance problem working around problem code general swift complexity problem issue unless using two following feature single expression overloaded function including operator literal closure without explicit type expression swift default every integer literal int every float literal double choice wrong typically combine feature code unlikely see expression complex error however using feature always straightforward suddenly stop mathematics code large functionalstyle expression declarative code easier write feature often require complete rethink avoid may prefer give compiler little nudge accept code without major change different approach help compiler error suggests breaking expression distinct subexpressions let double let double let x double okay technically work really annoying especially small expression hurt legibility another option reduce number function operator overload compiler must consider adding typecasts let x double double double double prevent float float explored one possible overload negation operator effectively reducing system unknown function system note approach though unlike language double x equivalent x double swift constructor work like another function since multiple overload parameter actually introduces another overloaded function search space albeit different location expression previous example solve introduce double around parenthesis since way graph rearranged favor type checker case similar approach actually make thing worse see string example near top article ultimately operator way cast without inserting complexity fortunately bind tighter binary operator used without parenthesis case another approach use uniquely named custom function let x double mycustomdoublenegation mycustomdoublenegation mycustomdoublenegation eliminates need resolve function overload entirely since overload however pretty ugly case present large amount visual weight otherwise lightweight expression final approach many case replace free function operator method let x double negated negated work method normally fewer overload common arithmetic operator type inference operator often narrower via free function swift constraint system solver expression complex error emitted sema semantic analysis stage swift compiler semantic analysis responsible resolving type system ensuring agree building welltyped expression type explicit specifically error triggered constraint system solver cssolvercpp within semantic analysis stage constraint system graph type function swift expression edge graph constraint node constraint system solver process constraint constraint system graph explicit type function determined node really abstract let look concrete example constraint system representation expression look something like label starting type diagram come constraint system debug logging used represent type function overload need resolved graph node following constraint conforms expressiblebyintegerliteral conforms expressiblebyintegerliteral function take return one implementation swift standard library named infix convertible note familiar swift terminology expressiblebyintegerliteral previously named integerliteralconvertible resolve system constraint system solver start smallest disjunction disjunction constraint constrain value one set essentially logical case exactly one disjunction function overload constraint solver pick first implementation infix list infix implementation type signature int int int since disjunction graph solver resolve type constraint type int due constraint also int due constraint since int preferred match expressiblebyintegerliteral overload infix function considered constraint system solver ignore possibility use solution explicit type node know selected overload function getting complex quickly thus far nothing strange might expect swift would start failing expression time bigger let make two change wrap parenthesis apply negation operator prefix add type double result give constraint system graph look like constraint conforms expressiblebyintegerliteral conforms expressiblebyintegerliteral function take return one implementation swift standard library named prefix function take return one implementation swift standard library named infix convertible double constraint system let look constraint system solver handle example first step resolve system choose smallest disjunction time constraint one implementation swift standard library named prefix solver set overload signature float float next step apply first step choose next smallest disjunction constraint one implementation swift standard library named infix solver set overload signature int int int final step use type constraint resolve type however problem first choice float float choice int int int agree constraint function take return fails solution invalid solver must backtrack try next choice ultimately solver go implementation infix none satisfy constraint constraint convertible double constraint system solver need backtrack try next overload double double eventually find solution overload however since double preferred match expressiblebyintegerliteral constraint system solver need backtrack choose next overload run another full search possible value total possibility final implementation rejected optimization since generic implementation therefore never preferred explicit double solution specific optimization constraint solver cause quirky overload selection behavior showed unexpected behavior section despite optimization already gone solving constraint system first guess needing different guess reaching solution another overloaded function resolve number guess would get much much bigger example another infix operator expression eg let double search space would require guess searching solution way clear case exponential time complexity search space disjunction set called cartesian product n disjunction graph algorithm search ndimensional cartesian product exponential space testing disjunction single expression usually enough exceed swift expression complex limit linearizing constraint solver better solution long term fix problem compiler reason constraint system solver exponential time complexity resolving function overload unless shortcut around problem swift search entire ndimensional cartesian product n disjunction set caused function overload graph determine one value solution avoid ndimensional cartesian product need approach disjunction solved independently rather dependently need include big warning unproven claim warning following theoretical discussion would improve resolution function overload swift constraint system solver written prototype prove claim remains possible overlooked something invalidates reasoning premise want satisfy following two goal constraint node depend upon reference result node disjunction preceeding function overload intersected disjunction succeeding function flattening two constraint single disjunction first goal achieved propagating constraint along full path origin since swift constraint bidirectional constraint path node start leaf expression traverse via trunk traverse back along linear path node following path compose constraint instead referencing depending upon type node simply incorporate constraint logic node second goal support first reducing propagated accumulation constraint single simple constraint important intersection type function overload intersection possible output one overloaded function possible input parameter another overloaded function operation calculable type check intersecting parameter cartesian product combination constraint intersection true mathematical intersection might difficult necessary follow strict type rule need reproduce behavior swift type interference often resort greedy type selection complicated scenario resolving previous example see goal would used constraint system solver let revisit previous constraint graph begin set constraint conforms expressiblebyintegerliteral conforms expressiblebyintegerliteral function take return one implementation swift standard library named prefix function take return one implementation swift standard library named infix convertible double propagating constraint right left start traversing right left leaf expression tree trunk propagating constraint add constraint input must convertible type expressiblebyintegerliteral int preferred due literal rule intersecting new constraint existing constraint discard new constraint since input parameter existing possibility space already fulfill new constraint preference expressiblebyintegerliteral int type input overruled preference specific operator overload generic operator overload make double float overload prefix function preferred propagating add constraint must one type output prefix double float preferred propagating add constraint second parameter must convertible one type output prefix double float preferred intersecting constraint already leaf constraint one implementation swift standard library named infix right input one type output prefix double float preferred propagating additional effect since choice existing constraint already fulfill new constraint preference expressiblebyintegerliteral int type cancelled preference double float propagating add constraint one value returned infix operator second parameter one type output prefix double float preferred intersecting constraint already leaf double halfpropagated constraint conforms expressiblebyintegerliteral int preferred due literal rule conforms expressiblebyintegerliteral int preferred due literal rule function take return one implementation swift standard library named prefix double float preferred due preference specific operator overload generic operator overload must one type output prefix double float preferred due preference specific operator overload generic operator overload function take return one implementation swift standard library named infix second parameter one type output prefix double float preferred due preference specific operator overload generic operator overload double propagating constraint left right go left right trunk leaf starting constraint constraint double propagating creates new constraint result must convertible double intersection new constraint result immediately eliminates possible overload infix operator except double double double propagating via first parameter overload creates new constraint must convertible double intersecting new constraint previous conforms expressiblebyintegerliteral result double propagating via second parameter selected infix overload creates new constraint must convertible double intersecting new constraint existing constraint result double propagating creates new constraint must return type convertible double intersecting new constraint previous constraint immediately eliminates overload except double double propagating creates new constraint must convertible double intersecting new constraint previous conforms expressiblebyintegerliteral result double fullypropagated constraint double double double double overload prefix double double double overload infix double constraint system solved would performance compare purpose suggested algorithm improve resolution function overload call number function overload n use average number overload per function disjunction size previously stated swift algorithm solves searching ndimensional cartesian product rank give upper bound mn exponential time complexity suggested algorithm resolve n function overload searching separate cartesian product rank give execution time proportional assuming independent n true calculate intersection constraint false otherwise make upper bound n linear time complexity linear complexity always beat exponential complexity large value n important know constitutes large effect factor might smaller value case already large value previously stated swift constraint system solver would require guess solve expression let double suggested algorithm would require search possibility would significantly lower overhead per possibility swift current approach making interesting assertion claiming suggested algorithm would lower overhead per possible solution let look detail previous let double example theoretically swift algorithm suggested algorithm search cartesian product prefix infix space contains possible solution swift current algorithm search possible entry total possible cartesian product space overload prefix infix swift algorithm performs call constraintsystem matchtypes related solely function overload guess swift performs large number type check per guess suggested algorithm would search entire possible entry cartesian product space included shortcut optimization point since check intersecting parameter search location check unrelated type constraint estimate would require total call constraintsystem matchtypes entire solution determining performance unwritten algorithm involves lot guesswork difficult know degree certainty possible algorithm would perform equal better value n update limitation thanks jordan rose swift team apple prompting take look article previously read looking worstcase complexity overload resolution write update may article nearly year old swift type checker seen number specialcase improvement see swift update throughout article core changed dramatically would still benefit approach case two particular condition combine together make problem space truly exponential complexity case suggestion linearizing would benefit condition preventing linearization impossible linearize constraint solve one following condition true overloaded function exist knowing constraint input parameter return narrow possible overload way apply constraint parameter return variable otherwise unrelated branch expression tree constrained type explanation first condition example first condition function following overload x f f f f x f f f x f f x f x f f x f x f f x f independently knowing type parameter return value function narrow possible set overload enough u add new constraint parameter return value unless know least parameter simultaneously remaining parameter completely unconstrained explanation second condition second point bit complicated pay attention possibility swift read article similar problem c lambda expression v anonymous method part five using closure closure parameter might fully resolved yet name used multiple point inside closure using unresolved name make separate branch expression constrained type yet forced adhere constraint separate location example let x manyoverloads use closure must type every use type unknown could return value manyoverloads selected overload use manyoverloads must adhere every constraint every separate location closure consequence first condition true brief penandpaper estimate system may increase linear complexity logarithmic complexity serious problem second condition true depending kind constraint involved linear solution might remain possible intersection constraint could lead quadratic complexity bad far catastrophic condition true problem choosing function overload equivalent boolean satisfiability problem sat least hard mean problem npcomplete known solution exponential complexity mean linearization still possible vast majority case two condition fairly uncommon although unknown handful closure article demonstrate second condition believe closure would lead increase complexity beyond linear since occur situation easytointersect constraint highlight condition occur first condition actually rarer two personally think situation function overload like might occur outside mathematics function offer implicit type conversion pattern frowned upon swift however worth keeping mind hard kind blindly overloaded function constraint solver definitely design pattern avoid ultimately case type sat complexity apply extremely rare programmatically detectable detected could even make type expression compiler warning would easy design around least decorate closure parameter type conclusion usage swift expression complex solved reasonable time error common error see simple programmer error write lot large functionalstyle expression mathematics code likely see regular basis exponential time complexity swift compiler constraint system solver also lead significant compilation time overhead number percentage typical swift compilation time spent part compiler certainly degenerate case majority long compilation time spent constraint system solver problem worked around code outside case deliberately emulate boolean satisfiability problem necessary fairly sure linear time evaluation possible vast majority case currently problematic laid way think could done
162,Lobsters,swift,Swift programming,"Apple‚Äôs Swift Playgrounds can help you learn to code, but it‚Äôs no HyperCard",http://arstechnica.com/apple/2016/07/apple-swift-playgrounds-not-hypercard/,apple swift playground help learn code hypercard,wwdc keynote hypercard legacy myst credit invention lsd trip told interviewer enlarge,apple apple obsessive secrecy even senior manager acknowledge onstage wink much announce day already predicted runup wwdc saw developer twitter wishlisting xcode ipad way write apps io device rather xcode integrated development environment ide apple make available exclusively mac one suggestion could io version playground interactive test builder apple added xcode launching new programming language swift sure enough minute wwdc keynote tim svp tim swift playground ipad new way learn code thinking tweet ready personally think way learn swift ipad need century hypercard let see later john gruber whose daring fireball blog apple bbc radio today show british politics provided glimmer hope swift playground new hypercard well turn hypercard legacy hypercard back got stuff done mac already application use still word describe except hypercard arguably hypercard mostly database form designer stateless data repository scripting rather standalone sequence command could run system like macro hypertalk script code snippet attached object triggered event modern approach significantly feel like code people tell hypercard hypertalk objectoriented others call procedural layperson seems like imperative language operating objectoriented system looked like user much daunting stilted english kind mac scientific researcher teacher game developer writer could quickly learn speak hypercard stack became popular medium creating sharing homemade software rapid application development rad tool others visual authoring environment myst breakthrough graphical adventure game originated hypercard stack stewart brand whole earth major influence tech thinker including steve converted hypercard stack first best interactive cdroms remember age interactive cdroms hypercard stack point hypercard successful hypercard enabling hypercard succeeded precisely try teach anyone programmer instead put raw capability computer hand people time become programmer befits leap imagination apple bill atkinson created hypercard credit invention lsd trip already celebrated author macpaint knew hypercard bigger going open people many thing told interviewer truly personal computer rest u macintosh succeeded extent using graphic menu consistent user interface directmanipulation metaphor complexity compared earlier commandline system made harder program atkinson admitted even ambitious user limited capability commercially available application could use canned piece power enlarge bill atkinson department store hypercard like software erector set would crystallise computing building block user could snap together implement functionality user interface mind swift playground today however apple newest attempt democratize coding present inviting experience budding developer insists code even done still get deliverable work progress swift playground definitively hypercard could matter listing image apple
163,Lobsters,swift,Swift programming,Favorite Swift 3.0 Features,http://swift.ayaka.me/posts/2016/6/18/favorite-swift-30-features,favorite swift feature,amazing change excitedly tweeted importing objectivec lightweight generic official doc keypath import member tip uigraphicsrenderer swift api design guideline talk new api design guideline entire diff swift api design guideline talk swift api design guideline many,last week wwdc massive whirlwind learning trying meeting time today decompress think thing released last week starting swift beta lot amazing change swift wanted highlight one made especially happy ie probably excitedly tweeted want say character anyway without importing objectivec lightweight generic prior swift objectivec lightweight generic feature allows write code like listviewcontroller word objectivec used appear swift code like listviewcontroller without generic type parameter swift listviewcontroller word appear swift code like listviewcontroller word instead huge improvement particularly excited swift prevent writing layout code nslayoutanchor accidentally try constrain xaxis anchor like leadinganchor yaxis anchor topanchor hey make mistake typesafe layout code dig interested learning nslayoutanchor check official doc keypath ever write stringlytyped kvo code like personaddobserver self phonenumberareacode option new context context prone humanerror like typo lead crash swift add new expression keypath allows u write code instead personaddobserver self keypath personphonenumberareacode option new context context get benefit static typechecking get autocomplete well safe lazy favorite kind programming environment import member ever write core graphic code pre swift felt like writing c code lucky u swift add ability c api author specify api look like swift feel natural well swifty look much nicer core graphic example look anyone know replacement uigraphicsbeginimagecontextwithoptions please let know edit thanks tip uigraphicsrenderer also want see even bigger transformation core graphic code recommend watching swift api design guideline talk import member part somewhere last min speaking swift api design guideline swift fundamentally change way swift code read way way way better new api design guideline swift three core principle clarity point use call site clarity brevity reliance contextual cue think best way experience principle download xcode run code maybe small playground first swift migrator tried small project ended entire diff interested manual change like choosing right preposition overall migrator everything make transition process smooth possible anyway read truncate sanitized string key hash key match line localized string line ah grammatical code ear love want hear detail swift philosophy recommend watching swift api design guideline talk official swift api design guideline page great companion reference well many tonne feature added swift learn swiftevolution although follow mailing list love skimming accepted rejected proposal see kind thought reasoning went design decision especially interesting read tradeoff alternative considered since process applies sort engineering beyond programming language design think also worth noting lot new feature added swift relate better objectivec c support may sound counterintuitiveproductive first think want future swifty need make sure existing apps framework written objectivec c seamlessly naturally fit together swift world entire community entirelyswift apps proceed fearlessly new world think swift great job building bridge anyway thank reading favorite change addition swift let know comment
164,Lobsters,swift,Swift programming,"Understand and implement laziness with examples in Scala, JavaScript, Swift and Racket",http://matt.might.net/articles/implementing-laziness/,understand implement laziness example scala javascript swift racket,laziness language laziness byname versus byneed laziness swift implementing byneed laziness implementing laziness etaexpansion combinator work strict language like javascript lazy parameter lazy parameter swift lazy parameter javasscript extending language byname parameter jspahrsummers implementing laziness racket implementing byneed racket related page real world haskell excellent guide okasaki classic exercise,laziness language language strict language compute value expression immediately language like haskell lazy every expression evaluation wait first use language like scala strict default lazy explicitly specified given variable parameter scala even never seen language make easy demonstrate difference following scala program val x print foo print bar print x print foo bar following scala program lazy val x print foo print bar print x print bar foo since delay computation x actually needed laziness laziness made laziness made lambda anonymous function closed lexical scope let translate scala example earlier javascript language lack laziness var x consolelog foo consolelog bar consolelog x expected print foo bar wanted make x lazy wrapping definition x anonymous function use x invocation function var x function return consolelog foo consolelog bar consolelog x print bar foo demonstrate subtlety let change scala example earlier lazy val x print foo print bar print x print x print bar foo print foo twice lazy cached result course var x function return consolelog foo consolelog bar consolelog x consolelog x print foo twice call x byname versus byneed two reasonable interpretation laziness byname interpretation computation value delayed necessary computation repeated time used byneed interpretation computation value delayed necessary result cached subsequent us scala lazy keyword provides byneed laziness simply wrapping value anonymous function provides byname laziness laziness swift swift provides lazy attribute variable work field class structs swift block notation closure make little le verbose fake laziness swift prior example swift would let x int print foo return print bar print x print x javascript print foo twice swift also provides autoclosure attribute type provide byname variable autoclosure useful byname parameter covered momentarily use autoclosure byname variable would lift side effect leading following func footen int print foo return let x autoclosure int footen print bar print x print x would end printing foo twice clearly explicit closure form convenient implementing byneed laziness get byneed laziness javascript create helper function memothunk cache value noargument anonymous procedure receives function memothunk f var cached false var result return function cached return result cached true result f return result change prior example var x memothunk function return consolelog foo consolelog bar consolelog x consolelog x print bar foo swift implement memothunk well func memothunk f var cache nil return let x cache return x else cache f return cache run analogous code let x int memothunk print foo return print bar print x print x print bar foo implementing laziness etaexpansion implementing laziness language like javascript requires modifying point definition point use exception case computation suspended already produce procedure case achieve laziness etaexpansion point definition etaexpansion functionproducing expression wrapped anonymous function pass argument directly expression consider expression exp evaluates function take one argument javascript function x return exp x behaves identically exp absence side effect exp assuming exp terminates etaexpansion play key role derivation combinator work strict language like javascript lazy parameter language allow definition explictly lazy parameter function lazy parameter evaluated used language allow explicitly marked lazy parameter lazy parameter byname contrast lazy language like haskell every parameter implicitly byneed consider code scala def printtwice x int print twice print x print x printtwice print foo print foo twice however mark parameter x byname def printtwice x int print twice print x print x printtwice print foo print twice foo foo clear supply code block pas anything type int printtwice print twice lazy parameter swift apple language swift byname parameter marked autoclosure func printtwice x autoclosure int print twice print x print x printtwice implicitly wrap closure around argument printing twice course evaluation argument side effect side effect repeated following code func ten int print ten return printtwice ten print twice ten ten language design standpoint seems swift designer wanted allow lazy parameter still force programmer consider fact argument wrapped procedure carry cost lazy parameter javasscript unfortunately lazy parameter require care javascript way modify funtion whenever called argument automatically wrapped closure rather user must remember wrap argument closure every point use extending language byname parameter byname parameter convenient way extending language new construct example suppose scala construct could add one laziness currying def mywhile cond boolean body unit cond body mywhile cond body use var x mywhile x print x x x print swift might add togglable assert construct var assertsenabled bool true func assert cond autoclosure bool assertsenabled cond println assert failed exit exitfailure way fine use assert expensivetest know cost test paid assertion enabled first swift support extending language seem fluid scala closest could get custom form func mywhile cond autoclosure bool body cond body mywhile cond body body var int mywhile body print twitter jspahrsummers pointed somewhat confusingly uncurrying actually make work swift func mywhile cond autoclosure bool body cond body mywhile cond body var int mywhile print implementing laziness racket racket implicit support manual byneed laziness form promise racket wrap delay around expression converted promise applying force promise carry computation computation already completed return cached value example earlier look like racket define x delay begin display foo display bar display force x display force x print bar foo would nice course could write definelazy x begin display foo display bar display x display x get effect racket course need create definelazy understand possible first need know even variable racket macroexpanded instance define macro called three expand following code definesyntax three stx display three print mind take failed shot macrogenerating macro definesyntax definelazy stx syntaxcase stx var value withsyntax var generatetemporaries var begin definesyntax var force var define var delay value definelazy macro defines macro orginal variable var assigns special temporary variable var delay original expression value macro definition force temporary variable var code work fine prior example subtle mistake code show try something else suppose try lazily define procedure definelazy f Œª x x display f expect print initial horror printed procedure examining original code reveals use f function position becomes classic macro expansion instead expanding f macro expands f oops fix need syntaxcase discriminate two case definesyntax definelazy stx syntaxcase stx var value withsyntax var generatetemporaries var begin definesyntax var stx syntaxcase stx f arg force f arg force var define var delay value definition code definelazy f Œª x x display f behaves exactly expected printing implementing byneed racket using technique straightforward create definebyneed form racket turn parameter function definition byneed parameter case code definebyneed h b c b h error fail print error fail never get evaluated make definebyneed work redefinition function macroexpand parameter definition definelazy definesyntax definebyneed stx syntaxcase stx f v body withsyntax f generatetemporaries f begin definesyntax f syntaxrules arg f delay arg define f v letsyntax v lambda stx syntaxcase stx arg force v arg force v body related page functional programming nonfunctional programmer recommendation learning purely lazy language like haskell real world haskell bryan osullivan john goerzen stewart learning scala martin odersky written excellent guide coauthor lex spoon bill venners purely functional data structure okasaki classic blog exercise implement definebyname racket implement lambdabyneed racket get byname ycombinator work factorial definebysomething f f f define fact lambdasomething f lambdasomething n n n f n display fact print hint think expression need delayed
165,Lobsters,swift,Swift programming,WWDC 2016,http://www.apple.com/apple-events/june-2016/,wwdc,apple special event,apple special event june announcing upgraded operating system iphone ipad mac apple watch apple tv
166,Lobsters,swift,Swift programming,Functional Core Reactive Shell,http://www.mokacoding.com/blog/functional-core-reactive-shell/,functional core reactive shell,spaghetti lasagna pizza single responsibility principle test point view test double issue mock ken scambler kill mockingtest root problem object value stand shoulder giant boundary gary bernhardt decision action functional core imperative shell functional core reactive shell rxjs rxswift reactivecocoa pizza actually edible wrapping mokagio,past couple month gave talk named functional core reactive shell something similar number event think best talk far like share summary content idea purpose talk introduce somehow different way look software architecture manage complexity see video one talk slide spaghetti lasagna pizza familiar called spaghetti code source code entangled messy remind bowl spaghetti minus deliciousness opposite spaghetti code lasagna code software follows single responsibility principle composed multiple layer abstraction segregating part code making system easier reason despite size another famous yummy italian food used describe software architecture pizza understand detail pizza code need look back lasagna moment test point view developer point view lasagna code great every component clear dependency operates specific layer abstraction top work domain object bottom database driver network client writing test component bump two issue first object certain layer depend object layer depend object layer higher lasagna taller dependency tree need build initialize system test second issue behaviour component depends object depends upon example persistence service deal domain object public interface internally relies database controller certain vendor persist data disk test persistence service behaves expected need test command database test double pasta lover test enthusiast found neat solution limitation lasagna software using test double test double name group testing patter based idea making special copy double object purpose facilitating testing use stub test double allowing u control indirect input provided system test replace dependency tree would otherwise expensive setup single copy top level dependency method stub called wo nt perform logic simply return value configured start alongside making test easier setup another advantage using stub easily control input provided system easily test kind scenario use mock test double allowing u control indirect output produced system test verify top level object depending lower level consume intended going back persistence service example could initialize mock database nt really persist data disk simply record method call receives testing behaviour persistence service matter verifying call expected method expected argument issue mock mock sound promising paper issue soon come familiar using mock liar mock production code make test system component going used real many story software project test suite relying heavily mocking going wrong despite test green guilty shipping build tester crashing due networking issue test nt scam relying mock well nt test real version mocked dependency could ask clearly well enough correct miss point point mock make u test wrong thing test assert behaviour form output given input verifying certain method called mock focus implementation result actually care nt one point test enable u change implementation component without changing system behaviour test method signature func sum int b int int would assert called given result smarter people tackled issue mocking one ken scambler post kill mockingtest highly recommend read deeper practical look issue solve root problem mock evil yes pathological liar end day tool quite smart one actually root problem lasagna architecture layer upon layer object interacting depending upon make change one layer could ripple others object value said smarter people thought issue beauty software development science stand shoulder giant talk boundary gary bernhardt proposes shift focus software design object interact value exchange shifting towards value leverage concept functional programming world particular immutability pure function immutable value changed make easy pas around without worry component change invalidating assumption pure function side effect mean nt produce mutation interact outside world network call filesystem operation testing pure function incredibly straightforward provide input assert output expect need setup stub mock write software focusing data deal pipeline pure function get value give value io said pure function side effect perform io actually show stuff user gather input decision action software designed value first manage side effect making value well idea split code take decision side effect perform code taking action actually performs effect example storing data database could databaseaction value enum databaseactionmode case delete case insert case update struct databaseaction let object persistable let mode databaseactionmode testing code interacts database would become matter testing logic pure function producing databaseaction value action performed something like class databaseservice func performaction action databaseaction switch actionmode case delete case insert case update testing databaseservice would easy well create simple databaseaction verify object carry modified database according value mode property functional core imperative shell software boil pipeline purely functional value transformation eventually produce side effect sent object know perform gary bernhardt call functional core imperative shell functional core made value purely functional logic imperative shell straightforward glue take value one function pass next eventually provides side effect value performer pizza value function topping imperative glue code crust functional core reactive shell gary bernhardt talk dated working ruby year passed paradigm become mainstream like introduce spin concept background io developer working swift functional reactive programming flavour introduced rxjs implemented swift framework rxswift reactivecocoa marries well concept looking software pipeline value transformation leveraging frp replace imperative glue code scaffold provided signal transformation go functional core imperative shell functional core reactive shell input source like button user touch read filesystem network request etc treated signal producer transform input signal using frp scaffolding tool like map flatmap zip etc operator apply pure transformation example going json dictionary view update action embedded view model finally observe signal perform side effect produce approach reduces amount actual business logic need write boiling number function test confidence speaking testing test behaviour whole reactive shell quite easily provide source input signal shell subscribe assert side effect value configured expected pizza actually edible little doubt real italian food pizza particular delicious might wondering functional core reactive shell actually good idea honest downside first frp style tool come bit learning curve developer familiar even team prolific style effective code need buy style could problem later want change architecture original team replaced one le familiar frp finally another considerable disadvantage reactive shell code crust pizza look long odd like signalproducer value databaseserviceallstuff map stuff realmobject networkserviceperformrequest toendpoint getstuff flatmap latest json return stuffstuffproducer withjson json flatten merge map stuffarray stuffarraymap cellviewmodel stuff map viewmodels effectupdateview viewmodels viewmodels observeon uischeduler failed weak self error self performeffect effectpresentalert error error next weak self effect self performeffect effect start see code personal opinion issue balanced get approach awkward hard read reactive shell balanced small easy understand topping actually majority business logic top shell tell story whole system need jump abstraction layer manager class call controller call manager furthermore approach simplifies making change system easy add remove step pipeline since transformation pure isolated others changing even easier finally see fact technique mainstream straightforward pick nonissue lucky work many software developer embrace learning realise new pattern paradigm technology learn enriches wrapping tell functional core imperativereactive shell silver bullet software architecture project different team working different well personally find approach interesting working functional core reactive shell way side project working fun rewarding find easy pick code even week find way around straightaway honest nt chance use real world app due probably yet bump issue could arise scale larger team working hope give approach shot even sandboxed new small feature please get touch twitter mokagio leave comment love know find useful think silly idea leave codebase better found
167,Lobsters,swift,Swift programming,Swift: Things I really wanted that won‚Äôt make it,http://ericasadun.com/2016/05/19/swift-things-i-really-wanted-that-wont-make-it/,swift thing really wanted make,book two three fixed range striding range operator gotten review disambiguating spm naming conflict introducing build configuration test simulatordevice target platform test method cascade win interpolated string formatting core error macro decimal number duplicating modifying immutable structs final default result type intrinsic member collection enumeration pull request expanding cocoa touch default initial unreviewed list adding unfold sequence add sequence initial next sequence state next stdlib review evan maloney end strong weak dance,short list thing probably going swift hoping see like post consider buying book two three thanks fixed range striding range operator splintered series believe four separate proposal first one improving floating point math gotten review lot work done plus extending striding collection disambiguating spm naming conflict idea would come way allow multiple package share simple name like json parser differentiate based source repo swift name simple concise namespacing module myswiftstringutilitycollection unswift overlap likely already happening language would adjust add import well samenamed module module difficult name submodules could pulled simpler access code depends overworked overwhelmed build team plus would require swift evolution proposal import component already bug report package conflict wild would introduce simple way add resolution introducing build configuration test simulatordevice target gave even trying debug one going configuration test seem large enough middle group want preconfigured simple test think target device v simulatoremulator doable useful backburnered along platform test window linux unix apple time method cascade dartlike win postponed minimum language additive make le critical interpolated string formatting brent royal gordon started went limbo think important able add afloat string able kind inline safe formatting number decimal place leading zero etc core error hugely popular entirely dead thought would nice builtin basic default error throw included source site error thrown optional customizable string andor dictionary replace error would provide convenient error anyone building script playground let honest simple apps want build something carefully extensive individual error condition case macro happen happen decimal number ditto duplicating modifying immutable structs brought list showed implementation got discussed went nowhere final default swiftsourced class would apply anything objc enable subclassing rather disable seemed split swifties objcheads result type use completion block rather data status error signature currently big war result specific use case measurable benefit either thing could built used prefer result intrinsic member collection enumeration pull request expanding cocoa touch default idea take cue betterimports objc extend pruning default common class swift evolution process contact point take foundation uikit initial unreviewed list yet satisfied default actually want push actually two item list might squeak adding unfold sequence lily sequence unfoldsequence part part proposal accepted spate bikeshedding think name sequence hated unclear whether need new proposal getting kind late party shoehorned add sequence initial next sequence state next stdlib review evan maloney end strong weak dance writing checked pull request behold proposal queue still sure go would make coding lot better okay partial list related
169,Lobsters,swift,Swift programming,? Building Slack Bots In Swift ?,https://medium.com/@pvzig/building-slack-bots-in-swift-b99e243e444c#.wi0v3hcn0,building slack bot swift,building slack bot swift slack interest bot exploded slackkit want build slack bot building application robot show swift code setting slack bot sign http myslackcomservicesnewbot testing locally darth vader robot deploying sign free one procfile swiftenv toolbelt run done built,ready bot uprising building slack bot swift remote io developer love slack meeting room water cooler interest bot exploded interest piqued course interested writing bot one favorite service result slackkit universal swift framework building slack appsdo want build slack bot following stepbystep guide writing slack bot swift deploying heroku focus macos also doable linux skip xcode step use editor choice update updated instruction work xcode official release swift building applicationfor example application going making application render judgement specific question robot first need create directory application initialize basic project structuremkdir robotornotbot cd robotornotbotswift package init type executablenext let edit packageswift file add slackkit package dependency show swift code create bot first double click packageswift file open xcode create development environment resolving project dependency next need edit mainswift file source robotornotbot contain bot logic following code us slackkit listen message directed bot respond adding reaction inquirysetting slack botnext need create bot integration slack need slack administrator access already one play go sign slack free small teamsgo http myslackcomservicesnewbotenter name bot going go robotornotbot confusion bot sole purpose lifeclick add bot integration copy api token slack generates replace placeholder token mainswift real dealtesting locallywith bot token place ready local testing back xcode select robotornotbot application executable target run bot head slack robotornotbot user presence indicator filled alive test working ask something robot robotornotbot darth vader robotornotbot add reaction response question letting know darth vader robotdeploying working locally time deploy cloud going deploying heroku account go sign free onefirst need add procfile heroku swiftversion file swiftenv back terminal run echo slackbot robotornotbot procfileecho swiftversionnext let check code git initgit add git commit amrobotornotbot powering upfinally setup heroku install heroku toolbeltlog heroku terminal heroku create application heroku set buildpack need use unique name like since heroku app name unique heroku create buildpack vaporvapor set configuration environment variable release heroku config set robotornotbot set heroku remote heroku git remote robotornotbot push master git push heroku masterat point see heroku go build process exciting run build complete run heroku run detached slackbotover slack see robotornotbot user presence indicator fill alive system operationaljust sure working ask existential question robotornotbot robot bot robotornotbot sadly imagine add reaction question know computer program done successfully built deployed slack bot written swift linux server built
171,Lobsters,swift,Swift programming,"Cocoapods iOS frameworks with storyboards, nibs and resources",https://medium.com/tapglue-stories/cocoapods-ios-frameworks-with-storyboards-nibs-and-resources-4d354b843148,cocoapods io framework storyboards nib resource,cocoapods io framework storyboards nib resource tapglue element setup let get started hooking pod app adding image mix download image tip tapglue element wrapping tapglue element,cocoapods io framework storyboards nib resourcesfor last month working creating tapglue element framework io integrating full feature third party apps includes gui graphical asset like image also interacting current sdk responsible networking caching one fundamental requirement support biggest dependency management tool io cocoapodstoo big surprise many example framework something similar goal create full feature design ux integrated third party apps similar example found actually avoided using storyboards xib file together view purely codein post goal create stepbystep guide create framework storyboards xibs asset localisation work cocoapods project containing code found heresetupto start recommend using cocoapods template creating framework runningpod lib create myframeworkyou find documentation herewe using swift demo app sake simplicity use test frameworksthis set framework connected demo application use try framework case look like also generates podspec u leave way islet get started let start creating storyboard view controller tableview embed view controller uinavigationviewcontroller make navigation view controller initial view controllerwe link view controller create called frameworkvc spice thing implement cell xibs name ourcellxib assign reuse identifier ourcellnow let look combine together view controller import uikitpublic class frameworkvc uiviewcontroller iboutlet weak var tableview uitableview override public func viewdidload superviewdidload let podbundle nsbundle forclass frameworkvcself let bundleurl podbundleurlforresource myframework withextension bundle let bundle nsbundle url bundleurl let cellnib uinib nibname ourcell bundle bundle tableviewregisternib cellnib forcellreuseidentifier ourcell tableviewestimatedrowheight tableviewrowheight uitableviewautomaticdimension extension frameworkvc uitableviewdelegate extension frameworkvc uitableviewdatasource public func tableview tableview uitableview cellforrowatindexpath indexpath nsindexpath uitableviewcell return tableviewdequeuereusablecellwithidentifier ourcell public func tableview tableview uitableview numberofrowsinsection section int int return load xib file need use bundle associated framework hence viewdidload ask bundle frameworkvc get bundle name declared podspec point need head podspec update include storyboard xib filepod specnew sname myframework sversion ssummary short description myframework sdescription desc desc shomepage http githubcom githubusername myframework sscreenshots slicense mit sauthor john nilsen john tapgluecom ssource git http githubcom githubusername myframeworkgit tag sversiontos ssocialmediaurl http twittercom twitterusername splatform io srequiresarc true ssourcefiles podclasses swift sresourcebundles myframework podclasses storyboard xib endthere two significant change one side filter source file extension adding swift since putting storyboards nib class folder changed resourcebundle podclasses storyboard xib head example app executes pod install xcode storyboards xibs displayed different group resourceshooking pod appsince framework need hook demo app able see result work let start adding segue view controller add new class myframework add segue callimport uikitpublic class myframework public static func performseguetoframeworkvc caller uiviewcontroller let podbundle nsbundle forclass frameworkvcself let bundleurl podbundleurlforresource myframework withextension bundle let bundle nsbundle url bundleurl let storyboard uistoryboard name frameworkstoryboard bundle bundle let vc storyboardinstantiateinitialviewcontroller callerpresentviewcontroller vc animated true completion nil see wrote exact code getting bundle tidy create method generate u inside myframework classstatic var bundle nsbundle let podbundle nsbundle forclass frameworkvcself let bundleurl podbundleurlforresource myframework withextension bundle return nsbundle url bundleurl refactoring tidy myframework frameworkvcthats hook demo app head viewcontroller example myframework folder need add segue call viewdidappearimport uikit import myframeworkclass viewcontroller uiviewcontroller override func viewdidappear animated bool myframeworkperformseguetoframeworkvc self running ti see something like adding image mixlets improve cell design adding image first create asset catalog class folder myframework press plus add image set add following imagesdownload imageslets redesign cell look like thisif run pod install project would break need add new file resource bundleour podspec look something like fixing issue pod specnew sname myframework sversion ssummary short description myframework sdescription desc desc shomepage http githubcom githubusername myframework sscreenshots slicense mit sauthor john nilsen john tapgluecom ssource git http githubcom githubusername myframeworkgit tag sversiontos ssocialmediaurl http twittercom twitterusername splatform io srequiresarc true ssourcefiles podclasses swift sresourcebundles myframework podclasses storyboard xib xcassets json imageset png endnotice resourcebundle includes extension like xcassets json imageset png addition one earliernow run pod install example folder set tipssome minor issue ran related pod updated executing pod spec lint usually solved pod cache clean executing pod spec lint againwhen writing framework like would recommend providing view controller segue provide delegation relevant part view controller thats approach decided use tapglue elementswrapping upthats want example implement recommend read tapglue element source code
172,Lobsters,swift,Swift programming,Keyboard as Trackpad,https://github.com/Shrugs/asdfghjkl,keyboard trackpad,asdfghjkl youtube inspiration mouse virtualboy nub mouse thing efficient asdfghjkl challenge ran accomplishment proud learned built asdfghjkl next asdfghjkl asdfghjkl info asdfghjkl asdfghjkl,asdfghjkl keyboard trackpad yes really watch action youtube inspiration throughout history invented better better way interfacing machine mouse virtualboy nub mouse thing thinkpads nt satisfied current state input device computer become personal part daily life need better efficient way interacting one biggest inefficiency modern desktop computing moving hand keyboard track pad got rid yup really introducing asdfghjkl revolution computerhuman interface design pattern team keyboard trackpad hold control key run finger across keyboard watch mouse follows command marvel time saved hold shift key run finger across keyboard watch page scroll command marvel time saved challenge ran using computer accomplishment proud using computer learned better use computer built getting mvp working exclusively used asdfghjkl navigation input developing app built swift easy c interoperability partially objc certain function next asdfghjkl apple partnership work nasa partnership going smoothly soon inhabitant i able get done easier thanks mandatory asdfghjkl usage info correct way pronounce asdfghjkl asdfghjkl please nt get wrong additionally way type asdfghjkl sliding finger across entire home row nt hold control mouse fly right
174,Lobsters,swift,Swift programming,Swift 2.2 Released,https://swift.org/blog/swift-2-2-released/,swift released,language change evolution process swift package manager documentation swift programming language platform linux ubuntu ubuntu swift core library available download apple xcode xcode source release management process,pleased announce release swift first official release swift since opensourced december notably release includes contribution nonapple contributor change span simple bug fix enhancement alteration core language swift standard library language change swift minor language release mostly sourcecompatible swift contains following language change went swift evolution process beyond language change swift also contains numerous bug fix enhancement diagnostics produce even fasterrunning code swift package manager still early development included release documentation updated version swift programming language swift available swiftorg also available free apple ibooks store platform linux ubuntu ubuntu swift includes support swift linux linux port still relatively new release include swift core library appear swift port however include lldb repl official binary ubuntu ubuntu available download apple xcode development apple platform swift ship part xcode source development swift tracked following repository github tag designates specific revision repository make final version swift remain open release management process accumulate change potential future bugfix dot release
175,Lobsters,swift,Swift programming,NSDateFormatter.com - Easy Skeezy Date Formatting for Swift and Objective-C,http://nsdateformatter.com/,nsdateformattercom easy skeezy date formatting swift objectivec,main fallacy aware localeaware tl dr formatting uservisible date ui dedicated paragraph using prefer using tricky subject lot edge case using dateformatter templating method autoadjust user locale working date fixed format apis also dedicated section case using always use enusposix locale fixed format always also set apple site nsdateformattercom swift vapor heroku open source author twitter blog,main fallacy aware dateformat localeaware aware using custom dateformat come risk falling fallacy especially need realize user use different locale date format different different locale region user setting example one date formatted dateformat fit u might become confusing anyone europe tl dr use datestyle timestyle dateformat whenever explain date fallacy designer need ca nt find fitting datestyletimestyle format ui date least use dateformattersetlocalizeddateformatfromtemplate account user locale parsing internet date always use ca nt api format nt fit still absolutely need use custom dateformat sure also set dateformatterlocale special value locale identifier enusposix formatting uservisible date ui apple already dedicated paragraph documentation best practice formatting date present user localeaware way tl dr using datestyle timestyle main recommendation follow prefer using datestyle timestyle dateformat localeaware account lot edge case otherwise miss using custom hardcoded dateformat would even advise convince designer using custom format explain date time tricky subject lot edge case generally worth using custom format might fit assumption locale region used use might fit lot using dateformatter templating method autoadjust user locale still need use custom dateformat sure use dateformattersetlocalizeddateformatfromtemplate dateformatterdateformat dateformatterdateformat fromtemplate instead setting hardcoded string working date fixed format apis apple documentation also dedicated section case using need parse date consider using isodateformatter instead dateformatter custom dateformat class dedicated handle standard possible variant edge case better using custom dateformat would tip one littleknown option also able handle fractional second set using formatterformatoptionsinsert withfractionalseconds always use enusposix locale fixed format last resort need parse date api fall format also intended ui thus depend user localeregionlanguage case use fixed string value dateformatterdateformat always also set dateformatterlocale locale identifier enusposix dateformatter enusposix special locale guarantee formatting parsing depend phone locale designed exactly parsing internet date fixed format nt force locale enusposix risk code might seem work region like u fail parse api response user phone set another region eg engb ene frfr date formatting different use time time test kind edge case device setting phone setting use ene example set use ampm try parse date like information commonly overlooked case read apple site nsdateformattercom written swift mean learn opensource swift swift package manager deploying linux us vapor web application framework deployed heroku site open source want fix bug submit enhancement feel free submit pull request author find ben twitter blog
176,Lobsters,swift,Swift programming,Completing Swift Generics,https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160229/011666.html,completing swift generic,swiftevolution manifesto completing generic dgregor applecom http githubcomappleswiftblobmasterdocsgenericsrst http wwwurbandictionarycomdefinephp termcentithread http http http information swiftevolution mailing list,swiftevolution manifesto completing generic douglas gregor dgregor applecom wed mar cst hi introduction goal swift fairly illdefined thus fair short blurb list goal complete generic generic used pervasively number swift library especially standard library however number generic feature standard library requires fully realize vision including recursive protocol constraint ability make constrained extension conform new protocol ie array equatable element equatable swift provide generic feature needed standard library affect standard library abi message expands upon notion plan swift official core team communication collect result numerous discussion among core team swift developer compiler standard library hope achieve several thing communicate vision swift generic building original generic design document http githubcomappleswiftblobmasterdocsgenericsrst something concrete comprehensive discus establish terminology swift developer using feature discussion productive proposing refer go look engage community discussion specific generic feature coalesce around design public review maybe even get implemented message like easily turn centithread http wwwurbandictionarycomdefinephp termcentithread separate concern discussion ask reply specific thread limited discussion vision whole piece fit together piece missing whether right longterm vision swift discussion specific language feature eg work syntax semantics conditional conformance discus implementation compiler use standard library please start new thread based feature name using message cover lot ground attempted rough categorization various feature kept description brief limit overall length idea syntax providing simply way express idea code subject change feature happen either soon ever intended fairly complete whole mesh together put next feature think important nearer term v interesting mostly reflect feature significant impact swift standard design implementation enough disclaimer time talk feature removing unnecessary restriction number restriction use generic fall implementation swift compiler removal restriction matter implementation one need introduce new syntax semantics realize listing two reason first acknowledgment feature intended exist model today second love help implementation feature recursive protocol constraint currently associated type required conform enclosing protocol protocol inherits protocol example standard library subsequence type sequence sequence protocol sequence associatedtype iterator iteratorprotocol associatedtype subsequence sequence currently illformed possible compiler currently reject protocol unfortunate effectively push subsequencemustbeasequence requirement every consumer subsequence communicate intent abstraction well nested generic currently generic type nested within another generic type eg struct x struct u currently illformed possible much say compiler simply need improved handle nested generic throughout concrete sametype requirement currently constrained extension use sametype constraint make type parameter equivalent concrete type example extension array element string func makesentence string uppercase first string concatenate space add period whatever highlyrequested feature fit existing syntax semantics note one could imagine introducing new syntax eg extending string get newfeature territory see section parameterizing declaration number swift declaration currently generic parameter fairly natural extension generic form maintain current syntax semantics become powerful made generic generic typealiases typealiases could allowed carry generic parameter would still alias ie would introduce new type example typealias stringdictionary value dictionary string value var stringdictionary int var dictionary string int okay type dictionary string int generic subscript subscript could allowed generic parameter example could introduce generic subscript collection allows u pull value arbitrary set index extension collection subscript index sequence indicesiteratorelement index index index iteratorelement get var result iteratorelement index index resultappend self index return result set index value zip index newvalue self index value generic constant let constant could allowed generic parameter produce differentlytyped value depending used example particularly useful named literal value eg let floatliteralconvertible clang importer could make particularly good use importing macro parameterized extension extension could parameterized would allow structural pattern matching type example would permit one extend array optional value eg extension array element var somevalues var result opt self let value opt resultappend value return result generalize protocol extension extension sequence element var somevalues var result opt self let value opt resultappend value return result note one extending nominal type could simplify syntax somewhat make sametype constraint implicit syntax extension array var somevalues var result opt self let value opt resultappend value return result working concrete type use syntax improve extension concrete version generic type per sametype eg extension array string func makesentence string uppercase first string concatenate space add period whatever minor extension number minor extension make generic system fundamentally change one express swift improve expressivity arbitrary requirement protocol currently new protocol inherit protocol introduce new associated type add new conformance constraint associated type redeclaring associated type inherited protocol however one express general constraint building example protocol really want element type subsequence element type sequence eg protocol sequence associatedtype iterator iteratorprotocol associatedtype subsequence sequence subsequenceiteratorelement iteratorelement hanging clause associated type protocol ideal discussion another thread typealiases protocol protocol extension associated type keyword thanks reasonable bring back sequence protocol protocol sequence associatedtype iterator iteratorprotocol typealias element iteratorelement rejoice refer somesequenceelement rather somesequenceiteratorelement default generic argument generic parameter could given ability provide default argument would used case type argument specified type inference could determine type argument example public final class promise value reasonerror func getrandompromise promise int errorprotocol var promise int var promise int error okay type promise int error var promise getrandompromise type promise int errorprotocol due type inference generalized constraint constraint currently used defining protocol could generalize associated type type parameter declaration eg protocol p associatedtype class func foo class part magical anyobject protocol could replaced existential class bound becomes typealias typealias anyobject protocol class see section particularly information allowing subclass override requirement satisfied default superclass conforms protocol one requirement satisfied member protocol extension member currently overridden subclass example protocol p func foo extension p func foo print class c p get protocol class c override allowed func foo print let p p pfoo gotcha print rather dfoo required specify called dynamically major extension generic model unlike minor extension major extension generic model provide expressivity swift generic system generally much significant design implementation cost conditional conformance conditional conformance express notion generic type conform particular protocol certain circumstance example array equatable element equatable extension array equatable element equatable func equatable lh array rh array bool conditional conformance potentially powerful feature one important aspect feature deal avoid overlapping conformance example imagine adaptor sequence conditional conformance collection mutablecollection struct sequenceadaptor sequence sequence extension sequenceadaptor collection collection extension sequenceadaptor mutablecollection mutablecollection almost certainly permitted need cope reject conformance extension sequenceadaptor collection someotherprotocolsimilartocollection trouble two way sequenceadaptor conform collection see section issue type conform protocol multiple time variadic generic currently generic parameter list contains fixed number generic parameter one type could generalize number generic parameter real way deal today involves creating set type example consider standard function return one provided two argument zip together public struct sequence sequence sequence public func zip sequence sequence supporting three argument would require copypaste public struct sequence sequence sequence sequence public func zip sequence sequence sequence variadic generic would allow u abstract set generic parameter syntax hopelessly influenced variadic template http sorry putting ellipsis left declaration make containing zero parameter putting ellipsis right typeexpressionetc expands parameter pack within typeexpression separate argument important part able meaningfully abstract zero generic parameter eg public struct zipiterator iterators iteratorprotocol iterator zero type parameter conforms iteratorprotocol public typealias element iteratorselement tuple containing element type iterator iterators var iterators iterators zero stored property one type iterators var reachedend bool false public mutating func next element reachedend return nil guard let value iteratorsnext call iterators put result tuple named reachedend true return nil return value public struct zipsequence sequence sequence sequence public typealias iterator zipiterator sequencesiterator get zip iterator iterator type sequence var sequence sequence zero stored property one type sequence detail design could also work function parameter pack together multiple function argument different type eg public func zip sequence sequencetype sequence sequence zipsequence sequence return zipsequence sequence finally could tie discussion tuple operator example func apply args result fn args result function taking number argument producing result args args result tuple argument return fn args expand argument tuple separate argument extension structural type currently nominal type class structs enums protocol extended one could imagine extending structural tuple allow eg conform protocol example pulling together variadic generic parameterized extension conditional conformance one could express tuple type equatable element type extension element equatable element equatable extending tuple type equatable natural bound one would need actual structural type one would able extend every type extension error neither structural nominal type think cleverly making possible conditional conformance make every type conforms protocol p also conform protocol q see section conditional conformance via protocol extension p q error neither structural nominal type syntactic improvement number potential improvement could make generic syntax list could go long time highlight obvious one discussed swift developer default implementation protocol currently protocol member never implementation could allow one provide implementation used default conforming type supply implementation eg protocol bag associatedtype element equatable func contains element element bool func containsall sequence sequenceiteratorelement element element bool x element contains x return true return false struct intbag bag typealias element int func contains element int bool okay containsall requirement satisfied default implementation one get effect protocol extension today hence classification feature mostly syntactic improvement protocol bag associatedtype element equatable func contains element element bool func containsall sequence sequenceiteratorelement element element bool extension bag func containsall sequence sequenceiteratorelement element element bool x element contains x return true return false moving clause outside angle bracket clause generic function come early declaration although generally much le concern client function parameter result type follow one thing contributes bracket example consider containsall signature func containsall sequence sequenceiteratorelement element element bool one could move clause end signature important generic parameter parameter result func containsall sequence element bool sequenceiteratorelement element renaming syntax bit oddity swift used compose protocol together mostly create value existential type eg var x protocol nscoding nscopying weird type name start lowercase letter swift developer probably never deal feature unless happen look definition typealias protocol might better name functionality without bracket could keyword followed bracket could take role today var x nscoding nscopying read much better type conforms nscoding see section generalized additional feature space maybe number feature get discussed timetotime could fit generic system clear belong swift important question feature category cool thing everyday swift developer benefit addition feature without strong motivating example none move along dynamic dispatch member protocol extension requirement protocol currently use dynamic dispatch lead surprise protocol p func foo extension p func foo print func bar print struct x p func foo print func bar print let x x xfoo xfoo xbar xbar let p p x pfoo xfoo pbar pbar swift could adopt model member protocol extension dynamically dispatched named generic parameter specifying generic argument generic type argument always positional dictionary string int dictionary whose key type string whose value type int convention one could permit argument labeled eg var dictionary key string value int feature make sense swift gain default generic argument generic argument label would allow one skip defaulted argument generic value parameter currently generic parameter always type one could imagine allowing generic parameter value eg struct multiarray let dimension int specify number dimension array subscript index int get require indicescount dimension suitably general feature might allow u express fixedlength array vector type standard library component perhaps also allow one implement useful dimensional analysis library tackling feature potentially mean determining expression diving dependenttyping hence higherkinded type higherkinded type allow one express relationship two different specialization nominal type within protocol example think self type protocol really allows u talk relationship u type u example could allow operation collection return collection kind different operation eg let intarray array int intarraymap string produce array string let intset set int intsetmap string produce set string potential syntax borrowed one thread higherkinded type http us constraint describe functor protocol protocol functor associatedtype func fmap fb fb self f fba fb specifying type argument us generic function type argument generic function always determined via type inference example given func f one directly specify either one call determined via type one us context given particular function type eg x int void would infer int could permit explicit specialization eg let x f int x type int void unlikely feature category requested various time fit well generic system cause part model become overly complicated unacceptable implementation limitation overlap significantly existing feature generic protocol one commonly requested feature ability parameterize protocol example protocol indicates self type constructed specified type protocol constructiblefromvalue init value implicit feature ability given type conform protocol two different way type might constructible float double eg struct real extension real constructiblefrom float init value float extension real constructiblefrom double init value double request feature actually want different feature tend use parameterized sequence example eg protocol sequence element func foo string sequence string work sequence containing string actual requested feature ability say type conforms sequence whose element type covered section importantly modeling sequence generic parameter rather associated type tantalizing wrong want type conforming sequence multiple way among thing loop stop working lose ability dynamically cast existential without binding element type see use case similar constructiblefromvalue protocol seem justify potential confusion associated type generic parameter protocol better latter private conformance right protocol conformance le visible minimum conforming access access therefore public type conforming public protocol must provide conformance publicly one could imagine removing restriction one could introduce private conformance public protocol p public struct x extension x internal p x conforms p within module main problem private conformance interaction dynamic casting code func foo value let x value p print foo x circumstance print foo defined within module conformance x p call defined within module conformance x p never either first two answer requires significant complication dynamic casting infrastructure take account module particular dynamic cast occurred first option existential formed second option third answer break link static dynamic type acceptable result conditional conformance via protocol extension often get request make protocol conform another protocol effectively expansion notion protocol extension example protocol p func foo protocol q func bar extension q p every type conforms q also conforms p func foo implement requirement term bar func f p struct x q func bar f x okay x conforms p conformance q p extremely powerful feature allows one map abstraction one domain another domain eg every matrix graph however similar private conformance put major burden dynamiccasting runtime chase arbitrarily long potentially cyclic chain conformance make efficient implementation nearly impossible potential removal generic system seem like good candidate reduction scope feature get used fairly pervasively standard library feel overly anachronistic however associated type inference associated type inference process infer type binding associated type requirement example protocol iteratorprotocol associatedtype element mutating func next element struct intiterator iteratorprotocol mutating func next int use infer element int associated type inference useful feature used throughout standard library help keep associated type le visible type simply want conform protocol hand associated type inference place swift global type inference problem historically major source bug implementing fully correctly requires drastically different architecture type checker value feature worth keeping global type inference swift language deliberatively avoided global type inference elsewhere language existentials existentials really generic per se two system closely intertwined due mutable dependence protocol generalized existentials restriction existential type came implementation limitation reasonable allow value protocol type even protocol self constraint associated type example consider iteratorprotocol could used existential protocol iteratorprotocol associatedtype element mutating func next element let iteratorprotocol itnext permitted could return ie existential wrap actual element additionally reasonable want constrain associated type existential eg sequence whose element type could expressed putting clause per protocol let string sequence iteratorelement string leading indicates talking dynamic type ie type conforming sequence protocol reason support arbitrary clause within verygeneral syntax bit unwieldy common case easily wrapped generic typealias see section typealias anysequence element sequence iteratorelement element let string anysequence string opening existentials generalized existentials described still trouble protocol requirement involve self associated type function parameter example try use equatable existential protocol equatable func lh self rh self bool func lh self rh self bool let equatable let equatable error necessarily dynamic type one explicit way allow operation typesafe manner introduce operation sort extract give name dynamic type stored inside existential example let openas type copy value stored let also okay type know equatable thought doug next part html attachment scrubbed url http information swiftevolution mailing list
177,Lobsters,swift,Swift programming,Non-linear loops,http://ericasadun.com/2016/02/26/non-linear-loops/,nonlinear loop,update,yesterday someone asking loop nonlinear sequence normally stuff like print stuff like print floating point ensures get last value add kind epsilon working cstyle loop reason floating point math ditto stride leaving floating point aside question day nonlinear sequence example loop using map applies function across value offering simple nonlinear value sequence math inside forin statement quickly become ugly much nicer map named function across integer sequence implement transformation directly loop declaration course separate function like throw function place swap inversesquare whatever function prefer functionality depends count iteration example kind trig across every want pull count calculation could used loop applied function like update joe groff writes accrue error repeatedly add avoid ugly epsilon iterating exact value scaling say lazymap produce accurate tenth going go way think prefer using integer math converting solution shown following screenshot related
178,Lobsters,swift,Swift programming,Swift Abstract Syntax Tree,http://ankit.im/swift/2016/02/29/swift-abstract-syntax-tree/,swift abstract syntax tree,issue,swift compiler interesting mode dumpast output abstract syntax tree swift source code ast used represent source code form tree containing syntactic information eg piece code like import foundation class foo struct foostruct func foostructfunc func foofunc struct bar func barfunc generate syntax tree sourcefile importdecl foundation classdecl foo typefootype accessinternal structdecl foostruct typefoofoostructtype accessinternal funcdecl foostructfunc typefoofoostruct accessinternal bodyparams patterntyped implicit typefoofoostruct patternnamed implicit typefoofoostruct self patterntuple type name bracestmt constructordecl implicit init typefoofoostructtype foofoostruct accessinternal designated bodyparams patterntyped implicit typeinout foofoostruct patternnamed implicit typeinout foofoostruct self patterntuple implicit type name bracestmt returnstmt funcdecl foofunc typefoo accessinternal bodyparams patterntyped implicit typefoo patternnamed implicit typefoo self patterntuple type name bracestmt destructordecl implicit deinit typefoo accessinternal objc bodyparams patterntyped implicit typefoo patternnamed implicit typefoo self bracestmt constructordecl implicit init typefootype foo accessinternal designated bodyparams patterntyped implicit typefoo patternnamed implicit typefoo self patterntuple implicit type name bracestmt returnstmt structdecl bar typebartype accessinternal funcdecl barfunc typebar accessinternal bodyparams patterntyped implicit typebar patternnamed implicit typebar self patterntuple type name bracestmt constructordecl implicit init typebartype bar accessinternal designated bodyparams patterntyped implicit typeinout bar patternnamed implicit typeinout bar self patterntuple implicit type name bracestmt returnstmt output represented something like might easier understand ommited thing like implicit init deinit etc simplicity issue swiftpm need conform subclass xctestcase xctestcaseprovider protocol swift linux support reflection right boilerplate code generated automatically basically mean need find method inside subclass xctestcase begin test signature generate boiler plate code syntax tree help let start creating node ast class node var content string var node node node hold content form string array node node output ast contains node content node nested inside parenthesis similarly let declare stack hold node currently processing var stack array node also need thing bool quotestarted make sure parse thing inside quote string data hold current node content array node source hold reference source swift module multiple source file var quotestarted false var data var source node start iterating ast output put node stack whenever encounter pop encounter connecting popped node top node stack char aststringcharacters char quotestarted let node node datacharacterscount let lastnode stacklast let chuzzed datachuzzle lastnodecontents chuzzed lastnodecontents sourcefile source lastnode stackappend node data else char quotestarted case let poppednode stackremovelast stackcount datacharacterscount let chuzzed datachuzzle poppednodecontents chuzzed stacklast node poppednode data else data data string char char char quotestarted quotestarted thats asts inside source array since interested class method let declare type enum enum type string case class classdecl case fn funcdecl case unknown add computed property node get type iterating node var type type contentshasprefix typeclassrawvalue return class contentshasprefix typefnrawvalue return fn return unknown start iterating print class method source source node sourcenodes nodetype class print print nodename print classnode nodenodes classnodetype fn print classnodename ran swiftpm test module result describetests testdescribingnomodulesthrows dependencyresolutiontestcase testinternalsimple testinternalcomplex testexternalsimple testexternalcomplex testindirecttestsdontbuild invalidlayoutstestcase testnotargets testmultipleroots modulemapstestcase fixture name cmodulename rootpkg body validlayoutstestcase testsinglemodulelibrary testsinglemoduleexecutable testsinglemodulecustomizedname testsinglemodulesubfolderwithswiftsuffix testmultiplemoduleslibraries testmultiplemodulesexecutables testpackageidentifiers versiongraphtests testnograph testonedependency testonedepenencywithmultipleavailableversions testtwodependencies testtwodirectdependencies testtwodirectdependencieswhereonealsodependsontheother testsimpleversionrestrictedgraph testcomplexversionrestrictedgraph testversionconstrain testtwodependenciesrequiremutuallyexclusiveversionsofthesamedependencysimple testtwodependenciesrequiremutuallyexclusiveversionsofthesamedependencycomplex testversionunavailable mockcheckout constrain setversion mockfetcher find url finalize fetch url gettests testrawclonedoesnotcrashifmanifestisnotpresent testrangeconstrain testgitrepoinitialization gittests testhasversion testhasnoversion testcloneshouldnotcrashwihouttags testcloneshouldcrashwihouttags manifesttests loadmanifest line body testmanifestloading testnomanifest packagetests testbasics testexclude testemptytestdependencies testtestdependencies testtargetdependencyisstringconvertible tomltests testlexer testparser testparsingtables packagetests testmatchdependencywithprereleaseversion versiontests testequality testnegativevaluesbecomezero testcomparable testdescription testfromstring testsort testrange testsuccessor testpredecessor packagetests testuid moduletests testignoresfiles testmoduletypes filetests loadinputfile testopenfile testopenfilefail testreadregulartextfile testreadregulartextfilewithseparator rmtreetests testdoesnotfollowsymlinks pathtests test testprecombined testextraseparators testempties testnormalizepath testjoinwithabsolutereturnslastabsolutecomponent testparentdirectory walktests testnonrecursive testrecursive testsymlinksnotwalked testwalkingadirectorysymlinkresolvesonce stattests testisdir testisfile testrealpath testbasename relativepathtests testabsolute testrelative testmixed resourcestests testresources shelltests testpopen testpopenwithbufferlargerthanthatallocated testpopenwithbinaryoutput stringtests testtrailingchomp testseparatorchomp testemptychomp testchuzzle urltests testschema work pretty good gist full code available
179,Lobsters,swift,Swift programming,Swift commit access expanded to non-Apple contributors,https://swift.org/blog/swift-commit-access/,swift commit access expanded nonapple contributor,expanding commit access code owner list contributing code,expanding commit access february swift continuous integration system established proven like grant commit access frequent basis project contributor established track record good contribution would like commit access please send email code owner list list nontrivial pull request accepted without modification detail mean commit access please see contributing code section
180,Lobsters,swift,Swift programming,Swift pull request: Port to Android,https://github.com/apple/swift/pull/1442,swift pull request port android,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
181,Lobsters,swift,Swift programming,Swifton: A Ruby on Rails inspired Web Framework for Swift,https://github.com/necolt/Swifton,swifton ruby rail inspired web framework swift,swifton getting started version swiftorg swiftenv swiftenv todoapp contributing todoapp issue list todoapp routing controller controller responder controller filter model view stencil json support middleware application server venicex building production deployment heroku todoapp herokubuildpackswift docker,important nt see way make web development great ruby rail django static nature current swift hope thing change point return active development swifton ruby rail inspired web framework swift run linux o x getting started install development snapshot version swiftorg via swiftenv osx highly recommend swiftenv latest swift able coexist system wide swift come xcode swift version show something like swift version checkout todoapp example project run swift build inside app dependency throw deprecation warning run builddebugswiftontodoapp open http browser contributing contribution welcome easiest way start contributing swifton setup todoapp pick one issue issue list propose enhancement find swifton source code swiftontodoapppackagesswifton version directory package inside package directory come git repository feel free change compile test todoapp help check change avoid regression write test run swift build swift test run rm r package test inside swifton folder test crash commit push change open pull request enjoy routing swifton come ready use router also use router long accepts request return response route defined mainswift file configured router passed interface supporting server router allows define resource regular route let router routercreate route routeresources todos controller todoscontroller equivalent let router router routerget todosnew todoscontroller new routerget todos id todoscontroller show routerget todos id edit todoscontroller edit routerget todos todoscontroller index routerpost todos todoscontroller create routerdelete todos id todoscontroller destroy routerpatch todos id todoscontroller update configured route passed application server serve request routerrespond request controller controller inherits applicationcontroller class inherits controller class action closure accepts request object return response object class todoscontroller applicationcontroller shared todo variable used pas value settodo filter action var todo todo override func controller supercontroller set filter settodo specified action beforeaction settodo show edit update destroy render todo instance index template viewstodosindexhtmlstencil action index request let todos todos todoallattributes return render todosindex todos render todo instance set filter action show request return render todosshow selftodo render static new template action new request return render todosnew render todo instance edit form action edit request return render todosedit selftodo create new todo instance redirect list todos action create request todocreate requestparams return redirectto todos update todo instance redirect updated todo instance action update request selftodo update requestparams return redirectto todos selftodo id destroy todo instance action destroy request tododestroy selftodo return redirectto todos set todo shared variable action use filter settodo request redirect todos list todo instance found guard let todofind requestparams id else return selfredirectto todos selftodo todo run next filter action return selfnext controller responder respondto allows define multiple responder based client accept header action show request return respondto request html render todosshow selftodo json renderjson selftodo controller filter swifton controller support beforeaction afteraction filter run filter action correspodingly filter closure return response controller proceeds execution filter return selfnext actually nil otherwise return response object nt proceed execution filter action filter settodo request redirect todos list todo instance found guard let todofind requestparams id else return selfredirectto todos selftodo todo run next filter action return selfnext model swifton orm agnostic web framework use orm choice swifton come simple inmemory memorymodel class inherit use apps simple class user memorymodel userallcount var user usercreate name saulius surname grigaitis userallcount user name saulius user surname grigaitis userupdate name james surname bond user surname bond userdestroy user userallcount option need persistence view swifton support mustache like template via stencil template language view rendered controller method render templatepath object object need either conform htmlrenderable protocol either string type allows pas complex structure tbody todo todos tr td todotitle td td todocompleted td td href todos todoid show td td href todos todoid edit edit td td dataconfirm sure rel nofollow datamethod delete href todos todoid destroy td tr endfor tbody view loaded view directory default also change default setting changing value swiftonconfigviewsdirectory preferable mainswift file currently view cached nt need restart server recompile view changed static asset javascript cs image etc loaded public directory default also change default setting changing value swiftonconfigpublicdirectory preferable mainswift file json support renderjson object generates return json object object must conform jsonrenderable protocol action show request return respondto request html render todosshow selftodo json renderjson selftodo middleware mainswift probably best place put middleware simply wrap router instance middleware even nest multiple middlewares serve request routerrespond request application server swifton come venicex based http server swifton support http standard swift easily use supporting server building production build release configuration better performance swift build configuration release deployment heroku example todoapp deployed heroku using herokubuildpackswift click button automatically set example run heroku account docker swifton deployed docker example deploy docker
182,Lobsters,swift,Swift programming,"""A small change to the hashing function has a huge impact on the shape of the binary tree...""",https://github.com/apple/swift/commit/422764545c720f696bf7061513eac30941d39cf4,small change hashing function huge impact shape binary tree,permalink browse file addition deletion stdlibpublicruntimemetadatacacheh reload reload,permalink browse file runtime improve metadata hashing function input hash function pointer predictable patten hash generating using metadata cache good result generated deep search tree small change improved utilization length field another bitrotate round improved quality hash function going attach github commit two picture first picture binary old hash first tree deep sparse second picture new hash function tree wide uniform used benchmark typeflood debug mode generate huge amount metadata loading branch information showing changed file addition deletion stdlibpublicruntimemetadatacacheh class entryref sizet hash sizet h length sizet h length unsigned length h h h sizeof sizet h sizet args sizet args return h h return h h sizeof sizet const void const begin const return args toggle file note perform action time signed another tab window reload refresh session signed another tab window reload refresh session
183,Lobsters,swift,Swift programming,The Elmification of Swift,https://medium.com/design-x-code/elmification-of-swift-af14b7f92b30,elmification swift,first even care elm architecture declarative fractal referentially transparent go signal andr√© staltz elm architecture model update view model update view signaladdress action view excellent achieve swift rxswift reactivex observables rxmarbles interactive diagram map cool story bro get protocol typealias typealias typealias static func static func static func protocol static func static func class class class node enum case case case blah blah blah least make bit concrete class typealias class func return enum class func switch case return struct let class func let let return virtual representation class func let return class func let let return added protocol rxswift ok think get happening fit together let let let switch case case let return let let let let let let let let let let let nice left lovely overall takeaway anything else http githubcommomentumworksswiftelm swifters slack channel twitter resource,first even care elm architecture told kidding kindabut seriously care elm allows write ui declarative manner using fractal referentially transparent component making app significantly easier reason easier test given arbitrary model calculate result rendering given component ui even entire ui go give brief background elm us functional reactive programming provides almost silky smooth haskelllike syntax building webapps frp mean essentially reacting stream given event value using functional programming technique elm stream called signal using frp able write ui completely declarative way later point know nothing frp go quick read andr√© staltz fantastic intro frp carry onthe elm architecture result fractal application built component expose model update function view follows type alias model type action dothing dootherthingupdate action model modelupdate action model signaladdress action model htmlview address model model simply type underlying model component basic text field model would type alias string update function take action model applies action model return result note sideeffect free completely functional view take given model return corresponding html model building webapp signaladdress action thingy event stream sending new action example page contained button sent dootherthing action would sending action stream fractal keep breaking component component made look sticking basic model update view pattern throughout define simple base level component build much complex one resulting application look easy understand reason every layer view function pure function effectively map given model html free u write completely declarative style example view function individual counter would view address model div button onclick address decrement text div countstyle text tostring model button onclick address increment text worry much syntax unfamiliar point take model build html component manner referentially transparentexcellent achieve swift fantastic question young squire answer first let introduce wonderful rxswift implementation reactivex swift remember frp using stream event value elm instance called signal well use rxswift provide stream making use observables applying functional programming concept eg observable int applying map hell mean top part represents value observable given time axis case represents time circle represent value observable updated bottom part represents new stream new observable created result applying mapping functionif find bit confusing actually great site called rxmarbles provides interactive diagram allowing see result applying various operator rx observables absolutely check interactive diagram map cool story bro get first create basic component protocol component typealias model typealias action typealias c context static func initmodel static func update action model static func view model context c base base node right form basis fractal pattern model update elm may noticed view take context rather stream elm architecture also advocate use context node returned view func going form virtual view hierarchy show shortly base struct containing component id parent id frameas returning html rather returning form nsview need base component build protocol nativecomponent component static func create frame nsrect model nsview static func wireup context c nsview nsview publishsubject class viewcomponent nativecomponent parent nsviewclass buttoncomponent nativecomponent nsbuttonclass textfieldcomponent nativecomponent nstextfieldso introduced function building nsview nativecomponent function wiring component return stream publishsubject poking new model update come back shortly ok taking step back returned node component view function basically going virtual view hierarchy enum node case view node base cruft case button buttonmodel buttoncontext base cruft case textfield textfieldmodel textfieldcontext base cruft care limited virtual hierarchy parent view button text field simple use build virtual view use render appblah blah blah least make bit concrete let build simple app creates two text field linked together first define model class linkedlabels component typealias textfieldcomponentm model class func initmodel return textfieldcomponentinitmodel model case mega simple model textfieldcomponent basic building block initmodel delegate onto component senum case update textfieldcomponenta actionclass func update action model switch action case update let tfaction return textfieldcomponentupdate tfaction model action slightly complicated wrap textfieldcomponent action also delegate call component update function similar way modelstruct c context let dispatch class func view model context c node nodetextfield let left textfieldcomponentview model context textfieldcomponentc dispatch contextdispatch aupdate base id frame etc nodetextfield let right textfieldcomponentview model context textfieldcomponentc dispatch contextdispatch aupdate base id frame etc nodeview nodetextfield nodetextfield return viewcomponentview left right context nsnull base id frame etc note context textfieldcomponent exactly context component context contains dispatch function wrap one action creating textfieldcomponent context wrap virtual representation correct need turn actual nsview create wireup function nativecomponent come play look textfieldcomponent class func create frame nsrect model model nsview let nstextfield nstextfield frame frame nstextfieldstringvalue model return nstextfield well simple enough wireup function class func wireup context context nsview nsview publishsubject let channel publishsubject let nstextfield nsview nstextfield channelmap subscribe nstextfieldrxtext adddisposableto disposebag nstextfieldrxtext subscribenext text contextdispatch aupdate text adddisposableto disposebag return channel lot going worry break first create stream update textfield publishsubject need able push update stream might better create channel elsewhere pas function idea create publishsubject textfieldcomponentmodel swift support variance support protocol level next subscribe channel map value string feed nstextfield stringvalue via rxtext property added protocol rxswift mean time new value passed stream nstextfield updated valuewhen update made nstextfield stringvalue want dispatch update actionthe result nstextfield push model change feed u delicious action someone start typing itok think get happening fit together build component wire need write main loop respond action update ui accordingly first concentrate generating new model action let action publishsubject appaction let loop actionsscan appinitmodel model appaction let updatedmodel appmodel switch appaction case init updatedmodel model case action let action updatedmodel appupdate action model return updatedmodel se performing scan action stream similar fold emits result application closure applying see doc apply action return resultant model basic init action return initial model wrapper action delegate app update function next want subscribe model produced loop use feed ui follows loopsubscribenext model generate virtual node let updatedroot appview appcontext dispatch actionsonnext appactionaction model model base base diff previous virtual node let allnodes updatedrootflatten let allnodeids set allnodesmap id let addednodes updatednodes removednodes compare allnodes existing node create nsviews added node vnode addednodes let component nativecomponent componentfornode vnode let nsview componentcreate vnodeframe vnodemodel add nsview collection current view add nsview subview either parent root view let stream componentwireup vnodecontext nsview add stream collection stream stream next vnodemodel cheated little including function node enum illustrate point full code linked end article remove node view due ditched vnode removednodes let nsview grab remove collection current view nsviewremovefromsuperview let stream grab remove collection stream stream completed stream dispose push updated model updated node vnode updatednodes let nsview grab collection current view nsviewframe vnodeframe let stream grab collection stream streamon next vnodemodel perform cleanup push init action action stream adddisposableto disposebag actionson next appactioninit go loop update model response action generates virtual view diffs existing view update ui accordinglynice left well covered styling pretty important part elm achieves styling via cs expect like able apply styling similar manner still yet done alternatively could become part component model still much discussion needed around thisalso rxswift mainly focus io component whereas need use osx one lot component currently unsupported though started working adding rxswift lovely overall takeaway using architecture like able create application fractal nature resulting pattern pretty much writes write ui completely declarative styledefine component easy reason improving ability test greatlyanything else code exploration found github http githubcommomentumworksswiftelmwe continuing investigation somewhat taken bit pivot looking component model stored metadata documenting way look thatif question would like get contact swifters slack channel twitteroh course interest recruiting resource
184,Lobsters,swift,Swift programming,Swift API Design Guidelines,https://swift.org/documentation/api-design-guidelines/,swift api design guideline,,default argument improve readability hiding irrelevant information example let order lastnamecompare royalfamilyname option range nil locale nil become much simpler let order lastname compare royalfamilyname default argument generally preferable use method family impose lower cognitive burden anyone trying understand api extension string description public func compare string option compareoptions range range index nil locale locale nil ordering may simple much simpler extension string description public func compare string ordering description public func compare string option compareoptions ordering description public func compare string option compareoptions range range index ordering description public func compare string option stringcompareoptions range range index locale locale ordering every member method family need separately documented understood user decide among user need understand occasional surprising example foo bar nil foo always tedious process ferreting minor difference mostly identical documentation using single method default provides vastly superior programmer experience
186,Lobsters,swift,Swift programming,Swift Library Evolution,https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst,swift library evolution,library evolution default behavior safe swift package manager transparent inlinable function inlinable function see,note document us sphinxspecific feature available github proper rendering download build doc since swift abistable platform supported library evolution ability change library without breaking source binary compatibility model intended serve library designer whose library evolve time library must backwardscompatible meaning existing client continue work even library updated forwardscompatible meaning future client able run using current version library simple term last year apps work year library next year apps work year library document intended specification change made without breaking binary compatibility library author want make change jump relevant section document see allowed anything listed document assumed unsafe ie changing break binary compatibility library evolution formally described document kept date new feature added language one swift primary design goal always allow efficient execution code without sacrificing loadtime abstraction implementation abstraction implementation mean code correctly written published interface correctly function underlying implementation change anything still satisfies original interface many potential reason provide sort abstraction apple primary interest making easy painless internal external developer improve ecosystem apple product creating good secure program library subtle deployment problem andor unnecessary dependency behavior implementation would work goal current design swift provide optout loadtime abstraction implementation language feature alone would either incur unacceptable cost force widespread optingout abstraction intend mitigate primarily designing language implementation minimize unnecessary unintended abstraction avoiding unnecessary language guarantee taking advantage flexibility limit loadtime cost within domain defines entity detail implementation available entity exposed outside defining module implementation constrained default entity exposed outside defining module independently desirable reduce accidental api surface area happens also interact well performance design last point specific case general tenet swift default behavior safe possible choice made entity first published limit evolution future document frequently refer library vends public apis single client us principle apply even multiple library multiple client involved also us term abipublic introduced document primarily concerned binary compatibility ie change safely made library release break memorysafety typesafety cause client fail run secondary concern identifying binarycompatible sourcebreaking change binarycompatible sourcebreaking change client compiled previous version library likely behave differently client compiled new version library note rule guarantee change semantically backwardscompatible forwardscompatible change library existing api affect observable behavior may affect client responsibility library author sure change making semantically correct preserving precondition postconditions invariant previouslypublished apis model largely interest library bundled client distribution via source static library embeddedsandboxed dynamic library used swift package manager client always us particular version library need worry backwards forwardscompatibility binary level developer single app target forced think access control anyone writing bundled library ideally required use annotation described order achieve full performance note model may however useful library author want preserve source compatibility though document mostly nt discus additionally annotation useful performance today inlinable term resilience come occasional use fragile describe certain construct strict binary compatibility rule example client use c struct fragile library change field struct client use break swift changing field struct automatically cause problem existing client say struct resilient section describes various change safe make releasing new version library ie change break binary compatibility organized declaration type abipublic toplevel function fairly restricted changed following change permitted changing body function long inlinable see changing internal parameter name ie name used within function body label part function full name reordering generic requirement generic parameter adding default argument expression parameter changing removing default argument binarycompatible sourcebreaking change adding removing discardableresult warnunqualifiedaccess attribute change permitted following particularly note abipublic function may change parameter return type abipublic function may change generic requirement abipublic function may change external parameter name label abipublic function may add remove reorder parameter whether default argument abipublic function throw may become nonthrowing vice versa escaping attribute may added removed parameter adding removing function builder parameter binarycompatible sourcebreaking change function common example abstraction implementation function declaration published api body may change library version long upholds semantic contract applies functionlike construct well initializers accessors deinitializers however sometimes useful provide body client well common reason function performs simple operation inlining save overhead crosslibrary function call allow optimization caller function access frozen struct nonpublic member allows library author preserve invariant still allowing efficient access struct function generic performance may greatly increased specialization client abipublic function marked inlinable attribute make body available client part module public interface client required inline function marked inlinable note legal change implementation inlinable function next release library however change must made understanding affect existing client standard example binarycompatible sourcebreaking change local function closure within inlinable function treated alwaysemitintoclient see client inlines containing function must emit copy local function closure important case necessary change inlinable function later removing inlinable attribute completely say reference private implementation detail abipublic safe change however existing client course affected change future use function must take account although supported feature arbitrary library time public transparent function implicitly marked inlinable body inlinable function method accessor initializer deinitializer inlined another module must make assumption rely knowledge current module trivial example using method public struct var x double public init x double double extension inlinable public func distance double let deltax selfx otherx let deltay selfy othery return sqrt deltax deltax deltay deltay written distance method safe inline next release library could well replace implementation polar representation public struct var r theta double public init x double double x property disappeared avoid body inlinable function following restriction enforced compiler may define local type must reference private fileprivate entity must reference internal entity except declared usablefrominline inlinable function computed property subscript annotated alwaysemitintoclient similar inlinable declaration except declaration part module abi meaning client must always emit copy result removing declaration annotated alwaysemitintoclient binarycompatible sourcebreaking change todo implementation alwaysemitintoclient incomplete probably graduate evolution proposal default argument expression function abipublic implicitly alwaysemitintoclient subject restriction inlinable function except also must reference nonpublic entity even usablefrominline inlinable make sure default argument expression always written explicitly caller given abipublic modulescope variable declared var following change permitted adding removing public setter computed variable adding removing nonabipublic setter changing stored variable computed variable vice versa long previously abipublic setter removed special case adding removing lazy stored property changing body accessor property marked inlinable see adding removing observing accessor willset didset tofrom existing variable effectively modifying body setter changing initial value stored variable adding removing weak tofrom variable optional type adding removing unowned tofrom variable adding removing nscopying tofrom variable variable getonly nonabipublic setter may replaced let constant adding property wrapper variable changing one property wrapper another long abipublic setter projected value foo removed removing property wrapper variable long property wrapper nt projected value foo abipublic modulescope constant declared let following change permitted changing value constant replacing constant variable toplevel computed variable marked inlinable like function restricts change fair amount adding abipublic setter computed variable still permitted adding removing nonabipublic setter still permitted changing body accessor binarycompatible sourcebreaking change inlinable accessors must follow rule inlinable function described swift structs little flexible c counterpart default following change permitted reordering existing member including stored property unless struct marked frozen see adding new member including stored property changing existing property stored computed vice versa unless struct marked frozen see special case adding removing lazy stored property changing body method initializers accessors adding removing observing accessor willset didset tofrom existing property unless struct marked frozen see effectively modifying body setter removing nonabipublic member including stored property adding conformance abipublic protocol introduced release see adding removing conformance nonabipublic protocol adding dynamiccallable struct important aspect swift struct value semantics layout note adding stored property struct breaking change even swift synthesis memberwise noargument initializers initializers always internal thus exposed client outside module safe add remove mutating nonmutating member accessor within struct conformance added type version library important nt accessed version mean safe add new conformance abipublic protocol protocol introduced protocol come separate module safe way conform todo coming way either availability annotation protocol conformance way emit fallback copy conformance client older library version use highly desired part struct method initializers treated exactly like toplevel function permit modification also marked inlinable restriction inlinable initializers must always delegate another initializer assign entire value self since new property may added new release reason initializers declared outside struct module must always delegate another initializer assign self enforced compiler struct property behave largely toplevel variable constant permit modification also allow adding removing initial value entirely subscript behave largely property except stored subscript mean following change permitted adding removing public setter adding removing nonabipublic setter changing body accessor changing index parameter internal name ie name used within accessor body label part subscript full name reordering generic requirement generic parameter adding default argument expression index parameter changing removing default argument binarycompatible sourcebreaking change like property subscript marked inlinable make changing body accessor binarycompatible sourcebreaking change inlinable accessors must follow rule inlinable function described opt flexibility struct may marked frozen promise stored property added removed struct even nonabipublic one allows compiler optimize stored property also must observing accessors effect reordering stored instance property public nonpublic permitted reordering member still permitted adding new stored instance property public nonpublic permitted adding new member still permitted changing existing instance property stored computed vice versa permitted similarly adding removing lazy stored property permitted changing body existing method initializers computed property accessors still permitted adding observing accessors stored instance property public nonpublic permitted checked compiler removing stored instance property permitted removing nonabipublic member still permitted adding new protocol conformance still permitted per usual restriction removing conformance nonabipublic protocol still permitted adding changing removing property wrapper permitted additionally type stored instance property includes struct enum struct enum must abipublic includes generic parameter member tuples property wrapper stored instance property note restriction apply static property frozen structs static member effectively behave toplevel function variable adding removing stored property forbidden existing property may still modified limited way existing nonabipublic property may change access level nonpublic access level usablefrominline may added internal property current availability version necessary usablefrominline property may made public adding removing frozen existing struct forbidden initializer frozen struct may declared inlinable even delegate another initializer frozen struct guaranteed use layout c struct similar shape struct necessary defined c header imported swift note may add different feature control layout day something equivalent feature restrict swift useful thing like minimizing member padding layout frozen structs part stable abi apple platform something ca nt revised future appropriate compatibility consideration least swift structs nt guarantee tail padding c structs default library owner may add new case public enum release without breaking binary compatibility structs result fair amount indirection dealing enum value order potentially accommodate new value specifically following change permitted adding new case unless enum marked frozen see reordering existing case binarycompatible sourcebreaking change unless struct marked frozen see particular caseiterable rawrepresentable default implementation may affect client behavior adding raw type enum one adding member removing nonabipublic member adding new protocol conformance restriction structs removing conformance nonabipublic protocol adding dynamiccallable enum note enum value known case proven belong set known case compiler course free use efficient representation value may discard field structs provably never accessed adding removing objc attribute enum permitted affect enum memory representation backwardscompatible part enum initializers treated exactly like toplevel function permit modification also marked inlinable restriction rule enum method subscript identical struct member library owner may opt flexibility marking abipublic enum frozen frozen enum may add new case future guaranteeing client current set enum case exhaustive particular adding new case permitted reordering existing case permitted adding raw type still permitted adding member still permitted removing nonabipublic member still permitted adding new protocol conformance still permitted removing conformance nonabipublic protocol still permitted note public frozen enum allowed nonpublic case client library would still treat enum opaque would still able handle unknown case switch statement adding removing frozen existing enum forbidden even default nonfrozen enums adding new case done lightly client attempting exhaustive switch enum case likely handle new case well safe change make protocol member default may added associated type new optional requirement may added objc protocol member may reordered including associated type changing internal parameter name function subscript requirement permitted reordering generic requirement permitted generic parameter discardableresult warnunqualifiedaccess attribute may added removed function requirement new associatedtype requirement may added appropriate availability long default implementation new nontype requirement may added appropriate availability long unconstrained default implementation requirement us self protocol requirement using self associated type binarycompatible sourcebreaking change due restriction protocol value type change protocol forbidden including adding removing refined protocol removing existing requirement type nontype removing default type associated type making existing requirement optional making non objc protocol objc vice versa adding removing protocol superclass inheritance clause associated type adding removing constraint clause protocol associated type protocol extension may freely modified see class instance always accessed reference flexible change many way release like structs class support following change reordering existing member including stored property changing existing property stored computed vice versa special case adding removing lazy stored property changing body method initializers accessors deinitializers adding removing observing accessor willset didset tofrom existing property effectively modifying body setter removing nonabipublic member including stored property adding new protocol conformance subject restriction structs removing conformance nonabipublic protocol adding dynamiccallable class omitted list free addition new member class little restrictive structs allow following change adding new convenience initializer adding new designated initializer class open open subclass previously inherited convenience initializers continue adding deinitializer adding new nonoverriding method subscript property adding new overriding member though class open type member may deviate member override changing type could incompatible existing override subclass finally class allow following change apply structs removing explicit deinitializer class declared deinitializer effectively implicit deinitializer moving method subscript property superclass declaration original member must remain along original availability body may consist simply calling new superclass implementation nonfinal override method subscript property initializer may removed long generic parameter formal parameter return type exactly match overridden declaration existing caller automatically use superclass implementation final added removed nonabipublic class nonabipublic member class iboutlet ibaction ibinspectable gkinspectable may added member already exposed objectivec either explicitly objc implicitly overriding protocol requirement removing binarycompatible sourcebreaking change member remains objc disallowed ibdesignable may added class removing considered binarycompatible sourcebreaking change changing class superclass another class b class b subclass class b along superclass class introduced latest version library detailed change class member permitted particular open added removed abipublic class member final may added removed abipublic class abipublic member presence final enables optimization dynamic may added removed abipublic member existing client would know invoke member dynamically final override member may removed even type match exactly existing client may performing direct call implementation instead using dynamic dispatch objc nonobjc may added removed class existing member except member already exposed objectivec nsmanaged may added removed existing abipublic member todo nsmanaged swift expose implementation detail client bad way want use nsmanaged framework binary compatibility concern need fix rdar new designated initializers may added open class would change inheritance convenience initializers existing subclass may depend open class also may change convenience initializer designated initializer vice versa new required initializer may added class convenience initializer initializer may call existing required initializers existing initializer may marked required modification permitted toplevel function also permitted class initializers convenience initializers may marked inlinable restriction toplevel function designated initializers may class instance method allow modification permitted toplevel function potential override complicates thing little allow following change changing body method changing internal parameter name ie name used within method body label part method full name reordering generic requirement generic parameter adding default argument expression parameter changing removing default argument binarycompatible sourcebreaking change adding removing discardableresult warnunqualifiedaccess attribute class instance method may marked inlinable restriction struct method additionally nonoverriding final method may marked inlinable class instance property allow modification permitted struct property potential override complicates thing little variable property declared var allow following change adding removing computed setter nonopen property adding removing nonabipublic setter changing stored property computed property vice versa long previously abipublic setter removed changing body accessor adding removing observing accessor willset didset tofrom existing variable effectively modifying body setter adding removing changing initial value stored variable adding removing weak variable optional type adding removing unowned variable adding removing nscopying variable adding property wrapper nonopen variable changing one property wrapper another long abipublic setter projected value foo removed adding property wrapper open variable changing one property wrapper another long abipublic setter projected value foo added removed removing property wrapper variable long property wrapper nt projected value foo adding public setter open property binarycompatible sourcebreaking change existing override know setter likely behave correctly constant property declared let still permit changing value well adding removing initial value entirely nonoverriding final computed property instance class may marked inlinable behaves described struct property subscript behave much like property inherit rule struct counterpart small change adding removing public setter nonopen subscript permitted adding removing nonabipublic setter permitted changing body accessor permitted changing index parameter internal name permitted reordering generic requirement generic parameter permitted adding default argument expression index parameter permitted changing removing default argument binarycompatible sourcebreaking change adding public setter open subscript binarycompatible sourcebreaking change existing override know setter likely behave correctly nonoverriding final class subscript may marked inlinable behaves described struct subscript extension largely follow rule type extend following change permitted adding new extension removing empty extension extension declare neither member protocol conformance moving member one extension another within module long extension exact constraint adding new member reordering member removing nonabipublic member changing body method initializers accessors additionally nonprotocol extension allow additional change moving member unconstrained extension declaration base type provided declaration module reverse permitted member would valid declare extension although note moving initializers type declaration may cause new one implicitly synthesized adding new protocol conformance subject restriction discussed structs removing conformance nonabipublic protocol note although related evolution worth noting member protocol extension satisfy protocol requirement overridable even conforming type class operator precedence group declaration entirely compiletime construct changing effect binary compatibility however affect source compatibility recommended existing operator changed except following making nonassociative precedence group left rightassociative change count binarycompatible sourcebreaking change public typealiases within structs enums protocol may used protocol conformance satisfy associated type requirement within library within client module well therefore changing member typealias way permitted break existing client recompile code get correct behavior toplevel typealiases exist compiletime changing underlying type one binarycompatible sourcebreaking change however typealias used type abipublic declaration library may actual breaking change would permitted always permitted change use public typealias underlying type vice versa location program typealiases require availability annotation despite compiletime construct order verify availability underlying type adding usablefrominline internal entity promise entity available link time containing module binary make safe refer entity inlinable function stored property frozen struct usablefrominline declaration shipped part o availability like public declaration entity ever made public open availability changed note nt usablefrominline special form public nt want imply everything public requiring override public usablefrominline class member may eventually made open compiler must assume new override may eventually appear outside module class marked open unless member marked final information see allowing library evolve inhibits optimization client code several way example function currently access global memory might future call freely reordered client code stored property may replaced computed property future client code must try access storage directly struct may additional member future client code must assume fit fixedsized allocation entity declared within module code using code permitted know detail entity declared entity changed code using recompiled however entity declared another module code using must conservative therefore receive conservative answer query example stored property may treated computed special case inlinable code must treated outside current module since inlined possible swift give library author freedom evolve code without breaking binary compatibility implication semantics performance client code library owner also tool waive ability make certain future change shipping library part o availability model guarantee client code never accidentally introduce implicit dependency specific version library glossary abi runtime contract using particular api entire library including thing like symbol name calling convention type layout information stand application binary interface abipublic describes entity part library abi marked public open usablefrominline inlinable swift see information api entity library client may use collection entity library contrasting spi entity available arbitrary client marked public open swift stand application programming interface backwardscompatible modification api break existing client may also describe api question binary compatibility general term encompassing backwards forwardscompatibility concern also known abi compatibility binarycompatible sourcebreaking change change break binary compatibility known either change behavior existing client potentially result error client recompiled case client nt recompiled may use new behavior old behavior even mix however always deterministic behavior program rerun break swift memorysafety typesafety guarantee recommended kind change avoided like break binary compatibility client target depends particular library usually easiest think application could another library certain case library application using xcode unit testing support duck typing objectivec ability treat class instance unrelated type long instance handle message sent note dynamic constraint entity type function member global swift program occasionally term entity also includes conformance since runtime presence depended client forwardscompatible api designed handle future client perhaps allowing certain change made without changing abi module primary unit code sharing swift code module always built together though may spread across several source file spi subset api available certain client stand system programming interface target document collection code single swift module built together compilation unit roughly equivalent target xcode
187,Lobsters,swift,Swift programming,Goto in Swift,https://harlanhaskins.com/2016/01/09/goto-in-swift.html,goto swift,assertmacrosh implementing swift class bug production gotoswift,goto statement c programming language despite usefulness flexibility somewhat despised among modernday programmer goto holdover assembly programming control flow explicitly transferred memory location label beginning set statement usually referred basic block transfer execution using kind branch jump statement example assembly syscall assume executed syscall move copy return value syscall beq zero iszero jump iszero else isone isnotzero executed result syscall zero j end iszero executed result syscall zero j end end jr ra whew mouthful essentially checking result syscall jumping different execution location based roughly c would translate int syscallret syscall assume work syscallret goto iszero isnotzero executed result syscall zero goto end iszero executed result syscall zero goto end end return roundabout way writing ifstatement common usage pattern language like c fussy ownership rule sometimes necessary run many task perform cleanup done matter happens primitive form errorhandling nothing else exists fact assertmacrosh apple defines set macro facilitate error handling scheme assertmacrosh require assertion exceptionlabel production build assertion expression evaluates false goto exceptionlabel using macro safely clean many statement return error otherwise file would remain unclosed int retval int err file file fopen filetxt rw err readfile file require err fail err processfile file require err fail err doanotherthing file require err fail err doathirdthing file require err fail goto cleanup skip fail fail retval err cleanup fclose file return retval example many task need happen file function need exit early go wrong course swift comprehensive nice error handling mechanism let file fopen filetxt rw defer fclose file let content try fileread try processfile file try doanotherthing file try doathirdthing file catch print error defer statement ensure file closed error happens implementing goto swift swift design abstract away notion instruction semipredictable instruction location never implemented kind explicit control flow jumping fantastic decision eliminates class bug production however swift offer method selective control flow statement switch statement function call replicate style goto using switch statement string case var x let label x isfour isnotfour switch label case isfour print four case isnotfour print four default break need switch string never exhaustive however give u way change execution another label really buy u ability jump execution location within existing location eg reswitch statement however take advantage three feature swift inner function recursion closure function closure swift inner function wrap reference variable within containing scope use pretend inner function part function body declare right recurse inner function different label effectively alter execution location imagine function print number func main var value value value print value reimplement using inner goto function like func main var value func goto label string switch label case cond goto x body end case body value print value goto cond case end break default break goto cond recursing goto cause another run switch statement different label kind control flow way however extensible solution lot boilerplate need declare goto inner function within function want use switch statement kinda hard visualize control flow well always hard goto switch noise define struct wrap scoped gotos map string closure struct goto typealias closure void var closure string closure mutating func set label string closure closure closure label closure func call label string closure label define handy operator avoid writing gotocall label infix operator associativity left precedence func goto goto label string gotocall label get started using define multiple block within goto declare call goto struct within block var x var goto goto gotoset cond goto x body end gotoset body x print x goto cond gotoset end goto cond incredibly bugprone fragile easy mess c est la goto gotoswift available swift package manager
188,Lobsters,swift,Swift programming,Server-sided Swift Speculation (2014),http://hiltmon.com/blog/2014/06/06/server-sided-swift-speculation/,serversided swift speculation,apple swift icloud azure amazon xserve xsan webobjects o x server linux ruby rail python django php wordpress javascript nodejs c java go go rail node sinatra jekyll foundation cocoa swift go rust hiltmon hiltmon,note thing idle speculation behalf maybe maybe apple something like maybe week wwdc apple surprised developer world new programming language swift astoundingly almost ready prime time mac io client software development already would much like use language like apple new swift server side well suspect may get need note see apple serverside strategy day icloud hosting data limited apps seem mood compete azure amazon app server market longer make sell xserve server xsan storage longer make sell webobjects excellent server platform o x server o x application installed nope server strategy let linux folk hand like gcc clang compiler open source available server platform added maintained public apple mean expect swift follow objectivec opened available supported clang platform mean swift could compile run fine linux distribution host world server server application day built using interpreted language ruby rail python django php wordpress javascript nodejs runtimebased language c java case plenty fast stable speed scalability issue kick nothing beat compiled language believe google switching lovely go language compiles native thread beautifully run fully native speed using far le hardware throughput anything else imagine could use swift thing flexibility scripting language raw speed fully compiled native language repl playground u play available go blindingly fast safe compiler language feature needed build type application imagine rail written swift bigger front end web application scale thread without pain imagine smaller swift project using node sinatra model fast scaleable restful webservices imagine swiftbased jekyll create baked blog ok went far would completely unnecessary whole web server compiled using compiled multicore language process web request would turn thing around much quicker yet language easy use current slowrunning tool speed scripting language speed compiled language none memory management buffer overflow pointer issue winwin speculating google developed investing heavily go missing course ecosystem written written would heck lot easier write apple offered foundation subset cocoa none scripting runtime language use today library start either run fine think language like swift go maybe rust future server side fast write yet compiled swift running optimized safety reliability multithreading saving u scaling issue excessive server cost without increasing complexity application development support process swift may able go one language rule shared common code across desktop mobile server native fast core used would amazing follow author hiltmon twitter hiltmon appnet mute xpost one
189,Lobsters,swift,Swift programming,100 Days of Swift,http://samvlu.com/,day swift,day swif medium,day swifti started learning swift kept going day day tried build something learned project took day complete progression day one hundred form completed project total projectsread medium
191,Lobsters,swift,Swift programming,Getting started with Zewo,https://akrabat.com/getting-started-with-zewo/,getting started zewo,zewo epoch router middleware libvenice libmill httpparser uriparser spm slim express,zewo set swift package enable writing http service package focussed around goal also includes adapter mysql postgresql useful http server called epoch combine router middleware make working api get going wrote simple ping end point see fit together epoch built libvenice fork libmill httpparser uriparser c library need install ubuntu officially supported linux distribution swift moment use prepackaged library provided zewo echo deb trustedyes http aptzewoiodeb sudo tee append etcaptsourceslist sudo aptgetupdate sudo aptget install uriparser httpparser libvenice done create normal spm application creating new directory creating packageswift mainswift within mkdir cd touch packageswift touch mainswift packageswift used define dependency case need epoch import packagedescription let package package name dependency package url http githubcomzewoepoch version version version package url http githubcomzeworouter version version version mainswift application import glibcimport httpimport routerimport epoch let router router routerbuilder routerbuilderget ping request let time nil return response status ok json time numbervalue double server port responder router start simple api simply responds ping current timestamp firstly import relevant module need glibc time http response router epoch instantiate router passing closure constructor given routerbuilder object closure use define route using get post etc case define get route ping take closure give u request must return response similar slim every framework similar ilk express action simply get time using standard c library function return response status ok json encoded object containing timestamp finally instantiate server telling port number router use responder start build run app using swift build start http server port responds ping done
192,Lobsters,swift,Swift programming,Swift - Commonly Rejected Changes,https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md,swift commonly rejected change,commonly rejected change readme file proposal review status page basic syntax operator replace brace syntax pythonstyle indentation remove semicolon replace logical operator etc word like allow nonpunctuation operator replace ternary operator string character collection type intentional multiple control flow closure optional binding error handling expression replace keyword synonym scripting language eg next skip advance etc remove support use rename must infer omitted body change closure literal syntax use patternmatching instead optionalunwrapping syntactic sugar selfassignment replace keywords cstyle syntax error handling rationale proposal miscellaneous use garbage collection gc instead automatic reference counting arc large number disadvantage disjunction logical or type constraint rewrite swift compiler swift,commonly rejected change list change swift language frequently proposed unlikely accepted interested pursuing something space please familiarize discussion already order bring one topic expected add new information discussion say really want exists language liked additionally proposal outofscope change scheduled review readme file identifies list priority next major release swift proposal review status page includes list change deferred future discussion deemed scope time review addition list change proposed rejected formal review several discussion refer c family language intended mean extended family language resemble c syntactic level c c objectivec java javascript swift embrace c heritage deviate language family feature thought actively harmful prepostincrement reduce needle clutter parenthesis statement basic syntax operator replace brace syntax pythonstyle indentation surely polarizing issue swift change use indentation scoping instead curly brace remove semicolon semicolon within line intentional expressivity feature semicolon end line handled linter compiler replace logical operator etc word like allow nonpunctuation operator infix function operator identifier grammar intentionally partitioned swift key part userdefined overloaded operator supported requiring compiler see operator declaration know parse file would break ability able parse swift file without parsing import major negative effect tooling support needing infix support would need operator keyword status omit parenthesis somepredicate visually bind loosely compared somepredicate replace ternary operator definitely magical serf important usecase terse selection different value proposal alternative intensely discussed none better enough make sense diverge precedent established c family language string character collection type make array subscript access return instead current array behavior intentional accurately reflects fact outofbounds array access logic error changing current behavior would slow array access unacceptable degree topic come multiple time unlikely accepted control flow closure optional binding error handling ifelse switch expression conceptually interesting thing support many problem solved making expression already solved swift way making expression introduces significant tradeoff balance nt found design clearly better far replace continue keyword synonym scripting language eg next skip advance etc swift designed feel like member c family language switching keywords away c precedent without strong motivation nongoal remove support default switch use case default widely used case magical default widely precedented many c family language rename guard unless common request guard renamed unless people requesting change argue guard simply logically inverted statement therefore unless obvious keyword however request stem fundamental misunderstanding functionality provided guard unlike guard enforces code within curly brace provides early exit codepath word guard block must return throw break continue call function return fatalerror differs quite significantly therefore parallel assumed guard valid infer return omitted guard body proposed many time allow omission guard body sake brevity however core principle swift make control flow explicit visible example try keyword exists solely indicate human reader thrown error happen implicit return would violate principle favoring terseness clarity way nt typical swift furthermore many way exiting scope return loop may want break continue every function obvious default value return change closure literal syntax closure syntax swift carefully debated internally aspect design strong motivation unlikely find something better proposal change detailed understanding swift grammar use patternmatching let instead optionalunwrapping actually tried got lot negative feedback several reason developer nt think thing pattern matching term think destructuring vastly common use case let actually optional matching change made common case awkward change increase learning curve swift changing pattern matching concept learned late something must confronted early current design case unifies pattern matching around case keyword developer unfamiliar case run one code successfully search search engine stack overflow syntactic sugar let selfassignment alternative syntax let foo let foo serve shorthand let foo foo often proposed rejected favoring terseness clarity introducing new magic syntactic sugar replace dotryrepeat keywords cstyle syntax swift error handling approach carefully designed make obvious maintainer code call throw error intentionally designed syntactically similar way different key way exception handling language design careful balance favor maintainer code us error make sure someone reading code understands throw proposing change system please read error handling rationale proposal full understand current design way ready explain change would worth unbalancing design miscellaneous use garbage collection gc instead automatic reference counting arc markandsweep garbage collection wellknown technique used many popular widely used language eg java javascript advantage automatically collecting reference cycle arc requires programmer reason said garbage collection large number disadvantage using would prevent swift successfully targeting number system programming domain example realtime system video audio processing deeply embedded controller kernel find gc generally unsuitable gc efficient given memory work process using time tradeoff acceptable swift disjunction logical or type constraint include anonymous unionlike type eg int string type inhabited either integer string type constraint something type system support rewrite swift compiler swift would lot fun someday unless include rewriting llvm requires ability import c apis swift additionally lot higher priority way make swift better
193,Lobsters,swift,Swift programming,Migrating `if`s to `guard`s in Swift,http://ericasadun.com/2015/12/29/migrating-ifs-to-guards-in-swift/,migrating guard swift,guard statement establishing execution requirement refactoring buy book,scattered throughout code uncountable variation following statement condition continue recently converting vast swath statement guard post describes reason voluntarily performing migration step seemingly impact efficiency correctness code guard statement guard statement best known adding conditional binding enclosing scope guard let value possiblenil else leave scope guard also differentiate positive negative execution path guard condition else continue latter form guard statement act nonfatal assertion prevent forward progress precondition fail check condition false leaf scope via continue break return etc example loop limit whether iteration fully run function prevent bad data causing error properlyconstructed guard statement take metaphoric characteristic human traffic flagman allows code proceed conforms certain rule establishing execution requirement general guard statement establishes requirement execution also provides safe path transferring control requirement fail contrast behavior assert precondition like runtime check guard add test desired state however outcome noisy fatal error terminate execution guard requirement substitute normal clause avoid guard boolean false value introduces side effect run true execution branch instead guard creates instantly identifiable predicate establish required condition code execute properly offer early exit failure refactoring guard keyword jump code way unambiguously distinguishes statement even though code would continue operate without byhandmigration upgrading guard improves readability enhances clarity intent placing guard start scope assertion form new kind requirement block dave abraham wrote role assert precondition swift evolution list two function distinct role assert checking code internal error precondition checking client given valid argument add guard establishing set requirement must met code follows safely executed consider refactoring statement say essence unless statement true progress migrating guard code rule use decide whether stay switch guard let know comment throw tweet email like post buy book related
194,Lobsters,swift,Swift programming,Static vs dynamic dispatch in Swift,https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001948.html,static v dynamic dispatch swift,swiftevolution proposal universal dynamic dispatch method call clattner applecom swiftevolution swiftorg http information swiftevolution mailing list,swiftevolution proposal universal dynamic dispatch method call chris lattner clattner applecom sat dec cst dec pm kevin ballard via swiftevolution swiftevolution swiftorg wrote think swift prefers virtual dispatch think prefers static think really going case observable difference static dispatch virtual dispatch think swift oop language powerful valuetyped system added probably think swift prefers virtual dispatch think swift valuetyped language oop layer added probably think swift prefers static dispatch reality swift hybrid language us different type dispatch different situation appropriate emphasis mine know bit philosophical let suggest level way look static dynamic great looking typecast language need consider light semantics also factor compilation strategy programmer model provide let give example keep mind narrow view mho c static compilation model static semantics provide indirect function pointer c everything possible punish use ever see nontypedef prototype signal almost always statically compiled provides programming model great term predictability make trivial code look like machine level javascript completely dynamic compilation model completely dynamic semantics one talk statically compiling javascript result would really really slow executable javascript performance hinge dynamic profile information able efficiently execute program provides programming model ability understand code executes machine level c c step c term introducing dynamism model virtual function sadly c also provides hostile model static optimizability existence placement new prevents lot interesting devirtualization opportunity generally make life difficult otoh like c c provides predictable model c programmer assume c construct static virtual method dynamically dispatched correct except narrow case compiler use dynamic dispatch c virtual method good news dynamism completely opt c preserve predictability performance staticcompilability c providing higher level programming model virtual method ever actually performance problem c programmer way deal directly code java java make nearly everything object structs nonprimitive value type method default c sense java also introduces interface offer added dimension dynamic dispatch cope java assumes jit compilation model use dynamic behavior devirtualize almost always monomorphic call checked direct call work really well practice jit compiler great telling program apparently dynamic semantics actually static semantics practice eg dynamic call single receiver otoh since compilation model assumes jit mean purely static compiler profile information knowledge class loader etc necessarily produce inferior code also mean java well small embedded system support jit like bootloader objectivec objectivec provides hybrid model favor predictability due static compilation model similar way c clike construct provide clike performance construct never provide predictable performance characteristic predictable cost message send ever becomes issue practice programmer many pattern deal including imp caching also including ability define problem away rewriting code term c construct end result programmer write code use clevel feature performance matter dynamicism use objc feature dynamicism important performance matter would possible implement jit compiler objc expect win low code may hinging dynamic feature likely already optimized hand golang narrow discussion perspective go hybrid model similar characteristic objectivec introduced module yet generic assumes static compilation provides predictable hybrid programming model statically dispatched interface dynamically dispatched provide guaranteed dynamic dispatch like objc provides even dynamic feautres area eg requires cyclecollecting garbage collector interface type pretty equivalent eg us dynamically dispatched must downcasted encourages use place objectivec go introduces checked downcast introduce runtime overhead also provide safety compared objectivec go thankfully introduces replacement imperative construct c defines away bunch c problem objectivec inherited certainly prettier go language probably already gotten enough trouble context let talk swift swift another case hybrid model semantics provide predictability obviously static structs enums global funcs obviously dynamic class protocol closure construct focus swift like java javascript provide apparently simple programming model however swift also intentionally cheat global design mixing trick make dynamic part language optimizable static compiler many common case without requiring profiling dynamic information example swift compiler tell method nonpublic class never overridden nonpublic default lot good reason thus treating final allows eliminating much overhead dynamic dispatch without requiring jit consider never need nonpublic class incredibly powerful design swift package manager extends even principle done yet external library generic provide static performance model similar c template release build though agree need really follow swift existentials value protocol type provide balance giving highly dynamic model upshot swift squarely either static dynamic camp aim provide predictable performance model someone writing bootloader firmware stick using swift structs simple guarantee dynamic overhead runtime dependence also providing expressive clean high level programming model simplifying learning common case programmer care count cycle anything say swift language provides dynamic programming model think fact static compiler able transparently provide great performance without needing overhead jit finally possible jit compiler might interesting someday swift space thing right never programmer enough ability reason performance fingertip mean java javascriptmagnitude performance delta sitting table waiting jit scoop see work long term think pretty well far tl dr really getting old static v dynamic trope least half story really need include compilation model thus resultant programmer model story programmer model really matter imho chris next part html attachment scrubbed url http information swiftevolution mailing list
195,Lobsters,swift,Swift programming,Tailor ‚Äì A cross-platform static analysis and lint tool for Swift,https://github.com/sleekbyte/tailor,tailor crossplatform static analysis lint tool swift,wiki installation usage feature developer license tailor static analysis lint swift tailor crossplatform static analyzer linter swift swift programming language github ray wenderlich coursera antlr antlr parser generator getting started installation java se downloads mac o x linux window manually github release continuous integration homebrew usage feature enabling disabling rule rule except crossplatform linux window automatic xcode integration configure xcode analyze code natively colorized output dark theme light theme color theme warning error failing build disable violation within source code trailing enclosing block note configuration yaml includingexcluding file note java glob enablingdisabling rule note specifying output format note specifying cli output color scheme note formatters xcode formatter default json formatter html formatter developer guideline contributing development environment external tool library development runtime development license licensemd,wiki installation usage feature developer license tailor crossplatform static analysis lint tool source code written apple swift programming language analyzes code ensure consistent styling help avoid bug tailor crossplatform static analyzer linter swift tailor support swift box help enforce style guideline outlined swift programming language github ray wenderlich coursera style guide support crossplatform usage run mac o x via shell integrated xcode well linux window tailor par swift source code using primary java target antlr antlr powerful parser generator widely used academia industry build sort language tool framework antlr parser generator getting started installation requires java jre jdk version java se downloads mac o x linux curl fssl http tailorshinstallsh sh window iex newobject netwebclient downloadstring http manually may also download tailor via github release extract archive symlink tailorbintailor shell script location path continuous integration continuous integration server support homebrew installation may use following snippet beforeinstall brew update brew install tailor case use snippet replace tailorreleasearchive url release would like install eg http beforescript wget tailorreleasearchive tmptailortar tar xvf tmptailortar export path path pwdtailorbin usage run tailor list file directory analyze via xcode tailor option filedirectory help tailor accessible via h help option tailor h usage tailor option filedirectory perform static analysis swift source file invoking tailor least one file directory analyze swift file path path provided tailor analyze swift file found srcroot defined set xcode run build phase tailor may set xcode build phase automatically xcode option option c config pathtotailoryml specify configuration file debug print antlr error message parsing error occurs except run rule except specified one f format xcodejsoncchtml select output format h help display help invertcolor invert colorized console output l maxlinelength maximum line length character listfiles display swift source file analyzed maxclasslength maximum class length line maxclosurelength maximum closure length line maxfilelength maximum file length line maxfunctionlength maximum function length line maxnamelength maximum identifier name length character maxseverity errorwarning default maximum severity maxstructlength maximum struct length line minnamelength minimum identifier name length character nocolor disable colorized console output run specified rule purge reduce memory usage clearing dfa cache specified number file parsed showrules show description rule v version display version xcode pathtoprojectxcodeproj add tailor build phase run script xcode project feature enabling disabling rule rule identifier preferrednot preferred code sample may found rule page rule may individually disabled blacklist enabled whitelist via except commandline flag except tailor exceptbracestyle trailingwhitespace mainswift tailor onlyredundantparentheses terminatingsemicolon mainswift crossplatform tailor may used mac o x via shell integrated xcode well linux window linux window automatic xcode integration tailor integrated xcode project using xcode option tailor xcode pathtodemoxcodeproj add following build phase run script project default target tailor output displayed inline within xcode editor area list log navigator configure xcode analyze code natively add new configuration say analyze project modify active scheme analyze phase use new build configuration created tweak build phase run script run tailor analyzing project configuration analyze hash tailor devnull tailor else echo warning please install tailor http tailorsh fi fi colorized output tailor us following color scheme format cli output dark theme enabled default light theme enabled via invertcolor option color theme enabled via nocolor option warning error failing build maxseverity used control maximum severity violation message set error warning default set warning setting error allows distinguish lower higher priority message also fails build xcode error reported similar compiler error fails build xcode maxseverity set warning violation message warning xcode build never fail setting also affect tailor exit code commandline failing build exit whereas warning exit allowing tailor easily integrated precommit hook disable violation within source code violation specific line may disabled trailing singleline comment import foundation tailor disable additionally violation given block code disabled enclosing block within tailor tailor comment tailor import foundation import uikit import coredata tailor class demo define public member note tailor tailor comment must paired configuration behavior tailor customized via tailoryml configuration file enables includeexclude certain file directory analysis enable disable specific analysis rule specify output format specify cli output color scheme tell tailor configuration file use specifying file path via config cli option default tailor look configuration file directory run tailor file follows yaml format includingexcluding file tailor check file found recursive search starting directory given command line argument however analyzes swift file end swift would like tailor analyze specific file directory add entry include file directory also ignored exclude example might used io project include source inspect swift file source exclude testsswift ignore swift file end test sourcecarthage ignore swift file sourcecarthage sourcepods ignore swift file sourcepods note file directory specified relative tailor run path directory swift file provided explicitly via cli cause includeexclude rule specified tailoryml ignored exclude given higher precedence include tailor recognizes java glob syntax enablingdisabling rule tailor allows individually disable blacklist enable whitelist rule via except label example showcasing enable certain rule tailor solely check violation following rule uppercamelcase trailingclosure forcedtypecast redundantparentheses example showcasing disable certain rule tailor check violation rule except following one except parenthesiswhitespace lowercamelcase note given precedence except rule explicitly includedexcluded via cli cause onlyexcept rule specified tailoryml ignored specifying output format tailor allows specify output format xcodejson via format label example showcasing specify output format output format json format json note output format explicitly specified via cli cause output format defined tailoryml ignored specifying cli output color scheme tailor allows specify cli output color scheme via color label disable colored output set color disable invert color scheme set color invert example showcasing specify cli output color scheme cli output colored color disable note cli output color scheme explicitly specified via cli cause output color scheme defined tailoryml ignored formatters tailor output format may customized via f format option xcode formatter selected default xcode formatter default default xcode formatter output violation message according format expected xcode displayed inline within xcode editor area list log navigator format also humanfriendly possible console tailor mainswift mainswift warning multipleimports import separate line warning terminatingsemicolon statement terminate semicolon warning constantnaming global constant either lowercamelcase uppercamelcase warning redundantparentheses conditional clause enclosed within parenthesis warning terminatingnewline file terminate exactly one newline character n analyzed file skipped file detected violation error warning json formatter json formatter output array violation message file summary object indicating parsing result violation count tailor f json mainswift file path mainswift violation severity warning rule constantnaming location line column message global constant either lowercamelcase uppercamelcase parsed true summary violation warning analyzed error skipped html formatter html formatter output complete html document written file tailor f html mainswift tailorhtml developer please review guideline contributing repository development environment external tool library development runtime development license tailor released mit license see licensemd detail
196,Lobsters,swift,Swift programming,Go vs Node vs Rust vs Swift,https://grigio.org/go-vs-node-vs-rust-vs-swift/,go v node v rust v swift,source code fib comparison test environment golang nodejs swiftlang rustlang performance nodejs javascript value compilationexecution syntax concurrency parallelism asyncawait libdispatch use case opinion go node rust swift comment hn reddit,day ago ago apple released swift open source language instruction ubuntu linux decided couple simple benchmark test basic general purpose thing like cpu function readwrite sequential access array concurrent parallel execution possibile update source code somebody asked test look almost language also add gccgo compiler optimization generates growable array incremented number return sum element fib unoptimized fibonacci sequence recursive function comparison programming language modern userfriendly typed language syntax similar least basic scenario see performance benefit worth evident test environment cpu intel core duo o ubuntu kernel linux golang go version gccgo ubuntu nodejs node swiftlang swift version rustlang rustc performance test measured total execution time time command nodejs javascript value compilationexecution test run time medium result taken rounded first test winner rust rust swift get noticeable boost binary compiled flag fastest swift rust bit weird compile llvm syntax new userfriendly typed language similar syntax rust much control code conversion nt done automatically specify usize use integer index go specific operator deal channel concurrency parallelism tried run another benchmark sum fib fib golang enable core put code runtimegomaxprocs num core want use rust several way different use case used part lib asyncawait result correct seems computation one core slow even task nt finished yet upgrading beta rust stable longer issue nodejs single thread use core running multiple instance code swift possible use libdispatch linux nt tried use case opinion general use case choose one like mostly syntax ecosystem issue go mature concurrency backend micro service cli utility node mature possible code sharing frontend javascript functional feature rust low level control safety concurrency speed functional feature swift io native osx builtin functional feature nt compare language dynamic language like ruby python already lot comparison personally like javascript nt preferred typed language choice comment hn reddit
198,Lobsters,swift,Swift programming,Remove the ++ and -- operators (Status: Accepted),https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md,remove operator status accepted,remove operator introduction advantage operator disadvantage operator proposed approach alternative considered,remove operator introduction incrementdecrement operator swift added early development swift carryover c added without much consideration nt thought much since document provides fresh look ultimately recommends remove entirely since confusing carrying weight quick refresher four operator family let x preincrement return input value mutation let b x postincrement return copy input value mutation let c x predecrement return input value mutation let x postdecrement return copy input value mutation however result value operator frequently ignored advantage operator primary advantage operator expressive capability shorthand eg x numeric type xadvance iteratorlike value return value needed swift operator used inline since unlike c return void second advantage swift supporting family operator continuity c common language extended c family c objectivec java c javascript etc people coming swift language may reasonably expect operator exist said also popular language kept majority c operator dropped eg python disadvantage operator operator increase burden learn swift first programming language case nt already know operator different language expressive advantage minimal x much shorter x swift already deviate c assignmentlike operation return void number reason operator inconsistent model swift powerful feature eliminate many common reason use cstyle loop language relatively infrequently used wellwritten swift code feature include forin loop range enumerate map etc code actually us result value operator often confusing subtle readermaintainer code encourage overly tricky code may cute difficult understand swift well defined order evaluation code depended like foo would undesirable even welldefined operator applicable relatively type integer floating point scalar iteratorlike concept apply complex number matrix etc finally fail metric nt already would add swift proposed approach drop operator entirely term rollout deprecate spring swift release nice fixit hint cover common case remove completely swift alternative considered simplest alternative could keep interesting consider could change operator return void solves problem introduces new question result gone difference prefix postfix form also vanishes given would pick unfortunate choice keep x x language even though thing drop one x x c programmer generally prefer prefix form everyone else generally prefers postfix form dropping either one would significant deviation c despite considering option carefully still nt justify complexity operator add swift
199,Lobsters,swift,Swift programming,Swift is now open source,https://swift.org/,swift open source,focus area project welcome swiftorg privacy policy cooky,focus area project welcome swiftorg welcome swift community together working build programming language empower everyone turn idea apps platform announced swift programming language quickly become one fastest growing language history swift make easy write software incredibly fast safe design goal swift ambitious want make programming simple thing easy difficult thing possible student learning swift great introduction modern programming concept best practice open swift skill able applied even broader range platform mobile device desktop cloud copyright apple inc right reserved swift swift logo trademark apple inc privacy policy cooky
201,Lobsters,swift,Swift programming,Why is Swift's String API So Hard?,https://www.mikeash.com/pyblog/friday-qa-2015-11-06-why-is-swifts-string-api-so-hard.html,swift string api hard,japanese translation postd zalgo send request topic click information comment r feed page pygments,friday q swift string api hard article also available japanese translation postd welcome delayed edition friday q one biggest complaint see people using swift string api difficult obtuse people often wish like string apis language today going explain swift string api designed way least think ultimately think best string api term fundamental design string let build conceptual foundation jump string one thing understand implicitly often nt really think deeply thinking deeply help understand going string conceptually high level view string text hello world string usersmikeash robert drop table student incidentally think representing different concept single string type mistake humanreadable text file path sql statement others conceptually different represented different type language level think different conceptual kind string distinct type would eliminate lot bug aware language standard library though general concept text represented machine level well depends ton different way many language string array byte giving meaning byte mostly left program state string c using std string python go many language c weird special case c string pointer sequence nonzero byte terminated zero byte basic effect c string ca nt contain zero byte operation like finding length string require scanning memory lot newer language define string sequence code unit java c javascript example well objectivec using cocoa nsstring mostly historical accident unicode first introduced pure system several popular language designed around time used unicode basis string time unicode broke model late change language worked encoding allows encode larger number pair code unit basic concept string sequence code unit continues variant approach define string sequence code unit quantity overall similar approach allows compact representation ascii string avoids conversion passing string function expects cstyle string often accept string language represent string sequence unicode code point python work way many c implementation builtin wchart type short string usually considered sequence kind character character typically byte code unit unicode code point problemshaving string sequence character type convenient typically treat like array often array make easy grab subranges slice piece beginning end delete portion count element etc trouble live unicode universe unicode make thing hard let look example string see work unicode code point number written unnnn humanreadable name written cap reason make easier talk individual code point particular string consists latin small letter latin small letter e combining acute accent infinity musical symbol g clef let remove character middle string treating character byte code unit unicode code point let start string look like cc e let remove character treating byte produce string longer valid byte fall three category byte form top bit set represent plain ascii character stand alone byte form denote start multibyte sequence whose length indicated location first zero bit byte form denote remainder multibyte sequence byte cc formed start multibyte sequence total two byte long byte trailing byte sequence removing cc trailing byte left standing alone validating reader reject string problem occur removing byte third place onward string second byte remove get cc still valid result might expect human second character string √© second byte e without accent mark accent mark added separately combining character removing second byte string remove e cause combining accent mark attach instead remove first byte result least expect cc e let take look string look like e let try removing second character problem deleting e accent mark causing attach instead delete character get sequence similar problem invalid sequence longer valid sequence form surrogate pair two unit used represent code point beyond limit leaving single piece surrogate pair standing alone invalid code deal usually reject sort thing outright often forgiving example cocoa render resulting string string sequence unicode code point would look like e representation remove character without producing invalid string problem combining accent mark still occurs removing second character produce even representation safe unintuitive result hardly artifical concern english one language write pure ascii even trouble unless feel like applying job resume instead r√©sum√© moment step beyond ascii weird thing start appear grapheme clustersunicode concept grapheme cluster essentially smallest unit human reader would consider character many code point grapheme cluster synonymous single code point also extends include thing like combining accent mark break example string grapheme cluster get something fairly sensible remove single grapheme cluster get something human would generally consider reasonable note nt include numeric equivalent example unlike plain unicode code point single number describe grapheme cluster general case grapheme cluster sequence one code point single grapheme cluster often one two code point lot code point case something like zalgo example consider string mess consists separate code point code point form single grapheme cluster interesting example consider string containing swiss flag one symbol actually two code point code point regional indicator symbol letter c regional indicator symbol letter h rather include separate code point flag every country planet unicode includes regional indicator symbol add together indicator c indicator h get swiss flag combine x get mexican flag flag single grapheme cluster two code point four code unit eight byte implication implementationswe seen lot different way look string lot different thing call character character grapheme cluster come closest human think character manipulating string code definition want use depend context moving insertion point text response arrow key probably want go grapheme cluster measuring string ensure fit tweet want go unicode code point squeezing string database table column probably dealing byte reconcile writing string implementation balancing conflicting requirement performance memory consumption clean code typical answer pick single canonical representation possibly allow conversion case representation needed example nsstring us canonical representation entire api built around want deal unicode code point convert manipulate result provided data object rather string convenient want deal grapheme cluster find boundary using rangeofcomposedcharactersequencesforrange lot work anything interesting swift string type take different approach canonical representation instead provides view various representation string let use whichever representation make sense task hand swift string api briefin older version swift string conformed collectiontype presented collection character swift longer case string mostly present various view proper way access entirely case though string still somewhat favor character present bit collectionlike interface public typealias index stringcharacterviewindex public var startindex index get public var endindex index get public subscript index character get index string get individual character notably ca nt iterate using standard syntax character swift eye seen lot possibility swift settled grapheme cluster idea character seems like good choice since saw best match human idea character string various view exposed property string example character property public var character stringcharacterview get characterview collection character extension stringcharacterview collectiontype public struct index public var startindex stringcharacterviewindex get public var endindex stringcharacterviewindex get public subscript stringcharacterviewindex character get look lot like interface string except conforms collectiontype get functionality provides like slicing iteration mapping counting allowed work fine x abc character get string back characterview using initializer public init character stringcharacterview even get string arbitrary sequence character public init sequencetype sgeneratorelement character character working way hierarchy next view view swift call code unit unicode scalar since code unit correspond exactly unicode code point abbreviated interface look like public var unicodescalars stringunicodescalarview public struct unicodescalarview collectiontype reflectable customstringconvertible customdebugstringconvertible public struct index public var startindex stringunicodescalarviewindex get public var endindex stringunicodescalarviewindex get public subscript position stringunicodescalarviewindex unicodescalar get like characterview string initializer unicodescalarview public init unicodescalars stringunicodescalarview unfortunately initializer arbitrary sequence unicodescalars little extra work prefer manipulate example array turn back string nt even initializer unicodescalarview take arbitrary sequence unicodescalars however mutable append function build string three step var unicodescalarsview stringunicodescalarview unicodescalarsviewappendcontentsof unicodescalarsarray let unicodescalarsstring string unicodescalarsview next view look much like others public var get public struct collectiontype public struct index public var startindex get public var endindex get public subscript codeunit get string initializer view slightly different public init unlike others failable initializer sequence character unicodescalars valid string possible sequence code unit nt form valid string initializer produce nil view content nt valid going arbitrary sequence code unit back string pretty obscure public initializers mutating function solution use global transcode function work unicodecodectype protocol three implementation protocol transcode function used convert pretty gnarly though input take generatortype produce input output take function called unit output used build string piece piece converting converting code unit unicodescalar appending string var transcode unicodescalar stoponerror true finally view expect seen far public var get public struct collectiontype position public struct index public var startindex get public var endindex get public subscript position codeunit get initializer going way like initializer failable since sequence code unit may valid public init like convenient way turn arbitrary sequence code unit string transcode function used var transcode unicodescalar stoponerror true since transcode call pretty painful wrapped pair nice failable initializers extension string init seq sequencetype seqgeneratorelement seq selfinit guard transcode selfappend unicodescalar stoponerror true false else return nil init seq sequencetype seqgeneratorelement seq selfinit guard transcode selfappend unicodescalar stoponerror true false else return nil create string arbitrary sequence string string indexesthe various view indexable collection much array index type weird custom structs mean ca nt index view number error string stringcharacters stringunicodescalars instead start either collection startindex endindex use method like successor advancedby move around work string stringstartindexadvancedby stringcharacters stringcharactersstartindexadvancedby stringunicodescalars stringunicodescalarsstartindexadvancedby fun going recall view underlying data stored canonical form within string object use view nt match canonical form data converted accessed recall various encoding different size length mean straightforward way map location one view location another view mapping depends underlying data consider string example imagine canonical representation within string representation array integer imagine get view data conceptually data sequence integer sequence map back original ask view value index scan array starting beginning figure value contains obviously done swift provides necessary functionality pretty make easier allow indexing integer essentially swift way reinforcing fact expensive operation world provided subscript int expect two piece code pretty much equivalent c let c would work second one would drastically slower first loop nice linear scan whereas second loop linear scan iteration giving whole loop quadratic runtime difference scanning millioncharacter string tenth second scan take three hour approximate time taken macbook pro let take another example simply getting last character string let lastcharacter stringcharacters stringcharactersendindexpredecessor let lastcharacter stringcharacters stringcharacterscount first version fast start end string scan backwards briefly figure last character start fetch second version full scan entire string twice scan entire string count many character contains scan figure specified numeric index everything could api like still done swift api different little harder difference show programmer view array nt perform like array see subscript indexing assume pretty good reason indexing operation fast string view supported integer subscripting would break assumption make easy write really slow code writing code stringwhat mean writing code us string practical purpose use highestlevel api need see string start certain letter example nt index string retrieve first character compare use hasprefix method take care detail nt afraid import foundation use nsstring method example want remove whitespace beginning end string nt manually iterate look character use stringbytrimmingcharactersinset need characterlevel manipulation think carefully exactly character mean particular case often right answer grapheme cluster represented swift character type character view whatever text think term linear scan beginning end operation like asking count character seeking middle likely linear time scan anyway better arrange code explicitly grab appropriate view get start end index move index around need using advancedby similar function really need random access nt mind efficiency hit want convenience straightforward container convert view array whatever view contains example array stringcharacters produce array grapheme cluster string probably efficient representation chew extra memory going much easier work convert back string done conclusionswift string type take unusual approach string many language pick one canonical representation string leave fend want anything else often simply give important question like exactly character pick something easy work code sugarcoats inherently difficult problem encountered string processing swift nt sugarcoat instead show reality going difficult difficult need string api hole could use extra functionality make life little easier particular converting string unreasonably difficult annoying would nice facility initializing arbitrary sequence code unit well useful mutating function view manipulated directly today come back next time shenanigan terror friday q driven reader idea meantime send request topic enjoy article selling whole book full volume ii iii available epub pdf print ibooks kindle click information comment comment r feed page add thought post comment spam offtopic post deleted without notice culprit may publicly humiliated sole discretion javascript required submit comment due antispam measure please enable javascript reload page code syntax highlighting thanks pygments
202,Lobsters,swift,Swift programming,Swift Intermediate Language: LLVM Conference Slides,http://llvm.org/devmtg/2015-10/slides/GroffLattner-SILHighLevelIR.pdf,swift intermediate language llvm conference slide,,obj length r filter flatedecode stream x b l yq r endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text imageb imagec imagei colorspace r font r r xobject r r endobj obj length r type xobject subtype image width height interpolate true colorspace r intent relativecolorimetric smask r bitspercomponent filter flatedecode stream c bmfv f su c mks e q ›í yk yd e nb q b e w k r g u u shtbxl k c e n ≈Øf zz djvu l kf qv  Ü w v x sokz Œ≠ xy e ∆® k b j z bzfn c fz pn c w f x hptrfnva hz e hptd u z ≈£vby qo tb Âüµi q k ayl hl’∫ w wo qgg z qy u gv tjpx h v l “ü h udr ay f inu cx mji n zm qe
203,Lobsters,swift,Swift programming,Swift extensions *can* add stored properties,https://medium.com/@ttikitu/swift-extensions-can-add-stored-properties-92db66bce6cd#.zrgg8tstu,swift extension add stored property,swift extension add stored property add computed property objectivec associated object obvious way,swift extension add stored propertiesok title complete lie swift extension add computed property got something good willing use objectivec associated object lot boilerplate though obvious way sacrifice typesafety better yes couple little function magic swift typeinference let write typesafe nonoptional computed property act like stored property class protocol extensionimport foundationfunc associatedobject valuetype anyobject base anyobject key unsafepointer initialiser valuetype valuetype let associated objcgetassociatedobject base key valuetype return associated let associated initialiser objcsetassociatedobject base key associated objcassociationretain return associated func associateobject valuetype anyobject base anyobject key unsafepointer value valuetype objcsetassociatedobject base key value objcassociationretain use like class miller class extendclass cat every miller cat var name pus private var catkey still need boilerplateextension miller var cat cat cat effectively stored property get return associatedobject self key catkey return cat set initial value var set associateobject self key catkey value newvalue following along home drop following line playground confirm work expectedlet grumpy miller grumpycatname show pus grumpycatname hephaestos grumpycatname show hephaestos easy
205,Lobsters,swift,Swift programming,Generics in Swift: An Overview,http://austinzheng.com/2015/09/29/swift-generics-pt-2/,generic swift overview,generic swift part previous post generic programming type parameter generic type safety le code duplication library flexibility generic entity generic type signature generic type generic function associated type associated type heap type constraint motivating example protocol type declare support functionality simple constraint constrain protocol constrain putting together constrained extension extension generic type protocol associated type syntax limitation extension protocol article sequence extension detail implementation limited quite way specialization limitation polymorphic behavior conclusion,generic swift part sep part series swift enums pattern matching generic article aim provide comprehensive description generic programming facility swift work gentler introduction please see previous post series generic programming form programming thing type class structs enums function defined help type parameter type parameter placeholder actual type filled whenever generic type function actually used visible example generic programming swift might humble array type objectivec instance array type nsarray could contain object type however swift array always parameterized type item contain instance array int array uiview et cetera array type int type generic allow two type work together way make sense conveys extra information aside idiomatic way represent array containing foo instance swift foo article us array foo order aid understanding emphasize fact array ordinary generic type longer form exactly equivalent foo syntactic sugar generic reason generic programming useful statically typed language type safety container type like array given information type item store allows compiler ensure right kind object inserted returned container applies type parameterized term one type also applies relationship type le code duplication case need carry essentially operation item varying type instead writing multiple copy function differ term argument return value type write single generic function le errorprone preserve type information make intent clearer library flexibility library expose apis avoid forcing consumer supply argument accept return value fixed type instead abstract type using generic example generic might allow api function accept array argument instance type treated collection understand yet read rest article revisit section hopefully seeing generic programming swift work clarify reason given generic entity generic programming swift show two different context defining type defining function presence generic type signature part type function declaration denoted angle bracket indicates type function generic generic type three swift primary userdefined type made generic example result enumeration type store either success value failure value enum result u case success case failure u right name type result define type parameter u type parameter placeholder replaced actual type creating instance type example let asuccess result int string success let afailure result int string failure temperature high generic type type parameter used following way type property type associated value enum case return type argument type method subscript argument type initializer type parameter another generic type used within type definition example array property generic type instantiated one two way type parameter filled explicitly giving variable holding new instance type annotation type inferred type parameter filled calling initializer static method create instance struct queue first way instantiate let queue int queue let queue int queuestaticfactorymethod staticfactorymethod second way instantiate let queue int let queue int staticfactorymethod note type parameter like show definition type whenever type used type parameter must replaced actual type example instance generic type array exist actually array parameterized concrete type example array string array uiwindow thing free array ever work array always context type parameter defined type function generic function function method property subscript initializers generic well either case everything function context generic type given item return array item repeated n time func duplicate item numberoftimes n int var buffer n bufferappend item return buffer type parameter defined within angle bracket immediately following function name used following way type argument function type function return value type parameter another generic type used function signature example used part array return type note compiler complain type parameter remain unused generic method defined generic nongeneric type example extension result transform value result using one two mapping function func transform v left v right u v v switch self case success let value return left value case failure let value return right value transform method generic resides within generic type result addition type parameter u defined result also access type parameter v defined generic method aware shadowing type parameter example method defined u instead v lead cryptic error message invoking generic function necessary explicitly specify type want type parameter take compiler type inference engine automatically deduces information examining argument return type example use duplicate numberoftimes function defined earlier inferred int let duplicate numberoftimes fact attempting explicitly set type parameter cause error compile error explicitly specialize generic function let b duplicate string foo numberoftimes associated type protocol swift defined generically using type parameter instead protocol define known associated type using typealias keyword protocol thing accept food protocol foodeatingtype typealias food var issatiated bool get func feed food food example food associated type defined protocol foodeatingtype protocol support many associated type necessary associated type like type parameter placeholder type want conform protocol get decide concrete type food eg hay rabbit way implementing protocol property method deciding type replace associated type actual implementation example class koala foodeatingtype var foodlevel var issatiated bool return foodlevel koala notoriously picky eater func feed food eucalyptus issatiated foodlevel associated type food defined eucalyptus koala word koalafood defined eucalyptus type conforms multiple protocol might end pulling multiple associated type conforming type generic also use type parameter help define associated type gourmand wolf picky eater eat favorite food individual wolf may prefer different food though class gourmandwolf foodtype foodeatingtype var issatiated bool return false func feed food foodtype let meela gourmandwolf rabbit let rabbit rabbit meelafeed rabbit case gourmandwolf goose food goose gourmandwolf sheep food sheep aside associated type required conform protocol appending one commaseparated protocol name example key heap must comparable express constraint follows type conform represent simple maxheaps use element key protocol maxheaptype element must support comparison ops eg greater b typealias element comparable func insert x element func findmax element func deletemax bool finally special associated type self protocol definition always refers conforming type type example type foo implement protocol bartype must replace self foo implementing bartype method property type constraint seen free type parameter u previous example could satisfied type standard library array example type place constraint type parameter define type foo create array foo motivating example sometimes enough let work illustrative example try write function take array object return largest one nt compile func findlargestinarray array array arrayisempty return nil var sofar array arraycount sofar array sofar array sofar return sofar swift compiler complains turn code involves comparison array sofar know array type sofar also type swift asks u unreasonably know t comparable created empty struct foo called function array foos case version compare two foos swift protocol type declare support functionality turn standard library protocol guarantee conforming type compared using called surprise comparable could somehow restrict argument function array whose element comparable could get function compile properly indeed possible revised example show try calling function array containing instance type string compiles nsview compile note became comparable meaning whatever type fill must conform comparable func findlargestinarray comparable array array arrayisempty return nil var sofar array arraycount sofar array sofar array sofar return sofar example usage let arraytotest calling findlargestinarray int let result findlargestinarray arraytotest print largest element array result else print array empty print largest element array sense paradox generic narrow type parameter adding constraint allowed type parameter completely unconstrained used much swapping insertionremoval collection type parameter tightly constrained gain access many method property would otherwise used argument many function simple constraint constraint need type parameter conform one protocol append name protocol type parameter following example type u must equatable v must hashable func example u equatable v hashable foo bar u baz v constrain perhaps need finergrained control fair enough let first tally exactly disposal type parameter like u v etc might defined type method generic type signature enclosing type method example generic method belonging generic type foo access foo type parameter well refer transform example earlier type parameter associated type require type parameter conform protocol get access type parameter associated type well example u conforms foodeatingtype automatically gain access associated type ufood v conforms maxheaptype standard library rawrepresentable protocol velement vrawvalue work constrain swift support three type constraint someprotocol type parameter must satisfied type conforms protocol someprotocol note protocol composition using protocol foo bar work u type parameter associated type must equal type parameter associated type u someclass must class specifically must satisfied instance someclass one subclass one rare putting together put together generic type signature follows declare type parameter want type parameter declared conform single protocol described keyword declare constraint separated comma highly contrived example intended demonstrate syntax protocol foo typealias key typealias element protocol bar typealias rawgeneratortype func example foo u v v foo v bar tkey vrawgeneratortype u velement u v u intimidated going break generic type signature step step keyword declare three type parameter u v must conform foo protocol foo keyword declare four constraint v must conform foo protocol v foo v must also conform bar protocol v bar since conforms foo associated type tkey v also associated type vrawgeneratortype two type must tkey vrawgeneratortype since v conforms foo v associated type velement associated type must u u velement wherever use example function need choose type u v fulfill criterion code compile constrained extension new swift constrained extension powerful language feature leverage generic swift extension allow add method type even type define also allow add default implementation method defined protocol constrained extension let take even generic type like array add method available generic type type parameter parameter associated type match certain constraint protocol associated type like collectiontype add default implementation protocol method available associated type match certain constraint method constrained extension great replacement generic function elaborate difficulttoread generic type signature also define computed property subscript initializers constrained extension syntax limitation syntax constrained extension follows method extension available array whose element hashable comparable extension array element hashable element comparable keyword follows type name followed list one constraint clause separated comma yet constrain generic type tightly would become nongeneric using extension array int error sametype requirement make generic parameter element nongeneric extension array element int constrained extension add conformance additional protocol protocol myprotocol array comparable element conform myprotocol error extension type array constraint inheritance clause extension array myprotocol element comparable hopefully limitation disappear future extension collectiontype let rewrite findlargestinarray free function defined earlier method constrained extension fact allow method operate collection type defined collectiontype protocol array type conform collectiontype represent collection element like array set turn various reason collectiontype associated type conforms generatortype generatortype turn associated type named element want learn check article sequence otherwise note type collectiontype element represented selfgeneratorelement want write method collectiontype instance find largest element collection make sense restrict method collectiontype instance containing thing compared lends naturally following extension collectiontype selfgeneratorelement comparable func largestvalue generatorelement guard var indeed real thing guard var largestsofar first else return nil item self item largestsofar type selfgeneratorelement clause know selfgeneratorelement comparable invoke operator instance item largestsofar largestsofar item return largestsofar note could left self clause constraint brevity call new method collectiontype whose element comparable behold work array largestvalue characterviews string qwertyuiop characterslargestvalue even range largestvalue extension array extension generic type work similarly primary difference constrain generic type parameter well note array defined array element following extension method match behavior free findlargestinarray function closely since called array instance otherwise nearly one defined collectiontype extension array element comparable func largestvalue generatorelement guard var largestsofar first else return nil item self item largestsofar largestsofar item return largestsofar detail hopefully understand semantics generic programming swift discussion several related topic follows implementation couple way generic might implemented language java needed maintain backwards compatibility generic introduced generic java implemented using type erasure java code compiled compiler performs type checking discard type information inserting downcast necessary type information longer available runtime java generic limited quite way another approach taken c perform specialization approach different implementation generic entity c template may generated compiler implementation corresponding use entity specific type implementation might optimized differently based concrete type take swift generic support closer c swift compiler emit universal implementation generic function work type also create different specialized variant better performance swift reified generic meaning type information accessible runtime allows write code like following protocol simpleinitable init create array filled count empty instance func emptyinstances simpleinitable count int return count map without reified generic might invoke method differing return type would impossible runtime know exactly concrete type used fill array limitation generic compiletime construct generic code specialized compile time information generic require function must available compile time mean generic replacement runtime type checking casting using runtime type introspection using dynamictype overriding method subclass genericsbased solution given problem seems excessively troublesome particular run issue getting compiler accept code ask could replace use generic multiple handcoded nongeneric copy generic function type word could manually specialize code program relying information known runtime order determine concrete type used invoking generic function type example function return instance class protocol trying use generic implement polymorphic behavior depending subclass conforming type actually dispensed answer first question andor answer second question yes generic almost certainly right tool whatever trying accomplish conclusion static typing useful tool type system insufficiently expressive get way software engineer swift type system still limited important way derives great amount power language support generic much swift standard library utilizes generic programming many opensource library well ultimately grant developer additional flexibility choosing implement solution problem suggestion criticism welcome particular subject matter remains unclear please drop note anything help improve article greatly appreciated
206,Lobsters,swift,Swift programming,Swift 2.1,http://www.russbishop.net/swift-2-1,swift,release note interop type sweet stuff covariance contravariance covariance contravariance bug fix known issue personal note rus bishop,thought apple slowing swift think xcode beta includes swift always check release note nt necessarily address everything interop type enums imported c automatically conform equatable work pattern matching switch statement without forcing write extension operator named c union import structs field corresponding field union using struct swift presumably preserve ability use union project different view underlying bit yet verify swift really make struct field use underlying storage relatively littleknown c bitfield member c structs imported usable swift dispatchblockt go back convention block void dispatchblockcreate work properly sweet stuff string interpolation allows string literal one bothered constantly fancy thing private thing modified file trigger recompilation file depend case huge performance benefit error message produced type checker continue improve would nt pay one much attention except explicitly call really common scenario generic closure containing error body used almost always give error outer scope statement useless gotten used cutting pasting body closure get around manually giving closure argument return type one great news covariance contravariance functionclosure type covariance contravariance fancy way saying pas int something expecting string put another way parameter closure le specific target return type specific target make sense think function accepts surely accept string int anyobject nsurlrequest target expected produce anyobject surely uibutton qualifies bug fix bug could cause crash memory leak objectivec block passed swift method fixed though nt seen detail might happen using switch multiple type using type pattern longer cause memory leak declaring multiple global variable single var let longer cause memory corruption let case longer leak variable following scope would cause compiler crash used doubt breaking change anyone known issue compiling optimization debug information enabled time cause compiler crash workaround pas gnone disable debug information nondebug build personal note thing hectic illness busy schedule looking forward resuming blogging regularly currently finishing several post waiting concern swift general rus bishop blog represents personal opinion endorsed employer
207,Lobsters,swift,Swift programming,Swift 2: Control Flow Pattern Matching Examples,http://austinzheng.com/2015/09/23/pmatch-control-flow/,swift control flow pattern matching example,swift control flow pattern matching example pattern matching using checking certain case unboxing associated value qualifying clause complex predicate simple logical test optional unwrapping pattern matching pattern matching using pattern matching using advanced pattern optional pattern nested enumeration type checking pattern pattern exhaustiveness checking,swift control flow pattern matching example sep article aim provide example expanded pattern matching support ship swift pattern matching using guard new swift support pattern matching within statement guard statement let first define simple enum generic number type represent either integer floatingpoint value boolean enum number case integervalue int case doublevalue double case booleanvalue bool checking certain case use case want check whether value corresponds certain case work regardless whether case associated value unbox value exist let mynumber number case integervalue mynumber print mynumber integer pattern case integervalue come first value matched variable mynumber come equal sign might seem counterintuitive similar optionalunwrapping let written value checked come equal sign equivalent swift version using switch follows switch mynumber case integervalue print mynumber integer default break unboxing associated value use case want check whether value corresponds certain case want extract associated value case let integervalue theint mynumber print mynumber integer theint pattern becomes case let integervalue theint value matched remains previous example example concept applied guard semantics predicate guard identical pattern matching work exactly way func getobjectinarray array atindex index number guard case let integervalue idx index else print method accepts integer argument return nil return array idx qualifying clause case switch statement clause optionally follow pattern provide additional constraint let modify getobjectinarray atindex function previous example func getobjectinarray array atindex index number guard case let integervalue idx index idx idx arraycount else print method accepts integer argument bound return nil return array idx complex predicate swift statement surprisingly capable statement multiple predicate separated comma predicate fall one three category simple logical test eg foo bar baz one predicate must placed first optional unwrapping eg let foo maybefoo foo optional unwrapping predicate immediately follows another optional unwrapping predicate let omitted fitted qualifier pattern matching eg case let bar something thevalue discussed fitted qualifier predicate evaluated order defined predicate failing predicate evaluated contrived example complicated statement let int let b int let firstvalue number let secondvalue number b let firstvalue firstvalue secondvalue secondvalue case let integervalue first firstvalue case let integervalue second secondvalue second first print b different secondvalue greater firstvalue print b firstvalue secondvalue b first second always prioritize intelligibility cleverness building construct pattern matching using forin pattern matching used conjunction forin loop case intent iterate item within sequence item match given pattern example follows enum engineeringfield string case civil mechanical electrical chemical nuclear enum entity case engineeringstudent name string year int dept engineeringfield case humanitiesstudent name string year int dept string case engineeringprof name string dept engineeringfield case humanitiesprof name string dept string list entity currently present classroom var currentlypresent entityengineeringprof name alice dept mechanical entityengineeringstudent name belinda year dept mechanical entityengineeringstudent name charlie year dept chemical entityhumanitiesstudent name david year dept english literature entityhumanitiesstudent name evelyn year dept philosophy entityengineeringstudent name farhad year dept mechanical iterate engineering student case let engineeringstudent name dept currentlypresent print name study dept engineering present output belinda study mechanical engineering present charlie study chemical engineering present farhad study mechanical engineering present forin predicate pattern element compared precedes keyword sequence iterate follows note pattern switch statement unwrap multiple associated value ignore care using could necessary also add clause additional condition constrain element iterate pattern matching using pattern matching also used conjunction loop case intent repeatedly run loop body long value predicate successfully match pattern wit enum status case continue int case finished func dosomething input int status input return finished else work print work input input return continue input var lateststatus dosomething case let continue nextinput lateststatus lateststatus dosomething nextinput output work input work input work input work input work input note compound predicate described complex predicate also supported loop including use clause advanced pattern brief overview pattern supported pattern matching mechanism follows optional pattern new optional pattern myvalue equivalent myvalue optionals note use pattern within switch statement case well like pattern refer number enum let myvalue number case integervalue myvalue print myvalue nil unspecified integer case let integervalue theint myvalue print myvalue nil contained integer theint nested enumeration pattern nested including enumeration pattern previous example could also written case integervalue myvalue print myvalue nil unspecified integer case let integervalue theint myvalue print myvalue nil contained integer theint type checking pattern type checking pattern used determine instance protocol type actually instance concrete type u u conforms instance class actually instance class u u subclass class animal var age int init age int selfage age class cat animal var hasfur bool name string init age int name string hasfur bool selfhasfur hasfur selfname name superinit age age class dog animal let mypet animal care whether downcast succeeded case dog mypet print mypet dog want reference value downcasted type case let mycat cat mypet print mypet cat named mycatname hasfur sphynx cat unsurprisingly nest type checking pattern within pattern enumeration pattern described earlier enum thing case someanimal animal somevegetable somemineral let anobject thing case someanimal cat anobject print anobject someanimal containing cat case let someanimal thecat cat anobject print anobject contains thecatage yearold cat named thecatname pattern point hopefully clear pattern swift support utilized conjunction control flow statement example swift support matching range let mynumber case mynumber print mynumber also support matching expression pattern behavior default comparison customized overriding let protagonist jyaku case jyaku protagonist print could used plain old statement theoretically able match tuple pattern xcode compiler segfaults instead let true let b true case true true b print b true switch switch swift pattern matching showed two place multiple variable assignment switch statement enumeration case contained associated value switch way manipulate instance enum exception optional special let syntax devised swift grant enums power let much pattern matching control flow logic work together meaning one longer need example write forin loop whose body consist single switch statement alternate nesting switch statement pattern matching control flow also obviate need number pattern example sometimes desirable add accessor property enums retrieve associated value specific case extension number var valueasinteger int switch self case let integervalue value return value default return nil var valueasboolean bool switch self case let booleanvalue value return value default return nil way could use let instead switch one really cared whether enum instance one specific case func getobjectinarray array atindex index number switch index case let integervalue index return array index default return nil became func getobjectinarray array atindex index number let index indexvalueasinteger return array index return nil swift boilerplate longer necessary however switch statement still us important probably exhaustiveness checking enumeration three case switch statement still provide ability check case covered something forin helpful later go back add case enum compiler flag every place switch enum unless lazy used default case needlessly large project enum may switched hundred thousand place feature mean difference introducing undiscoverable bug refactoring thanks gsimmons catching typo sample code
208,Lobsters,swift,Swift programming,Apple Official Swift Education Course,http://swifteducation.github.io/,apple official swift education course,introducing swift education teaching app development swift u trademark information guideline using apple trademark copyright,introducing swift education swift education collection resource assist educator bringing swift classroom teaching app development swift collection course material educator teach computer science concept swift io app development lead learner experiential learning using customizable suite lesson plan presentation xcode project u community educator collaborating build practical fun material learning swift programming language course material content web page used pursuant creative common license specified license information within course material trademark information swift logo apple apple logo apple trademark service mark graphic logo used connection swift education project trademark registered trademark apple inc u andor country trademark service mark graphic logo used connection swift education project may trademark respective owner granted right license aforesaid trademark agree shall remove obscure alter proprietary notice including trademark copyright notice may affixed contained within service information proper referential us swift logo please review guideline using apple trademark copyright
210,Lobsters,swift,Swift programming,Swift's Mirror is now documented,https://github.com/ksm/SwiftInFlux/issues/100,swift mirror documented,join github today sign reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign perform action time signed another tab window reload refresh session signed another tab window reload refresh session
212,Lobsters,swift,Swift programming,Roost: a new platform for Swift,https://precompile.com/2015/07/09/swift-platform.html,roost new platform swift,opensourcing linux compatibility need platform cabal cargo cocoapods carthage xcode build system enter roost roost arc optionals,year wwdc saw apple announce coming opensourcing linux compatibility swift fun thoughtfullydesigned language swift truly modern language show promise beyond land mac io application however swift currently usable xcode ide playground xcodebuild commandline interface commandline repl compiler program swiftc latter like compiler ungainly use directly requires verbose magic compile sort nontrivial project structure need platform language need platform ecosystem make useful haskell cabal rust cargo c make right swift couple package manager cocoapods carthage compiled language need package manager carthage cocoapods invoke xcode build system hood build anything swift usable linux role beyond building user application need system capable building swift executable library without presence xcode server run linuxbsdetc web developer want fire entire xcode toolchain produce binary furthermore want development system continuous integration system web server run mac o x xcode swift really coming linux need fullfeatured package manager build system something handle resolving dependency fetching dependency building entire scope project dependency xcodeonthemac strippeddown multiplatform relative able build xcodeproj file simply going cut enter roost roost alphastage package manager build system swift heavily inspired syntax operation rust cargo aim fill gap ecosystem theory minute swift binary deployed nonmac o x platform eg web server roost ready build platform language toolchain interoperability improve multitude different application swift graphical application web application server etc reliable server arc optionals powerful combination gui application sort possibility roost hopefully powerful tool building various program library
213,Lobsters,swift,Swift programming,Using Linux C APIs in Swift: Glob,http://bendyworks.com/using-linux-c-apis-in-swift-glob/,using linux c apis swift glob,using linux c apis swift glob swift coming linux system language glob glob api glob function protocol number enumerable protocol swift adding little safety conclusion gist,using linux c apis swift glob apple announcement swift coming linux time think swift leveraged system language rather simply app language order function system language need easy interface primitive system bsdlike o x mean using myriad bsd function found well lowercase one mostly post show wrap glob swift since needed recent project reasonably simple introduction swiftc interaction glob api o x access manpage via man glob manpage show three different function call though one globb us block rather function pointer sure whether going make port linux case let focus glob globfree glob function glob function manpage indicates argument errorindicating return value argument order pattern behavior flag error function pointer passbyreference result object return value nonzero error implementation pretend nt find result upon error let begin setting glob class class glob collectiontype var globflags globtilde globbrace globmark init pattern string var globobj globt glob patterncstringusingencoding globflags nil globobj store result somewhere globfree globobj nt quite compile need adhere collectiontype protocol see though successfully wrapped glob globfree swift take care gross exclamation point string decoding storing result minute first adhering collectiontype protocol collectiontype protocol number enumerable protocol swift including sequencetype collectiontype case make sense say want collection path rather sequence path sequence mean received element sequence never need anticipate use case might true using collectiontype adhere either sequencetype collectiontype get functionality free think nsfastenumeration swift adhere collectiontype protocol need provide two subscript like class glob collectiontype noncollectiontype code elided var path string var startindex int return pathsstartindex var endindex int return pathsendindex subscript int string return path adding little safety since interacting c api faced thing like char array nt exactly string since nt encoding potential though extremely unlikely scenario want extract data globt object sanitize store string also want guard weird input get rid exclamation point initializer class glob collectiontype collectiontype declaration elided private var globflags globtilde globbrace globmark var path string init pattern string var globobj globt let cpattern patterncstringusingencoding executeglob cpatt globptr globobj populatepaths globobj globfree globobj private func executeglob cpattern cchar globptr unsafemutablepointer globt bool return glob cpattern globflags nil globptr private func populatepaths gt globt var int gtglmatchc let path stringfromcstring gtglpathv pathsappend path conclusion approachable swift api glob path glob dev ruby j swift println path full source code test available gist right technique abstract away c apis swift code making entire codebase safer idiomatic true glob fairly simple api primitive afforded u swift language foundation framework let u design awfully clean abstraction
214,Lobsters,swift,Swift programming,Swift 2.0: Control Flow and Error Handling,http://austinzheng.com/2015/06/08/swift-2-control-flow/,swift control flow error handling,swift control flow error handling swift future article repeatwhile dowhile loop nested scope guard dotdecimal notation optional defer error handling official documentation without caveat block grab bag forin clause case clause conditionals,swift control flow error handling jun swift announced today wwdc far important news regarding swift future announcement language opensourced later year osicompliant license apple taking upon port compiler standard library linux possibility limitless imagine swift running embedded system powering backend service even serving nextgeneration application language certain smartphone platform next iteration apple fledgling programming language also includes number new feature including protocol extension novel form control flow exceptionstyle error handling article discus latter two topic future article discus protocol extension complete longstalled series generic repeatwhile classic dowhile loop renamed repeatwhile order make way new statement introduces nested scope much like bare brace c example run produce following output protagonist inner scope jyaku protagonist outer scope meela func nestedscope let protagonist meela let protagonist jyaku print protagonist inner scope protagonist print protagonist outer scope protagonist note definition constant protagonist within nested scope shadow previouslydeclared constant protagonist within outer scope function guard guard another new feature purpose validate condition force stop execution condition met simple example illustrates guard work func firstexample input int start guard guard inputisavalidnumber input else return end guard performsometaskwithinput input guard statement begin keyword guard followed predicate expression return boolean equivalent followed keyword else block code comprising guard else clause control reach guard statement predicate first checked predicate evaluates false else clause run else clause required part guard statement must either exit scope example returning function call noreturn function overall effect guard thus prevent code continuing execute along default path unless condition met example performsometaskwithinput ever called inputisavalidnumber input return true interesting example guard usage developed following function take string containing fourpart address dotdecimal notation attempt convert equivalent numeric value return ipresult enum encapsulates either value failure message enum ipresult case success int case failure string func numericiseipaddress ipaddr string ipresult split dotdecimal string presumably four component let component split ipaddrcharacters ensure split happened correctly guard componentscount else return failure componentscount component many component get first octet guard let firstoctet int string component firstoctet firstoctet else return failure first octet bad get second octet guard let secondoctet int string component secondoctet secondoctet else return failure second octet bad get third octet guard let thirdoctet int string component thirdoctet thirdoctet else return failure third octet bad get fourth octet guard let fourthoctet int string component fourthoctet fourthoctet else return failure fourth octet bad calculate numerical value ip address given value octet let value fourthoctet thirdoctet secondoctet firstoctet return success value example usage let rawaddress let result numericiseipaddress rawaddress switch result case let success value print ip address rawaddress equivalent numeric value value case let failure f print failed convert rawaddress numeric value error f example second fifth guard clause unwrap optional using let syntax shared iflet construct however optional unwrapped successfully unwrapped value used subsequent code example firstoctet secondoctet thirdoctet fourthoctet unwrapped call failable initializer unwrapped used calculate value also note presence keyword defines additional expression must evaluate true order predicate satisfied guard provide alternative deeply nested iflet construct swift compound iflet especially useful work specific failure mode must done enclosing function return enclosing scope exited ip address example us else clause specify error occurred returning failure result compare func numericiseipaddress ipaddr string ipresult let component split ipaddrcharacters componentscount let firstoctet int string component firstoctet firstoctet let secondoctet int string component secondoctet secondoctet let thirdoctet int string component thirdoctet thirdoctet let fourthoctet int string component fourthoctet fourthoctet let value fourthoctet thirdoctet secondoctet firstoctet return success value else return failure fourth octet bad else return failure third octet bad else return failure second octet bad else return failure first octet bad else return failure componentscount component many component defer defer yet another swift control flow construct defines block code executed execution leave current scope run produce following output operation started operation complete run secondlast run last func deferexample defer print run last defer print run secondlast print operation started print operation complete multiple defer statement defined within scope first defer statement appears scope last one executed defer useful performing unconditional cleanup whether operation succeeds fails example defer used specify code gracefully close file handle network connection deallocates manually allocated buffer eg c interop error handling check official documentation information swift error handling guard defer lead swift new exceptionlike error handling system without caveat demonstrate work let convert ip address example use swift style error handling first error defined declaring type conform new errortype protocol type conforms type thrown error instead using ipresult type store either successful result error let define new iperror enum whose instance throw error enum iperror errortype case toofewcomponents case toomanycomponents case octetwasbad int int octet next function method closure throw error declared throw keyword following parameter list preceding returntype present function declared keyword contain code throw unhandled error numericiseipadress function converted throw error func numericiseipaddress ipaddr string throw int let component split ipaddrcharacters ensure split happened correctly guard componentscount else componentscount throw iperrortoofewcomponents else throw iperrortoomanycomponents get first octet guard let firstoctet int string component firstoctet firstoctet else throw iperroroctetwasbad get second octet guard let secondoctet int string component secondoctet secondoctet else throw iperroroctetwasbad get third octet guard let thirdoctet int string component thirdoctet thirdoctet else throw iperroroctetwasbad get fourth octet guard let fourthoctet int string component fourthoctet fourthoctet else throw iperroroctetwasbad return fourthoctet thirdoctet secondoctet firstoctet function return bare int int result enum also throw error case iperror throw keyword followed instance errortype throw error causing execution return enclosing scope immediately error handled order catch error thrown use docatch construct let demonstrate writing function read user input command line using swift nifty new readline function try parse ip address func trynumericisingip get value user print enter fourpart ip terminator let maybeinput readline stripnewline true continue actually received value guard let input maybeinput else return try numericising userprovided ip handle error let numericvalue try numericiseipaddress input print ip address input equal numericvalue catch iperrortoofewcomponents print ip address fewer component catch iperrortoomanycomponents print ip address component catch let iperroroctetwasbad octet print octet number octet invalid either nonnumeric bound catch nt necessary compiler complains exhaustiveness maybe early beta seed bug print encountered unknown error error code enclosed within clause executed function method might throw error marked throw must invoked try error thrown result invoking function handled catch clause catch clause specify pattern error thrown automatically bound error local variable seen also forcetry construct try assumes function invoked return exception requires catch clause one returned application terminate runtime error way try analogous forcedowncasting forceunwrapping myoptionalvalue note catch clause work similarly clause patternmatching switch statement compiler attempt perform exhaustiveness analysis catch clause catch every possible error compiler assumes uncaught error bubble next higher scope function handled docatch construct exhaustive need declare trynumericisingip throw caller handle unhandled error defer part example hard see could used case file need closed network database connection need torn even error condition manifest sense play much role finally block javastyle trycatchfinally construct grab bag close article discussion number minor control flow improvement ship swift forin clause forin loop defined clause loop run item fulfill clause predicate let somenumbers number somenumbers number print number greater number output number greater number greater number greater case clause conditionals little obscure use case clause certain pattern alongside guard forin supported pattern enumeration pattern new optional pattern myvar equivalent myvar expression pattern isas typecasting pattern mean example switch longer way work enums associated value associated value enum representing preferred way referring entity enum identifier case name string case number int case none var robotidentifier identifier name case none robotidentifier print robot nameless else case let name name robotidentifier name print luke skywalker faithful astromech else case let name robotname robotidentifier print robot named robotname else case let number robotid robotidentifier print robot identification number robotid following example simple civilization simulator start simulation golden age every time loop run age advanced random chance golden age continues decay normalage loop allows simulated civilization celebrate iteration loop civilization remains within golden age protocol agetype func nextage agetype class goldenage agetype var length int func nextage agetype length return self normalage func celebrate print hooray firework capital city length year class normalage agetype func nextage agetype return self var currentage agetype goldenage case let thisage currentage goldenage case let theage thisage theagecelebrate currentage theagenextage sample output hooray firework capital city year hooray firework capital city year hooray firework capital city year hooray firework capital city year try swift control flow feature see make code intelligible
215,Lobsters,swift,Swift programming,Swift 2.0,https://developer.apple.com/swift/blog/?id=29,swift,swift open source new feature error handling model availability protocol extension swifter sdks learn http developerapplecomswift blog post,jun swift today wwdc announced swift new version even better performance new error handling api firstclass support availability checking platform apis feel even natural swift enhancement apple sdksopen sourcein addition new feature big news apple making swift open source later year incredibly excited look forward giving lot information open source release get nearer tell far swift source code released osiapproved permissive licensecontributions community accepted encouragedat launch intend contribute port o x io linuxsource code include swift compiler standard librarywe think would amazing swift favorite platformswe excited opportunity open source swift creates industry bakedin safety feature combined excellent speed mean chance dramatically improve software versus using cbased language swift packed modern feature fun write believe get used lot place together exciting road aheadnew featuresswift also includes lot new language feature refinement expect see blog post exploring feature depth sure watch wwdc session covering topic week new feature include error handling model new error handling model swift instantly feel natural familiar try throw catch keywords best designed work perfectly apple sdks nserror fact nserror conforms errortype definitely want watch wwdc session new swift hear itavailability using latest sdks ensures get access new feature information platform change sometimes still need target older o swift make much easier safer swift compiler show error use api new target o available block safely wrap line code run right o versionsprotocol extension swift focused protocoloriented development even session topic wwdc swift add protocol extension standard library us extensively used use global function swift add method common type function chain naturally code much readableswifter sdks swift work even better apple sdks thanks part two new feature objectivec nullability annotation generic sdks updated annotate api return nil need use optionals often true generic system employed sdks often preserve detailed type information swift codelearn morethis taste new swift download latest version swift programming language ibooks store sure watch wwdc session live streamed video throughout week read visit http developerapplecomswift blog post
216,Lobsters,swift,Swift programming,Our Swift Experience at SlideShare,http://engineering.linkedin.com/ios/our-swift-experience-slideshare,swift experience slideshare,introduction slideshare io app slideshare io app swift using swift cocoa objectivec much actually swift interoperating objectivec problem early adoption xcode xcode ever blocking issue swift xcode question swift syntax feature syntax generic operator overloading safety feature optionals brace required statement initialization switch statement swift style guide static typing safe casting access control con language singleline return statement closure missing useful dynamic feature parameter naming closing remark twitter linkedin slideshare io app footnote,introduction last fall slideshare released slideshare io app one apps app store built entirely swift partially due coincidental release date swift using swift made sense u soon language announced spent every moment reading material available experimenting language time came decide would use swift io app new language feature much succinct syntax appealing decided take chance already shared general experience swift io feature previous article post technical indepth look detail swift language experience using development slideshare io app swift decided use swift expressive syntax functional programming feature focus safety objectivec interoperability important decision knew would want leverage internal linkedin framework party open source code written objectivec reading apple book using swift cocoa objectivec got feeling using library would breeze slideshare iterate quickly rapidly changing language issue u twoweek period right launch even brought member android team help slideshare promotes every developer generalist therefore developer experience ruby web application experience building mobile apps ruby web application able code feature swift day experience platform swift similarity scripting language like ruby much easier get speed much actually swift wrote entire app swift exception wrote custom uicollectionviewflowlayout subclass objectivec written objectivec order used storyboards xibs time open source library pulled using cocoapods linkedin internal library internal core data interface objectivec using efficient threading core data plan converting swift time interoperating objectivec interoperating objectivec fairly easy add new header file bridging header mostly set go two main pain point interacting objectivec code first lose benefit swift static typing working nsdictionary object even dictionary simply dictionary key string value string still need work swift dictionary either string anyobject nsobject anyobject second potential pain point working enumeration created objectivec c code use nsenum nsoptions macro apple provided swift convert proper swift enumeration though use macro provided swift convert proper swift enumeration syntactic sugar love much issue needed fork facebook sdk change code use nsenum every enumeration could use properly swift problem early adoption said started swift day beta needle say pretty painful dealing constant crashing sourcekit specific problem encountered problem still exist compiler slow cpu intensive macbook pro retina dual core powerful enough compile quickly coworkers model quadcore much better time either way fan quite loud compiling syntax highlighting would break quite often sourcekit crashed beta issue became better better seemed regress seemed happen frequently working lazy property realtime syntax checking take rely building frequently slow time new version xcode came refactor portion code updated syntax time refactor usually pretty trivial half day unfortunately refactor option xcode currently support swift however version refactor swift option worked reasonably well time would write something compile would crash entire ide sometimes even whole computer occurred mostly early beta quite frustrating still new language figure wrong without error message ever blocking issue swift never hit issue bug spent half day working turned issue swift bug swift code would either compile crash compiler xcode one crash encountered app production seems bug swift happen often posted question apple developer forum swift syntax feature syntax swift syntax approachable developer familiar scripting language like ruby python even designer felt comfortable altering parameter swift syntax simple get rid cruft seen language like objectivec c great example objectivec block syntax v swift closure http writing swift never really find looking syntax different language feature syntax natural easy understand dealing numerous nested optionals bit messy sometimes however code still readable generic generic useful feature used creating utility method could work numerous type found helpful making typesafe generic code could reuse numerous situation though used generic quite bit still feel used full potential investigating way use generic refactor code future operator overloading operator overloading hotly debated topic yet overloaded operator created however c background definitely see merit operator overloading think could become useful point u though see u creating many custom operator issue code readability time wished operator overloading writing objectivec code excited ability operator overloading allow consistent concise code working custom type safety feature optionals using optionals correctly safely enabled u eliminate entire class crash app brace required statement simple one found important feature eliminated whole class potential bug many developer habit trying make code compact feature make sure bug introduced due habit initialization sizable portion swift book apple go initialization definitely take time read portion book time understand clearly disagreement internally whether initialization concrete complex found prevents bug occur improper initialization developer trying add initializers class someone else written addition failable initializers important missing initialization swift experience limited thus far feature released recently unfortunately seems like completely flushed experimenting try use completely replace class method needed initialization could fail based input switch statement switch statement swift much powerful language like c java much safer defaulting falling case switch statement one feature simple safer swift also requires case caught either specific case default run compilation error nt handle every case another great change help developer make sure undefined behavior change feature like pattern matching preferred using switch statement case instead ifelse statement see swift style guide static typing everything statically typed eliminates issue due assuming certain data type within collection safe casting casting swift developer option developer forcecast specific type using keyword forcecast fails type specified descendant type cast app crash developer choose add order statement return optional nil cast possible require use code order avoid crash access control possible objectivec essentially let developer know private using technique declaring private method variable class extension implementation file hand swift make access control actually enforceable using public private internal keywords nice feature safety disallows improper use subclassing class similarly final keyword used disallow subclassing certain method con language singleline return statement closure feature nice actual singleline closure cause issue something return value care order workaround issue cause need add blank return workaround another way found would nicer consistent always require return keyword example issue practice following http using optional chaining method adding object method actually return value therefore feature singleline return statement closure make compiler infer return value void like required therefore add return nothing fix compilation issue missing useful dynamic feature found miss many dynamic feature objectivec one particular apparent writing helper method core data nsmanagedobject subclass could find way define method class return type would return subclass type called context subclass inspired category implemented magical record actuality save cast correct subclass calling method really big deal attempt coding http parameter naming way parameter name used function method initializers confusing nonuniform external name parameter method implied order argument cc would nice made consistent kind get used want first time add external name front see gist info http closing remark found experience writing new slideshare io app swift great success overall great linkedin slideshare comfortable taking risk developing brand new language believe benefit greatly outweighed cost please feel free reach directly twitter linkedin check slideshare io app today footnote reason must use either string anyobject nsobject anyobject nsdictionary key must hashable swift string nsobject implement hashable protocol create type extend another type want use key dictionary implement hashable protocol syntax highlighting break come back particular file close file tab opened reopen publishing another article developer working designer
217,Lobsters,swift,Swift programming,ALAccordion - new smart accordion style container view for IOS,https://github.com/Alliants/ALAccordion,alaccordion new smart accordion style container view io,alaccordion overview requirement note screenshots demo installation installation cocoapods note manual installation usage alaccordioncontroller accordion header footer note create section note,alaccordion overview alaccordion accordion style container view io manages set expandablecollapsable content section section open consumes full screen see screenshots section accordion associated custom view controller manages header content view alaccordion relies autolayout provide intrinsic content size header view make super easy custom section header modified animated section alaccordion also allows optional header footer view hidden section opened requirement xcode swift requires io requires autolayout use version swift note alaccordion us arc screenshots demo run example project clone repo run pod install example directory first installation installation cocoapods alaccordion written swift install cocoapods must target io later install cocoapods newer sudo gem install cocoapods add alaccordion podfile note must add useframeworks line use swift cocoapods podfile target target useframeworks pod alaccordion end manual installation add file alaccordionclasses directory project usage show basic usage alaccordion see example project comprehensive example alaccordioncontroller alaccordioncontroller uiviewcontroller subclass container view manages section first create view controller subclass alaccordioncontroller class alhomeviewcontroller alaccordioncontroller override func viewdidload superviewdidload accordion header footer add optional header andor footer accordion setting headerview footerview property note accordion us intrinsic content size header footer view layout ensure setup autolayout constraint correctly override func viewdidload header let header uilabel headertext accordion header selfheaderview header footer let footer uilabel footertext accordion footer selffooterview footer create section create section must pas alaccordion list view controller order displayed view controller instantiated storyboard code note view controller must conform alaccordionsectiondelegate protocol see override func viewdidload let storyboard uistoryboard name main bundle bundlemain let storyboardinstantiateviewcontrollerwithidentifier firstvc let storyboardinstantiateviewcontrollerwithidentifier secondvc let storyboardinstantiateviewcontrollerwithidentifier thirdvc selfsetviewcontrollers section view controller provide alaccordioncontroller new instance uiviewcontroller section accordion section view controller must conform alaccordionsectiondelegate protocol must provide headerview like alaccordioncontroller header footer view headerview must use autolayout provide intrinsic content size changing constraint header view easily change size header eg section opening show detail swift class alfirstsectionviewcontroller uiviewcontroller alaccordionsectiondelegate override func viewdidload superviewdidload mark alaccordioncontrollerdelegate required let headerview uiview let header uilabel headertext section header return header optional func sectionwillopen animated bool optional func sectionwillclose animated bool optional func sectiondidopen optional func sectiondidclose note must manually specify section open example show open section tap gesture headerview swift let headerview uiview let header uilabel headertext section header return header override func viewdidload superviewdidload add gesture recognizer header selfheaderviewaddgesturerecognizer uitapgesturerecognizer target self action selector headertapped func headertapped recognizer uitapgesturerecognizer get section view controller let sectionindex selfaccordioncontroller sectionindexforviewcontroller self section open close otherwise open selfaccordioncontroller opensectionindex sectionindex selfaccordioncontroller closesectionatindex sectionindex animated true else selfaccordioncontroller opensectionatindex sectionindex animated true todo note limitation highlight state header view example embedding uitableviewcontroller section undesired effect cell first time section open avoid call selfviewlayoutifneeded viewdidload method section view controller currently alaccordion display limited number section closed state must exceed height device future plan allow scrollable header feel free send pull request license alaccordion available mit license see license file info alliants limited github http githubcomalliants website http alliantscom twitter alliants http twittercomalliants
218,Lobsters,swift,Swift programming,Legal characters in Swift 1.2 Operators,https://gist.github.com/wxs/d773cb2a2e9891dbfd63,legal character swift operator,,always wanted define sailboat operator swift well sailboat swift significantly increased number legal character custom operator generated list ease copypaste generated reference http character usable anywhere operator ‚∏Ø additionally character occur long first character operator
219,Lobsters,swift,Swift programming,Send Data to Apple Watch with Core Data and Telerik UI for iOS in Swift,http://blogs.telerik.com/blogs/15-02-03/send-data-to-apple-watch-with-core-data-and-telerik-ui-for-ios-in-swift,send data apple watch core data telerik ui io swift,core data telerik chart io existing iphone app project using telerik chart io creating watchkit app creating data proxy library app group sending getting data using proxy library github,apple watch long rumored device finally appeared september followed watch sdk called watchkit november introduction sdk maybe raised question answered like everybody else looking future answer apple one question send data larger allowed push notification iphone watch well several way nsuserdefaults file core data single recommended approach apple method legit however nsuserdefaults appropriate user preference rather real data file may good solution data scenario therefore choose bet core data today going show send telerik chart io apple watch form image string stored core data common scenario existing iphone app project using telerik chart io want compliment apple watch app tutorial assumes already project called applewatchwithtelerikchart worry check use core data checkbox back created iphone app assume core data enabled initially show enable existing app last least tutorial assumes using swift primary language complete project structure consist iphone app watchkit app framework directly communicates core data use xcode beta let get started creating watchkit app iphone app project opened xcode go file target io apple watch watchkit app click next check include notification scene include glance scene checkboxes may need point future development tutorial focus main watchkit app product name field filled automatically click finish asked whether activate applewatchwithtelerikchart watchkit app scheme click activate open interfacestoryboard applewatchwithtelerikchart watchkit app folder add image label component interface controller scene using ctrldrag create iboutlets name chartimageview titlelabel creating data proxy library iphone app project opened xcode go file target io framework library cocoa touch framework click next name library watchcoredataproxy select swift language dropdown click finish rightclick watchcoredataproxy folder project structure panel select new file io core data data model name model watchmodel click create create model file open model editor create new entity called chartdataentity add two field entity imagebinarydata type binary data stringdata type string time implement code needed talk sqlite db behind core data core logic implementation boilerplate code get appdelegateswift file create project clicking use core data checkbox basically core logic consists applicationdocumentsdirectory managedobjectmodel persistentstorecoordinator managedobjectcontext property savecontext method let add watchcoredataproxyswift following way rightclick watchcoredataproxy folder new file io source swift file create new swift file name file watchcoredataproxy add following code next method implement watchcoredataproxy class send data image text iphone app sqlite db core data method fetch saved data expose watchkit app app group iphone app proxy library watchkit app time make sure iphone app watchkit app actually share data thing enables sharing data whatever form application file nsuserdefaults coredata called app group application part app group enable app group feature apps select applewatchwithtelerikchart project project structure panel select applewatchwithtelerikchart app target go capability app group turn feature asked select development teamaccount check groupwatchsample group course create group name demo purpose use default one select applewatchwithtelerikchart watchkit extension target go capability app group turn feature check groupwatchsample group important name group name applewatchwithtelerikchart app group sending getting data using proxy library coredata proxy app group enabled overall project structure built let send data iphone core data apple watch send image chart string take screenshot chart following way assuming tkchart instance called chart import watchcoredataproxy set sharedappgroup property core data proxy name app group send image string sqlite db iphone app side let get data sqlite db set image label object watch import watchcoredataproxy set sharedappgroup core data proxy app group name get image string sqlite thought core data proxy set image string chartimageview titlelabel one way send data iphone apple watch looking forward seeing apple introduce another api data transfer device time come use approach complete swift project following step found github happy coding
220,Lobsters,swift,Swift programming,First C# 7 Design Notes,https://github.com/dotnet/roslyn/issues/98,first c design note,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
221,Lobsters,swift,Swift programming,Functor and Monad in Swift,http://www.javiersoto.me/post/106875422394,functor monad swift,trying bit hard come simile map implementing type brings several benefit api used instead old objc nserrorbyreference argument functors monad http githubcomjavisotoblogpostsblobmasterfunctor,trying teach functional programming since late many concept daunting somewhat academic naturesince obviously expert intend practical post find many post trying explain monad trying bit hard come simile hopefully sample code illustrate concept betterit recently finally could say got monad mean let explore concept even exists help writing swift codemapone first thing got see wwdc introduction swift could use map function collection type let focus swift arraylet number let doublednumbers numbersmap doublednumbers benefit pattern clearly express transformation trying apply list element case doubling value compare imperative approach var doubledimperative int number number doubledimperativeappend number doubledimperative solving oneliner v line former concise implementation significantly higher signaltonoise ratio map allows u express want achieve rather implemented eas ability reason code read itbut map make sense array map higherorder function implemented container type type one way another wrap one multiple value insidelet look another example optional optional container type wrap value absence itlet number optional let transformednumber numbermap map transformednumber optionalsome true benefit map optional handle nil value u trying operate value may nil use optionalmap apply transformation end nil original value nil without resort nested let unwrap optionallet nilnumber int none let transformednilnumber nilnumbermap map transformednilnumber nonefrom extrapolate map implemented different container type slightly different behavior depending semantics type example make sense transform value inside optional actually value insidethis general signature map method implemented container type wrap value type func map u transformfunction u container u let analyze signature looking type type element current container u type element container returned allows u example map array string array ints contains length string original arraywe provide function take value return value type u map use function create another container instance original value replaced one returned transformfunctionimplementing map typelet implement container type result enum pattern see lot open source swift code today brings several benefit api used instead old objc nserrorbyreference argumentwe could define like enum result case value case error nserror implementation type known either programming language case forcing one type nserror instead generic since going use report result operationconceptually result similar optional wrap value arbitrary type may may present case however may additional tell u value thereto see example let implement function read content file return result result object func datawithcontentsoffile file string encoding nsstringencoding result nsdata var error nserror let data nsdata contentsoffile file option allzeros error error return value data else return error error easy enough function return either nsdata object nserror case file readlike may want apply transformation read value however like case would need check value every step way may result ugly nested let switch statement let leverage map like case want apply transformation value simply pas error throughimagine wanted read file string content would get nsdata need transform string say want turn uppercase nsdata string string series map transformation discus implementation map later let data result nsdata datawithcontentsoffile path let uppercasecontents result string datamap nsstring data encoding map similar early example map array code lot expressive simply declares want accomplish boilerplatein comparison code would look like without use map let data result nsdata datawithcontentsoffile path var stringcontents string switch data case let value value stringcontents nsstring data value encoding case let error error break let uppercasecontents string stringcontents uppercasestringhow would resultmap implemented let take look extension result func map u f u result u switch self case let value value return result u value f value case let error error return result u error error transformation function f take value type example nsdata return value type u string calling map get result u result string initial result result nsdata call f whenever start value simply return another result error otherwisefunctorswe seen map implemented container type like optional array result recap allows u get new container value wrapped inside transformed according function functor may ask functor type implement map whole storyonce know functor talk type like dictionary even closure saying functors immediately know something themmonadsin earlier example used transformation function return another value wanted use return new result object put another way transformation operation passing map fail error well let look type would look likefunc map u f u result u example nsdata converting u result string let replace signature func map f nsdata result string result result string notice nested result return type probably want ok implement function take nested result flattens simpleresult extension result static func flatten result result result result switch result case let value innerresult return innerresult case let error error return result error error flatten function take nested result inside return single result simply extracting inner object inside value errora flatten function found context example one flatten array array contiguous onedimensional arraywith implement result nsdata result string transformation combining map flatten let stringresult result string flatten datamap data nsdata result string let string nsstring data data encoding return resultvalue string else return result string error nserror domain comjavisotoeserrordomain code jserrorcodeinvalidstringdata userinfo nil common find defined many place flatmap flattenmap could implement result like extension result func flatmap u f result u result u return resultflatten map f turned result type monad monad type functor type along map implement flatmap function sometimes also known asbind signature similar one seen container type like one presented usually monad also see pattern example type encapsulate deferred computation like signal futurethe word functor monad come category theory familiar however value name refer concept computer scientist love come name thing name allow u refer abstract concept extremely abstract like monad immediately know mean course assuming previous knowledge meaning get benefit sharing name thing like design pattern decorator took long time assimilate idea blog post familiar expect finish reading immediately understand however encourage create xcode playground try come implementation map flatten flatmap result similar container type perhaps try optional even array use sample value play themand next time hear word functor monad scared simply design pattern describe common operation perform different typesopen source version article create issue ask question open pull request http githubcomjavisotoblogpostsblobmasterfunctor
222,Lobsters,swift,Swift programming,Snowsuit Zine // issue 01,http://snowsuit.io/issue01.html,snowsuit zine issue,raft article idempotence medical condition,learning distributed system common remote procedure call come discussion common one way another called failed abstraction however many good paper refer rpcs mechanism communication raft paper example talk appendentries requestvote rpcs distributed system people mean talk rpcs failed abstraction difference really come someone mean talk remote procedure call first let define remote mean context refers executing work different process code call process could physical machine different one involving network hop given one hand abstract concept executing work different process one performing rpc case appendentries raft telling another machine perform work appending log entry log hand using rpcs abstraction making remote call look semantically local call java remote method invocation rmi example clear distributed system one need execute work remote machine somehow sense rpcs come straight forward way express need way pretty much everyone understands using raft paper example call appendentries requestvote rpcs simply clear executed remote machine nt put requirement implementor raft implement call term java rmi similar functionality offered language choice rpcs common accepted way describe process distributed system interact rpcs referred failure one must referring second case actual implementation use framework attempt make remote call look local bad though root issue remote call behave little like local call first performance remote call different performance profile local call good design system generally involves lot clear function call example iterating data structure language often involve getting something like iterator calling function give next entry local call cheap remote call hand expensive general number thrown around m communication two machine inside datacenter according article plumbr unoptimized method call java optimized method call performing rpc iteration data structure prohibitively expensive apis must designed differently reduce overhead network iterating data structure actually involve performing one rpc get entire data structure reasonable chunk locally iterating chunk notice getting whole data structure might expensive well passing reference large chunk memory perfectly fine inside memory space time consuming move lot data process network imposes design constraint remote call present local call second failure remote call fail way local call happens remote process running happens really slow could process overloaded network acting funny local call nt concern related substrate call happens machine dy local call program longer running well processor acting whole program acting local call take long time local call something take long time cost entering exiting procedure locally le constant performing work different process calling process introduces numerous failure case happen local call finally partial failure given distinction point overall failure far reaching ramification overall design distributed system section failure talk remote call different failure case local call partial failure go deeper demonstrate consider problem incrementing counter simplify thing consider case one actor incrementing counter program running one process trivial add counter move counter another process use rpc increment three case consider call succeeds counter incremented call fails prior incrementing counter call fails incrementing counter returning calling process first case boring nt need much explanation second two case though calling node see call failed way reason counter correct solve common way turn call modifies something sideeffect idempotent operation idempotence medical condition pat helland good introduction basic idea operation executed multiple time effect executed would counter example implemented turn single increment operation two operation called multiple time safely case failure call operation two call ask remote machine unique id call increment unique id client perform two rpcs call executed successfully counter incremented server implementation simple first call made generates unique id store locally return client second call check see id given list stored id performs increment forgets id happens failure first call fails client make call counter modified server might create bunch id never executed let worry client successfully received id call increment rpc id call fails call receives error saying id exist server know one previous failure failed return increment applied even though increment called multiple time one increment happened dealing partial failure remote call imposes significant design decision creator api one worry local call local call one usually remember cleanup one self local call succeeds return successfully caller rpcs refer performing call outside executing process almost always used context performing call network network implementation detail hidden network imposes performance constraint well failure case present local call ignoring difference result system slow fragile remote procedure call abstraction useful tool explaining work done different process distributed system rpcs way hide call happening remotely often lead fragile system nt work well unnecessarily difficult understand experience tell u design apis clearly distinguish local remote call
223,Lobsters,swift,Swift programming,Functional programming for normal humans,https://dirk.to/blog/2014/12/30/functional-programming-for-humans.html,functional programming normal human,infix pipeline operator notation,yesterday formerlyoffetchnotes pal giles van gruisen published cool piece infix pipeline operator come swift syntax extension allows one go traditional nested format long verbose sequential format go coder may familiar safely handling optionals concise sequential format traditional nesting handling optionals let b optionalproducer let c anotheroptionalproducer b dosomething c pipeline optionals optionalproducer anotheroptionalproducer dosomething syntax make code much clear readable interestingly also pretty similar donotation haskell monad hood giles swift pipeline haskell monad utilizing concept constructing chain function application handle impure operation ie external state function chain may fail therefore produce nil kind bad data however compared complexity haskell think swift pipeline much understandable usable basic daytoday task creating website iosmac application forth us simple yet powerful syntax extension enable write clean concise code also application basic functional programming concept real world task common programming task normal human much relevant abstract complex functional theory esoteric syntaxesconstructs hopefully future see even instance people utilizing new crop powerful compiler come cool utility like pipeline operator
224,Lobsters,swift,Swift programming,The future of interface building in Cocoa,https://dirk.to/blog/2014/12/18/future-of-interface-building.html,future interface building cocoa,lot stylesheets appkit uikit interface builder isolation mode curse interactivity mvvm way forward ibdesignable ibinspectable computed property,methodology building interface cocoa changed lot past year tension side buildinginterfacesthroughcode side buildinginterfacesthroughinterface builder former give far immediate control interface appear sort stuff price really long hairy view code hundred line verbose boilerplate code filled integer constant layout math pretty sight attempt reduce cssinspired stylesheets configuring interface layout system appkit uikit different html dom adaptation really feel natural work well alternative course use interface builder apple want however interface builder long big clunky system prone weird behavior also best navigation worked like adobe illustrator one easily navigate hierarchical document double click extremelyuseful isolation mode curse interactivity compound struggle must toss fact interface must interactive introduces whole new set demand build interface interfacesthroughcode approach requires throw even minutiafilled animation code interface builderbased approach requires wade arcane animation system neither appealing prospect furthermore interface accept andor present information fromto external source must add glue code handle shuffling data interface backend data system people tried declutter mvvm approach far seems ended multiplying amount glue code introducing extra complexity opportunity bug andor confusion deal model view model view controller view lot layer onion probably going cause lot tear way forward good news apple seems making great stride simplifying whole setup first new ibdesignable ibinspectable system allow far powerful interface construction closer tiein see interface builder write code user ultimately experience application truly great second powerful new computed property functionality swift using lot recently bridge gap data view controller data visual interface instead complicated glue code view class whole viewmodel sitting use computed property getter setter view class view controller interacts computed property providing clear separation concern view controller backend data layer view frontend presentation layer muchsimplified version arrangement class viewcontroller func doingsomething bar bazobject viewbar bar func doingsomethingelse let bar viewbar greatcomplexity bar class view get return bar baz textfieldtext set bar textfieldtext barbaz compared clunky glue code past feel like breath fresh spring air could bring sort straightforward controllerview connection clean code environment looking html javascript
225,Lobsters,swift,Swift programming,Why we're rewriting our robotics software in Swift,http://www.sunsetlakesoftware.com/2014/12/02/why-were-rewriting-our-robotics-software-swift,rewriting robotics software swift,background sonoplot robotic system printing liquid microscale printing microcircuitry rapid prototyping depositing biological material fabricating artificial cell janie clayton excellent molecular modeler io sdk development io development program madison college fun experimenting gpuimage problem bug shipped customer last three year would caught immediately using swift faithbased casting nil silent killer along technique functional programming world problem objectivec error handling crash due error scribbled upon internally look error crash episode edge case podcast post llamakit talked detail rob napier llamakit mailing list reducing mutable state avoid coupling wwdc session advanced io application architecture pattern andy recent objcio article value type manuel chakravarty recent talk sydney cocoaheads writing testable code legacy code learn haskell great good ihaskell watch simon peytonjones introduce language blog post functional programming swift long way go public repository strippeddown version code github,sonoplot undertook full rewrite robotic control software objectivec swift first might appear crazy rework large stable project brandnew language carefully examining source bug objectivec application determining swift would prevent large percentage started learned enough far thought would value sharing background first start little background ceo company called sonoplot build robotic system printing liquid microscale machine diverse range application printing microcircuitry rapid prototyping depositing biological material fabricating artificial cell originally built software system crossplatform manner targeting mac window linux using c codebase eight year ago realized small team needed focus one platform order accelerate development take much larger competitor lengthy evaluation window mac linux development environment chose mac cocoa despite none u much experience mac rewrote entire control software cocoa seven year ago looking back feel one best decision company made date one writing code company however significant growth business recent year fact role ceo nt afforded much time write software became clear needed help hired janie clayton worked successful national science foundation grant led excellent molecular modeler incredibly impressed willingness jump headfirst difficult topic story going developer coauthor new io sdk development couple year also talk io development program madison college one first question asked whether plan rewrite part control software swift response time hear many others reason rework currently shipping objectivec application swift swift might useful new project fun experimenting gpuimage saw little gained chasing new shiny thing proven codebase problem started taking hard look control software issue maintaining last year many customer field using system many different thing even obscure bug affect good number people complexity software also grown point chance change introducing bug like increased dramatically fact span year half nothing fix one critical bug another little forward progress highly requested new feature one first thing janie hired take audit bug shipped customer last three year wanted understand root cause problem slipped testing several case led real expensive damage hardware field indeed see surprising pattern cause bug found repeatedly saying janie particular bug would nt even compiled swift would thrown immediate exception totaled bug like found bug shipped customer last three year would caught immediately using swift primary class bug silent failure due nilmessaging improperly handled nserrors objectivec error failure bad object typecasts wrong enum lookup table used value referring bad object typecasts usually talking matt drance coined faithbased casting might nsarray strong type object contained within try pull assume nsstring find runtime really nsnumber likewise context object provided id type dangerous believe one type object instead another either end changed without updating compile fine cause nasty crash worse runtime slipped test swift strong type prevent compile time used properly talk swift new enum type later decoupling integer numeric type mean guarantee one type enum nt accidentally used place another accident possible objectivec leading wrong lookup table used something like error classification one subtle bug software introduced something like also swift descriptive enum case make case clear point used saving trip lookup table know stand two group bug deserve little detail nil silent killer moved c development objectivec one thing enjoyed longer needing check nil pointer prevent crash silent failing message sent nil object seemed like tremendous convenience allowed reduce amount code wrote however seen enough nasty failure case nil messaging enthusiastically welcome swift optionals message sent nil object nt throw compiler error generally nt lead crash obvious behavior catch runtime make improper nil messaging extremely hard track even thorough testing every cocoa programmer worked interface builder point forgotten connect iboutlet interface element one class property leaving property nil usually fumble around trying figure clicking button nt anything realize wrong however complex enough interface lastminute change code occasionally missing connection overlooked testing get shipped customer cause everything irritation disabled feature damage field said interface element something like adjust movement speed robotics system one way many u address using runtime assertion iboutlets crash nil connection instead silently failing returning value accessed however requires u identify iboutlet write assertion code make sure keep date missing single one lead bug slipping replacing property optionals swift using forced unwrapping help protect used consistently least prevent case unconnected iboutlets accessed code crashing clear manner instant messaged allows property caught earlier testing shipped customer nt catch case button never accessed code would prevented troublesome bug class finally let talk one specific bug nil messaging cost u lot money software use object represent coordinate space associated method processing manipulation robot need commanded move particular location coordinate object passed series method end coordinating three ax motion travel point lowest level x z coordinate point retrieved object accessing property turned certain rare circumstance nil value ended passed movement method due premature invalidation coordinate object robot lowest point z axis z value increasing z axis move happens query integer value property sending message nil object get back nil object passed movement method robot would promptly drive print head clean deck positioning system smashing one bug maybe cost u total replacement hardware support expense time triggered field new language feature optionals swift seem complainedabout among objectivec developer know however believe safety introduce really nasty bug far outweighs inconvenience writing code inconvenience even alleviated using syntactic sugar apple provided type along technique functional programming world would much rather code fail early preferably compile time leave open possibility shipping another bug like customer problem objectivec error handling control software make extensive use error handling interacting multiple piece hardware kind thing cause error em interference sensor line dropped byte port obstruction robot path camera unplugged etc generate handle lot error internally many recovered without involving operator require manual intervention appropriate instruction warning result lot code us standard objectivec pattern handling error typically look something like following bool settriggervalue unsigned char newvalue error nserror error unsigned char triggercommand triggercommand triggercommand newvalue self sendcommandtoelectronics triggercommand error error return unsigned char charactertoread self readresponsefromelectronics charactertoread error error return charactertoread error nil error spelectronics errorforelectronicserrortype corruptresponsefromelectronics recoveryattempter self return return yes method sends twobyte command serial port piece hardware read back single byte confirm successful transmission fail multiple place timeout corruption writing value timeout incorrect number byte reading response non value read back command failed need accounted objectivec method c function return one value order able return error parallel result pas nserror double pointer check return method see signifies error immediately see fairly clunky something intended output passed input get worse though many cocoa method even try access error without checking return value first crash due error scribbled upon internally pay attention failure state result vary different data type returning nil object sometimes failure condition sometimes leading silent failure described diligent processing error boolean used others scalar type might magic constant denotes error hopefully would never return legitimate result passing around nserror double pointer lead problem create nserror top level pas way execution chain bubble way back point get screwed passing nil nserror beginning note explicitly check passing back custom error hit null pointer dereference crash worse larger problem never forced think error state freely pas nil error forget need account erroneous result due failed operation regret code ship customer want compiler make sure always accounting failable operation even explicitly ignore error case bitten many time missed error handling code problem method error handling recommend listening jonathan wolf rentzsch diatribe look error crash episode edge case podcast thankfully swift provides u elegant way approaching problem friend chris cieslak describes post day swift announced seen many others converge method error handling process relies swift new enums support associated valued algebraic type combined generic use enum represent result failable operation either return value successful operation whatever type value may error generated operation either succeed fail returned value appropriate either condition result type look like following swift box temporary workaround current compiler shortcoming public enum result u case success box case failure box u effectively either type haskell built serve similar purpose move returnable error input output relieving pas blank one get rid magic constant way signifying failure prevents nserror pointerrelated crash force think possibility failure general structure box implementation drawn rob napier llamakit using generic encapsulated success failure type make extensible possible still preserving strong type want make sure still tell int returned result ca nt sent something taking string etc also leaving open various error type nserror reason discus shortly might worried switch statement need use handle error success case learn little haskell functional language use monadic bind simplify scary name monadic bind applied actually simple function either kick back error result failure unwraps success value pass operation succeeded set method result called func v nextoperation result v u result v u switch self case let failure boxederror return failure boxederror case let success boxedresult return nextoperation boxedresultunbox using operator haskell bind nt read cleanest understand argument maintaining name building upon year work functional programming language lean towards making code accessible preserving history see bit use creates nice flow reading sequential operation using result bind operation objectivec method converted swift function like func settriggervalue serialport serialport trigger result communicationserror let commandcharacter unicodescalar value let commandtowrite commandcharacter trigger let response writebytestoserialport bytestowrite commandtowrite serialport serialport readbytesfromserialport serialport serialport bytesread array result communicationserror bytesread commandcharacter return success box else return failure box corruptedresponse expectedresponse commandcharacter receivedresponse bytesread return ignorevaluebutkeeperror response way code work first writing command serial port return result value result failure method bail return failure associated error otherwise proceeds next step read byte serial port fails bail return error succeeds however byte read serial port unboxed success type passed next operation lone byte read checked make sure value expect success returned construct corruptedresponse error contains context need wrap failure return gone line code making safer robust nt worry nserror shenanigan forgetting handle failure state everything strongly typed whole way know part connect together correctly may notice using nserror error type instead something called communicationserror come believe nserror fine error type objectivec longer best way error swift talked detail rob napier llamakit mailing list think power enums associated value make better choice error type nserrors rely internal integer error code trust enum lookup table described sometimes wrong table used associated data dictionary loosely typed bag attached value fun look document key used creation custom error like objectivec example often require helper method encapsulate setup code instead use swift enums provide strong type much associated information need prevent confusion error value communicationserror look something like following enum communicationserror case readwritetimeout case wrongbytecount expectedbytecount uint receivedbytecount uint case corruptedresponse expectedresponse receivedresponse simple readable yet containing context need want return error return readwritetimeout helper method lookup table required replaced nserror internal error consider large win reducing mutable state avoid coupling ok described way avoid catch bug made customer remaining may immediately eliminated swift language feature swift provides u better way reducing catching even largest remaining source bug change one section code cause unanticipated effect another seemingly unrelated section codebase grew complexity odds happening detrimental effect almost always due shared mutable state variable class object mutable reference passed multiple object operation performed one area code change mutates value object lead spooky action distance another otherwise unrelated section saw clear evidence many many bug audit kind interaction lead level complexity fragility code make incredibly hard maintain swift enhanced value type structs enums stronger support declaring thing immutable make much easier start decoupling code avoid unexpected sideeffects wo nt spend much time describing andy matuschak colin barrett describe clearly wwdc session advanced io application architecture pattern highly recommend watch read andy recent objcio article value type finally manuel chakravarty recent talk sydney cocoaheads mustwatch care making swift application safer regard writing testable code reading issue bug shipped customer might questioning thorough test first admit codebase pretty terrible unit test coverage clear example legacy code something want change date relied higherlevel testing protocol required running control software series common action real hardware process take full day run requires manual supervision clearly miss many bug wanted provide lowerlevel unit test coverage particularly troublesome area known problem however structure code made difficult even start complex interacting object encapsulate lot functionality interact multiple piece hardware proved quite challenge write unit test addition coupling mutable state talked needed rearchitect make testable learning haskell parallel swift strongly typed functional nature language colored interaction swift something highly recommend swift developer start learn haskell great good ihaskell session even watch simon peytonjones introduce language one best lesson taken away build pure function take clear input clear output produce side effect pure function deterministic nature make easy unit test result type describe really help make input output failable function clear sample serial port function show nt pure involves side effect communication outside piece hardware made deterministic testing using fake serial port something let u build unit test kind functionality previously needed actual hardware test main real serial port class look something like typealias ftdifunction fthandle lpvoid dword lpdword ftstatus class serialport let ftdicommport fthandle init ftdicommport fthandle selfftdicommport ftdicommport var readfunction ftdifunction return ftread var writefunction ftdifunction return ftwrite using ftdi usbtoserial chip hardware communicate via library read write command signature use higherorder function swap function used reading writing serial port generic function handle read writes error case follows one specialization func genericserialcommunication bytestoreadorwrite numberofbytes uint serialport serialport communicationfunction ftdifunction result communicationserror var ftdiportstatus ftstatus ftstatus ftok var byteswrittenorread dword var bytestransmitted bytestoreadorwrite runonmainqueue ftdiportstatus communicationfunction serialportftdicommport lpvoid bytestransmitted dword numberofbytes byteswrittenorread ftdiportstatus ftstatus ftok return failure box readwritetimeout byteswrittenorread dword numberofbytes return failure box wrongbytecount expectedbytecount numberofbytes receivedbytecount uint byteswrittenorread return success box bytestransmitted func readbytesfromserialport numberofbytes uint serialport serialport result communicationserror var bytestoread count int numberofbytes return genericserialcommunication bytestoreadorwrite bytestoread numberofbytes numberofbytes serialport serialport communicationfunction serialportreadfunction organization like make easy u subclass serial port create fake port testing purpose higherorder function used create communication function fail controlled way test communication error return specific sequence byte provide instead ftdi function fully simulate actual hardware attached computer way highest level code fake serial port take list enums representing sequential read write response serial port return matching function interacted let u set deterministic behavior otherwise pure function take serial port input one example function replace one library function might need serial port respond custom sequence byte need provide function still matched ftdi function signature shown use following function func custombytesfunction byte fthandle bytearray lpvoid bytestoreadorwrite dword byteswrittenorreadpointer lpdword ftstatus var byteswrittenorread unsafemutablepointer dword byteswrittenorreadpointer byteswrittenorread dword bytescount var outputbytearray unsafemutablepointer bytearray indexofbyte bytescount outputbytearray indexofbyte byte indexofbyte return ftstatus ftok good example curried function curried function one provide argument case byte passed back get back function need remaining argument specified provide byte want return function specialized based function fit signature serial port communication function often need test result type verify nt get failure expected success vice versa whatever boxed failure success type match expectation created helper function like func assertresultsareequal equatable u equatable lh result u rh result u file string file line uint line switch lh rh case let success boxedvalue success xctassert boxedvalueunbox expected success value instead got back boxedvalueunbox file file line line case let success failure xctassert false success failure file file line line case let failure success xctassert false failure success file file line line case let failure boxederror failure xctassert boxederrorunbox expected failure value got back boxederrorunbox file file line line note use file line constant swift team describes blog post xctasserts mark failure point assertresultsareequal used within function also variant assertion u equatable type caring comparing result type error type higherorder function function currying swift pattern matching switch statement use generic make clean reusable code unit test case intrigued functional swift capability highly recommend reading functional programming swift chris eidhof florian kugler wouter swierstra overall writing unit test convert bit functionality swift already exposed number subtle issue missed ability set artificial communication sequence allow u reproduce specific condition might otherwise week continuous hardware operation number people remark safety improvement testing propose really useful safeguarding new developer might useful experienced one let tell recently lone author control software consider reasonably experienced cocoa developer yet responsible stupid bug got shipped customer warmly welcome anything prevent making mistake long way go wanted write completed rewrite control software still going take complete learned enough date felt worth sharing feeling revisit later even get deeper project likewise still early day swift tool problem encountered working largest need box wrapper class result type use everywhere since current compiler throw unimplemented ir generation feature nonfixed multipayload enum layout error try use generic directly within enum really hoping get fixed soon also challenging unclear sometimes misdirecting error message compiler throw encounter mismatched type general fact error almost always correct trying puzzle error line code tends take longer compiler tendency tell particular type wrong instead another unrelated type line actual problem example seen error could find member success really type used success wrong success instead success text still something compiles feel confident gotten right minor thing like string interpolation broken enums present none showstopper u said many complaint read developer swift come trying directly translate objectivec code new language swift new language present u opportunity approach common problem different way think worth reexamining objectivec pattern rather blindly continuing hope written illustrates might lead cleaner safer code code seems complex inscrutable created public repository strippeddown version code github grab project hopefully see tinker general structure described
226,Lobsters,swift,Swift programming,Swift and Go - Building A Fast Future,http://axioms.io/zen/2014-11-06-swift-go/,swift go building fast future,pay go,pay go charged monthly active user mau pay go payg plan start newpayg charge waived beta period
227,Lobsters,swift,Swift programming,"Introducing Phoenix, Swift set free.",https://ind.ie/phoenix/,introducing phoenix swift set free,vision time move beyond cloud project stratosphere heartbeat business model differs google apple sell product customer user whereas company like google sell user customer user tiny team long road freedom spyware,vision time move beyond cloud cloud centralised owned controlled someone else spy building new postcloud platform network called indienet indienet peertopeer social network sits top internet overlap web project stratosphere project stratosphere multiyear mission create peertopeer consumer platform empower share thing matter people care starting building heartbeat social network client mac like think indienet browser purposefully starting small private alpha goal iterate perfect user experience chose mac platform various reason business model differs google apple sell product customer user whereas company like google sell user customer user apple closed proprietary company spyware company like google believe need free open independent alternative longterm health freedom democracy platform good shortterm stopgap mac provides u framework tool need quickly create great user experience benefit focus accessibility use mac working platform whose culture familiar eating dog food intermediateterm goal also support io given tiny team currently limiting heartbeat two platform course since heartbeat released free open software currently considering agpl license feel want fork port platform welcome simply foresee resource short term even coordinate mammoth undertaking endgame produce independent consumer device running heartbeat natively currently vision phone long road freedom getting started together build future independent alternative spyware company like google facebook
229,Lobsters,swift,Swift programming,Why iOS Developers Still Need to Know Objective-C,http://developer.telerik.com/featured/ios-developers-still-need-know-objective-c/,io developer still need know objectivec,wwdc swift future message swift developer learn objectivec since swift launched debugging nasty bug many even nasty bug table view section io empty search history taught u transition going take time transition guide autolayout demo code production code swift still evolving nt say ignore everything pen image provided space shuttle image provided dlrthilo kranz,remember well wwdc apple first announced new programming language io called swift first thought passed mind attendee something along line wait love objectivec got ta learn another language way build apps io apple quickly put developer room ease gently introduced swift provided answer looking apple announced io developer use swift would benefit modern language included plethora new feature strong typing type inference generic etc feature objectivec developer excited cost turn cost learning swift programming language learning new programming language certainly nt scare away objectivec developer none new feature swift showstopper using objectivec build mobile apps since march iphone o thing quite different developer either little experience developing objectivec thought seemed following yes successfully avoided objectivec swift file header implementation file awesome total ripoff insert language rest talk could hear swift swift swift key takeaway swift replacement objectivec future last part quickly forgotten message swift developer let look following objectivec snippet multidimensional array display value output window xcode import foundationfoundationh int main array row column int int j output array element value j j j nslog dn j j return result anything look familar maybe declaration j loop going declaration silly syntax nslog know nt want write code neither regardless want going looking time learn objectivec since swift launched good question let address reason debugging nasty bug built published app mobile store certainly ran nasty bug somewhere development process know many regardless using swift objectivec write app underlying framework written objectivec bug deep execution stack require knowledge swift language even nasty bug writing app swift encountered problem tableview suppose show data nt great programmer would quick search google table view section io empty search result quickly see included many solution unforunately involved objectivec code included swift search unforunately nt solution getting started guide writing long take solution include swift one year two year one know know developer community speaks objectivec io developer community speaks objectivec history taught u transition going take time many time cringe saw release retain well automatic reference counting arc implemented apple released transition guide supposed ease pain instead many developer went habit keep using manual reference counting autolayout developer tried first designer could nt get effect wanted code still nt get wanted dismissed saying next version xcode come thing take time developer adopt two example demo code production code saw fast swift wwdc keynote fast really comparison various blog stackoverflow using various build swift swift perform realworld application need speed used objectivec rest assured time swift get better time wait swift still evolving swift know purpose nothing beat experience big brother objectivec need add c code io app need know objectivec nt say ignore first admit objectivec hard learn swift much easier nt get wrong nt know everything objectivec write apps swift able read well enough get hump described swift bright future take time mature objectivec personally look forward developing swift stick objectivec feel free leave comment right way base pen image provided space shuttle image provided dlrthilo kranz
